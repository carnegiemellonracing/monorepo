
HVC-debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001dc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c330  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f10  0800c510  0800c510  0001c510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e420  0800e420  0001e420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e428  0800e428  0001e428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e42c  0800e42c  0001e42c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  0800e430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0003449c  200001dc  0800e60c  000201dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20034678  0800e60c  00024678  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d59a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005471  00000000  00000000  0003d7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001710  00000000  00000000  00042c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000014c8  00000000  00000000  00044328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00025bec  00000000  00000000  000457f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f693  00000000  00000000  0006b3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d6e17  00000000  00000000  0008aa6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00161886  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005c20  00000000  00000000  001618d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c4f8 	.word	0x0800c4f8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	0800c4f8 	.word	0x0800c4f8

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2iz>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009c4:	d215      	bcs.n	80009f2 <__aeabi_d2iz+0x36>
 80009c6:	d511      	bpl.n	80009ec <__aeabi_d2iz+0x30>
 80009c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d0:	d912      	bls.n	80009f8 <__aeabi_d2iz+0x3c>
 80009d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009e2:	fa23 f002 	lsr.w	r0, r3, r2
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d105      	bne.n	8000a04 <__aeabi_d2iz+0x48>
 80009f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	bf08      	it	eq
 80009fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a02:	4770      	bx	lr
 8000a04:	f04f 0000 	mov.w	r0, #0
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b974 	b.w	8000d0c <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	4604      	mov	r4, r0
 8000a44:	468e      	mov	lr, r1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d14d      	bne.n	8000ae6 <__udivmoddi4+0xaa>
 8000a4a:	428a      	cmp	r2, r1
 8000a4c:	4694      	mov	ip, r2
 8000a4e:	d969      	bls.n	8000b24 <__udivmoddi4+0xe8>
 8000a50:	fab2 f282 	clz	r2, r2
 8000a54:	b152      	cbz	r2, 8000a6c <__udivmoddi4+0x30>
 8000a56:	fa01 f302 	lsl.w	r3, r1, r2
 8000a5a:	f1c2 0120 	rsb	r1, r2, #32
 8000a5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a66:	ea41 0e03 	orr.w	lr, r1, r3
 8000a6a:	4094      	lsls	r4, r2
 8000a6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a70:	0c21      	lsrs	r1, r4, #16
 8000a72:	fbbe f6f8 	udiv	r6, lr, r8
 8000a76:	fa1f f78c 	uxth.w	r7, ip
 8000a7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a82:	fb06 f107 	mul.w	r1, r6, r7
 8000a86:	4299      	cmp	r1, r3
 8000a88:	d90a      	bls.n	8000aa0 <__udivmoddi4+0x64>
 8000a8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a92:	f080 811f 	bcs.w	8000cd4 <__udivmoddi4+0x298>
 8000a96:	4299      	cmp	r1, r3
 8000a98:	f240 811c 	bls.w	8000cd4 <__udivmoddi4+0x298>
 8000a9c:	3e02      	subs	r6, #2
 8000a9e:	4463      	add	r3, ip
 8000aa0:	1a5b      	subs	r3, r3, r1
 8000aa2:	b2a4      	uxth	r4, r4
 8000aa4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab0:	fb00 f707 	mul.w	r7, r0, r7
 8000ab4:	42a7      	cmp	r7, r4
 8000ab6:	d90a      	bls.n	8000ace <__udivmoddi4+0x92>
 8000ab8:	eb1c 0404 	adds.w	r4, ip, r4
 8000abc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac0:	f080 810a 	bcs.w	8000cd8 <__udivmoddi4+0x29c>
 8000ac4:	42a7      	cmp	r7, r4
 8000ac6:	f240 8107 	bls.w	8000cd8 <__udivmoddi4+0x29c>
 8000aca:	4464      	add	r4, ip
 8000acc:	3802      	subs	r0, #2
 8000ace:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ad2:	1be4      	subs	r4, r4, r7
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	b11d      	cbz	r5, 8000ae0 <__udivmoddi4+0xa4>
 8000ad8:	40d4      	lsrs	r4, r2
 8000ada:	2300      	movs	r3, #0
 8000adc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d909      	bls.n	8000afe <__udivmoddi4+0xc2>
 8000aea:	2d00      	cmp	r5, #0
 8000aec:	f000 80ef 	beq.w	8000cce <__udivmoddi4+0x292>
 8000af0:	2600      	movs	r6, #0
 8000af2:	e9c5 0100 	strd	r0, r1, [r5]
 8000af6:	4630      	mov	r0, r6
 8000af8:	4631      	mov	r1, r6
 8000afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afe:	fab3 f683 	clz	r6, r3
 8000b02:	2e00      	cmp	r6, #0
 8000b04:	d14a      	bne.n	8000b9c <__udivmoddi4+0x160>
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d302      	bcc.n	8000b10 <__udivmoddi4+0xd4>
 8000b0a:	4282      	cmp	r2, r0
 8000b0c:	f200 80f9 	bhi.w	8000d02 <__udivmoddi4+0x2c6>
 8000b10:	1a84      	subs	r4, r0, r2
 8000b12:	eb61 0303 	sbc.w	r3, r1, r3
 8000b16:	2001      	movs	r0, #1
 8000b18:	469e      	mov	lr, r3
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d0e0      	beq.n	8000ae0 <__udivmoddi4+0xa4>
 8000b1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b22:	e7dd      	b.n	8000ae0 <__udivmoddi4+0xa4>
 8000b24:	b902      	cbnz	r2, 8000b28 <__udivmoddi4+0xec>
 8000b26:	deff      	udf	#255	; 0xff
 8000b28:	fab2 f282 	clz	r2, r2
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	f040 8092 	bne.w	8000c56 <__udivmoddi4+0x21a>
 8000b32:	eba1 010c 	sub.w	r1, r1, ip
 8000b36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3a:	fa1f fe8c 	uxth.w	lr, ip
 8000b3e:	2601      	movs	r6, #1
 8000b40:	0c20      	lsrs	r0, r4, #16
 8000b42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b46:	fb07 1113 	mls	r1, r7, r3, r1
 8000b4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b4e:	fb0e f003 	mul.w	r0, lr, r3
 8000b52:	4288      	cmp	r0, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x12c>
 8000b56:	eb1c 0101 	adds.w	r1, ip, r1
 8000b5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x12a>
 8000b60:	4288      	cmp	r0, r1
 8000b62:	f200 80cb 	bhi.w	8000cfc <__udivmoddi4+0x2c0>
 8000b66:	4643      	mov	r3, r8
 8000b68:	1a09      	subs	r1, r1, r0
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b70:	fb07 1110 	mls	r1, r7, r0, r1
 8000b74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b78:	fb0e fe00 	mul.w	lr, lr, r0
 8000b7c:	45a6      	cmp	lr, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x156>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x154>
 8000b8a:	45a6      	cmp	lr, r4
 8000b8c:	f200 80bb 	bhi.w	8000d06 <__udivmoddi4+0x2ca>
 8000b90:	4608      	mov	r0, r1
 8000b92:	eba4 040e 	sub.w	r4, r4, lr
 8000b96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b9a:	e79c      	b.n	8000ad6 <__udivmoddi4+0x9a>
 8000b9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ba0:	40b3      	lsls	r3, r6
 8000ba2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ba6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000baa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bae:	fa01 f306 	lsl.w	r3, r1, r6
 8000bb2:	431c      	orrs	r4, r3
 8000bb4:	40f9      	lsrs	r1, r7
 8000bb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bba:	fa00 f306 	lsl.w	r3, r0, r6
 8000bbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bc2:	0c20      	lsrs	r0, r4, #16
 8000bc4:	fa1f fe8c 	uxth.w	lr, ip
 8000bc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000bd4:	4288      	cmp	r0, r1
 8000bd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bda:	d90b      	bls.n	8000bf4 <__udivmoddi4+0x1b8>
 8000bdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000be0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000be4:	f080 8088 	bcs.w	8000cf8 <__udivmoddi4+0x2bc>
 8000be8:	4288      	cmp	r0, r1
 8000bea:	f240 8085 	bls.w	8000cf8 <__udivmoddi4+0x2bc>
 8000bee:	f1a8 0802 	sub.w	r8, r8, #2
 8000bf2:	4461      	add	r1, ip
 8000bf4:	1a09      	subs	r1, r1, r0
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000c00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c08:	458e      	cmp	lr, r1
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x1e2>
 8000c0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c14:	d26c      	bcs.n	8000cf0 <__udivmoddi4+0x2b4>
 8000c16:	458e      	cmp	lr, r1
 8000c18:	d96a      	bls.n	8000cf0 <__udivmoddi4+0x2b4>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4461      	add	r1, ip
 8000c1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c22:	fba0 9402 	umull	r9, r4, r0, r2
 8000c26:	eba1 010e 	sub.w	r1, r1, lr
 8000c2a:	42a1      	cmp	r1, r4
 8000c2c:	46c8      	mov	r8, r9
 8000c2e:	46a6      	mov	lr, r4
 8000c30:	d356      	bcc.n	8000ce0 <__udivmoddi4+0x2a4>
 8000c32:	d053      	beq.n	8000cdc <__udivmoddi4+0x2a0>
 8000c34:	b15d      	cbz	r5, 8000c4e <__udivmoddi4+0x212>
 8000c36:	ebb3 0208 	subs.w	r2, r3, r8
 8000c3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c42:	fa22 f306 	lsr.w	r3, r2, r6
 8000c46:	40f1      	lsrs	r1, r6
 8000c48:	431f      	orrs	r7, r3
 8000c4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c4e:	2600      	movs	r6, #0
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	40d8      	lsrs	r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	fa21 f303 	lsr.w	r3, r1, r3
 8000c64:	4091      	lsls	r1, r2
 8000c66:	4301      	orrs	r1, r0
 8000c68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6c:	fa1f fe8c 	uxth.w	lr, ip
 8000c70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c74:	fb07 3610 	mls	r6, r7, r0, r3
 8000c78:	0c0b      	lsrs	r3, r1, #16
 8000c7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c82:	429e      	cmp	r6, r3
 8000c84:	fa04 f402 	lsl.w	r4, r4, r2
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x260>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c92:	d22f      	bcs.n	8000cf4 <__udivmoddi4+0x2b8>
 8000c94:	429e      	cmp	r6, r3
 8000c96:	d92d      	bls.n	8000cf4 <__udivmoddi4+0x2b8>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	b289      	uxth	r1, r1
 8000ca0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ca4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ca8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cac:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb0:	428b      	cmp	r3, r1
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x28a>
 8000cb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cbc:	d216      	bcs.n	8000cec <__udivmoddi4+0x2b0>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d914      	bls.n	8000cec <__udivmoddi4+0x2b0>
 8000cc2:	3e02      	subs	r6, #2
 8000cc4:	4461      	add	r1, ip
 8000cc6:	1ac9      	subs	r1, r1, r3
 8000cc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ccc:	e738      	b.n	8000b40 <__udivmoddi4+0x104>
 8000cce:	462e      	mov	r6, r5
 8000cd0:	4628      	mov	r0, r5
 8000cd2:	e705      	b.n	8000ae0 <__udivmoddi4+0xa4>
 8000cd4:	4606      	mov	r6, r0
 8000cd6:	e6e3      	b.n	8000aa0 <__udivmoddi4+0x64>
 8000cd8:	4618      	mov	r0, r3
 8000cda:	e6f8      	b.n	8000ace <__udivmoddi4+0x92>
 8000cdc:	454b      	cmp	r3, r9
 8000cde:	d2a9      	bcs.n	8000c34 <__udivmoddi4+0x1f8>
 8000ce0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ce4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ce8:	3801      	subs	r0, #1
 8000cea:	e7a3      	b.n	8000c34 <__udivmoddi4+0x1f8>
 8000cec:	4646      	mov	r6, r8
 8000cee:	e7ea      	b.n	8000cc6 <__udivmoddi4+0x28a>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	e794      	b.n	8000c1e <__udivmoddi4+0x1e2>
 8000cf4:	4640      	mov	r0, r8
 8000cf6:	e7d1      	b.n	8000c9c <__udivmoddi4+0x260>
 8000cf8:	46d0      	mov	r8, sl
 8000cfa:	e77b      	b.n	8000bf4 <__udivmoddi4+0x1b8>
 8000cfc:	3b02      	subs	r3, #2
 8000cfe:	4461      	add	r1, ip
 8000d00:	e732      	b.n	8000b68 <__udivmoddi4+0x12c>
 8000d02:	4630      	mov	r0, r6
 8000d04:	e709      	b.n	8000b1a <__udivmoddi4+0xde>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	e742      	b.n	8000b92 <__udivmoddi4+0x156>

08000d0c <__aeabi_idiv0>:
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <setBMBErr>:
		{ 28459, 350 }, { 31533, 300 }, { 34744, 250 }, { 38019, 200 }, {
				41331, 150 }, { 44621, 100 }, { 47792, 50 }, { 50833, 0 }, };

static const uint16_t idealFixedVals[8] = {645, 564, 483, 403, 322, 241, 161, 80};

static void setBMBErr(uint8_t BMBIndex, BMB_I2C_Errs_t err) {
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	460a      	mov	r2, r1
 8000d1a:	71fb      	strb	r3, [r7, #7]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	71bb      	strb	r3, [r7, #6]
	if (BMBErrs[BMBIndex] == BMB_NO_ERR) {
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <setBMBErr+0x34>)
 8000d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d104      	bne.n	8000d36 <setBMBErr+0x26>
		BMBErrs[BMBIndex] = err;
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	79ba      	ldrb	r2, [r7, #6]
 8000d30:	4904      	ldr	r1, [pc, #16]	; (8000d44 <setBMBErr+0x34>)
 8000d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	200058ac 	.word	0x200058ac

08000d48 <adcOutputToVoltage>:

//takes in adc output and cell index to get voltage value
static int16_t adcOutputToVoltage(uint16_t ADC_val, int cell) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	80fb      	strh	r3, [r7, #6]
	return ((ADC_val / 1024.0) * 4096) / 0.91;
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fbb4 	bl	80004c4 <__aeabi_i2d>
 8000d5c:	f04f 0200 	mov.w	r2, #0
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <adcOutputToVoltage+0x68>)
 8000d62:	f7ff fd43 	bl	80007ec <__aeabi_ddiv>
 8000d66:	4602      	mov	r2, r0
 8000d68:	460b      	mov	r3, r1
 8000d6a:	4610      	mov	r0, r2
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f04f 0200 	mov.w	r2, #0
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <adcOutputToVoltage+0x6c>)
 8000d74:	f7ff fc10 	bl	8000598 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4610      	mov	r0, r2
 8000d7e:	4619      	mov	r1, r3
 8000d80:	a309      	add	r3, pc, #36	; (adr r3, 8000da8 <adcOutputToVoltage+0x60>)
 8000d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d86:	f7ff fd31 	bl	80007ec <__aeabi_ddiv>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	4610      	mov	r0, r2
 8000d90:	4619      	mov	r1, r3
 8000d92:	f7ff fe13 	bl	80009bc <__aeabi_d2iz>
 8000d96:	4603      	mov	r3, r0
 8000d98:	b21b      	sxth	r3, r3
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	f3af 8000 	nop.w
 8000da8:	51eb851f 	.word	0x51eb851f
 8000dac:	3fed1eb8 	.word	0x3fed1eb8
 8000db0:	40900000 	.word	0x40900000
 8000db4:	40b00000 	.word	0x40b00000

08000db8 <lutTemp>:

// Returns temperature in 1/10th degC given ADC
// using LUT interpolation from the transfer function.
// See drive doc "18e CMR BMS Temperature Math" for LUT
static int16_t lutTemp(uint16_t ADC_lt) {
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	80fb      	strh	r3, [r7, #6]
	// Check if input is out of LUT bounds
	// If so, return the boundary values
	if (ADC_lt < lut[0][0]) {
 8000dc2:	f242 2262 	movw	r2, #8802	; 0x2262
 8000dc6:	88fb      	ldrh	r3, [r7, #6]
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d203      	bcs.n	8000dd4 <lutTemp+0x1c>
		return lut[0][1];
 8000dcc:	f240 3352 	movw	r3, #850	; 0x352
 8000dd0:	b21b      	sxth	r3, r3
 8000dd2:	e05a      	b.n	8000e8a <lutTemp+0xd2>
	}
	if (ADC_lt > lut[LUT_SIZE - 1][0]) {
 8000dd4:	2312      	movs	r3, #18
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	4a2f      	ldr	r2, [pc, #188]	; (8000e98 <lutTemp+0xe0>)
 8000dda:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000dde:	88fa      	ldrh	r2, [r7, #6]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d907      	bls.n	8000df4 <lutTemp+0x3c>
		return lut[LUT_SIZE - 1][1];
 8000de4:	2312      	movs	r3, #18
 8000de6:	3b01      	subs	r3, #1
 8000de8:	4a2b      	ldr	r2, [pc, #172]	; (8000e98 <lutTemp+0xe0>)
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	885b      	ldrh	r3, [r3, #2]
 8000df0:	b21b      	sxth	r3, r3
 8000df2:	e04a      	b.n	8000e8a <lutTemp+0xd2>
	}

	// Modified LUT linear interpolation code from stack overflow
	uint8_t i;
	for (i = 0; i < LUT_SIZE - 1; ++i) {
 8000df4:	2300      	movs	r3, #0
 8000df6:	73fb      	strb	r3, [r7, #15]
 8000df8:	e040      	b.n	8000e7c <lutTemp+0xc4>
		if (lut[i][0] <= ADC_lt && lut[i + 1][0] >= ADC_lt) {
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	4a26      	ldr	r2, [pc, #152]	; (8000e98 <lutTemp+0xe0>)
 8000dfe:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000e02:	88fa      	ldrh	r2, [r7, #6]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d336      	bcc.n	8000e76 <lutTemp+0xbe>
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	4a22      	ldr	r2, [pc, #136]	; (8000e98 <lutTemp+0xe0>)
 8000e0e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000e12:	88fa      	ldrh	r2, [r7, #6]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d82e      	bhi.n	8000e76 <lutTemp+0xbe>
			// Target value is between two LUT points
			uint16_t diffADC = ADC_lt - lut[i][0];
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	4a1f      	ldr	r2, [pc, #124]	; (8000e98 <lutTemp+0xe0>)
 8000e1c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000e20:	88fa      	ldrh	r2, [r7, #6]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	81bb      	strh	r3, [r7, #12]
			uint16_t diffLUT = lut[i + 1][0] - lut[i][0];
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	4a1b      	ldr	r2, [pc, #108]	; (8000e98 <lutTemp+0xe0>)
 8000e2c:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	4919      	ldr	r1, [pc, #100]	; (8000e98 <lutTemp+0xe0>)
 8000e34:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	817b      	strh	r3, [r7, #10]

			return lut[i][1] + ((lut[i + 1][1] - lut[i][1]) * diffADC) / diffLUT;
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	4a16      	ldr	r2, [pc, #88]	; (8000e98 <lutTemp+0xe0>)
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	885a      	ldrh	r2, [r3, #2]
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	4913      	ldr	r1, [pc, #76]	; (8000e98 <lutTemp+0xe0>)
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	440b      	add	r3, r1
 8000e50:	885b      	ldrh	r3, [r3, #2]
 8000e52:	4618      	mov	r0, r3
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	4910      	ldr	r1, [pc, #64]	; (8000e98 <lutTemp+0xe0>)
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	885b      	ldrh	r3, [r3, #2]
 8000e5e:	1ac3      	subs	r3, r0, r3
 8000e60:	89b9      	ldrh	r1, [r7, #12]
 8000e62:	fb03 f101 	mul.w	r1, r3, r1
 8000e66:	897b      	ldrh	r3, [r7, #10]
 8000e68:	fb91 f3f3 	sdiv	r3, r1, r3
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	4413      	add	r3, r2
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	b21b      	sxth	r3, r3
 8000e74:	e009      	b.n	8000e8a <lutTemp+0xd2>
	for (i = 0; i < LUT_SIZE - 1; ++i) {
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	73fb      	strb	r3, [r7, #15]
 8000e7c:	7bfa      	ldrb	r2, [r7, #15]
 8000e7e:	2312      	movs	r3, #18
 8000e80:	3b01      	subs	r3, #1
 8000e82:	429a      	cmp	r2, r3
 8000e84:	dbb9      	blt.n	8000dfa <lutTemp+0x42>
		}
	}

	// Something went wrong, return max temp
	return 850;
 8000e86:	f240 3352 	movw	r3, #850	; 0x352
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	0800e298 	.word	0x0800e298

08000e9c <updateBMBData>:


//update corresponding voltage or temperature reading
void updateBMBData(uint16_t val, uint8_t adcChannel, uint8_t muxChannel, uint8_t bmb) {
 8000e9c:	b5b0      	push	{r4, r5, r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4623      	mov	r3, r4
 8000eac:	80fb      	strh	r3, [r7, #6]
 8000eae:	4603      	mov	r3, r0
 8000eb0:	717b      	strb	r3, [r7, #5]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	713b      	strb	r3, [r7, #4]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	70fb      	strb	r3, [r7, #3]
	ADC_Mux_Channel_t indexToUpdate = ADCChannelLookupArr[adcChannel][muxChannel];
 8000eba:	797a      	ldrb	r2, [r7, #5]
 8000ebc:	793b      	ldrb	r3, [r7, #4]
 8000ebe:	4930      	ldr	r1, [pc, #192]	; (8000f80 <updateBMBData+0xe4>)
 8000ec0:	0092      	lsls	r2, r2, #2
 8000ec2:	440a      	add	r2, r1
 8000ec4:	4413      	add	r3, r2
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	73fb      	strb	r3, [r7, #15]
	if(indexToUpdate <= CELL9) {
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	2b08      	cmp	r3, #8
 8000ece:	d813      	bhi.n	8000ef8 <updateBMBData+0x5c>
		int16_t voltage = adcOutputToVoltage(val, indexToUpdate);
 8000ed0:	7bfa      	ldrb	r2, [r7, #15]
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff36 	bl	8000d48 <adcOutputToVoltage>
 8000edc:	4603      	mov	r3, r0
 8000ede:	81bb      	strh	r3, [r7, #12]
        BMBData[bmb].cellVoltages[indexToUpdate] = voltage;
 8000ee0:	78fa      	ldrb	r2, [r7, #3]
 8000ee2:	7bf9      	ldrb	r1, [r7, #15]
 8000ee4:	89bc      	ldrh	r4, [r7, #12]
 8000ee6:	4827      	ldr	r0, [pc, #156]	; (8000f84 <updateBMBData+0xe8>)
 8000ee8:	4613      	mov	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	4413      	add	r3, r2
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	440b      	add	r3, r1
 8000ef2:	4622      	mov	r2, r4
 8000ef4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if(CELL9 < indexToUpdate && indexToUpdate <= THERM15) {
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	2b08      	cmp	r3, #8
 8000efc:	d919      	bls.n	8000f32 <updateBMBData+0x96>
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	2b17      	cmp	r3, #23
 8000f02:	d816      	bhi.n	8000f32 <updateBMBData+0x96>
		BMBData[bmb].cellTemperatures[indexToUpdate - THERM1] = lutTemp(val<<4);
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	78fc      	ldrb	r4, [r7, #3]
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	f1a3 0509 	sub.w	r5, r3, #9
 8000f12:	4610      	mov	r0, r2
 8000f14:	f7ff ff50 	bl	8000db8 <lutTemp>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4a19      	ldr	r2, [pc, #100]	; (8000f84 <updateBMBData+0xe8>)
 8000f1e:	4623      	mov	r3, r4
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4423      	add	r3, r4
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	442b      	add	r3, r5
 8000f28:	3308      	adds	r3, #8
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4413      	add	r3, r2
 8000f2e:	460a      	mov	r2, r1
 8000f30:	805a      	strh	r2, [r3, #2]
	}
	if (indexToUpdate >= FIXED1) {
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	2b17      	cmp	r3, #23
 8000f36:	d91f      	bls.n	8000f78 <updateBMBData+0xdc>
		uint8_t fixedNum = indexToUpdate - FIXED1;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	3b18      	subs	r3, #24
 8000f3c:	72fb      	strb	r3, [r7, #11]
		// voltage divider, 470k on top, rest is 100k between each fixed
		if (val < idealFixedVals[fixedNum] - 50 || val > idealFixedVals[fixedNum] + 50) {
 8000f3e:	88fa      	ldrh	r2, [r7, #6]
 8000f40:	7afb      	ldrb	r3, [r7, #11]
 8000f42:	4911      	ldr	r1, [pc, #68]	; (8000f88 <updateBMBData+0xec>)
 8000f44:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f48:	3b32      	subs	r3, #50	; 0x32
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	db07      	blt.n	8000f5e <updateBMBData+0xc2>
 8000f4e:	88fa      	ldrh	r2, [r7, #6]
 8000f50:	7afb      	ldrb	r3, [r7, #11]
 8000f52:	490d      	ldr	r1, [pc, #52]	; (8000f88 <updateBMBData+0xec>)
 8000f54:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f58:	3332      	adds	r3, #50	; 0x32
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	dd0c      	ble.n	8000f78 <updateBMBData+0xdc>
			BMBTimeoutCount[bmb]++;
 8000f5e:	78fb      	ldrb	r3, [r7, #3]
 8000f60:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <updateBMBData+0xf0>)
 8000f62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f66:	3201      	adds	r2, #1
 8000f68:	4908      	ldr	r1, [pc, #32]	; (8000f8c <updateBMBData+0xf0>)
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			setBMBErr(bmb, BMB_FIXED_CHECK_ERR);
 8000f6e:	78fb      	ldrb	r3, [r7, #3]
 8000f70:	210d      	movs	r1, #13
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fecc 	bl	8000d10 <setBMBErr>
		}
	}
}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f80:	20000020 	.word	0x20000020
 8000f84:	200001f8 	.word	0x200001f8
 8000f88:	0800e2e0 	.word	0x0800e2e0
 8000f8c:	2000586c 	.word	0x2000586c

08000f90 <BMBInit>:
	for (int i = 0; i < NUM_BMBS; i++) {
		BMBTimeoutCount[i] = BMB_TIMEOUT;
	}
}

void BMBInit() {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
	// Period
	const TickType_t xPeriod = 1000 / BMB_SAMPLE_TASK_RATE;		// In ticks (ms)
 8000f96:	2314      	movs	r3, #20
 8000f98:	607b      	str	r3, [r7, #4]
	if (!i2cInit()) {
 8000f9a:	f001 f9a9 	bl	80022f0 <i2cInit>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	f083 0301 	eor.w	r3, r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d002      	beq.n	8000fb0 <BMBInit+0x20>
		cmr_panic("Couldn't initialize I2C BMB Chain");
 8000faa:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <BMBInit+0x28>)
 8000fac:	f003 fe37 	bl	8004c1e <cmr_panic>
	}
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	0800c510 	.word	0x0800c510

08000fbc <sampleOneBMB>:

bool sampleOneBMB(uint8_t BMBIndex, uint8_t BMBNum, uint8_t BMBSide) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	71bb      	strb	r3, [r7, #6]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	717b      	strb	r3, [r7, #5]
    if (!i2c_enableI2CMux(BMBNum, BMBSide)) {
 8000fce:	797a      	ldrb	r2, [r7, #5]
 8000fd0:	79bb      	ldrb	r3, [r7, #6]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 fa49 	bl	800246c <i2c_enableI2CMux>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	f083 0301 	eor.w	r3, r3, #1
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00e      	beq.n	8001004 <sampleOneBMB+0x48>
    	BMBTimeoutCount[BMBIndex]++;
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	4a58      	ldr	r2, [pc, #352]	; (800114c <sampleOneBMB+0x190>)
 8000fea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fee:	3201      	adds	r2, #1
 8000ff0:	4956      	ldr	r1, [pc, #344]	; (800114c <sampleOneBMB+0x190>)
 8000ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	setBMBErr(BMBIndex, BMB_ENABLE_I2C_MUX_ERR);
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	2107      	movs	r1, #7
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fe88 	bl	8000d10 <setBMBErr>
        return false;
 8001000:	2300      	movs	r3, #0
 8001002:	e09e      	b.n	8001142 <sampleOneBMB+0x186>
    }
    //select through each of the mux channels
    for (int channel = 0; channel < NUM_MUX_CHANNELS; channel++) {
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	e038      	b.n	800107c <sampleOneBMB+0xc0>
        if (!i2c_select4MuxChannel(channel)) {
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f001 faba 	bl	8002588 <i2c_select4MuxChannel>
 8001014:	4603      	mov	r3, r0
 8001016:	f083 0301 	eor.w	r3, r3, #1
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00e      	beq.n	800103e <sampleOneBMB+0x82>
        	BMBTimeoutCount[BMBIndex]++;
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	4a4a      	ldr	r2, [pc, #296]	; (800114c <sampleOneBMB+0x190>)
 8001024:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001028:	3201      	adds	r2, #1
 800102a:	4948      	ldr	r1, [pc, #288]	; (800114c <sampleOneBMB+0x190>)
 800102c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        	setBMBErr(BMBIndex, BMB_SEL_4_MUX_ERR);
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	2109      	movs	r1, #9
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fe6b 	bl	8000d10 <setBMBErr>
            return false;
 800103a:	2300      	movs	r3, #0
 800103c:	e081      	b.n	8001142 <sampleOneBMB+0x186>
        }
        // through each channel, input 8 adc channels
        if (!i2c_scanADC(BMBADCResponse[channel])) {
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	011b      	lsls	r3, r3, #4
 8001042:	4a43      	ldr	r2, [pc, #268]	; (8001150 <sampleOneBMB+0x194>)
 8001044:	4413      	add	r3, r2
 8001046:	4618      	mov	r0, r3
 8001048:	f001 fb1e 	bl	8002688 <i2c_scanADC>
 800104c:	4603      	mov	r3, r0
 800104e:	f083 0301 	eor.w	r3, r3, #1
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00e      	beq.n	8001076 <sampleOneBMB+0xba>
        	BMBTimeoutCount[BMBIndex]++;
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	4a3c      	ldr	r2, [pc, #240]	; (800114c <sampleOneBMB+0x190>)
 800105c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001060:	3201      	adds	r2, #1
 8001062:	493a      	ldr	r1, [pc, #232]	; (800114c <sampleOneBMB+0x190>)
 8001064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        	setBMBErr(BMBIndex, BMB_SCAN_ADC_ERR);
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	210a      	movs	r1, #10
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fe4f 	bl	8000d10 <setBMBErr>
            return false;
 8001072:	2300      	movs	r3, #0
 8001074:	e065      	b.n	8001142 <sampleOneBMB+0x186>
    for (int channel = 0; channel < NUM_MUX_CHANNELS; channel++) {
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3301      	adds	r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2b03      	cmp	r3, #3
 8001080:	ddc3      	ble.n	800100a <sampleOneBMB+0x4e>
        }
    }
    // increment the counter or reset if we just flashed
    if (BMBFlashCounter >= LED_FLASH_COUNT) {
 8001082:	4b34      	ldr	r3, [pc, #208]	; (8001154 <sampleOneBMB+0x198>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	220a      	movs	r2, #10
 8001088:	4293      	cmp	r3, r2
 800108a:	d31a      	bcc.n	80010c2 <sampleOneBMB+0x106>
        // we got to threshold, blink this BMB
        if (!i2c_selectMuxBlink()) {
 800108c:	f001 faaa 	bl	80025e4 <i2c_selectMuxBlink>
 8001090:	4603      	mov	r3, r0
 8001092:	f083 0301 	eor.w	r3, r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00e      	beq.n	80010ba <sampleOneBMB+0xfe>
        	setBMBErr(BMBIndex, BMB_MUX_BLINK_ERR);
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	210b      	movs	r1, #11
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fe35 	bl	8000d10 <setBMBErr>
        	BMBTimeoutCount[BMBIndex]++;
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4a28      	ldr	r2, [pc, #160]	; (800114c <sampleOneBMB+0x190>)
 80010aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010ae:	3201      	adds	r2, #1
 80010b0:	4926      	ldr	r1, [pc, #152]	; (800114c <sampleOneBMB+0x190>)
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            return false;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e043      	b.n	8001142 <sampleOneBMB+0x186>
        }
        BMBFlashCounter = 0;
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <sampleOneBMB+0x198>)
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
 80010c0:	e005      	b.n	80010ce <sampleOneBMB+0x112>
    } else {
        BMBFlashCounter++;
 80010c2:	4b24      	ldr	r3, [pc, #144]	; (8001154 <sampleOneBMB+0x198>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b22      	ldr	r3, [pc, #136]	; (8001154 <sampleOneBMB+0x198>)
 80010cc:	701a      	strb	r2, [r3, #0]
    }
    if (!(i2c_disableI2CMux(BMBNum))) {
 80010ce:	79bb      	ldrb	r3, [r7, #6]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f001 fa1f 	bl	8002514 <i2c_disableI2CMux>
 80010d6:	4603      	mov	r3, r0
 80010d8:	f083 0301 	eor.w	r3, r3, #1
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d00e      	beq.n	8001100 <sampleOneBMB+0x144>
    	BMBTimeoutCount[BMBIndex]++;
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	4a19      	ldr	r2, [pc, #100]	; (800114c <sampleOneBMB+0x190>)
 80010e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010ea:	3201      	adds	r2, #1
 80010ec:	4917      	ldr	r1, [pc, #92]	; (800114c <sampleOneBMB+0x190>)
 80010ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	setBMBErr(BMBIndex, BMB_DISABLE_I2C_MUX_ERR);
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	210c      	movs	r1, #12
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fe0a 	bl	8000d10 <setBMBErr>
        return false;
 80010fc:	2300      	movs	r3, #0
 80010fe:	e020      	b.n	8001142 <sampleOneBMB+0x186>
    }
    uint8_t enabled, side;
    if (!i2c_readI2CMux(BMBNum, &enabled, &side) || enabled) {
 8001100:	f107 020a 	add.w	r2, r7, #10
 8001104:	f107 010b 	add.w	r1, r7, #11
 8001108:	79bb      	ldrb	r3, [r7, #6]
 800110a:	4618      	mov	r0, r3
 800110c:	f001 f9d4 	bl	80024b8 <i2c_readI2CMux>
 8001110:	4603      	mov	r3, r0
 8001112:	f083 0301 	eor.w	r3, r3, #1
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d102      	bne.n	8001122 <sampleOneBMB+0x166>
 800111c:	7afb      	ldrb	r3, [r7, #11]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d00e      	beq.n	8001140 <sampleOneBMB+0x184>
    	BMBTimeoutCount[BMBIndex]++;
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	4a09      	ldr	r2, [pc, #36]	; (800114c <sampleOneBMB+0x190>)
 8001126:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800112a:	3201      	adds	r2, #1
 800112c:	4907      	ldr	r1, [pc, #28]	; (800114c <sampleOneBMB+0x190>)
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	setBMBErr(BMBIndex, BMB_DISABLE_I2C_MUX_ERR);
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	210c      	movs	r1, #12
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fdea 	bl	8000d10 <setBMBErr>
        return false;
 800113c:	2300      	movs	r3, #0
 800113e:	e000      	b.n	8001142 <sampleOneBMB+0x186>
    }
    return true;
 8001140:	2301      	movs	r3, #1
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2000586c 	.word	0x2000586c
 8001150:	200004f8 	.word	0x200004f8
 8001154:	20000538 	.word	0x20000538

08001158 <doCellBalanceAllBMBs>:
//        	BMBTimeoutCount[BMBIndex]++;
//        }
//    }
//}

bool doCellBalanceAllBMBs() {
 8001158:	b580      	push	{r7, lr}
 800115a:	b08e      	sub	sp, #56	; 0x38
 800115c:	af00      	add	r7, sp, #0
	//TODO: Check for timeout
	for (int j = 0; j < NUM_BMBS; j++) {
 800115e:	2300      	movs	r3, #0
 8001160:	637b      	str	r3, [r7, #52]	; 0x34
 8001162:	e04b      	b.n	80011fc <doCellBalanceAllBMBs+0xa4>
		for (uint16_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 8001164:	2300      	movs	r3, #0
 8001166:	867b      	strh	r3, [r7, #50]	; 0x32
 8001168:	e042      	b.n	80011f0 <doCellBalanceAllBMBs+0x98>
			if (BMBData[j].cellVoltages[i]  > CELL_MAX_VOLTAGE_HI) {
 800116a:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 800116c:	4874      	ldr	r0, [pc, #464]	; (8001340 <doCellBalanceAllBMBs+0x1e8>)
 800116e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	440b      	add	r3, r1
 800117a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800117e:	f241 029a 	movw	r2, #4250	; 0x109a
 8001182:	4293      	cmp	r3, r2
 8001184:	d912      	bls.n	80011ac <doCellBalanceAllBMBs+0x54>
				cellsToBalance[j] &= ~(1 << i);
 8001186:	4a6f      	ldr	r2, [pc, #444]	; (8001344 <doCellBalanceAllBMBs+0x1ec>)
 8001188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800118a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800118e:	b21a      	sxth	r2, r3
 8001190:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001192:	2101      	movs	r1, #1
 8001194:	fa01 f303 	lsl.w	r3, r1, r3
 8001198:	b21b      	sxth	r3, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	b21b      	sxth	r3, r3
 800119e:	4013      	ands	r3, r2
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	b299      	uxth	r1, r3
 80011a4:	4a67      	ldr	r2, [pc, #412]	; (8001344 <doCellBalanceAllBMBs+0x1ec>)
 80011a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			if (BMBData[j].cellVoltages[i]  < CELL_MAX_VOLTAGE_LO) {
 80011ac:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80011ae:	4864      	ldr	r0, [pc, #400]	; (8001340 <doCellBalanceAllBMBs+0x1e8>)
 80011b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011b2:	4613      	mov	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	440b      	add	r3, r1
 80011bc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80011c0:	f241 0235 	movw	r2, #4149	; 0x1035
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d810      	bhi.n	80011ea <doCellBalanceAllBMBs+0x92>
				cellsToBalance[j] |= (1 << i);
 80011c8:	4a5e      	ldr	r2, [pc, #376]	; (8001344 <doCellBalanceAllBMBs+0x1ec>)
 80011ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80011d4:	2101      	movs	r1, #1
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	b21b      	sxth	r3, r3
 80011dc:	4313      	orrs	r3, r2
 80011de:	b21b      	sxth	r3, r3
 80011e0:	b299      	uxth	r1, r3
 80011e2:	4a58      	ldr	r2, [pc, #352]	; (8001344 <doCellBalanceAllBMBs+0x1ec>)
 80011e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint16_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 80011ea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80011ec:	3301      	adds	r3, #1
 80011ee:	867b      	strh	r3, [r7, #50]	; 0x32
 80011f0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80011f2:	2b08      	cmp	r3, #8
 80011f4:	d9b9      	bls.n	800116a <doCellBalanceAllBMBs+0x12>
	for (int j = 0; j < NUM_BMBS; j++) {
 80011f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011f8:	3301      	adds	r3, #1
 80011fa:	637b      	str	r3, [r7, #52]	; 0x34
 80011fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011fe:	2b0f      	cmp	r3, #15
 8001200:	ddb0      	ble.n	8001164 <doCellBalanceAllBMBs+0xc>
    }

    //we have 9 bits, so split the cells into two 8 bit integers
    //LSB of the higher 8 bits is the 9th cell balancer
    uint8_t balanceCommands[NUM_BMBS][2];
	for(int i = 0; i < NUM_BMBS; i++) {
 8001202:	2300      	movs	r3, #0
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001206:	e01a      	b.n	800123e <doCellBalanceAllBMBs+0xe6>
		balanceCommands[i][0] = 0xFF & cellsToBalance[i];
 8001208:	4a4e      	ldr	r2, [pc, #312]	; (8001344 <doCellBalanceAllBMBs+0x1ec>)
 800120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	3338      	adds	r3, #56	; 0x38
 8001218:	443b      	add	r3, r7
 800121a:	f803 2c38 	strb.w	r2, [r3, #-56]
		balanceCommands[i][1] = (0xFF00 & cellsToBalance[i]) >> 8;
 800121e:	4a49      	ldr	r2, [pc, #292]	; (8001344 <doCellBalanceAllBMBs+0x1ec>)
 8001220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001222:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001226:	0a1b      	lsrs	r3, r3, #8
 8001228:	b29b      	uxth	r3, r3
 800122a:	b2da      	uxtb	r2, r3
 800122c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	3338      	adds	r3, #56	; 0x38
 8001232:	443b      	add	r3, r7
 8001234:	f803 2c37 	strb.w	r2, [r3, #-55]
	for(int i = 0; i < NUM_BMBS; i++) {
 8001238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123a:	3301      	adds	r3, #1
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800123e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001240:	2b0f      	cmp	r3, #15
 8001242:	dde1      	ble.n	8001208 <doCellBalanceAllBMBs+0xb0>
	}

    //only send balance command when changing
    //otherwise, make sure all the balancing is OFF
	for(int i = 0; i < NUM_BMBS; i++) {
 8001244:	2300      	movs	r3, #0
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
 8001248:	e071      	b.n	800132e <doCellBalanceAllBMBs+0x1d6>
		int BMBNum = i/2;
 800124a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124c:	0fda      	lsrs	r2, r3, #31
 800124e:	4413      	add	r3, r2
 8001250:	105b      	asrs	r3, r3, #1
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
		int BMBSide = i%2;
 8001254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001256:	2b00      	cmp	r3, #0
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	bfb8      	it	lt
 800125e:	425b      	neglt	r3, r3
 8001260:	623b      	str	r3, [r7, #32]
		if (!i2c_enableI2CMux(BMBNum, BMBSide)) {
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	b2db      	uxtb	r3, r3
 8001266:	6a3a      	ldr	r2, [r7, #32]
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f001 f8fd 	bl	800246c <i2c_enableI2CMux>
 8001272:	4603      	mov	r3, r0
 8001274:	f083 0301 	eor.w	r3, r3, #1
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d009      	beq.n	8001292 <doCellBalanceAllBMBs+0x13a>
			BMBTimeoutCount[i]++;
 800127e:	4a32      	ldr	r2, [pc, #200]	; (8001348 <doCellBalanceAllBMBs+0x1f0>)
 8001280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001286:	1c5a      	adds	r2, r3, #1
 8001288:	492f      	ldr	r1, [pc, #188]	; (8001348 <doCellBalanceAllBMBs+0x1f0>)
 800128a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        	continue;
 8001290:	e04a      	b.n	8001328 <doCellBalanceAllBMBs+0x1d0>
    	}
		if (getState() == CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE) { //TODO: CHANGE THIS BACK
 8001292:	f001 fba7 	bl	80029e4 <getState>
 8001296:	4603      	mov	r3, r0
 8001298:	2b0a      	cmp	r3, #10
 800129a:	d119      	bne.n	80012d0 <doCellBalanceAllBMBs+0x178>
			if (!i2c_cellBalance(i, balanceCommands[0],
 800129c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129e:	b2d8      	uxtb	r0, r3
 80012a0:	463b      	mov	r3, r7
 80012a2:	b2d9      	uxtb	r1, r3
 80012a4:	463b      	mov	r3, r7
 80012a6:	3302      	adds	r3, #2
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	f001 fa3c 	bl	8002728 <i2c_cellBalance>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f083 0301 	eor.w	r3, r3, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d020      	beq.n	80012fe <doCellBalanceAllBMBs+0x1a6>
					balanceCommands[1])) {
				BMBTimeoutCount[i]++;
 80012bc:	4a22      	ldr	r2, [pc, #136]	; (8001348 <doCellBalanceAllBMBs+0x1f0>)
 80012be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	4920      	ldr	r1, [pc, #128]	; (8001348 <doCellBalanceAllBMBs+0x1f0>)
 80012c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				continue;
 80012ce:	e02b      	b.n	8001328 <doCellBalanceAllBMBs+0x1d0>
			}
		} else {
			if (!i2c_cellBalance(i, 0xFF, 0xFF)) {
 80012d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	22ff      	movs	r2, #255	; 0xff
 80012d6:	21ff      	movs	r1, #255	; 0xff
 80012d8:	4618      	mov	r0, r3
 80012da:	f001 fa25 	bl	8002728 <i2c_cellBalance>
 80012de:	4603      	mov	r3, r0
 80012e0:	f083 0301 	eor.w	r3, r3, #1
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d009      	beq.n	80012fe <doCellBalanceAllBMBs+0x1a6>
				BMBTimeoutCount[i]++;
 80012ea:	4a17      	ldr	r2, [pc, #92]	; (8001348 <doCellBalanceAllBMBs+0x1f0>)
 80012ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	4914      	ldr	r1, [pc, #80]	; (8001348 <doCellBalanceAllBMBs+0x1f0>)
 80012f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				continue;
 80012fc:	e014      	b.n	8001328 <doCellBalanceAllBMBs+0x1d0>
			}
		}
		if (!(i2c_disableI2CMux(BMBNum))) {
 80012fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001300:	b2db      	uxtb	r3, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f001 f906 	bl	8002514 <i2c_disableI2CMux>
 8001308:	4603      	mov	r3, r0
 800130a:	f083 0301 	eor.w	r3, r3, #1
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d009      	beq.n	8001328 <doCellBalanceAllBMBs+0x1d0>
			BMBTimeoutCount[i]++;
 8001314:	4a0c      	ldr	r2, [pc, #48]	; (8001348 <doCellBalanceAllBMBs+0x1f0>)
 8001316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	490a      	ldr	r1, [pc, #40]	; (8001348 <doCellBalanceAllBMBs+0x1f0>)
 8001320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        	continue;
 8001326:	bf00      	nop
	for(int i = 0; i < NUM_BMBS; i++) {
 8001328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132a:	3301      	adds	r3, #1
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
 800132e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001330:	2b0f      	cmp	r3, #15
 8001332:	dd8a      	ble.n	800124a <doCellBalanceAllBMBs+0xf2>
    	}
	}
}
 8001334:	bf00      	nop
 8001336:	4618      	mov	r0, r3
 8001338:	3738      	adds	r7, #56	; 0x38
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200001f8 	.word	0x200001f8
 8001344:	20000000 	.word	0x20000000
 8001348:	2000586c 	.word	0x2000586c

0800134c <calculateOneBMB>:

// calculate all the values for a single BMB
// this does converting to voltage, converting to temp, calculating avg
void calculateOneBMB(uint8_t BMBIndex) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
    for(int mux = 0; mux < NUM_MUX_CHANNELS; mux++) {
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	e023      	b.n	80013a4 <calculateOneBMB+0x58>
        for(int adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	e01a      	b.n	8001398 <calculateOneBMB+0x4c>
            // convert each bmb response to voltage or temperature
            updateBMBData(BMBADCResponse[mux][adc], adc, mux, BMBIndex);
 8001362:	4914      	ldr	r1, [pc, #80]	; (80013b4 <calculateOneBMB+0x68>)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	00da      	lsls	r2, r3, #3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4413      	add	r3, r2
 800136c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001370:	b298      	uxth	r0, r3
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	b2d9      	uxtb	r1, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	f7ff fd8e 	bl	8000e9c <updateBMBData>
            BMBADCResponse[mux][adc] = 0xFFFF;
 8001380:	490c      	ldr	r1, [pc, #48]	; (80013b4 <calculateOneBMB+0x68>)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	00da      	lsls	r2, r3, #3
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	4413      	add	r3, r2
 800138a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800138e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for(int adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	3301      	adds	r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	2b07      	cmp	r3, #7
 800139c:	dde1      	ble.n	8001362 <calculateOneBMB+0x16>
    for(int mux = 0; mux < NUM_MUX_CHANNELS; mux++) {
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3301      	adds	r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	ddd8      	ble.n	800135c <calculateOneBMB+0x10>
        }
    }
}
 80013aa:	bf00      	nop
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200004f8 	.word	0x200004f8

080013b8 <vBMBSampleTask>:


void vBMBSampleTask(void *pvParameters) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

	BMBInit();
 80013c0:	f7ff fde6 	bl	8000f90 <BMBInit>

	// Previous wake time pointer
	TickType_t xLastWakeTime = xTaskGetTickCount();
 80013c4:	f005 f8d8 	bl	8006578 <xTaskGetTickCount>
 80013c8:	4603      	mov	r3, r0
 80013ca:	60bb      	str	r3, [r7, #8]
	vTaskDelayUntil(&xLastWakeTime, 50);
 80013cc:	f107 0308 	add.w	r3, r7, #8
 80013d0:	2132      	movs	r1, #50	; 0x32
 80013d2:	4618      	mov	r0, r3
 80013d4:	f004 ff5a 	bl	800628c <vTaskDelayUntil>

	while (1) {
		for (uint8_t BMBIndex = 6; BMBIndex < 8; BMBIndex++) {//TODO: Change back to BMBIndex < NUM_BMBS
 80013d8:	2306      	movs	r3, #6
 80013da:	73fb      	strb	r3, [r7, #15]
 80013dc:	e041      	b.n	8001462 <vBMBSampleTask+0xaa>
			//since we treat each BMB side as an individual bmb
			//we just check whether the current bmb index is odd/even
			uint8_t BMBSide = BMBIndex % 2;
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	73bb      	strb	r3, [r7, #14]
			//uint8_t BMBSide = 0; // TODO: CHANGE THIS BACKs
			// our actual BMB number, the physical board
			uint8_t BMBNum = BMBIndex / 2;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	085b      	lsrs	r3, r3, #1
 80013ea:	737b      	strb	r3, [r7, #13]
			//Sample BMBs
			// Get interesting crashes in list.c:192 with critical
			//taskENTER_CRITICAL();
			// Sample a single BMB (number and side fully)
			// this disables the mux at the end as well
			if (!sampleOneBMB(BMBIndex, BMBNum, BMBSide)) {
 80013ec:	7bba      	ldrb	r2, [r7, #14]
 80013ee:	7b79      	ldrb	r1, [r7, #13]
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fde2 	bl	8000fbc <sampleOneBMB>
 80013f8:	4603      	mov	r3, r0
 80013fa:	f083 0301 	eor.w	r3, r3, #1
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d01a      	beq.n	800143a <vBMBSampleTask+0x82>
				// there was an error, so reset mux
				BMBTimeoutCount[BMBIndex]++;
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	4a1d      	ldr	r2, [pc, #116]	; (800147c <vBMBSampleTask+0xc4>)
 8001408:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800140c:	3201      	adds	r2, #1
 800140e:	491b      	ldr	r1, [pc, #108]	; (800147c <vBMBSampleTask+0xc4>)
 8001410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (!(i2c_disableI2CMux(BMBNum))) {
 8001414:	7b7b      	ldrb	r3, [r7, #13]
 8001416:	4618      	mov	r0, r3
 8001418:	f001 f87c 	bl	8002514 <i2c_disableI2CMux>
 800141c:	4603      	mov	r3, r0
 800141e:	f083 0301 	eor.w	r3, r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00d      	beq.n	8001444 <vBMBSampleTask+0x8c>
					BMBTimeoutCount[BMBIndex]++;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	4a14      	ldr	r2, [pc, #80]	; (800147c <vBMBSampleTask+0xc4>)
 800142c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001430:	3201      	adds	r2, #1
 8001432:	4912      	ldr	r1, [pc, #72]	; (800147c <vBMBSampleTask+0xc4>)
 8001434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001438:	e004      	b.n	8001444 <vBMBSampleTask+0x8c>
				}
			} else {
				BMBTimeoutCount[BMBIndex] = 0;
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	4a0f      	ldr	r2, [pc, #60]	; (800147c <vBMBSampleTask+0xc4>)
 800143e:	2100      	movs	r1, #0
 8001440:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			//taskEXIT_CRITICAL();

			if(BMBTimeoutCount[BMBIndex] != 0) {
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	4a0d      	ldr	r2, [pc, #52]	; (800147c <vBMBSampleTask+0xc4>)
 8001448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d104      	bne.n	800145a <vBMBSampleTask+0xa2>
				// we had a timeout, continue onto next BMB
				continue;
			}

			// Calculate the values for this BMB
			calculateOneBMB(BMBIndex);
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ff7a 	bl	800134c <calculateOneBMB>
 8001458:	e000      	b.n	800145c <vBMBSampleTask+0xa4>
				continue;
 800145a:	bf00      	nop
		for (uint8_t BMBIndex = 6; BMBIndex < 8; BMBIndex++) {//TODO: Change back to BMBIndex < NUM_BMBS
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	3301      	adds	r3, #1
 8001460:	73fb      	strb	r3, [r7, #15]
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	2b07      	cmp	r3, #7
 8001466:	d9ba      	bls.n	80013de <vBMBSampleTask+0x26>

			//doCellBalanceOneBMB(BMBIndex); // WE DON'T DO THIS ANYMORE

		} // end for loop
		doCellBalanceAllBMBs();
 8001468:	f7ff fe76 	bl	8001158 <doCellBalanceAllBMBs>
		//TickType_t temp = xTaskGetTickCount();
		vTaskDelayUntil(&xLastWakeTime, BMB_SAMPLE_TASK_RATE);
 800146c:	f107 0308 	add.w	r3, r7, #8
 8001470:	2132      	movs	r1, #50	; 0x32
 8001472:	4618      	mov	r0, r3
 8001474:	f004 ff0a 	bl	800628c <vTaskDelayUntil>
		for (uint8_t BMBIndex = 6; BMBIndex < 8; BMBIndex++) {//TODO: Change back to BMBIndex < NUM_BMBS
 8001478:	e7ae      	b.n	80013d8 <vBMBSampleTask+0x20>
 800147a:	bf00      	nop
 800147c:	2000586c 	.word	0x2000586c

08001480 <getBMBMaxTempIndex>:
static int16_t linearTemp(uint16_t ADC_lt) {
	return (int16_t) ((-2 * ((int32_t) (uint32_t) ADC_lt)) / 117 + 860);
}

// Lookup functions
uint8_t getBMBMaxTempIndex(uint8_t bmb_index) {
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
	int16_t maxTemp = 0xFFFF;
 800148a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800148e:	81fb      	strh	r3, [r7, #14]
	uint8_t cell_index = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < TSENSE_CHANNELS_PER_BMB; i++) {
 8001494:	2300      	movs	r3, #0
 8001496:	733b      	strb	r3, [r7, #12]
 8001498:	e019      	b.n	80014ce <getBMBMaxTempIndex+0x4e>
		int16_t temp = BMBData[bmb_index].cellTemperatures[i];
 800149a:	79fa      	ldrb	r2, [r7, #7]
 800149c:	7b39      	ldrb	r1, [r7, #12]
 800149e:	4811      	ldr	r0, [pc, #68]	; (80014e4 <getBMBMaxTempIndex+0x64>)
 80014a0:	4613      	mov	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	440b      	add	r3, r1
 80014aa:	3308      	adds	r3, #8
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4403      	add	r3, r0
 80014b0:	885b      	ldrh	r3, [r3, #2]
 80014b2:	817b      	strh	r3, [r7, #10]
		if (temp > maxTemp) {
 80014b4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80014b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014bc:	429a      	cmp	r2, r3
 80014be:	dd03      	ble.n	80014c8 <getBMBMaxTempIndex+0x48>
			maxTemp = temp;
 80014c0:	897b      	ldrh	r3, [r7, #10]
 80014c2:	81fb      	strh	r3, [r7, #14]
			cell_index = i;
 80014c4:	7b3b      	ldrb	r3, [r7, #12]
 80014c6:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < TSENSE_CHANNELS_PER_BMB; i++) {
 80014c8:	7b3b      	ldrb	r3, [r7, #12]
 80014ca:	3301      	adds	r3, #1
 80014cc:	733b      	strb	r3, [r7, #12]
 80014ce:	7b3b      	ldrb	r3, [r7, #12]
 80014d0:	2b0e      	cmp	r3, #14
 80014d2:	d9e2      	bls.n	800149a <getBMBMaxTempIndex+0x1a>
		}
	}
	return cell_index;
 80014d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	200001f8 	.word	0x200001f8

080014e8 <getBMBMinTempIndex>:

uint8_t getBMBMinTempIndex(uint8_t bmb_index) {
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
	int16_t minTemp = 0x7FFF;
 80014f2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80014f6:	81fb      	strh	r3, [r7, #14]
	uint8_t cell_index = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < TSENSE_CHANNELS_PER_BMB; i++) {
 80014fc:	2300      	movs	r3, #0
 80014fe:	733b      	strb	r3, [r7, #12]
 8001500:	e019      	b.n	8001536 <getBMBMinTempIndex+0x4e>
		int16_t temp = BMBData[bmb_index].cellTemperatures[i];
 8001502:	79fa      	ldrb	r2, [r7, #7]
 8001504:	7b39      	ldrb	r1, [r7, #12]
 8001506:	4811      	ldr	r0, [pc, #68]	; (800154c <getBMBMinTempIndex+0x64>)
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	440b      	add	r3, r1
 8001512:	3308      	adds	r3, #8
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4403      	add	r3, r0
 8001518:	885b      	ldrh	r3, [r3, #2]
 800151a:	817b      	strh	r3, [r7, #10]
		if (temp < minTemp) {
 800151c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001520:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001524:	429a      	cmp	r2, r3
 8001526:	da03      	bge.n	8001530 <getBMBMinTempIndex+0x48>
			minTemp = temp;
 8001528:	897b      	ldrh	r3, [r7, #10]
 800152a:	81fb      	strh	r3, [r7, #14]
			cell_index = i;
 800152c:	7b3b      	ldrb	r3, [r7, #12]
 800152e:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < TSENSE_CHANNELS_PER_BMB; i++) {
 8001530:	7b3b      	ldrb	r3, [r7, #12]
 8001532:	3301      	adds	r3, #1
 8001534:	733b      	strb	r3, [r7, #12]
 8001536:	7b3b      	ldrb	r3, [r7, #12]
 8001538:	2b0e      	cmp	r3, #14
 800153a:	d9e2      	bls.n	8001502 <getBMBMinTempIndex+0x1a>
		}
	}
	return cell_index;
 800153c:	7b7b      	ldrb	r3, [r7, #13]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	200001f8 	.word	0x200001f8

08001550 <getBMBMaxVoltIndex>:

uint8_t getBMBMaxVoltIndex(uint8_t bmb_index) {
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
	uint16_t maxVoltage = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	81fb      	strh	r3, [r7, #14]
	uint8_t cell_index = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 8001562:	2300      	movs	r3, #0
 8001564:	733b      	strb	r3, [r7, #12]
 8001566:	e015      	b.n	8001594 <getBMBMaxVoltIndex+0x44>
		uint16_t voltage = BMBData[bmb_index].cellVoltages[i];
 8001568:	79fa      	ldrb	r2, [r7, #7]
 800156a:	7b39      	ldrb	r1, [r7, #12]
 800156c:	480e      	ldr	r0, [pc, #56]	; (80015a8 <getBMBMaxVoltIndex+0x58>)
 800156e:	4613      	mov	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	440b      	add	r3, r1
 8001578:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800157c:	817b      	strh	r3, [r7, #10]
		if (voltage > maxVoltage) {
 800157e:	897a      	ldrh	r2, [r7, #10]
 8001580:	89fb      	ldrh	r3, [r7, #14]
 8001582:	429a      	cmp	r2, r3
 8001584:	d903      	bls.n	800158e <getBMBMaxVoltIndex+0x3e>
			maxVoltage = voltage;
 8001586:	897b      	ldrh	r3, [r7, #10]
 8001588:	81fb      	strh	r3, [r7, #14]
			cell_index = i;
 800158a:	7b3b      	ldrb	r3, [r7, #12]
 800158c:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 800158e:	7b3b      	ldrb	r3, [r7, #12]
 8001590:	3301      	adds	r3, #1
 8001592:	733b      	strb	r3, [r7, #12]
 8001594:	7b3b      	ldrb	r3, [r7, #12]
 8001596:	2b08      	cmp	r3, #8
 8001598:	d9e6      	bls.n	8001568 <getBMBMaxVoltIndex+0x18>
		}
	}
	return cell_index;
 800159a:	7b7b      	ldrb	r3, [r7, #13]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	200001f8 	.word	0x200001f8

080015ac <getBMBMinVoltIndex>:

uint8_t getBMBMinVoltIndex(uint8_t bmb_index) {
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
	uint16_t minVoltage = 0xFFFF;
 80015b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ba:	81fb      	strh	r3, [r7, #14]
	uint8_t cell_index = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 80015c0:	2300      	movs	r3, #0
 80015c2:	733b      	strb	r3, [r7, #12]
 80015c4:	e015      	b.n	80015f2 <getBMBMinVoltIndex+0x46>
		uint16_t voltage = BMBData[bmb_index].cellVoltages[i];
 80015c6:	79fa      	ldrb	r2, [r7, #7]
 80015c8:	7b39      	ldrb	r1, [r7, #12]
 80015ca:	480f      	ldr	r0, [pc, #60]	; (8001608 <getBMBMinVoltIndex+0x5c>)
 80015cc:	4613      	mov	r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	440b      	add	r3, r1
 80015d6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80015da:	817b      	strh	r3, [r7, #10]
		if (voltage < minVoltage) {
 80015dc:	897a      	ldrh	r2, [r7, #10]
 80015de:	89fb      	ldrh	r3, [r7, #14]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d203      	bcs.n	80015ec <getBMBMinVoltIndex+0x40>
			minVoltage = voltage;
 80015e4:	897b      	ldrh	r3, [r7, #10]
 80015e6:	81fb      	strh	r3, [r7, #14]
			cell_index = i;
 80015e8:	7b3b      	ldrb	r3, [r7, #12]
 80015ea:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 80015ec:	7b3b      	ldrb	r3, [r7, #12]
 80015ee:	3301      	adds	r3, #1
 80015f0:	733b      	strb	r3, [r7, #12]
 80015f2:	7b3b      	ldrb	r3, [r7, #12]
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d9e6      	bls.n	80015c6 <getBMBMinVoltIndex+0x1a>
		}
	}
	return cell_index;
 80015f8:	7b7b      	ldrb	r3, [r7, #13]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	200001f8 	.word	0x200001f8

0800160c <getBMBTemp>:

// Accessor Functions

int16_t getBMBTemp(uint8_t bmb_index, uint8_t cell_index) {
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	460a      	mov	r2, r1
 8001616:	71fb      	strb	r3, [r7, #7]
 8001618:	4613      	mov	r3, r2
 800161a:	71bb      	strb	r3, [r7, #6]
	return BMBData[bmb_index].cellTemperatures[cell_index];
 800161c:	79fa      	ldrb	r2, [r7, #7]
 800161e:	79b9      	ldrb	r1, [r7, #6]
 8001620:	4808      	ldr	r0, [pc, #32]	; (8001644 <getBMBTemp+0x38>)
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	440b      	add	r3, r1
 800162c:	3308      	adds	r3, #8
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4403      	add	r3, r0
 8001632:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	200001f8 	.word	0x200001f8

08001648 <getBMBVoltage>:

uint16_t getBMBVoltage(uint8_t bmb_index, uint8_t cell_index) {
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	460a      	mov	r2, r1
 8001652:	71fb      	strb	r3, [r7, #7]
 8001654:	4613      	mov	r3, r2
 8001656:	71bb      	strb	r3, [r7, #6]
	return BMBData[bmb_index].cellVoltages[cell_index];
 8001658:	79fa      	ldrb	r2, [r7, #7]
 800165a:	79b9      	ldrb	r1, [r7, #6]
 800165c:	4806      	ldr	r0, [pc, #24]	; (8001678 <getBMBVoltage+0x30>)
 800165e:	4613      	mov	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4413      	add	r3, r2
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	440b      	add	r3, r1
 8001668:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	200001f8 	.word	0x200001f8

0800167c <getPackMaxCellVoltage>:

uint16_t getPackMaxCellVoltage() {
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
	uint16_t packMaxCellVoltage = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	80fb      	strh	r3, [r7, #6]
	uint16_t maxCellVoltage = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	807b      	strh	r3, [r7, #2]
	uint8_t maxCellVoltageIndex;

	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 800168a:	2300      	movs	r3, #0
 800168c:	717b      	strb	r3, [r7, #5]
 800168e:	e019      	b.n	80016c4 <getPackMaxCellVoltage+0x48>
		// find highest cell voltage on current BMB, update packMaxCellVoltage if needed
		maxCellVoltageIndex = getBMBMaxVoltIndex(bmb_index);
 8001690:	797b      	ldrb	r3, [r7, #5]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ff5c 	bl	8001550 <getBMBMaxVoltIndex>
 8001698:	4603      	mov	r3, r0
 800169a:	707b      	strb	r3, [r7, #1]
		maxCellVoltage = BMBData[bmb_index].cellVoltages[maxCellVoltageIndex];
 800169c:	797a      	ldrb	r2, [r7, #5]
 800169e:	7879      	ldrb	r1, [r7, #1]
 80016a0:	480c      	ldr	r0, [pc, #48]	; (80016d4 <getPackMaxCellVoltage+0x58>)
 80016a2:	4613      	mov	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4413      	add	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	440b      	add	r3, r1
 80016ac:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80016b0:	807b      	strh	r3, [r7, #2]

		if (maxCellVoltage > packMaxCellVoltage) {
 80016b2:	887a      	ldrh	r2, [r7, #2]
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d901      	bls.n	80016be <getPackMaxCellVoltage+0x42>
			packMaxCellVoltage = maxCellVoltage;
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	80fb      	strh	r3, [r7, #6]
	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 80016be:	797b      	ldrb	r3, [r7, #5]
 80016c0:	3301      	adds	r3, #1
 80016c2:	717b      	strb	r3, [r7, #5]
 80016c4:	797b      	ldrb	r3, [r7, #5]
 80016c6:	2b0f      	cmp	r3, #15
 80016c8:	d9e2      	bls.n	8001690 <getPackMaxCellVoltage+0x14>
		}
	}

	return packMaxCellVoltage;
 80016ca:	88fb      	ldrh	r3, [r7, #6]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200001f8 	.word	0x200001f8

080016d8 <getPackMinCellVoltage>:

uint16_t getPackMinCellVoltage() {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
	uint16_t packMinCellVoltage = UINT16_MAX;
 80016de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016e2:	80fb      	strh	r3, [r7, #6]
	uint16_t minCellVoltage = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	807b      	strh	r3, [r7, #2]
	uint8_t minCellVoltageIndex;

	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 80016e8:	2300      	movs	r3, #0
 80016ea:	717b      	strb	r3, [r7, #5]
 80016ec:	e019      	b.n	8001722 <getPackMinCellVoltage+0x4a>
		// find lowest cell temp on current BMB, update packMinCellVoltage if needed
		minCellVoltageIndex = getBMBMinVoltIndex(bmb_index);
 80016ee:	797b      	ldrb	r3, [r7, #5]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff5b 	bl	80015ac <getBMBMinVoltIndex>
 80016f6:	4603      	mov	r3, r0
 80016f8:	707b      	strb	r3, [r7, #1]
		minCellVoltage = BMBData[bmb_index].cellVoltages[minCellVoltageIndex];
 80016fa:	797a      	ldrb	r2, [r7, #5]
 80016fc:	7879      	ldrb	r1, [r7, #1]
 80016fe:	480d      	ldr	r0, [pc, #52]	; (8001734 <getPackMinCellVoltage+0x5c>)
 8001700:	4613      	mov	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4413      	add	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	440b      	add	r3, r1
 800170a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800170e:	807b      	strh	r3, [r7, #2]

		if (minCellVoltage < packMinCellVoltage) {
 8001710:	887a      	ldrh	r2, [r7, #2]
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	429a      	cmp	r2, r3
 8001716:	d201      	bcs.n	800171c <getPackMinCellVoltage+0x44>
			packMinCellVoltage = minCellVoltage;
 8001718:	887b      	ldrh	r3, [r7, #2]
 800171a:	80fb      	strh	r3, [r7, #6]
	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 800171c:	797b      	ldrb	r3, [r7, #5]
 800171e:	3301      	adds	r3, #1
 8001720:	717b      	strb	r3, [r7, #5]
 8001722:	797b      	ldrb	r3, [r7, #5]
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d9e2      	bls.n	80016ee <getPackMinCellVoltage+0x16>
		}
	}

	return packMinCellVoltage;
 8001728:	88fb      	ldrh	r3, [r7, #6]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200001f8 	.word	0x200001f8

08001738 <getPackMaxCellTemp>:

uint16_t getPackMaxCellTemp() {
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
	uint16_t packMaxCellTemp = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	80fb      	strh	r3, [r7, #6]
	uint16_t maxCellTemp = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	807b      	strh	r3, [r7, #2]
	uint8_t maxCellTempIndex;

	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001746:	2300      	movs	r3, #0
 8001748:	717b      	strb	r3, [r7, #5]
 800174a:	e01c      	b.n	8001786 <getPackMaxCellTemp+0x4e>
		// find highest cell temp on current BMB, update packMaxCellTemp if needed
		maxCellTempIndex = getBMBMaxTempIndex(bmb_index);
 800174c:	797b      	ldrb	r3, [r7, #5]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fe96 	bl	8001480 <getBMBMaxTempIndex>
 8001754:	4603      	mov	r3, r0
 8001756:	707b      	strb	r3, [r7, #1]
		maxCellTemp = BMBData[bmb_index].cellTemperatures[maxCellTempIndex];
 8001758:	797a      	ldrb	r2, [r7, #5]
 800175a:	7879      	ldrb	r1, [r7, #1]
 800175c:	480e      	ldr	r0, [pc, #56]	; (8001798 <getPackMaxCellTemp+0x60>)
 800175e:	4613      	mov	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	440b      	add	r3, r1
 8001768:	3308      	adds	r3, #8
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4403      	add	r3, r0
 800176e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001772:	807b      	strh	r3, [r7, #2]

		if (maxCellTemp > packMaxCellTemp) {
 8001774:	887a      	ldrh	r2, [r7, #2]
 8001776:	88fb      	ldrh	r3, [r7, #6]
 8001778:	429a      	cmp	r2, r3
 800177a:	d901      	bls.n	8001780 <getPackMaxCellTemp+0x48>
			packMaxCellTemp = maxCellTemp;
 800177c:	887b      	ldrh	r3, [r7, #2]
 800177e:	80fb      	strh	r3, [r7, #6]
	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001780:	797b      	ldrb	r3, [r7, #5]
 8001782:	3301      	adds	r3, #1
 8001784:	717b      	strb	r3, [r7, #5]
 8001786:	797b      	ldrb	r3, [r7, #5]
 8001788:	2b0f      	cmp	r3, #15
 800178a:	d9df      	bls.n	800174c <getPackMaxCellTemp+0x14>
		}
	}

	return packMaxCellTemp;
 800178c:	88fb      	ldrh	r3, [r7, #6]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200001f8 	.word	0x200001f8

0800179c <getBattMillivolts>:

BMB_Data_t* getBMBData(uint8_t bmb_index) {
	return &(BMBData[bmb_index]);
}

int32_t getBattMillivolts() {
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
	int32_t totalPackCellVoltage = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]

	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 80017a6:	2300      	movs	r3, #0
 80017a8:	70fb      	strb	r3, [r7, #3]
 80017aa:	e019      	b.n	80017e0 <getBattMillivolts+0x44>
		for (uint8_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 80017ac:	2300      	movs	r3, #0
 80017ae:	70bb      	strb	r3, [r7, #2]
 80017b0:	e010      	b.n	80017d4 <getBattMillivolts+0x38>
			totalPackCellVoltage +=
					(int32_t) BMBData[bmb_index].cellVoltages[i];
 80017b2:	78fa      	ldrb	r2, [r7, #3]
 80017b4:	78b9      	ldrb	r1, [r7, #2]
 80017b6:	480f      	ldr	r0, [pc, #60]	; (80017f4 <getBattMillivolts+0x58>)
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80017c6:	461a      	mov	r2, r3
			totalPackCellVoltage +=
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4413      	add	r3, r2
 80017cc:	607b      	str	r3, [r7, #4]
		for (uint8_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 80017ce:	78bb      	ldrb	r3, [r7, #2]
 80017d0:	3301      	adds	r3, #1
 80017d2:	70bb      	strb	r3, [r7, #2]
 80017d4:	78bb      	ldrb	r3, [r7, #2]
 80017d6:	2b08      	cmp	r3, #8
 80017d8:	d9eb      	bls.n	80017b2 <getBattMillivolts+0x16>
	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	3301      	adds	r3, #1
 80017de:	70fb      	strb	r3, [r7, #3]
 80017e0:	78fb      	ldrb	r3, [r7, #3]
 80017e2:	2b0f      	cmp	r3, #15
 80017e4:	d9e2      	bls.n	80017ac <getBattMillivolts+0x10>
		}
	}

	return totalPackCellVoltage;
 80017e6:	687b      	ldr	r3, [r7, #4]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	200001f8 	.word	0x200001f8

080017f8 <adcInit>:
static cmr_adc_t adc;

/**
 * @brief Initializes the ADC interface.
 */
void adcInit(void) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
    // ADC initialization and channel configuration.
    cmr_adcInit(
 80017fc:	2305      	movs	r3, #5
 80017fe:	4a03      	ldr	r2, [pc, #12]	; (800180c <adcInit+0x14>)
 8001800:	4903      	ldr	r1, [pc, #12]	; (8001810 <adcInit+0x18>)
 8001802:	4804      	ldr	r0, [pc, #16]	; (8001814 <adcInit+0x1c>)
 8001804:	f001 fc42 	bl	800308c <cmr_adcInit>
        &adc, ADC1,
        adcChannels, sizeof(adcChannels) / sizeof(adcChannels[0])
    );
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000040 	.word	0x20000040
 8001810:	40012000 	.word	0x40012000
 8001814:	2000053c 	.word	0x2000053c

08001818 <adcRead>:

/**
 * @brief Returns the current value of an ADC channel.
 */
uint32_t adcRead(adcChannels_t ch) {
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
    return adcChannels[ch].value;
 8001822:	79fa      	ldrb	r2, [r7, #7]
 8001824:	4906      	ldr	r1, [pc, #24]	; (8001840 <adcRead+0x28>)
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	3310      	adds	r3, #16
 8001832:	681b      	ldr	r3, [r3, #0]
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	20000040 	.word	0x20000040

08001844 <checkErrors>:

// Persistent value for storing the error type. Will be useful if
// error checking becomes its own task
static cmr_canHVCError_t errorRegister = CMR_CAN_HVC_STATE_ERROR;

cmr_canHVCError_t checkErrors(cmr_canHVCState_t currentState){
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
    cmr_canHVCError_t errorFlags = CMR_CAN_HVC_ERROR_NONE;
 800184e:	2300      	movs	r3, #0
 8001850:	81fb      	strh	r3, [r7, #14]
    if(checkCommandTimeout()) {
 8001852:	f000 f8ab 	bl	80019ac <checkCommandTimeout>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <checkErrors+0x20>
        // TODO E1 check the timeout field of the command message meta data
        errorFlags |= CMR_CAN_HVC_ERROR_CAN_TIMEOUT;
 800185c:	89fb      	ldrh	r3, [r7, #14]
 800185e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001862:	81fb      	strh	r3, [r7, #14]
    }
    if(checkBMBTimeout()) {
 8001864:	f000 f8b6 	bl	80019d4 <checkBMBTimeout>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <checkErrors+0x32>
        // TODO E2 devise a UART monitor system
        errorFlags |= CMR_CAN_HVC_ERROR_BMB_TIMEOUT; /**< @brief BMB has timed out. */
 800186e:	89fb      	ldrh	r3, [r7, #14]
 8001870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001874:	81fb      	strh	r3, [r7, #14]
    }
    if(getPackMaxCellTemp() > 590) { // Temp limit of 59C
 8001876:	f7ff ff5f 	bl	8001738 <getPackMaxCellTemp>
 800187a:	4603      	mov	r3, r0
 800187c:	461a      	mov	r2, r3
 800187e:	f240 234e 	movw	r3, #590	; 0x24e
 8001882:	429a      	cmp	r2, r3
 8001884:	d903      	bls.n	800188e <checkErrors+0x4a>
        // TODO: #Define with 590
        // TODO E3 create structures for cell temp data and stats (min/max)
        errorFlags |= CMR_CAN_HVC_ERROR_CELL_OVERTEMP;
 8001886:	89fb      	ldrh	r3, [r7, #14]
 8001888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800188c:	81fb      	strh	r3, [r7, #14]
    }
    if(getPackMaxCellVoltage() > 4175) { // Cell voltage limit of 4175
 800188e:	f7ff fef5 	bl	800167c <getPackMaxCellVoltage>
 8001892:	4603      	mov	r3, r0
 8001894:	461a      	mov	r2, r3
 8001896:	f241 034f 	movw	r3, #4175	; 0x104f
 800189a:	429a      	cmp	r2, r3
 800189c:	d903      	bls.n	80018a6 <checkErrors+0x62>
        // TODO E4 create structures for cell voltage data and stats (min/max)
        errorFlags |= CMR_CAN_HVC_ERROR_CELL_OVERVOLT;
 800189e:	89fb      	ldrh	r3, [r7, #14]
 80018a0:	f043 0320 	orr.w	r3, r3, #32
 80018a4:	81fb      	strh	r3, [r7, #14]
    }
    if(getPackMinCellVoltage() < 2400) {
 80018a6:	f7ff ff17 	bl	80016d8 <getPackMinCellVoltage>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80018b0:	d203      	bcs.n	80018ba <checkErrors+0x76>
        // TODO E5 create structures for cell voltage data and stats (min/max)
        errorFlags |= CMR_CAN_HVC_ERROR_CELL_UNDERVOLT;
 80018b2:	89fb      	ldrh	r3, [r7, #14]
 80018b4:	f043 0310 	orr.w	r3, r3, #16
 80018b8:	81fb      	strh	r3, [r7, #14]
    }
    if((getBattMillivolts()) > maxPackVoltageMV) {
 80018ba:	f7ff ff6f 	bl	800179c <getBattMillivolts>
 80018be:	4603      	mov	r3, r0
 80018c0:	4a26      	ldr	r2, [pc, #152]	; (800195c <checkErrors+0x118>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	dd03      	ble.n	80018ce <checkErrors+0x8a>
        // E6
        errorFlags |= CMR_CAN_HVC_ERROR_PACK_OVERVOLT;
 80018c6:	89fb      	ldrh	r3, [r7, #14]
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	81fb      	strh	r3, [r7, #14]
    }
    if((getBattMillivolts()) < minPackVoltageMV) {
 80018ce:	f7ff ff65 	bl	800179c <getBattMillivolts>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4a22      	ldr	r2, [pc, #136]	; (8001960 <checkErrors+0x11c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	da03      	bge.n	80018e2 <checkErrors+0x9e>
        // E7
        errorFlags |= CMR_CAN_HVC_ERROR_PACK_UNDERVOLT;
 80018da:	89fb      	ldrh	r3, [r7, #14]
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	81fb      	strh	r3, [r7, #14]
    }
//    if(getCurrentAverage() > maxPackCurrentAverageMA) {
//        // E9
//        errorFlags |= CMR_CAN_HVC_ERROR_PACK_OVERCURRENT;
//    }
    if(checkRelayPowerFault() && (getState() != CMR_CAN_HVC_STATE_ERROR && getState() != CMR_CAN_HVC_STATE_CLEAR_ERROR)) {//(getRelayStatus() & 0xAA) != 0xAA) {
 80018e2:	f000 f979 	bl	8001bd8 <checkRelayPowerFault>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <checkErrors+0xb6>
 80018ec:	f001 f87a 	bl	80029e4 <getState>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <checkErrors+0xb6>
 80018f6:	f001 f875 	bl	80029e4 <getState>
        // TODO look into the AIR_Fault_L signal, it might be necessary to confirm this is not active
        // before looking at relay status, otherwise we could be in dead lock trying to clear errors.
        //errorFlags |= BMS_ERROR_CODE_RELAY;
    }

    if(
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d014      	beq.n	800192a <checkErrors+0xe6>
    	(currentState == CMR_CAN_HVC_STATE_DRIVE_PRECHARGE ||
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	2b04      	cmp	r3, #4
 8001904:	d011      	beq.n	800192a <checkErrors+0xe6>
        currentState == CMR_CAN_HVC_STATE_DRIVE_PRECHARGE_COMPLETE ||
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b05      	cmp	r3, #5
 800190a:	d00e      	beq.n	800192a <checkErrors+0xe6>
        currentState == CMR_CAN_HVC_STATE_DRIVE ||
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	2b06      	cmp	r3, #6
 8001910:	d00b      	beq.n	800192a <checkErrors+0xe6>
        currentState == CMR_CAN_HVC_STATE_CHARGE_PRECHARGE ||
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	2b07      	cmp	r3, #7
 8001916:	d008      	beq.n	800192a <checkErrors+0xe6>
        currentState == CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE ||
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	2b08      	cmp	r3, #8
 800191c:	d005      	beq.n	800192a <checkErrors+0xe6>
        currentState == CMR_CAN_HVC_STATE_CHARGE_TRICKLE ||
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b09      	cmp	r3, #9
 8001922:	d002      	beq.n	800192a <checkErrors+0xe6>
        currentState == CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT ||
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	2b0a      	cmp	r3, #10
 8001928:	d109      	bne.n	800193e <checkErrors+0xfa>
        currentState == CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE) &&
        (cmr_gpioRead(SAFETY_BINARY) == 0)) {
 800192a:	200a      	movs	r0, #10
 800192c:	f002 fdf2 	bl	8004514 <cmr_gpioRead>
 8001930:	4603      	mov	r3, r0
        currentState == CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE) &&
 8001932:	2b00      	cmp	r3, #0
 8001934:	d103      	bne.n	800193e <checkErrors+0xfa>
        // E11
        // If SC voltage is below 8v while we're trying to drive relays, throw an error.
        errorFlags |= CMR_CAN_HVC_ERROR_LV_UNDERVOLT;
 8001936:	89fb      	ldrh	r3, [r7, #14]
 8001938:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800193c:	81fb      	strh	r3, [r7, #14]
    }

    // Cut relay power if we have an error
    if (errorFlags != CMR_CAN_HVC_ERROR_NONE) {
 800193e:	89fb      	ldrh	r3, [r7, #14]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <checkErrors+0x108>
        cmr_gpioWrite(GPIO_BMB_FAULT_L, 0);
 8001944:	2100      	movs	r1, #0
 8001946:	2003      	movs	r0, #3
 8001948:	f002 fd6e 	bl	8004428 <cmr_gpioWrite>
    }
    errorRegister = errorFlags;
 800194c:	4a05      	ldr	r2, [pc, #20]	; (8001964 <checkErrors+0x120>)
 800194e:	89fb      	ldrh	r3, [r7, #14]
 8001950:	8013      	strh	r3, [r2, #0]
    
    return errorFlags;
 8001952:	89fb      	ldrh	r3, [r7, #14]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	000927c0 	.word	0x000927c0
 8001960:	00057e40 	.word	0x00057e40
 8001964:	200058ec 	.word	0x200058ec

08001968 <clearHardwareFault>:

void clearHardwareFault(bool assertClear) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
    // Set GPIO pin low (asserted) if
    // assertClear, high (deasserted) otherwise
    if (assertClear) {
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d004      	beq.n	8001982 <clearHardwareFault+0x1a>
        cmr_gpioWrite(GPIO_CLEAR_FAULT_L, 0);
 8001978:	2100      	movs	r1, #0
 800197a:	2004      	movs	r0, #4
 800197c:	f002 fd54 	bl	8004428 <cmr_gpioWrite>
    } else {
        cmr_gpioWrite(GPIO_CLEAR_FAULT_L, 1);
    }
}
 8001980:	e003      	b.n	800198a <clearHardwareFault+0x22>
        cmr_gpioWrite(GPIO_CLEAR_FAULT_L, 1);
 8001982:	2101      	movs	r1, #1
 8001984:	2004      	movs	r0, #4
 8001986:	f002 fd4f 	bl	8004428 <cmr_gpioWrite>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <clearErrorReg>:


void clearErrorReg() {
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
    errorRegister = CMR_CAN_HVC_ERROR_NONE;
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <clearErrorReg+0x14>)
 800199a:	2200      	movs	r2, #0
 800199c:	801a      	strh	r2, [r3, #0]
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	200058ec 	.word	0x200058ec

080019ac <checkCommandTimeout>:

cmr_canHVCError_t getErrorReg(){
    return errorRegister;
}

static bool checkCommandTimeout() {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
    // CAN error if HVC Command has timed out after 50ms
    // TODO: latch can error?
    TickType_t lastWakeTime = xTaskGetTickCount();
 80019b2:	f004 fde1 	bl	8006578 <xTaskGetTickCount>
 80019b6:	6078      	str	r0, [r7, #4]
    bool hvc_commmand_error = (cmr_canRXMetaTimeoutError(&(canRXMeta[CANRX_HVC_COMMAND]), lastWakeTime) < 0);
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <checkCommandTimeout+0x24>)
 80019bc:	f001 fcb1 	bl	8003322 <cmr_canRXMetaTimeoutError>
 80019c0:	4603      	mov	r3, r0
 80019c2:	0fdb      	lsrs	r3, r3, #31
 80019c4:	70fb      	strb	r3, [r7, #3]

	return hvc_commmand_error;
 80019c6:	78fb      	ldrb	r3, [r7, #3]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200000c4 	.word	0x200000c4

080019d4 <checkBMBTimeout>:

static bool checkBMBTimeout() {
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_BMBS; i++) {
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	e00a      	b.n	80019f6 <checkBMBTimeout+0x22>
        if (BMBTimeoutCount[i] >= BMB_TIMEOUT) {
 80019e0:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <checkBMBTimeout+0x38>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	dd01      	ble.n	80019f0 <checkBMBTimeout+0x1c>
            return true;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e006      	b.n	80019fe <checkBMBTimeout+0x2a>
    for (int i = 0; i < NUM_BMBS; i++) {
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3301      	adds	r3, #1
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b0f      	cmp	r3, #15
 80019fa:	ddf1      	ble.n	80019e0 <checkBMBTimeout+0xc>
        }
    }
    return false;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	2000586c 	.word	0x2000586c

08001a10 <setRelay>:
void relaySetup() {
    // Discharge relay is default closed, initialize pin accordingly
    relayUsageVector = RELAY_CONTACTOR_MASK << DISCHARGE_RELAY;
}

uint8_t setRelay(BMS_relay_t relay, BMS_relay_state_t state) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	460a      	mov	r2, r1
 8001a1a:	71fb      	strb	r3, [r7, #7]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	71bb      	strb	r3, [r7, #6]
    
    switch (relay) {
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	f200 80a6 	bhi.w	8001b74 <setRelay+0x164>
 8001a28:	a201      	add	r2, pc, #4	; (adr r2, 8001a30 <setRelay+0x20>)
 8001a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2e:	bf00      	nop
 8001a30:	08001b31 	.word	0x08001b31
 8001a34:	08001ae1 	.word	0x08001ae1
 8001a38:	08001a91 	.word	0x08001a91
 8001a3c:	08001a41 	.word	0x08001a41
        case AIR_POS_RELAY:
            if (state == OPEN) {
 8001a40:	79bb      	ldrb	r3, [r7, #6]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d113      	bne.n	8001a6e <setRelay+0x5e>
                relayUsageVector &= ~(RELAY_CONTACTOR_MASK << AIR_POS_RELAY);
 8001a46:	2301      	movs	r3, #1
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	b25a      	sxtb	r2, r3
 8001a52:	4b56      	ldr	r3, [pc, #344]	; (8001bac <setRelay+0x19c>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	b25b      	sxtb	r3, r3
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	b25b      	sxtb	r3, r3
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	4b52      	ldr	r3, [pc, #328]	; (8001bac <setRelay+0x19c>)
 8001a62:	701a      	strb	r2, [r3, #0]
                cmr_gpioWrite(GPIO_AIR_POSITIVE_EN, 0);
 8001a64:	2100      	movs	r1, #0
 8001a66:	2008      	movs	r0, #8
 8001a68:	f002 fcde 	bl	8004428 <cmr_gpioWrite>
            } else {
                // Close relay
                relayUsageVector |= RELAY_CONTACTOR_MASK << AIR_POS_RELAY;
                cmr_gpioWrite(GPIO_AIR_POSITIVE_EN, 1);
            }
            break;
 8001a6c:	e096      	b.n	8001b9c <setRelay+0x18c>
                relayUsageVector |= RELAY_CONTACTOR_MASK << AIR_POS_RELAY;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	b25a      	sxtb	r2, r3
 8001a74:	4b4d      	ldr	r3, [pc, #308]	; (8001bac <setRelay+0x19c>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	b25b      	sxtb	r3, r3
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	b25b      	sxtb	r3, r3
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4b4a      	ldr	r3, [pc, #296]	; (8001bac <setRelay+0x19c>)
 8001a84:	701a      	strb	r2, [r3, #0]
                cmr_gpioWrite(GPIO_AIR_POSITIVE_EN, 1);
 8001a86:	2101      	movs	r1, #1
 8001a88:	2008      	movs	r0, #8
 8001a8a:	f002 fccd 	bl	8004428 <cmr_gpioWrite>
            break;
 8001a8e:	e085      	b.n	8001b9c <setRelay+0x18c>
        case AIR_NEG_RELAY:
            if (state == OPEN) {
 8001a90:	79bb      	ldrb	r3, [r7, #6]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d113      	bne.n	8001abe <setRelay+0xae>
                relayUsageVector &= ~(RELAY_CONTACTOR_MASK << AIR_NEG_RELAY);
 8001a96:	2301      	movs	r3, #1
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	b25a      	sxtb	r2, r3
 8001aa2:	4b42      	ldr	r3, [pc, #264]	; (8001bac <setRelay+0x19c>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	b25b      	sxtb	r3, r3
 8001aaa:	4013      	ands	r3, r2
 8001aac:	b25b      	sxtb	r3, r3
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	4b3e      	ldr	r3, [pc, #248]	; (8001bac <setRelay+0x19c>)
 8001ab2:	701a      	strb	r2, [r3, #0]
                cmr_gpioWrite(GPIO_AIR_NEGATIVE_EN, 0);
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2009      	movs	r0, #9
 8001ab8:	f002 fcb6 	bl	8004428 <cmr_gpioWrite>
            } else {
                // Close relay
                relayUsageVector |= RELAY_CONTACTOR_MASK << AIR_NEG_RELAY;
                cmr_gpioWrite(GPIO_AIR_NEGATIVE_EN, 1);
            }
            break;
 8001abc:	e06e      	b.n	8001b9c <setRelay+0x18c>
                relayUsageVector |= RELAY_CONTACTOR_MASK << AIR_NEG_RELAY;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	b25a      	sxtb	r2, r3
 8001ac4:	4b39      	ldr	r3, [pc, #228]	; (8001bac <setRelay+0x19c>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	b25b      	sxtb	r3, r3
 8001acc:	4313      	orrs	r3, r2
 8001ace:	b25b      	sxtb	r3, r3
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4b36      	ldr	r3, [pc, #216]	; (8001bac <setRelay+0x19c>)
 8001ad4:	701a      	strb	r2, [r3, #0]
                cmr_gpioWrite(GPIO_AIR_NEGATIVE_EN, 1);
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	2009      	movs	r0, #9
 8001ada:	f002 fca5 	bl	8004428 <cmr_gpioWrite>
            break;
 8001ade:	e05d      	b.n	8001b9c <setRelay+0x18c>
        case PRECHARGE_RELAY:
            if (state == OPEN) {
 8001ae0:	79bb      	ldrb	r3, [r7, #6]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d113      	bne.n	8001b0e <setRelay+0xfe>
                relayUsageVector &= ~(RELAY_CONTACTOR_MASK << PRECHARGE_RELAY);
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	b25a      	sxtb	r2, r3
 8001af2:	4b2e      	ldr	r3, [pc, #184]	; (8001bac <setRelay+0x19c>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	b25b      	sxtb	r3, r3
 8001afa:	4013      	ands	r3, r2
 8001afc:	b25b      	sxtb	r3, r3
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	4b2a      	ldr	r3, [pc, #168]	; (8001bac <setRelay+0x19c>)
 8001b02:	701a      	strb	r2, [r3, #0]
                cmr_gpioWrite(GPIO_PRECHARGE_EN, 0);
 8001b04:	2100      	movs	r1, #0
 8001b06:	2007      	movs	r0, #7
 8001b08:	f002 fc8e 	bl	8004428 <cmr_gpioWrite>
            } else {
                // Close relay
                relayUsageVector |= RELAY_CONTACTOR_MASK << PRECHARGE_RELAY;
                cmr_gpioWrite(GPIO_PRECHARGE_EN, 1);
            }
            break;
 8001b0c:	e046      	b.n	8001b9c <setRelay+0x18c>
                relayUsageVector |= RELAY_CONTACTOR_MASK << PRECHARGE_RELAY;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	b25a      	sxtb	r2, r3
 8001b14:	4b25      	ldr	r3, [pc, #148]	; (8001bac <setRelay+0x19c>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	b25b      	sxtb	r3, r3
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	b25b      	sxtb	r3, r3
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4b22      	ldr	r3, [pc, #136]	; (8001bac <setRelay+0x19c>)
 8001b24:	701a      	strb	r2, [r3, #0]
                cmr_gpioWrite(GPIO_PRECHARGE_EN, 1);
 8001b26:	2101      	movs	r1, #1
 8001b28:	2007      	movs	r0, #7
 8001b2a:	f002 fc7d 	bl	8004428 <cmr_gpioWrite>
            break;
 8001b2e:	e035      	b.n	8001b9c <setRelay+0x18c>
        case DISCHARGE_RELAY:
            if (state == OPEN) {
 8001b30:	79bb      	ldrb	r3, [r7, #6]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d111      	bne.n	8001b5a <setRelay+0x14a>
                relayUsageVector &= ~(RELAY_CONTACTOR_MASK << DISCHARGE_RELAY);
 8001b36:	2301      	movs	r3, #1
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	b25a      	sxtb	r2, r3
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <setRelay+0x19c>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	b25b      	sxtb	r3, r3
 8001b46:	4013      	ands	r3, r2
 8001b48:	b25b      	sxtb	r3, r3
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	4b17      	ldr	r3, [pc, #92]	; (8001bac <setRelay+0x19c>)
 8001b4e:	701a      	strb	r2, [r3, #0]
                // Discharge relay is default close, set high pin to open
                cmr_gpioWrite(GPIO_DISCHARGE_EN, 1);
 8001b50:	2101      	movs	r1, #1
 8001b52:	2006      	movs	r0, #6
 8001b54:	f002 fc68 	bl	8004428 <cmr_gpioWrite>
            } else {
                // Close relay
                relayUsageVector |= RELAY_CONTACTOR_MASK << DISCHARGE_RELAY;
                cmr_gpioWrite(GPIO_DISCHARGE_EN, 0);
            }
            break;
 8001b58:	e020      	b.n	8001b9c <setRelay+0x18c>
                relayUsageVector |= RELAY_CONTACTOR_MASK << DISCHARGE_RELAY;
 8001b5a:	4b14      	ldr	r3, [pc, #80]	; (8001bac <setRelay+0x19c>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2201      	movs	r2, #1
 8001b62:	4313      	orrs	r3, r2
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <setRelay+0x19c>)
 8001b68:	701a      	strb	r2, [r3, #0]
                cmr_gpioWrite(GPIO_DISCHARGE_EN, 0);
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2006      	movs	r0, #6
 8001b6e:	f002 fc5b 	bl	8004428 <cmr_gpioWrite>
            break;
 8001b72:	e013      	b.n	8001b9c <setRelay+0x18c>
        default:
            // Error, open relays
            cmr_gpioWrite(GPIO_AIR_POSITIVE_EN, 0);
 8001b74:	2100      	movs	r1, #0
 8001b76:	2008      	movs	r0, #8
 8001b78:	f002 fc56 	bl	8004428 <cmr_gpioWrite>
            cmr_gpioWrite(GPIO_AIR_NEGATIVE_EN, 0);
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	2009      	movs	r0, #9
 8001b80:	f002 fc52 	bl	8004428 <cmr_gpioWrite>
            cmr_gpioWrite(GPIO_PRECHARGE_EN, 0);
 8001b84:	2100      	movs	r1, #0
 8001b86:	2007      	movs	r0, #7
 8001b88:	f002 fc4e 	bl	8004428 <cmr_gpioWrite>
            cmr_gpioWrite(GPIO_DISCHARGE_EN, 1);
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	2006      	movs	r0, #6
 8001b90:	f002 fc4a 	bl	8004428 <cmr_gpioWrite>
            relayUsageVector = RELAY_CONTACTOR_MASK << DISCHARGE_RELAY;
 8001b94:	2201      	movs	r2, #1
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <setRelay+0x19c>)
 8001b98:	701a      	strb	r2, [r3, #0]
            break;
 8001b9a:	bf00      	nop
    }
    
    return relayUsageVector;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <setRelay+0x19c>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	b2db      	uxtb	r3, r3
    
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200058ee 	.word	0x200058ee

08001bb0 <getRelayStatus>:

uint8_t getRelayStatus(){
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
    // Status pin is high for OK, low for FAULT
    uint8_t relayStatusVector = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	71fb      	strb	r3, [r7, #7]

	// AIR status feedback functionality removed

    return relayUsageVector | relayStatusVector;
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <getRelayStatus+0x24>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	b2db      	uxtb	r3, r3
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	200058ee 	.word	0x200058ee

08001bd8 <checkRelayPowerFault>:

bool checkRelayPowerFault() {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
    return !cmr_gpioRead(GPIO_AIR_FAULT_L);
 8001bdc:	2005      	movs	r0, #5
 8001bde:	f002 fc99 	bl	8004514 <cmr_gpioRead>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bf0c      	ite	eq
 8001be8:	2301      	moveq	r3, #1
 8001bea:	2300      	movne	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <canTX1Hz>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void canTX1Hz(void *pvParameters) {
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    TickType_t lastWakeTime = xTaskGetTickCount();
 8001bfa:	f004 fcbd 	bl	8006578 <xTaskGetTickCount>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	60bb      	str	r3, [r7, #8]
    while (1) {

        // BMB Temperature Status 
        for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001c02:	2300      	movs	r3, #0
 8001c04:	73fb      	strb	r3, [r7, #15]
 8001c06:	e006      	b.n	8001c16 <canTX1Hz+0x24>
            sendBMSBMBStatusTemp(bmb_index);
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f9cf 	bl	8001fae <sendBMSBMBStatusTemp>
        for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	3301      	adds	r3, #1
 8001c14:	73fb      	strb	r3, [r7, #15]
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	2b0f      	cmp	r3, #15
 8001c1a:	d9f5      	bls.n	8001c08 <canTX1Hz+0x16>
        }
        sendBMSMinMaxCellTemp();
 8001c1c:	f000 fa5a 	bl	80020d4 <sendBMSMinMaxCellTemp>

        sendAllBMBVoltages();
 8001c20:	f000 fb54 	bl	80022cc <sendAllBMBVoltages>

        vTaskDelayUntil(&lastWakeTime, canTX1Hz_period_ms);
 8001c24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c28:	f107 0308 	add.w	r3, r7, #8
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f004 fb2c 	bl	800628c <vTaskDelayUntil>
        for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001c34:	e7e5      	b.n	8001c02 <canTX1Hz+0x10>

08001c36 <canTX10Hz>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void canTX10Hz(void *pvParameters) {
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b084      	sub	sp, #16
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    TickType_t lastWakeTime = xTaskGetTickCount();
 8001c3e:	f004 fc9b 	bl	8006578 <xTaskGetTickCount>
 8001c42:	4603      	mov	r3, r0
 8001c44:	60bb      	str	r3, [r7, #8]
    while (1) {
        // BRUSA Charger decided by state machine 
        // sendBRUSAChargerControl();

        // BMB Voltage Status 
        for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001c46:	2300      	movs	r3, #0
 8001c48:	73fb      	strb	r3, [r7, #15]
 8001c4a:	e006      	b.n	8001c5a <canTX10Hz+0x24>
            sendBMSBMBStatusVoltage(bmb_index);
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f973 	bl	8001f3a <sendBMSBMBStatusVoltage>
        for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	3301      	adds	r3, #1
 8001c58:	73fb      	strb	r3, [r7, #15]
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	2b0f      	cmp	r3, #15
 8001c5e:	d9f5      	bls.n	8001c4c <canTX10Hz+0x16>
        }

        vTaskDelayUntil(&lastWakeTime, canTX10Hz_period_ms);
 8001c60:	2264      	movs	r2, #100	; 0x64
 8001c62:	f107 0308 	add.w	r3, r7, #8
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f004 fb0f 	bl	800628c <vTaskDelayUntil>
        for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001c6e:	e7ea      	b.n	8001c46 <canTX10Hz+0x10>

08001c70 <canTX200Hz>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void canTX200Hz(void *pvParameters) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

//    cmr_canRXMeta_t *heartbeatVSMMeta = canRXMeta + CANRX_HEARTBEAT_VSM;
//    volatile cmr_canHeartbeat_t *heartbeatVSM =
//        (void *) heartbeatVSMMeta->payload;

    TickType_t lastWakeTime = xTaskGetTickCount();
 8001c78:	f004 fc7e 	bl	8006578 <xTaskGetTickCount>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	60fb      	str	r3, [r7, #12]
    while (1) {
        sendBMSMinMaxCellVoltage();
 8001c80:	f000 f9d0 	bl	8002024 <sendBMSMinMaxCellVoltage>

        vTaskDelayUntil(&lastWakeTime, canTX200Hz_period_ms);
 8001c84:	2205      	movs	r2, #5
 8001c86:	f107 030c 	add.w	r3, r7, #12
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f004 fafd 	bl	800628c <vTaskDelayUntil>
        sendBMSMinMaxCellVoltage();
 8001c92:	e7f5      	b.n	8001c80 <canTX200Hz+0x10>

08001c94 <canTX100Hz>:
    }
}

static void canTX100Hz(void *pvParameters) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

//    cmr_canRXMeta_t *heartbeatVSMMeta = canRXMeta + CANRX_HEARTBEAT_VSM;
//    volatile cmr_canHeartbeat_t *heartbeatVSM =
//        (void *) heartbeatVSMMeta->payload;

    TickType_t lastWakeTime = xTaskGetTickCount();
 8001c9c:	f004 fc6c 	bl	8006578 <xTaskGetTickCount>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	60fb      	str	r3, [r7, #12]
    while (1) {
        sendHeartbeat(lastWakeTime);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 f8aa 	bl	8001e00 <sendHeartbeat>
        sendHVCPackVoltage();
 8001cac:	f000 f916 	bl	8001edc <sendHVCPackVoltage>
        sendBMSPackCurrent();
 8001cb0:	f000 f92c 	bl	8001f0c <sendBMSPackCurrent>
        sendBMSLowVoltage();
 8001cb4:	f000 fa66 	bl	8002184 <sendBMSLowVoltage>
        sendBMSBMBStatusErrors();
 8001cb8:	f000 faa0 	bl	80021fc <sendBMSBMBStatusErrors>

        vTaskDelayUntil(&lastWakeTime, canTX100Hz_period_ms);
 8001cbc:	220a      	movs	r2, #10
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f004 fae1 	bl	800628c <vTaskDelayUntil>
        sendHeartbeat(lastWakeTime);
 8001cca:	e7eb      	b.n	8001ca4 <canTX100Hz+0x10>

08001ccc <canInit>:
}

/**
 * @brief Initializes the CAN interface.
 */
void canInit(void) {
 8001ccc:	b590      	push	{r4, r7, lr}
 8001cce:	b08b      	sub	sp, #44	; 0x2c
 8001cd0:	af06      	add	r7, sp, #24
    // CAN2 initialization.
    cmr_canInit(
 8001cd2:	2340      	movs	r3, #64	; 0x40
 8001cd4:	9305      	str	r3, [sp, #20]
 8001cd6:	4b1f      	ldr	r3, [pc, #124]	; (8001d54 <canInit+0x88>)
 8001cd8:	9304      	str	r3, [sp, #16]
 8001cda:	2320      	movs	r3, #32
 8001cdc:	9303      	str	r3, [sp, #12]
 8001cde:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <canInit+0x88>)
 8001ce0:	9302      	str	r3, [sp, #8]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	9301      	str	r3, [sp, #4]
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <canInit+0x8c>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	491b      	ldr	r1, [pc, #108]	; (8001d5c <canInit+0x90>)
 8001cf0:	481b      	ldr	r0, [pc, #108]	; (8001d60 <canInit+0x94>)
 8001cf2:	f001 fbbd 	bl	8003470 <cmr_canInit>
        GPIOB, GPIO_PIN_5,     // CAN2 RX port/pin.
        GPIOB, GPIO_PIN_6      // CAN2 TX port/pin.
    );

    // CAN2 filters.
    const cmr_canFilter_t canFilters[] = {
 8001cf6:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <canInit+0x98>)
 8001cf8:	463c      	mov	r4, r7
 8001cfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                CMR_CANID_HVC_COMMAND,
				CMR_CANID_EMD_MEASUREMENT
            }
        }
    };
    cmr_canFilter(
 8001d00:	463b      	mov	r3, r7
 8001d02:	2201      	movs	r2, #1
 8001d04:	4619      	mov	r1, r3
 8001d06:	4816      	ldr	r0, [pc, #88]	; (8001d60 <canInit+0x94>)
 8001d08:	f001 fc60 	bl	80035cc <cmr_canFilter>
        &can, canFilters, sizeof(canFilters) / sizeof(canFilters[0])
    );

    // Task initialization.
    cmr_taskInit(
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	2300      	movs	r3, #0
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <canInit+0x9c>)
 8001d14:	4915      	ldr	r1, [pc, #84]	; (8001d6c <canInit+0xa0>)
 8001d16:	4816      	ldr	r0, [pc, #88]	; (8001d70 <canInit+0xa4>)
 8001d18:	f003 f8ea 	bl	8004ef0 <cmr_taskInit>
        "CAN TX 1Hz",
        canTX1Hz_priority,
        canTX1Hz,
        NULL
    );
    cmr_taskInit(
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	2300      	movs	r3, #0
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <canInit+0xa8>)
 8001d24:	4914      	ldr	r1, [pc, #80]	; (8001d78 <canInit+0xac>)
 8001d26:	4815      	ldr	r0, [pc, #84]	; (8001d7c <canInit+0xb0>)
 8001d28:	f003 f8e2 	bl	8004ef0 <cmr_taskInit>
        "CAN TX 10Hz",
        canTX10Hz_priority,
        canTX10Hz,
        NULL
    );
    cmr_taskInit(
 8001d2c:	2205      	movs	r2, #5
 8001d2e:	2300      	movs	r3, #0
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <canInit+0xb4>)
 8001d34:	4913      	ldr	r1, [pc, #76]	; (8001d84 <canInit+0xb8>)
 8001d36:	4814      	ldr	r0, [pc, #80]	; (8001d88 <canInit+0xbc>)
 8001d38:	f003 f8da 	bl	8004ef0 <cmr_taskInit>
        "CAN TX 200Hz",
        canTX200Hz_priority,
        canTX200Hz,
        NULL
    );
    cmr_taskInit(
 8001d3c:	2205      	movs	r2, #5
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <canInit+0xc0>)
 8001d44:	4912      	ldr	r1, [pc, #72]	; (8001d90 <canInit+0xc4>)
 8001d46:	4813      	ldr	r0, [pc, #76]	; (8001d94 <canInit+0xc8>)
 8001d48:	f003 f8d2 	bl	8004ef0 <cmr_taskInit>
        "CAN TX 100Hz",
        canTX100Hz_priority,
        canTX100Hz,
        NULL
    );
}
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd90      	pop	{r4, r7, pc}
 8001d54:	40020400 	.word	0x40020400
 8001d58:	200000a4 	.word	0x200000a4
 8001d5c:	40006800 	.word	0x40006800
 8001d60:	200058f0 	.word	0x200058f0
 8001d64:	0800c56c 	.word	0x0800c56c
 8001d68:	08001bf3 	.word	0x08001bf3
 8001d6c:	0800c534 	.word	0x0800c534
 8001d70:	20005970 	.word	0x20005970
 8001d74:	08001c37 	.word	0x08001c37
 8001d78:	0800c540 	.word	0x0800c540
 8001d7c:	2000ac50 	.word	0x2000ac50
 8001d80:	08001c71 	.word	0x08001c71
 8001d84:	0800c54c 	.word	0x0800c54c
 8001d88:	2000ff30 	.word	0x2000ff30
 8001d8c:	08001c95 	.word	0x08001c95
 8001d90:	0800c55c 	.word	0x0800c55c
 8001d94:	20015210 	.word	0x20015210

08001d98 <canTX>:
 * @param len The data's length, in bytes.
 * @param timeout The timeout, in ticks.
 *
 * @return 0 on success, or a negative error code on timeout.
 */
int canTX(cmr_canID_t id, const void *data, size_t len, TickType_t timeout) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af02      	add	r7, sp, #8
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	4603      	mov	r3, r0
 8001da6:	81fb      	strh	r3, [r7, #14]
    return cmr_canTX(&can, id, data, len, timeout);
 8001da8:	89f9      	ldrh	r1, [r7, #14]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	4804      	ldr	r0, [pc, #16]	; (8001dc4 <canTX+0x2c>)
 8001db4:	f001 fbce 	bl	8003554 <cmr_canTX>
 8001db8:	4603      	mov	r3, r0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200058f0 	.word	0x200058f0

08001dc8 <getPayload>:
 *
 * @param rxMsg The message to get the payload of.
 *
 * @return Pointer to payload, or NULL if rxMsg is invalid.
 */
volatile void *getPayload(canRX_t rxMsg) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
    configASSERT(rxMsg < CANRX_LEN);
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d904      	bls.n	8001de2 <getPayload+0x1a>
 8001dd8:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001ddc:	4806      	ldr	r0, [pc, #24]	; (8001df8 <getPayload+0x30>)
 8001dde:	f002 ff1e 	bl	8004c1e <cmr_panic>

    cmr_canRXMeta_t *rxMeta = &(canRXMeta[rxMsg]);
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	015b      	lsls	r3, r3, #5
 8001de6:	4a05      	ldr	r2, [pc, #20]	; (8001dfc <getPayload+0x34>)
 8001de8:	4413      	add	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]

    return (void *)(&rxMeta->payload);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3318      	adds	r3, #24
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	0800c57c 	.word	0x0800c57c
 8001dfc:	200000a4 	.word	0x200000a4

08001e00 <sendHeartbeat>:
/**
 * @brief Sets up HVC CAN heartbeat with current errors and warnings, then sends it.
 *
 * @param lastWakeTime Pass in from canTX100Hz. Used to update lastStateChangeTime and errors/warnings.
 */
static void sendHeartbeat(TickType_t lastWakeTime) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
    cmr_canHVCState_t currentState = getState();
 8001e08:	f000 fdec 	bl	80029e4 <getState>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	75fb      	strb	r3, [r7, #23]
    cmr_canHVCError_t currentError = CMR_CAN_HVC_ERROR_NONE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	82bb      	strh	r3, [r7, #20]
    currentError = checkErrors(currentState);
 8001e14:	7dfb      	ldrb	r3, [r7, #23]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fd14 	bl	8001844 <checkErrors>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	82bb      	strh	r3, [r7, #20]

    cmr_canHVCHeartbeat_t HVCHeartbeat = {
 8001e20:	8abb      	ldrh	r3, [r7, #20]
 8001e22:	81bb      	strh	r3, [r7, #12]
 8001e24:	2300      	movs	r3, #0
 8001e26:	73bb      	strb	r3, [r7, #14]
 8001e28:	7dfb      	ldrb	r3, [r7, #23]
 8001e2a:	73fb      	strb	r3, [r7, #15]
        .errorStatus = currentError,
        .hvcMode = CMR_CAN_HVC_MODE_ERROR,
        .hvcState = currentState,
        .relayStatus = getRelayStatus(),
 8001e2c:	f7ff fec0 	bl	8001bb0 <getRelayStatus>
 8001e30:	4603      	mov	r3, r0
    cmr_canHVCHeartbeat_t HVCHeartbeat = {
 8001e32:	743b      	strb	r3, [r7, #16]
 8001e34:	2300      	movs	r3, #0
 8001e36:	747b      	strb	r3, [r7, #17]
        .uptime_s = 0,
    };

    switch (currentState) {
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
 8001e3a:	2b0b      	cmp	r3, #11
 8001e3c:	d83e      	bhi.n	8001ebc <sendHeartbeat+0xbc>
 8001e3e:	a201      	add	r2, pc, #4	; (adr r2, 8001e44 <sendHeartbeat+0x44>)
 8001e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e44:	08001eb1 	.word	0x08001eb1
 8001e48:	08001e75 	.word	0x08001e75
 8001e4c:	08001e7b 	.word	0x08001e7b
 8001e50:	08001e81 	.word	0x08001e81
 8001e54:	08001e87 	.word	0x08001e87
 8001e58:	08001e8d 	.word	0x08001e8d
 8001e5c:	08001e93 	.word	0x08001e93
 8001e60:	08001e99 	.word	0x08001e99
 8001e64:	08001e9f 	.word	0x08001e9f
 8001e68:	08001ea5 	.word	0x08001ea5
 8001e6c:	08001eab 	.word	0x08001eab
 8001e70:	08001eb7 	.word	0x08001eb7
        case CMR_CAN_HVC_STATE_DISCHARGE: // S1
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_IDLE;
 8001e74:	2301      	movs	r3, #1
 8001e76:	73bb      	strb	r3, [r7, #14]
            break;
 8001e78:	e023      	b.n	8001ec2 <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_STANDBY: // S2
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_IDLE;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	73bb      	strb	r3, [r7, #14]
            break;
 8001e7e:	e020      	b.n	8001ec2 <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_DRIVE_PRECHARGE: // S3
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_START;
 8001e80:	2302      	movs	r3, #2
 8001e82:	73bb      	strb	r3, [r7, #14]
            break;
 8001e84:	e01d      	b.n	8001ec2 <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_DRIVE_PRECHARGE_COMPLETE: // S4
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_START;
 8001e86:	2302      	movs	r3, #2
 8001e88:	73bb      	strb	r3, [r7, #14]
            break;
 8001e8a:	e01a      	b.n	8001ec2 <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_DRIVE: // S5
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_RUN;
 8001e8c:	2304      	movs	r3, #4
 8001e8e:	73bb      	strb	r3, [r7, #14]
            break;
 8001e90:	e017      	b.n	8001ec2 <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_CHARGE_PRECHARGE: // S6
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_CHARGE;
 8001e92:	2308      	movs	r3, #8
 8001e94:	73bb      	strb	r3, [r7, #14]
            break;
 8001e96:	e014      	b.n	8001ec2 <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE: // S7
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_CHARGE;
 8001e98:	2308      	movs	r3, #8
 8001e9a:	73bb      	strb	r3, [r7, #14]
            break;
 8001e9c:	e011      	b.n	8001ec2 <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_CHARGE_TRICKLE: // S8
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_CHARGE;
 8001e9e:	2308      	movs	r3, #8
 8001ea0:	73bb      	strb	r3, [r7, #14]
            break;
 8001ea2:	e00e      	b.n	8001ec2 <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT: // S9
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_CHARGE;
 8001ea4:	2308      	movs	r3, #8
 8001ea6:	73bb      	strb	r3, [r7, #14]
            break;
 8001ea8:	e00b      	b.n	8001ec2 <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE: // S10
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_CHARGE;
 8001eaa:	2308      	movs	r3, #8
 8001eac:	73bb      	strb	r3, [r7, #14]
            break;
 8001eae:	e008      	b.n	8001ec2 <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_ERROR: // S0
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_ERROR;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	73bb      	strb	r3, [r7, #14]
            break;
 8001eb4:	e005      	b.n	8001ec2 <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_CLEAR_ERROR: // S11
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_ERROR;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	73bb      	strb	r3, [r7, #14]
            break;
 8001eba:	e002      	b.n	8001ec2 <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_UNKNOWN:
        default:
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_ERROR;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	73bb      	strb	r3, [r7, #14]
            break;
 8001ec0:	bf00      	nop
    }

    canTX(CMR_CANID_HEARTBEAT_HVC, &HVCHeartbeat, sizeof(HVCHeartbeat), canTX100Hz_period_ms);
 8001ec2:	230a      	movs	r3, #10
 8001ec4:	f107 010c 	add.w	r1, r7, #12
 8001ec8:	2206      	movs	r2, #6
 8001eca:	f44f 7081 	mov.w	r0, #258	; 0x102
 8001ece:	f7ff ff63 	bl	8001d98 <canTX>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop

08001edc <sendHVCPackVoltage>:

static void sendHVCPackVoltage(void) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
    int32_t bVolt = getBattMillivolts();
 8001ee2:	f7ff fc5b 	bl	800179c <getBattMillivolts>
 8001ee6:	60f8      	str	r0, [r7, #12]
    int32_t hvVolt = getHVmillivolts();
 8001ee8:	f000 fd64 	bl	80029b4 <getHVmillivolts>
 8001eec:	60b8      	str	r0, [r7, #8]

    cmr_canHVCPackVoltage_t HVCPackVoltage = {
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	603b      	str	r3, [r7, #0]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	607b      	str	r3, [r7, #4]
        .battVoltage_mV = bVolt,
        .hvVoltage_mV = hvVolt,
    };

    canTX(CMR_CANID_HVC_PACK_VOLTAGE, &HVCPackVoltage, sizeof(HVCPackVoltage), canTX100Hz_period_ms);
 8001ef6:	230a      	movs	r3, #10
 8001ef8:	4639      	mov	r1, r7
 8001efa:	2208      	movs	r2, #8
 8001efc:	f240 3001 	movw	r0, #769	; 0x301
 8001f00:	f7ff ff4a 	bl	8001d98 <canTX>
}
 8001f04:	bf00      	nop
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <sendBMSPackCurrent>:

static void sendBMSPackCurrent(void) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
    int32_t instantCurrent = getHVmilliamps();
 8001f12:	f000 fd5b 	bl	80029cc <getHVmilliamps>
 8001f16:	60f8      	str	r0, [r7, #12]
    // int32_t avgCurrent = getCurrentAverage(); // TODO: Gustav change this back
    int32_t avgCurrent = instantCurrent;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	60bb      	str	r3, [r7, #8]

    cmr_canBMSPackCurrent_t BMSPackCurrent = {
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	607b      	str	r3, [r7, #4]
        .instantCurrent_mA = instantCurrent,
        .averageCurrent_mA = avgCurrent,
    };

    canTX(CMR_CANID_HVC_PACK_CURRENT, &BMSPackCurrent, sizeof(BMSPackCurrent), canTX100Hz_period_ms);
 8001f24:	230a      	movs	r3, #10
 8001f26:	4639      	mov	r1, r7
 8001f28:	2208      	movs	r2, #8
 8001f2a:	f240 3002 	movw	r0, #770	; 0x302
 8001f2e:	f7ff ff33 	bl	8001d98 <canTX>
}
 8001f32:	bf00      	nop
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <sendBMSBMBStatusVoltage>:

static void sendBMSBMBStatusVoltage(uint8_t bmb_index) {
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b086      	sub	sp, #24
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	71fb      	strb	r3, [r7, #7]
    uint8_t maxIndex = getBMBMaxVoltIndex(bmb_index);
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fb02 	bl	8001550 <getBMBMaxVoltIndex>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	75fb      	strb	r3, [r7, #23]
    uint8_t minIndex = getBMBMinVoltIndex(bmb_index);
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fb2a 	bl	80015ac <getBMBMinVoltIndex>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	75bb      	strb	r3, [r7, #22]
    uint16_t maxVoltage = getBMBVoltage(bmb_index, maxIndex);
 8001f5c:	7dfa      	ldrb	r2, [r7, #23]
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fb70 	bl	8001648 <getBMBVoltage>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	82bb      	strh	r3, [r7, #20]
    uint16_t minVoltage = getBMBVoltage(bmb_index, minIndex);
 8001f6c:	7dba      	ldrb	r2, [r7, #22]
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fb68 	bl	8001648 <getBMBVoltage>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	827b      	strh	r3, [r7, #18]

    cmr_canBMSBMBStatusVoltage_t BMSBMBStatusVoltage = {
 8001f7c:	7dfb      	ldrb	r3, [r7, #23]
 8001f7e:	733b      	strb	r3, [r7, #12]
 8001f80:	7dbb      	ldrb	r3, [r7, #22]
 8001f82:	737b      	strb	r3, [r7, #13]
 8001f84:	8abb      	ldrh	r3, [r7, #20]
 8001f86:	81fb      	strh	r3, [r7, #14]
 8001f88:	8a7b      	ldrh	r3, [r7, #18]
 8001f8a:	823b      	strh	r3, [r7, #16]
        .minVoltIndex = minIndex,
        .maxCellVoltage_mV = maxVoltage,
        .minCellVoltage_mV = minVoltage,
    };

    canTX(CMR_CANID_HVC_BMB_0_STATUS_VOLTAGE + (bmb_index << 1), &BMSBMBStatusVoltage, sizeof(BMSBMBStatusVoltage), canTX10Hz_period_ms);
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8001f98:	b298      	uxth	r0, r3
 8001f9a:	2364      	movs	r3, #100	; 0x64
 8001f9c:	f107 010c 	add.w	r1, r7, #12
 8001fa0:	2206      	movs	r2, #6
 8001fa2:	f7ff fef9 	bl	8001d98 <canTX>
}
 8001fa6:	bf00      	nop
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <sendBMSBMBStatusTemp>:

static void sendBMSBMBStatusTemp(uint8_t bmb_index) {
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	71fb      	strb	r3, [r7, #7]
    uint8_t maxIndex = getBMBMaxTempIndex(bmb_index);
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fa60 	bl	8001480 <getBMBMaxTempIndex>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	75fb      	strb	r3, [r7, #23]
    uint8_t minIndex = getBMBMinTempIndex(bmb_index);
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fa8e 	bl	80014e8 <getBMBMinTempIndex>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	75bb      	strb	r3, [r7, #22]
    int16_t maxTemp = getBMBTemp(bmb_index, maxIndex);
 8001fd0:	7dfa      	ldrb	r2, [r7, #23]
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fb18 	bl	800160c <getBMBTemp>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	82bb      	strh	r3, [r7, #20]
    int16_t minTemp = getBMBTemp(bmb_index, minIndex);
 8001fe0:	7dba      	ldrb	r2, [r7, #22]
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fb10 	bl	800160c <getBMBTemp>
 8001fec:	4603      	mov	r3, r0
 8001fee:	827b      	strh	r3, [r7, #18]

    cmr_canBMSBMBStatusTemp_t BMSBMBStatusTemp = {
 8001ff0:	7dfb      	ldrb	r3, [r7, #23]
 8001ff2:	733b      	strb	r3, [r7, #12]
 8001ff4:	7dbb      	ldrb	r3, [r7, #22]
 8001ff6:	737b      	strb	r3, [r7, #13]
 8001ff8:	8abb      	ldrh	r3, [r7, #20]
 8001ffa:	81fb      	strh	r3, [r7, #14]
 8001ffc:	8a7b      	ldrh	r3, [r7, #18]
 8001ffe:	823b      	strh	r3, [r7, #16]
        .minTempIndex = minIndex,
        .maxCellTemp_C = maxTemp,
        .minCellTemp_C = minTemp,
    };

    canTX(CMR_CANID_HVC_BMB_0_STATUS_TEMP + (bmb_index << 1), &BMSBMBStatusTemp, sizeof(BMSBMBStatusTemp), canTX1Hz_period_ms);
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	b29b      	uxth	r3, r3
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	b29b      	uxth	r3, r3
 8002008:	f203 3381 	addw	r3, r3, #897	; 0x381
 800200c:	b298      	uxth	r0, r3
 800200e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002012:	f107 010c 	add.w	r1, r7, #12
 8002016:	2206      	movs	r2, #6
 8002018:	f7ff febe 	bl	8001d98 <canTX>
}
 800201c:	bf00      	nop
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <sendBMSMinMaxCellVoltage>:

static void sendBMSMinMaxCellVoltage(void) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
    uint16_t minCellVoltage = UINT16_MAX;
 800202a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800202e:	82fb      	strh	r3, [r7, #22]
    uint16_t maxCellVoltage = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	82bb      	strh	r3, [r7, #20]
	uint8_t maxCellVoltageBMBNum;
	
	uint8_t minCellVoltageIndex;
	uint8_t maxCellVoltageIndex;

    for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8002034:	2300      	movs	r3, #0
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e032      	b.n	80020a0 <sendBMSMinMaxCellVoltage+0x7c>
        uint8_t maxIndex = getBMBMaxVoltIndex(bmb_index);
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fa87 	bl	8001550 <getBMBMaxVoltIndex>
 8002042:	4603      	mov	r3, r0
 8002044:	73bb      	strb	r3, [r7, #14]
        uint8_t minIndex = getBMBMinVoltIndex(bmb_index);
 8002046:	7bfb      	ldrb	r3, [r7, #15]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff faaf 	bl	80015ac <getBMBMinVoltIndex>
 800204e:	4603      	mov	r3, r0
 8002050:	737b      	strb	r3, [r7, #13]
        uint16_t maxVoltage = getBMBVoltage(bmb_index, maxIndex);
 8002052:	7bba      	ldrb	r2, [r7, #14]
 8002054:	7bfb      	ldrb	r3, [r7, #15]
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff faf5 	bl	8001648 <getBMBVoltage>
 800205e:	4603      	mov	r3, r0
 8002060:	817b      	strh	r3, [r7, #10]
        uint16_t minVoltage = getBMBVoltage(bmb_index, minIndex);
 8002062:	7b7a      	ldrb	r2, [r7, #13]
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff faed 	bl	8001648 <getBMBVoltage>
 800206e:	4603      	mov	r3, r0
 8002070:	813b      	strh	r3, [r7, #8]

        if (maxVoltage > maxCellVoltage) {
 8002072:	897a      	ldrh	r2, [r7, #10]
 8002074:	8abb      	ldrh	r3, [r7, #20]
 8002076:	429a      	cmp	r2, r3
 8002078:	d905      	bls.n	8002086 <sendBMSMinMaxCellVoltage+0x62>
            maxCellVoltage = maxVoltage;
 800207a:	897b      	ldrh	r3, [r7, #10]
 800207c:	82bb      	strh	r3, [r7, #20]
            maxCellVoltageBMBNum = bmb_index;
 800207e:	7bfb      	ldrb	r3, [r7, #15]
 8002080:	74bb      	strb	r3, [r7, #18]
            maxCellVoltageIndex = maxIndex;
 8002082:	7bbb      	ldrb	r3, [r7, #14]
 8002084:	743b      	strb	r3, [r7, #16]
        }

        if (minVoltage < minCellVoltage) {
 8002086:	893a      	ldrh	r2, [r7, #8]
 8002088:	8afb      	ldrh	r3, [r7, #22]
 800208a:	429a      	cmp	r2, r3
 800208c:	d205      	bcs.n	800209a <sendBMSMinMaxCellVoltage+0x76>
            minCellVoltage = minVoltage;
 800208e:	893b      	ldrh	r3, [r7, #8]
 8002090:	82fb      	strh	r3, [r7, #22]
            minCellVoltageBMBNum = bmb_index;
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	74fb      	strb	r3, [r7, #19]
            minCellVoltageIndex = minIndex;
 8002096:	7b7b      	ldrb	r3, [r7, #13]
 8002098:	747b      	strb	r3, [r7, #17]
    for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	3301      	adds	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	2b0f      	cmp	r3, #15
 80020a4:	d9c9      	bls.n	800203a <sendBMSMinMaxCellVoltage+0x16>
        }
    }

    cmr_canBMSMinMaxCellVoltage_t BMSBMBMinMaxVoltage = {
 80020a6:	8afb      	ldrh	r3, [r7, #22]
 80020a8:	803b      	strh	r3, [r7, #0]
 80020aa:	8abb      	ldrh	r3, [r7, #20]
 80020ac:	807b      	strh	r3, [r7, #2]
 80020ae:	7cfb      	ldrb	r3, [r7, #19]
 80020b0:	713b      	strb	r3, [r7, #4]
 80020b2:	7c7b      	ldrb	r3, [r7, #17]
 80020b4:	717b      	strb	r3, [r7, #5]
 80020b6:	7cbb      	ldrb	r3, [r7, #18]
 80020b8:	71bb      	strb	r3, [r7, #6]
 80020ba:	7c3b      	ldrb	r3, [r7, #16]
 80020bc:	71fb      	strb	r3, [r7, #7]
        .maxVoltageBMBNum = maxCellVoltageBMBNum,
        .minVoltageCellNum = minCellVoltageIndex,
        .maxVoltageCellNum = maxCellVoltageIndex,
    };

    canTX(CMR_CANID_HVC_MIN_MAX_CELL_VOLTAGE, &BMSBMBMinMaxVoltage, sizeof(BMSBMBMinMaxVoltage), canTX200Hz_period_ms);
 80020be:	2305      	movs	r3, #5
 80020c0:	4639      	mov	r1, r7
 80020c2:	2208      	movs	r2, #8
 80020c4:	f44f 7044 	mov.w	r0, #784	; 0x310
 80020c8:	f7ff fe66 	bl	8001d98 <canTX>
}
 80020cc:	bf00      	nop
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <sendBMSMinMaxCellTemp>:

static void sendBMSMinMaxCellTemp(void) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
    uint16_t minCellTemp = UINT16_MAX;
 80020da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020de:	82fb      	strh	r3, [r7, #22]
    uint16_t maxCellTemp = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	82bb      	strh	r3, [r7, #20]
	uint8_t maxCellTempBMBNum;
	
	uint8_t minCellTempIndex;
	uint8_t maxCellTempIndex;

    for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 80020e4:	2300      	movs	r3, #0
 80020e6:	73fb      	strb	r3, [r7, #15]
 80020e8:	e032      	b.n	8002150 <sendBMSMinMaxCellTemp+0x7c>
        uint8_t maxIndex = getBMBMaxTempIndex(bmb_index);
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff f9c7 	bl	8001480 <getBMBMaxTempIndex>
 80020f2:	4603      	mov	r3, r0
 80020f4:	73bb      	strb	r3, [r7, #14]
        uint8_t minIndex = getBMBMinTempIndex(bmb_index);
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff f9f5 	bl	80014e8 <getBMBMinTempIndex>
 80020fe:	4603      	mov	r3, r0
 8002100:	737b      	strb	r3, [r7, #13]
        uint16_t maxTemp = getBMBTemp(bmb_index, maxIndex);
 8002102:	7bba      	ldrb	r2, [r7, #14]
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fa7f 	bl	800160c <getBMBTemp>
 800210e:	4603      	mov	r3, r0
 8002110:	817b      	strh	r3, [r7, #10]
        uint16_t minTemp = getBMBTemp(bmb_index, minIndex);
 8002112:	7b7a      	ldrb	r2, [r7, #13]
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fa77 	bl	800160c <getBMBTemp>
 800211e:	4603      	mov	r3, r0
 8002120:	813b      	strh	r3, [r7, #8]

        if (maxTemp > maxCellTemp) {
 8002122:	897a      	ldrh	r2, [r7, #10]
 8002124:	8abb      	ldrh	r3, [r7, #20]
 8002126:	429a      	cmp	r2, r3
 8002128:	d905      	bls.n	8002136 <sendBMSMinMaxCellTemp+0x62>
            maxCellTemp = maxTemp;
 800212a:	897b      	ldrh	r3, [r7, #10]
 800212c:	82bb      	strh	r3, [r7, #20]
            maxCellTempBMBNum = bmb_index;
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	74bb      	strb	r3, [r7, #18]
            maxCellTempIndex = maxIndex;
 8002132:	7bbb      	ldrb	r3, [r7, #14]
 8002134:	743b      	strb	r3, [r7, #16]
        }

        if (minTemp < minCellTemp) {
 8002136:	893a      	ldrh	r2, [r7, #8]
 8002138:	8afb      	ldrh	r3, [r7, #22]
 800213a:	429a      	cmp	r2, r3
 800213c:	d205      	bcs.n	800214a <sendBMSMinMaxCellTemp+0x76>
            minCellTemp = minTemp;
 800213e:	893b      	ldrh	r3, [r7, #8]
 8002140:	82fb      	strh	r3, [r7, #22]
            minCellTempBMBNum = bmb_index;
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	74fb      	strb	r3, [r7, #19]
            minCellTempIndex = minIndex;
 8002146:	7b7b      	ldrb	r3, [r7, #13]
 8002148:	747b      	strb	r3, [r7, #17]
    for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	3301      	adds	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	2b0f      	cmp	r3, #15
 8002154:	d9c9      	bls.n	80020ea <sendBMSMinMaxCellTemp+0x16>
        }
    }

    cmr_canBMSMinMaxCellTemperature_t BMSBMBMinMaxTemperature = {
 8002156:	8afb      	ldrh	r3, [r7, #22]
 8002158:	803b      	strh	r3, [r7, #0]
 800215a:	8abb      	ldrh	r3, [r7, #20]
 800215c:	807b      	strh	r3, [r7, #2]
 800215e:	7cfb      	ldrb	r3, [r7, #19]
 8002160:	713b      	strb	r3, [r7, #4]
 8002162:	7c7b      	ldrb	r3, [r7, #17]
 8002164:	717b      	strb	r3, [r7, #5]
 8002166:	7cbb      	ldrb	r3, [r7, #18]
 8002168:	71bb      	strb	r3, [r7, #6]
 800216a:	7c3b      	ldrb	r3, [r7, #16]
 800216c:	71fb      	strb	r3, [r7, #7]
        .maxTempBMBNum = maxCellTempBMBNum,
        .minTempCellNum = minCellTempIndex,
        .maxTempCellNum = maxCellTempIndex,
    };

    canTX(CMR_CANID_HVC_MIN_MAX_CELL_TEMPERATURE, &BMSBMBMinMaxTemperature, sizeof(BMSBMBMinMaxTemperature), canTX10Hz_period_ms);
 800216e:	2364      	movs	r3, #100	; 0x64
 8002170:	4639      	mov	r1, r7
 8002172:	2208      	movs	r2, #8
 8002174:	f240 3011 	movw	r0, #785	; 0x311
 8002178:	f7ff fe0e 	bl	8001d98 <canTX>
}
 800217c:	bf00      	nop
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <sendBMSLowVoltage>:

static void sendBMSLowVoltage(void) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
    cmr_canBMSLowVoltage_t BMSLowVoltage = {
        .ibatt_mA = (getSafetymillivolts()*15)/2000, // Convert mA to 2/15th mA //TODO: Gustav change this back?
        .iDCDC_mA =0,
        .vAIR_mV = (getAIRmillivolts()*15)/2000, // Convert mV to 2/15th V
        .vbatt_mV= (getLVmillivolts()*15/2000), // Convert mV to 2/15th V
 800218a:	f000 fbef 	bl	800296c <getLVmillivolts>
 800218e:	4602      	mov	r2, r0
 8002190:	4613      	mov	r3, r2
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	4a18      	ldr	r2, [pc, #96]	; (80021f8 <sendBMSLowVoltage+0x74>)
 8002198:	fb82 1203 	smull	r1, r2, r2, r3
 800219c:	11d2      	asrs	r2, r2, #7
 800219e:	17db      	asrs	r3, r3, #31
 80021a0:	1ad3      	subs	r3, r2, r3
    cmr_canBMSLowVoltage_t BMSLowVoltage = {
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	713b      	strb	r3, [r7, #4]
        .vAIR_mV = (getAIRmillivolts()*15)/2000, // Convert mV to 2/15th V
 80021a6:	f000 fbed 	bl	8002984 <getAIRmillivolts>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4613      	mov	r3, r2
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	1a9b      	subs	r3, r3, r2
 80021b2:	4a11      	ldr	r2, [pc, #68]	; (80021f8 <sendBMSLowVoltage+0x74>)
 80021b4:	fb82 1203 	smull	r1, r2, r2, r3
 80021b8:	11d2      	asrs	r2, r2, #7
 80021ba:	17db      	asrs	r3, r3, #31
 80021bc:	1ad3      	subs	r3, r2, r3
    cmr_canBMSLowVoltage_t BMSLowVoltage = {
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	717b      	strb	r3, [r7, #5]
        .ibatt_mA = (getSafetymillivolts()*15)/2000, // Convert mA to 2/15th mA //TODO: Gustav change this back?
 80021c2:	f000 fbeb 	bl	800299c <getSafetymillivolts>
 80021c6:	4602      	mov	r2, r0
 80021c8:	4613      	mov	r3, r2
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	1a9b      	subs	r3, r3, r2
 80021ce:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <sendBMSLowVoltage+0x74>)
 80021d0:	fb82 1203 	smull	r1, r2, r2, r3
 80021d4:	11d2      	asrs	r2, r2, #7
 80021d6:	17db      	asrs	r3, r3, #31
 80021d8:	1ad3      	subs	r3, r2, r3
    cmr_canBMSLowVoltage_t BMSLowVoltage = {
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	71bb      	strb	r3, [r7, #6]
 80021de:	2300      	movs	r3, #0
 80021e0:	71fb      	strb	r3, [r7, #7]
    };
    (void) BMSLowVoltage;

    canTX(CMR_CANID_HVC_LOW_VOLTAGE, &BMSLowVoltage, sizeof(BMSLowVoltage), canTX100Hz_period_ms);
 80021e2:	230a      	movs	r3, #10
 80021e4:	1d39      	adds	r1, r7, #4
 80021e6:	2204      	movs	r2, #4
 80021e8:	f240 3003 	movw	r0, #771	; 0x303
 80021ec:	f7ff fdd4 	bl	8001d98 <canTX>
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	10624dd3 	.word	0x10624dd3

080021fc <sendBMSBMBStatusErrors>:

static void sendBMSBMBStatusErrors(void) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
	configASSERT(BMB_ERR_LEN < 16);

	cmr_canHVCBMBErrors_t errs = {
			.BMB1_2_Errs = (BMBErrs[0] << 4) | BMBErrs[1],
 8002202:	4b31      	ldr	r3, [pc, #196]	; (80022c8 <sendBMSBMBStatusErrors+0xcc>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	b25a      	sxtb	r2, r3
 800220a:	4b2f      	ldr	r3, [pc, #188]	; (80022c8 <sendBMSBMBStatusErrors+0xcc>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	b25b      	sxtb	r3, r3
 8002210:	4313      	orrs	r3, r2
 8002212:	b25b      	sxtb	r3, r3
 8002214:	b2db      	uxtb	r3, r3
	cmr_canHVCBMBErrors_t errs = {
 8002216:	703b      	strb	r3, [r7, #0]
			.BMB3_4_Errs = (BMBErrs[2] << 4) | BMBErrs[3],
 8002218:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <sendBMSBMBStatusErrors+0xcc>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	b25a      	sxtb	r2, r3
 8002220:	4b29      	ldr	r3, [pc, #164]	; (80022c8 <sendBMSBMBStatusErrors+0xcc>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	b25b      	sxtb	r3, r3
 8002226:	4313      	orrs	r3, r2
 8002228:	b25b      	sxtb	r3, r3
 800222a:	b2db      	uxtb	r3, r3
	cmr_canHVCBMBErrors_t errs = {
 800222c:	707b      	strb	r3, [r7, #1]
			.BMB5_6_Errs = (BMBErrs[4] << 4) | BMBErrs[5],
 800222e:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <sendBMSBMBStatusErrors+0xcc>)
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	b25a      	sxtb	r2, r3
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <sendBMSBMBStatusErrors+0xcc>)
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	b25b      	sxtb	r3, r3
 800223c:	4313      	orrs	r3, r2
 800223e:	b25b      	sxtb	r3, r3
 8002240:	b2db      	uxtb	r3, r3
	cmr_canHVCBMBErrors_t errs = {
 8002242:	70bb      	strb	r3, [r7, #2]
			.BMB7_8_Errs = (BMBErrs[6] << 4) | BMBErrs[7],
 8002244:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <sendBMSBMBStatusErrors+0xcc>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	b25a      	sxtb	r2, r3
 800224c:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <sendBMSBMBStatusErrors+0xcc>)
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	b25b      	sxtb	r3, r3
 8002252:	4313      	orrs	r3, r2
 8002254:	b25b      	sxtb	r3, r3
 8002256:	b2db      	uxtb	r3, r3
	cmr_canHVCBMBErrors_t errs = {
 8002258:	70fb      	strb	r3, [r7, #3]
			.BMB9_10_Errs = (BMBErrs[8] << 4) | BMBErrs[9],
 800225a:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <sendBMSBMBStatusErrors+0xcc>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	b25a      	sxtb	r2, r3
 8002262:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <sendBMSBMBStatusErrors+0xcc>)
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	b25b      	sxtb	r3, r3
 8002268:	4313      	orrs	r3, r2
 800226a:	b25b      	sxtb	r3, r3
 800226c:	b2db      	uxtb	r3, r3
	cmr_canHVCBMBErrors_t errs = {
 800226e:	713b      	strb	r3, [r7, #4]
			.BMB11_12_Errs = (BMBErrs[10] << 4) | BMBErrs[11],
 8002270:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <sendBMSBMBStatusErrors+0xcc>)
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	b25a      	sxtb	r2, r3
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <sendBMSBMBStatusErrors+0xcc>)
 800227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227c:	b25b      	sxtb	r3, r3
 800227e:	4313      	orrs	r3, r2
 8002280:	b25b      	sxtb	r3, r3
 8002282:	b2db      	uxtb	r3, r3
	cmr_canHVCBMBErrors_t errs = {
 8002284:	717b      	strb	r3, [r7, #5]
			.BMB13_14_Errs = (BMBErrs[12] << 4) | BMBErrs[13],
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <sendBMSBMBStatusErrors+0xcc>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	b25a      	sxtb	r2, r3
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <sendBMSBMBStatusErrors+0xcc>)
 8002290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002292:	b25b      	sxtb	r3, r3
 8002294:	4313      	orrs	r3, r2
 8002296:	b25b      	sxtb	r3, r3
 8002298:	b2db      	uxtb	r3, r3
	cmr_canHVCBMBErrors_t errs = {
 800229a:	71bb      	strb	r3, [r7, #6]
			.BMB15_16_Errs = (BMBErrs[14] << 4) | BMBErrs[15],
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <sendBMSBMBStatusErrors+0xcc>)
 800229e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	b25a      	sxtb	r2, r3
 80022a4:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <sendBMSBMBStatusErrors+0xcc>)
 80022a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a8:	b25b      	sxtb	r3, r3
 80022aa:	4313      	orrs	r3, r2
 80022ac:	b25b      	sxtb	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
	cmr_canHVCBMBErrors_t errs = {
 80022b0:	71fb      	strb	r3, [r7, #7]
	};

	canTX(CMR_CANID_HVC_BMB_STATUS_ERRORS, &errs, sizeof(cmr_canHVCBMBErrors_t), canTX100Hz_period_ms);
 80022b2:	230a      	movs	r3, #10
 80022b4:	4639      	mov	r1, r7
 80022b6:	2208      	movs	r2, #8
 80022b8:	f44f 7041 	mov.w	r0, #772	; 0x304
 80022bc:	f7ff fd6c 	bl	8001d98 <canTX>
}
 80022c0:	bf00      	nop
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	200058ac 	.word	0x200058ac

080022cc <sendAllBMBVoltages>:

static void sendAllBMBVoltages(void) {
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
//        canTX(CMR_CANID_HVC_BMB_0_STATUS_VOLTAGE_2 + (bmbIndex << 4), &volt2, sizeof(volt2), canTX1Hz_period_ms);
//        canTX(CMR_CANID_HVC_BMB_0_STATUS_TEMP_0 + (bmbIndex << 4), &temp0, sizeof(temp0), canTX1Hz_period_ms);
//        canTX(CMR_CANID_HVC_BMB_0_STATUS_TEMP_1 + (bmbIndex << 4), &temp1, sizeof(temp1), canTX1Hz_period_ms);
//        canTX(CMR_CANID_HVC_BMB_0_STATUS_TEMP_2 + (bmbIndex << 4), &temp2, sizeof(temp2), canTX1Hz_period_ms);
//    }
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <gpioInit>:
};

/**
 * @brief Initializes the GPIO interface.
 */
void gpioInit(void) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
    cmr_gpioPinInit(
 80022e0:	210b      	movs	r1, #11
 80022e2:	4802      	ldr	r0, [pc, #8]	; (80022ec <gpioInit+0x10>)
 80022e4:	f002 f86a 	bl	80043bc <cmr_gpioPinInit>
        gpioPinConfigs, sizeof(gpioPinConfigs) / sizeof(gpioPinConfigs[0])
    );
}
 80022e8:	bf00      	nop
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	0800e2f0 	.word	0x0800e2f0

080022f0 <i2cInit>:

static cmr_i2c_t bmb_i2c;

extern volatile int BMBErrs[NUM_BMBS];

bool i2cInit(void) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08c      	sub	sp, #48	; 0x30
 80022f4:	af08      	add	r7, sp, #32
    cmr_i2cDmaInit(&bmb_i2c, I2C1,
 80022f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022fa:	9307      	str	r3, [sp, #28]
 80022fc:	4b54      	ldr	r3, [pc, #336]	; (8002450 <i2cInit+0x160>)
 80022fe:	9306      	str	r3, [sp, #24]
 8002300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002304:	9305      	str	r3, [sp, #20]
 8002306:	4b52      	ldr	r3, [pc, #328]	; (8002450 <i2cInit+0x160>)
 8002308:	9304      	str	r3, [sp, #16]
 800230a:	2300      	movs	r3, #0
 800230c:	9303      	str	r3, [sp, #12]
 800230e:	4b51      	ldr	r3, [pc, #324]	; (8002454 <i2cInit+0x164>)
 8002310:	9302      	str	r3, [sp, #8]
 8002312:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002316:	9301      	str	r3, [sp, #4]
 8002318:	4b4f      	ldr	r3, [pc, #316]	; (8002458 <i2cInit+0x168>)
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	2300      	movs	r3, #0
 800231e:	4a4f      	ldr	r2, [pc, #316]	; (800245c <i2cInit+0x16c>)
 8002320:	494f      	ldr	r1, [pc, #316]	; (8002460 <i2cInit+0x170>)
 8002322:	4850      	ldr	r0, [pc, #320]	; (8002464 <i2cInit+0x174>)
 8002324:	f002 f9b0 	bl	8004688 <cmr_i2cDmaInit>
                GPIOB, GPIO_PIN_8, // clock
                GPIOB, GPIO_PIN_9); // data

    // This is so that the I2C devices have time to turn
    // on, b/c they are controlled by the relay
    TickType_t xLastWakeTime = xTaskGetTickCount();
 8002328:	f004 f926 	bl	8006578 <xTaskGetTickCount>
 800232c:	4603      	mov	r3, r0
 800232e:	607b      	str	r3, [r7, #4]
    vTaskDelayUntil(&xLastWakeTime, 2000);
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002336:	4618      	mov	r0, r3
 8002338:	f003 ffa8 	bl	800628c <vTaskDelayUntil>

    for (int bmb = 0; bmb < I2C_NUM_BMBS; bmb++) {
 800233c:	2300      	movs	r3, #0
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	e07d      	b.n	800243e <i2cInit+0x14e>
    	bmb = 3; //TODO: Remove this
 8002342:	2303      	movs	r3, #3
 8002344:	60fb      	str	r3, [r7, #12]
        for (int side = 0; side < 2; side++) { //TODO: CHANGE THIS BACK
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	e05f      	b.n	800240c <i2cInit+0x11c>
            if (!i2c_enableI2CMux(bmb, side)) {
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	4611      	mov	r1, r2
 8002356:	4618      	mov	r0, r3
 8002358:	f000 f888 	bl	800246c <i2c_enableI2CMux>
 800235c:	4603      	mov	r3, r0
 800235e:	f083 0301 	eor.w	r3, r3, #1
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d009      	beq.n	800237c <i2cInit+0x8c>
                BMBErrs[bmb*2+side] = BMB_INIT_ENABLE_I2C_MUX_ERR;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	005a      	lsls	r2, r3, #1
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	4413      	add	r3, r2
 8002370:	4a3d      	ldr	r2, [pc, #244]	; (8002468 <i2cInit+0x178>)
 8002372:	2101      	movs	r1, #1
 8002374:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                return false;
 8002378:	2300      	movs	r3, #0
 800237a:	e065      	b.n	8002448 <i2cInit+0x158>
            }
            // verify mux is correctly set
            uint8_t recv_en, recv_side;
            if (!i2c_readI2CMux(bmb, &recv_en, &recv_side)) {
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	b2db      	uxtb	r3, r3
 8002380:	1cba      	adds	r2, r7, #2
 8002382:	1cf9      	adds	r1, r7, #3
 8002384:	4618      	mov	r0, r3
 8002386:	f000 f897 	bl	80024b8 <i2c_readI2CMux>
 800238a:	4603      	mov	r3, r0
 800238c:	f083 0301 	eor.w	r3, r3, #1
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d009      	beq.n	80023aa <i2cInit+0xba>
                BMBErrs[bmb*2+side] = BMB_INIT_READ_I2C_MUX_ERR;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	005a      	lsls	r2, r3, #1
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	4413      	add	r3, r2
 800239e:	4a32      	ldr	r2, [pc, #200]	; (8002468 <i2cInit+0x178>)
 80023a0:	2102      	movs	r1, #2
 80023a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            	return false;
 80023a6:	2300      	movs	r3, #0
 80023a8:	e04e      	b.n	8002448 <i2cInit+0x158>
            }

            if (!(recv_en && recv_side == side))
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d004      	beq.n	80023ba <i2cInit+0xca>
 80023b0:	78bb      	ldrb	r3, [r7, #2]
 80023b2:	461a      	mov	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d001      	beq.n	80023be <i2cInit+0xce>
            	return false;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e044      	b.n	8002448 <i2cInit+0x158>
            if (!i2c_configSelectMux()) {
 80023be:	f000 f8c9 	bl	8002554 <i2c_configSelectMux>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f083 0301 	eor.w	r3, r3, #1
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d009      	beq.n	80023e2 <i2cInit+0xf2>
                BMBErrs[bmb*2+side] = BMB_INIT_CONFIG_SEL_MUX_ERR;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	005a      	lsls	r2, r3, #1
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	4413      	add	r3, r2
 80023d6:	4a24      	ldr	r2, [pc, #144]	; (8002468 <i2cInit+0x178>)
 80023d8:	2103      	movs	r1, #3
 80023da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            	return false;
 80023de:	2300      	movs	r3, #0
 80023e0:	e032      	b.n	8002448 <i2cInit+0x158>
            }
            if (!i2c_configADC()) {
 80023e2:	f000 f929 	bl	8002638 <i2c_configADC>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f083 0301 	eor.w	r3, r3, #1
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d009      	beq.n	8002406 <i2cInit+0x116>
                BMBErrs[bmb*2+side] = BMB_INIT_CONFIG_ADC_ERR;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	005a      	lsls	r2, r3, #1
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	4413      	add	r3, r2
 80023fa:	4a1b      	ldr	r2, [pc, #108]	; (8002468 <i2cInit+0x178>)
 80023fc:	2104      	movs	r1, #4
 80023fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            	return false;
 8002402:	2300      	movs	r3, #0
 8002404:	e020      	b.n	8002448 <i2cInit+0x158>
        for (int side = 0; side < 2; side++) { //TODO: CHANGE THIS BACK
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	3301      	adds	r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b01      	cmp	r3, #1
 8002410:	dd9c      	ble.n	800234c <i2cInit+0x5c>
            }
        }
        if (!i2c_disableI2CMux(bmb)) {
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	4618      	mov	r0, r3
 8002418:	f000 f87c 	bl	8002514 <i2c_disableI2CMux>
 800241c:	4603      	mov	r3, r0
 800241e:	f083 0301 	eor.w	r3, r3, #1
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d007      	beq.n	8002438 <i2cInit+0x148>
            BMBErrs[bmb*2] = BMB_INIT_DISABLE_I2C_MUX_ERR;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4a0e      	ldr	r2, [pc, #56]	; (8002468 <i2cInit+0x178>)
 800242e:	2105      	movs	r1, #5
 8002430:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	return false;
 8002434:	2300      	movs	r3, #0
 8002436:	e007      	b.n	8002448 <i2cInit+0x158>
    for (int bmb = 0; bmb < I2C_NUM_BMBS; bmb++) {
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3301      	adds	r3, #1
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	f77f af7e 	ble.w	8002342 <i2cInit+0x52>
        }
    }
    return true;
 8002446:	2301      	movs	r3, #1
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40020400 	.word	0x40020400
 8002454:	00061a80 	.word	0x00061a80
 8002458:	40026010 	.word	0x40026010
 800245c:	40026028 	.word	0x40026028
 8002460:	40005400 	.word	0x40005400
 8002464:	2001a4f4 	.word	0x2001a4f4
 8002468:	200058ac 	.word	0x200058ac

0800246c <i2c_enableI2CMux>:
//        }
//    }
//    return 0;
//}

bool i2c_enableI2CMux(uint8_t bmb, uint8_t side) {
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af02      	add	r7, sp, #8
 8002472:	4603      	mov	r3, r0
 8002474:	460a      	mov	r2, r1
 8002476:	71fb      	strb	r3, [r7, #7]
 8002478:	4613      	mov	r3, r2
 800247a:	71bb      	strb	r3, [r7, #6]
    // bit 2 is enable bit, bit 1 & 0 is the side (either 00 or 01)
    uint8_t data = 0x4 | side;
 800247c:	79bb      	ldrb	r3, [r7, #6]
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	b2db      	uxtb	r3, r3
 8002484:	73fb      	strb	r3, [r7, #15]
    if(cmr_i2cDmaTX(&bmb_i2c, BMS_MUX_BASE_ADDR + bmb, &data, 1, I2C_TIMEOUT) != 0) {
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	b29b      	uxth	r3, r3
 800248a:	3370      	adds	r3, #112	; 0x70
 800248c:	b299      	uxth	r1, r3
 800248e:	f107 020f 	add.w	r2, r7, #15
 8002492:	2332      	movs	r3, #50	; 0x32
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	2301      	movs	r3, #1
 8002498:	4806      	ldr	r0, [pc, #24]	; (80024b4 <i2c_enableI2CMux+0x48>)
 800249a:	f002 fabb 	bl	8004a14 <cmr_i2cDmaTX>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <i2c_enableI2CMux+0x3c>
        return false;
 80024a4:	2300      	movs	r3, #0
 80024a6:	e000      	b.n	80024aa <i2c_enableI2CMux+0x3e>
    }
    return true;
 80024a8:	2301      	movs	r3, #1
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	2001a4f4 	.word	0x2001a4f4

080024b8 <i2c_readI2CMux>:

bool i2c_readI2CMux(uint8_t bmb, uint8_t *enabled, uint8_t *side) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af02      	add	r7, sp, #8
 80024be:	4603      	mov	r3, r0
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	73fb      	strb	r3, [r7, #15]
    // bit 2 is enable bit, bit 1 & 0 is the side (either 00 or 01)
    uint8_t buf;
    if(cmr_i2cDmaRX(&bmb_i2c, BMS_MUX_BASE_ADDR + bmb, &buf, 1, I2C_TIMEOUT) != 0) {
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3370      	adds	r3, #112	; 0x70
 80024cc:	b299      	uxth	r1, r3
 80024ce:	f107 0217 	add.w	r2, r7, #23
 80024d2:	2332      	movs	r3, #50	; 0x32
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	2301      	movs	r3, #1
 80024d8:	480d      	ldr	r0, [pc, #52]	; (8002510 <i2c_readI2CMux+0x58>)
 80024da:	f002 fb17 	bl	8004b0c <cmr_i2cDmaRX>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <i2c_readI2CMux+0x30>
        return false;
 80024e4:	2300      	movs	r3, #0
 80024e6:	e00e      	b.n	8002506 <i2c_readI2CMux+0x4e>
    }
    *enabled = (buf >> 2) & 0x1;
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
 80024ea:	089b      	lsrs	r3, r3, #2
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	701a      	strb	r2, [r3, #0]
    *side = buf & 0x1;
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	701a      	strb	r2, [r3, #0]
    return true;
 8002504:	2301      	movs	r3, #1
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	2001a4f4 	.word	0x2001a4f4

08002514 <i2c_disableI2CMux>:

bool i2c_disableI2CMux(uint8_t bmb) {
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af02      	add	r7, sp, #8
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
    // bit 2 is enable bit
    uint8_t data = 0x0;
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
    if(cmr_i2cDmaTX(&bmb_i2c, BMS_MUX_BASE_ADDR + bmb, &data, 1, I2C_TIMEOUT) != 0) {
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	b29b      	uxth	r3, r3
 8002526:	3370      	adds	r3, #112	; 0x70
 8002528:	b299      	uxth	r1, r3
 800252a:	f107 020f 	add.w	r2, r7, #15
 800252e:	2332      	movs	r3, #50	; 0x32
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	2301      	movs	r3, #1
 8002534:	4806      	ldr	r0, [pc, #24]	; (8002550 <i2c_disableI2CMux+0x3c>)
 8002536:	f002 fa6d 	bl	8004a14 <cmr_i2cDmaTX>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <i2c_disableI2CMux+0x30>
        return false;
 8002540:	2300      	movs	r3, #0
 8002542:	e000      	b.n	8002546 <i2c_disableI2CMux+0x32>
    }
    return true;
 8002544:	2301      	movs	r3, #1
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	2001a4f4 	.word	0x2001a4f4

08002554 <i2c_configSelectMux>:

bool i2c_configSelectMux() {
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af02      	add	r7, sp, #8
    // select control register, set them all to output
    uint8_t data[2] = {0x3, 0x00};
 800255a:	2303      	movs	r3, #3
 800255c:	80bb      	strh	r3, [r7, #4]
    //i2c_flipEndianness(data, 2);
    if (cmr_i2cDmaTX(&bmb_i2c, BMS_SELECT_IO_ADDR, (uint8_t*)&data, 2, I2C_TIMEOUT) != 0) {
 800255e:	1d3a      	adds	r2, r7, #4
 8002560:	2332      	movs	r3, #50	; 0x32
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	2302      	movs	r3, #2
 8002566:	2141      	movs	r1, #65	; 0x41
 8002568:	4806      	ldr	r0, [pc, #24]	; (8002584 <i2c_configSelectMux+0x30>)
 800256a:	f002 fa53 	bl	8004a14 <cmr_i2cDmaTX>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <i2c_configSelectMux+0x24>
        return false;
 8002574:	2300      	movs	r3, #0
 8002576:	e000      	b.n	800257a <i2c_configSelectMux+0x26>
    }
    return true;
 8002578:	2301      	movs	r3, #1
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	2001a4f4 	.word	0x2001a4f4

08002588 <i2c_select4MuxChannel>:

bool i2c_select4MuxChannel(uint8_t channel) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af02      	add	r7, sp, #8
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
    // 0x1 is output port, we set select lines of mux
    // mux only uses last 2 bits, the top 4th bit is the LED blinking
    // save top 2 bits, overwrite bottom 2 bits
    selectIOCurrent = (selectIOCurrent & 0xC) | channel;
 8002592:	4b12      	ldr	r3, [pc, #72]	; (80025dc <i2c_select4MuxChannel+0x54>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	b25b      	sxtb	r3, r3
 8002598:	f003 030c 	and.w	r3, r3, #12
 800259c:	b25a      	sxtb	r2, r3
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	b25b      	sxtb	r3, r3
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <i2c_select4MuxChannel+0x54>)
 80025aa:	701a      	strb	r2, [r3, #0]
    uint8_t outData[2] = {0x1, selectIOCurrent};
 80025ac:	2301      	movs	r3, #1
 80025ae:	733b      	strb	r3, [r7, #12]
 80025b0:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <i2c_select4MuxChannel+0x54>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	737b      	strb	r3, [r7, #13]
    //i2c_flipEndianness(outData, 2);
    if(cmr_i2cDmaTX(&bmb_i2c, BMS_SELECT_IO_ADDR, (uint8_t*)&outData, 2, I2C_TIMEOUT) != 0) {
 80025b6:	f107 020c 	add.w	r2, r7, #12
 80025ba:	2332      	movs	r3, #50	; 0x32
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2302      	movs	r3, #2
 80025c0:	2141      	movs	r1, #65	; 0x41
 80025c2:	4807      	ldr	r0, [pc, #28]	; (80025e0 <i2c_select4MuxChannel+0x58>)
 80025c4:	f002 fa26 	bl	8004a14 <cmr_i2cDmaTX>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <i2c_select4MuxChannel+0x4a>
        return false;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e000      	b.n	80025d4 <i2c_select4MuxChannel+0x4c>
    }
    return true;
 80025d2:	2301      	movs	r3, #1
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	2001a4f0 	.word	0x2001a4f0
 80025e0:	2001a4f4 	.word	0x2001a4f4

080025e4 <i2c_selectMuxBlink>:

bool i2c_selectMuxBlink() {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af02      	add	r7, sp, #8
    // flip top 2 bits, don't flip bottom 2 bits
    selectIOCurrent = (~selectIOCurrent & 0xC) | (selectIOCurrent & 0x3);
 80025ea:	4b11      	ldr	r3, [pc, #68]	; (8002630 <i2c_selectMuxBlink+0x4c>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	b25b      	sxtb	r3, r3
 80025f0:	f003 030f 	and.w	r3, r3, #15
 80025f4:	b25b      	sxtb	r3, r3
 80025f6:	f083 030c 	eor.w	r3, r3, #12
 80025fa:	b25b      	sxtb	r3, r3
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <i2c_selectMuxBlink+0x4c>)
 8002600:	701a      	strb	r2, [r3, #0]
    uint8_t outData[2] = {0x1, selectIOCurrent};
 8002602:	2301      	movs	r3, #1
 8002604:	713b      	strb	r3, [r7, #4]
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <i2c_selectMuxBlink+0x4c>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	717b      	strb	r3, [r7, #5]
    //i2c_flipEndianness(outData, 2);
    if(cmr_i2cDmaTX(&bmb_i2c, BMS_SELECT_IO_ADDR, (uint8_t*)&outData, 2, I2C_TIMEOUT) != 0) {
 800260c:	1d3a      	adds	r2, r7, #4
 800260e:	2332      	movs	r3, #50	; 0x32
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	2302      	movs	r3, #2
 8002614:	2141      	movs	r1, #65	; 0x41
 8002616:	4807      	ldr	r0, [pc, #28]	; (8002634 <i2c_selectMuxBlink+0x50>)
 8002618:	f002 f9fc 	bl	8004a14 <cmr_i2cDmaTX>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <i2c_selectMuxBlink+0x42>
        return false;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <i2c_selectMuxBlink+0x44>
    }
    return true;
 8002626:	2301      	movs	r3, #1
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	2001a4f0 	.word	0x2001a4f0
 8002634:	2001a4f4 	.word	0x2001a4f4

08002638 <i2c_configADC>:

bool i2c_configADC() {
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af02      	add	r7, sp, #8
	// 1111 means {setup_bit, internal_ref, ref_output, ref_always_on}
	// 0000 means {internal_clock, unipolar, reset_config, X}
	uint8_t setupByte = 0xF0;
 800263e:	23f0      	movs	r3, #240	; 0xf0
 8002640:	71fb      	strb	r3, [r7, #7]
	// 0_00_0111_1 means {config_bit, scan_all, scan_to_A7, single_ended}
	uint8_t configByte = 0x0F;
 8002642:	230f      	movs	r3, #15
 8002644:	71bb      	strb	r3, [r7, #6]
	if (cmr_i2cDmaTX(&bmb_i2c, BMS_ADC_ADDR, &setupByte, 1, I2C_TIMEOUT) != 0) {
 8002646:	1dfa      	adds	r2, r7, #7
 8002648:	2332      	movs	r3, #50	; 0x32
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	2301      	movs	r3, #1
 800264e:	2133      	movs	r1, #51	; 0x33
 8002650:	480c      	ldr	r0, [pc, #48]	; (8002684 <i2c_configADC+0x4c>)
 8002652:	f002 f9df 	bl	8004a14 <cmr_i2cDmaTX>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <i2c_configADC+0x28>
		return false;
 800265c:	2300      	movs	r3, #0
 800265e:	e00d      	b.n	800267c <i2c_configADC+0x44>
	}
	if (cmr_i2cDmaTX(&bmb_i2c, BMS_ADC_ADDR, &configByte, 1, I2C_TIMEOUT) != 0) {
 8002660:	1dba      	adds	r2, r7, #6
 8002662:	2332      	movs	r3, #50	; 0x32
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	2301      	movs	r3, #1
 8002668:	2133      	movs	r1, #51	; 0x33
 800266a:	4806      	ldr	r0, [pc, #24]	; (8002684 <i2c_configADC+0x4c>)
 800266c:	f002 f9d2 	bl	8004a14 <cmr_i2cDmaTX>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <i2c_configADC+0x42>
		return false;
 8002676:	2300      	movs	r3, #0
 8002678:	e000      	b.n	800267c <i2c_configADC+0x44>
	}
	return true;
 800267a:	2301      	movs	r3, #1
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	2001a4f4 	.word	0x2001a4f4

08002688 <i2c_scanADC>:

bool i2c_scanADC(int16_t adcResponse[]) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b08a      	sub	sp, #40	; 0x28
 800268c:	af02      	add	r7, sp, #8
 800268e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[16] = {0};
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	f107 0310 	add.w	r3, r7, #16
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
	if (cmr_i2cDmaRX(&bmb_i2c, BMS_ADC_ADDR, buffer, 16, I2C_TIMEOUT) != 0) {
 80026a0:	f107 020c 	add.w	r2, r7, #12
 80026a4:	2332      	movs	r3, #50	; 0x32
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	2310      	movs	r3, #16
 80026aa:	2133      	movs	r1, #51	; 0x33
 80026ac:	481d      	ldr	r0, [pc, #116]	; (8002724 <i2c_scanADC+0x9c>)
 80026ae:	f002 fa2d 	bl	8004b0c <cmr_i2cDmaRX>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <i2c_scanADC+0x34>
		return false;
 80026b8:	2300      	movs	r3, #0
 80026ba:	e02f      	b.n	800271c <i2c_scanADC+0x94>
	}
    //i2c_flipEndianness(buffer, 16);
	for (int i = 0; i < 8; i++) {
 80026bc:	2300      	movs	r3, #0
 80026be:	61fb      	str	r3, [r7, #28]
 80026c0:	e028      	b.n	8002714 <i2c_scanADC+0x8c>
		// top 6 bits should be 1
		if ((buffer[i << 1] & 0xFC) != 0xFC) {
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	3320      	adds	r3, #32
 80026c8:	443b      	add	r3, r7
 80026ca:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80026ce:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80026d2:	2bfc      	cmp	r3, #252	; 0xfc
 80026d4:	d001      	beq.n	80026da <i2c_scanADC+0x52>
			return false;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e020      	b.n	800271c <i2c_scanADC+0x94>
		}
		adcResponse[i] = ((((uint16_t) buffer[i << 1]) << 8)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	3320      	adds	r3, #32
 80026e0:	443b      	add	r3, r7
 80026e2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80026e6:	021b      	lsls	r3, r3, #8
				| (buffer[(i << 1) + 1])) & 0x3FF;
 80026e8:	b21a      	sxth	r2, r3
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	3301      	adds	r3, #1
 80026f0:	3320      	adds	r3, #32
 80026f2:	443b      	add	r3, r7
 80026f4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80026f8:	b21b      	sxth	r3, r3
 80026fa:	4313      	orrs	r3, r2
 80026fc:	b21a      	sxth	r2, r3
		adcResponse[i] = ((((uint16_t) buffer[i << 1]) << 8)
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	440b      	add	r3, r1
				| (buffer[(i << 1) + 1])) & 0x3FF;
 8002706:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800270a:	b212      	sxth	r2, r2
		adcResponse[i] = ((((uint16_t) buffer[i << 1]) << 8)
 800270c:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 8; i++) {
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3301      	adds	r3, #1
 8002712:	61fb      	str	r3, [r7, #28]
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2b07      	cmp	r3, #7
 8002718:	ddd3      	ble.n	80026c2 <i2c_scanADC+0x3a>
	}
	return true;
 800271a:	2301      	movs	r3, #1
}
 800271c:	4618      	mov	r0, r3
 800271e:	3720      	adds	r7, #32
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	2001a4f4 	.word	0x2001a4f4

08002728 <i2c_cellBalance>:
			I2C_TIMEOUT) != 0) {
		return false;
	}
	return true;
}
bool i2c_cellBalance(uint8_t bmb, uint8_t cells, uint8_t cells1) {
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af02      	add	r7, sp, #8
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
 8002732:	460b      	mov	r3, r1
 8002734:	71bb      	strb	r3, [r7, #6]
 8002736:	4613      	mov	r3, r2
 8002738:	717b      	strb	r3, [r7, #5]
	//Two different packets, one for cells 0-8 and the other one for 9
	//The first byte of each packet is the register address
	uint8_t data[2] = {0xF2, cells};
 800273a:	23f2      	movs	r3, #242	; 0xf2
 800273c:	733b      	strb	r3, [r7, #12]
 800273e:	79bb      	ldrb	r3, [r7, #6]
 8002740:	737b      	strb	r3, [r7, #13]
	uint8_t data2[2] = {0xF3, cells};
 8002742:	23f3      	movs	r3, #243	; 0xf3
 8002744:	723b      	strb	r3, [r7, #8]
 8002746:	79bb      	ldrb	r3, [r7, #6]
 8002748:	727b      	strb	r3, [r7, #9]
    //i2c_flipEndianness(data, 2);
    //i2c_flipEndianness(data2, 2);
	if (cmr_i2cDmaTX(&bmb_i2c, BMS_CELL_BALANCE_IO_ADDR, data, 2,
 800274a:	f107 020c 	add.w	r2, r7, #12
 800274e:	2332      	movs	r3, #50	; 0x32
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	2302      	movs	r3, #2
 8002754:	2150      	movs	r1, #80	; 0x50
 8002756:	480d      	ldr	r0, [pc, #52]	; (800278c <i2c_cellBalance+0x64>)
 8002758:	f002 f95c 	bl	8004a14 <cmr_i2cDmaTX>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <i2c_cellBalance+0x3e>
			I2C_TIMEOUT) != 0) {
		return false;
 8002762:	2300      	movs	r3, #0
 8002764:	e00e      	b.n	8002784 <i2c_cellBalance+0x5c>
	}
	if (cmr_i2cDmaTX(&bmb_i2c, BMS_CELL_BALANCE_IO_ADDR, data2, 2,
 8002766:	f107 0208 	add.w	r2, r7, #8
 800276a:	2332      	movs	r3, #50	; 0x32
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	2302      	movs	r3, #2
 8002770:	2150      	movs	r1, #80	; 0x50
 8002772:	4806      	ldr	r0, [pc, #24]	; (800278c <i2c_cellBalance+0x64>)
 8002774:	f002 f94e 	bl	8004a14 <cmr_i2cDmaTX>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <i2c_cellBalance+0x5a>
			I2C_TIMEOUT) != 0) {
		return false;
 800277e:	2300      	movs	r3, #0
 8002780:	e000      	b.n	8002784 <i2c_cellBalance+0x5c>
	}
	return true;
 8002782:	2301      	movs	r3, #1
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	2001a4f4 	.word	0x2001a4f4

08002790 <statusLED>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void statusLED(void *pvParameters) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
    (void) pvParameters;

    cmr_gpioWrite(GPIO_MCU_LED, 0);
 8002798:	2100      	movs	r1, #0
 800279a:	2000      	movs	r0, #0
 800279c:	f001 fe44 	bl	8004428 <cmr_gpioWrite>

    TickType_t lastWakeTime = xTaskGetTickCount();
 80027a0:	f003 feea 	bl	8006578 <xTaskGetTickCount>
 80027a4:	4603      	mov	r3, r0
 80027a6:	60fb      	str	r3, [r7, #12]
    while (1) {
        cmr_gpioToggle(GPIO_MCU_LED);
 80027a8:	2000      	movs	r0, #0
 80027aa:	f001 fe7b 	bl	80044a4 <cmr_gpioToggle>

        vTaskDelayUntil(&lastWakeTime, statusLED_period_ms);
 80027ae:	22fa      	movs	r2, #250	; 0xfa
 80027b0:	f107 030c 	add.w	r3, r7, #12
 80027b4:	4611      	mov	r1, r2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f003 fd68 	bl	800628c <vTaskDelayUntil>
        cmr_gpioToggle(GPIO_MCU_LED);
 80027bc:	e7f4      	b.n	80027a8 <statusLED+0x18>
	...

080027c0 <main>:
 *
 * Device configuration and task initialization should be performed here.
 *
 * @return Does not return.
 */
int main(void) {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af02      	add	r7, sp, #8
//
//    *ACTLR |= 2; // disable write buffering

    // System initialization.

	HAL_Init();
 80027c6:	f004 fc95 	bl	80070f4 <HAL_Init>
    cmr_rccSystemClockEnable();
 80027ca:	f002 fa2e 	bl	8004c2a <cmr_rccSystemClockEnable>
    // cmr_rccSystemInternalClockEnable();

    // Peripheral configuration.
    gpioInit();
 80027ce:	f7ff fd85 	bl	80022dc <gpioInit>
    canInit();
 80027d2:	f7ff fa7b 	bl	8001ccc <canInit>
    adcInit();
 80027d6:	f7ff f80f 	bl	80017f8 <adcInit>
    sensorsInit();
 80027da:	f000 f8a9 	bl	8002930 <sensorsInit>
//    wwdgInit();

    cmr_taskInit(
 80027de:	2202      	movs	r2, #2
 80027e0:	2300      	movs	r3, #0
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <main+0x58>)
 80027e6:	490d      	ldr	r1, [pc, #52]	; (800281c <main+0x5c>)
 80027e8:	480d      	ldr	r0, [pc, #52]	; (8002820 <main+0x60>)
 80027ea:	f002 fb81 	bl	8004ef0 <cmr_taskInit>
        statusLED,
        NULL
    );

    // BMB_task
    cmr_taskInit(
 80027ee:	2206      	movs	r2, #6
 80027f0:	2300      	movs	r3, #0
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <main+0x64>)
 80027f6:	490c      	ldr	r1, [pc, #48]	; (8002828 <main+0x68>)
 80027f8:	480c      	ldr	r0, [pc, #48]	; (800282c <main+0x6c>)
 80027fa:	f002 fb79 	bl	8004ef0 <cmr_taskInit>
        vBMBSampleTask,
        NULL
    );

    // State Task
    cmr_taskInit(
 80027fe:	2204      	movs	r2, #4
 8002800:	2300      	movs	r3, #0
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <main+0x70>)
 8002806:	490b      	ldr	r1, [pc, #44]	; (8002834 <main+0x74>)
 8002808:	480b      	ldr	r0, [pc, #44]	; (8002838 <main+0x78>)
 800280a:	f002 fb71 	bl	8004ef0 <cmr_taskInit>
        setState_priority,
        vSetStateTask,
        NULL
    );

    vTaskStartScheduler();
 800280e:	f003 fdaf 	bl	8006370 <vTaskStartScheduler>
    cmr_panic("vTaskStartScheduler returned!");
 8002812:	480a      	ldr	r0, [pc, #40]	; (800283c <main+0x7c>)
 8002814:	f002 fa03 	bl	8004c1e <cmr_panic>
 8002818:	08002791 	.word	0x08002791
 800281c:	0800c5b0 	.word	0x0800c5b0
 8002820:	2001a668 	.word	0x2001a668
 8002824:	080013b9 	.word	0x080013b9
 8002828:	0800c5bc 	.word	0x0800c5bc
 800282c:	2001f948 	.word	0x2001f948
 8002830:	08002f05 	.word	0x08002f05
 8002834:	0800c5cc 	.word	0x0800c5cc
 8002838:	20024c28 	.word	0x20024c28
 800283c:	0800c5dc 	.word	0x0800c5dc

08002840 <sampleADCSensor>:
 *
 * @param sensor The ADC sensor to sample.
 *
 * @return The latest sampled value from the ADC.
 */
static uint32_t sampleADCSensor(const cmr_sensor_t *sensor) {
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
    sensorChannel_t sensorChannel = sensor - sensors;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a0c      	ldr	r2, [pc, #48]	; (800287c <sampleADCSensor+0x3c>)
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	10db      	asrs	r3, r3, #3
 8002850:	4a0b      	ldr	r2, [pc, #44]	; (8002880 <sampleADCSensor+0x40>)
 8002852:	fb02 f303 	mul.w	r3, r2, r3
 8002856:	73fb      	strb	r3, [r7, #15]
    configASSERT(sensorChannel < SENSOR_CH_LEN);
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	2b04      	cmp	r3, #4
 800285c:	d903      	bls.n	8002866 <sampleADCSensor+0x26>
 800285e:	212a      	movs	r1, #42	; 0x2a
 8002860:	4808      	ldr	r0, [pc, #32]	; (8002884 <sampleADCSensor+0x44>)
 8002862:	f002 f9dc 	bl	8004c1e <cmr_panic>
    return adcRead(sensorsADCCHANNELS[sensorChannel]); //* ADCChannelPolarity[ch]; Figure adc polarity
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	4a07      	ldr	r2, [pc, #28]	; (8002888 <sampleADCSensor+0x48>)
 800286a:	5cd3      	ldrb	r3, [r2, r3]
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe ffd3 	bl	8001818 <adcRead>
 8002872:	4603      	mov	r3, r0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20000104 	.word	0x20000104
 8002880:	cccccccd 	.word	0xcccccccd
 8002884:	0800c5fc 	.word	0x0800c5fc
 8002888:	0800e3f8 	.word	0x0800e3f8
 800288c:	00000000 	.word	0x00000000

08002890 <ADCtoMV_24v>:
 * @param reading The ADC value to convert.
 *
 * @return Voltage in mV.
 */
// 24v voltage divider is factor of 1.13/14.43
static int32_t ADCtoMV_24v(const cmr_sensor_t *sensor, uint32_t reading) {
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
    (void) sensor;
	
    return ((int32_t) reading) * 7.39;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f7fd fe11 	bl	80004c4 <__aeabi_i2d>
 80028a2:	a309      	add	r3, pc, #36	; (adr r3, 80028c8 <ADCtoMV_24v+0x38>)
 80028a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a8:	f7fd fe76 	bl	8000598 <__aeabi_dmul>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4610      	mov	r0, r2
 80028b2:	4619      	mov	r1, r3
 80028b4:	f7fe f882 	bl	80009bc <__aeabi_d2iz>
 80028b8:	4603      	mov	r3, r0

}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	f3af 8000 	nop.w
 80028c8:	28f5c28f 	.word	0x28f5c28f
 80028cc:	401d8f5c 	.word	0x401d8f5c

080028d0 <ADCtoMV_HV>:
 * @param reading The ADC value to convert.
 *
 * @return Voltage in V.
 */
// was determined experimentally
static int32_t ADCtoMV_HV(const cmr_sensor_t *sensor, uint32_t reading) {
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
    (void) sensor;
	
	return (((int32_t) reading) * 268 - 426400);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	f44f 7286 	mov.w	r2, #268	; 0x10c
 80028e0:	fb02 f303 	mul.w	r3, r2, r3
 80028e4:	f5a3 23d0 	sub.w	r3, r3, #425984	; 0x68000
 80028e8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <sensorsUpdate>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void sensorsUpdate(void *pvParameters) {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    TickType_t lastWakeTime = xTaskGetTickCount();
 8002900:	f003 fe3a 	bl	8006578 <xTaskGetTickCount>
 8002904:	4603      	mov	r3, r0
 8002906:	60fb      	str	r3, [r7, #12]
    while (1) {
        vTaskDelayUntil(&lastWakeTime, sensorsUpdate_period_ms);
 8002908:	2232      	movs	r2, #50	; 0x32
 800290a:	f107 030c 	add.w	r3, r7, #12
 800290e:	4611      	mov	r1, r2
 8002910:	4618      	mov	r0, r3
 8002912:	f003 fcbb 	bl	800628c <vTaskDelayUntil>

        cmr_sensorListUpdate(&sensorList);
 8002916:	4805      	ldr	r0, [pc, #20]	; (800292c <sensorsUpdate+0x34>)
 8002918:	f002 fab6 	bl	8004e88 <cmr_sensorListUpdate>

        vTaskDelayUntil(&lastWakeTime, sensorsUpdate_period_ms);
 800291c:	2232      	movs	r2, #50	; 0x32
 800291e:	f107 030c 	add.w	r3, r7, #12
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f003 fcb1 	bl	800628c <vTaskDelayUntil>
        vTaskDelayUntil(&lastWakeTime, sensorsUpdate_period_ms);
 800292a:	e7ed      	b.n	8002908 <sensorsUpdate+0x10>
 800292c:	20029f08 	.word	0x20029f08

08002930 <sensorsInit>:
}

/**
 * @brief Initializes the sensor interface.
 */
void sensorsInit(void) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af02      	add	r7, sp, #8
    cmr_sensorListInit(
 8002936:	2205      	movs	r2, #5
 8002938:	4907      	ldr	r1, [pc, #28]	; (8002958 <sensorsInit+0x28>)
 800293a:	4808      	ldr	r0, [pc, #32]	; (800295c <sensorsInit+0x2c>)
 800293c:	f002 fa7f 	bl	8004e3e <cmr_sensorListInit>
        &sensorList,
        sensors, sizeof(sensors) / sizeof(sensors[0])
    );

    // Task creation.
    cmr_taskInit(
 8002940:	2201      	movs	r2, #1
 8002942:	2300      	movs	r3, #0
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <sensorsInit+0x30>)
 8002948:	4906      	ldr	r1, [pc, #24]	; (8002964 <sensorsInit+0x34>)
 800294a:	4807      	ldr	r0, [pc, #28]	; (8002968 <sensorsInit+0x38>)
 800294c:	f002 fad0 	bl	8004ef0 <cmr_taskInit>
        "sensors update",
        sensorsUpdate_priority,
        sensorsUpdate,
        NULL
    );
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000104 	.word	0x20000104
 800295c:	20029f08 	.word	0x20029f08
 8002960:	080028f9 	.word	0x080028f9
 8002964:	0800c640 	.word	0x0800c640
 8002968:	20029f10 	.word	0x20029f10

0800296c <getLVmillivolts>:

// Accessor functions used in the state machine. These casts should be safe because all the feasible values
// for any of these variables should be less than INT_MAX, so the value will be preserved on the cast.
int32_t getLVmillivolts(){
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
    return (int32_t) cmr_sensorListGetValue(&sensorList, SENSOR_CH_V24V);
 8002970:	2100      	movs	r1, #0
 8002972:	4803      	ldr	r0, [pc, #12]	; (8002980 <getLVmillivolts+0x14>)
 8002974:	f002 faa7 	bl	8004ec6 <cmr_sensorListGetValue>
 8002978:	4603      	mov	r3, r0
}
 800297a:	4618      	mov	r0, r3
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20029f08 	.word	0x20029f08

08002984 <getAIRmillivolts>:

int32_t getAIRmillivolts(){
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
    return ((int32_t) cmr_sensorListGetValue(&sensorList, SENSOR_CH_AIR_POWER));
 8002988:	2101      	movs	r1, #1
 800298a:	4803      	ldr	r0, [pc, #12]	; (8002998 <getAIRmillivolts+0x14>)
 800298c:	f002 fa9b 	bl	8004ec6 <cmr_sensorListGetValue>
 8002990:	4603      	mov	r3, r0
}
 8002992:	4618      	mov	r0, r3
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20029f08 	.word	0x20029f08

0800299c <getSafetymillivolts>:

int32_t getSafetymillivolts(){
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
    return ((int32_t) cmr_sensorListGetValue(&sensorList, SENSOR_CH_SAFETY));
 80029a0:	2102      	movs	r1, #2
 80029a2:	4803      	ldr	r0, [pc, #12]	; (80029b0 <getSafetymillivolts+0x14>)
 80029a4:	f002 fa8f 	bl	8004ec6 <cmr_sensorListGetValue>
 80029a8:	4603      	mov	r3, r0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20029f08 	.word	0x20029f08

080029b4 <getHVmillivolts>:

int32_t getHVmillivolts(){
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
    return ((int32_t) cmr_sensorListGetValue(&sensorList, SENSOR_CH_VSENSE));
 80029b8:	2103      	movs	r1, #3
 80029ba:	4803      	ldr	r0, [pc, #12]	; (80029c8 <getHVmillivolts+0x14>)
 80029bc:	f002 fa83 	bl	8004ec6 <cmr_sensorListGetValue>
 80029c0:	4603      	mov	r3, r0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20029f08 	.word	0x20029f08

080029cc <getHVmilliamps>:

int32_t getHVmilliamps(){
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
    return ((int32_t) cmr_sensorListGetValue(&sensorList, SENSOR_CH_ISENSE));
 80029d0:	2104      	movs	r1, #4
 80029d2:	4803      	ldr	r0, [pc, #12]	; (80029e0 <getHVmilliamps+0x14>)
 80029d4:	f002 fa77 	bl	8004ec6 <cmr_sensorListGetValue>
 80029d8:	4603      	mov	r3, r0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20029f08 	.word	0x20029f08

080029e4 <getState>:

/*
 * External Accessor Functions
 */

cmr_canHVCState_t getState() {
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
    return currentState;
 80029e8:	4b03      	ldr	r3, [pc, #12]	; (80029f8 <getState+0x14>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	2002f1f0 	.word	0x2002f1f0

080029fc <getNextState>:

/*
 * Helper Functions
 */

static cmr_canHVCState_t getNextState(cmr_canHVCError_t currentError){
 80029fc:	b590      	push	{r4, r7, lr}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	80fb      	strh	r3, [r7, #6]
    
    //Default to unknown state if no paths are satisfied.
    cmr_canHVCState_t nextState = CMR_CAN_HVC_STATE_UNKNOWN;
 8002a06:	230c      	movs	r3, #12
 8002a08:	75fb      	strb	r3, [r7, #23]
    
    // initialize min/max cell voltage variables for next state logic
    uint16_t packMinCellVoltage;
    uint16_t packMaxCellVoltage;

    if (currentError != CMR_CAN_HVC_ERROR_NONE) {
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <getNextState+0x18>
        // An error condition is active, stay in ERROR state
        return CMR_CAN_HVC_STATE_ERROR;
 8002a10:	2300      	movs	r3, #0
 8002a12:	e141      	b.n	8002c98 <getNextState+0x29c>
    }

    // Getting HVC Command
    volatile cmr_canHVCCommand_t *HVCCommand = getPayload(CANRX_HVC_COMMAND);
 8002a14:	2001      	movs	r0, #1
 8002a16:	f7ff f9d7 	bl	8001dc8 <getPayload>
 8002a1a:	6138      	str	r0, [r7, #16]
    
    switch (currentState) {
 8002a1c:	4ba0      	ldr	r3, [pc, #640]	; (8002ca0 <getNextState+0x2a4>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b0b      	cmp	r3, #11
 8002a22:	f200 8135 	bhi.w	8002c90 <getNextState+0x294>
 8002a26:	a201      	add	r2, pc, #4	; (adr r2, 8002a2c <getNextState+0x30>)
 8002a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2c:	08002c65 	.word	0x08002c65
 8002a30:	08002a5d 	.word	0x08002a5d
 8002a34:	08002a63 	.word	0x08002a63
 8002a38:	08002a9d 	.word	0x08002a9d
 8002a3c:	08002af7 	.word	0x08002af7
 8002a40:	08002b45 	.word	0x08002b45
 8002a44:	08002b5b 	.word	0x08002b5b
 8002a48:	08002ba9 	.word	0x08002ba9
 8002a4c:	08002be1 	.word	0x08002be1
 8002a50:	08002c0f 	.word	0x08002c0f
 8002a54:	08002c3d 	.word	0x08002c3d
 8002a58:	08002c7b 	.word	0x08002c7b
        case CMR_CAN_HVC_STATE_DISCHARGE: // S1
            nextState = CMR_CAN_HVC_STATE_STANDBY;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	75fb      	strb	r3, [r7, #23]
            break;
 8002a60:	e119      	b.n	8002c96 <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_STANDBY: // S2
            if (HVCCommand->modeRequest == CMR_CAN_HVC_MODE_START) {
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d107      	bne.n	8002a7c <getNextState+0x80>
                //T1: START mode requested
                nextState = CMR_CAN_HVC_STATE_DRIVE_PRECHARGE;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	75fb      	strb	r3, [r7, #23]
                lastPrechargeTime = xTaskGetTickCount();
 8002a70:	f003 fd82 	bl	8006578 <xTaskGetTickCount>
 8002a74:	4603      	mov	r3, r0
 8002a76:	4a8b      	ldr	r2, [pc, #556]	; (8002ca4 <getNextState+0x2a8>)
 8002a78:	6013      	str	r3, [r2, #0]
                nextState = CMR_CAN_HVC_STATE_CHARGE_PRECHARGE;
                lastPrechargeTime = xTaskGetTickCount();
            } else {
                nextState = CMR_CAN_HVC_STATE_STANDBY;
            }
            break;
 8002a7a:	e10c      	b.n	8002c96 <getNextState+0x29a>
            } else if (HVCCommand->modeRequest == CMR_CAN_HVC_MODE_CHARGE) {
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d107      	bne.n	8002a96 <getNextState+0x9a>
                nextState = CMR_CAN_HVC_STATE_CHARGE_PRECHARGE;
 8002a86:	2306      	movs	r3, #6
 8002a88:	75fb      	strb	r3, [r7, #23]
                lastPrechargeTime = xTaskGetTickCount();
 8002a8a:	f003 fd75 	bl	8006578 <xTaskGetTickCount>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	4a84      	ldr	r2, [pc, #528]	; (8002ca4 <getNextState+0x2a8>)
 8002a92:	6013      	str	r3, [r2, #0]
            break;
 8002a94:	e0ff      	b.n	8002c96 <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_STANDBY;
 8002a96:	2302      	movs	r3, #2
 8002a98:	75fb      	strb	r3, [r7, #23]
            break;
 8002a9a:	e0fc      	b.n	8002c96 <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_DRIVE_PRECHARGE: // S3
            if (!(HVCCommand->modeRequest == CMR_CAN_HVC_MODE_START ||
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d007      	beq.n	8002ab6 <getNextState+0xba>
                  HVCCommand->modeRequest == CMR_CAN_HVC_MODE_RUN)) {
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	b2db      	uxtb	r3, r3
            if (!(HVCCommand->modeRequest == CMR_CAN_HVC_MODE_START ||
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d002      	beq.n	8002ab6 <getNextState+0xba>
                //T6: Mode requested is neither START nor RUN
                nextState = CMR_CAN_HVC_STATE_DISCHARGE;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	75fb      	strb	r3, [r7, #23]
 8002ab4:	e01e      	b.n	8002af4 <getNextState+0xf8>
            } else if (xTaskGetTickCount() > lastPrechargeTime + 5000 && xTaskGetTickCount() < lastPrechargeTime + 6000) {
 8002ab6:	f003 fd5f 	bl	8006578 <xTaskGetTickCount>
 8002aba:	4602      	mov	r2, r0
 8002abc:	4b79      	ldr	r3, [pc, #484]	; (8002ca4 <getNextState+0x2a8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002ac4:	3308      	adds	r3, #8
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d911      	bls.n	8002aee <getNextState+0xf2>
 8002aca:	f003 fd55 	bl	8006578 <xTaskGetTickCount>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	4b74      	ldr	r3, [pc, #464]	; (8002ca4 <getNextState+0x2a8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8002ad8:	3310      	adds	r3, #16
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d207      	bcs.n	8002aee <getNextState+0xf2>
                //T2: HV rails are precharged to within 10000mV
                nextState = CMR_CAN_HVC_STATE_DRIVE_PRECHARGE_COMPLETE;
 8002ade:	2304      	movs	r3, #4
 8002ae0:	75fb      	strb	r3, [r7, #23]
                lastPrechargeTime = xTaskGetTickCount();
 8002ae2:	f003 fd49 	bl	8006578 <xTaskGetTickCount>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	4a6e      	ldr	r2, [pc, #440]	; (8002ca4 <getNextState+0x2a8>)
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	e002      	b.n	8002af4 <getNextState+0xf8>
            } else {
                nextState = CMR_CAN_HVC_STATE_DRIVE_PRECHARGE;
 8002aee:	2303      	movs	r3, #3
 8002af0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8002af2:	e0d0      	b.n	8002c96 <getNextState+0x29a>
 8002af4:	e0cf      	b.n	8002c96 <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_DRIVE_PRECHARGE_COMPLETE: // S4
            if (!(HVCCommand->modeRequest == CMR_CAN_HVC_MODE_START ||
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d007      	beq.n	8002b10 <getNextState+0x114>
                  HVCCommand->modeRequest == CMR_CAN_HVC_MODE_RUN)) {
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	b2db      	uxtb	r3, r3
            if (!(HVCCommand->modeRequest == CMR_CAN_HVC_MODE_START ||
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d002      	beq.n	8002b10 <getNextState+0x114>
                //T7: Mode requested is neither START nor RUN
                nextState = CMR_CAN_HVC_STATE_DISCHARGE;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	75fb      	strb	r3, [r7, #23]
 8002b0e:	e018      	b.n	8002b42 <getNextState+0x146>
            } else if ((HVCCommand->modeRequest == CMR_CAN_HVC_MODE_RUN) &&
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d110      	bne.n	8002b3c <getNextState+0x140>
                        abs(getBattMillivolts() - getHVmillivolts()) < 30000) {
 8002b1a:	f7fe fe3f 	bl	800179c <getBattMillivolts>
 8002b1e:	4604      	mov	r4, r0
 8002b20:	f7ff ff48 	bl	80029b4 <getHVmillivolts>
 8002b24:	4603      	mov	r3, r0
 8002b26:	1ae3      	subs	r3, r4, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bfb8      	it	lt
 8002b2c:	425b      	neglt	r3, r3
            } else if ((HVCCommand->modeRequest == CMR_CAN_HVC_MODE_RUN) &&
 8002b2e:	f247 522f 	movw	r2, #29999	; 0x752f
 8002b32:	4293      	cmp	r3, r2
 8002b34:	dc02      	bgt.n	8002b3c <getNextState+0x140>
                // T3: Contactors are closed and RUN mode is requested
                nextState = CMR_CAN_HVC_STATE_DRIVE;
 8002b36:	2305      	movs	r3, #5
 8002b38:	75fb      	strb	r3, [r7, #23]
 8002b3a:	e002      	b.n	8002b42 <getNextState+0x146>
            } else {
                nextState = CMR_CAN_HVC_STATE_DRIVE_PRECHARGE_COMPLETE;
 8002b3c:	2304      	movs	r3, #4
 8002b3e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8002b40:	e0a9      	b.n	8002c96 <getNextState+0x29a>
 8002b42:	e0a8      	b.n	8002c96 <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_DRIVE: // S5
            if (HVCCommand->modeRequest != CMR_CAN_HVC_MODE_RUN) {
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d002      	beq.n	8002b54 <getNextState+0x158>
                // T8: Mode requested is not RUN
                nextState = CMR_CAN_HVC_STATE_DISCHARGE;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	75fb      	strb	r3, [r7, #23]
            } else {                
                nextState = CMR_CAN_HVC_STATE_DRIVE;
            }
            break;
 8002b52:	e0a0      	b.n	8002c96 <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_DRIVE;
 8002b54:	2305      	movs	r3, #5
 8002b56:	75fb      	strb	r3, [r7, #23]
            break;
 8002b58:	e09d      	b.n	8002c96 <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_CHARGE_PRECHARGE: // S6
            if (HVCCommand->modeRequest != CMR_CAN_HVC_MODE_CHARGE) {
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d002      	beq.n	8002b6a <getNextState+0x16e>
                //T18: Mode requested is not CHARGE
                nextState = CMR_CAN_HVC_STATE_DISCHARGE;
 8002b64:	2301      	movs	r3, #1
 8002b66:	75fb      	strb	r3, [r7, #23]
                //T10: HV rails are precharged
                nextState = CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE;
            } else {
                nextState = CMR_CAN_HVC_STATE_CHARGE_PRECHARGE;
            }
            break;
 8002b68:	e095      	b.n	8002c96 <getNextState+0x29a>
            } else if (xTaskGetTickCount() > lastPrechargeTime + 5000 && xTaskGetTickCount() < lastPrechargeTime + 6000) {
 8002b6a:	f003 fd05 	bl	8006578 <xTaskGetTickCount>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	4b4c      	ldr	r3, [pc, #304]	; (8002ca4 <getNextState+0x2a8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002b78:	3308      	adds	r3, #8
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d911      	bls.n	8002ba2 <getNextState+0x1a6>
 8002b7e:	f003 fcfb 	bl	8006578 <xTaskGetTickCount>
 8002b82:	4602      	mov	r2, r0
 8002b84:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <getNextState+0x2a8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8002b8c:	3310      	adds	r3, #16
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d207      	bcs.n	8002ba2 <getNextState+0x1a6>
            	lastPrechargeTime = xTaskGetTickCount();
 8002b92:	f003 fcf1 	bl	8006578 <xTaskGetTickCount>
 8002b96:	4603      	mov	r3, r0
 8002b98:	4a42      	ldr	r2, [pc, #264]	; (8002ca4 <getNextState+0x2a8>)
 8002b9a:	6013      	str	r3, [r2, #0]
                nextState = CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE;
 8002b9c:	2307      	movs	r3, #7
 8002b9e:	75fb      	strb	r3, [r7, #23]
            break;
 8002ba0:	e079      	b.n	8002c96 <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_CHARGE_PRECHARGE;
 8002ba2:	2306      	movs	r3, #6
 8002ba4:	75fb      	strb	r3, [r7, #23]
            break;
 8002ba6:	e076      	b.n	8002c96 <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE: // S7
            if (HVCCommand->modeRequest != CMR_CAN_HVC_MODE_CHARGE) {
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d002      	beq.n	8002bb8 <getNextState+0x1bc>
                // T17: Mode requested is not CHARGE
                nextState = CMR_CAN_HVC_STATE_DISCHARGE;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	75fb      	strb	r3, [r7, #23]
                // T11: Contactors are closed
                nextState = CMR_CAN_HVC_STATE_CHARGE_TRICKLE;
            } else {
                nextState = CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE;
            }
            break;
 8002bb6:	e06e      	b.n	8002c96 <getNextState+0x29a>
            } else if (abs(getBattMillivolts() - getHVmillivolts()) < 5000) {
 8002bb8:	f7fe fdf0 	bl	800179c <getBattMillivolts>
 8002bbc:	4604      	mov	r4, r0
 8002bbe:	f7ff fef9 	bl	80029b4 <getHVmillivolts>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	1ae3      	subs	r3, r4, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	bfb8      	it	lt
 8002bca:	425b      	neglt	r3, r3
 8002bcc:	f241 3287 	movw	r2, #4999	; 0x1387
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	dc02      	bgt.n	8002bda <getNextState+0x1de>
                nextState = CMR_CAN_HVC_STATE_CHARGE_TRICKLE;
 8002bd4:	2308      	movs	r3, #8
 8002bd6:	75fb      	strb	r3, [r7, #23]
            break;
 8002bd8:	e05d      	b.n	8002c96 <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE;
 8002bda:	2307      	movs	r3, #7
 8002bdc:	75fb      	strb	r3, [r7, #23]
            break;
 8002bde:	e05a      	b.n	8002c96 <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_CHARGE_TRICKLE: // S8
            // find lowest cell voltage among all BMBs
            packMinCellVoltage = getPackMinCellVoltage();
 8002be0:	f7fe fd7a 	bl	80016d8 <getPackMinCellVoltage>
 8002be4:	4603      	mov	r3, r0
 8002be6:	81fb      	strh	r3, [r7, #14]

            if (HVCCommand->modeRequest != CMR_CAN_HVC_MODE_CHARGE) {
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d002      	beq.n	8002bf8 <getNextState+0x1fc>
                // T16: Mode requested is not CHARGE
                nextState = CMR_CAN_HVC_STATE_DISCHARGE;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	75fb      	strb	r3, [r7, #23]
                // T12: Minimum cell voltage > 3V, begin full charging
                nextState = CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT;
            } else {
                nextState = CMR_CAN_HVC_STATE_CHARGE_TRICKLE;
            }
            break;
 8002bf6:	e04e      	b.n	8002c96 <getNextState+0x29a>
            } else if (packMinCellVoltage >= 3000) {
 8002bf8:	89fb      	ldrh	r3, [r7, #14]
 8002bfa:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d902      	bls.n	8002c08 <getNextState+0x20c>
                nextState = CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT;
 8002c02:	2309      	movs	r3, #9
 8002c04:	75fb      	strb	r3, [r7, #23]
            break;
 8002c06:	e046      	b.n	8002c96 <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_CHARGE_TRICKLE;
 8002c08:	2308      	movs	r3, #8
 8002c0a:	75fb      	strb	r3, [r7, #23]
            break;
 8002c0c:	e043      	b.n	8002c96 <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT: // S9
            // find highest cell voltage among all BMBs
            packMaxCellVoltage = getPackMaxCellVoltage();
 8002c0e:	f7fe fd35 	bl	800167c <getPackMaxCellVoltage>
 8002c12:	4603      	mov	r3, r0
 8002c14:	81bb      	strh	r3, [r7, #12]

            if (HVCCommand->modeRequest != CMR_CAN_HVC_MODE_CHARGE) {
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d002      	beq.n	8002c26 <getNextState+0x22a>
                // T15: Mode requested is not CHARGE
                nextState = CMR_CAN_HVC_STATE_DISCHARGE;
 8002c20:	2301      	movs	r3, #1
 8002c22:	75fb      	strb	r3, [r7, #23]
//                nextState = CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE;
                nextState = CMR_CAN_HVC_STATE_ERROR; // not balancing for now
            } else {
                nextState = CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT;
            }
            break;
 8002c24:	e037      	b.n	8002c96 <getNextState+0x29a>
            } else if (packMaxCellVoltage >= 4150) {
 8002c26:	89bb      	ldrh	r3, [r7, #12]
 8002c28:	f241 0235 	movw	r2, #4149	; 0x1035
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d902      	bls.n	8002c36 <getNextState+0x23a>
                nextState = CMR_CAN_HVC_STATE_ERROR; // not balancing for now
 8002c30:	2300      	movs	r3, #0
 8002c32:	75fb      	strb	r3, [r7, #23]
            break;
 8002c34:	e02f      	b.n	8002c96 <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT;
 8002c36:	2309      	movs	r3, #9
 8002c38:	75fb      	strb	r3, [r7, #23]
            break;
 8002c3a:	e02c      	b.n	8002c96 <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE: // S10
            // find lowest cell voltage among all BMBs
            packMinCellVoltage = getPackMinCellVoltage();
 8002c3c:	f7fe fd4c 	bl	80016d8 <getPackMinCellVoltage>
 8002c40:	4603      	mov	r3, r0
 8002c42:	81fb      	strh	r3, [r7, #14]

            if (HVCCommand->modeRequest != CMR_CAN_HVC_MODE_CHARGE || packMinCellVoltage >= 4145) {
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d104      	bne.n	8002c58 <getNextState+0x25c>
 8002c4e:	89fb      	ldrh	r3, [r7, #14]
 8002c50:	f241 0230 	movw	r2, #4144	; 0x1030
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d902      	bls.n	8002c5e <getNextState+0x262>
                //T14: Mode requested is not CHARGE or all cells fully charged
                nextState = CMR_CAN_HVC_STATE_DISCHARGE;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	75fb      	strb	r3, [r7, #23]
            } else {
                nextState = CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE;
            }
            break;
 8002c5c:	e01b      	b.n	8002c96 <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE;
 8002c5e:	230a      	movs	r3, #10
 8002c60:	75fb      	strb	r3, [r7, #23]
            break;
 8002c62:	e018      	b.n	8002c96 <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_ERROR: // S0
            if (HVCCommand->modeRequest == CMR_CAN_HVC_MODE_ERROR) {
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d102      	bne.n	8002c74 <getNextState+0x278>
                //T19: GLV acknowledged error, move to clear error
                nextState = CMR_CAN_HVC_STATE_CLEAR_ERROR;
 8002c6e:	230b      	movs	r3, #11
 8002c70:	75fb      	strb	r3, [r7, #23]
            } else {
                nextState = CMR_CAN_HVC_STATE_ERROR;
            }
            break;  
 8002c72:	e010      	b.n	8002c96 <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_ERROR;
 8002c74:	2300      	movs	r3, #0
 8002c76:	75fb      	strb	r3, [r7, #23]
            break;  
 8002c78:	e00d      	b.n	8002c96 <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_CLEAR_ERROR: // S11
            if ((HVCCommand->modeRequest == CMR_CAN_HVC_MODE_IDLE) &&
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d102      	bne.n	8002c8a <getNextState+0x28e>
                (true || getHVmillivolts()) < 5000) {
                //T4: GLV requesting idle and rails discharged
                nextState = CMR_CAN_HVC_STATE_STANDBY;
 8002c84:	2302      	movs	r3, #2
 8002c86:	75fb      	strb	r3, [r7, #23]
            } else {
                nextState = CMR_CAN_HVC_STATE_CLEAR_ERROR;
            }
            break;
 8002c88:	e005      	b.n	8002c96 <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_CLEAR_ERROR;
 8002c8a:	230b      	movs	r3, #11
 8002c8c:	75fb      	strb	r3, [r7, #23]
            break;
 8002c8e:	e002      	b.n	8002c96 <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_UNKNOWN:
        default:
            nextState = CMR_CAN_HVC_STATE_UNKNOWN;
 8002c90:	230c      	movs	r3, #12
 8002c92:	75fb      	strb	r3, [r7, #23]
            break;
 8002c94:	bf00      	nop
    }
    
    // Return the result of next state logic            
    return nextState;    
 8002c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	371c      	adds	r7, #28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd90      	pop	{r4, r7, pc}
 8002ca0:	2002f1f0 	.word	0x2002f1f0
 8002ca4:	2002f1f4 	.word	0x2002f1f4

08002ca8 <setStateOutput>:

static cmr_canHVCState_t setStateOutput(){
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0

    //Note: For relay action, set all opens before closes to avoid shorts
    switch (currentState) {
 8002cac:	4b94      	ldr	r3, [pc, #592]	; (8002f00 <setStateOutput+0x258>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b0b      	cmp	r3, #11
 8002cb2:	f200 810d 	bhi.w	8002ed0 <setStateOutput+0x228>
 8002cb6:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <setStateOutput+0x14>)
 8002cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbc:	08002e7d 	.word	0x08002e7d
 8002cc0:	08002ced 	.word	0x08002ced
 8002cc4:	08002d15 	.word	0x08002d15
 8002cc8:	08002d3d 	.word	0x08002d3d
 8002ccc:	08002d65 	.word	0x08002d65
 8002cd0:	08002d8d 	.word	0x08002d8d
 8002cd4:	08002db5 	.word	0x08002db5
 8002cd8:	08002ddd 	.word	0x08002ddd
 8002cdc:	08002e05 	.word	0x08002e05
 8002ce0:	08002e2d 	.word	0x08002e2d
 8002ce4:	08002e55 	.word	0x08002e55
 8002ce8:	08002ea5 	.word	0x08002ea5
        case CMR_CAN_HVC_STATE_DISCHARGE: // S1
            setRelay(AIR_POS_RELAY, OPEN);
 8002cec:	2101      	movs	r1, #1
 8002cee:	2003      	movs	r0, #3
 8002cf0:	f7fe fe8e 	bl	8001a10 <setRelay>
            setRelay(AIR_NEG_RELAY, OPEN);
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	2002      	movs	r0, #2
 8002cf8:	f7fe fe8a 	bl	8001a10 <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	2001      	movs	r0, #1
 8002d00:	f7fe fe86 	bl	8001a10 <setRelay>
            setRelay(DISCHARGE_RELAY, CLOSED);
 8002d04:	2102      	movs	r1, #2
 8002d06:	2000      	movs	r0, #0
 8002d08:	f7fe fe82 	bl	8001a10 <setRelay>
            clearHardwareFault(false);
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f7fe fe2b 	bl	8001968 <clearHardwareFault>
            break;
 8002d12:	e0f1      	b.n	8002ef8 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_STANDBY: // S2
            setRelay(AIR_POS_RELAY, OPEN);
 8002d14:	2101      	movs	r1, #1
 8002d16:	2003      	movs	r0, #3
 8002d18:	f7fe fe7a 	bl	8001a10 <setRelay>
            setRelay(AIR_NEG_RELAY, OPEN);
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	2002      	movs	r0, #2
 8002d20:	f7fe fe76 	bl	8001a10 <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002d24:	2101      	movs	r1, #1
 8002d26:	2001      	movs	r0, #1
 8002d28:	f7fe fe72 	bl	8001a10 <setRelay>
            setRelay(DISCHARGE_RELAY, CLOSED);
 8002d2c:	2102      	movs	r1, #2
 8002d2e:	2000      	movs	r0, #0
 8002d30:	f7fe fe6e 	bl	8001a10 <setRelay>
            clearHardwareFault(false);
 8002d34:	2000      	movs	r0, #0
 8002d36:	f7fe fe17 	bl	8001968 <clearHardwareFault>
            break;
 8002d3a:	e0dd      	b.n	8002ef8 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_DRIVE_PRECHARGE: // S3
            setRelay(DISCHARGE_RELAY, OPEN);
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	2000      	movs	r0, #0
 8002d40:	f7fe fe66 	bl	8001a10 <setRelay>
            setRelay(AIR_POS_RELAY, OPEN);
 8002d44:	2101      	movs	r1, #1
 8002d46:	2003      	movs	r0, #3
 8002d48:	f7fe fe62 	bl	8001a10 <setRelay>
            setRelay(AIR_NEG_RELAY, CLOSED);
 8002d4c:	2102      	movs	r1, #2
 8002d4e:	2002      	movs	r0, #2
 8002d50:	f7fe fe5e 	bl	8001a10 <setRelay>
            setRelay(PRECHARGE_RELAY, CLOSED);
 8002d54:	2102      	movs	r1, #2
 8002d56:	2001      	movs	r0, #1
 8002d58:	f7fe fe5a 	bl	8001a10 <setRelay>
            clearHardwareFault(false);
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f7fe fe03 	bl	8001968 <clearHardwareFault>
            break;
 8002d62:	e0c9      	b.n	8002ef8 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_DRIVE_PRECHARGE_COMPLETE: // S4
            setRelay(DISCHARGE_RELAY, OPEN);
 8002d64:	2101      	movs	r1, #1
 8002d66:	2000      	movs	r0, #0
 8002d68:	f7fe fe52 	bl	8001a10 <setRelay>
            setRelay(AIR_POS_RELAY, CLOSED);
 8002d6c:	2102      	movs	r1, #2
 8002d6e:	2003      	movs	r0, #3
 8002d70:	f7fe fe4e 	bl	8001a10 <setRelay>
            setRelay(AIR_NEG_RELAY, CLOSED);
 8002d74:	2102      	movs	r1, #2
 8002d76:	2002      	movs	r0, #2
 8002d78:	f7fe fe4a 	bl	8001a10 <setRelay>
            setRelay(PRECHARGE_RELAY, CLOSED);
 8002d7c:	2102      	movs	r1, #2
 8002d7e:	2001      	movs	r0, #1
 8002d80:	f7fe fe46 	bl	8001a10 <setRelay>
            clearHardwareFault(false);
 8002d84:	2000      	movs	r0, #0
 8002d86:	f7fe fdef 	bl	8001968 <clearHardwareFault>
            break;
 8002d8a:	e0b5      	b.n	8002ef8 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_DRIVE: // S5
            setRelay(DISCHARGE_RELAY, OPEN);
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	2000      	movs	r0, #0
 8002d90:	f7fe fe3e 	bl	8001a10 <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002d94:	2101      	movs	r1, #1
 8002d96:	2001      	movs	r0, #1
 8002d98:	f7fe fe3a 	bl	8001a10 <setRelay>
            setRelay(AIR_POS_RELAY, CLOSED);
 8002d9c:	2102      	movs	r1, #2
 8002d9e:	2003      	movs	r0, #3
 8002da0:	f7fe fe36 	bl	8001a10 <setRelay>
            setRelay(AIR_NEG_RELAY, CLOSED);
 8002da4:	2102      	movs	r1, #2
 8002da6:	2002      	movs	r0, #2
 8002da8:	f7fe fe32 	bl	8001a10 <setRelay>
            clearHardwareFault(false);
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7fe fddb 	bl	8001968 <clearHardwareFault>
            break;
 8002db2:	e0a1      	b.n	8002ef8 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_CHARGE_PRECHARGE: // S6
            setRelay(DISCHARGE_RELAY, OPEN);
 8002db4:	2101      	movs	r1, #1
 8002db6:	2000      	movs	r0, #0
 8002db8:	f7fe fe2a 	bl	8001a10 <setRelay>
            setRelay(AIR_POS_RELAY, OPEN);
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	2003      	movs	r0, #3
 8002dc0:	f7fe fe26 	bl	8001a10 <setRelay>
            setRelay(AIR_NEG_RELAY, CLOSED);
 8002dc4:	2102      	movs	r1, #2
 8002dc6:	2002      	movs	r0, #2
 8002dc8:	f7fe fe22 	bl	8001a10 <setRelay>
            setRelay(PRECHARGE_RELAY, CLOSED);
 8002dcc:	2102      	movs	r1, #2
 8002dce:	2001      	movs	r0, #1
 8002dd0:	f7fe fe1e 	bl	8001a10 <setRelay>
            clearHardwareFault(false);
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	f7fe fdc7 	bl	8001968 <clearHardwareFault>
            break;
 8002dda:	e08d      	b.n	8002ef8 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE: // S7
            setRelay(DISCHARGE_RELAY, OPEN);
 8002ddc:	2101      	movs	r1, #1
 8002dde:	2000      	movs	r0, #0
 8002de0:	f7fe fe16 	bl	8001a10 <setRelay>
            setRelay(AIR_POS_RELAY, CLOSED);
 8002de4:	2102      	movs	r1, #2
 8002de6:	2003      	movs	r0, #3
 8002de8:	f7fe fe12 	bl	8001a10 <setRelay>
            setRelay(AIR_NEG_RELAY, CLOSED);
 8002dec:	2102      	movs	r1, #2
 8002dee:	2002      	movs	r0, #2
 8002df0:	f7fe fe0e 	bl	8001a10 <setRelay>
            setRelay(PRECHARGE_RELAY, CLOSED);
 8002df4:	2102      	movs	r1, #2
 8002df6:	2001      	movs	r0, #1
 8002df8:	f7fe fe0a 	bl	8001a10 <setRelay>
            clearHardwareFault(false);
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f7fe fdb3 	bl	8001968 <clearHardwareFault>
            break;
 8002e02:	e079      	b.n	8002ef8 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_CHARGE_TRICKLE: // S8
            setRelay(DISCHARGE_RELAY, OPEN);
 8002e04:	2101      	movs	r1, #1
 8002e06:	2000      	movs	r0, #0
 8002e08:	f7fe fe02 	bl	8001a10 <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	2001      	movs	r0, #1
 8002e10:	f7fe fdfe 	bl	8001a10 <setRelay>
            setRelay(AIR_POS_RELAY, CLOSED);
 8002e14:	2102      	movs	r1, #2
 8002e16:	2003      	movs	r0, #3
 8002e18:	f7fe fdfa 	bl	8001a10 <setRelay>
            setRelay(AIR_NEG_RELAY, CLOSED);
 8002e1c:	2102      	movs	r1, #2
 8002e1e:	2002      	movs	r0, #2
 8002e20:	f7fe fdf6 	bl	8001a10 <setRelay>
            clearHardwareFault(false);
 8002e24:	2000      	movs	r0, #0
 8002e26:	f7fe fd9f 	bl	8001968 <clearHardwareFault>
            break;
 8002e2a:	e065      	b.n	8002ef8 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT: // S9
            setRelay(DISCHARGE_RELAY, OPEN);
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	2000      	movs	r0, #0
 8002e30:	f7fe fdee 	bl	8001a10 <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002e34:	2101      	movs	r1, #1
 8002e36:	2001      	movs	r0, #1
 8002e38:	f7fe fdea 	bl	8001a10 <setRelay>
            setRelay(AIR_POS_RELAY, CLOSED);
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	2003      	movs	r0, #3
 8002e40:	f7fe fde6 	bl	8001a10 <setRelay>
            setRelay(AIR_NEG_RELAY, CLOSED);
 8002e44:	2102      	movs	r1, #2
 8002e46:	2002      	movs	r0, #2
 8002e48:	f7fe fde2 	bl	8001a10 <setRelay>
            clearHardwareFault(false);
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	f7fe fd8b 	bl	8001968 <clearHardwareFault>
            break;
 8002e52:	e051      	b.n	8002ef8 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE: // S10
            setRelay(DISCHARGE_RELAY, OPEN);
 8002e54:	2101      	movs	r1, #1
 8002e56:	2000      	movs	r0, #0
 8002e58:	f7fe fdda 	bl	8001a10 <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	2001      	movs	r0, #1
 8002e60:	f7fe fdd6 	bl	8001a10 <setRelay>
            setRelay(AIR_POS_RELAY, CLOSED);
 8002e64:	2102      	movs	r1, #2
 8002e66:	2003      	movs	r0, #3
 8002e68:	f7fe fdd2 	bl	8001a10 <setRelay>
            setRelay(AIR_NEG_RELAY, CLOSED);
 8002e6c:	2102      	movs	r1, #2
 8002e6e:	2002      	movs	r0, #2
 8002e70:	f7fe fdce 	bl	8001a10 <setRelay>
            clearHardwareFault(false);
 8002e74:	2000      	movs	r0, #0
 8002e76:	f7fe fd77 	bl	8001968 <clearHardwareFault>
            break;
 8002e7a:	e03d      	b.n	8002ef8 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_ERROR: // S0
            // Note, relays will not powered, as
            // the fault cuts their supply
            setRelay(AIR_POS_RELAY, OPEN);
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	2003      	movs	r0, #3
 8002e80:	f7fe fdc6 	bl	8001a10 <setRelay>
            setRelay(AIR_NEG_RELAY, OPEN);
 8002e84:	2101      	movs	r1, #1
 8002e86:	2002      	movs	r0, #2
 8002e88:	f7fe fdc2 	bl	8001a10 <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	2001      	movs	r0, #1
 8002e90:	f7fe fdbe 	bl	8001a10 <setRelay>
            setRelay(DISCHARGE_RELAY, CLOSED);
 8002e94:	2102      	movs	r1, #2
 8002e96:	2000      	movs	r0, #0
 8002e98:	f7fe fdba 	bl	8001a10 <setRelay>
            clearHardwareFault(false);
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	f7fe fd63 	bl	8001968 <clearHardwareFault>
            // Its possible that in some error cases we might want to
            // open the contactors without cutting their power.
            // For now, take the more definitive approach
            break;
 8002ea2:	e029      	b.n	8002ef8 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_CLEAR_ERROR: // S11
            setRelay(AIR_POS_RELAY, OPEN);
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	2003      	movs	r0, #3
 8002ea8:	f7fe fdb2 	bl	8001a10 <setRelay>
            setRelay(AIR_NEG_RELAY, OPEN);
 8002eac:	2101      	movs	r1, #1
 8002eae:	2002      	movs	r0, #2
 8002eb0:	f7fe fdae 	bl	8001a10 <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	2001      	movs	r0, #1
 8002eb8:	f7fe fdaa 	bl	8001a10 <setRelay>
            setRelay(DISCHARGE_RELAY, CLOSED);
 8002ebc:	2102      	movs	r1, #2
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	f7fe fda6 	bl	8001a10 <setRelay>
            clearErrorReg();
 8002ec4:	f7fe fd66 	bl	8001994 <clearErrorReg>
            clearHardwareFault(true);
 8002ec8:	2001      	movs	r0, #1
 8002eca:	f7fe fd4d 	bl	8001968 <clearHardwareFault>
            break;
 8002ece:	e013      	b.n	8002ef8 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_UNKNOWN:
        default:
            setRelay(AIR_POS_RELAY, OPEN);
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	2003      	movs	r0, #3
 8002ed4:	f7fe fd9c 	bl	8001a10 <setRelay>
            setRelay(AIR_NEG_RELAY, OPEN);
 8002ed8:	2101      	movs	r1, #1
 8002eda:	2002      	movs	r0, #2
 8002edc:	f7fe fd98 	bl	8001a10 <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	2001      	movs	r0, #1
 8002ee4:	f7fe fd94 	bl	8001a10 <setRelay>
            setRelay(DISCHARGE_RELAY, CLOSED);
 8002ee8:	2102      	movs	r1, #2
 8002eea:	2000      	movs	r0, #0
 8002eec:	f7fe fd90 	bl	8001a10 <setRelay>
            clearHardwareFault(false);
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	f7fe fd39 	bl	8001968 <clearHardwareFault>
            break;
 8002ef6:	bf00      	nop
    }
    
    return currentState;
 8002ef8:	4b01      	ldr	r3, [pc, #4]	; (8002f00 <setStateOutput+0x258>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	2002f1f0 	.word	0x2002f1f0

08002f04 <vSetStateTask>:

/*
 * Task function
 */

void vSetStateTask(void *pvParameters) {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
    // Make compiler happy
    (void) pvParameters;

    // Previous wake time pointer, initialized to current tick count.
    // This gets updated by vTaskDelayUntil every time it is called
    TickType_t xLastWakeTime = xTaskGetTickCount();
 8002f0c:	f003 fb34 	bl	8006578 <xTaskGetTickCount>
 8002f10:	4603      	mov	r3, r0
 8002f12:	60fb      	str	r3, [r7, #12]

    // Period
    const TickType_t xPeriod = 10;        // In ticks (ms)
 8002f14:	230a      	movs	r3, #10
 8002f16:	617b      	str	r3, [r7, #20]

    cmr_canHVCState_t nextState;
    cmr_canHVCError_t currentError = CMR_CAN_HVC_ERROR_NONE;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	827b      	strh	r3, [r7, #18]

    cmr_gpioWrite(GPIO_CLEAR_FAULT_L, 1);
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	2004      	movs	r0, #4
 8002f20:	f001 fa82 	bl	8004428 <cmr_gpioWrite>
    cmr_gpioWrite(GPIO_AIR_POSITIVE_EN, 1);
 8002f24:	2101      	movs	r1, #1
 8002f26:	2008      	movs	r0, #8
 8002f28:	f001 fa7e 	bl	8004428 <cmr_gpioWrite>
    cmr_gpioWrite(GPIO_AIR_NEGATIVE_EN, 1);
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	2009      	movs	r0, #9
 8002f30:	f001 fa7a 	bl	8004428 <cmr_gpioWrite>
    cmr_gpioWrite(GPIO_AMS_EN_L, 0); // set power on for the HVC
 8002f34:	2100      	movs	r1, #0
 8002f36:	2002      	movs	r0, #2
 8002f38:	f001 fa76 	bl	8004428 <cmr_gpioWrite>
    // Executes infinitely with defined period using vTaskDelayUntil
    for (;;) {

        // Ask Deepak ab getting rid of this
        //Critical block so that the contents of the heartbeat are consistent
        taskENTER_CRITICAL();
 8002f3c:	f003 ffda 	bl	8006ef4 <vPortEnterCritical>
        setStateOutput();
 8002f40:	f7ff feb2 	bl	8002ca8 <setStateOutput>
        // HVCHeartbeat->errorStatus = __REVSH(currentError);
        // HVCHeartbeat->state = currentState;
        // HVCHeartbeat->contactorStatus = getRelayStatus();
        taskEXIT_CRITICAL();
 8002f44:	f004 f800 	bl	8006f48 <vPortExitCritical>
        

        currentError = checkErrors(currentState);
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <vSetStateTask+0x74>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fe fc79 	bl	8001844 <checkErrors>
 8002f52:	4603      	mov	r3, r0
 8002f54:	827b      	strh	r3, [r7, #18]
        nextState = getNextState(currentError);
 8002f56:	8a7b      	ldrh	r3, [r7, #18]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fd4f 	bl	80029fc <getNextState>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	747b      	strb	r3, [r7, #17]

        currentState = nextState;
 8002f62:	4a05      	ldr	r2, [pc, #20]	; (8002f78 <vSetStateTask+0x74>)
 8002f64:	7c7b      	ldrb	r3, [r7, #17]
 8002f66:	7013      	strb	r3, [r2, #0]

        // Delay until next period
        vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8002f68:	f107 030c 	add.w	r3, r7, #12
 8002f6c:	6979      	ldr	r1, [r7, #20]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f003 f98c 	bl	800628c <vTaskDelayUntil>
        taskENTER_CRITICAL();
 8002f74:	e7e2      	b.n	8002f3c <vSetStateTask+0x38>
 8002f76:	bf00      	nop
 8002f78:	2002f1f0 	.word	0x2002f1f0

08002f7c <cmr_adcSample>:
 *
 * @param pvParameters (cmr_adc_t *) The ADC.
 *
 * @return Does not return.
 */
static void cmr_adcSample(void *pvParameters) {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
    cmr_adc_t *adc = (cmr_adc_t *) pvParameters;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	613b      	str	r3, [r7, #16]

    TickType_t lastWakeTime = xTaskGetTickCount();
 8002f88:	f003 faf6 	bl	8006578 <xTaskGetTickCount>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	60bb      	str	r3, [r7, #8]
    while (1) {
        // ADC set up in discontinuous scan mode.
        // Each `HAL_ADC_Start()` call converts the next-highest-rank channel.
        for (size_t i = 0; i < adc->channelsLen; i++) {
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	e01c      	b.n	8002fd0 <cmr_adcSample+0x54>
            cmr_adcChannel_t *channel = &(adc->channels[i]);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	60fb      	str	r3, [r7, #12]

            HAL_ADC_Start(&adc->handle);
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f004 f96a 	bl	8007284 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&adc->handle, CMR_ADC_TIMEOUT_MS);
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f004 fa0a 	bl	80073d0 <HAL_ADC_PollForConversion>
            channel->value = HAL_ADC_GetValue(&adc->handle);
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f004 fa8a 	bl	80074d8 <HAL_ADC_GetValue>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	611a      	str	r2, [r3, #16]
        for (size_t i = 0; i < adc->channelsLen; i++) {
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d3dd      	bcc.n	8002f96 <cmr_adcSample+0x1a>
        }

        vTaskDelayUntil(&lastWakeTime, cmr_adcSample_period_ms);
 8002fda:	220a      	movs	r2, #10
 8002fdc:	f107 0308 	add.w	r3, r7, #8
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f003 f952 	bl	800628c <vTaskDelayUntil>
        for (size_t i = 0; i < adc->channelsLen; i++) {
 8002fe8:	e7d2      	b.n	8002f90 <cmr_adcSample+0x14>
	...

08002fec <cmr_adcConfigChannels>:
/**
 * @brief Initializes ADC channel sequence.
 *
 * @param adc The ADC to configure.
 */
static void cmr_adcConfigChannels(cmr_adc_t *adc) {
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08e      	sub	sp, #56	; 0x38
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < adc->channelsLen; i++) {
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ff8:	e03a      	b.n	8003070 <cmr_adcConfigChannels+0x84>
        const cmr_adcChannel_t *channel = adc->channels + i;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	633b      	str	r3, [r7, #48]	; 0x30
        if (channel->channel > ADC_CHANNEL_15) {
 800300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b0f      	cmp	r3, #15
 8003012:	d902      	bls.n	800301a <cmr_adcConfigChannels+0x2e>
            cmr_panic("Invalid ADC channel!");
 8003014:	481b      	ldr	r0, [pc, #108]	; (8003084 <cmr_adcConfigChannels+0x98>)
 8003016:	f001 fe02 	bl	8004c1e <cmr_panic>
        }

        // Rank goes from 1 to 16
        ADC_ChannelConfTypeDef channelConfig = _platform_adcChannelConfig(channel, (uint32_t) i+1);
 800301a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	f107 0320 	add.w	r3, r7, #32
 8003022:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003024:	4618      	mov	r0, r3
 8003026:	f001 f857 	bl	80040d8 <_platform_adcChannelConfig>

        if (HAL_ADC_ConfigChannel(&adc->handle, &channelConfig) != HAL_OK) {
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f107 0220 	add.w	r2, r7, #32
 8003030:	4611      	mov	r1, r2
 8003032:	4618      	mov	r0, r3
 8003034:	f004 fa5e 	bl	80074f4 <HAL_ADC_ConfigChannel>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <cmr_adcConfigChannels+0x58>
            cmr_panic("HAL_ADC_ConfigChannel() failed!");
 800303e:	4812      	ldr	r0, [pc, #72]	; (8003088 <cmr_adcConfigChannels+0x9c>)
 8003040:	f001 fded 	bl	8004c1e <cmr_panic>
        }

        // Configure the pin for analog use.
        cmr_rccGPIOClockEnable(channel->port);
 8003044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4618      	mov	r0, r3
 800304a:	f001 fdf4 	bl	8004c36 <cmr_rccGPIOClockEnable>

        GPIO_InitTypeDef pinConfig = _platform_adcPinConfig(channel);
 800304e:	f107 030c 	add.w	r3, r7, #12
 8003052:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003054:	4618      	mov	r0, r3
 8003056:	f001 f85b 	bl	8004110 <_platform_adcPinConfig>

        HAL_GPIO_Init(channel->port, &pinConfig);
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f107 020c 	add.w	r2, r7, #12
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f005 ff63 	bl	8008f30 <HAL_GPIO_Init>
    for (size_t i = 0; i < adc->channelsLen; i++) {
 800306a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306c:	3301      	adds	r3, #1
 800306e:	637b      	str	r3, [r7, #52]	; 0x34
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003074:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003076:	429a      	cmp	r2, r3
 8003078:	d3bf      	bcc.n	8002ffa <cmr_adcConfigChannels+0xe>
    }
}
 800307a:	bf00      	nop
 800307c:	bf00      	nop
 800307e:	3738      	adds	r7, #56	; 0x38
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	0800c650 	.word	0x0800c650
 8003088:	0800c668 	.word	0x0800c668

0800308c <cmr_adcInit>:
 * @param channelsLen Length of channels array.
 */
void cmr_adcInit(
    cmr_adc_t *adc, ADC_TypeDef *instance,
    cmr_adcChannel_t *channels, const size_t channelsLen
) {
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af02      	add	r7, sp, #8
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	603b      	str	r3, [r7, #0]
    if (channelsLen > CMR_ADC_CHANNELS) {
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b10      	cmp	r3, #16
 800309e:	d902      	bls.n	80030a6 <cmr_adcInit+0x1a>
        cmr_panic("Too many channels");
 80030a0:	4813      	ldr	r0, [pc, #76]	; (80030f0 <cmr_adcInit+0x64>)
 80030a2:	f001 fdbc 	bl	8004c1e <cmr_panic>
    }

    _platform_adcInit(adc, instance, channels, channelsLen);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	68b9      	ldr	r1, [r7, #8]
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f001 f86f 	bl	8004190 <_platform_adcInit>

    cmr_rccADCClockEnable(instance);
 80030b2:	68b8      	ldr	r0, [r7, #8]
 80030b4:	f001 fdca 	bl	8004c4c <cmr_rccADCClockEnable>

    if (HAL_ADC_Init(&adc->handle) != HAL_OK) {
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f004 f894 	bl	80071e8 <HAL_ADC_Init>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <cmr_adcInit+0x40>
        cmr_panic("HAL_ADC_Init() failed!");
 80030c6:	480b      	ldr	r0, [pc, #44]	; (80030f4 <cmr_adcInit+0x68>)
 80030c8:	f001 fda9 	bl	8004c1e <cmr_panic>
    }

    cmr_adcConfigChannels(adc);
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f7ff ff8d 	bl	8002fec <cmr_adcConfigChannels>

    cmr_taskInit(
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80030d8:	2205      	movs	r2, #5
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <cmr_adcInit+0x6c>)
 80030e0:	4906      	ldr	r1, [pc, #24]	; (80030fc <cmr_adcInit+0x70>)
 80030e2:	f001 ff05 	bl	8004ef0 <cmr_taskInit>
        "ADC sample",
        cmr_adcSample_priority,
        cmr_adcSample,
        adc
    );
}
 80030e6:	bf00      	nop
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	0800c688 	.word	0x0800c688
 80030f4:	0800c69c 	.word	0x0800c69c
 80030f8:	08002f7d 	.word	0x08002f7d
 80030fc:	0800c6b4 	.word	0x0800c6b4

08003100 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003104:	f3bf 8f4f 	dsb	sy
}
 8003108:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <__NVIC_SystemReset+0x24>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003112:	4904      	ldr	r1, [pc, #16]	; (8003124 <__NVIC_SystemReset+0x24>)
 8003114:	4b04      	ldr	r3, [pc, #16]	; (8003128 <__NVIC_SystemReset+0x28>)
 8003116:	4313      	orrs	r3, r2
 8003118:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800311a:	f3bf 8f4f 	dsb	sy
}
 800311e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003120:	bf00      	nop
 8003122:	e7fd      	b.n	8003120 <__NVIC_SystemReset+0x20>
 8003124:	e000ed00 	.word	0xe000ed00
 8003128:	05fa0004 	.word	0x05fa0004

0800312c <cmr_bootloaderReceiveCallback>:
/**
 * @brief Callback for every time that a message is received from CAN to
 * check if we should system reset and enter bootloader
 */
void cmr_bootloaderReceiveCallback(CAN_RxHeaderTypeDef *msg, uint8_t *rxData)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
#ifdef CMR_ENABLE_BOOTLOADER
    if (msg->StdId == CMR_CANID_OPENBLT_XMP_RX) {
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f240 72e9 	movw	r2, #2025	; 0x7e9
 800313e:	4293      	cmp	r3, r2
 8003140:	d10b      	bne.n	800315a <cmr_bootloaderReceiveCallback+0x2e>
        if (rxData[0] == 0xff && rxData[1] == CMR_ENABLE_BOOTLOADER) {
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2bff      	cmp	r3, #255	; 0xff
 8003148:	d106      	bne.n	8003158 <cmr_bootloaderReceiveCallback+0x2c>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	3301      	adds	r3, #1
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d101      	bne.n	8003158 <cmr_bootloaderReceiveCallback+0x2c>
            NVIC_SystemReset();
 8003154:	f7ff ffd4 	bl	8003100 <__NVIC_SystemReset>
        }
        return;
 8003158:	bf00      	nop
    }
#endif
}
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <cmr_canFromHandle>:
 *
 * @param handle The handle.
 *
 * @return The interface.
 */
static cmr_can_t *cmr_canFromHandle(CAN_HandleTypeDef *handle) {
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
    char *addr = (void *) handle;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	60fb      	str	r3, [r7, #12]
    return (void *) (addr - offsetof(cmr_can_t, handle));
 800316c:	68fb      	ldr	r3, [r7, #12]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
	...

0800317c <cmr_canTXCpltCallback>:
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL CAN handle.
 * @param mailbox The completed mailbox.
 */
static void cmr_canTXCpltCallback(CAN_HandleTypeDef *handle, size_t mailbox) {
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
    (void) mailbox;     // Placate compiler.
    cmr_can_t *can = cmr_canFromHandle(handle);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff ffea 	bl	8003160 <cmr_canFromHandle>
 800318c:	60f8      	str	r0, [r7, #12]

    // Indicate completion.
    BaseType_t higherWoken;
    if (xSemaphoreGiveFromISR(can->txSem, &higherWoken) != pdTRUE) {
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003192:	f107 0208 	add.w	r2, r7, #8
 8003196:	4611      	mov	r1, r2
 8003198:	4618      	mov	r0, r3
 800319a:	f002 fc87 	bl	8005aac <xQueueGiveFromISR>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d002      	beq.n	80031aa <cmr_canTXCpltCallback+0x2e>
        cmr_panic("TX semaphore released too many times!");
 80031a4:	4808      	ldr	r0, [pc, #32]	; (80031c8 <cmr_canTXCpltCallback+0x4c>)
 80031a6:	f001 fd3a 	bl	8004c1e <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d007      	beq.n	80031c0 <cmr_canTXCpltCallback+0x44>
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <cmr_canTXCpltCallback+0x50>)
 80031b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	f3bf 8f6f 	isb	sy
}
 80031c0:	bf00      	nop
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	0800c6c0 	.word	0x0800c6c0
 80031cc:	e000ed04 	.word	0xe000ed04

080031d0 <HAL_CAN_TxMailbox0CompleteCallback>:
        CAN_HandleTypeDef *handle \
    ) { \
        /* Treat abort as complete. */ \
        cmr_canTXCpltCallback(handle, mailbox); \
    }
CAN_TX_MAILBOX_CALLBACK(0)
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	2100      	movs	r1, #0
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff ffce 	bl	800317c <cmr_canTXCpltCallback>
 80031e0:	bf00      	nop
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_CAN_TxMailbox0AbortCallback>:
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	2100      	movs	r1, #0
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7ff ffc2 	bl	800317c <cmr_canTXCpltCallback>
 80031f8:	bf00      	nop
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_CAN_TxMailbox1CompleteCallback>:
CAN_TX_MAILBOX_CALLBACK(1)
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	2101      	movs	r1, #1
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff ffb6 	bl	800317c <cmr_canTXCpltCallback>
 8003210:	bf00      	nop
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_CAN_TxMailbox1AbortCallback>:
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	2101      	movs	r1, #1
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff ffaa 	bl	800317c <cmr_canTXCpltCallback>
 8003228:	bf00      	nop
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_CAN_TxMailbox2CompleteCallback>:
CAN_TX_MAILBOX_CALLBACK(2)
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	2102      	movs	r1, #2
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff ff9e 	bl	800317c <cmr_canTXCpltCallback>
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_CAN_TxMailbox2AbortCallback>:
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	2102      	movs	r1, #2
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff ff92 	bl	800317c <cmr_canTXCpltCallback>
 8003258:	bf00      	nop
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_CAN_ErrorCallback>:
 * @brief HAL CAN error callback.
 *
 * @warning Called from an interrupt handler!
 * @warning The handle must have been configured through this library!
 */
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *handle) {
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
    cmr_can_t *can = cmr_canFromHandle(handle);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff ff79 	bl	8003160 <cmr_canFromHandle>
 800326e:	6178      	str	r0, [r7, #20]

    uint32_t error = handle->ErrorCode;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	613b      	str	r3, [r7, #16]
    if (error & (
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f403 33fc 	and.w	r3, r3, #129024	; 0x1f800
 800327c:	2b00      	cmp	r3, #0
 800327e:	d018      	beq.n	80032b2 <HAL_CAN_ErrorCallback+0x52>
            HAL_CAN_ERROR_TX_TERR1 |
            HAL_CAN_ERROR_TX_TERR2
    )) {
        // Transmit error; drop semaphore.
        BaseType_t higherWoken;
        if (xSemaphoreGiveFromISR(can->txSem, &higherWoken) != pdTRUE) {
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003284:	f107 020c 	add.w	r2, r7, #12
 8003288:	4611      	mov	r1, r2
 800328a:	4618      	mov	r0, r3
 800328c:	f002 fc0e 	bl	8005aac <xQueueGiveFromISR>
 8003290:	4603      	mov	r3, r0
 8003292:	2b01      	cmp	r3, #1
 8003294:	d002      	beq.n	800329c <HAL_CAN_ErrorCallback+0x3c>
            cmr_panic("TX semaphore released too many times!");
 8003296:	480a      	ldr	r0, [pc, #40]	; (80032c0 <HAL_CAN_ErrorCallback+0x60>)
 8003298:	f001 fcc1 	bl	8004c1e <cmr_panic>
        }
        portYIELD_FROM_ISR(higherWoken);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d007      	beq.n	80032b2 <HAL_CAN_ErrorCallback+0x52>
 80032a2:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <HAL_CAN_ErrorCallback+0x64>)
 80032a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	f3bf 8f6f 	isb	sy
    }

    // Clear errors.
    handle->ErrorCode = 0;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80032b8:	bf00      	nop
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	0800c6c0 	.word	0x0800c6c0
 80032c4:	e000ed04 	.word	0xe000ed04

080032c8 <cmr_canTimeout>:
 *
 * @return A negative value if a timeout has occurred; otherwise 0.
 */
static int cmr_canTimeout(
    TickType_t lastReceived_ms, TickType_t threshold_ms, TickType_t now_ms
) {
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
    TickType_t release_ms = lastReceived_ms + threshold_ms;
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	4413      	add	r3, r2
 80032da:	617b      	str	r3, [r7, #20]

    if (now_ms < lastReceived_ms && release_ms <= lastReceived_ms) {
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d206      	bcs.n	80032f2 <cmr_canTimeout+0x2a>
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d802      	bhi.n	80032f2 <cmr_canTimeout+0x2a>
        // Current time overflowed; release did not. Timeout!
        return -1;
 80032ec:	f04f 33ff 	mov.w	r3, #4294967295
 80032f0:	e011      	b.n	8003316 <cmr_canTimeout+0x4e>
    }

    if (lastReceived_ms <= now_ms && release_ms < lastReceived_ms) {
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d805      	bhi.n	8003306 <cmr_canTimeout+0x3e>
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d201      	bcs.n	8003306 <cmr_canTimeout+0x3e>
        // Current time did not overflow; release time did. No timeout.
        return 0;
 8003302:	2300      	movs	r3, #0
 8003304:	e007      	b.n	8003316 <cmr_canTimeout+0x4e>
    }

    // Neither current nor release overflowed, or both have.
    // In either case, release less than current indicates timeout.
    if (release_ms < now_ms) {
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	429a      	cmp	r2, r3
 800330c:	d202      	bcs.n	8003314 <cmr_canTimeout+0x4c>
        return -1;
 800330e:	f04f 33ff 	mov.w	r3, #4294967295
 8003312:	e000      	b.n	8003316 <cmr_canTimeout+0x4e>
    }

    return 0;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	371c      	adds	r7, #28
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <cmr_canRXMetaTimeoutError>:
 * @param meta The periodic message's reception metadata.
 * @param now_ms Current timestamp, in milliseconds.
 *
 * @return A negative value if a timeout error has occurred; otherwise 0.
 */
int cmr_canRXMetaTimeoutError(const cmr_canRXMeta_t *meta, TickType_t now_ms) {
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]
    return cmr_canTimeout(
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6958      	ldr	r0, [r3, #20]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	4619      	mov	r1, r3
 8003338:	f7ff ffc6 	bl	80032c8 <cmr_canTimeout>
 800333c:	4603      	mov	r3, r0
        meta->lastReceived_ms, meta->timeoutError_ms, now_ms
    );
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <cmr_canRXMetaFind>:
 * @param can The interface.
 * @param canID The CAN ID to search for.
 *
 * @return The associated receive metadata, or `NULL` if not found.
 */
static cmr_canRXMeta_t *cmr_canRXMetaFind(cmr_can_t *can, uint16_t canID) {
 8003346:	b480      	push	{r7}
 8003348:	b085      	sub	sp, #20
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	460b      	mov	r3, r1
 8003350:	807b      	strh	r3, [r7, #2]
    for (size_t i = 0; i < can->rxMetaLen; i++) {
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	e00f      	b.n	8003378 <cmr_canRXMetaFind+0x32>
        cmr_canRXMeta_t *meta = can->rxMeta + i;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	015b      	lsls	r3, r3, #5
 8003360:	4413      	add	r3, r2
 8003362:	60bb      	str	r3, [r7, #8]
        if (meta->canID == canID) {
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	887a      	ldrh	r2, [r7, #2]
 800336a:	429a      	cmp	r2, r3
 800336c:	d101      	bne.n	8003372 <cmr_canRXMetaFind+0x2c>
            return meta;
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	e008      	b.n	8003384 <cmr_canRXMetaFind+0x3e>
    for (size_t i = 0; i < can->rxMetaLen; i++) {
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	3301      	adds	r3, #1
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	429a      	cmp	r2, r3
 8003380:	d3ea      	bcc.n	8003358 <cmr_canRXMetaFind+0x12>
        }
    }

    return NULL;    // No matching metadata.
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <cmr_canRXData>:
 * @param data The received data.
 * @param dataLen The received data's length.
 */
static void cmr_canRXData(
    cmr_can_t *can, uint16_t canID, const void *data, size_t dataLen
) {
 8003390:	b590      	push	{r4, r7, lr}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	607a      	str	r2, [r7, #4]
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	460b      	mov	r3, r1
 800339e:	817b      	strh	r3, [r7, #10]
    cmr_canRXMeta_t *meta = cmr_canRXMetaFind(can, canID);
 80033a0:	897b      	ldrh	r3, [r7, #10]
 80033a2:	4619      	mov	r1, r3
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f7ff ffce 	bl	8003346 <cmr_canRXMetaFind>
 80033aa:	6178      	str	r0, [r7, #20]
    if (meta == NULL) {
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10b      	bne.n	80033ca <cmr_canRXData+0x3a>
        // Not a configured message; attempt to use the callback.
        if (can->rxCallback) {
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d014      	beq.n	80033e4 <cmr_canRXData+0x54>
            can->rxCallback(can, canID, data, dataLen);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 80033be:	8979      	ldrh	r1, [r7, #10]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	47a0      	blx	r4
        }

        return;
 80033c8:	e00c      	b.n	80033e4 <cmr_canRXData+0x54>
    }

    memcpy((void *) meta->payload, data, dataLen);
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	3318      	adds	r3, #24
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f009 f87a 	bl	800c4cc <memcpy>
    meta->lastReceived_ms = xTaskGetTickCountFromISR();
 80033d8:	f003 f8de 	bl	8006598 <xTaskGetTickCountFromISR>
 80033dc:	4602      	mov	r2, r0
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	615a      	str	r2, [r3, #20]
 80033e2:	e000      	b.n	80033e6 <cmr_canRXData+0x56>
        return;
 80033e4:	bf00      	nop
}
 80033e6:	371c      	adds	r7, #28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd90      	pop	{r4, r7, pc}

080033ec <cmr_canRXPendingCallback>:
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL CAN handle.
 * @param fifo The pending FIFO.
 */
static void cmr_canRXPendingCallback(CAN_HandleTypeDef *handle, uint32_t fifo) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08c      	sub	sp, #48	; 0x30
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
    CAN_RxHeaderTypeDef msg;
    uint8_t data[8];
    if (HAL_CAN_GetRxMessage(handle, fifo, &msg, data) != HAL_OK) {
 80033f6:	f107 0308 	add.w	r3, r7, #8
 80033fa:	f107 0210 	add.w	r2, r7, #16
 80033fe:	6839      	ldr	r1, [r7, #0]
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f004 fdb6 	bl	8007f72 <HAL_CAN_GetRxMessage>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d114      	bne.n	8003436 <cmr_canRXPendingCallback+0x4a>
        return;
    }

    cmr_bootloaderReceiveCallback(&msg, (uint8_t*)data);
 800340c:	f107 0208 	add.w	r2, r7, #8
 8003410:	f107 0310 	add.w	r3, r7, #16
 8003414:	4611      	mov	r1, r2
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff fe88 	bl	800312c <cmr_bootloaderReceiveCallback>

    cmr_can_t *can = cmr_canFromHandle(handle);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff fe9f 	bl	8003160 <cmr_canFromHandle>
 8003422:	62f8      	str	r0, [r7, #44]	; 0x2c
    cmr_canRXData(can, msg.StdId, data, msg.DLC);
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	b299      	uxth	r1, r3
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	f107 0208 	add.w	r2, r7, #8
 800342e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003430:	f7ff ffae 	bl	8003390 <cmr_canRXData>
 8003434:	e000      	b.n	8003438 <cmr_canRXPendingCallback+0x4c>
        return;
 8003436:	bf00      	nop
}
 8003438:	3730      	adds	r7, #48	; 0x30
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_CAN_RxFifo0MsgPendingCallback>:
    void HAL_CAN_RxFifo ## fifo ## MsgPendingCallback( \
        CAN_HandleTypeDef *handle \
    ) { \
        cmr_canRXPendingCallback(handle, CAN_RX_FIFO ## fifo); \
    }
CAN_RX_FIFO_PENDING(0)
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	2100      	movs	r1, #0
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7ff ffcf 	bl	80033ec <cmr_canRXPendingCallback>
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_CAN_RxFifo1MsgPendingCallback>:
CAN_RX_FIFO_PENDING(1)
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	2101      	movs	r1, #1
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff ffc3 	bl	80033ec <cmr_canRXPendingCallback>
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <cmr_canInit>:
    cmr_canBitRate_t bitRate,
    cmr_canRXMeta_t *rxMeta, size_t rxMetaLen,
    cmr_canRXCallback_t rxCallback,
    GPIO_TypeDef *rxPort, uint16_t rxPin,
    GPIO_TypeDef *txPort, uint16_t txPin
) {
 8003470:	b580      	push	{r7, lr}
 8003472:	b090      	sub	sp, #64	; 0x40
 8003474:	af06      	add	r7, sp, #24
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	4613      	mov	r3, r2
 800347e:	71fb      	strb	r3, [r7, #7]
    /* Do any platform-specific initialization */
    _platform_canInit(
 8003480:	79fa      	ldrb	r2, [r7, #7]
 8003482:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003486:	9305      	str	r3, [sp, #20]
 8003488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800348a:	9304      	str	r3, [sp, #16]
 800348c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800348e:	9303      	str	r3, [sp, #12]
 8003490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003492:	9302      	str	r3, [sp, #8]
 8003494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003496:	9301      	str	r3, [sp, #4]
 8003498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	68b9      	ldr	r1, [r7, #8]
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 fb99 	bl	8003bd8 <_platform_canInit>
        rxCallback,
        rxPort, rxPin,
        txPort, txPin
    );

    cmr_rccCANClockEnable(instance);
 80034a6:	68b8      	ldr	r0, [r7, #8]
 80034a8:	f001 fbdb 	bl	8004c62 <cmr_rccCANClockEnable>
    cmr_rccGPIOClockEnable(rxPort);
 80034ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80034ae:	f001 fbc2 	bl	8004c36 <cmr_rccGPIOClockEnable>
    cmr_rccGPIOClockEnable(txPort);
 80034b2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80034b4:	f001 fbbf 	bl	8004c36 <cmr_rccGPIOClockEnable>

    // Configure CAN RX pin.
    GPIO_InitTypeDef pinConfig = {
 80034b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	2302      	movs	r3, #2
 80034be:	61bb      	str	r3, [r7, #24]
 80034c0:	2300      	movs	r3, #0
 80034c2:	61fb      	str	r3, [r7, #28]
 80034c4:	2303      	movs	r3, #3
 80034c6:	623b      	str	r3, [r7, #32]
        .Pin = rxPin,
        .Mode = GPIO_MODE_AF_PP,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_VERY_HIGH,
        .Alternate = cmr_canGPIOAF(instance, rxPort)
 80034c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034ca:	68b8      	ldr	r0, [r7, #8]
 80034cc:	f000 f88d 	bl	80035ea <cmr_canGPIOAF>
 80034d0:	4603      	mov	r3, r0
    GPIO_InitTypeDef pinConfig = {
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
    };
    HAL_GPIO_Init(rxPort, &pinConfig);
 80034d4:	f107 0314 	add.w	r3, r7, #20
 80034d8:	4619      	mov	r1, r3
 80034da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80034dc:	f005 fd28 	bl	8008f30 <HAL_GPIO_Init>

    // Configure CAN TX pin.
    pinConfig.Pin = txPin;
 80034e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034e4:	617b      	str	r3, [r7, #20]
    pinConfig.Alternate = cmr_canGPIOAF(instance, txPort);
 80034e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034e8:	68b8      	ldr	r0, [r7, #8]
 80034ea:	f000 f87e 	bl	80035ea <cmr_canGPIOAF>
 80034ee:	4603      	mov	r3, r0
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(txPort, &pinConfig);
 80034f2:	f107 0314 	add.w	r3, r7, #20
 80034f6:	4619      	mov	r1, r3
 80034f8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80034fa:	f005 fd19 	bl	8008f30 <HAL_GPIO_Init>

    if (HAL_CAN_Init(&can->handle) != HAL_OK) {
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4618      	mov	r0, r3
 8003502:	f004 fa25 	bl	8007950 <HAL_CAN_Init>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <cmr_canInit+0xa2>
        cmr_panic("HAL_CAN_Init() failed!");
 800350c:	480e      	ldr	r0, [pc, #56]	; (8003548 <cmr_canInit+0xd8>)
 800350e:	f001 fb86 	bl	8004c1e <cmr_panic>
    }

    if (HAL_CAN_Start(&can->handle) != HAL_OK) {
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4618      	mov	r0, r3
 8003516:	f004 fc0d 	bl	8007d34 <HAL_CAN_Start>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <cmr_canInit+0xb6>
        cmr_panic("HAL_CAN_Start() failed!");
 8003520:	480a      	ldr	r0, [pc, #40]	; (800354c <cmr_canInit+0xdc>)
 8003522:	f001 fb7c 	bl	8004c1e <cmr_panic>
    }

    if (HAL_CAN_ActivateNotification(
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f648 7113 	movw	r1, #36627	; 0x8f13
 800352c:	4618      	mov	r0, r3
 800352e:	f004 fe33 	bl	8008198 <HAL_CAN_ActivateNotification>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <cmr_canInit+0xce>
            CAN_IT_ERROR_PASSIVE |
            CAN_IT_BUSOFF |
            CAN_IT_LAST_ERROR_CODE |
            CAN_IT_ERROR
    )) {
        cmr_panic("HAL_CAN_ActivateNotification() failed!");
 8003538:	4805      	ldr	r0, [pc, #20]	; (8003550 <cmr_canInit+0xe0>)
 800353a:	f001 fb70 	bl	8004c1e <cmr_panic>
    }
}
 800353e:	bf00      	nop
 8003540:	3728      	adds	r7, #40	; 0x28
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	0800c6e8 	.word	0x0800c6e8
 800354c:	0800c700 	.word	0x0800c700
 8003550:	0800c718 	.word	0x0800c718

08003554 <cmr_canTX>:
 */
int cmr_canTX(
    cmr_can_t *can,
    uint16_t id, const void *data, size_t len,
    TickType_t timeout
) {
 8003554:	b580      	push	{r7, lr}
 8003556:	b08e      	sub	sp, #56	; 0x38
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	607a      	str	r2, [r7, #4]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	460b      	mov	r3, r1
 8003562:	817b      	strh	r3, [r7, #10]
    CAN_TxHeaderTypeDef txHeader = {
 8003564:	897b      	ldrh	r3, [r7, #10]
 8003566:	61bb      	str	r3, [r7, #24]
 8003568:	2300      	movs	r3, #0
 800356a:	61fb      	str	r3, [r7, #28]
 800356c:	2300      	movs	r3, #0
 800356e:	623b      	str	r3, [r7, #32]
 8003570:	2300      	movs	r3, #0
 8003572:	627b      	str	r3, [r7, #36]	; 0x24
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	62bb      	str	r3, [r7, #40]	; 0x28
 8003578:	2300      	movs	r3, #0
 800357a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        .DLC = len,
        .TransmitGlobalTime = DISABLE
    };

    // Attempt to reserve a mailbox.
    BaseType_t result = xSemaphoreTake(can->txSem, timeout);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003582:	2300      	movs	r3, #0
 8003584:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003586:	2100      	movs	r1, #0
 8003588:	f002 fb0a 	bl	8005ba0 <xQueueGenericReceive>
 800358c:	6378      	str	r0, [r7, #52]	; 0x34
    if (result != pdTRUE) {
 800358e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003590:	2b01      	cmp	r3, #1
 8003592:	d002      	beq.n	800359a <cmr_canTX+0x46>
        return -1;
 8003594:	f04f 33ff 	mov.w	r3, #4294967295
 8003598:	e012      	b.n	80035c0 <cmr_canTX+0x6c>
    }

    // Even though the interface for HAL_CAN_AddTxMessage() does not specify the
    // data as `const`, it does not touch the data. Oh well.
    uint32_t txMailbox;
    HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f107 0314 	add.w	r3, r7, #20
 80035a0:	f107 0118 	add.w	r1, r7, #24
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	f004 fc09 	bl	8007dbc <HAL_CAN_AddTxMessage>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        &can->handle, &txHeader, (void *) data, &txMailbox
    );
    if (status != HAL_OK) {
 80035b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <cmr_canTX+0x6a>
        cmr_panic("Semaphore was available, but no mailboxes were found!");
 80035b8:	4803      	ldr	r0, [pc, #12]	; (80035c8 <cmr_canTX+0x74>)
 80035ba:	f001 fb30 	bl	8004c1e <cmr_panic>
    }

    return 0;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3738      	adds	r7, #56	; 0x38
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	0800c740 	.word	0x0800c740

080035cc <cmr_canFilter>:
 * @param filtersLen The number of filters. Must be less than
 * `CMR_CAN_FILTERBANKS`.
 */
void cmr_canFilter(
    cmr_can_t *can, const cmr_canFilter_t *filters, size_t filtersLen
) {
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
    _platform_canFilter(can, filters, filtersLen);
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	68b9      	ldr	r1, [r7, #8]
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 fbd5 	bl	8003d8c <_platform_canFilter>
}
 80035e2:	bf00      	nop
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <cmr_canGPIOAF>:
 * @param can The CAN interface.
 * @param port The GPIO port.
 *
 * @return The GPIO alternate function.
 */
uint32_t cmr_canGPIOAF(CAN_TypeDef *instance, GPIO_TypeDef *port) {
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	6039      	str	r1, [r7, #0]
    return _platform_canGPIOAF(instance, port);
 80035f4:	6839      	ldr	r1, [r7, #0]
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 faaa 	bl	8003b50 <_platform_canGPIOAF>
 80035fc:	4603      	mov	r3, r0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <DMA1_Stream0_IRQHandler>:
 */
#define DMA_IRQ_HANDLER(ctrl, stream) \
    void DMA_STREAM_NAME(ctrl, stream, _IRQHandler)(void) { \
        HAL_DMA_IRQHandler(cmr_dmaInterrupts[ctrl - 1][stream].handle); \
    }
DMA_STREAM_FOREACH(DMA_IRQ_HANDLER)
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <DMA1_Stream0_IRQHandler+0x14>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f005 fa09 	bl	8008a28 <HAL_DMA_IRQHandler>
 8003616:	bf00      	nop
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	2002f1f8 	.word	0x2002f1f8

08003620 <DMA1_Stream1_IRQHandler>:
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
 8003624:	4b03      	ldr	r3, [pc, #12]	; (8003634 <DMA1_Stream1_IRQHandler+0x14>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4618      	mov	r0, r3
 800362a:	f005 f9fd 	bl	8008a28 <HAL_DMA_IRQHandler>
 800362e:	bf00      	nop
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	2002f1f8 	.word	0x2002f1f8

08003638 <DMA1_Stream2_IRQHandler>:
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
 800363c:	4b03      	ldr	r3, [pc, #12]	; (800364c <DMA1_Stream2_IRQHandler+0x14>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4618      	mov	r0, r3
 8003642:	f005 f9f1 	bl	8008a28 <HAL_DMA_IRQHandler>
 8003646:	bf00      	nop
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	2002f1f8 	.word	0x2002f1f8

08003650 <DMA1_Stream3_IRQHandler>:
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
 8003654:	4b03      	ldr	r3, [pc, #12]	; (8003664 <DMA1_Stream3_IRQHandler+0x14>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	4618      	mov	r0, r3
 800365a:	f005 f9e5 	bl	8008a28 <HAL_DMA_IRQHandler>
 800365e:	bf00      	nop
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	2002f1f8 	.word	0x2002f1f8

08003668 <DMA1_Stream4_IRQHandler>:
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
 800366c:	4b03      	ldr	r3, [pc, #12]	; (800367c <DMA1_Stream4_IRQHandler+0x14>)
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	4618      	mov	r0, r3
 8003672:	f005 f9d9 	bl	8008a28 <HAL_DMA_IRQHandler>
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	2002f1f8 	.word	0x2002f1f8

08003680 <DMA1_Stream5_IRQHandler>:
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
 8003684:	4b03      	ldr	r3, [pc, #12]	; (8003694 <DMA1_Stream5_IRQHandler+0x14>)
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	4618      	mov	r0, r3
 800368a:	f005 f9cd 	bl	8008a28 <HAL_DMA_IRQHandler>
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	2002f1f8 	.word	0x2002f1f8

08003698 <DMA1_Stream6_IRQHandler>:
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
 800369c:	4b03      	ldr	r3, [pc, #12]	; (80036ac <DMA1_Stream6_IRQHandler+0x14>)
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f005 f9c1 	bl	8008a28 <HAL_DMA_IRQHandler>
 80036a6:	bf00      	nop
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	2002f1f8 	.word	0x2002f1f8

080036b0 <DMA1_Stream7_IRQHandler>:
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	4b03      	ldr	r3, [pc, #12]	; (80036c4 <DMA1_Stream7_IRQHandler+0x14>)
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f005 f9b5 	bl	8008a28 <HAL_DMA_IRQHandler>
 80036be:	bf00      	nop
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	2002f1f8 	.word	0x2002f1f8

080036c8 <DMA2_Stream0_IRQHandler>:
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	4b03      	ldr	r3, [pc, #12]	; (80036dc <DMA2_Stream0_IRQHandler+0x14>)
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f005 f9a9 	bl	8008a28 <HAL_DMA_IRQHandler>
 80036d6:	bf00      	nop
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	2002f1f8 	.word	0x2002f1f8

080036e0 <DMA2_Stream1_IRQHandler>:
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	4b03      	ldr	r3, [pc, #12]	; (80036f4 <DMA2_Stream1_IRQHandler+0x14>)
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	4618      	mov	r0, r3
 80036ea:	f005 f99d 	bl	8008a28 <HAL_DMA_IRQHandler>
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	2002f1f8 	.word	0x2002f1f8

080036f8 <DMA2_Stream2_IRQHandler>:
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	4b03      	ldr	r3, [pc, #12]	; (800370c <DMA2_Stream2_IRQHandler+0x14>)
 80036fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003700:	4618      	mov	r0, r3
 8003702:	f005 f991 	bl	8008a28 <HAL_DMA_IRQHandler>
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	2002f1f8 	.word	0x2002f1f8

08003710 <DMA2_Stream3_IRQHandler>:
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
 8003714:	4b03      	ldr	r3, [pc, #12]	; (8003724 <DMA2_Stream3_IRQHandler+0x14>)
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	4618      	mov	r0, r3
 800371a:	f005 f985 	bl	8008a28 <HAL_DMA_IRQHandler>
 800371e:	bf00      	nop
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	2002f1f8 	.word	0x2002f1f8

08003728 <DMA2_Stream4_IRQHandler>:
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
 800372c:	4b03      	ldr	r3, [pc, #12]	; (800373c <DMA2_Stream4_IRQHandler+0x14>)
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	4618      	mov	r0, r3
 8003732:	f005 f979 	bl	8008a28 <HAL_DMA_IRQHandler>
 8003736:	bf00      	nop
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	2002f1f8 	.word	0x2002f1f8

08003740 <DMA2_Stream5_IRQHandler>:
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
 8003744:	4b03      	ldr	r3, [pc, #12]	; (8003754 <DMA2_Stream5_IRQHandler+0x14>)
 8003746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003748:	4618      	mov	r0, r3
 800374a:	f005 f96d 	bl	8008a28 <HAL_DMA_IRQHandler>
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	2002f1f8 	.word	0x2002f1f8

08003758 <DMA2_Stream6_IRQHandler>:
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
 800375c:	4b03      	ldr	r3, [pc, #12]	; (800376c <DMA2_Stream6_IRQHandler+0x14>)
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	4618      	mov	r0, r3
 8003762:	f005 f961 	bl	8008a28 <HAL_DMA_IRQHandler>
 8003766:	bf00      	nop
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	2002f1f8 	.word	0x2002f1f8

08003770 <DMA2_Stream7_IRQHandler>:
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
 8003774:	4b03      	ldr	r3, [pc, #12]	; (8003784 <DMA2_Stream7_IRQHandler+0x14>)
 8003776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003778:	4618      	mov	r0, r3
 800377a:	f005 f955 	bl	8008a28 <HAL_DMA_IRQHandler>
 800377e:	bf00      	nop
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	2002f1f8 	.word	0x2002f1f8

08003788 <cmr_dmaInit>:
 * @brief Initializes the given HAL DMA handle, including interrupt handler
 * configuration for the corresponding stream.
 *
 * @param handle The HAL DMA handle.
 */
void cmr_dmaInit(DMA_HandleTypeDef *handle) {
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
    size_t ctrlIndex;
    size_t streamIndex;
    IRQn_Type irqNum;

    // Configure interrupts.
    switch ((uintptr_t) handle->Instance) {
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a92      	ldr	r2, [pc, #584]	; (80039e0 <cmr_dmaInit+0x258>)
 8003796:	4293      	cmp	r3, r2
 8003798:	f000 80d2 	beq.w	8003940 <cmr_dmaInit+0x1b8>
 800379c:	4a90      	ldr	r2, [pc, #576]	; (80039e0 <cmr_dmaInit+0x258>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	f200 80d5 	bhi.w	800394e <cmr_dmaInit+0x1c6>
 80037a4:	4a8f      	ldr	r2, [pc, #572]	; (80039e4 <cmr_dmaInit+0x25c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	f000 80c3 	beq.w	8003932 <cmr_dmaInit+0x1aa>
 80037ac:	4a8d      	ldr	r2, [pc, #564]	; (80039e4 <cmr_dmaInit+0x25c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	f200 80cd 	bhi.w	800394e <cmr_dmaInit+0x1c6>
 80037b4:	4a8c      	ldr	r2, [pc, #560]	; (80039e8 <cmr_dmaInit+0x260>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	f000 80b4 	beq.w	8003924 <cmr_dmaInit+0x19c>
 80037bc:	4a8a      	ldr	r2, [pc, #552]	; (80039e8 <cmr_dmaInit+0x260>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	f200 80c5 	bhi.w	800394e <cmr_dmaInit+0x1c6>
 80037c4:	4a89      	ldr	r2, [pc, #548]	; (80039ec <cmr_dmaInit+0x264>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	f000 80a5 	beq.w	8003916 <cmr_dmaInit+0x18e>
 80037cc:	4a87      	ldr	r2, [pc, #540]	; (80039ec <cmr_dmaInit+0x264>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	f200 80bd 	bhi.w	800394e <cmr_dmaInit+0x1c6>
 80037d4:	4a86      	ldr	r2, [pc, #536]	; (80039f0 <cmr_dmaInit+0x268>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	f000 8096 	beq.w	8003908 <cmr_dmaInit+0x180>
 80037dc:	4a84      	ldr	r2, [pc, #528]	; (80039f0 <cmr_dmaInit+0x268>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	f200 80b5 	bhi.w	800394e <cmr_dmaInit+0x1c6>
 80037e4:	4a83      	ldr	r2, [pc, #524]	; (80039f4 <cmr_dmaInit+0x26c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	f000 8087 	beq.w	80038fa <cmr_dmaInit+0x172>
 80037ec:	4a81      	ldr	r2, [pc, #516]	; (80039f4 <cmr_dmaInit+0x26c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	f200 80ad 	bhi.w	800394e <cmr_dmaInit+0x1c6>
 80037f4:	4a80      	ldr	r2, [pc, #512]	; (80039f8 <cmr_dmaInit+0x270>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d078      	beq.n	80038ec <cmr_dmaInit+0x164>
 80037fa:	4a7f      	ldr	r2, [pc, #508]	; (80039f8 <cmr_dmaInit+0x270>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	f200 80a6 	bhi.w	800394e <cmr_dmaInit+0x1c6>
 8003802:	4a7e      	ldr	r2, [pc, #504]	; (80039fc <cmr_dmaInit+0x274>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d06a      	beq.n	80038de <cmr_dmaInit+0x156>
 8003808:	4a7c      	ldr	r2, [pc, #496]	; (80039fc <cmr_dmaInit+0x274>)
 800380a:	4293      	cmp	r3, r2
 800380c:	f200 809f 	bhi.w	800394e <cmr_dmaInit+0x1c6>
 8003810:	4a7b      	ldr	r2, [pc, #492]	; (8003a00 <cmr_dmaInit+0x278>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d05c      	beq.n	80038d0 <cmr_dmaInit+0x148>
 8003816:	4a7a      	ldr	r2, [pc, #488]	; (8003a00 <cmr_dmaInit+0x278>)
 8003818:	4293      	cmp	r3, r2
 800381a:	f200 8098 	bhi.w	800394e <cmr_dmaInit+0x1c6>
 800381e:	4a79      	ldr	r2, [pc, #484]	; (8003a04 <cmr_dmaInit+0x27c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d04e      	beq.n	80038c2 <cmr_dmaInit+0x13a>
 8003824:	4a77      	ldr	r2, [pc, #476]	; (8003a04 <cmr_dmaInit+0x27c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	f200 8091 	bhi.w	800394e <cmr_dmaInit+0x1c6>
 800382c:	4a76      	ldr	r2, [pc, #472]	; (8003a08 <cmr_dmaInit+0x280>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d040      	beq.n	80038b4 <cmr_dmaInit+0x12c>
 8003832:	4a75      	ldr	r2, [pc, #468]	; (8003a08 <cmr_dmaInit+0x280>)
 8003834:	4293      	cmp	r3, r2
 8003836:	f200 808a 	bhi.w	800394e <cmr_dmaInit+0x1c6>
 800383a:	4a74      	ldr	r2, [pc, #464]	; (8003a0c <cmr_dmaInit+0x284>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d032      	beq.n	80038a6 <cmr_dmaInit+0x11e>
 8003840:	4a72      	ldr	r2, [pc, #456]	; (8003a0c <cmr_dmaInit+0x284>)
 8003842:	4293      	cmp	r3, r2
 8003844:	f200 8083 	bhi.w	800394e <cmr_dmaInit+0x1c6>
 8003848:	4a71      	ldr	r2, [pc, #452]	; (8003a10 <cmr_dmaInit+0x288>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d024      	beq.n	8003898 <cmr_dmaInit+0x110>
 800384e:	4a70      	ldr	r2, [pc, #448]	; (8003a10 <cmr_dmaInit+0x288>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d87c      	bhi.n	800394e <cmr_dmaInit+0x1c6>
 8003854:	4a6f      	ldr	r2, [pc, #444]	; (8003a14 <cmr_dmaInit+0x28c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d017      	beq.n	800388a <cmr_dmaInit+0x102>
 800385a:	4a6e      	ldr	r2, [pc, #440]	; (8003a14 <cmr_dmaInit+0x28c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d876      	bhi.n	800394e <cmr_dmaInit+0x1c6>
 8003860:	4a6d      	ldr	r2, [pc, #436]	; (8003a18 <cmr_dmaInit+0x290>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d003      	beq.n	800386e <cmr_dmaInit+0xe6>
 8003866:	4a6d      	ldr	r2, [pc, #436]	; (8003a1c <cmr_dmaInit+0x294>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d007      	beq.n	800387c <cmr_dmaInit+0xf4>
 800386c:	e06f      	b.n	800394e <cmr_dmaInit+0x1c6>
        case DMA_STREAM_NAME(ctrl, stream, _BASE): \
            ctrlIndex = ctrl - 1; \
            streamIndex = stream; \
            irqNum = DMA_STREAM_NAME(ctrl, stream, _IRQn); \
            break;
DMA_STREAM_FOREACH(DMA_INTERRUPT_CONFIG)
 800386e:	2300      	movs	r3, #0
 8003870:	61fb      	str	r3, [r7, #28]
 8003872:	2300      	movs	r3, #0
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	230b      	movs	r3, #11
 8003878:	75fb      	strb	r3, [r7, #23]
 800387a:	e06b      	b.n	8003954 <cmr_dmaInit+0x1cc>
 800387c:	2300      	movs	r3, #0
 800387e:	61fb      	str	r3, [r7, #28]
 8003880:	2301      	movs	r3, #1
 8003882:	61bb      	str	r3, [r7, #24]
 8003884:	230c      	movs	r3, #12
 8003886:	75fb      	strb	r3, [r7, #23]
 8003888:	e064      	b.n	8003954 <cmr_dmaInit+0x1cc>
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	2302      	movs	r3, #2
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	230d      	movs	r3, #13
 8003894:	75fb      	strb	r3, [r7, #23]
 8003896:	e05d      	b.n	8003954 <cmr_dmaInit+0x1cc>
 8003898:	2300      	movs	r3, #0
 800389a:	61fb      	str	r3, [r7, #28]
 800389c:	2303      	movs	r3, #3
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	230e      	movs	r3, #14
 80038a2:	75fb      	strb	r3, [r7, #23]
 80038a4:	e056      	b.n	8003954 <cmr_dmaInit+0x1cc>
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	2304      	movs	r3, #4
 80038ac:	61bb      	str	r3, [r7, #24]
 80038ae:	230f      	movs	r3, #15
 80038b0:	75fb      	strb	r3, [r7, #23]
 80038b2:	e04f      	b.n	8003954 <cmr_dmaInit+0x1cc>
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	2305      	movs	r3, #5
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	2310      	movs	r3, #16
 80038be:	75fb      	strb	r3, [r7, #23]
 80038c0:	e048      	b.n	8003954 <cmr_dmaInit+0x1cc>
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	2306      	movs	r3, #6
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	2311      	movs	r3, #17
 80038cc:	75fb      	strb	r3, [r7, #23]
 80038ce:	e041      	b.n	8003954 <cmr_dmaInit+0x1cc>
 80038d0:	2300      	movs	r3, #0
 80038d2:	61fb      	str	r3, [r7, #28]
 80038d4:	2307      	movs	r3, #7
 80038d6:	61bb      	str	r3, [r7, #24]
 80038d8:	232f      	movs	r3, #47	; 0x2f
 80038da:	75fb      	strb	r3, [r7, #23]
 80038dc:	e03a      	b.n	8003954 <cmr_dmaInit+0x1cc>
 80038de:	2301      	movs	r3, #1
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	2300      	movs	r3, #0
 80038e4:	61bb      	str	r3, [r7, #24]
 80038e6:	2338      	movs	r3, #56	; 0x38
 80038e8:	75fb      	strb	r3, [r7, #23]
 80038ea:	e033      	b.n	8003954 <cmr_dmaInit+0x1cc>
 80038ec:	2301      	movs	r3, #1
 80038ee:	61fb      	str	r3, [r7, #28]
 80038f0:	2301      	movs	r3, #1
 80038f2:	61bb      	str	r3, [r7, #24]
 80038f4:	2339      	movs	r3, #57	; 0x39
 80038f6:	75fb      	strb	r3, [r7, #23]
 80038f8:	e02c      	b.n	8003954 <cmr_dmaInit+0x1cc>
 80038fa:	2301      	movs	r3, #1
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	2302      	movs	r3, #2
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	233a      	movs	r3, #58	; 0x3a
 8003904:	75fb      	strb	r3, [r7, #23]
 8003906:	e025      	b.n	8003954 <cmr_dmaInit+0x1cc>
 8003908:	2301      	movs	r3, #1
 800390a:	61fb      	str	r3, [r7, #28]
 800390c:	2303      	movs	r3, #3
 800390e:	61bb      	str	r3, [r7, #24]
 8003910:	233b      	movs	r3, #59	; 0x3b
 8003912:	75fb      	strb	r3, [r7, #23]
 8003914:	e01e      	b.n	8003954 <cmr_dmaInit+0x1cc>
 8003916:	2301      	movs	r3, #1
 8003918:	61fb      	str	r3, [r7, #28]
 800391a:	2304      	movs	r3, #4
 800391c:	61bb      	str	r3, [r7, #24]
 800391e:	233c      	movs	r3, #60	; 0x3c
 8003920:	75fb      	strb	r3, [r7, #23]
 8003922:	e017      	b.n	8003954 <cmr_dmaInit+0x1cc>
 8003924:	2301      	movs	r3, #1
 8003926:	61fb      	str	r3, [r7, #28]
 8003928:	2305      	movs	r3, #5
 800392a:	61bb      	str	r3, [r7, #24]
 800392c:	2344      	movs	r3, #68	; 0x44
 800392e:	75fb      	strb	r3, [r7, #23]
 8003930:	e010      	b.n	8003954 <cmr_dmaInit+0x1cc>
 8003932:	2301      	movs	r3, #1
 8003934:	61fb      	str	r3, [r7, #28]
 8003936:	2306      	movs	r3, #6
 8003938:	61bb      	str	r3, [r7, #24]
 800393a:	2345      	movs	r3, #69	; 0x45
 800393c:	75fb      	strb	r3, [r7, #23]
 800393e:	e009      	b.n	8003954 <cmr_dmaInit+0x1cc>
 8003940:	2301      	movs	r3, #1
 8003942:	61fb      	str	r3, [r7, #28]
 8003944:	2307      	movs	r3, #7
 8003946:	61bb      	str	r3, [r7, #24]
 8003948:	2346      	movs	r3, #70	; 0x46
 800394a:	75fb      	strb	r3, [r7, #23]
 800394c:	e002      	b.n	8003954 <cmr_dmaInit+0x1cc>
#undef DMA_INTERRUPT_CONFIG
        default:
            cmr_panic("Unknown DMA stream!");
 800394e:	4834      	ldr	r0, [pc, #208]	; (8003a20 <cmr_dmaInit+0x298>)
 8003950:	f001 f965 	bl	8004c1e <cmr_panic>
    }
    cmr_dmaInterrupts[ctrlIndex][streamIndex] = (cmr_dmaInterrupt_t) {
 8003954:	4933      	ldr	r1, [pc, #204]	; (8003a24 <cmr_dmaInit+0x29c>)
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	00da      	lsls	r2, r3, #3
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	4413      	add	r3, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        .handle = handle
    };
    HAL_NVIC_SetPriority(irqNum, 5, 0);
 8003964:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003968:	2200      	movs	r2, #0
 800396a:	2105      	movs	r1, #5
 800396c:	4618      	mov	r0, r3
 800396e:	f004 fef4 	bl	800875a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqNum);
 8003972:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003976:	4618      	mov	r0, r3
 8003978:	f004 ff0b 	bl	8008792 <HAL_NVIC_EnableIRQ>

    // Enable DMA clocks.
    switch (ctrlIndex) {
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <cmr_dmaInit+0x202>
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d00f      	beq.n	80039a8 <cmr_dmaInit+0x220>
 8003988:	e01d      	b.n	80039c6 <cmr_dmaInit+0x23e>
        case 0:
            __HAL_RCC_DMA1_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	4b26      	ldr	r3, [pc, #152]	; (8003a28 <cmr_dmaInit+0x2a0>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	4a25      	ldr	r2, [pc, #148]	; (8003a28 <cmr_dmaInit+0x2a0>)
 8003994:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003998:	6313      	str	r3, [r2, #48]	; 0x30
 800399a:	4b23      	ldr	r3, [pc, #140]	; (8003a28 <cmr_dmaInit+0x2a0>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	693b      	ldr	r3, [r7, #16]
            break;
 80039a6:	e00e      	b.n	80039c6 <cmr_dmaInit+0x23e>
        case 1:
            __HAL_RCC_DMA2_CLK_ENABLE();
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	4b1e      	ldr	r3, [pc, #120]	; (8003a28 <cmr_dmaInit+0x2a0>)
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <cmr_dmaInit+0x2a0>)
 80039b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039b6:	6313      	str	r3, [r2, #48]	; 0x30
 80039b8:	4b1b      	ldr	r3, [pc, #108]	; (8003a28 <cmr_dmaInit+0x2a0>)
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	68fb      	ldr	r3, [r7, #12]
            break;
 80039c4:	bf00      	nop
    }

    if (HAL_DMA_Init(handle) != HAL_OK) {
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f004 fefe 	bl	80087c8 <HAL_DMA_Init>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <cmr_dmaInit+0x250>
        cmr_panic("HAL_DMA_Init() failed!");
 80039d2:	4816      	ldr	r0, [pc, #88]	; (8003a2c <cmr_dmaInit+0x2a4>)
 80039d4:	f001 f923 	bl	8004c1e <cmr_panic>
    }
}
 80039d8:	bf00      	nop
 80039da:	3720      	adds	r7, #32
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	400264b8 	.word	0x400264b8
 80039e4:	400264a0 	.word	0x400264a0
 80039e8:	40026488 	.word	0x40026488
 80039ec:	40026470 	.word	0x40026470
 80039f0:	40026458 	.word	0x40026458
 80039f4:	40026440 	.word	0x40026440
 80039f8:	40026428 	.word	0x40026428
 80039fc:	40026410 	.word	0x40026410
 8003a00:	400260b8 	.word	0x400260b8
 8003a04:	400260a0 	.word	0x400260a0
 8003a08:	40026088 	.word	0x40026088
 8003a0c:	40026070 	.word	0x40026070
 8003a10:	40026058 	.word	0x40026058
 8003a14:	40026040 	.word	0x40026040
 8003a18:	40026010 	.word	0x40026010
 8003a1c:	40026028 	.word	0x40026028
 8003a20:	0800c778 	.word	0x0800c778
 8003a24:	2002f1f8 	.word	0x2002f1f8
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	0800c78c 	.word	0x0800c78c

08003a30 <CAN1_TX_IRQHandler>:
                                                               \
    void CAN##can##_SCE_IRQHandler(void)                       \
    {                                                          \
        HAL_CAN_IRQHandler(cmr_canInterrupts[can - 1].handle); \
    }
CAN_FOREACH(CAN_IRQ_HANDLERS)
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	4b03      	ldr	r3, [pc, #12]	; (8003a44 <CAN1_TX_IRQHandler+0x14>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f004 fbd3 	bl	80081e4 <HAL_CAN_IRQHandler>
 8003a3e:	bf00      	nop
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	2002f238 	.word	0x2002f238

08003a48 <CAN1_RX0_IRQHandler>:
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	4b03      	ldr	r3, [pc, #12]	; (8003a5c <CAN1_RX0_IRQHandler+0x14>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f004 fbc7 	bl	80081e4 <HAL_CAN_IRQHandler>
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	2002f238 	.word	0x2002f238

08003a60 <CAN1_RX1_IRQHandler>:
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <CAN1_RX1_IRQHandler+0x14>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f004 fbbb 	bl	80081e4 <HAL_CAN_IRQHandler>
 8003a6e:	bf00      	nop
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	2002f238 	.word	0x2002f238

08003a78 <CAN1_SCE_IRQHandler>:
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	4b03      	ldr	r3, [pc, #12]	; (8003a8c <CAN1_SCE_IRQHandler+0x14>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f004 fbaf 	bl	80081e4 <HAL_CAN_IRQHandler>
 8003a86:	bf00      	nop
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	2002f238 	.word	0x2002f238

08003a90 <CAN2_TX_IRQHandler>:
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	4b03      	ldr	r3, [pc, #12]	; (8003aa4 <CAN2_TX_IRQHandler+0x14>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f004 fba3 	bl	80081e4 <HAL_CAN_IRQHandler>
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	2002f238 	.word	0x2002f238

08003aa8 <CAN2_RX0_IRQHandler>:
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	4b03      	ldr	r3, [pc, #12]	; (8003abc <CAN2_RX0_IRQHandler+0x14>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f004 fb97 	bl	80081e4 <HAL_CAN_IRQHandler>
 8003ab6:	bf00      	nop
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	2002f238 	.word	0x2002f238

08003ac0 <CAN2_RX1_IRQHandler>:
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	4b03      	ldr	r3, [pc, #12]	; (8003ad4 <CAN2_RX1_IRQHandler+0x14>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f004 fb8b 	bl	80081e4 <HAL_CAN_IRQHandler>
 8003ace:	bf00      	nop
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	2002f238 	.word	0x2002f238

08003ad8 <CAN2_SCE_IRQHandler>:
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	4b03      	ldr	r3, [pc, #12]	; (8003aec <CAN2_SCE_IRQHandler+0x14>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f004 fb7f 	bl	80081e4 <HAL_CAN_IRQHandler>
 8003ae6:	bf00      	nop
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	2002f238 	.word	0x2002f238

08003af0 <CAN3_TX_IRQHandler>:
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	4b03      	ldr	r3, [pc, #12]	; (8003b04 <CAN3_TX_IRQHandler+0x14>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f004 fb73 	bl	80081e4 <HAL_CAN_IRQHandler>
 8003afe:	bf00      	nop
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	2002f238 	.word	0x2002f238

08003b08 <CAN3_RX0_IRQHandler>:
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	4b03      	ldr	r3, [pc, #12]	; (8003b1c <CAN3_RX0_IRQHandler+0x14>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f004 fb67 	bl	80081e4 <HAL_CAN_IRQHandler>
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	2002f238 	.word	0x2002f238

08003b20 <CAN3_RX1_IRQHandler>:
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	4b03      	ldr	r3, [pc, #12]	; (8003b34 <CAN3_RX1_IRQHandler+0x14>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f004 fb5b 	bl	80081e4 <HAL_CAN_IRQHandler>
 8003b2e:	bf00      	nop
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	2002f238 	.word	0x2002f238

08003b38 <CAN3_SCE_IRQHandler>:
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	4b03      	ldr	r3, [pc, #12]	; (8003b4c <CAN3_SCE_IRQHandler+0x14>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f004 fb4f 	bl	80081e4 <HAL_CAN_IRQHandler>
 8003b46:	bf00      	nop
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	2002f238 	.word	0x2002f238

08003b50 <_platform_canGPIOAF>:
 * @param port The GPIO port.
 *
 * @return The GPIO alternate function.
 */
uint32_t _platform_canGPIOAF(CAN_TypeDef *instance, GPIO_TypeDef *port)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
    switch ((uintptr_t)instance)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a16      	ldr	r2, [pc, #88]	; (8003bb8 <_platform_canGPIOAF+0x68>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d020      	beq.n	8003ba4 <_platform_canGPIOAF+0x54>
 8003b62:	4a15      	ldr	r2, [pc, #84]	; (8003bb8 <_platform_canGPIOAF+0x68>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d81f      	bhi.n	8003ba8 <_platform_canGPIOAF+0x58>
 8003b68:	4a14      	ldr	r2, [pc, #80]	; (8003bbc <_platform_canGPIOAF+0x6c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d003      	beq.n	8003b76 <_platform_canGPIOAF+0x26>
 8003b6e:	4a14      	ldr	r2, [pc, #80]	; (8003bc0 <_platform_canGPIOAF+0x70>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d015      	beq.n	8003ba0 <_platform_canGPIOAF+0x50>
 8003b74:	e018      	b.n	8003ba8 <_platform_canGPIOAF+0x58>
    {
    case CAN1_BASE:
        switch ((uintptr_t)port)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	4a12      	ldr	r2, [pc, #72]	; (8003bc4 <_platform_canGPIOAF+0x74>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d009      	beq.n	8003b92 <_platform_canGPIOAF+0x42>
 8003b7e:	4a11      	ldr	r2, [pc, #68]	; (8003bc4 <_platform_canGPIOAF+0x74>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d80a      	bhi.n	8003b9a <_platform_canGPIOAF+0x4a>
 8003b84:	4a10      	ldr	r2, [pc, #64]	; (8003bc8 <_platform_canGPIOAF+0x78>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d003      	beq.n	8003b92 <_platform_canGPIOAF+0x42>
 8003b8a:	4a10      	ldr	r2, [pc, #64]	; (8003bcc <_platform_canGPIOAF+0x7c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d002      	beq.n	8003b96 <_platform_canGPIOAF+0x46>
 8003b90:	e003      	b.n	8003b9a <_platform_canGPIOAF+0x4a>
        {
        case GPIOA_BASE:
        case GPIOD_BASE:
            return GPIO_AF9_CAN1;
 8003b92:	2309      	movs	r3, #9
 8003b94:	e00b      	b.n	8003bae <_platform_canGPIOAF+0x5e>
        case GPIOB_BASE:
            return GPIO_AF8_CAN1;
 8003b96:	2308      	movs	r3, #8
 8003b98:	e009      	b.n	8003bae <_platform_canGPIOAF+0x5e>
        default:
            cmr_panic("Unknown/unspported GPIO port!");
 8003b9a:	480d      	ldr	r0, [pc, #52]	; (8003bd0 <_platform_canGPIOAF+0x80>)
 8003b9c:	f001 f83f 	bl	8004c1e <cmr_panic>
        }
    case CAN2_BASE:
        return GPIO_AF9_CAN2;
 8003ba0:	2309      	movs	r3, #9
 8003ba2:	e004      	b.n	8003bae <_platform_canGPIOAF+0x5e>
    case CAN3_BASE:
        return GPIO_AF11_CAN3;
 8003ba4:	230b      	movs	r3, #11
 8003ba6:	e002      	b.n	8003bae <_platform_canGPIOAF+0x5e>
    default:
        cmr_panic("Unknown CAN instance!");
 8003ba8:	480a      	ldr	r0, [pc, #40]	; (8003bd4 <_platform_canGPIOAF+0x84>)
 8003baa:	f001 f838 	bl	8004c1e <cmr_panic>
    }
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40006c00 	.word	0x40006c00
 8003bbc:	40006400 	.word	0x40006400
 8003bc0:	40006800 	.word	0x40006800
 8003bc4:	40020c00 	.word	0x40020c00
 8003bc8:	40020000 	.word	0x40020000
 8003bcc:	40020400 	.word	0x40020400
 8003bd0:	0800c7a4 	.word	0x0800c7a4
 8003bd4:	0800c7c4 	.word	0x0800c7c4

08003bd8 <_platform_canInit>:
    cmr_canBitRate_t bitRate,
    cmr_canRXMeta_t *rxMeta, size_t rxMetaLen,
    cmr_canRXCallback_t rxCallback,
    GPIO_TypeDef *rxPort, uint16_t rxPin,
    GPIO_TypeDef *txPort, uint16_t txPin
) {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b0a6      	sub	sp, #152	; 0x98
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	4613      	mov	r3, r2
 8003be6:	71fb      	strb	r3, [r7, #7]
    *can = (cmr_can_t) {
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4618      	mov	r0, r3
 8003bec:	2380      	movs	r3, #128	; 0x80
 8003bee:	461a      	mov	r2, r3
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	f008 fc79 	bl	800c4e8 <memset>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c02:	60da      	str	r2, [r3, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8003c0a:	611a      	str	r2, [r3, #16]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	765a      	strb	r2, [r3, #25]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	76da      	strb	r2, [r3, #27]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	675a      	str	r2, [r3, #116]	; 0x74
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8003c24:	679a      	str	r2, [r3, #120]	; 0x78
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003c2c:	67da      	str	r2, [r3, #124]	; 0x7c
        .rxCallback = rxCallback
    };

    // These numbers assume 48 MHz ABP1 peripheral clock frequency
    // 48 MHz / (6 + 1 + 1 time quanta) / Prescaler = bitRate
    switch (bitRate) {
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d00e      	beq.n	8003c52 <_platform_canInit+0x7a>
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	dc10      	bgt.n	8003c5a <_platform_canInit+0x82>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <_platform_canInit+0x6a>
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d004      	beq.n	8003c4a <_platform_canInit+0x72>
 8003c40:	e00b      	b.n	8003c5a <_platform_canInit+0x82>
        case CMR_CAN_BITRATE_250K:
            can->handle.Init.Prescaler = 24;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2218      	movs	r2, #24
 8003c46:	605a      	str	r2, [r3, #4]
            break;
 8003c48:	e007      	b.n	8003c5a <_platform_canInit+0x82>
        case CMR_CAN_BITRATE_500K:
            can->handle.Init.Prescaler = 12;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	220c      	movs	r2, #12
 8003c4e:	605a      	str	r2, [r3, #4]
            break;
 8003c50:	e003      	b.n	8003c5a <_platform_canInit+0x82>
        case CMR_CAN_BITRATE_1M:
            can->handle.Init.Prescaler = 6;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2206      	movs	r2, #6
 8003c56:	605a      	str	r2, [r3, #4]
            break;
 8003c58:	bf00      	nop
    }

    can->txSem = xSemaphoreCreateCountingStatic(
 8003c5a:	2003      	movs	r0, #3
 8003c5c:	2103      	movs	r1, #3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	332c      	adds	r3, #44	; 0x2c
 8003c62:	461a      	mov	r2, r3
 8003c64:	f001 fef2 	bl	8005a4c <xQueueCreateCountingSemaphoreStatic>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	629a      	str	r2, [r3, #40]	; 0x28
        CAN_TX_MAILBOXES, CAN_TX_MAILBOXES, &can->txSemBuf
    );
    configASSERT(can->txSem != NULL);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d103      	bne.n	8003c7e <_platform_canInit+0xa6>
 8003c76:	219f      	movs	r1, #159	; 0x9f
 8003c78:	483e      	ldr	r0, [pc, #248]	; (8003d74 <_platform_canInit+0x19c>)
 8003c7a:	f000 ffd0 	bl	8004c1e <cmr_panic>
    size_t canIdx;
    IRQn_Type irqTX;
    IRQn_Type irqRX0;
    IRQn_Type irqRX1;
    IRQn_Type irqSCE;
    switch ((uintptr_t) instance) {
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	4a3d      	ldr	r2, [pc, #244]	; (8003d78 <_platform_canInit+0x1a0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d029      	beq.n	8003cda <_platform_canInit+0x102>
 8003c86:	4a3c      	ldr	r2, [pc, #240]	; (8003d78 <_platform_canInit+0x1a0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d836      	bhi.n	8003cfa <_platform_canInit+0x122>
 8003c8c:	4a3b      	ldr	r2, [pc, #236]	; (8003d7c <_platform_canInit+0x1a4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d003      	beq.n	8003c9a <_platform_canInit+0xc2>
 8003c92:	4a3b      	ldr	r2, [pc, #236]	; (8003d80 <_platform_canInit+0x1a8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d010      	beq.n	8003cba <_platform_canInit+0xe2>
 8003c98:	e02f      	b.n	8003cfa <_platform_canInit+0x122>
            irqTX = CAN ## num ## _TX_IRQn; \
            irqRX0 = CAN ## num ## _RX0_IRQn; \
            irqRX1 = CAN ## num ## _RX1_IRQn; \
            irqSCE = CAN ## num ## _SCE_IRQn; \
            break;
CAN_FOREACH(CAN_INTERRUPT_CONFIG)
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ca0:	2313      	movs	r3, #19
 8003ca2:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8003ca6:	2314      	movs	r3, #20
 8003ca8:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 8003cac:	2315      	movs	r3, #21
 8003cae:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8003cb2:	2316      	movs	r3, #22
 8003cb4:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 8003cb8:	e022      	b.n	8003d00 <_platform_canInit+0x128>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cc0:	233f      	movs	r3, #63	; 0x3f
 8003cc2:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8003cc6:	2340      	movs	r3, #64	; 0x40
 8003cc8:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 8003ccc:	2341      	movs	r3, #65	; 0x41
 8003cce:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8003cd2:	2342      	movs	r3, #66	; 0x42
 8003cd4:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 8003cd8:	e012      	b.n	8003d00 <_platform_canInit+0x128>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ce0:	234a      	movs	r3, #74	; 0x4a
 8003ce2:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8003ce6:	234b      	movs	r3, #75	; 0x4b
 8003ce8:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 8003cec:	234c      	movs	r3, #76	; 0x4c
 8003cee:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8003cf2:	234d      	movs	r3, #77	; 0x4d
 8003cf4:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 8003cf8:	e002      	b.n	8003d00 <_platform_canInit+0x128>
#undef CAN_INTERRUPT_CONFIG
        default:
            cmr_panic("Unknown CAN instance!");
 8003cfa:	4822      	ldr	r0, [pc, #136]	; (8003d84 <_platform_canInit+0x1ac>)
 8003cfc:	f000 ff8f 	bl	8004c1e <cmr_panic>
    }

    cmr_canInterrupts[canIdx] = (cmr_canInterrupt_t) {
        .handle = &can->handle
 8003d00:	68fa      	ldr	r2, [r7, #12]
    cmr_canInterrupts[canIdx] = (cmr_canInterrupt_t) {
 8003d02:	4921      	ldr	r1, [pc, #132]	; (8003d88 <_platform_canInit+0x1b0>)
 8003d04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    };
    HAL_NVIC_SetPriority(irqTX, 5, 0);
 8003d0c:	f997 3093 	ldrsb.w	r3, [r7, #147]	; 0x93
 8003d10:	2200      	movs	r2, #0
 8003d12:	2105      	movs	r1, #5
 8003d14:	4618      	mov	r0, r3
 8003d16:	f004 fd20 	bl	800875a <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(irqRX0, 5, 0);
 8003d1a:	f997 3092 	ldrsb.w	r3, [r7, #146]	; 0x92
 8003d1e:	2200      	movs	r2, #0
 8003d20:	2105      	movs	r1, #5
 8003d22:	4618      	mov	r0, r3
 8003d24:	f004 fd19 	bl	800875a <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(irqRX1, 5, 0);
 8003d28:	f997 3091 	ldrsb.w	r3, [r7, #145]	; 0x91
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2105      	movs	r1, #5
 8003d30:	4618      	mov	r0, r3
 8003d32:	f004 fd12 	bl	800875a <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(irqSCE, 5, 0);
 8003d36:	f997 3090 	ldrsb.w	r3, [r7, #144]	; 0x90
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2105      	movs	r1, #5
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f004 fd0b 	bl	800875a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqTX);
 8003d44:	f997 3093 	ldrsb.w	r3, [r7, #147]	; 0x93
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f004 fd22 	bl	8008792 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(irqRX0);
 8003d4e:	f997 3092 	ldrsb.w	r3, [r7, #146]	; 0x92
 8003d52:	4618      	mov	r0, r3
 8003d54:	f004 fd1d 	bl	8008792 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(irqRX1);
 8003d58:	f997 3091 	ldrsb.w	r3, [r7, #145]	; 0x91
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f004 fd18 	bl	8008792 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(irqSCE);
 8003d62:	f997 3090 	ldrsb.w	r3, [r7, #144]	; 0x90
 8003d66:	4618      	mov	r0, r3
 8003d68:	f004 fd13 	bl	8008792 <HAL_NVIC_EnableIRQ>
}
 8003d6c:	bf00      	nop
 8003d6e:	3798      	adds	r7, #152	; 0x98
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	0800c7dc 	.word	0x0800c7dc
 8003d78:	40006c00 	.word	0x40006c00
 8003d7c:	40006400 	.word	0x40006400
 8003d80:	40006800 	.word	0x40006800
 8003d84:	0800c7c4 	.word	0x0800c7c4
 8003d88:	2002f238 	.word	0x2002f238

08003d8c <_platform_canFilter>:
 * @param filtersLen The number of filters. Must be less than
 * `CMR_CAN_FILTERBANKS`.
 */
void _platform_canFilter(
    cmr_can_t *can, const cmr_canFilter_t *filters, size_t filtersLen)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b094      	sub	sp, #80	; 0x50
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
    if (filtersLen >= CMR_CAN_FILTERBANKS)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b0d      	cmp	r3, #13
 8003d9c:	d902      	bls.n	8003da4 <_platform_canFilter+0x18>
    {
        cmr_panic("Too many filter banks!");
 8003d9e:	4830      	ldr	r0, [pc, #192]	; (8003e60 <_platform_canFilter+0xd4>)
 8003da0:	f000 ff3d 	bl	8004c1e <cmr_panic>
    }

    CAN_TypeDef *instance = can->handle.Instance;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	647b      	str	r3, [r7, #68]	; 0x44

    for (size_t i = 0; i < filtersLen; i++)
 8003daa:	2300      	movs	r3, #0
 8003dac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dae:	e04e      	b.n	8003e4e <_platform_canFilter+0xc2>
    {
        const cmr_canFilter_t *filter = filters + i;
 8003db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	4413      	add	r3, r2
 8003db8:	643b      	str	r3, [r7, #64]	; 0x40

        uint32_t bank = i;
 8003dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dbc:	64bb      	str	r3, [r7, #72]	; 0x48
        if (instance == CAN2) {
 8003dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc0:	4a28      	ldr	r2, [pc, #160]	; (8003e64 <_platform_canFilter+0xd8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d102      	bne.n	8003dcc <_platform_canFilter+0x40>
            // CAN2 uses banks 14-27.
            bank += CMR_CAN_FILTERBANKS;
 8003dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dc8:	330e      	adds	r3, #14
 8003dca:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        uint32_t filterMode = filter->isMask
 8003dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dce:	781b      	ldrb	r3, [r3, #0]
            ? CAN_FILTERMODE_IDMASK
            : CAN_FILTERMODE_IDLIST;
 8003dd0:	f083 0301 	eor.w	r3, r3, #1
 8003dd4:	b2db      	uxtb	r3, r3
        uint32_t filterMode = filter->isMask
 8003dd6:	63fb      	str	r3, [r7, #60]	; 0x3c

        // In 16 bit ID list mode, FilterIdHigh, FilterIdLow, FilterMaskIdHigh,
        // and FilterMaskIdLow all serve as a whitelist of left-aligned 11-bit
        // CAN IDs.
        // See RM0430 32.7.4 Fig. 387.
        const uint16_t CMR_CAN_ID_FILTER_SHIFT = 5;
 8003dd8:	2305      	movs	r3, #5
 8003dda:	877b      	strh	r3, [r7, #58]	; 0x3a
        CAN_FilterTypeDef config = {
            .FilterIdHigh           = filter->ids[0] << CMR_CAN_ID_FILTER_SHIFT,
 8003ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dde:	891b      	ldrh	r3, [r3, #8]
 8003de0:	461a      	mov	r2, r3
 8003de2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
        CAN_FilterTypeDef config = {
 8003de8:	613b      	str	r3, [r7, #16]
            .FilterIdLow            = filter->ids[1] << CMR_CAN_ID_FILTER_SHIFT,
 8003dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dec:	895b      	ldrh	r3, [r3, #10]
 8003dee:	461a      	mov	r2, r3
 8003df0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
        CAN_FilterTypeDef config = {
 8003df6:	617b      	str	r3, [r7, #20]
            .FilterMaskIdHigh       = filter->ids[2] << CMR_CAN_ID_FILTER_SHIFT,
 8003df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dfa:	899b      	ldrh	r3, [r3, #12]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
        CAN_FilterTypeDef config = {
 8003e04:	61bb      	str	r3, [r7, #24]
            .FilterMaskIdLow        = filter->ids[3] << CMR_CAN_ID_FILTER_SHIFT,
 8003e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e08:	89db      	ldrh	r3, [r3, #14]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
        CAN_FilterTypeDef config = {
 8003e12:	61fb      	str	r3, [r7, #28]
            .FilterFIFOAssignment   = filter->rxFIFO,
 8003e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e16:	685b      	ldr	r3, [r3, #4]
        CAN_FilterTypeDef config = {
 8003e18:	623b      	str	r3, [r7, #32]
 8003e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e22:	2300      	movs	r3, #0
 8003e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e26:	2301      	movs	r3, #1
 8003e28:	633b      	str	r3, [r7, #48]	; 0x30
 8003e2a:	230e      	movs	r3, #14
 8003e2c:	637b      	str	r3, [r7, #52]	; 0x34
            .FilterScale            = CAN_FILTERSCALE_16BIT,
            .FilterActivation       = ENABLE,
            .SlaveStartFilterBank   = CMR_CAN_FILTERBANKS
        };

        if (HAL_CAN_ConfigFilter(&can->handle, &config) != HAL_OK)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f107 0210 	add.w	r2, r7, #16
 8003e34:	4611      	mov	r1, r2
 8003e36:	4618      	mov	r0, r3
 8003e38:	f003 fe90 	bl	8007b5c <HAL_CAN_ConfigFilter>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <_platform_canFilter+0xbc>
        {
            cmr_panic("HAL_CAN_ConfigFilter() failed!");
 8003e42:	4809      	ldr	r0, [pc, #36]	; (8003e68 <_platform_canFilter+0xdc>)
 8003e44:	f000 feeb 	bl	8004c1e <cmr_panic>
    for (size_t i = 0; i < filtersLen; i++)
 8003e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d3ac      	bcc.n	8003db0 <_platform_canFilter+0x24>
        }
    }
}
 8003e56:	bf00      	nop
 8003e58:	bf00      	nop
 8003e5a:	3750      	adds	r7, #80	; 0x50
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	0800c828 	.word	0x0800c828
 8003e64:	40006800 	.word	0x40006800
 8003e68:	0800c840 	.word	0x0800c840

08003e6c <_platform_rccSystemClockEnable>:
 *
 * @note Generated by STM32Cube. Sets System Clock to 96 MHz, with only APB1
 * Peripheral Clocks at 48 MHz (APB1 Timer Clocks are still 96 MHz).
 */
void _platform_rccSystemClockEnable(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b094      	sub	sp, #80	; 0x50
 8003e70:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e72:	f107 031c 	add.w	r3, r7, #28
 8003e76:	2234      	movs	r2, #52	; 0x34
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f008 fb34 	bl	800c4e8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e80:	f107 0308 	add.w	r3, r7, #8
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	605a      	str	r2, [r3, #4]
 8003e8a:	609a      	str	r2, [r3, #8]
 8003e8c:	60da      	str	r2, [r3, #12]
 8003e8e:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e90:	2300      	movs	r3, #0
 8003e92:	607b      	str	r3, [r7, #4]
 8003e94:	4b29      	ldr	r3, [pc, #164]	; (8003f3c <_platform_rccSystemClockEnable+0xd0>)
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	4a28      	ldr	r2, [pc, #160]	; (8003f3c <_platform_rccSystemClockEnable+0xd0>)
 8003e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8003ea0:	4b26      	ldr	r3, [pc, #152]	; (8003f3c <_platform_rccSystemClockEnable+0xd0>)
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea8:	607b      	str	r3, [r7, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003eac:	2300      	movs	r3, #0
 8003eae:	603b      	str	r3, [r7, #0]
 8003eb0:	4b23      	ldr	r3, [pc, #140]	; (8003f40 <_platform_rccSystemClockEnable+0xd4>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a22      	ldr	r2, [pc, #136]	; (8003f40 <_platform_rccSystemClockEnable+0xd4>)
 8003eb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	4b20      	ldr	r3, [pc, #128]	; (8003f40 <_platform_rccSystemClockEnable+0xd4>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ec4:	603b      	str	r3, [r7, #0]
 8003ec6:	683b      	ldr	r3, [r7, #0]

    // Initializes the CPU, AHB and APB busses clocks
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ecc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ed0:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ed6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003eda:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 25;
 8003edc:	2319      	movs	r3, #25
 8003ede:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 192;
 8003ee0:	23c0      	movs	r3, #192	; 0xc0
 8003ee2:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 8003ee8:	2302      	movs	r3, #2
 8003eea:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 8003eec:	2302      	movs	r3, #2
 8003eee:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ef0:	f107 031c 	add.w	r3, r7, #28
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f007 fc19 	bl	800b72c <HAL_RCC_OscConfig>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <_platform_rccSystemClockEnable+0x9a>
    {
        cmr_panic("HAL_RCC_OscConfig() failed!");
 8003f00:	4810      	ldr	r0, [pc, #64]	; (8003f44 <_platform_rccSystemClockEnable+0xd8>)
 8003f02:	f000 fe8c 	bl	8004c1e <cmr_panic>
    }

    // Initializes the CPU, AHB and APB busses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003f06:	230f      	movs	r3, #15
 8003f08:	60bb      	str	r3, [r7, #8]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f16:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003f1c:	f107 0308 	add.w	r3, r7, #8
 8003f20:	2103      	movs	r1, #3
 8003f22:	4618      	mov	r0, r3
 8003f24:	f007 fa3a 	bl	800b39c <HAL_RCC_ClockConfig>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <_platform_rccSystemClockEnable+0xc8>
    {
        cmr_panic("HAL_RCC_ClockConfig() failed!");
 8003f2e:	4806      	ldr	r0, [pc, #24]	; (8003f48 <_platform_rccSystemClockEnable+0xdc>)
 8003f30:	f000 fe75 	bl	8004c1e <cmr_panic>
    }
}
 8003f34:	bf00      	nop
 8003f36:	3750      	adds	r7, #80	; 0x50
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40007000 	.word	0x40007000
 8003f44:	0800c860 	.word	0x0800c860
 8003f48:	0800c87c 	.word	0x0800c87c

08003f4c <_platform_rccGPIOClockEnable>:
 * @brief Enables the specified GPIO port's clock.
 *
 * @param port The GPIO port.
 */
void _platform_rccGPIOClockEnable(GPIO_TypeDef *port)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b08b      	sub	sp, #44	; 0x2c
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
    switch ((uintptr_t)port)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a57      	ldr	r2, [pc, #348]	; (80040b4 <_platform_rccGPIOClockEnable+0x168>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	f000 8096 	beq.w	800408a <_platform_rccGPIOClockEnable+0x13e>
 8003f5e:	4a55      	ldr	r2, [pc, #340]	; (80040b4 <_platform_rccGPIOClockEnable+0x168>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	f200 80a1 	bhi.w	80040a8 <_platform_rccGPIOClockEnable+0x15c>
 8003f66:	4a54      	ldr	r2, [pc, #336]	; (80040b8 <_platform_rccGPIOClockEnable+0x16c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d07f      	beq.n	800406c <_platform_rccGPIOClockEnable+0x120>
 8003f6c:	4a52      	ldr	r2, [pc, #328]	; (80040b8 <_platform_rccGPIOClockEnable+0x16c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	f200 809a 	bhi.w	80040a8 <_platform_rccGPIOClockEnable+0x15c>
 8003f74:	4a51      	ldr	r2, [pc, #324]	; (80040bc <_platform_rccGPIOClockEnable+0x170>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d069      	beq.n	800404e <_platform_rccGPIOClockEnable+0x102>
 8003f7a:	4a50      	ldr	r2, [pc, #320]	; (80040bc <_platform_rccGPIOClockEnable+0x170>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	f200 8093 	bhi.w	80040a8 <_platform_rccGPIOClockEnable+0x15c>
 8003f82:	4a4f      	ldr	r2, [pc, #316]	; (80040c0 <_platform_rccGPIOClockEnable+0x174>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d053      	beq.n	8004030 <_platform_rccGPIOClockEnable+0xe4>
 8003f88:	4a4d      	ldr	r2, [pc, #308]	; (80040c0 <_platform_rccGPIOClockEnable+0x174>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	f200 808c 	bhi.w	80040a8 <_platform_rccGPIOClockEnable+0x15c>
 8003f90:	4a4c      	ldr	r2, [pc, #304]	; (80040c4 <_platform_rccGPIOClockEnable+0x178>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d03d      	beq.n	8004012 <_platform_rccGPIOClockEnable+0xc6>
 8003f96:	4a4b      	ldr	r2, [pc, #300]	; (80040c4 <_platform_rccGPIOClockEnable+0x178>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	f200 8085 	bhi.w	80040a8 <_platform_rccGPIOClockEnable+0x15c>
 8003f9e:	4a4a      	ldr	r2, [pc, #296]	; (80040c8 <_platform_rccGPIOClockEnable+0x17c>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d027      	beq.n	8003ff4 <_platform_rccGPIOClockEnable+0xa8>
 8003fa4:	4a48      	ldr	r2, [pc, #288]	; (80040c8 <_platform_rccGPIOClockEnable+0x17c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d87e      	bhi.n	80040a8 <_platform_rccGPIOClockEnable+0x15c>
 8003faa:	4a48      	ldr	r2, [pc, #288]	; (80040cc <_platform_rccGPIOClockEnable+0x180>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d003      	beq.n	8003fb8 <_platform_rccGPIOClockEnable+0x6c>
 8003fb0:	4a47      	ldr	r2, [pc, #284]	; (80040d0 <_platform_rccGPIOClockEnable+0x184>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00f      	beq.n	8003fd6 <_platform_rccGPIOClockEnable+0x8a>
        break;
    case GPIOH_BASE:
        __HAL_RCC_GPIOH_CLK_ENABLE();
        break;
    }
}
 8003fb6:	e077      	b.n	80040a8 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb8:	2300      	movs	r3, #0
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
 8003fbc:	4b45      	ldr	r3, [pc, #276]	; (80040d4 <_platform_rccGPIOClockEnable+0x188>)
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	4a44      	ldr	r2, [pc, #272]	; (80040d4 <_platform_rccGPIOClockEnable+0x188>)
 8003fc2:	f043 0301 	orr.w	r3, r3, #1
 8003fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc8:	4b42      	ldr	r3, [pc, #264]	; (80040d4 <_platform_rccGPIOClockEnable+0x188>)
 8003fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        break;
 8003fd4:	e068      	b.n	80040a8 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	623b      	str	r3, [r7, #32]
 8003fda:	4b3e      	ldr	r3, [pc, #248]	; (80040d4 <_platform_rccGPIOClockEnable+0x188>)
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	4a3d      	ldr	r2, [pc, #244]	; (80040d4 <_platform_rccGPIOClockEnable+0x188>)
 8003fe0:	f043 0302 	orr.w	r3, r3, #2
 8003fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fe6:	4b3b      	ldr	r3, [pc, #236]	; (80040d4 <_platform_rccGPIOClockEnable+0x188>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	623b      	str	r3, [r7, #32]
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
        break;
 8003ff2:	e059      	b.n	80040a8 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61fb      	str	r3, [r7, #28]
 8003ff8:	4b36      	ldr	r3, [pc, #216]	; (80040d4 <_platform_rccGPIOClockEnable+0x188>)
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	4a35      	ldr	r2, [pc, #212]	; (80040d4 <_platform_rccGPIOClockEnable+0x188>)
 8003ffe:	f043 0304 	orr.w	r3, r3, #4
 8004002:	6313      	str	r3, [r2, #48]	; 0x30
 8004004:	4b33      	ldr	r3, [pc, #204]	; (80040d4 <_platform_rccGPIOClockEnable+0x188>)
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	69fb      	ldr	r3, [r7, #28]
        break;
 8004010:	e04a      	b.n	80040a8 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8004012:	2300      	movs	r3, #0
 8004014:	61bb      	str	r3, [r7, #24]
 8004016:	4b2f      	ldr	r3, [pc, #188]	; (80040d4 <_platform_rccGPIOClockEnable+0x188>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	4a2e      	ldr	r2, [pc, #184]	; (80040d4 <_platform_rccGPIOClockEnable+0x188>)
 800401c:	f043 0308 	orr.w	r3, r3, #8
 8004020:	6313      	str	r3, [r2, #48]	; 0x30
 8004022:	4b2c      	ldr	r3, [pc, #176]	; (80040d4 <_platform_rccGPIOClockEnable+0x188>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	61bb      	str	r3, [r7, #24]
 800402c:	69bb      	ldr	r3, [r7, #24]
        break;
 800402e:	e03b      	b.n	80040a8 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8004030:	2300      	movs	r3, #0
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	4b27      	ldr	r3, [pc, #156]	; (80040d4 <_platform_rccGPIOClockEnable+0x188>)
 8004036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004038:	4a26      	ldr	r2, [pc, #152]	; (80040d4 <_platform_rccGPIOClockEnable+0x188>)
 800403a:	f043 0310 	orr.w	r3, r3, #16
 800403e:	6313      	str	r3, [r2, #48]	; 0x30
 8004040:	4b24      	ldr	r3, [pc, #144]	; (80040d4 <_platform_rccGPIOClockEnable+0x188>)
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	f003 0310 	and.w	r3, r3, #16
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	697b      	ldr	r3, [r7, #20]
        break;
 800404c:	e02c      	b.n	80040a8 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOF_CLK_ENABLE();
 800404e:	2300      	movs	r3, #0
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	4b20      	ldr	r3, [pc, #128]	; (80040d4 <_platform_rccGPIOClockEnable+0x188>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	4a1f      	ldr	r2, [pc, #124]	; (80040d4 <_platform_rccGPIOClockEnable+0x188>)
 8004058:	f043 0320 	orr.w	r3, r3, #32
 800405c:	6313      	str	r3, [r2, #48]	; 0x30
 800405e:	4b1d      	ldr	r3, [pc, #116]	; (80040d4 <_platform_rccGPIOClockEnable+0x188>)
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	f003 0320 	and.w	r3, r3, #32
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	693b      	ldr	r3, [r7, #16]
        break;
 800406a:	e01d      	b.n	80040a8 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOG_CLK_ENABLE();
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	4b18      	ldr	r3, [pc, #96]	; (80040d4 <_platform_rccGPIOClockEnable+0x188>)
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	4a17      	ldr	r2, [pc, #92]	; (80040d4 <_platform_rccGPIOClockEnable+0x188>)
 8004076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800407a:	6313      	str	r3, [r2, #48]	; 0x30
 800407c:	4b15      	ldr	r3, [pc, #84]	; (80040d4 <_platform_rccGPIOClockEnable+0x188>)
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	68fb      	ldr	r3, [r7, #12]
        break;
 8004088:	e00e      	b.n	80040a8 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOH_CLK_ENABLE();
 800408a:	2300      	movs	r3, #0
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	4b11      	ldr	r3, [pc, #68]	; (80040d4 <_platform_rccGPIOClockEnable+0x188>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	4a10      	ldr	r2, [pc, #64]	; (80040d4 <_platform_rccGPIOClockEnable+0x188>)
 8004094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004098:	6313      	str	r3, [r2, #48]	; 0x30
 800409a:	4b0e      	ldr	r3, [pc, #56]	; (80040d4 <_platform_rccGPIOClockEnable+0x188>)
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a2:	60bb      	str	r3, [r7, #8]
 80040a4:	68bb      	ldr	r3, [r7, #8]
        break;
 80040a6:	bf00      	nop
}
 80040a8:	bf00      	nop
 80040aa:	372c      	adds	r7, #44	; 0x2c
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	40021c00 	.word	0x40021c00
 80040b8:	40021800 	.word	0x40021800
 80040bc:	40021400 	.word	0x40021400
 80040c0:	40021000 	.word	0x40021000
 80040c4:	40020c00 	.word	0x40020c00
 80040c8:	40020800 	.word	0x40020800
 80040cc:	40020000 	.word	0x40020000
 80040d0:	40020400 	.word	0x40020400
 80040d4:	40023800 	.word	0x40023800

080040d8 <_platform_adcChannelConfig>:
#endif /* HAL_GPIO_MODULE_ENABLED */

#ifdef HAL_ADC_MODULE_ENABLED

ADC_ChannelConfTypeDef _platform_adcChannelConfig(const cmr_adcChannel_t *channel, uint32_t rank)
{
 80040d8:	b490      	push	{r4, r7}
 80040da:	b088      	sub	sp, #32
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
    ADC_ChannelConfTypeDef channelConfig = {
        .Channel = channel->channel,
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	681b      	ldr	r3, [r3, #0]
    ADC_ChannelConfTypeDef channelConfig = {
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	617b      	str	r3, [r7, #20]
        .Rank = rank, // HAL needs Rank to be from 1 to 16
        .SamplingTime = channel->samplingTime,
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	68db      	ldr	r3, [r3, #12]
    ADC_ChannelConfTypeDef channelConfig = {
 80040f2:	61bb      	str	r3, [r7, #24]
 80040f4:	2300      	movs	r3, #0
 80040f6:	61fb      	str	r3, [r7, #28]
        .Offset = 0 // reserved, set to 0
    };

    return channelConfig;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	461c      	mov	r4, r3
 80040fc:	f107 0310 	add.w	r3, r7, #16
 8004100:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004102:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	3720      	adds	r7, #32
 800410a:	46bd      	mov	sp, r7
 800410c:	bc90      	pop	{r4, r7}
 800410e:	4770      	bx	lr

08004110 <_platform_adcPinConfig>:

GPIO_InitTypeDef _platform_adcPinConfig(const cmr_adcChannel_t *channel)
{
 8004110:	b4b0      	push	{r4, r5, r7}
 8004112:	b089      	sub	sp, #36	; 0x24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
    GPIO_InitTypeDef pinConfig = {
        .Pin = channel->pin,
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	891b      	ldrh	r3, [r3, #8]
    GPIO_InitTypeDef pinConfig = {
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	2303      	movs	r3, #3
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	2300      	movs	r3, #0
 800412a:	61bb      	str	r3, [r7, #24]
 800412c:	2300      	movs	r3, #0
 800412e:	61fb      	str	r3, [r7, #28]
        .Mode = GPIO_MODE_ANALOG,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_LOW,
        .Alternate = 0};

    return pinConfig;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	461d      	mov	r5, r3
 8004134:	f107 040c 	add.w	r4, r7, #12
 8004138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800413a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	602b      	str	r3, [r5, #0]
}
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	3724      	adds	r7, #36	; 0x24
 8004144:	46bd      	mov	sp, r7
 8004146:	bcb0      	pop	{r4, r5, r7}
 8004148:	4770      	bx	lr
	...

0800414c <_platform_rccADCClockEnable>:
 * @brief Enables the specified ADC's clock.
 *
 * @param instance The HAL ADC instance.
 */
void _platform_rccADCClockEnable(ADC_TypeDef *instance)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
    switch ((uintptr_t)instance)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a0c      	ldr	r2, [pc, #48]	; (8004188 <_platform_rccADCClockEnable+0x3c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d10e      	bne.n	800417a <_platform_rccADCClockEnable+0x2e>
    {
    case ADC1_BASE:
        __HAL_RCC_ADC1_CLK_ENABLE();
 800415c:	2300      	movs	r3, #0
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	4b0a      	ldr	r3, [pc, #40]	; (800418c <_platform_rccADCClockEnable+0x40>)
 8004162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004164:	4a09      	ldr	r2, [pc, #36]	; (800418c <_platform_rccADCClockEnable+0x40>)
 8004166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416a:	6453      	str	r3, [r2, #68]	; 0x44
 800416c:	4b07      	ldr	r3, [pc, #28]	; (800418c <_platform_rccADCClockEnable+0x40>)
 800416e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	68fb      	ldr	r3, [r7, #12]
        break;
 8004178:	bf00      	nop
    }
}
 800417a:	bf00      	nop
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40012000 	.word	0x40012000
 800418c:	40023800 	.word	0x40023800

08004190 <_platform_adcInit>:
 * @brief Platform-specifc adc initialization
 *
 *  @param adc The ADC to initialize.
 */
void _platform_adcInit(cmr_adc_t *adc, ADC_TypeDef *instance, cmr_adcChannel_t *channels, const size_t channelsLen)
{
 8004190:	b590      	push	{r4, r7, lr}
 8004192:	f5ad 4da6 	sub.w	sp, sp, #21248	; 0x5300
 8004196:	b091      	sub	sp, #68	; 0x44
 8004198:	af00      	add	r7, sp, #0
 800419a:	f507 7450 	add.w	r4, r7, #832	; 0x340
 800419e:	f5a4 744d 	sub.w	r4, r4, #820	; 0x334
 80041a2:	6020      	str	r0, [r4, #0]
 80041a4:	f507 7050 	add.w	r0, r7, #832	; 0x340
 80041a8:	f5a0 704e 	sub.w	r0, r0, #824	; 0x338
 80041ac:	6001      	str	r1, [r0, #0]
 80041ae:	f507 7150 	add.w	r1, r7, #832	; 0x340
 80041b2:	f5a1 714f 	sub.w	r1, r1, #828	; 0x33c
 80041b6:	600a      	str	r2, [r1, #0]
 80041b8:	f507 7250 	add.w	r2, r7, #832	; 0x340
 80041bc:	f5a2 7250 	sub.w	r2, r2, #832	; 0x340
 80041c0:	6013      	str	r3, [r2, #0]
    *adc = (cmr_adc_t){
 80041c2:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80041c6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f245 3330 	movw	r3, #21296	; 0x5330
 80041d2:	461a      	mov	r2, r3
 80041d4:	2100      	movs	r1, #0
 80041d6:	f008 f987 	bl	800c4e8 <memset>
 80041da:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80041de:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f507 7250 	add.w	r2, r7, #832	; 0x340
 80041e8:	f5a2 724e 	sub.w	r2, r2, #824	; 0x338
 80041ec:	6812      	ldr	r2, [r2, #0]
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80041f4:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80041fe:	605a      	str	r2, [r3, #4]
 8004200:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8004204:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2201      	movs	r2, #1
 800420c:	611a      	str	r2, [r3, #16]
 800420e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8004212:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2201      	movs	r2, #1
 800421a:	615a      	str	r2, [r3, #20]
 800421c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8004220:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f507 7250 	add.w	r2, r7, #832	; 0x340
 800422a:	f5a2 7250 	sub.w	r2, r2, #832	; 0x340
 800422e:	6812      	ldr	r2, [r2, #0]
 8004230:	61da      	str	r2, [r3, #28]
 8004232:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8004236:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2020 	strb.w	r2, [r3, #32]
 8004242:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8004246:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2201      	movs	r2, #1
 800424e:	625a      	str	r2, [r3, #36]	; 0x24
 8004250:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8004254:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a0f      	ldr	r2, [pc, #60]	; (8004298 <_platform_adcInit+0x108>)
 800425c:	629a      	str	r2, [r3, #40]	; 0x28
 800425e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8004262:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f507 7250 	add.w	r2, r7, #832	; 0x340
 800426c:	f5a2 724f 	sub.w	r2, r2, #828	; 0x33c
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	649a      	str	r2, [r3, #72]	; 0x48
 8004274:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8004278:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8004282:	f5a2 7250 	sub.w	r2, r2, #832	; 0x340
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	64da      	str	r2, [r3, #76]	; 0x4c
                .NbrOfConversion = channelsLen,
                .DMAContinuousRequests = DISABLE,
                .EOCSelection = ADC_EOC_SINGLE_CONV}},
        .channels = channels,
        .channelsLen = channelsLen};
}
 800428a:	bf00      	nop
 800428c:	f507 47a6 	add.w	r7, r7, #21248	; 0x5300
 8004290:	3744      	adds	r7, #68	; 0x44
 8004292:	46bd      	mov	sp, r7
 8004294:	bd90      	pop	{r4, r7, pc}
 8004296:	bf00      	nop
 8004298:	0f000001 	.word	0x0f000001

0800429c <_platform_rccCANClockEnable>:
 * @brief Enables the specified CAN interface's clock.
 *
 * @param instance The HAL CAN instance.
 */
void _platform_rccCANClockEnable(CAN_TypeDef *instance)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
    switch ((uintptr_t) instance) {
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a27      	ldr	r2, [pc, #156]	; (8004344 <_platform_rccCANClockEnable+0xa8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d035      	beq.n	8004318 <_platform_rccCANClockEnable+0x7c>
 80042ac:	4a25      	ldr	r2, [pc, #148]	; (8004344 <_platform_rccCANClockEnable+0xa8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d841      	bhi.n	8004336 <_platform_rccCANClockEnable+0x9a>
 80042b2:	4a25      	ldr	r2, [pc, #148]	; (8004348 <_platform_rccCANClockEnable+0xac>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d003      	beq.n	80042c0 <_platform_rccCANClockEnable+0x24>
 80042b8:	4a24      	ldr	r2, [pc, #144]	; (800434c <_platform_rccCANClockEnable+0xb0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00f      	beq.n	80042de <_platform_rccCANClockEnable+0x42>
            break;
        case CAN3_BASE:
            __HAL_RCC_CAN3_CLK_ENABLE();
            break;
    }
}
 80042be:	e03a      	b.n	8004336 <_platform_rccCANClockEnable+0x9a>
            __HAL_RCC_CAN1_CLK_ENABLE();
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	4b22      	ldr	r3, [pc, #136]	; (8004350 <_platform_rccCANClockEnable+0xb4>)
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	4a21      	ldr	r2, [pc, #132]	; (8004350 <_platform_rccCANClockEnable+0xb4>)
 80042ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042ce:	6413      	str	r3, [r2, #64]	; 0x40
 80042d0:	4b1f      	ldr	r3, [pc, #124]	; (8004350 <_platform_rccCANClockEnable+0xb4>)
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d8:	617b      	str	r3, [r7, #20]
 80042da:	697b      	ldr	r3, [r7, #20]
            break;
 80042dc:	e02b      	b.n	8004336 <_platform_rccCANClockEnable+0x9a>
            __HAL_RCC_CAN2_CLK_ENABLE();
 80042de:	2300      	movs	r3, #0
 80042e0:	613b      	str	r3, [r7, #16]
 80042e2:	4b1b      	ldr	r3, [pc, #108]	; (8004350 <_platform_rccCANClockEnable+0xb4>)
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	4a1a      	ldr	r2, [pc, #104]	; (8004350 <_platform_rccCANClockEnable+0xb4>)
 80042e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042ec:	6413      	str	r3, [r2, #64]	; 0x40
 80042ee:	4b18      	ldr	r3, [pc, #96]	; (8004350 <_platform_rccCANClockEnable+0xb4>)
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042f6:	613b      	str	r3, [r7, #16]
 80042f8:	693b      	ldr	r3, [r7, #16]
            __HAL_RCC_CAN1_CLK_ENABLE();    // CAN2 also needs CAN1 clock.
 80042fa:	2300      	movs	r3, #0
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	4b14      	ldr	r3, [pc, #80]	; (8004350 <_platform_rccCANClockEnable+0xb4>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	4a13      	ldr	r2, [pc, #76]	; (8004350 <_platform_rccCANClockEnable+0xb4>)
 8004304:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004308:	6413      	str	r3, [r2, #64]	; 0x40
 800430a:	4b11      	ldr	r3, [pc, #68]	; (8004350 <_platform_rccCANClockEnable+0xb4>)
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	68fb      	ldr	r3, [r7, #12]
            break;
 8004316:	e00e      	b.n	8004336 <_platform_rccCANClockEnable+0x9a>
            __HAL_RCC_CAN3_CLK_ENABLE();
 8004318:	2300      	movs	r3, #0
 800431a:	60bb      	str	r3, [r7, #8]
 800431c:	4b0c      	ldr	r3, [pc, #48]	; (8004350 <_platform_rccCANClockEnable+0xb4>)
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	4a0b      	ldr	r2, [pc, #44]	; (8004350 <_platform_rccCANClockEnable+0xb4>)
 8004322:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004326:	6413      	str	r3, [r2, #64]	; 0x40
 8004328:	4b09      	ldr	r3, [pc, #36]	; (8004350 <_platform_rccCANClockEnable+0xb4>)
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004330:	60bb      	str	r3, [r7, #8]
 8004332:	68bb      	ldr	r3, [r7, #8]
            break;
 8004334:	bf00      	nop
}
 8004336:	bf00      	nop
 8004338:	371c      	adds	r7, #28
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40006c00 	.word	0x40006c00
 8004348:	40006400 	.word	0x40006400
 800434c:	40006800 	.word	0x40006800
 8004350:	40023800 	.word	0x40023800

08004354 <EXTI0_IRQHandler>:
 */
#define EXTI_IRQHandler(name, pins) \
    void EXTI##name##_IRQHandler(void) { \
        HAL_GPIO_EXTI_IRQHandler(pins); \
    }
EXTI_IRQHandler(0, GPIO_PIN_0)
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
 8004358:	2001      	movs	r0, #1
 800435a:	f004 ffc9 	bl	80092f0 <HAL_GPIO_EXTI_IRQHandler>
 800435e:	bf00      	nop
 8004360:	bd80      	pop	{r7, pc}

08004362 <EXTI1_IRQHandler>:
EXTI_IRQHandler(1, GPIO_PIN_1)
 8004362:	b580      	push	{r7, lr}
 8004364:	af00      	add	r7, sp, #0
 8004366:	2002      	movs	r0, #2
 8004368:	f004 ffc2 	bl	80092f0 <HAL_GPIO_EXTI_IRQHandler>
 800436c:	bf00      	nop
 800436e:	bd80      	pop	{r7, pc}

08004370 <EXTI2_IRQHandler>:
EXTI_IRQHandler(2, GPIO_PIN_2)
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
 8004374:	2004      	movs	r0, #4
 8004376:	f004 ffbb 	bl	80092f0 <HAL_GPIO_EXTI_IRQHandler>
 800437a:	bf00      	nop
 800437c:	bd80      	pop	{r7, pc}

0800437e <EXTI3_IRQHandler>:
EXTI_IRQHandler(3, GPIO_PIN_3)
 800437e:	b580      	push	{r7, lr}
 8004380:	af00      	add	r7, sp, #0
 8004382:	2008      	movs	r0, #8
 8004384:	f004 ffb4 	bl	80092f0 <HAL_GPIO_EXTI_IRQHandler>
 8004388:	bf00      	nop
 800438a:	bd80      	pop	{r7, pc}

0800438c <EXTI4_IRQHandler>:
EXTI_IRQHandler(4, GPIO_PIN_4)
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
 8004390:	2010      	movs	r0, #16
 8004392:	f004 ffad 	bl	80092f0 <HAL_GPIO_EXTI_IRQHandler>
 8004396:	bf00      	nop
 8004398:	bd80      	pop	{r7, pc}

0800439a <EXTI9_5_IRQHandler>:
EXTI_IRQHandler(
 800439a:	b580      	push	{r7, lr}
 800439c:	af00      	add	r7, sp, #0
 800439e:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 80043a2:	f004 ffa5 	bl	80092f0 <HAL_GPIO_EXTI_IRQHandler>
 80043a6:	bf00      	nop
 80043a8:	bd80      	pop	{r7, pc}

080043aa <EXTI15_10_IRQHandler>:
    9_5,
    GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_7 | GPIO_PIN_6 | GPIO_PIN_5
)
EXTI_IRQHandler(
 80043aa:	b580      	push	{r7, lr}
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 80043b2:	f004 ff9d 	bl	80092f0 <HAL_GPIO_EXTI_IRQHandler>
 80043b6:	bf00      	nop
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <cmr_gpioPinInit>:
 * @brief Configures the specified GPIO pin(s).
 *
 * @param pinConfigs The pin configuration(s).
 * @param pinConfigsLen The number of pin configurations.
 */
void cmr_gpioPinInit(const cmr_gpioPinConfig_t *pinConfigs, const size_t pinConfigsLen) {
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
    cmr_gpioPinConfigs = pinConfigs;
 80043c6:	4a16      	ldr	r2, [pc, #88]	; (8004420 <cmr_gpioPinInit+0x64>)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6013      	str	r3, [r2, #0]
    cmr_gpioPinConfigsLen = pinConfigsLen;
 80043cc:	4a15      	ldr	r2, [pc, #84]	; (8004424 <cmr_gpioPinInit+0x68>)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6013      	str	r3, [r2, #0]

    for (size_t i = 0; i < cmr_gpioPinConfigsLen; i++) {
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	e018      	b.n	800440a <cmr_gpioPinInit+0x4e>
        const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[i];
 80043d8:	4b11      	ldr	r3, [pc, #68]	; (8004420 <cmr_gpioPinInit+0x64>)
 80043da:	6819      	ldr	r1, [r3, #0]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	4613      	mov	r3, r2
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	4413      	add	r3, r2
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	440b      	add	r3, r1
 80043e8:	60bb      	str	r3, [r7, #8]
        cmr_rccGPIOClockEnable(pinConfig->port);
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fc21 	bl	8004c36 <cmr_rccGPIOClockEnable>

        // The HAL GPIO driver doesn't actually declare the initialization
        // struct as `const`, but it doesn't modify it either.
        HAL_GPIO_Init(
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	681a      	ldr	r2, [r3, #0]
            pinConfig->port,
            (GPIO_InitTypeDef *) &pinConfig->init
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	3304      	adds	r3, #4
        HAL_GPIO_Init(
 80043fc:	4619      	mov	r1, r3
 80043fe:	4610      	mov	r0, r2
 8004400:	f004 fd96 	bl	8008f30 <HAL_GPIO_Init>
    for (size_t i = 0; i < cmr_gpioPinConfigsLen; i++) {
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	3301      	adds	r3, #1
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	4b06      	ldr	r3, [pc, #24]	; (8004424 <cmr_gpioPinInit+0x68>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	429a      	cmp	r2, r3
 8004412:	d3e1      	bcc.n	80043d8 <cmr_gpioPinInit+0x1c>
        );
    }
}
 8004414:	bf00      	nop
 8004416:	bf00      	nop
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	2002f244 	.word	0x2002f244
 8004424:	2002f248 	.word	0x2002f248

08004428 <cmr_gpioWrite>:
 * @brief Writes a value to an output GPIO pin.
 *
 * @param pin The pin to write to.
 * @param value The value to write (zero for off; non-zero for on).
 */
void cmr_gpioWrite(size_t pin, int value) {
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
    configASSERT(pin < cmr_gpioPinConfigsLen);
 8004432:	4b18      	ldr	r3, [pc, #96]	; (8004494 <cmr_gpioWrite+0x6c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	429a      	cmp	r2, r3
 800443a:	d303      	bcc.n	8004444 <cmr_gpioWrite+0x1c>
 800443c:	214f      	movs	r1, #79	; 0x4f
 800443e:	4816      	ldr	r0, [pc, #88]	; (8004498 <cmr_gpioWrite+0x70>)
 8004440:	f000 fbed 	bl	8004c1e <cmr_panic>

    const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[pin];
 8004444:	4b15      	ldr	r3, [pc, #84]	; (800449c <cmr_gpioWrite+0x74>)
 8004446:	6819      	ldr	r1, [r3, #0]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	4613      	mov	r3, r2
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	4413      	add	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	440b      	add	r3, r1
 8004454:	60fb      	str	r3, [r7, #12]
    configASSERT(
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d007      	beq.n	800446e <cmr_gpioWrite+0x46>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b11      	cmp	r3, #17
 8004464:	d003      	beq.n	800446e <cmr_gpioWrite+0x46>
 8004466:	2152      	movs	r1, #82	; 0x52
 8004468:	480d      	ldr	r0, [pc, #52]	; (80044a0 <cmr_gpioWrite+0x78>)
 800446a:	f000 fbd8 	bl	8004c1e <cmr_panic>
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_PP) ||
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_OD)
    );

    HAL_GPIO_WritePin(
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6818      	ldr	r0, [r3, #0]
        pinConfig->port, pinConfig->init.Pin,
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	685b      	ldr	r3, [r3, #4]
    HAL_GPIO_WritePin(
 8004476:	b299      	uxth	r1, r3
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	bf14      	ite	ne
 800447e:	2301      	movne	r3, #1
 8004480:	2300      	moveq	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	461a      	mov	r2, r3
 8004486:	f004 feff 	bl	8009288 <HAL_GPIO_WritePin>
        value ? GPIO_PIN_SET : GPIO_PIN_RESET
    );
}
 800448a:	bf00      	nop
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	2002f248 	.word	0x2002f248
 8004498:	0800c8e4 	.word	0x0800c8e4
 800449c:	2002f244 	.word	0x2002f244
 80044a0:	0800c938 	.word	0x0800c938

080044a4 <cmr_gpioToggle>:
/**
 * @brief Toggles an output GPIO pin's value.
 *
 * @param pin The pin to toggle.
 */
void cmr_gpioToggle(size_t pin) {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
    configASSERT(pin < cmr_gpioPinConfigsLen);
 80044ac:	4b15      	ldr	r3, [pc, #84]	; (8004504 <cmr_gpioToggle+0x60>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d303      	bcc.n	80044be <cmr_gpioToggle+0x1a>
 80044b6:	2163      	movs	r1, #99	; 0x63
 80044b8:	4813      	ldr	r0, [pc, #76]	; (8004508 <cmr_gpioToggle+0x64>)
 80044ba:	f000 fbb0 	bl	8004c1e <cmr_panic>

    const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[pin];
 80044be:	4b13      	ldr	r3, [pc, #76]	; (800450c <cmr_gpioToggle+0x68>)
 80044c0:	6819      	ldr	r1, [r3, #0]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	4413      	add	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	440b      	add	r3, r1
 80044ce:	60fb      	str	r3, [r7, #12]
    configASSERT(
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d007      	beq.n	80044e8 <cmr_gpioToggle+0x44>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2b11      	cmp	r3, #17
 80044de:	d003      	beq.n	80044e8 <cmr_gpioToggle+0x44>
 80044e0:	2166      	movs	r1, #102	; 0x66
 80044e2:	480b      	ldr	r0, [pc, #44]	; (8004510 <cmr_gpioToggle+0x6c>)
 80044e4:	f000 fb9b 	bl	8004c1e <cmr_panic>
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_PP) ||
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_OD)
    );

    HAL_GPIO_TogglePin(pinConfig->port, pinConfig->init.Pin);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	4619      	mov	r1, r3
 80044f4:	4610      	mov	r0, r2
 80044f6:	f004 fee0 	bl	80092ba <HAL_GPIO_TogglePin>
}
 80044fa:	bf00      	nop
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	2002f248 	.word	0x2002f248
 8004508:	0800c8e4 	.word	0x0800c8e4
 800450c:	2002f244 	.word	0x2002f244
 8004510:	0800c938 	.word	0x0800c938

08004514 <cmr_gpioRead>:
/**
 * @brief Reads a value from a GPIO pin.
 *
 * @return 0 if the pin was off; otherwise 1.
 */
int cmr_gpioRead(size_t pin) {
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
    configASSERT(pin < cmr_gpioPinConfigsLen);
 800451c:	4b13      	ldr	r3, [pc, #76]	; (800456c <cmr_gpioRead+0x58>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	429a      	cmp	r2, r3
 8004524:	d303      	bcc.n	800452e <cmr_gpioRead+0x1a>
 8004526:	2174      	movs	r1, #116	; 0x74
 8004528:	4811      	ldr	r0, [pc, #68]	; (8004570 <cmr_gpioRead+0x5c>)
 800452a:	f000 fb78 	bl	8004c1e <cmr_panic>

    const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[pin];
 800452e:	4b11      	ldr	r3, [pc, #68]	; (8004574 <cmr_gpioRead+0x60>)
 8004530:	6819      	ldr	r1, [r3, #0]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	4613      	mov	r3, r2
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	4413      	add	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	440b      	add	r3, r1
 800453e:	60fb      	str	r3, [r7, #12]
    GPIO_PinState state = HAL_GPIO_ReadPin(
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681a      	ldr	r2, [r3, #0]
        pinConfig->port, pinConfig->init.Pin
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	685b      	ldr	r3, [r3, #4]
    GPIO_PinState state = HAL_GPIO_ReadPin(
 8004548:	b29b      	uxth	r3, r3
 800454a:	4619      	mov	r1, r3
 800454c:	4610      	mov	r0, r2
 800454e:	f004 fe83 	bl	8009258 <HAL_GPIO_ReadPin>
 8004552:	4603      	mov	r3, r0
 8004554:	72fb      	strb	r3, [r7, #11]
    );
    if (state == GPIO_PIN_RESET) {
 8004556:	7afb      	ldrb	r3, [r7, #11]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <cmr_gpioRead+0x4c>
        return 0;
 800455c:	2300      	movs	r3, #0
 800455e:	e000      	b.n	8004562 <cmr_gpioRead+0x4e>
    }

    return 1;
 8004560:	2301      	movs	r3, #1
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	2002f248 	.word	0x2002f248
 8004570:	0800c8e4 	.word	0x0800c8e4
 8004574:	2002f244 	.word	0x2002f244

08004578 <I2C1_EV_IRQHandler>:
static cmr_i2cDevice_t cmr_i2cDevices[2];

/**
 * @brief I2C interrupt handler.
 */
void I2C1_EV_IRQHandler(void) {
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
    HAL_I2C_EV_IRQHandler(cmr_i2cDevices[0].handle);
 800457c:	4b03      	ldr	r3, [pc, #12]	; (800458c <I2C1_EV_IRQHandler+0x14>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f005 fa43 	bl	8009a0c <HAL_I2C_EV_IRQHandler>
}
 8004586:	bf00      	nop
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	2002f24c 	.word	0x2002f24c

08004590 <I2C2_EV_IRQHandler>:

/**
 * @brief I2C interrupt handler.
 */
void I2C2_EV_IRQHandler(void) {
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
    HAL_I2C_EV_IRQHandler(cmr_i2cDevices[1].handle);
 8004594:	4b03      	ldr	r3, [pc, #12]	; (80045a4 <I2C2_EV_IRQHandler+0x14>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	4618      	mov	r0, r3
 800459a:	f005 fa37 	bl	8009a0c <HAL_I2C_EV_IRQHandler>
}
 800459e:	bf00      	nop
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	2002f24c 	.word	0x2002f24c

080045a8 <I2C1_ER_IRQHandler>:
/**
 * @brief I2C interrupt handler.
 */
void I2C1_ER_IRQHandler(void) {
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
    HAL_I2C_ER_IRQHandler(cmr_i2cDevices[0].handle);
 80045ac:	4b03      	ldr	r3, [pc, #12]	; (80045bc <I2C1_ER_IRQHandler+0x14>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f005 fb91 	bl	8009cd8 <HAL_I2C_ER_IRQHandler>
}
 80045b6:	bf00      	nop
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	2002f24c 	.word	0x2002f24c

080045c0 <I2C2_ER_IRQHandler>:

/**
 * @brief I2C interrupt handler.
 */
void I2C2_ER_IRQHandler(void) {
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
    HAL_I2C_ER_IRQHandler(cmr_i2cDevices[1].handle);
 80045c4:	4b03      	ldr	r3, [pc, #12]	; (80045d4 <I2C2_ER_IRQHandler+0x14>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f005 fb85 	bl	8009cd8 <HAL_I2C_ER_IRQHandler>
}
 80045ce:	bf00      	nop
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	2002f24c 	.word	0x2002f24c

080045d8 <cmr_i2cDoneCallback>:
 *
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL I2C handle.
 */
static void cmr_i2cDoneCallback(I2C_HandleTypeDef *handle, uint32_t error) {
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
    char *addr = (void *) handle;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	617b      	str	r3, [r7, #20]
    cmr_i2c_t *i2c = (void *) (addr - offsetof(cmr_i2c_t, handle));
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	613b      	str	r3, [r7, #16]

    i2c->error = error;
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

    // Indicate completion.
    BaseType_t higherWoken;
    if (xSemaphoreGiveFromISR(i2c->doneSem, &higherWoken) != pdTRUE) {
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80045f8:	f107 020c 	add.w	r2, r7, #12
 80045fc:	4611      	mov	r1, r2
 80045fe:	4618      	mov	r0, r3
 8004600:	f001 fa54 	bl	8005aac <xQueueGiveFromISR>
 8004604:	4603      	mov	r3, r0
 8004606:	2b01      	cmp	r3, #1
 8004608:	d002      	beq.n	8004610 <cmr_i2cDoneCallback+0x38>
        cmr_panic("I2C done semaphore released more than once!");
 800460a:	4809      	ldr	r0, [pc, #36]	; (8004630 <cmr_i2cDoneCallback+0x58>)
 800460c:	f000 fb07 	bl	8004c1e <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d007      	beq.n	8004626 <cmr_i2cDoneCallback+0x4e>
 8004616:	4b07      	ldr	r3, [pc, #28]	; (8004634 <cmr_i2cDoneCallback+0x5c>)
 8004618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	f3bf 8f6f 	isb	sy
}
 8004626:	bf00      	nop
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	0800ca24 	.word	0x0800ca24
 8004634:	e000ed04 	.word	0xe000ed04

08004638 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *handle) {
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
    cmr_i2cDoneCallback(handle, 0);
 8004640:	2100      	movs	r1, #0
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7ff ffc8 	bl	80045d8 <cmr_i2cDoneCallback>
}
 8004648:	bf00      	nop
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *handle) {
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
    cmr_i2cDoneCallback(handle, 0);
 8004658:	2100      	movs	r1, #0
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7ff ffbc 	bl	80045d8 <cmr_i2cDoneCallback>
}
 8004660:	bf00      	nop
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *handle) {
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
    uint32_t error = HAL_I2C_GetError(handle);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f005 fc2e 	bl	8009ed2 <HAL_I2C_GetError>
 8004676:	60f8      	str	r0, [r7, #12]
	cmr_i2cDoneCallback(handle, error);
 8004678:	68f9      	ldr	r1, [r7, #12]
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff ffac 	bl	80045d8 <cmr_i2cDoneCallback>
}
 8004680:	bf00      	nop
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <cmr_i2cDmaInit>:
    DMA_Stream_TypeDef *txDmaStream, uint32_t txDmaChannel,
    DMA_Stream_TypeDef *rxDmaStream, uint32_t rxDmaChannel,
    uint32_t clockSpeed, uint32_t ownAddr,
    GPIO_TypeDef *i2cClkPort, uint32_t i2cClkPin,
    GPIO_TypeDef *i2cDataPort, uint32_t i2cDataPin
) {
 8004688:	b590      	push	{r4, r7, lr}
 800468a:	b0e9      	sub	sp, #420	; 0x1a4
 800468c:	af02      	add	r7, sp, #8
 800468e:	f507 74cc 	add.w	r4, r7, #408	; 0x198
 8004692:	f5a4 74c6 	sub.w	r4, r4, #396	; 0x18c
 8004696:	6020      	str	r0, [r4, #0]
 8004698:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800469c:	f5a0 70c8 	sub.w	r0, r0, #400	; 0x190
 80046a0:	6001      	str	r1, [r0, #0]
 80046a2:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 80046a6:	f5a1 71ca 	sub.w	r1, r1, #404	; 0x194
 80046aa:	600a      	str	r2, [r1, #0]
 80046ac:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80046b0:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 80046b4:	6013      	str	r3, [r2, #0]
    *i2c = (cmr_i2c_t) {
 80046b6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80046ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f44f 73ba 	mov.w	r3, #372	; 0x174
 80046c6:	461a      	mov	r2, r3
 80046c8:	2100      	movs	r1, #0
 80046ca:	f007 ff0d 	bl	800c4e8 <memset>
 80046ce:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80046d2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80046dc:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80046e8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80046f2:	605a      	str	r2, [r3, #4]
 80046f4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80046f8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004702:	60da      	str	r2, [r3, #12]
 8004704:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004708:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004712:	611a      	str	r2, [r3, #16]
 8004714:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004718:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8004722:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 8004726:	6812      	ldr	r2, [r2, #0]
 8004728:	655a      	str	r2, [r3, #84]	; 0x54
 800472a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800472e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8004738:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	659a      	str	r2, [r3, #88]	; 0x58
 8004740:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004744:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2240      	movs	r2, #64	; 0x40
 800474c:	65da      	str	r2, [r3, #92]	; 0x5c
 800474e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004752:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800475c:	665a      	str	r2, [r3, #100]	; 0x64
 800475e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004762:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2203      	movs	r2, #3
 800476a:	67da      	str	r2, [r3, #124]	; 0x7c
 800476c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004770:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800477a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800477e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004782:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800478c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8004790:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004794:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800479e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 80047a2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80047a6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2203      	movs	r2, #3
 80047ae:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80047b2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80047b6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80047c0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80047c4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80047c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80047d2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80047d6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80047da:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80047e4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 80047e8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80047ec:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 80047f6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
            }
        }

    };

    i2c->doneSem = xSemaphoreCreateBinaryStatic(&(i2c->doneSemBuf));
 80047fa:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80047fe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8004808:	2203      	movs	r2, #3
 800480a:	9200      	str	r2, [sp, #0]
 800480c:	2200      	movs	r2, #0
 800480e:	2100      	movs	r1, #0
 8004810:	2001      	movs	r0, #1
 8004812:	f001 f8a5 	bl	8005960 <xQueueGenericCreateStatic>
 8004816:	4602      	mov	r2, r0
 8004818:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800481c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    configASSERT(i2c->doneSem != NULL);
 8004826:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800482a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8004834:	2b00      	cmp	r3, #0
 8004836:	d104      	bne.n	8004842 <cmr_i2cDmaInit+0x1ba>
 8004838:	f44f 7192 	mov.w	r1, #292	; 0x124
 800483c:	486f      	ldr	r0, [pc, #444]	; (80049fc <cmr_i2cDmaInit+0x374>)
 800483e:	f000 f9ee 	bl	8004c1e <cmr_panic>

    cmr_rccGPIOClockEnable(i2cClkPort);
 8004842:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8004846:	f000 f9f6 	bl	8004c36 <cmr_rccGPIOClockEnable>
    cmr_rccGPIOClockEnable(i2cDataPort);
 800484a:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 800484e:	f000 f9f2 	bl	8004c36 <cmr_rccGPIOClockEnable>
    cmr_rccI2CClockEnable(instance);
 8004852:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004856:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	f000 fa0c 	bl	8004c78 <cmr_rccI2CClockEnable>

    if (HAL_I2C_Init(&(i2c->handle)) != HAL_OK) {
 8004860:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004864:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f004 fd64 	bl	8009338 <HAL_I2C_Init>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <cmr_i2cDmaInit+0x1f4>
        cmr_panic("HAL_I2C_Init() failed!");
 8004876:	4862      	ldr	r0, [pc, #392]	; (8004a00 <cmr_i2cDmaInit+0x378>)
 8004878:	f000 f9d1 	bl	8004c1e <cmr_panic>
    }

    // TODO: Init GPIO with CMR drivers instead of HAL
    GPIO_InitTypeDef pinConfig = {
 800487c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004880:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004884:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800488e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004892:	2212      	movs	r2, #18
 8004894:	605a      	str	r2, [r3, #4]
 8004896:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800489a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800489e:	2201      	movs	r2, #1
 80048a0:	609a      	str	r2, [r3, #8]
 80048a2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80048a6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80048aa:	2202      	movs	r2, #2
 80048ac:	60da      	str	r2, [r3, #12]
 80048ae:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80048b2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80048b6:	2204      	movs	r2, #4
 80048b8:	611a      	str	r2, [r3, #16]
        .Pull = GPIO_PULLUP,
        .Speed = GPIO_SPEED_FREQ_HIGH,
        .Alternate = GPIO_AF4_I2C1
    };

    HAL_GPIO_Init(i2cClkPort, &pinConfig);
 80048ba:	f107 0310 	add.w	r3, r7, #16
 80048be:	4619      	mov	r1, r3
 80048c0:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 80048c4:	f004 fb34 	bl	8008f30 <HAL_GPIO_Init>
    pinConfig.Pin = i2cDataPin;
 80048c8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80048cc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80048d0:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 80048d4:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(i2cDataPort, &pinConfig);
 80048d6:	f107 0310 	add.w	r3, r7, #16
 80048da:	4619      	mov	r1, r3
 80048dc:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 80048e0:	f004 fb26 	bl	8008f30 <HAL_GPIO_Init>

    cmr_dmaInit(&(i2c->dmatx_handle));
 80048e4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80048e8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3354      	adds	r3, #84	; 0x54
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fe ff49 	bl	8003788 <cmr_dmaInit>
    __HAL_LINKDMA(&i2c->handle,hdmatx,i2c->dmatx_handle);
 80048f6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80048fa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8004904:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004908:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	635a      	str	r2, [r3, #52]	; 0x34
 8004910:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004914:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800491e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    cmr_dmaInit(&(i2c->dmarx_handle));
 8004928:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800492c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	33b4      	adds	r3, #180	; 0xb4
 8004934:	4618      	mov	r0, r3
 8004936:	f7fe ff27 	bl	8003788 <cmr_dmaInit>
    __HAL_LINKDMA(&i2c->handle,hdmarx,i2c->dmarx_handle);
 800493a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800493e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8004948:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800494c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	639a      	str	r2, [r3, #56]	; 0x38
 8004954:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004958:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004962:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

    if (instance == I2C1) {
 800496c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004970:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a23      	ldr	r2, [pc, #140]	; (8004a04 <cmr_i2cDmaInit+0x37c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d117      	bne.n	80049ac <cmr_i2cDmaInit+0x324>
        cmr_i2cDevices[0].handle = &(i2c->handle);
 800497c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004980:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a20      	ldr	r2, [pc, #128]	; (8004a08 <cmr_i2cDmaInit+0x380>)
 8004988:	6013      	str	r3, [r2, #0]
        // HAL_NVIC_SetPriority(I2C1_DMA_IRQn, 7, 0);
        // HAL_NVIC_EnableIRQ(I2C1_DMA_IRQn);
        HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800498a:	2200      	movs	r2, #0
 800498c:	2105      	movs	r1, #5
 800498e:	201f      	movs	r0, #31
 8004990:	f003 fee3 	bl	800875a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004994:	201f      	movs	r0, #31
 8004996:	f003 fefc 	bl	8008792 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800499a:	2200      	movs	r2, #0
 800499c:	2105      	movs	r1, #5
 800499e:	2020      	movs	r0, #32
 80049a0:	f003 fedb 	bl	800875a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80049a4:	2020      	movs	r0, #32
 80049a6:	f003 fef4 	bl	8008792 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
        HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
    } else {
        cmr_panic("Unexpected I2C instance!");
    }
}
 80049aa:	e022      	b.n	80049f2 <cmr_i2cDmaInit+0x36a>
    } else if (instance == I2C2) {
 80049ac:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80049b0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a15      	ldr	r2, [pc, #84]	; (8004a0c <cmr_i2cDmaInit+0x384>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d117      	bne.n	80049ec <cmr_i2cDmaInit+0x364>
    	cmr_i2cDevices[1].handle = &(i2c->handle);
 80049bc:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80049c0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a10      	ldr	r2, [pc, #64]	; (8004a08 <cmr_i2cDmaInit+0x380>)
 80049c8:	6053      	str	r3, [r2, #4]
        HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80049ca:	2200      	movs	r2, #0
 80049cc:	2105      	movs	r1, #5
 80049ce:	2021      	movs	r0, #33	; 0x21
 80049d0:	f003 fec3 	bl	800875a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80049d4:	2021      	movs	r0, #33	; 0x21
 80049d6:	f003 fedc 	bl	8008792 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 80049da:	2200      	movs	r2, #0
 80049dc:	2105      	movs	r1, #5
 80049de:	2022      	movs	r0, #34	; 0x22
 80049e0:	f003 febb 	bl	800875a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80049e4:	2022      	movs	r0, #34	; 0x22
 80049e6:	f003 fed4 	bl	8008792 <HAL_NVIC_EnableIRQ>
}
 80049ea:	e002      	b.n	80049f2 <cmr_i2cDmaInit+0x36a>
        cmr_panic("Unexpected I2C instance!");
 80049ec:	4808      	ldr	r0, [pc, #32]	; (8004a10 <cmr_i2cDmaInit+0x388>)
 80049ee:	f000 f916 	bl	8004c1e <cmr_panic>
}
 80049f2:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd90      	pop	{r4, r7, pc}
 80049fa:	bf00      	nop
 80049fc:	0800ca68 	.word	0x0800ca68
 8004a00:	0800ca50 	.word	0x0800ca50
 8004a04:	40005400 	.word	0x40005400
 8004a08:	2002f24c 	.word	0x2002f24c
 8004a0c:	40005800 	.word	0x40005800
 8004a10:	0800cab4 	.word	0x0800cab4

08004a14 <cmr_i2cDmaTX>:
  * @param timeout_ms Amount of time to wait in milliseconds.
  *
  * @retval 0 upon success, or otherwise a negative error code
  */
int cmr_i2cDmaTX(cmr_i2c_t *i2c, uint16_t devAddr, uint8_t *data,
              size_t dataLength, uint32_t timeout_ms) {
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	607a      	str	r2, [r7, #4]
 8004a1e:	603b      	str	r3, [r7, #0]
 8004a20:	460b      	mov	r3, r1
 8004a22:	817b      	strh	r3, [r7, #10]
    // IMPORTANT: If we don't check this and an existing transaction is
    // going on, very bad things happen
	configASSERT(HAL_I2C_GetState(&(i2c->handle)) == HAL_I2C_STATE_READY);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f005 fa45 	bl	8009eb6 <HAL_I2C_GetState>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d004      	beq.n	8004a3c <cmr_i2cDmaTX+0x28>
 8004a32:	f240 1169 	movw	r1, #361	; 0x169
 8004a36:	4832      	ldr	r0, [pc, #200]	; (8004b00 <cmr_i2cDmaTX+0xec>)
 8004a38:	f000 f8f1 	bl	8004c1e <cmr_panic>
	configASSERT(i2c->handle.hdmatx->State == HAL_DMA_STATE_READY);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d004      	beq.n	8004a54 <cmr_i2cDmaTX+0x40>
 8004a4a:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8004a4e:	482d      	ldr	r0, [pc, #180]	; (8004b04 <cmr_i2cDmaTX+0xf0>)
 8004a50:	f000 f8e5 	bl	8004c1e <cmr_panic>
	configASSERT(i2c->handle.hdmarx->State == HAL_DMA_STATE_READY);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d004      	beq.n	8004a6c <cmr_i2cDmaTX+0x58>
 8004a62:	f240 116b 	movw	r1, #363	; 0x16b
 8004a66:	4828      	ldr	r0, [pc, #160]	; (8004b08 <cmr_i2cDmaTX+0xf4>)
 8004a68:	f000 f8d9 	bl	8004c1e <cmr_panic>
    // Shift the address by 1 per HAL library suggestion
    HAL_StatusTypeDef txStatus = HAL_I2C_Master_Transmit_DMA(
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	897b      	ldrh	r3, [r7, #10]
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	b299      	uxth	r1, r3
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	f004 fd9b 	bl	80095b4 <HAL_I2C_Master_Transmit_DMA>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	75fb      	strb	r3, [r7, #23]
        &(i2c->handle), devAddr << 1, data, dataLength 
    );

    if (txStatus != HAL_OK) {
 8004a82:	7dfb      	ldrb	r3, [r7, #23]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d011      	beq.n	8004aac <cmr_i2cDmaTX+0x98>
    	if (__HAL_I2C_GET_FLAG(&(i2c->handle), I2C_FLAG_BUSY) != RESET) {
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d107      	bne.n	8004aa6 <cmr_i2cDmaTX+0x92>
    		//I2C_ClearBusyFlagErratum(i2c, 1000);
    		SET_BIT(i2c->handle.Instance->CR1, I2C_CR1_STOP);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aa4:	601a      	str	r2, [r3, #0]
    		//I2C_WaitOnFlagUntilTimeout(&(i2c->handle), I2C_FLAG_BUSY, SET, 1000);
    	}
        return -1;
 8004aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aaa:	e024      	b.n	8004af6 <cmr_i2cDmaTX+0xe2>
    }

    if (xSemaphoreTake(i2c->doneSem, timeout_ms) != pdTRUE) {
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	6a3a      	ldr	r2, [r7, #32]
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	f001 f872 	bl	8005ba0 <xQueueGenericReceive>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d002      	beq.n	8004ac8 <cmr_i2cDmaTX+0xb4>
        return -2;
 8004ac2:	f06f 0301 	mvn.w	r3, #1
 8004ac6:	e016      	b.n	8004af6 <cmr_i2cDmaTX+0xe2>
    }
    configASSERT(HAL_I2C_GetState(&(i2c->handle)) == HAL_I2C_STATE_READY);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f005 f9f3 	bl	8009eb6 <HAL_I2C_GetState>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b20      	cmp	r3, #32
 8004ad4:	d004      	beq.n	8004ae0 <cmr_i2cDmaTX+0xcc>
 8004ad6:	f240 117d 	movw	r1, #381	; 0x17d
 8004ada:	4809      	ldr	r0, [pc, #36]	; (8004b00 <cmr_i2cDmaTX+0xec>)
 8004adc:	f000 f89f 	bl	8004c1e <cmr_panic>

    if (i2c->error != 0) {
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d004      	beq.n	8004af4 <cmr_i2cDmaTX+0xe0>
        return -((int)i2c->error);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004af0:	425b      	negs	r3, r3
 8004af2:	e000      	b.n	8004af6 <cmr_i2cDmaTX+0xe2>
    }

    return 0;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	0800cad0 	.word	0x0800cad0
 8004b04:	0800cb40 	.word	0x0800cb40
 8004b08:	0800cba8 	.word	0x0800cba8

08004b0c <cmr_i2cDmaRX>:
  * @param timeout_ms Amount of time to wait in milliseconds.
  *
  * @retval 0 upon success, or otherwise a negative error code
  */
int cmr_i2cDmaRX(cmr_i2c_t *i2c, uint16_t devAddr, uint8_t *data,
              size_t dataLength, uint32_t timeout_ms) {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	607a      	str	r2, [r7, #4]
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	817b      	strh	r3, [r7, #10]
    // IMPORTANT: If we don't check this and an existing transaction is
    // going on, very bad things happen
	configASSERT(HAL_I2C_GetState(&(i2c->handle)) == HAL_I2C_STATE_READY);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f005 f9c9 	bl	8009eb6 <HAL_I2C_GetState>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b20      	cmp	r3, #32
 8004b28:	d004      	beq.n	8004b34 <cmr_i2cDmaRX+0x28>
 8004b2a:	f240 1195 	movw	r1, #405	; 0x195
 8004b2e:	4827      	ldr	r0, [pc, #156]	; (8004bcc <cmr_i2cDmaRX+0xc0>)
 8004b30:	f000 f875 	bl	8004c1e <cmr_panic>
	configASSERT(i2c->handle.hdmatx->State == HAL_DMA_STATE_READY);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d004      	beq.n	8004b4c <cmr_i2cDmaRX+0x40>
 8004b42:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8004b46:	4822      	ldr	r0, [pc, #136]	; (8004bd0 <cmr_i2cDmaRX+0xc4>)
 8004b48:	f000 f869 	bl	8004c1e <cmr_panic>
	configASSERT(i2c->handle.hdmarx->State == HAL_DMA_STATE_READY);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d004      	beq.n	8004b64 <cmr_i2cDmaRX+0x58>
 8004b5a:	f240 1197 	movw	r1, #407	; 0x197
 8004b5e:	481d      	ldr	r0, [pc, #116]	; (8004bd4 <cmr_i2cDmaRX+0xc8>)
 8004b60:	f000 f85d 	bl	8004c1e <cmr_panic>
    // Shift the address by 1 per HAL library suggestion
    HAL_StatusTypeDef rxStatus = HAL_I2C_Master_Receive_DMA(
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	897b      	ldrh	r3, [r7, #10]
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	b299      	uxth	r1, r3
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	f004 fe35 	bl	80097e0 <HAL_I2C_Master_Receive_DMA>
 8004b76:	4603      	mov	r3, r0
 8004b78:	75fb      	strb	r3, [r7, #23]
//    		//I2C_WaitOnFlagUntilTimeout(&(i2c->handle), I2C_FLAG_BUSY, SET, 1000);
//    	}
//        return -1;
//    }

    if (xSemaphoreTake(i2c->doneSem, timeout_ms) != pdTRUE) {
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8004b80:	2300      	movs	r3, #0
 8004b82:	6a3a      	ldr	r2, [r7, #32]
 8004b84:	2100      	movs	r1, #0
 8004b86:	f001 f80b 	bl	8005ba0 <xQueueGenericReceive>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d002      	beq.n	8004b96 <cmr_i2cDmaRX+0x8a>
        return -2;
 8004b90:	f06f 0301 	mvn.w	r3, #1
 8004b94:	e016      	b.n	8004bc4 <cmr_i2cDmaRX+0xb8>
    }
    configASSERT(HAL_I2C_GetState(&(i2c->handle)) == HAL_I2C_STATE_READY);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f005 f98c 	bl	8009eb6 <HAL_I2C_GetState>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d004      	beq.n	8004bae <cmr_i2cDmaRX+0xa2>
 8004ba4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004ba8:	4808      	ldr	r0, [pc, #32]	; (8004bcc <cmr_i2cDmaRX+0xc0>)
 8004baa:	f000 f838 	bl	8004c1e <cmr_panic>

    if (i2c->error != 0) {
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d004      	beq.n	8004bc2 <cmr_i2cDmaRX+0xb6>
        return -((int)i2c->error);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004bbe:	425b      	negs	r3, r3
 8004bc0:	e000      	b.n	8004bc4 <cmr_i2cDmaRX+0xb8>
    }

    return 0;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	0800cad0 	.word	0x0800cad0
 8004bd0:	0800cb40 	.word	0x0800cb40
 8004bd4:	0800cba8 	.word	0x0800cba8

08004bd8 <SysTick_Handler>:
extern void xPortSysTickHandler(void);

/**
 * @brief System tick interrupt handler.
 */
void SysTick_Handler(void) {
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
    HAL_IncTick();  // Report tick to HAL.
 8004bdc:	f002 fae4 	bl	80071a8 <HAL_IncTick>

    if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED) {
 8004be0:	f001 ff7c 	bl	8006adc <xTaskGetSchedulerState>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d002      	beq.n	8004bf0 <SysTick_Handler+0x18>
        return;
    }

    xPortSysTickHandler();  // Invoke FreeRTOS tick handler.
 8004bea:	f002 fa05 	bl	8006ff8 <xPortSysTickHandler>
 8004bee:	e000      	b.n	8004bf2 <SysTick_Handler+0x1a>
        return;
 8004bf0:	bf00      	nop
}
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <NMI_Handler>:

/**
 * @brief Non-maskable interrupt handler.
 */
void NMI_Handler(void) {
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
    // Nothing to do.
}
 8004bf8:	bf00      	nop
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <DebugMon_Handler>:

/**
 * @brief Debug monitor exception handler.
 */
void DebugMon_Handler(void) {
 8004c02:	b480      	push	{r7}
 8004c04:	af00      	add	r7, sp, #0
    // Nothing to do.
}
 8004c06:	bf00      	nop
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <cmr_panicSetup>:
 * @brief Default pre-panic setup implementation.
 *
 * Nothing happens by default; this should be overridden if custom behavior is
 * desired.
 */
void cmr_panicSetup(void) {
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
    // Nothing to do.
}
 8004c14:	bf00      	nop
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <cmr_panic>:
 * @param fmt The formatting string.
 * @param ... Additional arguments for formatting.
 *
 * @return Does not return.
 */
void cmr_panic(const char *fmt, ...) {
 8004c1e:	b40f      	push	{r0, r1, r2, r3}
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
    (void) fmt;

    cmr_panicSetup();
 8004c24:	f7ff fff4 	bl	8004c10 <cmr_panicSetup>

    while (1) {
        continue;
 8004c28:	e7fe      	b.n	8004c28 <cmr_panic+0xa>

08004c2a <cmr_rccSystemClockEnable>:
 * @brief Configures the system and peripheral clocks using external oscillator
 *
 * @note Generated by STM32Cube. Sets System Clock to 96 MHz, with only APB1
 * Peripheral Clocks at 48 MHz (APB1 Timer Clocks are still 96 MHz).
 */
void cmr_rccSystemClockEnable(void)  {
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	af00      	add	r7, sp, #0
    _platform_rccSystemClockEnable();
 8004c2e:	f7ff f91d 	bl	8003e6c <_platform_rccSystemClockEnable>
}
 8004c32:	bf00      	nop
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <cmr_rccGPIOClockEnable>:
/**
 * @brief Enables the specified GPIO port's clock.
 *
 * @param port The GPIO port.
 */
void cmr_rccGPIOClockEnable(GPIO_TypeDef *port) {
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b082      	sub	sp, #8
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
    _platform_rccGPIOClockEnable(port);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7ff f984 	bl	8003f4c <_platform_rccGPIOClockEnable>
}
 8004c44:	bf00      	nop
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <cmr_rccADCClockEnable>:
/**
 * @brief Enables the specified ADC's clock.
 *
 * @param instance The HAL ADC instance.
 */
void cmr_rccADCClockEnable(ADC_TypeDef *instance) {
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
    _platform_rccADCClockEnable(instance);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f7ff fa79 	bl	800414c <_platform_rccADCClockEnable>
}
 8004c5a:	bf00      	nop
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <cmr_rccCANClockEnable>:
/**
 * @brief Enables the specified CAN interface's clock.
 *
 * @param instance The HAL CAN instance.
 */
void cmr_rccCANClockEnable(CAN_TypeDef *instance) {
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b082      	sub	sp, #8
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
    _platform_rccCANClockEnable(instance);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff fb16 	bl	800429c <_platform_rccCANClockEnable>
}
 8004c70:	bf00      	nop
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <cmr_rccI2CClockEnable>:
/**
 * @brief Enables the specified I2C port's clock.
 *
 * @param instance The HAL I2C instance.
 */
void cmr_rccI2CClockEnable(I2C_TypeDef *instance) {
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
    switch ((uintptr_t) instance) {
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a20      	ldr	r2, [pc, #128]	; (8004d04 <cmr_rccI2CClockEnable+0x8c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d027      	beq.n	8004cd8 <cmr_rccI2CClockEnable+0x60>
 8004c88:	4a1e      	ldr	r2, [pc, #120]	; (8004d04 <cmr_rccI2CClockEnable+0x8c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d833      	bhi.n	8004cf6 <cmr_rccI2CClockEnable+0x7e>
 8004c8e:	4a1e      	ldr	r2, [pc, #120]	; (8004d08 <cmr_rccI2CClockEnable+0x90>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d003      	beq.n	8004c9c <cmr_rccI2CClockEnable+0x24>
 8004c94:	4a1d      	ldr	r2, [pc, #116]	; (8004d0c <cmr_rccI2CClockEnable+0x94>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00f      	beq.n	8004cba <cmr_rccI2CClockEnable+0x42>
            break;
        case I2C3_BASE:
            __HAL_RCC_I2C3_CLK_ENABLE();
            break;
    }
}
 8004c9a:	e02c      	b.n	8004cf6 <cmr_rccI2CClockEnable+0x7e>
            __HAL_RCC_I2C1_CLK_ENABLE();
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	4b1b      	ldr	r3, [pc, #108]	; (8004d10 <cmr_rccI2CClockEnable+0x98>)
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca4:	4a1a      	ldr	r2, [pc, #104]	; (8004d10 <cmr_rccI2CClockEnable+0x98>)
 8004ca6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004caa:	6413      	str	r3, [r2, #64]	; 0x40
 8004cac:	4b18      	ldr	r3, [pc, #96]	; (8004d10 <cmr_rccI2CClockEnable+0x98>)
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	697b      	ldr	r3, [r7, #20]
            break;
 8004cb8:	e01d      	b.n	8004cf6 <cmr_rccI2CClockEnable+0x7e>
            __HAL_RCC_I2C2_CLK_ENABLE();
 8004cba:	2300      	movs	r3, #0
 8004cbc:	613b      	str	r3, [r7, #16]
 8004cbe:	4b14      	ldr	r3, [pc, #80]	; (8004d10 <cmr_rccI2CClockEnable+0x98>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	4a13      	ldr	r2, [pc, #76]	; (8004d10 <cmr_rccI2CClockEnable+0x98>)
 8004cc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cca:	4b11      	ldr	r3, [pc, #68]	; (8004d10 <cmr_rccI2CClockEnable+0x98>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cd2:	613b      	str	r3, [r7, #16]
 8004cd4:	693b      	ldr	r3, [r7, #16]
            break;
 8004cd6:	e00e      	b.n	8004cf6 <cmr_rccI2CClockEnable+0x7e>
            __HAL_RCC_I2C3_CLK_ENABLE();
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	4b0c      	ldr	r3, [pc, #48]	; (8004d10 <cmr_rccI2CClockEnable+0x98>)
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	4a0b      	ldr	r2, [pc, #44]	; (8004d10 <cmr_rccI2CClockEnable+0x98>)
 8004ce2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8004ce8:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <cmr_rccI2CClockEnable+0x98>)
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
            break;
 8004cf4:	bf00      	nop
}
 8004cf6:	bf00      	nop
 8004cf8:	371c      	adds	r7, #28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	40005c00 	.word	0x40005c00
 8004d08:	40005400 	.word	0x40005400
 8004d0c:	40005800 	.word	0x40005800
 8004d10:	40023800 	.word	0x40023800

08004d14 <cmr_sensorInit>:
 *
 * @note The sensor's public fields should already be filled in!
 *
 * @param sensor The sensor to initialize.
 */
static void cmr_sensorInit(cmr_sensor_t *sensor) {
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08a      	sub	sp, #40	; 0x28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
    configASSERT(sensor->readingMax >= sensor->readingMin);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d203      	bcs.n	8004d30 <cmr_sensorInit+0x1c>
 8004d28:	2114      	movs	r1, #20
 8004d2a:	482a      	ldr	r0, [pc, #168]	; (8004dd4 <cmr_sensorInit+0xc0>)
 8004d2c:	f7ff ff77 	bl	8004c1e <cmr_panic>

    // Calculate tolerance.
    const uint32_t readingRange = sensor->readingMax - sensor->readingMin;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	61bb      	str	r3, [r7, #24]
    uint32_t readingTolerance;
    // Prevent overflow.
    if (UINT32_MAX / sensor->outOfRange_pcnt < readingRange) {
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	2100      	movs	r1, #0
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	fba3 2302 	umull	r2, r3, r3, r2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d000      	beq.n	8004d4e <cmr_sensorInit+0x3a>
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	460b      	mov	r3, r1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00a      	beq.n	8004d6a <cmr_sensorInit+0x56>
        readingTolerance = (readingRange / 100) * sensor->outOfRange_pcnt;
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	4a20      	ldr	r2, [pc, #128]	; (8004dd8 <cmr_sensorInit+0xc4>)
 8004d58:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5c:	095b      	lsrs	r3, r3, #5
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6912      	ldr	r2, [r2, #16]
 8004d62:	fb02 f303 	mul.w	r3, r2, r3
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24
 8004d68:	e009      	b.n	8004d7e <cmr_sensorInit+0x6a>
    } else {
        readingTolerance = (readingRange * sensor->outOfRange_pcnt) / 100;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	fb02 f303 	mul.w	r3, r2, r3
 8004d74:	4a18      	ldr	r2, [pc, #96]	; (8004dd8 <cmr_sensorInit+0xc4>)
 8004d76:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7a:	095b      	lsrs	r3, r3, #5
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    // Calculate thresholds from tolerance.
    uint32_t readingUpper = sensor->readingMax + readingTolerance;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d84:	4413      	add	r3, r2
 8004d86:	623b      	str	r3, [r7, #32]
    if (readingUpper < sensor->readingMax) {
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	6a3a      	ldr	r2, [r7, #32]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d202      	bcs.n	8004d98 <cmr_sensorInit+0x84>
        readingUpper = UINT32_MAX;  // Overflow!
 8004d92:	f04f 33ff 	mov.w	r3, #4294967295
 8004d96:	623b      	str	r3, [r7, #32]
    }

    uint32_t readingLower = sensor->readingMin - readingTolerance;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	61fb      	str	r3, [r7, #28]
    if (readingLower > sensor->readingMin) {
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	69fa      	ldr	r2, [r7, #28]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d901      	bls.n	8004db0 <cmr_sensorInit+0x9c>
        readingLower = 0;  // Underflow!
 8004dac:	2300      	movs	r3, #0
 8004dae:	61fb      	str	r3, [r7, #28]
    }

    sensor->_ = (struct cmr_sensor_private) {
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a3a      	ldr	r2, [r7, #32]
 8004db4:	619a      	str	r2, [r3, #24]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69fa      	ldr	r2, [r7, #28]
 8004dba:	61da      	str	r2, [r3, #28]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	621a      	str	r2, [r3, #32]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        .readingUpper = readingUpper,
        .readingLower = readingLower,
        .value = 0,
        .error = CMR_SENSOR_ERR_NONE
    };
}
 8004dca:	bf00      	nop
 8004dcc:	3728      	adds	r7, #40	; 0x28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	0800cc10 	.word	0x0800cc10
 8004dd8:	51eb851f 	.word	0x51eb851f

08004ddc <cmr_sensorUpdate>:
/**
 * @brief Updates the sensor.
 *
 * @param sensor The sensor to sample.
 */
static void cmr_sensorUpdate(cmr_sensor_t *sensor) {
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
    uint32_t reading = sensor->sample(sensor);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	4798      	blx	r3
 8004dec:	60b8      	str	r0, [r7, #8]

    // Check if sensor has gone out-of-range.
    if (reading < sensor->_.readingLower || sensor->_.readingUpper < reading) {
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d304      	bcc.n	8004e02 <cmr_sensorUpdate+0x26>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d904      	bls.n	8004e0c <cmr_sensorUpdate+0x30>
        sensor->_.error = CMR_SENSOR_ERR_OUT_OF_RANGE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004e0a:	e003      	b.n	8004e14 <cmr_sensorUpdate+0x38>
    } else {
        sensor->_.error = CMR_SENSOR_ERR_NONE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }

    uint32_t value;
    if (sensor->conv != NULL) {
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d007      	beq.n	8004e2c <cmr_sensorUpdate+0x50>
        value = sensor->conv(sensor, reading);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	68b9      	ldr	r1, [r7, #8]
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	4798      	blx	r3
 8004e26:	4603      	mov	r3, r0
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	e001      	b.n	8004e30 <cmr_sensorUpdate+0x54>
    } else {
        value = reading;
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	60fb      	str	r3, [r7, #12]
    }

    sensor->_.value = value;
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	621a      	str	r2, [r3, #32]
}
 8004e36:	bf00      	nop
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <cmr_sensorListInit>:
 * @param sensorsLen The total number of sensors in the array.
 */
void cmr_sensorListInit(
    cmr_sensorList_t *list,
    cmr_sensor_t *sensors, size_t sensorsLen
) {
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b086      	sub	sp, #24
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < sensorsLen; i++) {
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	617b      	str	r3, [r7, #20]
 8004e4e:	e00d      	b.n	8004e6c <cmr_sensorListInit+0x2e>
        cmr_sensorInit(sensors + i);
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	4413      	add	r3, r2
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff ff57 	bl	8004d14 <cmr_sensorInit>
    for (size_t i = 0; i < sensorsLen; i++) {
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d3ed      	bcc.n	8004e50 <cmr_sensorListInit+0x12>
    }

    list->sensors = sensors;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	601a      	str	r2, [r3, #0]
    list->sensorsLen = sensorsLen;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	605a      	str	r2, [r3, #4]
}
 8004e80:	bf00      	nop
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <cmr_sensorListUpdate>:
/**
 * @brief Updates the given sensor list.
 *
 * @param list The list to update.
 */
void cmr_sensorListUpdate(cmr_sensorList_t *list) {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < list->sensorsLen; i++) {
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	e00d      	b.n	8004eb2 <cmr_sensorListUpdate+0x2a>
        cmr_sensorUpdate(list->sensors + i);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6819      	ldr	r1, [r3, #0]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	440b      	add	r3, r1
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff ff98 	bl	8004ddc <cmr_sensorUpdate>
    for (size_t i = 0; i < list->sensorsLen; i++) {
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d3ec      	bcc.n	8004e96 <cmr_sensorListUpdate+0xe>
    }
}
 8004ebc:	bf00      	nop
 8004ebe:	bf00      	nop
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <cmr_sensorListGetValue>:
 *
 * @return The most recent converted value.
 */
int32_t cmr_sensorListGetValue(
    cmr_sensorList_t *list, size_t channel
) {
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]
    return list->sensors[channel]._.value;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6819      	ldr	r1, [r3, #0]
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	440b      	add	r3, r1
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
	...

08004ef0 <cmr_taskInit>:
    cmr_task_t *task,
    const char *name,
    UBaseType_t priority,
    TaskFunction_t func,
    void *arg
) {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af04      	add	r7, sp, #16
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
        func,
        name,
        sizeof(task->stackBuf) / sizeof(task->stackBuf[0]),
        arg,
        priority,
        task->stackBuf,
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	3360      	adds	r3, #96	; 0x60
    task->handle = xTaskCreateStatic(
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	3204      	adds	r2, #4
 8004f06:	9202      	str	r2, [sp, #8]
 8004f08:	9301      	str	r3, [sp, #4]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	f44f 52a5 	mov.w	r2, #5280	; 0x14a0
 8004f14:	68b9      	ldr	r1, [r7, #8]
 8004f16:	6838      	ldr	r0, [r7, #0]
 8004f18:	f001 f89a 	bl	8006050 <xTaskCreateStatic>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	601a      	str	r2, [r3, #0]
    );
#else
#error "At least one of configSUPPORT_{STATIC,DYNAMIC}_ALLOCATION must be 1!"
#endif

    configASSERT(task->handle != NULL);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d103      	bne.n	8004f32 <cmr_taskInit+0x42>
 8004f2a:	2130      	movs	r1, #48	; 0x30
 8004f2c:	4803      	ldr	r0, [pc, #12]	; (8004f3c <cmr_taskInit+0x4c>)
 8004f2e:	f7ff fe76 	bl	8004c1e <cmr_panic>
}
 8004f32:	bf00      	nop
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	0800cc74 	.word	0x0800cc74

08004f40 <vApplicationGetIdleTaskMemory>:
 */
void vApplicationGetIdleTaskMemory(
    StaticTask_t **task,
    StackType_t **stack,
    uint32_t *stackLen
) {
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
    static StaticTask_t taskBuf;

    /** @brief The task's stack buffer. */
    static StackType_t stackBuf[configMINIMAL_STACK_SIZE];

    *task = &taskBuf;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4a07      	ldr	r2, [pc, #28]	; (8004f6c <vApplicationGetIdleTaskMemory+0x2c>)
 8004f50:	601a      	str	r2, [r3, #0]
    *stack = stackBuf;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	4a06      	ldr	r2, [pc, #24]	; (8004f70 <vApplicationGetIdleTaskMemory+0x30>)
 8004f56:	601a      	str	r2, [r3, #0]
    *stackLen = sizeof(stackBuf) / sizeof(stackBuf[0]);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f44f 52a5 	mov.w	r2, #5280	; 0x14a0
 8004f5e:	601a      	str	r2, [r3, #0]
}
 8004f60:	bf00      	nop
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	2002f254 	.word	0x2002f254
 8004f70:	2002f2b0 	.word	0x2002f2b0

08004f74 <USART1_IRQHandler>:
            HAL_StatusTypeDef status = HAL_UART_AbortReceive_IT(handle); \
            configASSERT(status == HAL_OK); \
        } \
        HAL_UART_IRQHandler(handle); \
    }
UART_FOREACH(UART_IRQ_HANDLERS)
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	4b18      	ldr	r3, [pc, #96]	; (8004fdc <USART1_IRQHandler+0x68>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f003 0310 	and.w	r3, r3, #16
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d01e      	beq.n	8004fcc <USART1_IRQHandler+0x58>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0210 	bic.w	r2, r2, #16
 8004f9c:	60da      	str	r2, [r3, #12]
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	607b      	str	r3, [r7, #4]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	607b      	str	r3, [r7, #4]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	607b      	str	r3, [r7, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f006 fee5 	bl	800bd84 <HAL_UART_AbortReceive_IT>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	72fb      	strb	r3, [r7, #11]
 8004fbe:	7afb      	ldrb	r3, [r7, #11]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <USART1_IRQHandler+0x58>
 8004fc4:	2177      	movs	r1, #119	; 0x77
 8004fc6:	4806      	ldr	r0, [pc, #24]	; (8004fe0 <USART1_IRQHandler+0x6c>)
 8004fc8:	f7ff fe29 	bl	8004c1e <cmr_panic>
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f006 ff31 	bl	800be34 <HAL_UART_IRQHandler>
 8004fd2:	bf00      	nop
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20034530 	.word	0x20034530
 8004fe0:	0800ccd8 	.word	0x0800ccd8

08004fe4 <USART2_IRQHandler>:
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	4b18      	ldr	r3, [pc, #96]	; (800504c <USART2_IRQHandler+0x68>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f003 0310 	and.w	r3, r3, #16
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d01e      	beq.n	800503c <USART2_IRQHandler+0x58>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0210 	bic.w	r2, r2, #16
 800500c:	60da      	str	r2, [r3, #12]
 800500e:	2300      	movs	r3, #0
 8005010:	607b      	str	r3, [r7, #4]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	607b      	str	r3, [r7, #4]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	607b      	str	r3, [r7, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f006 fead 	bl	800bd84 <HAL_UART_AbortReceive_IT>
 800502a:	4603      	mov	r3, r0
 800502c:	72fb      	strb	r3, [r7, #11]
 800502e:	7afb      	ldrb	r3, [r7, #11]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d003      	beq.n	800503c <USART2_IRQHandler+0x58>
 8005034:	2177      	movs	r1, #119	; 0x77
 8005036:	4806      	ldr	r0, [pc, #24]	; (8005050 <USART2_IRQHandler+0x6c>)
 8005038:	f7ff fdf1 	bl	8004c1e <cmr_panic>
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f006 fef9 	bl	800be34 <HAL_UART_IRQHandler>
 8005042:	bf00      	nop
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	20034530 	.word	0x20034530
 8005050:	0800ccd8 	.word	0x0800ccd8

08005054 <USART3_IRQHandler>:
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	4b18      	ldr	r3, [pc, #96]	; (80050bc <USART3_IRQHandler+0x68>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f003 0310 	and.w	r3, r3, #16
 800506a:	2b00      	cmp	r3, #0
 800506c:	d01e      	beq.n	80050ac <USART3_IRQHandler+0x58>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68da      	ldr	r2, [r3, #12]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0210 	bic.w	r2, r2, #16
 800507c:	60da      	str	r2, [r3, #12]
 800507e:	2300      	movs	r3, #0
 8005080:	607b      	str	r3, [r7, #4]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	607b      	str	r3, [r7, #4]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	607b      	str	r3, [r7, #4]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f006 fe75 	bl	800bd84 <HAL_UART_AbortReceive_IT>
 800509a:	4603      	mov	r3, r0
 800509c:	72fb      	strb	r3, [r7, #11]
 800509e:	7afb      	ldrb	r3, [r7, #11]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <USART3_IRQHandler+0x58>
 80050a4:	2177      	movs	r1, #119	; 0x77
 80050a6:	4806      	ldr	r0, [pc, #24]	; (80050c0 <USART3_IRQHandler+0x6c>)
 80050a8:	f7ff fdb9 	bl	8004c1e <cmr_panic>
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f006 fec1 	bl	800be34 <HAL_UART_IRQHandler>
 80050b2:	bf00      	nop
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20034530 	.word	0x20034530
 80050c0:	0800ccd8 	.word	0x0800ccd8

080050c4 <UART4_IRQHandler>:
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	4b18      	ldr	r3, [pc, #96]	; (800512c <UART4_IRQHandler+0x68>)
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f003 0310 	and.w	r3, r3, #16
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d01e      	beq.n	800511c <UART4_IRQHandler+0x58>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68da      	ldr	r2, [r3, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 0210 	bic.w	r2, r2, #16
 80050ec:	60da      	str	r2, [r3, #12]
 80050ee:	2300      	movs	r3, #0
 80050f0:	607b      	str	r3, [r7, #4]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	607b      	str	r3, [r7, #4]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	607b      	str	r3, [r7, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f006 fe3d 	bl	800bd84 <HAL_UART_AbortReceive_IT>
 800510a:	4603      	mov	r3, r0
 800510c:	72fb      	strb	r3, [r7, #11]
 800510e:	7afb      	ldrb	r3, [r7, #11]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d003      	beq.n	800511c <UART4_IRQHandler+0x58>
 8005114:	2177      	movs	r1, #119	; 0x77
 8005116:	4806      	ldr	r0, [pc, #24]	; (8005130 <UART4_IRQHandler+0x6c>)
 8005118:	f7ff fd81 	bl	8004c1e <cmr_panic>
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f006 fe89 	bl	800be34 <HAL_UART_IRQHandler>
 8005122:	bf00      	nop
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20034530 	.word	0x20034530
 8005130:	0800ccd8 	.word	0x0800ccd8

08005134 <UART5_IRQHandler>:
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	4b18      	ldr	r3, [pc, #96]	; (800519c <UART5_IRQHandler+0x68>)
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f003 0310 	and.w	r3, r3, #16
 800514a:	2b00      	cmp	r3, #0
 800514c:	d01e      	beq.n	800518c <UART5_IRQHandler+0x58>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0210 	bic.w	r2, r2, #16
 800515c:	60da      	str	r2, [r3, #12]
 800515e:	2300      	movs	r3, #0
 8005160:	607b      	str	r3, [r7, #4]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	607b      	str	r3, [r7, #4]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	607b      	str	r3, [r7, #4]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f006 fe05 	bl	800bd84 <HAL_UART_AbortReceive_IT>
 800517a:	4603      	mov	r3, r0
 800517c:	72fb      	strb	r3, [r7, #11]
 800517e:	7afb      	ldrb	r3, [r7, #11]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <UART5_IRQHandler+0x58>
 8005184:	2177      	movs	r1, #119	; 0x77
 8005186:	4806      	ldr	r0, [pc, #24]	; (80051a0 <UART5_IRQHandler+0x6c>)
 8005188:	f7ff fd49 	bl	8004c1e <cmr_panic>
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f006 fe51 	bl	800be34 <HAL_UART_IRQHandler>
 8005192:	bf00      	nop
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	20034530 	.word	0x20034530
 80051a0:	0800ccd8 	.word	0x0800ccd8

080051a4 <USART6_IRQHandler>:
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	4b18      	ldr	r3, [pc, #96]	; (800520c <USART6_IRQHandler+0x68>)
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f003 0310 	and.w	r3, r3, #16
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d01e      	beq.n	80051fc <USART6_IRQHandler+0x58>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0210 	bic.w	r2, r2, #16
 80051cc:	60da      	str	r2, [r3, #12]
 80051ce:	2300      	movs	r3, #0
 80051d0:	607b      	str	r3, [r7, #4]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	607b      	str	r3, [r7, #4]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	607b      	str	r3, [r7, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f006 fdcd 	bl	800bd84 <HAL_UART_AbortReceive_IT>
 80051ea:	4603      	mov	r3, r0
 80051ec:	72fb      	strb	r3, [r7, #11]
 80051ee:	7afb      	ldrb	r3, [r7, #11]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <USART6_IRQHandler+0x58>
 80051f4:	2177      	movs	r1, #119	; 0x77
 80051f6:	4806      	ldr	r0, [pc, #24]	; (8005210 <USART6_IRQHandler+0x6c>)
 80051f8:	f7ff fd11 	bl	8004c1e <cmr_panic>
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f006 fe19 	bl	800be34 <HAL_UART_IRQHandler>
 8005202:	bf00      	nop
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	20034530 	.word	0x20034530
 8005210:	0800ccd8 	.word	0x0800ccd8

08005214 <UART7_IRQHandler>:
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	4b18      	ldr	r3, [pc, #96]	; (800527c <UART7_IRQHandler+0x68>)
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f003 0310 	and.w	r3, r3, #16
 800522a:	2b00      	cmp	r3, #0
 800522c:	d01e      	beq.n	800526c <UART7_IRQHandler+0x58>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68da      	ldr	r2, [r3, #12]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0210 	bic.w	r2, r2, #16
 800523c:	60da      	str	r2, [r3, #12]
 800523e:	2300      	movs	r3, #0
 8005240:	607b      	str	r3, [r7, #4]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	607b      	str	r3, [r7, #4]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	607b      	str	r3, [r7, #4]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f006 fd95 	bl	800bd84 <HAL_UART_AbortReceive_IT>
 800525a:	4603      	mov	r3, r0
 800525c:	72fb      	strb	r3, [r7, #11]
 800525e:	7afb      	ldrb	r3, [r7, #11]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <UART7_IRQHandler+0x58>
 8005264:	2177      	movs	r1, #119	; 0x77
 8005266:	4806      	ldr	r0, [pc, #24]	; (8005280 <UART7_IRQHandler+0x6c>)
 8005268:	f7ff fcd9 	bl	8004c1e <cmr_panic>
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f006 fde1 	bl	800be34 <HAL_UART_IRQHandler>
 8005272:	bf00      	nop
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20034530 	.word	0x20034530
 8005280:	0800ccd8 	.word	0x0800ccd8

08005284 <UART8_IRQHandler>:
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	4b18      	ldr	r3, [pc, #96]	; (80052ec <UART8_IRQHandler+0x68>)
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f003 0310 	and.w	r3, r3, #16
 800529a:	2b00      	cmp	r3, #0
 800529c:	d01e      	beq.n	80052dc <UART8_IRQHandler+0x58>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 0210 	bic.w	r2, r2, #16
 80052ac:	60da      	str	r2, [r3, #12]
 80052ae:	2300      	movs	r3, #0
 80052b0:	607b      	str	r3, [r7, #4]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	607b      	str	r3, [r7, #4]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	607b      	str	r3, [r7, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f006 fd5d 	bl	800bd84 <HAL_UART_AbortReceive_IT>
 80052ca:	4603      	mov	r3, r0
 80052cc:	72fb      	strb	r3, [r7, #11]
 80052ce:	7afb      	ldrb	r3, [r7, #11]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d003      	beq.n	80052dc <UART8_IRQHandler+0x58>
 80052d4:	2177      	movs	r1, #119	; 0x77
 80052d6:	4806      	ldr	r0, [pc, #24]	; (80052f0 <UART8_IRQHandler+0x6c>)
 80052d8:	f7ff fca1 	bl	8004c1e <cmr_panic>
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f006 fda9 	bl	800be34 <HAL_UART_IRQHandler>
 80052e2:	bf00      	nop
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20034530 	.word	0x20034530
 80052f0:	0800ccd8 	.word	0x0800ccd8

080052f4 <UART9_IRQHandler>:
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	4b18      	ldr	r3, [pc, #96]	; (800535c <UART9_IRQHandler+0x68>)
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f003 0310 	and.w	r3, r3, #16
 800530a:	2b00      	cmp	r3, #0
 800530c:	d01e      	beq.n	800534c <UART9_IRQHandler+0x58>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68da      	ldr	r2, [r3, #12]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0210 	bic.w	r2, r2, #16
 800531c:	60da      	str	r2, [r3, #12]
 800531e:	2300      	movs	r3, #0
 8005320:	607b      	str	r3, [r7, #4]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	607b      	str	r3, [r7, #4]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	607b      	str	r3, [r7, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f006 fd25 	bl	800bd84 <HAL_UART_AbortReceive_IT>
 800533a:	4603      	mov	r3, r0
 800533c:	72fb      	strb	r3, [r7, #11]
 800533e:	7afb      	ldrb	r3, [r7, #11]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <UART9_IRQHandler+0x58>
 8005344:	2177      	movs	r1, #119	; 0x77
 8005346:	4806      	ldr	r0, [pc, #24]	; (8005360 <UART9_IRQHandler+0x6c>)
 8005348:	f7ff fc69 	bl	8004c1e <cmr_panic>
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f006 fd71 	bl	800be34 <HAL_UART_IRQHandler>
 8005352:	bf00      	nop
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	20034530 	.word	0x20034530
 8005360:	0800ccd8 	.word	0x0800ccd8

08005364 <UART10_IRQHandler>:
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	4b18      	ldr	r3, [pc, #96]	; (80053cc <UART10_IRQHandler+0x68>)
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b00      	cmp	r3, #0
 800537c:	d01e      	beq.n	80053bc <UART10_IRQHandler+0x58>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0210 	bic.w	r2, r2, #16
 800538c:	60da      	str	r2, [r3, #12]
 800538e:	2300      	movs	r3, #0
 8005390:	607b      	str	r3, [r7, #4]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	607b      	str	r3, [r7, #4]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	607b      	str	r3, [r7, #4]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f006 fced 	bl	800bd84 <HAL_UART_AbortReceive_IT>
 80053aa:	4603      	mov	r3, r0
 80053ac:	72fb      	strb	r3, [r7, #11]
 80053ae:	7afb      	ldrb	r3, [r7, #11]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <UART10_IRQHandler+0x58>
 80053b4:	2177      	movs	r1, #119	; 0x77
 80053b6:	4806      	ldr	r0, [pc, #24]	; (80053d0 <UART10_IRQHandler+0x6c>)
 80053b8:	f7ff fc31 	bl	8004c1e <cmr_panic>
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f006 fd39 	bl	800be34 <HAL_UART_IRQHandler>
 80053c2:	bf00      	nop
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20034530 	.word	0x20034530
 80053d0:	0800ccd8 	.word	0x0800ccd8

080053d4 <cmr_uartFromHandle>:
 *
 * @param handle The handle.
 *
 * @return The interface.
 */
static cmr_uart_t *cmr_uartFromHandle(UART_HandleTypeDef *handle) {
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
    char *addr = (void *) handle;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	60fb      	str	r3, [r7, #12]
    return (void *) (addr - offsetof(cmr_uart_t, handle));
 80053e0:	68fb      	ldr	r3, [r7, #12]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
	...

080053f0 <HAL_UART_TxCpltCallback>:
 * @warning Called from an interrupt handler!
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *handle) {
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
    cmr_uart_t *uart = cmr_uartFromHandle(handle);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7ff ffeb 	bl	80053d4 <cmr_uartFromHandle>
 80053fe:	6178      	str	r0, [r7, #20]

    BaseType_t higherWoken;
    cmr_uartMsg_t *msg;
    if (xQueueReceiveFromISR(uart->tx.q, &msg, &higherWoken) != pdTRUE) {
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005406:	f107 020c 	add.w	r2, r7, #12
 800540a:	f107 0108 	add.w	r1, r7, #8
 800540e:	4618      	mov	r0, r3
 8005410:	f000 fcc6 	bl	8005da0 <xQueueReceiveFromISR>
 8005414:	4603      	mov	r3, r0
 8005416:	2b01      	cmp	r3, #1
 8005418:	d002      	beq.n	8005420 <HAL_UART_TxCpltCallback+0x30>
        cmr_panic("HAL UART TX completion handler called with empty queue!");
 800541a:	4831      	ldr	r0, [pc, #196]	; (80054e0 <HAL_UART_TxCpltCallback+0xf0>)
 800541c:	f7ff fbff 	bl	8004c1e <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d007      	beq.n	8005436 <HAL_UART_TxCpltCallback+0x46>
 8005426:	4b2f      	ldr	r3, [pc, #188]	; (80054e4 <HAL_UART_TxCpltCallback+0xf4>)
 8005428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	f3bf 8f6f 	isb	sy

    // Signal message as done.
    if (xSemaphoreGiveFromISR(msg->doneSem, &higherWoken) != pdTRUE) {
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f107 020c 	add.w	r2, r7, #12
 800543e:	4611      	mov	r1, r2
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fb33 	bl	8005aac <xQueueGiveFromISR>
 8005446:	4603      	mov	r3, r0
 8005448:	2b01      	cmp	r3, #1
 800544a:	d002      	beq.n	8005452 <HAL_UART_TxCpltCallback+0x62>
        cmr_panic("HAL UART TX completion handler failed to signal message!");
 800544c:	4826      	ldr	r0, [pc, #152]	; (80054e8 <HAL_UART_TxCpltCallback+0xf8>)
 800544e:	f7ff fbe6 	bl	8004c1e <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d007      	beq.n	8005468 <HAL_UART_TxCpltCallback+0x78>
 8005458:	4b22      	ldr	r3, [pc, #136]	; (80054e4 <HAL_UART_TxCpltCallback+0xf4>)
 800545a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	f3bf 8f6f 	isb	sy

    if (xQueuePeekFromISR(uart->tx.q, &msg) != pdTRUE) {
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800546e:	f107 0208 	add.w	r2, r7, #8
 8005472:	4611      	mov	r1, r2
 8005474:	4618      	mov	r0, r3
 8005476:	f000 fd05 	bl	8005e84 <xQueuePeekFromISR>
 800547a:	4603      	mov	r3, r0
 800547c:	2b01      	cmp	r3, #1
 800547e:	d01a      	beq.n	80054b6 <HAL_UART_TxCpltCallback+0xc6>
        // No more messages pending; release DMA semaphore.
        if (xSemaphoreGiveFromISR(uart->tx.dmaSem, &higherWoken) != pdTRUE) {
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8005486:	f107 020c 	add.w	r2, r7, #12
 800548a:	4611      	mov	r1, r2
 800548c:	4618      	mov	r0, r3
 800548e:	f000 fb0d 	bl	8005aac <xQueueGiveFromISR>
 8005492:	4603      	mov	r3, r0
 8005494:	2b01      	cmp	r3, #1
 8005496:	d002      	beq.n	800549e <HAL_UART_TxCpltCallback+0xae>
            cmr_panic("HAL UART TX completion handler failed to release DMA!");
 8005498:	4814      	ldr	r0, [pc, #80]	; (80054ec <HAL_UART_TxCpltCallback+0xfc>)
 800549a:	f7ff fbc0 	bl	8004c1e <cmr_panic>
        }
        portYIELD_FROM_ISR(higherWoken);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d019      	beq.n	80054d8 <HAL_UART_TxCpltCallback+0xe8>
 80054a4:	4b0f      	ldr	r3, [pc, #60]	; (80054e4 <HAL_UART_TxCpltCallback+0xf4>)
 80054a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	e011      	b.n	80054da <HAL_UART_TxCpltCallback+0xea>
        return;
    }

    // Message pending; start DMA.
    HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(
 80054b6:	6978      	ldr	r0, [r7, #20]
        &uart->handle, msg->data, msg->len
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	f006 fb72 	bl	800bbac <HAL_UART_Transmit_DMA>
 80054c8:	4603      	mov	r3, r0
 80054ca:	74fb      	strb	r3, [r7, #19]
    );
    if (status != HAL_OK) {
 80054cc:	7cfb      	ldrb	r3, [r7, #19]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <HAL_UART_TxCpltCallback+0xea>
        cmr_panic("HAL UART TX failed!");
 80054d2:	4807      	ldr	r0, [pc, #28]	; (80054f0 <HAL_UART_TxCpltCallback+0x100>)
 80054d4:	f7ff fba3 	bl	8004c1e <cmr_panic>
        return;
 80054d8:	bf00      	nop
    }
}
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	0800cd20 	.word	0x0800cd20
 80054e4:	e000ed04 	.word	0xe000ed04
 80054e8:	0800cd58 	.word	0x0800cd58
 80054ec:	0800cd94 	.word	0x0800cd94
 80054f0:	0800cdcc 	.word	0x0800cdcc

080054f4 <HAL_UART_RxCpltCallback>:
 * @warning Called from an interrupt handler!
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL UART handle.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *handle) {
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b088      	sub	sp, #32
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
    cmr_uart_t *uart = cmr_uartFromHandle(handle);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff ff69 	bl	80053d4 <cmr_uartFromHandle>
 8005502:	61f8      	str	r0, [r7, #28]

    BaseType_t higherWoken;
    cmr_uartMsg_t *msg;
    if (xQueueReceiveFromISR(uart->rx.q, &msg, &higherWoken) != pdTRUE) {
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800550a:	f107 0210 	add.w	r2, r7, #16
 800550e:	f107 010c 	add.w	r1, r7, #12
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fc44 	bl	8005da0 <xQueueReceiveFromISR>
 8005518:	4603      	mov	r3, r0
 800551a:	2b01      	cmp	r3, #1
 800551c:	d002      	beq.n	8005524 <HAL_UART_RxCpltCallback+0x30>
        cmr_panic("HAL UART RX completion handler called with empty queue!");
 800551e:	4842      	ldr	r0, [pc, #264]	; (8005628 <HAL_UART_RxCpltCallback+0x134>)
 8005520:	f7ff fb7d 	bl	8004c1e <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d007      	beq.n	800553a <HAL_UART_RxCpltCallback+0x46>
 800552a:	4b40      	ldr	r3, [pc, #256]	; (800562c <HAL_UART_RxCpltCallback+0x138>)
 800552c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	f3bf 8f6f 	isb	sy

    // Record actual number of bytes received.
    size_t remLen = __HAL_DMA_GET_COUNTER(&uart->rx.dma);
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	61bb      	str	r3, [r7, #24]
    configASSERT(remLen <= msg->len);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	429a      	cmp	r2, r3
 800554a:	d903      	bls.n	8005554 <HAL_UART_RxCpltCallback+0x60>
 800554c:	21c6      	movs	r1, #198	; 0xc6
 800554e:	4838      	ldr	r0, [pc, #224]	; (8005630 <HAL_UART_RxCpltCallback+0x13c>)
 8005550:	f7ff fb65 	bl	8004c1e <cmr_panic>
    msg->len -= remLen;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	1a8a      	subs	r2, r1, r2
 800555e:	651a      	str	r2, [r3, #80]	; 0x50

    // Signal message as done.
    if (xSemaphoreGiveFromISR(msg->doneSem, &higherWoken) != pdTRUE) {
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f107 0210 	add.w	r2, r7, #16
 8005568:	4611      	mov	r1, r2
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fa9e 	bl	8005aac <xQueueGiveFromISR>
 8005570:	4603      	mov	r3, r0
 8005572:	2b01      	cmp	r3, #1
 8005574:	d002      	beq.n	800557c <HAL_UART_RxCpltCallback+0x88>
        cmr_panic("HAL UART RX completion handler failed to signal message!");
 8005576:	482f      	ldr	r0, [pc, #188]	; (8005634 <HAL_UART_RxCpltCallback+0x140>)
 8005578:	f7ff fb51 	bl	8004c1e <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d007      	beq.n	8005592 <HAL_UART_RxCpltCallback+0x9e>
 8005582:	4b2a      	ldr	r3, [pc, #168]	; (800562c <HAL_UART_RxCpltCallback+0x138>)
 8005584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	f3bf 8f6f 	isb	sy

    if (xQueuePeekFromISR(uart->rx.q, &msg) != pdTRUE) {
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005598:	f107 020c 	add.w	r2, r7, #12
 800559c:	4611      	mov	r1, r2
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fc70 	bl	8005e84 <xQueuePeekFromISR>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d01a      	beq.n	80055e0 <HAL_UART_RxCpltCallback+0xec>
        // No more messages pending; release DMA semaphore.
        if (xSemaphoreGiveFromISR(uart->rx.dmaSem, &higherWoken) != pdTRUE) {
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80055b0:	f107 0210 	add.w	r2, r7, #16
 80055b4:	4611      	mov	r1, r2
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fa78 	bl	8005aac <xQueueGiveFromISR>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d002      	beq.n	80055c8 <HAL_UART_RxCpltCallback+0xd4>
            cmr_panic("HAL UART RX completion handler failed to release DMA!");
 80055c2:	481d      	ldr	r0, [pc, #116]	; (8005638 <HAL_UART_RxCpltCallback+0x144>)
 80055c4:	f7ff fb2b 	bl	8004c1e <cmr_panic>
        }
        portYIELD_FROM_ISR(higherWoken);
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d028      	beq.n	8005620 <HAL_UART_RxCpltCallback+0x12c>
 80055ce:	4b17      	ldr	r3, [pc, #92]	; (800562c <HAL_UART_RxCpltCallback+0x138>)
 80055d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	e020      	b.n	8005622 <HAL_UART_RxCpltCallback+0x12e>
        return;
    }

    // Message pending; start DMA.
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(
 80055e0:	69f8      	ldr	r0, [r7, #28]
        &uart->handle, msg->data, msg->len
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	f006 fb49 	bl	800bc84 <HAL_UART_Receive_DMA>
 80055f2:	4603      	mov	r3, r0
 80055f4:	75fb      	strb	r3, [r7, #23]
    );
    if (status != HAL_OK) {
 80055f6:	7dfb      	ldrb	r3, [r7, #23]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <HAL_UART_RxCpltCallback+0x10e>
        cmr_panic("HAL UART RX failed!");
 80055fc:	480f      	ldr	r0, [pc, #60]	; (800563c <HAL_UART_RxCpltCallback+0x148>)
 80055fe:	f7ff fb0e 	bl	8004c1e <cmr_panic>
    }

    if (msg->opts & CMR_UART_RXOPTS_IDLEABORT) {
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	d009      	beq.n	8005622 <HAL_UART_RxCpltCallback+0x12e>
        // Enable idle line detection.
        __HAL_UART_ENABLE_IT(&uart->handle, UART_IT_IDLE);
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f042 0210 	orr.w	r2, r2, #16
 800561c:	60da      	str	r2, [r3, #12]
 800561e:	e000      	b.n	8005622 <HAL_UART_RxCpltCallback+0x12e>
        return;
 8005620:	bf00      	nop
    }
}
 8005622:	3720      	adds	r7, #32
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	0800cde0 	.word	0x0800cde0
 800562c:	e000ed04 	.word	0xe000ed04
 8005630:	0800ce18 	.word	0x0800ce18
 8005634:	0800ce64 	.word	0x0800ce64
 8005638:	0800cea0 	.word	0x0800cea0
 800563c:	0800ced8 	.word	0x0800ced8

08005640 <HAL_UART_AbortReceiveCpltCallback>:
 * @warning Called from an interrupt handler!
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL UART handle.
 */
void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *handle) {
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
    // Receive aborted; treat as completion.
    HAL_UART_RxCpltCallback(handle);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff ff53 	bl	80054f4 <HAL_UART_RxCpltCallback>
}
 800564e:	bf00      	nop
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8005658:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005690 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800565c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800565e:	e003      	b.n	8005668 <LoopCopyDataInit>

08005660 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005660:	4b0c      	ldr	r3, [pc, #48]	; (8005694 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005662:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005664:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005666:	3104      	adds	r1, #4

08005668 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005668:	480b      	ldr	r0, [pc, #44]	; (8005698 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800566a:	4b0c      	ldr	r3, [pc, #48]	; (800569c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800566c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800566e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005670:	d3f6      	bcc.n	8005660 <CopyDataInit>
  ldr  r2, =_sbss
 8005672:	4a0b      	ldr	r2, [pc, #44]	; (80056a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005674:	e002      	b.n	800567c <LoopFillZerobss>

08005676 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8005676:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005678:	f842 3b04 	str.w	r3, [r2], #4

0800567c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800567c:	4b09      	ldr	r3, [pc, #36]	; (80056a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800567e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005680:	d3f9      	bcc.n	8005676 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005682:	f000 f81f 	bl	80056c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005686:	f006 fefd 	bl	800c484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800568a:	f7fd f899 	bl	80027c0 <main>
  bx  lr    
 800568e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005690:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005694:	0800e430 	.word	0x0800e430
  ldr  r0, =_sdata
 8005698:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800569c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80056a0:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80056a4:	20034678 	.word	0x20034678
	...

080056b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
  /* Load the address of the interrupt control register into r3. */
  ldr r3, NVIC_INT_CTRL_CONST
 80056b0:	4b03      	ldr	r3, [pc, #12]	; (80056c0 <NVIC_INT_CTRL_CONST>)
  /* Load the value of the interrupt control register into r2 from the
  address held in r3. */
  ldr r2, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
  /* The interrupt number is in the least significant byte - clear all
  other bits. */
  uxtb r2, r2
 80056b4:	b2d2      	uxtb	r2, r2

080056b6 <Infinite_Loop>:
Infinite_Loop:
  b  Infinite_Loop
 80056b6:	e7fe      	b.n	80056b6 <Infinite_Loop>
 80056b8:	f3af 8000 	nop.w
 80056bc:	f3af 8000 	nop.w

080056c0 <NVIC_INT_CTRL_CONST>:
 80056c0:	e000ed04 	.word	0xe000ed04

080056c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80056c8:	4b16      	ldr	r3, [pc, #88]	; (8005724 <SystemInit+0x60>)
 80056ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ce:	4a15      	ldr	r2, [pc, #84]	; (8005724 <SystemInit+0x60>)
 80056d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80056d8:	4b13      	ldr	r3, [pc, #76]	; (8005728 <SystemInit+0x64>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a12      	ldr	r2, [pc, #72]	; (8005728 <SystemInit+0x64>)
 80056de:	f043 0301 	orr.w	r3, r3, #1
 80056e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80056e4:	4b10      	ldr	r3, [pc, #64]	; (8005728 <SystemInit+0x64>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80056ea:	4b0f      	ldr	r3, [pc, #60]	; (8005728 <SystemInit+0x64>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a0e      	ldr	r2, [pc, #56]	; (8005728 <SystemInit+0x64>)
 80056f0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80056f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80056fa:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <SystemInit+0x64>)
 80056fc:	4a0b      	ldr	r2, [pc, #44]	; (800572c <SystemInit+0x68>)
 80056fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005700:	4b09      	ldr	r3, [pc, #36]	; (8005728 <SystemInit+0x64>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a08      	ldr	r2, [pc, #32]	; (8005728 <SystemInit+0x64>)
 8005706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800570a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800570c:	4b06      	ldr	r3, [pc, #24]	; (8005728 <SystemInit+0x64>)
 800570e:	2200      	movs	r2, #0
 8005710:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005712:	4b04      	ldr	r3, [pc, #16]	; (8005724 <SystemInit+0x60>)
 8005714:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005718:	609a      	str	r2, [r3, #8]
#endif
}
 800571a:	bf00      	nop
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	e000ed00 	.word	0xe000ed00
 8005728:	40023800 	.word	0x40023800
 800572c:	24003010 	.word	0x24003010

08005730 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f103 0208 	add.w	r2, r3, #8
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f04f 32ff 	mov.w	r2, #4294967295
 8005748:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f103 0208 	add.w	r2, r3, #8
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f103 0208 	add.w	r2, r3, #8
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800578a:	b480      	push	{r7}
 800578c:	b085      	sub	sp, #20
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	601a      	str	r2, [r3, #0]
}
 80057c6:	bf00      	nop
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e8:	d103      	bne.n	80057f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	e00c      	b.n	800580c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3308      	adds	r3, #8
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	e002      	b.n	8005800 <vListInsert+0x2e>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	429a      	cmp	r2, r3
 800580a:	d2f6      	bcs.n	80057fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	601a      	str	r2, [r3, #0]
}
 8005838:	bf00      	nop
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6892      	ldr	r2, [r2, #8]
 800585a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6852      	ldr	r2, [r2, #4]
 8005864:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	429a      	cmp	r2, r3
 800586e:	d103      	bne.n	8005878 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	1e5a      	subs	r2, r3, #1
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d104      	bne.n	80058b6 <xQueueGenericReset+0x1e>
 80058ac:	f240 111b 	movw	r1, #283	; 0x11b
 80058b0:	4829      	ldr	r0, [pc, #164]	; (8005958 <xQueueGenericReset+0xc0>)
 80058b2:	f7ff f9b4 	bl	8004c1e <cmr_panic>

	taskENTER_CRITICAL();
 80058b6:	f001 fb1d 	bl	8006ef4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c2:	68f9      	ldr	r1, [r7, #12]
 80058c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058c6:	fb01 f303 	mul.w	r3, r1, r3
 80058ca:	441a      	add	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e6:	3b01      	subs	r3, #1
 80058e8:	68f9      	ldr	r1, [r7, #12]
 80058ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058ec:	fb01 f303 	mul.w	r3, r1, r3
 80058f0:	441a      	add	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	22ff      	movs	r2, #255	; 0xff
 80058fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	22ff      	movs	r2, #255	; 0xff
 8005902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d114      	bne.n	8005936 <xQueueGenericReset+0x9e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d01a      	beq.n	800594a <xQueueGenericReset+0xb2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	3310      	adds	r3, #16
 8005918:	4618      	mov	r0, r3
 800591a:	f000 ff7f 	bl	800681c <xTaskRemoveFromEventList>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d012      	beq.n	800594a <xQueueGenericReset+0xb2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005924:	4b0d      	ldr	r3, [pc, #52]	; (800595c <xQueueGenericReset+0xc4>)
 8005926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	e009      	b.n	800594a <xQueueGenericReset+0xb2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3310      	adds	r3, #16
 800593a:	4618      	mov	r0, r3
 800593c:	f7ff fef8 	bl	8005730 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	3324      	adds	r3, #36	; 0x24
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff fef3 	bl	8005730 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800594a:	f001 fafd 	bl	8006f48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800594e:	2301      	movs	r3, #1
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	0800d0e4 	.word	0x0800d0e4
 800595c:	e000ed04 	.word	0xe000ed04

08005960 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005960:	b580      	push	{r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af02      	add	r7, sp, #8
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
 800596c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d104      	bne.n	800597e <xQueueGenericCreateStatic+0x1e>
 8005974:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8005978:	481f      	ldr	r0, [pc, #124]	; (80059f8 <xQueueGenericCreateStatic+0x98>)
 800597a:	f7ff f950 	bl	8004c1e <cmr_panic>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d104      	bne.n	800598e <xQueueGenericCreateStatic+0x2e>
 8005984:	f44f 71ab 	mov.w	r1, #342	; 0x156
 8005988:	481c      	ldr	r0, [pc, #112]	; (80059fc <xQueueGenericCreateStatic+0x9c>)
 800598a:	f7ff f948 	bl	8004c1e <cmr_panic>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d007      	beq.n	80059a4 <xQueueGenericCreateStatic+0x44>
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d104      	bne.n	80059a4 <xQueueGenericCreateStatic+0x44>
 800599a:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800599e:	4818      	ldr	r0, [pc, #96]	; (8005a00 <xQueueGenericCreateStatic+0xa0>)
 80059a0:	f7ff f93d 	bl	8004c1e <cmr_panic>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d107      	bne.n	80059ba <xQueueGenericCreateStatic+0x5a>
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d004      	beq.n	80059ba <xQueueGenericCreateStatic+0x5a>
 80059b0:	f240 115b 	movw	r1, #347	; 0x15b
 80059b4:	4813      	ldr	r0, [pc, #76]	; (8005a04 <xQueueGenericCreateStatic+0xa4>)
 80059b6:	f7ff f932 	bl	8004c1e <cmr_panic>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80059ba:	2348      	movs	r3, #72	; 0x48
 80059bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	2b48      	cmp	r3, #72	; 0x48
 80059c2:	d004      	beq.n	80059ce <xQueueGenericCreateStatic+0x6e>
 80059c4:	f240 1163 	movw	r1, #355	; 0x163
 80059c8:	480f      	ldr	r0, [pc, #60]	; (8005a08 <xQueueGenericCreateStatic+0xa8>)
 80059ca:	f7ff f928 	bl	8004c1e <cmr_panic>
			(void) xSize; // Placate compiler
 80059ce:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d009      	beq.n	80059ee <xQueueGenericCreateStatic+0x8e>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059da:	f897 2020 	ldrb.w	r2, [r7, #32]
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	4613      	mov	r3, r2
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 f80f 	bl	8005a0c <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 80059ee:	697b      	ldr	r3, [r7, #20]
	}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	0800d128 	.word	0x0800d128
 80059fc:	0800d188 	.word	0x0800d188
 8005a00:	0800d1dc 	.word	0x0800d1dc
 8005a04:	0800d250 	.word	0x0800d250
 8005a08:	0800d2c4 	.word	0x0800d2c4

08005a0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d103      	bne.n	8005a28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	e002      	b.n	8005a2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	69b8      	ldr	r0, [r7, #24]
 8005a3e:	f7ff ff2b 	bl	8005898 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a42:	bf00      	nop
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af02      	add	r7, sp, #8
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d104      	bne.n	8005a68 <xQueueCreateCountingSemaphoreStatic+0x1c>
 8005a5e:	f240 21a2 	movw	r1, #674	; 0x2a2
 8005a62:	4810      	ldr	r0, [pc, #64]	; (8005aa4 <xQueueCreateCountingSemaphoreStatic+0x58>)
 8005a64:	f7ff f8db 	bl	8004c1e <cmr_panic>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d904      	bls.n	8005a7a <xQueueCreateCountingSemaphoreStatic+0x2e>
 8005a70:	f240 21a3 	movw	r1, #675	; 0x2a3
 8005a74:	480c      	ldr	r0, [pc, #48]	; (8005aa8 <xQueueCreateCountingSemaphoreStatic+0x5c>)
 8005a76:	f7ff f8d2 	bl	8004c1e <cmr_panic>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	2100      	movs	r1, #0
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f7ff ff6b 	bl	8005960 <xQueueGenericCreateStatic>
 8005a8a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <xQueueCreateCountingSemaphoreStatic+0x4c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005a98:	697b      	ldr	r3, [r7, #20]
	}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3718      	adds	r7, #24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	0800d31c 	.word	0x0800d31c
 8005aa8:	0800d368 	.word	0x0800d368

08005aac <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b08a      	sub	sp, #40	; 0x28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d104      	bne.n	8005aca <xQueueGiveFromISR+0x1e>
 8005ac0:	f240 413d 	movw	r1, #1085	; 0x43d
 8005ac4:	4833      	ldr	r0, [pc, #204]	; (8005b94 <xQueueGiveFromISR+0xe8>)
 8005ac6:	f7ff f8aa 	bl	8004c1e <cmr_panic>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d004      	beq.n	8005adc <xQueueGiveFromISR+0x30>
 8005ad2:	f240 4141 	movw	r1, #1089	; 0x441
 8005ad6:	4830      	ldr	r0, [pc, #192]	; (8005b98 <xQueueGiveFromISR+0xec>)
 8005ad8:	f7ff f8a1 	bl	8004c1e <cmr_panic>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d108      	bne.n	8005af6 <xQueueGiveFromISR+0x4a>
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d004      	beq.n	8005af6 <xQueueGiveFromISR+0x4a>
 8005aec:	f240 4146 	movw	r1, #1094	; 0x446
 8005af0:	482a      	ldr	r0, [pc, #168]	; (8005b9c <xQueueGiveFromISR+0xf0>)
 8005af2:	f7ff f894 	bl	8004c1e <cmr_panic>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005af6:	f001 fac7 	bl	8007088 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005afa:	f3ef 8211 	mrs	r2, BASEPRI
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	613a      	str	r2, [r7, #16]
 8005b10:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b12:	693b      	ldr	r3, [r7, #16]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b14:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1a:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d229      	bcs.n	8005b7a <xQueueGiveFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b2c:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	1c5a      	adds	r2, r3, #1
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3e:	d112      	bne.n	8005b66 <xQueueGiveFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d015      	beq.n	8005b74 <xQueueGiveFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	3324      	adds	r3, #36	; 0x24
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 fe65 	bl	800681c <xTaskRemoveFromEventList>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00d      	beq.n	8005b74 <xQueueGiveFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <xQueueGiveFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2201      	movs	r2, #1
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	e006      	b.n	8005b74 <xQueueGiveFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b66:	7dfb      	ldrb	r3, [r7, #23]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	b25a      	sxtb	r2, r3
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b74:	2301      	movs	r3, #1
 8005b76:	627b      	str	r3, [r7, #36]	; 0x24
 8005b78:	e001      	b.n	8005b7e <xQueueGiveFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue )
	);
}
 8005b88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3728      	adds	r7, #40	; 0x28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	0800d0e4 	.word	0x0800d0e4
 8005b98:	0800d568 	.word	0x0800d568
 8005b9c:	0800d5c0 	.word	0x0800d5c0

08005ba0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08a      	sub	sp, #40	; 0x28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
 8005bac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d104      	bne.n	8005bc6 <xQueueGenericReceive+0x26>
 8005bbc:	f240 41dd 	movw	r1, #1245	; 0x4dd
 8005bc0:	4873      	ldr	r0, [pc, #460]	; (8005d90 <xQueueGenericReceive+0x1f0>)
 8005bc2:	f7ff f82c 	bl	8004c1e <cmr_panic>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d108      	bne.n	8005bde <xQueueGenericReceive+0x3e>
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d004      	beq.n	8005bde <xQueueGenericReceive+0x3e>
 8005bd4:	f240 41de 	movw	r1, #1246	; 0x4de
 8005bd8:	486e      	ldr	r0, [pc, #440]	; (8005d94 <xQueueGenericReceive+0x1f4>)
 8005bda:	f7ff f820 	bl	8004c1e <cmr_panic>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bde:	f000 ff7d 	bl	8006adc <xTaskGetSchedulerState>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d107      	bne.n	8005bf8 <xQueueGenericReceive+0x58>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d004      	beq.n	8005bf8 <xQueueGenericReceive+0x58>
 8005bee:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8005bf2:	4869      	ldr	r0, [pc, #420]	; (8005d98 <xQueueGenericReceive+0x1f8>)
 8005bf4:	f7ff f813 	bl	8004c1e <cmr_panic>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bf8:	f001 f97c 	bl	8006ef4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c00:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d046      	beq.n	8005c96 <xQueueGenericReceive+0xf6>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c0e:	68b9      	ldr	r1, [r7, #8]
 8005c10:	6a38      	ldr	r0, [r7, #32]
 8005c12:	f000 f98f 	bl	8005f34 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d121      	bne.n	8005c60 <xQueueGenericReceive+0xc0>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	1e5a      	subs	r2, r3, #1
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c24:	6a3b      	ldr	r3, [r7, #32]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d104      	bne.n	8005c36 <xQueueGenericReceive+0x96>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005c2c:	f000 ffea 	bl	8006c04 <pvTaskIncrementMutexHeldCount>
 8005c30:	4602      	mov	r2, r0
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d027      	beq.n	8005c8e <xQueueGenericReceive+0xee>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	3310      	adds	r3, #16
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 fdea 	bl	800681c <xTaskRemoveFromEventList>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d01f      	beq.n	8005c8e <xQueueGenericReceive+0xee>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8005c4e:	4b53      	ldr	r3, [pc, #332]	; (8005d9c <xQueueGenericReceive+0x1fc>)
 8005c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	f3bf 8f4f 	dsb	sy
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	e016      	b.n	8005c8e <xQueueGenericReceive+0xee>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00f      	beq.n	8005c8e <xQueueGenericReceive+0xee>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	3324      	adds	r3, #36	; 0x24
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 fdd2 	bl	800681c <xTaskRemoveFromEventList>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d007      	beq.n	8005c8e <xQueueGenericReceive+0xee>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c7e:	4b47      	ldr	r3, [pc, #284]	; (8005d9c <xQueueGenericReceive+0x1fc>)
 8005c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8005c8e:	f001 f95b 	bl	8006f48 <vPortExitCritical>
				return pdPASS;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e077      	b.n	8005d86 <xQueueGenericReceive+0x1e6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d103      	bne.n	8005ca4 <xQueueGenericReceive+0x104>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c9c:	f001 f954 	bl	8006f48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	e070      	b.n	8005d86 <xQueueGenericReceive+0x1e6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d106      	bne.n	8005cb8 <xQueueGenericReceive+0x118>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8005caa:	f107 0310 	add.w	r3, r7, #16
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 fe12 	bl	80068d8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cb8:	f001 f946 	bl	8006f48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cbc:	f000 fbb6 	bl	800642c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cc0:	f001 f918 	bl	8006ef4 <vPortEnterCritical>
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cca:	b25b      	sxtb	r3, r3
 8005ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd0:	d103      	bne.n	8005cda <xQueueGenericReceive+0x13a>
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ce0:	b25b      	sxtb	r3, r3
 8005ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce6:	d103      	bne.n	8005cf0 <xQueueGenericReceive+0x150>
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cf0:	f001 f92a 	bl	8006f48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cf4:	1d3a      	adds	r2, r7, #4
 8005cf6:	f107 0310 	add.w	r3, r7, #16
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fe09 	bl	8006914 <xTaskCheckForTimeOut>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d131      	bne.n	8005d6c <xQueueGenericReceive+0x1cc>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d08:	6a38      	ldr	r0, [r7, #32]
 8005d0a:	f000 f98b 	bl	8006024 <prvIsQueueEmpty>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d025      	beq.n	8005d60 <xQueueGenericReceive+0x1c0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d108      	bne.n	8005d2e <xQueueGenericReceive+0x18e>
					{
						taskENTER_CRITICAL();
 8005d1c:	f001 f8ea 	bl	8006ef4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005d20:	6a3b      	ldr	r3, [r7, #32]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 fef7 	bl	8006b18 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8005d2a:	f001 f90d 	bl	8006f48 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	3324      	adds	r3, #36	; 0x24
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	4611      	mov	r1, r2
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 fd50 	bl	80067dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d3c:	6a38      	ldr	r0, [r7, #32]
 8005d3e:	f000 f91f 	bl	8005f80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d42:	f000 fb81 	bl	8006448 <xTaskResumeAll>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f47f af55 	bne.w	8005bf8 <xQueueGenericReceive+0x58>
				{
					portYIELD_WITHIN_API();
 8005d4e:	4b13      	ldr	r3, [pc, #76]	; (8005d9c <xQueueGenericReceive+0x1fc>)
 8005d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	e74b      	b.n	8005bf8 <xQueueGenericReceive+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d60:	6a38      	ldr	r0, [r7, #32]
 8005d62:	f000 f90d 	bl	8005f80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d66:	f000 fb6f 	bl	8006448 <xTaskResumeAll>
 8005d6a:	e745      	b.n	8005bf8 <xQueueGenericReceive+0x58>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8005d6c:	6a38      	ldr	r0, [r7, #32]
 8005d6e:	f000 f907 	bl	8005f80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d72:	f000 fb69 	bl	8006448 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d76:	6a38      	ldr	r0, [r7, #32]
 8005d78:	f000 f954 	bl	8006024 <prvIsQueueEmpty>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f43f af3a 	beq.w	8005bf8 <xQueueGenericReceive+0x58>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3728      	adds	r7, #40	; 0x28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	0800d0e4 	.word	0x0800d0e4
 8005d94:	0800d658 	.word	0x0800d658
 8005d98:	0800d4d4 	.word	0x0800d4d4
 8005d9c:	e000ed04 	.word	0xe000ed04

08005da0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b08c      	sub	sp, #48	; 0x30
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 8005db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d104      	bne.n	8005dc0 <xQueueReceiveFromISR+0x20>
 8005db6:	f240 51a1 	movw	r1, #1441	; 0x5a1
 8005dba:	4830      	ldr	r0, [pc, #192]	; (8005e7c <xQueueReceiveFromISR+0xdc>)
 8005dbc:	f7fe ff2f 	bl	8004c1e <cmr_panic>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d108      	bne.n	8005dd8 <xQueueReceiveFromISR+0x38>
 8005dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d004      	beq.n	8005dd8 <xQueueReceiveFromISR+0x38>
 8005dce:	f240 51a2 	movw	r1, #1442	; 0x5a2
 8005dd2:	482b      	ldr	r0, [pc, #172]	; (8005e80 <xQueueReceiveFromISR+0xe0>)
 8005dd4:	f7fe ff23 	bl	8004c1e <cmr_panic>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005dd8:	f001 f956 	bl	8007088 <vPortValidateInterruptPriority>
	__asm volatile
 8005ddc:	f3ef 8211 	mrs	r2, BASEPRI
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	61ba      	str	r2, [r7, #24]
 8005df2:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005df4:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005df6:	627b      	str	r3, [r7, #36]	; 0x24
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfc:	623b      	str	r3, [r7, #32]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d02d      	beq.n	8005e60 <xQueueReceiveFromISR+0xc0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e0a:	77fb      	strb	r3, [r7, #31]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e0c:	68b9      	ldr	r1, [r7, #8]
 8005e0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e10:	f000 f890 	bl	8005f34 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	1e5a      	subs	r2, r3, #1
 8005e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005e1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e24:	d112      	bne.n	8005e4c <xQueueReceiveFromISR+0xac>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d015      	beq.n	8005e5a <xQueueReceiveFromISR+0xba>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e30:	3310      	adds	r3, #16
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 fcf2 	bl	800681c <xTaskRemoveFromEventList>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00d      	beq.n	8005e5a <xQueueReceiveFromISR+0xba>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00a      	beq.n	8005e5a <xQueueReceiveFromISR+0xba>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	e006      	b.n	8005e5a <xQueueReceiveFromISR+0xba>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005e4c:	7ffb      	ldrb	r3, [r7, #31]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	b25a      	sxtb	r2, r3
 8005e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e5e:	e001      	b.n	8005e64 <xQueueReceiveFromISR+0xc4>
		}
		else
		{
			xReturn = pdFAIL;
 8005e60:	2300      	movs	r3, #0
 8005e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f383 8811 	msr	BASEPRI, r3
}
 8005e6e:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3730      	adds	r7, #48	; 0x30
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	0800d0e4 	.word	0x0800d0e4
 8005e80:	0800d658 	.word	0x0800d658

08005e84 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b08a      	sub	sp, #40	; 0x28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d104      	bne.n	8005ea2 <xQueuePeekFromISR+0x1e>
 8005e98:	f240 51fd 	movw	r1, #1533	; 0x5fd
 8005e9c:	4822      	ldr	r0, [pc, #136]	; (8005f28 <xQueuePeekFromISR+0xa4>)
 8005e9e:	f7fe febe 	bl	8004c1e <cmr_panic>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d108      	bne.n	8005eba <xQueuePeekFromISR+0x36>
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d004      	beq.n	8005eba <xQueuePeekFromISR+0x36>
 8005eb0:	f240 51fe 	movw	r1, #1534	; 0x5fe
 8005eb4:	481d      	ldr	r0, [pc, #116]	; (8005f2c <xQueuePeekFromISR+0xa8>)
 8005eb6:	f7fe feb2 	bl	8004c1e <cmr_panic>
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d104      	bne.n	8005ecc <xQueuePeekFromISR+0x48>
 8005ec2:	f240 51ff 	movw	r1, #1535	; 0x5ff
 8005ec6:	481a      	ldr	r0, [pc, #104]	; (8005f30 <xQueuePeekFromISR+0xac>)
 8005ec8:	f7fe fea9 	bl	8004c1e <cmr_panic>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ecc:	f001 f8dc 	bl	8007088 <vPortValidateInterruptPriority>
	__asm volatile
 8005ed0:	f3ef 8211 	mrs	r2, BASEPRI
 8005ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	617a      	str	r2, [r7, #20]
 8005ee6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005ee8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005eea:	61fb      	str	r3, [r7, #28]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00c      	beq.n	8005f0e <xQueuePeekFromISR+0x8a>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	61bb      	str	r3, [r7, #24]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005efa:	6839      	ldr	r1, [r7, #0]
 8005efc:	6a38      	ldr	r0, [r7, #32]
 8005efe:	f000 f819 	bl	8005f34 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	60da      	str	r2, [r3, #12]

			xReturn = pdPASS;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f0c:	e001      	b.n	8005f12 <xQueuePeekFromISR+0x8e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f383 8811 	msr	BASEPRI, r3
}
 8005f1c:	bf00      	nop
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3728      	adds	r7, #40	; 0x28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	0800d0e4 	.word	0x0800d0e4
 8005f2c:	0800d658 	.word	0x0800d658
 8005f30:	0800d6e0 	.word	0x0800d6e0

08005f34 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d018      	beq.n	8005f78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	441a      	add	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68da      	ldr	r2, [r3, #12]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d303      	bcc.n	8005f68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	68d9      	ldr	r1, [r3, #12]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f70:	461a      	mov	r2, r3
 8005f72:	6838      	ldr	r0, [r7, #0]
 8005f74:	f006 faaa 	bl	800c4cc <memcpy>
	}
}
 8005f78:	bf00      	nop
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f88:	f000 ffb4 	bl	8006ef4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f94:	e011      	b.n	8005fba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d012      	beq.n	8005fc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	3324      	adds	r3, #36	; 0x24
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 fc3a 	bl	800681c <xTaskRemoveFromEventList>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fae:	f000 fd09 	bl	80069c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	dce9      	bgt.n	8005f96 <prvUnlockQueue+0x16>
 8005fc2:	e000      	b.n	8005fc6 <prvUnlockQueue+0x46>
					break;
 8005fc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	22ff      	movs	r2, #255	; 0xff
 8005fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005fce:	f000 ffbb 	bl	8006f48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fd2:	f000 ff8f 	bl	8006ef4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fdc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fde:	e011      	b.n	8006004 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d012      	beq.n	800600e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3310      	adds	r3, #16
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 fc15 	bl	800681c <xTaskRemoveFromEventList>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ff8:	f000 fce4 	bl	80069c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ffc:	7bbb      	ldrb	r3, [r7, #14]
 8005ffe:	3b01      	subs	r3, #1
 8006000:	b2db      	uxtb	r3, r3
 8006002:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006004:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006008:	2b00      	cmp	r3, #0
 800600a:	dce9      	bgt.n	8005fe0 <prvUnlockQueue+0x60>
 800600c:	e000      	b.n	8006010 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800600e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	22ff      	movs	r2, #255	; 0xff
 8006014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006018:	f000 ff96 	bl	8006f48 <vPortExitCritical>
}
 800601c:	bf00      	nop
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800602c:	f000 ff62 	bl	8006ef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006034:	2b00      	cmp	r3, #0
 8006036:	d102      	bne.n	800603e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006038:	2301      	movs	r3, #1
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	e001      	b.n	8006042 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800603e:	2300      	movs	r3, #0
 8006040:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006042:	f000 ff81 	bl	8006f48 <vPortExitCritical>

	return xReturn;
 8006046:	68fb      	ldr	r3, [r7, #12]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006050:	b580      	push	{r7, lr}
 8006052:	b08a      	sub	sp, #40	; 0x28
 8006054:	af04      	add	r7, sp, #16
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
 800605c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	2b00      	cmp	r3, #0
 8006062:	d104      	bne.n	800606e <xTaskCreateStatic+0x1e>
 8006064:	f240 2155 	movw	r1, #597	; 0x255
 8006068:	4817      	ldr	r0, [pc, #92]	; (80060c8 <xTaskCreateStatic+0x78>)
 800606a:	f7fe fdd8 	bl	8004c1e <cmr_panic>
		configASSERT( pxTaskBuffer != NULL );
 800606e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006070:	2b00      	cmp	r3, #0
 8006072:	d104      	bne.n	800607e <xTaskCreateStatic+0x2e>
 8006074:	f240 2156 	movw	r1, #598	; 0x256
 8006078:	4814      	ldr	r0, [pc, #80]	; (80060cc <xTaskCreateStatic+0x7c>)
 800607a:	f7fe fdd0 	bl	8004c1e <cmr_panic>

		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006080:	2b00      	cmp	r3, #0
 8006082:	d01a      	beq.n	80060ba <xTaskCreateStatic+0x6a>
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	2b00      	cmp	r3, #0
 8006088:	d017      	beq.n	80060ba <xTaskCreateStatic+0x6a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800608a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608c:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006092:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006094:	2300      	movs	r3, #0
 8006096:	9303      	str	r3, [sp, #12]
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	9302      	str	r3, [sp, #8]
 800609c:	f107 0310 	add.w	r3, r7, #16
 80060a0:	9301      	str	r3, [sp, #4]
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	68b9      	ldr	r1, [r7, #8]
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 f80f 	bl	80060d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060b2:	6978      	ldr	r0, [r7, #20]
 80060b4:	f000 f880 	bl	80061b8 <prvAddNewTaskToReadyList>
 80060b8:	e001      	b.n	80060be <xTaskCreateStatic+0x6e>
		}
		else
		{
			xReturn = NULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 80060be:	693b      	ldr	r3, [r7, #16]
	}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	0800d77c 	.word	0x0800d77c
 80060cc:	0800d7d0 	.word	0x0800d7d0

080060d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80060de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80060e8:	3b01      	subs	r3, #1
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f023 0307 	bic.w	r3, r3, #7
 80060f6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d004      	beq.n	800610c <prvInitialiseNewTask+0x3c>
 8006102:	f240 312b 	movw	r1, #811	; 0x32b
 8006106:	482b      	ldr	r0, [pc, #172]	; (80061b4 <prvInitialiseNewTask+0xe4>)
 8006108:	f7fe fd89 	bl	8004c1e <cmr_panic>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800610c:	2300      	movs	r3, #0
 800610e:	617b      	str	r3, [r7, #20]
 8006110:	e012      	b.n	8006138 <prvInitialiseNewTask+0x68>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	4413      	add	r3, r2
 8006118:	7819      	ldrb	r1, [r3, #0]
 800611a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	4413      	add	r3, r2
 8006120:	3334      	adds	r3, #52	; 0x34
 8006122:	460a      	mov	r2, r1
 8006124:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	4413      	add	r3, r2
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d006      	beq.n	8006140 <prvInitialiseNewTask+0x70>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	3301      	adds	r3, #1
 8006136:	617b      	str	r3, [r7, #20]
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	2b1f      	cmp	r3, #31
 800613c:	d9e9      	bls.n	8006112 <prvInitialiseNewTask+0x42>
 800613e:	e000      	b.n	8006142 <prvInitialiseNewTask+0x72>
		{
			break;
 8006140:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	2b06      	cmp	r3, #6
 800614e:	d901      	bls.n	8006154 <prvInitialiseNewTask+0x84>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006150:	2306      	movs	r3, #6
 8006152:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006156:	6a3a      	ldr	r2, [r7, #32]
 8006158:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800615a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615c:	6a3a      	ldr	r2, [r7, #32]
 800615e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8006160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006162:	2200      	movs	r2, #0
 8006164:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006168:	3304      	adds	r3, #4
 800616a:	4618      	mov	r0, r3
 800616c:	f7ff fb00 	bl	8005770 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006172:	3318      	adds	r3, #24
 8006174:	4618      	mov	r0, r3
 8006176:	f7ff fafb 	bl	8005770 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800617e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	f1c3 0207 	rsb	r2, r3, #7
 8006186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006188:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800618e:	625a      	str	r2, [r3, #36]	; 0x24
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	68f9      	ldr	r1, [r7, #12]
 8006194:	6938      	ldr	r0, [r7, #16]
 8006196:	f000 fdaf 	bl	8006cf8 <pxPortInitialiseStack>
 800619a:	4602      	mov	r2, r0
 800619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <prvInitialiseNewTask+0xdc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061ac:	bf00      	nop
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	0800d824 	.word	0x0800d824

080061b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80061c0:	f000 fe98 	bl	8006ef4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80061c4:	4b2a      	ldr	r3, [pc, #168]	; (8006270 <prvAddNewTaskToReadyList+0xb8>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3301      	adds	r3, #1
 80061ca:	4a29      	ldr	r2, [pc, #164]	; (8006270 <prvAddNewTaskToReadyList+0xb8>)
 80061cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80061ce:	4b29      	ldr	r3, [pc, #164]	; (8006274 <prvAddNewTaskToReadyList+0xbc>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d109      	bne.n	80061ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80061d6:	4a27      	ldr	r2, [pc, #156]	; (8006274 <prvAddNewTaskToReadyList+0xbc>)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80061dc:	4b24      	ldr	r3, [pc, #144]	; (8006270 <prvAddNewTaskToReadyList+0xb8>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d110      	bne.n	8006206 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80061e4:	f000 fc12 	bl	8006a0c <prvInitialiseTaskLists>
 80061e8:	e00d      	b.n	8006206 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80061ea:	4b23      	ldr	r3, [pc, #140]	; (8006278 <prvAddNewTaskToReadyList+0xc0>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d109      	bne.n	8006206 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80061f2:	4b20      	ldr	r3, [pc, #128]	; (8006274 <prvAddNewTaskToReadyList+0xbc>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d802      	bhi.n	8006206 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006200:	4a1c      	ldr	r2, [pc, #112]	; (8006274 <prvAddNewTaskToReadyList+0xbc>)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006206:	4b1d      	ldr	r3, [pc, #116]	; (800627c <prvAddNewTaskToReadyList+0xc4>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3301      	adds	r3, #1
 800620c:	4a1b      	ldr	r2, [pc, #108]	; (800627c <prvAddNewTaskToReadyList+0xc4>)
 800620e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006214:	2201      	movs	r2, #1
 8006216:	409a      	lsls	r2, r3
 8006218:	4b19      	ldr	r3, [pc, #100]	; (8006280 <prvAddNewTaskToReadyList+0xc8>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4313      	orrs	r3, r2
 800621e:	4a18      	ldr	r2, [pc, #96]	; (8006280 <prvAddNewTaskToReadyList+0xc8>)
 8006220:	6013      	str	r3, [r2, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006226:	4613      	mov	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4a15      	ldr	r2, [pc, #84]	; (8006284 <prvAddNewTaskToReadyList+0xcc>)
 8006230:	441a      	add	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	3304      	adds	r3, #4
 8006236:	4619      	mov	r1, r3
 8006238:	4610      	mov	r0, r2
 800623a:	f7ff faa6 	bl	800578a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800623e:	f000 fe83 	bl	8006f48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006242:	4b0d      	ldr	r3, [pc, #52]	; (8006278 <prvAddNewTaskToReadyList+0xc0>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00e      	beq.n	8006268 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800624a:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <prvAddNewTaskToReadyList+0xbc>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006254:	429a      	cmp	r2, r3
 8006256:	d207      	bcs.n	8006268 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006258:	4b0b      	ldr	r3, [pc, #44]	; (8006288 <prvAddNewTaskToReadyList+0xd0>)
 800625a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006268:	bf00      	nop
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	20034640 	.word	0x20034640
 8006274:	20034558 	.word	0x20034558
 8006278:	2003464c 	.word	0x2003464c
 800627c:	2003465c 	.word	0x2003465c
 8006280:	20034648 	.word	0x20034648
 8006284:	2003455c 	.word	0x2003455c
 8006288:	e000ed04 	.word	0xe000ed04

0800628c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006296:	2300      	movs	r3, #0
 8006298:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d104      	bne.n	80062aa <vTaskDelayUntil+0x1e>
 80062a0:	f240 4179 	movw	r1, #1145	; 0x479
 80062a4:	482c      	ldr	r0, [pc, #176]	; (8006358 <vTaskDelayUntil+0xcc>)
 80062a6:	f7fe fcba 	bl	8004c1e <cmr_panic>
		configASSERT( ( xTimeIncrement > 0U ) );
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d104      	bne.n	80062ba <vTaskDelayUntil+0x2e>
 80062b0:	f240 417a 	movw	r1, #1146	; 0x47a
 80062b4:	4829      	ldr	r0, [pc, #164]	; (800635c <vTaskDelayUntil+0xd0>)
 80062b6:	f7fe fcb2 	bl	8004c1e <cmr_panic>
		configASSERT( uxSchedulerSuspended == 0 );
 80062ba:	4b29      	ldr	r3, [pc, #164]	; (8006360 <vTaskDelayUntil+0xd4>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d004      	beq.n	80062cc <vTaskDelayUntil+0x40>
 80062c2:	f240 417b 	movw	r1, #1147	; 0x47b
 80062c6:	4827      	ldr	r0, [pc, #156]	; (8006364 <vTaskDelayUntil+0xd8>)
 80062c8:	f7fe fca9 	bl	8004c1e <cmr_panic>

		vTaskSuspendAll();
 80062cc:	f000 f8ae 	bl	800642c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80062d0:	4b25      	ldr	r3, [pc, #148]	; (8006368 <vTaskDelayUntil+0xdc>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	4413      	add	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d20b      	bcs.n	8006302 <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d211      	bcs.n	8006318 <vTaskDelayUntil+0x8c>
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d90d      	bls.n	8006318 <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
 80062fc:	2301      	movs	r3, #1
 80062fe:	617b      	str	r3, [r7, #20]
 8006300:	e00a      	b.n	8006318 <vTaskDelayUntil+0x8c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	429a      	cmp	r2, r3
 800630a:	d303      	bcc.n	8006314 <vTaskDelayUntil+0x88>
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	429a      	cmp	r2, r3
 8006312:	d901      	bls.n	8006318 <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
 8006314:	2301      	movs	r3, #1
 8006316:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d006      	beq.n	8006332 <vTaskDelayUntil+0xa6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2100      	movs	r1, #0
 800632c:	4618      	mov	r0, r3
 800632e:	f000 fc7d 	bl	8006c2c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006332:	f000 f889 	bl	8006448 <xTaskResumeAll>
 8006336:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d107      	bne.n	800634e <vTaskDelayUntil+0xc2>
		{
			portYIELD_WITHIN_API();
 800633e:	4b0b      	ldr	r3, [pc, #44]	; (800636c <vTaskDelayUntil+0xe0>)
 8006340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006344:	601a      	str	r2, [r3, #0]
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800634e:	bf00      	nop
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	0800d8cc 	.word	0x0800d8cc
 800635c:	0800d91c 	.word	0x0800d91c
 8006360:	20034668 	.word	0x20034668
 8006364:	0800d970 	.word	0x0800d970
 8006368:	20034644 	.word	0x20034644
 800636c:	e000ed04 	.word	0xe000ed04

08006370 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b08a      	sub	sp, #40	; 0x28
 8006374:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006376:	2300      	movs	r3, #0
 8006378:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800637a:	2300      	movs	r3, #0
 800637c:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800637e:	1d3a      	adds	r2, r7, #4
 8006380:	f107 0108 	add.w	r1, r7, #8
 8006384:	f107 030c 	add.w	r3, r7, #12
 8006388:	4618      	mov	r0, r3
 800638a:	f7fe fdd9 	bl	8004f40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800638e:	6879      	ldr	r1, [r7, #4]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	9202      	str	r2, [sp, #8]
 8006396:	9301      	str	r3, [sp, #4]
 8006398:	2300      	movs	r3, #0
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	2300      	movs	r3, #0
 800639e:	460a      	mov	r2, r1
 80063a0:	491b      	ldr	r1, [pc, #108]	; (8006410 <vTaskStartScheduler+0xa0>)
 80063a2:	481c      	ldr	r0, [pc, #112]	; (8006414 <vTaskStartScheduler+0xa4>)
 80063a4:	f7ff fe54 	bl	8006050 <xTaskCreateStatic>
 80063a8:	4603      	mov	r3, r0
 80063aa:	4a1b      	ldr	r2, [pc, #108]	; (8006418 <vTaskStartScheduler+0xa8>)
 80063ac:	6013      	str	r3, [r2, #0]
												( void * ) NULL,
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80063ae:	4b1a      	ldr	r3, [pc, #104]	; (8006418 <vTaskStartScheduler+0xa8>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 80063b6:	2301      	movs	r3, #1
 80063b8:	617b      	str	r3, [r7, #20]
 80063ba:	e001      	b.n	80063c0 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 80063bc:	2300      	movs	r3, #0
 80063be:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d116      	bne.n	80063f4 <vTaskStartScheduler+0x84>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	613b      	str	r3, [r7, #16]
}
 80063d8:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063da:	4b10      	ldr	r3, [pc, #64]	; (800641c <vTaskStartScheduler+0xac>)
 80063dc:	f04f 32ff 	mov.w	r2, #4294967295
 80063e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063e2:	4b0f      	ldr	r3, [pc, #60]	; (8006420 <vTaskStartScheduler+0xb0>)
 80063e4:	2201      	movs	r2, #1
 80063e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80063e8:	4b0e      	ldr	r3, [pc, #56]	; (8006424 <vTaskStartScheduler+0xb4>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063ee:	f000 fcfb 	bl	8006de8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063f2:	e008      	b.n	8006406 <vTaskStartScheduler+0x96>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fa:	d104      	bne.n	8006406 <vTaskStartScheduler+0x96>
 80063fc:	f240 7184 	movw	r1, #1924	; 0x784
 8006400:	4809      	ldr	r0, [pc, #36]	; (8006428 <vTaskStartScheduler+0xb8>)
 8006402:	f7fe fc0c 	bl	8004c1e <cmr_panic>
}
 8006406:	bf00      	nop
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	0800da58 	.word	0x0800da58
 8006414:	080069dd 	.word	0x080069dd
 8006418:	20034664 	.word	0x20034664
 800641c:	20034660 	.word	0x20034660
 8006420:	2003464c 	.word	0x2003464c
 8006424:	20034644 	.word	0x20034644
 8006428:	0800da60 	.word	0x0800da60

0800642c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006430:	4b04      	ldr	r3, [pc, #16]	; (8006444 <vTaskSuspendAll+0x18>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3301      	adds	r3, #1
 8006436:	4a03      	ldr	r2, [pc, #12]	; (8006444 <vTaskSuspendAll+0x18>)
 8006438:	6013      	str	r3, [r2, #0]
}
 800643a:	bf00      	nop
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	20034668 	.word	0x20034668

08006448 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800644e:	2300      	movs	r3, #0
 8006450:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006452:	2300      	movs	r3, #0
 8006454:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006456:	4b3e      	ldr	r3, [pc, #248]	; (8006550 <xTaskResumeAll+0x108>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d104      	bne.n	8006468 <xTaskResumeAll+0x20>
 800645e:	f44f 61fd 	mov.w	r1, #2024	; 0x7e8
 8006462:	483c      	ldr	r0, [pc, #240]	; (8006554 <xTaskResumeAll+0x10c>)
 8006464:	f7fe fbdb 	bl	8004c1e <cmr_panic>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006468:	f000 fd44 	bl	8006ef4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800646c:	4b38      	ldr	r3, [pc, #224]	; (8006550 <xTaskResumeAll+0x108>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3b01      	subs	r3, #1
 8006472:	4a37      	ldr	r2, [pc, #220]	; (8006550 <xTaskResumeAll+0x108>)
 8006474:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006476:	4b36      	ldr	r3, [pc, #216]	; (8006550 <xTaskResumeAll+0x108>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d161      	bne.n	8006542 <xTaskResumeAll+0xfa>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800647e:	4b36      	ldr	r3, [pc, #216]	; (8006558 <xTaskResumeAll+0x110>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d05d      	beq.n	8006542 <xTaskResumeAll+0xfa>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006486:	e02e      	b.n	80064e6 <xTaskResumeAll+0x9e>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006488:	4b34      	ldr	r3, [pc, #208]	; (800655c <xTaskResumeAll+0x114>)
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	3318      	adds	r3, #24
 8006494:	4618      	mov	r0, r3
 8006496:	f7ff f9d5 	bl	8005844 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3304      	adds	r3, #4
 800649e:	4618      	mov	r0, r3
 80064a0:	f7ff f9d0 	bl	8005844 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a8:	2201      	movs	r2, #1
 80064aa:	409a      	lsls	r2, r3
 80064ac:	4b2c      	ldr	r3, [pc, #176]	; (8006560 <xTaskResumeAll+0x118>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	4a2b      	ldr	r2, [pc, #172]	; (8006560 <xTaskResumeAll+0x118>)
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ba:	4613      	mov	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4a28      	ldr	r2, [pc, #160]	; (8006564 <xTaskResumeAll+0x11c>)
 80064c4:	441a      	add	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	3304      	adds	r3, #4
 80064ca:	4619      	mov	r1, r3
 80064cc:	4610      	mov	r0, r2
 80064ce:	f7ff f95c 	bl	800578a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d6:	4b24      	ldr	r3, [pc, #144]	; (8006568 <xTaskResumeAll+0x120>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064dc:	429a      	cmp	r2, r3
 80064de:	d302      	bcc.n	80064e6 <xTaskResumeAll+0x9e>
					{
						xYieldPending = pdTRUE;
 80064e0:	4b22      	ldr	r3, [pc, #136]	; (800656c <xTaskResumeAll+0x124>)
 80064e2:	2201      	movs	r2, #1
 80064e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064e6:	4b1d      	ldr	r3, [pc, #116]	; (800655c <xTaskResumeAll+0x114>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1cc      	bne.n	8006488 <xTaskResumeAll+0x40>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <xTaskResumeAll+0xb0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064f4:	f000 facc 	bl	8006a90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80064f8:	4b1d      	ldr	r3, [pc, #116]	; (8006570 <xTaskResumeAll+0x128>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d010      	beq.n	8006526 <xTaskResumeAll+0xde>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006504:	f000 f85a 	bl	80065bc <xTaskIncrementTick>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <xTaskResumeAll+0xcc>
							{
								xYieldPending = pdTRUE;
 800650e:	4b17      	ldr	r3, [pc, #92]	; (800656c <xTaskResumeAll+0x124>)
 8006510:	2201      	movs	r2, #1
 8006512:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3b01      	subs	r3, #1
 8006518:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1f1      	bne.n	8006504 <xTaskResumeAll+0xbc>

						uxPendedTicks = 0;
 8006520:	4b13      	ldr	r3, [pc, #76]	; (8006570 <xTaskResumeAll+0x128>)
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006526:	4b11      	ldr	r3, [pc, #68]	; (800656c <xTaskResumeAll+0x124>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d009      	beq.n	8006542 <xTaskResumeAll+0xfa>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800652e:	2301      	movs	r3, #1
 8006530:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006532:	4b10      	ldr	r3, [pc, #64]	; (8006574 <xTaskResumeAll+0x12c>)
 8006534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006542:	f000 fd01 	bl	8006f48 <vPortExitCritical>

	return xAlreadyYielded;
 8006546:	68bb      	ldr	r3, [r7, #8]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	20034668 	.word	0x20034668
 8006554:	0800dad0 	.word	0x0800dad0
 8006558:	20034640 	.word	0x20034640
 800655c:	20034618 	.word	0x20034618
 8006560:	20034648 	.word	0x20034648
 8006564:	2003455c 	.word	0x2003455c
 8006568:	20034558 	.word	0x20034558
 800656c:	20034654 	.word	0x20034654
 8006570:	20034650 	.word	0x20034650
 8006574:	e000ed04 	.word	0xe000ed04

08006578 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800657e:	4b05      	ldr	r3, [pc, #20]	; (8006594 <xTaskGetTickCount+0x1c>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006584:	687b      	ldr	r3, [r7, #4]
}
 8006586:	4618      	mov	r0, r3
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	20034644 	.word	0x20034644

08006598 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800659e:	f000 fd73 	bl	8007088 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80065a2:	2300      	movs	r3, #0
 80065a4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80065a6:	4b04      	ldr	r3, [pc, #16]	; (80065b8 <xTaskGetTickCountFromISR+0x20>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80065ac:	683b      	ldr	r3, [r7, #0]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20034644 	.word	0x20034644

080065bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065c2:	2300      	movs	r3, #0
 80065c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065c6:	4b4e      	ldr	r3, [pc, #312]	; (8006700 <xTaskIncrementTick+0x144>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f040 8087 	bne.w	80066de <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80065d0:	4b4c      	ldr	r3, [pc, #304]	; (8006704 <xTaskIncrementTick+0x148>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3301      	adds	r3, #1
 80065d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065d8:	4a4a      	ldr	r2, [pc, #296]	; (8006704 <xTaskIncrementTick+0x148>)
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d11a      	bne.n	800661a <xTaskIncrementTick+0x5e>
		{
			taskSWITCH_DELAYED_LISTS();
 80065e4:	4b48      	ldr	r3, [pc, #288]	; (8006708 <xTaskIncrementTick+0x14c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d004      	beq.n	80065f8 <xTaskIncrementTick+0x3c>
 80065ee:	f640 11d9 	movw	r1, #2521	; 0x9d9
 80065f2:	4846      	ldr	r0, [pc, #280]	; (800670c <xTaskIncrementTick+0x150>)
 80065f4:	f7fe fb13 	bl	8004c1e <cmr_panic>
 80065f8:	4b43      	ldr	r3, [pc, #268]	; (8006708 <xTaskIncrementTick+0x14c>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	60fb      	str	r3, [r7, #12]
 80065fe:	4b44      	ldr	r3, [pc, #272]	; (8006710 <xTaskIncrementTick+0x154>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a41      	ldr	r2, [pc, #260]	; (8006708 <xTaskIncrementTick+0x14c>)
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	4a42      	ldr	r2, [pc, #264]	; (8006710 <xTaskIncrementTick+0x154>)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6013      	str	r3, [r2, #0]
 800660c:	4b41      	ldr	r3, [pc, #260]	; (8006714 <xTaskIncrementTick+0x158>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3301      	adds	r3, #1
 8006612:	4a40      	ldr	r2, [pc, #256]	; (8006714 <xTaskIncrementTick+0x158>)
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	f000 fa3b 	bl	8006a90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800661a:	4b3f      	ldr	r3, [pc, #252]	; (8006718 <xTaskIncrementTick+0x15c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	429a      	cmp	r2, r3
 8006622:	d34d      	bcc.n	80066c0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006624:	4b38      	ldr	r3, [pc, #224]	; (8006708 <xTaskIncrementTick+0x14c>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <xTaskIncrementTick+0x76>
 800662e:	2301      	movs	r3, #1
 8006630:	e000      	b.n	8006634 <xTaskIncrementTick+0x78>
 8006632:	2300      	movs	r3, #0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d004      	beq.n	8006642 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006638:	4b37      	ldr	r3, [pc, #220]	; (8006718 <xTaskIncrementTick+0x15c>)
 800663a:	f04f 32ff 	mov.w	r2, #4294967295
 800663e:	601a      	str	r2, [r3, #0]
					break;
 8006640:	e03e      	b.n	80066c0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006642:	4b31      	ldr	r3, [pc, #196]	; (8006708 <xTaskIncrementTick+0x14c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	429a      	cmp	r2, r3
 8006658:	d203      	bcs.n	8006662 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800665a:	4a2f      	ldr	r2, [pc, #188]	; (8006718 <xTaskIncrementTick+0x15c>)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6013      	str	r3, [r2, #0]
						break;
 8006660:	e02e      	b.n	80066c0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	3304      	adds	r3, #4
 8006666:	4618      	mov	r0, r3
 8006668:	f7ff f8ec 	bl	8005844 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006670:	2b00      	cmp	r3, #0
 8006672:	d004      	beq.n	800667e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	3318      	adds	r3, #24
 8006678:	4618      	mov	r0, r3
 800667a:	f7ff f8e3 	bl	8005844 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006682:	2201      	movs	r2, #1
 8006684:	409a      	lsls	r2, r3
 8006686:	4b25      	ldr	r3, [pc, #148]	; (800671c <xTaskIncrementTick+0x160>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4313      	orrs	r3, r2
 800668c:	4a23      	ldr	r2, [pc, #140]	; (800671c <xTaskIncrementTick+0x160>)
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006694:	4613      	mov	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4a20      	ldr	r2, [pc, #128]	; (8006720 <xTaskIncrementTick+0x164>)
 800669e:	441a      	add	r2, r3
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	3304      	adds	r3, #4
 80066a4:	4619      	mov	r1, r3
 80066a6:	4610      	mov	r0, r2
 80066a8:	f7ff f86f 	bl	800578a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b0:	4b1c      	ldr	r3, [pc, #112]	; (8006724 <xTaskIncrementTick+0x168>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d3b4      	bcc.n	8006624 <xTaskIncrementTick+0x68>
						{
							xSwitchRequired = pdTRUE;
 80066ba:	2301      	movs	r3, #1
 80066bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066be:	e7b1      	b.n	8006624 <xTaskIncrementTick+0x68>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066c0:	4b18      	ldr	r3, [pc, #96]	; (8006724 <xTaskIncrementTick+0x168>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c6:	4916      	ldr	r1, [pc, #88]	; (8006720 <xTaskIncrementTick+0x164>)
 80066c8:	4613      	mov	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	440b      	add	r3, r1
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d907      	bls.n	80066e8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80066d8:	2301      	movs	r3, #1
 80066da:	617b      	str	r3, [r7, #20]
 80066dc:	e004      	b.n	80066e8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80066de:	4b12      	ldr	r3, [pc, #72]	; (8006728 <xTaskIncrementTick+0x16c>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3301      	adds	r3, #1
 80066e4:	4a10      	ldr	r2, [pc, #64]	; (8006728 <xTaskIncrementTick+0x16c>)
 80066e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80066e8:	4b10      	ldr	r3, [pc, #64]	; (800672c <xTaskIncrementTick+0x170>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80066f0:	2301      	movs	r3, #1
 80066f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80066f4:	697b      	ldr	r3, [r7, #20]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3718      	adds	r7, #24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	20034668 	.word	0x20034668
 8006704:	20034644 	.word	0x20034644
 8006708:	20034610 	.word	0x20034610
 800670c:	0800db68 	.word	0x0800db68
 8006710:	20034614 	.word	0x20034614
 8006714:	20034658 	.word	0x20034658
 8006718:	20034660 	.word	0x20034660
 800671c:	20034648 	.word	0x20034648
 8006720:	2003455c 	.word	0x2003455c
 8006724:	20034558 	.word	0x20034558
 8006728:	20034650 	.word	0x20034650
 800672c:	20034654 	.word	0x20034654

08006730 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006736:	4b23      	ldr	r3, [pc, #140]	; (80067c4 <vTaskSwitchContext+0x94>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800673e:	4b22      	ldr	r3, [pc, #136]	; (80067c8 <vTaskSwitchContext+0x98>)
 8006740:	2201      	movs	r2, #1
 8006742:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006744:	e039      	b.n	80067ba <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 8006746:	4b20      	ldr	r3, [pc, #128]	; (80067c8 <vTaskSwitchContext+0x98>)
 8006748:	2200      	movs	r2, #0
 800674a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800674c:	4b1f      	ldr	r3, [pc, #124]	; (80067cc <vTaskSwitchContext+0x9c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	fab3 f383 	clz	r3, r3
 8006758:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	f1c3 031f 	rsb	r3, r3, #31
 8006760:	60fb      	str	r3, [r7, #12]
 8006762:	491b      	ldr	r1, [pc, #108]	; (80067d0 <vTaskSwitchContext+0xa0>)
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	4613      	mov	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	440b      	add	r3, r1
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d104      	bne.n	8006780 <vTaskSwitchContext+0x50>
 8006776:	f640 21f6 	movw	r1, #2806	; 0xaf6
 800677a:	4816      	ldr	r0, [pc, #88]	; (80067d4 <vTaskSwitchContext+0xa4>)
 800677c:	f7fe fa4f 	bl	8004c1e <cmr_panic>
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	4613      	mov	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4a11      	ldr	r2, [pc, #68]	; (80067d0 <vTaskSwitchContext+0xa0>)
 800678c:	4413      	add	r3, r2
 800678e:	60bb      	str	r3, [r7, #8]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	605a      	str	r2, [r3, #4]
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	3308      	adds	r3, #8
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d104      	bne.n	80067b0 <vTaskSwitchContext+0x80>
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	605a      	str	r2, [r3, #4]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	4a08      	ldr	r2, [pc, #32]	; (80067d8 <vTaskSwitchContext+0xa8>)
 80067b8:	6013      	str	r3, [r2, #0]
}
 80067ba:	bf00      	nop
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	20034668 	.word	0x20034668
 80067c8:	20034654 	.word	0x20034654
 80067cc:	20034648 	.word	0x20034648
 80067d0:	2003455c 	.word	0x2003455c
 80067d4:	0800dbd0 	.word	0x0800dbd0
 80067d8:	20034558 	.word	0x20034558

080067dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d104      	bne.n	80067f6 <vTaskPlaceOnEventList+0x1a>
 80067ec:	f640 3106 	movw	r1, #2822	; 0xb06
 80067f0:	4808      	ldr	r0, [pc, #32]	; (8006814 <vTaskPlaceOnEventList+0x38>)
 80067f2:	f7fe fa14 	bl	8004c1e <cmr_panic>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067f6:	4b08      	ldr	r3, [pc, #32]	; (8006818 <vTaskPlaceOnEventList+0x3c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3318      	adds	r3, #24
 80067fc:	4619      	mov	r1, r3
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7fe ffe7 	bl	80057d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006804:	2101      	movs	r1, #1
 8006806:	6838      	ldr	r0, [r7, #0]
 8006808:	f000 fa10 	bl	8006c2c <prvAddCurrentTaskToDelayedList>
}
 800680c:	bf00      	nop
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	0800dc54 	.word	0x0800dc54
 8006818:	20034558 	.word	0x20034558

0800681c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d104      	bne.n	800683c <xTaskRemoveFromEventList+0x20>
 8006832:	f640 3161 	movw	r1, #2913	; 0xb61
 8006836:	4821      	ldr	r0, [pc, #132]	; (80068bc <xTaskRemoveFromEventList+0xa0>)
 8006838:	f7fe f9f1 	bl	8004c1e <cmr_panic>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	3318      	adds	r3, #24
 8006840:	4618      	mov	r0, r3
 8006842:	f7fe ffff 	bl	8005844 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006846:	4b1e      	ldr	r3, [pc, #120]	; (80068c0 <xTaskRemoveFromEventList+0xa4>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d11c      	bne.n	8006888 <xTaskRemoveFromEventList+0x6c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	3304      	adds	r3, #4
 8006852:	4618      	mov	r0, r3
 8006854:	f7fe fff6 	bl	8005844 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685c:	2201      	movs	r2, #1
 800685e:	409a      	lsls	r2, r3
 8006860:	4b18      	ldr	r3, [pc, #96]	; (80068c4 <xTaskRemoveFromEventList+0xa8>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4313      	orrs	r3, r2
 8006866:	4a17      	ldr	r2, [pc, #92]	; (80068c4 <xTaskRemoveFromEventList+0xa8>)
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800686e:	4613      	mov	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4a14      	ldr	r2, [pc, #80]	; (80068c8 <xTaskRemoveFromEventList+0xac>)
 8006878:	441a      	add	r2, r3
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	3304      	adds	r3, #4
 800687e:	4619      	mov	r1, r3
 8006880:	4610      	mov	r0, r2
 8006882:	f7fe ff82 	bl	800578a <vListInsertEnd>
 8006886:	e005      	b.n	8006894 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	3318      	adds	r3, #24
 800688c:	4619      	mov	r1, r3
 800688e:	480f      	ldr	r0, [pc, #60]	; (80068cc <xTaskRemoveFromEventList+0xb0>)
 8006890:	f7fe ff7b 	bl	800578a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006898:	4b0d      	ldr	r3, [pc, #52]	; (80068d0 <xTaskRemoveFromEventList+0xb4>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689e:	429a      	cmp	r2, r3
 80068a0:	d905      	bls.n	80068ae <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80068a2:	2301      	movs	r3, #1
 80068a4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80068a6:	4b0b      	ldr	r3, [pc, #44]	; (80068d4 <xTaskRemoveFromEventList+0xb8>)
 80068a8:	2201      	movs	r2, #1
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	e001      	b.n	80068b2 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80068ae:	2300      	movs	r3, #0
 80068b0:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80068b2:	68fb      	ldr	r3, [r7, #12]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	0800dcf4 	.word	0x0800dcf4
 80068c0:	20034668 	.word	0x20034668
 80068c4:	20034648 	.word	0x20034648
 80068c8:	2003455c 	.word	0x2003455c
 80068cc:	20034618 	.word	0x20034618
 80068d0:	20034558 	.word	0x20034558
 80068d4:	20034654 	.word	0x20034654

080068d8 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d104      	bne.n	80068f0 <vTaskSetTimeOutState+0x18>
 80068e6:	f640 31c1 	movw	r1, #3009	; 0xbc1
 80068ea:	4807      	ldr	r0, [pc, #28]	; (8006908 <vTaskSetTimeOutState+0x30>)
 80068ec:	f7fe f997 	bl	8004c1e <cmr_panic>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068f0:	4b06      	ldr	r3, [pc, #24]	; (800690c <vTaskSetTimeOutState+0x34>)
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068f8:	4b05      	ldr	r3, [pc, #20]	; (8006910 <vTaskSetTimeOutState+0x38>)
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	605a      	str	r2, [r3, #4]
}
 8006900:	bf00      	nop
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	0800dd9c 	.word	0x0800dd9c
 800690c:	20034658 	.word	0x20034658
 8006910:	20034644 	.word	0x20034644

08006914 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d104      	bne.n	800692e <xTaskCheckForTimeOut+0x1a>
 8006924:	f640 31cb 	movw	r1, #3019	; 0xbcb
 8006928:	4822      	ldr	r0, [pc, #136]	; (80069b4 <xTaskCheckForTimeOut+0xa0>)
 800692a:	f7fe f978 	bl	8004c1e <cmr_panic>
	configASSERT( pxTicksToWait );
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d104      	bne.n	800693e <xTaskCheckForTimeOut+0x2a>
 8006934:	f640 31cc 	movw	r1, #3020	; 0xbcc
 8006938:	481f      	ldr	r0, [pc, #124]	; (80069b8 <xTaskCheckForTimeOut+0xa4>)
 800693a:	f7fe f970 	bl	8004c1e <cmr_panic>

	taskENTER_CRITICAL();
 800693e:	f000 fad9 	bl	8006ef4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006942:	4b1e      	ldr	r3, [pc, #120]	; (80069bc <xTaskCheckForTimeOut+0xa8>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006950:	d102      	bne.n	8006958 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006952:	2300      	movs	r3, #0
 8006954:	60fb      	str	r3, [r7, #12]
 8006956:	e026      	b.n	80069a6 <xTaskCheckForTimeOut+0x92>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	4b18      	ldr	r3, [pc, #96]	; (80069c0 <xTaskCheckForTimeOut+0xac>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	429a      	cmp	r2, r3
 8006962:	d007      	beq.n	8006974 <xTaskCheckForTimeOut+0x60>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	429a      	cmp	r2, r3
 800696c:	d302      	bcc.n	8006974 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800696e:	2301      	movs	r3, #1
 8006970:	60fb      	str	r3, [r7, #12]
 8006972:	e018      	b.n	80069a6 <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	1ad2      	subs	r2, r2, r3
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	429a      	cmp	r2, r3
 8006982:	d20e      	bcs.n	80069a2 <xTaskCheckForTimeOut+0x8e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6859      	ldr	r1, [r3, #4]
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	1acb      	subs	r3, r1, r3
 8006990:	441a      	add	r2, r3
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7ff ff9e 	bl	80068d8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800699c:	2300      	movs	r3, #0
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	e001      	b.n	80069a6 <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
 80069a2:	2301      	movs	r3, #1
 80069a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069a6:	f000 facf 	bl	8006f48 <vPortExitCritical>

	return xReturn;
 80069aa:	68fb      	ldr	r3, [r7, #12]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	0800dd9c 	.word	0x0800dd9c
 80069b8:	0800dde4 	.word	0x0800dde4
 80069bc:	20034644 	.word	0x20034644
 80069c0:	20034658 	.word	0x20034658

080069c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069c4:	b480      	push	{r7}
 80069c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80069c8:	4b03      	ldr	r3, [pc, #12]	; (80069d8 <vTaskMissedYield+0x14>)
 80069ca:	2201      	movs	r2, #1
 80069cc:	601a      	str	r2, [r3, #0]
}
 80069ce:	bf00      	nop
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	20034654 	.word	0x20034654

080069dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069e4:	f000 f84c 	bl	8006a80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069e8:	4b06      	ldr	r3, [pc, #24]	; (8006a04 <prvIdleTask+0x28>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d9f9      	bls.n	80069e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80069f0:	4b05      	ldr	r3, [pc, #20]	; (8006a08 <prvIdleTask+0x2c>)
 80069f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a00:	e7f0      	b.n	80069e4 <prvIdleTask+0x8>
 8006a02:	bf00      	nop
 8006a04:	2003455c 	.word	0x2003455c
 8006a08:	e000ed04 	.word	0xe000ed04

08006a0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a12:	2300      	movs	r3, #0
 8006a14:	607b      	str	r3, [r7, #4]
 8006a16:	e00c      	b.n	8006a32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4a10      	ldr	r2, [pc, #64]	; (8006a64 <prvInitialiseTaskLists+0x58>)
 8006a24:	4413      	add	r3, r2
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fe fe82 	bl	8005730 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	607b      	str	r3, [r7, #4]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2b06      	cmp	r3, #6
 8006a36:	d9ef      	bls.n	8006a18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a38:	480b      	ldr	r0, [pc, #44]	; (8006a68 <prvInitialiseTaskLists+0x5c>)
 8006a3a:	f7fe fe79 	bl	8005730 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a3e:	480b      	ldr	r0, [pc, #44]	; (8006a6c <prvInitialiseTaskLists+0x60>)
 8006a40:	f7fe fe76 	bl	8005730 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a44:	480a      	ldr	r0, [pc, #40]	; (8006a70 <prvInitialiseTaskLists+0x64>)
 8006a46:	f7fe fe73 	bl	8005730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a4a:	480a      	ldr	r0, [pc, #40]	; (8006a74 <prvInitialiseTaskLists+0x68>)
 8006a4c:	f7fe fe70 	bl	8005730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a50:	4b09      	ldr	r3, [pc, #36]	; (8006a78 <prvInitialiseTaskLists+0x6c>)
 8006a52:	4a05      	ldr	r2, [pc, #20]	; (8006a68 <prvInitialiseTaskLists+0x5c>)
 8006a54:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a56:	4b09      	ldr	r3, [pc, #36]	; (8006a7c <prvInitialiseTaskLists+0x70>)
 8006a58:	4a04      	ldr	r2, [pc, #16]	; (8006a6c <prvInitialiseTaskLists+0x60>)
 8006a5a:	601a      	str	r2, [r3, #0]
}
 8006a5c:	bf00      	nop
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	2003455c 	.word	0x2003455c
 8006a68:	200345e8 	.word	0x200345e8
 8006a6c:	200345fc 	.word	0x200345fc
 8006a70:	20034618 	.word	0x20034618
 8006a74:	2003462c 	.word	0x2003462c
 8006a78:	20034610 	.word	0x20034610
 8006a7c:	20034614 	.word	0x20034614

08006a80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a80:	b480      	push	{r7}
 8006a82:	af00      	add	r7, sp, #0
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a84:	bf00      	nop
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
	...

08006a90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a96:	4b0f      	ldr	r3, [pc, #60]	; (8006ad4 <prvResetNextTaskUnblockTime+0x44>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d101      	bne.n	8006aa4 <prvResetNextTaskUnblockTime+0x14>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e000      	b.n	8006aa6 <prvResetNextTaskUnblockTime+0x16>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d004      	beq.n	8006ab4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006aaa:	4b0b      	ldr	r3, [pc, #44]	; (8006ad8 <prvResetNextTaskUnblockTime+0x48>)
 8006aac:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ab2:	e008      	b.n	8006ac6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ab4:	4b07      	ldr	r3, [pc, #28]	; (8006ad4 <prvResetNextTaskUnblockTime+0x44>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	4a05      	ldr	r2, [pc, #20]	; (8006ad8 <prvResetNextTaskUnblockTime+0x48>)
 8006ac4:	6013      	str	r3, [r2, #0]
}
 8006ac6:	bf00      	nop
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	20034610 	.word	0x20034610
 8006ad8:	20034660 	.word	0x20034660

08006adc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ae2:	4b0b      	ldr	r3, [pc, #44]	; (8006b10 <xTaskGetSchedulerState+0x34>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d102      	bne.n	8006af0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006aea:	2301      	movs	r3, #1
 8006aec:	607b      	str	r3, [r7, #4]
 8006aee:	e008      	b.n	8006b02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006af0:	4b08      	ldr	r3, [pc, #32]	; (8006b14 <xTaskGetSchedulerState+0x38>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d102      	bne.n	8006afe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006af8:	2302      	movs	r3, #2
 8006afa:	607b      	str	r3, [r7, #4]
 8006afc:	e001      	b.n	8006b02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006afe:	2300      	movs	r3, #0
 8006b00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b02:	687b      	ldr	r3, [r7, #4]
	}
 8006b04:	4618      	mov	r0, r3
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	2003464c 	.word	0x2003464c
 8006b14:	20034668 	.word	0x20034668

08006b18 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d062      	beq.n	8006bf0 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b2e:	4b32      	ldr	r3, [pc, #200]	; (8006bf8 <vTaskPriorityInherit+0xe0>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d25b      	bcs.n	8006bf0 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	db06      	blt.n	8006b4e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b40:	4b2d      	ldr	r3, [pc, #180]	; (8006bf8 <vTaskPriorityInherit+0xe0>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b46:	f1c3 0207 	rsb	r2, r3, #7
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6959      	ldr	r1, [r3, #20]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b56:	4613      	mov	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4a27      	ldr	r2, [pc, #156]	; (8006bfc <vTaskPriorityInherit+0xe4>)
 8006b60:	4413      	add	r3, r2
 8006b62:	4299      	cmp	r1, r3
 8006b64:	d101      	bne.n	8006b6a <vTaskPriorityInherit+0x52>
 8006b66:	2301      	movs	r3, #1
 8006b68:	e000      	b.n	8006b6c <vTaskPriorityInherit+0x54>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d03a      	beq.n	8006be6 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3304      	adds	r3, #4
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fe fe65 	bl	8005844 <uxListRemove>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d115      	bne.n	8006bac <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b84:	491d      	ldr	r1, [pc, #116]	; (8006bfc <vTaskPriorityInherit+0xe4>)
 8006b86:	4613      	mov	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	440b      	add	r3, r1
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10a      	bne.n	8006bac <vTaskPriorityInherit+0x94>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba0:	43da      	mvns	r2, r3
 8006ba2:	4b17      	ldr	r3, [pc, #92]	; (8006c00 <vTaskPriorityInherit+0xe8>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	4a15      	ldr	r2, [pc, #84]	; (8006c00 <vTaskPriorityInherit+0xe8>)
 8006baa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006bac:	4b12      	ldr	r3, [pc, #72]	; (8006bf8 <vTaskPriorityInherit+0xe0>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bba:	2201      	movs	r2, #1
 8006bbc:	409a      	lsls	r2, r3
 8006bbe:	4b10      	ldr	r3, [pc, #64]	; (8006c00 <vTaskPriorityInherit+0xe8>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	4a0e      	ldr	r2, [pc, #56]	; (8006c00 <vTaskPriorityInherit+0xe8>)
 8006bc6:	6013      	str	r3, [r2, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bcc:	4613      	mov	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4a09      	ldr	r2, [pc, #36]	; (8006bfc <vTaskPriorityInherit+0xe4>)
 8006bd6:	441a      	add	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	3304      	adds	r3, #4
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4610      	mov	r0, r2
 8006be0:	f7fe fdd3 	bl	800578a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006be4:	e004      	b.n	8006bf0 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006be6:	4b04      	ldr	r3, [pc, #16]	; (8006bf8 <vTaskPriorityInherit+0xe0>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8006bf0:	bf00      	nop
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	20034558 	.word	0x20034558
 8006bfc:	2003455c 	.word	0x2003455c
 8006c00:	20034648 	.word	0x20034648

08006c04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006c04:	b480      	push	{r7}
 8006c06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006c08:	4b07      	ldr	r3, [pc, #28]	; (8006c28 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d004      	beq.n	8006c1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006c10:	4b05      	ldr	r3, [pc, #20]	; (8006c28 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c16:	3201      	adds	r2, #1
 8006c18:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 8006c1a:	4b03      	ldr	r3, [pc, #12]	; (8006c28 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
	}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	20034558 	.word	0x20034558

08006c2c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c36:	4b29      	ldr	r3, [pc, #164]	; (8006cdc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c3c:	4b28      	ldr	r3, [pc, #160]	; (8006ce0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3304      	adds	r3, #4
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fe fdfe 	bl	8005844 <uxListRemove>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10b      	bne.n	8006c66 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006c4e:	4b24      	ldr	r3, [pc, #144]	; (8006ce0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	2201      	movs	r2, #1
 8006c56:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5a:	43da      	mvns	r2, r3
 8006c5c:	4b21      	ldr	r3, [pc, #132]	; (8006ce4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4013      	ands	r3, r2
 8006c62:	4a20      	ldr	r2, [pc, #128]	; (8006ce4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c64:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6c:	d10a      	bne.n	8006c84 <prvAddCurrentTaskToDelayedList+0x58>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d007      	beq.n	8006c84 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c74:	4b1a      	ldr	r3, [pc, #104]	; (8006ce0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3304      	adds	r3, #4
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	481a      	ldr	r0, [pc, #104]	; (8006ce8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006c7e:	f7fe fd84 	bl	800578a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c82:	e026      	b.n	8006cd2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4413      	add	r3, r2
 8006c8a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c8c:	4b14      	ldr	r3, [pc, #80]	; (8006ce0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d209      	bcs.n	8006cb0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c9c:	4b13      	ldr	r3, [pc, #76]	; (8006cec <prvAddCurrentTaskToDelayedList+0xc0>)
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	4b0f      	ldr	r3, [pc, #60]	; (8006ce0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	4610      	mov	r0, r2
 8006caa:	f7fe fd92 	bl	80057d2 <vListInsert>
}
 8006cae:	e010      	b.n	8006cd2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cb0:	4b0f      	ldr	r3, [pc, #60]	; (8006cf0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	4b0a      	ldr	r3, [pc, #40]	; (8006ce0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	3304      	adds	r3, #4
 8006cba:	4619      	mov	r1, r3
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	f7fe fd88 	bl	80057d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006cc2:	4b0c      	ldr	r3, [pc, #48]	; (8006cf4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d202      	bcs.n	8006cd2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006ccc:	4a09      	ldr	r2, [pc, #36]	; (8006cf4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	6013      	str	r3, [r2, #0]
}
 8006cd2:	bf00      	nop
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	20034644 	.word	0x20034644
 8006ce0:	20034558 	.word	0x20034558
 8006ce4:	20034648 	.word	0x20034648
 8006ce8:	2003462c 	.word	0x2003462c
 8006cec:	20034614 	.word	0x20034614
 8006cf0:	20034610 	.word	0x20034610
 8006cf4:	20034660 	.word	0x20034660

08006cf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	3b04      	subs	r3, #4
 8006d08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	3b04      	subs	r3, #4
 8006d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	f023 0201 	bic.w	r2, r3, #1
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	3b04      	subs	r3, #4
 8006d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d28:	4a0c      	ldr	r2, [pc, #48]	; (8006d5c <pxPortInitialiseStack+0x64>)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	3b14      	subs	r3, #20
 8006d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	3b04      	subs	r3, #4
 8006d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f06f 0202 	mvn.w	r2, #2
 8006d46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	3b20      	subs	r3, #32
 8006d4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	08006d61 	.word	0x08006d61

08006d60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d66:	4b0a      	ldr	r3, [pc, #40]	; (8006d90 <prvTaskExitError+0x30>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6e:	d004      	beq.n	8006d7a <prvTaskExitError+0x1a>
 8006d70:	f240 110b 	movw	r1, #267	; 0x10b
 8006d74:	4807      	ldr	r0, [pc, #28]	; (8006d94 <prvTaskExitError+0x34>)
 8006d76:	f7fd ff52 	bl	8004c1e <cmr_panic>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	607b      	str	r3, [r7, #4]
}
 8006d8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	for( ;; );
 8006d8e:	e7fe      	b.n	8006d8e <prvTaskExitError+0x2e>
 8006d90:	200001d0 	.word	0x200001d0
 8006d94:	0800ded8 	.word	0x0800ded8
	...

08006da0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006da0:	4b07      	ldr	r3, [pc, #28]	; (8006dc0 <pxCurrentTCBConst2>)
 8006da2:	6819      	ldr	r1, [r3, #0]
 8006da4:	6808      	ldr	r0, [r1, #0]
 8006da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006daa:	f380 8809 	msr	PSP, r0
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f04f 0000 	mov.w	r0, #0
 8006db6:	f380 8811 	msr	BASEPRI, r0
 8006dba:	4770      	bx	lr
 8006dbc:	f3af 8000 	nop.w

08006dc0 <pxCurrentTCBConst2>:
 8006dc0:	20034558 	.word	0x20034558
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006dc4:	bf00      	nop
 8006dc6:	bf00      	nop

08006dc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006dc8:	4806      	ldr	r0, [pc, #24]	; (8006de4 <prvPortStartFirstTask+0x1c>)
 8006dca:	6800      	ldr	r0, [r0, #0]
 8006dcc:	6800      	ldr	r0, [r0, #0]
 8006dce:	f380 8808 	msr	MSP, r0
 8006dd2:	b662      	cpsie	i
 8006dd4:	b661      	cpsie	f
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	df00      	svc	0
 8006de0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006de2:	bf00      	nop
 8006de4:	e000ed08 	.word	0xe000ed08

08006de8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006dee:	4b36      	ldr	r3, [pc, #216]	; (8006ec8 <xPortStartScheduler+0xe0>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a36      	ldr	r2, [pc, #216]	; (8006ecc <xPortStartScheduler+0xe4>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d104      	bne.n	8006e02 <xPortStartScheduler+0x1a>
 8006df8:	f240 1141 	movw	r1, #321	; 0x141
 8006dfc:	4834      	ldr	r0, [pc, #208]	; (8006ed0 <xPortStartScheduler+0xe8>)
 8006dfe:	f7fd ff0e 	bl	8004c1e <cmr_panic>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e02:	4b31      	ldr	r3, [pc, #196]	; (8006ec8 <xPortStartScheduler+0xe0>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a33      	ldr	r2, [pc, #204]	; (8006ed4 <xPortStartScheduler+0xec>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d104      	bne.n	8006e16 <xPortStartScheduler+0x2e>
 8006e0c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8006e10:	4831      	ldr	r0, [pc, #196]	; (8006ed8 <xPortStartScheduler+0xf0>)
 8006e12:	f7fd ff04 	bl	8004c1e <cmr_panic>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e16:	4b31      	ldr	r3, [pc, #196]	; (8006edc <xPortStartScheduler+0xf4>)
 8006e18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	22ff      	movs	r2, #255	; 0xff
 8006e26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e30:	79fb      	ldrb	r3, [r7, #7]
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	4b29      	ldr	r3, [pc, #164]	; (8006ee0 <xPortStartScheduler+0xf8>)
 8006e3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e3e:	4b29      	ldr	r3, [pc, #164]	; (8006ee4 <xPortStartScheduler+0xfc>)
 8006e40:	2207      	movs	r2, #7
 8006e42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e44:	e009      	b.n	8006e5a <xPortStartScheduler+0x72>
		{
			ulMaxPRIGROUPValue--;
 8006e46:	4b27      	ldr	r3, [pc, #156]	; (8006ee4 <xPortStartScheduler+0xfc>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	4a25      	ldr	r2, [pc, #148]	; (8006ee4 <xPortStartScheduler+0xfc>)
 8006e4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e50:	79fb      	ldrb	r3, [r7, #7]
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e5a:	79fb      	ldrb	r3, [r7, #7]
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e62:	2b80      	cmp	r3, #128	; 0x80
 8006e64:	d0ef      	beq.n	8006e46 <xPortStartScheduler+0x5e>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e66:	4b1f      	ldr	r3, [pc, #124]	; (8006ee4 <xPortStartScheduler+0xfc>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	021b      	lsls	r3, r3, #8
 8006e6c:	4a1d      	ldr	r2, [pc, #116]	; (8006ee4 <xPortStartScheduler+0xfc>)
 8006e6e:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e70:	4b1c      	ldr	r3, [pc, #112]	; (8006ee4 <xPortStartScheduler+0xfc>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e78:	4a1a      	ldr	r2, [pc, #104]	; (8006ee4 <xPortStartScheduler+0xfc>)
 8006e7a:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e84:	4b18      	ldr	r3, [pc, #96]	; (8006ee8 <xPortStartScheduler+0x100>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a17      	ldr	r2, [pc, #92]	; (8006ee8 <xPortStartScheduler+0x100>)
 8006e8a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e8e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e90:	4b15      	ldr	r3, [pc, #84]	; (8006ee8 <xPortStartScheduler+0x100>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a14      	ldr	r2, [pc, #80]	; (8006ee8 <xPortStartScheduler+0x100>)
 8006e96:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e9a:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e9c:	f000 f8ce 	bl	800703c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ea0:	4b12      	ldr	r3, [pc, #72]	; (8006eec <xPortStartScheduler+0x104>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ea6:	f000 f8e5 	bl	8007074 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006eaa:	4b11      	ldr	r3, [pc, #68]	; (8006ef0 <xPortStartScheduler+0x108>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a10      	ldr	r2, [pc, #64]	; (8006ef0 <xPortStartScheduler+0x108>)
 8006eb0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006eb4:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006eb6:	f7ff ff87 	bl	8006dc8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8006eba:	f7ff ff51 	bl	8006d60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	e000ed00 	.word	0xe000ed00
 8006ecc:	410fc271 	.word	0x410fc271
 8006ed0:	0800df44 	.word	0x0800df44
 8006ed4:	410fc270 	.word	0x410fc270
 8006ed8:	0800dfb8 	.word	0x0800dfb8
 8006edc:	e000e400 	.word	0xe000e400
 8006ee0:	2003466c 	.word	0x2003466c
 8006ee4:	20034670 	.word	0x20034670
 8006ee8:	e000ed20 	.word	0xe000ed20
 8006eec:	200001d0 	.word	0x200001d0
 8006ef0:	e000ef34 	.word	0xe000ef34

08006ef4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	607b      	str	r3, [r7, #4]
}
 8006f0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f0e:	4b0b      	ldr	r3, [pc, #44]	; (8006f3c <vPortEnterCritical+0x48>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3301      	adds	r3, #1
 8006f14:	4a09      	ldr	r2, [pc, #36]	; (8006f3c <vPortEnterCritical+0x48>)
 8006f16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f18:	4b08      	ldr	r3, [pc, #32]	; (8006f3c <vPortEnterCritical+0x48>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d109      	bne.n	8006f34 <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f20:	4b07      	ldr	r3, [pc, #28]	; (8006f40 <vPortEnterCritical+0x4c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d004      	beq.n	8006f34 <vPortEnterCritical+0x40>
 8006f2a:	f240 11a3 	movw	r1, #419	; 0x1a3
 8006f2e:	4805      	ldr	r0, [pc, #20]	; (8006f44 <vPortEnterCritical+0x50>)
 8006f30:	f7fd fe75 	bl	8004c1e <cmr_panic>
	}
}
 8006f34:	bf00      	nop
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	200001d0 	.word	0x200001d0
 8006f40:	e000ed04 	.word	0xe000ed04
 8006f44:	0800e09c 	.word	0x0800e09c

08006f48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f4e:	4b0e      	ldr	r3, [pc, #56]	; (8006f88 <vPortExitCritical+0x40>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d104      	bne.n	8006f60 <vPortExitCritical+0x18>
 8006f56:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006f5a:	480c      	ldr	r0, [pc, #48]	; (8006f8c <vPortExitCritical+0x44>)
 8006f5c:	f7fd fe5f 	bl	8004c1e <cmr_panic>
	uxCriticalNesting--;
 8006f60:	4b09      	ldr	r3, [pc, #36]	; (8006f88 <vPortExitCritical+0x40>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3b01      	subs	r3, #1
 8006f66:	4a08      	ldr	r2, [pc, #32]	; (8006f88 <vPortExitCritical+0x40>)
 8006f68:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f6a:	4b07      	ldr	r3, [pc, #28]	; (8006f88 <vPortExitCritical+0x40>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d105      	bne.n	8006f7e <vPortExitCritical+0x36>
 8006f72:	2300      	movs	r3, #0
 8006f74:	607b      	str	r3, [r7, #4]
	__asm volatile
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f383 8811 	msr	BASEPRI, r3
}
 8006f7c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f7e:	bf00      	nop
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	200001d0 	.word	0x200001d0
 8006f8c:	0800e124 	.word	0x0800e124

08006f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f90:	f3ef 8009 	mrs	r0, PSP
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	4b15      	ldr	r3, [pc, #84]	; (8006ff0 <pxCurrentTCBConst>)
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	f01e 0f10 	tst.w	lr, #16
 8006fa0:	bf08      	it	eq
 8006fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006faa:	6010      	str	r0, [r2, #0]
 8006fac:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8006fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006fb4:	f380 8811 	msr	BASEPRI, r0
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f7ff fbb6 	bl	8006730 <vTaskSwitchContext>
 8006fc4:	f04f 0000 	mov.w	r0, #0
 8006fc8:	f380 8811 	msr	BASEPRI, r0
 8006fcc:	bc08      	pop	{r3}
 8006fce:	6819      	ldr	r1, [r3, #0]
 8006fd0:	6808      	ldr	r0, [r1, #0]
 8006fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd6:	f01e 0f10 	tst.w	lr, #16
 8006fda:	bf08      	it	eq
 8006fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006fe0:	f380 8809 	msr	PSP, r0
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	f3af 8000 	nop.w

08006ff0 <pxCurrentTCBConst>:
 8006ff0:	20034558 	.word	0x20034558
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop

08006ff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	607b      	str	r3, [r7, #4]
}
 8007010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007012:	f7ff fad3 	bl	80065bc <xTaskIncrementTick>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d003      	beq.n	8007024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800701c:	4b06      	ldr	r3, [pc, #24]	; (8007038 <xPortSysTickHandler+0x40>)
 800701e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	2300      	movs	r3, #0
 8007026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	f383 8811 	msr	BASEPRI, r3
}
 800702e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007030:	bf00      	nop
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	e000ed04 	.word	0xe000ed04

0800703c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007040:	4b08      	ldr	r3, [pc, #32]	; (8007064 <vPortSetupTimerInterrupt+0x28>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a08      	ldr	r2, [pc, #32]	; (8007068 <vPortSetupTimerInterrupt+0x2c>)
 8007046:	fba2 2303 	umull	r2, r3, r2, r3
 800704a:	099b      	lsrs	r3, r3, #6
 800704c:	4a07      	ldr	r2, [pc, #28]	; (800706c <vPortSetupTimerInterrupt+0x30>)
 800704e:	3b01      	subs	r3, #1
 8007050:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007052:	4b07      	ldr	r3, [pc, #28]	; (8007070 <vPortSetupTimerInterrupt+0x34>)
 8007054:	2207      	movs	r2, #7
 8007056:	601a      	str	r2, [r3, #0]
}
 8007058:	bf00      	nop
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	200001cc 	.word	0x200001cc
 8007068:	10624dd3 	.word	0x10624dd3
 800706c:	e000e014 	.word	0xe000e014
 8007070:	e000e010 	.word	0xe000e010

08007074 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007074:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007084 <vPortEnableVFP+0x10>
 8007078:	6801      	ldr	r1, [r0, #0]
 800707a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800707e:	6001      	str	r1, [r0, #0]
 8007080:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007082:	bf00      	nop
 8007084:	e000ed88 	.word	0xe000ed88

08007088 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800708e:	f3ef 8305 	mrs	r3, IPSR
 8007092:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b0f      	cmp	r3, #15
 8007098:	d90e      	bls.n	80070b8 <vPortValidateInterruptPriority+0x30>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800709a:	4a10      	ldr	r2, [pc, #64]	; (80070dc <vPortValidateInterruptPriority+0x54>)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4413      	add	r3, r2
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80070a4:	4b0e      	ldr	r3, [pc, #56]	; (80070e0 <vPortValidateInterruptPriority+0x58>)
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	78fa      	ldrb	r2, [r7, #3]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d204      	bcs.n	80070b8 <vPortValidateInterruptPriority+0x30>
 80070ae:	f240 21e6 	movw	r1, #742	; 0x2e6
 80070b2:	480c      	ldr	r0, [pc, #48]	; (80070e4 <vPortValidateInterruptPriority+0x5c>)
 80070b4:	f7fd fdb3 	bl	8004c1e <cmr_panic>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80070b8:	4b0b      	ldr	r3, [pc, #44]	; (80070e8 <vPortValidateInterruptPriority+0x60>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80070c0:	4b0a      	ldr	r3, [pc, #40]	; (80070ec <vPortValidateInterruptPriority+0x64>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d904      	bls.n	80070d2 <vPortValidateInterruptPriority+0x4a>
 80070c8:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 80070cc:	4808      	ldr	r0, [pc, #32]	; (80070f0 <vPortValidateInterruptPriority+0x68>)
 80070ce:	f7fd fda6 	bl	8004c1e <cmr_panic>
	}
 80070d2:	bf00      	nop
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	e000e3f0 	.word	0xe000e3f0
 80070e0:	2003466c 	.word	0x2003466c
 80070e4:	0800e188 	.word	0x0800e188
 80070e8:	e000ed0c 	.word	0xe000ed0c
 80070ec:	20034670 	.word	0x20034670
 80070f0:	0800e204 	.word	0x0800e204

080070f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80070f8:	4b0e      	ldr	r3, [pc, #56]	; (8007134 <HAL_Init+0x40>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a0d      	ldr	r2, [pc, #52]	; (8007134 <HAL_Init+0x40>)
 80070fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007102:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007104:	4b0b      	ldr	r3, [pc, #44]	; (8007134 <HAL_Init+0x40>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a0a      	ldr	r2, [pc, #40]	; (8007134 <HAL_Init+0x40>)
 800710a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800710e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007110:	4b08      	ldr	r3, [pc, #32]	; (8007134 <HAL_Init+0x40>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a07      	ldr	r2, [pc, #28]	; (8007134 <HAL_Init+0x40>)
 8007116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800711a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800711c:	2003      	movs	r0, #3
 800711e:	f001 fb11 	bl	8008744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007122:	200f      	movs	r0, #15
 8007124:	f000 f810 	bl	8007148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007128:	f000 f806 	bl	8007138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	40023c00 	.word	0x40023c00

08007138 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8007138:	b480      	push	{r7}
 800713a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800713c:	bf00      	nop
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
	...

08007148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007150:	4b12      	ldr	r3, [pc, #72]	; (800719c <HAL_InitTick+0x54>)
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	4b12      	ldr	r3, [pc, #72]	; (80071a0 <HAL_InitTick+0x58>)
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	4619      	mov	r1, r3
 800715a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800715e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007162:	fbb2 f3f3 	udiv	r3, r2, r3
 8007166:	4618      	mov	r0, r3
 8007168:	f001 fb21 	bl	80087ae <HAL_SYSTICK_Config>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e00e      	b.n	8007194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b0f      	cmp	r3, #15
 800717a:	d80a      	bhi.n	8007192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800717c:	2200      	movs	r2, #0
 800717e:	6879      	ldr	r1, [r7, #4]
 8007180:	f04f 30ff 	mov.w	r0, #4294967295
 8007184:	f001 fae9 	bl	800875a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007188:	4a06      	ldr	r2, [pc, #24]	; (80071a4 <HAL_InitTick+0x5c>)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	e000      	b.n	8007194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
}
 8007194:	4618      	mov	r0, r3
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	200001cc 	.word	0x200001cc
 80071a0:	200001d8 	.word	0x200001d8
 80071a4:	200001d4 	.word	0x200001d4

080071a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80071a8:	b480      	push	{r7}
 80071aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80071ac:	4b06      	ldr	r3, [pc, #24]	; (80071c8 <HAL_IncTick+0x20>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	461a      	mov	r2, r3
 80071b2:	4b06      	ldr	r3, [pc, #24]	; (80071cc <HAL_IncTick+0x24>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4413      	add	r3, r2
 80071b8:	4a04      	ldr	r2, [pc, #16]	; (80071cc <HAL_IncTick+0x24>)
 80071ba:	6013      	str	r3, [r2, #0]
}
 80071bc:	bf00      	nop
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	200001d8 	.word	0x200001d8
 80071cc:	20034674 	.word	0x20034674

080071d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80071d0:	b480      	push	{r7}
 80071d2:	af00      	add	r7, sp, #0
  return uwTick;
 80071d4:	4b03      	ldr	r3, [pc, #12]	; (80071e4 <HAL_GetTick+0x14>)
 80071d6:	681b      	ldr	r3, [r3, #0]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	20034674 	.word	0x20034674

080071e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e033      	b.n	8007266 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007202:	2b00      	cmp	r3, #0
 8007204:	d109      	bne.n	800721a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f831 	bl	800726e <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	f003 0310 	and.w	r3, r3, #16
 8007222:	2b00      	cmp	r3, #0
 8007224:	d118      	bne.n	8007258 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800722e:	f023 0302 	bic.w	r3, r3, #2
 8007232:	f043 0202 	orr.w	r2, r3, #2
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fa8c 	bl	8007758 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724a:	f023 0303 	bic.w	r3, r3, #3
 800724e:	f043 0201 	orr.w	r2, r3, #1
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	641a      	str	r2, [r3, #64]	; 0x40
 8007256:	e001      	b.n	800725c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007264:	7bfb      	ldrb	r3, [r7, #15]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8007276:	bf00      	nop
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
	...

08007284 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800728c:	2300      	movs	r3, #0
 800728e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007296:	2b01      	cmp	r3, #1
 8007298:	d101      	bne.n	800729e <HAL_ADC_Start+0x1a>
 800729a:	2302      	movs	r3, #2
 800729c:	e08a      	b.n	80073b4 <HAL_ADC_Start+0x130>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f003 0301 	and.w	r3, r3, #1
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d018      	beq.n	80072e6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689a      	ldr	r2, [r3, #8]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f042 0201 	orr.w	r2, r2, #1
 80072c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80072c4:	4b3e      	ldr	r3, [pc, #248]	; (80073c0 <HAL_ADC_Start+0x13c>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a3e      	ldr	r2, [pc, #248]	; (80073c4 <HAL_ADC_Start+0x140>)
 80072ca:	fba2 2303 	umull	r2, r3, r2, r3
 80072ce:	0c9a      	lsrs	r2, r3, #18
 80072d0:	4613      	mov	r3, r2
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	4413      	add	r3, r2
 80072d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80072d8:	e002      	b.n	80072e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	3b01      	subs	r3, #1
 80072de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1f9      	bne.n	80072da <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d15e      	bne.n	80073b2 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80072fc:	f023 0301 	bic.w	r3, r3, #1
 8007300:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007312:	2b00      	cmp	r3, #0
 8007314:	d007      	beq.n	8007326 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800731e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800732e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007332:	d106      	bne.n	8007342 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007338:	f023 0206 	bic.w	r2, r3, #6
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	645a      	str	r2, [r3, #68]	; 0x44
 8007340:	e002      	b.n	8007348 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007350:	4b1d      	ldr	r3, [pc, #116]	; (80073c8 <HAL_ADC_Start+0x144>)
 8007352:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800735c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	f003 031f 	and.w	r3, r3, #31
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10f      	bne.n	800738a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d11c      	bne.n	80073b2 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	689a      	ldr	r2, [r3, #8]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007386:	609a      	str	r2, [r3, #8]
 8007388:	e013      	b.n	80073b2 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a0f      	ldr	r2, [pc, #60]	; (80073cc <HAL_ADC_Start+0x148>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d10e      	bne.n	80073b2 <HAL_ADC_Start+0x12e>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d107      	bne.n	80073b2 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689a      	ldr	r2, [r3, #8]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80073b0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	200001cc 	.word	0x200001cc
 80073c4:	431bde83 	.word	0x431bde83
 80073c8:	40012300 	.word	0x40012300
 80073cc:	40012000 	.word	0x40012000

080073d0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80073da:	2300      	movs	r3, #0
 80073dc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ec:	d113      	bne.n	8007416 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80073f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073fc:	d10b      	bne.n	8007416 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007402:	f043 0220 	orr.w	r2, r3, #32
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e05c      	b.n	80074d0 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007416:	f7ff fedb 	bl	80071d0 <HAL_GetTick>
 800741a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800741c:	e01a      	b.n	8007454 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007424:	d016      	beq.n	8007454 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d007      	beq.n	800743c <HAL_ADC_PollForConversion+0x6c>
 800742c:	f7ff fed0 	bl	80071d0 <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	429a      	cmp	r2, r3
 800743a:	d20b      	bcs.n	8007454 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007440:	f043 0204 	orr.w	r2, r3, #4
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e03d      	b.n	80074d0 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b02      	cmp	r3, #2
 8007460:	d1dd      	bne.n	800741e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f06f 0212 	mvn.w	r2, #18
 800746a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007470:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d123      	bne.n	80074ce <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800748a:	2b00      	cmp	r3, #0
 800748c:	d11f      	bne.n	80074ce <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007494:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007498:	2b00      	cmp	r3, #0
 800749a:	d006      	beq.n	80074aa <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d111      	bne.n	80074ce <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d105      	bne.n	80074ce <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	f043 0201 	orr.w	r2, r3, #1
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
	...

080074f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80074fe:	2300      	movs	r3, #0
 8007500:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007508:	2b01      	cmp	r3, #1
 800750a:	d101      	bne.n	8007510 <HAL_ADC_ConfigChannel+0x1c>
 800750c:	2302      	movs	r3, #2
 800750e:	e113      	b.n	8007738 <HAL_ADC_ConfigChannel+0x244>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b09      	cmp	r3, #9
 800751e:	d925      	bls.n	800756c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68d9      	ldr	r1, [r3, #12]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	b29b      	uxth	r3, r3
 800752c:	461a      	mov	r2, r3
 800752e:	4613      	mov	r3, r2
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	4413      	add	r3, r2
 8007534:	3b1e      	subs	r3, #30
 8007536:	2207      	movs	r2, #7
 8007538:	fa02 f303 	lsl.w	r3, r2, r3
 800753c:	43da      	mvns	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	400a      	ands	r2, r1
 8007544:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68d9      	ldr	r1, [r3, #12]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	b29b      	uxth	r3, r3
 8007556:	4618      	mov	r0, r3
 8007558:	4603      	mov	r3, r0
 800755a:	005b      	lsls	r3, r3, #1
 800755c:	4403      	add	r3, r0
 800755e:	3b1e      	subs	r3, #30
 8007560:	409a      	lsls	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	60da      	str	r2, [r3, #12]
 800756a:	e022      	b.n	80075b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6919      	ldr	r1, [r3, #16]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	b29b      	uxth	r3, r3
 8007578:	461a      	mov	r2, r3
 800757a:	4613      	mov	r3, r2
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	4413      	add	r3, r2
 8007580:	2207      	movs	r2, #7
 8007582:	fa02 f303 	lsl.w	r3, r2, r3
 8007586:	43da      	mvns	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	400a      	ands	r2, r1
 800758e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6919      	ldr	r1, [r3, #16]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	689a      	ldr	r2, [r3, #8]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	b29b      	uxth	r3, r3
 80075a0:	4618      	mov	r0, r3
 80075a2:	4603      	mov	r3, r0
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	4403      	add	r3, r0
 80075a8:	409a      	lsls	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	2b06      	cmp	r3, #6
 80075b8:	d824      	bhi.n	8007604 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	4613      	mov	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	3b05      	subs	r3, #5
 80075cc:	221f      	movs	r2, #31
 80075ce:	fa02 f303 	lsl.w	r3, r2, r3
 80075d2:	43da      	mvns	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	400a      	ands	r2, r1
 80075da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	4618      	mov	r0, r3
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	4613      	mov	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	3b05      	subs	r3, #5
 80075f6:	fa00 f203 	lsl.w	r2, r0, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	635a      	str	r2, [r3, #52]	; 0x34
 8007602:	e04c      	b.n	800769e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	2b0c      	cmp	r3, #12
 800760a:	d824      	bhi.n	8007656 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	4613      	mov	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	3b23      	subs	r3, #35	; 0x23
 800761e:	221f      	movs	r2, #31
 8007620:	fa02 f303 	lsl.w	r3, r2, r3
 8007624:	43da      	mvns	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	400a      	ands	r2, r1
 800762c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	b29b      	uxth	r3, r3
 800763a:	4618      	mov	r0, r3
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	685a      	ldr	r2, [r3, #4]
 8007640:	4613      	mov	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	4413      	add	r3, r2
 8007646:	3b23      	subs	r3, #35	; 0x23
 8007648:	fa00 f203 	lsl.w	r2, r0, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	631a      	str	r2, [r3, #48]	; 0x30
 8007654:	e023      	b.n	800769e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	4613      	mov	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	3b41      	subs	r3, #65	; 0x41
 8007668:	221f      	movs	r2, #31
 800766a:	fa02 f303 	lsl.w	r3, r2, r3
 800766e:	43da      	mvns	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	400a      	ands	r2, r1
 8007676:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	b29b      	uxth	r3, r3
 8007684:	4618      	mov	r0, r3
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	685a      	ldr	r2, [r3, #4]
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	3b41      	subs	r3, #65	; 0x41
 8007692:	fa00 f203 	lsl.w	r2, r0, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800769e:	4b29      	ldr	r3, [pc, #164]	; (8007744 <HAL_ADC_ConfigChannel+0x250>)
 80076a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a28      	ldr	r2, [pc, #160]	; (8007748 <HAL_ADC_ConfigChannel+0x254>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d10f      	bne.n	80076cc <HAL_ADC_ConfigChannel+0x1d8>
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b12      	cmp	r3, #18
 80076b2:	d10b      	bne.n	80076cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a1d      	ldr	r2, [pc, #116]	; (8007748 <HAL_ADC_ConfigChannel+0x254>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d12b      	bne.n	800772e <HAL_ADC_ConfigChannel+0x23a>
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a1c      	ldr	r2, [pc, #112]	; (800774c <HAL_ADC_ConfigChannel+0x258>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d003      	beq.n	80076e8 <HAL_ADC_ConfigChannel+0x1f4>
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b11      	cmp	r3, #17
 80076e6:	d122      	bne.n	800772e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a11      	ldr	r2, [pc, #68]	; (800774c <HAL_ADC_ConfigChannel+0x258>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d111      	bne.n	800772e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800770a:	4b11      	ldr	r3, [pc, #68]	; (8007750 <HAL_ADC_ConfigChannel+0x25c>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a11      	ldr	r2, [pc, #68]	; (8007754 <HAL_ADC_ConfigChannel+0x260>)
 8007710:	fba2 2303 	umull	r2, r3, r2, r3
 8007714:	0c9a      	lsrs	r2, r3, #18
 8007716:	4613      	mov	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007720:	e002      	b.n	8007728 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	3b01      	subs	r3, #1
 8007726:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1f9      	bne.n	8007722 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3714      	adds	r7, #20
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	40012300 	.word	0x40012300
 8007748:	40012000 	.word	0x40012000
 800774c:	10000012 	.word	0x10000012
 8007750:	200001cc 	.word	0x200001cc
 8007754:	431bde83 	.word	0x431bde83

08007758 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007760:	4b79      	ldr	r3, [pc, #484]	; (8007948 <ADC_Init+0x1f0>)
 8007762:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	431a      	orrs	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800778c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6859      	ldr	r1, [r3, #4]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	021a      	lsls	r2, r3, #8
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	430a      	orrs	r2, r1
 80077a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80077b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6859      	ldr	r1, [r3, #4]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	689a      	ldr	r2, [r3, #8]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	430a      	orrs	r2, r1
 80077c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689a      	ldr	r2, [r3, #8]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6899      	ldr	r1, [r3, #8]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68da      	ldr	r2, [r3, #12]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	430a      	orrs	r2, r1
 80077e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ea:	4a58      	ldr	r2, [pc, #352]	; (800794c <ADC_Init+0x1f4>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d022      	beq.n	8007836 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689a      	ldr	r2, [r3, #8]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80077fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6899      	ldr	r1, [r3, #8]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	689a      	ldr	r2, [r3, #8]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007820:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6899      	ldr	r1, [r3, #8]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	609a      	str	r2, [r3, #8]
 8007834:	e00f      	b.n	8007856 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	689a      	ldr	r2, [r3, #8]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007844:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007854:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f022 0202 	bic.w	r2, r2, #2
 8007864:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6899      	ldr	r1, [r3, #8]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	7e1b      	ldrb	r3, [r3, #24]
 8007870:	005a      	lsls	r2, r3, #1
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	430a      	orrs	r2, r1
 8007878:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d01b      	beq.n	80078bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	685a      	ldr	r2, [r3, #4]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007892:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80078a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6859      	ldr	r1, [r3, #4]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ae:	3b01      	subs	r3, #1
 80078b0:	035a      	lsls	r2, r3, #13
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	605a      	str	r2, [r3, #4]
 80078ba:	e007      	b.n	80078cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	685a      	ldr	r2, [r3, #4]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80078da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	69db      	ldr	r3, [r3, #28]
 80078e6:	3b01      	subs	r3, #1
 80078e8:	051a      	lsls	r2, r3, #20
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689a      	ldr	r2, [r3, #8]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007900:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6899      	ldr	r1, [r3, #8]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800790e:	025a      	lsls	r2, r3, #9
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	430a      	orrs	r2, r1
 8007916:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689a      	ldr	r2, [r3, #8]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007926:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6899      	ldr	r1, [r3, #8]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	029a      	lsls	r2, r3, #10
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	609a      	str	r2, [r3, #8]
}
 800793c:	bf00      	nop
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	40012300 	.word	0x40012300
 800794c:	0f000001 	.word	0x0f000001

08007950 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d101      	bne.n	8007962 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e0ed      	b.n	8007b3e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007968:	b2db      	uxtb	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d102      	bne.n	8007974 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f8e9 	bl	8007b46 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f022 0202 	bic.w	r2, r2, #2
 8007982:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007984:	f7ff fc24 	bl	80071d0 <HAL_GetTick>
 8007988:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800798a:	e012      	b.n	80079b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800798c:	f7ff fc20 	bl	80071d0 <HAL_GetTick>
 8007990:	4602      	mov	r2, r0
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	2b0a      	cmp	r3, #10
 8007998:	d90b      	bls.n	80079b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2205      	movs	r2, #5
 80079aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e0c5      	b.n	8007b3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f003 0302 	and.w	r3, r3, #2
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1e5      	bne.n	800798c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f042 0201 	orr.w	r2, r2, #1
 80079ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80079d0:	f7ff fbfe 	bl	80071d0 <HAL_GetTick>
 80079d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80079d6:	e012      	b.n	80079fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80079d8:	f7ff fbfa 	bl	80071d0 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	2b0a      	cmp	r3, #10
 80079e4:	d90b      	bls.n	80079fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2205      	movs	r2, #5
 80079f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e09f      	b.n	8007b3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d0e5      	beq.n	80079d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	7e1b      	ldrb	r3, [r3, #24]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d108      	bne.n	8007a26 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	e007      	b.n	8007a36 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	7e5b      	ldrb	r3, [r3, #25]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d108      	bne.n	8007a50 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	e007      	b.n	8007a60 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	7e9b      	ldrb	r3, [r3, #26]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d108      	bne.n	8007a7a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f042 0220 	orr.w	r2, r2, #32
 8007a76:	601a      	str	r2, [r3, #0]
 8007a78:	e007      	b.n	8007a8a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f022 0220 	bic.w	r2, r2, #32
 8007a88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	7edb      	ldrb	r3, [r3, #27]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d108      	bne.n	8007aa4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f022 0210 	bic.w	r2, r2, #16
 8007aa0:	601a      	str	r2, [r3, #0]
 8007aa2:	e007      	b.n	8007ab4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f042 0210 	orr.w	r2, r2, #16
 8007ab2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	7f1b      	ldrb	r3, [r3, #28]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d108      	bne.n	8007ace <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f042 0208 	orr.w	r2, r2, #8
 8007aca:	601a      	str	r2, [r3, #0]
 8007acc:	e007      	b.n	8007ade <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 0208 	bic.w	r2, r2, #8
 8007adc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	7f5b      	ldrb	r3, [r3, #29]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d108      	bne.n	8007af8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f042 0204 	orr.w	r2, r2, #4
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	e007      	b.n	8007b08 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f022 0204 	bic.w	r2, r2, #4
 8007b06:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	689a      	ldr	r2, [r3, #8]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	431a      	orrs	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	431a      	orrs	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	ea42 0103 	orr.w	r1, r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	1e5a      	subs	r2, r3, #1
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <HAL_CAN_MspInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8007b46:	b480      	push	{r7}
 8007b48:	b083      	sub	sp, #12
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_MspInit could be implemented in the user file
   */
}
 8007b4e:	bf00      	nop
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
	...

08007b5c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b087      	sub	sp, #28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b72:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007b74:	7cfb      	ldrb	r3, [r7, #19]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d003      	beq.n	8007b82 <HAL_CAN_ConfigFilter+0x26>
 8007b7a:	7cfb      	ldrb	r3, [r7, #19]
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	f040 80c7 	bne.w	8007d10 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a69      	ldr	r2, [pc, #420]	; (8007d2c <HAL_CAN_ConfigFilter+0x1d0>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d001      	beq.n	8007b90 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8007b8c:	4b68      	ldr	r3, [pc, #416]	; (8007d30 <HAL_CAN_ConfigFilter+0x1d4>)
 8007b8e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b96:	f043 0201 	orr.w	r2, r3, #1
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	4a63      	ldr	r2, [pc, #396]	; (8007d30 <HAL_CAN_ConfigFilter+0x1d4>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d111      	bne.n	8007bcc <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007bae:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc2:	021b      	lsls	r3, r3, #8
 8007bc4:	431a      	orrs	r2, r3
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	f003 031f 	and.w	r3, r3, #31
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bda:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	43db      	mvns	r3, r3
 8007be6:	401a      	ands	r2, r3
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	69db      	ldr	r3, [r3, #28]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d123      	bne.n	8007c3e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	43db      	mvns	r3, r3
 8007c00:	401a      	ands	r2, r3
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007c14:	683a      	ldr	r2, [r7, #0]
 8007c16:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007c18:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	3248      	adds	r2, #72	; 0x48
 8007c1e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007c32:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007c34:	6979      	ldr	r1, [r7, #20]
 8007c36:	3348      	adds	r3, #72	; 0x48
 8007c38:	00db      	lsls	r3, r3, #3
 8007c3a:	440b      	add	r3, r1
 8007c3c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d122      	bne.n	8007c8c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007c66:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	3248      	adds	r2, #72	; 0x48
 8007c6c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007c80:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007c82:	6979      	ldr	r1, [r7, #20]
 8007c84:	3348      	adds	r3, #72	; 0x48
 8007c86:	00db      	lsls	r3, r3, #3
 8007c88:	440b      	add	r3, r1
 8007c8a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d109      	bne.n	8007ca8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	43db      	mvns	r3, r3
 8007c9e:	401a      	ands	r2, r3
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007ca6:	e007      	b.n	8007cb8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	431a      	orrs	r2, r3
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d109      	bne.n	8007cd4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	43db      	mvns	r3, r3
 8007cca:	401a      	ands	r2, r3
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007cd2:	e007      	b.n	8007ce4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	431a      	orrs	r2, r3
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	6a1b      	ldr	r3, [r3, #32]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d107      	bne.n	8007cfc <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	431a      	orrs	r2, r3
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d02:	f023 0201 	bic.w	r2, r3, #1
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	e006      	b.n	8007d1e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d14:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
  }
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	371c      	adds	r7, #28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	40006c00 	.word	0x40006c00
 8007d30:	40006400 	.word	0x40006400

08007d34 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d12e      	bne.n	8007da6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f022 0201 	bic.w	r2, r2, #1
 8007d5e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d60:	f7ff fa36 	bl	80071d0 <HAL_GetTick>
 8007d64:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007d66:	e012      	b.n	8007d8e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007d68:	f7ff fa32 	bl	80071d0 <HAL_GetTick>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	2b0a      	cmp	r3, #10
 8007d74:	d90b      	bls.n	8007d8e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2205      	movs	r2, #5
 8007d86:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e012      	b.n	8007db4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1e5      	bne.n	8007d68 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007da2:	2300      	movs	r3, #0
 8007da4:	e006      	b.n	8007db4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007daa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
  }
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b089      	sub	sp, #36	; 0x24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
 8007dc8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007dd0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007dda:	7ffb      	ldrb	r3, [r7, #31]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d003      	beq.n	8007de8 <HAL_CAN_AddTxMessage+0x2c>
 8007de0:	7ffb      	ldrb	r3, [r7, #31]
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	f040 80b8 	bne.w	8007f58 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10a      	bne.n	8007e08 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d105      	bne.n	8007e08 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 80a0 	beq.w	8007f48 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	0e1b      	lsrs	r3, r3, #24
 8007e0c:	f003 0303 	and.w	r3, r3, #3
 8007e10:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d907      	bls.n	8007e28 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e09e      	b.n	8007f66 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007e28:	2201      	movs	r2, #1
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	409a      	lsls	r2, r3
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d10d      	bne.n	8007e56 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007e44:	68f9      	ldr	r1, [r7, #12]
 8007e46:	6809      	ldr	r1, [r1, #0]
 8007e48:	431a      	orrs	r2, r3
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	3318      	adds	r3, #24
 8007e4e:	011b      	lsls	r3, r3, #4
 8007e50:	440b      	add	r3, r1
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	e00f      	b.n	8007e76 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007e60:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007e66:	68f9      	ldr	r1, [r7, #12]
 8007e68:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007e6a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	3318      	adds	r3, #24
 8007e70:	011b      	lsls	r3, r3, #4
 8007e72:	440b      	add	r3, r1
 8007e74:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6819      	ldr	r1, [r3, #0]
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	691a      	ldr	r2, [r3, #16]
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	3318      	adds	r3, #24
 8007e82:	011b      	lsls	r3, r3, #4
 8007e84:	440b      	add	r3, r1
 8007e86:	3304      	adds	r3, #4
 8007e88:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	7d1b      	ldrb	r3, [r3, #20]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d111      	bne.n	8007eb6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	3318      	adds	r3, #24
 8007e9a:	011b      	lsls	r3, r3, #4
 8007e9c:	4413      	add	r3, r2
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	6811      	ldr	r1, [r2, #0]
 8007ea6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	3318      	adds	r3, #24
 8007eae:	011b      	lsls	r3, r3, #4
 8007eb0:	440b      	add	r3, r1
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	3307      	adds	r3, #7
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	061a      	lsls	r2, r3, #24
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	3306      	adds	r3, #6
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	041b      	lsls	r3, r3, #16
 8007ec6:	431a      	orrs	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	3305      	adds	r3, #5
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	021b      	lsls	r3, r3, #8
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	3204      	adds	r2, #4
 8007ed6:	7812      	ldrb	r2, [r2, #0]
 8007ed8:	4610      	mov	r0, r2
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	6811      	ldr	r1, [r2, #0]
 8007ede:	ea43 0200 	orr.w	r2, r3, r0
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	011b      	lsls	r3, r3, #4
 8007ee6:	440b      	add	r3, r1
 8007ee8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007eec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	3303      	adds	r3, #3
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	061a      	lsls	r2, r3, #24
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	3302      	adds	r3, #2
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	041b      	lsls	r3, r3, #16
 8007efe:	431a      	orrs	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	3301      	adds	r3, #1
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	021b      	lsls	r3, r3, #8
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	7812      	ldrb	r2, [r2, #0]
 8007f0e:	4610      	mov	r0, r2
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	6811      	ldr	r1, [r2, #0]
 8007f14:	ea43 0200 	orr.w	r2, r3, r0
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	011b      	lsls	r3, r3, #4
 8007f1c:	440b      	add	r3, r1
 8007f1e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007f22:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	3318      	adds	r3, #24
 8007f2c:	011b      	lsls	r3, r3, #4
 8007f2e:	4413      	add	r3, r2
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	6811      	ldr	r1, [r2, #0]
 8007f36:	f043 0201 	orr.w	r2, r3, #1
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	3318      	adds	r3, #24
 8007f3e:	011b      	lsls	r3, r3, #4
 8007f40:	440b      	add	r3, r1
 8007f42:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	e00e      	b.n	8007f66 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e006      	b.n	8007f66 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
  }
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3724      	adds	r7, #36	; 0x24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007f72:	b480      	push	{r7}
 8007f74:	b087      	sub	sp, #28
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	60f8      	str	r0, [r7, #12]
 8007f7a:	60b9      	str	r1, [r7, #8]
 8007f7c:	607a      	str	r2, [r7, #4]
 8007f7e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f86:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007f88:	7dfb      	ldrb	r3, [r7, #23]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d003      	beq.n	8007f96 <HAL_CAN_GetRxMessage+0x24>
 8007f8e:	7dfb      	ldrb	r3, [r7, #23]
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	f040 80f4 	bne.w	800817e <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10e      	bne.n	8007fba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	f003 0303 	and.w	r3, r3, #3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d116      	bne.n	8007fd8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e0e8      	b.n	800818c <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	f003 0303 	and.w	r3, r3, #3
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d107      	bne.n	8007fd8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fcc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e0d9      	b.n	800818c <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	331b      	adds	r3, #27
 8007fe0:	011b      	lsls	r3, r3, #4
 8007fe2:	4413      	add	r3, r2
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 0204 	and.w	r2, r3, #4
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10c      	bne.n	8008010 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	331b      	adds	r3, #27
 8007ffe:	011b      	lsls	r3, r3, #4
 8008000:	4413      	add	r3, r2
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	0d5b      	lsrs	r3, r3, #21
 8008006:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	601a      	str	r2, [r3, #0]
 800800e:	e00b      	b.n	8008028 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	331b      	adds	r3, #27
 8008018:	011b      	lsls	r3, r3, #4
 800801a:	4413      	add	r3, r2
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	08db      	lsrs	r3, r3, #3
 8008020:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	331b      	adds	r3, #27
 8008030:	011b      	lsls	r3, r3, #4
 8008032:	4413      	add	r3, r2
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	085b      	lsrs	r3, r3, #1
 8008038:	f003 0201 	and.w	r2, r3, #1
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	331b      	adds	r3, #27
 8008048:	011b      	lsls	r3, r3, #4
 800804a:	4413      	add	r3, r2
 800804c:	3304      	adds	r3, #4
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 020f 	and.w	r2, r3, #15
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	331b      	adds	r3, #27
 8008060:	011b      	lsls	r3, r3, #4
 8008062:	4413      	add	r3, r2
 8008064:	3304      	adds	r3, #4
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	0a1b      	lsrs	r3, r3, #8
 800806a:	b2da      	uxtb	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	331b      	adds	r3, #27
 8008078:	011b      	lsls	r3, r3, #4
 800807a:	4413      	add	r3, r2
 800807c:	3304      	adds	r3, #4
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	0c1b      	lsrs	r3, r3, #16
 8008082:	b29a      	uxth	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	011b      	lsls	r3, r3, #4
 8008090:	4413      	add	r3, r2
 8008092:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	b2da      	uxtb	r2, r3
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	011b      	lsls	r3, r3, #4
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	0a1a      	lsrs	r2, r3, #8
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	3301      	adds	r3, #1
 80080b4:	b2d2      	uxtb	r2, r2
 80080b6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	011b      	lsls	r3, r3, #4
 80080c0:	4413      	add	r3, r2
 80080c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	0c1a      	lsrs	r2, r3, #16
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	3302      	adds	r3, #2
 80080ce:	b2d2      	uxtb	r2, r2
 80080d0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	011b      	lsls	r3, r3, #4
 80080da:	4413      	add	r3, r2
 80080dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	0e1a      	lsrs	r2, r3, #24
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	3303      	adds	r3, #3
 80080e8:	b2d2      	uxtb	r2, r2
 80080ea:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	011b      	lsls	r3, r3, #4
 80080f4:	4413      	add	r3, r2
 80080f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	3304      	adds	r3, #4
 8008100:	b2d2      	uxtb	r2, r2
 8008102:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	011b      	lsls	r3, r3, #4
 800810c:	4413      	add	r3, r2
 800810e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	0a1a      	lsrs	r2, r3, #8
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	3305      	adds	r3, #5
 800811a:	b2d2      	uxtb	r2, r2
 800811c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	011b      	lsls	r3, r3, #4
 8008126:	4413      	add	r3, r2
 8008128:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	0c1a      	lsrs	r2, r3, #16
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	3306      	adds	r3, #6
 8008134:	b2d2      	uxtb	r2, r2
 8008136:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	011b      	lsls	r3, r3, #4
 8008140:	4413      	add	r3, r2
 8008142:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	0e1a      	lsrs	r2, r3, #24
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	3307      	adds	r3, #7
 800814e:	b2d2      	uxtb	r2, r2
 8008150:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d108      	bne.n	800816a <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68da      	ldr	r2, [r3, #12]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f042 0220 	orr.w	r2, r2, #32
 8008166:	60da      	str	r2, [r3, #12]
 8008168:	e007      	b.n	800817a <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	691a      	ldr	r2, [r3, #16]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f042 0220 	orr.w	r2, r2, #32
 8008178:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	e006      	b.n	800818c <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008182:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
  }
}
 800818c:	4618      	mov	r0, r3
 800818e:	371c      	adds	r7, #28
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80081a8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80081aa:	7bfb      	ldrb	r3, [r7, #15]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d002      	beq.n	80081b6 <HAL_CAN_ActivateNotification+0x1e>
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d109      	bne.n	80081ca <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6959      	ldr	r1, [r3, #20]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	683a      	ldr	r2, [r7, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	e006      	b.n	80081d8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
  }
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b08a      	sub	sp, #40	; 0x28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80081ec:	2300      	movs	r3, #0
 80081ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8008220:	6a3b      	ldr	r3, [r7, #32]
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	2b00      	cmp	r3, #0
 8008228:	d07c      	beq.n	8008324 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	f003 0301 	and.w	r3, r3, #1
 8008230:	2b00      	cmp	r3, #0
 8008232:	d023      	beq.n	800827c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2201      	movs	r2, #1
 800823a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	f003 0302 	and.w	r3, r3, #2
 8008242:	2b00      	cmp	r3, #0
 8008244:	d003      	beq.n	800824e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7fa ffc2 	bl	80031d0 <HAL_CAN_TxMailbox0CompleteCallback>
 800824c:	e016      	b.n	800827c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	f003 0304 	and.w	r3, r3, #4
 8008254:	2b00      	cmp	r3, #0
 8008256:	d004      	beq.n	8008262 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8008258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800825e:	627b      	str	r3, [r7, #36]	; 0x24
 8008260:	e00c      	b.n	800827c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	f003 0308 	and.w	r3, r3, #8
 8008268:	2b00      	cmp	r3, #0
 800826a:	d004      	beq.n	8008276 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008272:	627b      	str	r3, [r7, #36]	; 0x24
 8008274:	e002      	b.n	800827c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f7fa ffb6 	bl	80031e8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008282:	2b00      	cmp	r3, #0
 8008284:	d024      	beq.n	80082d0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800828e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008296:	2b00      	cmp	r3, #0
 8008298:	d003      	beq.n	80082a2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f7fa ffb0 	bl	8003200 <HAL_CAN_TxMailbox1CompleteCallback>
 80082a0:	e016      	b.n	80082d0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d004      	beq.n	80082b6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80082b2:	627b      	str	r3, [r7, #36]	; 0x24
 80082b4:	e00c      	b.n	80082d0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d004      	beq.n	80082ca <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082c6:	627b      	str	r3, [r7, #36]	; 0x24
 80082c8:	e002      	b.n	80082d0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7fa ffa4 	bl	8003218 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d024      	beq.n	8008324 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80082e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7fa ff9e 	bl	8003230 <HAL_CAN_TxMailbox2CompleteCallback>
 80082f4:	e016      	b.n	8008324 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d004      	beq.n	800830a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008306:	627b      	str	r3, [r7, #36]	; 0x24
 8008308:	e00c      	b.n	8008324 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d004      	beq.n	800831e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800831a:	627b      	str	r3, [r7, #36]	; 0x24
 800831c:	e002      	b.n	8008324 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f7fa ff92 	bl	8003248 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	f003 0308 	and.w	r3, r3, #8
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00c      	beq.n	8008348 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	f003 0310 	and.w	r3, r3, #16
 8008334:	2b00      	cmp	r3, #0
 8008336:	d007      	beq.n	8008348 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8008338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800833e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2210      	movs	r2, #16
 8008346:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8008348:	6a3b      	ldr	r3, [r7, #32]
 800834a:	f003 0304 	and.w	r3, r3, #4
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00b      	beq.n	800836a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	f003 0308 	and.w	r3, r3, #8
 8008358:	2b00      	cmp	r3, #0
 800835a:	d006      	beq.n	800836a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2208      	movs	r2, #8
 8008362:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f8f4 	bl	8008552 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800836a:	6a3b      	ldr	r3, [r7, #32]
 800836c:	f003 0302 	and.w	r3, r3, #2
 8008370:	2b00      	cmp	r3, #0
 8008372:	d009      	beq.n	8008388 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	f003 0303 	and.w	r3, r3, #3
 800837e:	2b00      	cmp	r3, #0
 8008380:	d002      	beq.n	8008388 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f7fb f85b 	bl	800343e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8008388:	6a3b      	ldr	r3, [r7, #32]
 800838a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00c      	beq.n	80083ac <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	f003 0310 	and.w	r3, r3, #16
 8008398:	2b00      	cmp	r3, #0
 800839a:	d007      	beq.n	80083ac <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800839c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80083a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2210      	movs	r2, #16
 80083aa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80083ac:	6a3b      	ldr	r3, [r7, #32]
 80083ae:	f003 0320 	and.w	r3, r3, #32
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00b      	beq.n	80083ce <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	f003 0308 	and.w	r3, r3, #8
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d006      	beq.n	80083ce <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2208      	movs	r2, #8
 80083c6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 f8cc 	bl	8008566 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80083ce:	6a3b      	ldr	r3, [r7, #32]
 80083d0:	f003 0310 	and.w	r3, r3, #16
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d009      	beq.n	80083ec <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	f003 0303 	and.w	r3, r3, #3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d002      	beq.n	80083ec <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7fb f835 	bl	8003456 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80083ec:	6a3b      	ldr	r3, [r7, #32]
 80083ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00b      	beq.n	800840e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	f003 0310 	and.w	r3, r3, #16
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d006      	beq.n	800840e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2210      	movs	r2, #16
 8008406:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f8b6 	bl	800857a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800840e:	6a3b      	ldr	r3, [r7, #32]
 8008410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00b      	beq.n	8008430 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	f003 0308 	and.w	r3, r3, #8
 800841e:	2b00      	cmp	r3, #0
 8008420:	d006      	beq.n	8008430 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2208      	movs	r2, #8
 8008428:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f8af 	bl	800858e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8008430:	6a3b      	ldr	r3, [r7, #32]
 8008432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d07b      	beq.n	8008532 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	f003 0304 	and.w	r3, r3, #4
 8008440:	2b00      	cmp	r3, #0
 8008442:	d072      	beq.n	800852a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008444:	6a3b      	ldr	r3, [r7, #32]
 8008446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800844a:	2b00      	cmp	r3, #0
 800844c:	d008      	beq.n	8008460 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008454:	2b00      	cmp	r3, #0
 8008456:	d003      	beq.n	8008460 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8008458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845a:	f043 0301 	orr.w	r3, r3, #1
 800845e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008460:	6a3b      	ldr	r3, [r7, #32]
 8008462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008466:	2b00      	cmp	r3, #0
 8008468:	d008      	beq.n	800847c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008470:	2b00      	cmp	r3, #0
 8008472:	d003      	beq.n	800847c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	f043 0302 	orr.w	r3, r3, #2
 800847a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800847c:	6a3b      	ldr	r3, [r7, #32]
 800847e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008482:	2b00      	cmp	r3, #0
 8008484:	d008      	beq.n	8008498 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800848c:	2b00      	cmp	r3, #0
 800848e:	d003      	beq.n	8008498 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	f043 0304 	orr.w	r3, r3, #4
 8008496:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008498:	6a3b      	ldr	r3, [r7, #32]
 800849a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d043      	beq.n	800852a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d03e      	beq.n	800852a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084b2:	2b60      	cmp	r3, #96	; 0x60
 80084b4:	d02b      	beq.n	800850e <HAL_CAN_IRQHandler+0x32a>
 80084b6:	2b60      	cmp	r3, #96	; 0x60
 80084b8:	d82e      	bhi.n	8008518 <HAL_CAN_IRQHandler+0x334>
 80084ba:	2b50      	cmp	r3, #80	; 0x50
 80084bc:	d022      	beq.n	8008504 <HAL_CAN_IRQHandler+0x320>
 80084be:	2b50      	cmp	r3, #80	; 0x50
 80084c0:	d82a      	bhi.n	8008518 <HAL_CAN_IRQHandler+0x334>
 80084c2:	2b40      	cmp	r3, #64	; 0x40
 80084c4:	d019      	beq.n	80084fa <HAL_CAN_IRQHandler+0x316>
 80084c6:	2b40      	cmp	r3, #64	; 0x40
 80084c8:	d826      	bhi.n	8008518 <HAL_CAN_IRQHandler+0x334>
 80084ca:	2b30      	cmp	r3, #48	; 0x30
 80084cc:	d010      	beq.n	80084f0 <HAL_CAN_IRQHandler+0x30c>
 80084ce:	2b30      	cmp	r3, #48	; 0x30
 80084d0:	d822      	bhi.n	8008518 <HAL_CAN_IRQHandler+0x334>
 80084d2:	2b10      	cmp	r3, #16
 80084d4:	d002      	beq.n	80084dc <HAL_CAN_IRQHandler+0x2f8>
 80084d6:	2b20      	cmp	r3, #32
 80084d8:	d005      	beq.n	80084e6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80084da:	e01d      	b.n	8008518 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	f043 0308 	orr.w	r3, r3, #8
 80084e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80084e4:	e019      	b.n	800851a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80084e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e8:	f043 0310 	orr.w	r3, r3, #16
 80084ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80084ee:	e014      	b.n	800851a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f2:	f043 0320 	orr.w	r3, r3, #32
 80084f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80084f8:	e00f      	b.n	800851a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008500:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008502:	e00a      	b.n	800851a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800850a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800850c:	e005      	b.n	800851a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008514:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008516:	e000      	b.n	800851a <HAL_CAN_IRQHandler+0x336>
            break;
 8008518:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	699a      	ldr	r2, [r3, #24]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008528:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2204      	movs	r2, #4
 8008530:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8008532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008534:	2b00      	cmp	r3, #0
 8008536:	d008      	beq.n	800854a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800853c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853e:	431a      	orrs	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f7fa fe8b 	bl	8003260 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800854a:	bf00      	nop
 800854c:	3728      	adds	r7, #40	; 0x28
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8008552:	b480      	push	{r7}
 8008554:	b083      	sub	sp, #12
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800855a:	bf00      	nop
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8008566:	b480      	push	{r7}
 8008568:	b083      	sub	sp, #12
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800856e:	bf00      	nop
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800857a:	b480      	push	{r7}
 800857c:	b083      	sub	sp, #12
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8008582:	bf00      	nop
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800858e:	b480      	push	{r7}
 8008590:	b083      	sub	sp, #12
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8008596:	bf00      	nop
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
	...

080085a4 <__NVIC_SetPriorityGrouping>:
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f003 0307 	and.w	r3, r3, #7
 80085b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80085b4:	4b0c      	ldr	r3, [pc, #48]	; (80085e8 <__NVIC_SetPriorityGrouping+0x44>)
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80085c0:	4013      	ands	r3, r2
 80085c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80085cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80085d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80085d6:	4a04      	ldr	r2, [pc, #16]	; (80085e8 <__NVIC_SetPriorityGrouping+0x44>)
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	60d3      	str	r3, [r2, #12]
}
 80085dc:	bf00      	nop
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr
 80085e8:	e000ed00 	.word	0xe000ed00

080085ec <__NVIC_GetPriorityGrouping>:
{
 80085ec:	b480      	push	{r7}
 80085ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80085f0:	4b04      	ldr	r3, [pc, #16]	; (8008604 <__NVIC_GetPriorityGrouping+0x18>)
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	0a1b      	lsrs	r3, r3, #8
 80085f6:	f003 0307 	and.w	r3, r3, #7
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr
 8008604:	e000ed00 	.word	0xe000ed00

08008608 <__NVIC_EnableIRQ>:
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008616:	2b00      	cmp	r3, #0
 8008618:	db0b      	blt.n	8008632 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800861a:	79fb      	ldrb	r3, [r7, #7]
 800861c:	f003 021f 	and.w	r2, r3, #31
 8008620:	4907      	ldr	r1, [pc, #28]	; (8008640 <__NVIC_EnableIRQ+0x38>)
 8008622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008626:	095b      	lsrs	r3, r3, #5
 8008628:	2001      	movs	r0, #1
 800862a:	fa00 f202 	lsl.w	r2, r0, r2
 800862e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008632:	bf00      	nop
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	e000e100 	.word	0xe000e100

08008644 <__NVIC_SetPriority>:
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	4603      	mov	r3, r0
 800864c:	6039      	str	r1, [r7, #0]
 800864e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008654:	2b00      	cmp	r3, #0
 8008656:	db0a      	blt.n	800866e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	b2da      	uxtb	r2, r3
 800865c:	490c      	ldr	r1, [pc, #48]	; (8008690 <__NVIC_SetPriority+0x4c>)
 800865e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008662:	0112      	lsls	r2, r2, #4
 8008664:	b2d2      	uxtb	r2, r2
 8008666:	440b      	add	r3, r1
 8008668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800866c:	e00a      	b.n	8008684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	b2da      	uxtb	r2, r3
 8008672:	4908      	ldr	r1, [pc, #32]	; (8008694 <__NVIC_SetPriority+0x50>)
 8008674:	79fb      	ldrb	r3, [r7, #7]
 8008676:	f003 030f 	and.w	r3, r3, #15
 800867a:	3b04      	subs	r3, #4
 800867c:	0112      	lsls	r2, r2, #4
 800867e:	b2d2      	uxtb	r2, r2
 8008680:	440b      	add	r3, r1
 8008682:	761a      	strb	r2, [r3, #24]
}
 8008684:	bf00      	nop
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	e000e100 	.word	0xe000e100
 8008694:	e000ed00 	.word	0xe000ed00

08008698 <NVIC_EncodePriority>:
{
 8008698:	b480      	push	{r7}
 800869a:	b089      	sub	sp, #36	; 0x24
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f003 0307 	and.w	r3, r3, #7
 80086aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	f1c3 0307 	rsb	r3, r3, #7
 80086b2:	2b04      	cmp	r3, #4
 80086b4:	bf28      	it	cs
 80086b6:	2304      	movcs	r3, #4
 80086b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	3304      	adds	r3, #4
 80086be:	2b06      	cmp	r3, #6
 80086c0:	d902      	bls.n	80086c8 <NVIC_EncodePriority+0x30>
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	3b03      	subs	r3, #3
 80086c6:	e000      	b.n	80086ca <NVIC_EncodePriority+0x32>
 80086c8:	2300      	movs	r3, #0
 80086ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086cc:	f04f 32ff 	mov.w	r2, #4294967295
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	fa02 f303 	lsl.w	r3, r2, r3
 80086d6:	43da      	mvns	r2, r3
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	401a      	ands	r2, r3
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80086e0:	f04f 31ff 	mov.w	r1, #4294967295
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	fa01 f303 	lsl.w	r3, r1, r3
 80086ea:	43d9      	mvns	r1, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086f0:	4313      	orrs	r3, r2
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3724      	adds	r7, #36	; 0x24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
	...

08008700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	3b01      	subs	r3, #1
 800870c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008710:	d301      	bcc.n	8008716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008712:	2301      	movs	r3, #1
 8008714:	e00f      	b.n	8008736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008716:	4a0a      	ldr	r2, [pc, #40]	; (8008740 <SysTick_Config+0x40>)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3b01      	subs	r3, #1
 800871c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800871e:	210f      	movs	r1, #15
 8008720:	f04f 30ff 	mov.w	r0, #4294967295
 8008724:	f7ff ff8e 	bl	8008644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008728:	4b05      	ldr	r3, [pc, #20]	; (8008740 <SysTick_Config+0x40>)
 800872a:	2200      	movs	r2, #0
 800872c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800872e:	4b04      	ldr	r3, [pc, #16]	; (8008740 <SysTick_Config+0x40>)
 8008730:	2207      	movs	r2, #7
 8008732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3708      	adds	r7, #8
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	e000e010 	.word	0xe000e010

08008744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7ff ff29 	bl	80085a4 <__NVIC_SetPriorityGrouping>
}
 8008752:	bf00      	nop
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800875a:	b580      	push	{r7, lr}
 800875c:	b086      	sub	sp, #24
 800875e:	af00      	add	r7, sp, #0
 8008760:	4603      	mov	r3, r0
 8008762:	60b9      	str	r1, [r7, #8]
 8008764:	607a      	str	r2, [r7, #4]
 8008766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008768:	2300      	movs	r3, #0
 800876a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800876c:	f7ff ff3e 	bl	80085ec <__NVIC_GetPriorityGrouping>
 8008770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	68b9      	ldr	r1, [r7, #8]
 8008776:	6978      	ldr	r0, [r7, #20]
 8008778:	f7ff ff8e 	bl	8008698 <NVIC_EncodePriority>
 800877c:	4602      	mov	r2, r0
 800877e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008782:	4611      	mov	r1, r2
 8008784:	4618      	mov	r0, r3
 8008786:	f7ff ff5d 	bl	8008644 <__NVIC_SetPriority>
}
 800878a:	bf00      	nop
 800878c:	3718      	adds	r7, #24
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b082      	sub	sp, #8
 8008796:	af00      	add	r7, sp, #0
 8008798:	4603      	mov	r3, r0
 800879a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800879c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7ff ff31 	bl	8008608 <__NVIC_EnableIRQ>
}
 80087a6:	bf00      	nop
 80087a8:	3708      	adds	r7, #8
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b082      	sub	sp, #8
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7ff ffa2 	bl	8008700 <SysTick_Config>
 80087bc:	4603      	mov	r3, r0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b086      	sub	sp, #24
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80087d0:	2300      	movs	r3, #0
 80087d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80087d4:	f7fe fcfc 	bl	80071d0 <HAL_GetTick>
 80087d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d101      	bne.n	80087e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e099      	b.n	8008918 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2202      	movs	r2, #2
 80087f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f022 0201 	bic.w	r2, r2, #1
 8008802:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008804:	e00f      	b.n	8008826 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008806:	f7fe fce3 	bl	80071d0 <HAL_GetTick>
 800880a:	4602      	mov	r2, r0
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	2b05      	cmp	r3, #5
 8008812:	d908      	bls.n	8008826 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2220      	movs	r2, #32
 8008818:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2203      	movs	r2, #3
 800881e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e078      	b.n	8008918 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0301 	and.w	r3, r3, #1
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1e8      	bne.n	8008806 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800883c:	697a      	ldr	r2, [r7, #20]
 800883e:	4b38      	ldr	r3, [pc, #224]	; (8008920 <HAL_DMA_Init+0x158>)
 8008840:	4013      	ands	r3, r2
 8008842:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685a      	ldr	r2, [r3, #4]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008852:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800885e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800886a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a1b      	ldr	r3, [r3, #32]
 8008870:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008872:	697a      	ldr	r2, [r7, #20]
 8008874:	4313      	orrs	r3, r2
 8008876:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887c:	2b04      	cmp	r3, #4
 800887e:	d107      	bne.n	8008890 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008888:	4313      	orrs	r3, r2
 800888a:	697a      	ldr	r2, [r7, #20]
 800888c:	4313      	orrs	r3, r2
 800888e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	f023 0307 	bic.w	r3, r3, #7
 80088a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b6:	2b04      	cmp	r3, #4
 80088b8:	d117      	bne.n	80088ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088be:	697a      	ldr	r2, [r7, #20]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00e      	beq.n	80088ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fab3 	bl	8008e38 <DMA_CheckFifoParam>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d008      	beq.n	80088ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2240      	movs	r2, #64	; 0x40
 80088dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2201      	movs	r2, #1
 80088e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80088e6:	2301      	movs	r3, #1
 80088e8:	e016      	b.n	8008918 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fa6a 	bl	8008dcc <DMA_CalcBaseAndBitshift>
 80088f8:	4603      	mov	r3, r0
 80088fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008900:	223f      	movs	r2, #63	; 0x3f
 8008902:	409a      	lsls	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	3718      	adds	r7, #24
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	e010803f 	.word	0xe010803f

08008924 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b086      	sub	sp, #24
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
 8008930:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800893a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008942:	2b01      	cmp	r3, #1
 8008944:	d101      	bne.n	800894a <HAL_DMA_Start_IT+0x26>
 8008946:	2302      	movs	r3, #2
 8008948:	e048      	b.n	80089dc <HAL_DMA_Start_IT+0xb8>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008958:	b2db      	uxtb	r3, r3
 800895a:	2b01      	cmp	r3, #1
 800895c:	d137      	bne.n	80089ce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2202      	movs	r2, #2
 8008962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	68b9      	ldr	r1, [r7, #8]
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f000 f9fc 	bl	8008d70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800897c:	223f      	movs	r2, #63	; 0x3f
 800897e:	409a      	lsls	r2, r3
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f042 0216 	orr.w	r2, r2, #22
 8008992:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	695a      	ldr	r2, [r3, #20]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80089a2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d007      	beq.n	80089bc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f042 0208 	orr.w	r2, r2, #8
 80089ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f042 0201 	orr.w	r2, r2, #1
 80089ca:	601a      	str	r2, [r3, #0]
 80089cc:	e005      	b.n	80089da <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80089d6:	2302      	movs	r3, #2
 80089d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80089da:	7dfb      	ldrb	r3, [r7, #23]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3718      	adds	r7, #24
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	2b02      	cmp	r3, #2
 80089f6:	d004      	beq.n	8008a02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2280      	movs	r2, #128	; 0x80
 80089fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e00c      	b.n	8008a1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2205      	movs	r2, #5
 8008a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f022 0201 	bic.w	r2, r2, #1
 8008a18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b086      	sub	sp, #24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008a30:	2300      	movs	r3, #0
 8008a32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008a34:	4b8e      	ldr	r3, [pc, #568]	; (8008c70 <HAL_DMA_IRQHandler+0x248>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a8e      	ldr	r2, [pc, #568]	; (8008c74 <HAL_DMA_IRQHandler+0x24c>)
 8008a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a3e:	0a9b      	lsrs	r3, r3, #10
 8008a40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a52:	2208      	movs	r2, #8
 8008a54:	409a      	lsls	r2, r3
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	4013      	ands	r3, r2
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d01a      	beq.n	8008a94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 0304 	and.w	r3, r3, #4
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d013      	beq.n	8008a94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f022 0204 	bic.w	r2, r2, #4
 8008a7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a80:	2208      	movs	r2, #8
 8008a82:	409a      	lsls	r2, r3
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a8c:	f043 0201 	orr.w	r2, r3, #1
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a98:	2201      	movs	r2, #1
 8008a9a:	409a      	lsls	r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d012      	beq.n	8008aca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00b      	beq.n	8008aca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	409a      	lsls	r2, r3
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac2:	f043 0202 	orr.w	r2, r3, #2
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ace:	2204      	movs	r2, #4
 8008ad0:	409a      	lsls	r2, r3
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d012      	beq.n	8008b00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0302 	and.w	r3, r3, #2
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00b      	beq.n	8008b00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aec:	2204      	movs	r2, #4
 8008aee:	409a      	lsls	r2, r3
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008af8:	f043 0204 	orr.w	r2, r3, #4
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b04:	2210      	movs	r2, #16
 8008b06:	409a      	lsls	r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d043      	beq.n	8008b98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f003 0308 	and.w	r3, r3, #8
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d03c      	beq.n	8008b98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b22:	2210      	movs	r2, #16
 8008b24:	409a      	lsls	r2, r3
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d018      	beq.n	8008b6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d108      	bne.n	8008b58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d024      	beq.n	8008b98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	4798      	blx	r3
 8008b56:	e01f      	b.n	8008b98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d01b      	beq.n	8008b98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	4798      	blx	r3
 8008b68:	e016      	b.n	8008b98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d107      	bne.n	8008b88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f022 0208 	bic.w	r2, r2, #8
 8008b86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d003      	beq.n	8008b98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b9c:	2220      	movs	r2, #32
 8008b9e:	409a      	lsls	r2, r3
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	f000 808f 	beq.w	8008cc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0310 	and.w	r3, r3, #16
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	f000 8087 	beq.w	8008cc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bbe:	2220      	movs	r2, #32
 8008bc0:	409a      	lsls	r2, r3
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	2b05      	cmp	r3, #5
 8008bd0:	d136      	bne.n	8008c40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f022 0216 	bic.w	r2, r2, #22
 8008be0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	695a      	ldr	r2, [r3, #20]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d103      	bne.n	8008c02 <HAL_DMA_IRQHandler+0x1da>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d007      	beq.n	8008c12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f022 0208 	bic.w	r2, r2, #8
 8008c10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c16:	223f      	movs	r2, #63	; 0x3f
 8008c18:	409a      	lsls	r2, r3
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d07e      	beq.n	8008d34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	4798      	blx	r3
        }
        return;
 8008c3e:	e079      	b.n	8008d34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d01d      	beq.n	8008c8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10d      	bne.n	8008c78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d031      	beq.n	8008cc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	4798      	blx	r3
 8008c6c:	e02c      	b.n	8008cc8 <HAL_DMA_IRQHandler+0x2a0>
 8008c6e:	bf00      	nop
 8008c70:	200001cc 	.word	0x200001cc
 8008c74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d023      	beq.n	8008cc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	4798      	blx	r3
 8008c88:	e01e      	b.n	8008cc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10f      	bne.n	8008cb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f022 0210 	bic.w	r2, r2, #16
 8008ca6:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d003      	beq.n	8008cc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d032      	beq.n	8008d36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cd4:	f003 0301 	and.w	r3, r3, #1
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d022      	beq.n	8008d22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2205      	movs	r2, #5
 8008ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f022 0201 	bic.w	r2, r2, #1
 8008cf2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	60bb      	str	r3, [r7, #8]
 8008cfa:	697a      	ldr	r2, [r7, #20]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d307      	bcc.n	8008d10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 0301 	and.w	r3, r3, #1
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1f2      	bne.n	8008cf4 <HAL_DMA_IRQHandler+0x2cc>
 8008d0e:	e000      	b.n	8008d12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008d10:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d005      	beq.n	8008d36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	4798      	blx	r3
 8008d32:	e000      	b.n	8008d36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008d34:	bf00      	nop
    }
  }
}
 8008d36:	3718      	adds	r7, #24
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008d4a:	b2db      	uxtb	r3, r3
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
 8008d7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	2b40      	cmp	r3, #64	; 0x40
 8008d9c:	d108      	bne.n	8008db0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008dae:	e007      	b.n	8008dc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	60da      	str	r2, [r3, #12]
}
 8008dc0:	bf00      	nop
 8008dc2:	3714      	adds	r7, #20
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	3b10      	subs	r3, #16
 8008ddc:	4a14      	ldr	r2, [pc, #80]	; (8008e30 <DMA_CalcBaseAndBitshift+0x64>)
 8008dde:	fba2 2303 	umull	r2, r3, r2, r3
 8008de2:	091b      	lsrs	r3, r3, #4
 8008de4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008de6:	4a13      	ldr	r2, [pc, #76]	; (8008e34 <DMA_CalcBaseAndBitshift+0x68>)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	4413      	add	r3, r2
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	461a      	mov	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2b03      	cmp	r3, #3
 8008df8:	d909      	bls.n	8008e0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008e02:	f023 0303 	bic.w	r3, r3, #3
 8008e06:	1d1a      	adds	r2, r3, #4
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	659a      	str	r2, [r3, #88]	; 0x58
 8008e0c:	e007      	b.n	8008e1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008e16:	f023 0303 	bic.w	r3, r3, #3
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	aaaaaaab 	.word	0xaaaaaaab
 8008e34:	0800e418 	.word	0x0800e418

08008e38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e40:	2300      	movs	r3, #0
 8008e42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d11f      	bne.n	8008e92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	2b03      	cmp	r3, #3
 8008e56:	d856      	bhi.n	8008f06 <DMA_CheckFifoParam+0xce>
 8008e58:	a201      	add	r2, pc, #4	; (adr r2, 8008e60 <DMA_CheckFifoParam+0x28>)
 8008e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5e:	bf00      	nop
 8008e60:	08008e71 	.word	0x08008e71
 8008e64:	08008e83 	.word	0x08008e83
 8008e68:	08008e71 	.word	0x08008e71
 8008e6c:	08008f07 	.word	0x08008f07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d046      	beq.n	8008f0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e80:	e043      	b.n	8008f0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008e8a:	d140      	bne.n	8008f0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e90:	e03d      	b.n	8008f0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	699b      	ldr	r3, [r3, #24]
 8008e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e9a:	d121      	bne.n	8008ee0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	d837      	bhi.n	8008f12 <DMA_CheckFifoParam+0xda>
 8008ea2:	a201      	add	r2, pc, #4	; (adr r2, 8008ea8 <DMA_CheckFifoParam+0x70>)
 8008ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea8:	08008eb9 	.word	0x08008eb9
 8008eac:	08008ebf 	.word	0x08008ebf
 8008eb0:	08008eb9 	.word	0x08008eb9
 8008eb4:	08008ed1 	.word	0x08008ed1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	73fb      	strb	r3, [r7, #15]
      break;
 8008ebc:	e030      	b.n	8008f20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d025      	beq.n	8008f16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ece:	e022      	b.n	8008f16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008ed8:	d11f      	bne.n	8008f1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008ede:	e01c      	b.n	8008f1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d903      	bls.n	8008eee <DMA_CheckFifoParam+0xb6>
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	2b03      	cmp	r3, #3
 8008eea:	d003      	beq.n	8008ef4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008eec:	e018      	b.n	8008f20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ef2:	e015      	b.n	8008f20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00e      	beq.n	8008f1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	73fb      	strb	r3, [r7, #15]
      break;
 8008f04:	e00b      	b.n	8008f1e <DMA_CheckFifoParam+0xe6>
      break;
 8008f06:	bf00      	nop
 8008f08:	e00a      	b.n	8008f20 <DMA_CheckFifoParam+0xe8>
      break;
 8008f0a:	bf00      	nop
 8008f0c:	e008      	b.n	8008f20 <DMA_CheckFifoParam+0xe8>
      break;
 8008f0e:	bf00      	nop
 8008f10:	e006      	b.n	8008f20 <DMA_CheckFifoParam+0xe8>
      break;
 8008f12:	bf00      	nop
 8008f14:	e004      	b.n	8008f20 <DMA_CheckFifoParam+0xe8>
      break;
 8008f16:	bf00      	nop
 8008f18:	e002      	b.n	8008f20 <DMA_CheckFifoParam+0xe8>
      break;   
 8008f1a:	bf00      	nop
 8008f1c:	e000      	b.n	8008f20 <DMA_CheckFifoParam+0xe8>
      break;
 8008f1e:	bf00      	nop
    }
  } 
  
  return status; 
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop

08008f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b089      	sub	sp, #36	; 0x24
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008f42:	2300      	movs	r3, #0
 8008f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008f46:	2300      	movs	r3, #0
 8008f48:	61fb      	str	r3, [r7, #28]
 8008f4a:	e165      	b.n	8009218 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	fa02 f303 	lsl.w	r3, r2, r3
 8008f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	697a      	ldr	r2, [r7, #20]
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008f60:	693a      	ldr	r2, [r7, #16]
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	f040 8154 	bne.w	8009212 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d003      	beq.n	8008f7a <HAL_GPIO_Init+0x4a>
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	2b12      	cmp	r3, #18
 8008f78:	d123      	bne.n	8008fc2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	08da      	lsrs	r2, r3, #3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	3208      	adds	r2, #8
 8008f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	f003 0307 	and.w	r3, r3, #7
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	220f      	movs	r2, #15
 8008f92:	fa02 f303 	lsl.w	r3, r2, r3
 8008f96:	43db      	mvns	r3, r3
 8008f98:	69ba      	ldr	r2, [r7, #24]
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	691a      	ldr	r2, [r3, #16]
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	f003 0307 	and.w	r3, r3, #7
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	fa02 f303 	lsl.w	r3, r2, r3
 8008fae:	69ba      	ldr	r2, [r7, #24]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	08da      	lsrs	r2, r3, #3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	3208      	adds	r2, #8
 8008fbc:	69b9      	ldr	r1, [r7, #24]
 8008fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	005b      	lsls	r3, r3, #1
 8008fcc:	2203      	movs	r2, #3
 8008fce:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd2:	43db      	mvns	r3, r3
 8008fd4:	69ba      	ldr	r2, [r7, #24]
 8008fd6:	4013      	ands	r3, r2
 8008fd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	f003 0203 	and.w	r2, r3, #3
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	005b      	lsls	r3, r3, #1
 8008fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8008fea:	69ba      	ldr	r2, [r7, #24]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	69ba      	ldr	r2, [r7, #24]
 8008ff4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d00b      	beq.n	8009016 <HAL_GPIO_Init+0xe6>
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	2b02      	cmp	r3, #2
 8009004:	d007      	beq.n	8009016 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800900a:	2b11      	cmp	r3, #17
 800900c:	d003      	beq.n	8009016 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	2b12      	cmp	r3, #18
 8009014:	d130      	bne.n	8009078 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	005b      	lsls	r3, r3, #1
 8009020:	2203      	movs	r2, #3
 8009022:	fa02 f303 	lsl.w	r3, r2, r3
 8009026:	43db      	mvns	r3, r3
 8009028:	69ba      	ldr	r2, [r7, #24]
 800902a:	4013      	ands	r3, r2
 800902c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	68da      	ldr	r2, [r3, #12]
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	005b      	lsls	r3, r3, #1
 8009036:	fa02 f303 	lsl.w	r3, r2, r3
 800903a:	69ba      	ldr	r2, [r7, #24]
 800903c:	4313      	orrs	r3, r2
 800903e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	69ba      	ldr	r2, [r7, #24]
 8009044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800904c:	2201      	movs	r2, #1
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	fa02 f303 	lsl.w	r3, r2, r3
 8009054:	43db      	mvns	r3, r3
 8009056:	69ba      	ldr	r2, [r7, #24]
 8009058:	4013      	ands	r3, r2
 800905a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	091b      	lsrs	r3, r3, #4
 8009062:	f003 0201 	and.w	r2, r3, #1
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	fa02 f303 	lsl.w	r3, r2, r3
 800906c:	69ba      	ldr	r2, [r7, #24]
 800906e:	4313      	orrs	r3, r2
 8009070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	69ba      	ldr	r2, [r7, #24]
 8009076:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	005b      	lsls	r3, r3, #1
 8009082:	2203      	movs	r2, #3
 8009084:	fa02 f303 	lsl.w	r3, r2, r3
 8009088:	43db      	mvns	r3, r3
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	4013      	ands	r3, r2
 800908e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	689a      	ldr	r2, [r3, #8]
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	005b      	lsls	r3, r3, #1
 8009098:	fa02 f303 	lsl.w	r3, r2, r3
 800909c:	69ba      	ldr	r2, [r7, #24]
 800909e:	4313      	orrs	r3, r2
 80090a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	69ba      	ldr	r2, [r7, #24]
 80090a6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 80ae 	beq.w	8009212 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80090b6:	2300      	movs	r3, #0
 80090b8:	60fb      	str	r3, [r7, #12]
 80090ba:	4b5d      	ldr	r3, [pc, #372]	; (8009230 <HAL_GPIO_Init+0x300>)
 80090bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090be:	4a5c      	ldr	r2, [pc, #368]	; (8009230 <HAL_GPIO_Init+0x300>)
 80090c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80090c4:	6453      	str	r3, [r2, #68]	; 0x44
 80090c6:	4b5a      	ldr	r3, [pc, #360]	; (8009230 <HAL_GPIO_Init+0x300>)
 80090c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090ce:	60fb      	str	r3, [r7, #12]
 80090d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80090d2:	4a58      	ldr	r2, [pc, #352]	; (8009234 <HAL_GPIO_Init+0x304>)
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	089b      	lsrs	r3, r3, #2
 80090d8:	3302      	adds	r3, #2
 80090da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	f003 0303 	and.w	r3, r3, #3
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	220f      	movs	r2, #15
 80090ea:	fa02 f303 	lsl.w	r3, r2, r3
 80090ee:	43db      	mvns	r3, r3
 80090f0:	69ba      	ldr	r2, [r7, #24]
 80090f2:	4013      	ands	r3, r2
 80090f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a4f      	ldr	r2, [pc, #316]	; (8009238 <HAL_GPIO_Init+0x308>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d025      	beq.n	800914a <HAL_GPIO_Init+0x21a>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a4e      	ldr	r2, [pc, #312]	; (800923c <HAL_GPIO_Init+0x30c>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d01f      	beq.n	8009146 <HAL_GPIO_Init+0x216>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4a4d      	ldr	r2, [pc, #308]	; (8009240 <HAL_GPIO_Init+0x310>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d019      	beq.n	8009142 <HAL_GPIO_Init+0x212>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4a4c      	ldr	r2, [pc, #304]	; (8009244 <HAL_GPIO_Init+0x314>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d013      	beq.n	800913e <HAL_GPIO_Init+0x20e>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4a4b      	ldr	r2, [pc, #300]	; (8009248 <HAL_GPIO_Init+0x318>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d00d      	beq.n	800913a <HAL_GPIO_Init+0x20a>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a4a      	ldr	r2, [pc, #296]	; (800924c <HAL_GPIO_Init+0x31c>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d007      	beq.n	8009136 <HAL_GPIO_Init+0x206>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a49      	ldr	r2, [pc, #292]	; (8009250 <HAL_GPIO_Init+0x320>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d101      	bne.n	8009132 <HAL_GPIO_Init+0x202>
 800912e:	2306      	movs	r3, #6
 8009130:	e00c      	b.n	800914c <HAL_GPIO_Init+0x21c>
 8009132:	2307      	movs	r3, #7
 8009134:	e00a      	b.n	800914c <HAL_GPIO_Init+0x21c>
 8009136:	2305      	movs	r3, #5
 8009138:	e008      	b.n	800914c <HAL_GPIO_Init+0x21c>
 800913a:	2304      	movs	r3, #4
 800913c:	e006      	b.n	800914c <HAL_GPIO_Init+0x21c>
 800913e:	2303      	movs	r3, #3
 8009140:	e004      	b.n	800914c <HAL_GPIO_Init+0x21c>
 8009142:	2302      	movs	r3, #2
 8009144:	e002      	b.n	800914c <HAL_GPIO_Init+0x21c>
 8009146:	2301      	movs	r3, #1
 8009148:	e000      	b.n	800914c <HAL_GPIO_Init+0x21c>
 800914a:	2300      	movs	r3, #0
 800914c:	69fa      	ldr	r2, [r7, #28]
 800914e:	f002 0203 	and.w	r2, r2, #3
 8009152:	0092      	lsls	r2, r2, #2
 8009154:	4093      	lsls	r3, r2
 8009156:	69ba      	ldr	r2, [r7, #24]
 8009158:	4313      	orrs	r3, r2
 800915a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800915c:	4935      	ldr	r1, [pc, #212]	; (8009234 <HAL_GPIO_Init+0x304>)
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	089b      	lsrs	r3, r3, #2
 8009162:	3302      	adds	r3, #2
 8009164:	69ba      	ldr	r2, [r7, #24]
 8009166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800916a:	4b3a      	ldr	r3, [pc, #232]	; (8009254 <HAL_GPIO_Init+0x324>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	43db      	mvns	r3, r3
 8009174:	69ba      	ldr	r2, [r7, #24]
 8009176:	4013      	ands	r3, r2
 8009178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009182:	2b00      	cmp	r3, #0
 8009184:	d003      	beq.n	800918e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8009186:	69ba      	ldr	r2, [r7, #24]
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	4313      	orrs	r3, r2
 800918c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800918e:	4a31      	ldr	r2, [pc, #196]	; (8009254 <HAL_GPIO_Init+0x324>)
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009194:	4b2f      	ldr	r3, [pc, #188]	; (8009254 <HAL_GPIO_Init+0x324>)
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	43db      	mvns	r3, r3
 800919e:	69ba      	ldr	r2, [r7, #24]
 80091a0:	4013      	ands	r3, r2
 80091a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d003      	beq.n	80091b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80091b0:	69ba      	ldr	r2, [r7, #24]
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80091b8:	4a26      	ldr	r2, [pc, #152]	; (8009254 <HAL_GPIO_Init+0x324>)
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80091be:	4b25      	ldr	r3, [pc, #148]	; (8009254 <HAL_GPIO_Init+0x324>)
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	43db      	mvns	r3, r3
 80091c8:	69ba      	ldr	r2, [r7, #24]
 80091ca:	4013      	ands	r3, r2
 80091cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d003      	beq.n	80091e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80091da:	69ba      	ldr	r2, [r7, #24]
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	4313      	orrs	r3, r2
 80091e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80091e2:	4a1c      	ldr	r2, [pc, #112]	; (8009254 <HAL_GPIO_Init+0x324>)
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80091e8:	4b1a      	ldr	r3, [pc, #104]	; (8009254 <HAL_GPIO_Init+0x324>)
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	43db      	mvns	r3, r3
 80091f2:	69ba      	ldr	r2, [r7, #24]
 80091f4:	4013      	ands	r3, r2
 80091f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009200:	2b00      	cmp	r3, #0
 8009202:	d003      	beq.n	800920c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009204:	69ba      	ldr	r2, [r7, #24]
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	4313      	orrs	r3, r2
 800920a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800920c:	4a11      	ldr	r2, [pc, #68]	; (8009254 <HAL_GPIO_Init+0x324>)
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	3301      	adds	r3, #1
 8009216:	61fb      	str	r3, [r7, #28]
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	2b0f      	cmp	r3, #15
 800921c:	f67f ae96 	bls.w	8008f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009220:	bf00      	nop
 8009222:	bf00      	nop
 8009224:	3724      	adds	r7, #36	; 0x24
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	40023800 	.word	0x40023800
 8009234:	40013800 	.word	0x40013800
 8009238:	40020000 	.word	0x40020000
 800923c:	40020400 	.word	0x40020400
 8009240:	40020800 	.word	0x40020800
 8009244:	40020c00 	.word	0x40020c00
 8009248:	40021000 	.word	0x40021000
 800924c:	40021400 	.word	0x40021400
 8009250:	40021800 	.word	0x40021800
 8009254:	40013c00 	.word	0x40013c00

08009258 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	691a      	ldr	r2, [r3, #16]
 8009268:	887b      	ldrh	r3, [r7, #2]
 800926a:	4013      	ands	r3, r2
 800926c:	2b00      	cmp	r3, #0
 800926e:	d002      	beq.n	8009276 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009270:	2301      	movs	r3, #1
 8009272:	73fb      	strb	r3, [r7, #15]
 8009274:	e001      	b.n	800927a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009276:	2300      	movs	r3, #0
 8009278:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800927a:	7bfb      	ldrb	r3, [r7, #15]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3714      	adds	r7, #20
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	460b      	mov	r3, r1
 8009292:	807b      	strh	r3, [r7, #2]
 8009294:	4613      	mov	r3, r2
 8009296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009298:	787b      	ldrb	r3, [r7, #1]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d003      	beq.n	80092a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800929e:	887a      	ldrh	r2, [r7, #2]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80092a4:	e003      	b.n	80092ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80092a6:	887b      	ldrh	r3, [r7, #2]
 80092a8:	041a      	lsls	r2, r3, #16
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	619a      	str	r2, [r3, #24]
}
 80092ae:	bf00      	nop
 80092b0:	370c      	adds	r7, #12
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr

080092ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80092ba:	b480      	push	{r7}
 80092bc:	b083      	sub	sp, #12
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
 80092c2:	460b      	mov	r3, r1
 80092c4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	695a      	ldr	r2, [r3, #20]
 80092ca:	887b      	ldrh	r3, [r7, #2]
 80092cc:	401a      	ands	r2, r3
 80092ce:	887b      	ldrh	r3, [r7, #2]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d104      	bne.n	80092de <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80092d4:	887b      	ldrh	r3, [r7, #2]
 80092d6:	041a      	lsls	r2, r3, #16
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80092dc:	e002      	b.n	80092e4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80092de:	887a      	ldrh	r2, [r7, #2]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	619a      	str	r2, [r3, #24]
}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	4603      	mov	r3, r0
 80092f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80092fa:	4b08      	ldr	r3, [pc, #32]	; (800931c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80092fc:	695a      	ldr	r2, [r3, #20]
 80092fe:	88fb      	ldrh	r3, [r7, #6]
 8009300:	4013      	ands	r3, r2
 8009302:	2b00      	cmp	r3, #0
 8009304:	d006      	beq.n	8009314 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009306:	4a05      	ldr	r2, [pc, #20]	; (800931c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009308:	88fb      	ldrh	r3, [r7, #6]
 800930a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800930c:	88fb      	ldrh	r3, [r7, #6]
 800930e:	4618      	mov	r0, r3
 8009310:	f000 f806 	bl	8009320 <HAL_GPIO_EXTI_Callback>
  }
}
 8009314:	bf00      	nop
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	40013c00 	.word	0x40013c00

08009320 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	4603      	mov	r3, r0
 8009328:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800932a:	bf00      	nop
 800932c:	370c      	adds	r7, #12
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr
	...

08009338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d101      	bne.n	800934a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e11b      	b.n	8009582 <HAL_I2C_Init+0x24a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009350:	b2db      	uxtb	r3, r3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d106      	bne.n	8009364 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f91e 	bl	80095a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2224      	movs	r2, #36	; 0x24
 8009368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f022 0201 	bic.w	r2, r2, #1
 800937a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800937c:	f002 f9c2 	bl	800b704 <HAL_RCC_GetPCLK1Freq>
 8009380:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	4a81      	ldr	r2, [pc, #516]	; (800958c <HAL_I2C_Init+0x254>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d807      	bhi.n	800939c <HAL_I2C_Init+0x64>
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	4a80      	ldr	r2, [pc, #512]	; (8009590 <HAL_I2C_Init+0x258>)
 8009390:	4293      	cmp	r3, r2
 8009392:	bf94      	ite	ls
 8009394:	2301      	movls	r3, #1
 8009396:	2300      	movhi	r3, #0
 8009398:	b2db      	uxtb	r3, r3
 800939a:	e006      	b.n	80093aa <HAL_I2C_Init+0x72>
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	4a7d      	ldr	r2, [pc, #500]	; (8009594 <HAL_I2C_Init+0x25c>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	bf94      	ite	ls
 80093a4:	2301      	movls	r3, #1
 80093a6:	2300      	movhi	r3, #0
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80093ae:	2301      	movs	r3, #1
 80093b0:	e0e7      	b.n	8009582 <HAL_I2C_Init+0x24a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	4a78      	ldr	r2, [pc, #480]	; (8009598 <HAL_I2C_Init+0x260>)
 80093b6:	fba2 2303 	umull	r2, r3, r2, r3
 80093ba:	0c9b      	lsrs	r3, r3, #18
 80093bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	430a      	orrs	r2, r1
 80093d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	6a1b      	ldr	r3, [r3, #32]
 80093d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	4a6a      	ldr	r2, [pc, #424]	; (800958c <HAL_I2C_Init+0x254>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d802      	bhi.n	80093ec <HAL_I2C_Init+0xb4>
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	3301      	adds	r3, #1
 80093ea:	e009      	b.n	8009400 <HAL_I2C_Init+0xc8>
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80093f2:	fb02 f303 	mul.w	r3, r2, r3
 80093f6:	4a69      	ldr	r2, [pc, #420]	; (800959c <HAL_I2C_Init+0x264>)
 80093f8:	fba2 2303 	umull	r2, r3, r2, r3
 80093fc:	099b      	lsrs	r3, r3, #6
 80093fe:	3301      	adds	r3, #1
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	6812      	ldr	r2, [r2, #0]
 8009404:	430b      	orrs	r3, r1
 8009406:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	69db      	ldr	r3, [r3, #28]
 800940e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009412:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	495c      	ldr	r1, [pc, #368]	; (800958c <HAL_I2C_Init+0x254>)
 800941c:	428b      	cmp	r3, r1
 800941e:	d819      	bhi.n	8009454 <HAL_I2C_Init+0x11c>
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	1e59      	subs	r1, r3, #1
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	005b      	lsls	r3, r3, #1
 800942a:	fbb1 f3f3 	udiv	r3, r1, r3
 800942e:	1c59      	adds	r1, r3, #1
 8009430:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009434:	400b      	ands	r3, r1
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00a      	beq.n	8009450 <HAL_I2C_Init+0x118>
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	1e59      	subs	r1, r3, #1
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	005b      	lsls	r3, r3, #1
 8009444:	fbb1 f3f3 	udiv	r3, r1, r3
 8009448:	3301      	adds	r3, #1
 800944a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800944e:	e051      	b.n	80094f4 <HAL_I2C_Init+0x1bc>
 8009450:	2304      	movs	r3, #4
 8009452:	e04f      	b.n	80094f4 <HAL_I2C_Init+0x1bc>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d111      	bne.n	8009480 <HAL_I2C_Init+0x148>
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	1e58      	subs	r0, r3, #1
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6859      	ldr	r1, [r3, #4]
 8009464:	460b      	mov	r3, r1
 8009466:	005b      	lsls	r3, r3, #1
 8009468:	440b      	add	r3, r1
 800946a:	fbb0 f3f3 	udiv	r3, r0, r3
 800946e:	3301      	adds	r3, #1
 8009470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009474:	2b00      	cmp	r3, #0
 8009476:	bf0c      	ite	eq
 8009478:	2301      	moveq	r3, #1
 800947a:	2300      	movne	r3, #0
 800947c:	b2db      	uxtb	r3, r3
 800947e:	e012      	b.n	80094a6 <HAL_I2C_Init+0x16e>
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	1e58      	subs	r0, r3, #1
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6859      	ldr	r1, [r3, #4]
 8009488:	460b      	mov	r3, r1
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	440b      	add	r3, r1
 800948e:	0099      	lsls	r1, r3, #2
 8009490:	440b      	add	r3, r1
 8009492:	fbb0 f3f3 	udiv	r3, r0, r3
 8009496:	3301      	adds	r3, #1
 8009498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800949c:	2b00      	cmp	r3, #0
 800949e:	bf0c      	ite	eq
 80094a0:	2301      	moveq	r3, #1
 80094a2:	2300      	movne	r3, #0
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d001      	beq.n	80094ae <HAL_I2C_Init+0x176>
 80094aa:	2301      	movs	r3, #1
 80094ac:	e022      	b.n	80094f4 <HAL_I2C_Init+0x1bc>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d10e      	bne.n	80094d4 <HAL_I2C_Init+0x19c>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	1e58      	subs	r0, r3, #1
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6859      	ldr	r1, [r3, #4]
 80094be:	460b      	mov	r3, r1
 80094c0:	005b      	lsls	r3, r3, #1
 80094c2:	440b      	add	r3, r1
 80094c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80094c8:	3301      	adds	r3, #1
 80094ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094d2:	e00f      	b.n	80094f4 <HAL_I2C_Init+0x1bc>
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	1e58      	subs	r0, r3, #1
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6859      	ldr	r1, [r3, #4]
 80094dc:	460b      	mov	r3, r1
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	440b      	add	r3, r1
 80094e2:	0099      	lsls	r1, r3, #2
 80094e4:	440b      	add	r3, r1
 80094e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80094ea:	3301      	adds	r3, #1
 80094ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80094f4:	6879      	ldr	r1, [r7, #4]
 80094f6:	6809      	ldr	r1, [r1, #0]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	69da      	ldr	r2, [r3, #28]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a1b      	ldr	r3, [r3, #32]
 800950e:	431a      	orrs	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	430a      	orrs	r2, r1
 8009516:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009522:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	6911      	ldr	r1, [r2, #16]
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	68d2      	ldr	r2, [r2, #12]
 800952e:	4311      	orrs	r1, r2
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	6812      	ldr	r2, [r2, #0]
 8009534:	430b      	orrs	r3, r1
 8009536:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	695a      	ldr	r2, [r3, #20]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	699b      	ldr	r3, [r3, #24]
 800954a:	431a      	orrs	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	430a      	orrs	r2, r1
 8009552:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f042 0201 	orr.w	r2, r2, #1
 8009562:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2220      	movs	r2, #32
 800956e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	000186a0 	.word	0x000186a0
 8009590:	001e847f 	.word	0x001e847f
 8009594:	003d08ff 	.word	0x003d08ff
 8009598:	431bde83 	.word	0x431bde83
 800959c:	10624dd3 	.word	0x10624dd3

080095a0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80095a8:	bf00      	nop
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b086      	sub	sp, #24
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	607a      	str	r2, [r7, #4]
 80095be:	461a      	mov	r2, r3
 80095c0:	460b      	mov	r3, r1
 80095c2:	817b      	strh	r3, [r7, #10]
 80095c4:	4613      	mov	r3, r2
 80095c6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80095c8:	2300      	movs	r3, #0
 80095ca:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	2b20      	cmp	r3, #32
 80095d6:	f040 80f4 	bne.w	80097c2 <HAL_I2C_Master_Transmit_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80095da:	4b7c      	ldr	r3, [pc, #496]	; (80097cc <HAL_I2C_Master_Transmit_DMA+0x218>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	08db      	lsrs	r3, r3, #3
 80095e0:	4a7b      	ldr	r2, [pc, #492]	; (80097d0 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80095e2:	fba2 2303 	umull	r2, r3, r2, r3
 80095e6:	0a1a      	lsrs	r2, r3, #8
 80095e8:	4613      	mov	r3, r2
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4413      	add	r3, r2
 80095ee:	009a      	lsls	r2, r3, #2
 80095f0:	4413      	add	r3, r2
 80095f2:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	3b01      	subs	r3, #1
 80095f8:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d116      	bne.n	800962e <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2200      	movs	r2, #0
 8009604:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2220      	movs	r2, #32
 800960a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961a:	f043 0220 	orr.w	r2, r3, #32
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e0ca      	b.n	80097c4 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	f003 0302 	and.w	r3, r3, #2
 8009638:	2b02      	cmp	r3, #2
 800963a:	d0db      	beq.n	80095f4 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009642:	2b01      	cmp	r3, #1
 8009644:	d101      	bne.n	800964a <HAL_I2C_Master_Transmit_DMA+0x96>
 8009646:	2302      	movs	r3, #2
 8009648:	e0bc      	b.n	80097c4 <HAL_I2C_Master_Transmit_DMA+0x210>
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2201      	movs	r2, #1
 800964e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f003 0301 	and.w	r3, r3, #1
 800965c:	2b01      	cmp	r3, #1
 800965e:	d007      	beq.n	8009670 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f042 0201 	orr.w	r2, r2, #1
 800966e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800967e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2221      	movs	r2, #33	; 0x21
 8009684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2210      	movs	r2, #16
 800968c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	893a      	ldrh	r2, [r7, #8]
 80096a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	4a49      	ldr	r2, [pc, #292]	; (80097d4 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80096b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80096b2:	897a      	ldrh	r2, [r7, #10]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d062      	beq.n	8009786 <HAL_I2C_Master_Transmit_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c4:	4a44      	ldr	r2, [pc, #272]	; (80097d8 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80096c6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096cc:	4a43      	ldr	r2, [pc, #268]	; (80097dc <HAL_I2C_Master_Transmit_DMA+0x228>)
 80096ce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d4:	2200      	movs	r2, #0
 80096d6:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096dc:	2200      	movs	r2, #0
 80096de:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e4:	2200      	movs	r2, #0
 80096e6:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ec:	2200      	movs	r2, #0
 80096ee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f8:	4619      	mov	r1, r3
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	3310      	adds	r3, #16
 8009700:	461a      	mov	r2, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009706:	f7ff f90d 	bl	8008924 <HAL_DMA_Start_IT>
 800970a:	4603      	mov	r3, r0
 800970c:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 800970e:	7dfb      	ldrb	r3, [r7, #23]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d124      	bne.n	800975e <HAL_I2C_Master_Transmit_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009722:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009732:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2200      	movs	r2, #0
 8009738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	685a      	ldr	r2, [r3, #4]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800974a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	685a      	ldr	r2, [r3, #4]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800975a:	605a      	str	r2, [r3, #4]
 800975c:	e02f      	b.n	80097be <HAL_I2C_Master_Transmit_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2220      	movs	r2, #32
 8009762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009772:	f043 0210 	orr.w	r2, r3, #16
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e01e      	b.n	80097c4 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009794:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097a4:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	685a      	ldr	r2, [r3, #4]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80097bc:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80097be:	2300      	movs	r3, #0
 80097c0:	e000      	b.n	80097c4 <HAL_I2C_Master_Transmit_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 80097c2:	2302      	movs	r3, #2
  }
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3718      	adds	r7, #24
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	200001cc 	.word	0x200001cc
 80097d0:	14f8b589 	.word	0x14f8b589
 80097d4:	ffff0000 	.word	0xffff0000
 80097d8:	0800b085 	.word	0x0800b085
 80097dc:	0800b21f 	.word	0x0800b21f

080097e0 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	607a      	str	r2, [r7, #4]
 80097ea:	461a      	mov	r2, r3
 80097ec:	460b      	mov	r3, r1
 80097ee:	817b      	strh	r3, [r7, #10]
 80097f0:	4613      	mov	r3, r2
 80097f2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80097f4:	2300      	movs	r3, #0
 80097f6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	2b20      	cmp	r3, #32
 8009802:	f040 80f4 	bne.w	80099ee <HAL_I2C_Master_Receive_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8009806:	4b7c      	ldr	r3, [pc, #496]	; (80099f8 <HAL_I2C_Master_Receive_DMA+0x218>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	08db      	lsrs	r3, r3, #3
 800980c:	4a7b      	ldr	r2, [pc, #492]	; (80099fc <HAL_I2C_Master_Receive_DMA+0x21c>)
 800980e:	fba2 2303 	umull	r2, r3, r2, r3
 8009812:	0a1a      	lsrs	r2, r3, #8
 8009814:	4613      	mov	r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	4413      	add	r3, r2
 800981a:	009a      	lsls	r2, r3, #2
 800981c:	4413      	add	r3, r2
 800981e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	3b01      	subs	r3, #1
 8009824:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d116      	bne.n	800985a <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2200      	movs	r2, #0
 8009830:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2220      	movs	r2, #32
 8009836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2200      	movs	r2, #0
 800983e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009846:	f043 0220 	orr.w	r2, r3, #32
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2200      	movs	r2, #0
 8009852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e0ca      	b.n	80099f0 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	f003 0302 	and.w	r3, r3, #2
 8009864:	2b02      	cmp	r3, #2
 8009866:	d0db      	beq.n	8009820 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800986e:	2b01      	cmp	r3, #1
 8009870:	d101      	bne.n	8009876 <HAL_I2C_Master_Receive_DMA+0x96>
 8009872:	2302      	movs	r3, #2
 8009874:	e0bc      	b.n	80099f0 <HAL_I2C_Master_Receive_DMA+0x210>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2201      	movs	r2, #1
 800987a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f003 0301 	and.w	r3, r3, #1
 8009888:	2b01      	cmp	r3, #1
 800988a:	d007      	beq.n	800989c <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f042 0201 	orr.w	r2, r2, #1
 800989a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80098aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2222      	movs	r2, #34	; 0x22
 80098b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2210      	movs	r2, #16
 80098b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2200      	movs	r2, #0
 80098c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	893a      	ldrh	r2, [r7, #8]
 80098cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4a49      	ldr	r2, [pc, #292]	; (8009a00 <HAL_I2C_Master_Receive_DMA+0x220>)
 80098dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80098de:	897a      	ldrh	r2, [r7, #10]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d062      	beq.n	80099b2 <HAL_I2C_Master_Receive_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f0:	4a44      	ldr	r2, [pc, #272]	; (8009a04 <HAL_I2C_Master_Receive_DMA+0x224>)
 80098f2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f8:	4a43      	ldr	r2, [pc, #268]	; (8009a08 <HAL_I2C_Master_Receive_DMA+0x228>)
 80098fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009900:	2200      	movs	r2, #0
 8009902:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009908:	2200      	movs	r2, #0
 800990a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009910:	2200      	movs	r2, #0
 8009912:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009918:	2200      	movs	r2, #0
 800991a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	3310      	adds	r3, #16
 8009926:	4619      	mov	r1, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992c:	461a      	mov	r2, r3
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009932:	f7fe fff7 	bl	8008924 <HAL_DMA_Start_IT>
 8009936:	4603      	mov	r3, r0
 8009938:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 800993a:	7dfb      	ldrb	r3, [r7, #23]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d124      	bne.n	800998a <HAL_I2C_Master_Receive_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800994e:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800995e:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8009976:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	685a      	ldr	r2, [r3, #4]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009986:	605a      	str	r2, [r3, #4]
 8009988:	e02f      	b.n	80099ea <HAL_I2C_Master_Receive_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2220      	movs	r2, #32
 800998e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2200      	movs	r2, #0
 8009996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800999e:	f043 0210 	orr.w	r2, r3, #16
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e01e      	b.n	80099f0 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80099c0:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099d0:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	685a      	ldr	r2, [r3, #4]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80099e8:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80099ea:	2300      	movs	r3, #0
 80099ec:	e000      	b.n	80099f0 <HAL_I2C_Master_Receive_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 80099ee:	2302      	movs	r3, #2
  }
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3718      	adds	r7, #24
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	200001cc 	.word	0x200001cc
 80099fc:	14f8b589 	.word	0x14f8b589
 8009a00:	ffff0000 	.word	0xffff0000
 8009a04:	0800b085 	.word	0x0800b085
 8009a08:	0800b21f 	.word	0x0800b21f

08009a0c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b088      	sub	sp, #32
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8009a14:	2300      	movs	r3, #0
 8009a16:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a24:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a2c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a34:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8009a36:	7bfb      	ldrb	r3, [r7, #15]
 8009a38:	2b10      	cmp	r3, #16
 8009a3a:	d003      	beq.n	8009a44 <HAL_I2C_EV_IRQHandler+0x38>
 8009a3c:	7bfb      	ldrb	r3, [r7, #15]
 8009a3e:	2b40      	cmp	r3, #64	; 0x40
 8009a40:	f040 80b6 	bne.w	8009bb0 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	699b      	ldr	r3, [r3, #24]
 8009a4a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	695b      	ldr	r3, [r3, #20]
 8009a52:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	f003 0301 	and.w	r3, r3, #1
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10d      	bne.n	8009a7a <HAL_I2C_EV_IRQHandler+0x6e>
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009a64:	d003      	beq.n	8009a6e <HAL_I2C_EV_IRQHandler+0x62>
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009a6c:	d101      	bne.n	8009a72 <HAL_I2C_EV_IRQHandler+0x66>
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e000      	b.n	8009a74 <HAL_I2C_EV_IRQHandler+0x68>
 8009a72:	2300      	movs	r3, #0
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	f000 8127 	beq.w	8009cc8 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	f003 0301 	and.w	r3, r3, #1
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00c      	beq.n	8009a9e <HAL_I2C_EV_IRQHandler+0x92>
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	0a5b      	lsrs	r3, r3, #9
 8009a88:	f003 0301 	and.w	r3, r3, #1
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d006      	beq.n	8009a9e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f001 fc68 	bl	800b366 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fd01 	bl	800a49e <I2C_Master_SB>
 8009a9c:	e087      	b.n	8009bae <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009a9e:	69fb      	ldr	r3, [r7, #28]
 8009aa0:	08db      	lsrs	r3, r3, #3
 8009aa2:	f003 0301 	and.w	r3, r3, #1
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d009      	beq.n	8009abe <HAL_I2C_EV_IRQHandler+0xb2>
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	0a5b      	lsrs	r3, r3, #9
 8009aae:	f003 0301 	and.w	r3, r3, #1
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d003      	beq.n	8009abe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fd6f 	bl	800a59a <I2C_Master_ADD10>
 8009abc:	e077      	b.n	8009bae <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	085b      	lsrs	r3, r3, #1
 8009ac2:	f003 0301 	and.w	r3, r3, #1
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d009      	beq.n	8009ade <HAL_I2C_EV_IRQHandler+0xd2>
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	0a5b      	lsrs	r3, r3, #9
 8009ace:	f003 0301 	and.w	r3, r3, #1
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d003      	beq.n	8009ade <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 fd89 	bl	800a5ee <I2C_Master_ADDR>
 8009adc:	e067      	b.n	8009bae <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	089b      	lsrs	r3, r3, #2
 8009ae2:	f003 0301 	and.w	r3, r3, #1
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d030      	beq.n	8009b4c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009af4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009af8:	f000 80e8 	beq.w	8009ccc <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	09db      	lsrs	r3, r3, #7
 8009b00:	f003 0301 	and.w	r3, r3, #1
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00f      	beq.n	8009b28 <HAL_I2C_EV_IRQHandler+0x11c>
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	0a9b      	lsrs	r3, r3, #10
 8009b0c:	f003 0301 	and.w	r3, r3, #1
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d009      	beq.n	8009b28 <HAL_I2C_EV_IRQHandler+0x11c>
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	089b      	lsrs	r3, r3, #2
 8009b18:	f003 0301 	and.w	r3, r3, #1
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d103      	bne.n	8009b28 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 f9e2 	bl	8009eea <I2C_MasterTransmit_TXE>
 8009b26:	e042      	b.n	8009bae <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	089b      	lsrs	r3, r3, #2
 8009b2c:	f003 0301 	and.w	r3, r3, #1
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f000 80cb 	beq.w	8009ccc <HAL_I2C_EV_IRQHandler+0x2c0>
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	0a5b      	lsrs	r3, r3, #9
 8009b3a:	f003 0301 	and.w	r3, r3, #1
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	f000 80c4 	beq.w	8009ccc <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fac8 	bl	800a0da <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009b4a:	e0bf      	b.n	8009ccc <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b5a:	f000 80b7 	beq.w	8009ccc <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	099b      	lsrs	r3, r3, #6
 8009b62:	f003 0301 	and.w	r3, r3, #1
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00f      	beq.n	8009b8a <HAL_I2C_EV_IRQHandler+0x17e>
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	0a9b      	lsrs	r3, r3, #10
 8009b6e:	f003 0301 	and.w	r3, r3, #1
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d009      	beq.n	8009b8a <HAL_I2C_EV_IRQHandler+0x17e>
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	089b      	lsrs	r3, r3, #2
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d103      	bne.n	8009b8a <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 fb1f 	bl	800a1c6 <I2C_MasterReceive_RXNE>
 8009b88:	e011      	b.n	8009bae <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	089b      	lsrs	r3, r3, #2
 8009b8e:	f003 0301 	and.w	r3, r3, #1
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f000 809a 	beq.w	8009ccc <HAL_I2C_EV_IRQHandler+0x2c0>
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	0a5b      	lsrs	r3, r3, #9
 8009b9c:	f003 0301 	and.w	r3, r3, #1
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f000 8093 	beq.w	8009ccc <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 fb8f 	bl	800a2ca <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009bac:	e08e      	b.n	8009ccc <HAL_I2C_EV_IRQHandler+0x2c0>
 8009bae:	e08d      	b.n	8009ccc <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d004      	beq.n	8009bc2 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	695b      	ldr	r3, [r3, #20]
 8009bbe:	61fb      	str	r3, [r7, #28]
 8009bc0:	e007      	b.n	8009bd2 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	695b      	ldr	r3, [r3, #20]
 8009bd0:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	085b      	lsrs	r3, r3, #1
 8009bd6:	f003 0301 	and.w	r3, r3, #1
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d012      	beq.n	8009c04 <HAL_I2C_EV_IRQHandler+0x1f8>
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	0a5b      	lsrs	r3, r3, #9
 8009be2:	f003 0301 	and.w	r3, r3, #1
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00c      	beq.n	8009c04 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d003      	beq.n	8009bfa <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	699b      	ldr	r3, [r3, #24]
 8009bf8:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8009bfa:	69b9      	ldr	r1, [r7, #24]
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 ff45 	bl	800aa8c <I2C_Slave_ADDR>
 8009c02:	e066      	b.n	8009cd2 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	091b      	lsrs	r3, r3, #4
 8009c08:	f003 0301 	and.w	r3, r3, #1
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d009      	beq.n	8009c24 <HAL_I2C_EV_IRQHandler+0x218>
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	0a5b      	lsrs	r3, r3, #9
 8009c14:	f003 0301 	and.w	r3, r3, #1
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d003      	beq.n	8009c24 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 ff79 	bl	800ab14 <I2C_Slave_STOPF>
 8009c22:	e056      	b.n	8009cd2 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009c24:	7bbb      	ldrb	r3, [r7, #14]
 8009c26:	2b21      	cmp	r3, #33	; 0x21
 8009c28:	d002      	beq.n	8009c30 <HAL_I2C_EV_IRQHandler+0x224>
 8009c2a:	7bbb      	ldrb	r3, [r7, #14]
 8009c2c:	2b29      	cmp	r3, #41	; 0x29
 8009c2e:	d125      	bne.n	8009c7c <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	09db      	lsrs	r3, r3, #7
 8009c34:	f003 0301 	and.w	r3, r3, #1
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d00f      	beq.n	8009c5c <HAL_I2C_EV_IRQHandler+0x250>
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	0a9b      	lsrs	r3, r3, #10
 8009c40:	f003 0301 	and.w	r3, r3, #1
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d009      	beq.n	8009c5c <HAL_I2C_EV_IRQHandler+0x250>
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	089b      	lsrs	r3, r3, #2
 8009c4c:	f003 0301 	and.w	r3, r3, #1
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d103      	bne.n	8009c5c <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fe5b 	bl	800a910 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009c5a:	e039      	b.n	8009cd0 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	089b      	lsrs	r3, r3, #2
 8009c60:	f003 0301 	and.w	r3, r3, #1
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d033      	beq.n	8009cd0 <HAL_I2C_EV_IRQHandler+0x2c4>
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	0a5b      	lsrs	r3, r3, #9
 8009c6c:	f003 0301 	and.w	r3, r3, #1
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d02d      	beq.n	8009cd0 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fe88 	bl	800a98a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009c7a:	e029      	b.n	8009cd0 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	099b      	lsrs	r3, r3, #6
 8009c80:	f003 0301 	and.w	r3, r3, #1
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d00f      	beq.n	8009ca8 <HAL_I2C_EV_IRQHandler+0x29c>
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	0a9b      	lsrs	r3, r3, #10
 8009c8c:	f003 0301 	and.w	r3, r3, #1
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d009      	beq.n	8009ca8 <HAL_I2C_EV_IRQHandler+0x29c>
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	089b      	lsrs	r3, r3, #2
 8009c98:	f003 0301 	and.w	r3, r3, #1
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d103      	bne.n	8009ca8 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 fe93 	bl	800a9cc <I2C_SlaveReceive_RXNE>
 8009ca6:	e014      	b.n	8009cd2 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	089b      	lsrs	r3, r3, #2
 8009cac:	f003 0301 	and.w	r3, r3, #1
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00e      	beq.n	8009cd2 <HAL_I2C_EV_IRQHandler+0x2c6>
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	0a5b      	lsrs	r3, r3, #9
 8009cb8:	f003 0301 	and.w	r3, r3, #1
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d008      	beq.n	8009cd2 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 fec1 	bl	800aa48 <I2C_SlaveReceive_BTF>
 8009cc6:	e004      	b.n	8009cd2 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8009cc8:	bf00      	nop
 8009cca:	e002      	b.n	8009cd2 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009ccc:	bf00      	nop
 8009cce:	e000      	b.n	8009cd2 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009cd0:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8009cd2:	3720      	adds	r7, #32
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b08a      	sub	sp, #40	; 0x28
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	695b      	ldr	r3, [r3, #20]
 8009ce6:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009cf4:	6a3b      	ldr	r3, [r7, #32]
 8009cf6:	0a1b      	lsrs	r3, r3, #8
 8009cf8:	f003 0301 	and.w	r3, r3, #1
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00e      	beq.n	8009d1e <HAL_I2C_ER_IRQHandler+0x46>
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	0a1b      	lsrs	r3, r3, #8
 8009d04:	f003 0301 	and.w	r3, r3, #1
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d008      	beq.n	8009d1e <HAL_I2C_ER_IRQHandler+0x46>
  {
    error |= HAL_I2C_ERROR_BERR;
 8009d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0e:	f043 0301 	orr.w	r3, r3, #1
 8009d12:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009d1c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009d1e:	6a3b      	ldr	r3, [r7, #32]
 8009d20:	0a5b      	lsrs	r3, r3, #9
 8009d22:	f003 0301 	and.w	r3, r3, #1
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00e      	beq.n	8009d48 <HAL_I2C_ER_IRQHandler+0x70>
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	0a1b      	lsrs	r3, r3, #8
 8009d2e:	f003 0301 	and.w	r3, r3, #1
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d008      	beq.n	8009d48 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8009d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d38:	f043 0302 	orr.w	r3, r3, #2
 8009d3c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8009d46:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009d48:	6a3b      	ldr	r3, [r7, #32]
 8009d4a:	0a9b      	lsrs	r3, r3, #10
 8009d4c:	f003 0301 	and.w	r3, r3, #1
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d041      	beq.n	8009dd8 <HAL_I2C_ER_IRQHandler+0x100>
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	0a1b      	lsrs	r3, r3, #8
 8009d58:	f003 0301 	and.w	r3, r3, #1
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d03b      	beq.n	8009dd8 <HAL_I2C_ER_IRQHandler+0x100>
  {
    tmp1 = hi2c->Mode;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d66:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d76:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d7c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8009d7e:	7efb      	ldrb	r3, [r7, #27]
 8009d80:	2b20      	cmp	r3, #32
 8009d82:	d112      	bne.n	8009daa <HAL_I2C_ER_IRQHandler+0xd2>
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d10f      	bne.n	8009daa <HAL_I2C_ER_IRQHandler+0xd2>
 8009d8a:	7cfb      	ldrb	r3, [r7, #19]
 8009d8c:	2b21      	cmp	r3, #33	; 0x21
 8009d8e:	d008      	beq.n	8009da2 <HAL_I2C_ER_IRQHandler+0xca>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8009d90:	7cfb      	ldrb	r3, [r7, #19]
 8009d92:	2b29      	cmp	r3, #41	; 0x29
 8009d94:	d005      	beq.n	8009da2 <HAL_I2C_ER_IRQHandler+0xca>
 8009d96:	7cfb      	ldrb	r3, [r7, #19]
 8009d98:	2b28      	cmp	r3, #40	; 0x28
 8009d9a:	d106      	bne.n	8009daa <HAL_I2C_ER_IRQHandler+0xd2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2b21      	cmp	r3, #33	; 0x21
 8009da0:	d103      	bne.n	8009daa <HAL_I2C_ER_IRQHandler+0xd2>
    {
      I2C_Slave_AF(hi2c);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 ffe6 	bl	800ad74 <I2C_Slave_AF>
 8009da8:	e016      	b.n	8009dd8 <HAL_I2C_ER_IRQHandler+0x100>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009db2:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8009db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db6:	f043 0304 	orr.w	r3, r3, #4
 8009dba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	2b10      	cmp	r3, #16
 8009dc6:	d107      	bne.n	8009dd8 <HAL_I2C_ER_IRQHandler+0x100>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dd6:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009dd8:	6a3b      	ldr	r3, [r7, #32]
 8009dda:	0adb      	lsrs	r3, r3, #11
 8009ddc:	f003 0301 	and.w	r3, r3, #1
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00e      	beq.n	8009e02 <HAL_I2C_ER_IRQHandler+0x12a>
 8009de4:	69fb      	ldr	r3, [r7, #28]
 8009de6:	0a1b      	lsrs	r3, r3, #8
 8009de8:	f003 0301 	and.w	r3, r3, #1
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d008      	beq.n	8009e02 <HAL_I2C_ER_IRQHandler+0x12a>
  {
    error |= HAL_I2C_ERROR_OVR;
 8009df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df2:	f043 0308 	orr.w	r3, r3, #8
 8009df6:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8009e00:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8009e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d008      	beq.n	8009e1a <HAL_I2C_ER_IRQHandler+0x142>
  {
    hi2c->ErrorCode |= error;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0e:	431a      	orrs	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f001 f81d 	bl	800ae54 <I2C_ITError>
  }
}
 8009e1a:	bf00      	nop
 8009e1c:	3728      	adds	r7, #40	; 0x28
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009e22:	b480      	push	{r7}
 8009e24:	b083      	sub	sp, #12
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009e2a:	bf00      	nop
 8009e2c:	370c      	adds	r7, #12
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr

08009e36 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009e36:	b480      	push	{r7}
 8009e38:	b083      	sub	sp, #12
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009e3e:	bf00      	nop
 8009e40:	370c      	adds	r7, #12
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009e4a:	b480      	push	{r7}
 8009e4c:	b083      	sub	sp, #12
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
 8009e52:	460b      	mov	r3, r1
 8009e54:	70fb      	strb	r3, [r7, #3]
 8009e56:	4613      	mov	r3, r2
 8009e58:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009e5a:	bf00      	nop
 8009e5c:	370c      	adds	r7, #12
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009e66:	b480      	push	{r7}
 8009e68:	b083      	sub	sp, #12
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8009e6e:	bf00      	nop
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr

08009e7a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009e7a:	b480      	push	{r7}
 8009e7c:	b083      	sub	sp, #12
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8009e82:	bf00      	nop
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b083      	sub	sp, #12
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8009e96:	bf00      	nop
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b083      	sub	sp, #12
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009eaa:	bf00      	nop
 8009eac:	370c      	adds	r7, #12
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr

08009eb6 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009eb6:	b480      	push	{r7}
 8009eb8:	b083      	sub	sp, #12
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ec4:	b2db      	uxtb	r3, r3
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	370c      	adds	r7, #12
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr

08009ed2 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009ed2:	b480      	push	{r7}
 8009ed4:	b083      	sub	sp, #12
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	370c      	adds	r7, #12
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b084      	sub	sp, #16
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ef8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f00:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f06:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d150      	bne.n	8009fb2 <I2C_MasterTransmit_TXE+0xc8>
 8009f10:	7bfb      	ldrb	r3, [r7, #15]
 8009f12:	2b21      	cmp	r3, #33	; 0x21
 8009f14:	d14d      	bne.n	8009fb2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	2b08      	cmp	r3, #8
 8009f1a:	d01d      	beq.n	8009f58 <I2C_MasterTransmit_TXE+0x6e>
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	2b20      	cmp	r3, #32
 8009f20:	d01a      	beq.n	8009f58 <I2C_MasterTransmit_TXE+0x6e>
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009f28:	d016      	beq.n	8009f58 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	685a      	ldr	r2, [r3, #4]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009f38:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2211      	movs	r2, #17
 8009f3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2220      	movs	r2, #32
 8009f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f7fa fb71 	bl	8004638 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009f56:	e0bc      	b.n	800a0d2 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	685a      	ldr	r2, [r3, #4]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009f66:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f76:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2220      	movs	r2, #32
 8009f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	2b40      	cmp	r3, #64	; 0x40
 8009f90:	d107      	bne.n	8009fa2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f7ff ff6d 	bl	8009e7a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009fa0:	e097      	b.n	800a0d2 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f7fa fb44 	bl	8004638 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009fb0:	e08f      	b.n	800a0d2 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8009fb2:	7bfb      	ldrb	r3, [r7, #15]
 8009fb4:	2b21      	cmp	r3, #33	; 0x21
 8009fb6:	d007      	beq.n	8009fc8 <I2C_MasterTransmit_TXE+0xde>
 8009fb8:	7bbb      	ldrb	r3, [r7, #14]
 8009fba:	2b40      	cmp	r3, #64	; 0x40
 8009fbc:	f040 8089 	bne.w	800a0d2 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8009fc0:	7bfb      	ldrb	r3, [r7, #15]
 8009fc2:	2b22      	cmp	r3, #34	; 0x22
 8009fc4:	f040 8085 	bne.w	800a0d2 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d108      	bne.n	8009fe4 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	685a      	ldr	r2, [r3, #4]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fe0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8009fe2:	e076      	b.n	800a0d2 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	2b40      	cmp	r3, #64	; 0x40
 8009fee:	d15d      	bne.n	800a0ac <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d11d      	bne.n	800a034 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d10b      	bne.n	800a018 <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a004:	b2da      	uxtb	r2, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a010:	1c9a      	adds	r2, r3, #2
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a016:	e05c      	b.n	800a0d2 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	121b      	asrs	r3, r3, #8
 800a020:	b2da      	uxtb	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a02c:	1c5a      	adds	r2, r3, #1
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a032:	e04e      	b.n	800a0d2 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d10b      	bne.n	800a054 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a040:	b2da      	uxtb	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a04c:	1c5a      	adds	r2, r3, #1
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a052:	e03e      	b.n	800a0d2 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a058:	2b02      	cmp	r3, #2
 800a05a:	d13a      	bne.n	800a0d2 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a062:	b2db      	uxtb	r3, r3
 800a064:	2b22      	cmp	r3, #34	; 0x22
 800a066:	d108      	bne.n	800a07a <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a076:	601a      	str	r2, [r3, #0]
}
 800a078:	e02b      	b.n	800a0d2 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a080:	b2db      	uxtb	r3, r3
 800a082:	2b21      	cmp	r3, #33	; 0x21
 800a084:	d125      	bne.n	800a0d2 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08a:	781a      	ldrb	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a096:	1c5a      	adds	r2, r3, #1
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	b29a      	uxth	r2, r3
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a0aa:	e012      	b.n	800a0d2 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b0:	781a      	ldrb	r2, [r3, #0]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0bc:	1c5a      	adds	r2, r3, #1
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	3b01      	subs	r3, #1
 800a0ca:	b29a      	uxth	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a0d0:	e7ff      	b.n	800a0d2 <I2C_MasterTransmit_TXE+0x1e8>
 800a0d2:	bf00      	nop
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b084      	sub	sp, #16
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	2b21      	cmp	r3, #33	; 0x21
 800a0f2:	d164      	bne.n	800a1be <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d012      	beq.n	800a124 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a102:	781a      	ldrb	r2, [r3, #0]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10e:	1c5a      	adds	r2, r3, #1
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a118:	b29b      	uxth	r3, r3
 800a11a:	3b01      	subs	r3, #1
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 800a122:	e04c      	b.n	800a1be <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2b08      	cmp	r3, #8
 800a128:	d01d      	beq.n	800a166 <I2C_MasterTransmit_BTF+0x8c>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2b20      	cmp	r3, #32
 800a12e:	d01a      	beq.n	800a166 <I2C_MasterTransmit_BTF+0x8c>
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a136:	d016      	beq.n	800a166 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	685a      	ldr	r2, [r3, #4]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a146:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2211      	movs	r2, #17
 800a14c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2220      	movs	r2, #32
 800a15a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7fa fa6a 	bl	8004638 <HAL_I2C_MasterTxCpltCallback>
}
 800a164:	e02b      	b.n	800a1be <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	685a      	ldr	r2, [r3, #4]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a174:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a184:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2220      	movs	r2, #32
 800a190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	2b40      	cmp	r3, #64	; 0x40
 800a19e:	d107      	bne.n	800a1b0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f7ff fe66 	bl	8009e7a <HAL_I2C_MemTxCpltCallback>
}
 800a1ae:	e006      	b.n	800a1be <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f7fa fa3d 	bl	8004638 <HAL_I2C_MasterTxCpltCallback>
}
 800a1be:	bf00      	nop
 800a1c0:	3710      	adds	r7, #16
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b084      	sub	sp, #16
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b22      	cmp	r3, #34	; 0x22
 800a1d8:	d173      	bne.n	800a2c2 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2b03      	cmp	r3, #3
 800a1e6:	d920      	bls.n	800a22a <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	691a      	ldr	r2, [r3, #16]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f2:	b2d2      	uxtb	r2, r2
 800a1f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fa:	1c5a      	adds	r2, r3, #1
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a204:	b29b      	uxth	r3, r3
 800a206:	3b01      	subs	r3, #1
 800a208:	b29a      	uxth	r2, r3
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a212:	b29b      	uxth	r3, r3
 800a214:	2b03      	cmp	r3, #3
 800a216:	d154      	bne.n	800a2c2 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	685a      	ldr	r2, [r3, #4]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a226:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800a228:	e04b      	b.n	800a2c2 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d047      	beq.n	800a2c2 <I2C_MasterReceive_RXNE+0xfc>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2b01      	cmp	r3, #1
 800a236:	d002      	beq.n	800a23e <I2C_MasterReceive_RXNE+0x78>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d141      	bne.n	800a2c2 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a24c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	685a      	ldr	r2, [r3, #4]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a25c:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	691a      	ldr	r2, [r3, #16]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a268:	b2d2      	uxtb	r2, r2
 800a26a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a270:	1c5a      	adds	r2, r3, #1
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	3b01      	subs	r3, #1
 800a27e:	b29a      	uxth	r2, r3
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2220      	movs	r2, #32
 800a288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a292:	b2db      	uxtb	r3, r3
 800a294:	2b40      	cmp	r3, #64	; 0x40
 800a296:	d10a      	bne.n	800a2ae <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f7ff fdf1 	bl	8009e8e <HAL_I2C_MemRxCpltCallback>
}
 800a2ac:	e009      	b.n	800a2c2 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2212      	movs	r2, #18
 800a2ba:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f7fa f9c7 	bl	8004650 <HAL_I2C_MasterRxCpltCallback>
}
 800a2c2:	bf00      	nop
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b084      	sub	sp, #16
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	2b04      	cmp	r3, #4
 800a2e0:	d11b      	bne.n	800a31a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	685a      	ldr	r2, [r3, #4]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2f0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	691a      	ldr	r2, [r3, #16]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fc:	b2d2      	uxtb	r2, r2
 800a2fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a304:	1c5a      	adds	r2, r3, #1
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a30e:	b29b      	uxth	r3, r3
 800a310:	3b01      	subs	r3, #1
 800a312:	b29a      	uxth	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800a318:	e0bd      	b.n	800a496 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a31e:	b29b      	uxth	r3, r3
 800a320:	2b03      	cmp	r3, #3
 800a322:	d129      	bne.n	800a378 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	685a      	ldr	r2, [r3, #4]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a332:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2b04      	cmp	r3, #4
 800a338:	d00a      	beq.n	800a350 <I2C_MasterReceive_BTF+0x86>
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d007      	beq.n	800a350 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a34e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	691a      	ldr	r2, [r3, #16]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35a:	b2d2      	uxtb	r2, r2
 800a35c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a362:	1c5a      	adds	r2, r3, #1
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	3b01      	subs	r3, #1
 800a370:	b29a      	uxth	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a376:	e08e      	b.n	800a496 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d176      	bne.n	800a470 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2b01      	cmp	r3, #1
 800a386:	d002      	beq.n	800a38e <I2C_MasterReceive_BTF+0xc4>
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2b10      	cmp	r3, #16
 800a38c:	d108      	bne.n	800a3a0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a39c:	601a      	str	r2, [r3, #0]
 800a39e:	e019      	b.n	800a3d4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2b04      	cmp	r3, #4
 800a3a4:	d002      	beq.n	800a3ac <I2C_MasterReceive_BTF+0xe2>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	d108      	bne.n	800a3be <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a3ba:	601a      	str	r2, [r3, #0]
 800a3bc:	e00a      	b.n	800a3d4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2b10      	cmp	r3, #16
 800a3c2:	d007      	beq.n	800a3d4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3d2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	691a      	ldr	r2, [r3, #16]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3de:	b2d2      	uxtb	r2, r2
 800a3e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e6:	1c5a      	adds	r2, r3, #1
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	691a      	ldr	r2, [r3, #16]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a404:	b2d2      	uxtb	r2, r2
 800a406:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	1c5a      	adds	r2, r3, #1
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a416:	b29b      	uxth	r3, r3
 800a418:	3b01      	subs	r3, #1
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	685a      	ldr	r2, [r3, #4]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a42e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2220      	movs	r2, #32
 800a434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	2b40      	cmp	r3, #64	; 0x40
 800a442:	d10a      	bne.n	800a45a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2200      	movs	r2, #0
 800a450:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f7ff fd1b 	bl	8009e8e <HAL_I2C_MemRxCpltCallback>
}
 800a458:	e01d      	b.n	800a496 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2212      	movs	r2, #18
 800a466:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f7fa f8f1 	bl	8004650 <HAL_I2C_MasterRxCpltCallback>
}
 800a46e:	e012      	b.n	800a496 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	691a      	ldr	r2, [r3, #16]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47a:	b2d2      	uxtb	r2, r2
 800a47c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a482:	1c5a      	adds	r2, r3, #1
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	3b01      	subs	r3, #1
 800a490:	b29a      	uxth	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a496:	bf00      	nop
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800a49e:	b480      	push	{r7}
 800a4a0:	b083      	sub	sp, #12
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	2b40      	cmp	r3, #64	; 0x40
 800a4b0:	d117      	bne.n	800a4e2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d109      	bne.n	800a4ce <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a4ca:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800a4cc:	e05f      	b.n	800a58e <I2C_Master_SB+0xf0>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	f043 0301 	orr.w	r3, r3, #1
 800a4d8:	b2da      	uxtb	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	611a      	str	r2, [r3, #16]
}
 800a4e0:	e055      	b.n	800a58e <I2C_Master_SB+0xf0>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4ea:	d12b      	bne.n	800a544 <I2C_Master_SB+0xa6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	2b21      	cmp	r3, #33	; 0x21
 800a4f6:	d109      	bne.n	800a50c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	461a      	mov	r2, r3
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a508:	611a      	str	r2, [r3, #16]
 800a50a:	e008      	b.n	800a51e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a510:	b2db      	uxtb	r3, r3
 800a512:	f043 0301 	orr.w	r3, r3, #1
 800a516:	b2da      	uxtb	r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a524:	2b00      	cmp	r3, #0
 800a526:	d104      	bne.n	800a532 <I2C_Master_SB+0x94>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d02d      	beq.n	800a58e <I2C_Master_SB+0xf0>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	685a      	ldr	r2, [r3, #4]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a540:	605a      	str	r2, [r3, #4]
}
 800a542:	e024      	b.n	800a58e <I2C_Master_SB+0xf0>
      if (hi2c->EventCount == 0U)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d10e      	bne.n	800a56a <I2C_Master_SB+0xcc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a550:	b29b      	uxth	r3, r3
 800a552:	11db      	asrs	r3, r3, #7
 800a554:	b2db      	uxtb	r3, r3
 800a556:	f003 0306 	and.w	r3, r3, #6
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	f063 030f 	orn	r3, r3, #15
 800a560:	b2da      	uxtb	r2, r3
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	611a      	str	r2, [r3, #16]
}
 800a568:	e011      	b.n	800a58e <I2C_Master_SB+0xf0>
      else if (hi2c->EventCount == 1U)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d10d      	bne.n	800a58e <I2C_Master_SB+0xf0>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a576:	b29b      	uxth	r3, r3
 800a578:	11db      	asrs	r3, r3, #7
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	f003 0306 	and.w	r3, r3, #6
 800a580:	b2db      	uxtb	r3, r3
 800a582:	f063 030e 	orn	r3, r3, #14
 800a586:	b2da      	uxtb	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	611a      	str	r2, [r3, #16]
}
 800a58e:	bf00      	nop
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr

0800a59a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800a59a:	b480      	push	{r7}
 800a59c:	b083      	sub	sp, #12
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5a6:	b2da      	uxtb	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d103      	bne.n	800a5be <I2C_Master_ADD10+0x24>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d011      	beq.n	800a5e2 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d104      	bne.n	800a5d2 <I2C_Master_ADD10+0x38>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d007      	beq.n	800a5e2 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	685a      	ldr	r2, [r3, #4]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5e0:	605a      	str	r2, [r3, #4]
    }
  }
}
 800a5e2:	bf00      	nop
 800a5e4:	370c      	adds	r7, #12
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr

0800a5ee <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800a5ee:	b480      	push	{r7}
 800a5f0:	b091      	sub	sp, #68	; 0x44
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a604:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a60a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a612:	b2db      	uxtb	r3, r3
 800a614:	2b22      	cmp	r3, #34	; 0x22
 800a616:	f040 8169 	bne.w	800a8ec <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d10f      	bne.n	800a642 <I2C_Master_ADDR+0x54>
 800a622:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a626:	2b40      	cmp	r3, #64	; 0x40
 800a628:	d10b      	bne.n	800a642 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a62a:	2300      	movs	r3, #0
 800a62c:	633b      	str	r3, [r7, #48]	; 0x30
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	695b      	ldr	r3, [r3, #20]
 800a634:	633b      	str	r3, [r7, #48]	; 0x30
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	699b      	ldr	r3, [r3, #24]
 800a63c:	633b      	str	r3, [r7, #48]	; 0x30
 800a63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a640:	e160      	b.n	800a904 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a646:	2b00      	cmp	r3, #0
 800a648:	d11d      	bne.n	800a686 <I2C_Master_ADDR+0x98>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a652:	d118      	bne.n	800a686 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a654:	2300      	movs	r3, #0
 800a656:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	695b      	ldr	r3, [r3, #20]
 800a65e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a668:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a678:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a67e:	1c5a      	adds	r2, r3, #1
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	651a      	str	r2, [r3, #80]	; 0x50
 800a684:	e13e      	b.n	800a904 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d113      	bne.n	800a6b8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a690:	2300      	movs	r3, #0
 800a692:	62bb      	str	r3, [r7, #40]	; 0x28
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	695b      	ldr	r3, [r3, #20]
 800a69a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	699b      	ldr	r3, [r3, #24]
 800a6a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6b4:	601a      	str	r2, [r3, #0]
 800a6b6:	e115      	b.n	800a8e4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	f040 808a 	bne.w	800a7d8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800a6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a6ca:	d137      	bne.n	800a73c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6da:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6ea:	d113      	bne.n	800a714 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6fa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	627b      	str	r3, [r7, #36]	; 0x24
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	695b      	ldr	r3, [r3, #20]
 800a706:	627b      	str	r3, [r7, #36]	; 0x24
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	699b      	ldr	r3, [r3, #24]
 800a70e:	627b      	str	r3, [r7, #36]	; 0x24
 800a710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a712:	e0e7      	b.n	800a8e4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a714:	2300      	movs	r3, #0
 800a716:	623b      	str	r3, [r7, #32]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	695b      	ldr	r3, [r3, #20]
 800a71e:	623b      	str	r3, [r7, #32]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	699b      	ldr	r3, [r3, #24]
 800a726:	623b      	str	r3, [r7, #32]
 800a728:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a738:	601a      	str	r2, [r3, #0]
 800a73a:	e0d3      	b.n	800a8e4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800a73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73e:	2b08      	cmp	r3, #8
 800a740:	d02e      	beq.n	800a7a0 <I2C_Master_ADDR+0x1b2>
 800a742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a744:	2b20      	cmp	r3, #32
 800a746:	d02b      	beq.n	800a7a0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800a748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a74a:	2b12      	cmp	r3, #18
 800a74c:	d102      	bne.n	800a754 <I2C_Master_ADDR+0x166>
 800a74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a750:	2b01      	cmp	r3, #1
 800a752:	d125      	bne.n	800a7a0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800a754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a756:	2b04      	cmp	r3, #4
 800a758:	d00e      	beq.n	800a778 <I2C_Master_ADDR+0x18a>
 800a75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d00b      	beq.n	800a778 <I2C_Master_ADDR+0x18a>
 800a760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a762:	2b10      	cmp	r3, #16
 800a764:	d008      	beq.n	800a778 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a774:	601a      	str	r2, [r3, #0]
 800a776:	e007      	b.n	800a788 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a786:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a788:	2300      	movs	r3, #0
 800a78a:	61fb      	str	r3, [r7, #28]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	695b      	ldr	r3, [r3, #20]
 800a792:	61fb      	str	r3, [r7, #28]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	699b      	ldr	r3, [r3, #24]
 800a79a:	61fb      	str	r3, [r7, #28]
 800a79c:	69fb      	ldr	r3, [r7, #28]
 800a79e:	e0a1      	b.n	800a8e4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7ae:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	61bb      	str	r3, [r7, #24]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	695b      	ldr	r3, [r3, #20]
 800a7ba:	61bb      	str	r3, [r7, #24]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	699b      	ldr	r3, [r3, #24]
 800a7c2:	61bb      	str	r3, [r7, #24]
 800a7c4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7d4:	601a      	str	r2, [r3, #0]
 800a7d6:	e085      	b.n	800a8e4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	2b02      	cmp	r3, #2
 800a7e0:	d14d      	bne.n	800a87e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800a7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e4:	2b04      	cmp	r3, #4
 800a7e6:	d016      	beq.n	800a816 <I2C_Master_ADDR+0x228>
 800a7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	d013      	beq.n	800a816 <I2C_Master_ADDR+0x228>
 800a7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f0:	2b10      	cmp	r3, #16
 800a7f2:	d010      	beq.n	800a816 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a802:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	e007      	b.n	800a826 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a824:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a834:	d117      	bne.n	800a866 <I2C_Master_ADDR+0x278>
 800a836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a838:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a83c:	d00b      	beq.n	800a856 <I2C_Master_ADDR+0x268>
 800a83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a840:	2b01      	cmp	r3, #1
 800a842:	d008      	beq.n	800a856 <I2C_Master_ADDR+0x268>
 800a844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a846:	2b08      	cmp	r3, #8
 800a848:	d005      	beq.n	800a856 <I2C_Master_ADDR+0x268>
 800a84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84c:	2b10      	cmp	r3, #16
 800a84e:	d002      	beq.n	800a856 <I2C_Master_ADDR+0x268>
 800a850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a852:	2b20      	cmp	r3, #32
 800a854:	d107      	bne.n	800a866 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	685a      	ldr	r2, [r3, #4]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a864:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a866:	2300      	movs	r3, #0
 800a868:	617b      	str	r3, [r7, #20]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	695b      	ldr	r3, [r3, #20]
 800a870:	617b      	str	r3, [r7, #20]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	699b      	ldr	r3, [r3, #24]
 800a878:	617b      	str	r3, [r7, #20]
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	e032      	b.n	800a8e4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a88c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a89c:	d117      	bne.n	800a8ce <I2C_Master_ADDR+0x2e0>
 800a89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a8a4:	d00b      	beq.n	800a8be <I2C_Master_ADDR+0x2d0>
 800a8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d008      	beq.n	800a8be <I2C_Master_ADDR+0x2d0>
 800a8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ae:	2b08      	cmp	r3, #8
 800a8b0:	d005      	beq.n	800a8be <I2C_Master_ADDR+0x2d0>
 800a8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b4:	2b10      	cmp	r3, #16
 800a8b6:	d002      	beq.n	800a8be <I2C_Master_ADDR+0x2d0>
 800a8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ba:	2b20      	cmp	r3, #32
 800a8bc:	d107      	bne.n	800a8ce <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	685a      	ldr	r2, [r3, #4]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a8cc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	613b      	str	r3, [r7, #16]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	695b      	ldr	r3, [r3, #20]
 800a8d8:	613b      	str	r3, [r7, #16]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	699b      	ldr	r3, [r3, #24]
 800a8e0:	613b      	str	r3, [r7, #16]
 800a8e2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800a8ea:	e00b      	b.n	800a904 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	60fb      	str	r3, [r7, #12]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	695b      	ldr	r3, [r3, #20]
 800a8f6:	60fb      	str	r3, [r7, #12]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	699b      	ldr	r3, [r3, #24]
 800a8fe:	60fb      	str	r3, [r7, #12]
 800a900:	68fb      	ldr	r3, [r7, #12]
}
 800a902:	e7ff      	b.n	800a904 <I2C_Master_ADDR+0x316>
 800a904:	bf00      	nop
 800a906:	3744      	adds	r7, #68	; 0x44
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a91e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a924:	b29b      	uxth	r3, r3
 800a926:	2b00      	cmp	r3, #0
 800a928:	d02b      	beq.n	800a982 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92e:	781a      	ldrb	r2, [r3, #0]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93a:	1c5a      	adds	r2, r3, #1
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a944:	b29b      	uxth	r3, r3
 800a946:	3b01      	subs	r3, #1
 800a948:	b29a      	uxth	r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a952:	b29b      	uxth	r3, r3
 800a954:	2b00      	cmp	r3, #0
 800a956:	d114      	bne.n	800a982 <I2C_SlaveTransmit_TXE+0x72>
 800a958:	7bfb      	ldrb	r3, [r7, #15]
 800a95a:	2b29      	cmp	r3, #41	; 0x29
 800a95c:	d111      	bne.n	800a982 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	685a      	ldr	r2, [r3, #4]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a96c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2221      	movs	r2, #33	; 0x21
 800a972:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2228      	movs	r2, #40	; 0x28
 800a978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f7ff fa50 	bl	8009e22 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800a982:	bf00      	nop
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800a98a:	b480      	push	{r7}
 800a98c:	b083      	sub	sp, #12
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a996:	b29b      	uxth	r3, r3
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d011      	beq.n	800a9c0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a0:	781a      	ldrb	r2, [r3, #0]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ac:	1c5a      	adds	r2, r3, #1
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	3b01      	subs	r3, #1
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800a9c0:	bf00      	nop
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d02c      	beq.n	800aa40 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	691a      	ldr	r2, [r3, #16]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f0:	b2d2      	uxtb	r2, r2
 800a9f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f8:	1c5a      	adds	r2, r3, #1
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	3b01      	subs	r3, #1
 800aa06:	b29a      	uxth	r2, r3
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d114      	bne.n	800aa40 <I2C_SlaveReceive_RXNE+0x74>
 800aa16:	7bfb      	ldrb	r3, [r7, #15]
 800aa18:	2b2a      	cmp	r3, #42	; 0x2a
 800aa1a:	d111      	bne.n	800aa40 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	685a      	ldr	r2, [r3, #4]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa2a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2222      	movs	r2, #34	; 0x22
 800aa30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2228      	movs	r2, #40	; 0x28
 800aa36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f7ff f9fb 	bl	8009e36 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800aa40:	bf00      	nop
 800aa42:	3710      	adds	r7, #16
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d012      	beq.n	800aa80 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	691a      	ldr	r2, [r3, #16]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa64:	b2d2      	uxtb	r2, r2
 800aa66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6c:	1c5a      	adds	r2, r3, #1
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800aa80:	bf00      	nop
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800aa96:	2300      	movs	r3, #0
 800aa98:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800aaa6:	2b28      	cmp	r3, #40	; 0x28
 800aaa8:	d127      	bne.n	800aafa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	685a      	ldr	r2, [r3, #4]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aab8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	089b      	lsrs	r3, r3, #2
 800aabe:	f003 0301 	and.w	r3, r3, #1
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d101      	bne.n	800aaca <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800aac6:	2301      	movs	r3, #1
 800aac8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	09db      	lsrs	r3, r3, #7
 800aace:	f003 0301 	and.w	r3, r3, #1
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d103      	bne.n	800aade <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	81bb      	strh	r3, [r7, #12]
 800aadc:	e002      	b.n	800aae4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	699b      	ldr	r3, [r3, #24]
 800aae2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800aaec:	89ba      	ldrh	r2, [r7, #12]
 800aaee:	7bfb      	ldrb	r3, [r7, #15]
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f7ff f9a9 	bl	8009e4a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800aaf8:	e008      	b.n	800ab0c <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f06f 0202 	mvn.w	r2, #2
 800ab02:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800ab0c:	bf00      	nop
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab22:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	685a      	ldr	r2, [r3, #4]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ab32:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800ab34:	2300      	movs	r3, #0
 800ab36:	60bb      	str	r3, [r7, #8]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	695b      	ldr	r3, [r3, #20]
 800ab3e:	60bb      	str	r3, [r7, #8]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f042 0201 	orr.w	r2, r2, #1
 800ab4e:	601a      	str	r2, [r3, #0]
 800ab50:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab60:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab70:	d172      	bne.n	800ac58 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ab72:	7bfb      	ldrb	r3, [r7, #15]
 800ab74:	2b22      	cmp	r3, #34	; 0x22
 800ab76:	d002      	beq.n	800ab7e <I2C_Slave_STOPF+0x6a>
 800ab78:	7bfb      	ldrb	r3, [r7, #15]
 800ab7a:	2b2a      	cmp	r3, #42	; 0x2a
 800ab7c:	d135      	bne.n	800abea <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	b29a      	uxth	r2, r3
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d005      	beq.n	800aba2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab9a:	f043 0204 	orr.w	r2, r3, #4
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	685a      	ldr	r2, [r3, #4]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800abb0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7fe f8c0 	bl	8008d3c <HAL_DMA_GetState>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d049      	beq.n	800ac56 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc6:	4a69      	ldr	r2, [pc, #420]	; (800ad6c <I2C_Slave_STOPF+0x258>)
 800abc8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abce:	4618      	mov	r0, r3
 800abd0:	f7fd ff08 	bl	80089e4 <HAL_DMA_Abort_IT>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d03d      	beq.n	800ac56 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800abe4:	4610      	mov	r0, r2
 800abe6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800abe8:	e035      	b.n	800ac56 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	b29a      	uxth	r2, r3
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d005      	beq.n	800ac0e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac06:	f043 0204 	orr.w	r2, r3, #4
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	685a      	ldr	r2, [r3, #4]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ac1c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7fe f88a 	bl	8008d3c <HAL_DMA_GetState>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d014      	beq.n	800ac58 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac32:	4a4e      	ldr	r2, [pc, #312]	; (800ad6c <I2C_Slave_STOPF+0x258>)
 800ac34:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7fd fed2 	bl	80089e4 <HAL_DMA_Abort_IT>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d008      	beq.n	800ac58 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ac50:	4610      	mov	r0, r2
 800ac52:	4798      	blx	r3
 800ac54:	e000      	b.n	800ac58 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ac56:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d03e      	beq.n	800ace0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	695b      	ldr	r3, [r3, #20]
 800ac68:	f003 0304 	and.w	r3, r3, #4
 800ac6c:	2b04      	cmp	r3, #4
 800ac6e:	d112      	bne.n	800ac96 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	691a      	ldr	r2, [r3, #16]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7a:	b2d2      	uxtb	r2, r2
 800ac7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac82:	1c5a      	adds	r2, r3, #1
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	b29a      	uxth	r2, r3
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	695b      	ldr	r3, [r3, #20]
 800ac9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca0:	2b40      	cmp	r3, #64	; 0x40
 800aca2:	d112      	bne.n	800acca <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	691a      	ldr	r2, [r3, #16]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acae:	b2d2      	uxtb	r2, r2
 800acb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb6:	1c5a      	adds	r2, r3, #1
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	3b01      	subs	r3, #1
 800acc4:	b29a      	uxth	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acce:	b29b      	uxth	r3, r3
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d005      	beq.n	800ace0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd8:	f043 0204 	orr.w	r2, r3, #4
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d003      	beq.n	800acf0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 f8b3 	bl	800ae54 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800acee:	e039      	b.n	800ad64 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800acf0:	7bfb      	ldrb	r3, [r7, #15]
 800acf2:	2b2a      	cmp	r3, #42	; 0x2a
 800acf4:	d109      	bne.n	800ad0a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2228      	movs	r2, #40	; 0x28
 800ad00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f7ff f896 	bl	8009e36 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	2b28      	cmp	r3, #40	; 0x28
 800ad14:	d111      	bne.n	800ad3a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	4a15      	ldr	r2, [pc, #84]	; (800ad70 <I2C_Slave_STOPF+0x25c>)
 800ad1a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2220      	movs	r2, #32
 800ad26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f7ff f897 	bl	8009e66 <HAL_I2C_ListenCpltCallback>
}
 800ad38:	e014      	b.n	800ad64 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad3e:	2b22      	cmp	r3, #34	; 0x22
 800ad40:	d002      	beq.n	800ad48 <I2C_Slave_STOPF+0x234>
 800ad42:	7bfb      	ldrb	r3, [r7, #15]
 800ad44:	2b22      	cmp	r3, #34	; 0x22
 800ad46:	d10d      	bne.n	800ad64 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2220      	movs	r2, #32
 800ad52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f7ff f869 	bl	8009e36 <HAL_I2C_SlaveRxCpltCallback>
}
 800ad64:	bf00      	nop
 800ad66:	3710      	adds	r7, #16
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	0800b289 	.word	0x0800b289
 800ad70:	ffff0000 	.word	0xffff0000

0800ad74 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad82:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad88:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	2b08      	cmp	r3, #8
 800ad8e:	d002      	beq.n	800ad96 <I2C_Slave_AF+0x22>
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	2b20      	cmp	r3, #32
 800ad94:	d129      	bne.n	800adea <I2C_Slave_AF+0x76>
 800ad96:	7bfb      	ldrb	r3, [r7, #15]
 800ad98:	2b28      	cmp	r3, #40	; 0x28
 800ad9a:	d126      	bne.n	800adea <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	4a2c      	ldr	r2, [pc, #176]	; (800ae50 <I2C_Slave_AF+0xdc>)
 800ada0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	685a      	ldr	r2, [r3, #4]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800adb0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800adba:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800adca:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2220      	movs	r2, #32
 800add6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f7ff f83f 	bl	8009e66 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800ade8:	e02e      	b.n	800ae48 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800adea:	7bfb      	ldrb	r3, [r7, #15]
 800adec:	2b21      	cmp	r3, #33	; 0x21
 800adee:	d126      	bne.n	800ae3e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a17      	ldr	r2, [pc, #92]	; (800ae50 <I2C_Slave_AF+0xdc>)
 800adf4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2221      	movs	r2, #33	; 0x21
 800adfa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2220      	movs	r2, #32
 800ae00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	685a      	ldr	r2, [r3, #4]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ae1a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ae24:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae34:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f7fe fff3 	bl	8009e22 <HAL_I2C_SlaveTxCpltCallback>
}
 800ae3c:	e004      	b.n	800ae48 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ae46:	615a      	str	r2, [r3, #20]
}
 800ae48:	bf00      	nop
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	ffff0000 	.word	0xffff0000

0800ae54 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae62:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	2b10      	cmp	r3, #16
 800ae6e:	d10a      	bne.n	800ae86 <I2C_ITError+0x32>
 800ae70:	7bfb      	ldrb	r3, [r7, #15]
 800ae72:	2b22      	cmp	r3, #34	; 0x22
 800ae74:	d107      	bne.n	800ae86 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ae84:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ae86:	7bfb      	ldrb	r3, [r7, #15]
 800ae88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ae8c:	2b28      	cmp	r3, #40	; 0x28
 800ae8e:	d107      	bne.n	800aea0 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2200      	movs	r2, #0
 800ae94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2228      	movs	r2, #40	; 0x28
 800ae9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ae9e:	e015      	b.n	800aecc <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aeaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aeae:	d006      	beq.n	800aebe <I2C_ITError+0x6a>
 800aeb0:	7bfb      	ldrb	r3, [r7, #15]
 800aeb2:	2b60      	cmp	r3, #96	; 0x60
 800aeb4:	d003      	beq.n	800aebe <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2220      	movs	r2, #32
 800aeba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2200      	movs	r2, #0
 800aec2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aeda:	d162      	bne.n	800afa2 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	685a      	ldr	r2, [r3, #4]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aeea:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d020      	beq.n	800af3c <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aefe:	4a5f      	ldr	r2, [pc, #380]	; (800b07c <I2C_ITError+0x228>)
 800af00:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af06:	4618      	mov	r0, r3
 800af08:	f7fd fd6c 	bl	80089e4 <HAL_DMA_Abort_IT>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	f000 8089 	beq.w	800b026 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f022 0201 	bic.w	r2, r2, #1
 800af22:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2220      	movs	r2, #32
 800af28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800af36:	4610      	mov	r0, r2
 800af38:	4798      	blx	r3
 800af3a:	e074      	b.n	800b026 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af40:	4a4e      	ldr	r2, [pc, #312]	; (800b07c <I2C_ITError+0x228>)
 800af42:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af48:	4618      	mov	r0, r3
 800af4a:	f7fd fd4b 	bl	80089e4 <HAL_DMA_Abort_IT>
 800af4e:	4603      	mov	r3, r0
 800af50:	2b00      	cmp	r3, #0
 800af52:	d068      	beq.n	800b026 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	695b      	ldr	r3, [r3, #20]
 800af5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af5e:	2b40      	cmp	r3, #64	; 0x40
 800af60:	d10b      	bne.n	800af7a <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	691a      	ldr	r2, [r3, #16]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6c:	b2d2      	uxtb	r2, r2
 800af6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af74:	1c5a      	adds	r2, r3, #1
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f022 0201 	bic.w	r2, r2, #1
 800af88:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2220      	movs	r2, #32
 800af8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800af9c:	4610      	mov	r0, r2
 800af9e:	4798      	blx	r3
 800afa0:	e041      	b.n	800b026 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	2b60      	cmp	r3, #96	; 0x60
 800afac:	d125      	bne.n	800affa <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2220      	movs	r2, #32
 800afb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	695b      	ldr	r3, [r3, #20]
 800afc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afc6:	2b40      	cmp	r3, #64	; 0x40
 800afc8:	d10b      	bne.n	800afe2 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	691a      	ldr	r2, [r3, #16]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd4:	b2d2      	uxtb	r2, r2
 800afd6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afdc:	1c5a      	adds	r2, r3, #1
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f022 0201 	bic.w	r2, r2, #1
 800aff0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f7fe ff55 	bl	8009ea2 <HAL_I2C_AbortCpltCallback>
 800aff8:	e015      	b.n	800b026 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	695b      	ldr	r3, [r3, #20]
 800b000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b004:	2b40      	cmp	r3, #64	; 0x40
 800b006:	d10b      	bne.n	800b020 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	691a      	ldr	r2, [r3, #16]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b012:	b2d2      	uxtb	r2, r2
 800b014:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01a:	1c5a      	adds	r2, r3, #1
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f7f9 fb21 	bl	8004668 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b02c:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b032:	f003 0304 	and.w	r3, r3, #4
 800b036:	2b04      	cmp	r3, #4
 800b038:	d11b      	bne.n	800b072 <I2C_ITError+0x21e>
 800b03a:	7bfb      	ldrb	r3, [r7, #15]
 800b03c:	2b28      	cmp	r3, #40	; 0x28
 800b03e:	d118      	bne.n	800b072 <I2C_ITError+0x21e>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	685a      	ldr	r2, [r3, #4]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b04e:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4a0b      	ldr	r2, [pc, #44]	; (800b080 <I2C_ITError+0x22c>)
 800b054:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2220      	movs	r2, #32
 800b060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2200      	movs	r2, #0
 800b068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f7fe fefa 	bl	8009e66 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b072:	bf00      	nop
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	0800b289 	.word	0x0800b289
 800b080:	ffff0000 	.word	0xffff0000

0800b084 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b086      	sub	sp, #24
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b090:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b098:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b0a0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	685a      	ldr	r2, [r3, #4]
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b0b6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0bc:	2200      	movs	r2, #0
 800b0be:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	63da      	str	r2, [r3, #60]	; 0x3c

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800b0c8:	7cfb      	ldrb	r3, [r7, #19]
 800b0ca:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800b0ce:	2b21      	cmp	r3, #33	; 0x21
 800b0d0:	d007      	beq.n	800b0e2 <I2C_DMAXferCplt+0x5e>
 800b0d2:	7cfb      	ldrb	r3, [r7, #19]
 800b0d4:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800b0d8:	2b22      	cmp	r3, #34	; 0x22
 800b0da:	d131      	bne.n	800b140 <I2C_DMAXferCplt+0xbc>
 800b0dc:	7cbb      	ldrb	r3, [r7, #18]
 800b0de:	2b20      	cmp	r3, #32
 800b0e0:	d12e      	bne.n	800b140 <I2C_DMAXferCplt+0xbc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	685a      	ldr	r2, [r3, #4]
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b0f0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b0f8:	7cfb      	ldrb	r3, [r7, #19]
 800b0fa:	2b29      	cmp	r3, #41	; 0x29
 800b0fc:	d10a      	bne.n	800b114 <I2C_DMAXferCplt+0x90>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	2221      	movs	r2, #33	; 0x21
 800b102:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	2228      	movs	r2, #40	; 0x28
 800b108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b10c:	6978      	ldr	r0, [r7, #20]
 800b10e:	f7fe fe88 	bl	8009e22 <HAL_I2C_SlaveTxCpltCallback>
 800b112:	e00c      	b.n	800b12e <I2C_DMAXferCplt+0xaa>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b114:	7cfb      	ldrb	r3, [r7, #19]
 800b116:	2b2a      	cmp	r3, #42	; 0x2a
 800b118:	d109      	bne.n	800b12e <I2C_DMAXferCplt+0xaa>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	2222      	movs	r2, #34	; 0x22
 800b11e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	2228      	movs	r2, #40	; 0x28
 800b124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b128:	6978      	ldr	r0, [r7, #20]
 800b12a:	f7fe fe84 	bl	8009e36 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	685a      	ldr	r2, [r3, #4]
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800b13c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800b13e:	e06a      	b.n	800b216 <I2C_DMAXferCplt+0x192>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b146:	b2db      	uxtb	r3, r3
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d064      	beq.n	800b216 <I2C_DMAXferCplt+0x192>
    if (hi2c->XferCount == (uint16_t)1)
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b150:	b29b      	uxth	r3, r3
 800b152:	2b01      	cmp	r3, #1
 800b154:	d107      	bne.n	800b166 <I2C_DMAXferCplt+0xe2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b164:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	685a      	ldr	r2, [r3, #4]
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b174:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b17c:	d009      	beq.n	800b192 <I2C_DMAXferCplt+0x10e>
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2b08      	cmp	r3, #8
 800b182:	d006      	beq.n	800b192 <I2C_DMAXferCplt+0x10e>
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800b18a:	d002      	beq.n	800b192 <I2C_DMAXferCplt+0x10e>
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2b20      	cmp	r3, #32
 800b190:	d107      	bne.n	800b1a2 <I2C_DMAXferCplt+0x11e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b1a0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	685a      	ldr	r2, [r3, #4]
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b1b0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	685a      	ldr	r2, [r3, #4]
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b1c0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d003      	beq.n	800b1d8 <I2C_DMAXferCplt+0x154>
      HAL_I2C_ErrorCallback(hi2c);
 800b1d0:	6978      	ldr	r0, [r7, #20]
 800b1d2:	f7f9 fa49 	bl	8004668 <HAL_I2C_ErrorCallback>
}
 800b1d6:	e01e      	b.n	800b216 <I2C_DMAXferCplt+0x192>
      hi2c->State = HAL_I2C_STATE_READY;
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	2220      	movs	r2, #32
 800b1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	2b40      	cmp	r3, #64	; 0x40
 800b1ea:	d10a      	bne.n	800b202 <I2C_DMAXferCplt+0x17e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800b1fa:	6978      	ldr	r0, [r7, #20]
 800b1fc:	f7fe fe47 	bl	8009e8e <HAL_I2C_MemRxCpltCallback>
}
 800b200:	e009      	b.n	800b216 <I2C_DMAXferCplt+0x192>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	2200      	movs	r2, #0
 800b206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	2212      	movs	r2, #18
 800b20e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800b210:	6978      	ldr	r0, [r7, #20]
 800b212:	f7f9 fa1d 	bl	8004650 <HAL_I2C_MasterRxCpltCallback>
}
 800b216:	bf00      	nop
 800b218:	3718      	adds	r7, #24
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b084      	sub	sp, #16
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b22a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b230:	2200      	movs	r2, #0
 800b232:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b238:	2200      	movs	r2, #0
 800b23a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f7fd fd8b 	bl	8008d58 <HAL_DMA_GetError>
 800b242:	4603      	mov	r3, r0
 800b244:	2b02      	cmp	r3, #2
 800b246:	d01b      	beq.n	800b280 <I2C_DMAError+0x62>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b256:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2200      	movs	r2, #0
 800b25c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2220      	movs	r2, #32
 800b262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2200      	movs	r2, #0
 800b26a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b272:	f043 0210 	orr.w	r2, r3, #16
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800b27a:	68f8      	ldr	r0, [r7, #12]
 800b27c:	f7f9 f9f4 	bl	8004668 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b280:	bf00      	nop
 800b282:	3710      	adds	r7, #16
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b294:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b29c:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2bc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f022 0201 	bic.w	r2, r2, #1
 800b2e2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	2b60      	cmp	r3, #96	; 0x60
 800b2ee:	d10e      	bne.n	800b30e <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2220      	movs	r2, #32
 800b2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2200      	movs	r2, #0
 800b304:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b306:	68f8      	ldr	r0, [r7, #12]
 800b308:	f7fe fdcb 	bl	8009ea2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b30c:	e027      	b.n	800b35e <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b30e:	7afb      	ldrb	r3, [r7, #11]
 800b310:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b314:	2b28      	cmp	r3, #40	; 0x28
 800b316:	d117      	bne.n	800b348 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f042 0201 	orr.w	r2, r2, #1
 800b326:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b336:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2200      	movs	r2, #0
 800b33c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2228      	movs	r2, #40	; 0x28
 800b342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b346:	e007      	b.n	800b358 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2220      	movs	r2, #32
 800b34c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2200      	movs	r2, #0
 800b354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800b358:	68f8      	ldr	r0, [r7, #12]
 800b35a:	f7f9 f985 	bl	8004668 <HAL_I2C_ErrorCallback>
}
 800b35e:	bf00      	nop
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800b366:	b480      	push	{r7}
 800b368:	b083      	sub	sp, #12
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b372:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800b376:	d103      	bne.n	800b380 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2201      	movs	r2, #1
 800b37c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800b37e:	e007      	b.n	800b390 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b384:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800b388:	d102      	bne.n	800b390 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2208      	movs	r2, #8
 800b38e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800b390:	bf00      	nop
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d101      	bne.n	800b3b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e0ca      	b.n	800b546 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b3b0:	4b67      	ldr	r3, [pc, #412]	; (800b550 <HAL_RCC_ClockConfig+0x1b4>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f003 030f 	and.w	r3, r3, #15
 800b3b8:	683a      	ldr	r2, [r7, #0]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d90c      	bls.n	800b3d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3be:	4b64      	ldr	r3, [pc, #400]	; (800b550 <HAL_RCC_ClockConfig+0x1b4>)
 800b3c0:	683a      	ldr	r2, [r7, #0]
 800b3c2:	b2d2      	uxtb	r2, r2
 800b3c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3c6:	4b62      	ldr	r3, [pc, #392]	; (800b550 <HAL_RCC_ClockConfig+0x1b4>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f003 030f 	and.w	r3, r3, #15
 800b3ce:	683a      	ldr	r2, [r7, #0]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d001      	beq.n	800b3d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e0b6      	b.n	800b546 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f003 0302 	and.w	r3, r3, #2
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d020      	beq.n	800b426 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f003 0304 	and.w	r3, r3, #4
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d005      	beq.n	800b3fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b3f0:	4b58      	ldr	r3, [pc, #352]	; (800b554 <HAL_RCC_ClockConfig+0x1b8>)
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	4a57      	ldr	r2, [pc, #348]	; (800b554 <HAL_RCC_ClockConfig+0x1b8>)
 800b3f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b3fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f003 0308 	and.w	r3, r3, #8
 800b404:	2b00      	cmp	r3, #0
 800b406:	d005      	beq.n	800b414 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b408:	4b52      	ldr	r3, [pc, #328]	; (800b554 <HAL_RCC_ClockConfig+0x1b8>)
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	4a51      	ldr	r2, [pc, #324]	; (800b554 <HAL_RCC_ClockConfig+0x1b8>)
 800b40e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b412:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b414:	4b4f      	ldr	r3, [pc, #316]	; (800b554 <HAL_RCC_ClockConfig+0x1b8>)
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	689b      	ldr	r3, [r3, #8]
 800b420:	494c      	ldr	r1, [pc, #304]	; (800b554 <HAL_RCC_ClockConfig+0x1b8>)
 800b422:	4313      	orrs	r3, r2
 800b424:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f003 0301 	and.w	r3, r3, #1
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d044      	beq.n	800b4bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	2b01      	cmp	r3, #1
 800b438:	d107      	bne.n	800b44a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b43a:	4b46      	ldr	r3, [pc, #280]	; (800b554 <HAL_RCC_ClockConfig+0x1b8>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b442:	2b00      	cmp	r3, #0
 800b444:	d119      	bne.n	800b47a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b446:	2301      	movs	r3, #1
 800b448:	e07d      	b.n	800b546 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	2b02      	cmp	r3, #2
 800b450:	d003      	beq.n	800b45a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b456:	2b03      	cmp	r3, #3
 800b458:	d107      	bne.n	800b46a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b45a:	4b3e      	ldr	r3, [pc, #248]	; (800b554 <HAL_RCC_ClockConfig+0x1b8>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b462:	2b00      	cmp	r3, #0
 800b464:	d109      	bne.n	800b47a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	e06d      	b.n	800b546 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b46a:	4b3a      	ldr	r3, [pc, #232]	; (800b554 <HAL_RCC_ClockConfig+0x1b8>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f003 0302 	and.w	r3, r3, #2
 800b472:	2b00      	cmp	r3, #0
 800b474:	d101      	bne.n	800b47a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b476:	2301      	movs	r3, #1
 800b478:	e065      	b.n	800b546 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b47a:	4b36      	ldr	r3, [pc, #216]	; (800b554 <HAL_RCC_ClockConfig+0x1b8>)
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	f023 0203 	bic.w	r2, r3, #3
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	4933      	ldr	r1, [pc, #204]	; (800b554 <HAL_RCC_ClockConfig+0x1b8>)
 800b488:	4313      	orrs	r3, r2
 800b48a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b48c:	f7fb fea0 	bl	80071d0 <HAL_GetTick>
 800b490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b492:	e00a      	b.n	800b4aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b494:	f7fb fe9c 	bl	80071d0 <HAL_GetTick>
 800b498:	4602      	mov	r2, r0
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	1ad3      	subs	r3, r2, r3
 800b49e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d901      	bls.n	800b4aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b4a6:	2303      	movs	r3, #3
 800b4a8:	e04d      	b.n	800b546 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4aa:	4b2a      	ldr	r3, [pc, #168]	; (800b554 <HAL_RCC_ClockConfig+0x1b8>)
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	f003 020c 	and.w	r2, r3, #12
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d1eb      	bne.n	800b494 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b4bc:	4b24      	ldr	r3, [pc, #144]	; (800b550 <HAL_RCC_ClockConfig+0x1b4>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f003 030f 	and.w	r3, r3, #15
 800b4c4:	683a      	ldr	r2, [r7, #0]
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d20c      	bcs.n	800b4e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4ca:	4b21      	ldr	r3, [pc, #132]	; (800b550 <HAL_RCC_ClockConfig+0x1b4>)
 800b4cc:	683a      	ldr	r2, [r7, #0]
 800b4ce:	b2d2      	uxtb	r2, r2
 800b4d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4d2:	4b1f      	ldr	r3, [pc, #124]	; (800b550 <HAL_RCC_ClockConfig+0x1b4>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f003 030f 	and.w	r3, r3, #15
 800b4da:	683a      	ldr	r2, [r7, #0]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d001      	beq.n	800b4e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	e030      	b.n	800b546 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f003 0304 	and.w	r3, r3, #4
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d008      	beq.n	800b502 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b4f0:	4b18      	ldr	r3, [pc, #96]	; (800b554 <HAL_RCC_ClockConfig+0x1b8>)
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	4915      	ldr	r1, [pc, #84]	; (800b554 <HAL_RCC_ClockConfig+0x1b8>)
 800b4fe:	4313      	orrs	r3, r2
 800b500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f003 0308 	and.w	r3, r3, #8
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d009      	beq.n	800b522 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b50e:	4b11      	ldr	r3, [pc, #68]	; (800b554 <HAL_RCC_ClockConfig+0x1b8>)
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	691b      	ldr	r3, [r3, #16]
 800b51a:	00db      	lsls	r3, r3, #3
 800b51c:	490d      	ldr	r1, [pc, #52]	; (800b554 <HAL_RCC_ClockConfig+0x1b8>)
 800b51e:	4313      	orrs	r3, r2
 800b520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b522:	f000 f81d 	bl	800b560 <HAL_RCC_GetSysClockFreq>
 800b526:	4602      	mov	r2, r0
 800b528:	4b0a      	ldr	r3, [pc, #40]	; (800b554 <HAL_RCC_ClockConfig+0x1b8>)
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	091b      	lsrs	r3, r3, #4
 800b52e:	f003 030f 	and.w	r3, r3, #15
 800b532:	4909      	ldr	r1, [pc, #36]	; (800b558 <HAL_RCC_ClockConfig+0x1bc>)
 800b534:	5ccb      	ldrb	r3, [r1, r3]
 800b536:	fa22 f303 	lsr.w	r3, r2, r3
 800b53a:	4a08      	ldr	r2, [pc, #32]	; (800b55c <HAL_RCC_ClockConfig+0x1c0>)
 800b53c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800b53e:	200f      	movs	r0, #15
 800b540:	f7fb fe02 	bl	8007148 <HAL_InitTick>

  return HAL_OK;
 800b544:	2300      	movs	r3, #0
}
 800b546:	4618      	mov	r0, r3
 800b548:	3710      	adds	r7, #16
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	40023c00 	.word	0x40023c00
 800b554:	40023800 	.word	0x40023800
 800b558:	0800e400 	.word	0x0800e400
 800b55c:	200001cc 	.word	0x200001cc

0800b560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b564:	b090      	sub	sp, #64	; 0x40
 800b566:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b568:	2300      	movs	r3, #0
 800b56a:	637b      	str	r3, [r7, #52]	; 0x34
 800b56c:	2300      	movs	r3, #0
 800b56e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b570:	2300      	movs	r3, #0
 800b572:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800b574:	2300      	movs	r3, #0
 800b576:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b578:	4b59      	ldr	r3, [pc, #356]	; (800b6e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	f003 030c 	and.w	r3, r3, #12
 800b580:	2b08      	cmp	r3, #8
 800b582:	d00d      	beq.n	800b5a0 <HAL_RCC_GetSysClockFreq+0x40>
 800b584:	2b08      	cmp	r3, #8
 800b586:	f200 80a1 	bhi.w	800b6cc <HAL_RCC_GetSysClockFreq+0x16c>
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d002      	beq.n	800b594 <HAL_RCC_GetSysClockFreq+0x34>
 800b58e:	2b04      	cmp	r3, #4
 800b590:	d003      	beq.n	800b59a <HAL_RCC_GetSysClockFreq+0x3a>
 800b592:	e09b      	b.n	800b6cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b594:	4b53      	ldr	r3, [pc, #332]	; (800b6e4 <HAL_RCC_GetSysClockFreq+0x184>)
 800b596:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800b598:	e09b      	b.n	800b6d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b59a:	4b53      	ldr	r3, [pc, #332]	; (800b6e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800b59c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b59e:	e098      	b.n	800b6d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b5a0:	4b4f      	ldr	r3, [pc, #316]	; (800b6e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b5aa:	4b4d      	ldr	r3, [pc, #308]	; (800b6e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d028      	beq.n	800b608 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b5b6:	4b4a      	ldr	r3, [pc, #296]	; (800b6e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	099b      	lsrs	r3, r3, #6
 800b5bc:	2200      	movs	r2, #0
 800b5be:	623b      	str	r3, [r7, #32]
 800b5c0:	627a      	str	r2, [r7, #36]	; 0x24
 800b5c2:	6a3b      	ldr	r3, [r7, #32]
 800b5c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800b5c8:	2100      	movs	r1, #0
 800b5ca:	4b47      	ldr	r3, [pc, #284]	; (800b6e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800b5cc:	fb03 f201 	mul.w	r2, r3, r1
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	fb00 f303 	mul.w	r3, r0, r3
 800b5d6:	4413      	add	r3, r2
 800b5d8:	4a43      	ldr	r2, [pc, #268]	; (800b6e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800b5da:	fba0 1202 	umull	r1, r2, r0, r2
 800b5de:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b5e0:	460a      	mov	r2, r1
 800b5e2:	62ba      	str	r2, [r7, #40]	; 0x28
 800b5e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5e6:	4413      	add	r3, r2
 800b5e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	61bb      	str	r3, [r7, #24]
 800b5f0:	61fa      	str	r2, [r7, #28]
 800b5f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b5f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b5fa:	f7f5 fa07 	bl	8000a0c <__aeabi_uldivmod>
 800b5fe:	4602      	mov	r2, r0
 800b600:	460b      	mov	r3, r1
 800b602:	4613      	mov	r3, r2
 800b604:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b606:	e053      	b.n	800b6b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b608:	4b35      	ldr	r3, [pc, #212]	; (800b6e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	099b      	lsrs	r3, r3, #6
 800b60e:	2200      	movs	r2, #0
 800b610:	613b      	str	r3, [r7, #16]
 800b612:	617a      	str	r2, [r7, #20]
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800b61a:	f04f 0b00 	mov.w	fp, #0
 800b61e:	4652      	mov	r2, sl
 800b620:	465b      	mov	r3, fp
 800b622:	f04f 0000 	mov.w	r0, #0
 800b626:	f04f 0100 	mov.w	r1, #0
 800b62a:	0159      	lsls	r1, r3, #5
 800b62c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b630:	0150      	lsls	r0, r2, #5
 800b632:	4602      	mov	r2, r0
 800b634:	460b      	mov	r3, r1
 800b636:	ebb2 080a 	subs.w	r8, r2, sl
 800b63a:	eb63 090b 	sbc.w	r9, r3, fp
 800b63e:	f04f 0200 	mov.w	r2, #0
 800b642:	f04f 0300 	mov.w	r3, #0
 800b646:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800b64a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800b64e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800b652:	ebb2 0408 	subs.w	r4, r2, r8
 800b656:	eb63 0509 	sbc.w	r5, r3, r9
 800b65a:	f04f 0200 	mov.w	r2, #0
 800b65e:	f04f 0300 	mov.w	r3, #0
 800b662:	00eb      	lsls	r3, r5, #3
 800b664:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b668:	00e2      	lsls	r2, r4, #3
 800b66a:	4614      	mov	r4, r2
 800b66c:	461d      	mov	r5, r3
 800b66e:	eb14 030a 	adds.w	r3, r4, sl
 800b672:	603b      	str	r3, [r7, #0]
 800b674:	eb45 030b 	adc.w	r3, r5, fp
 800b678:	607b      	str	r3, [r7, #4]
 800b67a:	f04f 0200 	mov.w	r2, #0
 800b67e:	f04f 0300 	mov.w	r3, #0
 800b682:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b686:	4629      	mov	r1, r5
 800b688:	028b      	lsls	r3, r1, #10
 800b68a:	4621      	mov	r1, r4
 800b68c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b690:	4621      	mov	r1, r4
 800b692:	028a      	lsls	r2, r1, #10
 800b694:	4610      	mov	r0, r2
 800b696:	4619      	mov	r1, r3
 800b698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b69a:	2200      	movs	r2, #0
 800b69c:	60bb      	str	r3, [r7, #8]
 800b69e:	60fa      	str	r2, [r7, #12]
 800b6a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b6a4:	f7f5 f9b2 	bl	8000a0c <__aeabi_uldivmod>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	4613      	mov	r3, r2
 800b6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b6b0:	4b0b      	ldr	r3, [pc, #44]	; (800b6e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	0c1b      	lsrs	r3, r3, #16
 800b6b6:	f003 0303 	and.w	r3, r3, #3
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	005b      	lsls	r3, r3, #1
 800b6be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800b6c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b6ca:	e002      	b.n	800b6d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b6cc:	4b05      	ldr	r3, [pc, #20]	; (800b6e4 <HAL_RCC_GetSysClockFreq+0x184>)
 800b6ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b6d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3740      	adds	r7, #64	; 0x40
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b6de:	bf00      	nop
 800b6e0:	40023800 	.word	0x40023800
 800b6e4:	00f42400 	.word	0x00f42400
 800b6e8:	017d7840 	.word	0x017d7840

0800b6ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b6f0:	4b03      	ldr	r3, [pc, #12]	; (800b700 <HAL_RCC_GetHCLKFreq+0x14>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop
 800b700:	200001cc 	.word	0x200001cc

0800b704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b708:	f7ff fff0 	bl	800b6ec <HAL_RCC_GetHCLKFreq>
 800b70c:	4602      	mov	r2, r0
 800b70e:	4b05      	ldr	r3, [pc, #20]	; (800b724 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	0a9b      	lsrs	r3, r3, #10
 800b714:	f003 0307 	and.w	r3, r3, #7
 800b718:	4903      	ldr	r1, [pc, #12]	; (800b728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b71a:	5ccb      	ldrb	r3, [r1, r3]
 800b71c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b720:	4618      	mov	r0, r3
 800b722:	bd80      	pop	{r7, pc}
 800b724:	40023800 	.word	0x40023800
 800b728:	0800e410 	.word	0x0800e410

0800b72c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b086      	sub	sp, #24
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b734:	2300      	movs	r3, #0
 800b736:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f003 0301 	and.w	r3, r3, #1
 800b740:	2b00      	cmp	r3, #0
 800b742:	d075      	beq.n	800b830 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b744:	4b88      	ldr	r3, [pc, #544]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	f003 030c 	and.w	r3, r3, #12
 800b74c:	2b04      	cmp	r3, #4
 800b74e:	d00c      	beq.n	800b76a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b750:	4b85      	ldr	r3, [pc, #532]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b752:	689b      	ldr	r3, [r3, #8]
 800b754:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b758:	2b08      	cmp	r3, #8
 800b75a:	d112      	bne.n	800b782 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b75c:	4b82      	ldr	r3, [pc, #520]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b764:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b768:	d10b      	bne.n	800b782 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b76a:	4b7f      	ldr	r3, [pc, #508]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b772:	2b00      	cmp	r3, #0
 800b774:	d05b      	beq.n	800b82e <HAL_RCC_OscConfig+0x102>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d157      	bne.n	800b82e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800b77e:	2301      	movs	r3, #1
 800b780:	e20a      	b.n	800bb98 <HAL_RCC_OscConfig+0x46c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b78a:	d106      	bne.n	800b79a <HAL_RCC_OscConfig+0x6e>
 800b78c:	4b76      	ldr	r3, [pc, #472]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a75      	ldr	r2, [pc, #468]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b796:	6013      	str	r3, [r2, #0]
 800b798:	e01d      	b.n	800b7d6 <HAL_RCC_OscConfig+0xaa>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b7a2:	d10c      	bne.n	800b7be <HAL_RCC_OscConfig+0x92>
 800b7a4:	4b70      	ldr	r3, [pc, #448]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	4a6f      	ldr	r2, [pc, #444]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b7aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b7ae:	6013      	str	r3, [r2, #0]
 800b7b0:	4b6d      	ldr	r3, [pc, #436]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a6c      	ldr	r2, [pc, #432]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b7b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7ba:	6013      	str	r3, [r2, #0]
 800b7bc:	e00b      	b.n	800b7d6 <HAL_RCC_OscConfig+0xaa>
 800b7be:	4b6a      	ldr	r3, [pc, #424]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a69      	ldr	r2, [pc, #420]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b7c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7c8:	6013      	str	r3, [r2, #0]
 800b7ca:	4b67      	ldr	r3, [pc, #412]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4a66      	ldr	r2, [pc, #408]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b7d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b7d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d013      	beq.n	800b806 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7de:	f7fb fcf7 	bl	80071d0 <HAL_GetTick>
 800b7e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b7e4:	e008      	b.n	800b7f8 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b7e6:	f7fb fcf3 	bl	80071d0 <HAL_GetTick>
 800b7ea:	4602      	mov	r2, r0
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	1ad3      	subs	r3, r2, r3
 800b7f0:	2b64      	cmp	r3, #100	; 0x64
 800b7f2:	d901      	bls.n	800b7f8 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800b7f4:	2303      	movs	r3, #3
 800b7f6:	e1cf      	b.n	800bb98 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b7f8:	4b5b      	ldr	r3, [pc, #364]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b800:	2b00      	cmp	r3, #0
 800b802:	d0f0      	beq.n	800b7e6 <HAL_RCC_OscConfig+0xba>
 800b804:	e014      	b.n	800b830 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b806:	f7fb fce3 	bl	80071d0 <HAL_GetTick>
 800b80a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b80c:	e008      	b.n	800b820 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b80e:	f7fb fcdf 	bl	80071d0 <HAL_GetTick>
 800b812:	4602      	mov	r2, r0
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	1ad3      	subs	r3, r2, r3
 800b818:	2b64      	cmp	r3, #100	; 0x64
 800b81a:	d901      	bls.n	800b820 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800b81c:	2303      	movs	r3, #3
 800b81e:	e1bb      	b.n	800bb98 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b820:	4b51      	ldr	r3, [pc, #324]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d1f0      	bne.n	800b80e <HAL_RCC_OscConfig+0xe2>
 800b82c:	e000      	b.n	800b830 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b82e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f003 0302 	and.w	r3, r3, #2
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d063      	beq.n	800b904 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b83c:	4b4a      	ldr	r3, [pc, #296]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	f003 030c 	and.w	r3, r3, #12
 800b844:	2b00      	cmp	r3, #0
 800b846:	d00b      	beq.n	800b860 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b848:	4b47      	ldr	r3, [pc, #284]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b850:	2b08      	cmp	r3, #8
 800b852:	d11c      	bne.n	800b88e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b854:	4b44      	ldr	r3, [pc, #272]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d116      	bne.n	800b88e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b860:	4b41      	ldr	r3, [pc, #260]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f003 0302 	and.w	r3, r3, #2
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d005      	beq.n	800b878 <HAL_RCC_OscConfig+0x14c>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	68db      	ldr	r3, [r3, #12]
 800b870:	2b01      	cmp	r3, #1
 800b872:	d001      	beq.n	800b878 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800b874:	2301      	movs	r3, #1
 800b876:	e18f      	b.n	800bb98 <HAL_RCC_OscConfig+0x46c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b878:	4b3b      	ldr	r3, [pc, #236]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	691b      	ldr	r3, [r3, #16]
 800b884:	00db      	lsls	r3, r3, #3
 800b886:	4938      	ldr	r1, [pc, #224]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b888:	4313      	orrs	r3, r2
 800b88a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b88c:	e03a      	b.n	800b904 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	68db      	ldr	r3, [r3, #12]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d020      	beq.n	800b8d8 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b896:	4b35      	ldr	r3, [pc, #212]	; (800b96c <HAL_RCC_OscConfig+0x240>)
 800b898:	2201      	movs	r2, #1
 800b89a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b89c:	f7fb fc98 	bl	80071d0 <HAL_GetTick>
 800b8a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b8a2:	e008      	b.n	800b8b6 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b8a4:	f7fb fc94 	bl	80071d0 <HAL_GetTick>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	1ad3      	subs	r3, r2, r3
 800b8ae:	2b02      	cmp	r3, #2
 800b8b0:	d901      	bls.n	800b8b6 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800b8b2:	2303      	movs	r3, #3
 800b8b4:	e170      	b.n	800bb98 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b8b6:	4b2c      	ldr	r3, [pc, #176]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f003 0302 	and.w	r3, r3, #2
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d0f0      	beq.n	800b8a4 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8c2:	4b29      	ldr	r3, [pc, #164]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	691b      	ldr	r3, [r3, #16]
 800b8ce:	00db      	lsls	r3, r3, #3
 800b8d0:	4925      	ldr	r1, [pc, #148]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	600b      	str	r3, [r1, #0]
 800b8d6:	e015      	b.n	800b904 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b8d8:	4b24      	ldr	r3, [pc, #144]	; (800b96c <HAL_RCC_OscConfig+0x240>)
 800b8da:	2200      	movs	r2, #0
 800b8dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8de:	f7fb fc77 	bl	80071d0 <HAL_GetTick>
 800b8e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b8e4:	e008      	b.n	800b8f8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b8e6:	f7fb fc73 	bl	80071d0 <HAL_GetTick>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	1ad3      	subs	r3, r2, r3
 800b8f0:	2b02      	cmp	r3, #2
 800b8f2:	d901      	bls.n	800b8f8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800b8f4:	2303      	movs	r3, #3
 800b8f6:	e14f      	b.n	800bb98 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b8f8:	4b1b      	ldr	r3, [pc, #108]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f003 0302 	and.w	r3, r3, #2
 800b900:	2b00      	cmp	r3, #0
 800b902:	d1f0      	bne.n	800b8e6 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f003 0308 	and.w	r3, r3, #8
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d037      	beq.n	800b980 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	695b      	ldr	r3, [r3, #20]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d016      	beq.n	800b946 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b918:	4b15      	ldr	r3, [pc, #84]	; (800b970 <HAL_RCC_OscConfig+0x244>)
 800b91a:	2201      	movs	r2, #1
 800b91c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b91e:	f7fb fc57 	bl	80071d0 <HAL_GetTick>
 800b922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b924:	e008      	b.n	800b938 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b926:	f7fb fc53 	bl	80071d0 <HAL_GetTick>
 800b92a:	4602      	mov	r2, r0
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	1ad3      	subs	r3, r2, r3
 800b930:	2b02      	cmp	r3, #2
 800b932:	d901      	bls.n	800b938 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800b934:	2303      	movs	r3, #3
 800b936:	e12f      	b.n	800bb98 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b938:	4b0b      	ldr	r3, [pc, #44]	; (800b968 <HAL_RCC_OscConfig+0x23c>)
 800b93a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b93c:	f003 0302 	and.w	r3, r3, #2
 800b940:	2b00      	cmp	r3, #0
 800b942:	d0f0      	beq.n	800b926 <HAL_RCC_OscConfig+0x1fa>
 800b944:	e01c      	b.n	800b980 <HAL_RCC_OscConfig+0x254>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b946:	4b0a      	ldr	r3, [pc, #40]	; (800b970 <HAL_RCC_OscConfig+0x244>)
 800b948:	2200      	movs	r2, #0
 800b94a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b94c:	f7fb fc40 	bl	80071d0 <HAL_GetTick>
 800b950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b952:	e00f      	b.n	800b974 <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b954:	f7fb fc3c 	bl	80071d0 <HAL_GetTick>
 800b958:	4602      	mov	r2, r0
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	1ad3      	subs	r3, r2, r3
 800b95e:	2b02      	cmp	r3, #2
 800b960:	d908      	bls.n	800b974 <HAL_RCC_OscConfig+0x248>
        {
          return HAL_TIMEOUT;
 800b962:	2303      	movs	r3, #3
 800b964:	e118      	b.n	800bb98 <HAL_RCC_OscConfig+0x46c>
 800b966:	bf00      	nop
 800b968:	40023800 	.word	0x40023800
 800b96c:	42470000 	.word	0x42470000
 800b970:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b974:	4b8a      	ldr	r3, [pc, #552]	; (800bba0 <HAL_RCC_OscConfig+0x474>)
 800b976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b978:	f003 0302 	and.w	r3, r3, #2
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d1e9      	bne.n	800b954 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f003 0304 	and.w	r3, r3, #4
 800b988:	2b00      	cmp	r3, #0
 800b98a:	f000 8097 	beq.w	800babc <HAL_RCC_OscConfig+0x390>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b98e:	2300      	movs	r3, #0
 800b990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b992:	4b83      	ldr	r3, [pc, #524]	; (800bba0 <HAL_RCC_OscConfig+0x474>)
 800b994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d10f      	bne.n	800b9be <HAL_RCC_OscConfig+0x292>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b99e:	2300      	movs	r3, #0
 800b9a0:	60fb      	str	r3, [r7, #12]
 800b9a2:	4b7f      	ldr	r3, [pc, #508]	; (800bba0 <HAL_RCC_OscConfig+0x474>)
 800b9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9a6:	4a7e      	ldr	r2, [pc, #504]	; (800bba0 <HAL_RCC_OscConfig+0x474>)
 800b9a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9ac:	6413      	str	r3, [r2, #64]	; 0x40
 800b9ae:	4b7c      	ldr	r3, [pc, #496]	; (800bba0 <HAL_RCC_OscConfig+0x474>)
 800b9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9b6:	60fb      	str	r3, [r7, #12]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b9be:	4b79      	ldr	r3, [pc, #484]	; (800bba4 <HAL_RCC_OscConfig+0x478>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d118      	bne.n	800b9fc <HAL_RCC_OscConfig+0x2d0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b9ca:	4b76      	ldr	r3, [pc, #472]	; (800bba4 <HAL_RCC_OscConfig+0x478>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4a75      	ldr	r2, [pc, #468]	; (800bba4 <HAL_RCC_OscConfig+0x478>)
 800b9d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b9d6:	f7fb fbfb 	bl	80071d0 <HAL_GetTick>
 800b9da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b9dc:	e008      	b.n	800b9f0 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b9de:	f7fb fbf7 	bl	80071d0 <HAL_GetTick>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	1ad3      	subs	r3, r2, r3
 800b9e8:	2b02      	cmp	r3, #2
 800b9ea:	d901      	bls.n	800b9f0 <HAL_RCC_OscConfig+0x2c4>
        {
          return HAL_TIMEOUT;
 800b9ec:	2303      	movs	r3, #3
 800b9ee:	e0d3      	b.n	800bb98 <HAL_RCC_OscConfig+0x46c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b9f0:	4b6c      	ldr	r3, [pc, #432]	; (800bba4 <HAL_RCC_OscConfig+0x478>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d0f0      	beq.n	800b9de <HAL_RCC_OscConfig+0x2b2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d106      	bne.n	800ba12 <HAL_RCC_OscConfig+0x2e6>
 800ba04:	4b66      	ldr	r3, [pc, #408]	; (800bba0 <HAL_RCC_OscConfig+0x474>)
 800ba06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba08:	4a65      	ldr	r2, [pc, #404]	; (800bba0 <HAL_RCC_OscConfig+0x474>)
 800ba0a:	f043 0301 	orr.w	r3, r3, #1
 800ba0e:	6713      	str	r3, [r2, #112]	; 0x70
 800ba10:	e01c      	b.n	800ba4c <HAL_RCC_OscConfig+0x320>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	689b      	ldr	r3, [r3, #8]
 800ba16:	2b05      	cmp	r3, #5
 800ba18:	d10c      	bne.n	800ba34 <HAL_RCC_OscConfig+0x308>
 800ba1a:	4b61      	ldr	r3, [pc, #388]	; (800bba0 <HAL_RCC_OscConfig+0x474>)
 800ba1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba1e:	4a60      	ldr	r2, [pc, #384]	; (800bba0 <HAL_RCC_OscConfig+0x474>)
 800ba20:	f043 0304 	orr.w	r3, r3, #4
 800ba24:	6713      	str	r3, [r2, #112]	; 0x70
 800ba26:	4b5e      	ldr	r3, [pc, #376]	; (800bba0 <HAL_RCC_OscConfig+0x474>)
 800ba28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba2a:	4a5d      	ldr	r2, [pc, #372]	; (800bba0 <HAL_RCC_OscConfig+0x474>)
 800ba2c:	f043 0301 	orr.w	r3, r3, #1
 800ba30:	6713      	str	r3, [r2, #112]	; 0x70
 800ba32:	e00b      	b.n	800ba4c <HAL_RCC_OscConfig+0x320>
 800ba34:	4b5a      	ldr	r3, [pc, #360]	; (800bba0 <HAL_RCC_OscConfig+0x474>)
 800ba36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba38:	4a59      	ldr	r2, [pc, #356]	; (800bba0 <HAL_RCC_OscConfig+0x474>)
 800ba3a:	f023 0301 	bic.w	r3, r3, #1
 800ba3e:	6713      	str	r3, [r2, #112]	; 0x70
 800ba40:	4b57      	ldr	r3, [pc, #348]	; (800bba0 <HAL_RCC_OscConfig+0x474>)
 800ba42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba44:	4a56      	ldr	r2, [pc, #344]	; (800bba0 <HAL_RCC_OscConfig+0x474>)
 800ba46:	f023 0304 	bic.w	r3, r3, #4
 800ba4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	689b      	ldr	r3, [r3, #8]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d015      	beq.n	800ba80 <HAL_RCC_OscConfig+0x354>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba54:	f7fb fbbc 	bl	80071d0 <HAL_GetTick>
 800ba58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba5a:	e00a      	b.n	800ba72 <HAL_RCC_OscConfig+0x346>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ba5c:	f7fb fbb8 	bl	80071d0 <HAL_GetTick>
 800ba60:	4602      	mov	r2, r0
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	1ad3      	subs	r3, r2, r3
 800ba66:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d901      	bls.n	800ba72 <HAL_RCC_OscConfig+0x346>
        {
          return HAL_TIMEOUT;
 800ba6e:	2303      	movs	r3, #3
 800ba70:	e092      	b.n	800bb98 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba72:	4b4b      	ldr	r3, [pc, #300]	; (800bba0 <HAL_RCC_OscConfig+0x474>)
 800ba74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba76:	f003 0302 	and.w	r3, r3, #2
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d0ee      	beq.n	800ba5c <HAL_RCC_OscConfig+0x330>
 800ba7e:	e014      	b.n	800baaa <HAL_RCC_OscConfig+0x37e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba80:	f7fb fba6 	bl	80071d0 <HAL_GetTick>
 800ba84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ba86:	e00a      	b.n	800ba9e <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ba88:	f7fb fba2 	bl	80071d0 <HAL_GetTick>
 800ba8c:	4602      	mov	r2, r0
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	1ad3      	subs	r3, r2, r3
 800ba92:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d901      	bls.n	800ba9e <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800ba9a:	2303      	movs	r3, #3
 800ba9c:	e07c      	b.n	800bb98 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ba9e:	4b40      	ldr	r3, [pc, #256]	; (800bba0 <HAL_RCC_OscConfig+0x474>)
 800baa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baa2:	f003 0302 	and.w	r3, r3, #2
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d1ee      	bne.n	800ba88 <HAL_RCC_OscConfig+0x35c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800baaa:	7dfb      	ldrb	r3, [r7, #23]
 800baac:	2b01      	cmp	r3, #1
 800baae:	d105      	bne.n	800babc <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bab0:	4b3b      	ldr	r3, [pc, #236]	; (800bba0 <HAL_RCC_OscConfig+0x474>)
 800bab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab4:	4a3a      	ldr	r2, [pc, #232]	; (800bba0 <HAL_RCC_OscConfig+0x474>)
 800bab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800baba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	699b      	ldr	r3, [r3, #24]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d068      	beq.n	800bb96 <HAL_RCC_OscConfig+0x46a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bac4:	4b36      	ldr	r3, [pc, #216]	; (800bba0 <HAL_RCC_OscConfig+0x474>)
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	f003 030c 	and.w	r3, r3, #12
 800bacc:	2b08      	cmp	r3, #8
 800bace:	d060      	beq.n	800bb92 <HAL_RCC_OscConfig+0x466>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	699b      	ldr	r3, [r3, #24]
 800bad4:	2b02      	cmp	r3, #2
 800bad6:	d145      	bne.n	800bb64 <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bad8:	4b33      	ldr	r3, [pc, #204]	; (800bba8 <HAL_RCC_OscConfig+0x47c>)
 800bada:	2200      	movs	r2, #0
 800badc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bade:	f7fb fb77 	bl	80071d0 <HAL_GetTick>
 800bae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bae4:	e008      	b.n	800baf8 <HAL_RCC_OscConfig+0x3cc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bae6:	f7fb fb73 	bl	80071d0 <HAL_GetTick>
 800baea:	4602      	mov	r2, r0
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	1ad3      	subs	r3, r2, r3
 800baf0:	2b02      	cmp	r3, #2
 800baf2:	d901      	bls.n	800baf8 <HAL_RCC_OscConfig+0x3cc>
          {
            return HAL_TIMEOUT;
 800baf4:	2303      	movs	r3, #3
 800baf6:	e04f      	b.n	800bb98 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800baf8:	4b29      	ldr	r3, [pc, #164]	; (800bba0 <HAL_RCC_OscConfig+0x474>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1f0      	bne.n	800bae6 <HAL_RCC_OscConfig+0x3ba>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	69da      	ldr	r2, [r3, #28]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6a1b      	ldr	r3, [r3, #32]
 800bb0c:	431a      	orrs	r2, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb12:	019b      	lsls	r3, r3, #6
 800bb14:	431a      	orrs	r2, r3
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb1a:	085b      	lsrs	r3, r3, #1
 800bb1c:	3b01      	subs	r3, #1
 800bb1e:	041b      	lsls	r3, r3, #16
 800bb20:	431a      	orrs	r2, r3
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb26:	061b      	lsls	r3, r3, #24
 800bb28:	431a      	orrs	r2, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb2e:	071b      	lsls	r3, r3, #28
 800bb30:	491b      	ldr	r1, [pc, #108]	; (800bba0 <HAL_RCC_OscConfig+0x474>)
 800bb32:	4313      	orrs	r3, r2
 800bb34:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bb36:	4b1c      	ldr	r3, [pc, #112]	; (800bba8 <HAL_RCC_OscConfig+0x47c>)
 800bb38:	2201      	movs	r2, #1
 800bb3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb3c:	f7fb fb48 	bl	80071d0 <HAL_GetTick>
 800bb40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb42:	e008      	b.n	800bb56 <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bb44:	f7fb fb44 	bl	80071d0 <HAL_GetTick>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	1ad3      	subs	r3, r2, r3
 800bb4e:	2b02      	cmp	r3, #2
 800bb50:	d901      	bls.n	800bb56 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800bb52:	2303      	movs	r3, #3
 800bb54:	e020      	b.n	800bb98 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb56:	4b12      	ldr	r3, [pc, #72]	; (800bba0 <HAL_RCC_OscConfig+0x474>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d0f0      	beq.n	800bb44 <HAL_RCC_OscConfig+0x418>
 800bb62:	e018      	b.n	800bb96 <HAL_RCC_OscConfig+0x46a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb64:	4b10      	ldr	r3, [pc, #64]	; (800bba8 <HAL_RCC_OscConfig+0x47c>)
 800bb66:	2200      	movs	r2, #0
 800bb68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb6a:	f7fb fb31 	bl	80071d0 <HAL_GetTick>
 800bb6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb70:	e008      	b.n	800bb84 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bb72:	f7fb fb2d 	bl	80071d0 <HAL_GetTick>
 800bb76:	4602      	mov	r2, r0
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	1ad3      	subs	r3, r2, r3
 800bb7c:	2b02      	cmp	r3, #2
 800bb7e:	d901      	bls.n	800bb84 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800bb80:	2303      	movs	r3, #3
 800bb82:	e009      	b.n	800bb98 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb84:	4b06      	ldr	r3, [pc, #24]	; (800bba0 <HAL_RCC_OscConfig+0x474>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d1f0      	bne.n	800bb72 <HAL_RCC_OscConfig+0x446>
 800bb90:	e001      	b.n	800bb96 <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800bb92:	2301      	movs	r3, #1
 800bb94:	e000      	b.n	800bb98 <HAL_RCC_OscConfig+0x46c>
    }
  }
  return HAL_OK;
 800bb96:	2300      	movs	r3, #0
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3718      	adds	r7, #24
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	40023800 	.word	0x40023800
 800bba4:	40007000 	.word	0x40007000
 800bba8:	42470060 	.word	0x42470060

0800bbac <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b086      	sub	sp, #24
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	2b20      	cmp	r3, #32
 800bbc4:	d153      	bne.n	800bc6e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d002      	beq.n	800bbd2 <HAL_UART_Transmit_DMA+0x26>
 800bbcc:	88fb      	ldrh	r3, [r7, #6]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d101      	bne.n	800bbd6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	e04c      	b.n	800bc70 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d101      	bne.n	800bbe4 <HAL_UART_Transmit_DMA+0x38>
 800bbe0:	2302      	movs	r3, #2
 800bbe2:	e045      	b.n	800bc70 <HAL_UART_Transmit_DMA+0xc4>
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800bbec:	68ba      	ldr	r2, [r7, #8]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	88fa      	ldrh	r2, [r7, #6]
 800bbf6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	88fa      	ldrh	r2, [r7, #6]
 800bbfc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2200      	movs	r2, #0
 800bc02:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2221      	movs	r2, #33	; 0x21
 800bc08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc10:	4a19      	ldr	r2, [pc, #100]	; (800bc78 <HAL_UART_Transmit_DMA+0xcc>)
 800bc12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc18:	4a18      	ldr	r2, [pc, #96]	; (800bc7c <HAL_UART_Transmit_DMA+0xd0>)
 800bc1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc20:	4a17      	ldr	r2, [pc, #92]	; (800bc80 <HAL_UART_Transmit_DMA+0xd4>)
 800bc22:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc28:	2200      	movs	r2, #0
 800bc2a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800bc2c:	f107 0308 	add.w	r3, r7, #8
 800bc30:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	6819      	ldr	r1, [r3, #0]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	3304      	adds	r3, #4
 800bc40:	461a      	mov	r2, r3
 800bc42:	88fb      	ldrh	r3, [r7, #6]
 800bc44:	f7fc fe6e 	bl	8008924 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bc50:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2200      	movs	r2, #0
 800bc56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	695a      	ldr	r2, [r3, #20]
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bc68:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	e000      	b.n	800bc70 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800bc6e:	2302      	movs	r3, #2
  }
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3718      	adds	r7, #24
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	0800c065 	.word	0x0800c065
 800bc7c:	0800c0b7 	.word	0x0800c0b7
 800bc80:	0800c157 	.word	0x0800c157

0800bc84 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b086      	sub	sp, #24
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	4613      	mov	r3, r2
 800bc90:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bc98:	b2db      	uxtb	r3, r3
 800bc9a:	2b20      	cmp	r3, #32
 800bc9c:	d166      	bne.n	800bd6c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d002      	beq.n	800bcaa <HAL_UART_Receive_DMA+0x26>
 800bca4:	88fb      	ldrh	r3, [r7, #6]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d101      	bne.n	800bcae <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e05f      	b.n	800bd6e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d101      	bne.n	800bcbc <HAL_UART_Receive_DMA+0x38>
 800bcb8:	2302      	movs	r3, #2
 800bcba:	e058      	b.n	800bd6e <HAL_UART_Receive_DMA+0xea>
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800bcc4:	68ba      	ldr	r2, [r7, #8]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	88fa      	ldrh	r2, [r7, #6]
 800bcce:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2222      	movs	r2, #34	; 0x22
 800bcda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bce2:	4a25      	ldr	r2, [pc, #148]	; (800bd78 <HAL_UART_Receive_DMA+0xf4>)
 800bce4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcea:	4a24      	ldr	r2, [pc, #144]	; (800bd7c <HAL_UART_Receive_DMA+0xf8>)
 800bcec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcf2:	4a23      	ldr	r2, [pc, #140]	; (800bd80 <HAL_UART_Receive_DMA+0xfc>)
 800bcf4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800bcfe:	f107 0308 	add.w	r3, r7, #8
 800bd02:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	3304      	adds	r3, #4
 800bd0e:	4619      	mov	r1, r3
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	88fb      	ldrh	r3, [r7, #6]
 800bd16:	f7fc fe05 	bl	8008924 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	613b      	str	r3, [r7, #16]
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	613b      	str	r3, [r7, #16]
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	613b      	str	r3, [r7, #16]
 800bd2e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2200      	movs	r2, #0
 800bd34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	68da      	ldr	r2, [r3, #12]
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd46:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	695a      	ldr	r2, [r3, #20]
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f042 0201 	orr.w	r2, r2, #1
 800bd56:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	695a      	ldr	r2, [r3, #20]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd66:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	e000      	b.n	800bd6e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800bd6c:	2302      	movs	r3, #2
  }
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3718      	adds	r7, #24
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	0800c0d3 	.word	0x0800c0d3
 800bd7c:	0800c13b 	.word	0x0800c13b
 800bd80:	0800c157 	.word	0x0800c157

0800bd84 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	68da      	ldr	r2, [r3, #12]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bd9a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	695a      	ldr	r2, [r3, #20]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f022 0201 	bic.w	r2, r2, #1
 800bdaa:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	695b      	ldr	r3, [r3, #20]
 800bdb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdb6:	2b40      	cmp	r3, #64	; 0x40
 800bdb8:	d12a      	bne.n	800be10 <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	695a      	ldr	r2, [r3, #20]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bdc8:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d013      	beq.n	800bdfa <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdd6:	4a16      	ldr	r2, [pc, #88]	; (800be30 <HAL_UART_AbortReceive_IT+0xac>)
 800bdd8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7fc fe00 	bl	80089e4 <HAL_DMA_Abort_IT>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d01c      	beq.n	800be24 <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bdf4:	4610      	mov	r0, r2
 800bdf6:	4798      	blx	r3
 800bdf8:	e014      	b.n	800be24 <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2220      	movs	r2, #32
 800be04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f7f9 fc19 	bl	8005640 <HAL_UART_AbortReceiveCpltCallback>
 800be0e:	e009      	b.n	800be24 <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2220      	movs	r2, #32
 800be1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f7f9 fc0e 	bl	8005640 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800be24:	2300      	movs	r3, #0
}
 800be26:	4618      	mov	r0, r3
 800be28:	3708      	adds	r7, #8
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	0800c27b 	.word	0x0800c27b

0800be34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b088      	sub	sp, #32
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	68db      	ldr	r3, [r3, #12]
 800be4a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	695b      	ldr	r3, [r3, #20]
 800be52:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800be54:	2300      	movs	r3, #0
 800be56:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800be58:	2300      	movs	r3, #0
 800be5a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	f003 030f 	and.w	r3, r3, #15
 800be62:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d10d      	bne.n	800be86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	f003 0320 	and.w	r3, r3, #32
 800be70:	2b00      	cmp	r3, #0
 800be72:	d008      	beq.n	800be86 <HAL_UART_IRQHandler+0x52>
 800be74:	69bb      	ldr	r3, [r7, #24]
 800be76:	f003 0320 	and.w	r3, r3, #32
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d003      	beq.n	800be86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 fa7e 	bl	800c380 <UART_Receive_IT>
      return;
 800be84:	e0cb      	b.n	800c01e <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	f000 80ab 	beq.w	800bfe4 <HAL_UART_IRQHandler+0x1b0>
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	f003 0301 	and.w	r3, r3, #1
 800be94:	2b00      	cmp	r3, #0
 800be96:	d105      	bne.n	800bea4 <HAL_UART_IRQHandler+0x70>
 800be98:	69bb      	ldr	r3, [r7, #24]
 800be9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	f000 80a0 	beq.w	800bfe4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	f003 0301 	and.w	r3, r3, #1
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00a      	beq.n	800bec4 <HAL_UART_IRQHandler+0x90>
 800beae:	69bb      	ldr	r3, [r7, #24]
 800beb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d005      	beq.n	800bec4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bebc:	f043 0201 	orr.w	r2, r3, #1
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bec4:	69fb      	ldr	r3, [r7, #28]
 800bec6:	f003 0304 	and.w	r3, r3, #4
 800beca:	2b00      	cmp	r3, #0
 800becc:	d00a      	beq.n	800bee4 <HAL_UART_IRQHandler+0xb0>
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	f003 0301 	and.w	r3, r3, #1
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d005      	beq.n	800bee4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bedc:	f043 0202 	orr.w	r2, r3, #2
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	f003 0302 	and.w	r3, r3, #2
 800beea:	2b00      	cmp	r3, #0
 800beec:	d00a      	beq.n	800bf04 <HAL_UART_IRQHandler+0xd0>
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	f003 0301 	and.w	r3, r3, #1
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d005      	beq.n	800bf04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800befc:	f043 0204 	orr.w	r2, r3, #4
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	f003 0308 	and.w	r3, r3, #8
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00a      	beq.n	800bf24 <HAL_UART_IRQHandler+0xf0>
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	f003 0301 	and.w	r3, r3, #1
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d005      	beq.n	800bf24 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf1c:	f043 0208 	orr.w	r2, r3, #8
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d077      	beq.n	800c01c <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	f003 0320 	and.w	r3, r3, #32
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d007      	beq.n	800bf46 <HAL_UART_IRQHandler+0x112>
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	f003 0320 	and.w	r3, r3, #32
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d002      	beq.n	800bf46 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 fa1d 	bl	800c380 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	695b      	ldr	r3, [r3, #20]
 800bf4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf50:	2b40      	cmp	r3, #64	; 0x40
 800bf52:	bf0c      	ite	eq
 800bf54:	2301      	moveq	r3, #1
 800bf56:	2300      	movne	r3, #0
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf60:	f003 0308 	and.w	r3, r3, #8
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d102      	bne.n	800bf6e <HAL_UART_IRQHandler+0x13a>
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d031      	beq.n	800bfd2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 f951 	bl	800c216 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	695b      	ldr	r3, [r3, #20]
 800bf7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf7e:	2b40      	cmp	r3, #64	; 0x40
 800bf80:	d123      	bne.n	800bfca <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	695a      	ldr	r2, [r3, #20]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf90:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d013      	beq.n	800bfc2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf9e:	4a21      	ldr	r2, [pc, #132]	; (800c024 <HAL_UART_IRQHandler+0x1f0>)
 800bfa0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7fc fd1c 	bl	80089e4 <HAL_DMA_Abort_IT>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d016      	beq.n	800bfe0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfb8:	687a      	ldr	r2, [r7, #4]
 800bfba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bfbc:	4610      	mov	r0, r2
 800bfbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfc0:	e00e      	b.n	800bfe0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 f844 	bl	800c050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfc8:	e00a      	b.n	800bfe0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 f840 	bl	800c050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfd0:	e006      	b.n	800bfe0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 f83c 	bl	800c050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800bfde:	e01d      	b.n	800c01c <HAL_UART_IRQHandler+0x1e8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfe0:	bf00      	nop
    return;
 800bfe2:	e01b      	b.n	800c01c <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bfe4:	69fb      	ldr	r3, [r7, #28]
 800bfe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d008      	beq.n	800c000 <HAL_UART_IRQHandler+0x1cc>
 800bfee:	69bb      	ldr	r3, [r7, #24]
 800bff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d003      	beq.n	800c000 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 f953 	bl	800c2a4 <UART_Transmit_IT>
    return;
 800bffe:	e00e      	b.n	800c01e <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c006:	2b00      	cmp	r3, #0
 800c008:	d009      	beq.n	800c01e <HAL_UART_IRQHandler+0x1ea>
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c010:	2b00      	cmp	r3, #0
 800c012:	d004      	beq.n	800c01e <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 f99b 	bl	800c350 <UART_EndTransmit_IT>
    return;
 800c01a:	e000      	b.n	800c01e <HAL_UART_IRQHandler+0x1ea>
    return;
 800c01c:	bf00      	nop
  }
}
 800c01e:	3720      	adds	r7, #32
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}
 800c024:	0800c253 	.word	0x0800c253

0800c028 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c028:	b480      	push	{r7}
 800c02a:	b083      	sub	sp, #12
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c030:	bf00      	nop
 800c032:	370c      	adds	r7, #12
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr

0800c03c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c044:	bf00      	nop
 800c046:	370c      	adds	r7, #12
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr

0800c050 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c058:	bf00      	nop
 800c05a:	370c      	adds	r7, #12
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c070:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d113      	bne.n	800c0a8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2200      	movs	r2, #0
 800c084:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	695a      	ldr	r2, [r3, #20]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c094:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	68da      	ldr	r2, [r3, #12]
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0a4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c0a6:	e002      	b.n	800c0ae <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800c0a8:	68f8      	ldr	r0, [r7, #12]
 800c0aa:	f7f9 f9a1 	bl	80053f0 <HAL_UART_TxCpltCallback>
}
 800c0ae:	bf00      	nop
 800c0b0:	3710      	adds	r7, #16
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}

0800c0b6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b084      	sub	sp, #16
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	f7ff ffaf 	bl	800c028 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0ca:	bf00      	nop
 800c0cc:	3710      	adds	r7, #16
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}

0800c0d2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c0d2:	b580      	push	{r7, lr}
 800c0d4:	b084      	sub	sp, #16
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0de:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d11e      	bne.n	800c12c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	68da      	ldr	r2, [r3, #12]
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c102:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	695a      	ldr	r2, [r3, #20]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f022 0201 	bic.w	r2, r2, #1
 800c112:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	695a      	ldr	r2, [r3, #20]
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c122:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2220      	movs	r2, #32
 800c128:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800c12c:	68f8      	ldr	r0, [r7, #12]
 800c12e:	f7f9 f9e1 	bl	80054f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c132:	bf00      	nop
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}

0800c13a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c13a:	b580      	push	{r7, lr}
 800c13c:	b084      	sub	sp, #16
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c146:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800c148:	68f8      	ldr	r0, [r7, #12]
 800c14a:	f7ff ff77 	bl	800c03c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c14e:	bf00      	nop
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}

0800c156 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b084      	sub	sp, #16
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c15e:	2300      	movs	r3, #0
 800c160:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c166:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	695b      	ldr	r3, [r3, #20]
 800c16e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c172:	2b80      	cmp	r3, #128	; 0x80
 800c174:	bf0c      	ite	eq
 800c176:	2301      	moveq	r3, #1
 800c178:	2300      	movne	r3, #0
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c184:	b2db      	uxtb	r3, r3
 800c186:	2b21      	cmp	r3, #33	; 0x21
 800c188:	d108      	bne.n	800c19c <UART_DMAError+0x46>
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d005      	beq.n	800c19c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	2200      	movs	r2, #0
 800c194:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c196:	68b8      	ldr	r0, [r7, #8]
 800c198:	f000 f827 	bl	800c1ea <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	695b      	ldr	r3, [r3, #20]
 800c1a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1a6:	2b40      	cmp	r3, #64	; 0x40
 800c1a8:	bf0c      	ite	eq
 800c1aa:	2301      	moveq	r3, #1
 800c1ac:	2300      	movne	r3, #0
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	2b22      	cmp	r3, #34	; 0x22
 800c1bc:	d108      	bne.n	800c1d0 <UART_DMAError+0x7a>
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d005      	beq.n	800c1d0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c1ca:	68b8      	ldr	r0, [r7, #8]
 800c1cc:	f000 f823 	bl	800c216 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1d4:	f043 0210 	orr.w	r2, r3, #16
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c1dc:	68b8      	ldr	r0, [r7, #8]
 800c1de:	f7ff ff37 	bl	800c050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c1e2:	bf00      	nop
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c1ea:	b480      	push	{r7}
 800c1ec:	b083      	sub	sp, #12
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	68da      	ldr	r2, [r3, #12]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c200:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2220      	movs	r2, #32
 800c206:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800c20a:	bf00      	nop
 800c20c:	370c      	adds	r7, #12
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr

0800c216 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c216:	b480      	push	{r7}
 800c218:	b083      	sub	sp, #12
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	68da      	ldr	r2, [r3, #12]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c22c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	695a      	ldr	r2, [r3, #20]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f022 0201 	bic.w	r2, r2, #1
 800c23c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2220      	movs	r2, #32
 800c242:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800c246:	bf00      	nop
 800c248:	370c      	adds	r7, #12
 800c24a:	46bd      	mov	sp, r7
 800c24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c250:	4770      	bx	lr

0800c252 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c252:	b580      	push	{r7, lr}
 800c254:	b084      	sub	sp, #16
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c25e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2200      	movs	r2, #0
 800c264:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2200      	movs	r2, #0
 800c26a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f7ff feef 	bl	800c050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c272:	bf00      	nop
 800c274:	3710      	adds	r7, #16
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b084      	sub	sp, #16
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c286:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2200      	movs	r2, #0
 800c28c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	2220      	movs	r2, #32
 800c292:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800c296:	68f8      	ldr	r0, [r7, #12]
 800c298:	f7f9 f9d2 	bl	8005640 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c29c:	bf00      	nop
 800c29e:	3710      	adds	r7, #16
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	2b21      	cmp	r3, #33	; 0x21
 800c2b6:	d144      	bne.n	800c342 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	689b      	ldr	r3, [r3, #8]
 800c2bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2c0:	d11a      	bne.n	800c2f8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6a1b      	ldr	r3, [r3, #32]
 800c2c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	881b      	ldrh	r3, [r3, #0]
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2d6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	691b      	ldr	r3, [r3, #16]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d105      	bne.n	800c2ec <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6a1b      	ldr	r3, [r3, #32]
 800c2e4:	1c9a      	adds	r2, r3, #2
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	621a      	str	r2, [r3, #32]
 800c2ea:	e00e      	b.n	800c30a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6a1b      	ldr	r3, [r3, #32]
 800c2f0:	1c5a      	adds	r2, r3, #1
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	621a      	str	r2, [r3, #32]
 800c2f6:	e008      	b.n	800c30a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6a1b      	ldr	r3, [r3, #32]
 800c2fc:	1c59      	adds	r1, r3, #1
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	6211      	str	r1, [r2, #32]
 800c302:	781a      	ldrb	r2, [r3, #0]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c30e:	b29b      	uxth	r3, r3
 800c310:	3b01      	subs	r3, #1
 800c312:	b29b      	uxth	r3, r3
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	4619      	mov	r1, r3
 800c318:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d10f      	bne.n	800c33e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	68da      	ldr	r2, [r3, #12]
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c32c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	68da      	ldr	r2, [r3, #12]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c33c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c33e:	2300      	movs	r3, #0
 800c340:	e000      	b.n	800c344 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c342:	2302      	movs	r3, #2
  }
}
 800c344:	4618      	mov	r0, r3
 800c346:	3714      	adds	r7, #20
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	68da      	ldr	r2, [r3, #12]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c366:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2220      	movs	r2, #32
 800c36c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f7f9 f83d 	bl	80053f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c376:	2300      	movs	r3, #0
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3708      	adds	r7, #8
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b084      	sub	sp, #16
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	2b22      	cmp	r3, #34	; 0x22
 800c392:	d171      	bne.n	800c478 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c39c:	d123      	bne.n	800c3e6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3a2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	691b      	ldr	r3, [r3, #16]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d10e      	bne.n	800c3ca <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3b8:	b29a      	uxth	r2, r3
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3c2:	1c9a      	adds	r2, r3, #2
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	629a      	str	r2, [r3, #40]	; 0x28
 800c3c8:	e029      	b.n	800c41e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	b29a      	uxth	r2, r3
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3de:	1c5a      	adds	r2, r3, #1
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	629a      	str	r2, [r3, #40]	; 0x28
 800c3e4:	e01b      	b.n	800c41e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	691b      	ldr	r3, [r3, #16]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d10a      	bne.n	800c404 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	6858      	ldr	r0, [r3, #4]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3f8:	1c59      	adds	r1, r3, #1
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	6291      	str	r1, [r2, #40]	; 0x28
 800c3fe:	b2c2      	uxtb	r2, r0
 800c400:	701a      	strb	r2, [r3, #0]
 800c402:	e00c      	b.n	800c41e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	b2da      	uxtb	r2, r3
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c410:	1c58      	adds	r0, r3, #1
 800c412:	6879      	ldr	r1, [r7, #4]
 800c414:	6288      	str	r0, [r1, #40]	; 0x28
 800c416:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c41a:	b2d2      	uxtb	r2, r2
 800c41c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c422:	b29b      	uxth	r3, r3
 800c424:	3b01      	subs	r3, #1
 800c426:	b29b      	uxth	r3, r3
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	4619      	mov	r1, r3
 800c42c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d120      	bne.n	800c474 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	68da      	ldr	r2, [r3, #12]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f022 0220 	bic.w	r2, r2, #32
 800c440:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	68da      	ldr	r2, [r3, #12]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c450:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	695a      	ldr	r2, [r3, #20]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f022 0201 	bic.w	r2, r2, #1
 800c460:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2220      	movs	r2, #32
 800c466:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f7f9 f842 	bl	80054f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800c470:	2300      	movs	r3, #0
 800c472:	e002      	b.n	800c47a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800c474:	2300      	movs	r3, #0
 800c476:	e000      	b.n	800c47a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800c478:	2302      	movs	r3, #2
  }
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3710      	adds	r7, #16
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
	...

0800c484 <__libc_init_array>:
 800c484:	b570      	push	{r4, r5, r6, lr}
 800c486:	4d0d      	ldr	r5, [pc, #52]	; (800c4bc <__libc_init_array+0x38>)
 800c488:	4c0d      	ldr	r4, [pc, #52]	; (800c4c0 <__libc_init_array+0x3c>)
 800c48a:	1b64      	subs	r4, r4, r5
 800c48c:	10a4      	asrs	r4, r4, #2
 800c48e:	2600      	movs	r6, #0
 800c490:	42a6      	cmp	r6, r4
 800c492:	d109      	bne.n	800c4a8 <__libc_init_array+0x24>
 800c494:	4d0b      	ldr	r5, [pc, #44]	; (800c4c4 <__libc_init_array+0x40>)
 800c496:	4c0c      	ldr	r4, [pc, #48]	; (800c4c8 <__libc_init_array+0x44>)
 800c498:	f000 f82e 	bl	800c4f8 <_init>
 800c49c:	1b64      	subs	r4, r4, r5
 800c49e:	10a4      	asrs	r4, r4, #2
 800c4a0:	2600      	movs	r6, #0
 800c4a2:	42a6      	cmp	r6, r4
 800c4a4:	d105      	bne.n	800c4b2 <__libc_init_array+0x2e>
 800c4a6:	bd70      	pop	{r4, r5, r6, pc}
 800c4a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4ac:	4798      	blx	r3
 800c4ae:	3601      	adds	r6, #1
 800c4b0:	e7ee      	b.n	800c490 <__libc_init_array+0xc>
 800c4b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4b6:	4798      	blx	r3
 800c4b8:	3601      	adds	r6, #1
 800c4ba:	e7f2      	b.n	800c4a2 <__libc_init_array+0x1e>
 800c4bc:	0800e428 	.word	0x0800e428
 800c4c0:	0800e428 	.word	0x0800e428
 800c4c4:	0800e428 	.word	0x0800e428
 800c4c8:	0800e42c 	.word	0x0800e42c

0800c4cc <memcpy>:
 800c4cc:	440a      	add	r2, r1
 800c4ce:	4291      	cmp	r1, r2
 800c4d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c4d4:	d100      	bne.n	800c4d8 <memcpy+0xc>
 800c4d6:	4770      	bx	lr
 800c4d8:	b510      	push	{r4, lr}
 800c4da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4e2:	4291      	cmp	r1, r2
 800c4e4:	d1f9      	bne.n	800c4da <memcpy+0xe>
 800c4e6:	bd10      	pop	{r4, pc}

0800c4e8 <memset>:
 800c4e8:	4402      	add	r2, r0
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d100      	bne.n	800c4f2 <memset+0xa>
 800c4f0:	4770      	bx	lr
 800c4f2:	f803 1b01 	strb.w	r1, [r3], #1
 800c4f6:	e7f9      	b.n	800c4ec <memset+0x4>

0800c4f8 <_init>:
 800c4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4fa:	bf00      	nop
 800c4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4fe:	bc08      	pop	{r3}
 800c500:	469e      	mov	lr, r3
 800c502:	4770      	bx	lr

0800c504 <_fini>:
 800c504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c506:	bf00      	nop
 800c508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c50a:	bc08      	pop	{r3}
 800c50c:	469e      	mov	lr, r3
 800c50e:	4770      	bx	lr
