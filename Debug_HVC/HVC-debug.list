
HVC-debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba08  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001df0  0800bbe8  0800bbe8  0001bbe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d9d8  0800d9d8  0001d9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d9e0  0800d9e0  0001d9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d9e4  0800d9e4  0001d9e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001bc  20000000  0800d9e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009828  200001bc  0800dba4  000201bc  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200099e4  0800dba4  000299e4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bca8  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000511e  00000000  00000000  0003be94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001698  00000000  00000000  00040fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001460  00000000  00000000  00042650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000257f0  00000000  00000000  00043ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e84d  00000000  00000000  000692a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d6994  00000000  00000000  00087aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0015e481  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005a80  00000000  00000000  0015e4d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001bc 	.word	0x200001bc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bbd0 	.word	0x0800bbd0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001c0 	.word	0x200001c0
 800021c:	0800bbd0 	.word	0x0800bbd0

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2iz>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009c4:	d215      	bcs.n	80009f2 <__aeabi_d2iz+0x36>
 80009c6:	d511      	bpl.n	80009ec <__aeabi_d2iz+0x30>
 80009c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d0:	d912      	bls.n	80009f8 <__aeabi_d2iz+0x3c>
 80009d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009e2:	fa23 f002 	lsr.w	r0, r3, r2
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d105      	bne.n	8000a04 <__aeabi_d2iz+0x48>
 80009f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	bf08      	it	eq
 80009fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a02:	4770      	bx	lr
 8000a04:	f04f 0000 	mov.w	r0, #0
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b974 	b.w	8000d0c <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	4604      	mov	r4, r0
 8000a44:	468e      	mov	lr, r1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d14d      	bne.n	8000ae6 <__udivmoddi4+0xaa>
 8000a4a:	428a      	cmp	r2, r1
 8000a4c:	4694      	mov	ip, r2
 8000a4e:	d969      	bls.n	8000b24 <__udivmoddi4+0xe8>
 8000a50:	fab2 f282 	clz	r2, r2
 8000a54:	b152      	cbz	r2, 8000a6c <__udivmoddi4+0x30>
 8000a56:	fa01 f302 	lsl.w	r3, r1, r2
 8000a5a:	f1c2 0120 	rsb	r1, r2, #32
 8000a5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a66:	ea41 0e03 	orr.w	lr, r1, r3
 8000a6a:	4094      	lsls	r4, r2
 8000a6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a70:	0c21      	lsrs	r1, r4, #16
 8000a72:	fbbe f6f8 	udiv	r6, lr, r8
 8000a76:	fa1f f78c 	uxth.w	r7, ip
 8000a7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a82:	fb06 f107 	mul.w	r1, r6, r7
 8000a86:	4299      	cmp	r1, r3
 8000a88:	d90a      	bls.n	8000aa0 <__udivmoddi4+0x64>
 8000a8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a92:	f080 811f 	bcs.w	8000cd4 <__udivmoddi4+0x298>
 8000a96:	4299      	cmp	r1, r3
 8000a98:	f240 811c 	bls.w	8000cd4 <__udivmoddi4+0x298>
 8000a9c:	3e02      	subs	r6, #2
 8000a9e:	4463      	add	r3, ip
 8000aa0:	1a5b      	subs	r3, r3, r1
 8000aa2:	b2a4      	uxth	r4, r4
 8000aa4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab0:	fb00 f707 	mul.w	r7, r0, r7
 8000ab4:	42a7      	cmp	r7, r4
 8000ab6:	d90a      	bls.n	8000ace <__udivmoddi4+0x92>
 8000ab8:	eb1c 0404 	adds.w	r4, ip, r4
 8000abc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac0:	f080 810a 	bcs.w	8000cd8 <__udivmoddi4+0x29c>
 8000ac4:	42a7      	cmp	r7, r4
 8000ac6:	f240 8107 	bls.w	8000cd8 <__udivmoddi4+0x29c>
 8000aca:	4464      	add	r4, ip
 8000acc:	3802      	subs	r0, #2
 8000ace:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ad2:	1be4      	subs	r4, r4, r7
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	b11d      	cbz	r5, 8000ae0 <__udivmoddi4+0xa4>
 8000ad8:	40d4      	lsrs	r4, r2
 8000ada:	2300      	movs	r3, #0
 8000adc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d909      	bls.n	8000afe <__udivmoddi4+0xc2>
 8000aea:	2d00      	cmp	r5, #0
 8000aec:	f000 80ef 	beq.w	8000cce <__udivmoddi4+0x292>
 8000af0:	2600      	movs	r6, #0
 8000af2:	e9c5 0100 	strd	r0, r1, [r5]
 8000af6:	4630      	mov	r0, r6
 8000af8:	4631      	mov	r1, r6
 8000afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afe:	fab3 f683 	clz	r6, r3
 8000b02:	2e00      	cmp	r6, #0
 8000b04:	d14a      	bne.n	8000b9c <__udivmoddi4+0x160>
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d302      	bcc.n	8000b10 <__udivmoddi4+0xd4>
 8000b0a:	4282      	cmp	r2, r0
 8000b0c:	f200 80f9 	bhi.w	8000d02 <__udivmoddi4+0x2c6>
 8000b10:	1a84      	subs	r4, r0, r2
 8000b12:	eb61 0303 	sbc.w	r3, r1, r3
 8000b16:	2001      	movs	r0, #1
 8000b18:	469e      	mov	lr, r3
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d0e0      	beq.n	8000ae0 <__udivmoddi4+0xa4>
 8000b1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b22:	e7dd      	b.n	8000ae0 <__udivmoddi4+0xa4>
 8000b24:	b902      	cbnz	r2, 8000b28 <__udivmoddi4+0xec>
 8000b26:	deff      	udf	#255	; 0xff
 8000b28:	fab2 f282 	clz	r2, r2
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	f040 8092 	bne.w	8000c56 <__udivmoddi4+0x21a>
 8000b32:	eba1 010c 	sub.w	r1, r1, ip
 8000b36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3a:	fa1f fe8c 	uxth.w	lr, ip
 8000b3e:	2601      	movs	r6, #1
 8000b40:	0c20      	lsrs	r0, r4, #16
 8000b42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b46:	fb07 1113 	mls	r1, r7, r3, r1
 8000b4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b4e:	fb0e f003 	mul.w	r0, lr, r3
 8000b52:	4288      	cmp	r0, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x12c>
 8000b56:	eb1c 0101 	adds.w	r1, ip, r1
 8000b5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x12a>
 8000b60:	4288      	cmp	r0, r1
 8000b62:	f200 80cb 	bhi.w	8000cfc <__udivmoddi4+0x2c0>
 8000b66:	4643      	mov	r3, r8
 8000b68:	1a09      	subs	r1, r1, r0
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b70:	fb07 1110 	mls	r1, r7, r0, r1
 8000b74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b78:	fb0e fe00 	mul.w	lr, lr, r0
 8000b7c:	45a6      	cmp	lr, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x156>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x154>
 8000b8a:	45a6      	cmp	lr, r4
 8000b8c:	f200 80bb 	bhi.w	8000d06 <__udivmoddi4+0x2ca>
 8000b90:	4608      	mov	r0, r1
 8000b92:	eba4 040e 	sub.w	r4, r4, lr
 8000b96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b9a:	e79c      	b.n	8000ad6 <__udivmoddi4+0x9a>
 8000b9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ba0:	40b3      	lsls	r3, r6
 8000ba2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ba6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000baa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bae:	fa01 f306 	lsl.w	r3, r1, r6
 8000bb2:	431c      	orrs	r4, r3
 8000bb4:	40f9      	lsrs	r1, r7
 8000bb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bba:	fa00 f306 	lsl.w	r3, r0, r6
 8000bbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bc2:	0c20      	lsrs	r0, r4, #16
 8000bc4:	fa1f fe8c 	uxth.w	lr, ip
 8000bc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000bd4:	4288      	cmp	r0, r1
 8000bd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bda:	d90b      	bls.n	8000bf4 <__udivmoddi4+0x1b8>
 8000bdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000be0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000be4:	f080 8088 	bcs.w	8000cf8 <__udivmoddi4+0x2bc>
 8000be8:	4288      	cmp	r0, r1
 8000bea:	f240 8085 	bls.w	8000cf8 <__udivmoddi4+0x2bc>
 8000bee:	f1a8 0802 	sub.w	r8, r8, #2
 8000bf2:	4461      	add	r1, ip
 8000bf4:	1a09      	subs	r1, r1, r0
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000c00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c08:	458e      	cmp	lr, r1
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x1e2>
 8000c0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c14:	d26c      	bcs.n	8000cf0 <__udivmoddi4+0x2b4>
 8000c16:	458e      	cmp	lr, r1
 8000c18:	d96a      	bls.n	8000cf0 <__udivmoddi4+0x2b4>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4461      	add	r1, ip
 8000c1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c22:	fba0 9402 	umull	r9, r4, r0, r2
 8000c26:	eba1 010e 	sub.w	r1, r1, lr
 8000c2a:	42a1      	cmp	r1, r4
 8000c2c:	46c8      	mov	r8, r9
 8000c2e:	46a6      	mov	lr, r4
 8000c30:	d356      	bcc.n	8000ce0 <__udivmoddi4+0x2a4>
 8000c32:	d053      	beq.n	8000cdc <__udivmoddi4+0x2a0>
 8000c34:	b15d      	cbz	r5, 8000c4e <__udivmoddi4+0x212>
 8000c36:	ebb3 0208 	subs.w	r2, r3, r8
 8000c3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c42:	fa22 f306 	lsr.w	r3, r2, r6
 8000c46:	40f1      	lsrs	r1, r6
 8000c48:	431f      	orrs	r7, r3
 8000c4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c4e:	2600      	movs	r6, #0
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	40d8      	lsrs	r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	fa21 f303 	lsr.w	r3, r1, r3
 8000c64:	4091      	lsls	r1, r2
 8000c66:	4301      	orrs	r1, r0
 8000c68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6c:	fa1f fe8c 	uxth.w	lr, ip
 8000c70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c74:	fb07 3610 	mls	r6, r7, r0, r3
 8000c78:	0c0b      	lsrs	r3, r1, #16
 8000c7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c82:	429e      	cmp	r6, r3
 8000c84:	fa04 f402 	lsl.w	r4, r4, r2
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x260>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c92:	d22f      	bcs.n	8000cf4 <__udivmoddi4+0x2b8>
 8000c94:	429e      	cmp	r6, r3
 8000c96:	d92d      	bls.n	8000cf4 <__udivmoddi4+0x2b8>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	b289      	uxth	r1, r1
 8000ca0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ca4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ca8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cac:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb0:	428b      	cmp	r3, r1
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x28a>
 8000cb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cbc:	d216      	bcs.n	8000cec <__udivmoddi4+0x2b0>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d914      	bls.n	8000cec <__udivmoddi4+0x2b0>
 8000cc2:	3e02      	subs	r6, #2
 8000cc4:	4461      	add	r1, ip
 8000cc6:	1ac9      	subs	r1, r1, r3
 8000cc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ccc:	e738      	b.n	8000b40 <__udivmoddi4+0x104>
 8000cce:	462e      	mov	r6, r5
 8000cd0:	4628      	mov	r0, r5
 8000cd2:	e705      	b.n	8000ae0 <__udivmoddi4+0xa4>
 8000cd4:	4606      	mov	r6, r0
 8000cd6:	e6e3      	b.n	8000aa0 <__udivmoddi4+0x64>
 8000cd8:	4618      	mov	r0, r3
 8000cda:	e6f8      	b.n	8000ace <__udivmoddi4+0x92>
 8000cdc:	454b      	cmp	r3, r9
 8000cde:	d2a9      	bcs.n	8000c34 <__udivmoddi4+0x1f8>
 8000ce0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ce4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ce8:	3801      	subs	r0, #1
 8000cea:	e7a3      	b.n	8000c34 <__udivmoddi4+0x1f8>
 8000cec:	4646      	mov	r6, r8
 8000cee:	e7ea      	b.n	8000cc6 <__udivmoddi4+0x28a>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	e794      	b.n	8000c1e <__udivmoddi4+0x1e2>
 8000cf4:	4640      	mov	r0, r8
 8000cf6:	e7d1      	b.n	8000c9c <__udivmoddi4+0x260>
 8000cf8:	46d0      	mov	r8, sl
 8000cfa:	e77b      	b.n	8000bf4 <__udivmoddi4+0x1b8>
 8000cfc:	3b02      	subs	r3, #2
 8000cfe:	4461      	add	r1, ip
 8000d00:	e732      	b.n	8000b68 <__udivmoddi4+0x12c>
 8000d02:	4630      	mov	r0, r6
 8000d04:	e709      	b.n	8000b1a <__udivmoddi4+0xde>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	e742      	b.n	8000b92 <__udivmoddi4+0x156>

08000d0c <__aeabi_idiv0>:
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <adcOutputToVoltage>:
// Counter for how many times until we flash the LED
static const uint8_t LED_FLASH_COUNT = 50;
static uint8_t BMBFlashCounter = 0;

//takes in adc output and cell index to get voltage value
static int16_t adcOutputToVoltage(uint16_t ADC_val, int cell) {
 8000d10:	b5b0      	push	{r4, r5, r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	80fb      	strh	r3, [r7, #6]
	return ((ADC_val / 1023.0) * 4096) * resistorRatios[cell];
 8000d1c:	88fb      	ldrh	r3, [r7, #6]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fbd0 	bl	80004c4 <__aeabi_i2d>
 8000d24:	a318      	add	r3, pc, #96	; (adr r3, 8000d88 <adcOutputToVoltage+0x78>)
 8000d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2a:	f7ff fd5f 	bl	80007ec <__aeabi_ddiv>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	460b      	mov	r3, r1
 8000d32:	4610      	mov	r0, r2
 8000d34:	4619      	mov	r1, r3
 8000d36:	f04f 0200 	mov.w	r2, #0
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <adcOutputToVoltage+0x70>)
 8000d3c:	f7ff fc2c 	bl	8000598 <__aeabi_dmul>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	4614      	mov	r4, r2
 8000d46:	461d      	mov	r5, r3
 8000d48:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <adcOutputToVoltage+0x74>)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fbc8 	bl	80004e8 <__aeabi_f2d>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4620      	mov	r0, r4
 8000d5e:	4629      	mov	r1, r5
 8000d60:	f7ff fc1a 	bl	8000598 <__aeabi_dmul>
 8000d64:	4602      	mov	r2, r0
 8000d66:	460b      	mov	r3, r1
 8000d68:	4610      	mov	r0, r2
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f7ff fe26 	bl	80009bc <__aeabi_d2iz>
 8000d70:	4603      	mov	r3, r0
 8000d72:	b21b      	sxth	r3, r3
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d7c:	f3af 8000 	nop.w
 8000d80:	40b00000 	.word	0x40b00000
 8000d84:	0800d888 	.word	0x0800d888
 8000d88:	00000000 	.word	0x00000000
 8000d8c:	408ff800 	.word	0x408ff800

08000d90 <lutTemp>:

// Returns temperature in 1/10th degC given ADC
// using LUT interpolation from the transfer function.
// See drive doc "18e CMR BMS Temperature Math" for LUT
static int16_t lutTemp(uint16_t ADC_lt) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b096      	sub	sp, #88	; 0x58
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	80fb      	strh	r3, [r7, #6]
	const uint8_t LUT_SIZE = 18;
 8000d9a:	2312      	movs	r3, #18
 8000d9c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	const uint16_t lut[18][2] = { { 8802, 850 }, { 9930, 800 }, { 11208, 750 },
 8000da0:	4a48      	ldr	r2, [pc, #288]	; (8000ec4 <lutTemp+0x134>)
 8000da2:	f107 0308 	add.w	r3, r7, #8
 8000da6:	4611      	mov	r1, r2
 8000da8:	2248      	movs	r2, #72	; 0x48
 8000daa:	4618      	mov	r0, r3
 8000dac:	f00a fefa 	bl	800bba4 <memcpy>
			{ 28459, 350 }, { 31533, 300 }, { 34744, 250 }, { 38019, 200 }, {
					41331, 150 }, { 44621, 100 }, { 47792, 50 }, { 50833, 0 }, };

	// Check if input is out of LUT bounds
	// If so, return the boundary values
	if (ADC_lt < lut[0][0]) {
 8000db0:	893b      	ldrh	r3, [r7, #8]
 8000db2:	88fa      	ldrh	r2, [r7, #6]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d202      	bcs.n	8000dbe <lutTemp+0x2e>
		return lut[0][1];
 8000db8:	897b      	ldrh	r3, [r7, #10]
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	e07d      	b.n	8000eba <lutTemp+0x12a>
	}
	if (ADC_lt > lut[LUT_SIZE - 1][0]) {
 8000dbe:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	3358      	adds	r3, #88	; 0x58
 8000dc8:	443b      	add	r3, r7
 8000dca:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8000dce:	88fa      	ldrh	r2, [r7, #6]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d909      	bls.n	8000de8 <lutTemp+0x58>
		return lut[LUT_SIZE - 1][1];
 8000dd4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	3358      	adds	r3, #88	; 0x58
 8000dde:	443b      	add	r3, r7
 8000de0:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	e068      	b.n	8000eba <lutTemp+0x12a>
	}

	// Modified LUT linear interpolation code from stack overflow
	uint8_t i;
	for (i = 0; i < LUT_SIZE - 1; ++i) {
 8000de8:	2300      	movs	r3, #0
 8000dea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000dee:	e05b      	b.n	8000ea8 <lutTemp+0x118>
		if (lut[i][0] <= ADC_lt && lut[i + 1][0] >= ADC_lt) {
 8000df0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	3358      	adds	r3, #88	; 0x58
 8000df8:	443b      	add	r3, r7
 8000dfa:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8000dfe:	88fa      	ldrh	r2, [r7, #6]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d34c      	bcc.n	8000e9e <lutTemp+0x10e>
 8000e04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e08:	3301      	adds	r3, #1
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	3358      	adds	r3, #88	; 0x58
 8000e0e:	443b      	add	r3, r7
 8000e10:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8000e14:	88fa      	ldrh	r2, [r7, #6]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d841      	bhi.n	8000e9e <lutTemp+0x10e>
			// Target value is between two LUT points
			uint16_t diffADC = ADC_lt - lut[i][0];
 8000e1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	3358      	adds	r3, #88	; 0x58
 8000e22:	443b      	add	r3, r7
 8000e24:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8000e28:	88fa      	ldrh	r2, [r7, #6]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			uint16_t diffLUT = lut[i + 1][0] - lut[i][0];
 8000e30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e34:	3301      	adds	r3, #1
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	3358      	adds	r3, #88	; 0x58
 8000e3a:	443b      	add	r3, r7
 8000e3c:	f833 2c50 	ldrh.w	r2, [r3, #-80]
 8000e40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	3358      	adds	r3, #88	; 0x58
 8000e48:	443b      	add	r3, r7
 8000e4a:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

			return lut[i][1] + ((lut[i + 1][1] - lut[i][1]) * diffADC) / diffLUT;
 8000e54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	3358      	adds	r3, #88	; 0x58
 8000e5c:	443b      	add	r3, r7
 8000e5e:	f833 2c4e 	ldrh.w	r2, [r3, #-78]
 8000e62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e66:	3301      	adds	r3, #1
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	3358      	adds	r3, #88	; 0x58
 8000e6c:	443b      	add	r3, r7
 8000e6e:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
 8000e72:	4619      	mov	r1, r3
 8000e74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	3358      	adds	r3, #88	; 0x58
 8000e7c:	443b      	add	r3, r7
 8000e7e:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
 8000e82:	1acb      	subs	r3, r1, r3
 8000e84:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 8000e88:	fb03 f101 	mul.w	r1, r3, r1
 8000e8c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000e90:	fb91 f3f3 	sdiv	r3, r1, r3
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	4413      	add	r3, r2
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	e00d      	b.n	8000eba <lutTemp+0x12a>
	for (i = 0; i < LUT_SIZE - 1; ++i) {
 8000e9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000ea8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000eac:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	db9c      	blt.n	8000df0 <lutTemp+0x60>
		}
	}

	// Something went wrong, return max temp
	return 850;
 8000eb6:	f240 3352 	movw	r3, #850	; 0x352
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3758      	adds	r7, #88	; 0x58
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	0800bbe8 	.word	0x0800bbe8

08000ec8 <updateBMBData>:


//update corresponding voltage or temperature reading
void updateBMBData(uint16_t val, uint8_t adcChannel, uint8_t muxChannel, uint8_t bmb) {
 8000ec8:	b5b0      	push	{r4, r5, r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4604      	mov	r4, r0
 8000ed0:	4608      	mov	r0, r1
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	80fb      	strh	r3, [r7, #6]
 8000eda:	4603      	mov	r3, r0
 8000edc:	717b      	strb	r3, [r7, #5]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	713b      	strb	r3, [r7, #4]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	70fb      	strb	r3, [r7, #3]
	ADC_Mux_Channel_t indexToUpdate = ADCChannelLookupArr[adcChannel][muxChannel];
 8000ee6:	797a      	ldrb	r2, [r7, #5]
 8000ee8:	793b      	ldrb	r3, [r7, #4]
 8000eea:	492b      	ldr	r1, [pc, #172]	; (8000f98 <updateBMBData+0xd0>)
 8000eec:	0092      	lsls	r2, r2, #2
 8000eee:	440a      	add	r2, r1
 8000ef0:	4413      	add	r3, r2
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	73fb      	strb	r3, [r7, #15]
	if(indexToUpdate <= CELL9) {
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2b08      	cmp	r3, #8
 8000efa:	d82e      	bhi.n	8000f5a <updateBMBData+0x92>
		int16_t voltage = adcOutputToVoltage(val, indexToUpdate);
 8000efc:	7bfa      	ldrb	r2, [r7, #15]
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	4611      	mov	r1, r2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff04 	bl	8000d10 <adcOutputToVoltage>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	81bb      	strh	r3, [r7, #12]
		if (indexToUpdate == CELL1) {
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10a      	bne.n	8000f28 <updateBMBData+0x60>
		    BMBData[bmb].cellVoltages[0] = voltage;
 8000f12:	78fa      	ldrb	r2, [r7, #3]
 8000f14:	89b8      	ldrh	r0, [r7, #12]
 8000f16:	4921      	ldr	r1, [pc, #132]	; (8000f9c <updateBMBData+0xd4>)
 8000f18:	4613      	mov	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	011b      	lsls	r3, r3, #4
 8000f20:	440b      	add	r3, r1
 8000f22:	4602      	mov	r2, r0
 8000f24:	801a      	strh	r2, [r3, #0]
 8000f26:	e018      	b.n	8000f5a <updateBMBData+0x92>
        } else {
            BMBData[bmb].cellVoltages[indexToUpdate] = voltage - BMBData[bmb].cellVoltages[indexToUpdate - 1];
 8000f28:	89b8      	ldrh	r0, [r7, #12]
 8000f2a:	78fa      	ldrb	r2, [r7, #3]
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	1e59      	subs	r1, r3, #1
 8000f30:	4c1a      	ldr	r4, [pc, #104]	; (8000f9c <updateBMBData+0xd4>)
 8000f32:	4613      	mov	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4413      	add	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8000f40:	78fa      	ldrb	r2, [r7, #3]
 8000f42:	7bf9      	ldrb	r1, [r7, #15]
 8000f44:	1ac3      	subs	r3, r0, r3
 8000f46:	b29c      	uxth	r4, r3
 8000f48:	4814      	ldr	r0, [pc, #80]	; (8000f9c <updateBMBData+0xd4>)
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4413      	add	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	440b      	add	r3, r1
 8000f54:	4622      	mov	r2, r4
 8000f56:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        }
	}
	if(CELL9 < indexToUpdate && indexToUpdate <= THERM15) {
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	2b08      	cmp	r3, #8
 8000f5e:	d917      	bls.n	8000f90 <updateBMBData+0xc8>
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	2b17      	cmp	r3, #23
 8000f64:	d814      	bhi.n	8000f90 <updateBMBData+0xc8>
		BMBData[bmb].cellTemperatures[indexToUpdate - THERM1] = lutTemp(val);
 8000f66:	78fc      	ldrb	r4, [r7, #3]
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	f1a3 0509 	sub.w	r5, r3, #9
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff0d 	bl	8000d90 <lutTemp>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4a08      	ldr	r2, [pc, #32]	; (8000f9c <updateBMBData+0xd4>)
 8000f7c:	4623      	mov	r3, r4
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4423      	add	r3, r4
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	442b      	add	r3, r5
 8000f86:	3308      	adds	r3, #8
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	805a      	strh	r2, [r3, #2]
	}
}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bdb0      	pop	{r4, r5, r7, pc}
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	200001d8 	.word	0x200001d8

08000fa0 <BMBInit>:
	for (int i = 0; i < NUM_BMBS; i++) {
		BMBTimeoutCount[i] = BMB_TIMEOUT;
	}
}

void BMBInit() {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
	// Period
	const TickType_t xPeriod = 1000 / BMB_SAMPLE_TASK_RATE;		// In ticks (ms)
 8000fa6:	2364      	movs	r3, #100	; 0x64
 8000fa8:	607b      	str	r3, [r7, #4]
	if (!i2cInit()) {
 8000faa:	f001 f84f 	bl	800204c <i2cInit>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f083 0301 	eor.w	r3, r3, #1
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d002      	beq.n	8000fc0 <BMBInit+0x20>
		cmr_panic("Couldn't initialize I2C BMB Chain");
 8000fba:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <BMBInit+0x28>)
 8000fbc:	f003 f905 	bl	80041ca <cmr_panic>
	}
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	0800bc30 	.word	0x0800bc30

08000fcc <sampleOneBMB>:

bool sampleOneBMB(uint8_t BMBIndex, uint8_t BMBNum, uint8_t BMBSide) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	71bb      	strb	r3, [r7, #6]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	717b      	strb	r3, [r7, #5]
    if (!i2c_enableI2CMux(BMBNum, BMBSide)) {
 8000fde:	797a      	ldrb	r2, [r7, #5]
 8000fe0:	79bb      	ldrb	r3, [r7, #6]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 f8b3 	bl	8002150 <i2c_enableI2CMux>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f083 0301 	eor.w	r3, r3, #1
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d006      	beq.n	8001004 <sampleOneBMB+0x38>
        BMBTimeoutCount[BMBIndex] = BMB_TIMEOUT;
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	4a34      	ldr	r2, [pc, #208]	; (80010cc <sampleOneBMB+0x100>)
 8000ffa:	2105      	movs	r1, #5
 8000ffc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return false;
 8001000:	2300      	movs	r3, #0
 8001002:	e05e      	b.n	80010c2 <sampleOneBMB+0xf6>
    }
    //select through each of the mux channels
    for (int channel = 0; channel < NUM_MUX_CHANNELS; channel++) {
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	e028      	b.n	800105c <sampleOneBMB+0x90>
        if (!i2c_select4MuxChannel(channel)) {
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f001 f920 	bl	8002254 <i2c_select4MuxChannel>
 8001014:	4603      	mov	r3, r0
 8001016:	f083 0301 	eor.w	r3, r3, #1
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d006      	beq.n	800102e <sampleOneBMB+0x62>
            BMBTimeoutCount[BMBIndex] = BMB_TIMEOUT;
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	4a2a      	ldr	r2, [pc, #168]	; (80010cc <sampleOneBMB+0x100>)
 8001024:	2105      	movs	r1, #5
 8001026:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            return false;
 800102a:	2300      	movs	r3, #0
 800102c:	e049      	b.n	80010c2 <sampleOneBMB+0xf6>
        }
        // through each channel, input 8 adc channels
        if (!i2c_scanADC(BMBADCResponse[channel])) {
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	011b      	lsls	r3, r3, #4
 8001032:	4a27      	ldr	r2, [pc, #156]	; (80010d0 <sampleOneBMB+0x104>)
 8001034:	4413      	add	r3, r2
 8001036:	4618      	mov	r0, r3
 8001038:	f001 f98c 	bl	8002354 <i2c_scanADC>
 800103c:	4603      	mov	r3, r0
 800103e:	f083 0301 	eor.w	r3, r3, #1
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	d006      	beq.n	8001056 <sampleOneBMB+0x8a>
            BMBTimeoutCount[BMBIndex] = BMB_TIMEOUT;
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	4a20      	ldr	r2, [pc, #128]	; (80010cc <sampleOneBMB+0x100>)
 800104c:	2105      	movs	r1, #5
 800104e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            return false;
 8001052:	2300      	movs	r3, #0
 8001054:	e035      	b.n	80010c2 <sampleOneBMB+0xf6>
    for (int channel = 0; channel < NUM_MUX_CHANNELS; channel++) {
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	3301      	adds	r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2b03      	cmp	r3, #3
 8001060:	ddd3      	ble.n	800100a <sampleOneBMB+0x3e>
        }
    }
    // increment the counter or reset if we just flashed
    if (BMBFlashCounter >= LED_FLASH_COUNT) {
 8001062:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <sampleOneBMB+0x108>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2232      	movs	r2, #50	; 0x32
 8001068:	4293      	cmp	r3, r2
 800106a:	d312      	bcc.n	8001092 <sampleOneBMB+0xc6>
        // we got to threshold, blink this BMB
        if (!i2c_selectMuxBlink()) {
 800106c:	f001 f920 	bl	80022b0 <i2c_selectMuxBlink>
 8001070:	4603      	mov	r3, r0
 8001072:	f083 0301 	eor.w	r3, r3, #1
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d006      	beq.n	800108a <sampleOneBMB+0xbe>
            BMBTimeoutCount[BMBIndex] = BMB_TIMEOUT;
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	4a13      	ldr	r2, [pc, #76]	; (80010cc <sampleOneBMB+0x100>)
 8001080:	2105      	movs	r1, #5
 8001082:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            return false;
 8001086:	2300      	movs	r3, #0
 8001088:	e01b      	b.n	80010c2 <sampleOneBMB+0xf6>
        }
        BMBFlashCounter = 0;
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <sampleOneBMB+0x108>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	e005      	b.n	800109e <sampleOneBMB+0xd2>
    } else {
        BMBFlashCounter++;
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <sampleOneBMB+0x108>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <sampleOneBMB+0x108>)
 800109c:	701a      	strb	r2, [r3, #0]
    }
    if (!(i2c_disableI2CMux(BMBIndex))) {
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 f8a1 	bl	80021e8 <i2c_disableI2CMux>
 80010a6:	4603      	mov	r3, r0
 80010a8:	f083 0301 	eor.w	r3, r3, #1
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d006      	beq.n	80010c0 <sampleOneBMB+0xf4>
        BMBTimeoutCount[BMBIndex] = BMB_TIMEOUT;
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	4a05      	ldr	r2, [pc, #20]	; (80010cc <sampleOneBMB+0x100>)
 80010b6:	2105      	movs	r1, #5
 80010b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return false;
 80010bc:	2300      	movs	r3, #0
 80010be:	e000      	b.n	80010c2 <sampleOneBMB+0xf6>
    }
    return true;
 80010c0:	2301      	movs	r3, #1
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200012fc 	.word	0x200012fc
 80010d0:	20000208 	.word	0x20000208
 80010d4:	20000248 	.word	0x20000248

080010d8 <doCellBalanceOneBMB>:

void doCellBalanceOneBMB(uint8_t BMBIndex) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
    uint32_t totalVoltage = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
    //loop through all cells and turn adc output to voltage
    for (int j = 0; j < VSENSE_CHANNELS_PER_BMB; j++) {
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
 80010ea:	e010      	b.n	800110e <doCellBalanceOneBMB+0x36>
        //find difference between current TOTAL cell voltage - previous TOTAL cell voltage
        totalVoltage += BMBData[BMBIndex].cellVoltages[j];
 80010ec:	79fa      	ldrb	r2, [r7, #7]
 80010ee:	493a      	ldr	r1, [pc, #232]	; (80011d8 <doCellBalanceOneBMB+0x100>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4413      	add	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4413      	add	r3, r2
 80010fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001100:	461a      	mov	r2, r3
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	4413      	add	r3, r2
 8001106:	61fb      	str	r3, [r7, #28]
    for (int j = 0; j < VSENSE_CHANNELS_PER_BMB; j++) {
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	3301      	adds	r3, #1
 800110c:	61bb      	str	r3, [r7, #24]
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	2b08      	cmp	r3, #8
 8001112:	ddeb      	ble.n	80010ec <doCellBalanceOneBMB+0x14>
    }

    //Add cell balancing here
    uint32_t averageVoltage = totalVoltage / VSENSE_CHANNELS_PER_BMB;
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	4a31      	ldr	r2, [pc, #196]	; (80011dc <doCellBalanceOneBMB+0x104>)
 8001118:	fba2 2303 	umull	r2, r3, r2, r3
 800111c:	085b      	lsrs	r3, r3, #1
 800111e:	613b      	str	r3, [r7, #16]
    uint16_t cellsToBalance = 0xFFFF;
 8001120:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001124:	82fb      	strh	r3, [r7, #22]

    for (uint16_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 8001126:	2300      	movs	r3, #0
 8001128:	82bb      	strh	r3, [r7, #20]
 800112a:	e01d      	b.n	8001168 <doCellBalanceOneBMB+0x90>
        if (BMBData[BMBIndex].cellVoltages[i] - averageVoltage > 50) {
 800112c:	79fa      	ldrb	r2, [r7, #7]
 800112e:	8ab9      	ldrh	r1, [r7, #20]
 8001130:	4829      	ldr	r0, [pc, #164]	; (80011d8 <doCellBalanceOneBMB+0x100>)
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	440b      	add	r3, r1
 800113c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001140:	461a      	mov	r2, r3
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b32      	cmp	r3, #50	; 0x32
 8001148:	d90b      	bls.n	8001162 <doCellBalanceOneBMB+0x8a>
            cellsToBalance &= ~(1 << i);
 800114a:	8abb      	ldrh	r3, [r7, #20]
 800114c:	2201      	movs	r2, #1
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	b21b      	sxth	r3, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	b21a      	sxth	r2, r3
 8001158:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800115c:	4013      	ands	r3, r2
 800115e:	b21b      	sxth	r3, r3
 8001160:	82fb      	strh	r3, [r7, #22]
    for (uint16_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 8001162:	8abb      	ldrh	r3, [r7, #20]
 8001164:	3301      	adds	r3, #1
 8001166:	82bb      	strh	r3, [r7, #20]
 8001168:	8abb      	ldrh	r3, [r7, #20]
 800116a:	2b08      	cmp	r3, #8
 800116c:	d9de      	bls.n	800112c <doCellBalanceOneBMB+0x54>
    }

    //we have 9 bits, so split the cells into two 8 bit integers
    //LSB of the higher 8 bits is the 9th cell balancer
    uint8_t balanceCommands[2];
    balanceCommands[0] = 0xFF & cellsToBalance;
 800116e:	8afb      	ldrh	r3, [r7, #22]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	733b      	strb	r3, [r7, #12]
    balanceCommands[1] = (0xFF00 & cellsToBalance) >> 8;
 8001174:	8afb      	ldrh	r3, [r7, #22]
 8001176:	0a1b      	lsrs	r3, r3, #8
 8001178:	b29b      	uxth	r3, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	737b      	strb	r3, [r7, #13]

    //only send balance command when changing
    //otherwise, make sure all the balancing is OFF
    if (getState() == CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT) {
 800117e:	f001 fa8d 	bl	800269c <getState>
 8001182:	4603      	mov	r3, r0
 8001184:	2b09      	cmp	r3, #9
 8001186:	d111      	bne.n	80011ac <doCellBalanceOneBMB+0xd4>
        if (!i2c_cellBalance(BMBIndex, balanceCommands[0],
 8001188:	7b39      	ldrb	r1, [r7, #12]
 800118a:	7b7a      	ldrb	r2, [r7, #13]
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	4618      	mov	r0, r3
 8001190:	f001 f928 	bl	80023e4 <i2c_cellBalance>
 8001194:	4603      	mov	r3, r0
 8001196:	f083 0301 	eor.w	r3, r3, #1
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d016      	beq.n	80011ce <doCellBalanceOneBMB+0xf6>
                balanceCommands[1])) {
            BMBTimeoutCount[BMBIndex] = BMB_TIMEOUT;
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <doCellBalanceOneBMB+0x108>)
 80011a4:	2105      	movs	r1, #5
 80011a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    } else {
        if (!i2c_cellBalance(BMBIndex, 0, 0)) {
            BMBTimeoutCount[BMBIndex] = BMB_TIMEOUT;
        }
    }
}
 80011aa:	e010      	b.n	80011ce <doCellBalanceOneBMB+0xf6>
        if (!i2c_cellBalance(BMBIndex, 0, 0)) {
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f001 f916 	bl	80023e4 <i2c_cellBalance>
 80011b8:	4603      	mov	r3, r0
 80011ba:	f083 0301 	eor.w	r3, r3, #1
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d004      	beq.n	80011ce <doCellBalanceOneBMB+0xf6>
            BMBTimeoutCount[BMBIndex] = BMB_TIMEOUT;
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <doCellBalanceOneBMB+0x108>)
 80011c8:	2105      	movs	r1, #5
 80011ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80011ce:	bf00      	nop
 80011d0:	3720      	adds	r7, #32
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200001d8 	.word	0x200001d8
 80011dc:	38e38e39 	.word	0x38e38e39
 80011e0:	200012fc 	.word	0x200012fc

080011e4 <calculateOneBMB>:

// calculate all the values for a single BMB
// this does converting to voltage, converting to temp, calculating avg
void calculateOneBMB(uint8_t BMBIndex) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
    for(int mux = 0; mux < NUM_MUX_CHANNELS; mux++) {
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	e01a      	b.n	800122a <calculateOneBMB+0x46>
        for(int adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	e011      	b.n	800121e <calculateOneBMB+0x3a>
            // convert each bmb response to voltage or temperature
            updateBMBData(BMBADCResponse[mux][adc], adc, mux, BMBIndex);
 80011fa:	4910      	ldr	r1, [pc, #64]	; (800123c <calculateOneBMB+0x58>)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	00da      	lsls	r2, r3, #3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4413      	add	r3, r2
 8001204:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001208:	b298      	uxth	r0, r3
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	b2d9      	uxtb	r1, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f7ff fe58 	bl	8000ec8 <updateBMBData>
        for(int adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	3301      	adds	r3, #1
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	2b07      	cmp	r3, #7
 8001222:	ddea      	ble.n	80011fa <calculateOneBMB+0x16>
    for(int mux = 0; mux < NUM_MUX_CHANNELS; mux++) {
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	3301      	adds	r3, #1
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2b03      	cmp	r3, #3
 800122e:	dde1      	ble.n	80011f4 <calculateOneBMB+0x10>
        }
    }
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000208 	.word	0x20000208

08001240 <vBMBSampleTask>:


void vBMBSampleTask(void *pvParameters) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

	BMBInit();
 8001248:	f7ff feaa 	bl	8000fa0 <BMBInit>

	// Previous wake time pointer
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800124c:	f004 fc6c 	bl	8005b28 <xTaskGetTickCount>
 8001250:	4603      	mov	r3, r0
 8001252:	60bb      	str	r3, [r7, #8]
	vTaskDelayUntil(&xLastWakeTime, 50);
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	2132      	movs	r1, #50	; 0x32
 800125a:	4618      	mov	r0, r3
 800125c:	f004 faee 	bl	800583c <vTaskDelayUntil>

	while (1) {
		for (uint8_t BMBIndex = 0; BMBIndex < NUM_BMBS; BMBIndex++) {
 8001260:	2300      	movs	r3, #0
 8001262:	73fb      	strb	r3, [r7, #15]
 8001264:	e036      	b.n	80012d4 <vBMBSampleTask+0x94>
			//since we treat each BMB side as an individual bmb
			//we just check whether the current bmb index is odd/even
			//uint8_t BMBSide = BMBIndex % 2;
			uint8_t BMBSide = 1; // TODO: CHANGE THIS BACKs
 8001266:	2301      	movs	r3, #1
 8001268:	73bb      	strb	r3, [r7, #14]
			// our actual BMB number, the physical board
			uint8_t BMBNum = BMBIndex / 2;
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	085b      	lsrs	r3, r3, #1
 800126e:	737b      	strb	r3, [r7, #13]

			//Sample BMBs
			taskENTER_CRITICAL();
 8001270:	f005 f918 	bl	80064a4 <vPortEnterCritical>
			// Sample a single BMB (number and side fully)
			if (!sampleOneBMB(BMBIndex, BMBNum, BMBSide)) {
 8001274:	7bba      	ldrb	r2, [r7, #14]
 8001276:	7b79      	ldrb	r1, [r7, #13]
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fea6 	bl	8000fcc <sampleOneBMB>
 8001280:	4603      	mov	r3, r0
 8001282:	f083 0301 	eor.w	r3, r3, #1
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d00e      	beq.n	80012aa <vBMBSampleTask+0x6a>
				// there was an error, so reset mux
				if (!(i2c_disableI2CMux(BMBIndex))) {
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	4618      	mov	r0, r3
 8001290:	f000 ffaa 	bl	80021e8 <i2c_disableI2CMux>
 8001294:	4603      	mov	r3, r0
 8001296:	f083 0301 	eor.w	r3, r3, #1
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	d004      	beq.n	80012aa <vBMBSampleTask+0x6a>
					BMBTimeoutCount[BMBIndex] = BMB_TIMEOUT;
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	4a11      	ldr	r2, [pc, #68]	; (80012e8 <vBMBSampleTask+0xa8>)
 80012a4:	2105      	movs	r1, #5
 80012a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
			}
			taskEXIT_CRITICAL();
 80012aa:	f005 f925 	bl	80064f8 <vPortExitCritical>

			if(BMBTimeoutCount[BMBIndex] == BMB_TIMEOUT) {
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <vBMBSampleTask+0xa8>)
 80012b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	d008      	beq.n	80012cc <vBMBSampleTask+0x8c>
				// we had a timeout, continue onto next BMB
				continue;
			}

			// Calculate the values for this BMB
			calculateOneBMB(BMBIndex);
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff91 	bl	80011e4 <calculateOneBMB>

			doCellBalanceOneBMB(BMBIndex);
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff07 	bl	80010d8 <doCellBalanceOneBMB>
 80012ca:	e000      	b.n	80012ce <vBMBSampleTask+0x8e>
				continue;
 80012cc:	bf00      	nop
		for (uint8_t BMBIndex = 0; BMBIndex < NUM_BMBS; BMBIndex++) {
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	3301      	adds	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0c5      	beq.n	8001266 <vBMBSampleTask+0x26>

		} // end for loop
		vTaskDelayUntil(&xLastWakeTime, 3);
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	2103      	movs	r1, #3
 80012e0:	4618      	mov	r0, r3
 80012e2:	f004 faab 	bl	800583c <vTaskDelayUntil>
		for (uint8_t BMBIndex = 0; BMBIndex < NUM_BMBS; BMBIndex++) {
 80012e6:	e7bb      	b.n	8001260 <vBMBSampleTask+0x20>
 80012e8:	200012fc 	.word	0x200012fc

080012ec <getBMBMaxTempIndex>:
static int16_t linearTemp(uint16_t ADC_lt) {
	return (int16_t) ((-2 * ((int32_t) (uint32_t) ADC_lt)) / 117 + 860);
}

// Lookup functions
uint8_t getBMBMaxTempIndex(uint8_t bmb_index) {
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
	int16_t maxTemp = 0xFFFF;
 80012f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012fa:	81fb      	strh	r3, [r7, #14]
	uint8_t cell_index = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < TSENSE_CHANNELS_PER_BMB; i++) {
 8001300:	2300      	movs	r3, #0
 8001302:	733b      	strb	r3, [r7, #12]
 8001304:	e019      	b.n	800133a <getBMBMaxTempIndex+0x4e>
		int16_t temp = BMBData[bmb_index].cellTemperatures[i];
 8001306:	79fa      	ldrb	r2, [r7, #7]
 8001308:	7b39      	ldrb	r1, [r7, #12]
 800130a:	4811      	ldr	r0, [pc, #68]	; (8001350 <getBMBMaxTempIndex+0x64>)
 800130c:	4613      	mov	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	4413      	add	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	440b      	add	r3, r1
 8001316:	3308      	adds	r3, #8
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4403      	add	r3, r0
 800131c:	885b      	ldrh	r3, [r3, #2]
 800131e:	817b      	strh	r3, [r7, #10]
		if (temp > maxTemp) {
 8001320:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001324:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001328:	429a      	cmp	r2, r3
 800132a:	dd03      	ble.n	8001334 <getBMBMaxTempIndex+0x48>
			maxTemp = temp;
 800132c:	897b      	ldrh	r3, [r7, #10]
 800132e:	81fb      	strh	r3, [r7, #14]
			cell_index = i;
 8001330:	7b3b      	ldrb	r3, [r7, #12]
 8001332:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < TSENSE_CHANNELS_PER_BMB; i++) {
 8001334:	7b3b      	ldrb	r3, [r7, #12]
 8001336:	3301      	adds	r3, #1
 8001338:	733b      	strb	r3, [r7, #12]
 800133a:	7b3b      	ldrb	r3, [r7, #12]
 800133c:	2b0e      	cmp	r3, #14
 800133e:	d9e2      	bls.n	8001306 <getBMBMaxTempIndex+0x1a>
		}
	}
	return cell_index;
 8001340:	7b7b      	ldrb	r3, [r7, #13]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	200001d8 	.word	0x200001d8

08001354 <getBMBMinTempIndex>:

uint8_t getBMBMinTempIndex(uint8_t bmb_index) {
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
	int16_t minTemp = 0x7FFF;
 800135e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001362:	81fb      	strh	r3, [r7, #14]
	uint8_t cell_index = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < TSENSE_CHANNELS_PER_BMB; i++) {
 8001368:	2300      	movs	r3, #0
 800136a:	733b      	strb	r3, [r7, #12]
 800136c:	e019      	b.n	80013a2 <getBMBMinTempIndex+0x4e>
		int16_t temp = BMBData[bmb_index].cellTemperatures[i];
 800136e:	79fa      	ldrb	r2, [r7, #7]
 8001370:	7b39      	ldrb	r1, [r7, #12]
 8001372:	4811      	ldr	r0, [pc, #68]	; (80013b8 <getBMBMinTempIndex+0x64>)
 8001374:	4613      	mov	r3, r2
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	4413      	add	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	440b      	add	r3, r1
 800137e:	3308      	adds	r3, #8
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4403      	add	r3, r0
 8001384:	885b      	ldrh	r3, [r3, #2]
 8001386:	817b      	strh	r3, [r7, #10]
		if (temp < minTemp) {
 8001388:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800138c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001390:	429a      	cmp	r2, r3
 8001392:	da03      	bge.n	800139c <getBMBMinTempIndex+0x48>
			minTemp = temp;
 8001394:	897b      	ldrh	r3, [r7, #10]
 8001396:	81fb      	strh	r3, [r7, #14]
			cell_index = i;
 8001398:	7b3b      	ldrb	r3, [r7, #12]
 800139a:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < TSENSE_CHANNELS_PER_BMB; i++) {
 800139c:	7b3b      	ldrb	r3, [r7, #12]
 800139e:	3301      	adds	r3, #1
 80013a0:	733b      	strb	r3, [r7, #12]
 80013a2:	7b3b      	ldrb	r3, [r7, #12]
 80013a4:	2b0e      	cmp	r3, #14
 80013a6:	d9e2      	bls.n	800136e <getBMBMinTempIndex+0x1a>
		}
	}
	return cell_index;
 80013a8:	7b7b      	ldrb	r3, [r7, #13]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	200001d8 	.word	0x200001d8

080013bc <getBMBMaxVoltIndex>:

uint8_t getBMBMaxVoltIndex(uint8_t bmb_index) {
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
	uint16_t maxVoltage = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	81fb      	strh	r3, [r7, #14]
	uint8_t cell_index = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	733b      	strb	r3, [r7, #12]
 80013d2:	e015      	b.n	8001400 <getBMBMaxVoltIndex+0x44>
		uint16_t voltage = BMBData[bmb_index].cellVoltages[i];
 80013d4:	79fa      	ldrb	r2, [r7, #7]
 80013d6:	7b39      	ldrb	r1, [r7, #12]
 80013d8:	480e      	ldr	r0, [pc, #56]	; (8001414 <getBMBMaxVoltIndex+0x58>)
 80013da:	4613      	mov	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	4413      	add	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	440b      	add	r3, r1
 80013e4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80013e8:	817b      	strh	r3, [r7, #10]
		if (voltage > maxVoltage) {
 80013ea:	897a      	ldrh	r2, [r7, #10]
 80013ec:	89fb      	ldrh	r3, [r7, #14]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d903      	bls.n	80013fa <getBMBMaxVoltIndex+0x3e>
			maxVoltage = voltage;
 80013f2:	897b      	ldrh	r3, [r7, #10]
 80013f4:	81fb      	strh	r3, [r7, #14]
			cell_index = i;
 80013f6:	7b3b      	ldrb	r3, [r7, #12]
 80013f8:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 80013fa:	7b3b      	ldrb	r3, [r7, #12]
 80013fc:	3301      	adds	r3, #1
 80013fe:	733b      	strb	r3, [r7, #12]
 8001400:	7b3b      	ldrb	r3, [r7, #12]
 8001402:	2b08      	cmp	r3, #8
 8001404:	d9e6      	bls.n	80013d4 <getBMBMaxVoltIndex+0x18>
		}
	}
	return cell_index;
 8001406:	7b7b      	ldrb	r3, [r7, #13]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	200001d8 	.word	0x200001d8

08001418 <getBMBMinVoltIndex>:

uint8_t getBMBMinVoltIndex(uint8_t bmb_index) {
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
	uint16_t minVoltage = 0xFFFF;
 8001422:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001426:	81fb      	strh	r3, [r7, #14]
	uint8_t cell_index = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 800142c:	2300      	movs	r3, #0
 800142e:	733b      	strb	r3, [r7, #12]
 8001430:	e015      	b.n	800145e <getBMBMinVoltIndex+0x46>
		uint16_t voltage = BMBData[bmb_index].cellVoltages[i];
 8001432:	79fa      	ldrb	r2, [r7, #7]
 8001434:	7b39      	ldrb	r1, [r7, #12]
 8001436:	480f      	ldr	r0, [pc, #60]	; (8001474 <getBMBMinVoltIndex+0x5c>)
 8001438:	4613      	mov	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4413      	add	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	440b      	add	r3, r1
 8001442:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001446:	817b      	strh	r3, [r7, #10]
		if (voltage < minVoltage) {
 8001448:	897a      	ldrh	r2, [r7, #10]
 800144a:	89fb      	ldrh	r3, [r7, #14]
 800144c:	429a      	cmp	r2, r3
 800144e:	d203      	bcs.n	8001458 <getBMBMinVoltIndex+0x40>
			minVoltage = voltage;
 8001450:	897b      	ldrh	r3, [r7, #10]
 8001452:	81fb      	strh	r3, [r7, #14]
			cell_index = i;
 8001454:	7b3b      	ldrb	r3, [r7, #12]
 8001456:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 8001458:	7b3b      	ldrb	r3, [r7, #12]
 800145a:	3301      	adds	r3, #1
 800145c:	733b      	strb	r3, [r7, #12]
 800145e:	7b3b      	ldrb	r3, [r7, #12]
 8001460:	2b08      	cmp	r3, #8
 8001462:	d9e6      	bls.n	8001432 <getBMBMinVoltIndex+0x1a>
		}
	}
	return cell_index;
 8001464:	7b7b      	ldrb	r3, [r7, #13]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	200001d8 	.word	0x200001d8

08001478 <getBMBTemp>:

// Accessor Functions

int16_t getBMBTemp(uint8_t bmb_index, uint8_t cell_index) {
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	460a      	mov	r2, r1
 8001482:	71fb      	strb	r3, [r7, #7]
 8001484:	4613      	mov	r3, r2
 8001486:	71bb      	strb	r3, [r7, #6]
	return BMBData[bmb_index].cellTemperatures[cell_index];
 8001488:	79fa      	ldrb	r2, [r7, #7]
 800148a:	79b9      	ldrb	r1, [r7, #6]
 800148c:	4808      	ldr	r0, [pc, #32]	; (80014b0 <getBMBTemp+0x38>)
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	440b      	add	r3, r1
 8001498:	3308      	adds	r3, #8
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	4403      	add	r3, r0
 800149e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	200001d8 	.word	0x200001d8

080014b4 <getBMBVoltage>:

uint16_t getBMBVoltage(uint8_t bmb_index, uint8_t cell_index) {
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	460a      	mov	r2, r1
 80014be:	71fb      	strb	r3, [r7, #7]
 80014c0:	4613      	mov	r3, r2
 80014c2:	71bb      	strb	r3, [r7, #6]
	return BMBData[bmb_index].cellVoltages[cell_index];
 80014c4:	79fa      	ldrb	r2, [r7, #7]
 80014c6:	79b9      	ldrb	r1, [r7, #6]
 80014c8:	4806      	ldr	r0, [pc, #24]	; (80014e4 <getBMBVoltage+0x30>)
 80014ca:	4613      	mov	r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	440b      	add	r3, r1
 80014d4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	200001d8 	.word	0x200001d8

080014e8 <getPackMaxCellVoltage>:

uint16_t getPackMaxCellVoltage() {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
	uint16_t packMaxCellVoltage = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	80fb      	strh	r3, [r7, #6]
	uint16_t maxCellVoltage = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	807b      	strh	r3, [r7, #2]
	uint8_t maxCellVoltageIndex;

	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 80014f6:	2300      	movs	r3, #0
 80014f8:	717b      	strb	r3, [r7, #5]
 80014fa:	e019      	b.n	8001530 <getPackMaxCellVoltage+0x48>
		// find highest cell voltage on current BMB, update packMaxCellVoltage if needed
		maxCellVoltageIndex = getBMBMaxVoltIndex(bmb_index);
 80014fc:	797b      	ldrb	r3, [r7, #5]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ff5c 	bl	80013bc <getBMBMaxVoltIndex>
 8001504:	4603      	mov	r3, r0
 8001506:	707b      	strb	r3, [r7, #1]
		maxCellVoltage = BMBData[bmb_index].cellVoltages[maxCellVoltageIndex];
 8001508:	797a      	ldrb	r2, [r7, #5]
 800150a:	7879      	ldrb	r1, [r7, #1]
 800150c:	480c      	ldr	r0, [pc, #48]	; (8001540 <getPackMaxCellVoltage+0x58>)
 800150e:	4613      	mov	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4413      	add	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	440b      	add	r3, r1
 8001518:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800151c:	807b      	strh	r3, [r7, #2]

		if (maxCellVoltage > packMaxCellVoltage) {
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	88fb      	ldrh	r3, [r7, #6]
 8001522:	429a      	cmp	r2, r3
 8001524:	d901      	bls.n	800152a <getPackMaxCellVoltage+0x42>
			packMaxCellVoltage = maxCellVoltage;
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	80fb      	strh	r3, [r7, #6]
	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 800152a:	797b      	ldrb	r3, [r7, #5]
 800152c:	3301      	adds	r3, #1
 800152e:	717b      	strb	r3, [r7, #5]
 8001530:	797b      	ldrb	r3, [r7, #5]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0e2      	beq.n	80014fc <getPackMaxCellVoltage+0x14>
		}
	}

	return packMaxCellVoltage;
 8001536:	88fb      	ldrh	r3, [r7, #6]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200001d8 	.word	0x200001d8

08001544 <getPackMinCellVoltage>:

uint16_t getPackMinCellVoltage() {
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
	uint16_t packMinCellVoltage = UINT16_MAX;
 800154a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800154e:	80fb      	strh	r3, [r7, #6]
	uint16_t minCellVoltage = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	807b      	strh	r3, [r7, #2]
	uint8_t minCellVoltageIndex;

	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001554:	2300      	movs	r3, #0
 8001556:	717b      	strb	r3, [r7, #5]
 8001558:	e019      	b.n	800158e <getPackMinCellVoltage+0x4a>
		// find lowest cell temp on current BMB, update packMinCellVoltage if needed
		minCellVoltageIndex = getBMBMinVoltIndex(bmb_index);
 800155a:	797b      	ldrb	r3, [r7, #5]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff5b 	bl	8001418 <getBMBMinVoltIndex>
 8001562:	4603      	mov	r3, r0
 8001564:	707b      	strb	r3, [r7, #1]
		minCellVoltage = BMBData[bmb_index].cellVoltages[minCellVoltageIndex];
 8001566:	797a      	ldrb	r2, [r7, #5]
 8001568:	7879      	ldrb	r1, [r7, #1]
 800156a:	480d      	ldr	r0, [pc, #52]	; (80015a0 <getPackMinCellVoltage+0x5c>)
 800156c:	4613      	mov	r3, r2
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	4413      	add	r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	440b      	add	r3, r1
 8001576:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800157a:	807b      	strh	r3, [r7, #2]

		if (minCellVoltage < packMinCellVoltage) {
 800157c:	887a      	ldrh	r2, [r7, #2]
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	429a      	cmp	r2, r3
 8001582:	d201      	bcs.n	8001588 <getPackMinCellVoltage+0x44>
			packMinCellVoltage = minCellVoltage;
 8001584:	887b      	ldrh	r3, [r7, #2]
 8001586:	80fb      	strh	r3, [r7, #6]
	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001588:	797b      	ldrb	r3, [r7, #5]
 800158a:	3301      	adds	r3, #1
 800158c:	717b      	strb	r3, [r7, #5]
 800158e:	797b      	ldrb	r3, [r7, #5]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0e2      	beq.n	800155a <getPackMinCellVoltage+0x16>
		}
	}

	return packMinCellVoltage;
 8001594:	88fb      	ldrh	r3, [r7, #6]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200001d8 	.word	0x200001d8

080015a4 <getPackMaxCellTemp>:

uint16_t getPackMaxCellTemp() {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
	uint16_t packMaxCellTemp = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	80fb      	strh	r3, [r7, #6]
	uint16_t maxCellTemp = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	807b      	strh	r3, [r7, #2]
	uint8_t maxCellTempIndex;

	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 80015b2:	2300      	movs	r3, #0
 80015b4:	717b      	strb	r3, [r7, #5]
 80015b6:	e01c      	b.n	80015f2 <getPackMaxCellTemp+0x4e>
		// find highest cell temp on current BMB, update packMaxCellTemp if needed
		maxCellTempIndex = getBMBMaxTempIndex(bmb_index);
 80015b8:	797b      	ldrb	r3, [r7, #5]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fe96 	bl	80012ec <getBMBMaxTempIndex>
 80015c0:	4603      	mov	r3, r0
 80015c2:	707b      	strb	r3, [r7, #1]
		maxCellTemp = BMBData[bmb_index].cellTemperatures[maxCellTempIndex];
 80015c4:	797a      	ldrb	r2, [r7, #5]
 80015c6:	7879      	ldrb	r1, [r7, #1]
 80015c8:	480e      	ldr	r0, [pc, #56]	; (8001604 <getPackMaxCellTemp+0x60>)
 80015ca:	4613      	mov	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	440b      	add	r3, r1
 80015d4:	3308      	adds	r3, #8
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4403      	add	r3, r0
 80015da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015de:	807b      	strh	r3, [r7, #2]

		if (maxCellTemp > packMaxCellTemp) {
 80015e0:	887a      	ldrh	r2, [r7, #2]
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d901      	bls.n	80015ec <getPackMaxCellTemp+0x48>
			packMaxCellTemp = maxCellTemp;
 80015e8:	887b      	ldrh	r3, [r7, #2]
 80015ea:	80fb      	strh	r3, [r7, #6]
	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 80015ec:	797b      	ldrb	r3, [r7, #5]
 80015ee:	3301      	adds	r3, #1
 80015f0:	717b      	strb	r3, [r7, #5]
 80015f2:	797b      	ldrb	r3, [r7, #5]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0df      	beq.n	80015b8 <getPackMaxCellTemp+0x14>
		}
	}

	return packMaxCellTemp;
 80015f8:	88fb      	ldrh	r3, [r7, #6]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200001d8 	.word	0x200001d8

08001608 <getBattMillivolts>:

BMB_Data_t* getBMBData(uint8_t bmb_index) {
	return &(BMBData[bmb_index]);
}

int32_t getBattMillivolts() {
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
	int32_t totalPackCellVoltage = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]

	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001612:	2300      	movs	r3, #0
 8001614:	70fb      	strb	r3, [r7, #3]
 8001616:	e019      	b.n	800164c <getBattMillivolts+0x44>
		for (uint8_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 8001618:	2300      	movs	r3, #0
 800161a:	70bb      	strb	r3, [r7, #2]
 800161c:	e010      	b.n	8001640 <getBattMillivolts+0x38>
			totalPackCellVoltage +=
					(int32_t) BMBData[bmb_index].cellVoltages[i];
 800161e:	78fa      	ldrb	r2, [r7, #3]
 8001620:	78b9      	ldrb	r1, [r7, #2]
 8001622:	480f      	ldr	r0, [pc, #60]	; (8001660 <getBattMillivolts+0x58>)
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	440b      	add	r3, r1
 800162e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001632:	461a      	mov	r2, r3
			totalPackCellVoltage +=
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4413      	add	r3, r2
 8001638:	607b      	str	r3, [r7, #4]
		for (uint8_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 800163a:	78bb      	ldrb	r3, [r7, #2]
 800163c:	3301      	adds	r3, #1
 800163e:	70bb      	strb	r3, [r7, #2]
 8001640:	78bb      	ldrb	r3, [r7, #2]
 8001642:	2b08      	cmp	r3, #8
 8001644:	d9eb      	bls.n	800161e <getBattMillivolts+0x16>
	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001646:	78fb      	ldrb	r3, [r7, #3]
 8001648:	3301      	adds	r3, #1
 800164a:	70fb      	strb	r3, [r7, #3]
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0e2      	beq.n	8001618 <getBattMillivolts+0x10>
		}
	}

	return totalPackCellVoltage;
 8001652:	687b      	ldr	r3, [r7, #4]
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	200001d8 	.word	0x200001d8

08001664 <adcInit>:
static cmr_adc_t adc;

/**
 * @brief Initializes the ADC interface.
 */
void adcInit(void) {
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
    // ADC initialization and channel configuration.
    cmr_adcInit(
 8001668:	2305      	movs	r3, #5
 800166a:	4a03      	ldr	r2, [pc, #12]	; (8001678 <adcInit+0x14>)
 800166c:	4903      	ldr	r1, [pc, #12]	; (800167c <adcInit+0x18>)
 800166e:	4804      	ldr	r0, [pc, #16]	; (8001680 <adcInit+0x1c>)
 8001670:	f001 fb68 	bl	8002d44 <cmr_adcInit>
        &adc, ADC1,
        adcChannels, sizeof(adcChannels) / sizeof(adcChannels[0])
    );
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000020 	.word	0x20000020
 800167c:	40012000 	.word	0x40012000
 8001680:	2000024c 	.word	0x2000024c

08001684 <adcRead>:

/**
 * @brief Returns the current value of an ADC channel.
 */
uint32_t adcRead(adcChannels_t ch) {
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
    return adcChannels[ch].value;
 800168e:	79fa      	ldrb	r2, [r7, #7]
 8001690:	4906      	ldr	r1, [pc, #24]	; (80016ac <adcRead+0x28>)
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	3310      	adds	r3, #16
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	20000020 	.word	0x20000020

080016b0 <checkErrors>:

// Persistent value for storing the error type. Will be useful if
// error checking becomes its own task
static cmr_canHVCError_t errorRegister = CMR_CAN_HVC_STATE_ERROR;

cmr_canHVCError_t checkErrors(cmr_canHVCState_t currentState){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
    cmr_canHVCError_t errorFlags = CMR_CAN_HVC_ERROR_NONE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	81fb      	strh	r3, [r7, #14]
    if(checkCommandTimeout()) {
 80016be:	f000 f8ab 	bl	8001818 <checkCommandTimeout>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <checkErrors+0x20>
        // TODO E1 check the timeout field of the command message meta data
        errorFlags |= CMR_CAN_HVC_ERROR_CAN_TIMEOUT;
 80016c8:	89fb      	ldrh	r3, [r7, #14]
 80016ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ce:	81fb      	strh	r3, [r7, #14]
    }
    if(checkBMBTimeout()) {
 80016d0:	f000 f8b6 	bl	8001840 <checkBMBTimeout>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <checkErrors+0x32>
        // TODO E2 devise a UART monitor system
        errorFlags |= CMR_CAN_HVC_ERROR_BMB_TIMEOUT; /**< @brief BMB has timed out. */
 80016da:	89fb      	ldrh	r3, [r7, #14]
 80016dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e0:	81fb      	strh	r3, [r7, #14]
    }
    if(getPackMaxCellTemp() > 590) { // Temp limit of 59C
 80016e2:	f7ff ff5f 	bl	80015a4 <getPackMaxCellTemp>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	f240 234e 	movw	r3, #590	; 0x24e
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d903      	bls.n	80016fa <checkErrors+0x4a>
        // TODO: #Define with 590
        // TODO E3 create structures for cell temp data and stats (min/max)
        errorFlags |= CMR_CAN_HVC_ERROR_CELL_OVERTEMP;
 80016f2:	89fb      	ldrh	r3, [r7, #14]
 80016f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f8:	81fb      	strh	r3, [r7, #14]
    }
    if(getPackMaxCellVoltage() > 4175) { // Cell voltage limit of 4175
 80016fa:	f7ff fef5 	bl	80014e8 <getPackMaxCellVoltage>
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	f241 034f 	movw	r3, #4175	; 0x104f
 8001706:	429a      	cmp	r2, r3
 8001708:	d903      	bls.n	8001712 <checkErrors+0x62>
        // TODO E4 create structures for cell voltage data and stats (min/max)
        errorFlags |= CMR_CAN_HVC_ERROR_CELL_OVERVOLT;
 800170a:	89fb      	ldrh	r3, [r7, #14]
 800170c:	f043 0320 	orr.w	r3, r3, #32
 8001710:	81fb      	strh	r3, [r7, #14]
    }
    if(getPackMinCellVoltage() < 2400) {
 8001712:	f7ff ff17 	bl	8001544 <getPackMinCellVoltage>
 8001716:	4603      	mov	r3, r0
 8001718:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 800171c:	d203      	bcs.n	8001726 <checkErrors+0x76>
        // TODO E5 create structures for cell voltage data and stats (min/max)
        errorFlags |= CMR_CAN_HVC_ERROR_CELL_UNDERVOLT;
 800171e:	89fb      	ldrh	r3, [r7, #14]
 8001720:	f043 0310 	orr.w	r3, r3, #16
 8001724:	81fb      	strh	r3, [r7, #14]
    }
    if((getBattMillivolts()) > maxPackVoltageMV) {
 8001726:	f7ff ff6f 	bl	8001608 <getBattMillivolts>
 800172a:	4603      	mov	r3, r0
 800172c:	4a26      	ldr	r2, [pc, #152]	; (80017c8 <checkErrors+0x118>)
 800172e:	4293      	cmp	r3, r2
 8001730:	dd03      	ble.n	800173a <checkErrors+0x8a>
        // E6
        errorFlags |= CMR_CAN_HVC_ERROR_PACK_OVERVOLT;
 8001732:	89fb      	ldrh	r3, [r7, #14]
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	81fb      	strh	r3, [r7, #14]
    }
    if((getBattMillivolts()) < minPackVoltageMV) {
 800173a:	f7ff ff65 	bl	8001608 <getBattMillivolts>
 800173e:	4603      	mov	r3, r0
 8001740:	4a22      	ldr	r2, [pc, #136]	; (80017cc <checkErrors+0x11c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	da03      	bge.n	800174e <checkErrors+0x9e>
        // E7
        errorFlags |= CMR_CAN_HVC_ERROR_PACK_UNDERVOLT;
 8001746:	89fb      	ldrh	r3, [r7, #14]
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	81fb      	strh	r3, [r7, #14]
    }
//    if(getCurrentAverage() > maxPackCurrentAverageMA) {
//        // E9
//        errorFlags |= CMR_CAN_HVC_ERROR_PACK_OVERCURRENT;
//    }
    if(checkRelayPowerFault() && (getState() != CMR_CAN_HVC_STATE_ERROR && getState() != CMR_CAN_HVC_STATE_CLEAR_ERROR)) {//(getRelayStatus() & 0xAA) != 0xAA) {
 800174e:	f000 f979 	bl	8001a44 <checkRelayPowerFault>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d006      	beq.n	8001766 <checkErrors+0xb6>
 8001758:	f000 ffa0 	bl	800269c <getState>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <checkErrors+0xb6>
 8001762:	f000 ff9b 	bl	800269c <getState>
        // TODO look into the AIR_Fault_L signal, it might be necessary to confirm this is not active
        // before looking at relay status, otherwise we could be in dead lock trying to clear errors.
        //errorFlags |= BMS_ERROR_CODE_RELAY;
    }

    if(
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	2b03      	cmp	r3, #3
 800176a:	d014      	beq.n	8001796 <checkErrors+0xe6>
    	(currentState == CMR_CAN_HVC_STATE_DRIVE_PRECHARGE ||
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	2b04      	cmp	r3, #4
 8001770:	d011      	beq.n	8001796 <checkErrors+0xe6>
        currentState == CMR_CAN_HVC_STATE_DRIVE_PRECHARGE_COMPLETE ||
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	2b05      	cmp	r3, #5
 8001776:	d00e      	beq.n	8001796 <checkErrors+0xe6>
        currentState == CMR_CAN_HVC_STATE_DRIVE ||
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2b06      	cmp	r3, #6
 800177c:	d00b      	beq.n	8001796 <checkErrors+0xe6>
        currentState == CMR_CAN_HVC_STATE_CHARGE_PRECHARGE ||
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	2b07      	cmp	r3, #7
 8001782:	d008      	beq.n	8001796 <checkErrors+0xe6>
        currentState == CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE ||
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	2b08      	cmp	r3, #8
 8001788:	d005      	beq.n	8001796 <checkErrors+0xe6>
        currentState == CMR_CAN_HVC_STATE_CHARGE_TRICKLE ||
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	2b09      	cmp	r3, #9
 800178e:	d002      	beq.n	8001796 <checkErrors+0xe6>
        currentState == CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT ||
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	2b0a      	cmp	r3, #10
 8001794:	d109      	bne.n	80017aa <checkErrors+0xfa>
        currentState == CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE) &&
        (cmr_gpioRead(SAFETY_BINARY) == 0)) {
 8001796:	200a      	movs	r0, #10
 8001798:	f002 fb78 	bl	8003e8c <cmr_gpioRead>
 800179c:	4603      	mov	r3, r0
        currentState == CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE) &&
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d103      	bne.n	80017aa <checkErrors+0xfa>
        // E11
        // If SC voltage is below 8v while we're trying to drive relays, throw an error.
        errorFlags |= CMR_CAN_HVC_ERROR_LV_UNDERVOLT;
 80017a2:	89fb      	ldrh	r3, [r7, #14]
 80017a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017a8:	81fb      	strh	r3, [r7, #14]
    }

    // Cut relay power if we have an error
    if (errorFlags != CMR_CAN_HVC_ERROR_NONE) {
 80017aa:	89fb      	ldrh	r3, [r7, #14]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <checkErrors+0x108>
        cmr_gpioWrite(GPIO_BMB_FAULT_L, 0);
 80017b0:	2100      	movs	r1, #0
 80017b2:	2003      	movs	r0, #3
 80017b4:	f002 faf4 	bl	8003da0 <cmr_gpioWrite>
    }
    errorRegister = errorFlags;
 80017b8:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <checkErrors+0x120>)
 80017ba:	89fb      	ldrh	r3, [r7, #14]
 80017bc:	8013      	strh	r3, [r2, #0]
    
    return errorFlags;
 80017be:	89fb      	ldrh	r3, [r7, #14]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	000927c0 	.word	0x000927c0
 80017cc:	00057e40 	.word	0x00057e40
 80017d0:	20001300 	.word	0x20001300

080017d4 <clearHardwareFault>:

void clearHardwareFault(bool assertClear) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
    // Set GPIO pin low (asserted) if
    // assertClear, high (deasserted) otherwise
    if (assertClear) {
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d004      	beq.n	80017ee <clearHardwareFault+0x1a>
        cmr_gpioWrite(GPIO_CLEAR_FAULT_L, 0);
 80017e4:	2100      	movs	r1, #0
 80017e6:	2004      	movs	r0, #4
 80017e8:	f002 fada 	bl	8003da0 <cmr_gpioWrite>
    } else {
        cmr_gpioWrite(GPIO_CLEAR_FAULT_L, 1);
    }
}
 80017ec:	e003      	b.n	80017f6 <clearHardwareFault+0x22>
        cmr_gpioWrite(GPIO_CLEAR_FAULT_L, 1);
 80017ee:	2101      	movs	r1, #1
 80017f0:	2004      	movs	r0, #4
 80017f2:	f002 fad5 	bl	8003da0 <cmr_gpioWrite>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <clearErrorReg>:


void clearErrorReg() {
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
    errorRegister = CMR_CAN_HVC_ERROR_NONE;
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <clearErrorReg+0x14>)
 8001806:	2200      	movs	r2, #0
 8001808:	801a      	strh	r2, [r3, #0]
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	20001300 	.word	0x20001300

08001818 <checkCommandTimeout>:

cmr_canHVCError_t getErrorReg(){
    return errorRegister;
}

static bool checkCommandTimeout() {
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
    // CAN error if HVC Command has timed out after 50ms
    // TODO: latch can error?
    TickType_t lastWakeTime = xTaskGetTickCount();
 800181e:	f004 f983 	bl	8005b28 <xTaskGetTickCount>
 8001822:	6078      	str	r0, [r7, #4]
    bool hvc_commmand_error = (cmr_canRXMetaTimeoutError(&(canRXMeta[CANRX_HVC_COMMAND]), lastWakeTime) < 0);
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <checkCommandTimeout+0x24>)
 8001828:	f001 fba7 	bl	8002f7a <cmr_canRXMetaTimeoutError>
 800182c:	4603      	mov	r3, r0
 800182e:	0fdb      	lsrs	r3, r3, #31
 8001830:	70fb      	strb	r3, [r7, #3]

	return hvc_commmand_error;
 8001832:	78fb      	ldrb	r3, [r7, #3]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200000a4 	.word	0x200000a4

08001840 <checkBMBTimeout>:

static bool checkBMBTimeout() {
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_BMBS; i++) {
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	e00a      	b.n	8001862 <checkBMBTimeout+0x22>
        if (BMBTimeoutCount[i] >= BMB_TIMEOUT) {
 800184c:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <checkBMBTimeout+0x38>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001854:	2b04      	cmp	r3, #4
 8001856:	dd01      	ble.n	800185c <checkBMBTimeout+0x1c>
            return true;
 8001858:	2301      	movs	r3, #1
 800185a:	e006      	b.n	800186a <checkBMBTimeout+0x2a>
    for (int i = 0; i < NUM_BMBS; i++) {
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3301      	adds	r3, #1
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	ddf1      	ble.n	800184c <checkBMBTimeout+0xc>
        }
    }
    return false;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	200012fc 	.word	0x200012fc

0800187c <setRelay>:
void relaySetup() {
    // Discharge relay is default closed, initialize pin accordingly
    relayUsageVector = RELAY_CONTACTOR_MASK << DISCHARGE_RELAY;
}

uint8_t setRelay(BMS_relay_t relay, BMS_relay_state_t state) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	460a      	mov	r2, r1
 8001886:	71fb      	strb	r3, [r7, #7]
 8001888:	4613      	mov	r3, r2
 800188a:	71bb      	strb	r3, [r7, #6]
    
    switch (relay) {
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	2b03      	cmp	r3, #3
 8001890:	f200 80a6 	bhi.w	80019e0 <setRelay+0x164>
 8001894:	a201      	add	r2, pc, #4	; (adr r2, 800189c <setRelay+0x20>)
 8001896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189a:	bf00      	nop
 800189c:	0800199d 	.word	0x0800199d
 80018a0:	0800194d 	.word	0x0800194d
 80018a4:	080018fd 	.word	0x080018fd
 80018a8:	080018ad 	.word	0x080018ad
        case AIR_POS_RELAY:
            if (state == OPEN) {
 80018ac:	79bb      	ldrb	r3, [r7, #6]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d113      	bne.n	80018da <setRelay+0x5e>
                relayUsageVector &= ~(RELAY_CONTACTOR_MASK << AIR_POS_RELAY);
 80018b2:	2301      	movs	r3, #1
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	b25a      	sxtb	r2, r3
 80018be:	4b56      	ldr	r3, [pc, #344]	; (8001a18 <setRelay+0x19c>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	4013      	ands	r3, r2
 80018c8:	b25b      	sxtb	r3, r3
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	4b52      	ldr	r3, [pc, #328]	; (8001a18 <setRelay+0x19c>)
 80018ce:	701a      	strb	r2, [r3, #0]
                cmr_gpioWrite(GPIO_AIR_POSITIVE_EN, 0);
 80018d0:	2100      	movs	r1, #0
 80018d2:	2008      	movs	r0, #8
 80018d4:	f002 fa64 	bl	8003da0 <cmr_gpioWrite>
            } else {
                // Close relay
                relayUsageVector |= RELAY_CONTACTOR_MASK << AIR_POS_RELAY;
                cmr_gpioWrite(GPIO_AIR_POSITIVE_EN, 1);
            }
            break;
 80018d8:	e096      	b.n	8001a08 <setRelay+0x18c>
                relayUsageVector |= RELAY_CONTACTOR_MASK << AIR_POS_RELAY;
 80018da:	2301      	movs	r3, #1
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	b25a      	sxtb	r2, r3
 80018e0:	4b4d      	ldr	r3, [pc, #308]	; (8001a18 <setRelay+0x19c>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	b25b      	sxtb	r3, r3
 80018e8:	4313      	orrs	r3, r2
 80018ea:	b25b      	sxtb	r3, r3
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b4a      	ldr	r3, [pc, #296]	; (8001a18 <setRelay+0x19c>)
 80018f0:	701a      	strb	r2, [r3, #0]
                cmr_gpioWrite(GPIO_AIR_POSITIVE_EN, 1);
 80018f2:	2101      	movs	r1, #1
 80018f4:	2008      	movs	r0, #8
 80018f6:	f002 fa53 	bl	8003da0 <cmr_gpioWrite>
            break;
 80018fa:	e085      	b.n	8001a08 <setRelay+0x18c>
        case AIR_NEG_RELAY:
            if (state == OPEN) {
 80018fc:	79bb      	ldrb	r3, [r7, #6]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d113      	bne.n	800192a <setRelay+0xae>
                relayUsageVector &= ~(RELAY_CONTACTOR_MASK << AIR_NEG_RELAY);
 8001902:	2301      	movs	r3, #1
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	b2db      	uxtb	r3, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	b2db      	uxtb	r3, r3
 800190c:	b25a      	sxtb	r2, r3
 800190e:	4b42      	ldr	r3, [pc, #264]	; (8001a18 <setRelay+0x19c>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	b25b      	sxtb	r3, r3
 8001916:	4013      	ands	r3, r2
 8001918:	b25b      	sxtb	r3, r3
 800191a:	b2da      	uxtb	r2, r3
 800191c:	4b3e      	ldr	r3, [pc, #248]	; (8001a18 <setRelay+0x19c>)
 800191e:	701a      	strb	r2, [r3, #0]
                cmr_gpioWrite(GPIO_AIR_NEGATIVE_EN, 0);
 8001920:	2100      	movs	r1, #0
 8001922:	2009      	movs	r0, #9
 8001924:	f002 fa3c 	bl	8003da0 <cmr_gpioWrite>
            } else {
                // Close relay
                relayUsageVector |= RELAY_CONTACTOR_MASK << AIR_NEG_RELAY;
                cmr_gpioWrite(GPIO_AIR_NEGATIVE_EN, 1);
            }
            break;
 8001928:	e06e      	b.n	8001a08 <setRelay+0x18c>
                relayUsageVector |= RELAY_CONTACTOR_MASK << AIR_NEG_RELAY;
 800192a:	2301      	movs	r3, #1
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	b25a      	sxtb	r2, r3
 8001930:	4b39      	ldr	r3, [pc, #228]	; (8001a18 <setRelay+0x19c>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	b25b      	sxtb	r3, r3
 8001938:	4313      	orrs	r3, r2
 800193a:	b25b      	sxtb	r3, r3
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <setRelay+0x19c>)
 8001940:	701a      	strb	r2, [r3, #0]
                cmr_gpioWrite(GPIO_AIR_NEGATIVE_EN, 1);
 8001942:	2101      	movs	r1, #1
 8001944:	2009      	movs	r0, #9
 8001946:	f002 fa2b 	bl	8003da0 <cmr_gpioWrite>
            break;
 800194a:	e05d      	b.n	8001a08 <setRelay+0x18c>
        case PRECHARGE_RELAY:
            if (state == OPEN) {
 800194c:	79bb      	ldrb	r3, [r7, #6]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d113      	bne.n	800197a <setRelay+0xfe>
                relayUsageVector &= ~(RELAY_CONTACTOR_MASK << PRECHARGE_RELAY);
 8001952:	2301      	movs	r3, #1
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	b2db      	uxtb	r3, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	b2db      	uxtb	r3, r3
 800195c:	b25a      	sxtb	r2, r3
 800195e:	4b2e      	ldr	r3, [pc, #184]	; (8001a18 <setRelay+0x19c>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	b25b      	sxtb	r3, r3
 8001966:	4013      	ands	r3, r2
 8001968:	b25b      	sxtb	r3, r3
 800196a:	b2da      	uxtb	r2, r3
 800196c:	4b2a      	ldr	r3, [pc, #168]	; (8001a18 <setRelay+0x19c>)
 800196e:	701a      	strb	r2, [r3, #0]
                cmr_gpioWrite(GPIO_PRECHARGE_EN, 0);
 8001970:	2100      	movs	r1, #0
 8001972:	2007      	movs	r0, #7
 8001974:	f002 fa14 	bl	8003da0 <cmr_gpioWrite>
            } else {
                // Close relay
                relayUsageVector |= RELAY_CONTACTOR_MASK << PRECHARGE_RELAY;
                cmr_gpioWrite(GPIO_PRECHARGE_EN, 1);
            }
            break;
 8001978:	e046      	b.n	8001a08 <setRelay+0x18c>
                relayUsageVector |= RELAY_CONTACTOR_MASK << PRECHARGE_RELAY;
 800197a:	2301      	movs	r3, #1
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	b25a      	sxtb	r2, r3
 8001980:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <setRelay+0x19c>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	b25b      	sxtb	r3, r3
 8001988:	4313      	orrs	r3, r2
 800198a:	b25b      	sxtb	r3, r3
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <setRelay+0x19c>)
 8001990:	701a      	strb	r2, [r3, #0]
                cmr_gpioWrite(GPIO_PRECHARGE_EN, 1);
 8001992:	2101      	movs	r1, #1
 8001994:	2007      	movs	r0, #7
 8001996:	f002 fa03 	bl	8003da0 <cmr_gpioWrite>
            break;
 800199a:	e035      	b.n	8001a08 <setRelay+0x18c>
        case DISCHARGE_RELAY:
            if (state == OPEN) {
 800199c:	79bb      	ldrb	r3, [r7, #6]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d111      	bne.n	80019c6 <setRelay+0x14a>
                relayUsageVector &= ~(RELAY_CONTACTOR_MASK << DISCHARGE_RELAY);
 80019a2:	2301      	movs	r3, #1
 80019a4:	b25b      	sxtb	r3, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	b25a      	sxtb	r2, r3
 80019aa:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <setRelay+0x19c>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	4013      	ands	r3, r2
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <setRelay+0x19c>)
 80019ba:	701a      	strb	r2, [r3, #0]
                // Discharge relay is default close, set high pin to open
                cmr_gpioWrite(GPIO_DISCHARGE_EN, 1);
 80019bc:	2101      	movs	r1, #1
 80019be:	2006      	movs	r0, #6
 80019c0:	f002 f9ee 	bl	8003da0 <cmr_gpioWrite>
            } else {
                // Close relay
                relayUsageVector |= RELAY_CONTACTOR_MASK << DISCHARGE_RELAY;
                cmr_gpioWrite(GPIO_DISCHARGE_EN, 0);
            }
            break;
 80019c4:	e020      	b.n	8001a08 <setRelay+0x18c>
                relayUsageVector |= RELAY_CONTACTOR_MASK << DISCHARGE_RELAY;
 80019c6:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <setRelay+0x19c>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2201      	movs	r2, #1
 80019ce:	4313      	orrs	r3, r2
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <setRelay+0x19c>)
 80019d4:	701a      	strb	r2, [r3, #0]
                cmr_gpioWrite(GPIO_DISCHARGE_EN, 0);
 80019d6:	2100      	movs	r1, #0
 80019d8:	2006      	movs	r0, #6
 80019da:	f002 f9e1 	bl	8003da0 <cmr_gpioWrite>
            break;
 80019de:	e013      	b.n	8001a08 <setRelay+0x18c>
        default:
            // Error, open relays
            cmr_gpioWrite(GPIO_AIR_POSITIVE_EN, 0);
 80019e0:	2100      	movs	r1, #0
 80019e2:	2008      	movs	r0, #8
 80019e4:	f002 f9dc 	bl	8003da0 <cmr_gpioWrite>
            cmr_gpioWrite(GPIO_AIR_NEGATIVE_EN, 0);
 80019e8:	2100      	movs	r1, #0
 80019ea:	2009      	movs	r0, #9
 80019ec:	f002 f9d8 	bl	8003da0 <cmr_gpioWrite>
            cmr_gpioWrite(GPIO_PRECHARGE_EN, 0);
 80019f0:	2100      	movs	r1, #0
 80019f2:	2007      	movs	r0, #7
 80019f4:	f002 f9d4 	bl	8003da0 <cmr_gpioWrite>
            cmr_gpioWrite(GPIO_DISCHARGE_EN, 1);
 80019f8:	2101      	movs	r1, #1
 80019fa:	2006      	movs	r0, #6
 80019fc:	f002 f9d0 	bl	8003da0 <cmr_gpioWrite>
            relayUsageVector = RELAY_CONTACTOR_MASK << DISCHARGE_RELAY;
 8001a00:	2201      	movs	r2, #1
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <setRelay+0x19c>)
 8001a04:	701a      	strb	r2, [r3, #0]
            break;
 8001a06:	bf00      	nop
    }
    
    return relayUsageVector;
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <setRelay+0x19c>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	b2db      	uxtb	r3, r3
    
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20001302 	.word	0x20001302

08001a1c <getRelayStatus>:

uint8_t getRelayStatus(){
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
    // Status pin is high for OK, low for FAULT
    uint8_t relayStatusVector = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	71fb      	strb	r3, [r7, #7]

	// AIR status feedback functionality removed

    return relayUsageVector | relayStatusVector;
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <getRelayStatus+0x24>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	b2db      	uxtb	r3, r3
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20001302 	.word	0x20001302

08001a44 <checkRelayPowerFault>:

bool checkRelayPowerFault() {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
    return !cmr_gpioRead(GPIO_AIR_FAULT_L);
 8001a48:	2005      	movs	r0, #5
 8001a4a:	f002 fa1f 	bl	8003e8c <cmr_gpioRead>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	bf0c      	ite	eq
 8001a54:	2301      	moveq	r3, #1
 8001a56:	2300      	movne	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <canTX1Hz>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void canTX1Hz(void *pvParameters) {
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b084      	sub	sp, #16
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    TickType_t lastWakeTime = xTaskGetTickCount();
 8001a66:	f004 f85f 	bl	8005b28 <xTaskGetTickCount>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	60bb      	str	r3, [r7, #8]
    while (1) {

        // BMB Temperature Status 
        for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001a6e:	2300      	movs	r3, #0
 8001a70:	73fb      	strb	r3, [r7, #15]
 8001a72:	e006      	b.n	8001a82 <canTX1Hz+0x24>
            sendBMSBMBStatusTemp(bmb_index);
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 f9af 	bl	8001dda <sendBMSBMBStatusTemp>
        for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	73fb      	strb	r3, [r7, #15]
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f5      	beq.n	8001a74 <canTX1Hz+0x16>
        }
        sendBMSMinMaxCellTemp();
 8001a88:	f000 fa3a 	bl	8001f00 <sendBMSMinMaxCellTemp>

        sendAllBMBVoltages();
 8001a8c:	f000 facc 	bl	8002028 <sendAllBMBVoltages>

        vTaskDelayUntil(&lastWakeTime, canTX1Hz_period_ms);
 8001a90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a94:	f107 0308 	add.w	r3, r7, #8
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 fece 	bl	800583c <vTaskDelayUntil>
        for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001aa0:	e7e5      	b.n	8001a6e <canTX1Hz+0x10>

08001aa2 <canTX10Hz>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void canTX10Hz(void *pvParameters) {
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    TickType_t lastWakeTime = xTaskGetTickCount();
 8001aaa:	f004 f83d 	bl	8005b28 <xTaskGetTickCount>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	60bb      	str	r3, [r7, #8]
    while (1) {
        // BRUSA Charger decided by state machine 
        // sendBRUSAChargerControl();

        // BMB Voltage Status 
        for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	73fb      	strb	r3, [r7, #15]
 8001ab6:	e006      	b.n	8001ac6 <canTX10Hz+0x24>
            sendBMSBMBStatusVoltage(bmb_index);
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 f953 	bl	8001d66 <sendBMSBMBStatusVoltage>
        for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	73fb      	strb	r3, [r7, #15]
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f5      	beq.n	8001ab8 <canTX10Hz+0x16>
        }
        sendBMSMinMaxCellVoltage();
 8001acc:	f000 f9c0 	bl	8001e50 <sendBMSMinMaxCellVoltage>

        vTaskDelayUntil(&lastWakeTime, canTX10Hz_period_ms);
 8001ad0:	2264      	movs	r2, #100	; 0x64
 8001ad2:	f107 0308 	add.w	r3, r7, #8
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f003 feaf 	bl	800583c <vTaskDelayUntil>
        for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001ade:	e7e8      	b.n	8001ab2 <canTX10Hz+0x10>

08001ae0 <canTX100Hz>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void canTX100Hz(void *pvParameters) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

//    cmr_canRXMeta_t *heartbeatVSMMeta = canRXMeta + CANRX_HEARTBEAT_VSM;
//    volatile cmr_canHeartbeat_t *heartbeatVSM =
//        (void *) heartbeatVSMMeta->payload;

    TickType_t lastWakeTime = xTaskGetTickCount();
 8001ae8:	f004 f81e 	bl	8005b28 <xTaskGetTickCount>
 8001aec:	4603      	mov	r3, r0
 8001aee:	60fb      	str	r3, [r7, #12]
    while (1) {
        sendHeartbeat(lastWakeTime);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 f89a 	bl	8001c2c <sendHeartbeat>
        sendHVCPackVoltage();
 8001af8:	f000 f906 	bl	8001d08 <sendHVCPackVoltage>
        sendBMSPackCurrent();
 8001afc:	f000 f91c 	bl	8001d38 <sendBMSPackCurrent>
        sendBMSLowVoltage();
 8001b00:	f000 fa56 	bl	8001fb0 <sendBMSLowVoltage>

        vTaskDelayUntil(&lastWakeTime, canTX100Hz_period_ms);
 8001b04:	220a      	movs	r2, #10
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f003 fe95 	bl	800583c <vTaskDelayUntil>
        sendHeartbeat(lastWakeTime);
 8001b12:	e7ed      	b.n	8001af0 <canTX100Hz+0x10>

08001b14 <canInit>:
}

/**
 * @brief Initializes the CAN interface.
 */
void canInit(void) {
 8001b14:	b590      	push	{r4, r7, lr}
 8001b16:	b08b      	sub	sp, #44	; 0x2c
 8001b18:	af06      	add	r7, sp, #24
    // CAN2 initialization.
    cmr_canInit(
 8001b1a:	2340      	movs	r3, #64	; 0x40
 8001b1c:	9305      	str	r3, [sp, #20]
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <canInit+0x78>)
 8001b20:	9304      	str	r3, [sp, #16]
 8001b22:	2320      	movs	r3, #32
 8001b24:	9303      	str	r3, [sp, #12]
 8001b26:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <canInit+0x78>)
 8001b28:	9302      	str	r3, [sp, #8]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	9301      	str	r3, [sp, #4]
 8001b2e:	2303      	movs	r3, #3
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <canInit+0x7c>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	4917      	ldr	r1, [pc, #92]	; (8001b94 <canInit+0x80>)
 8001b38:	4817      	ldr	r0, [pc, #92]	; (8001b98 <canInit+0x84>)
 8001b3a:	f001 fabd 	bl	80030b8 <cmr_canInit>
        GPIOB, GPIO_PIN_5,     // CAN2 RX port/pin.
        GPIOB, GPIO_PIN_6      // CAN2 TX port/pin.
    );

    // CAN2 filters.
    const cmr_canFilter_t canFilters[] = {
 8001b3e:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <canInit+0x88>)
 8001b40:	463c      	mov	r4, r7
 8001b42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                CMR_CANID_HVC_COMMAND,
				CMR_CANID_EMD_MEASUREMENT
            }
        }
    };
    cmr_canFilter(
 8001b48:	463b      	mov	r3, r7
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4812      	ldr	r0, [pc, #72]	; (8001b98 <canInit+0x84>)
 8001b50:	f001 fb60 	bl	8003214 <cmr_canFilter>
        &can, canFilters, sizeof(canFilters) / sizeof(canFilters[0])
    );

    // Task initialization.
    cmr_taskInit(
 8001b54:	2203      	movs	r2, #3
 8001b56:	2300      	movs	r3, #0
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <canInit+0x8c>)
 8001b5c:	4911      	ldr	r1, [pc, #68]	; (8001ba4 <canInit+0x90>)
 8001b5e:	4812      	ldr	r0, [pc, #72]	; (8001ba8 <canInit+0x94>)
 8001b60:	f002 fc9c 	bl	800449c <cmr_taskInit>
        "CAN TX 1Hz",
        canTX1Hz_priority,
        canTX1Hz,
        NULL
    );
    cmr_taskInit(
 8001b64:	2203      	movs	r2, #3
 8001b66:	2300      	movs	r3, #0
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <canInit+0x98>)
 8001b6c:	4910      	ldr	r1, [pc, #64]	; (8001bb0 <canInit+0x9c>)
 8001b6e:	4811      	ldr	r0, [pc, #68]	; (8001bb4 <canInit+0xa0>)
 8001b70:	f002 fc94 	bl	800449c <cmr_taskInit>
        "CAN TX 10Hz",
        canTX10Hz_priority,
        canTX10Hz,
        NULL
    );
    cmr_taskInit(
 8001b74:	2205      	movs	r2, #5
 8001b76:	2300      	movs	r3, #0
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <canInit+0xa4>)
 8001b7c:	490f      	ldr	r1, [pc, #60]	; (8001bbc <canInit+0xa8>)
 8001b7e:	4810      	ldr	r0, [pc, #64]	; (8001bc0 <canInit+0xac>)
 8001b80:	f002 fc8c 	bl	800449c <cmr_taskInit>
        "CAN TX 100Hz",
        canTX100Hz_priority,
        canTX100Hz,
        NULL
    );
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd90      	pop	{r4, r7, pc}
 8001b8c:	40020400 	.word	0x40020400
 8001b90:	20000084 	.word	0x20000084
 8001b94:	40006800 	.word	0x40006800
 8001b98:	20001304 	.word	0x20001304
 8001b9c:	0800bc7c 	.word	0x0800bc7c
 8001ba0:	08001a5f 	.word	0x08001a5f
 8001ba4:	0800bc54 	.word	0x0800bc54
 8001ba8:	20001384 	.word	0x20001384
 8001bac:	08001aa3 	.word	0x08001aa3
 8001bb0:	0800bc60 	.word	0x0800bc60
 8001bb4:	200023e4 	.word	0x200023e4
 8001bb8:	08001ae1 	.word	0x08001ae1
 8001bbc:	0800bc6c 	.word	0x0800bc6c
 8001bc0:	20003444 	.word	0x20003444

08001bc4 <canTX>:
 * @param len The data's length, in bytes.
 * @param timeout The timeout, in ticks.
 *
 * @return 0 on success, or a negative error code on timeout.
 */
int canTX(cmr_canID_t id, const void *data, size_t len, TickType_t timeout) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af02      	add	r7, sp, #8
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	81fb      	strh	r3, [r7, #14]
    return cmr_canTX(&can, id, data, len, timeout);
 8001bd4:	89f9      	ldrh	r1, [r7, #14]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	4804      	ldr	r0, [pc, #16]	; (8001bf0 <canTX+0x2c>)
 8001be0:	f001 fadc 	bl	800319c <cmr_canTX>
 8001be4:	4603      	mov	r3, r0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20001304 	.word	0x20001304

08001bf4 <getPayload>:
 *
 * @param rxMsg The message to get the payload of.
 *
 * @return Pointer to payload, or NULL if rxMsg is invalid.
 */
volatile void *getPayload(canRX_t rxMsg) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
    configASSERT(rxMsg < CANRX_LEN);
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d903      	bls.n	8001c0c <getPayload+0x18>
 8001c04:	21f6      	movs	r1, #246	; 0xf6
 8001c06:	4807      	ldr	r0, [pc, #28]	; (8001c24 <getPayload+0x30>)
 8001c08:	f002 fadf 	bl	80041ca <cmr_panic>

    cmr_canRXMeta_t *rxMeta = &(canRXMeta[rxMsg]);
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	015b      	lsls	r3, r3, #5
 8001c10:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <getPayload+0x34>)
 8001c12:	4413      	add	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]

    return (void *)(&rxMeta->payload);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3318      	adds	r3, #24
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	0800bc8c 	.word	0x0800bc8c
 8001c28:	20000084 	.word	0x20000084

08001c2c <sendHeartbeat>:
/**
 * @brief Sets up HVC CAN heartbeat with current errors and warnings, then sends it.
 *
 * @param lastWakeTime Pass in from canTX100Hz. Used to update lastStateChangeTime and errors/warnings.
 */
static void sendHeartbeat(TickType_t lastWakeTime) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
    cmr_canHVCState_t currentState = getState();
 8001c34:	f000 fd32 	bl	800269c <getState>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	75fb      	strb	r3, [r7, #23]
    cmr_canHVCError_t currentError = CMR_CAN_HVC_ERROR_NONE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	82bb      	strh	r3, [r7, #20]
    currentError = checkErrors(currentState);
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fd34 	bl	80016b0 <checkErrors>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	82bb      	strh	r3, [r7, #20]

    cmr_canHVCHeartbeat_t HVCHeartbeat = {
 8001c4c:	8abb      	ldrh	r3, [r7, #20]
 8001c4e:	81bb      	strh	r3, [r7, #12]
 8001c50:	2300      	movs	r3, #0
 8001c52:	73bb      	strb	r3, [r7, #14]
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
 8001c56:	73fb      	strb	r3, [r7, #15]
        .errorStatus = currentError,
        .hvcMode = CMR_CAN_HVC_MODE_ERROR,
        .hvcState = currentState,
        .relayStatus = getRelayStatus(),
 8001c58:	f7ff fee0 	bl	8001a1c <getRelayStatus>
 8001c5c:	4603      	mov	r3, r0
    cmr_canHVCHeartbeat_t HVCHeartbeat = {
 8001c5e:	743b      	strb	r3, [r7, #16]
 8001c60:	2300      	movs	r3, #0
 8001c62:	747b      	strb	r3, [r7, #17]
        .uptime_s = 0,
    };

    switch (currentState) {
 8001c64:	7dfb      	ldrb	r3, [r7, #23]
 8001c66:	2b0b      	cmp	r3, #11
 8001c68:	d83e      	bhi.n	8001ce8 <sendHeartbeat+0xbc>
 8001c6a:	a201      	add	r2, pc, #4	; (adr r2, 8001c70 <sendHeartbeat+0x44>)
 8001c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c70:	08001cdd 	.word	0x08001cdd
 8001c74:	08001ca1 	.word	0x08001ca1
 8001c78:	08001ca7 	.word	0x08001ca7
 8001c7c:	08001cad 	.word	0x08001cad
 8001c80:	08001cb3 	.word	0x08001cb3
 8001c84:	08001cb9 	.word	0x08001cb9
 8001c88:	08001cbf 	.word	0x08001cbf
 8001c8c:	08001cc5 	.word	0x08001cc5
 8001c90:	08001ccb 	.word	0x08001ccb
 8001c94:	08001cd1 	.word	0x08001cd1
 8001c98:	08001cd7 	.word	0x08001cd7
 8001c9c:	08001ce3 	.word	0x08001ce3
        case CMR_CAN_HVC_STATE_DISCHARGE: // S1
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_IDLE;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73bb      	strb	r3, [r7, #14]
            break;
 8001ca4:	e023      	b.n	8001cee <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_STANDBY: // S2
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_IDLE;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	73bb      	strb	r3, [r7, #14]
            break;
 8001caa:	e020      	b.n	8001cee <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_DRIVE_PRECHARGE: // S3
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_START;
 8001cac:	2302      	movs	r3, #2
 8001cae:	73bb      	strb	r3, [r7, #14]
            break;
 8001cb0:	e01d      	b.n	8001cee <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_DRIVE_PRECHARGE_COMPLETE: // S4
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_START;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	73bb      	strb	r3, [r7, #14]
            break;
 8001cb6:	e01a      	b.n	8001cee <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_DRIVE: // S5
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_RUN;
 8001cb8:	2304      	movs	r3, #4
 8001cba:	73bb      	strb	r3, [r7, #14]
            break;
 8001cbc:	e017      	b.n	8001cee <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_CHARGE_PRECHARGE: // S6
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_CHARGE;
 8001cbe:	2308      	movs	r3, #8
 8001cc0:	73bb      	strb	r3, [r7, #14]
            break;
 8001cc2:	e014      	b.n	8001cee <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE: // S7
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_CHARGE;
 8001cc4:	2308      	movs	r3, #8
 8001cc6:	73bb      	strb	r3, [r7, #14]
            break;
 8001cc8:	e011      	b.n	8001cee <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_CHARGE_TRICKLE: // S8
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_CHARGE;
 8001cca:	2308      	movs	r3, #8
 8001ccc:	73bb      	strb	r3, [r7, #14]
            break;
 8001cce:	e00e      	b.n	8001cee <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT: // S9
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_CHARGE;
 8001cd0:	2308      	movs	r3, #8
 8001cd2:	73bb      	strb	r3, [r7, #14]
            break;
 8001cd4:	e00b      	b.n	8001cee <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE: // S10
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_CHARGE;
 8001cd6:	2308      	movs	r3, #8
 8001cd8:	73bb      	strb	r3, [r7, #14]
            break;
 8001cda:	e008      	b.n	8001cee <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_ERROR: // S0
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_ERROR;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	73bb      	strb	r3, [r7, #14]
            break;
 8001ce0:	e005      	b.n	8001cee <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_CLEAR_ERROR: // S11
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_ERROR;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	73bb      	strb	r3, [r7, #14]
            break;
 8001ce6:	e002      	b.n	8001cee <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_UNKNOWN:
        default:
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_ERROR;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	73bb      	strb	r3, [r7, #14]
            break;
 8001cec:	bf00      	nop
    }

    canTX(CMR_CANID_HEARTBEAT_HVC, &HVCHeartbeat, sizeof(HVCHeartbeat), canTX100Hz_period_ms);
 8001cee:	230a      	movs	r3, #10
 8001cf0:	f107 010c 	add.w	r1, r7, #12
 8001cf4:	2206      	movs	r2, #6
 8001cf6:	f44f 7081 	mov.w	r0, #258	; 0x102
 8001cfa:	f7ff ff63 	bl	8001bc4 <canTX>
}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop

08001d08 <sendHVCPackVoltage>:

static void sendHVCPackVoltage(void) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
    int32_t bVolt = getBattMillivolts();
 8001d0e:	f7ff fc7b 	bl	8001608 <getBattMillivolts>
 8001d12:	60f8      	str	r0, [r7, #12]
    int32_t hvVolt = getHVmillivolts();
 8001d14:	f000 fcaa 	bl	800266c <getHVmillivolts>
 8001d18:	60b8      	str	r0, [r7, #8]

    cmr_canHVCPackVoltage_t HVCPackVoltage = {
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	603b      	str	r3, [r7, #0]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	607b      	str	r3, [r7, #4]
        .battVoltage_mV = bVolt,
        .hvVoltage_mV = hvVolt,
    };

    canTX(CMR_CANID_HVC_PACK_VOLTAGE, &HVCPackVoltage, sizeof(HVCPackVoltage), canTX100Hz_period_ms);
 8001d22:	230a      	movs	r3, #10
 8001d24:	4639      	mov	r1, r7
 8001d26:	2208      	movs	r2, #8
 8001d28:	f240 3001 	movw	r0, #769	; 0x301
 8001d2c:	f7ff ff4a 	bl	8001bc4 <canTX>
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <sendBMSPackCurrent>:

static void sendBMSPackCurrent(void) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
    int32_t instantCurrent = getHVmilliamps();
 8001d3e:	f000 fca1 	bl	8002684 <getHVmilliamps>
 8001d42:	60f8      	str	r0, [r7, #12]
    // int32_t avgCurrent = getCurrentAverage(); // TODO: Gustav change this back
    int32_t avgCurrent = instantCurrent;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	60bb      	str	r3, [r7, #8]

    cmr_canBMSPackCurrent_t BMSPackCurrent = {
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	607b      	str	r3, [r7, #4]
        .instantCurrent_mA = instantCurrent,
        .averageCurrent_mA = avgCurrent,
    };

    canTX(CMR_CANID_HVC_PACK_CURRENT, &BMSPackCurrent, sizeof(BMSPackCurrent), canTX100Hz_period_ms);
 8001d50:	230a      	movs	r3, #10
 8001d52:	4639      	mov	r1, r7
 8001d54:	2208      	movs	r2, #8
 8001d56:	f240 3002 	movw	r0, #770	; 0x302
 8001d5a:	f7ff ff33 	bl	8001bc4 <canTX>
}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <sendBMSBMBStatusVoltage>:

static void sendBMSBMBStatusVoltage(uint8_t bmb_index) {
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b086      	sub	sp, #24
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	71fb      	strb	r3, [r7, #7]
    uint8_t maxIndex = getBMBMaxVoltIndex(bmb_index);
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fb22 	bl	80013bc <getBMBMaxVoltIndex>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	75fb      	strb	r3, [r7, #23]
    uint8_t minIndex = getBMBMinVoltIndex(bmb_index);
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fb4a 	bl	8001418 <getBMBMinVoltIndex>
 8001d84:	4603      	mov	r3, r0
 8001d86:	75bb      	strb	r3, [r7, #22]
    uint16_t maxVoltage = getBMBVoltage(bmb_index, maxIndex);
 8001d88:	7dfa      	ldrb	r2, [r7, #23]
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fb90 	bl	80014b4 <getBMBVoltage>
 8001d94:	4603      	mov	r3, r0
 8001d96:	82bb      	strh	r3, [r7, #20]
    uint16_t minVoltage = getBMBVoltage(bmb_index, minIndex);
 8001d98:	7dba      	ldrb	r2, [r7, #22]
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fb88 	bl	80014b4 <getBMBVoltage>
 8001da4:	4603      	mov	r3, r0
 8001da6:	827b      	strh	r3, [r7, #18]

    cmr_canBMSBMBStatusVoltage_t BMSBMBStatusVoltage = {
 8001da8:	7dfb      	ldrb	r3, [r7, #23]
 8001daa:	733b      	strb	r3, [r7, #12]
 8001dac:	7dbb      	ldrb	r3, [r7, #22]
 8001dae:	737b      	strb	r3, [r7, #13]
 8001db0:	8abb      	ldrh	r3, [r7, #20]
 8001db2:	81fb      	strh	r3, [r7, #14]
 8001db4:	8a7b      	ldrh	r3, [r7, #18]
 8001db6:	823b      	strh	r3, [r7, #16]
        .minVoltIndex = minIndex,
        .maxCellVoltage_mV = maxVoltage,
        .minCellVoltage_mV = minVoltage,
    };

    canTX(CMR_CANID_HVC_BMB_0_STATUS_VOLTAGE + (bmb_index << 1), &BMSBMBStatusVoltage, sizeof(BMSBMBStatusVoltage), canTX10Hz_period_ms);
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8001dc4:	b298      	uxth	r0, r3
 8001dc6:	2364      	movs	r3, #100	; 0x64
 8001dc8:	f107 010c 	add.w	r1, r7, #12
 8001dcc:	2206      	movs	r2, #6
 8001dce:	f7ff fef9 	bl	8001bc4 <canTX>
}
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <sendBMSBMBStatusTemp>:

static void sendBMSBMBStatusTemp(uint8_t bmb_index) {
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	71fb      	strb	r3, [r7, #7]
    uint8_t maxIndex = getBMBMaxTempIndex(bmb_index);
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fa80 	bl	80012ec <getBMBMaxTempIndex>
 8001dec:	4603      	mov	r3, r0
 8001dee:	75fb      	strb	r3, [r7, #23]
    uint8_t minIndex = getBMBMinTempIndex(bmb_index);
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff faae 	bl	8001354 <getBMBMinTempIndex>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	75bb      	strb	r3, [r7, #22]
    int16_t maxTemp = getBMBTemp(bmb_index, maxIndex);
 8001dfc:	7dfa      	ldrb	r2, [r7, #23]
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	4611      	mov	r1, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fb38 	bl	8001478 <getBMBTemp>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	82bb      	strh	r3, [r7, #20]
    int16_t minTemp = getBMBTemp(bmb_index, minIndex);
 8001e0c:	7dba      	ldrb	r2, [r7, #22]
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	4611      	mov	r1, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fb30 	bl	8001478 <getBMBTemp>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	827b      	strh	r3, [r7, #18]

    cmr_canBMSBMBStatusTemp_t BMSBMBStatusTemp = {
 8001e1c:	7dfb      	ldrb	r3, [r7, #23]
 8001e1e:	733b      	strb	r3, [r7, #12]
 8001e20:	7dbb      	ldrb	r3, [r7, #22]
 8001e22:	737b      	strb	r3, [r7, #13]
 8001e24:	8abb      	ldrh	r3, [r7, #20]
 8001e26:	81fb      	strh	r3, [r7, #14]
 8001e28:	8a7b      	ldrh	r3, [r7, #18]
 8001e2a:	823b      	strh	r3, [r7, #16]
        .minTempIndex = minIndex,
        .maxCellTemp_C = maxTemp,
        .minCellTemp_C = minTemp,
    };

    canTX(CMR_CANID_HVC_BMB_0_STATUS_TEMP + (bmb_index << 1), &BMSBMBStatusTemp, sizeof(BMSBMBStatusTemp), canTX1Hz_period_ms);
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	f203 3381 	addw	r3, r3, #897	; 0x381
 8001e38:	b298      	uxth	r0, r3
 8001e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3e:	f107 010c 	add.w	r1, r7, #12
 8001e42:	2206      	movs	r2, #6
 8001e44:	f7ff febe 	bl	8001bc4 <canTX>
}
 8001e48:	bf00      	nop
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <sendBMSMinMaxCellVoltage>:

static void sendBMSMinMaxCellVoltage(void) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
    uint16_t minCellVoltage = UINT16_MAX;
 8001e56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e5a:	82fb      	strh	r3, [r7, #22]
    uint16_t maxCellVoltage = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	82bb      	strh	r3, [r7, #20]
	uint8_t maxCellVoltageBMBNum;
	
	uint8_t minCellVoltageIndex;
	uint8_t maxCellVoltageIndex;

    for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001e60:	2300      	movs	r3, #0
 8001e62:	73fb      	strb	r3, [r7, #15]
 8001e64:	e032      	b.n	8001ecc <sendBMSMinMaxCellVoltage+0x7c>
        uint8_t maxIndex = getBMBMaxVoltIndex(bmb_index);
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff faa7 	bl	80013bc <getBMBMaxVoltIndex>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	73bb      	strb	r3, [r7, #14]
        uint8_t minIndex = getBMBMinVoltIndex(bmb_index);
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff facf 	bl	8001418 <getBMBMinVoltIndex>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	737b      	strb	r3, [r7, #13]
        uint16_t maxVoltage = getBMBVoltage(bmb_index, maxIndex);
 8001e7e:	7bba      	ldrb	r2, [r7, #14]
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fb15 	bl	80014b4 <getBMBVoltage>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	817b      	strh	r3, [r7, #10]
        uint16_t minVoltage = getBMBVoltage(bmb_index, minIndex);
 8001e8e:	7b7a      	ldrb	r2, [r7, #13]
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fb0d 	bl	80014b4 <getBMBVoltage>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	813b      	strh	r3, [r7, #8]

        if (maxVoltage > maxCellVoltage) {
 8001e9e:	897a      	ldrh	r2, [r7, #10]
 8001ea0:	8abb      	ldrh	r3, [r7, #20]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d905      	bls.n	8001eb2 <sendBMSMinMaxCellVoltage+0x62>
            maxCellVoltage = maxVoltage;
 8001ea6:	897b      	ldrh	r3, [r7, #10]
 8001ea8:	82bb      	strh	r3, [r7, #20]
            maxCellVoltageBMBNum = bmb_index;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	74bb      	strb	r3, [r7, #18]
            maxCellVoltageIndex = maxIndex;
 8001eae:	7bbb      	ldrb	r3, [r7, #14]
 8001eb0:	743b      	strb	r3, [r7, #16]
        }

        if (minVoltage < minCellVoltage) {
 8001eb2:	893a      	ldrh	r2, [r7, #8]
 8001eb4:	8afb      	ldrh	r3, [r7, #22]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d205      	bcs.n	8001ec6 <sendBMSMinMaxCellVoltage+0x76>
            minCellVoltage = minVoltage;
 8001eba:	893b      	ldrh	r3, [r7, #8]
 8001ebc:	82fb      	strh	r3, [r7, #22]
            minCellVoltageBMBNum = bmb_index;
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	74fb      	strb	r3, [r7, #19]
            minCellVoltageIndex = minIndex;
 8001ec2:	7b7b      	ldrb	r3, [r7, #13]
 8001ec4:	747b      	strb	r3, [r7, #17]
    for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0c9      	beq.n	8001e66 <sendBMSMinMaxCellVoltage+0x16>
        }
    }

    cmr_canBMSMinMaxCellVoltage_t BMSBMBMinMaxVoltage = {
 8001ed2:	8afb      	ldrh	r3, [r7, #22]
 8001ed4:	803b      	strh	r3, [r7, #0]
 8001ed6:	8abb      	ldrh	r3, [r7, #20]
 8001ed8:	807b      	strh	r3, [r7, #2]
 8001eda:	7cfb      	ldrb	r3, [r7, #19]
 8001edc:	713b      	strb	r3, [r7, #4]
 8001ede:	7c7b      	ldrb	r3, [r7, #17]
 8001ee0:	717b      	strb	r3, [r7, #5]
 8001ee2:	7cbb      	ldrb	r3, [r7, #18]
 8001ee4:	71bb      	strb	r3, [r7, #6]
 8001ee6:	7c3b      	ldrb	r3, [r7, #16]
 8001ee8:	71fb      	strb	r3, [r7, #7]
        .maxVoltageBMBNum = maxCellVoltageBMBNum,
        .minVoltageCellNum = minCellVoltageIndex,
        .maxVoltageCellNum = maxCellVoltageIndex,
    };

    canTX(CMR_CANID_HVC_MIN_MAX_CELL_VOLTAGE, &BMSBMBMinMaxVoltage, sizeof(BMSBMBMinMaxVoltage), canTX10Hz_period_ms);
 8001eea:	2364      	movs	r3, #100	; 0x64
 8001eec:	4639      	mov	r1, r7
 8001eee:	2208      	movs	r2, #8
 8001ef0:	f44f 7044 	mov.w	r0, #784	; 0x310
 8001ef4:	f7ff fe66 	bl	8001bc4 <canTX>
}
 8001ef8:	bf00      	nop
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <sendBMSMinMaxCellTemp>:

static void sendBMSMinMaxCellTemp(void) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
    uint16_t minCellTemp = UINT16_MAX;
 8001f06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f0a:	82fb      	strh	r3, [r7, #22]
    uint16_t maxCellTemp = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	82bb      	strh	r3, [r7, #20]
	uint8_t maxCellTempBMBNum;
	
	uint8_t minCellTempIndex;
	uint8_t maxCellTempIndex;

    for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001f10:	2300      	movs	r3, #0
 8001f12:	73fb      	strb	r3, [r7, #15]
 8001f14:	e032      	b.n	8001f7c <sendBMSMinMaxCellTemp+0x7c>
        uint8_t maxIndex = getBMBMaxTempIndex(bmb_index);
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff f9e7 	bl	80012ec <getBMBMaxTempIndex>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	73bb      	strb	r3, [r7, #14]
        uint8_t minIndex = getBMBMinTempIndex(bmb_index);
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff fa15 	bl	8001354 <getBMBMinTempIndex>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	737b      	strb	r3, [r7, #13]
        uint16_t maxTemp = getBMBTemp(bmb_index, maxIndex);
 8001f2e:	7bba      	ldrb	r2, [r7, #14]
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fa9f 	bl	8001478 <getBMBTemp>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	817b      	strh	r3, [r7, #10]
        uint16_t minTemp = getBMBTemp(bmb_index, minIndex);
 8001f3e:	7b7a      	ldrb	r2, [r7, #13]
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fa97 	bl	8001478 <getBMBTemp>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	813b      	strh	r3, [r7, #8]

        if (maxTemp > maxCellTemp) {
 8001f4e:	897a      	ldrh	r2, [r7, #10]
 8001f50:	8abb      	ldrh	r3, [r7, #20]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d905      	bls.n	8001f62 <sendBMSMinMaxCellTemp+0x62>
            maxCellTemp = maxTemp;
 8001f56:	897b      	ldrh	r3, [r7, #10]
 8001f58:	82bb      	strh	r3, [r7, #20]
            maxCellTempBMBNum = bmb_index;
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	74bb      	strb	r3, [r7, #18]
            maxCellTempIndex = maxIndex;
 8001f5e:	7bbb      	ldrb	r3, [r7, #14]
 8001f60:	743b      	strb	r3, [r7, #16]
        }

        if (minTemp < minCellTemp) {
 8001f62:	893a      	ldrh	r2, [r7, #8]
 8001f64:	8afb      	ldrh	r3, [r7, #22]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d205      	bcs.n	8001f76 <sendBMSMinMaxCellTemp+0x76>
            minCellTemp = minTemp;
 8001f6a:	893b      	ldrh	r3, [r7, #8]
 8001f6c:	82fb      	strh	r3, [r7, #22]
            minCellTempBMBNum = bmb_index;
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	74fb      	strb	r3, [r7, #19]
            minCellTempIndex = minIndex;
 8001f72:	7b7b      	ldrb	r3, [r7, #13]
 8001f74:	747b      	strb	r3, [r7, #17]
    for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	73fb      	strb	r3, [r7, #15]
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0c9      	beq.n	8001f16 <sendBMSMinMaxCellTemp+0x16>
        }
    }

    cmr_canBMSMinMaxCellTemperature_t BMSBMBMinMaxTemperature = {
 8001f82:	8afb      	ldrh	r3, [r7, #22]
 8001f84:	803b      	strh	r3, [r7, #0]
 8001f86:	8abb      	ldrh	r3, [r7, #20]
 8001f88:	807b      	strh	r3, [r7, #2]
 8001f8a:	7cfb      	ldrb	r3, [r7, #19]
 8001f8c:	713b      	strb	r3, [r7, #4]
 8001f8e:	7c7b      	ldrb	r3, [r7, #17]
 8001f90:	717b      	strb	r3, [r7, #5]
 8001f92:	7cbb      	ldrb	r3, [r7, #18]
 8001f94:	71bb      	strb	r3, [r7, #6]
 8001f96:	7c3b      	ldrb	r3, [r7, #16]
 8001f98:	71fb      	strb	r3, [r7, #7]
        .maxTempBMBNum = maxCellTempBMBNum,
        .minTempCellNum = minCellTempIndex,
        .maxTempCellNum = maxCellTempIndex,
    };

    canTX(CMR_CANID_HVC_MIN_MAX_CELL_TEMPERATURE, &BMSBMBMinMaxTemperature, sizeof(BMSBMBMinMaxTemperature), canTX10Hz_period_ms);
 8001f9a:	2364      	movs	r3, #100	; 0x64
 8001f9c:	4639      	mov	r1, r7
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	f240 3011 	movw	r0, #785	; 0x311
 8001fa4:	f7ff fe0e 	bl	8001bc4 <canTX>
}
 8001fa8:	bf00      	nop
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <sendBMSLowVoltage>:

static void sendBMSLowVoltage(void) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
    cmr_canBMSLowVoltage_t BMSLowVoltage = {
        .ibatt_mA = (getSafetymillivolts()*15)/2000, // Convert mA to 2/15th mA //TODO: Gustav change this back?
        .iDCDC_mA =0,
        .vAIR_mV = (getAIRmillivolts()*15)/2000, // Convert mV to 2/15th V
        .vbatt_mV= (getLVmillivolts()*15/2000), // Convert mV to 2/15th V
 8001fb6:	f000 fb35 	bl	8002624 <getLVmillivolts>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	4a18      	ldr	r2, [pc, #96]	; (8002024 <sendBMSLowVoltage+0x74>)
 8001fc4:	fb82 1203 	smull	r1, r2, r2, r3
 8001fc8:	11d2      	asrs	r2, r2, #7
 8001fca:	17db      	asrs	r3, r3, #31
 8001fcc:	1ad3      	subs	r3, r2, r3
    cmr_canBMSLowVoltage_t BMSLowVoltage = {
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	713b      	strb	r3, [r7, #4]
        .vAIR_mV = (getAIRmillivolts()*15)/2000, // Convert mV to 2/15th V
 8001fd2:	f000 fb33 	bl	800263c <getAIRmillivolts>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	4613      	mov	r3, r2
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	4a11      	ldr	r2, [pc, #68]	; (8002024 <sendBMSLowVoltage+0x74>)
 8001fe0:	fb82 1203 	smull	r1, r2, r2, r3
 8001fe4:	11d2      	asrs	r2, r2, #7
 8001fe6:	17db      	asrs	r3, r3, #31
 8001fe8:	1ad3      	subs	r3, r2, r3
    cmr_canBMSLowVoltage_t BMSLowVoltage = {
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	717b      	strb	r3, [r7, #5]
        .ibatt_mA = (getSafetymillivolts()*15)/2000, // Convert mA to 2/15th mA //TODO: Gustav change this back?
 8001fee:	f000 fb31 	bl	8002654 <getSafetymillivolts>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	1a9b      	subs	r3, r3, r2
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <sendBMSLowVoltage+0x74>)
 8001ffc:	fb82 1203 	smull	r1, r2, r2, r3
 8002000:	11d2      	asrs	r2, r2, #7
 8002002:	17db      	asrs	r3, r3, #31
 8002004:	1ad3      	subs	r3, r2, r3
    cmr_canBMSLowVoltage_t BMSLowVoltage = {
 8002006:	b2db      	uxtb	r3, r3
 8002008:	71bb      	strb	r3, [r7, #6]
 800200a:	2300      	movs	r3, #0
 800200c:	71fb      	strb	r3, [r7, #7]
    };
    (void) BMSLowVoltage;

    canTX(CMR_CANID_HVC_LOW_VOLTAGE, &BMSLowVoltage, sizeof(BMSLowVoltage), canTX100Hz_period_ms);
 800200e:	230a      	movs	r3, #10
 8002010:	1d39      	adds	r1, r7, #4
 8002012:	2204      	movs	r2, #4
 8002014:	f240 3003 	movw	r0, #771	; 0x303
 8002018:	f7ff fdd4 	bl	8001bc4 <canTX>
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	10624dd3 	.word	0x10624dd3

08002028 <sendAllBMBVoltages>:

static void sendAllBMBVoltages(void) {
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
//        canTX(CMR_CANID_HVC_BMB_0_STATUS_VOLTAGE_2 + (bmbIndex << 4), &volt2, sizeof(volt2), canTX1Hz_period_ms);
//        canTX(CMR_CANID_HVC_BMB_0_STATUS_TEMP_0 + (bmbIndex << 4), &temp0, sizeof(temp0), canTX1Hz_period_ms);
//        canTX(CMR_CANID_HVC_BMB_0_STATUS_TEMP_1 + (bmbIndex << 4), &temp1, sizeof(temp1), canTX1Hz_period_ms);
//        canTX(CMR_CANID_HVC_BMB_0_STATUS_TEMP_2 + (bmbIndex << 4), &temp2, sizeof(temp2), canTX1Hz_period_ms);
//    }
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <gpioInit>:
};

/**
 * @brief Initializes the GPIO interface.
 */
void gpioInit(void) {
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
    cmr_gpioPinInit(
 800203c:	210b      	movs	r1, #11
 800203e:	4802      	ldr	r0, [pc, #8]	; (8002048 <gpioInit+0x10>)
 8002040:	f001 fe78 	bl	8003d34 <cmr_gpioPinInit>
        gpioPinConfigs, sizeof(gpioPinConfigs) / sizeof(gpioPinConfigs[0])
    );
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}
 8002048:	0800d8ac 	.word	0x0800d8ac

0800204c <i2cInit>:
//        data[i] = data[len - i - 1];
//        data[len - i - 1] = tmp;
//    }
//}

bool i2cInit(void) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af04      	add	r7, sp, #16
    cmr_i2cInit(&bmb_i2c, I2C1,
 8002052:	4b3b      	ldr	r3, [pc, #236]	; (8002140 <i2cInit+0xf4>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	f44f 7300 	mov.w	r3, #512	; 0x200
 800205a:	9303      	str	r3, [sp, #12]
 800205c:	4b39      	ldr	r3, [pc, #228]	; (8002144 <i2cInit+0xf8>)
 800205e:	9302      	str	r3, [sp, #8]
 8002060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	4b37      	ldr	r3, [pc, #220]	; (8002144 <i2cInit+0xf8>)
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2300      	movs	r3, #0
 800206c:	4936      	ldr	r1, [pc, #216]	; (8002148 <i2cInit+0xfc>)
 800206e:	4837      	ldr	r0, [pc, #220]	; (800214c <i2cInit+0x100>)
 8002070:	f001 ffe4 	bl	800403c <cmr_i2cInit>
                GPIOB, GPIO_PIN_8, // clock
                GPIOB, GPIO_PIN_9); // data

//    for (int i = 0; i < 5000*100; i++)
//    	__NOP();
    HAL_Delay(1000);
 8002074:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002078:	f004 fb8e 	bl	8006798 <HAL_Delay>

    // TODO: I2C IS GOING TO NEED DELAYS
    for (int bmb = 0; bmb < I2C_NUM_BMBS; bmb++) {
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	e055      	b.n	800212e <i2cInit+0xe2>
        for (int side = 1; side < 2; side++) { //TODO: CHANGE THIS BACK
 8002082:	2301      	movs	r3, #1
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	e03f      	b.n	8002108 <i2cInit+0xbc>
            if (!i2c_enableI2CMux(bmb, side))
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f000 f85c 	bl	8002150 <i2c_enableI2CMux>
 8002098:	4603      	mov	r3, r0
 800209a:	f083 0301 	eor.w	r3, r3, #1
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <i2cInit+0x5c>
            	return false;
 80020a4:	2300      	movs	r3, #0
 80020a6:	e046      	b.n	8002136 <i2cInit+0xea>
            // verify mux is correctly set
            uint8_t recv_en, recv_side;
            if (!i2c_readI2CMux(bmb, &recv_en, &recv_side))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	1dba      	adds	r2, r7, #6
 80020ae:	1df9      	adds	r1, r7, #7
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 f86f 	bl	8002194 <i2c_readI2CMux>
 80020b6:	4603      	mov	r3, r0
 80020b8:	f083 0301 	eor.w	r3, r3, #1
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <i2cInit+0x7a>
            	return false;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e037      	b.n	8002136 <i2cInit+0xea>
            // TODO: Make error messages for root cause, not just
            // all false
            if (!(recv_en && recv_side == side))
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d004      	beq.n	80020d6 <i2cInit+0x8a>
 80020cc:	79bb      	ldrb	r3, [r7, #6]
 80020ce:	461a      	mov	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d001      	beq.n	80020da <i2cInit+0x8e>
            	return false;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e02d      	b.n	8002136 <i2cInit+0xea>
            if (!i2c_configSelectMux())
 80020da:	f000 f8a1 	bl	8002220 <i2c_configSelectMux>
 80020de:	4603      	mov	r3, r0
 80020e0:	f083 0301 	eor.w	r3, r3, #1
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <i2cInit+0xa2>
            	return false;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e023      	b.n	8002136 <i2cInit+0xea>
            if (!i2c_configADC())
 80020ee:	f000 f909 	bl	8002304 <i2c_configADC>
 80020f2:	4603      	mov	r3, r0
 80020f4:	f083 0301 	eor.w	r3, r3, #1
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <i2cInit+0xb6>
            	return false;
 80020fe:	2300      	movs	r3, #0
 8002100:	e019      	b.n	8002136 <i2cInit+0xea>
        for (int side = 1; side < 2; side++) { //TODO: CHANGE THIS BACK
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	3301      	adds	r3, #1
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b01      	cmp	r3, #1
 800210c:	ddbc      	ble.n	8002088 <i2cInit+0x3c>
        }
        if (!i2c_disableI2CMux(bmb))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f868 	bl	80021e8 <i2c_disableI2CMux>
 8002118:	4603      	mov	r3, r0
 800211a:	f083 0301 	eor.w	r3, r3, #1
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <i2cInit+0xdc>
        	return false;
 8002124:	2300      	movs	r3, #0
 8002126:	e006      	b.n	8002136 <i2cInit+0xea>
    for (int bmb = 0; bmb < I2C_NUM_BMBS; bmb++) {
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	3301      	adds	r3, #1
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	dda6      	ble.n	8002082 <i2cInit+0x36>
    }
    return true;
 8002134:	2301      	movs	r3, #1
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	0800d9bc 	.word	0x0800d9bc
 8002144:	40020400 	.word	0x40020400
 8002148:	40005400 	.word	0x40005400
 800214c:	200044a8 	.word	0x200044a8

08002150 <i2c_enableI2CMux>:
        }
    }
    return 0;
}

bool i2c_enableI2CMux(uint8_t bmb, uint8_t side) {
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af02      	add	r7, sp, #8
 8002156:	4603      	mov	r3, r0
 8002158:	460a      	mov	r2, r1
 800215a:	71fb      	strb	r3, [r7, #7]
 800215c:	4613      	mov	r3, r2
 800215e:	71bb      	strb	r3, [r7, #6]
    // bit 2 is enable bit, bit 1 & 0 is the side (either 00 or 01)
    uint8_t data = 0x4 | side;
 8002160:	79bb      	ldrb	r3, [r7, #6]
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	b2db      	uxtb	r3, r3
 8002168:	73fb      	strb	r3, [r7, #15]
    if(cmr_i2cTX(&bmb_i2c, bms_mux_address[bmb], &data, 1, I2C_TIMEOUT) != 0) {
 800216a:	2170      	movs	r1, #112	; 0x70
 800216c:	f107 020f 	add.w	r2, r7, #15
 8002170:	2332      	movs	r3, #50	; 0x32
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	2301      	movs	r3, #1
 8002176:	4806      	ldr	r0, [pc, #24]	; (8002190 <i2c_enableI2CMux+0x40>)
 8002178:	f001 ff1e 	bl	8003fb8 <cmr_i2cTX>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <i2c_enableI2CMux+0x36>
        return false;
 8002182:	2300      	movs	r3, #0
 8002184:	e000      	b.n	8002188 <i2c_enableI2CMux+0x38>
    }
    return true;
 8002186:	2301      	movs	r3, #1
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	200044a8 	.word	0x200044a8

08002194 <i2c_readI2CMux>:

bool i2c_readI2CMux(uint8_t bmb, uint8_t *enabled, uint8_t *side) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af02      	add	r7, sp, #8
 800219a:	4603      	mov	r3, r0
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
 80021a0:	73fb      	strb	r3, [r7, #15]
    // bit 2 is enable bit, bit 1 & 0 is the side (either 00 or 01)
    uint8_t buf;
    if(cmr_i2cRX(&bmb_i2c, bms_mux_address[bmb], &buf, 1, I2C_TIMEOUT) != 0) {
 80021a2:	2170      	movs	r1, #112	; 0x70
 80021a4:	f107 0217 	add.w	r2, r7, #23
 80021a8:	2332      	movs	r3, #50	; 0x32
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2301      	movs	r3, #1
 80021ae:	480d      	ldr	r0, [pc, #52]	; (80021e4 <i2c_readI2CMux+0x50>)
 80021b0:	f001 ff23 	bl	8003ffa <cmr_i2cRX>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <i2c_readI2CMux+0x2a>
        return false;
 80021ba:	2300      	movs	r3, #0
 80021bc:	e00e      	b.n	80021dc <i2c_readI2CMux+0x48>
    }
    *enabled = (buf >> 2) & 0x1;
 80021be:	7dfb      	ldrb	r3, [r7, #23]
 80021c0:	089b      	lsrs	r3, r3, #2
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	701a      	strb	r2, [r3, #0]
    *side = buf & 0x1;
 80021ce:	7dfb      	ldrb	r3, [r7, #23]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	701a      	strb	r2, [r3, #0]
    return true;
 80021da:	2301      	movs	r3, #1
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	200044a8 	.word	0x200044a8

080021e8 <i2c_disableI2CMux>:

bool i2c_disableI2CMux(uint8_t bmb) {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
    // bit 2 is enable bit
    uint8_t data = 0x0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	73fb      	strb	r3, [r7, #15]
    if(cmr_i2cTX(&bmb_i2c, bms_mux_address[bmb], &data, 1, I2C_TIMEOUT) != 0) {
 80021f6:	2170      	movs	r1, #112	; 0x70
 80021f8:	f107 020f 	add.w	r2, r7, #15
 80021fc:	2332      	movs	r3, #50	; 0x32
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	2301      	movs	r3, #1
 8002202:	4806      	ldr	r0, [pc, #24]	; (800221c <i2c_disableI2CMux+0x34>)
 8002204:	f001 fed8 	bl	8003fb8 <cmr_i2cTX>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <i2c_disableI2CMux+0x2a>
        return false;
 800220e:	2300      	movs	r3, #0
 8002210:	e000      	b.n	8002214 <i2c_disableI2CMux+0x2c>
    }
    return true;
 8002212:	2301      	movs	r3, #1
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	200044a8 	.word	0x200044a8

08002220 <i2c_configSelectMux>:

bool i2c_configSelectMux() {
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af02      	add	r7, sp, #8
    // select control register, set them all to output
    uint8_t data[2] = {0x3, 0x00};
 8002226:	2303      	movs	r3, #3
 8002228:	80bb      	strh	r3, [r7, #4]
    //i2c_flipEndianness(data, 2);
    if (cmr_i2cTX(&bmb_i2c, BMS_SELECT_IO_ADDR, (uint8_t*)&data, 2, I2C_TIMEOUT) != 0) {
 800222a:	1d3a      	adds	r2, r7, #4
 800222c:	2332      	movs	r3, #50	; 0x32
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	2302      	movs	r3, #2
 8002232:	2141      	movs	r1, #65	; 0x41
 8002234:	4806      	ldr	r0, [pc, #24]	; (8002250 <i2c_configSelectMux+0x30>)
 8002236:	f001 febf 	bl	8003fb8 <cmr_i2cTX>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <i2c_configSelectMux+0x24>
        return false;
 8002240:	2300      	movs	r3, #0
 8002242:	e000      	b.n	8002246 <i2c_configSelectMux+0x26>
    }
    return true;
 8002244:	2301      	movs	r3, #1
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200044a8 	.word	0x200044a8

08002254 <i2c_select4MuxChannel>:

bool i2c_select4MuxChannel(uint8_t channel) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af02      	add	r7, sp, #8
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
    // 0x1 is output port, we set select lines of mux
    // mux only uses last 2 bits, the top 4th bit is the LED blinking
    // save top 2 bits, overwrite bottom 2 bits
    selectIOCurrent = (selectIOCurrent & 0xC) | channel;
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <i2c_select4MuxChannel+0x54>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	b25b      	sxtb	r3, r3
 8002264:	f003 030c 	and.w	r3, r3, #12
 8002268:	b25a      	sxtb	r2, r3
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	4313      	orrs	r3, r2
 8002270:	b25b      	sxtb	r3, r3
 8002272:	b2da      	uxtb	r2, r3
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <i2c_select4MuxChannel+0x54>)
 8002276:	701a      	strb	r2, [r3, #0]
    uint8_t outData[2] = {0x1, selectIOCurrent};
 8002278:	2301      	movs	r3, #1
 800227a:	733b      	strb	r3, [r7, #12]
 800227c:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <i2c_select4MuxChannel+0x54>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	737b      	strb	r3, [r7, #13]
    //i2c_flipEndianness(outData, 2);
    if(cmr_i2cTX(&bmb_i2c, BMS_SELECT_IO_ADDR, (uint8_t*)&outData, 2, I2C_TIMEOUT) != 0) {
 8002282:	f107 020c 	add.w	r2, r7, #12
 8002286:	2332      	movs	r3, #50	; 0x32
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	2302      	movs	r3, #2
 800228c:	2141      	movs	r1, #65	; 0x41
 800228e:	4807      	ldr	r0, [pc, #28]	; (80022ac <i2c_select4MuxChannel+0x58>)
 8002290:	f001 fe92 	bl	8003fb8 <cmr_i2cTX>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <i2c_select4MuxChannel+0x4a>
        return false;
 800229a:	2300      	movs	r3, #0
 800229c:	e000      	b.n	80022a0 <i2c_select4MuxChannel+0x4c>
    }
    return true;
 800229e:	2301      	movs	r3, #1
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	200044a4 	.word	0x200044a4
 80022ac:	200044a8 	.word	0x200044a8

080022b0 <i2c_selectMuxBlink>:

bool i2c_selectMuxBlink() {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af02      	add	r7, sp, #8
    // flip top 2 bits, don't flip bottom 2 bits
    selectIOCurrent = (~selectIOCurrent & 0xC) | (selectIOCurrent & 0x3);
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <i2c_selectMuxBlink+0x4c>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	b25b      	sxtb	r3, r3
 80022bc:	f003 030f 	and.w	r3, r3, #15
 80022c0:	b25b      	sxtb	r3, r3
 80022c2:	f083 030c 	eor.w	r3, r3, #12
 80022c6:	b25b      	sxtb	r3, r3
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <i2c_selectMuxBlink+0x4c>)
 80022cc:	701a      	strb	r2, [r3, #0]
    uint8_t outData[2] = {0x1, selectIOCurrent};
 80022ce:	2301      	movs	r3, #1
 80022d0:	713b      	strb	r3, [r7, #4]
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <i2c_selectMuxBlink+0x4c>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	717b      	strb	r3, [r7, #5]
    //i2c_flipEndianness(outData, 2);
    if(cmr_i2cTX(&bmb_i2c, BMS_SELECT_IO_ADDR, (uint8_t*)&outData, 2, I2C_TIMEOUT) != 0) {
 80022d8:	1d3a      	adds	r2, r7, #4
 80022da:	2332      	movs	r3, #50	; 0x32
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	2302      	movs	r3, #2
 80022e0:	2141      	movs	r1, #65	; 0x41
 80022e2:	4807      	ldr	r0, [pc, #28]	; (8002300 <i2c_selectMuxBlink+0x50>)
 80022e4:	f001 fe68 	bl	8003fb8 <cmr_i2cTX>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <i2c_selectMuxBlink+0x42>
        return false;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e000      	b.n	80022f4 <i2c_selectMuxBlink+0x44>
    }
    return true;
 80022f2:	2301      	movs	r3, #1
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	200044a4 	.word	0x200044a4
 8002300:	200044a8 	.word	0x200044a8

08002304 <i2c_configADC>:

bool i2c_configADC() {
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af02      	add	r7, sp, #8
	// 1111 means {setup_bit, internal_ref, ref_output, ref_always_on}
	// 0010 means {internal_clock, unipolar, no_action, X}
	uint8_t setupByte = 0xF0;
 800230a:	23f0      	movs	r3, #240	; 0xf0
 800230c:	71fb      	strb	r3, [r7, #7]
	// 0_00_0111_1 means {config_bit, scan_all, scan_to_A7, single_ended}
	uint8_t configByte = 0x1F;
 800230e:	231f      	movs	r3, #31
 8002310:	71bb      	strb	r3, [r7, #6]
	if (cmr_i2cTX(&bmb_i2c, BMS_ADC_ADDR, &setupByte, 1, I2C_TIMEOUT) != 0) {
 8002312:	1dfa      	adds	r2, r7, #7
 8002314:	2332      	movs	r3, #50	; 0x32
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	2301      	movs	r3, #1
 800231a:	2133      	movs	r1, #51	; 0x33
 800231c:	480c      	ldr	r0, [pc, #48]	; (8002350 <i2c_configADC+0x4c>)
 800231e:	f001 fe4b 	bl	8003fb8 <cmr_i2cTX>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <i2c_configADC+0x28>
		return false;
 8002328:	2300      	movs	r3, #0
 800232a:	e00d      	b.n	8002348 <i2c_configADC+0x44>
	}
	if (cmr_i2cTX(&bmb_i2c, BMS_ADC_ADDR, &configByte, 1, I2C_TIMEOUT) != 0) {
 800232c:	1dba      	adds	r2, r7, #6
 800232e:	2332      	movs	r3, #50	; 0x32
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	2301      	movs	r3, #1
 8002334:	2133      	movs	r1, #51	; 0x33
 8002336:	4806      	ldr	r0, [pc, #24]	; (8002350 <i2c_configADC+0x4c>)
 8002338:	f001 fe3e 	bl	8003fb8 <cmr_i2cTX>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <i2c_configADC+0x42>
		return false;
 8002342:	2300      	movs	r3, #0
 8002344:	e000      	b.n	8002348 <i2c_configADC+0x44>
	}
	return true;
 8002346:	2301      	movs	r3, #1
}
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	200044a8 	.word	0x200044a8

08002354 <i2c_scanADC>:

bool i2c_scanADC(int16_t adcResponse[]) {
 8002354:	b580      	push	{r7, lr}
 8002356:	b08a      	sub	sp, #40	; 0x28
 8002358:	af02      	add	r7, sp, #8
 800235a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[16];
	//TODO: WHY IS THIS 14
	if (cmr_i2cRX(&bmb_i2c, BMS_ADC_ADDR, buffer, 14, I2C_TIMEOUT) != 0) {
 800235c:	f107 020c 	add.w	r2, r7, #12
 8002360:	2332      	movs	r3, #50	; 0x32
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	230e      	movs	r3, #14
 8002366:	2133      	movs	r1, #51	; 0x33
 8002368:	481d      	ldr	r0, [pc, #116]	; (80023e0 <i2c_scanADC+0x8c>)
 800236a:	f001 fe46 	bl	8003ffa <cmr_i2cRX>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <i2c_scanADC+0x24>
		return false;
 8002374:	2300      	movs	r3, #0
 8002376:	e02f      	b.n	80023d8 <i2c_scanADC+0x84>
	}
    //i2c_flipEndianness(buffer, 16);
	for (int i = 0; i < 7; i++) {
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
 800237c:	e028      	b.n	80023d0 <i2c_scanADC+0x7c>
		// top 6 bits should be 1
		if ((buffer[i << 1] & 0xFC) != 0xFC) {
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	3320      	adds	r3, #32
 8002384:	443b      	add	r3, r7
 8002386:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800238a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 800238e:	2bfc      	cmp	r3, #252	; 0xfc
 8002390:	d001      	beq.n	8002396 <i2c_scanADC+0x42>
			return false;
 8002392:	2300      	movs	r3, #0
 8002394:	e020      	b.n	80023d8 <i2c_scanADC+0x84>
		}
		adcResponse[i] = ((((uint16_t) buffer[i << 1]) << 8)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	3320      	adds	r3, #32
 800239c:	443b      	add	r3, r7
 800239e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80023a2:	021b      	lsls	r3, r3, #8
				| (buffer[(i << 1) + 1])) & 0x3FF;
 80023a4:	b21a      	sxth	r2, r3
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	3301      	adds	r3, #1
 80023ac:	3320      	adds	r3, #32
 80023ae:	443b      	add	r3, r7
 80023b0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80023b4:	b21b      	sxth	r3, r3
 80023b6:	4313      	orrs	r3, r2
 80023b8:	b21a      	sxth	r2, r3
		adcResponse[i] = ((((uint16_t) buffer[i << 1]) << 8)
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	440b      	add	r3, r1
				| (buffer[(i << 1) + 1])) & 0x3FF;
 80023c2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80023c6:	b212      	sxth	r2, r2
		adcResponse[i] = ((((uint16_t) buffer[i << 1]) << 8)
 80023c8:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 7; i++) {
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3301      	adds	r3, #1
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	2b06      	cmp	r3, #6
 80023d4:	ddd3      	ble.n	800237e <i2c_scanADC+0x2a>
	}
	return true;
 80023d6:	2301      	movs	r3, #1
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3720      	adds	r7, #32
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	200044a8 	.word	0x200044a8

080023e4 <i2c_cellBalance>:
			I2C_TIMEOUT) != 0) {
		return false;
	}
	return true;
}
bool i2c_cellBalance(uint8_t bmb, uint8_t cells, uint8_t cells1) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af02      	add	r7, sp, #8
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]
 80023ee:	460b      	mov	r3, r1
 80023f0:	71bb      	strb	r3, [r7, #6]
 80023f2:	4613      	mov	r3, r2
 80023f4:	717b      	strb	r3, [r7, #5]
	//Two different packets, one for cells 0-8 and the other one for 9
	//The first byte of each packet is the register address
	uint8_t data[2] = {0xF2, cells};
 80023f6:	23f2      	movs	r3, #242	; 0xf2
 80023f8:	733b      	strb	r3, [r7, #12]
 80023fa:	79bb      	ldrb	r3, [r7, #6]
 80023fc:	737b      	strb	r3, [r7, #13]
	uint8_t data2[2] = {0xF3, cells};
 80023fe:	23f3      	movs	r3, #243	; 0xf3
 8002400:	723b      	strb	r3, [r7, #8]
 8002402:	79bb      	ldrb	r3, [r7, #6]
 8002404:	727b      	strb	r3, [r7, #9]
    //i2c_flipEndianness(data, 2);
    //i2c_flipEndianness(data2, 2);
	if (cmr_i2cTX(&bmb_i2c, bms_cell_balancer_addresses[bmb], data, 2,
 8002406:	2150      	movs	r1, #80	; 0x50
 8002408:	f107 020c 	add.w	r2, r7, #12
 800240c:	2332      	movs	r3, #50	; 0x32
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	2302      	movs	r3, #2
 8002412:	480d      	ldr	r0, [pc, #52]	; (8002448 <i2c_cellBalance+0x64>)
 8002414:	f001 fdd0 	bl	8003fb8 <cmr_i2cTX>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <i2c_cellBalance+0x3e>
			I2C_TIMEOUT) != 0) {
		return false;
 800241e:	2300      	movs	r3, #0
 8002420:	e00e      	b.n	8002440 <i2c_cellBalance+0x5c>
	}
	if (cmr_i2cTX(&bmb_i2c, bms_cell_balancer_addresses[bmb], data2, 2,
 8002422:	2150      	movs	r1, #80	; 0x50
 8002424:	f107 0208 	add.w	r2, r7, #8
 8002428:	2332      	movs	r3, #50	; 0x32
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	2302      	movs	r3, #2
 800242e:	4806      	ldr	r0, [pc, #24]	; (8002448 <i2c_cellBalance+0x64>)
 8002430:	f001 fdc2 	bl	8003fb8 <cmr_i2cTX>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <i2c_cellBalance+0x5a>
			I2C_TIMEOUT) != 0) {
		return false;
 800243a:	2300      	movs	r3, #0
 800243c:	e000      	b.n	8002440 <i2c_cellBalance+0x5c>
	}
	return true;
 800243e:	2301      	movs	r3, #1
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	200044a8 	.word	0x200044a8

0800244c <statusLED>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void statusLED(void *pvParameters) {
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
    (void) pvParameters;

    cmr_gpioWrite(GPIO_MCU_LED, 0);
 8002454:	2100      	movs	r1, #0
 8002456:	2000      	movs	r0, #0
 8002458:	f001 fca2 	bl	8003da0 <cmr_gpioWrite>

    TickType_t lastWakeTime = xTaskGetTickCount();
 800245c:	f003 fb64 	bl	8005b28 <xTaskGetTickCount>
 8002460:	4603      	mov	r3, r0
 8002462:	60fb      	str	r3, [r7, #12]
    while (1) {
        cmr_gpioToggle(GPIO_MCU_LED);
 8002464:	2000      	movs	r0, #0
 8002466:	f001 fcd9 	bl	8003e1c <cmr_gpioToggle>

        vTaskDelayUntil(&lastWakeTime, statusLED_period_ms);
 800246a:	22fa      	movs	r2, #250	; 0xfa
 800246c:	f107 030c 	add.w	r3, r7, #12
 8002470:	4611      	mov	r1, r2
 8002472:	4618      	mov	r0, r3
 8002474:	f003 f9e2 	bl	800583c <vTaskDelayUntil>
        cmr_gpioToggle(GPIO_MCU_LED);
 8002478:	e7f4      	b.n	8002464 <statusLED+0x18>
	...

0800247c <main>:
 *
 * Device configuration and task initialization should be performed here.
 *
 * @return Does not return.
 */
int main(void) {
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af02      	add	r7, sp, #8

    // System initialization.

	HAL_Init();
 8002482:	f004 f90f 	bl	80066a4 <HAL_Init>
    cmr_rccSystemClockEnable();
 8002486:	f001 fea6 	bl	80041d6 <cmr_rccSystemClockEnable>
    // cmr_rccSystemInternalClockEnable();

    // Peripheral configuration.
    gpioInit();
 800248a:	f7ff fdd5 	bl	8002038 <gpioInit>
    canInit();
 800248e:	f7ff fb41 	bl	8001b14 <canInit>
    adcInit();
 8002492:	f7ff f8e7 	bl	8001664 <adcInit>
    sensorsInit();
 8002496:	f000 f8a7 	bl	80025e8 <sensorsInit>
//    wwdgInit();

    cmr_taskInit(
 800249a:	2202      	movs	r2, #2
 800249c:	2300      	movs	r3, #0
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <main+0x58>)
 80024a2:	490d      	ldr	r1, [pc, #52]	; (80024d8 <main+0x5c>)
 80024a4:	480d      	ldr	r0, [pc, #52]	; (80024dc <main+0x60>)
 80024a6:	f001 fff9 	bl	800449c <cmr_taskInit>
        statusLED,
        NULL
    );

    // BMB_task
    cmr_taskInit(
 80024aa:	2207      	movs	r2, #7
 80024ac:	2300      	movs	r3, #0
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <main+0x64>)
 80024b2:	490c      	ldr	r1, [pc, #48]	; (80024e4 <main+0x68>)
 80024b4:	480c      	ldr	r0, [pc, #48]	; (80024e8 <main+0x6c>)
 80024b6:	f001 fff1 	bl	800449c <cmr_taskInit>
        vBMBSampleTask,
        NULL
    );

    // State Task
    cmr_taskInit(
 80024ba:	2204      	movs	r2, #4
 80024bc:	2300      	movs	r3, #0
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <main+0x70>)
 80024c2:	490b      	ldr	r1, [pc, #44]	; (80024f0 <main+0x74>)
 80024c4:	480b      	ldr	r0, [pc, #44]	; (80024f4 <main+0x78>)
 80024c6:	f001 ffe9 	bl	800449c <cmr_taskInit>
        setState_priority,
        vSetStateTask,
        NULL
    );

    vTaskStartScheduler();
 80024ca:	f003 fa29 	bl	8005920 <vTaskStartScheduler>
    cmr_panic("vTaskStartScheduler returned!");
 80024ce:	480a      	ldr	r0, [pc, #40]	; (80024f8 <main+0x7c>)
 80024d0:	f001 fe7b 	bl	80041ca <cmr_panic>
 80024d4:	0800244d 	.word	0x0800244d
 80024d8:	0800bcc0 	.word	0x0800bcc0
 80024dc:	20004654 	.word	0x20004654
 80024e0:	08001241 	.word	0x08001241
 80024e4:	0800bccc 	.word	0x0800bccc
 80024e8:	200056b4 	.word	0x200056b4
 80024ec:	08002bbd 	.word	0x08002bbd
 80024f0:	0800bcdc 	.word	0x0800bcdc
 80024f4:	20006714 	.word	0x20006714
 80024f8:	0800bcec 	.word	0x0800bcec

080024fc <sampleADCSensor>:
 *
 * @param sensor The ADC sensor to sample.
 *
 * @return The latest sampled value from the ADC.
 */
static uint32_t sampleADCSensor(const cmr_sensor_t *sensor) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
    sensorChannel_t sensorChannel = sensor - sensors;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a0c      	ldr	r2, [pc, #48]	; (8002538 <sampleADCSensor+0x3c>)
 8002508:	1a9b      	subs	r3, r3, r2
 800250a:	10db      	asrs	r3, r3, #3
 800250c:	4a0b      	ldr	r2, [pc, #44]	; (800253c <sampleADCSensor+0x40>)
 800250e:	fb02 f303 	mul.w	r3, r2, r3
 8002512:	73fb      	strb	r3, [r7, #15]
    configASSERT(sensorChannel < SENSOR_CH_LEN);
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	2b04      	cmp	r3, #4
 8002518:	d903      	bls.n	8002522 <sampleADCSensor+0x26>
 800251a:	212a      	movs	r1, #42	; 0x2a
 800251c:	4808      	ldr	r0, [pc, #32]	; (8002540 <sampleADCSensor+0x44>)
 800251e:	f001 fe54 	bl	80041ca <cmr_panic>
    return adcRead(sensorsADCCHANNELS[sensorChannel]); //* ADCChannelPolarity[ch]; Figure adc polarity
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	4a07      	ldr	r2, [pc, #28]	; (8002544 <sampleADCSensor+0x48>)
 8002526:	5cd3      	ldrb	r3, [r2, r3]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff f8ab 	bl	8001684 <adcRead>
 800252e:	4603      	mov	r3, r0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	200000e4 	.word	0x200000e4
 800253c:	cccccccd 	.word	0xcccccccd
 8002540:	0800bd0c 	.word	0x0800bd0c
 8002544:	0800d9b4 	.word	0x0800d9b4

08002548 <ADCtoMV_24v>:
 * @param reading The ADC value to convert.
 *
 * @return Voltage in mV.
 */
// 24v voltage divider is factor of 1.13/14.43
static int32_t ADCtoMV_24v(const cmr_sensor_t *sensor, uint32_t reading) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
    (void) sensor;
	
    return ((int32_t) reading) * 7.39;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7fd ffb5 	bl	80004c4 <__aeabi_i2d>
 800255a:	a309      	add	r3, pc, #36	; (adr r3, 8002580 <ADCtoMV_24v+0x38>)
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002560:	f7fe f81a 	bl	8000598 <__aeabi_dmul>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4610      	mov	r0, r2
 800256a:	4619      	mov	r1, r3
 800256c:	f7fe fa26 	bl	80009bc <__aeabi_d2iz>
 8002570:	4603      	mov	r3, r0

}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	f3af 8000 	nop.w
 8002580:	28f5c28f 	.word	0x28f5c28f
 8002584:	401d8f5c 	.word	0x401d8f5c

08002588 <ADCtoMV_HV>:
 *
 * @param reading The ADC value to convert.
 *
 * @return Voltage in V.
 */
static int32_t ADCtoMV_HV(const cmr_sensor_t *sensor, uint32_t reading) {
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
    (void) sensor;
	
	return (((int32_t) reading) * 268 - 426400);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8002598:	fb02 f303 	mul.w	r3, r2, r3
 800259c:	f5a3 23d0 	sub.w	r3, r3, #425984	; 0x68000
 80025a0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <sensorsUpdate>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void sensorsUpdate(void *pvParameters) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    TickType_t lastWakeTime = xTaskGetTickCount();
 80025b8:	f003 fab6 	bl	8005b28 <xTaskGetTickCount>
 80025bc:	4603      	mov	r3, r0
 80025be:	60fb      	str	r3, [r7, #12]
    while (1) {
        vTaskDelayUntil(&lastWakeTime, sensorsUpdate_period_ms);
 80025c0:	2232      	movs	r2, #50	; 0x32
 80025c2:	f107 030c 	add.w	r3, r7, #12
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f003 f937 	bl	800583c <vTaskDelayUntil>

        cmr_sensorListUpdate(&sensorList);
 80025ce:	4805      	ldr	r0, [pc, #20]	; (80025e4 <sensorsUpdate+0x34>)
 80025d0:	f001 ff30 	bl	8004434 <cmr_sensorListUpdate>

        vTaskDelayUntil(&lastWakeTime, sensorsUpdate_period_ms);
 80025d4:	2232      	movs	r2, #50	; 0x32
 80025d6:	f107 030c 	add.w	r3, r7, #12
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f003 f92d 	bl	800583c <vTaskDelayUntil>
        vTaskDelayUntil(&lastWakeTime, sensorsUpdate_period_ms);
 80025e2:	e7ed      	b.n	80025c0 <sensorsUpdate+0x10>
 80025e4:	20007774 	.word	0x20007774

080025e8 <sensorsInit>:
}

/**
 * @brief Initializes the sensor interface.
 */
void sensorsInit(void) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af02      	add	r7, sp, #8
    cmr_sensorListInit(
 80025ee:	2205      	movs	r2, #5
 80025f0:	4907      	ldr	r1, [pc, #28]	; (8002610 <sensorsInit+0x28>)
 80025f2:	4808      	ldr	r0, [pc, #32]	; (8002614 <sensorsInit+0x2c>)
 80025f4:	f001 fef9 	bl	80043ea <cmr_sensorListInit>
        &sensorList,
        sensors, sizeof(sensors) / sizeof(sensors[0])
    );

    // Task creation.
    cmr_taskInit(
 80025f8:	2201      	movs	r2, #1
 80025fa:	2300      	movs	r3, #0
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <sensorsInit+0x30>)
 8002600:	4906      	ldr	r1, [pc, #24]	; (800261c <sensorsInit+0x34>)
 8002602:	4807      	ldr	r0, [pc, #28]	; (8002620 <sensorsInit+0x38>)
 8002604:	f001 ff4a 	bl	800449c <cmr_taskInit>
        "sensors update",
        sensorsUpdate_priority,
        sensorsUpdate,
        NULL
    );
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	200000e4 	.word	0x200000e4
 8002614:	20007774 	.word	0x20007774
 8002618:	080025b1 	.word	0x080025b1
 800261c:	0800bd50 	.word	0x0800bd50
 8002620:	2000777c 	.word	0x2000777c

08002624 <getLVmillivolts>:

// Accessor functions used in the state machine. These casts should be safe because all the feasible values
// for any of these variables should be less than INT_MAX, so the value will be preserved on the cast.
int32_t getLVmillivolts(){
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
    return (int32_t) cmr_sensorListGetValue(&sensorList, SENSOR_CH_V24V);
 8002628:	2100      	movs	r1, #0
 800262a:	4803      	ldr	r0, [pc, #12]	; (8002638 <getLVmillivolts+0x14>)
 800262c:	f001 ff21 	bl	8004472 <cmr_sensorListGetValue>
 8002630:	4603      	mov	r3, r0
}
 8002632:	4618      	mov	r0, r3
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20007774 	.word	0x20007774

0800263c <getAIRmillivolts>:

int32_t getAIRmillivolts(){
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
    return ((int32_t) cmr_sensorListGetValue(&sensorList, SENSOR_CH_AIR_POWER));
 8002640:	2101      	movs	r1, #1
 8002642:	4803      	ldr	r0, [pc, #12]	; (8002650 <getAIRmillivolts+0x14>)
 8002644:	f001 ff15 	bl	8004472 <cmr_sensorListGetValue>
 8002648:	4603      	mov	r3, r0
}
 800264a:	4618      	mov	r0, r3
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20007774 	.word	0x20007774

08002654 <getSafetymillivolts>:

int32_t getSafetymillivolts(){
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
    return ((int32_t) cmr_sensorListGetValue(&sensorList, SENSOR_CH_SAFETY));
 8002658:	2102      	movs	r1, #2
 800265a:	4803      	ldr	r0, [pc, #12]	; (8002668 <getSafetymillivolts+0x14>)
 800265c:	f001 ff09 	bl	8004472 <cmr_sensorListGetValue>
 8002660:	4603      	mov	r3, r0
}
 8002662:	4618      	mov	r0, r3
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20007774 	.word	0x20007774

0800266c <getHVmillivolts>:

int32_t getHVmillivolts(){
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
    return ((int32_t) cmr_sensorListGetValue(&sensorList, SENSOR_CH_VSENSE));
 8002670:	2103      	movs	r1, #3
 8002672:	4803      	ldr	r0, [pc, #12]	; (8002680 <getHVmillivolts+0x14>)
 8002674:	f001 fefd 	bl	8004472 <cmr_sensorListGetValue>
 8002678:	4603      	mov	r3, r0
}
 800267a:	4618      	mov	r0, r3
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20007774 	.word	0x20007774

08002684 <getHVmilliamps>:

int32_t getHVmilliamps(){
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
    return ((int32_t) cmr_sensorListGetValue(&sensorList, SENSOR_CH_ISENSE));
 8002688:	2104      	movs	r1, #4
 800268a:	4803      	ldr	r0, [pc, #12]	; (8002698 <getHVmilliamps+0x14>)
 800268c:	f001 fef1 	bl	8004472 <cmr_sensorListGetValue>
 8002690:	4603      	mov	r3, r0
}
 8002692:	4618      	mov	r0, r3
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20007774 	.word	0x20007774

0800269c <getState>:

/*
 * External Accessor Functions
 */

cmr_canHVCState_t getState() {
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
    return currentState;
 80026a0:	4b03      	ldr	r3, [pc, #12]	; (80026b0 <getState+0x14>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	200087dc 	.word	0x200087dc

080026b4 <getNextState>:

/*
 * Helper Functions
 */

static cmr_canHVCState_t getNextState(cmr_canHVCError_t currentError){
 80026b4:	b590      	push	{r4, r7, lr}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	80fb      	strh	r3, [r7, #6]
    
    //Default to unknown state if no paths are satisfied.
    cmr_canHVCState_t nextState = CMR_CAN_HVC_STATE_UNKNOWN;
 80026be:	230c      	movs	r3, #12
 80026c0:	75fb      	strb	r3, [r7, #23]
    
    // initialize min/max cell voltage variables for next state logic
    uint16_t packMinCellVoltage;
    uint16_t packMaxCellVoltage;

    if (currentError != CMR_CAN_HVC_ERROR_NONE) {
 80026c2:	88fb      	ldrh	r3, [r7, #6]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <getNextState+0x18>
        // An error condition is active, stay in ERROR state
        return CMR_CAN_HVC_STATE_ERROR;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e141      	b.n	8002950 <getNextState+0x29c>
    }

    // Getting HVC Command
    volatile cmr_canHVCCommand_t *HVCCommand = getPayload(CANRX_HVC_COMMAND);
 80026cc:	2001      	movs	r0, #1
 80026ce:	f7ff fa91 	bl	8001bf4 <getPayload>
 80026d2:	6138      	str	r0, [r7, #16]
    
    switch (currentState) {
 80026d4:	4ba0      	ldr	r3, [pc, #640]	; (8002958 <getNextState+0x2a4>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b0b      	cmp	r3, #11
 80026da:	f200 8135 	bhi.w	8002948 <getNextState+0x294>
 80026de:	a201      	add	r2, pc, #4	; (adr r2, 80026e4 <getNextState+0x30>)
 80026e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e4:	0800291d 	.word	0x0800291d
 80026e8:	08002715 	.word	0x08002715
 80026ec:	0800271b 	.word	0x0800271b
 80026f0:	08002755 	.word	0x08002755
 80026f4:	080027af 	.word	0x080027af
 80026f8:	080027fd 	.word	0x080027fd
 80026fc:	08002813 	.word	0x08002813
 8002700:	08002861 	.word	0x08002861
 8002704:	08002899 	.word	0x08002899
 8002708:	080028c7 	.word	0x080028c7
 800270c:	080028f5 	.word	0x080028f5
 8002710:	08002933 	.word	0x08002933
        case CMR_CAN_HVC_STATE_DISCHARGE: // S1
            nextState = CMR_CAN_HVC_STATE_STANDBY;
 8002714:	2302      	movs	r3, #2
 8002716:	75fb      	strb	r3, [r7, #23]
            break;
 8002718:	e119      	b.n	800294e <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_STANDBY: // S2
            if (HVCCommand->modeRequest == CMR_CAN_HVC_MODE_START) {
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d107      	bne.n	8002734 <getNextState+0x80>
                //T1: START mode requested
                nextState = CMR_CAN_HVC_STATE_DRIVE_PRECHARGE;
 8002724:	2303      	movs	r3, #3
 8002726:	75fb      	strb	r3, [r7, #23]
                lastPrechargeTime = xTaskGetTickCount();
 8002728:	f003 f9fe 	bl	8005b28 <xTaskGetTickCount>
 800272c:	4603      	mov	r3, r0
 800272e:	4a8b      	ldr	r2, [pc, #556]	; (800295c <getNextState+0x2a8>)
 8002730:	6013      	str	r3, [r2, #0]
                nextState = CMR_CAN_HVC_STATE_CHARGE_PRECHARGE;
                lastPrechargeTime = xTaskGetTickCount();
            } else {
                nextState = CMR_CAN_HVC_STATE_STANDBY;
            }
            break;
 8002732:	e10c      	b.n	800294e <getNextState+0x29a>
            } else if (HVCCommand->modeRequest == CMR_CAN_HVC_MODE_CHARGE) {
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b08      	cmp	r3, #8
 800273c:	d107      	bne.n	800274e <getNextState+0x9a>
                nextState = CMR_CAN_HVC_STATE_CHARGE_PRECHARGE;
 800273e:	2306      	movs	r3, #6
 8002740:	75fb      	strb	r3, [r7, #23]
                lastPrechargeTime = xTaskGetTickCount();
 8002742:	f003 f9f1 	bl	8005b28 <xTaskGetTickCount>
 8002746:	4603      	mov	r3, r0
 8002748:	4a84      	ldr	r2, [pc, #528]	; (800295c <getNextState+0x2a8>)
 800274a:	6013      	str	r3, [r2, #0]
            break;
 800274c:	e0ff      	b.n	800294e <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_STANDBY;
 800274e:	2302      	movs	r3, #2
 8002750:	75fb      	strb	r3, [r7, #23]
            break;
 8002752:	e0fc      	b.n	800294e <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_DRIVE_PRECHARGE: // S3
            if (!(HVCCommand->modeRequest == CMR_CAN_HVC_MODE_START ||
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d007      	beq.n	800276e <getNextState+0xba>
                  HVCCommand->modeRequest == CMR_CAN_HVC_MODE_RUN)) {
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	b2db      	uxtb	r3, r3
            if (!(HVCCommand->modeRequest == CMR_CAN_HVC_MODE_START ||
 8002764:	2b04      	cmp	r3, #4
 8002766:	d002      	beq.n	800276e <getNextState+0xba>
                //T6: Mode requested is neither START nor RUN
                nextState = CMR_CAN_HVC_STATE_DISCHARGE;
 8002768:	2301      	movs	r3, #1
 800276a:	75fb      	strb	r3, [r7, #23]
 800276c:	e01e      	b.n	80027ac <getNextState+0xf8>
            } else if (xTaskGetTickCount() > lastPrechargeTime + 5000 && xTaskGetTickCount() < lastPrechargeTime + 6000) {
 800276e:	f003 f9db 	bl	8005b28 <xTaskGetTickCount>
 8002772:	4602      	mov	r2, r0
 8002774:	4b79      	ldr	r3, [pc, #484]	; (800295c <getNextState+0x2a8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800277c:	3308      	adds	r3, #8
 800277e:	429a      	cmp	r2, r3
 8002780:	d911      	bls.n	80027a6 <getNextState+0xf2>
 8002782:	f003 f9d1 	bl	8005b28 <xTaskGetTickCount>
 8002786:	4602      	mov	r2, r0
 8002788:	4b74      	ldr	r3, [pc, #464]	; (800295c <getNextState+0x2a8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8002790:	3310      	adds	r3, #16
 8002792:	429a      	cmp	r2, r3
 8002794:	d207      	bcs.n	80027a6 <getNextState+0xf2>
                //T2: HV rails are precharged to within 10000mV
                nextState = CMR_CAN_HVC_STATE_DRIVE_PRECHARGE_COMPLETE;
 8002796:	2304      	movs	r3, #4
 8002798:	75fb      	strb	r3, [r7, #23]
                lastPrechargeTime = xTaskGetTickCount();
 800279a:	f003 f9c5 	bl	8005b28 <xTaskGetTickCount>
 800279e:	4603      	mov	r3, r0
 80027a0:	4a6e      	ldr	r2, [pc, #440]	; (800295c <getNextState+0x2a8>)
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	e002      	b.n	80027ac <getNextState+0xf8>
            } else {
                nextState = CMR_CAN_HVC_STATE_DRIVE_PRECHARGE;
 80027a6:	2303      	movs	r3, #3
 80027a8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80027aa:	e0d0      	b.n	800294e <getNextState+0x29a>
 80027ac:	e0cf      	b.n	800294e <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_DRIVE_PRECHARGE_COMPLETE: // S4
            if (!(HVCCommand->modeRequest == CMR_CAN_HVC_MODE_START ||
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d007      	beq.n	80027c8 <getNextState+0x114>
                  HVCCommand->modeRequest == CMR_CAN_HVC_MODE_RUN)) {
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	b2db      	uxtb	r3, r3
            if (!(HVCCommand->modeRequest == CMR_CAN_HVC_MODE_START ||
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d002      	beq.n	80027c8 <getNextState+0x114>
                //T7: Mode requested is neither START nor RUN
                nextState = CMR_CAN_HVC_STATE_DISCHARGE;
 80027c2:	2301      	movs	r3, #1
 80027c4:	75fb      	strb	r3, [r7, #23]
 80027c6:	e018      	b.n	80027fa <getNextState+0x146>
            } else if ((HVCCommand->modeRequest == CMR_CAN_HVC_MODE_RUN) &&
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d110      	bne.n	80027f4 <getNextState+0x140>
                        abs(getBattMillivolts() - getHVmillivolts()) < 30000) {
 80027d2:	f7fe ff19 	bl	8001608 <getBattMillivolts>
 80027d6:	4604      	mov	r4, r0
 80027d8:	f7ff ff48 	bl	800266c <getHVmillivolts>
 80027dc:	4603      	mov	r3, r0
 80027de:	1ae3      	subs	r3, r4, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bfb8      	it	lt
 80027e4:	425b      	neglt	r3, r3
            } else if ((HVCCommand->modeRequest == CMR_CAN_HVC_MODE_RUN) &&
 80027e6:	f247 522f 	movw	r2, #29999	; 0x752f
 80027ea:	4293      	cmp	r3, r2
 80027ec:	dc02      	bgt.n	80027f4 <getNextState+0x140>
                // T3: Contactors are closed and RUN mode is requested
                nextState = CMR_CAN_HVC_STATE_DRIVE;
 80027ee:	2305      	movs	r3, #5
 80027f0:	75fb      	strb	r3, [r7, #23]
 80027f2:	e002      	b.n	80027fa <getNextState+0x146>
            } else {
                nextState = CMR_CAN_HVC_STATE_DRIVE_PRECHARGE_COMPLETE;
 80027f4:	2304      	movs	r3, #4
 80027f6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80027f8:	e0a9      	b.n	800294e <getNextState+0x29a>
 80027fa:	e0a8      	b.n	800294e <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_DRIVE: // S5
            if (HVCCommand->modeRequest != CMR_CAN_HVC_MODE_RUN) {
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b04      	cmp	r3, #4
 8002804:	d002      	beq.n	800280c <getNextState+0x158>
                // T8: Mode requested is not RUN
                nextState = CMR_CAN_HVC_STATE_DISCHARGE;
 8002806:	2301      	movs	r3, #1
 8002808:	75fb      	strb	r3, [r7, #23]
            } else {                
                nextState = CMR_CAN_HVC_STATE_DRIVE;
            }
            break;
 800280a:	e0a0      	b.n	800294e <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_DRIVE;
 800280c:	2305      	movs	r3, #5
 800280e:	75fb      	strb	r3, [r7, #23]
            break;
 8002810:	e09d      	b.n	800294e <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_CHARGE_PRECHARGE: // S6
            if (HVCCommand->modeRequest != CMR_CAN_HVC_MODE_CHARGE) {
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b08      	cmp	r3, #8
 800281a:	d002      	beq.n	8002822 <getNextState+0x16e>
                //T18: Mode requested is not CHARGE
                nextState = CMR_CAN_HVC_STATE_DISCHARGE;
 800281c:	2301      	movs	r3, #1
 800281e:	75fb      	strb	r3, [r7, #23]
                //T10: HV rails are precharged
                nextState = CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE;
            } else {
                nextState = CMR_CAN_HVC_STATE_CHARGE_PRECHARGE;
            }
            break;
 8002820:	e095      	b.n	800294e <getNextState+0x29a>
            } else if (xTaskGetTickCount() > lastPrechargeTime + 5000 && xTaskGetTickCount() < lastPrechargeTime + 6000) {
 8002822:	f003 f981 	bl	8005b28 <xTaskGetTickCount>
 8002826:	4602      	mov	r2, r0
 8002828:	4b4c      	ldr	r3, [pc, #304]	; (800295c <getNextState+0x2a8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002830:	3308      	adds	r3, #8
 8002832:	429a      	cmp	r2, r3
 8002834:	d911      	bls.n	800285a <getNextState+0x1a6>
 8002836:	f003 f977 	bl	8005b28 <xTaskGetTickCount>
 800283a:	4602      	mov	r2, r0
 800283c:	4b47      	ldr	r3, [pc, #284]	; (800295c <getNextState+0x2a8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8002844:	3310      	adds	r3, #16
 8002846:	429a      	cmp	r2, r3
 8002848:	d207      	bcs.n	800285a <getNextState+0x1a6>
            	lastPrechargeTime = xTaskGetTickCount();
 800284a:	f003 f96d 	bl	8005b28 <xTaskGetTickCount>
 800284e:	4603      	mov	r3, r0
 8002850:	4a42      	ldr	r2, [pc, #264]	; (800295c <getNextState+0x2a8>)
 8002852:	6013      	str	r3, [r2, #0]
                nextState = CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE;
 8002854:	2307      	movs	r3, #7
 8002856:	75fb      	strb	r3, [r7, #23]
            break;
 8002858:	e079      	b.n	800294e <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_CHARGE_PRECHARGE;
 800285a:	2306      	movs	r3, #6
 800285c:	75fb      	strb	r3, [r7, #23]
            break;
 800285e:	e076      	b.n	800294e <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE: // S7
            if (HVCCommand->modeRequest != CMR_CAN_HVC_MODE_CHARGE) {
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b08      	cmp	r3, #8
 8002868:	d002      	beq.n	8002870 <getNextState+0x1bc>
                // T17: Mode requested is not CHARGE
                nextState = CMR_CAN_HVC_STATE_DISCHARGE;
 800286a:	2301      	movs	r3, #1
 800286c:	75fb      	strb	r3, [r7, #23]
                // T11: Contactors are closed
                nextState = CMR_CAN_HVC_STATE_CHARGE_TRICKLE;
            } else {
                nextState = CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE;
            }
            break;
 800286e:	e06e      	b.n	800294e <getNextState+0x29a>
            } else if (abs(getBattMillivolts() - getHVmillivolts()) < 5000) {
 8002870:	f7fe feca 	bl	8001608 <getBattMillivolts>
 8002874:	4604      	mov	r4, r0
 8002876:	f7ff fef9 	bl	800266c <getHVmillivolts>
 800287a:	4603      	mov	r3, r0
 800287c:	1ae3      	subs	r3, r4, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	bfb8      	it	lt
 8002882:	425b      	neglt	r3, r3
 8002884:	f241 3287 	movw	r2, #4999	; 0x1387
 8002888:	4293      	cmp	r3, r2
 800288a:	dc02      	bgt.n	8002892 <getNextState+0x1de>
                nextState = CMR_CAN_HVC_STATE_CHARGE_TRICKLE;
 800288c:	2308      	movs	r3, #8
 800288e:	75fb      	strb	r3, [r7, #23]
            break;
 8002890:	e05d      	b.n	800294e <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE;
 8002892:	2307      	movs	r3, #7
 8002894:	75fb      	strb	r3, [r7, #23]
            break;
 8002896:	e05a      	b.n	800294e <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_CHARGE_TRICKLE: // S8
            // find lowest cell voltage among all BMBs
            packMinCellVoltage = getPackMinCellVoltage();
 8002898:	f7fe fe54 	bl	8001544 <getPackMinCellVoltage>
 800289c:	4603      	mov	r3, r0
 800289e:	81fb      	strh	r3, [r7, #14]

            if (HVCCommand->modeRequest != CMR_CAN_HVC_MODE_CHARGE) {
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d002      	beq.n	80028b0 <getNextState+0x1fc>
                // T16: Mode requested is not CHARGE
                nextState = CMR_CAN_HVC_STATE_DISCHARGE;
 80028aa:	2301      	movs	r3, #1
 80028ac:	75fb      	strb	r3, [r7, #23]
                // T12: Minimum cell voltage > 3V, begin full charging
                nextState = CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT;
            } else {
                nextState = CMR_CAN_HVC_STATE_CHARGE_TRICKLE;
            }
            break;
 80028ae:	e04e      	b.n	800294e <getNextState+0x29a>
            } else if (packMinCellVoltage >= 3000) {
 80028b0:	89fb      	ldrh	r3, [r7, #14]
 80028b2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d902      	bls.n	80028c0 <getNextState+0x20c>
                nextState = CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT;
 80028ba:	2309      	movs	r3, #9
 80028bc:	75fb      	strb	r3, [r7, #23]
            break;
 80028be:	e046      	b.n	800294e <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_CHARGE_TRICKLE;
 80028c0:	2308      	movs	r3, #8
 80028c2:	75fb      	strb	r3, [r7, #23]
            break;
 80028c4:	e043      	b.n	800294e <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT: // S9
            // find highest cell voltage among all BMBs
            packMaxCellVoltage = getPackMaxCellVoltage();
 80028c6:	f7fe fe0f 	bl	80014e8 <getPackMaxCellVoltage>
 80028ca:	4603      	mov	r3, r0
 80028cc:	81bb      	strh	r3, [r7, #12]

            if (HVCCommand->modeRequest != CMR_CAN_HVC_MODE_CHARGE) {
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d002      	beq.n	80028de <getNextState+0x22a>
                // T15: Mode requested is not CHARGE
                nextState = CMR_CAN_HVC_STATE_DISCHARGE;
 80028d8:	2301      	movs	r3, #1
 80028da:	75fb      	strb	r3, [r7, #23]
//                nextState = CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE;
                nextState = CMR_CAN_HVC_STATE_ERROR; // not balancing for now
            } else {
                nextState = CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT;
            }
            break;
 80028dc:	e037      	b.n	800294e <getNextState+0x29a>
            } else if (packMaxCellVoltage >= 4150) {
 80028de:	89bb      	ldrh	r3, [r7, #12]
 80028e0:	f241 0235 	movw	r2, #4149	; 0x1035
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d902      	bls.n	80028ee <getNextState+0x23a>
                nextState = CMR_CAN_HVC_STATE_ERROR; // not balancing for now
 80028e8:	2300      	movs	r3, #0
 80028ea:	75fb      	strb	r3, [r7, #23]
            break;
 80028ec:	e02f      	b.n	800294e <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT;
 80028ee:	2309      	movs	r3, #9
 80028f0:	75fb      	strb	r3, [r7, #23]
            break;
 80028f2:	e02c      	b.n	800294e <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE: // S10
            // find lowest cell voltage among all BMBs
            packMinCellVoltage = getPackMinCellVoltage();
 80028f4:	f7fe fe26 	bl	8001544 <getPackMinCellVoltage>
 80028f8:	4603      	mov	r3, r0
 80028fa:	81fb      	strh	r3, [r7, #14]

            if (HVCCommand->modeRequest != CMR_CAN_HVC_MODE_CHARGE || packMinCellVoltage >= 4145) {
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b08      	cmp	r3, #8
 8002904:	d104      	bne.n	8002910 <getNextState+0x25c>
 8002906:	89fb      	ldrh	r3, [r7, #14]
 8002908:	f241 0230 	movw	r2, #4144	; 0x1030
 800290c:	4293      	cmp	r3, r2
 800290e:	d902      	bls.n	8002916 <getNextState+0x262>
                //T14: Mode requested is not CHARGE or all cells fully charged
                nextState = CMR_CAN_HVC_STATE_DISCHARGE;
 8002910:	2301      	movs	r3, #1
 8002912:	75fb      	strb	r3, [r7, #23]
            } else {
                nextState = CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE;
            }
            break;
 8002914:	e01b      	b.n	800294e <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE;
 8002916:	230a      	movs	r3, #10
 8002918:	75fb      	strb	r3, [r7, #23]
            break;
 800291a:	e018      	b.n	800294e <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_ERROR: // S0
            if (HVCCommand->modeRequest == CMR_CAN_HVC_MODE_ERROR) {
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d102      	bne.n	800292c <getNextState+0x278>
                //T19: GLV acknowledged error, move to clear error
                nextState = CMR_CAN_HVC_STATE_CLEAR_ERROR;
 8002926:	230b      	movs	r3, #11
 8002928:	75fb      	strb	r3, [r7, #23]
            } else {
                nextState = CMR_CAN_HVC_STATE_ERROR;
            }
            break;  
 800292a:	e010      	b.n	800294e <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_ERROR;
 800292c:	2300      	movs	r3, #0
 800292e:	75fb      	strb	r3, [r7, #23]
            break;  
 8002930:	e00d      	b.n	800294e <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_CLEAR_ERROR: // S11
            if ((HVCCommand->modeRequest == CMR_CAN_HVC_MODE_IDLE) &&
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b01      	cmp	r3, #1
 800293a:	d102      	bne.n	8002942 <getNextState+0x28e>
                (true || getHVmillivolts()) < 5000) {
                //T4: GLV requesting idle and rails discharged
                nextState = CMR_CAN_HVC_STATE_STANDBY;
 800293c:	2302      	movs	r3, #2
 800293e:	75fb      	strb	r3, [r7, #23]
            } else {
                nextState = CMR_CAN_HVC_STATE_CLEAR_ERROR;
            }
            break;
 8002940:	e005      	b.n	800294e <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_CLEAR_ERROR;
 8002942:	230b      	movs	r3, #11
 8002944:	75fb      	strb	r3, [r7, #23]
            break;
 8002946:	e002      	b.n	800294e <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_UNKNOWN:
        default:
            nextState = CMR_CAN_HVC_STATE_UNKNOWN;
 8002948:	230c      	movs	r3, #12
 800294a:	75fb      	strb	r3, [r7, #23]
            break;
 800294c:	bf00      	nop
    }
    
    // Return the result of next state logic            
    return nextState;    
 800294e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002950:	4618      	mov	r0, r3
 8002952:	371c      	adds	r7, #28
 8002954:	46bd      	mov	sp, r7
 8002956:	bd90      	pop	{r4, r7, pc}
 8002958:	200087dc 	.word	0x200087dc
 800295c:	200087e0 	.word	0x200087e0

08002960 <setStateOutput>:

static cmr_canHVCState_t setStateOutput(){
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0

    //Note: For relay action, set all opens before closes to avoid shorts
    switch (currentState) {
 8002964:	4b94      	ldr	r3, [pc, #592]	; (8002bb8 <setStateOutput+0x258>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b0b      	cmp	r3, #11
 800296a:	f200 810d 	bhi.w	8002b88 <setStateOutput+0x228>
 800296e:	a201      	add	r2, pc, #4	; (adr r2, 8002974 <setStateOutput+0x14>)
 8002970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002974:	08002b35 	.word	0x08002b35
 8002978:	080029a5 	.word	0x080029a5
 800297c:	080029cd 	.word	0x080029cd
 8002980:	080029f5 	.word	0x080029f5
 8002984:	08002a1d 	.word	0x08002a1d
 8002988:	08002a45 	.word	0x08002a45
 800298c:	08002a6d 	.word	0x08002a6d
 8002990:	08002a95 	.word	0x08002a95
 8002994:	08002abd 	.word	0x08002abd
 8002998:	08002ae5 	.word	0x08002ae5
 800299c:	08002b0d 	.word	0x08002b0d
 80029a0:	08002b5d 	.word	0x08002b5d
        case CMR_CAN_HVC_STATE_DISCHARGE: // S1
            setRelay(AIR_POS_RELAY, OPEN);
 80029a4:	2101      	movs	r1, #1
 80029a6:	2003      	movs	r0, #3
 80029a8:	f7fe ff68 	bl	800187c <setRelay>
            setRelay(AIR_NEG_RELAY, OPEN);
 80029ac:	2101      	movs	r1, #1
 80029ae:	2002      	movs	r0, #2
 80029b0:	f7fe ff64 	bl	800187c <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 80029b4:	2101      	movs	r1, #1
 80029b6:	2001      	movs	r0, #1
 80029b8:	f7fe ff60 	bl	800187c <setRelay>
            setRelay(DISCHARGE_RELAY, CLOSED);
 80029bc:	2102      	movs	r1, #2
 80029be:	2000      	movs	r0, #0
 80029c0:	f7fe ff5c 	bl	800187c <setRelay>
            clearHardwareFault(false);
 80029c4:	2000      	movs	r0, #0
 80029c6:	f7fe ff05 	bl	80017d4 <clearHardwareFault>
            break;
 80029ca:	e0f1      	b.n	8002bb0 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_STANDBY: // S2
            setRelay(AIR_POS_RELAY, OPEN);
 80029cc:	2101      	movs	r1, #1
 80029ce:	2003      	movs	r0, #3
 80029d0:	f7fe ff54 	bl	800187c <setRelay>
            setRelay(AIR_NEG_RELAY, OPEN);
 80029d4:	2101      	movs	r1, #1
 80029d6:	2002      	movs	r0, #2
 80029d8:	f7fe ff50 	bl	800187c <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 80029dc:	2101      	movs	r1, #1
 80029de:	2001      	movs	r0, #1
 80029e0:	f7fe ff4c 	bl	800187c <setRelay>
            setRelay(DISCHARGE_RELAY, CLOSED);
 80029e4:	2102      	movs	r1, #2
 80029e6:	2000      	movs	r0, #0
 80029e8:	f7fe ff48 	bl	800187c <setRelay>
            clearHardwareFault(false);
 80029ec:	2000      	movs	r0, #0
 80029ee:	f7fe fef1 	bl	80017d4 <clearHardwareFault>
            break;
 80029f2:	e0dd      	b.n	8002bb0 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_DRIVE_PRECHARGE: // S3
            setRelay(DISCHARGE_RELAY, OPEN);
 80029f4:	2101      	movs	r1, #1
 80029f6:	2000      	movs	r0, #0
 80029f8:	f7fe ff40 	bl	800187c <setRelay>
            setRelay(AIR_POS_RELAY, OPEN);
 80029fc:	2101      	movs	r1, #1
 80029fe:	2003      	movs	r0, #3
 8002a00:	f7fe ff3c 	bl	800187c <setRelay>
            setRelay(AIR_NEG_RELAY, CLOSED);
 8002a04:	2102      	movs	r1, #2
 8002a06:	2002      	movs	r0, #2
 8002a08:	f7fe ff38 	bl	800187c <setRelay>
            setRelay(PRECHARGE_RELAY, CLOSED);
 8002a0c:	2102      	movs	r1, #2
 8002a0e:	2001      	movs	r0, #1
 8002a10:	f7fe ff34 	bl	800187c <setRelay>
            clearHardwareFault(false);
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7fe fedd 	bl	80017d4 <clearHardwareFault>
            break;
 8002a1a:	e0c9      	b.n	8002bb0 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_DRIVE_PRECHARGE_COMPLETE: // S4
            setRelay(DISCHARGE_RELAY, OPEN);
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f7fe ff2c 	bl	800187c <setRelay>
            setRelay(AIR_POS_RELAY, CLOSED);
 8002a24:	2102      	movs	r1, #2
 8002a26:	2003      	movs	r0, #3
 8002a28:	f7fe ff28 	bl	800187c <setRelay>
            setRelay(AIR_NEG_RELAY, CLOSED);
 8002a2c:	2102      	movs	r1, #2
 8002a2e:	2002      	movs	r0, #2
 8002a30:	f7fe ff24 	bl	800187c <setRelay>
            setRelay(PRECHARGE_RELAY, CLOSED);
 8002a34:	2102      	movs	r1, #2
 8002a36:	2001      	movs	r0, #1
 8002a38:	f7fe ff20 	bl	800187c <setRelay>
            clearHardwareFault(false);
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f7fe fec9 	bl	80017d4 <clearHardwareFault>
            break;
 8002a42:	e0b5      	b.n	8002bb0 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_DRIVE: // S5
            setRelay(DISCHARGE_RELAY, OPEN);
 8002a44:	2101      	movs	r1, #1
 8002a46:	2000      	movs	r0, #0
 8002a48:	f7fe ff18 	bl	800187c <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	2001      	movs	r0, #1
 8002a50:	f7fe ff14 	bl	800187c <setRelay>
            setRelay(AIR_POS_RELAY, CLOSED);
 8002a54:	2102      	movs	r1, #2
 8002a56:	2003      	movs	r0, #3
 8002a58:	f7fe ff10 	bl	800187c <setRelay>
            setRelay(AIR_NEG_RELAY, CLOSED);
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	2002      	movs	r0, #2
 8002a60:	f7fe ff0c 	bl	800187c <setRelay>
            clearHardwareFault(false);
 8002a64:	2000      	movs	r0, #0
 8002a66:	f7fe feb5 	bl	80017d4 <clearHardwareFault>
            break;
 8002a6a:	e0a1      	b.n	8002bb0 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_CHARGE_PRECHARGE: // S6
            setRelay(DISCHARGE_RELAY, OPEN);
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f7fe ff04 	bl	800187c <setRelay>
            setRelay(AIR_POS_RELAY, OPEN);
 8002a74:	2101      	movs	r1, #1
 8002a76:	2003      	movs	r0, #3
 8002a78:	f7fe ff00 	bl	800187c <setRelay>
            setRelay(AIR_NEG_RELAY, CLOSED);
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	2002      	movs	r0, #2
 8002a80:	f7fe fefc 	bl	800187c <setRelay>
            setRelay(PRECHARGE_RELAY, CLOSED);
 8002a84:	2102      	movs	r1, #2
 8002a86:	2001      	movs	r0, #1
 8002a88:	f7fe fef8 	bl	800187c <setRelay>
            clearHardwareFault(false);
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f7fe fea1 	bl	80017d4 <clearHardwareFault>
            break;
 8002a92:	e08d      	b.n	8002bb0 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE: // S7
            setRelay(DISCHARGE_RELAY, OPEN);
 8002a94:	2101      	movs	r1, #1
 8002a96:	2000      	movs	r0, #0
 8002a98:	f7fe fef0 	bl	800187c <setRelay>
            setRelay(AIR_POS_RELAY, CLOSED);
 8002a9c:	2102      	movs	r1, #2
 8002a9e:	2003      	movs	r0, #3
 8002aa0:	f7fe feec 	bl	800187c <setRelay>
            setRelay(AIR_NEG_RELAY, CLOSED);
 8002aa4:	2102      	movs	r1, #2
 8002aa6:	2002      	movs	r0, #2
 8002aa8:	f7fe fee8 	bl	800187c <setRelay>
            setRelay(PRECHARGE_RELAY, CLOSED);
 8002aac:	2102      	movs	r1, #2
 8002aae:	2001      	movs	r0, #1
 8002ab0:	f7fe fee4 	bl	800187c <setRelay>
            clearHardwareFault(false);
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f7fe fe8d 	bl	80017d4 <clearHardwareFault>
            break;
 8002aba:	e079      	b.n	8002bb0 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_CHARGE_TRICKLE: // S8
            setRelay(DISCHARGE_RELAY, OPEN);
 8002abc:	2101      	movs	r1, #1
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f7fe fedc 	bl	800187c <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	f7fe fed8 	bl	800187c <setRelay>
            setRelay(AIR_POS_RELAY, CLOSED);
 8002acc:	2102      	movs	r1, #2
 8002ace:	2003      	movs	r0, #3
 8002ad0:	f7fe fed4 	bl	800187c <setRelay>
            setRelay(AIR_NEG_RELAY, CLOSED);
 8002ad4:	2102      	movs	r1, #2
 8002ad6:	2002      	movs	r0, #2
 8002ad8:	f7fe fed0 	bl	800187c <setRelay>
            clearHardwareFault(false);
 8002adc:	2000      	movs	r0, #0
 8002ade:	f7fe fe79 	bl	80017d4 <clearHardwareFault>
            break;
 8002ae2:	e065      	b.n	8002bb0 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT: // S9
            setRelay(DISCHARGE_RELAY, OPEN);
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f7fe fec8 	bl	800187c <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002aec:	2101      	movs	r1, #1
 8002aee:	2001      	movs	r0, #1
 8002af0:	f7fe fec4 	bl	800187c <setRelay>
            setRelay(AIR_POS_RELAY, CLOSED);
 8002af4:	2102      	movs	r1, #2
 8002af6:	2003      	movs	r0, #3
 8002af8:	f7fe fec0 	bl	800187c <setRelay>
            setRelay(AIR_NEG_RELAY, CLOSED);
 8002afc:	2102      	movs	r1, #2
 8002afe:	2002      	movs	r0, #2
 8002b00:	f7fe febc 	bl	800187c <setRelay>
            clearHardwareFault(false);
 8002b04:	2000      	movs	r0, #0
 8002b06:	f7fe fe65 	bl	80017d4 <clearHardwareFault>
            break;
 8002b0a:	e051      	b.n	8002bb0 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE: // S10
            setRelay(DISCHARGE_RELAY, OPEN);
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f7fe feb4 	bl	800187c <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002b14:	2101      	movs	r1, #1
 8002b16:	2001      	movs	r0, #1
 8002b18:	f7fe feb0 	bl	800187c <setRelay>
            setRelay(AIR_POS_RELAY, CLOSED);
 8002b1c:	2102      	movs	r1, #2
 8002b1e:	2003      	movs	r0, #3
 8002b20:	f7fe feac 	bl	800187c <setRelay>
            setRelay(AIR_NEG_RELAY, CLOSED);
 8002b24:	2102      	movs	r1, #2
 8002b26:	2002      	movs	r0, #2
 8002b28:	f7fe fea8 	bl	800187c <setRelay>
            clearHardwareFault(false);
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f7fe fe51 	bl	80017d4 <clearHardwareFault>
            break;
 8002b32:	e03d      	b.n	8002bb0 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_ERROR: // S0
            // Note, relays will not powered, as
            // the fault cuts their supply
            setRelay(AIR_POS_RELAY, OPEN);
 8002b34:	2101      	movs	r1, #1
 8002b36:	2003      	movs	r0, #3
 8002b38:	f7fe fea0 	bl	800187c <setRelay>
            setRelay(AIR_NEG_RELAY, OPEN);
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	2002      	movs	r0, #2
 8002b40:	f7fe fe9c 	bl	800187c <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002b44:	2101      	movs	r1, #1
 8002b46:	2001      	movs	r0, #1
 8002b48:	f7fe fe98 	bl	800187c <setRelay>
            setRelay(DISCHARGE_RELAY, CLOSED);
 8002b4c:	2102      	movs	r1, #2
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f7fe fe94 	bl	800187c <setRelay>
            clearHardwareFault(false);
 8002b54:	2000      	movs	r0, #0
 8002b56:	f7fe fe3d 	bl	80017d4 <clearHardwareFault>
            // Its possible that in some error cases we might want to
            // open the contactors without cutting their power.
            // For now, take the more definitive approach
            break;
 8002b5a:	e029      	b.n	8002bb0 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_CLEAR_ERROR: // S11
            setRelay(AIR_POS_RELAY, OPEN);
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	2003      	movs	r0, #3
 8002b60:	f7fe fe8c 	bl	800187c <setRelay>
            setRelay(AIR_NEG_RELAY, OPEN);
 8002b64:	2101      	movs	r1, #1
 8002b66:	2002      	movs	r0, #2
 8002b68:	f7fe fe88 	bl	800187c <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	2001      	movs	r0, #1
 8002b70:	f7fe fe84 	bl	800187c <setRelay>
            setRelay(DISCHARGE_RELAY, CLOSED);
 8002b74:	2102      	movs	r1, #2
 8002b76:	2000      	movs	r0, #0
 8002b78:	f7fe fe80 	bl	800187c <setRelay>
            clearErrorReg();
 8002b7c:	f7fe fe40 	bl	8001800 <clearErrorReg>
            clearHardwareFault(true);
 8002b80:	2001      	movs	r0, #1
 8002b82:	f7fe fe27 	bl	80017d4 <clearHardwareFault>
            break;
 8002b86:	e013      	b.n	8002bb0 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_UNKNOWN:
        default:
            setRelay(AIR_POS_RELAY, OPEN);
 8002b88:	2101      	movs	r1, #1
 8002b8a:	2003      	movs	r0, #3
 8002b8c:	f7fe fe76 	bl	800187c <setRelay>
            setRelay(AIR_NEG_RELAY, OPEN);
 8002b90:	2101      	movs	r1, #1
 8002b92:	2002      	movs	r0, #2
 8002b94:	f7fe fe72 	bl	800187c <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002b98:	2101      	movs	r1, #1
 8002b9a:	2001      	movs	r0, #1
 8002b9c:	f7fe fe6e 	bl	800187c <setRelay>
            setRelay(DISCHARGE_RELAY, CLOSED);
 8002ba0:	2102      	movs	r1, #2
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f7fe fe6a 	bl	800187c <setRelay>
            clearHardwareFault(false);
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f7fe fe13 	bl	80017d4 <clearHardwareFault>
            break;
 8002bae:	bf00      	nop
    }
    
    return currentState;
 8002bb0:	4b01      	ldr	r3, [pc, #4]	; (8002bb8 <setStateOutput+0x258>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	200087dc 	.word	0x200087dc

08002bbc <vSetStateTask>:

/*
 * Task function
 */

void vSetStateTask(void *pvParameters) {
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
    // Make compiler happy
    (void) pvParameters;

    // Previous wake time pointer, initialized to current tick count.
    // This gets updated by vTaskDelayUntil every time it is called
    TickType_t xLastWakeTime = xTaskGetTickCount();
 8002bc4:	f002 ffb0 	bl	8005b28 <xTaskGetTickCount>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	60fb      	str	r3, [r7, #12]

    // Period
    const TickType_t xPeriod = 10;        // In ticks (ms)
 8002bcc:	230a      	movs	r3, #10
 8002bce:	617b      	str	r3, [r7, #20]

    cmr_canHVCState_t nextState;
    cmr_canHVCError_t currentError = CMR_CAN_HVC_ERROR_NONE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	827b      	strh	r3, [r7, #18]

    cmr_gpioWrite(GPIO_CLEAR_FAULT_L, 1);
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	2004      	movs	r0, #4
 8002bd8:	f001 f8e2 	bl	8003da0 <cmr_gpioWrite>
    cmr_gpioWrite(GPIO_AIR_POSITIVE_EN, 1);
 8002bdc:	2101      	movs	r1, #1
 8002bde:	2008      	movs	r0, #8
 8002be0:	f001 f8de 	bl	8003da0 <cmr_gpioWrite>
    cmr_gpioWrite(GPIO_AIR_NEGATIVE_EN, 1);
 8002be4:	2101      	movs	r1, #1
 8002be6:	2009      	movs	r0, #9
 8002be8:	f001 f8da 	bl	8003da0 <cmr_gpioWrite>
    cmr_gpioWrite(GPIO_AMS_EN_L, 0); // set power on for the HVC
 8002bec:	2100      	movs	r1, #0
 8002bee:	2002      	movs	r0, #2
 8002bf0:	f001 f8d6 	bl	8003da0 <cmr_gpioWrite>
    // Executes infinitely with defined period using vTaskDelayUntil
    for (;;) {

        // Ask Deepak ab getting rid of this
        //Critical block so that the contents of the heartbeat are consistent
        taskENTER_CRITICAL();
 8002bf4:	f003 fc56 	bl	80064a4 <vPortEnterCritical>
        setStateOutput();
 8002bf8:	f7ff feb2 	bl	8002960 <setStateOutput>
        // HVCHeartbeat->errorStatus = __REVSH(currentError);
        // HVCHeartbeat->state = currentState;
        // HVCHeartbeat->contactorStatus = getRelayStatus();
        taskEXIT_CRITICAL();
 8002bfc:	f003 fc7c 	bl	80064f8 <vPortExitCritical>
        

        currentError = checkErrors(currentState);
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <vSetStateTask+0x74>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe fd53 	bl	80016b0 <checkErrors>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	827b      	strh	r3, [r7, #18]
        nextState = getNextState(currentError);
 8002c0e:	8a7b      	ldrh	r3, [r7, #18]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fd4f 	bl	80026b4 <getNextState>
 8002c16:	4603      	mov	r3, r0
 8002c18:	747b      	strb	r3, [r7, #17]

        currentState = nextState;
 8002c1a:	4a05      	ldr	r2, [pc, #20]	; (8002c30 <vSetStateTask+0x74>)
 8002c1c:	7c7b      	ldrb	r3, [r7, #17]
 8002c1e:	7013      	strb	r3, [r2, #0]

        // Delay until next period
        vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8002c20:	f107 030c 	add.w	r3, r7, #12
 8002c24:	6979      	ldr	r1, [r7, #20]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f002 fe08 	bl	800583c <vTaskDelayUntil>
        taskENTER_CRITICAL();
 8002c2c:	e7e2      	b.n	8002bf4 <vSetStateTask+0x38>
 8002c2e:	bf00      	nop
 8002c30:	200087dc 	.word	0x200087dc

08002c34 <cmr_adcSample>:
 *
 * @param pvParameters (cmr_adc_t *) The ADC.
 *
 * @return Does not return.
 */
static void cmr_adcSample(void *pvParameters) {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
    cmr_adc_t *adc = (cmr_adc_t *) pvParameters;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	613b      	str	r3, [r7, #16]

    TickType_t lastWakeTime = xTaskGetTickCount();
 8002c40:	f002 ff72 	bl	8005b28 <xTaskGetTickCount>
 8002c44:	4603      	mov	r3, r0
 8002c46:	60bb      	str	r3, [r7, #8]
    while (1) {
        // ADC set up in discontinuous scan mode.
        // Each `HAL_ADC_Start()` call converts the next-highest-rank channel.
        for (size_t i = 0; i < adc->channelsLen; i++) {
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	e01c      	b.n	8002c88 <cmr_adcSample+0x54>
            cmr_adcChannel_t *channel = &(adc->channels[i]);
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	60fb      	str	r3, [r7, #12]

            HAL_ADC_Start(&adc->handle);
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f003 fe0a 	bl	800687c <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&adc->handle, CMR_ADC_TIMEOUT_MS);
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f003 feaa 	bl	80069c8 <HAL_ADC_PollForConversion>
            channel->value = HAL_ADC_GetValue(&adc->handle);
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f003 ff2a 	bl	8006ad0 <HAL_ADC_GetValue>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	611a      	str	r2, [r3, #16]
        for (size_t i = 0; i < adc->channelsLen; i++) {
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	3301      	adds	r3, #1
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d3dd      	bcc.n	8002c4e <cmr_adcSample+0x1a>
        }

        vTaskDelayUntil(&lastWakeTime, cmr_adcSample_period_ms);
 8002c92:	220a      	movs	r2, #10
 8002c94:	f107 0308 	add.w	r3, r7, #8
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f002 fdce 	bl	800583c <vTaskDelayUntil>
        for (size_t i = 0; i < adc->channelsLen; i++) {
 8002ca0:	e7d2      	b.n	8002c48 <cmr_adcSample+0x14>
	...

08002ca4 <cmr_adcConfigChannels>:
/**
 * @brief Initializes ADC channel sequence.
 *
 * @param adc The ADC to configure.
 */
static void cmr_adcConfigChannels(cmr_adc_t *adc) {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08e      	sub	sp, #56	; 0x38
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < adc->channelsLen; i++) {
 8002cac:	2300      	movs	r3, #0
 8002cae:	637b      	str	r3, [r7, #52]	; 0x34
 8002cb0:	e03a      	b.n	8002d28 <cmr_adcConfigChannels+0x84>
        const cmr_adcChannel_t *channel = adc->channels + i;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002cb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	633b      	str	r3, [r7, #48]	; 0x30
        if (channel->channel > ADC_CHANNEL_15) {
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b0f      	cmp	r3, #15
 8002cca:	d902      	bls.n	8002cd2 <cmr_adcConfigChannels+0x2e>
            cmr_panic("Invalid ADC channel!");
 8002ccc:	481b      	ldr	r0, [pc, #108]	; (8002d3c <cmr_adcConfigChannels+0x98>)
 8002cce:	f001 fa7c 	bl	80041ca <cmr_panic>
        }

        // Rank goes from 1 to 16
        ADC_ChannelConfTypeDef channelConfig = _platform_adcChannelConfig(channel, (uint32_t) i+1);
 8002cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	f107 0320 	add.w	r3, r7, #32
 8002cda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 fecb 	bl	8003a78 <_platform_adcChannelConfig>

        if (HAL_ADC_ConfigChannel(&adc->handle, &channelConfig) != HAL_OK) {
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f107 0220 	add.w	r2, r7, #32
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f003 fefe 	bl	8006aec <HAL_ADC_ConfigChannel>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <cmr_adcConfigChannels+0x58>
            cmr_panic("HAL_ADC_ConfigChannel() failed!");
 8002cf6:	4812      	ldr	r0, [pc, #72]	; (8002d40 <cmr_adcConfigChannels+0x9c>)
 8002cf8:	f001 fa67 	bl	80041ca <cmr_panic>
        }

        // Configure the pin for analog use.
        cmr_rccGPIOClockEnable(channel->port);
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f001 fa6e 	bl	80041e2 <cmr_rccGPIOClockEnable>

        GPIO_InitTypeDef pinConfig = _platform_adcPinConfig(channel);
 8002d06:	f107 030c 	add.w	r3, r7, #12
 8002d0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 fecf 	bl	8003ab0 <_platform_adcPinConfig>

        HAL_GPIO_Init(channel->port, &pinConfig);
 8002d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f107 020c 	add.w	r2, r7, #12
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f005 fa97 	bl	8008250 <HAL_GPIO_Init>
    for (size_t i = 0; i < adc->channelsLen; i++) {
 8002d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d24:	3301      	adds	r3, #1
 8002d26:	637b      	str	r3, [r7, #52]	; 0x34
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d3bf      	bcc.n	8002cb2 <cmr_adcConfigChannels+0xe>
    }
}
 8002d32:	bf00      	nop
 8002d34:	bf00      	nop
 8002d36:	3738      	adds	r7, #56	; 0x38
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	0800bd60 	.word	0x0800bd60
 8002d40:	0800bd78 	.word	0x0800bd78

08002d44 <cmr_adcInit>:
 * @param channelsLen Length of channels array.
 */
void cmr_adcInit(
    cmr_adc_t *adc, ADC_TypeDef *instance,
    cmr_adcChannel_t *channels, const size_t channelsLen
) {
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
    if (channelsLen > CMR_ADC_CHANNELS) {
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b10      	cmp	r3, #16
 8002d56:	d902      	bls.n	8002d5e <cmr_adcInit+0x1a>
        cmr_panic("Too many channels");
 8002d58:	4813      	ldr	r0, [pc, #76]	; (8002da8 <cmr_adcInit+0x64>)
 8002d5a:	f001 fa36 	bl	80041ca <cmr_panic>
    }

    _platform_adcInit(adc, instance, channels, channelsLen);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	68b9      	ldr	r1, [r7, #8]
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 fee3 	bl	8003b30 <_platform_adcInit>

    cmr_rccADCClockEnable(instance);
 8002d6a:	68b8      	ldr	r0, [r7, #8]
 8002d6c:	f001 fa44 	bl	80041f8 <cmr_rccADCClockEnable>

    if (HAL_ADC_Init(&adc->handle) != HAL_OK) {
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f003 fd34 	bl	80067e0 <HAL_ADC_Init>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <cmr_adcInit+0x40>
        cmr_panic("HAL_ADC_Init() failed!");
 8002d7e:	480b      	ldr	r0, [pc, #44]	; (8002dac <cmr_adcInit+0x68>)
 8002d80:	f001 fa23 	bl	80041ca <cmr_panic>
    }

    cmr_adcConfigChannels(adc);
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f7ff ff8d 	bl	8002ca4 <cmr_adcConfigChannels>

    cmr_taskInit(
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8002d90:	2205      	movs	r2, #5
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <cmr_adcInit+0x6c>)
 8002d98:	4906      	ldr	r1, [pc, #24]	; (8002db4 <cmr_adcInit+0x70>)
 8002d9a:	f001 fb7f 	bl	800449c <cmr_taskInit>
        "ADC sample",
        cmr_adcSample_priority,
        cmr_adcSample,
        adc
    );
}
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	0800bd98 	.word	0x0800bd98
 8002dac:	0800bdac 	.word	0x0800bdac
 8002db0:	08002c35 	.word	0x08002c35
 8002db4:	0800bdc4 	.word	0x0800bdc4

08002db8 <cmr_canFromHandle>:
 *
 * @param handle The handle.
 *
 * @return The interface.
 */
static cmr_can_t *cmr_canFromHandle(CAN_HandleTypeDef *handle) {
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
    char *addr = (void *) handle;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	60fb      	str	r3, [r7, #12]
    return (void *) (addr - offsetof(cmr_can_t, handle));
 8002dc4:	68fb      	ldr	r3, [r7, #12]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <cmr_canTXCpltCallback>:
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL CAN handle.
 * @param mailbox The completed mailbox.
 */
static void cmr_canTXCpltCallback(CAN_HandleTypeDef *handle, size_t mailbox) {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
    (void) mailbox;     // Placate compiler.
    cmr_can_t *can = cmr_canFromHandle(handle);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff ffea 	bl	8002db8 <cmr_canFromHandle>
 8002de4:	60f8      	str	r0, [r7, #12]

    // Indicate completion.
    BaseType_t higherWoken;
    if (xSemaphoreGiveFromISR(can->txSem, &higherWoken) != pdTRUE) {
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	f107 0208 	add.w	r2, r7, #8
 8002dee:	4611      	mov	r1, r2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f002 f933 	bl	800505c <xQueueGiveFromISR>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d002      	beq.n	8002e02 <cmr_canTXCpltCallback+0x2e>
        cmr_panic("TX semaphore released too many times!");
 8002dfc:	4808      	ldr	r0, [pc, #32]	; (8002e20 <cmr_canTXCpltCallback+0x4c>)
 8002dfe:	f001 f9e4 	bl	80041ca <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d007      	beq.n	8002e18 <cmr_canTXCpltCallback+0x44>
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <cmr_canTXCpltCallback+0x50>)
 8002e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	f3bf 8f6f 	isb	sy
}
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	0800bdd0 	.word	0x0800bdd0
 8002e24:	e000ed04 	.word	0xe000ed04

08002e28 <HAL_CAN_TxMailbox0CompleteCallback>:
        CAN_HandleTypeDef *handle \
    ) { \
        /* Treat abort as complete. */ \
        cmr_canTXCpltCallback(handle, mailbox); \
    }
CAN_TX_MAILBOX_CALLBACK(0)
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	2100      	movs	r1, #0
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ffce 	bl	8002dd4 <cmr_canTXCpltCallback>
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_CAN_TxMailbox0AbortCallback>:
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	2100      	movs	r1, #0
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff ffc2 	bl	8002dd4 <cmr_canTXCpltCallback>
 8002e50:	bf00      	nop
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_CAN_TxMailbox1CompleteCallback>:
CAN_TX_MAILBOX_CALLBACK(1)
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	2101      	movs	r1, #1
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff ffb6 	bl	8002dd4 <cmr_canTXCpltCallback>
 8002e68:	bf00      	nop
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_CAN_TxMailbox1AbortCallback>:
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	2101      	movs	r1, #1
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff ffaa 	bl	8002dd4 <cmr_canTXCpltCallback>
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_CAN_TxMailbox2CompleteCallback>:
CAN_TX_MAILBOX_CALLBACK(2)
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	2102      	movs	r1, #2
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff ff9e 	bl	8002dd4 <cmr_canTXCpltCallback>
 8002e98:	bf00      	nop
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_CAN_TxMailbox2AbortCallback>:
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	2102      	movs	r1, #2
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff ff92 	bl	8002dd4 <cmr_canTXCpltCallback>
 8002eb0:	bf00      	nop
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_CAN_ErrorCallback>:
 * @brief HAL CAN error callback.
 *
 * @warning Called from an interrupt handler!
 * @warning The handle must have been configured through this library!
 */
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *handle) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
    cmr_can_t *can = cmr_canFromHandle(handle);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7ff ff79 	bl	8002db8 <cmr_canFromHandle>
 8002ec6:	6178      	str	r0, [r7, #20]

    uint32_t error = handle->ErrorCode;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	613b      	str	r3, [r7, #16]
    if (error & (
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f403 33fc 	and.w	r3, r3, #129024	; 0x1f800
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d018      	beq.n	8002f0a <HAL_CAN_ErrorCallback+0x52>
            HAL_CAN_ERROR_TX_TERR1 |
            HAL_CAN_ERROR_TX_TERR2
    )) {
        // Transmit error; drop semaphore.
        BaseType_t higherWoken;
        if (xSemaphoreGiveFromISR(can->txSem, &higherWoken) != pdTRUE) {
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	f107 020c 	add.w	r2, r7, #12
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f002 f8ba 	bl	800505c <xQueueGiveFromISR>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d002      	beq.n	8002ef4 <HAL_CAN_ErrorCallback+0x3c>
            cmr_panic("TX semaphore released too many times!");
 8002eee:	480a      	ldr	r0, [pc, #40]	; (8002f18 <HAL_CAN_ErrorCallback+0x60>)
 8002ef0:	f001 f96b 	bl	80041ca <cmr_panic>
        }
        portYIELD_FROM_ISR(higherWoken);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d007      	beq.n	8002f0a <HAL_CAN_ErrorCallback+0x52>
 8002efa:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <HAL_CAN_ErrorCallback+0x64>)
 8002efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	f3bf 8f4f 	dsb	sy
 8002f06:	f3bf 8f6f 	isb	sy
    }

    // Clear errors.
    handle->ErrorCode = 0;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002f10:	bf00      	nop
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	0800bdd0 	.word	0x0800bdd0
 8002f1c:	e000ed04 	.word	0xe000ed04

08002f20 <cmr_canTimeout>:
 *
 * @return A negative value if a timeout has occurred; otherwise 0.
 */
static int cmr_canTimeout(
    TickType_t lastReceived_ms, TickType_t threshold_ms, TickType_t now_ms
) {
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
    TickType_t release_ms = lastReceived_ms + threshold_ms;
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	4413      	add	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]

    if (now_ms < lastReceived_ms && release_ms <= lastReceived_ms) {
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d206      	bcs.n	8002f4a <cmr_canTimeout+0x2a>
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d802      	bhi.n	8002f4a <cmr_canTimeout+0x2a>
        // Current time overflowed; release did not. Timeout!
        return -1;
 8002f44:	f04f 33ff 	mov.w	r3, #4294967295
 8002f48:	e011      	b.n	8002f6e <cmr_canTimeout+0x4e>
    }

    if (lastReceived_ms <= now_ms && release_ms < lastReceived_ms) {
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d805      	bhi.n	8002f5e <cmr_canTimeout+0x3e>
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d201      	bcs.n	8002f5e <cmr_canTimeout+0x3e>
        // Current time did not overflow; release time did. No timeout.
        return 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e007      	b.n	8002f6e <cmr_canTimeout+0x4e>
    }

    // Neither current nor release overflowed, or both have.
    // In either case, release less than current indicates timeout.
    if (release_ms < now_ms) {
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d202      	bcs.n	8002f6c <cmr_canTimeout+0x4c>
        return -1;
 8002f66:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6a:	e000      	b.n	8002f6e <cmr_canTimeout+0x4e>
    }

    return 0;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	371c      	adds	r7, #28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <cmr_canRXMetaTimeoutError>:
 * @param meta The periodic message's reception metadata.
 * @param now_ms Current timestamp, in milliseconds.
 *
 * @return A negative value if a timeout error has occurred; otherwise 0.
 */
int cmr_canRXMetaTimeoutError(const cmr_canRXMeta_t *meta, TickType_t now_ms) {
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	6039      	str	r1, [r7, #0]
    return cmr_canTimeout(
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6958      	ldr	r0, [r3, #20]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f7ff ffc6 	bl	8002f20 <cmr_canTimeout>
 8002f94:	4603      	mov	r3, r0
        meta->lastReceived_ms, meta->timeoutError_ms, now_ms
    );
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <cmr_canRXMetaFind>:
 * @param can The interface.
 * @param canID The CAN ID to search for.
 *
 * @return The associated receive metadata, or `NULL` if not found.
 */
static cmr_canRXMeta_t *cmr_canRXMetaFind(cmr_can_t *can, uint16_t canID) {
 8002f9e:	b480      	push	{r7}
 8002fa0:	b085      	sub	sp, #20
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	807b      	strh	r3, [r7, #2]
    for (size_t i = 0; i < can->rxMetaLen; i++) {
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	e00f      	b.n	8002fd0 <cmr_canRXMetaFind+0x32>
        cmr_canRXMeta_t *meta = can->rxMeta + i;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	015b      	lsls	r3, r3, #5
 8002fb8:	4413      	add	r3, r2
 8002fba:	60bb      	str	r3, [r7, #8]
        if (meta->canID == canID) {
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	881b      	ldrh	r3, [r3, #0]
 8002fc0:	887a      	ldrh	r2, [r7, #2]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d101      	bne.n	8002fca <cmr_canRXMetaFind+0x2c>
            return meta;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	e008      	b.n	8002fdc <cmr_canRXMetaFind+0x3e>
    for (size_t i = 0; i < can->rxMetaLen; i++) {
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d3ea      	bcc.n	8002fb0 <cmr_canRXMetaFind+0x12>
        }
    }

    return NULL;    // No matching metadata.
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <cmr_canRXData>:
 * @param data The received data.
 * @param dataLen The received data's length.
 */
static void cmr_canRXData(
    cmr_can_t *can, uint16_t canID, const void *data, size_t dataLen
) {
 8002fe8:	b590      	push	{r4, r7, lr}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	817b      	strh	r3, [r7, #10]
    cmr_canRXMeta_t *meta = cmr_canRXMetaFind(can, canID);
 8002ff8:	897b      	ldrh	r3, [r7, #10]
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f7ff ffce 	bl	8002f9e <cmr_canRXMetaFind>
 8003002:	6178      	str	r0, [r7, #20]
    if (meta == NULL) {
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10b      	bne.n	8003022 <cmr_canRXData+0x3a>
        // Not a configured message; attempt to use the callback.
        if (can->rxCallback) {
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d014      	beq.n	800303c <cmr_canRXData+0x54>
            can->rxCallback(can, canID, data, dataLen);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8003016:	8979      	ldrh	r1, [r7, #10]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	47a0      	blx	r4
        }

        return;
 8003020:	e00c      	b.n	800303c <cmr_canRXData+0x54>
    }

    memcpy((void *) meta->payload, data, dataLen);
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	3318      	adds	r3, #24
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4618      	mov	r0, r3
 800302c:	f008 fdba 	bl	800bba4 <memcpy>
    meta->lastReceived_ms = xTaskGetTickCountFromISR();
 8003030:	f002 fd8a 	bl	8005b48 <xTaskGetTickCountFromISR>
 8003034:	4602      	mov	r2, r0
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	615a      	str	r2, [r3, #20]
 800303a:	e000      	b.n	800303e <cmr_canRXData+0x56>
        return;
 800303c:	bf00      	nop
}
 800303e:	371c      	adds	r7, #28
 8003040:	46bd      	mov	sp, r7
 8003042:	bd90      	pop	{r4, r7, pc}

08003044 <cmr_canRXPendingCallback>:
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL CAN handle.
 * @param fifo The pending FIFO.
 */
static void cmr_canRXPendingCallback(CAN_HandleTypeDef *handle, uint32_t fifo) {
 8003044:	b580      	push	{r7, lr}
 8003046:	b08c      	sub	sp, #48	; 0x30
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
    CAN_RxHeaderTypeDef msg;
    uint8_t data[8];
    if (HAL_CAN_GetRxMessage(handle, fifo, &msg, data) != HAL_OK) {
 800304e:	f107 0308 	add.w	r3, r7, #8
 8003052:	f107 0210 	add.w	r2, r7, #16
 8003056:	6839      	ldr	r1, [r7, #0]
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f004 fa86 	bl	800756a <HAL_CAN_GetRxMessage>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10c      	bne.n	800307e <cmr_canRXPendingCallback+0x3a>
        return;
    }

    cmr_can_t *can = cmr_canFromHandle(handle);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff fea7 	bl	8002db8 <cmr_canFromHandle>
 800306a:	62f8      	str	r0, [r7, #44]	; 0x2c
    cmr_canRXData(can, msg.StdId, data, msg.DLC);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	b299      	uxth	r1, r3
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	f107 0208 	add.w	r2, r7, #8
 8003076:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003078:	f7ff ffb6 	bl	8002fe8 <cmr_canRXData>
 800307c:	e000      	b.n	8003080 <cmr_canRXPendingCallback+0x3c>
        return;
 800307e:	bf00      	nop
}
 8003080:	3730      	adds	r7, #48	; 0x30
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_CAN_RxFifo0MsgPendingCallback>:
    void HAL_CAN_RxFifo ## fifo ## MsgPendingCallback( \
        CAN_HandleTypeDef *handle \
    ) { \
        cmr_canRXPendingCallback(handle, CAN_RX_FIFO ## fifo); \
    }
CAN_RX_FIFO_PENDING(0)
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	2100      	movs	r1, #0
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff ffd7 	bl	8003044 <cmr_canRXPendingCallback>
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_CAN_RxFifo1MsgPendingCallback>:
CAN_RX_FIFO_PENDING(1)
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	2101      	movs	r1, #1
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff ffcb 	bl	8003044 <cmr_canRXPendingCallback>
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <cmr_canInit>:
    cmr_canBitRate_t bitRate,
    cmr_canRXMeta_t *rxMeta, size_t rxMetaLen,
    cmr_canRXCallback_t rxCallback,
    GPIO_TypeDef *rxPort, uint16_t rxPin,
    GPIO_TypeDef *txPort, uint16_t txPin
) {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b090      	sub	sp, #64	; 0x40
 80030bc:	af06      	add	r7, sp, #24
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	4613      	mov	r3, r2
 80030c6:	71fb      	strb	r3, [r7, #7]
    /* Do any platform-specific initialization */
    _platform_canInit(
 80030c8:	79fa      	ldrb	r2, [r7, #7]
 80030ca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80030ce:	9305      	str	r3, [sp, #20]
 80030d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d2:	9304      	str	r3, [sp, #16]
 80030d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80030d6:	9303      	str	r3, [sp, #12]
 80030d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030da:	9302      	str	r3, [sp, #8]
 80030dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030de:	9301      	str	r3, [sp, #4]
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	68b9      	ldr	r1, [r7, #8]
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 fa45 	bl	8003578 <_platform_canInit>
        rxCallback,
        rxPort, rxPin,
        txPort, txPin
    );

    cmr_rccCANClockEnable(instance);
 80030ee:	68b8      	ldr	r0, [r7, #8]
 80030f0:	f001 f88d 	bl	800420e <cmr_rccCANClockEnable>
    cmr_rccGPIOClockEnable(rxPort);
 80030f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80030f6:	f001 f874 	bl	80041e2 <cmr_rccGPIOClockEnable>
    cmr_rccGPIOClockEnable(txPort);
 80030fa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80030fc:	f001 f871 	bl	80041e2 <cmr_rccGPIOClockEnable>

    // Configure CAN RX pin.
    GPIO_InitTypeDef pinConfig = {
 8003100:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	2302      	movs	r3, #2
 8003106:	61bb      	str	r3, [r7, #24]
 8003108:	2300      	movs	r3, #0
 800310a:	61fb      	str	r3, [r7, #28]
 800310c:	2303      	movs	r3, #3
 800310e:	623b      	str	r3, [r7, #32]
        .Pin = rxPin,
        .Mode = GPIO_MODE_AF_PP,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_VERY_HIGH,
        .Alternate = cmr_canGPIOAF(instance, rxPort)
 8003110:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003112:	68b8      	ldr	r0, [r7, #8]
 8003114:	f000 f88d 	bl	8003232 <cmr_canGPIOAF>
 8003118:	4603      	mov	r3, r0
    GPIO_InitTypeDef pinConfig = {
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
    };
    HAL_GPIO_Init(rxPort, &pinConfig);
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	4619      	mov	r1, r3
 8003122:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003124:	f005 f894 	bl	8008250 <HAL_GPIO_Init>

    // Configure CAN TX pin.
    pinConfig.Pin = txPin;
 8003128:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800312c:	617b      	str	r3, [r7, #20]
    pinConfig.Alternate = cmr_canGPIOAF(instance, txPort);
 800312e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003130:	68b8      	ldr	r0, [r7, #8]
 8003132:	f000 f87e 	bl	8003232 <cmr_canGPIOAF>
 8003136:	4603      	mov	r3, r0
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(txPort, &pinConfig);
 800313a:	f107 0314 	add.w	r3, r7, #20
 800313e:	4619      	mov	r1, r3
 8003140:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003142:	f005 f885 	bl	8008250 <HAL_GPIO_Init>

    if (HAL_CAN_Init(&can->handle) != HAL_OK) {
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4618      	mov	r0, r3
 800314a:	f003 fefd 	bl	8006f48 <HAL_CAN_Init>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <cmr_canInit+0xa2>
        cmr_panic("HAL_CAN_Init() failed!");
 8003154:	480e      	ldr	r0, [pc, #56]	; (8003190 <cmr_canInit+0xd8>)
 8003156:	f001 f838 	bl	80041ca <cmr_panic>
    }

    if (HAL_CAN_Start(&can->handle) != HAL_OK) {
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4618      	mov	r0, r3
 800315e:	f004 f8e5 	bl	800732c <HAL_CAN_Start>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <cmr_canInit+0xb6>
        cmr_panic("HAL_CAN_Start() failed!");
 8003168:	480a      	ldr	r0, [pc, #40]	; (8003194 <cmr_canInit+0xdc>)
 800316a:	f001 f82e 	bl	80041ca <cmr_panic>
    }

    if (HAL_CAN_ActivateNotification(
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f648 7113 	movw	r1, #36627	; 0x8f13
 8003174:	4618      	mov	r0, r3
 8003176:	f004 fb0b 	bl	8007790 <HAL_CAN_ActivateNotification>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <cmr_canInit+0xce>
            CAN_IT_ERROR_PASSIVE |
            CAN_IT_BUSOFF |
            CAN_IT_LAST_ERROR_CODE |
            CAN_IT_ERROR
    )) {
        cmr_panic("HAL_CAN_ActivateNotification() failed!");
 8003180:	4805      	ldr	r0, [pc, #20]	; (8003198 <cmr_canInit+0xe0>)
 8003182:	f001 f822 	bl	80041ca <cmr_panic>
    }
}
 8003186:	bf00      	nop
 8003188:	3728      	adds	r7, #40	; 0x28
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	0800bdf8 	.word	0x0800bdf8
 8003194:	0800be10 	.word	0x0800be10
 8003198:	0800be28 	.word	0x0800be28

0800319c <cmr_canTX>:
 */
int cmr_canTX(
    cmr_can_t *can,
    uint16_t id, const void *data, size_t len,
    TickType_t timeout
) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b08e      	sub	sp, #56	; 0x38
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	607a      	str	r2, [r7, #4]
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	460b      	mov	r3, r1
 80031aa:	817b      	strh	r3, [r7, #10]
    CAN_TxHeaderTypeDef txHeader = {
 80031ac:	897b      	ldrh	r3, [r7, #10]
 80031ae:	61bb      	str	r3, [r7, #24]
 80031b0:	2300      	movs	r3, #0
 80031b2:	61fb      	str	r3, [r7, #28]
 80031b4:	2300      	movs	r3, #0
 80031b6:	623b      	str	r3, [r7, #32]
 80031b8:	2300      	movs	r3, #0
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	62bb      	str	r3, [r7, #40]	; 0x28
 80031c0:	2300      	movs	r3, #0
 80031c2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        .DLC = len,
        .TransmitGlobalTime = DISABLE
    };

    // Attempt to reserve a mailbox.
    BaseType_t result = xSemaphoreTake(can->txSem, timeout);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80031ca:	2300      	movs	r3, #0
 80031cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031ce:	2100      	movs	r1, #0
 80031d0:	f001 ffbe 	bl	8005150 <xQueueGenericReceive>
 80031d4:	6378      	str	r0, [r7, #52]	; 0x34
    if (result != pdTRUE) {
 80031d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d002      	beq.n	80031e2 <cmr_canTX+0x46>
        return -1;
 80031dc:	f04f 33ff 	mov.w	r3, #4294967295
 80031e0:	e012      	b.n	8003208 <cmr_canTX+0x6c>
    }

    // Even though the interface for HAL_CAN_AddTxMessage() does not specify the
    // data as `const`, it does not touch the data. Oh well.
    uint32_t txMailbox;
    HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f107 0314 	add.w	r3, r7, #20
 80031e8:	f107 0118 	add.w	r1, r7, #24
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	f004 f8e1 	bl	80073b4 <HAL_CAN_AddTxMessage>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        &can->handle, &txHeader, (void *) data, &txMailbox
    );
    if (status != HAL_OK) {
 80031f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <cmr_canTX+0x6a>
        cmr_panic("Semaphore was available, but no mailboxes were found!");
 8003200:	4803      	ldr	r0, [pc, #12]	; (8003210 <cmr_canTX+0x74>)
 8003202:	f000 ffe2 	bl	80041ca <cmr_panic>
    }

    return 0;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3738      	adds	r7, #56	; 0x38
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	0800be50 	.word	0x0800be50

08003214 <cmr_canFilter>:
 * @param filtersLen The number of filters. Must be less than
 * `CMR_CAN_FILTERBANKS`.
 */
void cmr_canFilter(
    cmr_can_t *can, const cmr_canFilter_t *filters, size_t filtersLen
) {
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
    _platform_canFilter(can, filters, filtersLen);
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	68b9      	ldr	r1, [r7, #8]
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fa81 	bl	800372c <_platform_canFilter>
}
 800322a:	bf00      	nop
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <cmr_canGPIOAF>:
 * @param can The CAN interface.
 * @param port The GPIO port.
 *
 * @return The GPIO alternate function.
 */
uint32_t cmr_canGPIOAF(CAN_TypeDef *instance, GPIO_TypeDef *port) {
 8003232:	b580      	push	{r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	6039      	str	r1, [r7, #0]
    return _platform_canGPIOAF(instance, port);
 800323c:	6839      	ldr	r1, [r7, #0]
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f956 	bl	80034f0 <_platform_canGPIOAF>
 8003244:	4603      	mov	r3, r0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <DMA1_Stream0_IRQHandler>:
 */
#define DMA_IRQ_HANDLER(ctrl, stream) \
    void DMA_STREAM_NAME(ctrl, stream, _IRQHandler)(void) { \
        HAL_DMA_IRQHandler(cmr_dmaInterrupts[ctrl - 1][stream].handle); \
    }
DMA_STREAM_FOREACH(DMA_IRQ_HANDLER)
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
 8003254:	4b03      	ldr	r3, [pc, #12]	; (8003264 <DMA1_Stream0_IRQHandler+0x14>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f004 fe33 	bl	8007ec4 <HAL_DMA_IRQHandler>
 800325e:	bf00      	nop
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	200087e4 	.word	0x200087e4

08003268 <DMA1_Stream1_IRQHandler>:
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
 800326c:	4b03      	ldr	r3, [pc, #12]	; (800327c <DMA1_Stream1_IRQHandler+0x14>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	4618      	mov	r0, r3
 8003272:	f004 fe27 	bl	8007ec4 <HAL_DMA_IRQHandler>
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	200087e4 	.word	0x200087e4

08003280 <DMA1_Stream2_IRQHandler>:
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
 8003284:	4b03      	ldr	r3, [pc, #12]	; (8003294 <DMA1_Stream2_IRQHandler+0x14>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	4618      	mov	r0, r3
 800328a:	f004 fe1b 	bl	8007ec4 <HAL_DMA_IRQHandler>
 800328e:	bf00      	nop
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	200087e4 	.word	0x200087e4

08003298 <DMA1_Stream3_IRQHandler>:
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <DMA1_Stream3_IRQHandler+0x14>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f004 fe0f 	bl	8007ec4 <HAL_DMA_IRQHandler>
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	200087e4 	.word	0x200087e4

080032b0 <DMA1_Stream4_IRQHandler>:
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	4b03      	ldr	r3, [pc, #12]	; (80032c4 <DMA1_Stream4_IRQHandler+0x14>)
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f004 fe03 	bl	8007ec4 <HAL_DMA_IRQHandler>
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	200087e4 	.word	0x200087e4

080032c8 <DMA1_Stream5_IRQHandler>:
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	4b03      	ldr	r3, [pc, #12]	; (80032dc <DMA1_Stream5_IRQHandler+0x14>)
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f004 fdf7 	bl	8007ec4 <HAL_DMA_IRQHandler>
 80032d6:	bf00      	nop
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	200087e4 	.word	0x200087e4

080032e0 <DMA1_Stream6_IRQHandler>:
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <DMA1_Stream6_IRQHandler+0x14>)
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f004 fdeb 	bl	8007ec4 <HAL_DMA_IRQHandler>
 80032ee:	bf00      	nop
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	200087e4 	.word	0x200087e4

080032f8 <DMA1_Stream7_IRQHandler>:
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	4b03      	ldr	r3, [pc, #12]	; (800330c <DMA1_Stream7_IRQHandler+0x14>)
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	4618      	mov	r0, r3
 8003302:	f004 fddf 	bl	8007ec4 <HAL_DMA_IRQHandler>
 8003306:	bf00      	nop
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	200087e4 	.word	0x200087e4

08003310 <DMA2_Stream0_IRQHandler>:
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
 8003314:	4b03      	ldr	r3, [pc, #12]	; (8003324 <DMA2_Stream0_IRQHandler+0x14>)
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	4618      	mov	r0, r3
 800331a:	f004 fdd3 	bl	8007ec4 <HAL_DMA_IRQHandler>
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	200087e4 	.word	0x200087e4

08003328 <DMA2_Stream1_IRQHandler>:
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
 800332c:	4b03      	ldr	r3, [pc, #12]	; (800333c <DMA2_Stream1_IRQHandler+0x14>)
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	4618      	mov	r0, r3
 8003332:	f004 fdc7 	bl	8007ec4 <HAL_DMA_IRQHandler>
 8003336:	bf00      	nop
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	200087e4 	.word	0x200087e4

08003340 <DMA2_Stream2_IRQHandler>:
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
 8003344:	4b03      	ldr	r3, [pc, #12]	; (8003354 <DMA2_Stream2_IRQHandler+0x14>)
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	4618      	mov	r0, r3
 800334a:	f004 fdbb 	bl	8007ec4 <HAL_DMA_IRQHandler>
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	200087e4 	.word	0x200087e4

08003358 <DMA2_Stream3_IRQHandler>:
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
 800335c:	4b03      	ldr	r3, [pc, #12]	; (800336c <DMA2_Stream3_IRQHandler+0x14>)
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	4618      	mov	r0, r3
 8003362:	f004 fdaf 	bl	8007ec4 <HAL_DMA_IRQHandler>
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	200087e4 	.word	0x200087e4

08003370 <DMA2_Stream4_IRQHandler>:
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
 8003374:	4b03      	ldr	r3, [pc, #12]	; (8003384 <DMA2_Stream4_IRQHandler+0x14>)
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	4618      	mov	r0, r3
 800337a:	f004 fda3 	bl	8007ec4 <HAL_DMA_IRQHandler>
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	200087e4 	.word	0x200087e4

08003388 <DMA2_Stream5_IRQHandler>:
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
 800338c:	4b03      	ldr	r3, [pc, #12]	; (800339c <DMA2_Stream5_IRQHandler+0x14>)
 800338e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003390:	4618      	mov	r0, r3
 8003392:	f004 fd97 	bl	8007ec4 <HAL_DMA_IRQHandler>
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	200087e4 	.word	0x200087e4

080033a0 <DMA2_Stream6_IRQHandler>:
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	4b03      	ldr	r3, [pc, #12]	; (80033b4 <DMA2_Stream6_IRQHandler+0x14>)
 80033a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a8:	4618      	mov	r0, r3
 80033aa:	f004 fd8b 	bl	8007ec4 <HAL_DMA_IRQHandler>
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	200087e4 	.word	0x200087e4

080033b8 <DMA2_Stream7_IRQHandler>:
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	4b03      	ldr	r3, [pc, #12]	; (80033cc <DMA2_Stream7_IRQHandler+0x14>)
 80033be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c0:	4618      	mov	r0, r3
 80033c2:	f004 fd7f 	bl	8007ec4 <HAL_DMA_IRQHandler>
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	200087e4 	.word	0x200087e4

080033d0 <CAN1_TX_IRQHandler>:
                                                               \
    void CAN##can##_SCE_IRQHandler(void)                       \
    {                                                          \
        HAL_CAN_IRQHandler(cmr_canInterrupts[can - 1].handle); \
    }
CAN_FOREACH(CAN_IRQ_HANDLERS)
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <CAN1_TX_IRQHandler+0x14>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f004 f9ff 	bl	80077dc <HAL_CAN_IRQHandler>
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20008824 	.word	0x20008824

080033e8 <CAN1_RX0_IRQHandler>:
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <CAN1_RX0_IRQHandler+0x14>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f004 f9f3 	bl	80077dc <HAL_CAN_IRQHandler>
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20008824 	.word	0x20008824

08003400 <CAN1_RX1_IRQHandler>:
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
 8003404:	4b03      	ldr	r3, [pc, #12]	; (8003414 <CAN1_RX1_IRQHandler+0x14>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f004 f9e7 	bl	80077dc <HAL_CAN_IRQHandler>
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20008824 	.word	0x20008824

08003418 <CAN1_SCE_IRQHandler>:
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
 800341c:	4b03      	ldr	r3, [pc, #12]	; (800342c <CAN1_SCE_IRQHandler+0x14>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f004 f9db 	bl	80077dc <HAL_CAN_IRQHandler>
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20008824 	.word	0x20008824

08003430 <CAN2_TX_IRQHandler>:
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
 8003434:	4b03      	ldr	r3, [pc, #12]	; (8003444 <CAN2_TX_IRQHandler+0x14>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	4618      	mov	r0, r3
 800343a:	f004 f9cf 	bl	80077dc <HAL_CAN_IRQHandler>
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20008824 	.word	0x20008824

08003448 <CAN2_RX0_IRQHandler>:
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
 800344c:	4b03      	ldr	r3, [pc, #12]	; (800345c <CAN2_RX0_IRQHandler+0x14>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	4618      	mov	r0, r3
 8003452:	f004 f9c3 	bl	80077dc <HAL_CAN_IRQHandler>
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20008824 	.word	0x20008824

08003460 <CAN2_RX1_IRQHandler>:
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
 8003464:	4b03      	ldr	r3, [pc, #12]	; (8003474 <CAN2_RX1_IRQHandler+0x14>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	4618      	mov	r0, r3
 800346a:	f004 f9b7 	bl	80077dc <HAL_CAN_IRQHandler>
 800346e:	bf00      	nop
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20008824 	.word	0x20008824

08003478 <CAN2_SCE_IRQHandler>:
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <CAN2_SCE_IRQHandler+0x14>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	4618      	mov	r0, r3
 8003482:	f004 f9ab 	bl	80077dc <HAL_CAN_IRQHandler>
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20008824 	.word	0x20008824

08003490 <CAN3_TX_IRQHandler>:
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
 8003494:	4b03      	ldr	r3, [pc, #12]	; (80034a4 <CAN3_TX_IRQHandler+0x14>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	4618      	mov	r0, r3
 800349a:	f004 f99f 	bl	80077dc <HAL_CAN_IRQHandler>
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20008824 	.word	0x20008824

080034a8 <CAN3_RX0_IRQHandler>:
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	4b03      	ldr	r3, [pc, #12]	; (80034bc <CAN3_RX0_IRQHandler+0x14>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f004 f993 	bl	80077dc <HAL_CAN_IRQHandler>
 80034b6:	bf00      	nop
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20008824 	.word	0x20008824

080034c0 <CAN3_RX1_IRQHandler>:
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	4b03      	ldr	r3, [pc, #12]	; (80034d4 <CAN3_RX1_IRQHandler+0x14>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f004 f987 	bl	80077dc <HAL_CAN_IRQHandler>
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20008824 	.word	0x20008824

080034d8 <CAN3_SCE_IRQHandler>:
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <CAN3_SCE_IRQHandler+0x14>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f004 f97b 	bl	80077dc <HAL_CAN_IRQHandler>
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20008824 	.word	0x20008824

080034f0 <_platform_canGPIOAF>:
 * @param port The GPIO port.
 *
 * @return The GPIO alternate function.
 */
uint32_t _platform_canGPIOAF(CAN_TypeDef *instance, GPIO_TypeDef *port)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
    switch ((uintptr_t)instance)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a16      	ldr	r2, [pc, #88]	; (8003558 <_platform_canGPIOAF+0x68>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d020      	beq.n	8003544 <_platform_canGPIOAF+0x54>
 8003502:	4a15      	ldr	r2, [pc, #84]	; (8003558 <_platform_canGPIOAF+0x68>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d81f      	bhi.n	8003548 <_platform_canGPIOAF+0x58>
 8003508:	4a14      	ldr	r2, [pc, #80]	; (800355c <_platform_canGPIOAF+0x6c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d003      	beq.n	8003516 <_platform_canGPIOAF+0x26>
 800350e:	4a14      	ldr	r2, [pc, #80]	; (8003560 <_platform_canGPIOAF+0x70>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d015      	beq.n	8003540 <_platform_canGPIOAF+0x50>
 8003514:	e018      	b.n	8003548 <_platform_canGPIOAF+0x58>
    {
    case CAN1_BASE:
        switch ((uintptr_t)port)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	4a12      	ldr	r2, [pc, #72]	; (8003564 <_platform_canGPIOAF+0x74>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d009      	beq.n	8003532 <_platform_canGPIOAF+0x42>
 800351e:	4a11      	ldr	r2, [pc, #68]	; (8003564 <_platform_canGPIOAF+0x74>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d80a      	bhi.n	800353a <_platform_canGPIOAF+0x4a>
 8003524:	4a10      	ldr	r2, [pc, #64]	; (8003568 <_platform_canGPIOAF+0x78>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d003      	beq.n	8003532 <_platform_canGPIOAF+0x42>
 800352a:	4a10      	ldr	r2, [pc, #64]	; (800356c <_platform_canGPIOAF+0x7c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d002      	beq.n	8003536 <_platform_canGPIOAF+0x46>
 8003530:	e003      	b.n	800353a <_platform_canGPIOAF+0x4a>
        {
        case GPIOA_BASE:
        case GPIOD_BASE:
            return GPIO_AF9_CAN1;
 8003532:	2309      	movs	r3, #9
 8003534:	e00b      	b.n	800354e <_platform_canGPIOAF+0x5e>
        case GPIOB_BASE:
            return GPIO_AF8_CAN1;
 8003536:	2308      	movs	r3, #8
 8003538:	e009      	b.n	800354e <_platform_canGPIOAF+0x5e>
        default:
            cmr_panic("Unknown/unspported GPIO port!");
 800353a:	480d      	ldr	r0, [pc, #52]	; (8003570 <_platform_canGPIOAF+0x80>)
 800353c:	f000 fe45 	bl	80041ca <cmr_panic>
        }
    case CAN2_BASE:
        return GPIO_AF9_CAN2;
 8003540:	2309      	movs	r3, #9
 8003542:	e004      	b.n	800354e <_platform_canGPIOAF+0x5e>
    case CAN3_BASE:
        return GPIO_AF11_CAN3;
 8003544:	230b      	movs	r3, #11
 8003546:	e002      	b.n	800354e <_platform_canGPIOAF+0x5e>
    default:
        cmr_panic("Unknown CAN instance!");
 8003548:	480a      	ldr	r0, [pc, #40]	; (8003574 <_platform_canGPIOAF+0x84>)
 800354a:	f000 fe3e 	bl	80041ca <cmr_panic>
    }
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40006c00 	.word	0x40006c00
 800355c:	40006400 	.word	0x40006400
 8003560:	40006800 	.word	0x40006800
 8003564:	40020c00 	.word	0x40020c00
 8003568:	40020000 	.word	0x40020000
 800356c:	40020400 	.word	0x40020400
 8003570:	0800be88 	.word	0x0800be88
 8003574:	0800bea8 	.word	0x0800bea8

08003578 <_platform_canInit>:
    cmr_canBitRate_t bitRate,
    cmr_canRXMeta_t *rxMeta, size_t rxMetaLen,
    cmr_canRXCallback_t rxCallback,
    GPIO_TypeDef *rxPort, uint16_t rxPin,
    GPIO_TypeDef *txPort, uint16_t txPin
) {
 8003578:	b580      	push	{r7, lr}
 800357a:	b0a6      	sub	sp, #152	; 0x98
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	4613      	mov	r3, r2
 8003586:	71fb      	strb	r3, [r7, #7]
    *can = (cmr_can_t) {
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4618      	mov	r0, r3
 800358c:	2380      	movs	r3, #128	; 0x80
 800358e:	461a      	mov	r2, r3
 8003590:	2100      	movs	r1, #0
 8003592:	f008 fb15 	bl	800bbc0 <memset>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035a2:	60da      	str	r2, [r3, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80035aa:	611a      	str	r2, [r3, #16]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2201      	movs	r2, #1
 80035b0:	765a      	strb	r2, [r3, #25]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	76da      	strb	r2, [r3, #27]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	675a      	str	r2, [r3, #116]	; 0x74
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80035c4:	679a      	str	r2, [r3, #120]	; 0x78
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80035cc:	67da      	str	r2, [r3, #124]	; 0x7c
        .rxCallback = rxCallback
    };

    // These numbers assume 48 MHz ABP1 peripheral clock frequency
    // 48 MHz / (6 + 1 + 1 time quanta) / Prescaler = bitRate
    switch (bitRate) {
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d00e      	beq.n	80035f2 <_platform_canInit+0x7a>
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	dc10      	bgt.n	80035fa <_platform_canInit+0x82>
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <_platform_canInit+0x6a>
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d004      	beq.n	80035ea <_platform_canInit+0x72>
 80035e0:	e00b      	b.n	80035fa <_platform_canInit+0x82>
        case CMR_CAN_BITRATE_250K:
            can->handle.Init.Prescaler = 24;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2218      	movs	r2, #24
 80035e6:	605a      	str	r2, [r3, #4]
            break;
 80035e8:	e007      	b.n	80035fa <_platform_canInit+0x82>
        case CMR_CAN_BITRATE_500K:
            can->handle.Init.Prescaler = 12;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	220c      	movs	r2, #12
 80035ee:	605a      	str	r2, [r3, #4]
            break;
 80035f0:	e003      	b.n	80035fa <_platform_canInit+0x82>
        case CMR_CAN_BITRATE_1M:
            can->handle.Init.Prescaler = 6;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2206      	movs	r2, #6
 80035f6:	605a      	str	r2, [r3, #4]
            break;
 80035f8:	bf00      	nop
    }

    can->txSem = xSemaphoreCreateCountingStatic(
 80035fa:	2003      	movs	r0, #3
 80035fc:	2103      	movs	r1, #3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	332c      	adds	r3, #44	; 0x2c
 8003602:	461a      	mov	r2, r3
 8003604:	f001 fcfa 	bl	8004ffc <xQueueCreateCountingSemaphoreStatic>
 8003608:	4602      	mov	r2, r0
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	629a      	str	r2, [r3, #40]	; 0x28
        CAN_TX_MAILBOXES, CAN_TX_MAILBOXES, &can->txSemBuf
    );
    configASSERT(can->txSem != NULL);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003612:	2b00      	cmp	r3, #0
 8003614:	d103      	bne.n	800361e <_platform_canInit+0xa6>
 8003616:	219f      	movs	r1, #159	; 0x9f
 8003618:	483e      	ldr	r0, [pc, #248]	; (8003714 <_platform_canInit+0x19c>)
 800361a:	f000 fdd6 	bl	80041ca <cmr_panic>
    size_t canIdx;
    IRQn_Type irqTX;
    IRQn_Type irqRX0;
    IRQn_Type irqRX1;
    IRQn_Type irqSCE;
    switch ((uintptr_t)instance)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	4a3d      	ldr	r2, [pc, #244]	; (8003718 <_platform_canInit+0x1a0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d029      	beq.n	800367a <_platform_canInit+0x102>
 8003626:	4a3c      	ldr	r2, [pc, #240]	; (8003718 <_platform_canInit+0x1a0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d836      	bhi.n	800369a <_platform_canInit+0x122>
 800362c:	4a3b      	ldr	r2, [pc, #236]	; (800371c <_platform_canInit+0x1a4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d003      	beq.n	800363a <_platform_canInit+0xc2>
 8003632:	4a3b      	ldr	r2, [pc, #236]	; (8003720 <_platform_canInit+0x1a8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d010      	beq.n	800365a <_platform_canInit+0xe2>
 8003638:	e02f      	b.n	800369a <_platform_canInit+0x122>
        irqTX = CAN##num##_TX_IRQn;   \
        irqRX0 = CAN##num##_RX0_IRQn; \
        irqRX1 = CAN##num##_RX1_IRQn; \
        irqSCE = CAN##num##_SCE_IRQn; \
        break;
        CAN_FOREACH(CAN_INTERRUPT_CONFIG)
 800363a:	2300      	movs	r3, #0
 800363c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003640:	2313      	movs	r3, #19
 8003642:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8003646:	2314      	movs	r3, #20
 8003648:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 800364c:	2315      	movs	r3, #21
 800364e:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8003652:	2316      	movs	r3, #22
 8003654:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 8003658:	e022      	b.n	80036a0 <_platform_canInit+0x128>
 800365a:	2301      	movs	r3, #1
 800365c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003660:	233f      	movs	r3, #63	; 0x3f
 8003662:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8003666:	2340      	movs	r3, #64	; 0x40
 8003668:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 800366c:	2341      	movs	r3, #65	; 0x41
 800366e:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8003672:	2342      	movs	r3, #66	; 0x42
 8003674:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 8003678:	e012      	b.n	80036a0 <_platform_canInit+0x128>
 800367a:	2302      	movs	r3, #2
 800367c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003680:	234a      	movs	r3, #74	; 0x4a
 8003682:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8003686:	234b      	movs	r3, #75	; 0x4b
 8003688:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 800368c:	234c      	movs	r3, #76	; 0x4c
 800368e:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8003692:	234d      	movs	r3, #77	; 0x4d
 8003694:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 8003698:	e002      	b.n	80036a0 <_platform_canInit+0x128>
#undef CAN_INTERRUPT_CONFIG
    default:
        cmr_panic("Unknown CAN instance!");
 800369a:	4822      	ldr	r0, [pc, #136]	; (8003724 <_platform_canInit+0x1ac>)
 800369c:	f000 fd95 	bl	80041ca <cmr_panic>
    }

    cmr_canInterrupts[canIdx] = (cmr_canInterrupt_t){
        .handle = &can->handle
 80036a0:	68fa      	ldr	r2, [r7, #12]
    cmr_canInterrupts[canIdx] = (cmr_canInterrupt_t){
 80036a2:	4921      	ldr	r1, [pc, #132]	; (8003728 <_platform_canInit+0x1b0>)
 80036a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80036a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    };
    HAL_NVIC_SetPriority(irqTX, 5, 0);
 80036ac:	f997 3093 	ldrsb.w	r3, [r7, #147]	; 0x93
 80036b0:	2200      	movs	r2, #0
 80036b2:	2105      	movs	r1, #5
 80036b4:	4618      	mov	r0, r3
 80036b6:	f004 fb4c 	bl	8007d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(irqRX0, 5, 0);
 80036ba:	f997 3092 	ldrsb.w	r3, [r7, #146]	; 0x92
 80036be:	2200      	movs	r2, #0
 80036c0:	2105      	movs	r1, #5
 80036c2:	4618      	mov	r0, r3
 80036c4:	f004 fb45 	bl	8007d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(irqRX1, 5, 0);
 80036c8:	f997 3091 	ldrsb.w	r3, [r7, #145]	; 0x91
 80036cc:	2200      	movs	r2, #0
 80036ce:	2105      	movs	r1, #5
 80036d0:	4618      	mov	r0, r3
 80036d2:	f004 fb3e 	bl	8007d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(irqSCE, 5, 0);
 80036d6:	f997 3090 	ldrsb.w	r3, [r7, #144]	; 0x90
 80036da:	2200      	movs	r2, #0
 80036dc:	2105      	movs	r1, #5
 80036de:	4618      	mov	r0, r3
 80036e0:	f004 fb37 	bl	8007d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqTX);
 80036e4:	f997 3093 	ldrsb.w	r3, [r7, #147]	; 0x93
 80036e8:	4618      	mov	r0, r3
 80036ea:	f004 fb4e 	bl	8007d8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(irqRX0);
 80036ee:	f997 3092 	ldrsb.w	r3, [r7, #146]	; 0x92
 80036f2:	4618      	mov	r0, r3
 80036f4:	f004 fb49 	bl	8007d8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(irqRX1);
 80036f8:	f997 3091 	ldrsb.w	r3, [r7, #145]	; 0x91
 80036fc:	4618      	mov	r0, r3
 80036fe:	f004 fb44 	bl	8007d8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(irqSCE);
 8003702:	f997 3090 	ldrsb.w	r3, [r7, #144]	; 0x90
 8003706:	4618      	mov	r0, r3
 8003708:	f004 fb3f 	bl	8007d8a <HAL_NVIC_EnableIRQ>
}
 800370c:	bf00      	nop
 800370e:	3798      	adds	r7, #152	; 0x98
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	0800bec0 	.word	0x0800bec0
 8003718:	40006c00 	.word	0x40006c00
 800371c:	40006400 	.word	0x40006400
 8003720:	40006800 	.word	0x40006800
 8003724:	0800bea8 	.word	0x0800bea8
 8003728:	20008824 	.word	0x20008824

0800372c <_platform_canFilter>:
 * @param filtersLen The number of filters. Must be less than
 * `CMR_CAN_FILTERBANKS`.
 */
void _platform_canFilter(
    cmr_can_t *can, const cmr_canFilter_t *filters, size_t filtersLen)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b094      	sub	sp, #80	; 0x50
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
    if (filtersLen >= CMR_CAN_FILTERBANKS)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b0d      	cmp	r3, #13
 800373c:	d902      	bls.n	8003744 <_platform_canFilter+0x18>
    {
        cmr_panic("Too many filter banks!");
 800373e:	4830      	ldr	r0, [pc, #192]	; (8003800 <_platform_canFilter+0xd4>)
 8003740:	f000 fd43 	bl	80041ca <cmr_panic>
    }

    CAN_TypeDef *instance = can->handle.Instance;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	647b      	str	r3, [r7, #68]	; 0x44

    for (size_t i = 0; i < filtersLen; i++)
 800374a:	2300      	movs	r3, #0
 800374c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800374e:	e04e      	b.n	80037ee <_platform_canFilter+0xc2>
    {
        const cmr_canFilter_t *filter = filters + i;
 8003750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	4413      	add	r3, r2
 8003758:	643b      	str	r3, [r7, #64]	; 0x40

        uint32_t bank = i;
 800375a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800375c:	64bb      	str	r3, [r7, #72]	; 0x48
        if (instance == CAN2)
 800375e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003760:	4a28      	ldr	r2, [pc, #160]	; (8003804 <_platform_canFilter+0xd8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d102      	bne.n	800376c <_platform_canFilter+0x40>
        {
            // CAN2 uses banks 14-27.
            bank += CMR_CAN_FILTERBANKS;
 8003766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003768:	330e      	adds	r3, #14
 800376a:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        uint32_t filterMode = filter->isMask
 800376c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800376e:	781b      	ldrb	r3, [r3, #0]
                                  ? CAN_FILTERMODE_IDMASK
                                  : CAN_FILTERMODE_IDLIST;
 8003770:	f083 0301 	eor.w	r3, r3, #1
 8003774:	b2db      	uxtb	r3, r3
        uint32_t filterMode = filter->isMask
 8003776:	63fb      	str	r3, [r7, #60]	; 0x3c

        // In 16 bit ID list mode, FilterIdHigh, FilterIdLow, FilterMaskIdHigh,
        // and FilterMaskIdLow all serve as a whitelist of left-aligned 11-bit
        // CAN IDs.
        // See RM0430 32.7.4 Fig. 387.
        const uint16_t CMR_CAN_ID_FILTER_SHIFT = 5;
 8003778:	2305      	movs	r3, #5
 800377a:	877b      	strh	r3, [r7, #58]	; 0x3a
        CAN_FilterTypeDef config = {
            .FilterIdHigh = filter->ids[0] << CMR_CAN_ID_FILTER_SHIFT,
 800377c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800377e:	891b      	ldrh	r3, [r3, #8]
 8003780:	461a      	mov	r2, r3
 8003782:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
        CAN_FilterTypeDef config = {
 8003788:	613b      	str	r3, [r7, #16]
            .FilterIdLow = filter->ids[1] << CMR_CAN_ID_FILTER_SHIFT,
 800378a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800378c:	895b      	ldrh	r3, [r3, #10]
 800378e:	461a      	mov	r2, r3
 8003790:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
        CAN_FilterTypeDef config = {
 8003796:	617b      	str	r3, [r7, #20]
            .FilterMaskIdHigh = filter->ids[2] << CMR_CAN_ID_FILTER_SHIFT,
 8003798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800379a:	899b      	ldrh	r3, [r3, #12]
 800379c:	461a      	mov	r2, r3
 800379e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
        CAN_FilterTypeDef config = {
 80037a4:	61bb      	str	r3, [r7, #24]
            .FilterMaskIdLow = filter->ids[3] << CMR_CAN_ID_FILTER_SHIFT,
 80037a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a8:	89db      	ldrh	r3, [r3, #14]
 80037aa:	461a      	mov	r2, r3
 80037ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
        CAN_FilterTypeDef config = {
 80037b2:	61fb      	str	r3, [r7, #28]
            .FilterFIFOAssignment = filter->rxFIFO,
 80037b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b6:	685b      	ldr	r3, [r3, #4]
        CAN_FilterTypeDef config = {
 80037b8:	623b      	str	r3, [r7, #32]
 80037ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
 80037be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80037c2:	2300      	movs	r3, #0
 80037c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037c6:	2301      	movs	r3, #1
 80037c8:	633b      	str	r3, [r7, #48]	; 0x30
 80037ca:	230e      	movs	r3, #14
 80037cc:	637b      	str	r3, [r7, #52]	; 0x34
            .FilterMode = filterMode,
            .FilterScale = CAN_FILTERSCALE_16BIT,
            .FilterActivation = ENABLE,
            .SlaveStartFilterBank = CMR_CAN_FILTERBANKS};

        if (HAL_CAN_ConfigFilter(&can->handle, &config) != HAL_OK)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f107 0210 	add.w	r2, r7, #16
 80037d4:	4611      	mov	r1, r2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f003 fcbc 	bl	8007154 <HAL_CAN_ConfigFilter>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <_platform_canFilter+0xbc>
        {
            cmr_panic("HAL_CAN_ConfigFilter() failed!");
 80037e2:	4809      	ldr	r0, [pc, #36]	; (8003808 <_platform_canFilter+0xdc>)
 80037e4:	f000 fcf1 	bl	80041ca <cmr_panic>
    for (size_t i = 0; i < filtersLen; i++)
 80037e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ea:	3301      	adds	r3, #1
 80037ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d3ac      	bcc.n	8003750 <_platform_canFilter+0x24>
        }
    }
}
 80037f6:	bf00      	nop
 80037f8:	bf00      	nop
 80037fa:	3750      	adds	r7, #80	; 0x50
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	0800bf0c 	.word	0x0800bf0c
 8003804:	40006800 	.word	0x40006800
 8003808:	0800bf24 	.word	0x0800bf24

0800380c <_platform_rccSystemClockEnable>:
 *
 * @note Generated by STM32Cube. Sets System Clock to 96 MHz, with only APB1
 * Peripheral Clocks at 48 MHz (APB1 Timer Clocks are still 96 MHz).
 */
void _platform_rccSystemClockEnable(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b094      	sub	sp, #80	; 0x50
 8003810:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003812:	f107 031c 	add.w	r3, r7, #28
 8003816:	2234      	movs	r2, #52	; 0x34
 8003818:	2100      	movs	r1, #0
 800381a:	4618      	mov	r0, r3
 800381c:	f008 f9d0 	bl	800bbc0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003820:	f107 0308 	add.w	r3, r7, #8
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	60da      	str	r2, [r3, #12]
 800382e:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    __HAL_RCC_PWR_CLK_ENABLE();
 8003830:	2300      	movs	r3, #0
 8003832:	607b      	str	r3, [r7, #4]
 8003834:	4b29      	ldr	r3, [pc, #164]	; (80038dc <_platform_rccSystemClockEnable+0xd0>)
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	4a28      	ldr	r2, [pc, #160]	; (80038dc <_platform_rccSystemClockEnable+0xd0>)
 800383a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800383e:	6413      	str	r3, [r2, #64]	; 0x40
 8003840:	4b26      	ldr	r3, [pc, #152]	; (80038dc <_platform_rccSystemClockEnable+0xd0>)
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003848:	607b      	str	r3, [r7, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800384c:	2300      	movs	r3, #0
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	4b23      	ldr	r3, [pc, #140]	; (80038e0 <_platform_rccSystemClockEnable+0xd4>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a22      	ldr	r2, [pc, #136]	; (80038e0 <_platform_rccSystemClockEnable+0xd4>)
 8003856:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800385a:	6013      	str	r3, [r2, #0]
 800385c:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <_platform_rccSystemClockEnable+0xd4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	683b      	ldr	r3, [r7, #0]

    // Initializes the CPU, AHB and APB busses clocks
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003868:	2301      	movs	r3, #1
 800386a:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800386c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003870:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003872:	2302      	movs	r3, #2
 8003874:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003876:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800387a:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 25;
 800387c:	2319      	movs	r3, #25
 800387e:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 192;
 8003880:	23c0      	movs	r3, #192	; 0xc0
 8003882:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003884:	2302      	movs	r3, #2
 8003886:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 8003888:	2302      	movs	r3, #2
 800388a:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 800388c:	2302      	movs	r3, #2
 800388e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003890:	f107 031c 	add.w	r3, r7, #28
 8003894:	4618      	mov	r0, r3
 8003896:	f007 fab5 	bl	800ae04 <HAL_RCC_OscConfig>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <_platform_rccSystemClockEnable+0x9a>
    {
        cmr_panic("HAL_RCC_OscConfig() failed!");
 80038a0:	4810      	ldr	r0, [pc, #64]	; (80038e4 <_platform_rccSystemClockEnable+0xd8>)
 80038a2:	f000 fc92 	bl	80041ca <cmr_panic>
    }

    // Initializes the CPU, AHB and APB busses clocks
    // Initializes the CPU, AHB and APB busses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80038a6:	230f      	movs	r3, #15
 80038a8:	60bb      	str	r3, [r7, #8]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038aa:	2302      	movs	r3, #2
 80038ac:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038ae:	2300      	movs	r3, #0
 80038b0:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80038b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038b6:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80038bc:	f107 0308 	add.w	r3, r7, #8
 80038c0:	2103      	movs	r1, #3
 80038c2:	4618      	mov	r0, r3
 80038c4:	f007 f8d6 	bl	800aa74 <HAL_RCC_ClockConfig>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <_platform_rccSystemClockEnable+0xc8>
    {
        cmr_panic("HAL_RCC_ClockConfig() failed!");
 80038ce:	4806      	ldr	r0, [pc, #24]	; (80038e8 <_platform_rccSystemClockEnable+0xdc>)
 80038d0:	f000 fc7b 	bl	80041ca <cmr_panic>
    }
}
 80038d4:	bf00      	nop
 80038d6:	3750      	adds	r7, #80	; 0x50
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40023800 	.word	0x40023800
 80038e0:	40007000 	.word	0x40007000
 80038e4:	0800bf44 	.word	0x0800bf44
 80038e8:	0800bf60 	.word	0x0800bf60

080038ec <_platform_rccGPIOClockEnable>:
 * @brief Enables the specified GPIO port's clock.
 *
 * @param port The GPIO port.
 */
void _platform_rccGPIOClockEnable(GPIO_TypeDef *port)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b08b      	sub	sp, #44	; 0x2c
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
    switch ((uintptr_t)port)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a57      	ldr	r2, [pc, #348]	; (8003a54 <_platform_rccGPIOClockEnable+0x168>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	f000 8096 	beq.w	8003a2a <_platform_rccGPIOClockEnable+0x13e>
 80038fe:	4a55      	ldr	r2, [pc, #340]	; (8003a54 <_platform_rccGPIOClockEnable+0x168>)
 8003900:	4293      	cmp	r3, r2
 8003902:	f200 80a1 	bhi.w	8003a48 <_platform_rccGPIOClockEnable+0x15c>
 8003906:	4a54      	ldr	r2, [pc, #336]	; (8003a58 <_platform_rccGPIOClockEnable+0x16c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d07f      	beq.n	8003a0c <_platform_rccGPIOClockEnable+0x120>
 800390c:	4a52      	ldr	r2, [pc, #328]	; (8003a58 <_platform_rccGPIOClockEnable+0x16c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	f200 809a 	bhi.w	8003a48 <_platform_rccGPIOClockEnable+0x15c>
 8003914:	4a51      	ldr	r2, [pc, #324]	; (8003a5c <_platform_rccGPIOClockEnable+0x170>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d069      	beq.n	80039ee <_platform_rccGPIOClockEnable+0x102>
 800391a:	4a50      	ldr	r2, [pc, #320]	; (8003a5c <_platform_rccGPIOClockEnable+0x170>)
 800391c:	4293      	cmp	r3, r2
 800391e:	f200 8093 	bhi.w	8003a48 <_platform_rccGPIOClockEnable+0x15c>
 8003922:	4a4f      	ldr	r2, [pc, #316]	; (8003a60 <_platform_rccGPIOClockEnable+0x174>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d053      	beq.n	80039d0 <_platform_rccGPIOClockEnable+0xe4>
 8003928:	4a4d      	ldr	r2, [pc, #308]	; (8003a60 <_platform_rccGPIOClockEnable+0x174>)
 800392a:	4293      	cmp	r3, r2
 800392c:	f200 808c 	bhi.w	8003a48 <_platform_rccGPIOClockEnable+0x15c>
 8003930:	4a4c      	ldr	r2, [pc, #304]	; (8003a64 <_platform_rccGPIOClockEnable+0x178>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d03d      	beq.n	80039b2 <_platform_rccGPIOClockEnable+0xc6>
 8003936:	4a4b      	ldr	r2, [pc, #300]	; (8003a64 <_platform_rccGPIOClockEnable+0x178>)
 8003938:	4293      	cmp	r3, r2
 800393a:	f200 8085 	bhi.w	8003a48 <_platform_rccGPIOClockEnable+0x15c>
 800393e:	4a4a      	ldr	r2, [pc, #296]	; (8003a68 <_platform_rccGPIOClockEnable+0x17c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d027      	beq.n	8003994 <_platform_rccGPIOClockEnable+0xa8>
 8003944:	4a48      	ldr	r2, [pc, #288]	; (8003a68 <_platform_rccGPIOClockEnable+0x17c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d87e      	bhi.n	8003a48 <_platform_rccGPIOClockEnable+0x15c>
 800394a:	4a48      	ldr	r2, [pc, #288]	; (8003a6c <_platform_rccGPIOClockEnable+0x180>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d003      	beq.n	8003958 <_platform_rccGPIOClockEnable+0x6c>
 8003950:	4a47      	ldr	r2, [pc, #284]	; (8003a70 <_platform_rccGPIOClockEnable+0x184>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00f      	beq.n	8003976 <_platform_rccGPIOClockEnable+0x8a>
        break;
    case GPIOH_BASE:
        __HAL_RCC_GPIOH_CLK_ENABLE();
        break;
    }
}
 8003956:	e077      	b.n	8003a48 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8003958:	2300      	movs	r3, #0
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
 800395c:	4b45      	ldr	r3, [pc, #276]	; (8003a74 <_platform_rccGPIOClockEnable+0x188>)
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	4a44      	ldr	r2, [pc, #272]	; (8003a74 <_platform_rccGPIOClockEnable+0x188>)
 8003962:	f043 0301 	orr.w	r3, r3, #1
 8003966:	6313      	str	r3, [r2, #48]	; 0x30
 8003968:	4b42      	ldr	r3, [pc, #264]	; (8003a74 <_platform_rccGPIOClockEnable+0x188>)
 800396a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        break;
 8003974:	e068      	b.n	8003a48 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	623b      	str	r3, [r7, #32]
 800397a:	4b3e      	ldr	r3, [pc, #248]	; (8003a74 <_platform_rccGPIOClockEnable+0x188>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	4a3d      	ldr	r2, [pc, #244]	; (8003a74 <_platform_rccGPIOClockEnable+0x188>)
 8003980:	f043 0302 	orr.w	r3, r3, #2
 8003984:	6313      	str	r3, [r2, #48]	; 0x30
 8003986:	4b3b      	ldr	r3, [pc, #236]	; (8003a74 <_platform_rccGPIOClockEnable+0x188>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	623b      	str	r3, [r7, #32]
 8003990:	6a3b      	ldr	r3, [r7, #32]
        break;
 8003992:	e059      	b.n	8003a48 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8003994:	2300      	movs	r3, #0
 8003996:	61fb      	str	r3, [r7, #28]
 8003998:	4b36      	ldr	r3, [pc, #216]	; (8003a74 <_platform_rccGPIOClockEnable+0x188>)
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	4a35      	ldr	r2, [pc, #212]	; (8003a74 <_platform_rccGPIOClockEnable+0x188>)
 800399e:	f043 0304 	orr.w	r3, r3, #4
 80039a2:	6313      	str	r3, [r2, #48]	; 0x30
 80039a4:	4b33      	ldr	r3, [pc, #204]	; (8003a74 <_platform_rccGPIOClockEnable+0x188>)
 80039a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	61fb      	str	r3, [r7, #28]
 80039ae:	69fb      	ldr	r3, [r7, #28]
        break;
 80039b0:	e04a      	b.n	8003a48 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOD_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	61bb      	str	r3, [r7, #24]
 80039b6:	4b2f      	ldr	r3, [pc, #188]	; (8003a74 <_platform_rccGPIOClockEnable+0x188>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	4a2e      	ldr	r2, [pc, #184]	; (8003a74 <_platform_rccGPIOClockEnable+0x188>)
 80039bc:	f043 0308 	orr.w	r3, r3, #8
 80039c0:	6313      	str	r3, [r2, #48]	; 0x30
 80039c2:	4b2c      	ldr	r3, [pc, #176]	; (8003a74 <_platform_rccGPIOClockEnable+0x188>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	61bb      	str	r3, [r7, #24]
 80039cc:	69bb      	ldr	r3, [r7, #24]
        break;
 80039ce:	e03b      	b.n	8003a48 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOE_CLK_ENABLE();
 80039d0:	2300      	movs	r3, #0
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	4b27      	ldr	r3, [pc, #156]	; (8003a74 <_platform_rccGPIOClockEnable+0x188>)
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	4a26      	ldr	r2, [pc, #152]	; (8003a74 <_platform_rccGPIOClockEnable+0x188>)
 80039da:	f043 0310 	orr.w	r3, r3, #16
 80039de:	6313      	str	r3, [r2, #48]	; 0x30
 80039e0:	4b24      	ldr	r3, [pc, #144]	; (8003a74 <_platform_rccGPIOClockEnable+0x188>)
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	697b      	ldr	r3, [r7, #20]
        break;
 80039ec:	e02c      	b.n	8003a48 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOF_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	4b20      	ldr	r3, [pc, #128]	; (8003a74 <_platform_rccGPIOClockEnable+0x188>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	4a1f      	ldr	r2, [pc, #124]	; (8003a74 <_platform_rccGPIOClockEnable+0x188>)
 80039f8:	f043 0320 	orr.w	r3, r3, #32
 80039fc:	6313      	str	r3, [r2, #48]	; 0x30
 80039fe:	4b1d      	ldr	r3, [pc, #116]	; (8003a74 <_platform_rccGPIOClockEnable+0x188>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	613b      	str	r3, [r7, #16]
 8003a08:	693b      	ldr	r3, [r7, #16]
        break;
 8003a0a:	e01d      	b.n	8003a48 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	4b18      	ldr	r3, [pc, #96]	; (8003a74 <_platform_rccGPIOClockEnable+0x188>)
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	4a17      	ldr	r2, [pc, #92]	; (8003a74 <_platform_rccGPIOClockEnable+0x188>)
 8003a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a1c:	4b15      	ldr	r3, [pc, #84]	; (8003a74 <_platform_rccGPIOClockEnable+0x188>)
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	68fb      	ldr	r3, [r7, #12]
        break;
 8003a28:	e00e      	b.n	8003a48 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <_platform_rccGPIOClockEnable+0x188>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	4a10      	ldr	r2, [pc, #64]	; (8003a74 <_platform_rccGPIOClockEnable+0x188>)
 8003a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a38:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3a:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <_platform_rccGPIOClockEnable+0x188>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a42:	60bb      	str	r3, [r7, #8]
 8003a44:	68bb      	ldr	r3, [r7, #8]
        break;
 8003a46:	bf00      	nop
}
 8003a48:	bf00      	nop
 8003a4a:	372c      	adds	r7, #44	; 0x2c
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	40021c00 	.word	0x40021c00
 8003a58:	40021800 	.word	0x40021800
 8003a5c:	40021400 	.word	0x40021400
 8003a60:	40021000 	.word	0x40021000
 8003a64:	40020c00 	.word	0x40020c00
 8003a68:	40020800 	.word	0x40020800
 8003a6c:	40020000 	.word	0x40020000
 8003a70:	40020400 	.word	0x40020400
 8003a74:	40023800 	.word	0x40023800

08003a78 <_platform_adcChannelConfig>:
#endif /* HAL_GPIO_MODULE_ENABLED */

#ifdef HAL_ADC_MODULE_ENABLED

ADC_ChannelConfTypeDef _platform_adcChannelConfig(const cmr_adcChannel_t *channel, uint32_t rank)
{
 8003a78:	b490      	push	{r4, r7}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
    ADC_ChannelConfTypeDef channelConfig = {
        .Channel = channel->channel,
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	681b      	ldr	r3, [r3, #0]
    ADC_ChannelConfTypeDef channelConfig = {
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	617b      	str	r3, [r7, #20]
        .Rank = rank, // HAL needs Rank to be from 1 to 16
        .SamplingTime = channel->samplingTime,
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	68db      	ldr	r3, [r3, #12]
    ADC_ChannelConfTypeDef channelConfig = {
 8003a92:	61bb      	str	r3, [r7, #24]
 8003a94:	2300      	movs	r3, #0
 8003a96:	61fb      	str	r3, [r7, #28]
        .Offset = 0 // reserved, set to 0
    };

    return channelConfig;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	461c      	mov	r4, r3
 8003a9c:	f107 0310 	add.w	r3, r7, #16
 8003aa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003aa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	3720      	adds	r7, #32
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc90      	pop	{r4, r7}
 8003aae:	4770      	bx	lr

08003ab0 <_platform_adcPinConfig>:

GPIO_InitTypeDef _platform_adcPinConfig(const cmr_adcChannel_t *channel)
{
 8003ab0:	b4b0      	push	{r4, r5, r7}
 8003ab2:	b089      	sub	sp, #36	; 0x24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
    GPIO_InitTypeDef pinConfig = {
        .Pin = channel->pin,
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	891b      	ldrh	r3, [r3, #8]
    GPIO_InitTypeDef pinConfig = {
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61bb      	str	r3, [r7, #24]
 8003acc:	2300      	movs	r3, #0
 8003ace:	61fb      	str	r3, [r7, #28]
        .Mode = GPIO_MODE_ANALOG,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_LOW,
        .Alternate = 0};

    return pinConfig;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	461d      	mov	r5, r3
 8003ad4:	f107 040c 	add.w	r4, r7, #12
 8003ad8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ada:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	602b      	str	r3, [r5, #0]
}
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	3724      	adds	r7, #36	; 0x24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bcb0      	pop	{r4, r5, r7}
 8003ae8:	4770      	bx	lr
	...

08003aec <_platform_rccADCClockEnable>:
 * @brief Enables the specified ADC's clock.
 *
 * @param instance The HAL ADC instance.
 */
void _platform_rccADCClockEnable(ADC_TypeDef *instance)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
    switch ((uintptr_t)instance)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a0c      	ldr	r2, [pc, #48]	; (8003b28 <_platform_rccADCClockEnable+0x3c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d10e      	bne.n	8003b1a <_platform_rccADCClockEnable+0x2e>
    {
    case ADC1_BASE:
        __HAL_RCC_ADC1_CLK_ENABLE();
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <_platform_rccADCClockEnable+0x40>)
 8003b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b04:	4a09      	ldr	r2, [pc, #36]	; (8003b2c <_platform_rccADCClockEnable+0x40>)
 8003b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b0a:	6453      	str	r3, [r2, #68]	; 0x44
 8003b0c:	4b07      	ldr	r3, [pc, #28]	; (8003b2c <_platform_rccADCClockEnable+0x40>)
 8003b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	68fb      	ldr	r3, [r7, #12]
        break;
 8003b18:	bf00      	nop
    }
}
 8003b1a:	bf00      	nop
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40012000 	.word	0x40012000
 8003b2c:	40023800 	.word	0x40023800

08003b30 <_platform_adcInit>:
 * @brief Platform-specifc adc initialization
 *
 *  @param adc The ADC to initialize.
 */
void _platform_adcInit(cmr_adc_t *adc, ADC_TypeDef *instance, cmr_adcChannel_t *channels, const size_t channelsLen)
{
 8003b30:	b590      	push	{r4, r7, lr}
 8003b32:	f5ad 5d86 	sub.w	sp, sp, #4288	; 0x10c0
 8003b36:	b081      	sub	sp, #4
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8003b3e:	f844 0cb4 	str.w	r0, [r4, #-180]
 8003b42:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8003b46:	f840 1cb8 	str.w	r1, [r0, #-184]
 8003b4a:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8003b4e:	f841 2cbc 	str.w	r2, [r1, #-188]
 8003b52:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8003b56:	f842 3cc0 	str.w	r3, [r2, #-192]
    *adc = (cmr_adc_t){
 8003b5a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003b5e:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f241 03b0 	movw	r3, #4272	; 0x10b0
 8003b68:	461a      	mov	r2, r3
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	f008 f828 	bl	800bbc0 <memset>
 8003b70:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003b74:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003b78:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8003b7c:	f852 2cb8 	ldr.w	r2, [r2, #-184]
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003b86:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003b8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b8e:	605a      	str	r2, [r3, #4]
 8003b90:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003b94:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	611a      	str	r2, [r3, #16]
 8003b9c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003ba0:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	615a      	str	r2, [r3, #20]
 8003ba8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003bac:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003bb0:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8003bb4:	f852 2cc0 	ldr.w	r2, [r2, #-192]
 8003bb8:	61da      	str	r2, [r3, #28]
 8003bba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003bbe:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2020 	strb.w	r2, [r3, #32]
 8003bc8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003bcc:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	625a      	str	r2, [r3, #36]	; 0x24
 8003bd4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003bd8:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003bdc:	4a0c      	ldr	r2, [pc, #48]	; (8003c10 <_platform_adcInit+0xe0>)
 8003bde:	629a      	str	r2, [r3, #40]	; 0x28
 8003be0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003be4:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003be8:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8003bec:	f852 2cbc 	ldr.w	r2, [r2, #-188]
 8003bf0:	649a      	str	r2, [r3, #72]	; 0x48
 8003bf2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003bf6:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003bfa:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8003bfe:	f852 2cc0 	ldr.w	r2, [r2, #-192]
 8003c02:	64da      	str	r2, [r3, #76]	; 0x4c
                .NbrOfConversion = channelsLen,
                .DMAContinuousRequests = DISABLE,
                .EOCSelection = ADC_EOC_SINGLE_CONV}},
        .channels = channels,
        .channelsLen = channelsLen};
}
 8003c04:	bf00      	nop
 8003c06:	f507 5786 	add.w	r7, r7, #4288	; 0x10c0
 8003c0a:	3704      	adds	r7, #4
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd90      	pop	{r4, r7, pc}
 8003c10:	0f000001 	.word	0x0f000001

08003c14 <_platform_rccCANClockEnable>:
 * @brief Enables the specified CAN interface's clock.
 *
 * @param instance The HAL CAN instance.
 */
void _platform_rccCANClockEnable(CAN_TypeDef *instance)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
    switch ((uintptr_t) instance) {
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a27      	ldr	r2, [pc, #156]	; (8003cbc <_platform_rccCANClockEnable+0xa8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d035      	beq.n	8003c90 <_platform_rccCANClockEnable+0x7c>
 8003c24:	4a25      	ldr	r2, [pc, #148]	; (8003cbc <_platform_rccCANClockEnable+0xa8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d841      	bhi.n	8003cae <_platform_rccCANClockEnable+0x9a>
 8003c2a:	4a25      	ldr	r2, [pc, #148]	; (8003cc0 <_platform_rccCANClockEnable+0xac>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d003      	beq.n	8003c38 <_platform_rccCANClockEnable+0x24>
 8003c30:	4a24      	ldr	r2, [pc, #144]	; (8003cc4 <_platform_rccCANClockEnable+0xb0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00f      	beq.n	8003c56 <_platform_rccCANClockEnable+0x42>
            break;
        case CAN3_BASE:
            __HAL_RCC_CAN3_CLK_ENABLE();
            break;
    }
}
 8003c36:	e03a      	b.n	8003cae <_platform_rccCANClockEnable+0x9a>
            __HAL_RCC_CAN1_CLK_ENABLE();
 8003c38:	2300      	movs	r3, #0
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	4b22      	ldr	r3, [pc, #136]	; (8003cc8 <_platform_rccCANClockEnable+0xb4>)
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	4a21      	ldr	r2, [pc, #132]	; (8003cc8 <_platform_rccCANClockEnable+0xb4>)
 8003c42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c46:	6413      	str	r3, [r2, #64]	; 0x40
 8003c48:	4b1f      	ldr	r3, [pc, #124]	; (8003cc8 <_platform_rccCANClockEnable+0xb4>)
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	697b      	ldr	r3, [r7, #20]
            break;
 8003c54:	e02b      	b.n	8003cae <_platform_rccCANClockEnable+0x9a>
            __HAL_RCC_CAN2_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	4b1b      	ldr	r3, [pc, #108]	; (8003cc8 <_platform_rccCANClockEnable+0xb4>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	4a1a      	ldr	r2, [pc, #104]	; (8003cc8 <_platform_rccCANClockEnable+0xb4>)
 8003c60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c64:	6413      	str	r3, [r2, #64]	; 0x40
 8003c66:	4b18      	ldr	r3, [pc, #96]	; (8003cc8 <_platform_rccCANClockEnable+0xb4>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c6e:	613b      	str	r3, [r7, #16]
 8003c70:	693b      	ldr	r3, [r7, #16]
            __HAL_RCC_CAN1_CLK_ENABLE();    // CAN2 also needs CAN1 clock.
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <_platform_rccCANClockEnable+0xb4>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	4a13      	ldr	r2, [pc, #76]	; (8003cc8 <_platform_rccCANClockEnable+0xb4>)
 8003c7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c80:	6413      	str	r3, [r2, #64]	; 0x40
 8003c82:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <_platform_rccCANClockEnable+0xb4>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
            break;
 8003c8e:	e00e      	b.n	8003cae <_platform_rccCANClockEnable+0x9a>
            __HAL_RCC_CAN3_CLK_ENABLE();
 8003c90:	2300      	movs	r3, #0
 8003c92:	60bb      	str	r3, [r7, #8]
 8003c94:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <_platform_rccCANClockEnable+0xb4>)
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	4a0b      	ldr	r2, [pc, #44]	; (8003cc8 <_platform_rccCANClockEnable+0xb4>)
 8003c9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c9e:	6413      	str	r3, [r2, #64]	; 0x40
 8003ca0:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <_platform_rccCANClockEnable+0xb4>)
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	68bb      	ldr	r3, [r7, #8]
            break;
 8003cac:	bf00      	nop
}
 8003cae:	bf00      	nop
 8003cb0:	371c      	adds	r7, #28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40006c00 	.word	0x40006c00
 8003cc0:	40006400 	.word	0x40006400
 8003cc4:	40006800 	.word	0x40006800
 8003cc8:	40023800 	.word	0x40023800

08003ccc <EXTI0_IRQHandler>:
 */
#define EXTI_IRQHandler(name, pins) \
    void EXTI##name##_IRQHandler(void) { \
        HAL_GPIO_EXTI_IRQHandler(pins); \
    }
EXTI_IRQHandler(0, GPIO_PIN_0)
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	2001      	movs	r0, #1
 8003cd2:	f004 fc9d 	bl	8008610 <HAL_GPIO_EXTI_IRQHandler>
 8003cd6:	bf00      	nop
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <EXTI1_IRQHandler>:
EXTI_IRQHandler(1, GPIO_PIN_1)
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	2002      	movs	r0, #2
 8003ce0:	f004 fc96 	bl	8008610 <HAL_GPIO_EXTI_IRQHandler>
 8003ce4:	bf00      	nop
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <EXTI2_IRQHandler>:
EXTI_IRQHandler(2, GPIO_PIN_2)
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	2004      	movs	r0, #4
 8003cee:	f004 fc8f 	bl	8008610 <HAL_GPIO_EXTI_IRQHandler>
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <EXTI3_IRQHandler>:
EXTI_IRQHandler(3, GPIO_PIN_3)
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	2008      	movs	r0, #8
 8003cfc:	f004 fc88 	bl	8008610 <HAL_GPIO_EXTI_IRQHandler>
 8003d00:	bf00      	nop
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <EXTI4_IRQHandler>:
EXTI_IRQHandler(4, GPIO_PIN_4)
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	2010      	movs	r0, #16
 8003d0a:	f004 fc81 	bl	8008610 <HAL_GPIO_EXTI_IRQHandler>
 8003d0e:	bf00      	nop
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <EXTI9_5_IRQHandler>:
EXTI_IRQHandler(
 8003d12:	b580      	push	{r7, lr}
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 8003d1a:	f004 fc79 	bl	8008610 <HAL_GPIO_EXTI_IRQHandler>
 8003d1e:	bf00      	nop
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <EXTI15_10_IRQHandler>:
    9_5,
    GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_7 | GPIO_PIN_6 | GPIO_PIN_5
)
EXTI_IRQHandler(
 8003d22:	b580      	push	{r7, lr}
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 8003d2a:	f004 fc71 	bl	8008610 <HAL_GPIO_EXTI_IRQHandler>
 8003d2e:	bf00      	nop
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <cmr_gpioPinInit>:
 * @brief Configures the specified GPIO pin(s).
 *
 * @param pinConfigs The pin configuration(s).
 * @param pinConfigsLen The number of pin configurations.
 */
void cmr_gpioPinInit(const cmr_gpioPinConfig_t *pinConfigs, const size_t pinConfigsLen) {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
    cmr_gpioPinConfigs = pinConfigs;
 8003d3e:	4a16      	ldr	r2, [pc, #88]	; (8003d98 <cmr_gpioPinInit+0x64>)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6013      	str	r3, [r2, #0]
    cmr_gpioPinConfigsLen = pinConfigsLen;
 8003d44:	4a15      	ldr	r2, [pc, #84]	; (8003d9c <cmr_gpioPinInit+0x68>)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	6013      	str	r3, [r2, #0]

    for (size_t i = 0; i < cmr_gpioPinConfigsLen; i++) {
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	e018      	b.n	8003d82 <cmr_gpioPinInit+0x4e>
        const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[i];
 8003d50:	4b11      	ldr	r3, [pc, #68]	; (8003d98 <cmr_gpioPinInit+0x64>)
 8003d52:	6819      	ldr	r1, [r3, #0]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4613      	mov	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	4413      	add	r3, r2
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	440b      	add	r3, r1
 8003d60:	60bb      	str	r3, [r7, #8]
        cmr_rccGPIOClockEnable(pinConfig->port);
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fa3b 	bl	80041e2 <cmr_rccGPIOClockEnable>

        // The HAL GPIO driver doesn't actually declare the initialization
        // struct as `const`, but it doesn't modify it either.
        HAL_GPIO_Init(
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	681a      	ldr	r2, [r3, #0]
            pinConfig->port,
            (GPIO_InitTypeDef *) &pinConfig->init
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	3304      	adds	r3, #4
        HAL_GPIO_Init(
 8003d74:	4619      	mov	r1, r3
 8003d76:	4610      	mov	r0, r2
 8003d78:	f004 fa6a 	bl	8008250 <HAL_GPIO_Init>
    for (size_t i = 0; i < cmr_gpioPinConfigsLen; i++) {
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <cmr_gpioPinInit+0x68>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d3e1      	bcc.n	8003d50 <cmr_gpioPinInit+0x1c>
        );
    }
}
 8003d8c:	bf00      	nop
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	20008830 	.word	0x20008830
 8003d9c:	20008834 	.word	0x20008834

08003da0 <cmr_gpioWrite>:
 * @brief Writes a value to an output GPIO pin.
 *
 * @param pin The pin to write to.
 * @param value The value to write (zero for off; non-zero for on).
 */
void cmr_gpioWrite(size_t pin, int value) {
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
    configASSERT(pin < cmr_gpioPinConfigsLen);
 8003daa:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <cmr_gpioWrite+0x6c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d303      	bcc.n	8003dbc <cmr_gpioWrite+0x1c>
 8003db4:	214f      	movs	r1, #79	; 0x4f
 8003db6:	4816      	ldr	r0, [pc, #88]	; (8003e10 <cmr_gpioWrite+0x70>)
 8003db8:	f000 fa07 	bl	80041ca <cmr_panic>

    const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[pin];
 8003dbc:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <cmr_gpioWrite+0x74>)
 8003dbe:	6819      	ldr	r1, [r3, #0]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	4413      	add	r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	440b      	add	r3, r1
 8003dcc:	60fb      	str	r3, [r7, #12]
    configASSERT(
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d007      	beq.n	8003de6 <cmr_gpioWrite+0x46>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b11      	cmp	r3, #17
 8003ddc:	d003      	beq.n	8003de6 <cmr_gpioWrite+0x46>
 8003dde:	2152      	movs	r1, #82	; 0x52
 8003de0:	480d      	ldr	r0, [pc, #52]	; (8003e18 <cmr_gpioWrite+0x78>)
 8003de2:	f000 f9f2 	bl	80041ca <cmr_panic>
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_PP) ||
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_OD)
    );

    HAL_GPIO_WritePin(
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6818      	ldr	r0, [r3, #0]
        pinConfig->port, pinConfig->init.Pin,
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	685b      	ldr	r3, [r3, #4]
    HAL_GPIO_WritePin(
 8003dee:	b299      	uxth	r1, r3
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	bf14      	ite	ne
 8003df6:	2301      	movne	r3, #1
 8003df8:	2300      	moveq	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	f004 fbd3 	bl	80085a8 <HAL_GPIO_WritePin>
        value ? GPIO_PIN_SET : GPIO_PIN_RESET
    );
}
 8003e02:	bf00      	nop
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20008834 	.word	0x20008834
 8003e10:	0800bfc8 	.word	0x0800bfc8
 8003e14:	20008830 	.word	0x20008830
 8003e18:	0800c01c 	.word	0x0800c01c

08003e1c <cmr_gpioToggle>:
/**
 * @brief Toggles an output GPIO pin's value.
 *
 * @param pin The pin to toggle.
 */
void cmr_gpioToggle(size_t pin) {
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
    configASSERT(pin < cmr_gpioPinConfigsLen);
 8003e24:	4b15      	ldr	r3, [pc, #84]	; (8003e7c <cmr_gpioToggle+0x60>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d303      	bcc.n	8003e36 <cmr_gpioToggle+0x1a>
 8003e2e:	2163      	movs	r1, #99	; 0x63
 8003e30:	4813      	ldr	r0, [pc, #76]	; (8003e80 <cmr_gpioToggle+0x64>)
 8003e32:	f000 f9ca 	bl	80041ca <cmr_panic>

    const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[pin];
 8003e36:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <cmr_gpioToggle+0x68>)
 8003e38:	6819      	ldr	r1, [r3, #0]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	4413      	add	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	440b      	add	r3, r1
 8003e46:	60fb      	str	r3, [r7, #12]
    configASSERT(
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d007      	beq.n	8003e60 <cmr_gpioToggle+0x44>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b11      	cmp	r3, #17
 8003e56:	d003      	beq.n	8003e60 <cmr_gpioToggle+0x44>
 8003e58:	2166      	movs	r1, #102	; 0x66
 8003e5a:	480b      	ldr	r0, [pc, #44]	; (8003e88 <cmr_gpioToggle+0x6c>)
 8003e5c:	f000 f9b5 	bl	80041ca <cmr_panic>
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_PP) ||
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_OD)
    );

    HAL_GPIO_TogglePin(pinConfig->port, pinConfig->init.Pin);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	f004 fbb4 	bl	80085da <HAL_GPIO_TogglePin>
}
 8003e72:	bf00      	nop
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20008834 	.word	0x20008834
 8003e80:	0800bfc8 	.word	0x0800bfc8
 8003e84:	20008830 	.word	0x20008830
 8003e88:	0800c01c 	.word	0x0800c01c

08003e8c <cmr_gpioRead>:
/**
 * @brief Reads a value from a GPIO pin.
 *
 * @return 0 if the pin was off; otherwise 1.
 */
int cmr_gpioRead(size_t pin) {
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
    configASSERT(pin < cmr_gpioPinConfigsLen);
 8003e94:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <cmr_gpioRead+0x58>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d303      	bcc.n	8003ea6 <cmr_gpioRead+0x1a>
 8003e9e:	2174      	movs	r1, #116	; 0x74
 8003ea0:	4811      	ldr	r0, [pc, #68]	; (8003ee8 <cmr_gpioRead+0x5c>)
 8003ea2:	f000 f992 	bl	80041ca <cmr_panic>

    const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[pin];
 8003ea6:	4b11      	ldr	r3, [pc, #68]	; (8003eec <cmr_gpioRead+0x60>)
 8003ea8:	6819      	ldr	r1, [r3, #0]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	4413      	add	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	440b      	add	r3, r1
 8003eb6:	60fb      	str	r3, [r7, #12]
    GPIO_PinState state = HAL_GPIO_ReadPin(
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681a      	ldr	r2, [r3, #0]
        pinConfig->port, pinConfig->init.Pin
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	685b      	ldr	r3, [r3, #4]
    GPIO_PinState state = HAL_GPIO_ReadPin(
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	f004 fb57 	bl	8008578 <HAL_GPIO_ReadPin>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	72fb      	strb	r3, [r7, #11]
    );
    if (state == GPIO_PIN_RESET) {
 8003ece:	7afb      	ldrb	r3, [r7, #11]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <cmr_gpioRead+0x4c>
        return 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	e000      	b.n	8003eda <cmr_gpioRead+0x4e>
    }

    return 1;
 8003ed8:	2301      	movs	r3, #1
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20008834 	.word	0x20008834
 8003ee8:	0800bfc8 	.word	0x0800bfc8
 8003eec:	20008830 	.word	0x20008830

08003ef0 <I2C1_EV_IRQHandler>:
static cmr_i2cDevice_t cmr_i2cDevices[2];

/**
 * @brief I2C interrupt handler.
 */
void I2C1_EV_IRQHandler(void) {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
    HAL_I2C_EV_IRQHandler(cmr_i2cDevices[0].handle);
 8003ef4:	4b03      	ldr	r3, [pc, #12]	; (8003f04 <I2C1_EV_IRQHandler+0x14>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f005 f80f 	bl	8008f1c <HAL_I2C_EV_IRQHandler>
}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20008838 	.word	0x20008838

08003f08 <I2C2_EV_IRQHandler>:

/**
 * @brief I2C interrupt handler.
 */
void I2C2_EV_IRQHandler(void) {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
    HAL_I2C_EV_IRQHandler(cmr_i2cDevices[1].handle);
 8003f0c:	4b03      	ldr	r3, [pc, #12]	; (8003f1c <I2C2_EV_IRQHandler+0x14>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f005 f803 	bl	8008f1c <HAL_I2C_EV_IRQHandler>
}
 8003f16:	bf00      	nop
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20008838 	.word	0x20008838

08003f20 <cmr_i2cDoneCallback>:
 *
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL I2C handle.
 */
static void cmr_i2cDoneCallback(I2C_HandleTypeDef *handle, int tx) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
    char *addr = (void *) handle;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	617b      	str	r3, [r7, #20]
    cmr_i2c_t *i2c = (void *) (addr - offsetof(cmr_i2c_t, handle));
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	613b      	str	r3, [r7, #16]

    // Indicate completion.
    BaseType_t higherWoken;
    SemaphoreHandle_t sem = tx ? i2c->txDone : i2c->rxDone;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <cmr_i2cDoneCallback+0x20>
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003f3e:	e002      	b.n	8003f46 <cmr_i2cDoneCallback+0x26>
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8003f46:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreGiveFromISR(sem, &higherWoken) != pdTRUE) {
 8003f48:	f107 0308 	add.w	r3, r7, #8
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f001 f884 	bl	800505c <xQueueGiveFromISR>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d002      	beq.n	8003f60 <cmr_i2cDoneCallback+0x40>
        cmr_panic("I2C done semaphore released more than once!");
 8003f5a:	4809      	ldr	r0, [pc, #36]	; (8003f80 <cmr_i2cDoneCallback+0x60>)
 8003f5c:	f000 f935 	bl	80041ca <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d007      	beq.n	8003f76 <cmr_i2cDoneCallback+0x56>
 8003f66:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <cmr_i2cDoneCallback+0x64>)
 8003f68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	f3bf 8f6f 	isb	sy
}
 8003f76:	bf00      	nop
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	0800c108 	.word	0x0800c108
 8003f84:	e000ed04 	.word	0xe000ed04

08003f88 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *handle) {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
    cmr_i2cDoneCallback(handle, 1);
 8003f90:	2101      	movs	r1, #1
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff ffc4 	bl	8003f20 <cmr_i2cDoneCallback>
}
 8003f98:	bf00      	nop
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *handle) {
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
    cmr_i2cDoneCallback(handle, 0);
 8003fa8:	2100      	movs	r1, #0
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff ffb8 	bl	8003f20 <cmr_i2cDoneCallback>
}
 8003fb0:	bf00      	nop
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <cmr_i2cTX>:
  * @param timeout_ms Amount of time to wait in milliseconds.
  *
  * @retval 0 upon success, or otherwise a negative error code
  */
int cmr_i2cTX(cmr_i2c_t *i2c, uint16_t devAddr, uint8_t *data,
              size_t dataLength, uint32_t timeout_ms) {
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	607a      	str	r2, [r7, #4]
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	817b      	strh	r3, [r7, #10]
    // Shift the address by 1 per HAL library suggestion
    HAL_StatusTypeDef txStatus = HAL_I2C_Master_Transmit(
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	897b      	ldrh	r3, [r7, #10]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	b299      	uxth	r1, r3
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	f004 fc7a 	bl	80088d4 <HAL_I2C_Master_Transmit>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	75fb      	strb	r3, [r7, #23]
        &(i2c->handle), devAddr << 1, data, dataLength, timeout_ms
    );

    if (txStatus != HAL_OK) {
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <cmr_i2cTX+0x38>
        return -1;
 8003fea:	f04f 33ff 	mov.w	r3, #4294967295
 8003fee:	e000      	b.n	8003ff2 <cmr_i2cTX+0x3a>
    }

    return 0;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <cmr_i2cRX>:
  * @param timeout_ms Amount of time to wait in milliseconds.
  *
  * @retval 0 upon success, or otherwise a negative error code
  */
int cmr_i2cRX(cmr_i2c_t *i2c, uint16_t devAddr, uint8_t *data,
              size_t dataLength, uint32_t timeout_ms) {
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b088      	sub	sp, #32
 8003ffe:	af02      	add	r7, sp, #8
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
 8004006:	460b      	mov	r3, r1
 8004008:	817b      	strh	r3, [r7, #10]
    // Shift the address by 1 per HAL library suggestion
    HAL_StatusTypeDef rxStatus = HAL_I2C_Master_Receive(
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	897b      	ldrh	r3, [r7, #10]
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	b299      	uxth	r1, r3
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	b29a      	uxth	r2, r3
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	4613      	mov	r3, r2
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	f004 fd57 	bl	8008ad0 <HAL_I2C_Master_Receive>
 8004022:	4603      	mov	r3, r0
 8004024:	75fb      	strb	r3, [r7, #23]
        &(i2c->handle), devAddr << 1, data, dataLength, timeout_ms
    );


    if (rxStatus != HAL_OK) {
 8004026:	7dfb      	ldrb	r3, [r7, #23]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <cmr_i2cRX+0x38>
        return -1;
 800402c:	f04f 33ff 	mov.w	r3, #4294967295
 8004030:	e000      	b.n	8004034 <cmr_i2cRX+0x3a>
    }

    return 0;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <cmr_i2cInit>:
void cmr_i2cInit(
    cmr_i2c_t *i2c, I2C_TypeDef *instance,
    uint32_t clockSpeed, uint32_t ownAddr,
    GPIO_TypeDef *i2cClkPort, uint32_t i2cClkPin,
    GPIO_TypeDef *i2cDataPort, uint32_t i2cDataPin
) {
 800403c:	b590      	push	{r4, r7, lr}
 800403e:	b0f5      	sub	sp, #468	; 0x1d4
 8004040:	af00      	add	r7, sp, #0
 8004042:	f507 74e8 	add.w	r4, r7, #464	; 0x1d0
 8004046:	f5a4 74e2 	sub.w	r4, r4, #452	; 0x1c4
 800404a:	6020      	str	r0, [r4, #0]
 800404c:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 8004050:	f5a0 70e4 	sub.w	r0, r0, #456	; 0x1c8
 8004054:	6001      	str	r1, [r0, #0]
 8004056:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 800405a:	f5a1 71e6 	sub.w	r1, r1, #460	; 0x1cc
 800405e:	600a      	str	r2, [r1, #0]
 8004060:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8004064:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004068:	6013      	str	r3, [r2, #0]
    *i2c = (cmr_i2c_t) {
 800406a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800406e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
 800407a:	461a      	mov	r2, r3
 800407c:	2100      	movs	r1, #0
 800407e:	f007 fd9f 	bl	800bbc0 <memset>
 8004082:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004086:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8004090:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004094:	6812      	ldr	r2, [r2, #0]
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800409c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 80040a6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80040aa:	6812      	ldr	r2, [r2, #0]
 80040ac:	605a      	str	r2, [r3, #4]
 80040ae:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80040b2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 80040bc:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80040c0:	6812      	ldr	r2, [r2, #0]
 80040c2:	60da      	str	r2, [r3, #12]
 80040c4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80040c8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040d2:	611a      	str	r2, [r3, #16]
                .NoStretchMode = I2C_NOSTRETCH_DISABLE
            }
        }
    };

    cmr_rccI2CClockEnable(instance);
 80040d4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80040d8:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	f000 f8a1 	bl	8004224 <cmr_rccI2CClockEnable>
    cmr_rccGPIOClockEnable(i2cClkPort);
 80040e2:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 80040e6:	f000 f87c 	bl	80041e2 <cmr_rccGPIOClockEnable>
    cmr_rccGPIOClockEnable(i2cDataPort);
 80040ea:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 80040ee:	f000 f878 	bl	80041e2 <cmr_rccGPIOClockEnable>

    if (HAL_I2C_Init(&(i2c->handle)) != HAL_OK) {
 80040f2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80040f6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f004 faab 	bl	8008658 <HAL_I2C_Init>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <cmr_i2cInit+0xd2>
        cmr_panic("HAL_I2C_Init() failed!");
 8004108:	481d      	ldr	r0, [pc, #116]	; (8004180 <cmr_i2cInit+0x144>)
 800410a:	f000 f85e 	bl	80041ca <cmr_panic>
    }

    // TODO: Init GPIO with CMR drivers instead of HAL
    GPIO_InitTypeDef pinConfig = {
 800410e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004112:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004116:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004120:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004124:	2212      	movs	r2, #18
 8004126:	605a      	str	r2, [r3, #4]
 8004128:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800412c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004130:	2201      	movs	r2, #1
 8004132:	609a      	str	r2, [r3, #8]
 8004134:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004138:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800413c:	2203      	movs	r2, #3
 800413e:	60da      	str	r2, [r3, #12]
 8004140:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004144:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004148:	2204      	movs	r2, #4
 800414a:	611a      	str	r2, [r3, #16]
        .Pull = GPIO_PULLUP,
        .Speed = GPIO_SPEED_FREQ_VERY_HIGH,
        .Alternate = GPIO_AF4_I2C1
    };

    HAL_GPIO_Init(i2cClkPort, &pinConfig);
 800414c:	f107 0310 	add.w	r3, r7, #16
 8004150:	4619      	mov	r1, r3
 8004152:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 8004156:	f004 f87b 	bl	8008250 <HAL_GPIO_Init>
    pinConfig.Pin = i2cDataPin;
 800415a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800415e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004162:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8004166:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(i2cDataPort, &pinConfig);
 8004168:	f107 0310 	add.w	r3, r7, #16
 800416c:	4619      	mov	r1, r3
 800416e:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 8004172:	f004 f86d 	bl	8008250 <HAL_GPIO_Init>
}
 8004176:	bf00      	nop
 8004178:	f507 77ea 	add.w	r7, r7, #468	; 0x1d4
 800417c:	46bd      	mov	sp, r7
 800417e:	bd90      	pop	{r4, r7, pc}
 8004180:	0800c134 	.word	0x0800c134

08004184 <SysTick_Handler>:
extern void xPortSysTickHandler(void);

/**
 * @brief System tick interrupt handler.
 */
void SysTick_Handler(void) {
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
    HAL_IncTick();  // Report tick to HAL.
 8004188:	f002 fae6 	bl	8006758 <HAL_IncTick>

    if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED) {
 800418c:	f001 ff7e 	bl	800608c <xTaskGetSchedulerState>
 8004190:	4603      	mov	r3, r0
 8004192:	2b01      	cmp	r3, #1
 8004194:	d002      	beq.n	800419c <SysTick_Handler+0x18>
        return;
    }

    xPortSysTickHandler();  // Invoke FreeRTOS tick handler.
 8004196:	f002 fa07 	bl	80065a8 <xPortSysTickHandler>
 800419a:	e000      	b.n	800419e <SysTick_Handler+0x1a>
        return;
 800419c:	bf00      	nop
}
 800419e:	bd80      	pop	{r7, pc}

080041a0 <NMI_Handler>:

/**
 * @brief Non-maskable interrupt handler.
 */
void NMI_Handler(void) {
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
    // Nothing to do.
}
 80041a4:	bf00      	nop
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <DebugMon_Handler>:

/**
 * @brief Debug monitor exception handler.
 */
void DebugMon_Handler(void) {
 80041ae:	b480      	push	{r7}
 80041b0:	af00      	add	r7, sp, #0
    // Nothing to do.
}
 80041b2:	bf00      	nop
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <cmr_panicSetup>:
 * @brief Default pre-panic setup implementation.
 *
 * Nothing happens by default; this should be overridden if custom behavior is
 * desired.
 */
void cmr_panicSetup(void) {
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
    // Nothing to do.
}
 80041c0:	bf00      	nop
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <cmr_panic>:
 * @param fmt The formatting string.
 * @param ... Additional arguments for formatting.
 *
 * @return Does not return.
 */
void cmr_panic(const char *fmt, ...) {
 80041ca:	b40f      	push	{r0, r1, r2, r3}
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
    (void) fmt;

    cmr_panicSetup();
 80041d0:	f7ff fff4 	bl	80041bc <cmr_panicSetup>

    while (1) {
        continue;
 80041d4:	e7fe      	b.n	80041d4 <cmr_panic+0xa>

080041d6 <cmr_rccSystemClockEnable>:
 * @brief Configures the system and peripheral clocks using external oscillator
 *
 * @note Generated by STM32Cube. Sets System Clock to 96 MHz, with only APB1
 * Peripheral Clocks at 48 MHz (APB1 Timer Clocks are still 96 MHz).
 */
void cmr_rccSystemClockEnable(void)  {
 80041d6:	b580      	push	{r7, lr}
 80041d8:	af00      	add	r7, sp, #0
    _platform_rccSystemClockEnable();
 80041da:	f7ff fb17 	bl	800380c <_platform_rccSystemClockEnable>
}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <cmr_rccGPIOClockEnable>:
/**
 * @brief Enables the specified GPIO port's clock.
 *
 * @param port The GPIO port.
 */
void cmr_rccGPIOClockEnable(GPIO_TypeDef *port) {
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b082      	sub	sp, #8
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
    _platform_rccGPIOClockEnable(port);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff fb7e 	bl	80038ec <_platform_rccGPIOClockEnable>
}
 80041f0:	bf00      	nop
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <cmr_rccADCClockEnable>:
/**
 * @brief Enables the specified ADC's clock.
 *
 * @param instance The HAL ADC instance.
 */
void cmr_rccADCClockEnable(ADC_TypeDef *instance) {
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
    _platform_rccADCClockEnable(instance);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff fc73 	bl	8003aec <_platform_rccADCClockEnable>
}
 8004206:	bf00      	nop
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <cmr_rccCANClockEnable>:
/**
 * @brief Enables the specified CAN interface's clock.
 *
 * @param instance The HAL CAN instance.
 */
void cmr_rccCANClockEnable(CAN_TypeDef *instance) {
 800420e:	b580      	push	{r7, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
    _platform_rccCANClockEnable(instance);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7ff fcfc 	bl	8003c14 <_platform_rccCANClockEnable>
}
 800421c:	bf00      	nop
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <cmr_rccI2CClockEnable>:
/**
 * @brief Enables the specified I2C port's clock.
 *
 * @param instance The HAL I2C instance.
 */
void cmr_rccI2CClockEnable(I2C_TypeDef *instance) {
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
    switch ((uintptr_t) instance) {
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a20      	ldr	r2, [pc, #128]	; (80042b0 <cmr_rccI2CClockEnable+0x8c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d027      	beq.n	8004284 <cmr_rccI2CClockEnable+0x60>
 8004234:	4a1e      	ldr	r2, [pc, #120]	; (80042b0 <cmr_rccI2CClockEnable+0x8c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d833      	bhi.n	80042a2 <cmr_rccI2CClockEnable+0x7e>
 800423a:	4a1e      	ldr	r2, [pc, #120]	; (80042b4 <cmr_rccI2CClockEnable+0x90>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d003      	beq.n	8004248 <cmr_rccI2CClockEnable+0x24>
 8004240:	4a1d      	ldr	r2, [pc, #116]	; (80042b8 <cmr_rccI2CClockEnable+0x94>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00f      	beq.n	8004266 <cmr_rccI2CClockEnable+0x42>
            break;
        case I2C3_BASE:
            __HAL_RCC_I2C3_CLK_ENABLE();
            break;
    }
}
 8004246:	e02c      	b.n	80042a2 <cmr_rccI2CClockEnable+0x7e>
            __HAL_RCC_I2C1_CLK_ENABLE();
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <cmr_rccI2CClockEnable+0x98>)
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	4a1a      	ldr	r2, [pc, #104]	; (80042bc <cmr_rccI2CClockEnable+0x98>)
 8004252:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004256:	6413      	str	r3, [r2, #64]	; 0x40
 8004258:	4b18      	ldr	r3, [pc, #96]	; (80042bc <cmr_rccI2CClockEnable+0x98>)
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	697b      	ldr	r3, [r7, #20]
            break;
 8004264:	e01d      	b.n	80042a2 <cmr_rccI2CClockEnable+0x7e>
            __HAL_RCC_I2C2_CLK_ENABLE();
 8004266:	2300      	movs	r3, #0
 8004268:	613b      	str	r3, [r7, #16]
 800426a:	4b14      	ldr	r3, [pc, #80]	; (80042bc <cmr_rccI2CClockEnable+0x98>)
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	4a13      	ldr	r2, [pc, #76]	; (80042bc <cmr_rccI2CClockEnable+0x98>)
 8004270:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004274:	6413      	str	r3, [r2, #64]	; 0x40
 8004276:	4b11      	ldr	r3, [pc, #68]	; (80042bc <cmr_rccI2CClockEnable+0x98>)
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427e:	613b      	str	r3, [r7, #16]
 8004280:	693b      	ldr	r3, [r7, #16]
            break;
 8004282:	e00e      	b.n	80042a2 <cmr_rccI2CClockEnable+0x7e>
            __HAL_RCC_I2C3_CLK_ENABLE();
 8004284:	2300      	movs	r3, #0
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	4b0c      	ldr	r3, [pc, #48]	; (80042bc <cmr_rccI2CClockEnable+0x98>)
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	4a0b      	ldr	r2, [pc, #44]	; (80042bc <cmr_rccI2CClockEnable+0x98>)
 800428e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004292:	6413      	str	r3, [r2, #64]	; 0x40
 8004294:	4b09      	ldr	r3, [pc, #36]	; (80042bc <cmr_rccI2CClockEnable+0x98>)
 8004296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004298:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	68fb      	ldr	r3, [r7, #12]
            break;
 80042a0:	bf00      	nop
}
 80042a2:	bf00      	nop
 80042a4:	371c      	adds	r7, #28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40005c00 	.word	0x40005c00
 80042b4:	40005400 	.word	0x40005400
 80042b8:	40005800 	.word	0x40005800
 80042bc:	40023800 	.word	0x40023800

080042c0 <cmr_sensorInit>:
 *
 * @note The sensor's public fields should already be filled in!
 *
 * @param sensor The sensor to initialize.
 */
static void cmr_sensorInit(cmr_sensor_t *sensor) {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08a      	sub	sp, #40	; 0x28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
    configASSERT(sensor->readingMax >= sensor->readingMin);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d203      	bcs.n	80042dc <cmr_sensorInit+0x1c>
 80042d4:	2114      	movs	r1, #20
 80042d6:	482a      	ldr	r0, [pc, #168]	; (8004380 <cmr_sensorInit+0xc0>)
 80042d8:	f7ff ff77 	bl	80041ca <cmr_panic>

    // Calculate tolerance.
    const uint32_t readingRange = sensor->readingMax - sensor->readingMin;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	61bb      	str	r3, [r7, #24]
    uint32_t readingTolerance;
    // Prevent overflow.
    if (UINT32_MAX / sensor->outOfRange_pcnt < readingRange) {
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	2100      	movs	r1, #0
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	fba3 2302 	umull	r2, r3, r3, r2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d000      	beq.n	80042fa <cmr_sensorInit+0x3a>
 80042f8:	2101      	movs	r1, #1
 80042fa:	460b      	mov	r3, r1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00a      	beq.n	8004316 <cmr_sensorInit+0x56>
        readingTolerance = (readingRange / 100) * sensor->outOfRange_pcnt;
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	4a20      	ldr	r2, [pc, #128]	; (8004384 <cmr_sensorInit+0xc4>)
 8004304:	fba2 2303 	umull	r2, r3, r2, r3
 8004308:	095b      	lsrs	r3, r3, #5
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6912      	ldr	r2, [r2, #16]
 800430e:	fb02 f303 	mul.w	r3, r2, r3
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
 8004314:	e009      	b.n	800432a <cmr_sensorInit+0x6a>
    } else {
        readingTolerance = (readingRange * sensor->outOfRange_pcnt) / 100;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	fb02 f303 	mul.w	r3, r2, r3
 8004320:	4a18      	ldr	r2, [pc, #96]	; (8004384 <cmr_sensorInit+0xc4>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
    }

    // Calculate thresholds from tolerance.
    uint32_t readingUpper = sensor->readingMax + readingTolerance;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004330:	4413      	add	r3, r2
 8004332:	623b      	str	r3, [r7, #32]
    if (readingUpper < sensor->readingMax) {
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	6a3a      	ldr	r2, [r7, #32]
 800433a:	429a      	cmp	r2, r3
 800433c:	d202      	bcs.n	8004344 <cmr_sensorInit+0x84>
        readingUpper = UINT32_MAX;  // Overflow!
 800433e:	f04f 33ff 	mov.w	r3, #4294967295
 8004342:	623b      	str	r3, [r7, #32]
    }

    uint32_t readingLower = sensor->readingMin - readingTolerance;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	61fb      	str	r3, [r7, #28]
    if (readingLower > sensor->readingMin) {
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	69fa      	ldr	r2, [r7, #28]
 8004354:	429a      	cmp	r2, r3
 8004356:	d901      	bls.n	800435c <cmr_sensorInit+0x9c>
        readingLower = 0;  // Underflow!
 8004358:	2300      	movs	r3, #0
 800435a:	61fb      	str	r3, [r7, #28]
    }

    sensor->_ = (struct cmr_sensor_private) {
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a3a      	ldr	r2, [r7, #32]
 8004360:	619a      	str	r2, [r3, #24]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69fa      	ldr	r2, [r7, #28]
 8004366:	61da      	str	r2, [r3, #28]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	621a      	str	r2, [r3, #32]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        .readingUpper = readingUpper,
        .readingLower = readingLower,
        .value = 0,
        .error = CMR_SENSOR_ERR_NONE
    };
}
 8004376:	bf00      	nop
 8004378:	3728      	adds	r7, #40	; 0x28
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	0800c200 	.word	0x0800c200
 8004384:	51eb851f 	.word	0x51eb851f

08004388 <cmr_sensorUpdate>:
/**
 * @brief Updates the sensor.
 *
 * @param sensor The sensor to sample.
 */
static void cmr_sensorUpdate(cmr_sensor_t *sensor) {
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
    uint32_t reading = sensor->sample(sensor);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	4798      	blx	r3
 8004398:	60b8      	str	r0, [r7, #8]

    // Check if sensor has gone out-of-range.
    if (reading < sensor->_.readingLower || sensor->_.readingUpper < reading) {
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d304      	bcc.n	80043ae <cmr_sensorUpdate+0x26>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d904      	bls.n	80043b8 <cmr_sensorUpdate+0x30>
        sensor->_.error = CMR_SENSOR_ERR_OUT_OF_RANGE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80043b6:	e003      	b.n	80043c0 <cmr_sensorUpdate+0x38>
    } else {
        sensor->_.error = CMR_SENSOR_ERR_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }

    uint32_t value;
    if (sensor->conv != NULL) {
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d007      	beq.n	80043d8 <cmr_sensorUpdate+0x50>
        value = sensor->conv(sensor, reading);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	4798      	blx	r3
 80043d2:	4603      	mov	r3, r0
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	e001      	b.n	80043dc <cmr_sensorUpdate+0x54>
    } else {
        value = reading;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	60fb      	str	r3, [r7, #12]
    }

    sensor->_.value = value;
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	621a      	str	r2, [r3, #32]
}
 80043e2:	bf00      	nop
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <cmr_sensorListInit>:
 * @param sensorsLen The total number of sensors in the array.
 */
void cmr_sensorListInit(
    cmr_sensorList_t *list,
    cmr_sensor_t *sensors, size_t sensorsLen
) {
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b086      	sub	sp, #24
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < sensorsLen; i++) {
 80043f6:	2300      	movs	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	e00d      	b.n	8004418 <cmr_sensorListInit+0x2e>
        cmr_sensorInit(sensors + i);
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	461a      	mov	r2, r3
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4413      	add	r3, r2
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff ff57 	bl	80042c0 <cmr_sensorInit>
    for (size_t i = 0; i < sensorsLen; i++) {
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	3301      	adds	r3, #1
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	429a      	cmp	r2, r3
 800441e:	d3ed      	bcc.n	80043fc <cmr_sensorListInit+0x12>
    }

    list->sensors = sensors;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	601a      	str	r2, [r3, #0]
    list->sensorsLen = sensorsLen;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	605a      	str	r2, [r3, #4]
}
 800442c:	bf00      	nop
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <cmr_sensorListUpdate>:
/**
 * @brief Updates the given sensor list.
 *
 * @param list The list to update.
 */
void cmr_sensorListUpdate(cmr_sensorList_t *list) {
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < list->sensorsLen; i++) {
 800443c:	2300      	movs	r3, #0
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	e00d      	b.n	800445e <cmr_sensorListUpdate+0x2a>
        cmr_sensorUpdate(list->sensors + i);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6819      	ldr	r1, [r3, #0]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	440b      	add	r3, r1
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff ff98 	bl	8004388 <cmr_sensorUpdate>
    for (size_t i = 0; i < list->sensorsLen; i++) {
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	3301      	adds	r3, #1
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	429a      	cmp	r2, r3
 8004466:	d3ec      	bcc.n	8004442 <cmr_sensorListUpdate+0xe>
    }
}
 8004468:	bf00      	nop
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <cmr_sensorListGetValue>:
 *
 * @return The most recent converted value.
 */
int32_t cmr_sensorListGetValue(
    cmr_sensorList_t *list, size_t channel
) {
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	6039      	str	r1, [r7, #0]
    return list->sensors[channel]._.value;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6819      	ldr	r1, [r3, #0]
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	4613      	mov	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	440b      	add	r3, r1
 800448c:	6a1b      	ldr	r3, [r3, #32]
}
 800448e:	4618      	mov	r0, r3
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
	...

0800449c <cmr_taskInit>:
    cmr_task_t *task,
    const char *name,
    UBaseType_t priority,
    TaskFunction_t func,
    void *arg
) {
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af04      	add	r7, sp, #16
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
        func,
        name,
        sizeof(task->stackBuf) / sizeof(task->stackBuf[0]),
        arg,
        priority,
        task->stackBuf,
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	3360      	adds	r3, #96	; 0x60
    task->handle = xTaskCreateStatic(
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	3204      	adds	r2, #4
 80044b2:	9202      	str	r2, [sp, #8]
 80044b4:	9301      	str	r3, [sp, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044c0:	68b9      	ldr	r1, [r7, #8]
 80044c2:	6838      	ldr	r0, [r7, #0]
 80044c4:	f001 f89c 	bl	8005600 <xTaskCreateStatic>
 80044c8:	4602      	mov	r2, r0
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	601a      	str	r2, [r3, #0]
    );
#else
#error "At least one of configSUPPORT_{STATIC,DYNAMIC}_ALLOCATION must be 1!"
#endif

    configASSERT(task->handle != NULL);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d103      	bne.n	80044de <cmr_taskInit+0x42>
 80044d6:	2130      	movs	r1, #48	; 0x30
 80044d8:	4803      	ldr	r0, [pc, #12]	; (80044e8 <cmr_taskInit+0x4c>)
 80044da:	f7ff fe76 	bl	80041ca <cmr_panic>
}
 80044de:	bf00      	nop
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	0800c264 	.word	0x0800c264

080044ec <vApplicationGetIdleTaskMemory>:
 */
void vApplicationGetIdleTaskMemory(
    StaticTask_t **task,
    StackType_t **stack,
    uint32_t *stackLen
) {
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
    static StaticTask_t taskBuf;

    /** @brief The task's stack buffer. */
    static StackType_t stackBuf[configMINIMAL_STACK_SIZE];

    *task = &taskBuf;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4a07      	ldr	r2, [pc, #28]	; (8004518 <vApplicationGetIdleTaskMemory+0x2c>)
 80044fc:	601a      	str	r2, [r3, #0]
    *stack = stackBuf;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	4a06      	ldr	r2, [pc, #24]	; (800451c <vApplicationGetIdleTaskMemory+0x30>)
 8004502:	601a      	str	r2, [r3, #0]
    *stackLen = sizeof(stackBuf) / sizeof(stackBuf[0]);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800450a:	601a      	str	r2, [r3, #0]
}
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	20008840 	.word	0x20008840
 800451c:	2000889c 	.word	0x2000889c

08004520 <USART1_IRQHandler>:
            HAL_StatusTypeDef status = HAL_UART_AbortReceive_IT(handle); \
            configASSERT(status == HAL_OK); \
        } \
        HAL_UART_IRQHandler(handle); \
    }
UART_FOREACH(UART_IRQ_HANDLERS)
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	4b18      	ldr	r3, [pc, #96]	; (8004588 <USART1_IRQHandler+0x68>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f003 0310 	and.w	r3, r3, #16
 8004536:	2b00      	cmp	r3, #0
 8004538:	d01e      	beq.n	8004578 <USART1_IRQHandler+0x58>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0210 	bic.w	r2, r2, #16
 8004548:	60da      	str	r2, [r3, #12]
 800454a:	2300      	movs	r3, #0
 800454c:	607b      	str	r3, [r7, #4]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	607b      	str	r3, [r7, #4]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	607b      	str	r3, [r7, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f006 ff7b 	bl	800b45c <HAL_UART_AbortReceive_IT>
 8004566:	4603      	mov	r3, r0
 8004568:	72fb      	strb	r3, [r7, #11]
 800456a:	7afb      	ldrb	r3, [r7, #11]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <USART1_IRQHandler+0x58>
 8004570:	2177      	movs	r1, #119	; 0x77
 8004572:	4806      	ldr	r0, [pc, #24]	; (800458c <USART1_IRQHandler+0x6c>)
 8004574:	f7ff fe29 	bl	80041ca <cmr_panic>
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f006 ffc7 	bl	800b50c <HAL_UART_IRQHandler>
 800457e:	bf00      	nop
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	2000989c 	.word	0x2000989c
 800458c:	0800c2c8 	.word	0x0800c2c8

08004590 <USART2_IRQHandler>:
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	4b18      	ldr	r3, [pc, #96]	; (80045f8 <USART2_IRQHandler+0x68>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f003 0310 	and.w	r3, r3, #16
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d01e      	beq.n	80045e8 <USART2_IRQHandler+0x58>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0210 	bic.w	r2, r2, #16
 80045b8:	60da      	str	r2, [r3, #12]
 80045ba:	2300      	movs	r3, #0
 80045bc:	607b      	str	r3, [r7, #4]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	607b      	str	r3, [r7, #4]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	607b      	str	r3, [r7, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f006 ff43 	bl	800b45c <HAL_UART_AbortReceive_IT>
 80045d6:	4603      	mov	r3, r0
 80045d8:	72fb      	strb	r3, [r7, #11]
 80045da:	7afb      	ldrb	r3, [r7, #11]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <USART2_IRQHandler+0x58>
 80045e0:	2177      	movs	r1, #119	; 0x77
 80045e2:	4806      	ldr	r0, [pc, #24]	; (80045fc <USART2_IRQHandler+0x6c>)
 80045e4:	f7ff fdf1 	bl	80041ca <cmr_panic>
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f006 ff8f 	bl	800b50c <HAL_UART_IRQHandler>
 80045ee:	bf00      	nop
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	2000989c 	.word	0x2000989c
 80045fc:	0800c2c8 	.word	0x0800c2c8

08004600 <USART3_IRQHandler>:
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	4b18      	ldr	r3, [pc, #96]	; (8004668 <USART3_IRQHandler+0x68>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f003 0310 	and.w	r3, r3, #16
 8004616:	2b00      	cmp	r3, #0
 8004618:	d01e      	beq.n	8004658 <USART3_IRQHandler+0x58>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0210 	bic.w	r2, r2, #16
 8004628:	60da      	str	r2, [r3, #12]
 800462a:	2300      	movs	r3, #0
 800462c:	607b      	str	r3, [r7, #4]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	607b      	str	r3, [r7, #4]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	607b      	str	r3, [r7, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f006 ff0b 	bl	800b45c <HAL_UART_AbortReceive_IT>
 8004646:	4603      	mov	r3, r0
 8004648:	72fb      	strb	r3, [r7, #11]
 800464a:	7afb      	ldrb	r3, [r7, #11]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <USART3_IRQHandler+0x58>
 8004650:	2177      	movs	r1, #119	; 0x77
 8004652:	4806      	ldr	r0, [pc, #24]	; (800466c <USART3_IRQHandler+0x6c>)
 8004654:	f7ff fdb9 	bl	80041ca <cmr_panic>
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f006 ff57 	bl	800b50c <HAL_UART_IRQHandler>
 800465e:	bf00      	nop
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	2000989c 	.word	0x2000989c
 800466c:	0800c2c8 	.word	0x0800c2c8

08004670 <UART4_IRQHandler>:
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	4b18      	ldr	r3, [pc, #96]	; (80046d8 <UART4_IRQHandler+0x68>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	2b00      	cmp	r3, #0
 8004688:	d01e      	beq.n	80046c8 <UART4_IRQHandler+0x58>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0210 	bic.w	r2, r2, #16
 8004698:	60da      	str	r2, [r3, #12]
 800469a:	2300      	movs	r3, #0
 800469c:	607b      	str	r3, [r7, #4]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	607b      	str	r3, [r7, #4]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	607b      	str	r3, [r7, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f006 fed3 	bl	800b45c <HAL_UART_AbortReceive_IT>
 80046b6:	4603      	mov	r3, r0
 80046b8:	72fb      	strb	r3, [r7, #11]
 80046ba:	7afb      	ldrb	r3, [r7, #11]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <UART4_IRQHandler+0x58>
 80046c0:	2177      	movs	r1, #119	; 0x77
 80046c2:	4806      	ldr	r0, [pc, #24]	; (80046dc <UART4_IRQHandler+0x6c>)
 80046c4:	f7ff fd81 	bl	80041ca <cmr_panic>
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f006 ff1f 	bl	800b50c <HAL_UART_IRQHandler>
 80046ce:	bf00      	nop
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	2000989c 	.word	0x2000989c
 80046dc:	0800c2c8 	.word	0x0800c2c8

080046e0 <UART5_IRQHandler>:
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4b18      	ldr	r3, [pc, #96]	; (8004748 <UART5_IRQHandler+0x68>)
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f003 0310 	and.w	r3, r3, #16
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d01e      	beq.n	8004738 <UART5_IRQHandler+0x58>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0210 	bic.w	r2, r2, #16
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	2300      	movs	r3, #0
 800470c:	607b      	str	r3, [r7, #4]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	607b      	str	r3, [r7, #4]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	607b      	str	r3, [r7, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f006 fe9b 	bl	800b45c <HAL_UART_AbortReceive_IT>
 8004726:	4603      	mov	r3, r0
 8004728:	72fb      	strb	r3, [r7, #11]
 800472a:	7afb      	ldrb	r3, [r7, #11]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <UART5_IRQHandler+0x58>
 8004730:	2177      	movs	r1, #119	; 0x77
 8004732:	4806      	ldr	r0, [pc, #24]	; (800474c <UART5_IRQHandler+0x6c>)
 8004734:	f7ff fd49 	bl	80041ca <cmr_panic>
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f006 fee7 	bl	800b50c <HAL_UART_IRQHandler>
 800473e:	bf00      	nop
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	2000989c 	.word	0x2000989c
 800474c:	0800c2c8 	.word	0x0800c2c8

08004750 <USART6_IRQHandler>:
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	4b18      	ldr	r3, [pc, #96]	; (80047b8 <USART6_IRQHandler+0x68>)
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f003 0310 	and.w	r3, r3, #16
 8004766:	2b00      	cmp	r3, #0
 8004768:	d01e      	beq.n	80047a8 <USART6_IRQHandler+0x58>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0210 	bic.w	r2, r2, #16
 8004778:	60da      	str	r2, [r3, #12]
 800477a:	2300      	movs	r3, #0
 800477c:	607b      	str	r3, [r7, #4]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	607b      	str	r3, [r7, #4]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	607b      	str	r3, [r7, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f006 fe63 	bl	800b45c <HAL_UART_AbortReceive_IT>
 8004796:	4603      	mov	r3, r0
 8004798:	72fb      	strb	r3, [r7, #11]
 800479a:	7afb      	ldrb	r3, [r7, #11]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <USART6_IRQHandler+0x58>
 80047a0:	2177      	movs	r1, #119	; 0x77
 80047a2:	4806      	ldr	r0, [pc, #24]	; (80047bc <USART6_IRQHandler+0x6c>)
 80047a4:	f7ff fd11 	bl	80041ca <cmr_panic>
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f006 feaf 	bl	800b50c <HAL_UART_IRQHandler>
 80047ae:	bf00      	nop
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	2000989c 	.word	0x2000989c
 80047bc:	0800c2c8 	.word	0x0800c2c8

080047c0 <UART7_IRQHandler>:
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	4b18      	ldr	r3, [pc, #96]	; (8004828 <UART7_IRQHandler+0x68>)
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f003 0310 	and.w	r3, r3, #16
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d01e      	beq.n	8004818 <UART7_IRQHandler+0x58>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0210 	bic.w	r2, r2, #16
 80047e8:	60da      	str	r2, [r3, #12]
 80047ea:	2300      	movs	r3, #0
 80047ec:	607b      	str	r3, [r7, #4]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	607b      	str	r3, [r7, #4]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	607b      	str	r3, [r7, #4]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f006 fe2b 	bl	800b45c <HAL_UART_AbortReceive_IT>
 8004806:	4603      	mov	r3, r0
 8004808:	72fb      	strb	r3, [r7, #11]
 800480a:	7afb      	ldrb	r3, [r7, #11]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <UART7_IRQHandler+0x58>
 8004810:	2177      	movs	r1, #119	; 0x77
 8004812:	4806      	ldr	r0, [pc, #24]	; (800482c <UART7_IRQHandler+0x6c>)
 8004814:	f7ff fcd9 	bl	80041ca <cmr_panic>
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f006 fe77 	bl	800b50c <HAL_UART_IRQHandler>
 800481e:	bf00      	nop
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	2000989c 	.word	0x2000989c
 800482c:	0800c2c8 	.word	0x0800c2c8

08004830 <UART8_IRQHandler>:
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	4b18      	ldr	r3, [pc, #96]	; (8004898 <UART8_IRQHandler+0x68>)
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	2b00      	cmp	r3, #0
 8004848:	d01e      	beq.n	8004888 <UART8_IRQHandler+0x58>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0210 	bic.w	r2, r2, #16
 8004858:	60da      	str	r2, [r3, #12]
 800485a:	2300      	movs	r3, #0
 800485c:	607b      	str	r3, [r7, #4]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	607b      	str	r3, [r7, #4]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	607b      	str	r3, [r7, #4]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f006 fdf3 	bl	800b45c <HAL_UART_AbortReceive_IT>
 8004876:	4603      	mov	r3, r0
 8004878:	72fb      	strb	r3, [r7, #11]
 800487a:	7afb      	ldrb	r3, [r7, #11]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <UART8_IRQHandler+0x58>
 8004880:	2177      	movs	r1, #119	; 0x77
 8004882:	4806      	ldr	r0, [pc, #24]	; (800489c <UART8_IRQHandler+0x6c>)
 8004884:	f7ff fca1 	bl	80041ca <cmr_panic>
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f006 fe3f 	bl	800b50c <HAL_UART_IRQHandler>
 800488e:	bf00      	nop
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	2000989c 	.word	0x2000989c
 800489c:	0800c2c8 	.word	0x0800c2c8

080048a0 <UART9_IRQHandler>:
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4b18      	ldr	r3, [pc, #96]	; (8004908 <UART9_IRQHandler+0x68>)
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f003 0310 	and.w	r3, r3, #16
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d01e      	beq.n	80048f8 <UART9_IRQHandler+0x58>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0210 	bic.w	r2, r2, #16
 80048c8:	60da      	str	r2, [r3, #12]
 80048ca:	2300      	movs	r3, #0
 80048cc:	607b      	str	r3, [r7, #4]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	607b      	str	r3, [r7, #4]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	607b      	str	r3, [r7, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f006 fdbb 	bl	800b45c <HAL_UART_AbortReceive_IT>
 80048e6:	4603      	mov	r3, r0
 80048e8:	72fb      	strb	r3, [r7, #11]
 80048ea:	7afb      	ldrb	r3, [r7, #11]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <UART9_IRQHandler+0x58>
 80048f0:	2177      	movs	r1, #119	; 0x77
 80048f2:	4806      	ldr	r0, [pc, #24]	; (800490c <UART9_IRQHandler+0x6c>)
 80048f4:	f7ff fc69 	bl	80041ca <cmr_panic>
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f006 fe07 	bl	800b50c <HAL_UART_IRQHandler>
 80048fe:	bf00      	nop
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	2000989c 	.word	0x2000989c
 800490c:	0800c2c8 	.word	0x0800c2c8

08004910 <UART10_IRQHandler>:
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	4b18      	ldr	r3, [pc, #96]	; (8004978 <UART10_IRQHandler+0x68>)
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f003 0310 	and.w	r3, r3, #16
 8004926:	2b00      	cmp	r3, #0
 8004928:	d01e      	beq.n	8004968 <UART10_IRQHandler+0x58>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0210 	bic.w	r2, r2, #16
 8004938:	60da      	str	r2, [r3, #12]
 800493a:	2300      	movs	r3, #0
 800493c:	607b      	str	r3, [r7, #4]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	607b      	str	r3, [r7, #4]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	607b      	str	r3, [r7, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f006 fd83 	bl	800b45c <HAL_UART_AbortReceive_IT>
 8004956:	4603      	mov	r3, r0
 8004958:	72fb      	strb	r3, [r7, #11]
 800495a:	7afb      	ldrb	r3, [r7, #11]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <UART10_IRQHandler+0x58>
 8004960:	2177      	movs	r1, #119	; 0x77
 8004962:	4806      	ldr	r0, [pc, #24]	; (800497c <UART10_IRQHandler+0x6c>)
 8004964:	f7ff fc31 	bl	80041ca <cmr_panic>
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f006 fdcf 	bl	800b50c <HAL_UART_IRQHandler>
 800496e:	bf00      	nop
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	2000989c 	.word	0x2000989c
 800497c:	0800c2c8 	.word	0x0800c2c8

08004980 <cmr_uartFromHandle>:
 *
 * @param handle The handle.
 *
 * @return The interface.
 */
static cmr_uart_t *cmr_uartFromHandle(UART_HandleTypeDef *handle) {
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
    char *addr = (void *) handle;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	60fb      	str	r3, [r7, #12]
    return (void *) (addr - offsetof(cmr_uart_t, handle));
 800498c:	68fb      	ldr	r3, [r7, #12]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <HAL_UART_TxCpltCallback>:
 * @warning Called from an interrupt handler!
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *handle) {
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
    cmr_uart_t *uart = cmr_uartFromHandle(handle);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7ff ffeb 	bl	8004980 <cmr_uartFromHandle>
 80049aa:	6178      	str	r0, [r7, #20]

    BaseType_t higherWoken;
    cmr_uartMsg_t *msg;
    if (xQueueReceiveFromISR(uart->tx.q, &msg, &higherWoken) != pdTRUE) {
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80049b2:	f107 020c 	add.w	r2, r7, #12
 80049b6:	f107 0108 	add.w	r1, r7, #8
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fcc8 	bl	8005350 <xQueueReceiveFromISR>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d002      	beq.n	80049cc <HAL_UART_TxCpltCallback+0x30>
        cmr_panic("HAL UART TX completion handler called with empty queue!");
 80049c6:	4831      	ldr	r0, [pc, #196]	; (8004a8c <HAL_UART_TxCpltCallback+0xf0>)
 80049c8:	f7ff fbff 	bl	80041ca <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d007      	beq.n	80049e2 <HAL_UART_TxCpltCallback+0x46>
 80049d2:	4b2f      	ldr	r3, [pc, #188]	; (8004a90 <HAL_UART_TxCpltCallback+0xf4>)
 80049d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	f3bf 8f6f 	isb	sy

    // Signal message as done.
    if (xSemaphoreGiveFromISR(msg->doneSem, &higherWoken) != pdTRUE) {
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f107 020c 	add.w	r2, r7, #12
 80049ea:	4611      	mov	r1, r2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 fb35 	bl	800505c <xQueueGiveFromISR>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d002      	beq.n	80049fe <HAL_UART_TxCpltCallback+0x62>
        cmr_panic("HAL UART TX completion handler failed to signal message!");
 80049f8:	4826      	ldr	r0, [pc, #152]	; (8004a94 <HAL_UART_TxCpltCallback+0xf8>)
 80049fa:	f7ff fbe6 	bl	80041ca <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d007      	beq.n	8004a14 <HAL_UART_TxCpltCallback+0x78>
 8004a04:	4b22      	ldr	r3, [pc, #136]	; (8004a90 <HAL_UART_TxCpltCallback+0xf4>)
 8004a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	f3bf 8f6f 	isb	sy

    if (xQueuePeekFromISR(uart->tx.q, &msg) != pdTRUE) {
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004a1a:	f107 0208 	add.w	r2, r7, #8
 8004a1e:	4611      	mov	r1, r2
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fd07 	bl	8005434 <xQueuePeekFromISR>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d01a      	beq.n	8004a62 <HAL_UART_TxCpltCallback+0xc6>
        // No more messages pending; release DMA semaphore.
        if (xSemaphoreGiveFromISR(uart->tx.dmaSem, &higherWoken) != pdTRUE) {
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8004a32:	f107 020c 	add.w	r2, r7, #12
 8004a36:	4611      	mov	r1, r2
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fb0f 	bl	800505c <xQueueGiveFromISR>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d002      	beq.n	8004a4a <HAL_UART_TxCpltCallback+0xae>
            cmr_panic("HAL UART TX completion handler failed to release DMA!");
 8004a44:	4814      	ldr	r0, [pc, #80]	; (8004a98 <HAL_UART_TxCpltCallback+0xfc>)
 8004a46:	f7ff fbc0 	bl	80041ca <cmr_panic>
        }
        portYIELD_FROM_ISR(higherWoken);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d019      	beq.n	8004a84 <HAL_UART_TxCpltCallback+0xe8>
 8004a50:	4b0f      	ldr	r3, [pc, #60]	; (8004a90 <HAL_UART_TxCpltCallback+0xf4>)
 8004a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	e011      	b.n	8004a86 <HAL_UART_TxCpltCallback+0xea>
        return;
    }

    // Message pending; start DMA.
    HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(
 8004a62:	6978      	ldr	r0, [r7, #20]
        &uart->handle, msg->data, msg->len
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f006 fc08 	bl	800b284 <HAL_UART_Transmit_DMA>
 8004a74:	4603      	mov	r3, r0
 8004a76:	74fb      	strb	r3, [r7, #19]
    );
    if (status != HAL_OK) {
 8004a78:	7cfb      	ldrb	r3, [r7, #19]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_UART_TxCpltCallback+0xea>
        cmr_panic("HAL UART TX failed!");
 8004a7e:	4807      	ldr	r0, [pc, #28]	; (8004a9c <HAL_UART_TxCpltCallback+0x100>)
 8004a80:	f7ff fba3 	bl	80041ca <cmr_panic>
        return;
 8004a84:	bf00      	nop
    }
}
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	0800c310 	.word	0x0800c310
 8004a90:	e000ed04 	.word	0xe000ed04
 8004a94:	0800c348 	.word	0x0800c348
 8004a98:	0800c384 	.word	0x0800c384
 8004a9c:	0800c3bc 	.word	0x0800c3bc

08004aa0 <HAL_UART_RxCpltCallback>:
 * @warning Called from an interrupt handler!
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL UART handle.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *handle) {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
    cmr_uart_t *uart = cmr_uartFromHandle(handle);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff ff69 	bl	8004980 <cmr_uartFromHandle>
 8004aae:	61f8      	str	r0, [r7, #28]

    BaseType_t higherWoken;
    cmr_uartMsg_t *msg;
    if (xQueueReceiveFromISR(uart->rx.q, &msg, &higherWoken) != pdTRUE) {
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004ab6:	f107 0210 	add.w	r2, r7, #16
 8004aba:	f107 010c 	add.w	r1, r7, #12
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 fc46 	bl	8005350 <xQueueReceiveFromISR>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d002      	beq.n	8004ad0 <HAL_UART_RxCpltCallback+0x30>
        cmr_panic("HAL UART RX completion handler called with empty queue!");
 8004aca:	4842      	ldr	r0, [pc, #264]	; (8004bd4 <HAL_UART_RxCpltCallback+0x134>)
 8004acc:	f7ff fb7d 	bl	80041ca <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <HAL_UART_RxCpltCallback+0x46>
 8004ad6:	4b40      	ldr	r3, [pc, #256]	; (8004bd8 <HAL_UART_RxCpltCallback+0x138>)
 8004ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	f3bf 8f6f 	isb	sy

    // Record actual number of bytes received.
    size_t remLen = __HAL_DMA_GET_COUNTER(&uart->rx.dma);
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	61bb      	str	r3, [r7, #24]
    configASSERT(remLen <= msg->len);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d903      	bls.n	8004b00 <HAL_UART_RxCpltCallback+0x60>
 8004af8:	21c6      	movs	r1, #198	; 0xc6
 8004afa:	4838      	ldr	r0, [pc, #224]	; (8004bdc <HAL_UART_RxCpltCallback+0x13c>)
 8004afc:	f7ff fb65 	bl	80041ca <cmr_panic>
    msg->len -= remLen;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	1a8a      	subs	r2, r1, r2
 8004b0a:	651a      	str	r2, [r3, #80]	; 0x50

    // Signal message as done.
    if (xSemaphoreGiveFromISR(msg->doneSem, &higherWoken) != pdTRUE) {
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f107 0210 	add.w	r2, r7, #16
 8004b14:	4611      	mov	r1, r2
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 faa0 	bl	800505c <xQueueGiveFromISR>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d002      	beq.n	8004b28 <HAL_UART_RxCpltCallback+0x88>
        cmr_panic("HAL UART RX completion handler failed to signal message!");
 8004b22:	482f      	ldr	r0, [pc, #188]	; (8004be0 <HAL_UART_RxCpltCallback+0x140>)
 8004b24:	f7ff fb51 	bl	80041ca <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d007      	beq.n	8004b3e <HAL_UART_RxCpltCallback+0x9e>
 8004b2e:	4b2a      	ldr	r3, [pc, #168]	; (8004bd8 <HAL_UART_RxCpltCallback+0x138>)
 8004b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	f3bf 8f6f 	isb	sy

    if (xQueuePeekFromISR(uart->rx.q, &msg) != pdTRUE) {
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004b44:	f107 020c 	add.w	r2, r7, #12
 8004b48:	4611      	mov	r1, r2
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 fc72 	bl	8005434 <xQueuePeekFromISR>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d01a      	beq.n	8004b8c <HAL_UART_RxCpltCallback+0xec>
        // No more messages pending; release DMA semaphore.
        if (xSemaphoreGiveFromISR(uart->rx.dmaSem, &higherWoken) != pdTRUE) {
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b5c:	f107 0210 	add.w	r2, r7, #16
 8004b60:	4611      	mov	r1, r2
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fa7a 	bl	800505c <xQueueGiveFromISR>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d002      	beq.n	8004b74 <HAL_UART_RxCpltCallback+0xd4>
            cmr_panic("HAL UART RX completion handler failed to release DMA!");
 8004b6e:	481d      	ldr	r0, [pc, #116]	; (8004be4 <HAL_UART_RxCpltCallback+0x144>)
 8004b70:	f7ff fb2b 	bl	80041ca <cmr_panic>
        }
        portYIELD_FROM_ISR(higherWoken);
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d028      	beq.n	8004bcc <HAL_UART_RxCpltCallback+0x12c>
 8004b7a:	4b17      	ldr	r3, [pc, #92]	; (8004bd8 <HAL_UART_RxCpltCallback+0x138>)
 8004b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	e020      	b.n	8004bce <HAL_UART_RxCpltCallback+0x12e>
        return;
    }

    // Message pending; start DMA.
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(
 8004b8c:	69f8      	ldr	r0, [r7, #28]
        &uart->handle, msg->data, msg->len
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	461a      	mov	r2, r3
 8004b9a:	f006 fbdf 	bl	800b35c <HAL_UART_Receive_DMA>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	75fb      	strb	r3, [r7, #23]
    );
    if (status != HAL_OK) {
 8004ba2:	7dfb      	ldrb	r3, [r7, #23]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <HAL_UART_RxCpltCallback+0x10e>
        cmr_panic("HAL UART RX failed!");
 8004ba8:	480f      	ldr	r0, [pc, #60]	; (8004be8 <HAL_UART_RxCpltCallback+0x148>)
 8004baa:	f7ff fb0e 	bl	80041ca <cmr_panic>
    }

    if (msg->opts & CMR_UART_RXOPTS_IDLEABORT) {
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d009      	beq.n	8004bce <HAL_UART_RxCpltCallback+0x12e>
        // Enable idle line detection.
        __HAL_UART_ENABLE_IT(&uart->handle, UART_IT_IDLE);
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f042 0210 	orr.w	r2, r2, #16
 8004bc8:	60da      	str	r2, [r3, #12]
 8004bca:	e000      	b.n	8004bce <HAL_UART_RxCpltCallback+0x12e>
        return;
 8004bcc:	bf00      	nop
    }
}
 8004bce:	3720      	adds	r7, #32
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	0800c3d0 	.word	0x0800c3d0
 8004bd8:	e000ed04 	.word	0xe000ed04
 8004bdc:	0800c408 	.word	0x0800c408
 8004be0:	0800c454 	.word	0x0800c454
 8004be4:	0800c490 	.word	0x0800c490
 8004be8:	0800c4c8 	.word	0x0800c4c8

08004bec <HAL_UART_AbortReceiveCpltCallback>:
 * @warning Called from an interrupt handler!
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL UART handle.
 */
void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *handle) {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
    // Receive aborted; treat as completion.
    HAL_UART_RxCpltCallback(handle);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff ff53 	bl	8004aa0 <HAL_UART_RxCpltCallback>
}
 8004bfa:	bf00      	nop
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8004c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8004c08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004c0a:	e003      	b.n	8004c14 <LoopCopyDataInit>

08004c0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004c0c:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004c0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004c10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004c12:	3104      	adds	r1, #4

08004c14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004c14:	480b      	ldr	r0, [pc, #44]	; (8004c44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004c16:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004c18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004c1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004c1c:	d3f6      	bcc.n	8004c0c <CopyDataInit>
  ldr  r2, =_sbss
 8004c1e:	4a0b      	ldr	r2, [pc, #44]	; (8004c4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004c20:	e002      	b.n	8004c28 <LoopFillZerobss>

08004c22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8004c22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004c24:	f842 3b04 	str.w	r3, [r2], #4

08004c28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004c28:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004c2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004c2c:	d3f9      	bcc.n	8004c22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004c2e:	f000 f821 	bl	8004c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c32:	f006 ff93 	bl	800bb5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c36:	f7fd fc21 	bl	800247c <main>
  bx  lr    
 8004c3a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004c3c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004c40:	0800d9e8 	.word	0x0800d9e8
  ldr  r0, =_sdata
 8004c44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004c48:	200001bc 	.word	0x200001bc
  ldr  r2, =_sbss
 8004c4c:	200001bc 	.word	0x200001bc
  ldr  r3, = _ebss
 8004c50:	200099e4 	.word	0x200099e4
	...

08004c60 <ADC_IRQHandler>:
*/
	.global HardFault_Handler_C
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
  /* Load the address of the interrupt control register into r3. */
  ldr r3, NVIC_INT_CTRL_CONST
 8004c60:	4b03      	ldr	r3, [pc, #12]	; (8004c70 <NVIC_INT_CTRL_CONST>)
  /* Load the value of the interrupt control register into r2 from the
  address held in r3. */
  ldr r2, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
  /* The interrupt number is in the least significant byte - clear all
  other bits. */
  uxtb r2, r2
 8004c64:	b2d2      	uxtb	r2, r2

08004c66 <Infinite_Loop>:
Infinite_Loop:
  b  Infinite_Loop
 8004c66:	e7fe      	b.n	8004c66 <Infinite_Loop>
 8004c68:	f3af 8000 	nop.w
 8004c6c:	f3af 8000 	nop.w

08004c70 <NVIC_INT_CTRL_CONST>:
 8004c70:	e000ed04 	.word	0xe000ed04

08004c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c78:	4b16      	ldr	r3, [pc, #88]	; (8004cd4 <SystemInit+0x60>)
 8004c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7e:	4a15      	ldr	r2, [pc, #84]	; (8004cd4 <SystemInit+0x60>)
 8004c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004c88:	4b13      	ldr	r3, [pc, #76]	; (8004cd8 <SystemInit+0x64>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a12      	ldr	r2, [pc, #72]	; (8004cd8 <SystemInit+0x64>)
 8004c8e:	f043 0301 	orr.w	r3, r3, #1
 8004c92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004c94:	4b10      	ldr	r3, [pc, #64]	; (8004cd8 <SystemInit+0x64>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004c9a:	4b0f      	ldr	r3, [pc, #60]	; (8004cd8 <SystemInit+0x64>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a0e      	ldr	r2, [pc, #56]	; (8004cd8 <SystemInit+0x64>)
 8004ca0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004caa:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <SystemInit+0x64>)
 8004cac:	4a0b      	ldr	r2, [pc, #44]	; (8004cdc <SystemInit+0x68>)
 8004cae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004cb0:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <SystemInit+0x64>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a08      	ldr	r2, [pc, #32]	; (8004cd8 <SystemInit+0x64>)
 8004cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004cbc:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <SystemInit+0x64>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004cc2:	4b04      	ldr	r3, [pc, #16]	; (8004cd4 <SystemInit+0x60>)
 8004cc4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004cc8:	609a      	str	r2, [r3, #8]
#endif
}
 8004cca:	bf00      	nop
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	e000ed00 	.word	0xe000ed00
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	24003010 	.word	0x24003010

08004ce0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f103 0208 	add.w	r2, r3, #8
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f103 0208 	add.w	r2, r3, #8
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f103 0208 	add.w	r2, r3, #8
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b085      	sub	sp, #20
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	601a      	str	r2, [r3, #0]
}
 8004d76:	bf00      	nop
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d82:	b480      	push	{r7}
 8004d84:	b085      	sub	sp, #20
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d98:	d103      	bne.n	8004da2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	e00c      	b.n	8004dbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	3308      	adds	r3, #8
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	e002      	b.n	8004db0 <vListInsert+0x2e>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d2f6      	bcs.n	8004daa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	601a      	str	r2, [r3, #0]
}
 8004de8:	bf00      	nop
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6892      	ldr	r2, [r2, #8]
 8004e0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6852      	ldr	r2, [r2, #4]
 8004e14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d103      	bne.n	8004e28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	1e5a      	subs	r2, r3, #1
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d104      	bne.n	8004e66 <xQueueGenericReset+0x1e>
 8004e5c:	f240 111b 	movw	r1, #283	; 0x11b
 8004e60:	4829      	ldr	r0, [pc, #164]	; (8004f08 <xQueueGenericReset+0xc0>)
 8004e62:	f7ff f9b2 	bl	80041ca <cmr_panic>

	taskENTER_CRITICAL();
 8004e66:	f001 fb1d 	bl	80064a4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e72:	68f9      	ldr	r1, [r7, #12]
 8004e74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e76:	fb01 f303 	mul.w	r3, r1, r3
 8004e7a:	441a      	add	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e96:	3b01      	subs	r3, #1
 8004e98:	68f9      	ldr	r1, [r7, #12]
 8004e9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ea0:	441a      	add	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	22ff      	movs	r2, #255	; 0xff
 8004eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	22ff      	movs	r2, #255	; 0xff
 8004eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d114      	bne.n	8004ee6 <xQueueGenericReset+0x9e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01a      	beq.n	8004efa <xQueueGenericReset+0xb2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	3310      	adds	r3, #16
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 ff7f 	bl	8005dcc <xTaskRemoveFromEventList>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d012      	beq.n	8004efa <xQueueGenericReset+0xb2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ed4:	4b0d      	ldr	r3, [pc, #52]	; (8004f0c <xQueueGenericReset+0xc4>)
 8004ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	e009      	b.n	8004efa <xQueueGenericReset+0xb2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3310      	adds	r3, #16
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff fef8 	bl	8004ce0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	3324      	adds	r3, #36	; 0x24
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7ff fef3 	bl	8004ce0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004efa:	f001 fafd 	bl	80064f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004efe:	2301      	movs	r3, #1
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	0800c6d4 	.word	0x0800c6d4
 8004f0c:	e000ed04 	.word	0xe000ed04

08004f10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af02      	add	r7, sp, #8
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d104      	bne.n	8004f2e <xQueueGenericCreateStatic+0x1e>
 8004f24:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8004f28:	481f      	ldr	r0, [pc, #124]	; (8004fa8 <xQueueGenericCreateStatic+0x98>)
 8004f2a:	f7ff f94e 	bl	80041ca <cmr_panic>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d104      	bne.n	8004f3e <xQueueGenericCreateStatic+0x2e>
 8004f34:	f44f 71ab 	mov.w	r1, #342	; 0x156
 8004f38:	481c      	ldr	r0, [pc, #112]	; (8004fac <xQueueGenericCreateStatic+0x9c>)
 8004f3a:	f7ff f946 	bl	80041ca <cmr_panic>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d007      	beq.n	8004f54 <xQueueGenericCreateStatic+0x44>
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d104      	bne.n	8004f54 <xQueueGenericCreateStatic+0x44>
 8004f4a:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8004f4e:	4818      	ldr	r0, [pc, #96]	; (8004fb0 <xQueueGenericCreateStatic+0xa0>)
 8004f50:	f7ff f93b 	bl	80041ca <cmr_panic>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d107      	bne.n	8004f6a <xQueueGenericCreateStatic+0x5a>
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d004      	beq.n	8004f6a <xQueueGenericCreateStatic+0x5a>
 8004f60:	f240 115b 	movw	r1, #347	; 0x15b
 8004f64:	4813      	ldr	r0, [pc, #76]	; (8004fb4 <xQueueGenericCreateStatic+0xa4>)
 8004f66:	f7ff f930 	bl	80041ca <cmr_panic>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f6a:	2348      	movs	r3, #72	; 0x48
 8004f6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	2b48      	cmp	r3, #72	; 0x48
 8004f72:	d004      	beq.n	8004f7e <xQueueGenericCreateStatic+0x6e>
 8004f74:	f240 1163 	movw	r1, #355	; 0x163
 8004f78:	480f      	ldr	r0, [pc, #60]	; (8004fb8 <xQueueGenericCreateStatic+0xa8>)
 8004f7a:	f7ff f926 	bl	80041ca <cmr_panic>
			(void) xSize; // Placate compiler
 8004f7e:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d009      	beq.n	8004f9e <xQueueGenericCreateStatic+0x8e>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f8a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	4613      	mov	r3, r2
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 f80f 	bl	8004fbc <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8004f9e:	697b      	ldr	r3, [r7, #20]
	}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	0800c718 	.word	0x0800c718
 8004fac:	0800c778 	.word	0x0800c778
 8004fb0:	0800c7cc 	.word	0x0800c7cc
 8004fb4:	0800c840 	.word	0x0800c840
 8004fb8:	0800c8b4 	.word	0x0800c8b4

08004fbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d103      	bne.n	8004fd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	e002      	b.n	8004fde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004fea:	2101      	movs	r1, #1
 8004fec:	69b8      	ldr	r0, [r7, #24]
 8004fee:	f7ff ff2b 	bl	8004e48 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ff2:	bf00      	nop
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
	...

08004ffc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af02      	add	r7, sp, #8
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d104      	bne.n	8005018 <xQueueCreateCountingSemaphoreStatic+0x1c>
 800500e:	f240 21a2 	movw	r1, #674	; 0x2a2
 8005012:	4810      	ldr	r0, [pc, #64]	; (8005054 <xQueueCreateCountingSemaphoreStatic+0x58>)
 8005014:	f7ff f8d9 	bl	80041ca <cmr_panic>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	429a      	cmp	r2, r3
 800501e:	d904      	bls.n	800502a <xQueueCreateCountingSemaphoreStatic+0x2e>
 8005020:	f240 21a3 	movw	r1, #675	; 0x2a3
 8005024:	480c      	ldr	r0, [pc, #48]	; (8005058 <xQueueCreateCountingSemaphoreStatic+0x5c>)
 8005026:	f7ff f8d0 	bl	80041ca <cmr_panic>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800502a:	2302      	movs	r3, #2
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	2100      	movs	r1, #0
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f7ff ff6b 	bl	8004f10 <xQueueGenericCreateStatic>
 800503a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <xQueueCreateCountingSemaphoreStatic+0x4c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005048:	697b      	ldr	r3, [r7, #20]
	}
 800504a:	4618      	mov	r0, r3
 800504c:	3718      	adds	r7, #24
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	0800c90c 	.word	0x0800c90c
 8005058:	0800c958 	.word	0x0800c958

0800505c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08a      	sub	sp, #40	; 0x28
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d104      	bne.n	800507a <xQueueGiveFromISR+0x1e>
 8005070:	f240 413d 	movw	r1, #1085	; 0x43d
 8005074:	4833      	ldr	r0, [pc, #204]	; (8005144 <xQueueGiveFromISR+0xe8>)
 8005076:	f7ff f8a8 	bl	80041ca <cmr_panic>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	2b00      	cmp	r3, #0
 8005080:	d004      	beq.n	800508c <xQueueGiveFromISR+0x30>
 8005082:	f240 4141 	movw	r1, #1089	; 0x441
 8005086:	4830      	ldr	r0, [pc, #192]	; (8005148 <xQueueGiveFromISR+0xec>)
 8005088:	f7ff f89f 	bl	80041ca <cmr_panic>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d108      	bne.n	80050a6 <xQueueGiveFromISR+0x4a>
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d004      	beq.n	80050a6 <xQueueGiveFromISR+0x4a>
 800509c:	f240 4146 	movw	r1, #1094	; 0x446
 80050a0:	482a      	ldr	r0, [pc, #168]	; (800514c <xQueueGiveFromISR+0xf0>)
 80050a2:	f7ff f892 	bl	80041ca <cmr_panic>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050a6:	f001 fac7 	bl	8006638 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80050aa:	f3ef 8211 	mrs	r2, BASEPRI
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	613a      	str	r2, [r7, #16]
 80050c0:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80050c2:	693b      	ldr	r3, [r7, #16]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050c4:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ca:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d229      	bcs.n	800512a <xQueueGiveFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050dc:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80050e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ee:	d112      	bne.n	8005116 <xQueueGiveFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d015      	beq.n	8005124 <xQueueGiveFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	3324      	adds	r3, #36	; 0x24
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 fe65 	bl	8005dcc <xTaskRemoveFromEventList>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00d      	beq.n	8005124 <xQueueGiveFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <xQueueGiveFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2201      	movs	r2, #1
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	e006      	b.n	8005124 <xQueueGiveFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005116:	7dfb      	ldrb	r3, [r7, #23]
 8005118:	3301      	adds	r3, #1
 800511a:	b2db      	uxtb	r3, r3
 800511c:	b25a      	sxtb	r2, r3
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005124:	2301      	movs	r3, #1
 8005126:	627b      	str	r3, [r7, #36]	; 0x24
 8005128:	e001      	b.n	800512e <xQueueGiveFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800512a:	2300      	movs	r3, #0
 800512c:	627b      	str	r3, [r7, #36]	; 0x24
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue )
	);
}
 8005138:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800513c:	4618      	mov	r0, r3
 800513e:	3728      	adds	r7, #40	; 0x28
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	0800c6d4 	.word	0x0800c6d4
 8005148:	0800cb58 	.word	0x0800cb58
 800514c:	0800cbb0 	.word	0x0800cbb0

08005150 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b08a      	sub	sp, #40	; 0x28
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800515e:	2300      	movs	r3, #0
 8005160:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d104      	bne.n	8005176 <xQueueGenericReceive+0x26>
 800516c:	f240 41dd 	movw	r1, #1245	; 0x4dd
 8005170:	4873      	ldr	r0, [pc, #460]	; (8005340 <xQueueGenericReceive+0x1f0>)
 8005172:	f7ff f82a 	bl	80041ca <cmr_panic>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d108      	bne.n	800518e <xQueueGenericReceive+0x3e>
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	2b00      	cmp	r3, #0
 8005182:	d004      	beq.n	800518e <xQueueGenericReceive+0x3e>
 8005184:	f240 41de 	movw	r1, #1246	; 0x4de
 8005188:	486e      	ldr	r0, [pc, #440]	; (8005344 <xQueueGenericReceive+0x1f4>)
 800518a:	f7ff f81e 	bl	80041ca <cmr_panic>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800518e:	f000 ff7d 	bl	800608c <xTaskGetSchedulerState>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d107      	bne.n	80051a8 <xQueueGenericReceive+0x58>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d004      	beq.n	80051a8 <xQueueGenericReceive+0x58>
 800519e:	f240 41e1 	movw	r1, #1249	; 0x4e1
 80051a2:	4869      	ldr	r0, [pc, #420]	; (8005348 <xQueueGenericReceive+0x1f8>)
 80051a4:	f7ff f811 	bl	80041ca <cmr_panic>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80051a8:	f001 f97c 	bl	80064a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d046      	beq.n	8005246 <xQueueGenericReceive+0xf6>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051be:	68b9      	ldr	r1, [r7, #8]
 80051c0:	6a38      	ldr	r0, [r7, #32]
 80051c2:	f000 f98f 	bl	80054e4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d121      	bne.n	8005210 <xQueueGenericReceive+0xc0>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	1e5a      	subs	r2, r3, #1
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d104      	bne.n	80051e6 <xQueueGenericReceive+0x96>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80051dc:	f000 ffea 	bl	80061b4 <pvTaskIncrementMutexHeldCount>
 80051e0:	4602      	mov	r2, r0
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d027      	beq.n	800523e <xQueueGenericReceive+0xee>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	3310      	adds	r3, #16
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fdea 	bl	8005dcc <xTaskRemoveFromEventList>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d01f      	beq.n	800523e <xQueueGenericReceive+0xee>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80051fe:	4b53      	ldr	r3, [pc, #332]	; (800534c <xQueueGenericReceive+0x1fc>)
 8005200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	e016      	b.n	800523e <xQueueGenericReceive+0xee>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00f      	beq.n	800523e <xQueueGenericReceive+0xee>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800521e:	6a3b      	ldr	r3, [r7, #32]
 8005220:	3324      	adds	r3, #36	; 0x24
 8005222:	4618      	mov	r0, r3
 8005224:	f000 fdd2 	bl	8005dcc <xTaskRemoveFromEventList>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d007      	beq.n	800523e <xQueueGenericReceive+0xee>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 800522e:	4b47      	ldr	r3, [pc, #284]	; (800534c <xQueueGenericReceive+0x1fc>)
 8005230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800523e:	f001 f95b 	bl	80064f8 <vPortExitCritical>
				return pdPASS;
 8005242:	2301      	movs	r3, #1
 8005244:	e077      	b.n	8005336 <xQueueGenericReceive+0x1e6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d103      	bne.n	8005254 <xQueueGenericReceive+0x104>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800524c:	f001 f954 	bl	80064f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005250:	2300      	movs	r3, #0
 8005252:	e070      	b.n	8005336 <xQueueGenericReceive+0x1e6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	2b00      	cmp	r3, #0
 8005258:	d106      	bne.n	8005268 <xQueueGenericReceive+0x118>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800525a:	f107 0310 	add.w	r3, r7, #16
 800525e:	4618      	mov	r0, r3
 8005260:	f000 fe12 	bl	8005e88 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005264:	2301      	movs	r3, #1
 8005266:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005268:	f001 f946 	bl	80064f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800526c:	f000 fbb6 	bl	80059dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005270:	f001 f918 	bl	80064a4 <vPortEnterCritical>
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800527a:	b25b      	sxtb	r3, r3
 800527c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005280:	d103      	bne.n	800528a <xQueueGenericReceive+0x13a>
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005290:	b25b      	sxtb	r3, r3
 8005292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005296:	d103      	bne.n	80052a0 <xQueueGenericReceive+0x150>
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052a0:	f001 f92a 	bl	80064f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052a4:	1d3a      	adds	r2, r7, #4
 80052a6:	f107 0310 	add.w	r3, r7, #16
 80052aa:	4611      	mov	r1, r2
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 fe09 	bl	8005ec4 <xTaskCheckForTimeOut>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d131      	bne.n	800531c <xQueueGenericReceive+0x1cc>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052b8:	6a38      	ldr	r0, [r7, #32]
 80052ba:	f000 f98b 	bl	80055d4 <prvIsQueueEmpty>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d025      	beq.n	8005310 <xQueueGenericReceive+0x1c0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d108      	bne.n	80052de <xQueueGenericReceive+0x18e>
					{
						taskENTER_CRITICAL();
 80052cc:	f001 f8ea 	bl	80064a4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 fef7 	bl	80060c8 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 80052da:	f001 f90d 	bl	80064f8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	3324      	adds	r3, #36	; 0x24
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	4611      	mov	r1, r2
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fd50 	bl	8005d8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80052ec:	6a38      	ldr	r0, [r7, #32]
 80052ee:	f000 f91f 	bl	8005530 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80052f2:	f000 fb81 	bl	80059f8 <xTaskResumeAll>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f47f af55 	bne.w	80051a8 <xQueueGenericReceive+0x58>
				{
					portYIELD_WITHIN_API();
 80052fe:	4b13      	ldr	r3, [pc, #76]	; (800534c <xQueueGenericReceive+0x1fc>)
 8005300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	e74b      	b.n	80051a8 <xQueueGenericReceive+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005310:	6a38      	ldr	r0, [r7, #32]
 8005312:	f000 f90d 	bl	8005530 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005316:	f000 fb6f 	bl	80059f8 <xTaskResumeAll>
 800531a:	e745      	b.n	80051a8 <xQueueGenericReceive+0x58>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800531c:	6a38      	ldr	r0, [r7, #32]
 800531e:	f000 f907 	bl	8005530 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005322:	f000 fb69 	bl	80059f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005326:	6a38      	ldr	r0, [r7, #32]
 8005328:	f000 f954 	bl	80055d4 <prvIsQueueEmpty>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	f43f af3a 	beq.w	80051a8 <xQueueGenericReceive+0x58>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005334:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005336:	4618      	mov	r0, r3
 8005338:	3728      	adds	r7, #40	; 0x28
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	0800c6d4 	.word	0x0800c6d4
 8005344:	0800cc48 	.word	0x0800cc48
 8005348:	0800cac4 	.word	0x0800cac4
 800534c:	e000ed04 	.word	0xe000ed04

08005350 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08c      	sub	sp, #48	; 0x30
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 8005360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005362:	2b00      	cmp	r3, #0
 8005364:	d104      	bne.n	8005370 <xQueueReceiveFromISR+0x20>
 8005366:	f240 51a1 	movw	r1, #1441	; 0x5a1
 800536a:	4830      	ldr	r0, [pc, #192]	; (800542c <xQueueReceiveFromISR+0xdc>)
 800536c:	f7fe ff2d 	bl	80041ca <cmr_panic>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d108      	bne.n	8005388 <xQueueReceiveFromISR+0x38>
 8005376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	2b00      	cmp	r3, #0
 800537c:	d004      	beq.n	8005388 <xQueueReceiveFromISR+0x38>
 800537e:	f240 51a2 	movw	r1, #1442	; 0x5a2
 8005382:	482b      	ldr	r0, [pc, #172]	; (8005430 <xQueueReceiveFromISR+0xe0>)
 8005384:	f7fe ff21 	bl	80041ca <cmr_panic>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005388:	f001 f956 	bl	8006638 <vPortValidateInterruptPriority>
	__asm volatile
 800538c:	f3ef 8211 	mrs	r2, BASEPRI
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	61ba      	str	r2, [r7, #24]
 80053a2:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80053a4:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053a6:	627b      	str	r3, [r7, #36]	; 0x24
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ac:	623b      	str	r3, [r7, #32]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053ae:	6a3b      	ldr	r3, [r7, #32]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d02d      	beq.n	8005410 <xQueueReceiveFromISR+0xc0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053ba:	77fb      	strb	r3, [r7, #31]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053c0:	f000 f890 	bl	80054e4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	1e5a      	subs	r2, r3, #1
 80053c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80053cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80053d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d4:	d112      	bne.n	80053fc <xQueueReceiveFromISR+0xac>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d015      	beq.n	800540a <xQueueReceiveFromISR+0xba>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e0:	3310      	adds	r3, #16
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fcf2 	bl	8005dcc <xTaskRemoveFromEventList>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00d      	beq.n	800540a <xQueueReceiveFromISR+0xba>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00a      	beq.n	800540a <xQueueReceiveFromISR+0xba>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	e006      	b.n	800540a <xQueueReceiveFromISR+0xba>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80053fc:	7ffb      	ldrb	r3, [r7, #31]
 80053fe:	3301      	adds	r3, #1
 8005400:	b2db      	uxtb	r3, r3
 8005402:	b25a      	sxtb	r2, r3
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800540a:	2301      	movs	r3, #1
 800540c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800540e:	e001      	b.n	8005414 <xQueueReceiveFromISR+0xc4>
		}
		else
		{
			xReturn = pdFAIL;
 8005410:	2300      	movs	r3, #0
 8005412:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f383 8811 	msr	BASEPRI, r3
}
 800541e:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005422:	4618      	mov	r0, r3
 8005424:	3730      	adds	r7, #48	; 0x30
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	0800c6d4 	.word	0x0800c6d4
 8005430:	0800cc48 	.word	0x0800cc48

08005434 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08a      	sub	sp, #40	; 0x28
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d104      	bne.n	8005452 <xQueuePeekFromISR+0x1e>
 8005448:	f240 51fd 	movw	r1, #1533	; 0x5fd
 800544c:	4822      	ldr	r0, [pc, #136]	; (80054d8 <xQueuePeekFromISR+0xa4>)
 800544e:	f7fe febc 	bl	80041ca <cmr_panic>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d108      	bne.n	800546a <xQueuePeekFromISR+0x36>
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	2b00      	cmp	r3, #0
 800545e:	d004      	beq.n	800546a <xQueuePeekFromISR+0x36>
 8005460:	f240 51fe 	movw	r1, #1534	; 0x5fe
 8005464:	481d      	ldr	r0, [pc, #116]	; (80054dc <xQueuePeekFromISR+0xa8>)
 8005466:	f7fe feb0 	bl	80041ca <cmr_panic>
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	2b00      	cmp	r3, #0
 8005470:	d104      	bne.n	800547c <xQueuePeekFromISR+0x48>
 8005472:	f240 51ff 	movw	r1, #1535	; 0x5ff
 8005476:	481a      	ldr	r0, [pc, #104]	; (80054e0 <xQueuePeekFromISR+0xac>)
 8005478:	f7fe fea7 	bl	80041ca <cmr_panic>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800547c:	f001 f8dc 	bl	8006638 <vPortValidateInterruptPriority>
	__asm volatile
 8005480:	f3ef 8211 	mrs	r2, BASEPRI
 8005484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	617a      	str	r2, [r7, #20]
 8005496:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005498:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800549a:	61fb      	str	r3, [r7, #28]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00c      	beq.n	80054be <xQueuePeekFromISR+0x8a>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	61bb      	str	r3, [r7, #24]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80054aa:	6839      	ldr	r1, [r7, #0]
 80054ac:	6a38      	ldr	r0, [r7, #32]
 80054ae:	f000 f819 	bl	80054e4 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	60da      	str	r2, [r3, #12]

			xReturn = pdPASS;
 80054b8:	2301      	movs	r3, #1
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
 80054bc:	e001      	b.n	80054c2 <xQueuePeekFromISR+0x8e>
		}
		else
		{
			xReturn = pdFAIL;
 80054be:	2300      	movs	r3, #0
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f383 8811 	msr	BASEPRI, r3
}
 80054cc:	bf00      	nop
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3728      	adds	r7, #40	; 0x28
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	0800c6d4 	.word	0x0800c6d4
 80054dc:	0800cc48 	.word	0x0800cc48
 80054e0:	0800ccd0 	.word	0x0800ccd0

080054e4 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d018      	beq.n	8005528 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	441a      	add	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	429a      	cmp	r2, r3
 800550e:	d303      	bcc.n	8005518 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68d9      	ldr	r1, [r3, #12]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005520:	461a      	mov	r2, r3
 8005522:	6838      	ldr	r0, [r7, #0]
 8005524:	f006 fb3e 	bl	800bba4 <memcpy>
	}
}
 8005528:	bf00      	nop
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005538:	f000 ffb4 	bl	80064a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005542:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005544:	e011      	b.n	800556a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554a:	2b00      	cmp	r3, #0
 800554c:	d012      	beq.n	8005574 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	3324      	adds	r3, #36	; 0x24
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fc3a 	bl	8005dcc <xTaskRemoveFromEventList>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800555e:	f000 fd09 	bl	8005f74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	3b01      	subs	r3, #1
 8005566:	b2db      	uxtb	r3, r3
 8005568:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800556a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800556e:	2b00      	cmp	r3, #0
 8005570:	dce9      	bgt.n	8005546 <prvUnlockQueue+0x16>
 8005572:	e000      	b.n	8005576 <prvUnlockQueue+0x46>
					break;
 8005574:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	22ff      	movs	r2, #255	; 0xff
 800557a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800557e:	f000 ffbb 	bl	80064f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005582:	f000 ff8f 	bl	80064a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800558c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800558e:	e011      	b.n	80055b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d012      	beq.n	80055be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3310      	adds	r3, #16
 800559c:	4618      	mov	r0, r3
 800559e:	f000 fc15 	bl	8005dcc <xTaskRemoveFromEventList>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80055a8:	f000 fce4 	bl	8005f74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80055ac:	7bbb      	ldrb	r3, [r7, #14]
 80055ae:	3b01      	subs	r3, #1
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	dce9      	bgt.n	8005590 <prvUnlockQueue+0x60>
 80055bc:	e000      	b.n	80055c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80055be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	22ff      	movs	r2, #255	; 0xff
 80055c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80055c8:	f000 ff96 	bl	80064f8 <vPortExitCritical>
}
 80055cc:	bf00      	nop
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055dc:	f000 ff62 	bl	80064a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d102      	bne.n	80055ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80055e8:	2301      	movs	r3, #1
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	e001      	b.n	80055f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055f2:	f000 ff81 	bl	80064f8 <vPortExitCritical>

	return xReturn;
 80055f6:	68fb      	ldr	r3, [r7, #12]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08a      	sub	sp, #40	; 0x28
 8005604:	af04      	add	r7, sp, #16
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
 800560c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	2b00      	cmp	r3, #0
 8005612:	d104      	bne.n	800561e <xTaskCreateStatic+0x1e>
 8005614:	f240 2155 	movw	r1, #597	; 0x255
 8005618:	4817      	ldr	r0, [pc, #92]	; (8005678 <xTaskCreateStatic+0x78>)
 800561a:	f7fe fdd6 	bl	80041ca <cmr_panic>
		configASSERT( pxTaskBuffer != NULL );
 800561e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005620:	2b00      	cmp	r3, #0
 8005622:	d104      	bne.n	800562e <xTaskCreateStatic+0x2e>
 8005624:	f240 2156 	movw	r1, #598	; 0x256
 8005628:	4814      	ldr	r0, [pc, #80]	; (800567c <xTaskCreateStatic+0x7c>)
 800562a:	f7fe fdce 	bl	80041ca <cmr_panic>

		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800562e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005630:	2b00      	cmp	r3, #0
 8005632:	d01a      	beq.n	800566a <xTaskCreateStatic+0x6a>
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	2b00      	cmp	r3, #0
 8005638:	d017      	beq.n	800566a <xTaskCreateStatic+0x6a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800563a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563c:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005642:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005644:	2300      	movs	r3, #0
 8005646:	9303      	str	r3, [sp, #12]
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	9302      	str	r3, [sp, #8]
 800564c:	f107 0310 	add.w	r3, r7, #16
 8005650:	9301      	str	r3, [sp, #4]
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	68b9      	ldr	r1, [r7, #8]
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 f80f 	bl	8005680 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005662:	6978      	ldr	r0, [r7, #20]
 8005664:	f000 f880 	bl	8005768 <prvAddNewTaskToReadyList>
 8005668:	e001      	b.n	800566e <xTaskCreateStatic+0x6e>
		}
		else
		{
			xReturn = NULL;
 800566a:	2300      	movs	r3, #0
 800566c:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 800566e:	693b      	ldr	r3, [r7, #16]
	}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	0800cd6c 	.word	0x0800cd6c
 800567c:	0800cdc0 	.word	0x0800cdc0

08005680 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005698:	3b01      	subs	r3, #1
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f023 0307 	bic.w	r3, r3, #7
 80056a6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d004      	beq.n	80056bc <prvInitialiseNewTask+0x3c>
 80056b2:	f240 312b 	movw	r1, #811	; 0x32b
 80056b6:	482b      	ldr	r0, [pc, #172]	; (8005764 <prvInitialiseNewTask+0xe4>)
 80056b8:	f7fe fd87 	bl	80041ca <cmr_panic>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056bc:	2300      	movs	r3, #0
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	e012      	b.n	80056e8 <prvInitialiseNewTask+0x68>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	4413      	add	r3, r2
 80056c8:	7819      	ldrb	r1, [r3, #0]
 80056ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	4413      	add	r3, r2
 80056d0:	3334      	adds	r3, #52	; 0x34
 80056d2:	460a      	mov	r2, r1
 80056d4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	4413      	add	r3, r2
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d006      	beq.n	80056f0 <prvInitialiseNewTask+0x70>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	3301      	adds	r3, #1
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2b1f      	cmp	r3, #31
 80056ec:	d9e9      	bls.n	80056c2 <prvInitialiseNewTask+0x42>
 80056ee:	e000      	b.n	80056f2 <prvInitialiseNewTask+0x72>
		{
			break;
 80056f0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	2b06      	cmp	r3, #6
 80056fe:	d901      	bls.n	8005704 <prvInitialiseNewTask+0x84>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005700:	2306      	movs	r3, #6
 8005702:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005706:	6a3a      	ldr	r2, [r7, #32]
 8005708:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	6a3a      	ldr	r2, [r7, #32]
 800570e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8005710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005712:	2200      	movs	r2, #0
 8005714:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005718:	3304      	adds	r3, #4
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff fb00 	bl	8004d20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005722:	3318      	adds	r3, #24
 8005724:	4618      	mov	r0, r3
 8005726:	f7ff fafb 	bl	8004d20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800572a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800572e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	f1c3 0207 	rsb	r2, r3, #7
 8005736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005738:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800573e:	625a      	str	r2, [r3, #36]	; 0x24
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	68f9      	ldr	r1, [r7, #12]
 8005744:	6938      	ldr	r0, [r7, #16]
 8005746:	f000 fdaf 	bl	80062a8 <pxPortInitialiseStack>
 800574a:	4602      	mov	r2, r0
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	2b00      	cmp	r3, #0
 8005754:	d002      	beq.n	800575c <prvInitialiseNewTask+0xdc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800575a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800575c:	bf00      	nop
 800575e:	3718      	adds	r7, #24
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	0800ce14 	.word	0x0800ce14

08005768 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005770:	f000 fe98 	bl	80064a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005774:	4b2a      	ldr	r3, [pc, #168]	; (8005820 <prvAddNewTaskToReadyList+0xb8>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3301      	adds	r3, #1
 800577a:	4a29      	ldr	r2, [pc, #164]	; (8005820 <prvAddNewTaskToReadyList+0xb8>)
 800577c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800577e:	4b29      	ldr	r3, [pc, #164]	; (8005824 <prvAddNewTaskToReadyList+0xbc>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d109      	bne.n	800579a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005786:	4a27      	ldr	r2, [pc, #156]	; (8005824 <prvAddNewTaskToReadyList+0xbc>)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800578c:	4b24      	ldr	r3, [pc, #144]	; (8005820 <prvAddNewTaskToReadyList+0xb8>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d110      	bne.n	80057b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005794:	f000 fc12 	bl	8005fbc <prvInitialiseTaskLists>
 8005798:	e00d      	b.n	80057b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800579a:	4b23      	ldr	r3, [pc, #140]	; (8005828 <prvAddNewTaskToReadyList+0xc0>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d109      	bne.n	80057b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057a2:	4b20      	ldr	r3, [pc, #128]	; (8005824 <prvAddNewTaskToReadyList+0xbc>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d802      	bhi.n	80057b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80057b0:	4a1c      	ldr	r2, [pc, #112]	; (8005824 <prvAddNewTaskToReadyList+0xbc>)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80057b6:	4b1d      	ldr	r3, [pc, #116]	; (800582c <prvAddNewTaskToReadyList+0xc4>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3301      	adds	r3, #1
 80057bc:	4a1b      	ldr	r2, [pc, #108]	; (800582c <prvAddNewTaskToReadyList+0xc4>)
 80057be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	2201      	movs	r2, #1
 80057c6:	409a      	lsls	r2, r3
 80057c8:	4b19      	ldr	r3, [pc, #100]	; (8005830 <prvAddNewTaskToReadyList+0xc8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	4a18      	ldr	r2, [pc, #96]	; (8005830 <prvAddNewTaskToReadyList+0xc8>)
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d6:	4613      	mov	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4a15      	ldr	r2, [pc, #84]	; (8005834 <prvAddNewTaskToReadyList+0xcc>)
 80057e0:	441a      	add	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	3304      	adds	r3, #4
 80057e6:	4619      	mov	r1, r3
 80057e8:	4610      	mov	r0, r2
 80057ea:	f7ff faa6 	bl	8004d3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80057ee:	f000 fe83 	bl	80064f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80057f2:	4b0d      	ldr	r3, [pc, #52]	; (8005828 <prvAddNewTaskToReadyList+0xc0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00e      	beq.n	8005818 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057fa:	4b0a      	ldr	r3, [pc, #40]	; (8005824 <prvAddNewTaskToReadyList+0xbc>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005804:	429a      	cmp	r2, r3
 8005806:	d207      	bcs.n	8005818 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005808:	4b0b      	ldr	r3, [pc, #44]	; (8005838 <prvAddNewTaskToReadyList+0xd0>)
 800580a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005818:	bf00      	nop
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	200099ac 	.word	0x200099ac
 8005824:	200098c4 	.word	0x200098c4
 8005828:	200099b8 	.word	0x200099b8
 800582c:	200099c8 	.word	0x200099c8
 8005830:	200099b4 	.word	0x200099b4
 8005834:	200098c8 	.word	0x200098c8
 8005838:	e000ed04 	.word	0xe000ed04

0800583c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005846:	2300      	movs	r3, #0
 8005848:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d104      	bne.n	800585a <vTaskDelayUntil+0x1e>
 8005850:	f240 4179 	movw	r1, #1145	; 0x479
 8005854:	482c      	ldr	r0, [pc, #176]	; (8005908 <vTaskDelayUntil+0xcc>)
 8005856:	f7fe fcb8 	bl	80041ca <cmr_panic>
		configASSERT( ( xTimeIncrement > 0U ) );
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d104      	bne.n	800586a <vTaskDelayUntil+0x2e>
 8005860:	f240 417a 	movw	r1, #1146	; 0x47a
 8005864:	4829      	ldr	r0, [pc, #164]	; (800590c <vTaskDelayUntil+0xd0>)
 8005866:	f7fe fcb0 	bl	80041ca <cmr_panic>
		configASSERT( uxSchedulerSuspended == 0 );
 800586a:	4b29      	ldr	r3, [pc, #164]	; (8005910 <vTaskDelayUntil+0xd4>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d004      	beq.n	800587c <vTaskDelayUntil+0x40>
 8005872:	f240 417b 	movw	r1, #1147	; 0x47b
 8005876:	4827      	ldr	r0, [pc, #156]	; (8005914 <vTaskDelayUntil+0xd8>)
 8005878:	f7fe fca7 	bl	80041ca <cmr_panic>

		vTaskSuspendAll();
 800587c:	f000 f8ae 	bl	80059dc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005880:	4b25      	ldr	r3, [pc, #148]	; (8005918 <vTaskDelayUntil+0xdc>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	4413      	add	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	429a      	cmp	r2, r3
 8005898:	d20b      	bcs.n	80058b2 <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d211      	bcs.n	80058c8 <vTaskDelayUntil+0x8c>
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d90d      	bls.n	80058c8 <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
 80058ac:	2301      	movs	r3, #1
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	e00a      	b.n	80058c8 <vTaskDelayUntil+0x8c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d303      	bcc.n	80058c4 <vTaskDelayUntil+0x88>
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d901      	bls.n	80058c8 <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
 80058c4:	2301      	movs	r3, #1
 80058c6:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d006      	beq.n	80058e2 <vTaskDelayUntil+0xa6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2100      	movs	r1, #0
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 fc7d 	bl	80061dc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80058e2:	f000 f889 	bl	80059f8 <xTaskResumeAll>
 80058e6:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d107      	bne.n	80058fe <vTaskDelayUntil+0xc2>
		{
			portYIELD_WITHIN_API();
 80058ee:	4b0b      	ldr	r3, [pc, #44]	; (800591c <vTaskDelayUntil+0xe0>)
 80058f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058fe:	bf00      	nop
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	0800cebc 	.word	0x0800cebc
 800590c:	0800cf0c 	.word	0x0800cf0c
 8005910:	200099d4 	.word	0x200099d4
 8005914:	0800cf60 	.word	0x0800cf60
 8005918:	200099b0 	.word	0x200099b0
 800591c:	e000ed04 	.word	0xe000ed04

08005920 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b08a      	sub	sp, #40	; 0x28
 8005924:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800592a:	2300      	movs	r3, #0
 800592c:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800592e:	1d3a      	adds	r2, r7, #4
 8005930:	f107 0108 	add.w	r1, r7, #8
 8005934:	f107 030c 	add.w	r3, r7, #12
 8005938:	4618      	mov	r0, r3
 800593a:	f7fe fdd7 	bl	80044ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800593e:	6879      	ldr	r1, [r7, #4]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	9202      	str	r2, [sp, #8]
 8005946:	9301      	str	r3, [sp, #4]
 8005948:	2300      	movs	r3, #0
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	2300      	movs	r3, #0
 800594e:	460a      	mov	r2, r1
 8005950:	491b      	ldr	r1, [pc, #108]	; (80059c0 <vTaskStartScheduler+0xa0>)
 8005952:	481c      	ldr	r0, [pc, #112]	; (80059c4 <vTaskStartScheduler+0xa4>)
 8005954:	f7ff fe54 	bl	8005600 <xTaskCreateStatic>
 8005958:	4603      	mov	r3, r0
 800595a:	4a1b      	ldr	r2, [pc, #108]	; (80059c8 <vTaskStartScheduler+0xa8>)
 800595c:	6013      	str	r3, [r2, #0]
												( void * ) NULL,
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800595e:	4b1a      	ldr	r3, [pc, #104]	; (80059c8 <vTaskStartScheduler+0xa8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 8005966:	2301      	movs	r3, #1
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	e001      	b.n	8005970 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 800596c:	2300      	movs	r3, #0
 800596e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d116      	bne.n	80059a4 <vTaskStartScheduler+0x84>
	__asm volatile
 8005976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597a:	f383 8811 	msr	BASEPRI, r3
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	613b      	str	r3, [r7, #16]
}
 8005988:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800598a:	4b10      	ldr	r3, [pc, #64]	; (80059cc <vTaskStartScheduler+0xac>)
 800598c:	f04f 32ff 	mov.w	r2, #4294967295
 8005990:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005992:	4b0f      	ldr	r3, [pc, #60]	; (80059d0 <vTaskStartScheduler+0xb0>)
 8005994:	2201      	movs	r2, #1
 8005996:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005998:	4b0e      	ldr	r3, [pc, #56]	; (80059d4 <vTaskStartScheduler+0xb4>)
 800599a:	2200      	movs	r2, #0
 800599c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800599e:	f000 fcfb 	bl	8006398 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80059a2:	e008      	b.n	80059b6 <vTaskStartScheduler+0x96>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059aa:	d104      	bne.n	80059b6 <vTaskStartScheduler+0x96>
 80059ac:	f240 7184 	movw	r1, #1924	; 0x784
 80059b0:	4809      	ldr	r0, [pc, #36]	; (80059d8 <vTaskStartScheduler+0xb8>)
 80059b2:	f7fe fc0a 	bl	80041ca <cmr_panic>
}
 80059b6:	bf00      	nop
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	0800d048 	.word	0x0800d048
 80059c4:	08005f8d 	.word	0x08005f8d
 80059c8:	200099d0 	.word	0x200099d0
 80059cc:	200099cc 	.word	0x200099cc
 80059d0:	200099b8 	.word	0x200099b8
 80059d4:	200099b0 	.word	0x200099b0
 80059d8:	0800d050 	.word	0x0800d050

080059dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80059e0:	4b04      	ldr	r3, [pc, #16]	; (80059f4 <vTaskSuspendAll+0x18>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3301      	adds	r3, #1
 80059e6:	4a03      	ldr	r2, [pc, #12]	; (80059f4 <vTaskSuspendAll+0x18>)
 80059e8:	6013      	str	r3, [r2, #0]
}
 80059ea:	bf00      	nop
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	200099d4 	.word	0x200099d4

080059f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a02:	2300      	movs	r3, #0
 8005a04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a06:	4b3e      	ldr	r3, [pc, #248]	; (8005b00 <xTaskResumeAll+0x108>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d104      	bne.n	8005a18 <xTaskResumeAll+0x20>
 8005a0e:	f44f 61fd 	mov.w	r1, #2024	; 0x7e8
 8005a12:	483c      	ldr	r0, [pc, #240]	; (8005b04 <xTaskResumeAll+0x10c>)
 8005a14:	f7fe fbd9 	bl	80041ca <cmr_panic>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a18:	f000 fd44 	bl	80064a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a1c:	4b38      	ldr	r3, [pc, #224]	; (8005b00 <xTaskResumeAll+0x108>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3b01      	subs	r3, #1
 8005a22:	4a37      	ldr	r2, [pc, #220]	; (8005b00 <xTaskResumeAll+0x108>)
 8005a24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a26:	4b36      	ldr	r3, [pc, #216]	; (8005b00 <xTaskResumeAll+0x108>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d161      	bne.n	8005af2 <xTaskResumeAll+0xfa>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a2e:	4b36      	ldr	r3, [pc, #216]	; (8005b08 <xTaskResumeAll+0x110>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d05d      	beq.n	8005af2 <xTaskResumeAll+0xfa>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a36:	e02e      	b.n	8005a96 <xTaskResumeAll+0x9e>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005a38:	4b34      	ldr	r3, [pc, #208]	; (8005b0c <xTaskResumeAll+0x114>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	3318      	adds	r3, #24
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7ff f9d5 	bl	8004df4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7ff f9d0 	bl	8004df4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	2201      	movs	r2, #1
 8005a5a:	409a      	lsls	r2, r3
 8005a5c:	4b2c      	ldr	r3, [pc, #176]	; (8005b10 <xTaskResumeAll+0x118>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	4a2b      	ldr	r2, [pc, #172]	; (8005b10 <xTaskResumeAll+0x118>)
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4a28      	ldr	r2, [pc, #160]	; (8005b14 <xTaskResumeAll+0x11c>)
 8005a74:	441a      	add	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	3304      	adds	r3, #4
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	f7ff f95c 	bl	8004d3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a86:	4b24      	ldr	r3, [pc, #144]	; (8005b18 <xTaskResumeAll+0x120>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d302      	bcc.n	8005a96 <xTaskResumeAll+0x9e>
					{
						xYieldPending = pdTRUE;
 8005a90:	4b22      	ldr	r3, [pc, #136]	; (8005b1c <xTaskResumeAll+0x124>)
 8005a92:	2201      	movs	r2, #1
 8005a94:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a96:	4b1d      	ldr	r3, [pc, #116]	; (8005b0c <xTaskResumeAll+0x114>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1cc      	bne.n	8005a38 <xTaskResumeAll+0x40>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <xTaskResumeAll+0xb0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005aa4:	f000 facc 	bl	8006040 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005aa8:	4b1d      	ldr	r3, [pc, #116]	; (8005b20 <xTaskResumeAll+0x128>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d010      	beq.n	8005ad6 <xTaskResumeAll+0xde>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ab4:	f000 f85a 	bl	8005b6c <xTaskIncrementTick>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d002      	beq.n	8005ac4 <xTaskResumeAll+0xcc>
							{
								xYieldPending = pdTRUE;
 8005abe:	4b17      	ldr	r3, [pc, #92]	; (8005b1c <xTaskResumeAll+0x124>)
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1f1      	bne.n	8005ab4 <xTaskResumeAll+0xbc>

						uxPendedTicks = 0;
 8005ad0:	4b13      	ldr	r3, [pc, #76]	; (8005b20 <xTaskResumeAll+0x128>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ad6:	4b11      	ldr	r3, [pc, #68]	; (8005b1c <xTaskResumeAll+0x124>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d009      	beq.n	8005af2 <xTaskResumeAll+0xfa>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ae2:	4b10      	ldr	r3, [pc, #64]	; (8005b24 <xTaskResumeAll+0x12c>)
 8005ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005af2:	f000 fd01 	bl	80064f8 <vPortExitCritical>

	return xAlreadyYielded;
 8005af6:	68bb      	ldr	r3, [r7, #8]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	200099d4 	.word	0x200099d4
 8005b04:	0800d0c0 	.word	0x0800d0c0
 8005b08:	200099ac 	.word	0x200099ac
 8005b0c:	20009984 	.word	0x20009984
 8005b10:	200099b4 	.word	0x200099b4
 8005b14:	200098c8 	.word	0x200098c8
 8005b18:	200098c4 	.word	0x200098c4
 8005b1c:	200099c0 	.word	0x200099c0
 8005b20:	200099bc 	.word	0x200099bc
 8005b24:	e000ed04 	.word	0xe000ed04

08005b28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005b2e:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <xTaskGetTickCount+0x1c>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005b34:	687b      	ldr	r3, [r7, #4]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	200099b0 	.word	0x200099b0

08005b48 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b4e:	f000 fd73 	bl	8006638 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005b52:	2300      	movs	r3, #0
 8005b54:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005b56:	4b04      	ldr	r3, [pc, #16]	; (8005b68 <xTaskGetTickCountFromISR+0x20>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b5c:	683b      	ldr	r3, [r7, #0]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	200099b0 	.word	0x200099b0

08005b6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b72:	2300      	movs	r3, #0
 8005b74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b76:	4b4e      	ldr	r3, [pc, #312]	; (8005cb0 <xTaskIncrementTick+0x144>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f040 8087 	bne.w	8005c8e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8005b80:	4b4c      	ldr	r3, [pc, #304]	; (8005cb4 <xTaskIncrementTick+0x148>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3301      	adds	r3, #1
 8005b86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b88:	4a4a      	ldr	r2, [pc, #296]	; (8005cb4 <xTaskIncrementTick+0x148>)
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d11a      	bne.n	8005bca <xTaskIncrementTick+0x5e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b94:	4b48      	ldr	r3, [pc, #288]	; (8005cb8 <xTaskIncrementTick+0x14c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d004      	beq.n	8005ba8 <xTaskIncrementTick+0x3c>
 8005b9e:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8005ba2:	4846      	ldr	r0, [pc, #280]	; (8005cbc <xTaskIncrementTick+0x150>)
 8005ba4:	f7fe fb11 	bl	80041ca <cmr_panic>
 8005ba8:	4b43      	ldr	r3, [pc, #268]	; (8005cb8 <xTaskIncrementTick+0x14c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	4b44      	ldr	r3, [pc, #272]	; (8005cc0 <xTaskIncrementTick+0x154>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a41      	ldr	r2, [pc, #260]	; (8005cb8 <xTaskIncrementTick+0x14c>)
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	4a42      	ldr	r2, [pc, #264]	; (8005cc0 <xTaskIncrementTick+0x154>)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6013      	str	r3, [r2, #0]
 8005bbc:	4b41      	ldr	r3, [pc, #260]	; (8005cc4 <xTaskIncrementTick+0x158>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	4a40      	ldr	r2, [pc, #256]	; (8005cc4 <xTaskIncrementTick+0x158>)
 8005bc4:	6013      	str	r3, [r2, #0]
 8005bc6:	f000 fa3b 	bl	8006040 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005bca:	4b3f      	ldr	r3, [pc, #252]	; (8005cc8 <xTaskIncrementTick+0x15c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d34d      	bcc.n	8005c70 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bd4:	4b38      	ldr	r3, [pc, #224]	; (8005cb8 <xTaskIncrementTick+0x14c>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <xTaskIncrementTick+0x76>
 8005bde:	2301      	movs	r3, #1
 8005be0:	e000      	b.n	8005be4 <xTaskIncrementTick+0x78>
 8005be2:	2300      	movs	r3, #0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d004      	beq.n	8005bf2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005be8:	4b37      	ldr	r3, [pc, #220]	; (8005cc8 <xTaskIncrementTick+0x15c>)
 8005bea:	f04f 32ff 	mov.w	r2, #4294967295
 8005bee:	601a      	str	r2, [r3, #0]
					break;
 8005bf0:	e03e      	b.n	8005c70 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005bf2:	4b31      	ldr	r3, [pc, #196]	; (8005cb8 <xTaskIncrementTick+0x14c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d203      	bcs.n	8005c12 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c0a:	4a2f      	ldr	r2, [pc, #188]	; (8005cc8 <xTaskIncrementTick+0x15c>)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6013      	str	r3, [r2, #0]
						break;
 8005c10:	e02e      	b.n	8005c70 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	3304      	adds	r3, #4
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7ff f8ec 	bl	8004df4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d004      	beq.n	8005c2e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	3318      	adds	r3, #24
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7ff f8e3 	bl	8004df4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c32:	2201      	movs	r2, #1
 8005c34:	409a      	lsls	r2, r3
 8005c36:	4b25      	ldr	r3, [pc, #148]	; (8005ccc <xTaskIncrementTick+0x160>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	4a23      	ldr	r2, [pc, #140]	; (8005ccc <xTaskIncrementTick+0x160>)
 8005c3e:	6013      	str	r3, [r2, #0]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c44:	4613      	mov	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4a20      	ldr	r2, [pc, #128]	; (8005cd0 <xTaskIncrementTick+0x164>)
 8005c4e:	441a      	add	r2, r3
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	3304      	adds	r3, #4
 8005c54:	4619      	mov	r1, r3
 8005c56:	4610      	mov	r0, r2
 8005c58:	f7ff f86f 	bl	8004d3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c60:	4b1c      	ldr	r3, [pc, #112]	; (8005cd4 <xTaskIncrementTick+0x168>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d3b4      	bcc.n	8005bd4 <xTaskIncrementTick+0x68>
						{
							xSwitchRequired = pdTRUE;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c6e:	e7b1      	b.n	8005bd4 <xTaskIncrementTick+0x68>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c70:	4b18      	ldr	r3, [pc, #96]	; (8005cd4 <xTaskIncrementTick+0x168>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c76:	4916      	ldr	r1, [pc, #88]	; (8005cd0 <xTaskIncrementTick+0x164>)
 8005c78:	4613      	mov	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	440b      	add	r3, r1
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d907      	bls.n	8005c98 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	617b      	str	r3, [r7, #20]
 8005c8c:	e004      	b.n	8005c98 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005c8e:	4b12      	ldr	r3, [pc, #72]	; (8005cd8 <xTaskIncrementTick+0x16c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3301      	adds	r3, #1
 8005c94:	4a10      	ldr	r2, [pc, #64]	; (8005cd8 <xTaskIncrementTick+0x16c>)
 8005c96:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005c98:	4b10      	ldr	r3, [pc, #64]	; (8005cdc <xTaskIncrementTick+0x170>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005ca4:	697b      	ldr	r3, [r7, #20]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	200099d4 	.word	0x200099d4
 8005cb4:	200099b0 	.word	0x200099b0
 8005cb8:	2000997c 	.word	0x2000997c
 8005cbc:	0800d158 	.word	0x0800d158
 8005cc0:	20009980 	.word	0x20009980
 8005cc4:	200099c4 	.word	0x200099c4
 8005cc8:	200099cc 	.word	0x200099cc
 8005ccc:	200099b4 	.word	0x200099b4
 8005cd0:	200098c8 	.word	0x200098c8
 8005cd4:	200098c4 	.word	0x200098c4
 8005cd8:	200099bc 	.word	0x200099bc
 8005cdc:	200099c0 	.word	0x200099c0

08005ce0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ce6:	4b23      	ldr	r3, [pc, #140]	; (8005d74 <vTaskSwitchContext+0x94>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005cee:	4b22      	ldr	r3, [pc, #136]	; (8005d78 <vTaskSwitchContext+0x98>)
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005cf4:	e039      	b.n	8005d6a <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 8005cf6:	4b20      	ldr	r3, [pc, #128]	; (8005d78 <vTaskSwitchContext+0x98>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005cfc:	4b1f      	ldr	r3, [pc, #124]	; (8005d7c <vTaskSwitchContext+0x9c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	fab3 f383 	clz	r3, r3
 8005d08:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8005d0a:	78fb      	ldrb	r3, [r7, #3]
 8005d0c:	f1c3 031f 	rsb	r3, r3, #31
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	491b      	ldr	r1, [pc, #108]	; (8005d80 <vTaskSwitchContext+0xa0>)
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	4613      	mov	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	440b      	add	r3, r1
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d104      	bne.n	8005d30 <vTaskSwitchContext+0x50>
 8005d26:	f640 21f6 	movw	r1, #2806	; 0xaf6
 8005d2a:	4816      	ldr	r0, [pc, #88]	; (8005d84 <vTaskSwitchContext+0xa4>)
 8005d2c:	f7fe fa4d 	bl	80041ca <cmr_panic>
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4613      	mov	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4a11      	ldr	r2, [pc, #68]	; (8005d80 <vTaskSwitchContext+0xa0>)
 8005d3c:	4413      	add	r3, r2
 8005d3e:	60bb      	str	r3, [r7, #8]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	605a      	str	r2, [r3, #4]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	3308      	adds	r3, #8
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d104      	bne.n	8005d60 <vTaskSwitchContext+0x80>
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	605a      	str	r2, [r3, #4]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	4a08      	ldr	r2, [pc, #32]	; (8005d88 <vTaskSwitchContext+0xa8>)
 8005d68:	6013      	str	r3, [r2, #0]
}
 8005d6a:	bf00      	nop
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	200099d4 	.word	0x200099d4
 8005d78:	200099c0 	.word	0x200099c0
 8005d7c:	200099b4 	.word	0x200099b4
 8005d80:	200098c8 	.word	0x200098c8
 8005d84:	0800d1c0 	.word	0x0800d1c0
 8005d88:	200098c4 	.word	0x200098c4

08005d8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d104      	bne.n	8005da6 <vTaskPlaceOnEventList+0x1a>
 8005d9c:	f640 3106 	movw	r1, #2822	; 0xb06
 8005da0:	4808      	ldr	r0, [pc, #32]	; (8005dc4 <vTaskPlaceOnEventList+0x38>)
 8005da2:	f7fe fa12 	bl	80041ca <cmr_panic>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005da6:	4b08      	ldr	r3, [pc, #32]	; (8005dc8 <vTaskPlaceOnEventList+0x3c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3318      	adds	r3, #24
 8005dac:	4619      	mov	r1, r3
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7fe ffe7 	bl	8004d82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005db4:	2101      	movs	r1, #1
 8005db6:	6838      	ldr	r0, [r7, #0]
 8005db8:	f000 fa10 	bl	80061dc <prvAddCurrentTaskToDelayedList>
}
 8005dbc:	bf00      	nop
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	0800d244 	.word	0x0800d244
 8005dc8:	200098c4 	.word	0x200098c4

08005dcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d104      	bne.n	8005dec <xTaskRemoveFromEventList+0x20>
 8005de2:	f640 3161 	movw	r1, #2913	; 0xb61
 8005de6:	4821      	ldr	r0, [pc, #132]	; (8005e6c <xTaskRemoveFromEventList+0xa0>)
 8005de8:	f7fe f9ef 	bl	80041ca <cmr_panic>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	3318      	adds	r3, #24
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7fe ffff 	bl	8004df4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005df6:	4b1e      	ldr	r3, [pc, #120]	; (8005e70 <xTaskRemoveFromEventList+0xa4>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d11c      	bne.n	8005e38 <xTaskRemoveFromEventList+0x6c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	3304      	adds	r3, #4
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fe fff6 	bl	8004df4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	409a      	lsls	r2, r3
 8005e10:	4b18      	ldr	r3, [pc, #96]	; (8005e74 <xTaskRemoveFromEventList+0xa8>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	4a17      	ldr	r2, [pc, #92]	; (8005e74 <xTaskRemoveFromEventList+0xa8>)
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e1e:	4613      	mov	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4a14      	ldr	r2, [pc, #80]	; (8005e78 <xTaskRemoveFromEventList+0xac>)
 8005e28:	441a      	add	r2, r3
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	4619      	mov	r1, r3
 8005e30:	4610      	mov	r0, r2
 8005e32:	f7fe ff82 	bl	8004d3a <vListInsertEnd>
 8005e36:	e005      	b.n	8005e44 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	3318      	adds	r3, #24
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	480f      	ldr	r0, [pc, #60]	; (8005e7c <xTaskRemoveFromEventList+0xb0>)
 8005e40:	f7fe ff7b 	bl	8004d3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e48:	4b0d      	ldr	r3, [pc, #52]	; (8005e80 <xTaskRemoveFromEventList+0xb4>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d905      	bls.n	8005e5e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e52:	2301      	movs	r3, #1
 8005e54:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e56:	4b0b      	ldr	r3, [pc, #44]	; (8005e84 <xTaskRemoveFromEventList+0xb8>)
 8005e58:	2201      	movs	r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	e001      	b.n	8005e62 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005e62:	68fb      	ldr	r3, [r7, #12]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	0800d2e4 	.word	0x0800d2e4
 8005e70:	200099d4 	.word	0x200099d4
 8005e74:	200099b4 	.word	0x200099b4
 8005e78:	200098c8 	.word	0x200098c8
 8005e7c:	20009984 	.word	0x20009984
 8005e80:	200098c4 	.word	0x200098c4
 8005e84:	200099c0 	.word	0x200099c0

08005e88 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d104      	bne.n	8005ea0 <vTaskSetTimeOutState+0x18>
 8005e96:	f640 31c1 	movw	r1, #3009	; 0xbc1
 8005e9a:	4807      	ldr	r0, [pc, #28]	; (8005eb8 <vTaskSetTimeOutState+0x30>)
 8005e9c:	f7fe f995 	bl	80041ca <cmr_panic>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ea0:	4b06      	ldr	r3, [pc, #24]	; (8005ebc <vTaskSetTimeOutState+0x34>)
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ea8:	4b05      	ldr	r3, [pc, #20]	; (8005ec0 <vTaskSetTimeOutState+0x38>)
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	605a      	str	r2, [r3, #4]
}
 8005eb0:	bf00      	nop
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	0800d38c 	.word	0x0800d38c
 8005ebc:	200099c4 	.word	0x200099c4
 8005ec0:	200099b0 	.word	0x200099b0

08005ec4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d104      	bne.n	8005ede <xTaskCheckForTimeOut+0x1a>
 8005ed4:	f640 31cb 	movw	r1, #3019	; 0xbcb
 8005ed8:	4822      	ldr	r0, [pc, #136]	; (8005f64 <xTaskCheckForTimeOut+0xa0>)
 8005eda:	f7fe f976 	bl	80041ca <cmr_panic>
	configASSERT( pxTicksToWait );
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d104      	bne.n	8005eee <xTaskCheckForTimeOut+0x2a>
 8005ee4:	f640 31cc 	movw	r1, #3020	; 0xbcc
 8005ee8:	481f      	ldr	r0, [pc, #124]	; (8005f68 <xTaskCheckForTimeOut+0xa4>)
 8005eea:	f7fe f96e 	bl	80041ca <cmr_panic>

	taskENTER_CRITICAL();
 8005eee:	f000 fad9 	bl	80064a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ef2:	4b1e      	ldr	r3, [pc, #120]	; (8005f6c <xTaskCheckForTimeOut+0xa8>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f00:	d102      	bne.n	8005f08 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f02:	2300      	movs	r3, #0
 8005f04:	60fb      	str	r3, [r7, #12]
 8005f06:	e026      	b.n	8005f56 <xTaskCheckForTimeOut+0x92>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	4b18      	ldr	r3, [pc, #96]	; (8005f70 <xTaskCheckForTimeOut+0xac>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d007      	beq.n	8005f24 <xTaskCheckForTimeOut+0x60>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d302      	bcc.n	8005f24 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	e018      	b.n	8005f56 <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	1ad2      	subs	r2, r2, r3
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d20e      	bcs.n	8005f52 <xTaskCheckForTimeOut+0x8e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6859      	ldr	r1, [r3, #4]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	1acb      	subs	r3, r1, r3
 8005f40:	441a      	add	r2, r3
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7ff ff9e 	bl	8005e88 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	e001      	b.n	8005f56 <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
 8005f52:	2301      	movs	r3, #1
 8005f54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f56:	f000 facf 	bl	80064f8 <vPortExitCritical>

	return xReturn;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	0800d38c 	.word	0x0800d38c
 8005f68:	0800d3d4 	.word	0x0800d3d4
 8005f6c:	200099b0 	.word	0x200099b0
 8005f70:	200099c4 	.word	0x200099c4

08005f74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f74:	b480      	push	{r7}
 8005f76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f78:	4b03      	ldr	r3, [pc, #12]	; (8005f88 <vTaskMissedYield+0x14>)
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	601a      	str	r2, [r3, #0]
}
 8005f7e:	bf00      	nop
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	200099c0 	.word	0x200099c0

08005f8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f94:	f000 f84c 	bl	8006030 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f98:	4b06      	ldr	r3, [pc, #24]	; (8005fb4 <prvIdleTask+0x28>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d9f9      	bls.n	8005f94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005fa0:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <prvIdleTask+0x2c>)
 8005fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005fb0:	e7f0      	b.n	8005f94 <prvIdleTask+0x8>
 8005fb2:	bf00      	nop
 8005fb4:	200098c8 	.word	0x200098c8
 8005fb8:	e000ed04 	.word	0xe000ed04

08005fbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	607b      	str	r3, [r7, #4]
 8005fc6:	e00c      	b.n	8005fe2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4a10      	ldr	r2, [pc, #64]	; (8006014 <prvInitialiseTaskLists+0x58>)
 8005fd4:	4413      	add	r3, r2
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fe fe82 	bl	8004ce0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	607b      	str	r3, [r7, #4]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b06      	cmp	r3, #6
 8005fe6:	d9ef      	bls.n	8005fc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005fe8:	480b      	ldr	r0, [pc, #44]	; (8006018 <prvInitialiseTaskLists+0x5c>)
 8005fea:	f7fe fe79 	bl	8004ce0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fee:	480b      	ldr	r0, [pc, #44]	; (800601c <prvInitialiseTaskLists+0x60>)
 8005ff0:	f7fe fe76 	bl	8004ce0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ff4:	480a      	ldr	r0, [pc, #40]	; (8006020 <prvInitialiseTaskLists+0x64>)
 8005ff6:	f7fe fe73 	bl	8004ce0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ffa:	480a      	ldr	r0, [pc, #40]	; (8006024 <prvInitialiseTaskLists+0x68>)
 8005ffc:	f7fe fe70 	bl	8004ce0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006000:	4b09      	ldr	r3, [pc, #36]	; (8006028 <prvInitialiseTaskLists+0x6c>)
 8006002:	4a05      	ldr	r2, [pc, #20]	; (8006018 <prvInitialiseTaskLists+0x5c>)
 8006004:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006006:	4b09      	ldr	r3, [pc, #36]	; (800602c <prvInitialiseTaskLists+0x70>)
 8006008:	4a04      	ldr	r2, [pc, #16]	; (800601c <prvInitialiseTaskLists+0x60>)
 800600a:	601a      	str	r2, [r3, #0]
}
 800600c:	bf00      	nop
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	200098c8 	.word	0x200098c8
 8006018:	20009954 	.word	0x20009954
 800601c:	20009968 	.word	0x20009968
 8006020:	20009984 	.word	0x20009984
 8006024:	20009998 	.word	0x20009998
 8006028:	2000997c 	.word	0x2000997c
 800602c:	20009980 	.word	0x20009980

08006030 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006030:	b480      	push	{r7}
 8006032:	af00      	add	r7, sp, #0
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006034:	bf00      	nop
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
	...

08006040 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006046:	4b0f      	ldr	r3, [pc, #60]	; (8006084 <prvResetNextTaskUnblockTime+0x44>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <prvResetNextTaskUnblockTime+0x14>
 8006050:	2301      	movs	r3, #1
 8006052:	e000      	b.n	8006056 <prvResetNextTaskUnblockTime+0x16>
 8006054:	2300      	movs	r3, #0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d004      	beq.n	8006064 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800605a:	4b0b      	ldr	r3, [pc, #44]	; (8006088 <prvResetNextTaskUnblockTime+0x48>)
 800605c:	f04f 32ff 	mov.w	r2, #4294967295
 8006060:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006062:	e008      	b.n	8006076 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006064:	4b07      	ldr	r3, [pc, #28]	; (8006084 <prvResetNextTaskUnblockTime+0x44>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	4a05      	ldr	r2, [pc, #20]	; (8006088 <prvResetNextTaskUnblockTime+0x48>)
 8006074:	6013      	str	r3, [r2, #0]
}
 8006076:	bf00      	nop
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	2000997c 	.word	0x2000997c
 8006088:	200099cc 	.word	0x200099cc

0800608c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006092:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <xTaskGetSchedulerState+0x34>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d102      	bne.n	80060a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800609a:	2301      	movs	r3, #1
 800609c:	607b      	str	r3, [r7, #4]
 800609e:	e008      	b.n	80060b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060a0:	4b08      	ldr	r3, [pc, #32]	; (80060c4 <xTaskGetSchedulerState+0x38>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d102      	bne.n	80060ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80060a8:	2302      	movs	r3, #2
 80060aa:	607b      	str	r3, [r7, #4]
 80060ac:	e001      	b.n	80060b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80060ae:	2300      	movs	r3, #0
 80060b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80060b2:	687b      	ldr	r3, [r7, #4]
	}
 80060b4:	4618      	mov	r0, r3
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	200099b8 	.word	0x200099b8
 80060c4:	200099d4 	.word	0x200099d4

080060c8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d062      	beq.n	80061a0 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060de:	4b32      	ldr	r3, [pc, #200]	; (80061a8 <vTaskPriorityInherit+0xe0>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d25b      	bcs.n	80061a0 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	db06      	blt.n	80060fe <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060f0:	4b2d      	ldr	r3, [pc, #180]	; (80061a8 <vTaskPriorityInherit+0xe0>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f6:	f1c3 0207 	rsb	r2, r3, #7
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6959      	ldr	r1, [r3, #20]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006106:	4613      	mov	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4a27      	ldr	r2, [pc, #156]	; (80061ac <vTaskPriorityInherit+0xe4>)
 8006110:	4413      	add	r3, r2
 8006112:	4299      	cmp	r1, r3
 8006114:	d101      	bne.n	800611a <vTaskPriorityInherit+0x52>
 8006116:	2301      	movs	r3, #1
 8006118:	e000      	b.n	800611c <vTaskPriorityInherit+0x54>
 800611a:	2300      	movs	r3, #0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d03a      	beq.n	8006196 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	3304      	adds	r3, #4
 8006124:	4618      	mov	r0, r3
 8006126:	f7fe fe65 	bl	8004df4 <uxListRemove>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d115      	bne.n	800615c <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006134:	491d      	ldr	r1, [pc, #116]	; (80061ac <vTaskPriorityInherit+0xe4>)
 8006136:	4613      	mov	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	440b      	add	r3, r1
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10a      	bne.n	800615c <vTaskPriorityInherit+0x94>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614a:	2201      	movs	r2, #1
 800614c:	fa02 f303 	lsl.w	r3, r2, r3
 8006150:	43da      	mvns	r2, r3
 8006152:	4b17      	ldr	r3, [pc, #92]	; (80061b0 <vTaskPriorityInherit+0xe8>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4013      	ands	r3, r2
 8006158:	4a15      	ldr	r2, [pc, #84]	; (80061b0 <vTaskPriorityInherit+0xe8>)
 800615a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800615c:	4b12      	ldr	r3, [pc, #72]	; (80061a8 <vTaskPriorityInherit+0xe0>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616a:	2201      	movs	r2, #1
 800616c:	409a      	lsls	r2, r3
 800616e:	4b10      	ldr	r3, [pc, #64]	; (80061b0 <vTaskPriorityInherit+0xe8>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4313      	orrs	r3, r2
 8006174:	4a0e      	ldr	r2, [pc, #56]	; (80061b0 <vTaskPriorityInherit+0xe8>)
 8006176:	6013      	str	r3, [r2, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617c:	4613      	mov	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4a09      	ldr	r2, [pc, #36]	; (80061ac <vTaskPriorityInherit+0xe4>)
 8006186:	441a      	add	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3304      	adds	r3, #4
 800618c:	4619      	mov	r1, r3
 800618e:	4610      	mov	r0, r2
 8006190:	f7fe fdd3 	bl	8004d3a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006194:	e004      	b.n	80061a0 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006196:	4b04      	ldr	r3, [pc, #16]	; (80061a8 <vTaskPriorityInherit+0xe0>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 80061a0:	bf00      	nop
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	200098c4 	.word	0x200098c4
 80061ac:	200098c8 	.word	0x200098c8
 80061b0:	200099b4 	.word	0x200099b4

080061b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80061b4:	b480      	push	{r7}
 80061b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80061b8:	4b07      	ldr	r3, [pc, #28]	; (80061d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d004      	beq.n	80061ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80061c0:	4b05      	ldr	r3, [pc, #20]	; (80061d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80061c6:	3201      	adds	r2, #1
 80061c8:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 80061ca:	4b03      	ldr	r3, [pc, #12]	; (80061d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80061cc:	681b      	ldr	r3, [r3, #0]
	}
 80061ce:	4618      	mov	r0, r3
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	200098c4 	.word	0x200098c4

080061dc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061e6:	4b29      	ldr	r3, [pc, #164]	; (800628c <prvAddCurrentTaskToDelayedList+0xb0>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061ec:	4b28      	ldr	r3, [pc, #160]	; (8006290 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3304      	adds	r3, #4
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fe fdfe 	bl	8004df4 <uxListRemove>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10b      	bne.n	8006216 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80061fe:	4b24      	ldr	r3, [pc, #144]	; (8006290 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006204:	2201      	movs	r2, #1
 8006206:	fa02 f303 	lsl.w	r3, r2, r3
 800620a:	43da      	mvns	r2, r3
 800620c:	4b21      	ldr	r3, [pc, #132]	; (8006294 <prvAddCurrentTaskToDelayedList+0xb8>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4013      	ands	r3, r2
 8006212:	4a20      	ldr	r2, [pc, #128]	; (8006294 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006214:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621c:	d10a      	bne.n	8006234 <prvAddCurrentTaskToDelayedList+0x58>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d007      	beq.n	8006234 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006224:	4b1a      	ldr	r3, [pc, #104]	; (8006290 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3304      	adds	r3, #4
 800622a:	4619      	mov	r1, r3
 800622c:	481a      	ldr	r0, [pc, #104]	; (8006298 <prvAddCurrentTaskToDelayedList+0xbc>)
 800622e:	f7fe fd84 	bl	8004d3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006232:	e026      	b.n	8006282 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4413      	add	r3, r2
 800623a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800623c:	4b14      	ldr	r3, [pc, #80]	; (8006290 <prvAddCurrentTaskToDelayedList+0xb4>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	429a      	cmp	r2, r3
 800624a:	d209      	bcs.n	8006260 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800624c:	4b13      	ldr	r3, [pc, #76]	; (800629c <prvAddCurrentTaskToDelayedList+0xc0>)
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	4b0f      	ldr	r3, [pc, #60]	; (8006290 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3304      	adds	r3, #4
 8006256:	4619      	mov	r1, r3
 8006258:	4610      	mov	r0, r2
 800625a:	f7fe fd92 	bl	8004d82 <vListInsert>
}
 800625e:	e010      	b.n	8006282 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006260:	4b0f      	ldr	r3, [pc, #60]	; (80062a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	4b0a      	ldr	r3, [pc, #40]	; (8006290 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3304      	adds	r3, #4
 800626a:	4619      	mov	r1, r3
 800626c:	4610      	mov	r0, r2
 800626e:	f7fe fd88 	bl	8004d82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006272:	4b0c      	ldr	r3, [pc, #48]	; (80062a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	429a      	cmp	r2, r3
 800627a:	d202      	bcs.n	8006282 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800627c:	4a09      	ldr	r2, [pc, #36]	; (80062a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	6013      	str	r3, [r2, #0]
}
 8006282:	bf00      	nop
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	200099b0 	.word	0x200099b0
 8006290:	200098c4 	.word	0x200098c4
 8006294:	200099b4 	.word	0x200099b4
 8006298:	20009998 	.word	0x20009998
 800629c:	20009980 	.word	0x20009980
 80062a0:	2000997c 	.word	0x2000997c
 80062a4:	200099cc 	.word	0x200099cc

080062a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	3b04      	subs	r3, #4
 80062b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3b04      	subs	r3, #4
 80062c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f023 0201 	bic.w	r2, r3, #1
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	3b04      	subs	r3, #4
 80062d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062d8:	4a0c      	ldr	r2, [pc, #48]	; (800630c <pxPortInitialiseStack+0x64>)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3b14      	subs	r3, #20
 80062e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3b04      	subs	r3, #4
 80062ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f06f 0202 	mvn.w	r2, #2
 80062f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	3b20      	subs	r3, #32
 80062fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062fe:	68fb      	ldr	r3, [r7, #12]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	08006311 	.word	0x08006311

08006310 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006316:	4b0a      	ldr	r3, [pc, #40]	; (8006340 <prvTaskExitError+0x30>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631e:	d004      	beq.n	800632a <prvTaskExitError+0x1a>
 8006320:	f240 110b 	movw	r1, #267	; 0x10b
 8006324:	4807      	ldr	r0, [pc, #28]	; (8006344 <prvTaskExitError+0x34>)
 8006326:	f7fd ff50 	bl	80041ca <cmr_panic>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	607b      	str	r3, [r7, #4]
}
 800633c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	for( ;; );
 800633e:	e7fe      	b.n	800633e <prvTaskExitError+0x2e>
 8006340:	200001b0 	.word	0x200001b0
 8006344:	0800d4c8 	.word	0x0800d4c8
	...

08006350 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006350:	4b07      	ldr	r3, [pc, #28]	; (8006370 <pxCurrentTCBConst2>)
 8006352:	6819      	ldr	r1, [r3, #0]
 8006354:	6808      	ldr	r0, [r1, #0]
 8006356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800635a:	f380 8809 	msr	PSP, r0
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f04f 0000 	mov.w	r0, #0
 8006366:	f380 8811 	msr	BASEPRI, r0
 800636a:	4770      	bx	lr
 800636c:	f3af 8000 	nop.w

08006370 <pxCurrentTCBConst2>:
 8006370:	200098c4 	.word	0x200098c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006374:	bf00      	nop
 8006376:	bf00      	nop

08006378 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006378:	4806      	ldr	r0, [pc, #24]	; (8006394 <prvPortStartFirstTask+0x1c>)
 800637a:	6800      	ldr	r0, [r0, #0]
 800637c:	6800      	ldr	r0, [r0, #0]
 800637e:	f380 8808 	msr	MSP, r0
 8006382:	b662      	cpsie	i
 8006384:	b661      	cpsie	f
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	df00      	svc	0
 8006390:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006392:	bf00      	nop
 8006394:	e000ed08 	.word	0xe000ed08

08006398 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800639e:	4b36      	ldr	r3, [pc, #216]	; (8006478 <xPortStartScheduler+0xe0>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a36      	ldr	r2, [pc, #216]	; (800647c <xPortStartScheduler+0xe4>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d104      	bne.n	80063b2 <xPortStartScheduler+0x1a>
 80063a8:	f240 1141 	movw	r1, #321	; 0x141
 80063ac:	4834      	ldr	r0, [pc, #208]	; (8006480 <xPortStartScheduler+0xe8>)
 80063ae:	f7fd ff0c 	bl	80041ca <cmr_panic>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063b2:	4b31      	ldr	r3, [pc, #196]	; (8006478 <xPortStartScheduler+0xe0>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a33      	ldr	r2, [pc, #204]	; (8006484 <xPortStartScheduler+0xec>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d104      	bne.n	80063c6 <xPortStartScheduler+0x2e>
 80063bc:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80063c0:	4831      	ldr	r0, [pc, #196]	; (8006488 <xPortStartScheduler+0xf0>)
 80063c2:	f7fd ff02 	bl	80041ca <cmr_panic>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063c6:	4b31      	ldr	r3, [pc, #196]	; (800648c <xPortStartScheduler+0xf4>)
 80063c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	22ff      	movs	r2, #255	; 0xff
 80063d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063e0:	79fb      	ldrb	r3, [r7, #7]
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	4b29      	ldr	r3, [pc, #164]	; (8006490 <xPortStartScheduler+0xf8>)
 80063ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063ee:	4b29      	ldr	r3, [pc, #164]	; (8006494 <xPortStartScheduler+0xfc>)
 80063f0:	2207      	movs	r2, #7
 80063f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063f4:	e009      	b.n	800640a <xPortStartScheduler+0x72>
		{
			ulMaxPRIGROUPValue--;
 80063f6:	4b27      	ldr	r3, [pc, #156]	; (8006494 <xPortStartScheduler+0xfc>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3b01      	subs	r3, #1
 80063fc:	4a25      	ldr	r2, [pc, #148]	; (8006494 <xPortStartScheduler+0xfc>)
 80063fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006400:	79fb      	ldrb	r3, [r7, #7]
 8006402:	b2db      	uxtb	r3, r3
 8006404:	005b      	lsls	r3, r3, #1
 8006406:	b2db      	uxtb	r3, r3
 8006408:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800640a:	79fb      	ldrb	r3, [r7, #7]
 800640c:	b2db      	uxtb	r3, r3
 800640e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006412:	2b80      	cmp	r3, #128	; 0x80
 8006414:	d0ef      	beq.n	80063f6 <xPortStartScheduler+0x5e>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006416:	4b1f      	ldr	r3, [pc, #124]	; (8006494 <xPortStartScheduler+0xfc>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	4a1d      	ldr	r2, [pc, #116]	; (8006494 <xPortStartScheduler+0xfc>)
 800641e:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006420:	4b1c      	ldr	r3, [pc, #112]	; (8006494 <xPortStartScheduler+0xfc>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006428:	4a1a      	ldr	r2, [pc, #104]	; (8006494 <xPortStartScheduler+0xfc>)
 800642a:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	b2da      	uxtb	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006434:	4b18      	ldr	r3, [pc, #96]	; (8006498 <xPortStartScheduler+0x100>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a17      	ldr	r2, [pc, #92]	; (8006498 <xPortStartScheduler+0x100>)
 800643a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800643e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006440:	4b15      	ldr	r3, [pc, #84]	; (8006498 <xPortStartScheduler+0x100>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a14      	ldr	r2, [pc, #80]	; (8006498 <xPortStartScheduler+0x100>)
 8006446:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800644a:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800644c:	f000 f8ce 	bl	80065ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006450:	4b12      	ldr	r3, [pc, #72]	; (800649c <xPortStartScheduler+0x104>)
 8006452:	2200      	movs	r2, #0
 8006454:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006456:	f000 f8e5 	bl	8006624 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800645a:	4b11      	ldr	r3, [pc, #68]	; (80064a0 <xPortStartScheduler+0x108>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a10      	ldr	r2, [pc, #64]	; (80064a0 <xPortStartScheduler+0x108>)
 8006460:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006464:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006466:	f7ff ff87 	bl	8006378 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800646a:	f7ff ff51 	bl	8006310 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	e000ed00 	.word	0xe000ed00
 800647c:	410fc271 	.word	0x410fc271
 8006480:	0800d534 	.word	0x0800d534
 8006484:	410fc270 	.word	0x410fc270
 8006488:	0800d5a8 	.word	0x0800d5a8
 800648c:	e000e400 	.word	0xe000e400
 8006490:	200099d8 	.word	0x200099d8
 8006494:	200099dc 	.word	0x200099dc
 8006498:	e000ed20 	.word	0xe000ed20
 800649c:	200001b0 	.word	0x200001b0
 80064a0:	e000ef34 	.word	0xe000ef34

080064a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	607b      	str	r3, [r7, #4]
}
 80064bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064be:	4b0b      	ldr	r3, [pc, #44]	; (80064ec <vPortEnterCritical+0x48>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3301      	adds	r3, #1
 80064c4:	4a09      	ldr	r2, [pc, #36]	; (80064ec <vPortEnterCritical+0x48>)
 80064c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064c8:	4b08      	ldr	r3, [pc, #32]	; (80064ec <vPortEnterCritical+0x48>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d109      	bne.n	80064e4 <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064d0:	4b07      	ldr	r3, [pc, #28]	; (80064f0 <vPortEnterCritical+0x4c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d004      	beq.n	80064e4 <vPortEnterCritical+0x40>
 80064da:	f240 11a3 	movw	r1, #419	; 0x1a3
 80064de:	4805      	ldr	r0, [pc, #20]	; (80064f4 <vPortEnterCritical+0x50>)
 80064e0:	f7fd fe73 	bl	80041ca <cmr_panic>
	}
}
 80064e4:	bf00      	nop
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	200001b0 	.word	0x200001b0
 80064f0:	e000ed04 	.word	0xe000ed04
 80064f4:	0800d68c 	.word	0x0800d68c

080064f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064fe:	4b0e      	ldr	r3, [pc, #56]	; (8006538 <vPortExitCritical+0x40>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d104      	bne.n	8006510 <vPortExitCritical+0x18>
 8006506:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800650a:	480c      	ldr	r0, [pc, #48]	; (800653c <vPortExitCritical+0x44>)
 800650c:	f7fd fe5d 	bl	80041ca <cmr_panic>
	uxCriticalNesting--;
 8006510:	4b09      	ldr	r3, [pc, #36]	; (8006538 <vPortExitCritical+0x40>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3b01      	subs	r3, #1
 8006516:	4a08      	ldr	r2, [pc, #32]	; (8006538 <vPortExitCritical+0x40>)
 8006518:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800651a:	4b07      	ldr	r3, [pc, #28]	; (8006538 <vPortExitCritical+0x40>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d105      	bne.n	800652e <vPortExitCritical+0x36>
 8006522:	2300      	movs	r3, #0
 8006524:	607b      	str	r3, [r7, #4]
	__asm volatile
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f383 8811 	msr	BASEPRI, r3
}
 800652c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800652e:	bf00      	nop
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	200001b0 	.word	0x200001b0
 800653c:	0800d714 	.word	0x0800d714

08006540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006540:	f3ef 8009 	mrs	r0, PSP
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	4b15      	ldr	r3, [pc, #84]	; (80065a0 <pxCurrentTCBConst>)
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	f01e 0f10 	tst.w	lr, #16
 8006550:	bf08      	it	eq
 8006552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655a:	6010      	str	r0, [r2, #0]
 800655c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8006560:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006564:	f380 8811 	msr	BASEPRI, r0
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f7ff fbb6 	bl	8005ce0 <vTaskSwitchContext>
 8006574:	f04f 0000 	mov.w	r0, #0
 8006578:	f380 8811 	msr	BASEPRI, r0
 800657c:	bc08      	pop	{r3}
 800657e:	6819      	ldr	r1, [r3, #0]
 8006580:	6808      	ldr	r0, [r1, #0]
 8006582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006586:	f01e 0f10 	tst.w	lr, #16
 800658a:	bf08      	it	eq
 800658c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006590:	f380 8809 	msr	PSP, r0
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	f3af 8000 	nop.w

080065a0 <pxCurrentTCBConst>:
 80065a0:	200098c4 	.word	0x200098c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop

080065a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	607b      	str	r3, [r7, #4]
}
 80065c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065c2:	f7ff fad3 	bl	8005b6c <xTaskIncrementTick>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065cc:	4b06      	ldr	r3, [pc, #24]	; (80065e8 <xPortSysTickHandler+0x40>)
 80065ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	2300      	movs	r3, #0
 80065d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	f383 8811 	msr	BASEPRI, r3
}
 80065de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065e0:	bf00      	nop
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	e000ed04 	.word	0xe000ed04

080065ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065f0:	4b08      	ldr	r3, [pc, #32]	; (8006614 <vPortSetupTimerInterrupt+0x28>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a08      	ldr	r2, [pc, #32]	; (8006618 <vPortSetupTimerInterrupt+0x2c>)
 80065f6:	fba2 2303 	umull	r2, r3, r2, r3
 80065fa:	099b      	lsrs	r3, r3, #6
 80065fc:	4a07      	ldr	r2, [pc, #28]	; (800661c <vPortSetupTimerInterrupt+0x30>)
 80065fe:	3b01      	subs	r3, #1
 8006600:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006602:	4b07      	ldr	r3, [pc, #28]	; (8006620 <vPortSetupTimerInterrupt+0x34>)
 8006604:	2207      	movs	r2, #7
 8006606:	601a      	str	r2, [r3, #0]
}
 8006608:	bf00      	nop
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	200001ac 	.word	0x200001ac
 8006618:	10624dd3 	.word	0x10624dd3
 800661c:	e000e014 	.word	0xe000e014
 8006620:	e000e010 	.word	0xe000e010

08006624 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006624:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006634 <vPortEnableVFP+0x10>
 8006628:	6801      	ldr	r1, [r0, #0]
 800662a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800662e:	6001      	str	r1, [r0, #0]
 8006630:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006632:	bf00      	nop
 8006634:	e000ed88 	.word	0xe000ed88

08006638 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800663e:	f3ef 8305 	mrs	r3, IPSR
 8006642:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b0f      	cmp	r3, #15
 8006648:	d90e      	bls.n	8006668 <vPortValidateInterruptPriority+0x30>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800664a:	4a10      	ldr	r2, [pc, #64]	; (800668c <vPortValidateInterruptPriority+0x54>)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4413      	add	r3, r2
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006654:	4b0e      	ldr	r3, [pc, #56]	; (8006690 <vPortValidateInterruptPriority+0x58>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	78fa      	ldrb	r2, [r7, #3]
 800665a:	429a      	cmp	r2, r3
 800665c:	d204      	bcs.n	8006668 <vPortValidateInterruptPriority+0x30>
 800665e:	f240 21e6 	movw	r1, #742	; 0x2e6
 8006662:	480c      	ldr	r0, [pc, #48]	; (8006694 <vPortValidateInterruptPriority+0x5c>)
 8006664:	f7fd fdb1 	bl	80041ca <cmr_panic>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006668:	4b0b      	ldr	r3, [pc, #44]	; (8006698 <vPortValidateInterruptPriority+0x60>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006670:	4b0a      	ldr	r3, [pc, #40]	; (800669c <vPortValidateInterruptPriority+0x64>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	429a      	cmp	r2, r3
 8006676:	d904      	bls.n	8006682 <vPortValidateInterruptPriority+0x4a>
 8006678:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 800667c:	4808      	ldr	r0, [pc, #32]	; (80066a0 <vPortValidateInterruptPriority+0x68>)
 800667e:	f7fd fda4 	bl	80041ca <cmr_panic>
	}
 8006682:	bf00      	nop
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	e000e3f0 	.word	0xe000e3f0
 8006690:	200099d8 	.word	0x200099d8
 8006694:	0800d778 	.word	0x0800d778
 8006698:	e000ed0c 	.word	0xe000ed0c
 800669c:	200099dc 	.word	0x200099dc
 80066a0:	0800d7f4 	.word	0x0800d7f4

080066a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80066a8:	4b0e      	ldr	r3, [pc, #56]	; (80066e4 <HAL_Init+0x40>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a0d      	ldr	r2, [pc, #52]	; (80066e4 <HAL_Init+0x40>)
 80066ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80066b4:	4b0b      	ldr	r3, [pc, #44]	; (80066e4 <HAL_Init+0x40>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a0a      	ldr	r2, [pc, #40]	; (80066e4 <HAL_Init+0x40>)
 80066ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80066c0:	4b08      	ldr	r3, [pc, #32]	; (80066e4 <HAL_Init+0x40>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a07      	ldr	r2, [pc, #28]	; (80066e4 <HAL_Init+0x40>)
 80066c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80066cc:	2003      	movs	r0, #3
 80066ce:	f001 fb35 	bl	8007d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80066d2:	200f      	movs	r0, #15
 80066d4:	f000 f810 	bl	80066f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80066d8:	f000 f806 	bl	80066e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	40023c00 	.word	0x40023c00

080066e8 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80066e8:	b480      	push	{r7}
 80066ea:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80066ec:	bf00      	nop
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
	...

080066f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006700:	4b12      	ldr	r3, [pc, #72]	; (800674c <HAL_InitTick+0x54>)
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	4b12      	ldr	r3, [pc, #72]	; (8006750 <HAL_InitTick+0x58>)
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	4619      	mov	r1, r3
 800670a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800670e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006712:	fbb2 f3f3 	udiv	r3, r2, r3
 8006716:	4618      	mov	r0, r3
 8006718:	f001 fb45 	bl	8007da6 <HAL_SYSTICK_Config>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e00e      	b.n	8006744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b0f      	cmp	r3, #15
 800672a:	d80a      	bhi.n	8006742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800672c:	2200      	movs	r2, #0
 800672e:	6879      	ldr	r1, [r7, #4]
 8006730:	f04f 30ff 	mov.w	r0, #4294967295
 8006734:	f001 fb0d 	bl	8007d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006738:	4a06      	ldr	r2, [pc, #24]	; (8006754 <HAL_InitTick+0x5c>)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	e000      	b.n	8006744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
}
 8006744:	4618      	mov	r0, r3
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	200001ac 	.word	0x200001ac
 8006750:	200001b8 	.word	0x200001b8
 8006754:	200001b4 	.word	0x200001b4

08006758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006758:	b480      	push	{r7}
 800675a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800675c:	4b06      	ldr	r3, [pc, #24]	; (8006778 <HAL_IncTick+0x20>)
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	461a      	mov	r2, r3
 8006762:	4b06      	ldr	r3, [pc, #24]	; (800677c <HAL_IncTick+0x24>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4413      	add	r3, r2
 8006768:	4a04      	ldr	r2, [pc, #16]	; (800677c <HAL_IncTick+0x24>)
 800676a:	6013      	str	r3, [r2, #0]
}
 800676c:	bf00      	nop
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	200001b8 	.word	0x200001b8
 800677c:	200099e0 	.word	0x200099e0

08006780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006780:	b480      	push	{r7}
 8006782:	af00      	add	r7, sp, #0
  return uwTick;
 8006784:	4b03      	ldr	r3, [pc, #12]	; (8006794 <HAL_GetTick+0x14>)
 8006786:	681b      	ldr	r3, [r3, #0]
}
 8006788:	4618      	mov	r0, r3
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	200099e0 	.word	0x200099e0

08006798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80067a0:	f7ff ffee 	bl	8006780 <HAL_GetTick>
 80067a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b0:	d005      	beq.n	80067be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80067b2:	4b0a      	ldr	r3, [pc, #40]	; (80067dc <HAL_Delay+0x44>)
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4413      	add	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80067be:	bf00      	nop
 80067c0:	f7ff ffde 	bl	8006780 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d8f7      	bhi.n	80067c0 <HAL_Delay+0x28>
  {
  }
}
 80067d0:	bf00      	nop
 80067d2:	bf00      	nop
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	200001b8 	.word	0x200001b8

080067e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e033      	b.n	800685e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d109      	bne.n	8006812 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f831 	bl	8006866 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	f003 0310 	and.w	r3, r3, #16
 800681a:	2b00      	cmp	r3, #0
 800681c:	d118      	bne.n	8006850 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006822:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006826:	f023 0302 	bic.w	r3, r3, #2
 800682a:	f043 0202 	orr.w	r2, r3, #2
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fa8c 	bl	8006d50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	f023 0303 	bic.w	r3, r3, #3
 8006846:	f043 0201 	orr.w	r2, r3, #1
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	641a      	str	r2, [r3, #64]	; 0x40
 800684e:	e001      	b.n	8006854 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800685c:	7bfb      	ldrb	r3, [r7, #15]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 800686e:	bf00      	nop
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
	...

0800687c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800688e:	2b01      	cmp	r3, #1
 8006890:	d101      	bne.n	8006896 <HAL_ADC_Start+0x1a>
 8006892:	2302      	movs	r3, #2
 8006894:	e08a      	b.n	80069ac <HAL_ADC_Start+0x130>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d018      	beq.n	80068de <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689a      	ldr	r2, [r3, #8]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0201 	orr.w	r2, r2, #1
 80068ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80068bc:	4b3e      	ldr	r3, [pc, #248]	; (80069b8 <HAL_ADC_Start+0x13c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a3e      	ldr	r2, [pc, #248]	; (80069bc <HAL_ADC_Start+0x140>)
 80068c2:	fba2 2303 	umull	r2, r3, r2, r3
 80068c6:	0c9a      	lsrs	r2, r3, #18
 80068c8:	4613      	mov	r3, r2
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	4413      	add	r3, r2
 80068ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80068d0:	e002      	b.n	80068d8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	3b01      	subs	r3, #1
 80068d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1f9      	bne.n	80068d2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d15e      	bne.n	80069aa <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80068f4:	f023 0301 	bic.w	r3, r3, #1
 80068f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800690a:	2b00      	cmp	r3, #0
 800690c:	d007      	beq.n	800691e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006916:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800692a:	d106      	bne.n	800693a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006930:	f023 0206 	bic.w	r2, r3, #6
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	645a      	str	r2, [r3, #68]	; 0x44
 8006938:	e002      	b.n	8006940 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006948:	4b1d      	ldr	r3, [pc, #116]	; (80069c0 <HAL_ADC_Start+0x144>)
 800694a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006954:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f003 031f 	and.w	r3, r3, #31
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10f      	bne.n	8006982 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d11c      	bne.n	80069aa <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800697e:	609a      	str	r2, [r3, #8]
 8006980:	e013      	b.n	80069aa <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a0f      	ldr	r2, [pc, #60]	; (80069c4 <HAL_ADC_Start+0x148>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d10e      	bne.n	80069aa <HAL_ADC_Start+0x12e>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d107      	bne.n	80069aa <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689a      	ldr	r2, [r3, #8]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80069a8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	200001ac 	.word	0x200001ac
 80069bc:	431bde83 	.word	0x431bde83
 80069c0:	40012300 	.word	0x40012300
 80069c4:	40012000 	.word	0x40012000

080069c8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069e4:	d113      	bne.n	8006a0e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80069f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069f4:	d10b      	bne.n	8006a0e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	f043 0220 	orr.w	r2, r3, #32
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e05c      	b.n	8006ac8 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006a0e:	f7ff feb7 	bl	8006780 <HAL_GetTick>
 8006a12:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006a14:	e01a      	b.n	8006a4c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1c:	d016      	beq.n	8006a4c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d007      	beq.n	8006a34 <HAL_ADC_PollForConversion+0x6c>
 8006a24:	f7ff feac 	bl	8006780 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d20b      	bcs.n	8006a4c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a38:	f043 0204 	orr.w	r2, r3, #4
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e03d      	b.n	8006ac8 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0302 	and.w	r3, r3, #2
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d1dd      	bne.n	8006a16 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f06f 0212 	mvn.w	r2, #18
 8006a62:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d123      	bne.n	8006ac6 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d11f      	bne.n	8006ac6 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d006      	beq.n	8006aa2 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d111      	bne.n	8006ac6 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d105      	bne.n	8006ac6 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abe:	f043 0201 	orr.w	r2, r3, #1
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
	...

08006aec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d101      	bne.n	8006b08 <HAL_ADC_ConfigChannel+0x1c>
 8006b04:	2302      	movs	r3, #2
 8006b06:	e113      	b.n	8006d30 <HAL_ADC_ConfigChannel+0x244>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b09      	cmp	r3, #9
 8006b16:	d925      	bls.n	8006b64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68d9      	ldr	r1, [r3, #12]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	461a      	mov	r2, r3
 8006b26:	4613      	mov	r3, r2
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	4413      	add	r3, r2
 8006b2c:	3b1e      	subs	r3, #30
 8006b2e:	2207      	movs	r2, #7
 8006b30:	fa02 f303 	lsl.w	r3, r2, r3
 8006b34:	43da      	mvns	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	400a      	ands	r2, r1
 8006b3c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68d9      	ldr	r1, [r3, #12]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	689a      	ldr	r2, [r3, #8]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	4618      	mov	r0, r3
 8006b50:	4603      	mov	r3, r0
 8006b52:	005b      	lsls	r3, r3, #1
 8006b54:	4403      	add	r3, r0
 8006b56:	3b1e      	subs	r3, #30
 8006b58:	409a      	lsls	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	60da      	str	r2, [r3, #12]
 8006b62:	e022      	b.n	8006baa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6919      	ldr	r1, [r3, #16]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	461a      	mov	r2, r3
 8006b72:	4613      	mov	r3, r2
 8006b74:	005b      	lsls	r3, r3, #1
 8006b76:	4413      	add	r3, r2
 8006b78:	2207      	movs	r2, #7
 8006b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7e:	43da      	mvns	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	400a      	ands	r2, r1
 8006b86:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6919      	ldr	r1, [r3, #16]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	689a      	ldr	r2, [r3, #8]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	4618      	mov	r0, r3
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	005b      	lsls	r3, r3, #1
 8006b9e:	4403      	add	r3, r0
 8006ba0:	409a      	lsls	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	2b06      	cmp	r3, #6
 8006bb0:	d824      	bhi.n	8006bfc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	3b05      	subs	r3, #5
 8006bc4:	221f      	movs	r2, #31
 8006bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bca:	43da      	mvns	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	400a      	ands	r2, r1
 8006bd2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	4618      	mov	r0, r3
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	4613      	mov	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	3b05      	subs	r3, #5
 8006bee:	fa00 f203 	lsl.w	r2, r0, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	635a      	str	r2, [r3, #52]	; 0x34
 8006bfa:	e04c      	b.n	8006c96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	2b0c      	cmp	r3, #12
 8006c02:	d824      	bhi.n	8006c4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	3b23      	subs	r3, #35	; 0x23
 8006c16:	221f      	movs	r2, #31
 8006c18:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1c:	43da      	mvns	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	400a      	ands	r2, r1
 8006c24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	4618      	mov	r0, r3
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	3b23      	subs	r3, #35	; 0x23
 8006c40:	fa00 f203 	lsl.w	r2, r0, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	631a      	str	r2, [r3, #48]	; 0x30
 8006c4c:	e023      	b.n	8006c96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	3b41      	subs	r3, #65	; 0x41
 8006c60:	221f      	movs	r2, #31
 8006c62:	fa02 f303 	lsl.w	r3, r2, r3
 8006c66:	43da      	mvns	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	400a      	ands	r2, r1
 8006c6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	4613      	mov	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	3b41      	subs	r3, #65	; 0x41
 8006c8a:	fa00 f203 	lsl.w	r2, r0, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006c96:	4b29      	ldr	r3, [pc, #164]	; (8006d3c <HAL_ADC_ConfigChannel+0x250>)
 8006c98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a28      	ldr	r2, [pc, #160]	; (8006d40 <HAL_ADC_ConfigChannel+0x254>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d10f      	bne.n	8006cc4 <HAL_ADC_ConfigChannel+0x1d8>
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b12      	cmp	r3, #18
 8006caa:	d10b      	bne.n	8006cc4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a1d      	ldr	r2, [pc, #116]	; (8006d40 <HAL_ADC_ConfigChannel+0x254>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d12b      	bne.n	8006d26 <HAL_ADC_ConfigChannel+0x23a>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a1c      	ldr	r2, [pc, #112]	; (8006d44 <HAL_ADC_ConfigChannel+0x258>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d003      	beq.n	8006ce0 <HAL_ADC_ConfigChannel+0x1f4>
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b11      	cmp	r3, #17
 8006cde:	d122      	bne.n	8006d26 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a11      	ldr	r2, [pc, #68]	; (8006d44 <HAL_ADC_ConfigChannel+0x258>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d111      	bne.n	8006d26 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006d02:	4b11      	ldr	r3, [pc, #68]	; (8006d48 <HAL_ADC_ConfigChannel+0x25c>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a11      	ldr	r2, [pc, #68]	; (8006d4c <HAL_ADC_ConfigChannel+0x260>)
 8006d08:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0c:	0c9a      	lsrs	r2, r3, #18
 8006d0e:	4613      	mov	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006d18:	e002      	b.n	8006d20 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1f9      	bne.n	8006d1a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	40012300 	.word	0x40012300
 8006d40:	40012000 	.word	0x40012000
 8006d44:	10000012 	.word	0x10000012
 8006d48:	200001ac 	.word	0x200001ac
 8006d4c:	431bde83 	.word	0x431bde83

08006d50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006d58:	4b79      	ldr	r3, [pc, #484]	; (8006f40 <ADC_Init+0x1f0>)
 8006d5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	431a      	orrs	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6859      	ldr	r1, [r3, #4]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	021a      	lsls	r2, r3, #8
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	685a      	ldr	r2, [r3, #4]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006da8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6859      	ldr	r1, [r3, #4]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	430a      	orrs	r2, r1
 8006dba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689a      	ldr	r2, [r3, #8]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6899      	ldr	r1, [r3, #8]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de2:	4a58      	ldr	r2, [pc, #352]	; (8006f44 <ADC_Init+0x1f4>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d022      	beq.n	8006e2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	689a      	ldr	r2, [r3, #8]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006df6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6899      	ldr	r1, [r3, #8]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006e18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6899      	ldr	r1, [r3, #8]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	609a      	str	r2, [r3, #8]
 8006e2c:	e00f      	b.n	8006e4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689a      	ldr	r2, [r3, #8]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006e3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006e4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	689a      	ldr	r2, [r3, #8]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f022 0202 	bic.w	r2, r2, #2
 8006e5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6899      	ldr	r1, [r3, #8]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	7e1b      	ldrb	r3, [r3, #24]
 8006e68:	005a      	lsls	r2, r3, #1
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d01b      	beq.n	8006eb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006e9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6859      	ldr	r1, [r3, #4]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	035a      	lsls	r2, r3, #13
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	605a      	str	r2, [r3, #4]
 8006eb2:	e007      	b.n	8006ec4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685a      	ldr	r2, [r3, #4]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ec2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	051a      	lsls	r2, r3, #20
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	689a      	ldr	r2, [r3, #8]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006ef8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6899      	ldr	r1, [r3, #8]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f06:	025a      	lsls	r2, r3, #9
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689a      	ldr	r2, [r3, #8]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6899      	ldr	r1, [r3, #8]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	029a      	lsls	r2, r3, #10
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	609a      	str	r2, [r3, #8]
}
 8006f34:	bf00      	nop
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	40012300 	.word	0x40012300
 8006f44:	0f000001 	.word	0x0f000001

08006f48 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e0ed      	b.n	8007136 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d102      	bne.n	8006f6c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f8e9 	bl	800713e <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f022 0202 	bic.w	r2, r2, #2
 8006f7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f7c:	f7ff fc00 	bl	8006780 <HAL_GetTick>
 8006f80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006f82:	e012      	b.n	8006faa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006f84:	f7ff fbfc 	bl	8006780 <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	2b0a      	cmp	r3, #10
 8006f90:	d90b      	bls.n	8006faa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2205      	movs	r2, #5
 8006fa2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e0c5      	b.n	8007136 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f003 0302 	and.w	r3, r3, #2
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e5      	bne.n	8006f84 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f042 0201 	orr.w	r2, r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fc8:	f7ff fbda 	bl	8006780 <HAL_GetTick>
 8006fcc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006fce:	e012      	b.n	8006ff6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006fd0:	f7ff fbd6 	bl	8006780 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	2b0a      	cmp	r3, #10
 8006fdc:	d90b      	bls.n	8006ff6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2205      	movs	r2, #5
 8006fee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e09f      	b.n	8007136 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b00      	cmp	r3, #0
 8007002:	d0e5      	beq.n	8006fd0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	7e1b      	ldrb	r3, [r3, #24]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d108      	bne.n	800701e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800701a:	601a      	str	r2, [r3, #0]
 800701c:	e007      	b.n	800702e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800702c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	7e5b      	ldrb	r3, [r3, #25]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d108      	bne.n	8007048 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007044:	601a      	str	r2, [r3, #0]
 8007046:	e007      	b.n	8007058 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007056:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	7e9b      	ldrb	r3, [r3, #26]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d108      	bne.n	8007072 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f042 0220 	orr.w	r2, r2, #32
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	e007      	b.n	8007082 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f022 0220 	bic.w	r2, r2, #32
 8007080:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	7edb      	ldrb	r3, [r3, #27]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d108      	bne.n	800709c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 0210 	bic.w	r2, r2, #16
 8007098:	601a      	str	r2, [r3, #0]
 800709a:	e007      	b.n	80070ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f042 0210 	orr.w	r2, r2, #16
 80070aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	7f1b      	ldrb	r3, [r3, #28]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d108      	bne.n	80070c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f042 0208 	orr.w	r2, r2, #8
 80070c2:	601a      	str	r2, [r3, #0]
 80070c4:	e007      	b.n	80070d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f022 0208 	bic.w	r2, r2, #8
 80070d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	7f5b      	ldrb	r3, [r3, #29]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d108      	bne.n	80070f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f042 0204 	orr.w	r2, r2, #4
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	e007      	b.n	8007100 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 0204 	bic.w	r2, r2, #4
 80070fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	431a      	orrs	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	431a      	orrs	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	695b      	ldr	r3, [r3, #20]
 8007114:	ea42 0103 	orr.w	r1, r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	1e5a      	subs	r2, r3, #1
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <HAL_CAN_MspInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 800713e:	b480      	push	{r7}
 8007140:	b083      	sub	sp, #12
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_MspInit could be implemented in the user file
   */
}
 8007146:	bf00      	nop
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
	...

08007154 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007154:	b480      	push	{r7}
 8007156:	b087      	sub	sp, #28
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 3020 	ldrb.w	r3, [r3, #32]
 800716a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800716c:	7cfb      	ldrb	r3, [r7, #19]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d003      	beq.n	800717a <HAL_CAN_ConfigFilter+0x26>
 8007172:	7cfb      	ldrb	r3, [r7, #19]
 8007174:	2b02      	cmp	r3, #2
 8007176:	f040 80c7 	bne.w	8007308 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a69      	ldr	r2, [pc, #420]	; (8007324 <HAL_CAN_ConfigFilter+0x1d0>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d001      	beq.n	8007188 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8007184:	4b68      	ldr	r3, [pc, #416]	; (8007328 <HAL_CAN_ConfigFilter+0x1d4>)
 8007186:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800718e:	f043 0201 	orr.w	r2, r3, #1
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	4a63      	ldr	r2, [pc, #396]	; (8007328 <HAL_CAN_ConfigFilter+0x1d4>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d111      	bne.n	80071c4 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80071a6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ba:	021b      	lsls	r3, r3, #8
 80071bc:	431a      	orrs	r2, r3
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	f003 031f 	and.w	r3, r3, #31
 80071cc:	2201      	movs	r2, #1
 80071ce:	fa02 f303 	lsl.w	r3, r2, r3
 80071d2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	43db      	mvns	r3, r3
 80071de:	401a      	ands	r2, r3
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d123      	bne.n	8007236 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	43db      	mvns	r3, r3
 80071f8:	401a      	ands	r2, r3
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007210:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	3248      	adds	r2, #72	; 0x48
 8007216:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800722a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800722c:	6979      	ldr	r1, [r7, #20]
 800722e:	3348      	adds	r3, #72	; 0x48
 8007230:	00db      	lsls	r3, r3, #3
 8007232:	440b      	add	r3, r1
 8007234:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d122      	bne.n	8007284 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	431a      	orrs	r2, r3
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800725e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	3248      	adds	r2, #72	; 0x48
 8007264:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007278:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800727a:	6979      	ldr	r1, [r7, #20]
 800727c:	3348      	adds	r3, #72	; 0x48
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	440b      	add	r3, r1
 8007282:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d109      	bne.n	80072a0 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	43db      	mvns	r3, r3
 8007296:	401a      	ands	r2, r3
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800729e:	e007      	b.n	80072b0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	431a      	orrs	r2, r3
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d109      	bne.n	80072cc <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	43db      	mvns	r3, r3
 80072c2:	401a      	ands	r2, r3
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80072ca:	e007      	b.n	80072dc <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	431a      	orrs	r2, r3
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	6a1b      	ldr	r3, [r3, #32]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d107      	bne.n	80072f4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	431a      	orrs	r2, r3
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80072fa:	f023 0201 	bic.w	r2, r3, #1
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007304:	2300      	movs	r3, #0
 8007306:	e006      	b.n	8007316 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
  }
}
 8007316:	4618      	mov	r0, r3
 8007318:	371c      	adds	r7, #28
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	40006c00 	.word	0x40006c00
 8007328:	40006400 	.word	0x40006400

0800732c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 3020 	ldrb.w	r3, [r3, #32]
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b01      	cmp	r3, #1
 800733e:	d12e      	bne.n	800739e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2202      	movs	r2, #2
 8007344:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f022 0201 	bic.w	r2, r2, #1
 8007356:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007358:	f7ff fa12 	bl	8006780 <HAL_GetTick>
 800735c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800735e:	e012      	b.n	8007386 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007360:	f7ff fa0e 	bl	8006780 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	2b0a      	cmp	r3, #10
 800736c:	d90b      	bls.n	8007386 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007372:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2205      	movs	r2, #5
 800737e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e012      	b.n	80073ac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1e5      	bne.n	8007360 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	e006      	b.n	80073ac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
  }
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b089      	sub	sp, #36	; 0x24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
 80073c0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073c8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80073d2:	7ffb      	ldrb	r3, [r7, #31]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d003      	beq.n	80073e0 <HAL_CAN_AddTxMessage+0x2c>
 80073d8:	7ffb      	ldrb	r3, [r7, #31]
 80073da:	2b02      	cmp	r3, #2
 80073dc:	f040 80b8 	bne.w	8007550 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10a      	bne.n	8007400 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d105      	bne.n	8007400 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 80a0 	beq.w	8007540 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	0e1b      	lsrs	r3, r3, #24
 8007404:	f003 0303 	and.w	r3, r3, #3
 8007408:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2b02      	cmp	r3, #2
 800740e:	d907      	bls.n	8007420 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007414:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e09e      	b.n	800755e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007420:	2201      	movs	r2, #1
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	409a      	lsls	r2, r3
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10d      	bne.n	800744e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800743c:	68f9      	ldr	r1, [r7, #12]
 800743e:	6809      	ldr	r1, [r1, #0]
 8007440:	431a      	orrs	r2, r3
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	3318      	adds	r3, #24
 8007446:	011b      	lsls	r3, r3, #4
 8007448:	440b      	add	r3, r1
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	e00f      	b.n	800746e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007458:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800745e:	68f9      	ldr	r1, [r7, #12]
 8007460:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007462:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	3318      	adds	r3, #24
 8007468:	011b      	lsls	r3, r3, #4
 800746a:	440b      	add	r3, r1
 800746c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6819      	ldr	r1, [r3, #0]
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	691a      	ldr	r2, [r3, #16]
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	3318      	adds	r3, #24
 800747a:	011b      	lsls	r3, r3, #4
 800747c:	440b      	add	r3, r1
 800747e:	3304      	adds	r3, #4
 8007480:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	7d1b      	ldrb	r3, [r3, #20]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d111      	bne.n	80074ae <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	3318      	adds	r3, #24
 8007492:	011b      	lsls	r3, r3, #4
 8007494:	4413      	add	r3, r2
 8007496:	3304      	adds	r3, #4
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	6811      	ldr	r1, [r2, #0]
 800749e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	3318      	adds	r3, #24
 80074a6:	011b      	lsls	r3, r3, #4
 80074a8:	440b      	add	r3, r1
 80074aa:	3304      	adds	r3, #4
 80074ac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	3307      	adds	r3, #7
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	061a      	lsls	r2, r3, #24
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	3306      	adds	r3, #6
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	041b      	lsls	r3, r3, #16
 80074be:	431a      	orrs	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	3305      	adds	r3, #5
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	021b      	lsls	r3, r3, #8
 80074c8:	4313      	orrs	r3, r2
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	3204      	adds	r2, #4
 80074ce:	7812      	ldrb	r2, [r2, #0]
 80074d0:	4610      	mov	r0, r2
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	6811      	ldr	r1, [r2, #0]
 80074d6:	ea43 0200 	orr.w	r2, r3, r0
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	011b      	lsls	r3, r3, #4
 80074de:	440b      	add	r3, r1
 80074e0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80074e4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	3303      	adds	r3, #3
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	061a      	lsls	r2, r3, #24
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	3302      	adds	r3, #2
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	041b      	lsls	r3, r3, #16
 80074f6:	431a      	orrs	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	3301      	adds	r3, #1
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	021b      	lsls	r3, r3, #8
 8007500:	4313      	orrs	r3, r2
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	7812      	ldrb	r2, [r2, #0]
 8007506:	4610      	mov	r0, r2
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	6811      	ldr	r1, [r2, #0]
 800750c:	ea43 0200 	orr.w	r2, r3, r0
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	011b      	lsls	r3, r3, #4
 8007514:	440b      	add	r3, r1
 8007516:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800751a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	3318      	adds	r3, #24
 8007524:	011b      	lsls	r3, r3, #4
 8007526:	4413      	add	r3, r2
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	6811      	ldr	r1, [r2, #0]
 800752e:	f043 0201 	orr.w	r2, r3, #1
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	3318      	adds	r3, #24
 8007536:	011b      	lsls	r3, r3, #4
 8007538:	440b      	add	r3, r1
 800753a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	e00e      	b.n	800755e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007544:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e006      	b.n	800755e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
  }
}
 800755e:	4618      	mov	r0, r3
 8007560:	3724      	adds	r7, #36	; 0x24
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800756a:	b480      	push	{r7}
 800756c:	b087      	sub	sp, #28
 800756e:	af00      	add	r7, sp, #0
 8007570:	60f8      	str	r0, [r7, #12]
 8007572:	60b9      	str	r1, [r7, #8]
 8007574:	607a      	str	r2, [r7, #4]
 8007576:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800757e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007580:	7dfb      	ldrb	r3, [r7, #23]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d003      	beq.n	800758e <HAL_CAN_GetRxMessage+0x24>
 8007586:	7dfb      	ldrb	r3, [r7, #23]
 8007588:	2b02      	cmp	r3, #2
 800758a:	f040 80f4 	bne.w	8007776 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10e      	bne.n	80075b2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	f003 0303 	and.w	r3, r3, #3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d116      	bne.n	80075d0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e0e8      	b.n	8007784 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	f003 0303 	and.w	r3, r3, #3
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d107      	bne.n	80075d0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e0d9      	b.n	8007784 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	331b      	adds	r3, #27
 80075d8:	011b      	lsls	r3, r3, #4
 80075da:	4413      	add	r3, r2
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0204 	and.w	r2, r3, #4
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10c      	bne.n	8007608 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	331b      	adds	r3, #27
 80075f6:	011b      	lsls	r3, r3, #4
 80075f8:	4413      	add	r3, r2
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	0d5b      	lsrs	r3, r3, #21
 80075fe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	e00b      	b.n	8007620 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	331b      	adds	r3, #27
 8007610:	011b      	lsls	r3, r3, #4
 8007612:	4413      	add	r3, r2
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	08db      	lsrs	r3, r3, #3
 8007618:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	331b      	adds	r3, #27
 8007628:	011b      	lsls	r3, r3, #4
 800762a:	4413      	add	r3, r2
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	085b      	lsrs	r3, r3, #1
 8007630:	f003 0201 	and.w	r2, r3, #1
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	331b      	adds	r3, #27
 8007640:	011b      	lsls	r3, r3, #4
 8007642:	4413      	add	r3, r2
 8007644:	3304      	adds	r3, #4
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 020f 	and.w	r2, r3, #15
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	331b      	adds	r3, #27
 8007658:	011b      	lsls	r3, r3, #4
 800765a:	4413      	add	r3, r2
 800765c:	3304      	adds	r3, #4
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	0a1b      	lsrs	r3, r3, #8
 8007662:	b2da      	uxtb	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	331b      	adds	r3, #27
 8007670:	011b      	lsls	r3, r3, #4
 8007672:	4413      	add	r3, r2
 8007674:	3304      	adds	r3, #4
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	0c1b      	lsrs	r3, r3, #16
 800767a:	b29a      	uxth	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	011b      	lsls	r3, r3, #4
 8007688:	4413      	add	r3, r2
 800768a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	b2da      	uxtb	r2, r3
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	011b      	lsls	r3, r3, #4
 800769e:	4413      	add	r3, r2
 80076a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	0a1a      	lsrs	r2, r3, #8
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	3301      	adds	r3, #1
 80076ac:	b2d2      	uxtb	r2, r2
 80076ae:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	011b      	lsls	r3, r3, #4
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	0c1a      	lsrs	r2, r3, #16
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	3302      	adds	r3, #2
 80076c6:	b2d2      	uxtb	r2, r2
 80076c8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	011b      	lsls	r3, r3, #4
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	0e1a      	lsrs	r2, r3, #24
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	3303      	adds	r3, #3
 80076e0:	b2d2      	uxtb	r2, r2
 80076e2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	011b      	lsls	r3, r3, #4
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	3304      	adds	r3, #4
 80076f8:	b2d2      	uxtb	r2, r2
 80076fa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	011b      	lsls	r3, r3, #4
 8007704:	4413      	add	r3, r2
 8007706:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	0a1a      	lsrs	r2, r3, #8
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	3305      	adds	r3, #5
 8007712:	b2d2      	uxtb	r2, r2
 8007714:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	011b      	lsls	r3, r3, #4
 800771e:	4413      	add	r3, r2
 8007720:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	0c1a      	lsrs	r2, r3, #16
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	3306      	adds	r3, #6
 800772c:	b2d2      	uxtb	r2, r2
 800772e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	011b      	lsls	r3, r3, #4
 8007738:	4413      	add	r3, r2
 800773a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	0e1a      	lsrs	r2, r3, #24
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	3307      	adds	r3, #7
 8007746:	b2d2      	uxtb	r2, r2
 8007748:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d108      	bne.n	8007762 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68da      	ldr	r2, [r3, #12]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f042 0220 	orr.w	r2, r2, #32
 800775e:	60da      	str	r2, [r3, #12]
 8007760:	e007      	b.n	8007772 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	691a      	ldr	r2, [r3, #16]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f042 0220 	orr.w	r2, r2, #32
 8007770:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	e006      	b.n	8007784 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
  }
}
 8007784:	4618      	mov	r0, r3
 8007786:	371c      	adds	r7, #28
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077a0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d002      	beq.n	80077ae <HAL_CAN_ActivateNotification+0x1e>
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d109      	bne.n	80077c2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6959      	ldr	r1, [r3, #20]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	683a      	ldr	r2, [r7, #0]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	e006      	b.n	80077d0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
  }
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08a      	sub	sp, #40	; 0x28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80077e4:	2300      	movs	r3, #0
 80077e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d07c      	beq.n	800791c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	f003 0301 	and.w	r3, r3, #1
 8007828:	2b00      	cmp	r3, #0
 800782a:	d023      	beq.n	8007874 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2201      	movs	r2, #1
 8007832:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d003      	beq.n	8007846 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7fb faf2 	bl	8002e28 <HAL_CAN_TxMailbox0CompleteCallback>
 8007844:	e016      	b.n	8007874 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	f003 0304 	and.w	r3, r3, #4
 800784c:	2b00      	cmp	r3, #0
 800784e:	d004      	beq.n	800785a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007856:	627b      	str	r3, [r7, #36]	; 0x24
 8007858:	e00c      	b.n	8007874 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	f003 0308 	and.w	r3, r3, #8
 8007860:	2b00      	cmp	r3, #0
 8007862:	d004      	beq.n	800786e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800786a:	627b      	str	r3, [r7, #36]	; 0x24
 800786c:	e002      	b.n	8007874 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f7fb fae6 	bl	8002e40 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800787a:	2b00      	cmp	r3, #0
 800787c:	d024      	beq.n	80078c8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007886:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800788e:	2b00      	cmp	r3, #0
 8007890:	d003      	beq.n	800789a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7fb fae0 	bl	8002e58 <HAL_CAN_TxMailbox1CompleteCallback>
 8007898:	e016      	b.n	80078c8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d004      	beq.n	80078ae <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80078aa:	627b      	str	r3, [r7, #36]	; 0x24
 80078ac:	e00c      	b.n	80078c8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d004      	beq.n	80078c2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80078b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078be:	627b      	str	r3, [r7, #36]	; 0x24
 80078c0:	e002      	b.n	80078c8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7fb fad4 	bl	8002e70 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d024      	beq.n	800791c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80078da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7fb face 	bl	8002e88 <HAL_CAN_TxMailbox2CompleteCallback>
 80078ec:	e016      	b.n	800791c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d004      	beq.n	8007902 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007900:	e00c      	b.n	800791c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d004      	beq.n	8007916 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007912:	627b      	str	r3, [r7, #36]	; 0x24
 8007914:	e002      	b.n	800791c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7fb fac2 	bl	8002ea0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	f003 0308 	and.w	r3, r3, #8
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00c      	beq.n	8007940 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f003 0310 	and.w	r3, r3, #16
 800792c:	2b00      	cmp	r3, #0
 800792e:	d007      	beq.n	8007940 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007936:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2210      	movs	r2, #16
 800793e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	f003 0304 	and.w	r3, r3, #4
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00b      	beq.n	8007962 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f003 0308 	and.w	r3, r3, #8
 8007950:	2b00      	cmp	r3, #0
 8007952:	d006      	beq.n	8007962 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2208      	movs	r2, #8
 800795a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f8f4 	bl	8007b4a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007962:	6a3b      	ldr	r3, [r7, #32]
 8007964:	f003 0302 	and.w	r3, r3, #2
 8007968:	2b00      	cmp	r3, #0
 800796a:	d009      	beq.n	8007980 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	f003 0303 	and.w	r3, r3, #3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7fb fb83 	bl	8003086 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00c      	beq.n	80079a4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	f003 0310 	and.w	r3, r3, #16
 8007990:	2b00      	cmp	r3, #0
 8007992:	d007      	beq.n	80079a4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007996:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800799a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2210      	movs	r2, #16
 80079a2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	f003 0320 	and.w	r3, r3, #32
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00b      	beq.n	80079c6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f003 0308 	and.w	r3, r3, #8
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d006      	beq.n	80079c6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2208      	movs	r2, #8
 80079be:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f8cc 	bl	8007b5e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	f003 0310 	and.w	r3, r3, #16
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d009      	beq.n	80079e4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	f003 0303 	and.w	r3, r3, #3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d002      	beq.n	80079e4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7fb fb5d 	bl	800309e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00b      	beq.n	8007a06 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	f003 0310 	and.w	r3, r3, #16
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d006      	beq.n	8007a06 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2210      	movs	r2, #16
 80079fe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f8b6 	bl	8007b72 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00b      	beq.n	8007a28 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	f003 0308 	and.w	r3, r3, #8
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d006      	beq.n	8007a28 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2208      	movs	r2, #8
 8007a20:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f8af 	bl	8007b86 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007a28:	6a3b      	ldr	r3, [r7, #32]
 8007a2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d07b      	beq.n	8007b2a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	f003 0304 	and.w	r3, r3, #4
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d072      	beq.n	8007b22 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007a3c:	6a3b      	ldr	r3, [r7, #32]
 8007a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d008      	beq.n	8007a58 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d003      	beq.n	8007a58 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a52:	f043 0301 	orr.w	r3, r3, #1
 8007a56:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d008      	beq.n	8007a74 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d003      	beq.n	8007a74 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	f043 0302 	orr.w	r3, r3, #2
 8007a72:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007a74:	6a3b      	ldr	r3, [r7, #32]
 8007a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d008      	beq.n	8007a90 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d003      	beq.n	8007a90 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	f043 0304 	orr.w	r3, r3, #4
 8007a8e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d043      	beq.n	8007b22 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d03e      	beq.n	8007b22 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007aaa:	2b60      	cmp	r3, #96	; 0x60
 8007aac:	d02b      	beq.n	8007b06 <HAL_CAN_IRQHandler+0x32a>
 8007aae:	2b60      	cmp	r3, #96	; 0x60
 8007ab0:	d82e      	bhi.n	8007b10 <HAL_CAN_IRQHandler+0x334>
 8007ab2:	2b50      	cmp	r3, #80	; 0x50
 8007ab4:	d022      	beq.n	8007afc <HAL_CAN_IRQHandler+0x320>
 8007ab6:	2b50      	cmp	r3, #80	; 0x50
 8007ab8:	d82a      	bhi.n	8007b10 <HAL_CAN_IRQHandler+0x334>
 8007aba:	2b40      	cmp	r3, #64	; 0x40
 8007abc:	d019      	beq.n	8007af2 <HAL_CAN_IRQHandler+0x316>
 8007abe:	2b40      	cmp	r3, #64	; 0x40
 8007ac0:	d826      	bhi.n	8007b10 <HAL_CAN_IRQHandler+0x334>
 8007ac2:	2b30      	cmp	r3, #48	; 0x30
 8007ac4:	d010      	beq.n	8007ae8 <HAL_CAN_IRQHandler+0x30c>
 8007ac6:	2b30      	cmp	r3, #48	; 0x30
 8007ac8:	d822      	bhi.n	8007b10 <HAL_CAN_IRQHandler+0x334>
 8007aca:	2b10      	cmp	r3, #16
 8007acc:	d002      	beq.n	8007ad4 <HAL_CAN_IRQHandler+0x2f8>
 8007ace:	2b20      	cmp	r3, #32
 8007ad0:	d005      	beq.n	8007ade <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007ad2:	e01d      	b.n	8007b10 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	f043 0308 	orr.w	r3, r3, #8
 8007ada:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007adc:	e019      	b.n	8007b12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae0:	f043 0310 	orr.w	r3, r3, #16
 8007ae4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007ae6:	e014      	b.n	8007b12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	f043 0320 	orr.w	r3, r3, #32
 8007aee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007af0:	e00f      	b.n	8007b12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007af8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007afa:	e00a      	b.n	8007b12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007b04:	e005      	b.n	8007b12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007b0e:	e000      	b.n	8007b12 <HAL_CAN_IRQHandler+0x336>
            break;
 8007b10:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	699a      	ldr	r2, [r3, #24]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007b20:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2204      	movs	r2, #4
 8007b28:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d008      	beq.n	8007b42 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	431a      	orrs	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7fb f9bb 	bl	8002eb8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007b42:	bf00      	nop
 8007b44:	3728      	adds	r7, #40	; 0x28
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b083      	sub	sp, #12
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007b52:	bf00      	nop
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b083      	sub	sp, #12
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007b66:	bf00      	nop
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr

08007b72 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007b72:	b480      	push	{r7}
 8007b74:	b083      	sub	sp, #12
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007b7a:	bf00      	nop
 8007b7c:	370c      	adds	r7, #12
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007b86:	b480      	push	{r7}
 8007b88:	b083      	sub	sp, #12
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007b8e:	bf00      	nop
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
	...

08007b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f003 0307 	and.w	r3, r3, #7
 8007baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007bac:	4b0c      	ldr	r3, [pc, #48]	; (8007be0 <__NVIC_SetPriorityGrouping+0x44>)
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007bb8:	4013      	ands	r3, r2
 8007bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007bce:	4a04      	ldr	r2, [pc, #16]	; (8007be0 <__NVIC_SetPriorityGrouping+0x44>)
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	60d3      	str	r3, [r2, #12]
}
 8007bd4:	bf00      	nop
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr
 8007be0:	e000ed00 	.word	0xe000ed00

08007be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007be4:	b480      	push	{r7}
 8007be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007be8:	4b04      	ldr	r3, [pc, #16]	; (8007bfc <__NVIC_GetPriorityGrouping+0x18>)
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	0a1b      	lsrs	r3, r3, #8
 8007bee:	f003 0307 	and.w	r3, r3, #7
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	e000ed00 	.word	0xe000ed00

08007c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	4603      	mov	r3, r0
 8007c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	db0b      	blt.n	8007c2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c12:	79fb      	ldrb	r3, [r7, #7]
 8007c14:	f003 021f 	and.w	r2, r3, #31
 8007c18:	4907      	ldr	r1, [pc, #28]	; (8007c38 <__NVIC_EnableIRQ+0x38>)
 8007c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c1e:	095b      	lsrs	r3, r3, #5
 8007c20:	2001      	movs	r0, #1
 8007c22:	fa00 f202 	lsl.w	r2, r0, r2
 8007c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007c2a:	bf00      	nop
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	e000e100 	.word	0xe000e100

08007c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	4603      	mov	r3, r0
 8007c44:	6039      	str	r1, [r7, #0]
 8007c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	db0a      	blt.n	8007c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	490c      	ldr	r1, [pc, #48]	; (8007c88 <__NVIC_SetPriority+0x4c>)
 8007c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c5a:	0112      	lsls	r2, r2, #4
 8007c5c:	b2d2      	uxtb	r2, r2
 8007c5e:	440b      	add	r3, r1
 8007c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007c64:	e00a      	b.n	8007c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	4908      	ldr	r1, [pc, #32]	; (8007c8c <__NVIC_SetPriority+0x50>)
 8007c6c:	79fb      	ldrb	r3, [r7, #7]
 8007c6e:	f003 030f 	and.w	r3, r3, #15
 8007c72:	3b04      	subs	r3, #4
 8007c74:	0112      	lsls	r2, r2, #4
 8007c76:	b2d2      	uxtb	r2, r2
 8007c78:	440b      	add	r3, r1
 8007c7a:	761a      	strb	r2, [r3, #24]
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	e000e100 	.word	0xe000e100
 8007c8c:	e000ed00 	.word	0xe000ed00

08007c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b089      	sub	sp, #36	; 0x24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f003 0307 	and.w	r3, r3, #7
 8007ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	f1c3 0307 	rsb	r3, r3, #7
 8007caa:	2b04      	cmp	r3, #4
 8007cac:	bf28      	it	cs
 8007cae:	2304      	movcs	r3, #4
 8007cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	3304      	adds	r3, #4
 8007cb6:	2b06      	cmp	r3, #6
 8007cb8:	d902      	bls.n	8007cc0 <NVIC_EncodePriority+0x30>
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	3b03      	subs	r3, #3
 8007cbe:	e000      	b.n	8007cc2 <NVIC_EncodePriority+0x32>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	fa02 f303 	lsl.w	r3, r2, r3
 8007cce:	43da      	mvns	r2, r3
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	401a      	ands	r2, r3
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	fa01 f303 	lsl.w	r3, r1, r3
 8007ce2:	43d9      	mvns	r1, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ce8:	4313      	orrs	r3, r2
         );
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3724      	adds	r7, #36	; 0x24
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
	...

08007cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	3b01      	subs	r3, #1
 8007d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d08:	d301      	bcc.n	8007d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e00f      	b.n	8007d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d0e:	4a0a      	ldr	r2, [pc, #40]	; (8007d38 <SysTick_Config+0x40>)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	3b01      	subs	r3, #1
 8007d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007d16:	210f      	movs	r1, #15
 8007d18:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1c:	f7ff ff8e 	bl	8007c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007d20:	4b05      	ldr	r3, [pc, #20]	; (8007d38 <SysTick_Config+0x40>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007d26:	4b04      	ldr	r3, [pc, #16]	; (8007d38 <SysTick_Config+0x40>)
 8007d28:	2207      	movs	r2, #7
 8007d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	e000e010 	.word	0xe000e010

08007d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff ff29 	bl	8007b9c <__NVIC_SetPriorityGrouping>
}
 8007d4a:	bf00      	nop
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b086      	sub	sp, #24
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	4603      	mov	r3, r0
 8007d5a:	60b9      	str	r1, [r7, #8]
 8007d5c:	607a      	str	r2, [r7, #4]
 8007d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007d60:	2300      	movs	r3, #0
 8007d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007d64:	f7ff ff3e 	bl	8007be4 <__NVIC_GetPriorityGrouping>
 8007d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	68b9      	ldr	r1, [r7, #8]
 8007d6e:	6978      	ldr	r0, [r7, #20]
 8007d70:	f7ff ff8e 	bl	8007c90 <NVIC_EncodePriority>
 8007d74:	4602      	mov	r2, r0
 8007d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7ff ff5d 	bl	8007c3c <__NVIC_SetPriority>
}
 8007d82:	bf00      	nop
 8007d84:	3718      	adds	r7, #24
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	4603      	mov	r3, r0
 8007d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7ff ff31 	bl	8007c00 <__NVIC_EnableIRQ>
}
 8007d9e:	bf00      	nop
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b082      	sub	sp, #8
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f7ff ffa2 	bl	8007cf8 <SysTick_Config>
 8007db4:	4603      	mov	r3, r0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b086      	sub	sp, #24
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	60f8      	str	r0, [r7, #12]
 8007dc6:	60b9      	str	r1, [r7, #8]
 8007dc8:	607a      	str	r2, [r7, #4]
 8007dca:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dd4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d101      	bne.n	8007de4 <HAL_DMA_Start_IT+0x26>
 8007de0:	2302      	movs	r3, #2
 8007de2:	e048      	b.n	8007e76 <HAL_DMA_Start_IT+0xb8>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d137      	bne.n	8007e68 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	68b9      	ldr	r1, [r7, #8]
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 f9f1 	bl	80081f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e16:	223f      	movs	r2, #63	; 0x3f
 8007e18:	409a      	lsls	r2, r3
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f042 0216 	orr.w	r2, r2, #22
 8007e2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	695a      	ldr	r2, [r3, #20]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e3c:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d007      	beq.n	8007e56 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f042 0208 	orr.w	r2, r2, #8
 8007e54:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f042 0201 	orr.w	r2, r2, #1
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	e005      	b.n	8007e74 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007e70:	2302      	movs	r3, #2
 8007e72:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b083      	sub	sp, #12
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d004      	beq.n	8007e9c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2280      	movs	r2, #128	; 0x80
 8007e96:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e00c      	b.n	8007eb6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2205      	movs	r2, #5
 8007ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f022 0201 	bic.w	r2, r2, #1
 8007eb2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
	...

08007ec4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007ed0:	4b8e      	ldr	r3, [pc, #568]	; (800810c <HAL_DMA_IRQHandler+0x248>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a8e      	ldr	r2, [pc, #568]	; (8008110 <HAL_DMA_IRQHandler+0x24c>)
 8007ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eda:	0a9b      	lsrs	r3, r3, #10
 8007edc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eee:	2208      	movs	r2, #8
 8007ef0:	409a      	lsls	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d01a      	beq.n	8007f30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0304 	and.w	r3, r3, #4
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d013      	beq.n	8007f30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f022 0204 	bic.w	r2, r2, #4
 8007f16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f1c:	2208      	movs	r2, #8
 8007f1e:	409a      	lsls	r2, r3
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f28:	f043 0201 	orr.w	r2, r3, #1
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f34:	2201      	movs	r2, #1
 8007f36:	409a      	lsls	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d012      	beq.n	8007f66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00b      	beq.n	8007f66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f52:	2201      	movs	r2, #1
 8007f54:	409a      	lsls	r2, r3
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f5e:	f043 0202 	orr.w	r2, r3, #2
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f6a:	2204      	movs	r2, #4
 8007f6c:	409a      	lsls	r2, r3
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	4013      	ands	r3, r2
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d012      	beq.n	8007f9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0302 	and.w	r3, r3, #2
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00b      	beq.n	8007f9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f88:	2204      	movs	r2, #4
 8007f8a:	409a      	lsls	r2, r3
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f94:	f043 0204 	orr.w	r2, r3, #4
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fa0:	2210      	movs	r2, #16
 8007fa2:	409a      	lsls	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d043      	beq.n	8008034 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 0308 	and.w	r3, r3, #8
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d03c      	beq.n	8008034 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fbe:	2210      	movs	r2, #16
 8007fc0:	409a      	lsls	r2, r3
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d018      	beq.n	8008006 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d108      	bne.n	8007ff4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d024      	beq.n	8008034 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	4798      	blx	r3
 8007ff2:	e01f      	b.n	8008034 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d01b      	beq.n	8008034 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	4798      	blx	r3
 8008004:	e016      	b.n	8008034 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008010:	2b00      	cmp	r3, #0
 8008012:	d107      	bne.n	8008024 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f022 0208 	bic.w	r2, r2, #8
 8008022:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008028:	2b00      	cmp	r3, #0
 800802a:	d003      	beq.n	8008034 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008038:	2220      	movs	r2, #32
 800803a:	409a      	lsls	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	4013      	ands	r3, r2
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 808f 	beq.w	8008164 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0310 	and.w	r3, r3, #16
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 8087 	beq.w	8008164 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800805a:	2220      	movs	r2, #32
 800805c:	409a      	lsls	r2, r3
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b05      	cmp	r3, #5
 800806c:	d136      	bne.n	80080dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f022 0216 	bic.w	r2, r2, #22
 800807c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	695a      	ldr	r2, [r3, #20]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800808c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008092:	2b00      	cmp	r3, #0
 8008094:	d103      	bne.n	800809e <HAL_DMA_IRQHandler+0x1da>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800809a:	2b00      	cmp	r3, #0
 800809c:	d007      	beq.n	80080ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f022 0208 	bic.w	r2, r2, #8
 80080ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b2:	223f      	movs	r2, #63	; 0x3f
 80080b4:	409a      	lsls	r2, r3
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2201      	movs	r2, #1
 80080c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d07e      	beq.n	80081d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	4798      	blx	r3
        }
        return;
 80080da:	e079      	b.n	80081d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d01d      	beq.n	8008126 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d10d      	bne.n	8008114 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d031      	beq.n	8008164 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	4798      	blx	r3
 8008108:	e02c      	b.n	8008164 <HAL_DMA_IRQHandler+0x2a0>
 800810a:	bf00      	nop
 800810c:	200001ac 	.word	0x200001ac
 8008110:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008118:	2b00      	cmp	r3, #0
 800811a:	d023      	beq.n	8008164 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	4798      	blx	r3
 8008124:	e01e      	b.n	8008164 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10f      	bne.n	8008154 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f022 0210 	bic.w	r2, r2, #16
 8008142:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008158:	2b00      	cmp	r3, #0
 800815a:	d003      	beq.n	8008164 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008168:	2b00      	cmp	r3, #0
 800816a:	d032      	beq.n	80081d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008170:	f003 0301 	and.w	r3, r3, #1
 8008174:	2b00      	cmp	r3, #0
 8008176:	d022      	beq.n	80081be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2205      	movs	r2, #5
 800817c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f022 0201 	bic.w	r2, r2, #1
 800818e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	3301      	adds	r3, #1
 8008194:	60bb      	str	r3, [r7, #8]
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	429a      	cmp	r2, r3
 800819a:	d307      	bcc.n	80081ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1f2      	bne.n	8008190 <HAL_DMA_IRQHandler+0x2cc>
 80081aa:	e000      	b.n	80081ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80081ac:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2201      	movs	r2, #1
 80081ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d005      	beq.n	80081d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	4798      	blx	r3
 80081ce:	e000      	b.n	80081d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80081d0:	bf00      	nop
    }
  }
}
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081e6:	b2db      	uxtb	r3, r3
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
 8008200:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008210:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	2b40      	cmp	r3, #64	; 0x40
 8008220:	d108      	bne.n	8008234 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008232:	e007      	b.n	8008244 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	60da      	str	r2, [r3, #12]
}
 8008244:	bf00      	nop
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008250:	b480      	push	{r7}
 8008252:	b089      	sub	sp, #36	; 0x24
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800825a:	2300      	movs	r3, #0
 800825c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800825e:	2300      	movs	r3, #0
 8008260:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008262:	2300      	movs	r3, #0
 8008264:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008266:	2300      	movs	r3, #0
 8008268:	61fb      	str	r3, [r7, #28]
 800826a:	e165      	b.n	8008538 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800826c:	2201      	movs	r2, #1
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	fa02 f303 	lsl.w	r3, r2, r3
 8008274:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	4013      	ands	r3, r2
 800827e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	429a      	cmp	r2, r3
 8008286:	f040 8154 	bne.w	8008532 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	2b02      	cmp	r3, #2
 8008290:	d003      	beq.n	800829a <HAL_GPIO_Init+0x4a>
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	2b12      	cmp	r3, #18
 8008298:	d123      	bne.n	80082e2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	08da      	lsrs	r2, r3, #3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	3208      	adds	r2, #8
 80082a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	f003 0307 	and.w	r3, r3, #7
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	220f      	movs	r2, #15
 80082b2:	fa02 f303 	lsl.w	r3, r2, r3
 80082b6:	43db      	mvns	r3, r3
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	4013      	ands	r3, r2
 80082bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	691a      	ldr	r2, [r3, #16]
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	f003 0307 	and.w	r3, r3, #7
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	fa02 f303 	lsl.w	r3, r2, r3
 80082ce:	69ba      	ldr	r2, [r7, #24]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	08da      	lsrs	r2, r3, #3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	3208      	adds	r2, #8
 80082dc:	69b9      	ldr	r1, [r7, #24]
 80082de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	005b      	lsls	r3, r3, #1
 80082ec:	2203      	movs	r2, #3
 80082ee:	fa02 f303 	lsl.w	r3, r2, r3
 80082f2:	43db      	mvns	r3, r3
 80082f4:	69ba      	ldr	r2, [r7, #24]
 80082f6:	4013      	ands	r3, r2
 80082f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f003 0203 	and.w	r2, r3, #3
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	005b      	lsls	r3, r3, #1
 8008306:	fa02 f303 	lsl.w	r3, r2, r3
 800830a:	69ba      	ldr	r2, [r7, #24]
 800830c:	4313      	orrs	r3, r2
 800830e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d00b      	beq.n	8008336 <HAL_GPIO_Init+0xe6>
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	2b02      	cmp	r3, #2
 8008324:	d007      	beq.n	8008336 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800832a:	2b11      	cmp	r3, #17
 800832c:	d003      	beq.n	8008336 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	2b12      	cmp	r3, #18
 8008334:	d130      	bne.n	8008398 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	005b      	lsls	r3, r3, #1
 8008340:	2203      	movs	r2, #3
 8008342:	fa02 f303 	lsl.w	r3, r2, r3
 8008346:	43db      	mvns	r3, r3
 8008348:	69ba      	ldr	r2, [r7, #24]
 800834a:	4013      	ands	r3, r2
 800834c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	68da      	ldr	r2, [r3, #12]
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	005b      	lsls	r3, r3, #1
 8008356:	fa02 f303 	lsl.w	r3, r2, r3
 800835a:	69ba      	ldr	r2, [r7, #24]
 800835c:	4313      	orrs	r3, r2
 800835e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	69ba      	ldr	r2, [r7, #24]
 8008364:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800836c:	2201      	movs	r2, #1
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	fa02 f303 	lsl.w	r3, r2, r3
 8008374:	43db      	mvns	r3, r3
 8008376:	69ba      	ldr	r2, [r7, #24]
 8008378:	4013      	ands	r3, r2
 800837a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	091b      	lsrs	r3, r3, #4
 8008382:	f003 0201 	and.w	r2, r3, #1
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	fa02 f303 	lsl.w	r3, r2, r3
 800838c:	69ba      	ldr	r2, [r7, #24]
 800838e:	4313      	orrs	r3, r2
 8008390:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	69ba      	ldr	r2, [r7, #24]
 8008396:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	005b      	lsls	r3, r3, #1
 80083a2:	2203      	movs	r2, #3
 80083a4:	fa02 f303 	lsl.w	r3, r2, r3
 80083a8:	43db      	mvns	r3, r3
 80083aa:	69ba      	ldr	r2, [r7, #24]
 80083ac:	4013      	ands	r3, r2
 80083ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	689a      	ldr	r2, [r3, #8]
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	005b      	lsls	r3, r3, #1
 80083b8:	fa02 f303 	lsl.w	r3, r2, r3
 80083bc:	69ba      	ldr	r2, [r7, #24]
 80083be:	4313      	orrs	r3, r2
 80083c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	69ba      	ldr	r2, [r7, #24]
 80083c6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 80ae 	beq.w	8008532 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083d6:	2300      	movs	r3, #0
 80083d8:	60fb      	str	r3, [r7, #12]
 80083da:	4b5d      	ldr	r3, [pc, #372]	; (8008550 <HAL_GPIO_Init+0x300>)
 80083dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083de:	4a5c      	ldr	r2, [pc, #368]	; (8008550 <HAL_GPIO_Init+0x300>)
 80083e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083e4:	6453      	str	r3, [r2, #68]	; 0x44
 80083e6:	4b5a      	ldr	r3, [pc, #360]	; (8008550 <HAL_GPIO_Init+0x300>)
 80083e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083ee:	60fb      	str	r3, [r7, #12]
 80083f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80083f2:	4a58      	ldr	r2, [pc, #352]	; (8008554 <HAL_GPIO_Init+0x304>)
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	089b      	lsrs	r3, r3, #2
 80083f8:	3302      	adds	r3, #2
 80083fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	f003 0303 	and.w	r3, r3, #3
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	220f      	movs	r2, #15
 800840a:	fa02 f303 	lsl.w	r3, r2, r3
 800840e:	43db      	mvns	r3, r3
 8008410:	69ba      	ldr	r2, [r7, #24]
 8008412:	4013      	ands	r3, r2
 8008414:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a4f      	ldr	r2, [pc, #316]	; (8008558 <HAL_GPIO_Init+0x308>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d025      	beq.n	800846a <HAL_GPIO_Init+0x21a>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a4e      	ldr	r2, [pc, #312]	; (800855c <HAL_GPIO_Init+0x30c>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d01f      	beq.n	8008466 <HAL_GPIO_Init+0x216>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a4d      	ldr	r2, [pc, #308]	; (8008560 <HAL_GPIO_Init+0x310>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d019      	beq.n	8008462 <HAL_GPIO_Init+0x212>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a4c      	ldr	r2, [pc, #304]	; (8008564 <HAL_GPIO_Init+0x314>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d013      	beq.n	800845e <HAL_GPIO_Init+0x20e>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a4b      	ldr	r2, [pc, #300]	; (8008568 <HAL_GPIO_Init+0x318>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d00d      	beq.n	800845a <HAL_GPIO_Init+0x20a>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a4a      	ldr	r2, [pc, #296]	; (800856c <HAL_GPIO_Init+0x31c>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d007      	beq.n	8008456 <HAL_GPIO_Init+0x206>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a49      	ldr	r2, [pc, #292]	; (8008570 <HAL_GPIO_Init+0x320>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d101      	bne.n	8008452 <HAL_GPIO_Init+0x202>
 800844e:	2306      	movs	r3, #6
 8008450:	e00c      	b.n	800846c <HAL_GPIO_Init+0x21c>
 8008452:	2307      	movs	r3, #7
 8008454:	e00a      	b.n	800846c <HAL_GPIO_Init+0x21c>
 8008456:	2305      	movs	r3, #5
 8008458:	e008      	b.n	800846c <HAL_GPIO_Init+0x21c>
 800845a:	2304      	movs	r3, #4
 800845c:	e006      	b.n	800846c <HAL_GPIO_Init+0x21c>
 800845e:	2303      	movs	r3, #3
 8008460:	e004      	b.n	800846c <HAL_GPIO_Init+0x21c>
 8008462:	2302      	movs	r3, #2
 8008464:	e002      	b.n	800846c <HAL_GPIO_Init+0x21c>
 8008466:	2301      	movs	r3, #1
 8008468:	e000      	b.n	800846c <HAL_GPIO_Init+0x21c>
 800846a:	2300      	movs	r3, #0
 800846c:	69fa      	ldr	r2, [r7, #28]
 800846e:	f002 0203 	and.w	r2, r2, #3
 8008472:	0092      	lsls	r2, r2, #2
 8008474:	4093      	lsls	r3, r2
 8008476:	69ba      	ldr	r2, [r7, #24]
 8008478:	4313      	orrs	r3, r2
 800847a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800847c:	4935      	ldr	r1, [pc, #212]	; (8008554 <HAL_GPIO_Init+0x304>)
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	089b      	lsrs	r3, r3, #2
 8008482:	3302      	adds	r3, #2
 8008484:	69ba      	ldr	r2, [r7, #24]
 8008486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800848a:	4b3a      	ldr	r3, [pc, #232]	; (8008574 <HAL_GPIO_Init+0x324>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	43db      	mvns	r3, r3
 8008494:	69ba      	ldr	r2, [r7, #24]
 8008496:	4013      	ands	r3, r2
 8008498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d003      	beq.n	80084ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80084a6:	69ba      	ldr	r2, [r7, #24]
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80084ae:	4a31      	ldr	r2, [pc, #196]	; (8008574 <HAL_GPIO_Init+0x324>)
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80084b4:	4b2f      	ldr	r3, [pc, #188]	; (8008574 <HAL_GPIO_Init+0x324>)
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	43db      	mvns	r3, r3
 80084be:	69ba      	ldr	r2, [r7, #24]
 80084c0:	4013      	ands	r3, r2
 80084c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d003      	beq.n	80084d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80084d0:	69ba      	ldr	r2, [r7, #24]
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80084d8:	4a26      	ldr	r2, [pc, #152]	; (8008574 <HAL_GPIO_Init+0x324>)
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80084de:	4b25      	ldr	r3, [pc, #148]	; (8008574 <HAL_GPIO_Init+0x324>)
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	43db      	mvns	r3, r3
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	4013      	ands	r3, r2
 80084ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d003      	beq.n	8008502 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80084fa:	69ba      	ldr	r2, [r7, #24]
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	4313      	orrs	r3, r2
 8008500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008502:	4a1c      	ldr	r2, [pc, #112]	; (8008574 <HAL_GPIO_Init+0x324>)
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008508:	4b1a      	ldr	r3, [pc, #104]	; (8008574 <HAL_GPIO_Init+0x324>)
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	43db      	mvns	r3, r3
 8008512:	69ba      	ldr	r2, [r7, #24]
 8008514:	4013      	ands	r3, r2
 8008516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008520:	2b00      	cmp	r3, #0
 8008522:	d003      	beq.n	800852c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008524:	69ba      	ldr	r2, [r7, #24]
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	4313      	orrs	r3, r2
 800852a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800852c:	4a11      	ldr	r2, [pc, #68]	; (8008574 <HAL_GPIO_Init+0x324>)
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	3301      	adds	r3, #1
 8008536:	61fb      	str	r3, [r7, #28]
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	2b0f      	cmp	r3, #15
 800853c:	f67f ae96 	bls.w	800826c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008540:	bf00      	nop
 8008542:	bf00      	nop
 8008544:	3724      	adds	r7, #36	; 0x24
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	40023800 	.word	0x40023800
 8008554:	40013800 	.word	0x40013800
 8008558:	40020000 	.word	0x40020000
 800855c:	40020400 	.word	0x40020400
 8008560:	40020800 	.word	0x40020800
 8008564:	40020c00 	.word	0x40020c00
 8008568:	40021000 	.word	0x40021000
 800856c:	40021400 	.word	0x40021400
 8008570:	40021800 	.word	0x40021800
 8008574:	40013c00 	.word	0x40013c00

08008578 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	460b      	mov	r3, r1
 8008582:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	691a      	ldr	r2, [r3, #16]
 8008588:	887b      	ldrh	r3, [r7, #2]
 800858a:	4013      	ands	r3, r2
 800858c:	2b00      	cmp	r3, #0
 800858e:	d002      	beq.n	8008596 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008590:	2301      	movs	r3, #1
 8008592:	73fb      	strb	r3, [r7, #15]
 8008594:	e001      	b.n	800859a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008596:	2300      	movs	r3, #0
 8008598:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800859a:	7bfb      	ldrb	r3, [r7, #15]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	460b      	mov	r3, r1
 80085b2:	807b      	strh	r3, [r7, #2]
 80085b4:	4613      	mov	r3, r2
 80085b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80085b8:	787b      	ldrb	r3, [r7, #1]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d003      	beq.n	80085c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80085be:	887a      	ldrh	r2, [r7, #2]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80085c4:	e003      	b.n	80085ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80085c6:	887b      	ldrh	r3, [r7, #2]
 80085c8:	041a      	lsls	r2, r3, #16
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	619a      	str	r2, [r3, #24]
}
 80085ce:	bf00      	nop
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80085da:	b480      	push	{r7}
 80085dc:	b083      	sub	sp, #12
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	460b      	mov	r3, r1
 80085e4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	695a      	ldr	r2, [r3, #20]
 80085ea:	887b      	ldrh	r3, [r7, #2]
 80085ec:	401a      	ands	r2, r3
 80085ee:	887b      	ldrh	r3, [r7, #2]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d104      	bne.n	80085fe <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80085f4:	887b      	ldrh	r3, [r7, #2]
 80085f6:	041a      	lsls	r2, r3, #16
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80085fc:	e002      	b.n	8008604 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80085fe:	887a      	ldrh	r2, [r7, #2]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	619a      	str	r2, [r3, #24]
}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	4603      	mov	r3, r0
 8008618:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800861a:	4b08      	ldr	r3, [pc, #32]	; (800863c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800861c:	695a      	ldr	r2, [r3, #20]
 800861e:	88fb      	ldrh	r3, [r7, #6]
 8008620:	4013      	ands	r3, r2
 8008622:	2b00      	cmp	r3, #0
 8008624:	d006      	beq.n	8008634 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008626:	4a05      	ldr	r2, [pc, #20]	; (800863c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008628:	88fb      	ldrh	r3, [r7, #6]
 800862a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800862c:	88fb      	ldrh	r3, [r7, #6]
 800862e:	4618      	mov	r0, r3
 8008630:	f000 f806 	bl	8008640 <HAL_GPIO_EXTI_Callback>
  }
}
 8008634:	bf00      	nop
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	40013c00 	.word	0x40013c00

08008640 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	4603      	mov	r3, r0
 8008648:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800864a:	bf00      	nop
 800864c:	370c      	adds	r7, #12
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
	...

08008658 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d101      	bne.n	800866a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e11b      	b.n	80088a2 <HAL_I2C_Init+0x24a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b00      	cmp	r3, #0
 8008674:	d106      	bne.n	8008684 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f91e 	bl	80088c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2224      	movs	r2, #36	; 0x24
 8008688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f022 0201 	bic.w	r2, r2, #1
 800869a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800869c:	f002 fb9e 	bl	800addc <HAL_RCC_GetPCLK1Freq>
 80086a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	4a81      	ldr	r2, [pc, #516]	; (80088ac <HAL_I2C_Init+0x254>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d807      	bhi.n	80086bc <HAL_I2C_Init+0x64>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	4a80      	ldr	r2, [pc, #512]	; (80088b0 <HAL_I2C_Init+0x258>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	bf94      	ite	ls
 80086b4:	2301      	movls	r3, #1
 80086b6:	2300      	movhi	r3, #0
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	e006      	b.n	80086ca <HAL_I2C_Init+0x72>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4a7d      	ldr	r2, [pc, #500]	; (80088b4 <HAL_I2C_Init+0x25c>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	bf94      	ite	ls
 80086c4:	2301      	movls	r3, #1
 80086c6:	2300      	movhi	r3, #0
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d001      	beq.n	80086d2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e0e7      	b.n	80088a2 <HAL_I2C_Init+0x24a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	4a78      	ldr	r2, [pc, #480]	; (80088b8 <HAL_I2C_Init+0x260>)
 80086d6:	fba2 2303 	umull	r2, r3, r2, r3
 80086da:	0c9b      	lsrs	r3, r3, #18
 80086dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	430a      	orrs	r2, r1
 80086f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6a1b      	ldr	r3, [r3, #32]
 80086f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	4a6a      	ldr	r2, [pc, #424]	; (80088ac <HAL_I2C_Init+0x254>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d802      	bhi.n	800870c <HAL_I2C_Init+0xb4>
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	3301      	adds	r3, #1
 800870a:	e009      	b.n	8008720 <HAL_I2C_Init+0xc8>
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008712:	fb02 f303 	mul.w	r3, r2, r3
 8008716:	4a69      	ldr	r2, [pc, #420]	; (80088bc <HAL_I2C_Init+0x264>)
 8008718:	fba2 2303 	umull	r2, r3, r2, r3
 800871c:	099b      	lsrs	r3, r3, #6
 800871e:	3301      	adds	r3, #1
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	6812      	ldr	r2, [r2, #0]
 8008724:	430b      	orrs	r3, r1
 8008726:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	69db      	ldr	r3, [r3, #28]
 800872e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008732:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	495c      	ldr	r1, [pc, #368]	; (80088ac <HAL_I2C_Init+0x254>)
 800873c:	428b      	cmp	r3, r1
 800873e:	d819      	bhi.n	8008774 <HAL_I2C_Init+0x11c>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	1e59      	subs	r1, r3, #1
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	005b      	lsls	r3, r3, #1
 800874a:	fbb1 f3f3 	udiv	r3, r1, r3
 800874e:	1c59      	adds	r1, r3, #1
 8008750:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008754:	400b      	ands	r3, r1
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00a      	beq.n	8008770 <HAL_I2C_Init+0x118>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	1e59      	subs	r1, r3, #1
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	005b      	lsls	r3, r3, #1
 8008764:	fbb1 f3f3 	udiv	r3, r1, r3
 8008768:	3301      	adds	r3, #1
 800876a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800876e:	e051      	b.n	8008814 <HAL_I2C_Init+0x1bc>
 8008770:	2304      	movs	r3, #4
 8008772:	e04f      	b.n	8008814 <HAL_I2C_Init+0x1bc>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d111      	bne.n	80087a0 <HAL_I2C_Init+0x148>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	1e58      	subs	r0, r3, #1
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6859      	ldr	r1, [r3, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	005b      	lsls	r3, r3, #1
 8008788:	440b      	add	r3, r1
 800878a:	fbb0 f3f3 	udiv	r3, r0, r3
 800878e:	3301      	adds	r3, #1
 8008790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008794:	2b00      	cmp	r3, #0
 8008796:	bf0c      	ite	eq
 8008798:	2301      	moveq	r3, #1
 800879a:	2300      	movne	r3, #0
 800879c:	b2db      	uxtb	r3, r3
 800879e:	e012      	b.n	80087c6 <HAL_I2C_Init+0x16e>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	1e58      	subs	r0, r3, #1
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6859      	ldr	r1, [r3, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	440b      	add	r3, r1
 80087ae:	0099      	lsls	r1, r3, #2
 80087b0:	440b      	add	r3, r1
 80087b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80087b6:	3301      	adds	r3, #1
 80087b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087bc:	2b00      	cmp	r3, #0
 80087be:	bf0c      	ite	eq
 80087c0:	2301      	moveq	r3, #1
 80087c2:	2300      	movne	r3, #0
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <HAL_I2C_Init+0x176>
 80087ca:	2301      	movs	r3, #1
 80087cc:	e022      	b.n	8008814 <HAL_I2C_Init+0x1bc>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10e      	bne.n	80087f4 <HAL_I2C_Init+0x19c>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	1e58      	subs	r0, r3, #1
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6859      	ldr	r1, [r3, #4]
 80087de:	460b      	mov	r3, r1
 80087e0:	005b      	lsls	r3, r3, #1
 80087e2:	440b      	add	r3, r1
 80087e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80087e8:	3301      	adds	r3, #1
 80087ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087f2:	e00f      	b.n	8008814 <HAL_I2C_Init+0x1bc>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	1e58      	subs	r0, r3, #1
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6859      	ldr	r1, [r3, #4]
 80087fc:	460b      	mov	r3, r1
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	440b      	add	r3, r1
 8008802:	0099      	lsls	r1, r3, #2
 8008804:	440b      	add	r3, r1
 8008806:	fbb0 f3f3 	udiv	r3, r0, r3
 800880a:	3301      	adds	r3, #1
 800880c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008810:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008814:	6879      	ldr	r1, [r7, #4]
 8008816:	6809      	ldr	r1, [r1, #0]
 8008818:	4313      	orrs	r3, r2
 800881a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	69da      	ldr	r2, [r3, #28]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	431a      	orrs	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	430a      	orrs	r2, r1
 8008836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008842:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	6911      	ldr	r1, [r2, #16]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	68d2      	ldr	r2, [r2, #12]
 800884e:	4311      	orrs	r1, r2
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	6812      	ldr	r2, [r2, #0]
 8008854:	430b      	orrs	r3, r1
 8008856:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	695a      	ldr	r2, [r3, #20]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	431a      	orrs	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	430a      	orrs	r2, r1
 8008872:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f042 0201 	orr.w	r2, r2, #1
 8008882:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2220      	movs	r2, #32
 800888e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	000186a0 	.word	0x000186a0
 80088b0:	001e847f 	.word	0x001e847f
 80088b4:	003d08ff 	.word	0x003d08ff
 80088b8:	431bde83 	.word	0x431bde83
 80088bc:	10624dd3 	.word	0x10624dd3

080088c0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b088      	sub	sp, #32
 80088d8:	af02      	add	r7, sp, #8
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	607a      	str	r2, [r7, #4]
 80088de:	461a      	mov	r2, r3
 80088e0:	460b      	mov	r3, r1
 80088e2:	817b      	strh	r3, [r7, #10]
 80088e4:	4613      	mov	r3, r2
 80088e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80088e8:	f7fd ff4a 	bl	8006780 <HAL_GetTick>
 80088ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b20      	cmp	r3, #32
 80088f8:	f040 80e0 	bne.w	8008abc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	9300      	str	r3, [sp, #0]
 8008900:	2319      	movs	r3, #25
 8008902:	2201      	movs	r2, #1
 8008904:	4970      	ldr	r1, [pc, #448]	; (8008ac8 <HAL_I2C_Master_Transmit+0x1f4>)
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f001 febb 	bl	800a682 <I2C_WaitOnFlagUntilTimeout>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d001      	beq.n	8008916 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008912:	2302      	movs	r3, #2
 8008914:	e0d3      	b.n	8008abe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800891c:	2b01      	cmp	r3, #1
 800891e:	d101      	bne.n	8008924 <HAL_I2C_Master_Transmit+0x50>
 8008920:	2302      	movs	r3, #2
 8008922:	e0cc      	b.n	8008abe <HAL_I2C_Master_Transmit+0x1ea>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b01      	cmp	r3, #1
 8008938:	d007      	beq.n	800894a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f042 0201 	orr.w	r2, r2, #1
 8008948:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008958:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2221      	movs	r2, #33	; 0x21
 800895e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2210      	movs	r2, #16
 8008966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	893a      	ldrh	r2, [r7, #8]
 800897a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008980:	b29a      	uxth	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	4a50      	ldr	r2, [pc, #320]	; (8008acc <HAL_I2C_Master_Transmit+0x1f8>)
 800898a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800898c:	8979      	ldrh	r1, [r7, #10]
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	6a3a      	ldr	r2, [r7, #32]
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	f001 fcda 	bl	800a34c <I2C_MasterRequestWrite>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e08d      	b.n	8008abe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089a2:	2300      	movs	r3, #0
 80089a4:	613b      	str	r3, [r7, #16]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	695b      	ldr	r3, [r3, #20]
 80089ac:	613b      	str	r3, [r7, #16]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	613b      	str	r3, [r7, #16]
 80089b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80089b8:	e066      	b.n	8008a88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	6a39      	ldr	r1, [r7, #32]
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f001 ff35 	bl	800a82e <I2C_WaitOnTXEFlagUntilTimeout>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00d      	beq.n	80089e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ce:	2b04      	cmp	r3, #4
 80089d0:	d107      	bne.n	80089e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e06b      	b.n	8008abe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	781a      	ldrb	r2, [r3, #0]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f6:	1c5a      	adds	r2, r3, #1
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	3b01      	subs	r3, #1
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	695b      	ldr	r3, [r3, #20]
 8008a1c:	f003 0304 	and.w	r3, r3, #4
 8008a20:	2b04      	cmp	r3, #4
 8008a22:	d11b      	bne.n	8008a5c <HAL_I2C_Master_Transmit+0x188>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d017      	beq.n	8008a5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a30:	781a      	ldrb	r2, [r3, #0]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3c:	1c5a      	adds	r2, r3, #1
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a54:	3b01      	subs	r3, #1
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	6a39      	ldr	r1, [r7, #32]
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f001 ff25 	bl	800a8b0 <I2C_WaitOnBTFFlagUntilTimeout>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00d      	beq.n	8008a88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a70:	2b04      	cmp	r3, #4
 8008a72:	d107      	bne.n	8008a84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e01a      	b.n	8008abe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d194      	bne.n	80089ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2220      	movs	r2, #32
 8008aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	e000      	b.n	8008abe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008abc:	2302      	movs	r3, #2
  }
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3718      	adds	r7, #24
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	00100002 	.word	0x00100002
 8008acc:	ffff0000 	.word	0xffff0000

08008ad0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b08c      	sub	sp, #48	; 0x30
 8008ad4:	af02      	add	r7, sp, #8
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	607a      	str	r2, [r7, #4]
 8008ada:	461a      	mov	r2, r3
 8008adc:	460b      	mov	r3, r1
 8008ade:	817b      	strh	r3, [r7, #10]
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008ae4:	f7fd fe4c 	bl	8006780 <HAL_GetTick>
 8008ae8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	2b20      	cmp	r3, #32
 8008af4:	f040 820b 	bne.w	8008f0e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afa:	9300      	str	r3, [sp, #0]
 8008afc:	2319      	movs	r3, #25
 8008afe:	2201      	movs	r2, #1
 8008b00:	497c      	ldr	r1, [pc, #496]	; (8008cf4 <HAL_I2C_Master_Receive+0x224>)
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f001 fdbd 	bl	800a682 <I2C_WaitOnFlagUntilTimeout>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008b0e:	2302      	movs	r3, #2
 8008b10:	e1fe      	b.n	8008f10 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d101      	bne.n	8008b20 <HAL_I2C_Master_Receive+0x50>
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	e1f7      	b.n	8008f10 <HAL_I2C_Master_Receive+0x440>
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 0301 	and.w	r3, r3, #1
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d007      	beq.n	8008b46 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f042 0201 	orr.w	r2, r2, #1
 8008b44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2222      	movs	r2, #34	; 0x22
 8008b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2210      	movs	r2, #16
 8008b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	893a      	ldrh	r2, [r7, #8]
 8008b76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	4a5c      	ldr	r2, [pc, #368]	; (8008cf8 <HAL_I2C_Master_Receive+0x228>)
 8008b86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008b88:	8979      	ldrh	r1, [r7, #10]
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f001 fc52 	bl	800a438 <I2C_MasterRequestRead>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d001      	beq.n	8008b9e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e1b8      	b.n	8008f10 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d113      	bne.n	8008bce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	623b      	str	r3, [r7, #32]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	623b      	str	r3, [r7, #32]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	623b      	str	r3, [r7, #32]
 8008bba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bca:	601a      	str	r2, [r3, #0]
 8008bcc:	e18c      	b.n	8008ee8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d11b      	bne.n	8008c0e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008be4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008be6:	2300      	movs	r3, #0
 8008be8:	61fb      	str	r3, [r7, #28]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	695b      	ldr	r3, [r3, #20]
 8008bf0:	61fb      	str	r3, [r7, #28]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	61fb      	str	r3, [r7, #28]
 8008bfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c0a:	601a      	str	r2, [r3, #0]
 8008c0c:	e16c      	b.n	8008ee8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d11b      	bne.n	8008c4e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c36:	2300      	movs	r3, #0
 8008c38:	61bb      	str	r3, [r7, #24]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	695b      	ldr	r3, [r3, #20]
 8008c40:	61bb      	str	r3, [r7, #24]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	61bb      	str	r3, [r7, #24]
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	e14c      	b.n	8008ee8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c5e:	2300      	movs	r3, #0
 8008c60:	617b      	str	r3, [r7, #20]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	695b      	ldr	r3, [r3, #20]
 8008c68:	617b      	str	r3, [r7, #20]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	617b      	str	r3, [r7, #20]
 8008c72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008c74:	e138      	b.n	8008ee8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c7a:	2b03      	cmp	r3, #3
 8008c7c:	f200 80f1 	bhi.w	8008e62 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d123      	bne.n	8008cd0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f001 fe50 	bl	800a932 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d001      	beq.n	8008c9c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e139      	b.n	8008f10 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	691a      	ldr	r2, [r3, #16]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	b2d2      	uxtb	r2, r2
 8008ca8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cae:	1c5a      	adds	r2, r3, #1
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008cce:	e10b      	b.n	8008ee8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	d14e      	bne.n	8008d76 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cde:	2200      	movs	r2, #0
 8008ce0:	4906      	ldr	r1, [pc, #24]	; (8008cfc <HAL_I2C_Master_Receive+0x22c>)
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f001 fccd 	bl	800a682 <I2C_WaitOnFlagUntilTimeout>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d008      	beq.n	8008d00 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e10e      	b.n	8008f10 <HAL_I2C_Master_Receive+0x440>
 8008cf2:	bf00      	nop
 8008cf4:	00100002 	.word	0x00100002
 8008cf8:	ffff0000 	.word	0xffff0000
 8008cfc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	691a      	ldr	r2, [r3, #16]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1a:	b2d2      	uxtb	r2, r2
 8008d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d22:	1c5a      	adds	r2, r3, #1
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	691a      	ldr	r2, [r3, #16]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4c:	b2d2      	uxtb	r2, r2
 8008d4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d54:	1c5a      	adds	r2, r3, #1
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	b29a      	uxth	r2, r3
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008d74:	e0b8      	b.n	8008ee8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	4966      	ldr	r1, [pc, #408]	; (8008f18 <HAL_I2C_Master_Receive+0x448>)
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	f001 fc7e 	bl	800a682 <I2C_WaitOnFlagUntilTimeout>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d001      	beq.n	8008d90 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e0bf      	b.n	8008f10 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	691a      	ldr	r2, [r3, #16]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008daa:	b2d2      	uxtb	r2, r2
 8008dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db2:	1c5a      	adds	r2, r3, #1
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd8:	2200      	movs	r2, #0
 8008dda:	494f      	ldr	r1, [pc, #316]	; (8008f18 <HAL_I2C_Master_Receive+0x448>)
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f001 fc50 	bl	800a682 <I2C_WaitOnFlagUntilTimeout>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d001      	beq.n	8008dec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e091      	b.n	8008f10 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	691a      	ldr	r2, [r3, #16]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e06:	b2d2      	uxtb	r2, r2
 8008e08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0e:	1c5a      	adds	r2, r3, #1
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	3b01      	subs	r3, #1
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	691a      	ldr	r2, [r3, #16]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e38:	b2d2      	uxtb	r2, r2
 8008e3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e40:	1c5a      	adds	r2, r3, #1
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008e60:	e042      	b.n	8008ee8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f001 fd63 	bl	800a932 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d001      	beq.n	8008e76 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e04c      	b.n	8008f10 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	691a      	ldr	r2, [r3, #16]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e80:	b2d2      	uxtb	r2, r2
 8008e82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e88:	1c5a      	adds	r2, r3, #1
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e92:	3b01      	subs	r3, #1
 8008e94:	b29a      	uxth	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	695b      	ldr	r3, [r3, #20]
 8008eae:	f003 0304 	and.w	r3, r3, #4
 8008eb2:	2b04      	cmp	r3, #4
 8008eb4:	d118      	bne.n	8008ee8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	691a      	ldr	r2, [r3, #16]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec0:	b2d2      	uxtb	r2, r2
 8008ec2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec8:	1c5a      	adds	r2, r3, #1
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	b29a      	uxth	r2, r3
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f47f aec2 	bne.w	8008c76 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2220      	movs	r2, #32
 8008ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	e000      	b.n	8008f10 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008f0e:	2302      	movs	r3, #2
  }
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3728      	adds	r7, #40	; 0x28
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	00010004 	.word	0x00010004

08008f1c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b088      	sub	sp, #32
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8008f24:	2300      	movs	r3, #0
 8008f26:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f34:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f3c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f44:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
 8008f48:	2b10      	cmp	r3, #16
 8008f4a:	d003      	beq.n	8008f54 <HAL_I2C_EV_IRQHandler+0x38>
 8008f4c:	7bfb      	ldrb	r3, [r7, #15]
 8008f4e:	2b40      	cmp	r3, #64	; 0x40
 8008f50:	f040 80b6 	bne.w	80090c0 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	695b      	ldr	r3, [r3, #20]
 8008f62:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10d      	bne.n	8008f8a <HAL_I2C_EV_IRQHandler+0x6e>
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008f74:	d003      	beq.n	8008f7e <HAL_I2C_EV_IRQHandler+0x62>
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008f7c:	d101      	bne.n	8008f82 <HAL_I2C_EV_IRQHandler+0x66>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e000      	b.n	8008f84 <HAL_I2C_EV_IRQHandler+0x68>
 8008f82:	2300      	movs	r3, #0
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	f000 8127 	beq.w	80091d8 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	f003 0301 	and.w	r3, r3, #1
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00c      	beq.n	8008fae <HAL_I2C_EV_IRQHandler+0x92>
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	0a5b      	lsrs	r3, r3, #9
 8008f98:	f003 0301 	and.w	r3, r3, #1
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d006      	beq.n	8008fae <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f001 fd4b 	bl	800aa3c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 fc4c 	bl	8009844 <I2C_Master_SB>
 8008fac:	e087      	b.n	80090be <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	08db      	lsrs	r3, r3, #3
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d009      	beq.n	8008fce <HAL_I2C_EV_IRQHandler+0xb2>
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	0a5b      	lsrs	r3, r3, #9
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d003      	beq.n	8008fce <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fcba 	bl	8009940 <I2C_Master_ADD10>
 8008fcc:	e077      	b.n	80090be <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	085b      	lsrs	r3, r3, #1
 8008fd2:	f003 0301 	and.w	r3, r3, #1
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d009      	beq.n	8008fee <HAL_I2C_EV_IRQHandler+0xd2>
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	0a5b      	lsrs	r3, r3, #9
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d003      	beq.n	8008fee <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fcd4 	bl	8009994 <I2C_Master_ADDR>
 8008fec:	e067      	b.n	80090be <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	089b      	lsrs	r3, r3, #2
 8008ff2:	f003 0301 	and.w	r3, r3, #1
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d030      	beq.n	800905c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009008:	f000 80e8 	beq.w	80091dc <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	09db      	lsrs	r3, r3, #7
 8009010:	f003 0301 	and.w	r3, r3, #1
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00f      	beq.n	8009038 <HAL_I2C_EV_IRQHandler+0x11c>
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	0a9b      	lsrs	r3, r3, #10
 800901c:	f003 0301 	and.w	r3, r3, #1
 8009020:	2b00      	cmp	r3, #0
 8009022:	d009      	beq.n	8009038 <HAL_I2C_EV_IRQHandler+0x11c>
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	089b      	lsrs	r3, r3, #2
 8009028:	f003 0301 	and.w	r3, r3, #1
 800902c:	2b00      	cmp	r3, #0
 800902e:	d103      	bne.n	8009038 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f92d 	bl	8009290 <I2C_MasterTransmit_TXE>
 8009036:	e042      	b.n	80090be <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	089b      	lsrs	r3, r3, #2
 800903c:	f003 0301 	and.w	r3, r3, #1
 8009040:	2b00      	cmp	r3, #0
 8009042:	f000 80cb 	beq.w	80091dc <HAL_I2C_EV_IRQHandler+0x2c0>
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	0a5b      	lsrs	r3, r3, #9
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	2b00      	cmp	r3, #0
 8009050:	f000 80c4 	beq.w	80091dc <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fa13 	bl	8009480 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800905a:	e0bf      	b.n	80091dc <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009066:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800906a:	f000 80b7 	beq.w	80091dc <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	099b      	lsrs	r3, r3, #6
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00f      	beq.n	800909a <HAL_I2C_EV_IRQHandler+0x17e>
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	0a9b      	lsrs	r3, r3, #10
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	2b00      	cmp	r3, #0
 8009084:	d009      	beq.n	800909a <HAL_I2C_EV_IRQHandler+0x17e>
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	089b      	lsrs	r3, r3, #2
 800908a:	f003 0301 	and.w	r3, r3, #1
 800908e:	2b00      	cmp	r3, #0
 8009090:	d103      	bne.n	800909a <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fa6a 	bl	800956c <I2C_MasterReceive_RXNE>
 8009098:	e011      	b.n	80090be <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	089b      	lsrs	r3, r3, #2
 800909e:	f003 0301 	and.w	r3, r3, #1
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f000 809a 	beq.w	80091dc <HAL_I2C_EV_IRQHandler+0x2c0>
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	0a5b      	lsrs	r3, r3, #9
 80090ac:	f003 0301 	and.w	r3, r3, #1
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 8093 	beq.w	80091dc <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fada 	bl	8009670 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80090bc:	e08e      	b.n	80091dc <HAL_I2C_EV_IRQHandler+0x2c0>
 80090be:	e08d      	b.n	80091dc <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d004      	beq.n	80090d2 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	61fb      	str	r3, [r7, #28]
 80090d0:	e007      	b.n	80090e2 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	699b      	ldr	r3, [r3, #24]
 80090d8:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	695b      	ldr	r3, [r3, #20]
 80090e0:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	085b      	lsrs	r3, r3, #1
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d012      	beq.n	8009114 <HAL_I2C_EV_IRQHandler+0x1f8>
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	0a5b      	lsrs	r3, r3, #9
 80090f2:	f003 0301 	and.w	r3, r3, #1
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00c      	beq.n	8009114 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d003      	beq.n	800910a <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	699b      	ldr	r3, [r3, #24]
 8009108:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800910a:	69b9      	ldr	r1, [r7, #24]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fe90 	bl	8009e32 <I2C_Slave_ADDR>
 8009112:	e066      	b.n	80091e2 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	091b      	lsrs	r3, r3, #4
 8009118:	f003 0301 	and.w	r3, r3, #1
 800911c:	2b00      	cmp	r3, #0
 800911e:	d009      	beq.n	8009134 <HAL_I2C_EV_IRQHandler+0x218>
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	0a5b      	lsrs	r3, r3, #9
 8009124:	f003 0301 	and.w	r3, r3, #1
 8009128:	2b00      	cmp	r3, #0
 800912a:	d003      	beq.n	8009134 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 fec5 	bl	8009ebc <I2C_Slave_STOPF>
 8009132:	e056      	b.n	80091e2 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009134:	7bbb      	ldrb	r3, [r7, #14]
 8009136:	2b21      	cmp	r3, #33	; 0x21
 8009138:	d002      	beq.n	8009140 <HAL_I2C_EV_IRQHandler+0x224>
 800913a:	7bbb      	ldrb	r3, [r7, #14]
 800913c:	2b29      	cmp	r3, #41	; 0x29
 800913e:	d125      	bne.n	800918c <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	09db      	lsrs	r3, r3, #7
 8009144:	f003 0301 	and.w	r3, r3, #1
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00f      	beq.n	800916c <HAL_I2C_EV_IRQHandler+0x250>
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	0a9b      	lsrs	r3, r3, #10
 8009150:	f003 0301 	and.w	r3, r3, #1
 8009154:	2b00      	cmp	r3, #0
 8009156:	d009      	beq.n	800916c <HAL_I2C_EV_IRQHandler+0x250>
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	089b      	lsrs	r3, r3, #2
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	2b00      	cmp	r3, #0
 8009162:	d103      	bne.n	800916c <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fda6 	bl	8009cb6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800916a:	e039      	b.n	80091e0 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	089b      	lsrs	r3, r3, #2
 8009170:	f003 0301 	and.w	r3, r3, #1
 8009174:	2b00      	cmp	r3, #0
 8009176:	d033      	beq.n	80091e0 <HAL_I2C_EV_IRQHandler+0x2c4>
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	0a5b      	lsrs	r3, r3, #9
 800917c:	f003 0301 	and.w	r3, r3, #1
 8009180:	2b00      	cmp	r3, #0
 8009182:	d02d      	beq.n	80091e0 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 fdd3 	bl	8009d30 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800918a:	e029      	b.n	80091e0 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	099b      	lsrs	r3, r3, #6
 8009190:	f003 0301 	and.w	r3, r3, #1
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00f      	beq.n	80091b8 <HAL_I2C_EV_IRQHandler+0x29c>
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	0a9b      	lsrs	r3, r3, #10
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d009      	beq.n	80091b8 <HAL_I2C_EV_IRQHandler+0x29c>
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	089b      	lsrs	r3, r3, #2
 80091a8:	f003 0301 	and.w	r3, r3, #1
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d103      	bne.n	80091b8 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fdde 	bl	8009d72 <I2C_SlaveReceive_RXNE>
 80091b6:	e014      	b.n	80091e2 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	089b      	lsrs	r3, r3, #2
 80091bc:	f003 0301 	and.w	r3, r3, #1
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00e      	beq.n	80091e2 <HAL_I2C_EV_IRQHandler+0x2c6>
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	0a5b      	lsrs	r3, r3, #9
 80091c8:	f003 0301 	and.w	r3, r3, #1
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d008      	beq.n	80091e2 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fe0c 	bl	8009dee <I2C_SlaveReceive_BTF>
 80091d6:	e004      	b.n	80091e2 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 80091d8:	bf00      	nop
 80091da:	e002      	b.n	80091e2 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80091dc:	bf00      	nop
 80091de:	e000      	b.n	80091e2 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80091e0:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80091e2:	3720      	adds	r7, #32
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	460b      	mov	r3, r1
 800921a:	70fb      	strb	r3, [r7, #3]
 800921c:	4613      	mov	r3, r2
 800921e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8009234:	bf00      	nop
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800929e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092a6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ac:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d150      	bne.n	8009358 <I2C_MasterTransmit_TXE+0xc8>
 80092b6:	7bfb      	ldrb	r3, [r7, #15]
 80092b8:	2b21      	cmp	r3, #33	; 0x21
 80092ba:	d14d      	bne.n	8009358 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	2b08      	cmp	r3, #8
 80092c0:	d01d      	beq.n	80092fe <I2C_MasterTransmit_TXE+0x6e>
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	2b20      	cmp	r3, #32
 80092c6:	d01a      	beq.n	80092fe <I2C_MasterTransmit_TXE+0x6e>
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80092ce:	d016      	beq.n	80092fe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	685a      	ldr	r2, [r3, #4]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80092de:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2211      	movs	r2, #17
 80092e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2220      	movs	r2, #32
 80092f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f7fa fe46 	bl	8003f88 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80092fc:	e0bc      	b.n	8009478 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	685a      	ldr	r2, [r3, #4]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800930c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800931c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2220      	movs	r2, #32
 8009328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b40      	cmp	r3, #64	; 0x40
 8009336:	d107      	bne.n	8009348 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f7ff ff7d 	bl	8009240 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009346:	e097      	b.n	8009478 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7fa fe19 	bl	8003f88 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009356:	e08f      	b.n	8009478 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8009358:	7bfb      	ldrb	r3, [r7, #15]
 800935a:	2b21      	cmp	r3, #33	; 0x21
 800935c:	d007      	beq.n	800936e <I2C_MasterTransmit_TXE+0xde>
 800935e:	7bbb      	ldrb	r3, [r7, #14]
 8009360:	2b40      	cmp	r3, #64	; 0x40
 8009362:	f040 8089 	bne.w	8009478 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8009366:	7bfb      	ldrb	r3, [r7, #15]
 8009368:	2b22      	cmp	r3, #34	; 0x22
 800936a:	f040 8085 	bne.w	8009478 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009372:	b29b      	uxth	r3, r3
 8009374:	2b00      	cmp	r3, #0
 8009376:	d108      	bne.n	800938a <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	685a      	ldr	r2, [r3, #4]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009386:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8009388:	e076      	b.n	8009478 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009390:	b2db      	uxtb	r3, r3
 8009392:	2b40      	cmp	r3, #64	; 0x40
 8009394:	d15d      	bne.n	8009452 <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800939a:	2b00      	cmp	r3, #0
 800939c:	d11d      	bne.n	80093da <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d10b      	bne.n	80093be <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093aa:	b2da      	uxtb	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093b6:	1c9a      	adds	r2, r3, #2
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	651a      	str	r2, [r3, #80]	; 0x50
}
 80093bc:	e05c      	b.n	8009478 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	121b      	asrs	r3, r3, #8
 80093c6:	b2da      	uxtb	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093d2:	1c5a      	adds	r2, r3, #1
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80093d8:	e04e      	b.n	8009478 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d10b      	bne.n	80093fa <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093f2:	1c5a      	adds	r2, r3, #1
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80093f8:	e03e      	b.n	8009478 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d13a      	bne.n	8009478 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009408:	b2db      	uxtb	r3, r3
 800940a:	2b22      	cmp	r3, #34	; 0x22
 800940c:	d108      	bne.n	8009420 <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800941c:	601a      	str	r2, [r3, #0]
}
 800941e:	e02b      	b.n	8009478 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009426:	b2db      	uxtb	r3, r3
 8009428:	2b21      	cmp	r3, #33	; 0x21
 800942a:	d125      	bne.n	8009478 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009430:	781a      	ldrb	r2, [r3, #0]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943c:	1c5a      	adds	r2, r3, #1
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009446:	b29b      	uxth	r3, r3
 8009448:	3b01      	subs	r3, #1
 800944a:	b29a      	uxth	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009450:	e012      	b.n	8009478 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009456:	781a      	ldrb	r2, [r3, #0]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009462:	1c5a      	adds	r2, r3, #1
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800946c:	b29b      	uxth	r3, r3
 800946e:	3b01      	subs	r3, #1
 8009470:	b29a      	uxth	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009476:	e7ff      	b.n	8009478 <I2C_MasterTransmit_TXE+0x1e8>
 8009478:	bf00      	nop
 800947a:	3710      	adds	r7, #16
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b21      	cmp	r3, #33	; 0x21
 8009498:	d164      	bne.n	8009564 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800949e:	b29b      	uxth	r3, r3
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d012      	beq.n	80094ca <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a8:	781a      	ldrb	r2, [r3, #0]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b4:	1c5a      	adds	r2, r3, #1
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094be:	b29b      	uxth	r3, r3
 80094c0:	3b01      	subs	r3, #1
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 80094c8:	e04c      	b.n	8009564 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2b08      	cmp	r3, #8
 80094ce:	d01d      	beq.n	800950c <I2C_MasterTransmit_BTF+0x8c>
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2b20      	cmp	r3, #32
 80094d4:	d01a      	beq.n	800950c <I2C_MasterTransmit_BTF+0x8c>
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80094dc:	d016      	beq.n	800950c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	685a      	ldr	r2, [r3, #4]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80094ec:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2211      	movs	r2, #17
 80094f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2220      	movs	r2, #32
 8009500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7fa fd3f 	bl	8003f88 <HAL_I2C_MasterTxCpltCallback>
}
 800950a:	e02b      	b.n	8009564 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	685a      	ldr	r2, [r3, #4]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800951a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800952a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2220      	movs	r2, #32
 8009536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009540:	b2db      	uxtb	r3, r3
 8009542:	2b40      	cmp	r3, #64	; 0x40
 8009544:	d107      	bne.n	8009556 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f7ff fe76 	bl	8009240 <HAL_I2C_MemTxCpltCallback>
}
 8009554:	e006      	b.n	8009564 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f7fa fd12 	bl	8003f88 <HAL_I2C_MasterTxCpltCallback>
}
 8009564:	bf00      	nop
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800957a:	b2db      	uxtb	r3, r3
 800957c:	2b22      	cmp	r3, #34	; 0x22
 800957e:	d173      	bne.n	8009668 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009584:	b29b      	uxth	r3, r3
 8009586:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2b03      	cmp	r3, #3
 800958c:	d920      	bls.n	80095d0 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	691a      	ldr	r2, [r3, #16]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009598:	b2d2      	uxtb	r2, r2
 800959a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a0:	1c5a      	adds	r2, r3, #1
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	3b01      	subs	r3, #1
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	2b03      	cmp	r3, #3
 80095bc:	d154      	bne.n	8009668 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	685a      	ldr	r2, [r3, #4]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095cc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80095ce:	e04b      	b.n	8009668 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	d047      	beq.n	8009668 <I2C_MasterReceive_RXNE+0xfc>
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d002      	beq.n	80095e4 <I2C_MasterReceive_RXNE+0x78>
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d141      	bne.n	8009668 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095f2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	685a      	ldr	r2, [r3, #4]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009602:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	691a      	ldr	r2, [r3, #16]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960e:	b2d2      	uxtb	r2, r2
 8009610:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009616:	1c5a      	adds	r2, r3, #1
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009620:	b29b      	uxth	r3, r3
 8009622:	3b01      	subs	r3, #1
 8009624:	b29a      	uxth	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2220      	movs	r2, #32
 800962e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009638:	b2db      	uxtb	r3, r3
 800963a:	2b40      	cmp	r3, #64	; 0x40
 800963c:	d10a      	bne.n	8009654 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7ff fe01 	bl	8009254 <HAL_I2C_MemRxCpltCallback>
}
 8009652:	e009      	b.n	8009668 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2212      	movs	r2, #18
 8009660:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f7fa fc9c 	bl	8003fa0 <HAL_I2C_MasterRxCpltCallback>
}
 8009668:	bf00      	nop
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800967c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009682:	b29b      	uxth	r3, r3
 8009684:	2b04      	cmp	r3, #4
 8009686:	d11b      	bne.n	80096c0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	685a      	ldr	r2, [r3, #4]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009696:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	691a      	ldr	r2, [r3, #16]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a2:	b2d2      	uxtb	r2, r2
 80096a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096aa:	1c5a      	adds	r2, r3, #1
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	3b01      	subs	r3, #1
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80096be:	e0bd      	b.n	800983c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	2b03      	cmp	r3, #3
 80096c8:	d129      	bne.n	800971e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	685a      	ldr	r2, [r3, #4]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096d8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2b04      	cmp	r3, #4
 80096de:	d00a      	beq.n	80096f6 <I2C_MasterReceive_BTF+0x86>
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d007      	beq.n	80096f6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096f4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	691a      	ldr	r2, [r3, #16]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009700:	b2d2      	uxtb	r2, r2
 8009702:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009708:	1c5a      	adds	r2, r3, #1
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009712:	b29b      	uxth	r3, r3
 8009714:	3b01      	subs	r3, #1
 8009716:	b29a      	uxth	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800971c:	e08e      	b.n	800983c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009722:	b29b      	uxth	r3, r3
 8009724:	2b02      	cmp	r3, #2
 8009726:	d176      	bne.n	8009816 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2b01      	cmp	r3, #1
 800972c:	d002      	beq.n	8009734 <I2C_MasterReceive_BTF+0xc4>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2b10      	cmp	r3, #16
 8009732:	d108      	bne.n	8009746 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009742:	601a      	str	r2, [r3, #0]
 8009744:	e019      	b.n	800977a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2b04      	cmp	r3, #4
 800974a:	d002      	beq.n	8009752 <I2C_MasterReceive_BTF+0xe2>
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2b02      	cmp	r3, #2
 8009750:	d108      	bne.n	8009764 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009760:	601a      	str	r2, [r3, #0]
 8009762:	e00a      	b.n	800977a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2b10      	cmp	r3, #16
 8009768:	d007      	beq.n	800977a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009778:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	691a      	ldr	r2, [r3, #16]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009784:	b2d2      	uxtb	r2, r2
 8009786:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978c:	1c5a      	adds	r2, r3, #1
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009796:	b29b      	uxth	r3, r3
 8009798:	3b01      	subs	r3, #1
 800979a:	b29a      	uxth	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	691a      	ldr	r2, [r3, #16]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097aa:	b2d2      	uxtb	r2, r2
 80097ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b2:	1c5a      	adds	r2, r3, #1
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097bc:	b29b      	uxth	r3, r3
 80097be:	3b01      	subs	r3, #1
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80097d4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2220      	movs	r2, #32
 80097da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	2b40      	cmp	r3, #64	; 0x40
 80097e8:	d10a      	bne.n	8009800 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f7ff fd2b 	bl	8009254 <HAL_I2C_MemRxCpltCallback>
}
 80097fe:	e01d      	b.n	800983c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2212      	movs	r2, #18
 800980c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f7fa fbc6 	bl	8003fa0 <HAL_I2C_MasterRxCpltCallback>
}
 8009814:	e012      	b.n	800983c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	691a      	ldr	r2, [r3, #16]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009820:	b2d2      	uxtb	r2, r2
 8009822:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009828:	1c5a      	adds	r2, r3, #1
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009832:	b29b      	uxth	r3, r3
 8009834:	3b01      	subs	r3, #1
 8009836:	b29a      	uxth	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800983c:	bf00      	nop
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009852:	b2db      	uxtb	r3, r3
 8009854:	2b40      	cmp	r3, #64	; 0x40
 8009856:	d117      	bne.n	8009888 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800985c:	2b00      	cmp	r3, #0
 800985e:	d109      	bne.n	8009874 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009864:	b2db      	uxtb	r3, r3
 8009866:	461a      	mov	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009870:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8009872:	e05f      	b.n	8009934 <I2C_Master_SB+0xf0>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009878:	b2db      	uxtb	r3, r3
 800987a:	f043 0301 	orr.w	r3, r3, #1
 800987e:	b2da      	uxtb	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	611a      	str	r2, [r3, #16]
}
 8009886:	e055      	b.n	8009934 <I2C_Master_SB+0xf0>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009890:	d12b      	bne.n	80098ea <I2C_Master_SB+0xa6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2b21      	cmp	r3, #33	; 0x21
 800989c:	d109      	bne.n	80098b2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	461a      	mov	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80098ae:	611a      	str	r2, [r3, #16]
 80098b0:	e008      	b.n	80098c4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	f043 0301 	orr.w	r3, r3, #1
 80098bc:	b2da      	uxtb	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d104      	bne.n	80098d8 <I2C_Master_SB+0x94>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d02d      	beq.n	8009934 <I2C_Master_SB+0xf0>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	685a      	ldr	r2, [r3, #4]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098e6:	605a      	str	r2, [r3, #4]
}
 80098e8:	e024      	b.n	8009934 <I2C_Master_SB+0xf0>
      if (hi2c->EventCount == 0U)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d10e      	bne.n	8009910 <I2C_Master_SB+0xcc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	11db      	asrs	r3, r3, #7
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	f003 0306 	and.w	r3, r3, #6
 8009900:	b2db      	uxtb	r3, r3
 8009902:	f063 030f 	orn	r3, r3, #15
 8009906:	b2da      	uxtb	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	611a      	str	r2, [r3, #16]
}
 800990e:	e011      	b.n	8009934 <I2C_Master_SB+0xf0>
      else if (hi2c->EventCount == 1U)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009914:	2b01      	cmp	r3, #1
 8009916:	d10d      	bne.n	8009934 <I2C_Master_SB+0xf0>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800991c:	b29b      	uxth	r3, r3
 800991e:	11db      	asrs	r3, r3, #7
 8009920:	b2db      	uxtb	r3, r3
 8009922:	f003 0306 	and.w	r3, r3, #6
 8009926:	b2db      	uxtb	r3, r3
 8009928:	f063 030e 	orn	r3, r3, #14
 800992c:	b2da      	uxtb	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	611a      	str	r2, [r3, #16]
}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800994c:	b2da      	uxtb	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009958:	2b00      	cmp	r3, #0
 800995a:	d103      	bne.n	8009964 <I2C_Master_ADD10+0x24>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009960:	2b00      	cmp	r3, #0
 8009962:	d011      	beq.n	8009988 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800996a:	2b00      	cmp	r3, #0
 800996c:	d104      	bne.n	8009978 <I2C_Master_ADD10+0x38>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009974:	2b00      	cmp	r3, #0
 8009976:	d007      	beq.n	8009988 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	685a      	ldr	r2, [r3, #4]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009986:	605a      	str	r2, [r3, #4]
    }
  }
}
 8009988:	bf00      	nop
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8009994:	b480      	push	{r7}
 8009996:	b091      	sub	sp, #68	; 0x44
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099aa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	2b22      	cmp	r3, #34	; 0x22
 80099bc:	f040 8169 	bne.w	8009c92 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10f      	bne.n	80099e8 <I2C_Master_ADDR+0x54>
 80099c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80099cc:	2b40      	cmp	r3, #64	; 0x40
 80099ce:	d10b      	bne.n	80099e8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099d0:	2300      	movs	r3, #0
 80099d2:	633b      	str	r3, [r7, #48]	; 0x30
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	695b      	ldr	r3, [r3, #20]
 80099da:	633b      	str	r3, [r7, #48]	; 0x30
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	699b      	ldr	r3, [r3, #24]
 80099e2:	633b      	str	r3, [r7, #48]	; 0x30
 80099e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e6:	e160      	b.n	8009caa <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d11d      	bne.n	8009a2c <I2C_Master_ADDR+0x98>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80099f8:	d118      	bne.n	8009a2c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099fa:	2300      	movs	r3, #0
 80099fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	695b      	ldr	r3, [r3, #20]
 8009a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	699b      	ldr	r3, [r3, #24]
 8009a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a1e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a24:	1c5a      	adds	r2, r3, #1
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	651a      	str	r2, [r3, #80]	; 0x50
 8009a2a:	e13e      	b.n	8009caa <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d113      	bne.n	8009a5e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a36:	2300      	movs	r3, #0
 8009a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	695b      	ldr	r3, [r3, #20]
 8009a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	699b      	ldr	r3, [r3, #24]
 8009a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a5a:	601a      	str	r2, [r3, #0]
 8009a5c:	e115      	b.n	8009c8a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	f040 808a 	bne.w	8009b7e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009a70:	d137      	bne.n	8009ae2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a80:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a90:	d113      	bne.n	8009aba <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009aa0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	695b      	ldr	r3, [r3, #20]
 8009aac:	627b      	str	r3, [r7, #36]	; 0x24
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	699b      	ldr	r3, [r3, #24]
 8009ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab8:	e0e7      	b.n	8009c8a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009aba:	2300      	movs	r3, #0
 8009abc:	623b      	str	r3, [r7, #32]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	695b      	ldr	r3, [r3, #20]
 8009ac4:	623b      	str	r3, [r7, #32]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	699b      	ldr	r3, [r3, #24]
 8009acc:	623b      	str	r3, [r7, #32]
 8009ace:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ade:	601a      	str	r2, [r3, #0]
 8009ae0:	e0d3      	b.n	8009c8a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8009ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae4:	2b08      	cmp	r3, #8
 8009ae6:	d02e      	beq.n	8009b46 <I2C_Master_ADDR+0x1b2>
 8009ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aea:	2b20      	cmp	r3, #32
 8009aec:	d02b      	beq.n	8009b46 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8009aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af0:	2b12      	cmp	r3, #18
 8009af2:	d102      	bne.n	8009afa <I2C_Master_ADDR+0x166>
 8009af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d125      	bne.n	8009b46 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afc:	2b04      	cmp	r3, #4
 8009afe:	d00e      	beq.n	8009b1e <I2C_Master_ADDR+0x18a>
 8009b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d00b      	beq.n	8009b1e <I2C_Master_ADDR+0x18a>
 8009b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b08:	2b10      	cmp	r3, #16
 8009b0a:	d008      	beq.n	8009b1e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b1a:	601a      	str	r2, [r3, #0]
 8009b1c:	e007      	b.n	8009b2e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b2c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b2e:	2300      	movs	r3, #0
 8009b30:	61fb      	str	r3, [r7, #28]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	695b      	ldr	r3, [r3, #20]
 8009b38:	61fb      	str	r3, [r7, #28]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	61fb      	str	r3, [r7, #28]
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	e0a1      	b.n	8009c8a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b54:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b56:	2300      	movs	r3, #0
 8009b58:	61bb      	str	r3, [r7, #24]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	695b      	ldr	r3, [r3, #20]
 8009b60:	61bb      	str	r3, [r7, #24]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	61bb      	str	r3, [r7, #24]
 8009b6a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b7a:	601a      	str	r2, [r3, #0]
 8009b7c:	e085      	b.n	8009c8a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	d14d      	bne.n	8009c24 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8a:	2b04      	cmp	r3, #4
 8009b8c:	d016      	beq.n	8009bbc <I2C_Master_ADDR+0x228>
 8009b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d013      	beq.n	8009bbc <I2C_Master_ADDR+0x228>
 8009b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b96:	2b10      	cmp	r3, #16
 8009b98:	d010      	beq.n	8009bbc <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ba8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bb8:	601a      	str	r2, [r3, #0]
 8009bba:	e007      	b.n	8009bcc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009bca:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bda:	d117      	bne.n	8009c0c <I2C_Master_ADDR+0x278>
 8009bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009be2:	d00b      	beq.n	8009bfc <I2C_Master_ADDR+0x268>
 8009be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d008      	beq.n	8009bfc <I2C_Master_ADDR+0x268>
 8009bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bec:	2b08      	cmp	r3, #8
 8009bee:	d005      	beq.n	8009bfc <I2C_Master_ADDR+0x268>
 8009bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf2:	2b10      	cmp	r3, #16
 8009bf4:	d002      	beq.n	8009bfc <I2C_Master_ADDR+0x268>
 8009bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf8:	2b20      	cmp	r3, #32
 8009bfa:	d107      	bne.n	8009c0c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	685a      	ldr	r2, [r3, #4]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009c0a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	617b      	str	r3, [r7, #20]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	695b      	ldr	r3, [r3, #20]
 8009c16:	617b      	str	r3, [r7, #20]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	617b      	str	r3, [r7, #20]
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	e032      	b.n	8009c8a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c32:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c42:	d117      	bne.n	8009c74 <I2C_Master_ADDR+0x2e0>
 8009c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009c4a:	d00b      	beq.n	8009c64 <I2C_Master_ADDR+0x2d0>
 8009c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d008      	beq.n	8009c64 <I2C_Master_ADDR+0x2d0>
 8009c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c54:	2b08      	cmp	r3, #8
 8009c56:	d005      	beq.n	8009c64 <I2C_Master_ADDR+0x2d0>
 8009c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5a:	2b10      	cmp	r3, #16
 8009c5c:	d002      	beq.n	8009c64 <I2C_Master_ADDR+0x2d0>
 8009c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c60:	2b20      	cmp	r3, #32
 8009c62:	d107      	bne.n	8009c74 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	685a      	ldr	r2, [r3, #4]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009c72:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c74:	2300      	movs	r3, #0
 8009c76:	613b      	str	r3, [r7, #16]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	695b      	ldr	r3, [r3, #20]
 8009c7e:	613b      	str	r3, [r7, #16]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	699b      	ldr	r3, [r3, #24]
 8009c86:	613b      	str	r3, [r7, #16]
 8009c88:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8009c90:	e00b      	b.n	8009caa <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c92:	2300      	movs	r3, #0
 8009c94:	60fb      	str	r3, [r7, #12]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	695b      	ldr	r3, [r3, #20]
 8009c9c:	60fb      	str	r3, [r7, #12]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	699b      	ldr	r3, [r3, #24]
 8009ca4:	60fb      	str	r3, [r7, #12]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
}
 8009ca8:	e7ff      	b.n	8009caa <I2C_Master_ADDR+0x316>
 8009caa:	bf00      	nop
 8009cac:	3744      	adds	r7, #68	; 0x44
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr

08009cb6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b084      	sub	sp, #16
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cc4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d02b      	beq.n	8009d28 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd4:	781a      	ldrb	r2, [r3, #0]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce0:	1c5a      	adds	r2, r3, #1
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	3b01      	subs	r3, #1
 8009cee:	b29a      	uxth	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d114      	bne.n	8009d28 <I2C_SlaveTransmit_TXE+0x72>
 8009cfe:	7bfb      	ldrb	r3, [r7, #15]
 8009d00:	2b29      	cmp	r3, #41	; 0x29
 8009d02:	d111      	bne.n	8009d28 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	685a      	ldr	r2, [r3, #4]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d12:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2221      	movs	r2, #33	; 0x21
 8009d18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2228      	movs	r2, #40	; 0x28
 8009d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f7ff fa60 	bl	80091e8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009d28:	bf00      	nop
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d011      	beq.n	8009d66 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d46:	781a      	ldrb	r2, [r3, #0]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d52:	1c5a      	adds	r2, r3, #1
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	b29a      	uxth	r2, r3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009d66:	bf00      	nop
 8009d68:	370c      	adds	r7, #12
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr

08009d72 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b084      	sub	sp, #16
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d80:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d02c      	beq.n	8009de6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	691a      	ldr	r2, [r3, #16]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d96:	b2d2      	uxtb	r2, r2
 8009d98:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9e:	1c5a      	adds	r2, r3, #1
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	3b01      	subs	r3, #1
 8009dac:	b29a      	uxth	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d114      	bne.n	8009de6 <I2C_SlaveReceive_RXNE+0x74>
 8009dbc:	7bfb      	ldrb	r3, [r7, #15]
 8009dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8009dc0:	d111      	bne.n	8009de6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dd0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2222      	movs	r2, #34	; 0x22
 8009dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2228      	movs	r2, #40	; 0x28
 8009ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f7ff fa0b 	bl	80091fc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009de6:	bf00      	nop
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b083      	sub	sp, #12
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d012      	beq.n	8009e26 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	691a      	ldr	r2, [r3, #16]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0a:	b2d2      	uxtb	r2, r2
 8009e0c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e12:	1c5a      	adds	r2, r3, #1
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	b29a      	uxth	r2, r3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009e26:	bf00      	nop
 8009e28:	370c      	adds	r7, #12
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr

08009e32 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b084      	sub	sp, #16
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
 8009e3a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009e4c:	2b28      	cmp	r3, #40	; 0x28
 8009e4e:	d127      	bne.n	8009ea0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	685a      	ldr	r2, [r3, #4]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e5e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	089b      	lsrs	r3, r3, #2
 8009e64:	f003 0301 	and.w	r3, r3, #1
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d101      	bne.n	8009e70 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	09db      	lsrs	r3, r3, #7
 8009e74:	f003 0301 	and.w	r3, r3, #1
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d103      	bne.n	8009e84 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	81bb      	strh	r3, [r7, #12]
 8009e82:	e002      	b.n	8009e8a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	699b      	ldr	r3, [r3, #24]
 8009e88:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009e92:	89ba      	ldrh	r2, [r7, #12]
 8009e94:	7bfb      	ldrb	r3, [r7, #15]
 8009e96:	4619      	mov	r1, r3
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f7ff f9b9 	bl	8009210 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009e9e:	e008      	b.n	8009eb2 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f06f 0202 	mvn.w	r2, #2
 8009ea8:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8009eb2:	bf00      	nop
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
	...

08009ebc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	685a      	ldr	r2, [r3, #4]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009eda:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009edc:	2300      	movs	r3, #0
 8009ede:	60bb      	str	r3, [r7, #8]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	695b      	ldr	r3, [r3, #20]
 8009ee6:	60bb      	str	r3, [r7, #8]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f042 0201 	orr.w	r2, r2, #1
 8009ef6:	601a      	str	r2, [r3, #0]
 8009ef8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f08:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f18:	d172      	bne.n	800a000 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009f1a:	7bfb      	ldrb	r3, [r7, #15]
 8009f1c:	2b22      	cmp	r3, #34	; 0x22
 8009f1e:	d002      	beq.n	8009f26 <I2C_Slave_STOPF+0x6a>
 8009f20:	7bfb      	ldrb	r3, [r7, #15]
 8009f22:	2b2a      	cmp	r3, #42	; 0x2a
 8009f24:	d135      	bne.n	8009f92 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d005      	beq.n	8009f4a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f42:	f043 0204 	orr.w	r2, r3, #4
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	685a      	ldr	r2, [r3, #4]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009f58:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fe f93a 	bl	80081d8 <HAL_DMA_GetState>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d049      	beq.n	8009ffe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f6e:	4a69      	ldr	r2, [pc, #420]	; (800a114 <I2C_Slave_STOPF+0x258>)
 8009f70:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fd ff81 	bl	8007e7e <HAL_DMA_Abort_IT>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d03d      	beq.n	8009ffe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f8c:	4610      	mov	r0, r2
 8009f8e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009f90:	e035      	b.n	8009ffe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	b29a      	uxth	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d005      	beq.n	8009fb6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fae:	f043 0204 	orr.w	r2, r3, #4
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	685a      	ldr	r2, [r3, #4]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009fc4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe f904 	bl	80081d8 <HAL_DMA_GetState>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d014      	beq.n	800a000 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fda:	4a4e      	ldr	r2, [pc, #312]	; (800a114 <I2C_Slave_STOPF+0x258>)
 8009fdc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7fd ff4b 	bl	8007e7e <HAL_DMA_Abort_IT>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d008      	beq.n	800a000 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009ff8:	4610      	mov	r0, r2
 8009ffa:	4798      	blx	r3
 8009ffc:	e000      	b.n	800a000 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009ffe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a004:	b29b      	uxth	r3, r3
 800a006:	2b00      	cmp	r3, #0
 800a008:	d03e      	beq.n	800a088 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	695b      	ldr	r3, [r3, #20]
 800a010:	f003 0304 	and.w	r3, r3, #4
 800a014:	2b04      	cmp	r3, #4
 800a016:	d112      	bne.n	800a03e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	691a      	ldr	r2, [r3, #16]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a022:	b2d2      	uxtb	r2, r2
 800a024:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02a:	1c5a      	adds	r2, r3, #1
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a034:	b29b      	uxth	r3, r3
 800a036:	3b01      	subs	r3, #1
 800a038:	b29a      	uxth	r2, r3
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	695b      	ldr	r3, [r3, #20]
 800a044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a048:	2b40      	cmp	r3, #64	; 0x40
 800a04a:	d112      	bne.n	800a072 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	691a      	ldr	r2, [r3, #16]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a056:	b2d2      	uxtb	r2, r2
 800a058:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05e:	1c5a      	adds	r2, r3, #1
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a068:	b29b      	uxth	r3, r3
 800a06a:	3b01      	subs	r3, #1
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a076:	b29b      	uxth	r3, r3
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d005      	beq.n	800a088 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a080:	f043 0204 	orr.w	r2, r3, #4
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d003      	beq.n	800a098 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 f843 	bl	800a11c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800a096:	e039      	b.n	800a10c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a098:	7bfb      	ldrb	r3, [r7, #15]
 800a09a:	2b2a      	cmp	r3, #42	; 0x2a
 800a09c:	d109      	bne.n	800a0b2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2228      	movs	r2, #40	; 0x28
 800a0a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f7ff f8a5 	bl	80091fc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	2b28      	cmp	r3, #40	; 0x28
 800a0bc:	d111      	bne.n	800a0e2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	4a15      	ldr	r2, [pc, #84]	; (800a118 <I2C_Slave_STOPF+0x25c>)
 800a0c2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2220      	movs	r2, #32
 800a0ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f7ff f8a6 	bl	800922c <HAL_I2C_ListenCpltCallback>
}
 800a0e0:	e014      	b.n	800a10c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e6:	2b22      	cmp	r3, #34	; 0x22
 800a0e8:	d002      	beq.n	800a0f0 <I2C_Slave_STOPF+0x234>
 800a0ea:	7bfb      	ldrb	r3, [r7, #15]
 800a0ec:	2b22      	cmp	r3, #34	; 0x22
 800a0ee:	d10d      	bne.n	800a10c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2220      	movs	r2, #32
 800a0fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f7ff f878 	bl	80091fc <HAL_I2C_SlaveRxCpltCallback>
}
 800a10c:	bf00      	nop
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	0800a5a5 	.word	0x0800a5a5
 800a118:	ffff0000 	.word	0xffff0000

0800a11c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a12a:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a132:	b2db      	uxtb	r3, r3
 800a134:	2b10      	cmp	r3, #16
 800a136:	d10a      	bne.n	800a14e <I2C_ITError+0x32>
 800a138:	7bfb      	ldrb	r3, [r7, #15]
 800a13a:	2b22      	cmp	r3, #34	; 0x22
 800a13c:	d107      	bne.n	800a14e <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a14c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a14e:	7bfb      	ldrb	r3, [r7, #15]
 800a150:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a154:	2b28      	cmp	r3, #40	; 0x28
 800a156:	d107      	bne.n	800a168 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2228      	movs	r2, #40	; 0x28
 800a162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a166:	e015      	b.n	800a194 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a176:	d006      	beq.n	800a186 <I2C_ITError+0x6a>
 800a178:	7bfb      	ldrb	r3, [r7, #15]
 800a17a:	2b60      	cmp	r3, #96	; 0x60
 800a17c:	d003      	beq.n	800a186 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2220      	movs	r2, #32
 800a182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a19e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1a2:	d162      	bne.n	800a26a <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	685a      	ldr	r2, [r3, #4]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a1b2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d020      	beq.n	800a204 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c6:	4a5f      	ldr	r2, [pc, #380]	; (800a344 <I2C_ITError+0x228>)
 800a1c8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fd fe55 	bl	8007e7e <HAL_DMA_Abort_IT>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f000 8089 	beq.w	800a2ee <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f022 0201 	bic.w	r2, r2, #1
 800a1ea:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2220      	movs	r2, #32
 800a1f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a1fe:	4610      	mov	r0, r2
 800a200:	4798      	blx	r3
 800a202:	e074      	b.n	800a2ee <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a208:	4a4e      	ldr	r2, [pc, #312]	; (800a344 <I2C_ITError+0x228>)
 800a20a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a210:	4618      	mov	r0, r3
 800a212:	f7fd fe34 	bl	8007e7e <HAL_DMA_Abort_IT>
 800a216:	4603      	mov	r3, r0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d068      	beq.n	800a2ee <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	695b      	ldr	r3, [r3, #20]
 800a222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a226:	2b40      	cmp	r3, #64	; 0x40
 800a228:	d10b      	bne.n	800a242 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	691a      	ldr	r2, [r3, #16]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a234:	b2d2      	uxtb	r2, r2
 800a236:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23c:	1c5a      	adds	r2, r3, #1
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f022 0201 	bic.w	r2, r2, #1
 800a250:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2220      	movs	r2, #32
 800a256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a25e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a264:	4610      	mov	r0, r2
 800a266:	4798      	blx	r3
 800a268:	e041      	b.n	800a2ee <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a270:	b2db      	uxtb	r3, r3
 800a272:	2b60      	cmp	r3, #96	; 0x60
 800a274:	d125      	bne.n	800a2c2 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2220      	movs	r2, #32
 800a27a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	695b      	ldr	r3, [r3, #20]
 800a28a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a28e:	2b40      	cmp	r3, #64	; 0x40
 800a290:	d10b      	bne.n	800a2aa <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	691a      	ldr	r2, [r3, #16]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29c:	b2d2      	uxtb	r2, r2
 800a29e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a4:	1c5a      	adds	r2, r3, #1
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f022 0201 	bic.w	r2, r2, #1
 800a2b8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f7fe ffde 	bl	800927c <HAL_I2C_AbortCpltCallback>
 800a2c0:	e015      	b.n	800a2ee <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	695b      	ldr	r3, [r3, #20]
 800a2c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2cc:	2b40      	cmp	r3, #64	; 0x40
 800a2ce:	d10b      	bne.n	800a2e8 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	691a      	ldr	r2, [r3, #16]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2da:	b2d2      	uxtb	r2, r2
 800a2dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e2:	1c5a      	adds	r2, r3, #1
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7fe ffbd 	bl	8009268 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2f4:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2fa:	f003 0304 	and.w	r3, r3, #4
 800a2fe:	2b04      	cmp	r3, #4
 800a300:	d11b      	bne.n	800a33a <I2C_ITError+0x21e>
 800a302:	7bfb      	ldrb	r3, [r7, #15]
 800a304:	2b28      	cmp	r3, #40	; 0x28
 800a306:	d118      	bne.n	800a33a <I2C_ITError+0x21e>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	685a      	ldr	r2, [r3, #4]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a316:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4a0b      	ldr	r2, [pc, #44]	; (800a348 <I2C_ITError+0x22c>)
 800a31c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2220      	movs	r2, #32
 800a328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f7fe ff79 	bl	800922c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a33a:	bf00      	nop
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	0800a5a5 	.word	0x0800a5a5
 800a348:	ffff0000 	.word	0xffff0000

0800a34c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b088      	sub	sp, #32
 800a350:	af02      	add	r7, sp, #8
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	607a      	str	r2, [r7, #4]
 800a356:	603b      	str	r3, [r7, #0]
 800a358:	460b      	mov	r3, r1
 800a35a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a360:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	2b08      	cmp	r3, #8
 800a366:	d006      	beq.n	800a376 <I2C_MasterRequestWrite+0x2a>
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d003      	beq.n	800a376 <I2C_MasterRequestWrite+0x2a>
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a374:	d108      	bne.n	800a388 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a384:	601a      	str	r2, [r3, #0]
 800a386:	e00b      	b.n	800a3a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a38c:	2b12      	cmp	r3, #18
 800a38e:	d107      	bne.n	800a3a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a39e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f000 f968 	bl	800a682 <I2C_WaitOnFlagUntilTimeout>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d001      	beq.n	800a3bc <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e035      	b.n	800a428 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3c4:	d108      	bne.n	800a3d8 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a3c6:	897b      	ldrh	r3, [r7, #10]
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a3d4:	611a      	str	r2, [r3, #16]
 800a3d6:	e01b      	b.n	800a410 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a3d8:	897b      	ldrh	r3, [r7, #10]
 800a3da:	11db      	asrs	r3, r3, #7
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	f003 0306 	and.w	r3, r3, #6
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	f063 030f 	orn	r3, r3, #15
 800a3e8:	b2da      	uxtb	r2, r3
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	490e      	ldr	r1, [pc, #56]	; (800a430 <I2C_MasterRequestWrite+0xe4>)
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f000 f99a 	bl	800a730 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d001      	beq.n	800a406 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	e010      	b.n	800a428 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a406:	897b      	ldrh	r3, [r7, #10]
 800a408:	b2da      	uxtb	r2, r3
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	4907      	ldr	r1, [pc, #28]	; (800a434 <I2C_MasterRequestWrite+0xe8>)
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f000 f98a 	bl	800a730 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800a422:	2301      	movs	r3, #1
 800a424:	e000      	b.n	800a428 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3718      	adds	r7, #24
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	00010008 	.word	0x00010008
 800a434:	00010002 	.word	0x00010002

0800a438 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b088      	sub	sp, #32
 800a43c:	af02      	add	r7, sp, #8
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	607a      	str	r2, [r7, #4]
 800a442:	603b      	str	r3, [r7, #0]
 800a444:	460b      	mov	r3, r1
 800a446:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a45c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	2b08      	cmp	r3, #8
 800a462:	d006      	beq.n	800a472 <I2C_MasterRequestRead+0x3a>
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	2b01      	cmp	r3, #1
 800a468:	d003      	beq.n	800a472 <I2C_MasterRequestRead+0x3a>
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a470:	d108      	bne.n	800a484 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a480:	601a      	str	r2, [r3, #0]
 800a482:	e00b      	b.n	800a49c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a488:	2b11      	cmp	r3, #17
 800a48a:	d107      	bne.n	800a49c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a49a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	9300      	str	r3, [sp, #0]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f000 f8ea 	bl	800a682 <I2C_WaitOnFlagUntilTimeout>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d001      	beq.n	800a4b8 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e06d      	b.n	800a594 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	691b      	ldr	r3, [r3, #16]
 800a4bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4c0:	d108      	bne.n	800a4d4 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a4c2:	897b      	ldrh	r3, [r7, #10]
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	f043 0301 	orr.w	r3, r3, #1
 800a4ca:	b2da      	uxtb	r2, r3
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	611a      	str	r2, [r3, #16]
 800a4d2:	e053      	b.n	800a57c <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a4d4:	897b      	ldrh	r3, [r7, #10]
 800a4d6:	11db      	asrs	r3, r3, #7
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	f003 0306 	and.w	r3, r3, #6
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	f063 030f 	orn	r3, r3, #15
 800a4e4:	b2da      	uxtb	r2, r3
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	492a      	ldr	r1, [pc, #168]	; (800a59c <I2C_MasterRequestRead+0x164>)
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f000 f91c 	bl	800a730 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d001      	beq.n	800a502 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e048      	b.n	800a594 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a502:	897b      	ldrh	r3, [r7, #10]
 800a504:	b2da      	uxtb	r2, r3
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	4923      	ldr	r1, [pc, #140]	; (800a5a0 <I2C_MasterRequestRead+0x168>)
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f000 f90c 	bl	800a730 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d001      	beq.n	800a522 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e038      	b.n	800a594 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a522:	2300      	movs	r3, #0
 800a524:	613b      	str	r3, [r7, #16]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	695b      	ldr	r3, [r3, #20]
 800a52c:	613b      	str	r3, [r7, #16]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	699b      	ldr	r3, [r3, #24]
 800a534:	613b      	str	r3, [r7, #16]
 800a536:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a546:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	9300      	str	r3, [sp, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2200      	movs	r2, #0
 800a550:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f000 f894 	bl	800a682 <I2C_WaitOnFlagUntilTimeout>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d001      	beq.n	800a564 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	e017      	b.n	800a594 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a564:	897b      	ldrh	r3, [r7, #10]
 800a566:	11db      	asrs	r3, r3, #7
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	f003 0306 	and.w	r3, r3, #6
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	f063 030e 	orn	r3, r3, #14
 800a574:	b2da      	uxtb	r2, r3
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	4907      	ldr	r1, [pc, #28]	; (800a5a0 <I2C_MasterRequestRead+0x168>)
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	f000 f8d4 	bl	800a730 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d001      	beq.n	800a592 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	e000      	b.n	800a594 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 800a592:	2300      	movs	r3, #0
}
 800a594:	4618      	mov	r0, r3
 800a596:	3718      	adds	r7, #24
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	00010008 	.word	0x00010008
 800a5a0:	00010002 	.word	0x00010002

0800a5a4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b0:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5b8:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5be:	2200      	movs	r2, #0
 800a5c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5d8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f022 0201 	bic.w	r2, r2, #1
 800a5fe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a606:	b2db      	uxtb	r3, r3
 800a608:	2b60      	cmp	r3, #96	; 0x60
 800a60a:	d10e      	bne.n	800a62a <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2220      	movs	r2, #32
 800a610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2200      	movs	r2, #0
 800a618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2200      	movs	r2, #0
 800a620:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f7fe fe2a 	bl	800927c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a628:	e027      	b.n	800a67a <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a62a:	7afb      	ldrb	r3, [r7, #11]
 800a62c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a630:	2b28      	cmp	r3, #40	; 0x28
 800a632:	d117      	bne.n	800a664 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f042 0201 	orr.w	r2, r2, #1
 800a642:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a652:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2200      	movs	r2, #0
 800a658:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2228      	movs	r2, #40	; 0x28
 800a65e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a662:	e007      	b.n	800a674 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2220      	movs	r2, #32
 800a668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2200      	movs	r2, #0
 800a670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f7fe fdf7 	bl	8009268 <HAL_I2C_ErrorCallback>
}
 800a67a:	bf00      	nop
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b084      	sub	sp, #16
 800a686:	af00      	add	r7, sp, #0
 800a688:	60f8      	str	r0, [r7, #12]
 800a68a:	60b9      	str	r1, [r7, #8]
 800a68c:	603b      	str	r3, [r7, #0]
 800a68e:	4613      	mov	r3, r2
 800a690:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a692:	e025      	b.n	800a6e0 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a69a:	d021      	beq.n	800a6e0 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a69c:	f7fc f870 	bl	8006780 <HAL_GetTick>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	69bb      	ldr	r3, [r7, #24]
 800a6a4:	1ad3      	subs	r3, r2, r3
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d302      	bcc.n	800a6b2 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d116      	bne.n	800a6e0 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2220      	movs	r2, #32
 800a6bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6cc:	f043 0220 	orr.w	r2, r3, #32
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e023      	b.n	800a728 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	0c1b      	lsrs	r3, r3, #16
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d10d      	bne.n	800a706 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	695b      	ldr	r3, [r3, #20]
 800a6f0:	43da      	mvns	r2, r3
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	bf0c      	ite	eq
 800a6fc:	2301      	moveq	r3, #1
 800a6fe:	2300      	movne	r3, #0
 800a700:	b2db      	uxtb	r3, r3
 800a702:	461a      	mov	r2, r3
 800a704:	e00c      	b.n	800a720 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	699b      	ldr	r3, [r3, #24]
 800a70c:	43da      	mvns	r2, r3
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	4013      	ands	r3, r2
 800a712:	b29b      	uxth	r3, r3
 800a714:	2b00      	cmp	r3, #0
 800a716:	bf0c      	ite	eq
 800a718:	2301      	moveq	r3, #1
 800a71a:	2300      	movne	r3, #0
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	461a      	mov	r2, r3
 800a720:	79fb      	ldrb	r3, [r7, #7]
 800a722:	429a      	cmp	r2, r3
 800a724:	d0b6      	beq.n	800a694 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3710      	adds	r7, #16
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	607a      	str	r2, [r7, #4]
 800a73c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a73e:	e051      	b.n	800a7e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a74a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a74e:	d123      	bne.n	800a798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a75e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a768:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2200      	movs	r2, #0
 800a76e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2220      	movs	r2, #32
 800a774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2200      	movs	r2, #0
 800a77c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a784:	f043 0204 	orr.w	r2, r3, #4
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	e046      	b.n	800a826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a79e:	d021      	beq.n	800a7e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7a0:	f7fb ffee 	bl	8006780 <HAL_GetTick>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d302      	bcc.n	800a7b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d116      	bne.n	800a7e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2220      	movs	r2, #32
 800a7c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d0:	f043 0220 	orr.w	r2, r3, #32
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e020      	b.n	800a826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	0c1b      	lsrs	r3, r3, #16
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d10c      	bne.n	800a808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	695b      	ldr	r3, [r3, #20]
 800a7f4:	43da      	mvns	r2, r3
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	4013      	ands	r3, r2
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	bf14      	ite	ne
 800a800:	2301      	movne	r3, #1
 800a802:	2300      	moveq	r3, #0
 800a804:	b2db      	uxtb	r3, r3
 800a806:	e00b      	b.n	800a820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	699b      	ldr	r3, [r3, #24]
 800a80e:	43da      	mvns	r2, r3
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	4013      	ands	r3, r2
 800a814:	b29b      	uxth	r3, r3
 800a816:	2b00      	cmp	r3, #0
 800a818:	bf14      	ite	ne
 800a81a:	2301      	movne	r3, #1
 800a81c:	2300      	moveq	r3, #0
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	2b00      	cmp	r3, #0
 800a822:	d18d      	bne.n	800a740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a82e:	b580      	push	{r7, lr}
 800a830:	b084      	sub	sp, #16
 800a832:	af00      	add	r7, sp, #0
 800a834:	60f8      	str	r0, [r7, #12]
 800a836:	60b9      	str	r1, [r7, #8]
 800a838:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a83a:	e02d      	b.n	800a898 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a83c:	68f8      	ldr	r0, [r7, #12]
 800a83e:	f000 f8ce 	bl	800a9de <I2C_IsAcknowledgeFailed>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d001      	beq.n	800a84c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a848:	2301      	movs	r3, #1
 800a84a:	e02d      	b.n	800a8a8 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a852:	d021      	beq.n	800a898 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a854:	f7fb ff94 	bl	8006780 <HAL_GetTick>
 800a858:	4602      	mov	r2, r0
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	1ad3      	subs	r3, r2, r3
 800a85e:	68ba      	ldr	r2, [r7, #8]
 800a860:	429a      	cmp	r2, r3
 800a862:	d302      	bcc.n	800a86a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d116      	bne.n	800a898 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2200      	movs	r2, #0
 800a86e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2220      	movs	r2, #32
 800a874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a884:	f043 0220 	orr.w	r2, r3, #32
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2200      	movs	r2, #0
 800a890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	e007      	b.n	800a8a8 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	695b      	ldr	r3, [r3, #20]
 800a89e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8a2:	2b80      	cmp	r3, #128	; 0x80
 800a8a4:	d1ca      	bne.n	800a83c <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a8bc:	e02d      	b.n	800a91a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f000 f88d 	bl	800a9de <I2C_IsAcknowledgeFailed>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d001      	beq.n	800a8ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e02d      	b.n	800a92a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d4:	d021      	beq.n	800a91a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8d6:	f7fb ff53 	bl	8006780 <HAL_GetTick>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	1ad3      	subs	r3, r2, r3
 800a8e0:	68ba      	ldr	r2, [r7, #8]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d302      	bcc.n	800a8ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d116      	bne.n	800a91a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2220      	movs	r2, #32
 800a8f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a906:	f043 0220 	orr.w	r2, r3, #32
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2200      	movs	r2, #0
 800a912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	e007      	b.n	800a92a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	695b      	ldr	r3, [r3, #20]
 800a920:	f003 0304 	and.w	r3, r3, #4
 800a924:	2b04      	cmp	r3, #4
 800a926:	d1ca      	bne.n	800a8be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b084      	sub	sp, #16
 800a936:	af00      	add	r7, sp, #0
 800a938:	60f8      	str	r0, [r7, #12]
 800a93a:	60b9      	str	r1, [r7, #8]
 800a93c:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a93e:	e042      	b.n	800a9c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	695b      	ldr	r3, [r3, #20]
 800a946:	f003 0310 	and.w	r3, r3, #16
 800a94a:	2b10      	cmp	r3, #16
 800a94c:	d119      	bne.n	800a982 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f06f 0210 	mvn.w	r2, #16
 800a956:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2200      	movs	r2, #0
 800a95c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2220      	movs	r2, #32
 800a962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2200      	movs	r2, #0
 800a96a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2200      	movs	r2, #0
 800a97a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	e029      	b.n	800a9d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a982:	f7fb fefd 	bl	8006780 <HAL_GetTick>
 800a986:	4602      	mov	r2, r0
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	1ad3      	subs	r3, r2, r3
 800a98c:	68ba      	ldr	r2, [r7, #8]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d302      	bcc.n	800a998 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d116      	bne.n	800a9c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2200      	movs	r2, #0
 800a99c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2220      	movs	r2, #32
 800a9a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b2:	f043 0220 	orr.w	r2, r3, #32
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e007      	b.n	800a9d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	695b      	ldr	r3, [r3, #20]
 800a9cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9d0:	2b40      	cmp	r3, #64	; 0x40
 800a9d2:	d1b5      	bne.n	800a940 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3710      	adds	r7, #16
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a9de:	b480      	push	{r7}
 800a9e0:	b083      	sub	sp, #12
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	695b      	ldr	r3, [r3, #20]
 800a9ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9f4:	d11b      	bne.n	800aa2e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a9fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2220      	movs	r2, #32
 800aa0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa1a:	f043 0204 	orr.w	r2, r3, #4
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e000      	b.n	800aa30 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800aa2e:	2300      	movs	r3, #0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	370c      	adds	r7, #12
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa48:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800aa4c:	d103      	bne.n	800aa56 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2201      	movs	r2, #1
 800aa52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800aa54:	e007      	b.n	800aa66 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa5a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800aa5e:	d102      	bne.n	800aa66 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2208      	movs	r2, #8
 800aa64:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800aa66:	bf00      	nop
 800aa68:	370c      	adds	r7, #12
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
	...

0800aa74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d101      	bne.n	800aa88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	e0ca      	b.n	800ac1e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aa88:	4b67      	ldr	r3, [pc, #412]	; (800ac28 <HAL_RCC_ClockConfig+0x1b4>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f003 030f 	and.w	r3, r3, #15
 800aa90:	683a      	ldr	r2, [r7, #0]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d90c      	bls.n	800aab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa96:	4b64      	ldr	r3, [pc, #400]	; (800ac28 <HAL_RCC_ClockConfig+0x1b4>)
 800aa98:	683a      	ldr	r2, [r7, #0]
 800aa9a:	b2d2      	uxtb	r2, r2
 800aa9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa9e:	4b62      	ldr	r3, [pc, #392]	; (800ac28 <HAL_RCC_ClockConfig+0x1b4>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f003 030f 	and.w	r3, r3, #15
 800aaa6:	683a      	ldr	r2, [r7, #0]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d001      	beq.n	800aab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800aaac:	2301      	movs	r3, #1
 800aaae:	e0b6      	b.n	800ac1e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f003 0302 	and.w	r3, r3, #2
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d020      	beq.n	800aafe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f003 0304 	and.w	r3, r3, #4
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d005      	beq.n	800aad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aac8:	4b58      	ldr	r3, [pc, #352]	; (800ac2c <HAL_RCC_ClockConfig+0x1b8>)
 800aaca:	689b      	ldr	r3, [r3, #8]
 800aacc:	4a57      	ldr	r2, [pc, #348]	; (800ac2c <HAL_RCC_ClockConfig+0x1b8>)
 800aace:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800aad2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f003 0308 	and.w	r3, r3, #8
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d005      	beq.n	800aaec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800aae0:	4b52      	ldr	r3, [pc, #328]	; (800ac2c <HAL_RCC_ClockConfig+0x1b8>)
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	4a51      	ldr	r2, [pc, #324]	; (800ac2c <HAL_RCC_ClockConfig+0x1b8>)
 800aae6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800aaea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aaec:	4b4f      	ldr	r3, [pc, #316]	; (800ac2c <HAL_RCC_ClockConfig+0x1b8>)
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	494c      	ldr	r1, [pc, #304]	; (800ac2c <HAL_RCC_ClockConfig+0x1b8>)
 800aafa:	4313      	orrs	r3, r2
 800aafc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f003 0301 	and.w	r3, r3, #1
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d044      	beq.n	800ab94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d107      	bne.n	800ab22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab12:	4b46      	ldr	r3, [pc, #280]	; (800ac2c <HAL_RCC_ClockConfig+0x1b8>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d119      	bne.n	800ab52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e07d      	b.n	800ac1e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	d003      	beq.n	800ab32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ab2e:	2b03      	cmp	r3, #3
 800ab30:	d107      	bne.n	800ab42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab32:	4b3e      	ldr	r3, [pc, #248]	; (800ac2c <HAL_RCC_ClockConfig+0x1b8>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d109      	bne.n	800ab52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e06d      	b.n	800ac1e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab42:	4b3a      	ldr	r3, [pc, #232]	; (800ac2c <HAL_RCC_ClockConfig+0x1b8>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f003 0302 	and.w	r3, r3, #2
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d101      	bne.n	800ab52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e065      	b.n	800ac1e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ab52:	4b36      	ldr	r3, [pc, #216]	; (800ac2c <HAL_RCC_ClockConfig+0x1b8>)
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	f023 0203 	bic.w	r2, r3, #3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	4933      	ldr	r1, [pc, #204]	; (800ac2c <HAL_RCC_ClockConfig+0x1b8>)
 800ab60:	4313      	orrs	r3, r2
 800ab62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ab64:	f7fb fe0c 	bl	8006780 <HAL_GetTick>
 800ab68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab6a:	e00a      	b.n	800ab82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab6c:	f7fb fe08 	bl	8006780 <HAL_GetTick>
 800ab70:	4602      	mov	r2, r0
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	1ad3      	subs	r3, r2, r3
 800ab76:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d901      	bls.n	800ab82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ab7e:	2303      	movs	r3, #3
 800ab80:	e04d      	b.n	800ac1e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab82:	4b2a      	ldr	r3, [pc, #168]	; (800ac2c <HAL_RCC_ClockConfig+0x1b8>)
 800ab84:	689b      	ldr	r3, [r3, #8]
 800ab86:	f003 020c 	and.w	r2, r3, #12
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d1eb      	bne.n	800ab6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ab94:	4b24      	ldr	r3, [pc, #144]	; (800ac28 <HAL_RCC_ClockConfig+0x1b4>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f003 030f 	and.w	r3, r3, #15
 800ab9c:	683a      	ldr	r2, [r7, #0]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d20c      	bcs.n	800abbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aba2:	4b21      	ldr	r3, [pc, #132]	; (800ac28 <HAL_RCC_ClockConfig+0x1b4>)
 800aba4:	683a      	ldr	r2, [r7, #0]
 800aba6:	b2d2      	uxtb	r2, r2
 800aba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800abaa:	4b1f      	ldr	r3, [pc, #124]	; (800ac28 <HAL_RCC_ClockConfig+0x1b4>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f003 030f 	and.w	r3, r3, #15
 800abb2:	683a      	ldr	r2, [r7, #0]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d001      	beq.n	800abbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800abb8:	2301      	movs	r3, #1
 800abba:	e030      	b.n	800ac1e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f003 0304 	and.w	r3, r3, #4
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d008      	beq.n	800abda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800abc8:	4b18      	ldr	r3, [pc, #96]	; (800ac2c <HAL_RCC_ClockConfig+0x1b8>)
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	4915      	ldr	r1, [pc, #84]	; (800ac2c <HAL_RCC_ClockConfig+0x1b8>)
 800abd6:	4313      	orrs	r3, r2
 800abd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f003 0308 	and.w	r3, r3, #8
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d009      	beq.n	800abfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800abe6:	4b11      	ldr	r3, [pc, #68]	; (800ac2c <HAL_RCC_ClockConfig+0x1b8>)
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	00db      	lsls	r3, r3, #3
 800abf4:	490d      	ldr	r1, [pc, #52]	; (800ac2c <HAL_RCC_ClockConfig+0x1b8>)
 800abf6:	4313      	orrs	r3, r2
 800abf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800abfa:	f000 f81d 	bl	800ac38 <HAL_RCC_GetSysClockFreq>
 800abfe:	4602      	mov	r2, r0
 800ac00:	4b0a      	ldr	r3, [pc, #40]	; (800ac2c <HAL_RCC_ClockConfig+0x1b8>)
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	091b      	lsrs	r3, r3, #4
 800ac06:	f003 030f 	and.w	r3, r3, #15
 800ac0a:	4909      	ldr	r1, [pc, #36]	; (800ac30 <HAL_RCC_ClockConfig+0x1bc>)
 800ac0c:	5ccb      	ldrb	r3, [r1, r3]
 800ac0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac12:	4a08      	ldr	r2, [pc, #32]	; (800ac34 <HAL_RCC_ClockConfig+0x1c0>)
 800ac14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800ac16:	200f      	movs	r0, #15
 800ac18:	f7fb fd6e 	bl	80066f8 <HAL_InitTick>

  return HAL_OK;
 800ac1c:	2300      	movs	r3, #0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3710      	adds	r7, #16
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	40023c00 	.word	0x40023c00
 800ac2c:	40023800 	.word	0x40023800
 800ac30:	0800d9c0 	.word	0x0800d9c0
 800ac34:	200001ac 	.word	0x200001ac

0800ac38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ac38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac3c:	b090      	sub	sp, #64	; 0x40
 800ac3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ac40:	2300      	movs	r3, #0
 800ac42:	637b      	str	r3, [r7, #52]	; 0x34
 800ac44:	2300      	movs	r3, #0
 800ac46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac48:	2300      	movs	r3, #0
 800ac4a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ac50:	4b59      	ldr	r3, [pc, #356]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	f003 030c 	and.w	r3, r3, #12
 800ac58:	2b08      	cmp	r3, #8
 800ac5a:	d00d      	beq.n	800ac78 <HAL_RCC_GetSysClockFreq+0x40>
 800ac5c:	2b08      	cmp	r3, #8
 800ac5e:	f200 80a1 	bhi.w	800ada4 <HAL_RCC_GetSysClockFreq+0x16c>
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d002      	beq.n	800ac6c <HAL_RCC_GetSysClockFreq+0x34>
 800ac66:	2b04      	cmp	r3, #4
 800ac68:	d003      	beq.n	800ac72 <HAL_RCC_GetSysClockFreq+0x3a>
 800ac6a:	e09b      	b.n	800ada4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ac6c:	4b53      	ldr	r3, [pc, #332]	; (800adbc <HAL_RCC_GetSysClockFreq+0x184>)
 800ac6e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800ac70:	e09b      	b.n	800adaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ac72:	4b53      	ldr	r3, [pc, #332]	; (800adc0 <HAL_RCC_GetSysClockFreq+0x188>)
 800ac74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ac76:	e098      	b.n	800adaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ac78:	4b4f      	ldr	r3, [pc, #316]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac80:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ac82:	4b4d      	ldr	r3, [pc, #308]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d028      	beq.n	800ace0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ac8e:	4b4a      	ldr	r3, [pc, #296]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	099b      	lsrs	r3, r3, #6
 800ac94:	2200      	movs	r2, #0
 800ac96:	623b      	str	r3, [r7, #32]
 800ac98:	627a      	str	r2, [r7, #36]	; 0x24
 800ac9a:	6a3b      	ldr	r3, [r7, #32]
 800ac9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800aca0:	2100      	movs	r1, #0
 800aca2:	4b47      	ldr	r3, [pc, #284]	; (800adc0 <HAL_RCC_GetSysClockFreq+0x188>)
 800aca4:	fb03 f201 	mul.w	r2, r3, r1
 800aca8:	2300      	movs	r3, #0
 800acaa:	fb00 f303 	mul.w	r3, r0, r3
 800acae:	4413      	add	r3, r2
 800acb0:	4a43      	ldr	r2, [pc, #268]	; (800adc0 <HAL_RCC_GetSysClockFreq+0x188>)
 800acb2:	fba0 1202 	umull	r1, r2, r0, r2
 800acb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800acb8:	460a      	mov	r2, r1
 800acba:	62ba      	str	r2, [r7, #40]	; 0x28
 800acbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acbe:	4413      	add	r3, r2
 800acc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acc4:	2200      	movs	r2, #0
 800acc6:	61bb      	str	r3, [r7, #24]
 800acc8:	61fa      	str	r2, [r7, #28]
 800acca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800acce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800acd2:	f7f5 fe9b 	bl	8000a0c <__aeabi_uldivmod>
 800acd6:	4602      	mov	r2, r0
 800acd8:	460b      	mov	r3, r1
 800acda:	4613      	mov	r3, r2
 800acdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acde:	e053      	b.n	800ad88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ace0:	4b35      	ldr	r3, [pc, #212]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	099b      	lsrs	r3, r3, #6
 800ace6:	2200      	movs	r2, #0
 800ace8:	613b      	str	r3, [r7, #16]
 800acea:	617a      	str	r2, [r7, #20]
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800acf2:	f04f 0b00 	mov.w	fp, #0
 800acf6:	4652      	mov	r2, sl
 800acf8:	465b      	mov	r3, fp
 800acfa:	f04f 0000 	mov.w	r0, #0
 800acfe:	f04f 0100 	mov.w	r1, #0
 800ad02:	0159      	lsls	r1, r3, #5
 800ad04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ad08:	0150      	lsls	r0, r2, #5
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	ebb2 080a 	subs.w	r8, r2, sl
 800ad12:	eb63 090b 	sbc.w	r9, r3, fp
 800ad16:	f04f 0200 	mov.w	r2, #0
 800ad1a:	f04f 0300 	mov.w	r3, #0
 800ad1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800ad22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800ad26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800ad2a:	ebb2 0408 	subs.w	r4, r2, r8
 800ad2e:	eb63 0509 	sbc.w	r5, r3, r9
 800ad32:	f04f 0200 	mov.w	r2, #0
 800ad36:	f04f 0300 	mov.w	r3, #0
 800ad3a:	00eb      	lsls	r3, r5, #3
 800ad3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ad40:	00e2      	lsls	r2, r4, #3
 800ad42:	4614      	mov	r4, r2
 800ad44:	461d      	mov	r5, r3
 800ad46:	eb14 030a 	adds.w	r3, r4, sl
 800ad4a:	603b      	str	r3, [r7, #0]
 800ad4c:	eb45 030b 	adc.w	r3, r5, fp
 800ad50:	607b      	str	r3, [r7, #4]
 800ad52:	f04f 0200 	mov.w	r2, #0
 800ad56:	f04f 0300 	mov.w	r3, #0
 800ad5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ad5e:	4629      	mov	r1, r5
 800ad60:	028b      	lsls	r3, r1, #10
 800ad62:	4621      	mov	r1, r4
 800ad64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ad68:	4621      	mov	r1, r4
 800ad6a:	028a      	lsls	r2, r1, #10
 800ad6c:	4610      	mov	r0, r2
 800ad6e:	4619      	mov	r1, r3
 800ad70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad72:	2200      	movs	r2, #0
 800ad74:	60bb      	str	r3, [r7, #8]
 800ad76:	60fa      	str	r2, [r7, #12]
 800ad78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ad7c:	f7f5 fe46 	bl	8000a0c <__aeabi_uldivmod>
 800ad80:	4602      	mov	r2, r0
 800ad82:	460b      	mov	r3, r1
 800ad84:	4613      	mov	r3, r2
 800ad86:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ad88:	4b0b      	ldr	r3, [pc, #44]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	0c1b      	lsrs	r3, r3, #16
 800ad8e:	f003 0303 	and.w	r3, r3, #3
 800ad92:	3301      	adds	r3, #1
 800ad94:	005b      	lsls	r3, r3, #1
 800ad96:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800ad98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ad9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ada0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ada2:	e002      	b.n	800adaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ada4:	4b05      	ldr	r3, [pc, #20]	; (800adbc <HAL_RCC_GetSysClockFreq+0x184>)
 800ada6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ada8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800adaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800adac:	4618      	mov	r0, r3
 800adae:	3740      	adds	r7, #64	; 0x40
 800adb0:	46bd      	mov	sp, r7
 800adb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800adb6:	bf00      	nop
 800adb8:	40023800 	.word	0x40023800
 800adbc:	00f42400 	.word	0x00f42400
 800adc0:	017d7840 	.word	0x017d7840

0800adc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800adc4:	b480      	push	{r7}
 800adc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800adc8:	4b03      	ldr	r3, [pc, #12]	; (800add8 <HAL_RCC_GetHCLKFreq+0x14>)
 800adca:	681b      	ldr	r3, [r3, #0]
}
 800adcc:	4618      	mov	r0, r3
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop
 800add8:	200001ac 	.word	0x200001ac

0800addc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ade0:	f7ff fff0 	bl	800adc4 <HAL_RCC_GetHCLKFreq>
 800ade4:	4602      	mov	r2, r0
 800ade6:	4b05      	ldr	r3, [pc, #20]	; (800adfc <HAL_RCC_GetPCLK1Freq+0x20>)
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	0a9b      	lsrs	r3, r3, #10
 800adec:	f003 0307 	and.w	r3, r3, #7
 800adf0:	4903      	ldr	r1, [pc, #12]	; (800ae00 <HAL_RCC_GetPCLK1Freq+0x24>)
 800adf2:	5ccb      	ldrb	r3, [r1, r3]
 800adf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	40023800 	.word	0x40023800
 800ae00:	0800d9d0 	.word	0x0800d9d0

0800ae04 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b086      	sub	sp, #24
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f003 0301 	and.w	r3, r3, #1
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d075      	beq.n	800af08 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ae1c:	4b88      	ldr	r3, [pc, #544]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	f003 030c 	and.w	r3, r3, #12
 800ae24:	2b04      	cmp	r3, #4
 800ae26:	d00c      	beq.n	800ae42 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ae28:	4b85      	ldr	r3, [pc, #532]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ae30:	2b08      	cmp	r3, #8
 800ae32:	d112      	bne.n	800ae5a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ae34:	4b82      	ldr	r3, [pc, #520]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae40:	d10b      	bne.n	800ae5a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae42:	4b7f      	ldr	r3, [pc, #508]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d05b      	beq.n	800af06 <HAL_RCC_OscConfig+0x102>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d157      	bne.n	800af06 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800ae56:	2301      	movs	r3, #1
 800ae58:	e20a      	b.n	800b270 <HAL_RCC_OscConfig+0x46c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae62:	d106      	bne.n	800ae72 <HAL_RCC_OscConfig+0x6e>
 800ae64:	4b76      	ldr	r3, [pc, #472]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4a75      	ldr	r2, [pc, #468]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800ae6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae6e:	6013      	str	r3, [r2, #0]
 800ae70:	e01d      	b.n	800aeae <HAL_RCC_OscConfig+0xaa>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae7a:	d10c      	bne.n	800ae96 <HAL_RCC_OscConfig+0x92>
 800ae7c:	4b70      	ldr	r3, [pc, #448]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a6f      	ldr	r2, [pc, #444]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800ae82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ae86:	6013      	str	r3, [r2, #0]
 800ae88:	4b6d      	ldr	r3, [pc, #436]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a6c      	ldr	r2, [pc, #432]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800ae8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae92:	6013      	str	r3, [r2, #0]
 800ae94:	e00b      	b.n	800aeae <HAL_RCC_OscConfig+0xaa>
 800ae96:	4b6a      	ldr	r3, [pc, #424]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a69      	ldr	r2, [pc, #420]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800ae9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aea0:	6013      	str	r3, [r2, #0]
 800aea2:	4b67      	ldr	r3, [pc, #412]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a66      	ldr	r2, [pc, #408]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800aea8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aeac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d013      	beq.n	800aede <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aeb6:	f7fb fc63 	bl	8006780 <HAL_GetTick>
 800aeba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aebc:	e008      	b.n	800aed0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aebe:	f7fb fc5f 	bl	8006780 <HAL_GetTick>
 800aec2:	4602      	mov	r2, r0
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	1ad3      	subs	r3, r2, r3
 800aec8:	2b64      	cmp	r3, #100	; 0x64
 800aeca:	d901      	bls.n	800aed0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800aecc:	2303      	movs	r3, #3
 800aece:	e1cf      	b.n	800b270 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aed0:	4b5b      	ldr	r3, [pc, #364]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d0f0      	beq.n	800aebe <HAL_RCC_OscConfig+0xba>
 800aedc:	e014      	b.n	800af08 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aede:	f7fb fc4f 	bl	8006780 <HAL_GetTick>
 800aee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aee4:	e008      	b.n	800aef8 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aee6:	f7fb fc4b 	bl	8006780 <HAL_GetTick>
 800aeea:	4602      	mov	r2, r0
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	1ad3      	subs	r3, r2, r3
 800aef0:	2b64      	cmp	r3, #100	; 0x64
 800aef2:	d901      	bls.n	800aef8 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800aef4:	2303      	movs	r3, #3
 800aef6:	e1bb      	b.n	800b270 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aef8:	4b51      	ldr	r3, [pc, #324]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af00:	2b00      	cmp	r3, #0
 800af02:	d1f0      	bne.n	800aee6 <HAL_RCC_OscConfig+0xe2>
 800af04:	e000      	b.n	800af08 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af06:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f003 0302 	and.w	r3, r3, #2
 800af10:	2b00      	cmp	r3, #0
 800af12:	d063      	beq.n	800afdc <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800af14:	4b4a      	ldr	r3, [pc, #296]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	f003 030c 	and.w	r3, r3, #12
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d00b      	beq.n	800af38 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800af20:	4b47      	ldr	r3, [pc, #284]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800af28:	2b08      	cmp	r3, #8
 800af2a:	d11c      	bne.n	800af66 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800af2c:	4b44      	ldr	r3, [pc, #272]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af34:	2b00      	cmp	r3, #0
 800af36:	d116      	bne.n	800af66 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800af38:	4b41      	ldr	r3, [pc, #260]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f003 0302 	and.w	r3, r3, #2
 800af40:	2b00      	cmp	r3, #0
 800af42:	d005      	beq.n	800af50 <HAL_RCC_OscConfig+0x14c>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d001      	beq.n	800af50 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800af4c:	2301      	movs	r3, #1
 800af4e:	e18f      	b.n	800b270 <HAL_RCC_OscConfig+0x46c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af50:	4b3b      	ldr	r3, [pc, #236]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	00db      	lsls	r3, r3, #3
 800af5e:	4938      	ldr	r1, [pc, #224]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800af60:	4313      	orrs	r3, r2
 800af62:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800af64:	e03a      	b.n	800afdc <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d020      	beq.n	800afb0 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800af6e:	4b35      	ldr	r3, [pc, #212]	; (800b044 <HAL_RCC_OscConfig+0x240>)
 800af70:	2201      	movs	r2, #1
 800af72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af74:	f7fb fc04 	bl	8006780 <HAL_GetTick>
 800af78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af7a:	e008      	b.n	800af8e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800af7c:	f7fb fc00 	bl	8006780 <HAL_GetTick>
 800af80:	4602      	mov	r2, r0
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	1ad3      	subs	r3, r2, r3
 800af86:	2b02      	cmp	r3, #2
 800af88:	d901      	bls.n	800af8e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800af8a:	2303      	movs	r3, #3
 800af8c:	e170      	b.n	800b270 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af8e:	4b2c      	ldr	r3, [pc, #176]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f003 0302 	and.w	r3, r3, #2
 800af96:	2b00      	cmp	r3, #0
 800af98:	d0f0      	beq.n	800af7c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af9a:	4b29      	ldr	r3, [pc, #164]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	691b      	ldr	r3, [r3, #16]
 800afa6:	00db      	lsls	r3, r3, #3
 800afa8:	4925      	ldr	r1, [pc, #148]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800afaa:	4313      	orrs	r3, r2
 800afac:	600b      	str	r3, [r1, #0]
 800afae:	e015      	b.n	800afdc <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800afb0:	4b24      	ldr	r3, [pc, #144]	; (800b044 <HAL_RCC_OscConfig+0x240>)
 800afb2:	2200      	movs	r2, #0
 800afb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afb6:	f7fb fbe3 	bl	8006780 <HAL_GetTick>
 800afba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800afbc:	e008      	b.n	800afd0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800afbe:	f7fb fbdf 	bl	8006780 <HAL_GetTick>
 800afc2:	4602      	mov	r2, r0
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	1ad3      	subs	r3, r2, r3
 800afc8:	2b02      	cmp	r3, #2
 800afca:	d901      	bls.n	800afd0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800afcc:	2303      	movs	r3, #3
 800afce:	e14f      	b.n	800b270 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800afd0:	4b1b      	ldr	r3, [pc, #108]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f003 0302 	and.w	r3, r3, #2
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d1f0      	bne.n	800afbe <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f003 0308 	and.w	r3, r3, #8
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d037      	beq.n	800b058 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	695b      	ldr	r3, [r3, #20]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d016      	beq.n	800b01e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aff0:	4b15      	ldr	r3, [pc, #84]	; (800b048 <HAL_RCC_OscConfig+0x244>)
 800aff2:	2201      	movs	r2, #1
 800aff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aff6:	f7fb fbc3 	bl	8006780 <HAL_GetTick>
 800affa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800affc:	e008      	b.n	800b010 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800affe:	f7fb fbbf 	bl	8006780 <HAL_GetTick>
 800b002:	4602      	mov	r2, r0
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	1ad3      	subs	r3, r2, r3
 800b008:	2b02      	cmp	r3, #2
 800b00a:	d901      	bls.n	800b010 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800b00c:	2303      	movs	r3, #3
 800b00e:	e12f      	b.n	800b270 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b010:	4b0b      	ldr	r3, [pc, #44]	; (800b040 <HAL_RCC_OscConfig+0x23c>)
 800b012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b014:	f003 0302 	and.w	r3, r3, #2
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d0f0      	beq.n	800affe <HAL_RCC_OscConfig+0x1fa>
 800b01c:	e01c      	b.n	800b058 <HAL_RCC_OscConfig+0x254>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b01e:	4b0a      	ldr	r3, [pc, #40]	; (800b048 <HAL_RCC_OscConfig+0x244>)
 800b020:	2200      	movs	r2, #0
 800b022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b024:	f7fb fbac 	bl	8006780 <HAL_GetTick>
 800b028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b02a:	e00f      	b.n	800b04c <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b02c:	f7fb fba8 	bl	8006780 <HAL_GetTick>
 800b030:	4602      	mov	r2, r0
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	1ad3      	subs	r3, r2, r3
 800b036:	2b02      	cmp	r3, #2
 800b038:	d908      	bls.n	800b04c <HAL_RCC_OscConfig+0x248>
        {
          return HAL_TIMEOUT;
 800b03a:	2303      	movs	r3, #3
 800b03c:	e118      	b.n	800b270 <HAL_RCC_OscConfig+0x46c>
 800b03e:	bf00      	nop
 800b040:	40023800 	.word	0x40023800
 800b044:	42470000 	.word	0x42470000
 800b048:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b04c:	4b8a      	ldr	r3, [pc, #552]	; (800b278 <HAL_RCC_OscConfig+0x474>)
 800b04e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b050:	f003 0302 	and.w	r3, r3, #2
 800b054:	2b00      	cmp	r3, #0
 800b056:	d1e9      	bne.n	800b02c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f003 0304 	and.w	r3, r3, #4
 800b060:	2b00      	cmp	r3, #0
 800b062:	f000 8097 	beq.w	800b194 <HAL_RCC_OscConfig+0x390>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b066:	2300      	movs	r3, #0
 800b068:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b06a:	4b83      	ldr	r3, [pc, #524]	; (800b278 <HAL_RCC_OscConfig+0x474>)
 800b06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b072:	2b00      	cmp	r3, #0
 800b074:	d10f      	bne.n	800b096 <HAL_RCC_OscConfig+0x292>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b076:	2300      	movs	r3, #0
 800b078:	60fb      	str	r3, [r7, #12]
 800b07a:	4b7f      	ldr	r3, [pc, #508]	; (800b278 <HAL_RCC_OscConfig+0x474>)
 800b07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07e:	4a7e      	ldr	r2, [pc, #504]	; (800b278 <HAL_RCC_OscConfig+0x474>)
 800b080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b084:	6413      	str	r3, [r2, #64]	; 0x40
 800b086:	4b7c      	ldr	r3, [pc, #496]	; (800b278 <HAL_RCC_OscConfig+0x474>)
 800b088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b08e:	60fb      	str	r3, [r7, #12]
 800b090:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b092:	2301      	movs	r3, #1
 800b094:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b096:	4b79      	ldr	r3, [pc, #484]	; (800b27c <HAL_RCC_OscConfig+0x478>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d118      	bne.n	800b0d4 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b0a2:	4b76      	ldr	r3, [pc, #472]	; (800b27c <HAL_RCC_OscConfig+0x478>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a75      	ldr	r2, [pc, #468]	; (800b27c <HAL_RCC_OscConfig+0x478>)
 800b0a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b0ae:	f7fb fb67 	bl	8006780 <HAL_GetTick>
 800b0b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0b4:	e008      	b.n	800b0c8 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0b6:	f7fb fb63 	bl	8006780 <HAL_GetTick>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	1ad3      	subs	r3, r2, r3
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	d901      	bls.n	800b0c8 <HAL_RCC_OscConfig+0x2c4>
        {
          return HAL_TIMEOUT;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	e0d3      	b.n	800b270 <HAL_RCC_OscConfig+0x46c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0c8:	4b6c      	ldr	r3, [pc, #432]	; (800b27c <HAL_RCC_OscConfig+0x478>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d0f0      	beq.n	800b0b6 <HAL_RCC_OscConfig+0x2b2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d106      	bne.n	800b0ea <HAL_RCC_OscConfig+0x2e6>
 800b0dc:	4b66      	ldr	r3, [pc, #408]	; (800b278 <HAL_RCC_OscConfig+0x474>)
 800b0de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0e0:	4a65      	ldr	r2, [pc, #404]	; (800b278 <HAL_RCC_OscConfig+0x474>)
 800b0e2:	f043 0301 	orr.w	r3, r3, #1
 800b0e6:	6713      	str	r3, [r2, #112]	; 0x70
 800b0e8:	e01c      	b.n	800b124 <HAL_RCC_OscConfig+0x320>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	689b      	ldr	r3, [r3, #8]
 800b0ee:	2b05      	cmp	r3, #5
 800b0f0:	d10c      	bne.n	800b10c <HAL_RCC_OscConfig+0x308>
 800b0f2:	4b61      	ldr	r3, [pc, #388]	; (800b278 <HAL_RCC_OscConfig+0x474>)
 800b0f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0f6:	4a60      	ldr	r2, [pc, #384]	; (800b278 <HAL_RCC_OscConfig+0x474>)
 800b0f8:	f043 0304 	orr.w	r3, r3, #4
 800b0fc:	6713      	str	r3, [r2, #112]	; 0x70
 800b0fe:	4b5e      	ldr	r3, [pc, #376]	; (800b278 <HAL_RCC_OscConfig+0x474>)
 800b100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b102:	4a5d      	ldr	r2, [pc, #372]	; (800b278 <HAL_RCC_OscConfig+0x474>)
 800b104:	f043 0301 	orr.w	r3, r3, #1
 800b108:	6713      	str	r3, [r2, #112]	; 0x70
 800b10a:	e00b      	b.n	800b124 <HAL_RCC_OscConfig+0x320>
 800b10c:	4b5a      	ldr	r3, [pc, #360]	; (800b278 <HAL_RCC_OscConfig+0x474>)
 800b10e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b110:	4a59      	ldr	r2, [pc, #356]	; (800b278 <HAL_RCC_OscConfig+0x474>)
 800b112:	f023 0301 	bic.w	r3, r3, #1
 800b116:	6713      	str	r3, [r2, #112]	; 0x70
 800b118:	4b57      	ldr	r3, [pc, #348]	; (800b278 <HAL_RCC_OscConfig+0x474>)
 800b11a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b11c:	4a56      	ldr	r2, [pc, #344]	; (800b278 <HAL_RCC_OscConfig+0x474>)
 800b11e:	f023 0304 	bic.w	r3, r3, #4
 800b122:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d015      	beq.n	800b158 <HAL_RCC_OscConfig+0x354>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b12c:	f7fb fb28 	bl	8006780 <HAL_GetTick>
 800b130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b132:	e00a      	b.n	800b14a <HAL_RCC_OscConfig+0x346>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b134:	f7fb fb24 	bl	8006780 <HAL_GetTick>
 800b138:	4602      	mov	r2, r0
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	1ad3      	subs	r3, r2, r3
 800b13e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b142:	4293      	cmp	r3, r2
 800b144:	d901      	bls.n	800b14a <HAL_RCC_OscConfig+0x346>
        {
          return HAL_TIMEOUT;
 800b146:	2303      	movs	r3, #3
 800b148:	e092      	b.n	800b270 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b14a:	4b4b      	ldr	r3, [pc, #300]	; (800b278 <HAL_RCC_OscConfig+0x474>)
 800b14c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b14e:	f003 0302 	and.w	r3, r3, #2
 800b152:	2b00      	cmp	r3, #0
 800b154:	d0ee      	beq.n	800b134 <HAL_RCC_OscConfig+0x330>
 800b156:	e014      	b.n	800b182 <HAL_RCC_OscConfig+0x37e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b158:	f7fb fb12 	bl	8006780 <HAL_GetTick>
 800b15c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b15e:	e00a      	b.n	800b176 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b160:	f7fb fb0e 	bl	8006780 <HAL_GetTick>
 800b164:	4602      	mov	r2, r0
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	1ad3      	subs	r3, r2, r3
 800b16a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b16e:	4293      	cmp	r3, r2
 800b170:	d901      	bls.n	800b176 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800b172:	2303      	movs	r3, #3
 800b174:	e07c      	b.n	800b270 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b176:	4b40      	ldr	r3, [pc, #256]	; (800b278 <HAL_RCC_OscConfig+0x474>)
 800b178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b17a:	f003 0302 	and.w	r3, r3, #2
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d1ee      	bne.n	800b160 <HAL_RCC_OscConfig+0x35c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b182:	7dfb      	ldrb	r3, [r7, #23]
 800b184:	2b01      	cmp	r3, #1
 800b186:	d105      	bne.n	800b194 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b188:	4b3b      	ldr	r3, [pc, #236]	; (800b278 <HAL_RCC_OscConfig+0x474>)
 800b18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18c:	4a3a      	ldr	r2, [pc, #232]	; (800b278 <HAL_RCC_OscConfig+0x474>)
 800b18e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b192:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	699b      	ldr	r3, [r3, #24]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d068      	beq.n	800b26e <HAL_RCC_OscConfig+0x46a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b19c:	4b36      	ldr	r3, [pc, #216]	; (800b278 <HAL_RCC_OscConfig+0x474>)
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	f003 030c 	and.w	r3, r3, #12
 800b1a4:	2b08      	cmp	r3, #8
 800b1a6:	d060      	beq.n	800b26a <HAL_RCC_OscConfig+0x466>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	699b      	ldr	r3, [r3, #24]
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	d145      	bne.n	800b23c <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1b0:	4b33      	ldr	r3, [pc, #204]	; (800b280 <HAL_RCC_OscConfig+0x47c>)
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1b6:	f7fb fae3 	bl	8006780 <HAL_GetTick>
 800b1ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b1bc:	e008      	b.n	800b1d0 <HAL_RCC_OscConfig+0x3cc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b1be:	f7fb fadf 	bl	8006780 <HAL_GetTick>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	1ad3      	subs	r3, r2, r3
 800b1c8:	2b02      	cmp	r3, #2
 800b1ca:	d901      	bls.n	800b1d0 <HAL_RCC_OscConfig+0x3cc>
          {
            return HAL_TIMEOUT;
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	e04f      	b.n	800b270 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b1d0:	4b29      	ldr	r3, [pc, #164]	; (800b278 <HAL_RCC_OscConfig+0x474>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d1f0      	bne.n	800b1be <HAL_RCC_OscConfig+0x3ba>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	69da      	ldr	r2, [r3, #28]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6a1b      	ldr	r3, [r3, #32]
 800b1e4:	431a      	orrs	r2, r3
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ea:	019b      	lsls	r3, r3, #6
 800b1ec:	431a      	orrs	r2, r3
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1f2:	085b      	lsrs	r3, r3, #1
 800b1f4:	3b01      	subs	r3, #1
 800b1f6:	041b      	lsls	r3, r3, #16
 800b1f8:	431a      	orrs	r2, r3
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1fe:	061b      	lsls	r3, r3, #24
 800b200:	431a      	orrs	r2, r3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b206:	071b      	lsls	r3, r3, #28
 800b208:	491b      	ldr	r1, [pc, #108]	; (800b278 <HAL_RCC_OscConfig+0x474>)
 800b20a:	4313      	orrs	r3, r2
 800b20c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b20e:	4b1c      	ldr	r3, [pc, #112]	; (800b280 <HAL_RCC_OscConfig+0x47c>)
 800b210:	2201      	movs	r2, #1
 800b212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b214:	f7fb fab4 	bl	8006780 <HAL_GetTick>
 800b218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b21a:	e008      	b.n	800b22e <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b21c:	f7fb fab0 	bl	8006780 <HAL_GetTick>
 800b220:	4602      	mov	r2, r0
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	1ad3      	subs	r3, r2, r3
 800b226:	2b02      	cmp	r3, #2
 800b228:	d901      	bls.n	800b22e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b22a:	2303      	movs	r3, #3
 800b22c:	e020      	b.n	800b270 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b22e:	4b12      	ldr	r3, [pc, #72]	; (800b278 <HAL_RCC_OscConfig+0x474>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b236:	2b00      	cmp	r3, #0
 800b238:	d0f0      	beq.n	800b21c <HAL_RCC_OscConfig+0x418>
 800b23a:	e018      	b.n	800b26e <HAL_RCC_OscConfig+0x46a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b23c:	4b10      	ldr	r3, [pc, #64]	; (800b280 <HAL_RCC_OscConfig+0x47c>)
 800b23e:	2200      	movs	r2, #0
 800b240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b242:	f7fb fa9d 	bl	8006780 <HAL_GetTick>
 800b246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b248:	e008      	b.n	800b25c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b24a:	f7fb fa99 	bl	8006780 <HAL_GetTick>
 800b24e:	4602      	mov	r2, r0
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	1ad3      	subs	r3, r2, r3
 800b254:	2b02      	cmp	r3, #2
 800b256:	d901      	bls.n	800b25c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800b258:	2303      	movs	r3, #3
 800b25a:	e009      	b.n	800b270 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b25c:	4b06      	ldr	r3, [pc, #24]	; (800b278 <HAL_RCC_OscConfig+0x474>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b264:	2b00      	cmp	r3, #0
 800b266:	d1f0      	bne.n	800b24a <HAL_RCC_OscConfig+0x446>
 800b268:	e001      	b.n	800b26e <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800b26a:	2301      	movs	r3, #1
 800b26c:	e000      	b.n	800b270 <HAL_RCC_OscConfig+0x46c>
    }
  }
  return HAL_OK;
 800b26e:	2300      	movs	r3, #0
}
 800b270:	4618      	mov	r0, r3
 800b272:	3718      	adds	r7, #24
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}
 800b278:	40023800 	.word	0x40023800
 800b27c:	40007000 	.word	0x40007000
 800b280:	42470060 	.word	0x42470060

0800b284 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b086      	sub	sp, #24
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	4613      	mov	r3, r2
 800b290:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	2b20      	cmp	r3, #32
 800b29c:	d153      	bne.n	800b346 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d002      	beq.n	800b2aa <HAL_UART_Transmit_DMA+0x26>
 800b2a4:	88fb      	ldrh	r3, [r7, #6]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d101      	bne.n	800b2ae <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e04c      	b.n	800b348 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d101      	bne.n	800b2bc <HAL_UART_Transmit_DMA+0x38>
 800b2b8:	2302      	movs	r3, #2
 800b2ba:	e045      	b.n	800b348 <HAL_UART_Transmit_DMA+0xc4>
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800b2c4:	68ba      	ldr	r2, [r7, #8]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	88fa      	ldrh	r2, [r7, #6]
 800b2ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	88fa      	ldrh	r2, [r7, #6]
 800b2d4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2221      	movs	r2, #33	; 0x21
 800b2e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e8:	4a19      	ldr	r2, [pc, #100]	; (800b350 <HAL_UART_Transmit_DMA+0xcc>)
 800b2ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f0:	4a18      	ldr	r2, [pc, #96]	; (800b354 <HAL_UART_Transmit_DMA+0xd0>)
 800b2f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f8:	4a17      	ldr	r2, [pc, #92]	; (800b358 <HAL_UART_Transmit_DMA+0xd4>)
 800b2fa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b300:	2200      	movs	r2, #0
 800b302:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800b304:	f107 0308 	add.w	r3, r7, #8
 800b308:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	6819      	ldr	r1, [r3, #0]
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	3304      	adds	r3, #4
 800b318:	461a      	mov	r2, r3
 800b31a:	88fb      	ldrh	r3, [r7, #6]
 800b31c:	f7fc fd4f 	bl	8007dbe <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b328:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2200      	movs	r2, #0
 800b32e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	695a      	ldr	r2, [r3, #20]
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b340:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800b342:	2300      	movs	r3, #0
 800b344:	e000      	b.n	800b348 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800b346:	2302      	movs	r3, #2
  }
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3718      	adds	r7, #24
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	0800b73d 	.word	0x0800b73d
 800b354:	0800b78f 	.word	0x0800b78f
 800b358:	0800b82f 	.word	0x0800b82f

0800b35c <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b086      	sub	sp, #24
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	4613      	mov	r3, r2
 800b368:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b370:	b2db      	uxtb	r3, r3
 800b372:	2b20      	cmp	r3, #32
 800b374:	d166      	bne.n	800b444 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d002      	beq.n	800b382 <HAL_UART_Receive_DMA+0x26>
 800b37c:	88fb      	ldrh	r3, [r7, #6]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d101      	bne.n	800b386 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	e05f      	b.n	800b446 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d101      	bne.n	800b394 <HAL_UART_Receive_DMA+0x38>
 800b390:	2302      	movs	r3, #2
 800b392:	e058      	b.n	800b446 <HAL_UART_Receive_DMA+0xea>
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2201      	movs	r2, #1
 800b398:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800b39c:	68ba      	ldr	r2, [r7, #8]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	88fa      	ldrh	r2, [r7, #6]
 800b3a6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2222      	movs	r2, #34	; 0x22
 800b3b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ba:	4a25      	ldr	r2, [pc, #148]	; (800b450 <HAL_UART_Receive_DMA+0xf4>)
 800b3bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3c2:	4a24      	ldr	r2, [pc, #144]	; (800b454 <HAL_UART_Receive_DMA+0xf8>)
 800b3c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ca:	4a23      	ldr	r2, [pc, #140]	; (800b458 <HAL_UART_Receive_DMA+0xfc>)
 800b3cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800b3d6:	f107 0308 	add.w	r3, r7, #8
 800b3da:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	3304      	adds	r3, #4
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	88fb      	ldrh	r3, [r7, #6]
 800b3ee:	f7fc fce6 	bl	8007dbe <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	613b      	str	r3, [r7, #16]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	613b      	str	r3, [r7, #16]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	613b      	str	r3, [r7, #16]
 800b406:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2200      	movs	r2, #0
 800b40c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	68da      	ldr	r2, [r3, #12]
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b41e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	695a      	ldr	r2, [r3, #20]
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f042 0201 	orr.w	r2, r2, #1
 800b42e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	695a      	ldr	r2, [r3, #20]
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b43e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800b440:	2300      	movs	r3, #0
 800b442:	e000      	b.n	800b446 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b444:	2302      	movs	r3, #2
  }
}
 800b446:	4618      	mov	r0, r3
 800b448:	3718      	adds	r7, #24
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	0800b7ab 	.word	0x0800b7ab
 800b454:	0800b813 	.word	0x0800b813
 800b458:	0800b82f 	.word	0x0800b82f

0800b45c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b082      	sub	sp, #8
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	68da      	ldr	r2, [r3, #12]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b472:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	695a      	ldr	r2, [r3, #20]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f022 0201 	bic.w	r2, r2, #1
 800b482:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	695b      	ldr	r3, [r3, #20]
 800b48a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b48e:	2b40      	cmp	r3, #64	; 0x40
 800b490:	d12a      	bne.n	800b4e8 <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	695a      	ldr	r2, [r3, #20]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4a0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d013      	beq.n	800b4d2 <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ae:	4a16      	ldr	r2, [pc, #88]	; (800b508 <HAL_UART_AbortReceive_IT+0xac>)
 800b4b0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7fc fce1 	bl	8007e7e <HAL_DMA_Abort_IT>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d01c      	beq.n	800b4fc <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b4cc:	4610      	mov	r0, r2
 800b4ce:	4798      	blx	r3
 800b4d0:	e014      	b.n	800b4fc <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2220      	movs	r2, #32
 800b4dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f7f9 fb83 	bl	8004bec <HAL_UART_AbortReceiveCpltCallback>
 800b4e6:	e009      	b.n	800b4fc <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2220      	movs	r2, #32
 800b4f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f7f9 fb78 	bl	8004bec <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800b4fc:	2300      	movs	r3, #0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3708      	adds	r7, #8
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	0800b953 	.word	0x0800b953

0800b50c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b088      	sub	sp, #32
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	695b      	ldr	r3, [r3, #20]
 800b52a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800b52c:	2300      	movs	r3, #0
 800b52e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800b530:	2300      	movs	r3, #0
 800b532:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	f003 030f 	and.w	r3, r3, #15
 800b53a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d10d      	bne.n	800b55e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	f003 0320 	and.w	r3, r3, #32
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d008      	beq.n	800b55e <HAL_UART_IRQHandler+0x52>
 800b54c:	69bb      	ldr	r3, [r7, #24]
 800b54e:	f003 0320 	and.w	r3, r3, #32
 800b552:	2b00      	cmp	r3, #0
 800b554:	d003      	beq.n	800b55e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 fa7e 	bl	800ba58 <UART_Receive_IT>
      return;
 800b55c:	e0cb      	b.n	800b6f6 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	2b00      	cmp	r3, #0
 800b562:	f000 80ab 	beq.w	800b6bc <HAL_UART_IRQHandler+0x1b0>
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	f003 0301 	and.w	r3, r3, #1
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d105      	bne.n	800b57c <HAL_UART_IRQHandler+0x70>
 800b570:	69bb      	ldr	r3, [r7, #24]
 800b572:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b576:	2b00      	cmp	r3, #0
 800b578:	f000 80a0 	beq.w	800b6bc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b57c:	69fb      	ldr	r3, [r7, #28]
 800b57e:	f003 0301 	and.w	r3, r3, #1
 800b582:	2b00      	cmp	r3, #0
 800b584:	d00a      	beq.n	800b59c <HAL_UART_IRQHandler+0x90>
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d005      	beq.n	800b59c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b594:	f043 0201 	orr.w	r2, r3, #1
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	f003 0304 	and.w	r3, r3, #4
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d00a      	beq.n	800b5bc <HAL_UART_IRQHandler+0xb0>
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	f003 0301 	and.w	r3, r3, #1
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d005      	beq.n	800b5bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5b4:	f043 0202 	orr.w	r2, r3, #2
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	f003 0302 	and.w	r3, r3, #2
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00a      	beq.n	800b5dc <HAL_UART_IRQHandler+0xd0>
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	f003 0301 	and.w	r3, r3, #1
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d005      	beq.n	800b5dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5d4:	f043 0204 	orr.w	r2, r3, #4
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	f003 0308 	and.w	r3, r3, #8
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d00a      	beq.n	800b5fc <HAL_UART_IRQHandler+0xf0>
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	f003 0301 	and.w	r3, r3, #1
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d005      	beq.n	800b5fc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5f4:	f043 0208 	orr.w	r2, r3, #8
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b600:	2b00      	cmp	r3, #0
 800b602:	d077      	beq.n	800b6f4 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	f003 0320 	and.w	r3, r3, #32
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d007      	beq.n	800b61e <HAL_UART_IRQHandler+0x112>
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	f003 0320 	and.w	r3, r3, #32
 800b614:	2b00      	cmp	r3, #0
 800b616:	d002      	beq.n	800b61e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f000 fa1d 	bl	800ba58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	695b      	ldr	r3, [r3, #20]
 800b624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b628:	2b40      	cmp	r3, #64	; 0x40
 800b62a:	bf0c      	ite	eq
 800b62c:	2301      	moveq	r3, #1
 800b62e:	2300      	movne	r3, #0
 800b630:	b2db      	uxtb	r3, r3
 800b632:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b638:	f003 0308 	and.w	r3, r3, #8
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d102      	bne.n	800b646 <HAL_UART_IRQHandler+0x13a>
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d031      	beq.n	800b6aa <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 f951 	bl	800b8ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	695b      	ldr	r3, [r3, #20]
 800b652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b656:	2b40      	cmp	r3, #64	; 0x40
 800b658:	d123      	bne.n	800b6a2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	695a      	ldr	r2, [r3, #20]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b668:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d013      	beq.n	800b69a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b676:	4a21      	ldr	r2, [pc, #132]	; (800b6fc <HAL_UART_IRQHandler+0x1f0>)
 800b678:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b67e:	4618      	mov	r0, r3
 800b680:	f7fc fbfd 	bl	8007e7e <HAL_DMA_Abort_IT>
 800b684:	4603      	mov	r3, r0
 800b686:	2b00      	cmp	r3, #0
 800b688:	d016      	beq.n	800b6b8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b68e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b694:	4610      	mov	r0, r2
 800b696:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b698:	e00e      	b.n	800b6b8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 f844 	bl	800b728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6a0:	e00a      	b.n	800b6b8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 f840 	bl	800b728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6a8:	e006      	b.n	800b6b8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 f83c 	bl	800b728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800b6b6:	e01d      	b.n	800b6f4 <HAL_UART_IRQHandler+0x1e8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6b8:	bf00      	nop
    return;
 800b6ba:	e01b      	b.n	800b6f4 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d008      	beq.n	800b6d8 <HAL_UART_IRQHandler+0x1cc>
 800b6c6:	69bb      	ldr	r3, [r7, #24]
 800b6c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d003      	beq.n	800b6d8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 f953 	bl	800b97c <UART_Transmit_IT>
    return;
 800b6d6:	e00e      	b.n	800b6f6 <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b6d8:	69fb      	ldr	r3, [r7, #28]
 800b6da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d009      	beq.n	800b6f6 <HAL_UART_IRQHandler+0x1ea>
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d004      	beq.n	800b6f6 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 f99b 	bl	800ba28 <UART_EndTransmit_IT>
    return;
 800b6f2:	e000      	b.n	800b6f6 <HAL_UART_IRQHandler+0x1ea>
    return;
 800b6f4:	bf00      	nop
  }
}
 800b6f6:	3720      	adds	r7, #32
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	0800b92b 	.word	0x0800b92b

0800b700 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b700:	b480      	push	{r7}
 800b702:	b083      	sub	sp, #12
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b708:	bf00      	nop
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr

0800b714 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b71c:	bf00      	nop
 800b71e:	370c      	adds	r7, #12
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b748:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b754:	2b00      	cmp	r3, #0
 800b756:	d113      	bne.n	800b780 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2200      	movs	r2, #0
 800b75c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	695a      	ldr	r2, [r3, #20]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b76c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	68da      	ldr	r2, [r3, #12]
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b77c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b77e:	e002      	b.n	800b786 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800b780:	68f8      	ldr	r0, [r7, #12]
 800b782:	f7f9 f90b 	bl	800499c <HAL_UART_TxCpltCallback>
}
 800b786:	bf00      	nop
 800b788:	3710      	adds	r7, #16
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}

0800b78e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b78e:	b580      	push	{r7, lr}
 800b790:	b084      	sub	sp, #16
 800b792:	af00      	add	r7, sp, #0
 800b794:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b79a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	f7ff ffaf 	bl	800b700 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7a2:	bf00      	nop
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b084      	sub	sp, #16
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7b6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d11e      	bne.n	800b804 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	68da      	ldr	r2, [r3, #12]
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b7da:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	695a      	ldr	r2, [r3, #20]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f022 0201 	bic.w	r2, r2, #1
 800b7ea:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	695a      	ldr	r2, [r3, #20]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7fa:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2220      	movs	r2, #32
 800b800:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f7f9 f94b 	bl	8004aa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b80a:	bf00      	nop
 800b80c:	3710      	adds	r7, #16
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}

0800b812 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b812:	b580      	push	{r7, lr}
 800b814:	b084      	sub	sp, #16
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b81e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f7ff ff77 	bl	800b714 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b826:	bf00      	nop
 800b828:	3710      	adds	r7, #16
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}

0800b82e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b084      	sub	sp, #16
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b836:	2300      	movs	r3, #0
 800b838:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b83e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	695b      	ldr	r3, [r3, #20]
 800b846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b84a:	2b80      	cmp	r3, #128	; 0x80
 800b84c:	bf0c      	ite	eq
 800b84e:	2301      	moveq	r3, #1
 800b850:	2300      	movne	r3, #0
 800b852:	b2db      	uxtb	r3, r3
 800b854:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b85c:	b2db      	uxtb	r3, r3
 800b85e:	2b21      	cmp	r3, #33	; 0x21
 800b860:	d108      	bne.n	800b874 <UART_DMAError+0x46>
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d005      	beq.n	800b874 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	2200      	movs	r2, #0
 800b86c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b86e:	68b8      	ldr	r0, [r7, #8]
 800b870:	f000 f827 	bl	800b8c2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	695b      	ldr	r3, [r3, #20]
 800b87a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b87e:	2b40      	cmp	r3, #64	; 0x40
 800b880:	bf0c      	ite	eq
 800b882:	2301      	moveq	r3, #1
 800b884:	2300      	movne	r3, #0
 800b886:	b2db      	uxtb	r3, r3
 800b888:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b890:	b2db      	uxtb	r3, r3
 800b892:	2b22      	cmp	r3, #34	; 0x22
 800b894:	d108      	bne.n	800b8a8 <UART_DMAError+0x7a>
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d005      	beq.n	800b8a8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b8a2:	68b8      	ldr	r0, [r7, #8]
 800b8a4:	f000 f823 	bl	800b8ee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ac:	f043 0210 	orr.w	r2, r3, #16
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8b4:	68b8      	ldr	r0, [r7, #8]
 800b8b6:	f7ff ff37 	bl	800b728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8ba:	bf00      	nop
 800b8bc:	3710      	adds	r7, #16
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}

0800b8c2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b8c2:	b480      	push	{r7}
 800b8c4:	b083      	sub	sp, #12
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	68da      	ldr	r2, [r3, #12]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b8d8:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2220      	movs	r2, #32
 800b8de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800b8e2:	bf00      	nop
 800b8e4:	370c      	adds	r7, #12
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ec:	4770      	bx	lr

0800b8ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b8ee:	b480      	push	{r7}
 800b8f0:	b083      	sub	sp, #12
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	68da      	ldr	r2, [r3, #12]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b904:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	695a      	ldr	r2, [r3, #20]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f022 0201 	bic.w	r2, r2, #1
 800b914:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2220      	movs	r2, #32
 800b91a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800b91e:	bf00      	nop
 800b920:	370c      	adds	r7, #12
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr

0800b92a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b084      	sub	sp, #16
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b936:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2200      	movs	r2, #0
 800b93c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2200      	movs	r2, #0
 800b942:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f7ff feef 	bl	800b728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b94a:	bf00      	nop
 800b94c:	3710      	adds	r7, #16
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b084      	sub	sp, #16
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b95e:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2200      	movs	r2, #0
 800b964:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2220      	movs	r2, #32
 800b96a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800b96e:	68f8      	ldr	r0, [r7, #12]
 800b970:	f7f9 f93c 	bl	8004bec <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b974:	bf00      	nop
 800b976:	3710      	adds	r7, #16
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b085      	sub	sp, #20
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b98a:	b2db      	uxtb	r3, r3
 800b98c:	2b21      	cmp	r3, #33	; 0x21
 800b98e:	d144      	bne.n	800ba1a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	689b      	ldr	r3, [r3, #8]
 800b994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b998:	d11a      	bne.n	800b9d0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6a1b      	ldr	r3, [r3, #32]
 800b99e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	881b      	ldrh	r3, [r3, #0]
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b9ae:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	691b      	ldr	r3, [r3, #16]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d105      	bne.n	800b9c4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6a1b      	ldr	r3, [r3, #32]
 800b9bc:	1c9a      	adds	r2, r3, #2
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	621a      	str	r2, [r3, #32]
 800b9c2:	e00e      	b.n	800b9e2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6a1b      	ldr	r3, [r3, #32]
 800b9c8:	1c5a      	adds	r2, r3, #1
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	621a      	str	r2, [r3, #32]
 800b9ce:	e008      	b.n	800b9e2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6a1b      	ldr	r3, [r3, #32]
 800b9d4:	1c59      	adds	r1, r3, #1
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	6211      	str	r1, [r2, #32]
 800b9da:	781a      	ldrb	r2, [r3, #0]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	687a      	ldr	r2, [r7, #4]
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d10f      	bne.n	800ba16 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	68da      	ldr	r2, [r3, #12]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	68da      	ldr	r2, [r3, #12]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ba16:	2300      	movs	r3, #0
 800ba18:	e000      	b.n	800ba1c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ba1a:	2302      	movs	r3, #2
  }
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3714      	adds	r7, #20
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	68da      	ldr	r2, [r3, #12]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2220      	movs	r2, #32
 800ba44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f7f8 ffa7 	bl	800499c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ba4e:	2300      	movs	r3, #0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3708      	adds	r7, #8
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	2b22      	cmp	r3, #34	; 0x22
 800ba6a:	d171      	bne.n	800bb50 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba74:	d123      	bne.n	800babe <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba7a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	691b      	ldr	r3, [r3, #16]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d10e      	bne.n	800baa2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba90:	b29a      	uxth	r2, r3
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba9a:	1c9a      	adds	r2, r3, #2
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	629a      	str	r2, [r3, #40]	; 0x28
 800baa0:	e029      	b.n	800baf6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	b29a      	uxth	r2, r3
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab6:	1c5a      	adds	r2, r3, #1
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	629a      	str	r2, [r3, #40]	; 0x28
 800babc:	e01b      	b.n	800baf6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	691b      	ldr	r3, [r3, #16]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d10a      	bne.n	800badc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	6858      	ldr	r0, [r3, #4]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad0:	1c59      	adds	r1, r3, #1
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	6291      	str	r1, [r2, #40]	; 0x28
 800bad6:	b2c2      	uxtb	r2, r0
 800bad8:	701a      	strb	r2, [r3, #0]
 800bada:	e00c      	b.n	800baf6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	b2da      	uxtb	r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bae8:	1c58      	adds	r0, r3, #1
 800baea:	6879      	ldr	r1, [r7, #4]
 800baec:	6288      	str	r0, [r1, #40]	; 0x28
 800baee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800baf2:	b2d2      	uxtb	r2, r2
 800baf4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	3b01      	subs	r3, #1
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	4619      	mov	r1, r3
 800bb04:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d120      	bne.n	800bb4c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	68da      	ldr	r2, [r3, #12]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f022 0220 	bic.w	r2, r2, #32
 800bb18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	68da      	ldr	r2, [r3, #12]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bb28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	695a      	ldr	r2, [r3, #20]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f022 0201 	bic.w	r2, r2, #1
 800bb38:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2220      	movs	r2, #32
 800bb3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f7f8 ffac 	bl	8004aa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	e002      	b.n	800bb52 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	e000      	b.n	800bb52 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800bb50:	2302      	movs	r3, #2
  }
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3710      	adds	r7, #16
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
	...

0800bb5c <__libc_init_array>:
 800bb5c:	b570      	push	{r4, r5, r6, lr}
 800bb5e:	4d0d      	ldr	r5, [pc, #52]	; (800bb94 <__libc_init_array+0x38>)
 800bb60:	4c0d      	ldr	r4, [pc, #52]	; (800bb98 <__libc_init_array+0x3c>)
 800bb62:	1b64      	subs	r4, r4, r5
 800bb64:	10a4      	asrs	r4, r4, #2
 800bb66:	2600      	movs	r6, #0
 800bb68:	42a6      	cmp	r6, r4
 800bb6a:	d109      	bne.n	800bb80 <__libc_init_array+0x24>
 800bb6c:	4d0b      	ldr	r5, [pc, #44]	; (800bb9c <__libc_init_array+0x40>)
 800bb6e:	4c0c      	ldr	r4, [pc, #48]	; (800bba0 <__libc_init_array+0x44>)
 800bb70:	f000 f82e 	bl	800bbd0 <_init>
 800bb74:	1b64      	subs	r4, r4, r5
 800bb76:	10a4      	asrs	r4, r4, #2
 800bb78:	2600      	movs	r6, #0
 800bb7a:	42a6      	cmp	r6, r4
 800bb7c:	d105      	bne.n	800bb8a <__libc_init_array+0x2e>
 800bb7e:	bd70      	pop	{r4, r5, r6, pc}
 800bb80:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb84:	4798      	blx	r3
 800bb86:	3601      	adds	r6, #1
 800bb88:	e7ee      	b.n	800bb68 <__libc_init_array+0xc>
 800bb8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb8e:	4798      	blx	r3
 800bb90:	3601      	adds	r6, #1
 800bb92:	e7f2      	b.n	800bb7a <__libc_init_array+0x1e>
 800bb94:	0800d9e0 	.word	0x0800d9e0
 800bb98:	0800d9e0 	.word	0x0800d9e0
 800bb9c:	0800d9e0 	.word	0x0800d9e0
 800bba0:	0800d9e4 	.word	0x0800d9e4

0800bba4 <memcpy>:
 800bba4:	440a      	add	r2, r1
 800bba6:	4291      	cmp	r1, r2
 800bba8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbac:	d100      	bne.n	800bbb0 <memcpy+0xc>
 800bbae:	4770      	bx	lr
 800bbb0:	b510      	push	{r4, lr}
 800bbb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbba:	4291      	cmp	r1, r2
 800bbbc:	d1f9      	bne.n	800bbb2 <memcpy+0xe>
 800bbbe:	bd10      	pop	{r4, pc}

0800bbc0 <memset>:
 800bbc0:	4402      	add	r2, r0
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d100      	bne.n	800bbca <memset+0xa>
 800bbc8:	4770      	bx	lr
 800bbca:	f803 1b01 	strb.w	r1, [r3], #1
 800bbce:	e7f9      	b.n	800bbc4 <memset+0x4>

0800bbd0 <_init>:
 800bbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbd2:	bf00      	nop
 800bbd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbd6:	bc08      	pop	{r3}
 800bbd8:	469e      	mov	lr, r3
 800bbda:	4770      	bx	lr

0800bbdc <_fini>:
 800bbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbde:	bf00      	nop
 800bbe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbe2:	bc08      	pop	{r3}
 800bbe4:	469e      	mov	lr, r3
 800bbe6:	4770      	bx	lr
