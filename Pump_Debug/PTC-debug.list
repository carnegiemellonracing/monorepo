
PTC-debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008114  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c5c  080082f4  080082f4  000182f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009f50  08009f50  00019f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009f58  08009f58  00019f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009f5c  08009f5c  00019f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000043c  20000000  08009f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000018a0  2000043c  0800a39c  0002043c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20001cdc  0800a39c  00021cdc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000189fc  00000000  00000000  0002046c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003d8d  00000000  00000000  00038e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000013b0  00000000  00000000  0003cbf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001180  00000000  00000000  0003dfa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a7f1  00000000  00000000  0003f128  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00007a73  00000000  00000000  00049919  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005138c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004ff0  00000000  00000000  00051408  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000043c 	.word	0x2000043c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080082dc 	.word	0x080082dc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000440 	.word	0x20000440
 800021c:	080082dc 	.word	0x080082dc

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	bf14      	ite	ne
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e720      	b.n	8000364 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aedc 	beq.w	8000312 <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6c1      	b.n	8000312 <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b97a 	b.w	8000e9c <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	468c      	mov	ip, r1
 8000bc6:	460d      	mov	r5, r1
 8000bc8:	4604      	mov	r4, r0
 8000bca:	9e08      	ldr	r6, [sp, #32]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d151      	bne.n	8000c74 <__udivmoddi4+0xb4>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	d96d      	bls.n	8000cb2 <__udivmoddi4+0xf2>
 8000bd6:	fab2 fe82 	clz	lr, r2
 8000bda:	f1be 0f00 	cmp.w	lr, #0
 8000bde:	d00b      	beq.n	8000bf8 <__udivmoddi4+0x38>
 8000be0:	f1ce 0c20 	rsb	ip, lr, #32
 8000be4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000be8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bec:	fa02 f70e 	lsl.w	r7, r2, lr
 8000bf0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000bf4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bf8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000bfc:	0c25      	lsrs	r5, r4, #16
 8000bfe:	fbbc f8fa 	udiv	r8, ip, sl
 8000c02:	fa1f f987 	uxth.w	r9, r7
 8000c06:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c0a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c0e:	fb08 f309 	mul.w	r3, r8, r9
 8000c12:	42ab      	cmp	r3, r5
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x6c>
 8000c16:	19ed      	adds	r5, r5, r7
 8000c18:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c1c:	f080 8123 	bcs.w	8000e66 <__udivmoddi4+0x2a6>
 8000c20:	42ab      	cmp	r3, r5
 8000c22:	f240 8120 	bls.w	8000e66 <__udivmoddi4+0x2a6>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	443d      	add	r5, r7
 8000c2c:	1aed      	subs	r5, r5, r3
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c34:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c38:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c3c:	fb00 f909 	mul.w	r9, r0, r9
 8000c40:	45a1      	cmp	r9, r4
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x98>
 8000c44:	19e4      	adds	r4, r4, r7
 8000c46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4a:	f080 810a 	bcs.w	8000e62 <__udivmoddi4+0x2a2>
 8000c4e:	45a1      	cmp	r9, r4
 8000c50:	f240 8107 	bls.w	8000e62 <__udivmoddi4+0x2a2>
 8000c54:	3802      	subs	r0, #2
 8000c56:	443c      	add	r4, r7
 8000c58:	eba4 0409 	sub.w	r4, r4, r9
 8000c5c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c60:	2100      	movs	r1, #0
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d061      	beq.n	8000d2a <__udivmoddi4+0x16a>
 8000c66:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	6034      	str	r4, [r6, #0]
 8000c6e:	6073      	str	r3, [r6, #4]
 8000c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c74:	428b      	cmp	r3, r1
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0xc8>
 8000c78:	2e00      	cmp	r6, #0
 8000c7a:	d054      	beq.n	8000d26 <__udivmoddi4+0x166>
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c82:	4608      	mov	r0, r1
 8000c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c88:	fab3 f183 	clz	r1, r3
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	f040 808e 	bne.w	8000dae <__udivmoddi4+0x1ee>
 8000c92:	42ab      	cmp	r3, r5
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xdc>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80fa 	bhi.w	8000e90 <__udivmoddi4+0x2d0>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb65 0503 	sbc.w	r5, r5, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	46ac      	mov	ip, r5
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d03f      	beq.n	8000d2a <__udivmoddi4+0x16a>
 8000caa:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	b912      	cbnz	r2, 8000cba <__udivmoddi4+0xfa>
 8000cb4:	2701      	movs	r7, #1
 8000cb6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cba:	fab7 fe87 	clz	lr, r7
 8000cbe:	f1be 0f00 	cmp.w	lr, #0
 8000cc2:	d134      	bne.n	8000d2e <__udivmoddi4+0x16e>
 8000cc4:	1beb      	subs	r3, r5, r7
 8000cc6:	0c3a      	lsrs	r2, r7, #16
 8000cc8:	fa1f fc87 	uxth.w	ip, r7
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fbb3 f8f2 	udiv	r8, r3, r2
 8000cd2:	0c25      	lsrs	r5, r4, #16
 8000cd4:	fb02 3318 	mls	r3, r2, r8, r3
 8000cd8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cdc:	fb0c f308 	mul.w	r3, ip, r8
 8000ce0:	42ab      	cmp	r3, r5
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x134>
 8000ce4:	19ed      	adds	r5, r5, r7
 8000ce6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x132>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	f200 80d1 	bhi.w	8000e94 <__udivmoddi4+0x2d4>
 8000cf2:	4680      	mov	r8, r0
 8000cf4:	1aed      	subs	r5, r5, r3
 8000cf6:	b2a3      	uxth	r3, r4
 8000cf8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000cfc:	fb02 5510 	mls	r5, r2, r0, r5
 8000d00:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d04:	fb0c fc00 	mul.w	ip, ip, r0
 8000d08:	45a4      	cmp	ip, r4
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x15c>
 8000d0c:	19e4      	adds	r4, r4, r7
 8000d0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x15a>
 8000d14:	45a4      	cmp	ip, r4
 8000d16:	f200 80b8 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	eba4 040c 	sub.w	r4, r4, ip
 8000d20:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d24:	e79d      	b.n	8000c62 <__udivmoddi4+0xa2>
 8000d26:	4631      	mov	r1, r6
 8000d28:	4630      	mov	r0, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	f1ce 0420 	rsb	r4, lr, #32
 8000d32:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d36:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d3a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d3e:	0c3a      	lsrs	r2, r7, #16
 8000d40:	fa25 f404 	lsr.w	r4, r5, r4
 8000d44:	ea48 0803 	orr.w	r8, r8, r3
 8000d48:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d4c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d50:	fb02 4411 	mls	r4, r2, r1, r4
 8000d54:	fa1f fc87 	uxth.w	ip, r7
 8000d58:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d5c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d60:	42ab      	cmp	r3, r5
 8000d62:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d66:	d909      	bls.n	8000d7c <__udivmoddi4+0x1bc>
 8000d68:	19ed      	adds	r5, r5, r7
 8000d6a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d6e:	f080 808a 	bcs.w	8000e86 <__udivmoddi4+0x2c6>
 8000d72:	42ab      	cmp	r3, r5
 8000d74:	f240 8087 	bls.w	8000e86 <__udivmoddi4+0x2c6>
 8000d78:	3902      	subs	r1, #2
 8000d7a:	443d      	add	r5, r7
 8000d7c:	1aeb      	subs	r3, r5, r3
 8000d7e:	fa1f f588 	uxth.w	r5, r8
 8000d82:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d86:	fb02 3310 	mls	r3, r2, r0, r3
 8000d8a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d8e:	fb00 f30c 	mul.w	r3, r0, ip
 8000d92:	42ab      	cmp	r3, r5
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x1e6>
 8000d96:	19ed      	adds	r5, r5, r7
 8000d98:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d9c:	d26f      	bcs.n	8000e7e <__udivmoddi4+0x2be>
 8000d9e:	42ab      	cmp	r3, r5
 8000da0:	d96d      	bls.n	8000e7e <__udivmoddi4+0x2be>
 8000da2:	3802      	subs	r0, #2
 8000da4:	443d      	add	r5, r7
 8000da6:	1aeb      	subs	r3, r5, r3
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	e78f      	b.n	8000cce <__udivmoddi4+0x10e>
 8000dae:	f1c1 0720 	rsb	r7, r1, #32
 8000db2:	fa22 f807 	lsr.w	r8, r2, r7
 8000db6:	408b      	lsls	r3, r1
 8000db8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dbc:	ea48 0303 	orr.w	r3, r8, r3
 8000dc0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dc4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dc8:	40fd      	lsrs	r5, r7
 8000dca:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dce:	fbb5 f9fc 	udiv	r9, r5, ip
 8000dd2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000dd6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dda:	fa1f f883 	uxth.w	r8, r3
 8000dde:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000de2:	fb09 f408 	mul.w	r4, r9, r8
 8000de6:	42ac      	cmp	r4, r5
 8000de8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dec:	fa00 fa01 	lsl.w	sl, r0, r1
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x244>
 8000df2:	18ed      	adds	r5, r5, r3
 8000df4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df8:	d243      	bcs.n	8000e82 <__udivmoddi4+0x2c2>
 8000dfa:	42ac      	cmp	r4, r5
 8000dfc:	d941      	bls.n	8000e82 <__udivmoddi4+0x2c2>
 8000dfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000e02:	441d      	add	r5, r3
 8000e04:	1b2d      	subs	r5, r5, r4
 8000e06:	fa1f fe8e 	uxth.w	lr, lr
 8000e0a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e0e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e12:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e16:	fb00 f808 	mul.w	r8, r0, r8
 8000e1a:	45a0      	cmp	r8, r4
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x26e>
 8000e1e:	18e4      	adds	r4, r4, r3
 8000e20:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e24:	d229      	bcs.n	8000e7a <__udivmoddi4+0x2ba>
 8000e26:	45a0      	cmp	r8, r4
 8000e28:	d927      	bls.n	8000e7a <__udivmoddi4+0x2ba>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	441c      	add	r4, r3
 8000e2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e32:	eba4 0408 	sub.w	r4, r4, r8
 8000e36:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3a:	454c      	cmp	r4, r9
 8000e3c:	46c6      	mov	lr, r8
 8000e3e:	464d      	mov	r5, r9
 8000e40:	d315      	bcc.n	8000e6e <__udivmoddi4+0x2ae>
 8000e42:	d012      	beq.n	8000e6a <__udivmoddi4+0x2aa>
 8000e44:	b156      	cbz	r6, 8000e5c <__udivmoddi4+0x29c>
 8000e46:	ebba 030e 	subs.w	r3, sl, lr
 8000e4a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e52:	40cb      	lsrs	r3, r1
 8000e54:	431f      	orrs	r7, r3
 8000e56:	40cc      	lsrs	r4, r1
 8000e58:	6037      	str	r7, [r6, #0]
 8000e5a:	6074      	str	r4, [r6, #4]
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	4618      	mov	r0, r3
 8000e64:	e6f8      	b.n	8000c58 <__udivmoddi4+0x98>
 8000e66:	4690      	mov	r8, r2
 8000e68:	e6e0      	b.n	8000c2c <__udivmoddi4+0x6c>
 8000e6a:	45c2      	cmp	sl, r8
 8000e6c:	d2ea      	bcs.n	8000e44 <__udivmoddi4+0x284>
 8000e6e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e72:	eb69 0503 	sbc.w	r5, r9, r3
 8000e76:	3801      	subs	r0, #1
 8000e78:	e7e4      	b.n	8000e44 <__udivmoddi4+0x284>
 8000e7a:	4628      	mov	r0, r5
 8000e7c:	e7d7      	b.n	8000e2e <__udivmoddi4+0x26e>
 8000e7e:	4640      	mov	r0, r8
 8000e80:	e791      	b.n	8000da6 <__udivmoddi4+0x1e6>
 8000e82:	4681      	mov	r9, r0
 8000e84:	e7be      	b.n	8000e04 <__udivmoddi4+0x244>
 8000e86:	4601      	mov	r1, r0
 8000e88:	e778      	b.n	8000d7c <__udivmoddi4+0x1bc>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	e745      	b.n	8000d1c <__udivmoddi4+0x15c>
 8000e90:	4608      	mov	r0, r1
 8000e92:	e708      	b.n	8000ca6 <__udivmoddi4+0xe6>
 8000e94:	f1a8 0802 	sub.w	r8, r8, #2
 8000e98:	443d      	add	r5, r7
 8000e9a:	e72b      	b.n	8000cf4 <__udivmoddi4+0x134>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <adcInit>:
static cmr_adc_t adc;

/**
 * @brief Initializes the ADC interface.
 */
void adcInit(void) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
    // ADC initialization and channel configuration.
    // XXX edit me to match your pin configuration
    cmr_adcInit(
 8000ea4:	230d      	movs	r3, #13
 8000ea6:	4a03      	ldr	r2, [pc, #12]	; (8000eb4 <adcInit+0x14>)
 8000ea8:	4903      	ldr	r1, [pc, #12]	; (8000eb8 <adcInit+0x18>)
 8000eaa:	4804      	ldr	r0, [pc, #16]	; (8000ebc <adcInit+0x1c>)
 8000eac:	f000 fdae 	bl	8001a0c <cmr_adcInit>
        &adc, ADC1,
        adcChannels, sizeof(adcChannels) / sizeof(adcChannels[0])
    );
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	40012000 	.word	0x40012000
 8000ebc:	20000458 	.word	0x20000458

08000ec0 <adcRead>:
 *
 * @param channel The channel.
 *
 * @return The read value.
 */
uint32_t adcRead(adcChannel_t channel) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
    return cmr_adcRead(&adc, channel);
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <adcRead+0x20>)
 8000ed0:	f000 fdfa 	bl	8001ac8 <cmr_adcRead>
 8000ed4:	4603      	mov	r3, r0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000458 	.word	0x20000458

08000ee4 <brakelight>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
void brakelight(void *pvParameters) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    volatile cmr_canVSMSensors_t *vsmSensors = canGetPayload(CANRX_VSM_SENSORS);
 8000eec:	2002      	movs	r0, #2
 8000eee:	f000 f8c3 	bl	8001078 <canGetPayload>
 8000ef2:	60f8      	str	r0, [r7, #12]

    TickType_t lastWakeTime = xTaskGetTickCount();
 8000ef4:	f003 fac0 	bl	8004478 <xTaskGetTickCount>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	60bb      	str	r3, [r7, #8]
    while (1) {
        if (vsmSensors->brakePressureRear_PSI > brakeLightThreshold_PSI) {
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	2214      	movs	r2, #20
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d904      	bls.n	8000f12 <brakelight+0x2e>
            cmr_gpioWrite(GPIO_BRKLT_ENABLE, 1);
 8000f08:	2101      	movs	r1, #1
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f001 fb44 	bl	8002598 <cmr_gpioWrite>
 8000f10:	e003      	b.n	8000f1a <brakelight+0x36>
        } else {
            cmr_gpioWrite(GPIO_BRKLT_ENABLE, 0);
 8000f12:	2100      	movs	r1, #0
 8000f14:	2001      	movs	r0, #1
 8000f16:	f001 fb3f 	bl	8002598 <cmr_gpioWrite>
        }

        vTaskDelayUntil(&lastWakeTime, brakelight_period_ms);
 8000f1a:	2232      	movs	r2, #50	; 0x32
 8000f1c:	f107 0308 	add.w	r3, r7, #8
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 f934 	bl	8004190 <vTaskDelayUntil>
        if (vsmSensors->brakePressureRear_PSI > brakeLightThreshold_PSI) {
 8000f28:	e7e8      	b.n	8000efc <brakelight+0x18>
	...

08000f2c <brakelightInit>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
void brakelightInit() {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af02      	add	r7, sp, #8
    cmr_taskInit(
 8000f32:	2204      	movs	r2, #4
 8000f34:	2300      	movs	r3, #0
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <brakelightInit+0x1c>)
 8000f3a:	4904      	ldr	r1, [pc, #16]	; (8000f4c <brakelightInit+0x20>)
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <brakelightInit+0x24>)
 8000f3e:	f002 f9a5 	bl	800328c <cmr_taskInit>
        "brakelight",
        brakelight_priority,
        brakelight,
        NULL
    );
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	08000ee5 	.word	0x08000ee5
 8000f4c:	080082f4 	.word	0x080082f4
 8000f50:	20000708 	.word	0x20000708

08000f54 <canTX10Hz>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void canTX10Hz(void *pvParameters) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    TickType_t lastWakeTime = xTaskGetTickCount();
 8000f5c:	f003 fa8c 	bl	8004478 <xTaskGetTickCount>
 8000f60:	4603      	mov	r3, r0
 8000f62:	60fb      	str	r3, [r7, #12]
    while (1) {
        sendCoolingLoopTemps();
 8000f64:	f000 f8ec 	bl	8001140 <sendCoolingLoopTemps>
        sendPowerDiagnostics();
 8000f68:	f000 f966 	bl	8001238 <sendPowerDiagnostics>
        sendDriverStatus();
 8000f6c:	f000 f940 	bl	80011f0 <sendDriverStatus>

        vTaskDelayUntil(&lastWakeTime, canTX10Hz_period_ms);
 8000f70:	2264      	movs	r2, #100	; 0x64
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f003 f909 	bl	8004190 <vTaskDelayUntil>
        sendCoolingLoopTemps();
 8000f7e:	e7f1      	b.n	8000f64 <canTX10Hz+0x10>

08000f80 <canTX100Hz>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void canTX100Hz(void *pvParameters) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    TickType_t lastWakeTime = xTaskGetTickCount();
 8000f88:	f003 fa76 	bl	8004478 <xTaskGetTickCount>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	60fb      	str	r3, [r7, #12]
    while (1) {
        sendHeartbeat(lastWakeTime);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f88c 	bl	80010b0 <sendHeartbeat>

        vTaskDelayUntil(&lastWakeTime, canTX100Hz_period_ms);
 8000f98:	220a      	movs	r2, #10
 8000f9a:	f107 030c 	add.w	r3, r7, #12
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f003 f8f5 	bl	8004190 <vTaskDelayUntil>
        sendHeartbeat(lastWakeTime);
 8000fa6:	e7f3      	b.n	8000f90 <canTX100Hz+0x10>

08000fa8 <canInit>:
}

/**
 * @brief Initializes the CAN interface.
 */
void canInit(void) {
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b08e      	sub	sp, #56	; 0x38
 8000fac:	af06      	add	r7, sp, #24
    // CAN2 initialization.
    cmr_canInit(
 8000fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb2:	9305      	str	r3, [sp, #20]
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <canInit+0x74>)
 8000fb6:	9304      	str	r3, [sp, #16]
 8000fb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fbc:	9303      	str	r3, [sp, #12]
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <canInit+0x74>)
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <canInit+0x78>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4915      	ldr	r1, [pc, #84]	; (8001024 <canInit+0x7c>)
 8000fd0:	4815      	ldr	r0, [pc, #84]	; (8001028 <canInit+0x80>)
 8000fd2:	f000 ffeb 	bl	8001fac <cmr_canInit>
        GPIOA, GPIO_PIN_11,     // CAN2 RX port/pin.
        GPIOA, GPIO_PIN_12      // CAN2 TX port/pin.
    );

    // CAN2 filters.
    const cmr_canFilter_t canFilters[] = {
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <canInit+0x84>)
 8000fd8:	463c      	mov	r4, r7
 8000fda:	461d      	mov	r5, r3
 8000fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fe4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                CMR_CANID_VSM_SENSORS,
                CMR_CANID_HVC_MINMAX_CELL_TEMPS                                                                                 ,
            }
        }
    };
    cmr_canFilter(
 8000fe8:	463b      	mov	r3, r7
 8000fea:	2202      	movs	r2, #2
 8000fec:	4619      	mov	r1, r3
 8000fee:	480e      	ldr	r0, [pc, #56]	; (8001028 <canInit+0x80>)
 8000ff0:	f001 f8fe 	bl	80021f0 <cmr_canFilter>
        &can, canFilters, sizeof(canFilters) / sizeof(canFilters[0])
    );

    // Task initialization.
    cmr_taskInit(
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <canInit+0x88>)
 8000ffc:	490d      	ldr	r1, [pc, #52]	; (8001034 <canInit+0x8c>)
 8000ffe:	480e      	ldr	r0, [pc, #56]	; (8001038 <canInit+0x90>)
 8001000:	f002 f944 	bl	800328c <cmr_taskInit>
        "CAN TX 10Hz",
        canTX10Hz_priority,
        canTX10Hz,
        NULL
    );
    cmr_taskInit(
 8001004:	2205      	movs	r2, #5
 8001006:	2300      	movs	r3, #0
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <canInit+0x94>)
 800100c:	490c      	ldr	r1, [pc, #48]	; (8001040 <canInit+0x98>)
 800100e:	480d      	ldr	r0, [pc, #52]	; (8001044 <canInit+0x9c>)
 8001010:	f002 f93c 	bl	800328c <cmr_taskInit>
        "CAN TX 100Hz",
        canTX100Hz_priority,
        canTX100Hz,
        NULL
    );
}
 8001014:	bf00      	nop
 8001016:	3720      	adds	r7, #32
 8001018:	46bd      	mov	sp, r7
 800101a:	bdb0      	pop	{r4, r5, r7, pc}
 800101c:	40020000 	.word	0x40020000
 8001020:	20000104 	.word	0x20000104
 8001024:	40006400 	.word	0x40006400
 8001028:	20000e28 	.word	0x20000e28
 800102c:	0800831c 	.word	0x0800831c
 8001030:	08000f55 	.word	0x08000f55
 8001034:	08008300 	.word	0x08008300
 8001038:	20000968 	.word	0x20000968
 800103c:	08000f81 	.word	0x08000f81
 8001040:	0800830c 	.word	0x0800830c
 8001044:	20000bc8 	.word	0x20000bc8

08001048 <canTX>:
 * @param len The data's length, in bytes.
 * @param timeout The timeout, in ticks.
 *
 * @return 0 on success, or a negative error code on timeout.
 */
int canTX(cmr_canID_t id, const void *data, size_t len, TickType_t timeout) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af02      	add	r7, sp, #8
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	4603      	mov	r3, r0
 8001056:	81fb      	strh	r3, [r7, #14]
    return cmr_canTX(&can, id, data, len, timeout);
 8001058:	89f9      	ldrh	r1, [r7, #14]
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	4804      	ldr	r0, [pc, #16]	; (8001074 <canTX+0x2c>)
 8001064:	f001 f934 	bl	80022d0 <cmr_canTX>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000e28 	.word	0x20000e28

08001078 <canGetPayload>:
 *
 * @param rxMsg The message to get the payload of.
 *
 * @return Pointer to payload, or NULL if rxMsg is invalid.
 */
void *canGetPayload(canRX_t rxMsg) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
    configASSERT(rxMsg < CANRX_LEN);
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b04      	cmp	r3, #4
 8001086:	d903      	bls.n	8001090 <canGetPayload+0x18>
 8001088:	21ea      	movs	r1, #234	; 0xea
 800108a:	4807      	ldr	r0, [pc, #28]	; (80010a8 <canGetPayload+0x30>)
 800108c:	f001 fb1d 	bl	80026ca <cmr_panic>

    cmr_canRXMeta_t *rxMeta = &(canRXMeta[rxMsg]);
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	015b      	lsls	r3, r3, #5
 8001094:	4a05      	ldr	r2, [pc, #20]	; (80010ac <canGetPayload+0x34>)
 8001096:	4413      	add	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]

    return (void *)(&rxMeta->payload);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	3318      	adds	r3, #24
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	0800833c 	.word	0x0800833c
 80010ac:	20000104 	.word	0x20000104

080010b0 <sendHeartbeat>:
/**
 * @brief Sets up PTC heartbeat, checks for errors, then sends it
 *
 * @param lastWakeTime Pass in from canTX100Hz. Used to determine VSM timeout.
 */
static void sendHeartbeat(TickType_t lastWakeTime) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    cmr_canRXMeta_t *heartbeatVSMMeta = canRXMeta + CANRX_HEARTBEAT_VSM;
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <sendHeartbeat+0x88>)
 80010ba:	617b      	str	r3, [r7, #20]
    volatile cmr_canHeartbeat_t *heartbeatVSM = canGetPayload(CANRX_HEARTBEAT_VSM);
 80010bc:	2000      	movs	r0, #0
 80010be:	f7ff ffdb 	bl	8001078 <canGetPayload>
 80010c2:	6138      	str	r0, [r7, #16]

    heartbeat.state = heartbeatVSM->state;
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b1c      	ldr	r3, [pc, #112]	; (800113c <sendHeartbeat+0x8c>)
 80010cc:	701a      	strb	r2, [r3, #0]

    uint16_t error = CMR_CAN_ERROR_NONE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	81fb      	strh	r3, [r7, #14]

    if (cmr_canRXMetaTimeoutError(heartbeatVSMMeta, lastWakeTime) < 0) {
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	6978      	ldr	r0, [r7, #20]
 80010d6:	f000 feca 	bl	8001e6e <cmr_canRXMetaTimeoutError>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	da04      	bge.n	80010ea <sendHeartbeat+0x3a>
        error |= CMR_CAN_ERROR_VSM_TIMEOUT;
 80010e0:	89fb      	ldrh	r3, [r7, #14]
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	81fb      	strh	r3, [r7, #14]
    }

    if (error != CMR_CAN_ERROR_NONE) {
 80010ea:	89fb      	ldrh	r3, [r7, #14]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d002      	beq.n	80010f6 <sendHeartbeat+0x46>
        heartbeat.state = CMR_CAN_ERROR;
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <sendHeartbeat+0x8c>)
 80010f2:	2204      	movs	r2, #4
 80010f4:	701a      	strb	r2, [r3, #0]
    }
    memcpy(&heartbeat.error, &error, sizeof(error));
 80010f6:	89fb      	ldrh	r3, [r7, #14]
 80010f8:	4a10      	ldr	r2, [pc, #64]	; (800113c <sendHeartbeat+0x8c>)
 80010fa:	f8a2 3001 	strh.w	r3, [r2, #1]

    uint16_t warning = CMR_CAN_WARN_NONE;
 80010fe:	2300      	movs	r3, #0
 8001100:	81bb      	strh	r3, [r7, #12]
    if (cmr_canRXMetaTimeoutWarn(heartbeatVSMMeta, lastWakeTime) < 0) {
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	6978      	ldr	r0, [r7, #20]
 8001106:	f000 fea0 	bl	8001e4a <cmr_canRXMetaTimeoutWarn>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	da04      	bge.n	800111a <sendHeartbeat+0x6a>
        warning |= CMR_CAN_WARN_VSM_TIMEOUT;
 8001110:	89bb      	ldrh	r3, [r7, #12]
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	b29b      	uxth	r3, r3
 8001118:	81bb      	strh	r3, [r7, #12]
    }
    memcpy(&heartbeat.warning, &warning, sizeof(warning));
 800111a:	89bb      	ldrh	r3, [r7, #12]
 800111c:	4a07      	ldr	r2, [pc, #28]	; (800113c <sendHeartbeat+0x8c>)
 800111e:	f8a2 3003 	strh.w	r3, [r2, #3]

    canTX(CMR_CANID_HEARTBEAT_PTCx, &heartbeat, sizeof(heartbeat), canTX100Hz_period_ms);
 8001122:	230a      	movs	r3, #10
 8001124:	2205      	movs	r2, #5
 8001126:	4905      	ldr	r1, [pc, #20]	; (800113c <sendHeartbeat+0x8c>)
 8001128:	f240 1007 	movw	r0, #263	; 0x107
 800112c:	f7ff ff8c 	bl	8001048 <canTX>
}
 8001130:	bf00      	nop
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000104 	.word	0x20000104
 800113c:	20001cc8 	.word	0x20001cc8

08001140 <sendCoolingLoopTemps>:

/**
 * @brief Send cooling system temps on CAN bus.
 */
static void sendCoolingLoopTemps(void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b08c      	sub	sp, #48	; 0x30
 8001144:	af00      	add	r7, sp, #0
    int32_t Temp_1_dC =
 8001146:	2105      	movs	r1, #5
 8001148:	4828      	ldr	r0, [pc, #160]	; (80011ec <sendCoolingLoopTemps+0xac>)
 800114a:	f002 f88b 	bl	8003264 <cmr_sensorListGetValue>
 800114e:	62f8      	str	r0, [r7, #44]	; 0x2c
        cmr_sensorListGetValue(&sensorList, SENSOR_CH_THERM_1);
    int32_t Temp_2_dC =
 8001150:	2106      	movs	r1, #6
 8001152:	4826      	ldr	r0, [pc, #152]	; (80011ec <sendCoolingLoopTemps+0xac>)
 8001154:	f002 f886 	bl	8003264 <cmr_sensorListGetValue>
 8001158:	62b8      	str	r0, [r7, #40]	; 0x28
        cmr_sensorListGetValue(&sensorList, SENSOR_CH_THERM_2);
    int32_t Temp_3_dC =
 800115a:	2107      	movs	r1, #7
 800115c:	4823      	ldr	r0, [pc, #140]	; (80011ec <sendCoolingLoopTemps+0xac>)
 800115e:	f002 f881 	bl	8003264 <cmr_sensorListGetValue>
 8001162:	6278      	str	r0, [r7, #36]	; 0x24
        cmr_sensorListGetValue(&sensorList, SENSOR_CH_THERM_3);
    int32_t Temp_4_dC =
 8001164:	2108      	movs	r1, #8
 8001166:	4821      	ldr	r0, [pc, #132]	; (80011ec <sendCoolingLoopTemps+0xac>)
 8001168:	f002 f87c 	bl	8003264 <cmr_sensorListGetValue>
 800116c:	6238      	str	r0, [r7, #32]
        cmr_sensorListGetValue(&sensorList, SENSOR_CH_THERM_4);
    int32_t Temp_5_dC =
 800116e:	2109      	movs	r1, #9
 8001170:	481e      	ldr	r0, [pc, #120]	; (80011ec <sendCoolingLoopTemps+0xac>)
 8001172:	f002 f877 	bl	8003264 <cmr_sensorListGetValue>
 8001176:	61f8      	str	r0, [r7, #28]
        cmr_sensorListGetValue(&sensorList, SENSOR_CH_THERM_5);
    int32_t Temp_6_dC =
 8001178:	210a      	movs	r1, #10
 800117a:	481c      	ldr	r0, [pc, #112]	; (80011ec <sendCoolingLoopTemps+0xac>)
 800117c:	f002 f872 	bl	8003264 <cmr_sensorListGetValue>
 8001180:	61b8      	str	r0, [r7, #24]
        cmr_sensorListGetValue(&sensorList, SENSOR_CH_THERM_6);
    int32_t Temp_7_dC =
 8001182:	210b      	movs	r1, #11
 8001184:	4819      	ldr	r0, [pc, #100]	; (80011ec <sendCoolingLoopTemps+0xac>)
 8001186:	f002 f86d 	bl	8003264 <cmr_sensorListGetValue>
 800118a:	6178      	str	r0, [r7, #20]
        cmr_sensorListGetValue(&sensorList, SENSOR_CH_THERM_7);
    int32_t Temp_8_dC =
 800118c:	210c      	movs	r1, #12
 800118e:	4817      	ldr	r0, [pc, #92]	; (80011ec <sendCoolingLoopTemps+0xac>)
 8001190:	f002 f868 	bl	8003264 <cmr_sensorListGetValue>
 8001194:	6138      	str	r0, [r7, #16]
        cmr_sensorListGetValue(&sensorList, SENSOR_CH_THERM_8);

    /* Separate A and B messages are due to can packet size limits */
    cmr_canPTCpLoopTemp_A_t coolMsg1 = {
 8001196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001198:	b29b      	uxth	r3, r3
 800119a:	813b      	strh	r3, [r7, #8]
 800119c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119e:	b29b      	uxth	r3, r3
 80011a0:	817b      	strh	r3, [r7, #10]
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	81bb      	strh	r3, [r7, #12]
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	81fb      	strh	r3, [r7, #14]
        .temp2_dC = Temp_2_dC,
        .temp3_dC = Temp_3_dC,
        .temp4_dC = Temp_4_dC
    };

    cmr_canPTCpLoopTemp_B_t coolMsg2 = {
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	803b      	strh	r3, [r7, #0]
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	807b      	strh	r3, [r7, #2]
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	80bb      	strh	r3, [r7, #4]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	80fb      	strh	r3, [r7, #6]
        .temp6_dC = Temp_6_dC,
        .temp7_dC = Temp_7_dC,
        .temp8_dC = Temp_8_dC
    };

    canTX(CMR_CANID_LOOP_TEMPS_A_PTCx, &coolMsg1, sizeof(coolMsg1), canTX10Hz_period_ms);
 80011c6:	2364      	movs	r3, #100	; 0x64
 80011c8:	f107 0108 	add.w	r1, r7, #8
 80011cc:	2208      	movs	r2, #8
 80011ce:	f44f 7011 	mov.w	r0, #580	; 0x244
 80011d2:	f7ff ff39 	bl	8001048 <canTX>
    canTX(CMR_CANID_LOOP_TEMPS_B_PTCx, &coolMsg2, sizeof(coolMsg2), canTX10Hz_period_ms);
 80011d6:	2364      	movs	r3, #100	; 0x64
 80011d8:	4639      	mov	r1, r7
 80011da:	2208      	movs	r2, #8
 80011dc:	f44f 7015 	mov.w	r0, #596	; 0x254
 80011e0:	f7ff ff32 	bl	8001048 <canTX>
}
 80011e4:	bf00      	nop
 80011e6:	3730      	adds	r7, #48	; 0x30
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20001cd0 	.word	0x20001cd0

080011f0 <sendDriverStatus>:

/**
 * @brief Send Fan or Pump status information.
 */
static void sendDriverStatus(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
    uint8_t Channel1_Duty_Cycle_pcnt = channel_1_State;
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <sendDriverStatus+0x3c>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	71fb      	strb	r3, [r7, #7]
    uint8_t Channel2_Duty_Cycle_pcnt = channel_2_State;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <sendDriverStatus+0x40>)
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	71bb      	strb	r3, [r7, #6]
    uint8_t Channel3_Duty_Cycle_pcnt = channel_3_State;
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <sendDriverStatus+0x44>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	717b      	strb	r3, [r7, #5]

    cmr_canPTCDriverStatus_t driverStatusMsg = {
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	703b      	strb	r3, [r7, #0]
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	707b      	strb	r3, [r7, #1]
 8001210:	797b      	ldrb	r3, [r7, #5]
 8001212:	70bb      	strb	r3, [r7, #2]
        .channel1DutyCycle_pcnt = Channel1_Duty_Cycle_pcnt,
        .channel2DutyCycle_pcnt = Channel2_Duty_Cycle_pcnt,
        .channel3DutyCycle_pcnt = Channel3_Duty_Cycle_pcnt
    };

    canTX(CMR_CANID_STATUS_PTCx, &driverStatusMsg, sizeof(driverStatusMsg), canTX10Hz_period_ms);
 8001214:	2364      	movs	r3, #100	; 0x64
 8001216:	4639      	mov	r1, r7
 8001218:	2203      	movs	r2, #3
 800121a:	f44f 7049 	mov.w	r0, #804	; 0x324
 800121e:	f7ff ff13 	bl	8001048 <canTX>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20001cc2 	.word	0x20001cc2
 8001230:	20001cc0 	.word	0x20001cc0
 8001234:	20001cc4 	.word	0x20001cc4

08001238 <sendPowerDiagnostics>:

/**
 * @brief Send power diagnostic information.
 */
static void sendPowerDiagnostics(void) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
    int32_t logicVoltage_mV =
 800123e:	2102      	movs	r1, #2
 8001240:	4810      	ldr	r0, [pc, #64]	; (8001284 <sendPowerDiagnostics+0x4c>)
 8001242:	f002 f80f 	bl	8003264 <cmr_sensorListGetValue>
 8001246:	6178      	str	r0, [r7, #20]
        cmr_sensorListGetValue(&sensorList, SENSOR_CH_LOGIC_VOLTAGE_MV);
    int32_t loadVoltage_mV =
 8001248:	2100      	movs	r1, #0
 800124a:	480e      	ldr	r0, [pc, #56]	; (8001284 <sendPowerDiagnostics+0x4c>)
 800124c:	f002 f80a 	bl	8003264 <cmr_sensorListGetValue>
 8001250:	6138      	str	r0, [r7, #16]
        cmr_sensorListGetValue(&sensorList, SENSOR_CH_LOAD_VOLTAGE_MV);
    int32_t loadCurrent_mA =
 8001252:	2101      	movs	r1, #1
 8001254:	480b      	ldr	r0, [pc, #44]	; (8001284 <sendPowerDiagnostics+0x4c>)
 8001256:	f002 f805 	bl	8003264 <cmr_sensorListGetValue>
 800125a:	60f8      	str	r0, [r7, #12]
        cmr_sensorListGetValue(&sensorList, SENSOR_CH_LOAD_CURRENT_MA);

    cmr_canPTCPowerDiagnostics_t powerMsg = {
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	b29b      	uxth	r3, r3
 8001260:	80bb      	strh	r3, [r7, #4]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	b29b      	uxth	r3, r3
 8001266:	80fb      	strh	r3, [r7, #6]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	b29b      	uxth	r3, r3
 800126c:	813b      	strh	r3, [r7, #8]
        .logicVoltage_mV = logicVoltage_mV,
        .loadVoltage_mV = loadVoltage_mV,
        .loadCurrent_mA = loadCurrent_mA
    };

    canTX(CMR_CANID_POWER_DIAGNOSTICS_PTCx, &powerMsg, sizeof(powerMsg), canTX10Hz_period_ms);
 800126e:	2364      	movs	r3, #100	; 0x64
 8001270:	1d39      	adds	r1, r7, #4
 8001272:	2206      	movs	r2, #6
 8001274:	f240 5044 	movw	r0, #1348	; 0x544
 8001278:	f7ff fee6 	bl	8001048 <canTX>
}
 800127c:	bf00      	nop
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20001cd0 	.word	0x20001cd0

08001288 <gpioInit>:
};

/**
 * @brief Initializes the GPIO interface.
 */
void gpioInit(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
    cmr_gpioPinInit(
 800128c:	2107      	movs	r1, #7
 800128e:	4802      	ldr	r0, [pc, #8]	; (8001298 <gpioInit+0x10>)
 8001290:	f001 f94e 	bl	8002530 <cmr_gpioPinInit>
        gpioPinConfigs, sizeof(gpioPinConfigs) / sizeof(gpioPinConfigs[0])
    );
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	08009e00 	.word	0x08009e00

0800129c <statusLED>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void statusLED(void *pvParameters) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    cmr_gpioWrite(GPIO_LED_STATUS, 0);
 80012a4:	2100      	movs	r1, #0
 80012a6:	2000      	movs	r0, #0
 80012a8:	f001 f976 	bl	8002598 <cmr_gpioWrite>

    TickType_t lastWakeTime = xTaskGetTickCount();
 80012ac:	f003 f8e4 	bl	8004478 <xTaskGetTickCount>
 80012b0:	4603      	mov	r3, r0
 80012b2:	60fb      	str	r3, [r7, #12]
    while (1) {
        cmr_gpioToggle(GPIO_LED_STATUS);
 80012b4:	2000      	movs	r0, #0
 80012b6:	f001 f9ad 	bl	8002614 <cmr_gpioToggle>

        vTaskDelayUntil(&lastWakeTime, statusLED_period_ms);
 80012ba:	22fa      	movs	r2, #250	; 0xfa
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 ff64 	bl	8004190 <vTaskDelayUntil>
        cmr_gpioToggle(GPIO_LED_STATUS);
 80012c8:	e7f4      	b.n	80012b4 <statusLED+0x18>
	...

080012cc <main>:
 *
 * Device configuration and task initialization should be performed here.
 *
 * @return Does not return.
 */
int main(void) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af02      	add	r7, sp, #8
    // System initialization.
    HAL_Init();
 80012d2:	f003 fc91 	bl	8004bf8 <HAL_Init>
    cmr_rccSystemClockEnable();
 80012d6:	f001 fc1b 	bl	8002b10 <cmr_rccSystemClockEnable>

    // Peripheral configuration.
    gpioInit();
 80012da:	f7ff ffd5 	bl	8001288 <gpioInit>
    adcInit();
 80012de:	f7ff fddf 	bl	8000ea0 <adcInit>
    canInit();
 80012e2:	f7ff fe61 	bl	8000fa8 <canInit>
    sensorsInit();
 80012e6:	f000 fae3 	bl	80018b0 <sensorsInit>

    cmr_taskInit(
 80012ea:	2202      	movs	r2, #2
 80012ec:	2300      	movs	r3, #0
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <main+0x44>)
 80012f2:	4908      	ldr	r1, [pc, #32]	; (8001314 <main+0x48>)
 80012f4:	4808      	ldr	r0, [pc, #32]	; (8001318 <main+0x4c>)
 80012f6:	f001 ffc9 	bl	800328c <cmr_taskInit>

#ifndef CMR_PTC_ID
#error "No PTC ID defined!"
#elif (CMR_PTC_ID == 0) /* Pump Control Board */

    mcPowerInit();
 80012fa:	f000 f84f 	bl	800139c <mcPowerInit>
    brakelightInit();
 80012fe:	f7ff fe15 	bl	8000f2c <brakelightInit>
    pumpInit();
 8001302:	f000 f941 	bl	8001588 <pumpInit>

    #pragma warning "CMR_PTC_ID is not a valid value!"

#endif

    vTaskStartScheduler();
 8001306:	f002 ffb5 	bl	8004274 <vTaskStartScheduler>
    cmr_panic("vTaskStartScheduler returned!");
 800130a:	4804      	ldr	r0, [pc, #16]	; (800131c <main+0x50>)
 800130c:	f001 f9dd 	bl	80026ca <cmr_panic>
 8001310:	0800129d 	.word	0x0800129d
 8001314:	08008370 	.word	0x08008370
 8001318:	20000ea8 	.word	0x20000ea8
 800131c:	0800837c 	.word	0x0800837c

08001320 <mcPowerControl>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void mcPowerControl(void *pvParameters) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    /* Get reference to VSM Heartbeat */
    volatile cmr_canHeartbeat_t *vsmHeartbeat = canGetPayload(CANRX_HEARTBEAT_VSM);
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff fea5 	bl	8001078 <canGetPayload>
 800132e:	6178      	str	r0, [r7, #20]
    volatile cmr_canVSMStatus_t *vsmState = canGetPayload(CANRX_VSM_STATUS);
 8001330:	2001      	movs	r0, #1
 8001332:	f7ff fea1 	bl	8001078 <canGetPayload>
 8001336:	6138      	str	r0, [r7, #16]

    cmr_gpioWrite(GPIO_MTR_CTRL_ENABLE, 0);
 8001338:	2100      	movs	r1, #0
 800133a:	2005      	movs	r0, #5
 800133c:	f001 f92c 	bl	8002598 <cmr_gpioWrite>
    cmr_gpioWrite(GPIO_MC_EFUSE_AUTO, 0);
 8001340:	2100      	movs	r1, #0
 8001342:	2006      	movs	r0, #6
 8001344:	f001 f928 	bl	8002598 <cmr_gpioWrite>

    TickType_t lastWakeTime = xTaskGetTickCount();
 8001348:	f003 f896 	bl	8004478 <xTaskGetTickCount>
 800134c:	4603      	mov	r3, r0
 800134e:	60fb      	str	r3, [r7, #12]
    while (1) {
        // Inverter should be powered if the car is in HV_EN, RTD, or the
        // VSM is attempting to boot the inverter in it's internal state
        if (vsmHeartbeat->state == CMR_CAN_HV_EN ||
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d00e      	beq.n	8001378 <mcPowerControl+0x58>
            vsmHeartbeat->state == CMR_CAN_RTD || 
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b2db      	uxtb	r3, r3
        if (vsmHeartbeat->state == CMR_CAN_HV_EN ||
 8001360:	2b03      	cmp	r3, #3
 8001362:	d009      	beq.n	8001378 <mcPowerControl+0x58>
            vsmState->internalState == CMR_CAN_VSM_STATE_INVERTER_EN ||
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b2db      	uxtb	r3, r3
            vsmHeartbeat->state == CMR_CAN_RTD || 
 800136a:	2b06      	cmp	r3, #6
 800136c:	d004      	beq.n	8001378 <mcPowerControl+0x58>
            vsmState->internalState == CMR_CAN_VSM_STATE_HV_EN) 
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	b2db      	uxtb	r3, r3
            vsmState->internalState == CMR_CAN_VSM_STATE_INVERTER_EN ||
 8001374:	2b07      	cmp	r3, #7
 8001376:	d104      	bne.n	8001382 <mcPowerControl+0x62>
        {
            cmr_gpioWrite(GPIO_MTR_CTRL_ENABLE, 1);
 8001378:	2101      	movs	r1, #1
 800137a:	2005      	movs	r0, #5
 800137c:	f001 f90c 	bl	8002598 <cmr_gpioWrite>
 8001380:	e003      	b.n	800138a <mcPowerControl+0x6a>
        } else {
            cmr_gpioWrite(GPIO_MTR_CTRL_ENABLE, 0);
 8001382:	2100      	movs	r1, #0
 8001384:	2005      	movs	r0, #5
 8001386:	f001 f907 	bl	8002598 <cmr_gpioWrite>
        }

        vTaskDelayUntil(&lastWakeTime, mcPowerControl_period_ms);
 800138a:	2232      	movs	r2, #50	; 0x32
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	4611      	mov	r1, r2
 8001392:	4618      	mov	r0, r3
 8001394:	f002 fefc 	bl	8004190 <vTaskDelayUntil>
        if (vsmHeartbeat->state == CMR_CAN_HV_EN ||
 8001398:	e7da      	b.n	8001350 <mcPowerControl+0x30>
	...

0800139c <mcPowerInit>:
    }
}

void mcPowerInit() {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af02      	add	r7, sp, #8
    cmr_taskInit(
 80013a2:	2202      	movs	r2, #2
 80013a4:	2300      	movs	r3, #0
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <mcPowerInit+0x1c>)
 80013aa:	4904      	ldr	r1, [pc, #16]	; (80013bc <mcPowerInit+0x20>)
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <mcPowerInit+0x24>)
 80013ae:	f001 ff6d 	bl	800328c <cmr_taskInit>
        "mcPowerControl",
        mcPowerControl_priority,
        mcPowerControl,
        NULL
    );
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	08001321 	.word	0x08001321
 80013bc:	0800839c 	.word	0x0800839c
 80013c0:	20001108 	.word	0x20001108

080013c4 <pumpControl>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void pumpControl(void *pvParameters) {
 80013c4:	b5b0      	push	{r4, r5, r7, lr}
 80013c6:	b096      	sub	sp, #88	; 0x58
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    /* Enable the half bridges so that output isn't floating */
        cmr_gpioWrite(GPIO_CHANNEL_1_ENABLE, 1);
 80013cc:	2101      	movs	r1, #1
 80013ce:	2002      	movs	r0, #2
 80013d0:	f001 f8e2 	bl	8002598 <cmr_gpioWrite>
        cmr_gpioWrite(GPIO_CHANNEL_2_ENABLE, 1);
 80013d4:	2101      	movs	r1, #1
 80013d6:	2003      	movs	r0, #3
 80013d8:	f001 f8de 	bl	8002598 <cmr_gpioWrite>
        cmr_gpioWrite(GPIO_CHANNEL_3_ENABLE, 1);
 80013dc:	2101      	movs	r1, #1
 80013de:	2004      	movs	r0, #4
 80013e0:	f001 f8da 	bl	8002598 <cmr_gpioWrite>

        /* Get reference to VSM Heartbeat */
        volatile cmr_canHeartbeat_t *vsmHeartbeat = canGetPayload(CANRX_HEARTBEAT_VSM);
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff fe47 	bl	8001078 <canGetPayload>
 80013ea:	6578      	str	r0, [r7, #84]	; 0x54

        //cmr_canHeartbeat_t *heartbeat = &heartbeat;

        /* Initialize PWM channels to 25kHz for fan control lines */
        /* 96Mhz / (24 * 40000) = 100Hz */
        const cmr_pwmPinConfig_t pwmPinConfig1 = {
 80013ec:	4b5c      	ldr	r3, [pc, #368]	; (8001560 <pumpControl+0x19c>)
 80013ee:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80013f2:	461d      	mov	r5, r3
 80013f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80013fc:	e884 0003 	stmia.w	r4, {r0, r1}
            .channel = TIM_CHANNEL_2,
            .presc = 24,
            .period_ticks = 40000,
            .timer = TIM3
        };
        const cmr_pwmPinConfig_t pwmPinConfig2 = {
 8001400:	4b58      	ldr	r3, [pc, #352]	; (8001564 <pumpControl+0x1a0>)
 8001402:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001406:	461d      	mov	r5, r3
 8001408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800140a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001410:	e884 0003 	stmia.w	r4, {r0, r1}
            .channel = TIM_CHANNEL_2,
            .presc = 24,
            .period_ticks = 40000,
            .timer = TIM4
        };
        const cmr_pwmPinConfig_t pwmPinConfig3 = {
 8001414:	4b54      	ldr	r3, [pc, #336]	; (8001568 <pumpControl+0x1a4>)
 8001416:	f107 040c 	add.w	r4, r7, #12
 800141a:	461d      	mov	r5, r3
 800141c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800141e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001420:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001424:	e884 0003 	stmia.w	r4, {r0, r1}
            .channel = TIM_CHANNEL_3,
            .presc = 24,
            .period_ticks = 40000,
            .timer = TIM4
        };
        cmr_pwmInit(&channel_1_PWM, &pwmPinConfig1);
 8001428:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800142c:	4619      	mov	r1, r3
 800142e:	484f      	ldr	r0, [pc, #316]	; (800156c <pumpControl+0x1a8>)
 8001430:	f001 f9be 	bl	80027b0 <cmr_pwmInit>
        cmr_pwmInit(&channel_2_PWM, &pwmPinConfig2);
 8001434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001438:	4619      	mov	r1, r3
 800143a:	484d      	ldr	r0, [pc, #308]	; (8001570 <pumpControl+0x1ac>)
 800143c:	f001 f9b8 	bl	80027b0 <cmr_pwmInit>
        cmr_pwmInit(&channel_3_PWM, &pwmPinConfig3);
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	4619      	mov	r1, r3
 8001446:	484b      	ldr	r0, [pc, #300]	; (8001574 <pumpControl+0x1b0>)
 8001448:	f001 f9b2 	bl	80027b0 <cmr_pwmInit>

        TickType_t lastWakeTime = xTaskGetTickCount();
 800144c:	f003 f814 	bl	8004478 <xTaskGetTickCount>
 8001450:	4603      	mov	r3, r0
 8001452:	60bb      	str	r3, [r7, #8]
        while (1) {

            switch (heartbeat.state) {
 8001454:	4b48      	ldr	r3, [pc, #288]	; (8001578 <pumpControl+0x1b4>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d029      	beq.n	80014b0 <pumpControl+0xec>
 800145c:	2b03      	cmp	r3, #3
 800145e:	d14f      	bne.n	8001500 <pumpControl+0x13c>
                case CMR_CAN_RTD:
                    channel_1_State = 100;
 8001460:	4b46      	ldr	r3, [pc, #280]	; (800157c <pumpControl+0x1b8>)
 8001462:	2264      	movs	r2, #100	; 0x64
 8001464:	801a      	strh	r2, [r3, #0]
                    channel_2_State = 100;
 8001466:	4b46      	ldr	r3, [pc, #280]	; (8001580 <pumpControl+0x1bc>)
 8001468:	2264      	movs	r2, #100	; 0x64
 800146a:	801a      	strh	r2, [r3, #0]
                    channel_3_State = 100;
 800146c:	4b45      	ldr	r3, [pc, #276]	; (8001584 <pumpControl+0x1c0>)
 800146e:	2264      	movs	r2, #100	; 0x64
 8001470:	801a      	strh	r2, [r3, #0]
                    cmr_pwmSetDutyCycle(&channel_1_PWM, channel_1_State);
 8001472:	4b42      	ldr	r3, [pc, #264]	; (800157c <pumpControl+0x1b8>)
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	4619      	mov	r1, r3
 8001478:	483c      	ldr	r0, [pc, #240]	; (800156c <pumpControl+0x1a8>)
 800147a:	f001 fadb 	bl	8002a34 <cmr_pwmSetDutyCycle>
                    cmr_pwmSetDutyCycle(&channel_2_PWM, channel_2_State);
 800147e:	4b40      	ldr	r3, [pc, #256]	; (8001580 <pumpControl+0x1bc>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	4619      	mov	r1, r3
 8001484:	483a      	ldr	r0, [pc, #232]	; (8001570 <pumpControl+0x1ac>)
 8001486:	f001 fad5 	bl	8002a34 <cmr_pwmSetDutyCycle>
                    cmr_pwmSetDutyCycle(&channel_3_PWM, channel_3_State);
 800148a:	4b3e      	ldr	r3, [pc, #248]	; (8001584 <pumpControl+0x1c0>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	4619      	mov	r1, r3
 8001490:	4838      	ldr	r0, [pc, #224]	; (8001574 <pumpControl+0x1b0>)
 8001492:	f001 facf 	bl	8002a34 <cmr_pwmSetDutyCycle>
                    cmr_gpioWrite(GPIO_CHANNEL_1_ENABLE, 1);
 8001496:	2101      	movs	r1, #1
 8001498:	2002      	movs	r0, #2
 800149a:	f001 f87d 	bl	8002598 <cmr_gpioWrite>
                    cmr_gpioWrite(GPIO_CHANNEL_2_ENABLE, 1);
 800149e:	2101      	movs	r1, #1
 80014a0:	2003      	movs	r0, #3
 80014a2:	f001 f879 	bl	8002598 <cmr_gpioWrite>
                    cmr_gpioWrite(GPIO_CHANNEL_3_ENABLE, 1);
 80014a6:	2101      	movs	r1, #1
 80014a8:	2004      	movs	r0, #4
 80014aa:	f001 f875 	bl	8002598 <cmr_gpioWrite>
                    break;
 80014ae:	e04f      	b.n	8001550 <pumpControl+0x18c>
                case CMR_CAN_HV_EN:
                    channel_1_State = 100;
 80014b0:	4b32      	ldr	r3, [pc, #200]	; (800157c <pumpControl+0x1b8>)
 80014b2:	2264      	movs	r2, #100	; 0x64
 80014b4:	801a      	strh	r2, [r3, #0]
                    channel_2_State = 100;
 80014b6:	4b32      	ldr	r3, [pc, #200]	; (8001580 <pumpControl+0x1bc>)
 80014b8:	2264      	movs	r2, #100	; 0x64
 80014ba:	801a      	strh	r2, [r3, #0]
                    channel_3_State = 100;
 80014bc:	4b31      	ldr	r3, [pc, #196]	; (8001584 <pumpControl+0x1c0>)
 80014be:	2264      	movs	r2, #100	; 0x64
 80014c0:	801a      	strh	r2, [r3, #0]
                    cmr_pwmSetDutyCycle(&channel_1_PWM, channel_1_State);
 80014c2:	4b2e      	ldr	r3, [pc, #184]	; (800157c <pumpControl+0x1b8>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	4619      	mov	r1, r3
 80014c8:	4828      	ldr	r0, [pc, #160]	; (800156c <pumpControl+0x1a8>)
 80014ca:	f001 fab3 	bl	8002a34 <cmr_pwmSetDutyCycle>
                    cmr_pwmSetDutyCycle(&channel_2_PWM, channel_2_State);
 80014ce:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <pumpControl+0x1bc>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	4619      	mov	r1, r3
 80014d4:	4826      	ldr	r0, [pc, #152]	; (8001570 <pumpControl+0x1ac>)
 80014d6:	f001 faad 	bl	8002a34 <cmr_pwmSetDutyCycle>
                    cmr_pwmSetDutyCycle(&channel_3_PWM, channel_3_State);
 80014da:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <pumpControl+0x1c0>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	4619      	mov	r1, r3
 80014e0:	4824      	ldr	r0, [pc, #144]	; (8001574 <pumpControl+0x1b0>)
 80014e2:	f001 faa7 	bl	8002a34 <cmr_pwmSetDutyCycle>
                    cmr_gpioWrite(GPIO_CHANNEL_1_ENABLE, 1);
 80014e6:	2101      	movs	r1, #1
 80014e8:	2002      	movs	r0, #2
 80014ea:	f001 f855 	bl	8002598 <cmr_gpioWrite>
                    cmr_gpioWrite(GPIO_CHANNEL_2_ENABLE, 1);
 80014ee:	2101      	movs	r1, #1
 80014f0:	2003      	movs	r0, #3
 80014f2:	f001 f851 	bl	8002598 <cmr_gpioWrite>
                    cmr_gpioWrite(GPIO_CHANNEL_3_ENABLE, 1);
 80014f6:	2101      	movs	r1, #1
 80014f8:	2004      	movs	r0, #4
 80014fa:	f001 f84d 	bl	8002598 <cmr_gpioWrite>
                    break;
 80014fe:	e027      	b.n	8001550 <pumpControl+0x18c>
                default:
                    channel_1_State = 0;
 8001500:	4b1e      	ldr	r3, [pc, #120]	; (800157c <pumpControl+0x1b8>)
 8001502:	2200      	movs	r2, #0
 8001504:	801a      	strh	r2, [r3, #0]
                    channel_2_State = 0;
 8001506:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <pumpControl+0x1bc>)
 8001508:	2200      	movs	r2, #0
 800150a:	801a      	strh	r2, [r3, #0]
                    channel_3_State = 0;
 800150c:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <pumpControl+0x1c0>)
 800150e:	2200      	movs	r2, #0
 8001510:	801a      	strh	r2, [r3, #0]
                    cmr_pwmSetDutyCycle(&channel_1_PWM, channel_1_State);
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <pumpControl+0x1b8>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	4619      	mov	r1, r3
 8001518:	4814      	ldr	r0, [pc, #80]	; (800156c <pumpControl+0x1a8>)
 800151a:	f001 fa8b 	bl	8002a34 <cmr_pwmSetDutyCycle>
                    cmr_pwmSetDutyCycle(&channel_2_PWM, channel_2_State);
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <pumpControl+0x1bc>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	4619      	mov	r1, r3
 8001524:	4812      	ldr	r0, [pc, #72]	; (8001570 <pumpControl+0x1ac>)
 8001526:	f001 fa85 	bl	8002a34 <cmr_pwmSetDutyCycle>
                    cmr_pwmSetDutyCycle(&channel_3_PWM, channel_3_State);
 800152a:	4b16      	ldr	r3, [pc, #88]	; (8001584 <pumpControl+0x1c0>)
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	4619      	mov	r1, r3
 8001530:	4810      	ldr	r0, [pc, #64]	; (8001574 <pumpControl+0x1b0>)
 8001532:	f001 fa7f 	bl	8002a34 <cmr_pwmSetDutyCycle>
                    cmr_gpioWrite(GPIO_CHANNEL_1_ENABLE, 1);
 8001536:	2101      	movs	r1, #1
 8001538:	2002      	movs	r0, #2
 800153a:	f001 f82d 	bl	8002598 <cmr_gpioWrite>
                    cmr_gpioWrite(GPIO_CHANNEL_2_ENABLE, 1);
 800153e:	2101      	movs	r1, #1
 8001540:	2003      	movs	r0, #3
 8001542:	f001 f829 	bl	8002598 <cmr_gpioWrite>
                    cmr_gpioWrite(GPIO_CHANNEL_3_ENABLE, 1);
 8001546:	2101      	movs	r1, #1
 8001548:	2004      	movs	r0, #4
 800154a:	f001 f825 	bl	8002598 <cmr_gpioWrite>
                    break;
 800154e:	bf00      	nop
            }

            vTaskDelayUntil(&lastWakeTime, pumpControl_period_ms);
 8001550:	2232      	movs	r2, #50	; 0x32
 8001552:	f107 0308 	add.w	r3, r7, #8
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f002 fe19 	bl	8004190 <vTaskDelayUntil>
            switch (heartbeat.state) {
 800155e:	e779      	b.n	8001454 <pumpControl+0x90>
 8001560:	080083ac 	.word	0x080083ac
 8001564:	080083c4 	.word	0x080083c4
 8001568:	080083dc 	.word	0x080083dc
 800156c:	20001368 	.word	0x20001368
 8001570:	200013ac 	.word	0x200013ac
 8001574:	200013f0 	.word	0x200013f0
 8001578:	20001cc8 	.word	0x20001cc8
 800157c:	20001cc2 	.word	0x20001cc2
 8001580:	20001cc0 	.word	0x20001cc0
 8001584:	20001cc4 	.word	0x20001cc4

08001588 <pumpInit>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
void pumpInit() {
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af02      	add	r7, sp, #8
    cmr_taskInit(
 800158e:	2204      	movs	r2, #4
 8001590:	2300      	movs	r3, #0
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <pumpInit+0x1c>)
 8001596:	4904      	ldr	r1, [pc, #16]	; (80015a8 <pumpInit+0x20>)
 8001598:	4804      	ldr	r0, [pc, #16]	; (80015ac <pumpInit+0x24>)
 800159a:	f001 fe77 	bl	800328c <cmr_taskInit>
        "pumpControl",
        pumpControl_priority,
        pumpControl,
        NULL
    );
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	080013c5 	.word	0x080013c5
 80015a8:	080083f4 	.word	0x080083f4
 80015ac:	20001434 	.word	0x20001434

080015b0 <sampleADCSensor>:
 *
 * @param sensor The ADC sensor to update.
 *
 * @return The new value from the ADC.
 */
static uint32_t sampleADCSensor(const cmr_sensor_t *sensor) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
    sensorChannel_t sensorChannel = sensor - sensors;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a0c      	ldr	r2, [pc, #48]	; (80015ec <sampleADCSensor+0x3c>)
 80015bc:	1a9b      	subs	r3, r3, r2
 80015be:	10db      	asrs	r3, r3, #3
 80015c0:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <sampleADCSensor+0x40>)
 80015c2:	fb02 f303 	mul.w	r3, r2, r3
 80015c6:	73fb      	strb	r3, [r7, #15]
    configASSERT(sensorChannel < SENSOR_CH_LEN);
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	2b0c      	cmp	r3, #12
 80015cc:	d903      	bls.n	80015d6 <sampleADCSensor+0x26>
 80015ce:	2136      	movs	r1, #54	; 0x36
 80015d0:	4808      	ldr	r0, [pc, #32]	; (80015f4 <sampleADCSensor+0x44>)
 80015d2:	f001 f87a 	bl	80026ca <cmr_panic>
    return adcRead(sensorsADCChannels[sensorChannel]);
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <sampleADCSensor+0x48>)
 80015da:	5cd3      	ldrb	r3, [r2, r3]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fc6f 	bl	8000ec0 <adcRead>
 80015e2:	4603      	mov	r3, r0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200001a4 	.word	0x200001a4
 80015f0:	cccccccd 	.word	0xcccccccd
 80015f4:	08008400 	.word	0x08008400
 80015f8:	08009ea8 	.word	0x08009ea8

080015fc <adcFractionalConvert>:
 * @return Scaled value. Sets channel.error field in case of error.
 */
static int32_t adcFractionalConvert(
    const cmr_sensor_t *sensor, uint32_t reading,
    int32_t numerator, int32_t divisor, uint32_t offset
) {
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
 8001608:	603b      	str	r3, [r7, #0]
    (void) sensor;  // Placate compiler.
    return ((int32_t) (reading + offset)) * numerator / divisor;
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	4413      	add	r3, r2
 8001610:	461a      	mov	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	fb03 f202 	mul.w	r2, r3, r2
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	fb92 f3f3 	sdiv	r3, r2, r3
}
 800161e:	4618      	mov	r0, r3
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <adcConvLogicVoltage_mV>:
 * @param s The sensor.
 * @param r The raw reading.
 *
 * @return Logic voltage in mV.
 */
static int32_t adcConvLogicVoltage_mV(const cmr_sensor_t *s, uint32_t r) {
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af02      	add	r7, sp, #8
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
    // value * 0.8 (mV per bit) * 11 (1:11 voltage divider)
    return adcFractionalConvert(s, r, 88, 10, 0);
 8001634:	2300      	movs	r3, #0
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	230a      	movs	r3, #10
 800163a:	2258      	movs	r2, #88	; 0x58
 800163c:	6839      	ldr	r1, [r7, #0]
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ffdc 	bl	80015fc <adcFractionalConvert>
 8001644:	4603      	mov	r3, r0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <adcConvLoadVoltage_mV>:
 * @param s The sensor.
 * @param r The raw reading.
 *
 * @return load voltage in mV.
 */
static int32_t adcConvLoadVoltage_mV(const cmr_sensor_t *s, uint32_t r) {
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af02      	add	r7, sp, #8
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	6039      	str	r1, [r7, #0]
    // value * 0.8 (mV per bit) * 11 (1:11 voltage divider)
    return adcFractionalConvert(s, r, 88, 10, 0);
 8001658:	2300      	movs	r3, #0
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	230a      	movs	r3, #10
 800165e:	2258      	movs	r2, #88	; 0x58
 8001660:	6839      	ldr	r1, [r7, #0]
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffca 	bl	80015fc <adcFractionalConvert>
 8001668:	4603      	mov	r3, r0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <adcConvLoadCurrent_mA>:
 * @param s The sensor.
 * @param r The raw reading.
 *
 * @return Load current in mA.
 */
static int32_t adcConvLoadCurrent_mA(const cmr_sensor_t *s, uint32_t r) {
 8001672:	b580      	push	{r7, lr}
 8001674:	b084      	sub	sp, #16
 8001676:	af02      	add	r7, sp, #8
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	6039      	str	r1, [r7, #0]
    // mA * 0.010 Ohm * 20 V/V = mV = adcVal * 0.8 mV/bit
    // Solve for mA = adcVal * 24 / 100
    return adcFractionalConvert(s, r, 4, 1, 0);
 800167c:	2300      	movs	r3, #0
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	2301      	movs	r3, #1
 8001682:	2204      	movs	r2, #4
 8001684:	6839      	ldr	r1, [r7, #0]
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ffb8 	bl	80015fc <adcFractionalConvert>
 800168c:	4603      	mov	r3, r0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <adcConvSwitchTemp_dC>:
 * @param s The sensor.
 * @param adcVal The raw reading.
 *
 * @return Switch temperature in 10th of degrees C.
 */
static int32_t adcConvSwitchTemp_dC(const cmr_sensor_t *s, uint32_t adcVal) {
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
    // Rth = ((10 kOhm * 3300 mV) / (adcVal * 0.8 mV/bit)) - 10 kOhm
    // Rth = ((10000 Ohm * 3.3 V) / (adcVal * 0.0008 V/bit)) - 10000 Ohm
    // Rth = (33000 / adcVal * (8 / 10000)) - 10000
    // Rth = (33000 / (adcVal * 8) / 10000) - 10000
    // Rth = (330,000,000 / (adcVal * 8)) - 10000
    uint32_t thermistorResistance_Ohm = (330000000 / (adcVal * 8)) - 10000;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	4a16      	ldr	r2, [pc, #88]	; (8001700 <adcConvSwitchTemp_dC+0x68>)
 80016a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ac:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 80016b0:	3b10      	subs	r3, #16
 80016b2:	60bb      	str	r3, [r7, #8]

    for (size_t i = 0; i < thermTempConvsSwitch_len; i++) {
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	e00f      	b.n	80016da <adcConvSwitchTemp_dC+0x42>
        if (thermistorResistance_Ohm >= thermTempConvsSwitch[i].resistance_Ohm) {
 80016ba:	4a12      	ldr	r2, [pc, #72]	; (8001704 <adcConvSwitchTemp_dC+0x6c>)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d805      	bhi.n	80016d4 <adcConvSwitchTemp_dC+0x3c>
            return thermTempConvsSwitch[i].temp_dC;
 80016c8:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <adcConvSwitchTemp_dC+0x6c>)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4413      	add	r3, r2
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	e00e      	b.n	80016f2 <adcConvSwitchTemp_dC+0x5a>
    for (size_t i = 0; i < thermTempConvsSwitch_len; i++) {
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	3301      	adds	r3, #1
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <adcConvSwitchTemp_dC+0x70>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d3ea      	bcc.n	80016ba <adcConvSwitchTemp_dC+0x22>
        }
    }

    return thermTempConvsSwitch[thermTempConvsSwitch_len - 1].temp_dC;
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <adcConvSwitchTemp_dC+0x70>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	4a06      	ldr	r2, [pc, #24]	; (8001704 <adcConvSwitchTemp_dC+0x6c>)
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	4413      	add	r3, r2
 80016f0:	685b      	ldr	r3, [r3, #4]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	13ab6680 	.word	0x13ab6680
 8001704:	08009ec8 	.word	0x08009ec8
 8001708:	08009f48 	.word	0x08009f48

0800170c <thermistorCalc>:

// returns in degrees C
// takes the B value, the resistance at given tmep, that temp, the resistor in the divider, the sensed voltage, and the bias voltage
// assumes thermistor is on the high side
float thermistorCalc(float B, float r1, float rTemp, float biasR, float vSense, float vBias) {
 800170c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001710:	b088      	sub	sp, #32
 8001712:	af00      	add	r7, sp, #0
 8001714:	ed87 0a05 	vstr	s0, [r7, #20]
 8001718:	edc7 0a04 	vstr	s1, [r7, #16]
 800171c:	ed87 1a03 	vstr	s2, [r7, #12]
 8001720:	edc7 1a02 	vstr	s3, [r7, #8]
 8001724:	ed87 2a01 	vstr	s4, [r7, #4]
 8001728:	edc7 2a00 	vstr	s5, [r7]
    float r2 = biasR * ((vBias / vSense) - 1);
 800172c:	edd7 6a00 	vldr	s13, [r7]
 8001730:	ed97 7a01 	vldr	s14, [r7, #4]
 8001734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001738:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800173c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001740:	edd7 7a02 	vldr	s15, [r7, #8]
 8001744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001748:	edc7 7a07 	vstr	s15, [r7, #28]
    float temp = (B * (rTemp + 273.15f)) / (B - ((rTemp + 273.15f) * log(r1/r2)));
 800174c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001750:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80017fc <thermistorCalc+0xf0>
 8001754:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001758:	edd7 7a05 	vldr	s15, [r7, #20]
 800175c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001760:	ee17 0a90 	vmov	r0, s15
 8001764:	f7fe fec0 	bl	80004e8 <__aeabi_f2d>
 8001768:	4604      	mov	r4, r0
 800176a:	460d      	mov	r5, r1
 800176c:	6978      	ldr	r0, [r7, #20]
 800176e:	f7fe febb 	bl	80004e8 <__aeabi_f2d>
 8001772:	4680      	mov	r8, r0
 8001774:	4689      	mov	r9, r1
 8001776:	edd7 7a03 	vldr	s15, [r7, #12]
 800177a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80017fc <thermistorCalc+0xf0>
 800177e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001782:	ee17 0a90 	vmov	r0, s15
 8001786:	f7fe feaf 	bl	80004e8 <__aeabi_f2d>
 800178a:	4682      	mov	sl, r0
 800178c:	468b      	mov	fp, r1
 800178e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001792:	edd7 7a07 	vldr	s15, [r7, #28]
 8001796:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800179a:	ee16 0a90 	vmov	r0, s13
 800179e:	f7fe fea3 	bl	80004e8 <__aeabi_f2d>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	ec43 2b10 	vmov	d0, r2, r3
 80017aa:	f006 fb2d 	bl	8007e08 <log>
 80017ae:	ec53 2b10 	vmov	r2, r3, d0
 80017b2:	4650      	mov	r0, sl
 80017b4:	4659      	mov	r1, fp
 80017b6:	f7fe feeb 	bl	8000590 <__aeabi_dmul>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4640      	mov	r0, r8
 80017c0:	4649      	mov	r1, r9
 80017c2:	f7fe fd31 	bl	8000228 <__aeabi_dsub>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4620      	mov	r0, r4
 80017cc:	4629      	mov	r1, r5
 80017ce:	f7ff f809 	bl	80007e4 <__aeabi_ddiv>
 80017d2:	4603      	mov	r3, r0
 80017d4:	460c      	mov	r4, r1
 80017d6:	4618      	mov	r0, r3
 80017d8:	4621      	mov	r1, r4
 80017da:	f7ff f989 	bl	8000af0 <__aeabi_d2f>
 80017de:	4603      	mov	r3, r0
 80017e0:	61bb      	str	r3, [r7, #24]
    return temp - 273.15f;
 80017e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80017e6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80017fc <thermistorCalc+0xf0>
 80017ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 80017ee:	eeb0 0a67 	vmov.f32	s0, s15
 80017f2:	3720      	adds	r7, #32
 80017f4:	46bd      	mov	sp, r7
 80017f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017fa:	bf00      	nop
 80017fc:	43889333 	.word	0x43889333

08001800 <adcConvRadTherm_dC>:
 * @param s The sensor.
 * @param adcVal The raw reading.
 *
 * @return Cooling temperature in 10th of degrees C.
 */
static int32_t adcConvRadTherm_dC(const cmr_sensor_t *s, uint32_t adcVal) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
    float sensed_ratio = adcVal / ((float) 4095);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001814:	eddf 6a15 	vldr	s13, [pc, #84]	; 800186c <adcConvRadTherm_dC+0x6c>
 8001818:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800181c:	edc7 7a05 	vstr	s15, [r7, #20]
    float sensed_voltage = sensed_ratio * ((float) 3.3);
 8001820:	edd7 7a05 	vldr	s15, [r7, #20]
 8001824:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001870 <adcConvRadTherm_dC+0x70>
 8001828:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182c:	edc7 7a04 	vstr	s15, [r7, #16]

    //3435
    float sensed_temp = thermistorCalc(3892.f, 10000.f, 25.f, 5.6e3, sensed_voltage, 2.6f);
 8001830:	eddf 2a10 	vldr	s5, [pc, #64]	; 8001874 <adcConvRadTherm_dC+0x74>
 8001834:	ed97 2a04 	vldr	s4, [r7, #16]
 8001838:	eddf 1a0f 	vldr	s3, [pc, #60]	; 8001878 <adcConvRadTherm_dC+0x78>
 800183c:	eeb3 1a09 	vmov.f32	s2, #57	; 0x41c80000  25.0
 8001840:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800187c <adcConvRadTherm_dC+0x7c>
 8001844:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001880 <adcConvRadTherm_dC+0x80>
 8001848:	f7ff ff60 	bl	800170c <thermistorCalc>
 800184c:	ed87 0a03 	vstr	s0, [r7, #12]
    return sensed_temp * 10; //to report dC units
 8001850:	edd7 7a03 	vldr	s15, [r7, #12]
 8001854:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001858:	ee67 7a87 	vmul.f32	s15, s15, s14
 800185c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001860:	ee17 3a90 	vmov	r3, s15
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	457ff000 	.word	0x457ff000
 8001870:	40533333 	.word	0x40533333
 8001874:	40266666 	.word	0x40266666
 8001878:	45af0000 	.word	0x45af0000
 800187c:	461c4000 	.word	0x461c4000
 8001880:	45734000 	.word	0x45734000

08001884 <sensorsUpdate>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void sensorsUpdate(void *pvParameters) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    TickType_t lastWakeTime = xTaskGetTickCount();
 800188c:	f002 fdf4 	bl	8004478 <xTaskGetTickCount>
 8001890:	4603      	mov	r3, r0
 8001892:	60fb      	str	r3, [r7, #12]
    while (1) {
        cmr_sensorListUpdate(&sensorList);
 8001894:	4805      	ldr	r0, [pc, #20]	; (80018ac <sensorsUpdate+0x28>)
 8001896:	f001 fcc7 	bl	8003228 <cmr_sensorListUpdate>

        vTaskDelayUntil(&lastWakeTime, sensorsUpdate_period_ms);
 800189a:	220a      	movs	r2, #10
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	4611      	mov	r1, r2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f002 fc74 	bl	8004190 <vTaskDelayUntil>
        cmr_sensorListUpdate(&sensorList);
 80018a8:	e7f4      	b.n	8001894 <sensorsUpdate+0x10>
 80018aa:	bf00      	nop
 80018ac:	20001cd0 	.word	0x20001cd0

080018b0 <sensorsInit>:
}

/**
 * @brief Initializes the sensor interface.
 */
void sensorsInit(void) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af02      	add	r7, sp, #8
    cmr_sensorListInit(
 80018b6:	220d      	movs	r2, #13
 80018b8:	4907      	ldr	r1, [pc, #28]	; (80018d8 <sensorsInit+0x28>)
 80018ba:	4808      	ldr	r0, [pc, #32]	; (80018dc <sensorsInit+0x2c>)
 80018bc:	f001 fc8f 	bl	80031de <cmr_sensorListInit>
        &sensorList,
        sensors, sizeof(sensors) / sizeof(sensors[0])
    );

    // Task creation.
    cmr_taskInit(
 80018c0:	2205      	movs	r2, #5
 80018c2:	2300      	movs	r3, #0
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <sensorsInit+0x30>)
 80018c8:	4906      	ldr	r1, [pc, #24]	; (80018e4 <sensorsInit+0x34>)
 80018ca:	4807      	ldr	r0, [pc, #28]	; (80018e8 <sensorsInit+0x38>)
 80018cc:	f001 fcde 	bl	800328c <cmr_taskInit>
        "sensors update",
        sensorsUpdate_priority,
        sensorsUpdate,
        NULL
    );
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200001a4 	.word	0x200001a4
 80018dc:	20001cd0 	.word	0x20001cd0
 80018e0:	08001885 	.word	0x08001885
 80018e4:	08008444 	.word	0x08008444
 80018e8:	20001694 	.word	0x20001694

080018ec <cmr_adcSample>:
 *
 * @param pvParameters (cmr_adc_t *) The ADC.
 *
 * @return Does not return.
 */
static void cmr_adcSample(void *pvParameters) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
    cmr_adc_t *adc = (cmr_adc_t *) pvParameters;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	613b      	str	r3, [r7, #16]

    TickType_t lastWakeTime = xTaskGetTickCount();
 80018f8:	f002 fdbe 	bl	8004478 <xTaskGetTickCount>
 80018fc:	4603      	mov	r3, r0
 80018fe:	60bb      	str	r3, [r7, #8]
    while (1) {
        // ADC set up in discontinuous scan mode.
        // Each `HAL_ADC_Start()` call converts the next-highest-rank channel.
        for (size_t i = 0; i < adc->channelsLen; i++) {
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	e01c      	b.n	8001940 <cmr_adcSample+0x54>
            cmr_adcChannel_t *channel = &(adc->channels[i]);
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	60fb      	str	r3, [r7, #12]

            HAL_ADC_Start(&adc->handle);
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4618      	mov	r0, r3
 800191c:	f003 fa34 	bl	8004d88 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&adc->handle, CMR_ADC_TIMEOUT_MS);
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	2201      	movs	r2, #1
 8001924:	4611      	mov	r1, r2
 8001926:	4618      	mov	r0, r3
 8001928:	f003 fad4 	bl	8004ed4 <HAL_ADC_PollForConversion>
            channel->value = HAL_ADC_GetValue(&adc->handle);
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4618      	mov	r0, r3
 8001930:	f003 fb54 	bl	8004fdc <HAL_ADC_GetValue>
 8001934:	4602      	mov	r2, r0
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	611a      	str	r2, [r3, #16]
        for (size_t i = 0; i < adc->channelsLen; i++) {
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3301      	adds	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	429a      	cmp	r2, r3
 8001948:	d8dd      	bhi.n	8001906 <cmr_adcSample+0x1a>
        }

        vTaskDelayUntil(&lastWakeTime, cmr_adcSample_period_ms);
 800194a:	220a      	movs	r2, #10
 800194c:	f107 0308 	add.w	r3, r7, #8
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f002 fc1c 	bl	8004190 <vTaskDelayUntil>
        for (size_t i = 0; i < adc->channelsLen; i++) {
 8001958:	e7d2      	b.n	8001900 <cmr_adcSample+0x14>
	...

0800195c <cmr_adcConfigChannels>:
/**
 * @brief Initializes ADC channel sequence.
 *
 * @param adc The ADC to configure.
 */
static void cmr_adcConfigChannels(cmr_adc_t *adc) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b08e      	sub	sp, #56	; 0x38
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < adc->channelsLen; i++) {
 8001964:	2300      	movs	r3, #0
 8001966:	637b      	str	r3, [r7, #52]	; 0x34
 8001968:	e042      	b.n	80019f0 <cmr_adcConfigChannels+0x94>
        const cmr_adcChannel_t *channel = adc->channels + i;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800196e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
        if (channel->channel > ADC_CHANNEL_15) {
 800197c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b0f      	cmp	r3, #15
 8001982:	d902      	bls.n	800198a <cmr_adcConfigChannels+0x2e>
            cmr_panic("Invalid ADC channel!");
 8001984:	481f      	ldr	r0, [pc, #124]	; (8001a04 <cmr_adcConfigChannels+0xa8>)
 8001986:	f000 fea0 	bl	80026ca <cmr_panic>
        }

        ADC_ChannelConfTypeDef channelConfig = {
            .Channel = channel->channel,
 800198a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198c:	681b      	ldr	r3, [r3, #0]
        ADC_ChannelConfTypeDef channelConfig = {
 800198e:	623b      	str	r3, [r7, #32]
            .Rank = i + 1,  // HAL needs Rank to be from 1 to 16
 8001990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001992:	3301      	adds	r3, #1
        ADC_ChannelConfTypeDef channelConfig = {
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
            .SamplingTime = channel->samplingTime,
 8001996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001998:	68db      	ldr	r3, [r3, #12]
        ADC_ChannelConfTypeDef channelConfig = {
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
 800199c:	2300      	movs	r3, #0
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
            .Offset = 0     // reserved, set to 0
        };

        if (HAL_ADC_ConfigChannel(&adc->handle, &channelConfig) != HAL_OK) {
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f107 0220 	add.w	r2, r7, #32
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f003 fb25 	bl	8004ff8 <HAL_ADC_ConfigChannel>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <cmr_adcConfigChannels+0x5e>
            cmr_panic("HAL_ADC_ConfigChannel() failed!");
 80019b4:	4814      	ldr	r0, [pc, #80]	; (8001a08 <cmr_adcConfigChannels+0xac>)
 80019b6:	f000 fe88 	bl	80026ca <cmr_panic>
        }

        // Configure the pin for analog use.
        cmr_rccGPIOClockEnable(channel->port);
 80019ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4618      	mov	r0, r3
 80019c0:	f001 f916 	bl	8002bf0 <cmr_rccGPIOClockEnable>

        GPIO_InitTypeDef pinConfig = {
            .Pin = channel->pin,
 80019c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c6:	891b      	ldrh	r3, [r3, #8]
        GPIO_InitTypeDef pinConfig = {
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	2303      	movs	r3, #3
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
            .Pull = GPIO_NOPULL,
            .Speed = GPIO_SPEED_FREQ_LOW,
            .Alternate = 0
        };

        HAL_GPIO_Init(channel->port, &pinConfig);
 80019da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f107 020c 	add.w	r2, r7, #12
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f004 fdef 	bl	80065c8 <HAL_GPIO_Init>
    for (size_t i = 0; i < adc->channelsLen; i++) {
 80019ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ec:	3301      	adds	r3, #1
 80019ee:	637b      	str	r3, [r7, #52]	; 0x34
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d8b7      	bhi.n	800196a <cmr_adcConfigChannels+0xe>
    }
}
 80019fa:	bf00      	nop
 80019fc:	3738      	adds	r7, #56	; 0x38
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	08008454 	.word	0x08008454
 8001a08:	0800846c 	.word	0x0800846c

08001a0c <cmr_adcInit>:
 * @param channelsLen Length of channels array.
 */
void cmr_adcInit(
    cmr_adc_t *adc, ADC_TypeDef *instance,
    cmr_adcChannel_t *channels, const size_t channelsLen
) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af02      	add	r7, sp, #8
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
 8001a18:	603b      	str	r3, [r7, #0]
    if (channelsLen > CMR_ADC_CHANNELS) {
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	2b10      	cmp	r3, #16
 8001a1e:	d902      	bls.n	8001a26 <cmr_adcInit+0x1a>
        cmr_panic("Too many channels");
 8001a20:	4824      	ldr	r0, [pc, #144]	; (8001ab4 <cmr_adcInit+0xa8>)
 8001a22:	f000 fe52 	bl	80026ca <cmr_panic>
    }

    *adc = (cmr_adc_t) {
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f44f 732c 	mov.w	r3, #688	; 0x2b0
 8001a2e:	461a      	mov	r2, r3
 8001a30:	2100      	movs	r1, #0
 8001a32:	f006 f9e0 	bl	8007df6 <memset>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2201      	movs	r2, #1
 8001a48:	611a      	str	r2, [r3, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	615a      	str	r2, [r3, #20]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	61da      	str	r2, [r3, #28]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2020 	strb.w	r2, [r3, #32]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2201      	movs	r2, #1
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <cmr_adcInit+0xac>)
 8001a68:	629a      	str	r2, [r3, #40]	; 0x28
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	649a      	str	r2, [r3, #72]	; 0x48
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	64da      	str	r2, [r3, #76]	; 0x4c
        },
        .channels = channels,
        .channelsLen = channelsLen
    };

    cmr_rccADCClockEnable(instance);
 8001a76:	68b8      	ldr	r0, [r7, #8]
 8001a78:	f001 f970 	bl	8002d5c <cmr_rccADCClockEnable>

    if (HAL_ADC_Init(&adc->handle) != HAL_OK) {
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 f934 	bl	8004cec <HAL_ADC_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d002      	beq.n	8001a90 <cmr_adcInit+0x84>
        cmr_panic("HAL_ADC_Init() failed!");
 8001a8a:	480c      	ldr	r0, [pc, #48]	; (8001abc <cmr_adcInit+0xb0>)
 8001a8c:	f000 fe1d 	bl	80026ca <cmr_panic>
    }

    cmr_adcConfigChannels(adc);
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f7ff ff63 	bl	800195c <cmr_adcConfigChannels>

    cmr_taskInit(
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8001a9c:	2205      	movs	r2, #5
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <cmr_adcInit+0xb4>)
 8001aa4:	4907      	ldr	r1, [pc, #28]	; (8001ac4 <cmr_adcInit+0xb8>)
 8001aa6:	f001 fbf1 	bl	800328c <cmr_taskInit>
        "ADC sample",
        cmr_adcSample_priority,
        cmr_adcSample,
        adc
    );
}
 8001aaa:	bf00      	nop
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	0800848c 	.word	0x0800848c
 8001ab8:	0f000001 	.word	0x0f000001
 8001abc:	080084a0 	.word	0x080084a0
 8001ac0:	080018ed 	.word	0x080018ed
 8001ac4:	080084b8 	.word	0x080084b8

08001ac8 <cmr_adcRead>:
 * @param adc The ADC to read from.
 * @param channel The channel's index.
 *
 * @return The most recent sample for that channel.
 */
uint32_t cmr_adcRead(cmr_adc_t *adc, size_t channel) {
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
    return adc->channels[channel].value;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	691b      	ldr	r3, [r3, #16]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <CAN1_TX_IRQHandler>:
    } \
    \
    void CAN ## can ## _SCE_IRQHandler(void) { \
        HAL_CAN_IRQHandler(cmr_canInterrupts[can - 1].handle); \
    }
CAN_FOREACH(CAN_IRQ_HANDLERS)
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <CAN1_TX_IRQHandler+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f004 f8f1 	bl	8005ce0 <HAL_CAN_IRQHandler>
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200018f4 	.word	0x200018f4

08001b08 <CAN1_RX0_IRQHandler>:
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	4b03      	ldr	r3, [pc, #12]	; (8001b1c <CAN1_RX0_IRQHandler+0x14>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f004 f8e5 	bl	8005ce0 <HAL_CAN_IRQHandler>
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200018f4 	.word	0x200018f4

08001b20 <CAN1_RX1_IRQHandler>:
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <CAN1_RX1_IRQHandler+0x14>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f004 f8d9 	bl	8005ce0 <HAL_CAN_IRQHandler>
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200018f4 	.word	0x200018f4

08001b38 <CAN1_SCE_IRQHandler>:
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <CAN1_SCE_IRQHandler+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f004 f8cd 	bl	8005ce0 <HAL_CAN_IRQHandler>
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200018f4 	.word	0x200018f4

08001b50 <CAN2_TX_IRQHandler>:
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <CAN2_TX_IRQHandler+0x14>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f004 f8c1 	bl	8005ce0 <HAL_CAN_IRQHandler>
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200018f4 	.word	0x200018f4

08001b68 <CAN2_RX0_IRQHandler>:
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <CAN2_RX0_IRQHandler+0x14>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f004 f8b5 	bl	8005ce0 <HAL_CAN_IRQHandler>
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	200018f4 	.word	0x200018f4

08001b80 <CAN2_RX1_IRQHandler>:
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <CAN2_RX1_IRQHandler+0x14>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f004 f8a9 	bl	8005ce0 <HAL_CAN_IRQHandler>
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200018f4 	.word	0x200018f4

08001b98 <CAN2_SCE_IRQHandler>:
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <CAN2_SCE_IRQHandler+0x14>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f004 f89d 	bl	8005ce0 <HAL_CAN_IRQHandler>
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200018f4 	.word	0x200018f4

08001bb0 <CAN3_TX_IRQHandler>:
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <CAN3_TX_IRQHandler+0x14>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f004 f891 	bl	8005ce0 <HAL_CAN_IRQHandler>
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200018f4 	.word	0x200018f4

08001bc8 <CAN3_RX0_IRQHandler>:
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <CAN3_RX0_IRQHandler+0x14>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f004 f885 	bl	8005ce0 <HAL_CAN_IRQHandler>
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200018f4 	.word	0x200018f4

08001be0 <CAN3_RX1_IRQHandler>:
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <CAN3_RX1_IRQHandler+0x14>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f004 f879 	bl	8005ce0 <HAL_CAN_IRQHandler>
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200018f4 	.word	0x200018f4

08001bf8 <CAN3_SCE_IRQHandler>:
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <CAN3_SCE_IRQHandler+0x14>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f004 f86d 	bl	8005ce0 <HAL_CAN_IRQHandler>
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200018f4 	.word	0x200018f4

08001c10 <cmr_canGPIOAF>:
 * @param can The CAN interface.
 * @param port The GPIO port.
 *
 * @return The GPIO alternate function.
 */
static uint32_t cmr_canGPIOAF(CAN_TypeDef *instance, GPIO_TypeDef *port) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
    switch ((uintptr_t) instance) {
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <cmr_canGPIOAF+0x58>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d016      	beq.n	8001c50 <cmr_canGPIOAF+0x40>
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <cmr_canGPIOAF+0x5c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d015      	beq.n	8001c54 <cmr_canGPIOAF+0x44>
 8001c28:	4a11      	ldr	r2, [pc, #68]	; (8001c70 <cmr_canGPIOAF+0x60>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d114      	bne.n	8001c58 <cmr_canGPIOAF+0x48>
        case CAN1_BASE:
            switch ((uintptr_t) port) {
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	4a10      	ldr	r2, [pc, #64]	; (8001c74 <cmr_canGPIOAF+0x64>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d007      	beq.n	8001c46 <cmr_canGPIOAF+0x36>
 8001c36:	4a10      	ldr	r2, [pc, #64]	; (8001c78 <cmr_canGPIOAF+0x68>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d002      	beq.n	8001c42 <cmr_canGPIOAF+0x32>
 8001c3c:	4a0f      	ldr	r2, [pc, #60]	; (8001c7c <cmr_canGPIOAF+0x6c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d103      	bne.n	8001c4a <cmr_canGPIOAF+0x3a>
                case GPIOA_BASE:
                case GPIOD_BASE:
                    return GPIO_AF9_CAN1;
 8001c42:	2309      	movs	r3, #9
 8001c44:	e00b      	b.n	8001c5e <cmr_canGPIOAF+0x4e>
                case GPIOB_BASE:
                    return GPIO_AF8_CAN1;
 8001c46:	2308      	movs	r3, #8
 8001c48:	e009      	b.n	8001c5e <cmr_canGPIOAF+0x4e>
                default:
                    cmr_panic("Unknown/unspported GPIO port!");
 8001c4a:	480d      	ldr	r0, [pc, #52]	; (8001c80 <cmr_canGPIOAF+0x70>)
 8001c4c:	f000 fd3d 	bl	80026ca <cmr_panic>
            }
        case CAN2_BASE:
            return GPIO_AF9_CAN2;
 8001c50:	2309      	movs	r3, #9
 8001c52:	e004      	b.n	8001c5e <cmr_canGPIOAF+0x4e>
        case CAN3_BASE:
            return GPIO_AF11_CAN3;
 8001c54:	230b      	movs	r3, #11
 8001c56:	e002      	b.n	8001c5e <cmr_canGPIOAF+0x4e>
        default:
            cmr_panic("Unknown CAN instance!");
 8001c58:	480a      	ldr	r0, [pc, #40]	; (8001c84 <cmr_canGPIOAF+0x74>)
 8001c5a:	f000 fd36 	bl	80026ca <cmr_panic>
    }
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40006800 	.word	0x40006800
 8001c6c:	40006c00 	.word	0x40006c00
 8001c70:	40006400 	.word	0x40006400
 8001c74:	40020400 	.word	0x40020400
 8001c78:	40020c00 	.word	0x40020c00
 8001c7c:	40020000 	.word	0x40020000
 8001c80:	080084c4 	.word	0x080084c4
 8001c84:	080084e4 	.word	0x080084e4

08001c88 <cmr_canFromHandle>:
 *
 * @param handle The handle.
 *
 * @return The interface.
 */
static cmr_can_t *cmr_canFromHandle(CAN_HandleTypeDef *handle) {
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
    char *addr = (void *) handle;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	60fb      	str	r3, [r7, #12]
    return (void *) (addr - offsetof(cmr_can_t, handle));
 8001c94:	68fb      	ldr	r3, [r7, #12]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <cmr_canTXCpltCallback>:
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL CAN handle.
 * @param mailbox The completed mailbox.
 */
static void cmr_canTXCpltCallback(CAN_HandleTypeDef *handle, size_t mailbox) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
    (void) mailbox;     // Placate compiler.
    cmr_can_t *can = cmr_canFromHandle(handle);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ffea 	bl	8001c88 <cmr_canFromHandle>
 8001cb4:	60f8      	str	r0, [r7, #12]

    // Indicate completion.
    BaseType_t higherWoken;
    if (xSemaphoreGiveFromISR(can->txSem, &higherWoken) != pdTRUE) {
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cba:	f107 0208 	add.w	r2, r7, #8
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f001 ff3f 	bl	8003b44 <xQueueGiveFromISR>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d002      	beq.n	8001cd2 <cmr_canTXCpltCallback+0x2e>
        cmr_panic("TX semaphore released too many times!");
 8001ccc:	4808      	ldr	r0, [pc, #32]	; (8001cf0 <cmr_canTXCpltCallback+0x4c>)
 8001cce:	f000 fcfc 	bl	80026ca <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d007      	beq.n	8001ce8 <cmr_canTXCpltCallback+0x44>
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <cmr_canTXCpltCallback+0x50>)
 8001cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	f3bf 8f4f 	dsb	sy
 8001ce4:	f3bf 8f6f 	isb	sy
}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	080084fc 	.word	0x080084fc
 8001cf4:	e000ed04 	.word	0xe000ed04

08001cf8 <HAL_CAN_TxMailbox0CompleteCallback>:
        CAN_HandleTypeDef *handle \
    ) { \
        /* Treat abort as complete. */ \
        cmr_canTXCpltCallback(handle, mailbox); \
    }
CAN_TX_MAILBOX_CALLBACK(0)
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	2100      	movs	r1, #0
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff ffce 	bl	8001ca4 <cmr_canTXCpltCallback>
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_CAN_TxMailbox0AbortCallback>:
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	2100      	movs	r1, #0
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ffc2 	bl	8001ca4 <cmr_canTXCpltCallback>
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_CAN_TxMailbox1CompleteCallback>:
CAN_TX_MAILBOX_CALLBACK(1)
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	2101      	movs	r1, #1
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ffb6 	bl	8001ca4 <cmr_canTXCpltCallback>
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_CAN_TxMailbox1AbortCallback>:
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	2101      	movs	r1, #1
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ffaa 	bl	8001ca4 <cmr_canTXCpltCallback>
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_CAN_TxMailbox2CompleteCallback>:
CAN_TX_MAILBOX_CALLBACK(2)
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	2102      	movs	r1, #2
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff ff9e 	bl	8001ca4 <cmr_canTXCpltCallback>
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_CAN_TxMailbox2AbortCallback>:
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	2102      	movs	r1, #2
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff ff92 	bl	8001ca4 <cmr_canTXCpltCallback>
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_CAN_ErrorCallback>:
 * @brief HAL CAN error callback.
 *
 * @warning Called from an interrupt handler!
 * @warning The handle must have been configured through this library!
 */
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *handle) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
    cmr_can_t *can = cmr_canFromHandle(handle);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff79 	bl	8001c88 <cmr_canFromHandle>
 8001d96:	6178      	str	r0, [r7, #20]

    uint32_t error = handle->ErrorCode;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	613b      	str	r3, [r7, #16]
    if (error & (
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	f403 33fc 	and.w	r3, r3, #129024	; 0x1f800
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d018      	beq.n	8001dda <HAL_CAN_ErrorCallback+0x52>
            HAL_CAN_ERROR_TX_TERR1 |
            HAL_CAN_ERROR_TX_TERR2
    )) {
        // Transmit error; drop semaphore.
        BaseType_t higherWoken;
        if (xSemaphoreGiveFromISR(can->txSem, &higherWoken) != pdTRUE) {
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dac:	f107 020c 	add.w	r2, r7, #12
 8001db0:	4611      	mov	r1, r2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f001 fec6 	bl	8003b44 <xQueueGiveFromISR>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d002      	beq.n	8001dc4 <HAL_CAN_ErrorCallback+0x3c>
            cmr_panic("TX semaphore released too many times!");
 8001dbe:	480a      	ldr	r0, [pc, #40]	; (8001de8 <HAL_CAN_ErrorCallback+0x60>)
 8001dc0:	f000 fc83 	bl	80026ca <cmr_panic>
        }
        portYIELD_FROM_ISR(higherWoken);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d007      	beq.n	8001dda <HAL_CAN_ErrorCallback+0x52>
 8001dca:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_CAN_ErrorCallback+0x64>)
 8001dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	f3bf 8f4f 	dsb	sy
 8001dd6:	f3bf 8f6f 	isb	sy
    }

    // Clear errors.
    handle->ErrorCode = 0;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001de0:	bf00      	nop
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	080084fc 	.word	0x080084fc
 8001dec:	e000ed04 	.word	0xe000ed04

08001df0 <cmr_canTimeout>:
 *
 * @return A negative value if a timeout has occurred; otherwise 0.
 */
static int cmr_canTimeout(
    TickType_t lastReceived_ms, TickType_t threshold_ms, TickType_t now_ms
) {
 8001df0:	b480      	push	{r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
    TickType_t release_ms = lastReceived_ms + threshold_ms;
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	4413      	add	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]

    if (now_ms < lastReceived_ms && release_ms <= lastReceived_ms) {
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d206      	bcs.n	8001e1a <cmr_canTimeout+0x2a>
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d802      	bhi.n	8001e1a <cmr_canTimeout+0x2a>
        // Current time overflowed; release did not. Timeout!
        return -1;
 8001e14:	f04f 33ff 	mov.w	r3, #4294967295
 8001e18:	e011      	b.n	8001e3e <cmr_canTimeout+0x4e>
    }

    if (lastReceived_ms <= now_ms && release_ms < lastReceived_ms) {
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d805      	bhi.n	8001e2e <cmr_canTimeout+0x3e>
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d201      	bcs.n	8001e2e <cmr_canTimeout+0x3e>
        // Current time did not overflow; release time did. No timeout.
        return 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e007      	b.n	8001e3e <cmr_canTimeout+0x4e>
    }

    // Neither current nor release overflowed, or both have.
    // In either case, release less than current indicates timeout.
    if (release_ms < now_ms) {
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d202      	bcs.n	8001e3c <cmr_canTimeout+0x4c>
        return -1;
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3a:	e000      	b.n	8001e3e <cmr_canTimeout+0x4e>
    }

    return 0;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	371c      	adds	r7, #28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <cmr_canRXMetaTimeoutWarn>:
 * @param meta The periodic message's reception metadata.
 * @param now_ms Current timestamp, in milliseconds.
 *
 * @return A negative value if a timeout warning has occurred; otherwise 0.
 */
int cmr_canRXMetaTimeoutWarn(const cmr_canRXMeta_t *meta, TickType_t now_ms) {
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
    return cmr_canTimeout(
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6958      	ldr	r0, [r3, #20]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f7ff ffc6 	bl	8001df0 <cmr_canTimeout>
 8001e64:	4603      	mov	r3, r0
        meta->lastReceived_ms, meta->timeoutWarn_ms, now_ms
    );
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <cmr_canRXMetaTimeoutError>:
 * @param meta The periodic message's reception metadata.
 * @param now_ms Current timestamp, in milliseconds.
 *
 * @return A negative value if a timeout error has occurred; otherwise 0.
 */
int cmr_canRXMetaTimeoutError(const cmr_canRXMeta_t *meta, TickType_t now_ms) {
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
    return cmr_canTimeout(
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6958      	ldr	r0, [r3, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	4619      	mov	r1, r3
 8001e84:	f7ff ffb4 	bl	8001df0 <cmr_canTimeout>
 8001e88:	4603      	mov	r3, r0
        meta->lastReceived_ms, meta->timeoutError_ms, now_ms
    );
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <cmr_canRXMetaFind>:
 * @param can The interface.
 * @param canID The CAN ID to search for.
 *
 * @return The associated receive metadata, or `NULL` if not found.
 */
static cmr_canRXMeta_t *cmr_canRXMetaFind(cmr_can_t *can, uint16_t canID) {
 8001e92:	b480      	push	{r7}
 8001e94:	b085      	sub	sp, #20
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	807b      	strh	r3, [r7, #2]
    for (size_t i = 0; i < can->rxMetaLen; i++) {
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	e00f      	b.n	8001ec4 <cmr_canRXMetaFind+0x32>
        cmr_canRXMeta_t *meta = can->rxMeta + i;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	015b      	lsls	r3, r3, #5
 8001eac:	4413      	add	r3, r2
 8001eae:	60bb      	str	r3, [r7, #8]
        if (meta->canID == canID) {
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	887a      	ldrh	r2, [r7, #2]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d101      	bne.n	8001ebe <cmr_canRXMetaFind+0x2c>
            return meta;
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	e008      	b.n	8001ed0 <cmr_canRXMetaFind+0x3e>
    for (size_t i = 0; i < can->rxMetaLen; i++) {
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d8ea      	bhi.n	8001ea4 <cmr_canRXMetaFind+0x12>
        }
    }

    return NULL;    // No matching metadata.
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <cmr_canRXData>:
 * @param data The received data.
 * @param dataLen The received data's length.
 */
static void cmr_canRXData(
    cmr_can_t *can, uint16_t canID, const void *data, size_t dataLen
) {
 8001edc:	b590      	push	{r4, r7, lr}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	817b      	strh	r3, [r7, #10]
    cmr_canRXMeta_t *meta = cmr_canRXMetaFind(can, canID);
 8001eec:	897b      	ldrh	r3, [r7, #10]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f7ff ffce 	bl	8001e92 <cmr_canRXMetaFind>
 8001ef6:	6178      	str	r0, [r7, #20]
    if (meta == NULL) {
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10b      	bne.n	8001f16 <cmr_canRXData+0x3a>
        // Not a configured message; attempt to use the callback.
        if (can->rxCallback) {
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d014      	beq.n	8001f30 <cmr_canRXData+0x54>
            can->rxCallback(can, canID, data, dataLen);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8001f0a:	8979      	ldrh	r1, [r7, #10]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	47a0      	blx	r4
        }

        return;
 8001f14:	e00c      	b.n	8001f30 <cmr_canRXData+0x54>
    }

    memcpy((void *) meta->payload, data, dataLen);
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	3318      	adds	r3, #24
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f005 ff5e 	bl	8007de0 <memcpy>
    meta->lastReceived_ms = xTaskGetTickCountFromISR();
 8001f24:	f002 fab8 	bl	8004498 <xTaskGetTickCountFromISR>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	615a      	str	r2, [r3, #20]
 8001f2e:	e000      	b.n	8001f32 <cmr_canRXData+0x56>
        return;
 8001f30:	bf00      	nop
}
 8001f32:	371c      	adds	r7, #28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd90      	pop	{r4, r7, pc}

08001f38 <cmr_canRXPendingCallback>:
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL CAN handle.
 * @param fifo The pending FIFO.
 */
static void cmr_canRXPendingCallback(CAN_HandleTypeDef *handle, uint32_t fifo) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08c      	sub	sp, #48	; 0x30
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
    CAN_RxHeaderTypeDef msg;
    uint8_t data[8];
    if (HAL_CAN_GetRxMessage(handle, fifo, &msg, data) != HAL_OK) {
 8001f42:	f107 0308 	add.w	r3, r7, #8
 8001f46:	f107 0210 	add.w	r2, r7, #16
 8001f4a:	6839      	ldr	r1, [r7, #0]
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f003 fd8e 	bl	8005a6e <HAL_CAN_GetRxMessage>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10c      	bne.n	8001f72 <cmr_canRXPendingCallback+0x3a>
        return;
    }

    cmr_can_t *can = cmr_canFromHandle(handle);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff fe95 	bl	8001c88 <cmr_canFromHandle>
 8001f5e:	62f8      	str	r0, [r7, #44]	; 0x2c
    cmr_canRXData(can, msg.StdId, data, msg.DLC);
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	b299      	uxth	r1, r3
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	f107 0208 	add.w	r2, r7, #8
 8001f6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f6c:	f7ff ffb6 	bl	8001edc <cmr_canRXData>
 8001f70:	e000      	b.n	8001f74 <cmr_canRXPendingCallback+0x3c>
        return;
 8001f72:	bf00      	nop
}
 8001f74:	3730      	adds	r7, #48	; 0x30
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_CAN_RxFifo0MsgPendingCallback>:
    void HAL_CAN_RxFifo ## fifo ## MsgPendingCallback( \
        CAN_HandleTypeDef *handle \
    ) { \
        cmr_canRXPendingCallback(handle, CAN_RX_FIFO ## fifo); \
    }
CAN_RX_FIFO_PENDING(0)
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	2100      	movs	r1, #0
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ffd7 	bl	8001f38 <cmr_canRXPendingCallback>
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_CAN_RxFifo1MsgPendingCallback>:
CAN_RX_FIFO_PENDING(1)
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ffcb 	bl	8001f38 <cmr_canRXPendingCallback>
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <cmr_canInit>:
    cmr_canBitRate_t bitRate,
    cmr_canRXMeta_t *rxMeta, size_t rxMetaLen,
    cmr_canRXCallback_t rxCallback,
    GPIO_TypeDef *rxPort, uint16_t rxPin,
    GPIO_TypeDef *txPort, uint16_t txPin
) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08c      	sub	sp, #48	; 0x30
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	71fb      	strb	r3, [r7, #7]
    *can = (cmr_can_t) {
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	f005 ff16 	bl	8007df6 <memset>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fd6:	60da      	str	r2, [r3, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001fde:	611a      	str	r2, [r3, #16]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	765a      	strb	r2, [r3, #25]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	76da      	strb	r2, [r3, #27]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	675a      	str	r2, [r3, #116]	; 0x74
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ff6:	679a      	str	r2, [r3, #120]	; 0x78
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ffc:	67da      	str	r2, [r3, #124]	; 0x7c
        .rxCallback = rxCallback
    };

    // These numbers assume 48 MHz ABP1 peripheral clock frequency
    // 48 MHz / (6 + 1 + 1 time quanta) / Prescaler = bitRate
    switch (bitRate) {
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d007      	beq.n	8002014 <cmr_canInit+0x68>
 8002004:	2b02      	cmp	r3, #2
 8002006:	d009      	beq.n	800201c <cmr_canInit+0x70>
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10b      	bne.n	8002024 <cmr_canInit+0x78>
        case CMR_CAN_BITRATE_250K:
            can->handle.Init.Prescaler = 24;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2218      	movs	r2, #24
 8002010:	605a      	str	r2, [r3, #4]
            break;
 8002012:	e007      	b.n	8002024 <cmr_canInit+0x78>
        case CMR_CAN_BITRATE_500K:
            can->handle.Init.Prescaler = 12;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	220c      	movs	r2, #12
 8002018:	605a      	str	r2, [r3, #4]
            break;
 800201a:	e003      	b.n	8002024 <cmr_canInit+0x78>
        case CMR_CAN_BITRATE_1M:
            can->handle.Init.Prescaler = 6;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2206      	movs	r2, #6
 8002020:	605a      	str	r2, [r3, #4]
            break;
 8002022:	bf00      	nop
    }

    can->txSem = xSemaphoreCreateCountingStatic(
 8002024:	2003      	movs	r0, #3
 8002026:	2103      	movs	r1, #3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	332c      	adds	r3, #44	; 0x2c
 800202c:	461a      	mov	r2, r3
 800202e:	f001 fd59 	bl	8003ae4 <xQueueCreateCountingSemaphoreStatic>
 8002032:	4602      	mov	r2, r0
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	629a      	str	r2, [r3, #40]	; 0x28
        CAN_TX_MAILBOXES, CAN_TX_MAILBOXES, &can->txSemBuf
    );
    configASSERT(can->txSem != NULL);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203c:	2b00      	cmp	r3, #0
 800203e:	d104      	bne.n	800204a <cmr_canInit+0x9e>
 8002040:	f240 118b 	movw	r1, #395	; 0x18b
 8002044:	4861      	ldr	r0, [pc, #388]	; (80021cc <cmr_canInit+0x220>)
 8002046:	f000 fb40 	bl	80026ca <cmr_panic>
    size_t canIdx;
    IRQn_Type irqTX;
    IRQn_Type irqRX0;
    IRQn_Type irqRX1;
    IRQn_Type irqSCE;
    switch ((uintptr_t) instance) {
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	4a60      	ldr	r2, [pc, #384]	; (80021d0 <cmr_canInit+0x224>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d014      	beq.n	800207c <cmr_canInit+0xd0>
 8002052:	4a60      	ldr	r2, [pc, #384]	; (80021d4 <cmr_canInit+0x228>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d020      	beq.n	800209a <cmr_canInit+0xee>
 8002058:	4a5f      	ldr	r2, [pc, #380]	; (80021d8 <cmr_canInit+0x22c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d12c      	bne.n	80020b8 <cmr_canInit+0x10c>
            irqTX = CAN ## num ## _TX_IRQn; \
            irqRX0 = CAN ## num ## _RX0_IRQn; \
            irqRX1 = CAN ## num ## _RX1_IRQn; \
            irqSCE = CAN ## num ## _SCE_IRQn; \
            break;
CAN_FOREACH(CAN_INTERRUPT_CONFIG)
 800205e:	2300      	movs	r3, #0
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002062:	2313      	movs	r3, #19
 8002064:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002068:	2314      	movs	r3, #20
 800206a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800206e:	2315      	movs	r3, #21
 8002070:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8002074:	2316      	movs	r3, #22
 8002076:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800207a:	e020      	b.n	80020be <cmr_canInit+0x112>
 800207c:	2301      	movs	r3, #1
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002080:	233f      	movs	r3, #63	; 0x3f
 8002082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002086:	2340      	movs	r3, #64	; 0x40
 8002088:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800208c:	2341      	movs	r3, #65	; 0x41
 800208e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8002092:	2342      	movs	r3, #66	; 0x42
 8002094:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8002098:	e011      	b.n	80020be <cmr_canInit+0x112>
 800209a:	2302      	movs	r3, #2
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800209e:	234a      	movs	r3, #74	; 0x4a
 80020a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80020a4:	234b      	movs	r3, #75	; 0x4b
 80020a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80020aa:	234c      	movs	r3, #76	; 0x4c
 80020ac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80020b0:	234d      	movs	r3, #77	; 0x4d
 80020b2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80020b6:	e002      	b.n	80020be <cmr_canInit+0x112>
#undef CAN_INTERRUPT_CONFIG
        default:
            cmr_panic("Unknown CAN instance!");
 80020b8:	4848      	ldr	r0, [pc, #288]	; (80021dc <cmr_canInit+0x230>)
 80020ba:	f000 fb06 	bl	80026ca <cmr_panic>
    }

    cmr_canInterrupts[canIdx] = (cmr_canInterrupt_t) {
        .handle = &can->handle
 80020be:	68fa      	ldr	r2, [r7, #12]
    cmr_canInterrupts[canIdx] = (cmr_canInterrupt_t) {
 80020c0:	4947      	ldr	r1, [pc, #284]	; (80021e0 <cmr_canInit+0x234>)
 80020c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    };
    HAL_NVIC_SetPriority(irqTX, 5, 0);
 80020c8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80020cc:	2200      	movs	r2, #0
 80020ce:	2105      	movs	r1, #5
 80020d0:	4618      	mov	r0, r3
 80020d2:	f004 f8b8 	bl	8006246 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(irqRX0, 5, 0);
 80020d6:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 80020da:	2200      	movs	r2, #0
 80020dc:	2105      	movs	r1, #5
 80020de:	4618      	mov	r0, r3
 80020e0:	f004 f8b1 	bl	8006246 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(irqRX1, 5, 0);
 80020e4:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 80020e8:	2200      	movs	r2, #0
 80020ea:	2105      	movs	r1, #5
 80020ec:	4618      	mov	r0, r3
 80020ee:	f004 f8aa 	bl	8006246 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(irqSCE, 5, 0);
 80020f2:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 80020f6:	2200      	movs	r2, #0
 80020f8:	2105      	movs	r1, #5
 80020fa:	4618      	mov	r0, r3
 80020fc:	f004 f8a3 	bl	8006246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqTX);
 8002100:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002104:	4618      	mov	r0, r3
 8002106:	f004 f8ba 	bl	800627e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(irqRX0);
 800210a:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 800210e:	4618      	mov	r0, r3
 8002110:	f004 f8b5 	bl	800627e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(irqRX1);
 8002114:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8002118:	4618      	mov	r0, r3
 800211a:	f004 f8b0 	bl	800627e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(irqSCE);
 800211e:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8002122:	4618      	mov	r0, r3
 8002124:	f004 f8ab 	bl	800627e <HAL_NVIC_EnableIRQ>

    cmr_rccCANClockEnable(instance);
 8002128:	68b8      	ldr	r0, [r7, #8]
 800212a:	f000 fe39 	bl	8002da0 <cmr_rccCANClockEnable>
    cmr_rccGPIOClockEnable(rxPort);
 800212e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002130:	f000 fd5e 	bl	8002bf0 <cmr_rccGPIOClockEnable>
    cmr_rccGPIOClockEnable(txPort);
 8002134:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002136:	f000 fd5b 	bl	8002bf0 <cmr_rccGPIOClockEnable>

    // Configure CAN RX pin.
    GPIO_InitTypeDef pinConfig = {
 800213a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	2302      	movs	r3, #2
 8002142:	61bb      	str	r3, [r7, #24]
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
 8002148:	2303      	movs	r3, #3
 800214a:	623b      	str	r3, [r7, #32]
        .Pin = rxPin,
        .Mode = GPIO_MODE_AF_PP,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_VERY_HIGH,
        .Alternate = cmr_canGPIOAF(instance, rxPort)
 800214c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800214e:	68b8      	ldr	r0, [r7, #8]
 8002150:	f7ff fd5e 	bl	8001c10 <cmr_canGPIOAF>
 8002154:	4603      	mov	r3, r0
    GPIO_InitTypeDef pinConfig = {
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
    };
    HAL_GPIO_Init(rxPort, &pinConfig);
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	4619      	mov	r1, r3
 800215e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002160:	f004 fa32 	bl	80065c8 <HAL_GPIO_Init>

    // Configure CAN TX pin.
    pinConfig.Pin = txPin;
 8002164:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002168:	617b      	str	r3, [r7, #20]
    pinConfig.Alternate = cmr_canGPIOAF(instance, rxPort);
 800216a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800216c:	68b8      	ldr	r0, [r7, #8]
 800216e:	f7ff fd4f 	bl	8001c10 <cmr_canGPIOAF>
 8002172:	4603      	mov	r3, r0
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(txPort, &pinConfig);
 8002176:	f107 0314 	add.w	r3, r7, #20
 800217a:	4619      	mov	r1, r3
 800217c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800217e:	f004 fa23 	bl	80065c8 <HAL_GPIO_Init>

    if (HAL_CAN_Init(&can->handle) != HAL_OK) {
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4618      	mov	r0, r3
 8002186:	f003 f967 	bl	8005458 <HAL_CAN_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d002      	beq.n	8002196 <cmr_canInit+0x1ea>
        cmr_panic("HAL_CAN_Init() failed!");
 8002190:	4814      	ldr	r0, [pc, #80]	; (80021e4 <cmr_canInit+0x238>)
 8002192:	f000 fa9a 	bl	80026ca <cmr_panic>
    }

    if (HAL_CAN_Start(&can->handle) != HAL_OK) {
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4618      	mov	r0, r3
 800219a:	f003 fb4d 	bl	8005838 <HAL_CAN_Start>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <cmr_canInit+0x1fe>
        cmr_panic("HAL_CAN_Start() failed!");
 80021a4:	4810      	ldr	r0, [pc, #64]	; (80021e8 <cmr_canInit+0x23c>)
 80021a6:	f000 fa90 	bl	80026ca <cmr_panic>
    }

    if (HAL_CAN_ActivateNotification(
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f648 7113 	movw	r1, #36627	; 0x8f13
 80021b0:	4618      	mov	r0, r3
 80021b2:	f003 fd6f 	bl	8005c94 <HAL_CAN_ActivateNotification>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <cmr_canInit+0x216>
            CAN_IT_ERROR_PASSIVE |
            CAN_IT_BUSOFF |
            CAN_IT_LAST_ERROR_CODE |
            CAN_IT_ERROR
    )) {
        cmr_panic("HAL_CAN_ActivateNotification() failed!");
 80021bc:	480b      	ldr	r0, [pc, #44]	; (80021ec <cmr_canInit+0x240>)
 80021be:	f000 fa84 	bl	80026ca <cmr_panic>
    }
}
 80021c2:	bf00      	nop
 80021c4:	3730      	adds	r7, #48	; 0x30
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	08008524 	.word	0x08008524
 80021d0:	40006800 	.word	0x40006800
 80021d4:	40006c00 	.word	0x40006c00
 80021d8:	40006400 	.word	0x40006400
 80021dc:	080084e4 	.word	0x080084e4
 80021e0:	200018f4 	.word	0x200018f4
 80021e4:	0800856c 	.word	0x0800856c
 80021e8:	08008584 	.word	0x08008584
 80021ec:	0800859c 	.word	0x0800859c

080021f0 <cmr_canFilter>:
 * @param filtersLen The number of filters. Must be less than
 * `CMR_CAN_FILTERBANKS`.
 */
void cmr_canFilter(
    cmr_can_t *can, const cmr_canFilter_t *filters, size_t filtersLen
) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b094      	sub	sp, #80	; 0x50
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
    if (filtersLen >= CMR_CAN_FILTERBANKS) {
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b0d      	cmp	r3, #13
 8002200:	d902      	bls.n	8002208 <cmr_canFilter+0x18>
        cmr_panic("Too many filter banks!");
 8002202:	4830      	ldr	r0, [pc, #192]	; (80022c4 <cmr_canFilter+0xd4>)
 8002204:	f000 fa61 	bl	80026ca <cmr_panic>
    }

    CAN_TypeDef *instance = can->handle.Instance;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	647b      	str	r3, [r7, #68]	; 0x44

    for (size_t i = 0; i < filtersLen; i++) {
 800220e:	2300      	movs	r3, #0
 8002210:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002212:	e04e      	b.n	80022b2 <cmr_canFilter+0xc2>
        const cmr_canFilter_t *filter = filters + i;
 8002214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	4413      	add	r3, r2
 800221c:	643b      	str	r3, [r7, #64]	; 0x40

        uint32_t bank = i;
 800221e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002220:	64bb      	str	r3, [r7, #72]	; 0x48
        if (instance == CAN2) {
 8002222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002224:	4a28      	ldr	r2, [pc, #160]	; (80022c8 <cmr_canFilter+0xd8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d102      	bne.n	8002230 <cmr_canFilter+0x40>
            // CAN2 uses banks 14-27.
            bank += CMR_CAN_FILTERBANKS;
 800222a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800222c:	330e      	adds	r3, #14
 800222e:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        uint32_t filterMode = filter->isMask
 8002230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002232:	781b      	ldrb	r3, [r3, #0]
            ? CAN_FILTERMODE_IDMASK
            : CAN_FILTERMODE_IDLIST;
 8002234:	f083 0301 	eor.w	r3, r3, #1
 8002238:	b2db      	uxtb	r3, r3
        uint32_t filterMode = filter->isMask
 800223a:	63fb      	str	r3, [r7, #60]	; 0x3c

        // In 16 bit ID list mode, FilterIdHigh, FilterIdLow, FilterMaskIdHigh,
        // and FilterMaskIdLow all serve as a whitelist of left-aligned 11-bit
        // CAN IDs.
        // See RM0430 32.7.4 Fig. 387.
        const uint16_t CMR_CAN_ID_FILTER_SHIFT = 5;
 800223c:	2305      	movs	r3, #5
 800223e:	877b      	strh	r3, [r7, #58]	; 0x3a
        CAN_FilterTypeDef config = {
            .FilterIdHigh           = filter->ids[0] << CMR_CAN_ID_FILTER_SHIFT,
 8002240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002242:	891b      	ldrh	r3, [r3, #8]
 8002244:	461a      	mov	r2, r3
 8002246:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
        CAN_FilterTypeDef config = {
 800224c:	613b      	str	r3, [r7, #16]
            .FilterIdLow            = filter->ids[1] << CMR_CAN_ID_FILTER_SHIFT,
 800224e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002250:	895b      	ldrh	r3, [r3, #10]
 8002252:	461a      	mov	r2, r3
 8002254:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
        CAN_FilterTypeDef config = {
 800225a:	617b      	str	r3, [r7, #20]
            .FilterMaskIdHigh       = filter->ids[2] << CMR_CAN_ID_FILTER_SHIFT,
 800225c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800225e:	899b      	ldrh	r3, [r3, #12]
 8002260:	461a      	mov	r2, r3
 8002262:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
        CAN_FilterTypeDef config = {
 8002268:	61bb      	str	r3, [r7, #24]
            .FilterMaskIdLow        = filter->ids[3] << CMR_CAN_ID_FILTER_SHIFT,
 800226a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800226c:	89db      	ldrh	r3, [r3, #14]
 800226e:	461a      	mov	r2, r3
 8002270:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
        CAN_FilterTypeDef config = {
 8002276:	61fb      	str	r3, [r7, #28]
            .FilterFIFOAssignment   = filter->rxFIFO,
 8002278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800227a:	685b      	ldr	r3, [r3, #4]
        CAN_FilterTypeDef config = {
 800227c:	623b      	str	r3, [r7, #32]
 800227e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
 8002282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002284:	62bb      	str	r3, [r7, #40]	; 0x28
 8002286:	2300      	movs	r3, #0
 8002288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800228a:	2301      	movs	r3, #1
 800228c:	633b      	str	r3, [r7, #48]	; 0x30
 800228e:	230e      	movs	r3, #14
 8002290:	637b      	str	r3, [r7, #52]	; 0x34
            .FilterScale            = CAN_FILTERSCALE_16BIT,
            .FilterActivation       = ENABLE,
            .SlaveStartFilterBank   = CMR_CAN_FILTERBANKS
        };

        if (HAL_CAN_ConfigFilter(&can->handle, &config) != HAL_OK) {
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f107 0210 	add.w	r2, r7, #16
 8002298:	4611      	mov	r1, r2
 800229a:	4618      	mov	r0, r3
 800229c:	f003 f9e0 	bl	8005660 <HAL_CAN_ConfigFilter>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <cmr_canFilter+0xbc>
            cmr_panic("HAL_CAN_ConfigFilter() failed!");
 80022a6:	4809      	ldr	r0, [pc, #36]	; (80022cc <cmr_canFilter+0xdc>)
 80022a8:	f000 fa0f 	bl	80026ca <cmr_panic>
    for (size_t i = 0; i < filtersLen; i++) {
 80022ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ae:	3301      	adds	r3, #1
 80022b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d3ac      	bcc.n	8002214 <cmr_canFilter+0x24>
        }
    }
}
 80022ba:	bf00      	nop
 80022bc:	3750      	adds	r7, #80	; 0x50
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	080085c4 	.word	0x080085c4
 80022c8:	40006800 	.word	0x40006800
 80022cc:	080085dc 	.word	0x080085dc

080022d0 <cmr_canTX>:
 */
int cmr_canTX(
    cmr_can_t *can,
    uint16_t id, const void *data, size_t len,
    TickType_t timeout
) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08e      	sub	sp, #56	; 0x38
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	460b      	mov	r3, r1
 80022de:	817b      	strh	r3, [r7, #10]
    CAN_TxHeaderTypeDef txHeader = {
 80022e0:	897b      	ldrh	r3, [r7, #10]
 80022e2:	61bb      	str	r3, [r7, #24]
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
 80022e8:	2300      	movs	r3, #0
 80022ea:	623b      	str	r3, [r7, #32]
 80022ec:	2300      	movs	r3, #0
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80022f4:	2300      	movs	r3, #0
 80022f6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        .DLC = len,
        .TransmitGlobalTime = DISABLE
    };

    // Attempt to reserve a mailbox.
    BaseType_t result = xSemaphoreTake(can->txSem, timeout);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80022fe:	2300      	movs	r3, #0
 8002300:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002302:	2100      	movs	r1, #0
 8002304:	f001 fc98 	bl	8003c38 <xQueueGenericReceive>
 8002308:	6378      	str	r0, [r7, #52]	; 0x34
    if (result != pdTRUE) {
 800230a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230c:	2b01      	cmp	r3, #1
 800230e:	d002      	beq.n	8002316 <cmr_canTX+0x46>
        return -1;
 8002310:	f04f 33ff 	mov.w	r3, #4294967295
 8002314:	e012      	b.n	800233c <cmr_canTX+0x6c>
    }

    // Even though the interface for HAL_CAN_AddTxMessage() does not specify the
    // data as `const`, it does not touch the data. Oh well.
    uint32_t txMailbox;
    HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	f107 0118 	add.w	r1, r7, #24
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	f003 facd 	bl	80058c0 <HAL_CAN_AddTxMessage>
 8002326:	4603      	mov	r3, r0
 8002328:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        &can->handle, &txHeader, (void *) data, &txMailbox
    );
    if (status != HAL_OK) {
 800232c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <cmr_canTX+0x6a>
        cmr_panic("Semaphore was available, but no mailboxes were found!");
 8002334:	4803      	ldr	r0, [pc, #12]	; (8002344 <cmr_canTX+0x74>)
 8002336:	f000 f9c8 	bl	80026ca <cmr_panic>
    }

    return 0;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3738      	adds	r7, #56	; 0x38
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	080085fc 	.word	0x080085fc

08002348 <DMA1_Stream0_IRQHandler>:
 */
#define DMA_IRQ_HANDLER(ctrl, stream) \
    void DMA_STREAM_NAME(ctrl, stream, _IRQHandler)(void) { \
        HAL_DMA_IRQHandler(cmr_dmaInterrupts[ctrl - 1][stream].handle); \
    }
DMA_STREAM_FOREACH(DMA_IRQ_HANDLER)
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
 800234c:	4b03      	ldr	r3, [pc, #12]	; (800235c <DMA1_Stream0_IRQHandler+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f003 ffaf 	bl	80062b4 <HAL_DMA_IRQHandler>
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20001900 	.word	0x20001900

08002360 <DMA1_Stream1_IRQHandler>:
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <DMA1_Stream1_IRQHandler+0x14>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4618      	mov	r0, r3
 800236a:	f003 ffa3 	bl	80062b4 <HAL_DMA_IRQHandler>
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20001900 	.word	0x20001900

08002378 <DMA1_Stream2_IRQHandler>:
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <DMA1_Stream2_IRQHandler+0x14>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	4618      	mov	r0, r3
 8002382:	f003 ff97 	bl	80062b4 <HAL_DMA_IRQHandler>
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20001900 	.word	0x20001900

08002390 <DMA1_Stream3_IRQHandler>:
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <DMA1_Stream3_IRQHandler+0x14>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4618      	mov	r0, r3
 800239a:	f003 ff8b 	bl	80062b4 <HAL_DMA_IRQHandler>
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20001900 	.word	0x20001900

080023a8 <DMA1_Stream4_IRQHandler>:
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	4b03      	ldr	r3, [pc, #12]	; (80023bc <DMA1_Stream4_IRQHandler+0x14>)
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f003 ff7f 	bl	80062b4 <HAL_DMA_IRQHandler>
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20001900 	.word	0x20001900

080023c0 <DMA1_Stream5_IRQHandler>:
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <DMA1_Stream5_IRQHandler+0x14>)
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f003 ff73 	bl	80062b4 <HAL_DMA_IRQHandler>
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20001900 	.word	0x20001900

080023d8 <DMA1_Stream6_IRQHandler>:
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
 80023dc:	4b03      	ldr	r3, [pc, #12]	; (80023ec <DMA1_Stream6_IRQHandler+0x14>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f003 ff67 	bl	80062b4 <HAL_DMA_IRQHandler>
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20001900 	.word	0x20001900

080023f0 <DMA1_Stream7_IRQHandler>:
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <DMA1_Stream7_IRQHandler+0x14>)
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f003 ff5b 	bl	80062b4 <HAL_DMA_IRQHandler>
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20001900 	.word	0x20001900

08002408 <DMA2_Stream0_IRQHandler>:
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
 800240c:	4b03      	ldr	r3, [pc, #12]	; (800241c <DMA2_Stream0_IRQHandler+0x14>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4618      	mov	r0, r3
 8002412:	f003 ff4f 	bl	80062b4 <HAL_DMA_IRQHandler>
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20001900 	.word	0x20001900

08002420 <DMA2_Stream1_IRQHandler>:
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <DMA2_Stream1_IRQHandler+0x14>)
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	4618      	mov	r0, r3
 800242a:	f003 ff43 	bl	80062b4 <HAL_DMA_IRQHandler>
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20001900 	.word	0x20001900

08002438 <DMA2_Stream2_IRQHandler>:
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
 800243c:	4b03      	ldr	r3, [pc, #12]	; (800244c <DMA2_Stream2_IRQHandler+0x14>)
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	4618      	mov	r0, r3
 8002442:	f003 ff37 	bl	80062b4 <HAL_DMA_IRQHandler>
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20001900 	.word	0x20001900

08002450 <DMA2_Stream3_IRQHandler>:
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <DMA2_Stream3_IRQHandler+0x14>)
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002458:	4618      	mov	r0, r3
 800245a:	f003 ff2b 	bl	80062b4 <HAL_DMA_IRQHandler>
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20001900 	.word	0x20001900

08002468 <DMA2_Stream4_IRQHandler>:
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
 800246c:	4b03      	ldr	r3, [pc, #12]	; (800247c <DMA2_Stream4_IRQHandler+0x14>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	4618      	mov	r0, r3
 8002472:	f003 ff1f 	bl	80062b4 <HAL_DMA_IRQHandler>
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20001900 	.word	0x20001900

08002480 <DMA2_Stream5_IRQHandler>:
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <DMA2_Stream5_IRQHandler+0x14>)
 8002486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002488:	4618      	mov	r0, r3
 800248a:	f003 ff13 	bl	80062b4 <HAL_DMA_IRQHandler>
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20001900 	.word	0x20001900

08002498 <DMA2_Stream6_IRQHandler>:
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
 800249c:	4b03      	ldr	r3, [pc, #12]	; (80024ac <DMA2_Stream6_IRQHandler+0x14>)
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a0:	4618      	mov	r0, r3
 80024a2:	f003 ff07 	bl	80062b4 <HAL_DMA_IRQHandler>
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20001900 	.word	0x20001900

080024b0 <DMA2_Stream7_IRQHandler>:
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	4b03      	ldr	r3, [pc, #12]	; (80024c4 <DMA2_Stream7_IRQHandler+0x14>)
 80024b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b8:	4618      	mov	r0, r3
 80024ba:	f003 fefb 	bl	80062b4 <HAL_DMA_IRQHandler>
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20001900 	.word	0x20001900

080024c8 <EXTI0_IRQHandler>:
 */
#define EXTI_IRQHandler(name, pins) \
    void EXTI##name##_IRQHandler(void) { \
        HAL_GPIO_EXTI_IRQHandler(pins); \
    }
EXTI_IRQHandler(0, GPIO_PIN_0)
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	2001      	movs	r0, #1
 80024ce:	f004 fa41 	bl	8006954 <HAL_GPIO_EXTI_IRQHandler>
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <EXTI1_IRQHandler>:
EXTI_IRQHandler(1, GPIO_PIN_1)
 80024d6:	b580      	push	{r7, lr}
 80024d8:	af00      	add	r7, sp, #0
 80024da:	2002      	movs	r0, #2
 80024dc:	f004 fa3a 	bl	8006954 <HAL_GPIO_EXTI_IRQHandler>
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <EXTI2_IRQHandler>:
EXTI_IRQHandler(2, GPIO_PIN_2)
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	2004      	movs	r0, #4
 80024ea:	f004 fa33 	bl	8006954 <HAL_GPIO_EXTI_IRQHandler>
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <EXTI3_IRQHandler>:
EXTI_IRQHandler(3, GPIO_PIN_3)
 80024f2:	b580      	push	{r7, lr}
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	2008      	movs	r0, #8
 80024f8:	f004 fa2c 	bl	8006954 <HAL_GPIO_EXTI_IRQHandler>
 80024fc:	bf00      	nop
 80024fe:	bd80      	pop	{r7, pc}

08002500 <EXTI4_IRQHandler>:
EXTI_IRQHandler(4, GPIO_PIN_4)
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
 8002504:	2010      	movs	r0, #16
 8002506:	f004 fa25 	bl	8006954 <HAL_GPIO_EXTI_IRQHandler>
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}

0800250e <EXTI9_5_IRQHandler>:
EXTI_IRQHandler(
 800250e:	b580      	push	{r7, lr}
 8002510:	af00      	add	r7, sp, #0
 8002512:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 8002516:	f004 fa1d 	bl	8006954 <HAL_GPIO_EXTI_IRQHandler>
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}

0800251e <EXTI15_10_IRQHandler>:
    9_5,
    GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_7 | GPIO_PIN_6 | GPIO_PIN_5
)
EXTI_IRQHandler(
 800251e:	b580      	push	{r7, lr}
 8002520:	af00      	add	r7, sp, #0
 8002522:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 8002526:	f004 fa15 	bl	8006954 <HAL_GPIO_EXTI_IRQHandler>
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <cmr_gpioPinInit>:
 * @brief Configures the specified GPIO pin(s).
 *
 * @param pinConfigs The pin configuration(s).
 * @param pinConfigsLen The number of pin configurations.
 */
void cmr_gpioPinInit(const cmr_gpioPinConfig_t *pinConfigs, const size_t pinConfigsLen) {
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
    cmr_gpioPinConfigs = pinConfigs;
 800253a:	4a15      	ldr	r2, [pc, #84]	; (8002590 <cmr_gpioPinInit+0x60>)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6013      	str	r3, [r2, #0]
    cmr_gpioPinConfigsLen = pinConfigsLen;
 8002540:	4a14      	ldr	r2, [pc, #80]	; (8002594 <cmr_gpioPinInit+0x64>)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6013      	str	r3, [r2, #0]

    for (size_t i = 0; i < cmr_gpioPinConfigsLen; i++) {
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	e018      	b.n	800257e <cmr_gpioPinInit+0x4e>
        const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[i];
 800254c:	4b10      	ldr	r3, [pc, #64]	; (8002590 <cmr_gpioPinInit+0x60>)
 800254e:	6819      	ldr	r1, [r3, #0]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4613      	mov	r3, r2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	4413      	add	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	440b      	add	r3, r1
 800255c:	60bb      	str	r3, [r7, #8]
        cmr_rccGPIOClockEnable(pinConfig->port);
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fb44 	bl	8002bf0 <cmr_rccGPIOClockEnable>

        // The HAL GPIO driver doesn't actually declare the initialization
        // struct as `const`, but it doesn't modify it either.
        HAL_GPIO_Init(
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	681a      	ldr	r2, [r3, #0]
            pinConfig->port,
            (GPIO_InitTypeDef *) &pinConfig->init
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	3304      	adds	r3, #4
        HAL_GPIO_Init(
 8002570:	4619      	mov	r1, r3
 8002572:	4610      	mov	r0, r2
 8002574:	f004 f828 	bl	80065c8 <HAL_GPIO_Init>
    for (size_t i = 0; i < cmr_gpioPinConfigsLen; i++) {
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3301      	adds	r3, #1
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	4b05      	ldr	r3, [pc, #20]	; (8002594 <cmr_gpioPinInit+0x64>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	429a      	cmp	r2, r3
 8002586:	d3e1      	bcc.n	800254c <cmr_gpioPinInit+0x1c>
        );
    }
}
 8002588:	bf00      	nop
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20001940 	.word	0x20001940
 8002594:	20001944 	.word	0x20001944

08002598 <cmr_gpioWrite>:
 * @brief Writes a value to an output GPIO pin.
 *
 * @param pin The pin to write to.
 * @param value The value to write (zero for off; non-zero for on).
 */
void cmr_gpioWrite(size_t pin, int value) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
    configASSERT(pin < cmr_gpioPinConfigsLen);
 80025a2:	4b18      	ldr	r3, [pc, #96]	; (8002604 <cmr_gpioWrite+0x6c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d303      	bcc.n	80025b4 <cmr_gpioWrite+0x1c>
 80025ac:	214f      	movs	r1, #79	; 0x4f
 80025ae:	4816      	ldr	r0, [pc, #88]	; (8002608 <cmr_gpioWrite+0x70>)
 80025b0:	f000 f88b 	bl	80026ca <cmr_panic>

    const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[pin];
 80025b4:	4b15      	ldr	r3, [pc, #84]	; (800260c <cmr_gpioWrite+0x74>)
 80025b6:	6819      	ldr	r1, [r3, #0]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4413      	add	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	440b      	add	r3, r1
 80025c4:	60fb      	str	r3, [r7, #12]
    configASSERT(
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d007      	beq.n	80025de <cmr_gpioWrite+0x46>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b11      	cmp	r3, #17
 80025d4:	d003      	beq.n	80025de <cmr_gpioWrite+0x46>
 80025d6:	2155      	movs	r1, #85	; 0x55
 80025d8:	480d      	ldr	r0, [pc, #52]	; (8002610 <cmr_gpioWrite+0x78>)
 80025da:	f000 f876 	bl	80026ca <cmr_panic>
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_PP) ||
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_OD)
    );

    HAL_GPIO_WritePin(
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6818      	ldr	r0, [r3, #0]
        pinConfig->port, pinConfig->init.Pin,
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	685b      	ldr	r3, [r3, #4]
    HAL_GPIO_WritePin(
 80025e6:	b299      	uxth	r1, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	bf14      	ite	ne
 80025ee:	2301      	movne	r3, #1
 80025f0:	2300      	moveq	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	f004 f979 	bl	80068ec <HAL_GPIO_WritePin>
        value ? GPIO_PIN_SET : GPIO_PIN_RESET
    );
}
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20001944 	.word	0x20001944
 8002608:	08008634 	.word	0x08008634
 800260c:	20001940 	.word	0x20001940
 8002610:	08008688 	.word	0x08008688

08002614 <cmr_gpioToggle>:
/**
 * @brief Toggles an output GPIO pin's value.
 *
 * @param pin The pin to toggle.
 */
void cmr_gpioToggle(size_t pin) {
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
    configASSERT(pin < cmr_gpioPinConfigsLen);
 800261c:	4b15      	ldr	r3, [pc, #84]	; (8002674 <cmr_gpioToggle+0x60>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	429a      	cmp	r2, r3
 8002624:	d303      	bcc.n	800262e <cmr_gpioToggle+0x1a>
 8002626:	2163      	movs	r1, #99	; 0x63
 8002628:	4813      	ldr	r0, [pc, #76]	; (8002678 <cmr_gpioToggle+0x64>)
 800262a:	f000 f84e 	bl	80026ca <cmr_panic>

    const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[pin];
 800262e:	4b13      	ldr	r3, [pc, #76]	; (800267c <cmr_gpioToggle+0x68>)
 8002630:	6819      	ldr	r1, [r3, #0]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	440b      	add	r3, r1
 800263e:	60fb      	str	r3, [r7, #12]
    configASSERT(
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d007      	beq.n	8002658 <cmr_gpioToggle+0x44>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b11      	cmp	r3, #17
 800264e:	d003      	beq.n	8002658 <cmr_gpioToggle+0x44>
 8002650:	2169      	movs	r1, #105	; 0x69
 8002652:	480b      	ldr	r0, [pc, #44]	; (8002680 <cmr_gpioToggle+0x6c>)
 8002654:	f000 f839 	bl	80026ca <cmr_panic>
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_PP) ||
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_OD)
    );

    HAL_GPIO_TogglePin(pinConfig->port, pinConfig->init.Pin);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	b29b      	uxth	r3, r3
 8002662:	4619      	mov	r1, r3
 8002664:	4610      	mov	r0, r2
 8002666:	f004 f95a 	bl	800691e <HAL_GPIO_TogglePin>
}
 800266a:	bf00      	nop
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20001944 	.word	0x20001944
 8002678:	08008634 	.word	0x08008634
 800267c:	20001940 	.word	0x20001940
 8002680:	08008688 	.word	0x08008688

08002684 <SysTick_Handler>:
extern void xPortSysTickHandler(void);

/**
 * @brief System tick interrupt handler.
 */
void SysTick_Handler(void) {
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
    HAL_IncTick();  // Report tick to HAL.
 8002688:	f002 fb10 	bl	8004cac <HAL_IncTick>

    if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED) {
 800268c:	f002 f9a6 	bl	80049dc <xTaskGetSchedulerState>
 8002690:	4603      	mov	r3, r0
 8002692:	2b01      	cmp	r3, #1
 8002694:	d002      	beq.n	800269c <SysTick_Handler+0x18>
        return;
    }

    xPortSysTickHandler();  // Invoke FreeRTOS tick handler.
 8002696:	f001 f8cf 	bl	8003838 <xPortSysTickHandler>
 800269a:	e000      	b.n	800269e <SysTick_Handler+0x1a>
        return;
 800269c:	bf00      	nop
}
 800269e:	bd80      	pop	{r7, pc}

080026a0 <NMI_Handler>:

/**
 * @brief Non-maskable interrupt handler.
 */
void NMI_Handler(void) {
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
    // Nothing to do.
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <DebugMon_Handler>:

/**
 * @brief Debug monitor exception handler.
 */
void DebugMon_Handler(void) {
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0
    // Nothing to do.
}
 80026b2:	bf00      	nop
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <cmr_panicSetup>:
 * @brief Default pre-panic setup implementation.
 *
 * Nothing happens by default; this should be overridden if custom behavior is
 * desired.
 */
void cmr_panicSetup(void) {
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
    // Nothing to do.
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <cmr_panic>:
 * @param fmt The formatting string.
 * @param ... Additional arguments for formatting.
 *
 * @return Does not return.
 */
void cmr_panic(const char *fmt, ...) {
 80026ca:	b40f      	push	{r0, r1, r2, r3}
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
    (void) fmt;

    cmr_panicSetup();
 80026d0:	f7ff fff4 	bl	80026bc <cmr_panicSetup>

    while (1) {
        continue;
 80026d4:	e7fe      	b.n	80026d4 <cmr_panic+0xa>
	...

080026d8 <cmr_timerToAltFunc>:
#ifdef HAL_TIM_MODULE_ENABLED

#include <FreeRTOS.h>
#include "rcc.h"

static uint32_t cmr_timerToAltFunc(TIM_TypeDef *timer) {
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
    switch ((uintptr_t) timer) {
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a28      	ldr	r2, [pc, #160]	; (8002784 <cmr_timerToAltFunc+0xac>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d041      	beq.n	800276c <cmr_timerToAltFunc+0x94>
 80026e8:	4a26      	ldr	r2, [pc, #152]	; (8002784 <cmr_timerToAltFunc+0xac>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d813      	bhi.n	8002716 <cmr_timerToAltFunc+0x3e>
 80026ee:	4a26      	ldr	r2, [pc, #152]	; (8002788 <cmr_timerToAltFunc+0xb0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d02d      	beq.n	8002750 <cmr_timerToAltFunc+0x78>
 80026f4:	4a24      	ldr	r2, [pc, #144]	; (8002788 <cmr_timerToAltFunc+0xb0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d806      	bhi.n	8002708 <cmr_timerToAltFunc+0x30>
 80026fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026fe:	d023      	beq.n	8002748 <cmr_timerToAltFunc+0x70>
 8002700:	4a22      	ldr	r2, [pc, #136]	; (800278c <cmr_timerToAltFunc+0xb4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d022      	beq.n	800274c <cmr_timerToAltFunc+0x74>
 8002706:	e035      	b.n	8002774 <cmr_timerToAltFunc+0x9c>
 8002708:	4a21      	ldr	r2, [pc, #132]	; (8002790 <cmr_timerToAltFunc+0xb8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d022      	beq.n	8002754 <cmr_timerToAltFunc+0x7c>
 800270e:	4a21      	ldr	r2, [pc, #132]	; (8002794 <cmr_timerToAltFunc+0xbc>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d029      	beq.n	8002768 <cmr_timerToAltFunc+0x90>
 8002714:	e02e      	b.n	8002774 <cmr_timerToAltFunc+0x9c>
 8002716:	4a20      	ldr	r2, [pc, #128]	; (8002798 <cmr_timerToAltFunc+0xc0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d01d      	beq.n	8002758 <cmr_timerToAltFunc+0x80>
 800271c:	4a1e      	ldr	r2, [pc, #120]	; (8002798 <cmr_timerToAltFunc+0xc0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d806      	bhi.n	8002730 <cmr_timerToAltFunc+0x58>
 8002722:	4a1e      	ldr	r2, [pc, #120]	; (800279c <cmr_timerToAltFunc+0xc4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d023      	beq.n	8002770 <cmr_timerToAltFunc+0x98>
 8002728:	4a1d      	ldr	r2, [pc, #116]	; (80027a0 <cmr_timerToAltFunc+0xc8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00a      	beq.n	8002744 <cmr_timerToAltFunc+0x6c>
 800272e:	e021      	b.n	8002774 <cmr_timerToAltFunc+0x9c>
 8002730:	4a1c      	ldr	r2, [pc, #112]	; (80027a4 <cmr_timerToAltFunc+0xcc>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d014      	beq.n	8002760 <cmr_timerToAltFunc+0x88>
 8002736:	4a1c      	ldr	r2, [pc, #112]	; (80027a8 <cmr_timerToAltFunc+0xd0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d013      	beq.n	8002764 <cmr_timerToAltFunc+0x8c>
 800273c:	4a1b      	ldr	r2, [pc, #108]	; (80027ac <cmr_timerToAltFunc+0xd4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00c      	beq.n	800275c <cmr_timerToAltFunc+0x84>
 8002742:	e017      	b.n	8002774 <cmr_timerToAltFunc+0x9c>
        case TIM1_BASE:
            return GPIO_AF1_TIM1;
 8002744:	2301      	movs	r3, #1
 8002746:	e017      	b.n	8002778 <cmr_timerToAltFunc+0xa0>
        case TIM2_BASE:
            return GPIO_AF1_TIM2;
 8002748:	2301      	movs	r3, #1
 800274a:	e015      	b.n	8002778 <cmr_timerToAltFunc+0xa0>
        case TIM3_BASE:
            return GPIO_AF2_TIM3;
 800274c:	2302      	movs	r3, #2
 800274e:	e013      	b.n	8002778 <cmr_timerToAltFunc+0xa0>
        case TIM4_BASE:
            return GPIO_AF2_TIM4;
 8002750:	2302      	movs	r3, #2
 8002752:	e011      	b.n	8002778 <cmr_timerToAltFunc+0xa0>
        case TIM5_BASE:
            return GPIO_AF2_TIM5;
 8002754:	2302      	movs	r3, #2
 8002756:	e00f      	b.n	8002778 <cmr_timerToAltFunc+0xa0>
        case TIM8_BASE:
            return GPIO_AF3_TIM8;
 8002758:	2303      	movs	r3, #3
 800275a:	e00d      	b.n	8002778 <cmr_timerToAltFunc+0xa0>
        case TIM9_BASE:
            return GPIO_AF3_TIM9;
 800275c:	2303      	movs	r3, #3
 800275e:	e00b      	b.n	8002778 <cmr_timerToAltFunc+0xa0>
        case TIM10_BASE:
            return GPIO_AF3_TIM10;
 8002760:	2303      	movs	r3, #3
 8002762:	e009      	b.n	8002778 <cmr_timerToAltFunc+0xa0>
        case TIM11_BASE:
            return GPIO_AF3_TIM11;
 8002764:	2303      	movs	r3, #3
 8002766:	e007      	b.n	8002778 <cmr_timerToAltFunc+0xa0>
        case TIM12_BASE:
            return GPIO_AF9_TIM12;
 8002768:	2309      	movs	r3, #9
 800276a:	e005      	b.n	8002778 <cmr_timerToAltFunc+0xa0>
        case TIM13_BASE:
            return GPIO_AF9_TIM13;
 800276c:	2309      	movs	r3, #9
 800276e:	e003      	b.n	8002778 <cmr_timerToAltFunc+0xa0>
        case TIM14_BASE:
            return GPIO_AF9_TIM14;
 8002770:	2309      	movs	r3, #9
 8002772:	e001      	b.n	8002778 <cmr_timerToAltFunc+0xa0>
    }

    return (uint32_t) -1;
 8002774:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002778:	4618      	mov	r0, r3
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	40001c00 	.word	0x40001c00
 8002788:	40000800 	.word	0x40000800
 800278c:	40000400 	.word	0x40000400
 8002790:	40000c00 	.word	0x40000c00
 8002794:	40001800 	.word	0x40001800
 8002798:	40010400 	.word	0x40010400
 800279c:	40002000 	.word	0x40002000
 80027a0:	40010000 	.word	0x40010000
 80027a4:	40014400 	.word	0x40014400
 80027a8:	40014800 	.word	0x40014800
 80027ac:	40014000 	.word	0x40014000

080027b0 <cmr_pwmInit>:
 *
 * @param pwmChannel A PWM channel struct to use.
 * @param pwmPinConfig The pin to initialize.
 */
void cmr_pwmInit(cmr_pwm_t *pwmChannel,
                 const cmr_pwmPinConfig_t *pwmPinConfig) {
 80027b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027b2:	b09f      	sub	sp, #124	; 0x7c
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]

    configASSERT(pwmPinConfig != NULL);
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d103      	bne.n	80027c8 <cmr_pwmInit+0x18>
 80027c0:	2138      	movs	r1, #56	; 0x38
 80027c2:	4889      	ldr	r0, [pc, #548]	; (80029e8 <cmr_pwmInit+0x238>)
 80027c4:	f7ff ff81 	bl	80026ca <cmr_panic>
    configASSERT(pwmPinConfig->timer != NULL);
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d103      	bne.n	80027d8 <cmr_pwmInit+0x28>
 80027d0:	2139      	movs	r1, #57	; 0x39
 80027d2:	4886      	ldr	r0, [pc, #536]	; (80029ec <cmr_pwmInit+0x23c>)
 80027d4:	f7ff ff79 	bl	80026ca <cmr_panic>

    configASSERT(pwmPinConfig->presc > 0 && pwmPinConfig->presc <= UINT16_MAX + 1);
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d004      	beq.n	80027ea <cmr_pwmInit+0x3a>
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e8:	d903      	bls.n	80027f2 <cmr_pwmInit+0x42>
 80027ea:	213b      	movs	r1, #59	; 0x3b
 80027ec:	4880      	ldr	r0, [pc, #512]	; (80029f0 <cmr_pwmInit+0x240>)
 80027ee:	f7ff ff6c 	bl	80026ca <cmr_panic>
    configASSERT(pwmPinConfig->period_ticks > 0 && pwmPinConfig->period_ticks <= UINT16_MAX + 1);
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d004      	beq.n	8002804 <cmr_pwmInit+0x54>
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002802:	d903      	bls.n	800280c <cmr_pwmInit+0x5c>
 8002804:	213c      	movs	r1, #60	; 0x3c
 8002806:	487b      	ldr	r0, [pc, #492]	; (80029f4 <cmr_pwmInit+0x244>)
 8002808:	f7ff ff5f 	bl	80026ca <cmr_panic>

    cmr_rccGPIOClockEnable(pwmPinConfig->port);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f000 f9ed 	bl	8002bf0 <cmr_rccGPIOClockEnable>

    *pwmChannel = (cmr_pwm_t) {
        .handle = {
            .Instance = pwmPinConfig->timer,
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	607b      	str	r3, [r7, #4]
            .Init = {
                .Prescaler = pwmPinConfig->presc - 1,
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	1e5e      	subs	r6, r3, #1
                .CounterMode = TIM_COUNTERMODE_UP,
                .Period = pwmPinConfig->period_ticks - 1,
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	1e5d      	subs	r5, r3, #1
                .ClockDivision = TIM_CLOCKDIVISION_DIV1,
                .RepetitionCounter = 0,
                .AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE
            }
        },
        .channel = pwmPinConfig->channel
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	689c      	ldr	r4, [r3, #8]
    *pwmChannel = (cmr_pwm_t) {
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4618      	mov	r0, r3
 8002830:	2344      	movs	r3, #68	; 0x44
 8002832:	461a      	mov	r2, r3
 8002834:	2100      	movs	r1, #0
 8002836:	f005 fade 	bl	8007df6 <memset>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	605e      	str	r6, [r3, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	60dd      	str	r5, [r3, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2280      	movs	r2, #128	; 0x80
 800284c:	619a      	str	r2, [r3, #24]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	641c      	str	r4, [r3, #64]	; 0x40
    };

    cmr_rccTIMClockEnable(pwmPinConfig->timer);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fafa 	bl	8002e50 <cmr_rccTIMClockEnable>

    if (HAL_TIM_Base_Init(&pwmChannel->handle) != HAL_OK) {
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4618      	mov	r0, r3
 8002860:	f004 fc76 	bl	8007150 <HAL_TIM_Base_Init>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <cmr_pwmInit+0xc0>
        cmr_panic("pwmInit HAL_TIM_Base_Init failed!");
 800286a:	4863      	ldr	r0, [pc, #396]	; (80029f8 <cmr_pwmInit+0x248>)
 800286c:	f7ff ff2d 	bl	80026ca <cmr_panic>
        return;
    }

    TIM_ClockConfigTypeDef clockSrcConfig = {
 8002870:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002882:	66bb      	str	r3, [r7, #104]	; 0x68
        .ClockSource = TIM_CLOCKSOURCE_INTERNAL
    };
    if (HAL_TIM_ConfigClockSource(&pwmChannel->handle, &clockSrcConfig) != HAL_OK) {
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f004 fe25 	bl	80074dc <HAL_TIM_ConfigClockSource>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <cmr_pwmInit+0xee>
        cmr_panic("pwmInit HAL_TIM_ConfigClockSource failed!");
 8002898:	4858      	ldr	r0, [pc, #352]	; (80029fc <cmr_pwmInit+0x24c>)
 800289a:	f7ff ff16 	bl	80026ca <cmr_panic>
        return;
    }

    if (HAL_TIM_PWM_Init(&pwmChannel->handle) != HAL_OK) {
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f004 fc8a 	bl	80071ba <HAL_TIM_PWM_Init>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <cmr_pwmInit+0x102>
        cmr_panic("pwmInit HAL_TIM_PWM_Init failed!");
 80028ac:	4854      	ldr	r0, [pc, #336]	; (8002a00 <cmr_pwmInit+0x250>)
 80028ae:	f7ff ff0c 	bl	80026ca <cmr_panic>
        return;
    }

    // Disable fancy master/slave stuff if applicable since we won't use it.
    // Based on Cube-generated code.
    if (IS_TIM_MASTER_INSTANCE(pwmPinConfig->timer)) {
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	4a53      	ldr	r2, [pc, #332]	; (8002a04 <cmr_pwmInit+0x254>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d022      	beq.n	8002902 <cmr_pwmInit+0x152>
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c4:	d01d      	beq.n	8002902 <cmr_pwmInit+0x152>
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	4a4f      	ldr	r2, [pc, #316]	; (8002a08 <cmr_pwmInit+0x258>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d018      	beq.n	8002902 <cmr_pwmInit+0x152>
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	4a4d      	ldr	r2, [pc, #308]	; (8002a0c <cmr_pwmInit+0x25c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d013      	beq.n	8002902 <cmr_pwmInit+0x152>
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	4a4c      	ldr	r2, [pc, #304]	; (8002a10 <cmr_pwmInit+0x260>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d00e      	beq.n	8002902 <cmr_pwmInit+0x152>
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	4a4a      	ldr	r2, [pc, #296]	; (8002a14 <cmr_pwmInit+0x264>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d009      	beq.n	8002902 <cmr_pwmInit+0x152>
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	4a49      	ldr	r2, [pc, #292]	; (8002a18 <cmr_pwmInit+0x268>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d004      	beq.n	8002902 <cmr_pwmInit+0x152>
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	4a47      	ldr	r2, [pc, #284]	; (8002a1c <cmr_pwmInit+0x26c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d110      	bne.n	8002924 <cmr_pwmInit+0x174>
        TIM_MasterConfigTypeDef masterConfig = {
 8002902:	2300      	movs	r3, #0
 8002904:	633b      	str	r3, [r7, #48]	; 0x30
 8002906:	2300      	movs	r3, #0
 8002908:	637b      	str	r3, [r7, #52]	; 0x34
            .MasterOutputTrigger = TIM_TRGO_RESET,
            .MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE
        };

        if (HAL_TIMEx_MasterConfigSynchronization(&pwmChannel->handle, &masterConfig) != HAL_OK) {
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f005 f9a9 	bl	8007c6a <HAL_TIMEx_MasterConfigSynchronization>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <cmr_pwmInit+0x174>
            cmr_panic("pwmInit HAL_TIMEx_MasterConfigSynchronization failed!");
 800291e:	4840      	ldr	r0, [pc, #256]	; (8002a20 <cmr_pwmInit+0x270>)
 8002920:	f7ff fed3 	bl	80026ca <cmr_panic>
    }

    // Begin with 0% duty cycle
    // Do not use cmr_pwmSetDutyCycle() because that would prematurely call
    // HAL_TIM_PWM_Start()
    TIM_OC_InitTypeDef outputCompareConfig = {
 8002924:	4b3f      	ldr	r3, [pc, #252]	; (8002a24 <cmr_pwmInit+0x274>)
 8002926:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800292a:	461d      	mov	r5, r3
 800292c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800292e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002930:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002934:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        .OCFastMode = TIM_OCFAST_DISABLE,
        .OCIdleState = TIM_OCIDLESTATE_RESET,
        .OCNIdleState = TIM_OCNIDLESTATE_RESET
    };

    if (HAL_TIM_PWM_ConfigChannel(&pwmChannel->handle, &outputCompareConfig, pwmChannel->channel) != HAL_OK) {
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800293e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002942:	4619      	mov	r1, r3
 8002944:	f004 fd04 	bl	8007350 <HAL_TIM_PWM_ConfigChannel>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <cmr_pwmInit+0x1a4>
        cmr_panic("pwmInit cmr_pwmSetDutyCycle failed!");
 800294e:	4836      	ldr	r0, [pc, #216]	; (8002a28 <cmr_pwmInit+0x278>)
 8002950:	f7ff febb 	bl	80026ca <cmr_panic>
    }

    // Disable fancy break/dead time stuff if applicable since we won't use it.
    // Based on Cube-generated code.
    if (IS_TIM_BREAK_INSTANCE(pwmPinConfig->timer)) {
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	4a2a      	ldr	r2, [pc, #168]	; (8002a04 <cmr_pwmInit+0x254>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d004      	beq.n	8002968 <cmr_pwmInit+0x1b8>
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	4a2e      	ldr	r2, [pc, #184]	; (8002a1c <cmr_pwmInit+0x26c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d116      	bne.n	8002996 <cmr_pwmInit+0x1e6>
        TIM_BreakDeadTimeConfigTypeDef breakDeadConfig = {
 8002968:	f107 0310 	add.w	r3, r7, #16
 800296c:	2220      	movs	r2, #32
 800296e:	2100      	movs	r1, #0
 8002970:	4618      	mov	r0, r3
 8002972:	f005 fa40 	bl	8007df6 <memset>
 8002976:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
            .BreakState = TIM_BREAK_DISABLE,
            .BreakPolarity = TIM_BREAKPOLARITY_HIGH,
            .AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE
        };

        if (HAL_TIMEx_ConfigBreakDeadTime(&pwmChannel->handle, &breakDeadConfig) != HAL_OK) {
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f107 0210 	add.w	r2, r7, #16
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f005 f9b5 	bl	8007cf4 <HAL_TIMEx_ConfigBreakDeadTime>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <cmr_pwmInit+0x1e6>
            cmr_panic("pwmInit HAL_TIMEx_ConfigBreakDeadTime failed!");
 8002990:	4826      	ldr	r0, [pc, #152]	; (8002a2c <cmr_pwmInit+0x27c>)
 8002992:	f7ff fe9a 	bl	80026ca <cmr_panic>
            return;
        }
    }

    GPIO_InitTypeDef pinConfig = {
        .Pin = pwmPinConfig->pin,
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	889b      	ldrh	r3, [r3, #4]
    GPIO_InitTypeDef pinConfig = {
 800299a:	63bb      	str	r3, [r7, #56]	; 0x38
 800299c:	2302      	movs	r3, #2
 800299e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029a0:	2300      	movs	r3, #0
 80029a2:	643b      	str	r3, [r7, #64]	; 0x40
 80029a4:	2303      	movs	r3, #3
 80029a6:	647b      	str	r3, [r7, #68]	; 0x44
        .Mode = GPIO_MODE_AF_PP,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_VERY_HIGH,
        .Alternate = cmr_timerToAltFunc(pwmPinConfig->timer)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fe93 	bl	80026d8 <cmr_timerToAltFunc>
 80029b2:	4603      	mov	r3, r0
    GPIO_InitTypeDef pinConfig = {
 80029b4:	64bb      	str	r3, [r7, #72]	; 0x48
    };
    HAL_GPIO_Init(pwmPinConfig->port, &pinConfig);
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80029be:	4611      	mov	r1, r2
 80029c0:	4618      	mov	r0, r3
 80029c2:	f003 fe01 	bl	80065c8 <HAL_GPIO_Init>

    if (HAL_TIM_PWM_Start(&pwmChannel->handle, pwmChannel->channel) != HAL_OK) {
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	4619      	mov	r1, r3
 80029ce:	4610      	mov	r0, r2
 80029d0:	f004 fc28 	bl	8007224 <HAL_TIM_PWM_Start>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <cmr_pwmInit+0x230>
        cmr_panic("pwmInit HAL_TIM_PWM_Start failed!");
 80029da:	4815      	ldr	r0, [pc, #84]	; (8002a30 <cmr_pwmInit+0x280>)
 80029dc:	f7ff fe75 	bl	80026ca <cmr_panic>
    }
}
 80029e0:	bf00      	nop
 80029e2:	377c      	adds	r7, #124	; 0x7c
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029e8:	08008774 	.word	0x08008774
 80029ec:	080087c0 	.word	0x080087c0
 80029f0:	08008814 	.word	0x08008814
 80029f4:	0800888c 	.word	0x0800888c
 80029f8:	08008910 	.word	0x08008910
 80029fc:	08008934 	.word	0x08008934
 8002a00:	08008960 	.word	0x08008960
 8002a04:	40010000 	.word	0x40010000
 8002a08:	40000400 	.word	0x40000400
 8002a0c:	40000800 	.word	0x40000800
 8002a10:	40000c00 	.word	0x40000c00
 8002a14:	40001000 	.word	0x40001000
 8002a18:	40001400 	.word	0x40001400
 8002a1c:	40010400 	.word	0x40010400
 8002a20:	08008984 	.word	0x08008984
 8002a24:	08008a34 	.word	0x08008a34
 8002a28:	080089bc 	.word	0x080089bc
 8002a2c:	080089e0 	.word	0x080089e0
 8002a30:	08008a10 	.word	0x08008a10

08002a34 <cmr_pwmSetDutyCycle>:
 * @brief Sets the duty cycle of a PWM channel.
 *
 * @param pwmChannel The PWM channel to set the duty cycle of.
 * @param dutyCycle_pcnt The duty cycle, in percent no greater than 100, to set pwmChannel to.
 */
void cmr_pwmSetDutyCycle(cmr_pwm_t *pwmChannel, uint32_t dutyCycle_pcnt) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
    configASSERT(pwmChannel != NULL);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d103      	bne.n	8002a4c <cmr_pwmSetDutyCycle+0x18>
 8002a44:	21aa      	movs	r1, #170	; 0xaa
 8002a46:	482b      	ldr	r0, [pc, #172]	; (8002af4 <cmr_pwmSetDutyCycle+0xc0>)
 8002a48:	f7ff fe3f 	bl	80026ca <cmr_panic>
    configASSERT(dutyCycle_pcnt <= 100);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2b64      	cmp	r3, #100	; 0x64
 8002a50:	d903      	bls.n	8002a5a <cmr_pwmSetDutyCycle+0x26>
 8002a52:	21ab      	movs	r1, #171	; 0xab
 8002a54:	4828      	ldr	r0, [pc, #160]	; (8002af8 <cmr_pwmSetDutyCycle+0xc4>)
 8002a56:	f7ff fe38 	bl	80026ca <cmr_panic>
        .OCFastMode = TIM_OCFAST_DISABLE,
        .OCIdleState = TIM_OCIDLESTATE_RESET,
        .OCNIdleState = TIM_OCNIDLESTATE_RESET
    };

    uint32_t period_ticks = pwmChannel->handle.Init.Period + 1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	60fb      	str	r3, [r7, #12]

    // Prevent overflow (should never occur)
    if (UINT32_MAX / period_ticks < dutyCycle_pcnt) {
 8002a62:	f04f 32ff 	mov.w	r2, #4294967295
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d20a      	bcs.n	8002a88 <cmr_pwmSetDutyCycle+0x54>
        outputCompareConfig.Pulse = period_ticks / 100 * dutyCycle_pcnt;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4a21      	ldr	r2, [pc, #132]	; (8002afc <cmr_pwmSetDutyCycle+0xc8>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	fb02 f303 	mul.w	r3, r2, r3
 8002a82:	4a1f      	ldr	r2, [pc, #124]	; (8002b00 <cmr_pwmSetDutyCycle+0xcc>)
 8002a84:	6053      	str	r3, [r2, #4]
 8002a86:	e009      	b.n	8002a9c <cmr_pwmSetDutyCycle+0x68>
    } else {
        outputCompareConfig.Pulse = period_ticks * dutyCycle_pcnt / 100;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	fb02 f303 	mul.w	r3, r2, r3
 8002a90:	4a1a      	ldr	r2, [pc, #104]	; (8002afc <cmr_pwmSetDutyCycle+0xc8>)
 8002a92:	fba2 2303 	umull	r2, r3, r2, r3
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	4a19      	ldr	r2, [pc, #100]	; (8002b00 <cmr_pwmSetDutyCycle+0xcc>)
 8002a9a:	6053      	str	r3, [r2, #4]
    }

    if (HAL_TIM_PWM_Stop(&pwmChannel->handle, pwmChannel->channel) != HAL_OK) {
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	f004 fbfb 	bl	80072a0 <HAL_TIM_PWM_Stop>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <cmr_pwmSetDutyCycle+0x82>
        cmr_panic("pwmSetPeriod HAL_TIM_PWM_Stop failed!");
 8002ab0:	4814      	ldr	r0, [pc, #80]	; (8002b04 <cmr_pwmSetDutyCycle+0xd0>)
 8002ab2:	f7ff fe0a 	bl	80026ca <cmr_panic>
    }

    if (HAL_TIM_PWM_ConfigChannel(&pwmChannel->handle, &outputCompareConfig, pwmChannel->channel) != HAL_OK) {
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	461a      	mov	r2, r3
 8002abe:	4910      	ldr	r1, [pc, #64]	; (8002b00 <cmr_pwmSetDutyCycle+0xcc>)
 8002ac0:	f004 fc46 	bl	8007350 <HAL_TIM_PWM_ConfigChannel>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <cmr_pwmSetDutyCycle+0x9c>
        cmr_panic("pwmSetDutyCycle cmr_pwmSetDutyCycle failed!");
 8002aca:	480f      	ldr	r0, [pc, #60]	; (8002b08 <cmr_pwmSetDutyCycle+0xd4>)
 8002acc:	f7ff fdfd 	bl	80026ca <cmr_panic>
    }

    if (HAL_TIM_PWM_Start(&pwmChannel->handle, pwmChannel->channel) != HAL_OK) {
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4610      	mov	r0, r2
 8002ada:	f004 fba3 	bl	8007224 <HAL_TIM_PWM_Start>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <cmr_pwmSetDutyCycle+0xb6>
        cmr_panic("pwmSetPeriod HAL_TIM_PWM_Start failed!");
 8002ae4:	4809      	ldr	r0, [pc, #36]	; (8002b0c <cmr_pwmSetDutyCycle+0xd8>)
 8002ae6:	f7ff fdf0 	bl	80026ca <cmr_panic>
    }
}
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	08008a50 	.word	0x08008a50
 8002af8:	08008a98 	.word	0x08008a98
 8002afc:	51eb851f 	.word	0x51eb851f
 8002b00:	200003ac 	.word	0x200003ac
 8002b04:	08008ae4 	.word	0x08008ae4
 8002b08:	08008b0c 	.word	0x08008b0c
 8002b0c:	08008b38 	.word	0x08008b38

08002b10 <cmr_rccSystemClockEnable>:
 * @brief Configures the system and peripheral clocks.
 *
 * @note Generated by STM32Cube. Sets System Clock to 96 MHz, with only APB1
 * Peripheral Clocks at 48 MHz (APB1 Timer Clocks are still 96 MHz).
 */
void cmr_rccSystemClockEnable(void)  {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b094      	sub	sp, #80	; 0x50
 8002b14:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002b16:	f107 031c 	add.w	r3, r7, #28
 8002b1a:	2234      	movs	r2, #52	; 0x34
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f005 f969 	bl	8007df6 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002b24:	f107 0308 	add.w	r3, r7, #8
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b34:	2300      	movs	r3, #0
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	4a29      	ldr	r2, [pc, #164]	; (8002be0 <cmr_rccSystemClockEnable+0xd0>)
 8002b3a:	4b29      	ldr	r3, [pc, #164]	; (8002be0 <cmr_rccSystemClockEnable+0xd0>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b42:	6413      	str	r3, [r2, #64]	; 0x40
 8002b44:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <cmr_rccSystemClockEnable+0xd0>)
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	607b      	str	r3, [r7, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b50:	2300      	movs	r3, #0
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	4a23      	ldr	r2, [pc, #140]	; (8002be4 <cmr_rccSystemClockEnable+0xd4>)
 8002b56:	4b23      	ldr	r3, [pc, #140]	; (8002be4 <cmr_rccSystemClockEnable+0xd4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <cmr_rccSystemClockEnable+0xd4>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b68:	603b      	str	r3, [r7, #0]
 8002b6a:	683b      	ldr	r3, [r7, #0]

    // Initializes the CPU, AHB and APB busses clocks
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b74:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b76:	2302      	movs	r3, #2
 8002b78:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b7e:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 25;
 8002b80:	2319      	movs	r3, #25
 8002b82:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 192;
 8002b84:	23c0      	movs	r3, #192	; 0xc0
 8002b86:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 8002b90:	2302      	movs	r3, #2
 8002b92:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002b94:	f107 031c 	add.w	r3, r7, #28
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f004 f897 	bl	8006ccc <HAL_RCC_OscConfig>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <cmr_rccSystemClockEnable+0x9a>
        cmr_panic("HAL_RCC_OscConfig() failed!");
 8002ba4:	4810      	ldr	r0, [pc, #64]	; (8002be8 <cmr_rccSystemClockEnable+0xd8>)
 8002ba6:	f7ff fd90 	bl	80026ca <cmr_panic>
    }

    // Initializes the CPU, AHB and APB busses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002baa:	230f      	movs	r3, #15
 8002bac:	60bb      	str	r3, [r7, #8]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bba:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8002bc0:	f107 0308 	add.w	r3, r7, #8
 8002bc4:	2103      	movs	r1, #3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f003 fee8 	bl	800699c <HAL_RCC_ClockConfig>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d002      	beq.n	8002bd8 <cmr_rccSystemClockEnable+0xc8>
        cmr_panic("HAL_RCC_ClockConfig() failed!");
 8002bd2:	4806      	ldr	r0, [pc, #24]	; (8002bec <cmr_rccSystemClockEnable+0xdc>)
 8002bd4:	f7ff fd79 	bl	80026ca <cmr_panic>
    }
}
 8002bd8:	bf00      	nop
 8002bda:	3750      	adds	r7, #80	; 0x50
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40007000 	.word	0x40007000
 8002be8:	08008b60 	.word	0x08008b60
 8002bec:	08008b7c 	.word	0x08008b7c

08002bf0 <cmr_rccGPIOClockEnable>:
/**
 * @brief Enables the specified GPIO port's clock.
 *
 * @param port The GPIO port.
 */
void cmr_rccGPIOClockEnable(GPIO_TypeDef *port) {
 8002bf0:	b480      	push	{r7}
 8002bf2:	b08b      	sub	sp, #44	; 0x2c
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
    switch ((uintptr_t) port) {
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a4f      	ldr	r2, [pc, #316]	; (8002d38 <cmr_rccGPIOClockEnable+0x148>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d04a      	beq.n	8002c96 <cmr_rccGPIOClockEnable+0xa6>
 8002c00:	4a4d      	ldr	r2, [pc, #308]	; (8002d38 <cmr_rccGPIOClockEnable+0x148>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d809      	bhi.n	8002c1a <cmr_rccGPIOClockEnable+0x2a>
 8002c06:	4a4d      	ldr	r2, [pc, #308]	; (8002d3c <cmr_rccGPIOClockEnable+0x14c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d026      	beq.n	8002c5a <cmr_rccGPIOClockEnable+0x6a>
 8002c0c:	4a4c      	ldr	r2, [pc, #304]	; (8002d40 <cmr_rccGPIOClockEnable+0x150>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d032      	beq.n	8002c78 <cmr_rccGPIOClockEnable+0x88>
 8002c12:	4a4c      	ldr	r2, [pc, #304]	; (8002d44 <cmr_rccGPIOClockEnable+0x154>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d011      	beq.n	8002c3c <cmr_rccGPIOClockEnable+0x4c>
            break;
        case GPIOH_BASE:
            __HAL_RCC_GPIOH_CLK_ENABLE();
            break;
    }
}
 8002c18:	e088      	b.n	8002d2c <cmr_rccGPIOClockEnable+0x13c>
    switch ((uintptr_t) port) {
 8002c1a:	4a4b      	ldr	r2, [pc, #300]	; (8002d48 <cmr_rccGPIOClockEnable+0x158>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d058      	beq.n	8002cd2 <cmr_rccGPIOClockEnable+0xe2>
 8002c20:	4a49      	ldr	r2, [pc, #292]	; (8002d48 <cmr_rccGPIOClockEnable+0x158>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d803      	bhi.n	8002c2e <cmr_rccGPIOClockEnable+0x3e>
 8002c26:	4a49      	ldr	r2, [pc, #292]	; (8002d4c <cmr_rccGPIOClockEnable+0x15c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d043      	beq.n	8002cb4 <cmr_rccGPIOClockEnable+0xc4>
}
 8002c2c:	e07e      	b.n	8002d2c <cmr_rccGPIOClockEnable+0x13c>
    switch ((uintptr_t) port) {
 8002c2e:	4a48      	ldr	r2, [pc, #288]	; (8002d50 <cmr_rccGPIOClockEnable+0x160>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d05d      	beq.n	8002cf0 <cmr_rccGPIOClockEnable+0x100>
 8002c34:	4a47      	ldr	r2, [pc, #284]	; (8002d54 <cmr_rccGPIOClockEnable+0x164>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d069      	beq.n	8002d0e <cmr_rccGPIOClockEnable+0x11e>
}
 8002c3a:	e077      	b.n	8002d2c <cmr_rccGPIOClockEnable+0x13c>
            __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c40:	4a45      	ldr	r2, [pc, #276]	; (8002d58 <cmr_rccGPIOClockEnable+0x168>)
 8002c42:	4b45      	ldr	r3, [pc, #276]	; (8002d58 <cmr_rccGPIOClockEnable+0x168>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4c:	4b42      	ldr	r3, [pc, #264]	; (8002d58 <cmr_rccGPIOClockEnable+0x168>)
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
            break;
 8002c58:	e068      	b.n	8002d2c <cmr_rccGPIOClockEnable+0x13c>
            __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	623b      	str	r3, [r7, #32]
 8002c5e:	4a3e      	ldr	r2, [pc, #248]	; (8002d58 <cmr_rccGPIOClockEnable+0x168>)
 8002c60:	4b3d      	ldr	r3, [pc, #244]	; (8002d58 <cmr_rccGPIOClockEnable+0x168>)
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	f043 0302 	orr.w	r3, r3, #2
 8002c68:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6a:	4b3b      	ldr	r3, [pc, #236]	; (8002d58 <cmr_rccGPIOClockEnable+0x168>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	623b      	str	r3, [r7, #32]
 8002c74:	6a3b      	ldr	r3, [r7, #32]
            break;
 8002c76:	e059      	b.n	8002d2c <cmr_rccGPIOClockEnable+0x13c>
            __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61fb      	str	r3, [r7, #28]
 8002c7c:	4a36      	ldr	r2, [pc, #216]	; (8002d58 <cmr_rccGPIOClockEnable+0x168>)
 8002c7e:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <cmr_rccGPIOClockEnable+0x168>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	f043 0304 	orr.w	r3, r3, #4
 8002c86:	6313      	str	r3, [r2, #48]	; 0x30
 8002c88:	4b33      	ldr	r3, [pc, #204]	; (8002d58 <cmr_rccGPIOClockEnable+0x168>)
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	69fb      	ldr	r3, [r7, #28]
            break;
 8002c94:	e04a      	b.n	8002d2c <cmr_rccGPIOClockEnable+0x13c>
            __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	61bb      	str	r3, [r7, #24]
 8002c9a:	4a2f      	ldr	r2, [pc, #188]	; (8002d58 <cmr_rccGPIOClockEnable+0x168>)
 8002c9c:	4b2e      	ldr	r3, [pc, #184]	; (8002d58 <cmr_rccGPIOClockEnable+0x168>)
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	f043 0308 	orr.w	r3, r3, #8
 8002ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca6:	4b2c      	ldr	r3, [pc, #176]	; (8002d58 <cmr_rccGPIOClockEnable+0x168>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	61bb      	str	r3, [r7, #24]
 8002cb0:	69bb      	ldr	r3, [r7, #24]
            break;
 8002cb2:	e03b      	b.n	8002d2c <cmr_rccGPIOClockEnable+0x13c>
            __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	4a27      	ldr	r2, [pc, #156]	; (8002d58 <cmr_rccGPIOClockEnable+0x168>)
 8002cba:	4b27      	ldr	r3, [pc, #156]	; (8002d58 <cmr_rccGPIOClockEnable+0x168>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f043 0310 	orr.w	r3, r3, #16
 8002cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc4:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <cmr_rccGPIOClockEnable+0x168>)
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	697b      	ldr	r3, [r7, #20]
            break;
 8002cd0:	e02c      	b.n	8002d2c <cmr_rccGPIOClockEnable+0x13c>
            __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	4a20      	ldr	r2, [pc, #128]	; (8002d58 <cmr_rccGPIOClockEnable+0x168>)
 8002cd8:	4b1f      	ldr	r3, [pc, #124]	; (8002d58 <cmr_rccGPIOClockEnable+0x168>)
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	f043 0320 	orr.w	r3, r3, #32
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <cmr_rccGPIOClockEnable+0x168>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	693b      	ldr	r3, [r7, #16]
            break;
 8002cee:	e01d      	b.n	8002d2c <cmr_rccGPIOClockEnable+0x13c>
            __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	4a18      	ldr	r2, [pc, #96]	; (8002d58 <cmr_rccGPIOClockEnable+0x168>)
 8002cf6:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <cmr_rccGPIOClockEnable+0x168>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8002d00:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <cmr_rccGPIOClockEnable+0x168>)
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
            break;
 8002d0c:	e00e      	b.n	8002d2c <cmr_rccGPIOClockEnable+0x13c>
            __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	4a11      	ldr	r2, [pc, #68]	; (8002d58 <cmr_rccGPIOClockEnable+0x168>)
 8002d14:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <cmr_rccGPIOClockEnable+0x168>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <cmr_rccGPIOClockEnable+0x168>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	68bb      	ldr	r3, [r7, #8]
            break;
 8002d2a:	bf00      	nop
}
 8002d2c:	bf00      	nop
 8002d2e:	372c      	adds	r7, #44	; 0x2c
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	40020c00 	.word	0x40020c00
 8002d3c:	40020400 	.word	0x40020400
 8002d40:	40020800 	.word	0x40020800
 8002d44:	40020000 	.word	0x40020000
 8002d48:	40021400 	.word	0x40021400
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40021800 	.word	0x40021800
 8002d54:	40021c00 	.word	0x40021c00
 8002d58:	40023800 	.word	0x40023800

08002d5c <cmr_rccADCClockEnable>:
/**
 * @brief Enables the specified ADC's clock.
 *
 * @param instance The HAL ADC instance.
 */
void cmr_rccADCClockEnable(ADC_TypeDef *instance) {
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
    switch ((uintptr_t) instance) {
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a0c      	ldr	r2, [pc, #48]	; (8002d98 <cmr_rccADCClockEnable+0x3c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d000      	beq.n	8002d6e <cmr_rccADCClockEnable+0x12>
        case ADC1_BASE:
            __HAL_RCC_ADC1_CLK_ENABLE();
            break;
    }
}
 8002d6c:	e00e      	b.n	8002d8c <cmr_rccADCClockEnable+0x30>
            __HAL_RCC_ADC1_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <cmr_rccADCClockEnable+0x40>)
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <cmr_rccADCClockEnable+0x40>)
 8002d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d7e:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <cmr_rccADCClockEnable+0x40>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
            break;
 8002d8a:	bf00      	nop
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	40012000 	.word	0x40012000
 8002d9c:	40023800 	.word	0x40023800

08002da0 <cmr_rccCANClockEnable>:
/**
 * @brief Enables the specified CAN interface's clock.
 *
 * @param instance The HAL CAN instance.
 */
void cmr_rccCANClockEnable(CAN_TypeDef *instance) {
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
    switch ((uintptr_t) instance) {
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a25      	ldr	r2, [pc, #148]	; (8002e40 <cmr_rccCANClockEnable+0xa0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d015      	beq.n	8002ddc <cmr_rccCANClockEnable+0x3c>
 8002db0:	4a24      	ldr	r2, [pc, #144]	; (8002e44 <cmr_rccCANClockEnable+0xa4>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d02f      	beq.n	8002e16 <cmr_rccCANClockEnable+0x76>
 8002db6:	4a24      	ldr	r2, [pc, #144]	; (8002e48 <cmr_rccCANClockEnable+0xa8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d000      	beq.n	8002dbe <cmr_rccCANClockEnable+0x1e>
            break;
        case CAN3_BASE:
            __HAL_RCC_CAN3_CLK_ENABLE();
            break;
    }
}
 8002dbc:	e03a      	b.n	8002e34 <cmr_rccCANClockEnable+0x94>
            __HAL_RCC_CAN1_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	4a22      	ldr	r2, [pc, #136]	; (8002e4c <cmr_rccCANClockEnable+0xac>)
 8002dc4:	4b21      	ldr	r3, [pc, #132]	; (8002e4c <cmr_rccCANClockEnable+0xac>)
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dce:	4b1f      	ldr	r3, [pc, #124]	; (8002e4c <cmr_rccCANClockEnable+0xac>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	697b      	ldr	r3, [r7, #20]
            break;
 8002dda:	e02b      	b.n	8002e34 <cmr_rccCANClockEnable+0x94>
            __HAL_RCC_CAN2_CLK_ENABLE();
 8002ddc:	2300      	movs	r3, #0
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	4a1a      	ldr	r2, [pc, #104]	; (8002e4c <cmr_rccCANClockEnable+0xac>)
 8002de2:	4b1a      	ldr	r3, [pc, #104]	; (8002e4c <cmr_rccCANClockEnable+0xac>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dea:	6413      	str	r3, [r2, #64]	; 0x40
 8002dec:	4b17      	ldr	r3, [pc, #92]	; (8002e4c <cmr_rccCANClockEnable+0xac>)
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	693b      	ldr	r3, [r7, #16]
            __HAL_RCC_CAN1_CLK_ENABLE();    // CAN2 also needs CAN1 clock.    
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	4a13      	ldr	r2, [pc, #76]	; (8002e4c <cmr_rccCANClockEnable+0xac>)
 8002dfe:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <cmr_rccCANClockEnable+0xac>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e06:	6413      	str	r3, [r2, #64]	; 0x40
 8002e08:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <cmr_rccCANClockEnable+0xac>)
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
            break;
 8002e14:	e00e      	b.n	8002e34 <cmr_rccCANClockEnable+0x94>
            __HAL_RCC_CAN3_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	4a0c      	ldr	r2, [pc, #48]	; (8002e4c <cmr_rccCANClockEnable+0xac>)
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <cmr_rccCANClockEnable+0xac>)
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e24:	6413      	str	r3, [r2, #64]	; 0x40
 8002e26:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <cmr_rccCANClockEnable+0xac>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]
            break;
 8002e32:	bf00      	nop
}
 8002e34:	bf00      	nop
 8002e36:	371c      	adds	r7, #28
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	40006800 	.word	0x40006800
 8002e44:	40006c00 	.word	0x40006c00
 8002e48:	40006400 	.word	0x40006400
 8002e4c:	40023800 	.word	0x40023800

08002e50 <cmr_rccTIMClockEnable>:
    }
}
#endif /* HAL_USART_MODULE_ENABLED */

#ifdef HAL_TIM_MODULE_ENABLED
void cmr_rccTIMClockEnable(TIM_TypeDef *instance) {
 8002e50:	b480      	push	{r7}
 8002e52:	b091      	sub	sp, #68	; 0x44
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
    switch ((uintptr_t) instance) {
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a8a      	ldr	r2, [pc, #552]	; (8003084 <cmr_rccTIMClockEnable+0x234>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	f000 80de 	beq.w	800301e <cmr_rccTIMClockEnable+0x1ce>
 8002e62:	4a88      	ldr	r2, [pc, #544]	; (8003084 <cmr_rccTIMClockEnable+0x234>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d816      	bhi.n	8002e96 <cmr_rccTIMClockEnable+0x46>
 8002e68:	4a87      	ldr	r2, [pc, #540]	; (8003088 <cmr_rccTIMClockEnable+0x238>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d05f      	beq.n	8002f2e <cmr_rccTIMClockEnable+0xde>
 8002e6e:	4a86      	ldr	r2, [pc, #536]	; (8003088 <cmr_rccTIMClockEnable+0x238>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d806      	bhi.n	8002e82 <cmr_rccTIMClockEnable+0x32>
 8002e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e78:	d03b      	beq.n	8002ef2 <cmr_rccTIMClockEnable+0xa2>
 8002e7a:	4a84      	ldr	r2, [pc, #528]	; (800308c <cmr_rccTIMClockEnable+0x23c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d047      	beq.n	8002f10 <cmr_rccTIMClockEnable+0xc0>
            break;
        case TIM14_BASE:
            __HAL_RCC_TIM14_CLK_ENABLE();
            break;
    }
}
 8002e80:	e0fa      	b.n	8003078 <cmr_rccTIMClockEnable+0x228>
    switch ((uintptr_t) instance) {
 8002e82:	4a83      	ldr	r2, [pc, #524]	; (8003090 <cmr_rccTIMClockEnable+0x240>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d070      	beq.n	8002f6a <cmr_rccTIMClockEnable+0x11a>
 8002e88:	4a82      	ldr	r2, [pc, #520]	; (8003094 <cmr_rccTIMClockEnable+0x244>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d07c      	beq.n	8002f88 <cmr_rccTIMClockEnable+0x138>
 8002e8e:	4a82      	ldr	r2, [pc, #520]	; (8003098 <cmr_rccTIMClockEnable+0x248>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d05b      	beq.n	8002f4c <cmr_rccTIMClockEnable+0xfc>
}
 8002e94:	e0f0      	b.n	8003078 <cmr_rccTIMClockEnable+0x228>
    switch ((uintptr_t) instance) {
 8002e96:	4a81      	ldr	r2, [pc, #516]	; (800309c <cmr_rccTIMClockEnable+0x24c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	f000 8084 	beq.w	8002fa6 <cmr_rccTIMClockEnable+0x156>
 8002e9e:	4a7f      	ldr	r2, [pc, #508]	; (800309c <cmr_rccTIMClockEnable+0x24c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d80b      	bhi.n	8002ebc <cmr_rccTIMClockEnable+0x6c>
 8002ea4:	4a7e      	ldr	r2, [pc, #504]	; (80030a0 <cmr_rccTIMClockEnable+0x250>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	f000 80d7 	beq.w	800305a <cmr_rccTIMClockEnable+0x20a>
 8002eac:	4a7d      	ldr	r2, [pc, #500]	; (80030a4 <cmr_rccTIMClockEnable+0x254>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d010      	beq.n	8002ed4 <cmr_rccTIMClockEnable+0x84>
 8002eb2:	4a7d      	ldr	r2, [pc, #500]	; (80030a8 <cmr_rccTIMClockEnable+0x258>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	f000 80c1 	beq.w	800303c <cmr_rccTIMClockEnable+0x1ec>
}
 8002eba:	e0dd      	b.n	8003078 <cmr_rccTIMClockEnable+0x228>
    switch ((uintptr_t) instance) {
 8002ebc:	4a7b      	ldr	r2, [pc, #492]	; (80030ac <cmr_rccTIMClockEnable+0x25c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	f000 808f 	beq.w	8002fe2 <cmr_rccTIMClockEnable+0x192>
 8002ec4:	4a7a      	ldr	r2, [pc, #488]	; (80030b0 <cmr_rccTIMClockEnable+0x260>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	f000 809a 	beq.w	8003000 <cmr_rccTIMClockEnable+0x1b0>
 8002ecc:	4a79      	ldr	r2, [pc, #484]	; (80030b4 <cmr_rccTIMClockEnable+0x264>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d078      	beq.n	8002fc4 <cmr_rccTIMClockEnable+0x174>
}
 8002ed2:	e0d1      	b.n	8003078 <cmr_rccTIMClockEnable+0x228>
            __HAL_RCC_TIM1_CLK_ENABLE();
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ed8:	4a77      	ldr	r2, [pc, #476]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002eda:	4b77      	ldr	r3, [pc, #476]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ee4:	4b74      	ldr	r3, [pc, #464]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
            break;
 8002ef0:	e0c2      	b.n	8003078 <cmr_rccTIMClockEnable+0x228>
            __HAL_RCC_TIM2_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ef6:	4a70      	ldr	r2, [pc, #448]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002ef8:	4b6f      	ldr	r3, [pc, #444]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	6413      	str	r3, [r2, #64]	; 0x40
 8002f02:	4b6d      	ldr	r3, [pc, #436]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
            break;
 8002f0e:	e0b3      	b.n	8003078 <cmr_rccTIMClockEnable+0x228>
            __HAL_RCC_TIM3_CLK_ENABLE();
 8002f10:	2300      	movs	r3, #0
 8002f12:	637b      	str	r3, [r7, #52]	; 0x34
 8002f14:	4a68      	ldr	r2, [pc, #416]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002f16:	4b68      	ldr	r3, [pc, #416]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f043 0302 	orr.w	r3, r3, #2
 8002f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f20:	4b65      	ldr	r3, [pc, #404]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	637b      	str	r3, [r7, #52]	; 0x34
 8002f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
            break;
 8002f2c:	e0a4      	b.n	8003078 <cmr_rccTIMClockEnable+0x228>
            __HAL_RCC_TIM4_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	633b      	str	r3, [r7, #48]	; 0x30
 8002f32:	4a61      	ldr	r2, [pc, #388]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002f34:	4b60      	ldr	r3, [pc, #384]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	f043 0304 	orr.w	r3, r3, #4
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3e:	4b5e      	ldr	r3, [pc, #376]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	633b      	str	r3, [r7, #48]	; 0x30
 8002f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
            break;
 8002f4a:	e095      	b.n	8003078 <cmr_rccTIMClockEnable+0x228>
            __HAL_RCC_TIM5_CLK_ENABLE();
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f50:	4a59      	ldr	r2, [pc, #356]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002f52:	4b59      	ldr	r3, [pc, #356]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f043 0308 	orr.w	r3, r3, #8
 8002f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5c:	4b56      	ldr	r3, [pc, #344]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
            break;
 8002f68:	e086      	b.n	8003078 <cmr_rccTIMClockEnable+0x228>
            __HAL_RCC_TIM6_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f6e:	4a52      	ldr	r2, [pc, #328]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002f70:	4b51      	ldr	r3, [pc, #324]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	f043 0310 	orr.w	r3, r3, #16
 8002f78:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7a:	4b4f      	ldr	r3, [pc, #316]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
            break;
 8002f86:	e077      	b.n	8003078 <cmr_rccTIMClockEnable+0x228>
            __HAL_RCC_TIM7_CLK_ENABLE();
 8002f88:	2300      	movs	r3, #0
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8c:	4a4a      	ldr	r2, [pc, #296]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002f8e:	4b4a      	ldr	r3, [pc, #296]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f043 0320 	orr.w	r3, r3, #32
 8002f96:	6413      	str	r3, [r2, #64]	; 0x40
 8002f98:	4b47      	ldr	r3, [pc, #284]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
            break;
 8002fa4:	e068      	b.n	8003078 <cmr_rccTIMClockEnable+0x228>
            __HAL_RCC_TIM8_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	623b      	str	r3, [r7, #32]
 8002faa:	4a43      	ldr	r2, [pc, #268]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002fac:	4b42      	ldr	r3, [pc, #264]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb0:	f043 0302 	orr.w	r3, r3, #2
 8002fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fb6:	4b40      	ldr	r3, [pc, #256]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	623b      	str	r3, [r7, #32]
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
            break;
 8002fc2:	e059      	b.n	8003078 <cmr_rccTIMClockEnable+0x228>
            __HAL_RCC_TIM9_CLK_ENABLE();
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	4a3b      	ldr	r2, [pc, #236]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002fca:	4b3b      	ldr	r3, [pc, #236]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd2:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd4:	4b38      	ldr	r3, [pc, #224]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	69fb      	ldr	r3, [r7, #28]
            break;
 8002fe0:	e04a      	b.n	8003078 <cmr_rccTIMClockEnable+0x228>
            __HAL_RCC_TIM10_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	4a34      	ldr	r2, [pc, #208]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002fe8:	4b33      	ldr	r3, [pc, #204]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ff2:	4b31      	ldr	r3, [pc, #196]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	69bb      	ldr	r3, [r7, #24]
            break;
 8002ffe:	e03b      	b.n	8003078 <cmr_rccTIMClockEnable+0x228>
            __HAL_RCC_TIM11_CLK_ENABLE();
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	4a2c      	ldr	r2, [pc, #176]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8003006:	4b2c      	ldr	r3, [pc, #176]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8003008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800300e:	6453      	str	r3, [r2, #68]	; 0x44
 8003010:	4b29      	ldr	r3, [pc, #164]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8003012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	697b      	ldr	r3, [r7, #20]
            break;
 800301c:	e02c      	b.n	8003078 <cmr_rccTIMClockEnable+0x228>
            __HAL_RCC_TIM12_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	4a25      	ldr	r2, [pc, #148]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8003024:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800302c:	6413      	str	r3, [r2, #64]	; 0x40
 800302e:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	693b      	ldr	r3, [r7, #16]
            break;
 800303a:	e01d      	b.n	8003078 <cmr_rccTIMClockEnable+0x228>
            __HAL_RCC_TIM13_CLK_ENABLE();
 800303c:	2300      	movs	r3, #0
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	4a1d      	ldr	r2, [pc, #116]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8003042:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800304a:	6413      	str	r3, [r2, #64]	; 0x40
 800304c:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	68fb      	ldr	r3, [r7, #12]
            break;
 8003058:	e00e      	b.n	8003078 <cmr_rccTIMClockEnable+0x228>
            __HAL_RCC_TIM14_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	4a16      	ldr	r2, [pc, #88]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8003060:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003068:	6413      	str	r3, [r2, #64]	; 0x40
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <cmr_rccTIMClockEnable+0x268>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003072:	60bb      	str	r3, [r7, #8]
 8003074:	68bb      	ldr	r3, [r7, #8]
            break;
 8003076:	bf00      	nop
}
 8003078:	bf00      	nop
 800307a:	3744      	adds	r7, #68	; 0x44
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	40001800 	.word	0x40001800
 8003088:	40000800 	.word	0x40000800
 800308c:	40000400 	.word	0x40000400
 8003090:	40001000 	.word	0x40001000
 8003094:	40001400 	.word	0x40001400
 8003098:	40000c00 	.word	0x40000c00
 800309c:	40010400 	.word	0x40010400
 80030a0:	40002000 	.word	0x40002000
 80030a4:	40010000 	.word	0x40010000
 80030a8:	40001c00 	.word	0x40001c00
 80030ac:	40014400 	.word	0x40014400
 80030b0:	40014800 	.word	0x40014800
 80030b4:	40014000 	.word	0x40014000
 80030b8:	40023800 	.word	0x40023800

080030bc <cmr_sensorInit>:
 *
 * @note The sensor's public fields should already be filled in!
 *
 * @param sensor The sensor to initialize.
 */
static void cmr_sensorInit(cmr_sensor_t *sensor) {
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
    configASSERT(sensor->readingMax >= sensor->readingMin);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d203      	bcs.n	80030d8 <cmr_sensorInit+0x1c>
 80030d0:	2114      	movs	r1, #20
 80030d2:	4828      	ldr	r0, [pc, #160]	; (8003174 <cmr_sensorInit+0xb8>)
 80030d4:	f7ff faf9 	bl	80026ca <cmr_panic>

    // Calculate tolerance.
    const uint32_t readingRange = sensor->readingMax - sensor->readingMin;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	60bb      	str	r3, [r7, #8]
    uint32_t readingTolerance;
    // Prevent overflow.
    if (UINT32_MAX / sensor->outOfRange_pcnt < readingRange) {
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	f04f 32ff 	mov.w	r2, #4294967295
 80030ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d20a      	bcs.n	800310c <cmr_sensorInit+0x50>
        readingTolerance = (readingRange / 100) * sensor->outOfRange_pcnt;
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	4a1f      	ldr	r2, [pc, #124]	; (8003178 <cmr_sensorInit+0xbc>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6912      	ldr	r2, [r2, #16]
 8003104:	fb02 f303 	mul.w	r3, r2, r3
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	e009      	b.n	8003120 <cmr_sensorInit+0x64>
    } else {
        readingTolerance = (readingRange * sensor->outOfRange_pcnt) / 100;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	fb02 f303 	mul.w	r3, r2, r3
 8003116:	4a18      	ldr	r2, [pc, #96]	; (8003178 <cmr_sensorInit+0xbc>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	617b      	str	r3, [r7, #20]
    }

    // Calculate thresholds from tolerance.
    uint32_t readingUpper = sensor->readingMax + readingTolerance;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	4413      	add	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
    if (readingUpper < sensor->readingMax) {
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	429a      	cmp	r2, r3
 8003132:	d902      	bls.n	800313a <cmr_sensorInit+0x7e>
        readingUpper = UINT32_MAX;  // Overflow!
 8003134:	f04f 33ff 	mov.w	r3, #4294967295
 8003138:	613b      	str	r3, [r7, #16]
    }

    uint32_t readingLower = sensor->readingMin - readingTolerance;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	60fb      	str	r3, [r7, #12]
    if (readingLower > sensor->readingMin) {
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	429a      	cmp	r2, r3
 800314c:	d201      	bcs.n	8003152 <cmr_sensorInit+0x96>
        readingLower = 0;  // Underflow!
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
    }

    sensor->_ = (struct cmr_sensor_private) {
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	619a      	str	r2, [r3, #24]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	61da      	str	r2, [r3, #28]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	621a      	str	r2, [r3, #32]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        .readingUpper = readingUpper,
        .readingLower = readingLower,
        .value = 0,
        .error = CMR_SENSOR_ERR_NONE
    };
}
 800316c:	bf00      	nop
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	08008b9c 	.word	0x08008b9c
 8003178:	51eb851f 	.word	0x51eb851f

0800317c <cmr_sensorUpdate>:
/**
 * @brief Updates the sensor.
 *
 * @param sensor The sensor to sample.
 */
static void cmr_sensorUpdate(cmr_sensor_t *sensor) {
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
    uint32_t reading = sensor->sample(sensor);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	4798      	blx	r3
 800318c:	60b8      	str	r0, [r7, #8]

    // Check if sensor has gone out-of-range.
    if (reading < sensor->_.readingLower || sensor->_.readingUpper < reading) {
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69da      	ldr	r2, [r3, #28]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	429a      	cmp	r2, r3
 8003196:	d804      	bhi.n	80031a2 <cmr_sensorUpdate+0x26>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699a      	ldr	r2, [r3, #24]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d204      	bcs.n	80031ac <cmr_sensorUpdate+0x30>
        sensor->_.error = CMR_SENSOR_ERR_OUT_OF_RANGE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031aa:	e003      	b.n	80031b4 <cmr_sensorUpdate+0x38>
    } else {
        sensor->_.error = CMR_SENSOR_ERR_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }

    uint32_t value;
    if (sensor->conv != NULL) {
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d007      	beq.n	80031cc <cmr_sensorUpdate+0x50>
        value = sensor->conv(sensor, reading);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	4798      	blx	r3
 80031c6:	4603      	mov	r3, r0
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	e001      	b.n	80031d0 <cmr_sensorUpdate+0x54>
    } else {
        value = reading;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	60fb      	str	r3, [r7, #12]
    }

    sensor->_.value = value;
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	621a      	str	r2, [r3, #32]
}
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <cmr_sensorListInit>:
 * @param sensorsLen The total number of sensors in the array.
 */
void cmr_sensorListInit(
    cmr_sensorList_t *list,
    cmr_sensor_t *sensors, size_t sensorsLen
) {
 80031de:	b580      	push	{r7, lr}
 80031e0:	b086      	sub	sp, #24
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	60f8      	str	r0, [r7, #12]
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < sensorsLen; i++) {
 80031ea:	2300      	movs	r3, #0
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	e00d      	b.n	800320c <cmr_sensorListInit+0x2e>
        cmr_sensorInit(sensors + i);
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	461a      	mov	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4413      	add	r3, r2
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff ff5b 	bl	80030bc <cmr_sensorInit>
    for (size_t i = 0; i < sensorsLen; i++) {
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	3301      	adds	r3, #1
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	429a      	cmp	r2, r3
 8003212:	d3ed      	bcc.n	80031f0 <cmr_sensorListInit+0x12>
    }

    list->sensors = sensors;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	601a      	str	r2, [r3, #0]
    list->sensorsLen = sensorsLen;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	605a      	str	r2, [r3, #4]
}
 8003220:	bf00      	nop
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <cmr_sensorListUpdate>:
/**
 * @brief Updates the given sensor list.
 *
 * @param list The list to update.
 */
void cmr_sensorListUpdate(cmr_sensorList_t *list) {
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < list->sensorsLen; i++) {
 8003230:	2300      	movs	r3, #0
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	e00d      	b.n	8003252 <cmr_sensorListUpdate+0x2a>
        cmr_sensorUpdate(list->sensors + i);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6819      	ldr	r1, [r3, #0]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	440b      	add	r3, r1
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff ff98 	bl	800317c <cmr_sensorUpdate>
    for (size_t i = 0; i < list->sensorsLen; i++) {
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	3301      	adds	r3, #1
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	429a      	cmp	r2, r3
 800325a:	d8ec      	bhi.n	8003236 <cmr_sensorListUpdate+0xe>
    }
}
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <cmr_sensorListGetValue>:
 *
 * @return The most recent converted value.
 */
int32_t cmr_sensorListGetValue(
    cmr_sensorList_t *list, size_t channel
) {
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
    return list->sensors[channel]._.value;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6819      	ldr	r1, [r3, #0]
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	440b      	add	r3, r1
 800327e:	6a1b      	ldr	r3, [r3, #32]
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <cmr_taskInit>:
    cmr_task_t *task,
    const char *name,
    UBaseType_t priority,
    TaskFunction_t func,
    void *arg
) {
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af04      	add	r7, sp, #16
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	603b      	str	r3, [r7, #0]
        func,
        name,
        sizeof(task->stackBuf) / sizeof(task->stackBuf[0]),
        arg,
        priority,
        task->stackBuf,
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	3360      	adds	r3, #96	; 0x60
    task->handle = xTaskCreateStatic(
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	3204      	adds	r2, #4
 80032a2:	9202      	str	r2, [sp, #8]
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	2280      	movs	r2, #128	; 0x80
 80032ae:	68b9      	ldr	r1, [r7, #8]
 80032b0:	6838      	ldr	r0, [r7, #0]
 80032b2:	f000 fe4f 	bl	8003f54 <xTaskCreateStatic>
 80032b6:	4602      	mov	r2, r0
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	601a      	str	r2, [r3, #0]
    );
#else
#error "At least one of configSUPPORT_{STATIC,DYNAMIC}_ALLOCATION must be 1!"
#endif

    configASSERT(task->handle != NULL);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d103      	bne.n	80032cc <cmr_taskInit+0x40>
 80032c4:	2130      	movs	r1, #48	; 0x30
 80032c6:	4803      	ldr	r0, [pc, #12]	; (80032d4 <cmr_taskInit+0x48>)
 80032c8:	f7ff f9ff 	bl	80026ca <cmr_panic>
}
 80032cc:	bf00      	nop
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	08008c00 	.word	0x08008c00

080032d8 <vApplicationGetIdleTaskMemory>:
 */
void vApplicationGetIdleTaskMemory(
    StaticTask_t **task,
    StackType_t **stack,
    uint32_t *stackLen
) {
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
    static StaticTask_t taskBuf;

    /** @brief The task's stack buffer. */
    static StackType_t stackBuf[configMINIMAL_STACK_SIZE];

    *task = &taskBuf;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4a07      	ldr	r2, [pc, #28]	; (8003304 <vApplicationGetIdleTaskMemory+0x2c>)
 80032e8:	601a      	str	r2, [r3, #0]
    *stack = stackBuf;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	4a06      	ldr	r2, [pc, #24]	; (8003308 <vApplicationGetIdleTaskMemory+0x30>)
 80032ee:	601a      	str	r2, [r3, #0]
    *stackLen = sizeof(stackBuf) / sizeof(stackBuf[0]);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2280      	movs	r2, #128	; 0x80
 80032f4:	601a      	str	r2, [r3, #0]
}
 80032f6:	bf00      	nop
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	20001948 	.word	0x20001948
 8003308:	200019a4 	.word	0x200019a4

0800330c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800330c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003344 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003310:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003312:	e003      	b.n	800331c <LoopCopyDataInit>

08003314 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003314:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003316:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003318:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800331a:	3104      	adds	r1, #4

0800331c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800331c:	480b      	ldr	r0, [pc, #44]	; (800334c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800331e:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003320:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003322:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003324:	d3f6      	bcc.n	8003314 <CopyDataInit>
  ldr  r2, =_sbss
 8003326:	4a0b      	ldr	r2, [pc, #44]	; (8003354 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003328:	e002      	b.n	8003330 <LoopFillZerobss>

0800332a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800332a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800332c:	f842 3b04 	str.w	r3, [r2], #4

08003330 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003330:	4b09      	ldr	r3, [pc, #36]	; (8003358 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003332:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003334:	d3f9      	bcc.n	800332a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003336:	f000 f813 	bl	8003360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800333a:	f004 fd2d 	bl	8007d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800333e:	f7fd ffc5 	bl	80012cc <main>
  bx  lr    
 8003342:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003344:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003348:	08009f60 	.word	0x08009f60
  ldr  r0, =_sdata
 800334c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003350:	2000043c 	.word	0x2000043c
  ldr  r2, =_sbss
 8003354:	2000043c 	.word	0x2000043c
  ldr  r3, = _ebss
 8003358:	20001cdc 	.word	0x20001cdc

0800335c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800335c:	e7fe      	b.n	800335c <ADC_IRQHandler>
	...

08003360 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003364:	4a16      	ldr	r2, [pc, #88]	; (80033c0 <SystemInit+0x60>)
 8003366:	4b16      	ldr	r3, [pc, #88]	; (80033c0 <SystemInit+0x60>)
 8003368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003370:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003374:	4a13      	ldr	r2, [pc, #76]	; (80033c4 <SystemInit+0x64>)
 8003376:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <SystemInit+0x64>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003380:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <SystemInit+0x64>)
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003386:	4a0f      	ldr	r2, [pc, #60]	; (80033c4 <SystemInit+0x64>)
 8003388:	4b0e      	ldr	r3, [pc, #56]	; (80033c4 <SystemInit+0x64>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003394:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003396:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <SystemInit+0x64>)
 8003398:	4a0b      	ldr	r2, [pc, #44]	; (80033c8 <SystemInit+0x68>)
 800339a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800339c:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <SystemInit+0x64>)
 800339e:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <SystemInit+0x64>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80033a8:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <SystemInit+0x64>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033ae:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <SystemInit+0x60>)
 80033b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033b4:	609a      	str	r2, [r3, #8]
#endif
}
 80033b6:	bf00      	nop
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	e000ed00 	.word	0xe000ed00
 80033c4:	40023800 	.word	0x40023800
 80033c8:	24003010 	.word	0x24003010

080033cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f103 0208 	add.w	r2, r3, #8
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f04f 32ff 	mov.w	r2, #4294967295
 80033e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f103 0208 	add.w	r2, r3, #8
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f103 0208 	add.w	r2, r3, #8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003426:	b480      	push	{r7}
 8003428:	b085      	sub	sp, #20
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	601a      	str	r2, [r3, #0]
}
 8003462:	bf00      	nop
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800346e:	b480      	push	{r7}
 8003470:	b085      	sub	sp, #20
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003484:	d103      	bne.n	800348e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e00c      	b.n	80034a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3308      	adds	r3, #8
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	e002      	b.n	800349c <vListInsert+0x2e>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d9f6      	bls.n	8003496 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	601a      	str	r2, [r3, #0]
}
 80034d4:	bf00      	nop
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6892      	ldr	r2, [r2, #8]
 80034f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6852      	ldr	r2, [r2, #4]
 8003500:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	429a      	cmp	r2, r3
 800350a:	d103      	bne.n	8003514 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	1e5a      	subs	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	3b04      	subs	r3, #4
 8003544:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800354c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3b04      	subs	r3, #4
 8003552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f023 0201 	bic.w	r2, r3, #1
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	3b04      	subs	r3, #4
 8003562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003564:	4a0c      	ldr	r2, [pc, #48]	; (8003598 <pxPortInitialiseStack+0x64>)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	3b14      	subs	r3, #20
 800356e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3b04      	subs	r3, #4
 800357a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f06f 0202 	mvn.w	r2, #2
 8003582:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	3b20      	subs	r3, #32
 8003588:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800358a:	68fb      	ldr	r3, [r7, #12]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	0800359d 	.word	0x0800359d

0800359c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80035a2:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <prvTaskExitError+0x30>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035aa:	d004      	beq.n	80035b6 <prvTaskExitError+0x1a>
 80035ac:	f240 110b 	movw	r1, #267	; 0x10b
 80035b0:	4807      	ldr	r0, [pc, #28]	; (80035d0 <prvTaskExitError+0x34>)
 80035b2:	f7ff f88a 	bl	80026ca <cmr_panic>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ba:	f383 8811 	msr	BASEPRI, r3
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	f3bf 8f4f 	dsb	sy
 80035c6:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80035c8:	e7fe      	b.n	80035c8 <prvTaskExitError+0x2c>
 80035ca:	bf00      	nop
 80035cc:	200003cc 	.word	0x200003cc
 80035d0:	08008c4c 	.word	0x08008c4c
	...

080035e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80035e0:	4b07      	ldr	r3, [pc, #28]	; (8003600 <pxCurrentTCBConst2>)
 80035e2:	6819      	ldr	r1, [r3, #0]
 80035e4:	6808      	ldr	r0, [r1, #0]
 80035e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ea:	f380 8809 	msr	PSP, r0
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f04f 0000 	mov.w	r0, #0
 80035f6:	f380 8811 	msr	BASEPRI, r0
 80035fa:	4770      	bx	lr
 80035fc:	f3af 8000 	nop.w

08003600 <pxCurrentTCBConst2>:
 8003600:	20001bac 	.word	0x20001bac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003604:	bf00      	nop
 8003606:	bf00      	nop

08003608 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003608:	4806      	ldr	r0, [pc, #24]	; (8003624 <prvPortStartFirstTask+0x1c>)
 800360a:	6800      	ldr	r0, [r0, #0]
 800360c:	6800      	ldr	r0, [r0, #0]
 800360e:	f380 8808 	msr	MSP, r0
 8003612:	b662      	cpsie	i
 8003614:	b661      	cpsie	f
 8003616:	f3bf 8f4f 	dsb	sy
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	df00      	svc	0
 8003620:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003622:	bf00      	nop
 8003624:	e000ed08 	.word	0xe000ed08

08003628 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800362e:	4b36      	ldr	r3, [pc, #216]	; (8003708 <xPortStartScheduler+0xe0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a36      	ldr	r2, [pc, #216]	; (800370c <xPortStartScheduler+0xe4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d104      	bne.n	8003642 <xPortStartScheduler+0x1a>
 8003638:	f240 1141 	movw	r1, #321	; 0x141
 800363c:	4834      	ldr	r0, [pc, #208]	; (8003710 <xPortStartScheduler+0xe8>)
 800363e:	f7ff f844 	bl	80026ca <cmr_panic>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003642:	4b31      	ldr	r3, [pc, #196]	; (8003708 <xPortStartScheduler+0xe0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a33      	ldr	r2, [pc, #204]	; (8003714 <xPortStartScheduler+0xec>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d104      	bne.n	8003656 <xPortStartScheduler+0x2e>
 800364c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8003650:	4831      	ldr	r0, [pc, #196]	; (8003718 <xPortStartScheduler+0xf0>)
 8003652:	f7ff f83a 	bl	80026ca <cmr_panic>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003656:	4b31      	ldr	r3, [pc, #196]	; (800371c <xPortStartScheduler+0xf4>)
 8003658:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	22ff      	movs	r2, #255	; 0xff
 8003666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	b2db      	uxtb	r3, r3
 8003674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003678:	b2da      	uxtb	r2, r3
 800367a:	4b29      	ldr	r3, [pc, #164]	; (8003720 <xPortStartScheduler+0xf8>)
 800367c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800367e:	4b29      	ldr	r3, [pc, #164]	; (8003724 <xPortStartScheduler+0xfc>)
 8003680:	2207      	movs	r2, #7
 8003682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003684:	e009      	b.n	800369a <xPortStartScheduler+0x72>
		{
			ulMaxPRIGROUPValue--;
 8003686:	4b27      	ldr	r3, [pc, #156]	; (8003724 <xPortStartScheduler+0xfc>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	3b01      	subs	r3, #1
 800368c:	4a25      	ldr	r2, [pc, #148]	; (8003724 <xPortStartScheduler+0xfc>)
 800368e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003690:	79fb      	ldrb	r3, [r7, #7]
 8003692:	b2db      	uxtb	r3, r3
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	b2db      	uxtb	r3, r3
 8003698:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a2:	2b80      	cmp	r3, #128	; 0x80
 80036a4:	d0ef      	beq.n	8003686 <xPortStartScheduler+0x5e>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80036a6:	4b1f      	ldr	r3, [pc, #124]	; (8003724 <xPortStartScheduler+0xfc>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	021b      	lsls	r3, r3, #8
 80036ac:	4a1d      	ldr	r2, [pc, #116]	; (8003724 <xPortStartScheduler+0xfc>)
 80036ae:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80036b0:	4b1c      	ldr	r3, [pc, #112]	; (8003724 <xPortStartScheduler+0xfc>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036b8:	4a1a      	ldr	r2, [pc, #104]	; (8003724 <xPortStartScheduler+0xfc>)
 80036ba:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80036c4:	4a18      	ldr	r2, [pc, #96]	; (8003728 <xPortStartScheduler+0x100>)
 80036c6:	4b18      	ldr	r3, [pc, #96]	; (8003728 <xPortStartScheduler+0x100>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036ce:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80036d0:	4a15      	ldr	r2, [pc, #84]	; (8003728 <xPortStartScheduler+0x100>)
 80036d2:	4b15      	ldr	r3, [pc, #84]	; (8003728 <xPortStartScheduler+0x100>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80036da:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80036dc:	f000 f8cc 	bl	8003878 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80036e0:	4b12      	ldr	r3, [pc, #72]	; (800372c <xPortStartScheduler+0x104>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80036e6:	f000 f8e3 	bl	80038b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80036ea:	4a11      	ldr	r2, [pc, #68]	; (8003730 <xPortStartScheduler+0x108>)
 80036ec:	4b10      	ldr	r3, [pc, #64]	; (8003730 <xPortStartScheduler+0x108>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80036f4:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80036f6:	f7ff ff87 	bl	8003608 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80036fa:	f7ff ff4f 	bl	800359c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	e000ed00 	.word	0xe000ed00
 800370c:	410fc271 	.word	0x410fc271
 8003710:	08008cb8 	.word	0x08008cb8
 8003714:	410fc270 	.word	0x410fc270
 8003718:	08008d2c 	.word	0x08008d2c
 800371c:	e000e400 	.word	0xe000e400
 8003720:	20001ba4 	.word	0x20001ba4
 8003724:	20001ba8 	.word	0x20001ba8
 8003728:	e000ed20 	.word	0xe000ed20
 800372c:	200003cc 	.word	0x200003cc
 8003730:	e000ef34 	.word	0xe000ef34

08003734 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373e:	f383 8811 	msr	BASEPRI, r3
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <vPortEnterCritical+0x48>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3301      	adds	r3, #1
 8003752:	4a0a      	ldr	r2, [pc, #40]	; (800377c <vPortEnterCritical+0x48>)
 8003754:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003756:	4b09      	ldr	r3, [pc, #36]	; (800377c <vPortEnterCritical+0x48>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d109      	bne.n	8003772 <vPortEnterCritical+0x3e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800375e:	4b08      	ldr	r3, [pc, #32]	; (8003780 <vPortEnterCritical+0x4c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d004      	beq.n	8003772 <vPortEnterCritical+0x3e>
 8003768:	f240 11a3 	movw	r1, #419	; 0x1a3
 800376c:	4805      	ldr	r0, [pc, #20]	; (8003784 <vPortEnterCritical+0x50>)
 800376e:	f7fe ffac 	bl	80026ca <cmr_panic>
	}
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	200003cc 	.word	0x200003cc
 8003780:	e000ed04 	.word	0xe000ed04
 8003784:	08008e10 	.word	0x08008e10

08003788 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800378e:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <vPortExitCritical+0x3c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d104      	bne.n	80037a0 <vPortExitCritical+0x18>
 8003796:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800379a:	480b      	ldr	r0, [pc, #44]	; (80037c8 <vPortExitCritical+0x40>)
 800379c:	f7fe ff95 	bl	80026ca <cmr_panic>
	uxCriticalNesting--;
 80037a0:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <vPortExitCritical+0x3c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	4a07      	ldr	r2, [pc, #28]	; (80037c4 <vPortExitCritical+0x3c>)
 80037a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80037aa:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <vPortExitCritical+0x3c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d104      	bne.n	80037bc <vPortExitCritical+0x34>
 80037b2:	2300      	movs	r3, #0
 80037b4:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80037bc:	bf00      	nop
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	200003cc 	.word	0x200003cc
 80037c8:	08008e98 	.word	0x08008e98
 80037cc:	00000000 	.word	0x00000000

080037d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80037d0:	f3ef 8009 	mrs	r0, PSP
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	4b15      	ldr	r3, [pc, #84]	; (8003830 <pxCurrentTCBConst>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	f01e 0f10 	tst.w	lr, #16
 80037e0:	bf08      	it	eq
 80037e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80037e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ea:	6010      	str	r0, [r2, #0]
 80037ec:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80037f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80037f4:	f380 8811 	msr	BASEPRI, r0
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f000 ff16 	bl	8004630 <vTaskSwitchContext>
 8003804:	f04f 0000 	mov.w	r0, #0
 8003808:	f380 8811 	msr	BASEPRI, r0
 800380c:	bc08      	pop	{r3}
 800380e:	6819      	ldr	r1, [r3, #0]
 8003810:	6808      	ldr	r0, [r1, #0]
 8003812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003816:	f01e 0f10 	tst.w	lr, #16
 800381a:	bf08      	it	eq
 800381c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003820:	f380 8809 	msr	PSP, r0
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	f3af 8000 	nop.w

08003830 <pxCurrentTCBConst>:
 8003830:	20001bac 	.word	0x20001bac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003834:	bf00      	nop
 8003836:	bf00      	nop

08003838 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
	__asm volatile
 800383e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003842:	f383 8811 	msr	BASEPRI, r3
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003850:	f000 fe34 	bl	80044bc <xTaskIncrementTick>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800385a:	4b06      	ldr	r3, [pc, #24]	; (8003874 <xPortSysTickHandler+0x3c>)
 800385c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	2300      	movs	r3, #0
 8003864:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800386c:	bf00      	nop
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	e000ed04 	.word	0xe000ed04

08003878 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800387c:	4a08      	ldr	r2, [pc, #32]	; (80038a0 <vPortSetupTimerInterrupt+0x28>)
 800387e:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <vPortSetupTimerInterrupt+0x2c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4909      	ldr	r1, [pc, #36]	; (80038a8 <vPortSetupTimerInterrupt+0x30>)
 8003884:	fba1 1303 	umull	r1, r3, r1, r3
 8003888:	099b      	lsrs	r3, r3, #6
 800388a:	3b01      	subs	r3, #1
 800388c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800388e:	4b07      	ldr	r3, [pc, #28]	; (80038ac <vPortSetupTimerInterrupt+0x34>)
 8003890:	2207      	movs	r2, #7
 8003892:	601a      	str	r2, [r3, #0]
}
 8003894:	bf00      	nop
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	e000e014 	.word	0xe000e014
 80038a4:	200003c8 	.word	0x200003c8
 80038a8:	10624dd3 	.word	0x10624dd3
 80038ac:	e000e010 	.word	0xe000e010

080038b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80038b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80038c0 <vPortEnableVFP+0x10>
 80038b4:	6801      	ldr	r1, [r0, #0]
 80038b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80038ba:	6001      	str	r1, [r0, #0]
 80038bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80038be:	bf00      	nop
 80038c0:	e000ed88 	.word	0xe000ed88

080038c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80038ca:	f3ef 8305 	mrs	r3, IPSR
 80038ce:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b0f      	cmp	r3, #15
 80038d4:	d90e      	bls.n	80038f4 <vPortValidateInterruptPriority+0x30>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80038d6:	4a10      	ldr	r2, [pc, #64]	; (8003918 <vPortValidateInterruptPriority+0x54>)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4413      	add	r3, r2
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80038e0:	4b0e      	ldr	r3, [pc, #56]	; (800391c <vPortValidateInterruptPriority+0x58>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	78fa      	ldrb	r2, [r7, #3]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d204      	bcs.n	80038f4 <vPortValidateInterruptPriority+0x30>
 80038ea:	f240 21e6 	movw	r1, #742	; 0x2e6
 80038ee:	480c      	ldr	r0, [pc, #48]	; (8003920 <vPortValidateInterruptPriority+0x5c>)
 80038f0:	f7fe feeb 	bl	80026ca <cmr_panic>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80038f4:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <vPortValidateInterruptPriority+0x60>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038fc:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <vPortValidateInterruptPriority+0x64>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d904      	bls.n	800390e <vPortValidateInterruptPriority+0x4a>
 8003904:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 8003908:	4808      	ldr	r0, [pc, #32]	; (800392c <vPortValidateInterruptPriority+0x68>)
 800390a:	f7fe fede 	bl	80026ca <cmr_panic>
	}
 800390e:	bf00      	nop
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	e000e3f0 	.word	0xe000e3f0
 800391c:	20001ba4 	.word	0x20001ba4
 8003920:	08008efc 	.word	0x08008efc
 8003924:	e000ed0c 	.word	0xe000ed0c
 8003928:	20001ba8 	.word	0x20001ba8
 800392c:	08008f78 	.word	0x08008f78

08003930 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d104      	bne.n	800394e <xQueueGenericReset+0x1e>
 8003944:	f240 111b 	movw	r1, #283	; 0x11b
 8003948:	4829      	ldr	r0, [pc, #164]	; (80039f0 <xQueueGenericReset+0xc0>)
 800394a:	f7fe febe 	bl	80026ca <cmr_panic>

	taskENTER_CRITICAL();
 800394e:	f7ff fef1 	bl	8003734 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395a:	68f9      	ldr	r1, [r7, #12]
 800395c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800395e:	fb01 f303 	mul.w	r3, r1, r3
 8003962:	441a      	add	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397e:	3b01      	subs	r3, #1
 8003980:	68f9      	ldr	r1, [r7, #12]
 8003982:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	441a      	add	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	22ff      	movs	r2, #255	; 0xff
 8003992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	22ff      	movs	r2, #255	; 0xff
 800399a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d114      	bne.n	80039ce <xQueueGenericReset+0x9e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d01a      	beq.n	80039e2 <xQueueGenericReset+0xb2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	3310      	adds	r3, #16
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 feb3 	bl	800471c <xTaskRemoveFromEventList>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d012      	beq.n	80039e2 <xQueueGenericReset+0xb2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80039bc:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <xQueueGenericReset+0xc4>)
 80039be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	e009      	b.n	80039e2 <xQueueGenericReset+0xb2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	3310      	adds	r3, #16
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff fcfa 	bl	80033cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3324      	adds	r3, #36	; 0x24
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff fcf5 	bl	80033cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80039e2:	f7ff fed1 	bl	8003788 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80039e6:	2301      	movs	r3, #1
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	0800900c 	.word	0x0800900c
 80039f4:	e000ed04 	.word	0xe000ed04

080039f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d104      	bne.n	8003a16 <xQueueGenericCreateStatic+0x1e>
 8003a0c:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8003a10:	481f      	ldr	r0, [pc, #124]	; (8003a90 <xQueueGenericCreateStatic+0x98>)
 8003a12:	f7fe fe5a 	bl	80026ca <cmr_panic>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d104      	bne.n	8003a26 <xQueueGenericCreateStatic+0x2e>
 8003a1c:	f44f 71ab 	mov.w	r1, #342	; 0x156
 8003a20:	481c      	ldr	r0, [pc, #112]	; (8003a94 <xQueueGenericCreateStatic+0x9c>)
 8003a22:	f7fe fe52 	bl	80026ca <cmr_panic>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d007      	beq.n	8003a3c <xQueueGenericCreateStatic+0x44>
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d104      	bne.n	8003a3c <xQueueGenericCreateStatic+0x44>
 8003a32:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8003a36:	4818      	ldr	r0, [pc, #96]	; (8003a98 <xQueueGenericCreateStatic+0xa0>)
 8003a38:	f7fe fe47 	bl	80026ca <cmr_panic>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d107      	bne.n	8003a52 <xQueueGenericCreateStatic+0x5a>
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d004      	beq.n	8003a52 <xQueueGenericCreateStatic+0x5a>
 8003a48:	f240 115b 	movw	r1, #347	; 0x15b
 8003a4c:	4813      	ldr	r0, [pc, #76]	; (8003a9c <xQueueGenericCreateStatic+0xa4>)
 8003a4e:	f7fe fe3c 	bl	80026ca <cmr_panic>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a52:	2348      	movs	r3, #72	; 0x48
 8003a54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b48      	cmp	r3, #72	; 0x48
 8003a5a:	d004      	beq.n	8003a66 <xQueueGenericCreateStatic+0x6e>
 8003a5c:	f240 1163 	movw	r1, #355	; 0x163
 8003a60:	480f      	ldr	r0, [pc, #60]	; (8003aa0 <xQueueGenericCreateStatic+0xa8>)
 8003a62:	f7fe fe32 	bl	80026ca <cmr_panic>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d009      	beq.n	8003a84 <xQueueGenericCreateStatic+0x8c>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a70:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	68b9      	ldr	r1, [r7, #8]
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f810 	bl	8003aa4 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8003a84:	697b      	ldr	r3, [r7, #20]
	}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	08009050 	.word	0x08009050
 8003a94:	080090b0 	.word	0x080090b0
 8003a98:	08009104 	.word	0x08009104
 8003a9c:	08009178 	.word	0x08009178
 8003aa0:	080091ec 	.word	0x080091ec

08003aa4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d103      	bne.n	8003ac0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	e002      	b.n	8003ac6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	69b8      	ldr	r0, [r7, #24]
 8003ad6:	f7ff ff2b 	bl	8003930 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ada:	bf00      	nop
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af02      	add	r7, sp, #8
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d104      	bne.n	8003b00 <xQueueCreateCountingSemaphoreStatic+0x1c>
 8003af6:	f240 21a1 	movw	r1, #673	; 0x2a1
 8003afa:	4810      	ldr	r0, [pc, #64]	; (8003b3c <xQueueCreateCountingSemaphoreStatic+0x58>)
 8003afc:	f7fe fde5 	bl	80026ca <cmr_panic>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d904      	bls.n	8003b12 <xQueueCreateCountingSemaphoreStatic+0x2e>
 8003b08:	f240 21a2 	movw	r1, #674	; 0x2a2
 8003b0c:	480c      	ldr	r0, [pc, #48]	; (8003b40 <xQueueCreateCountingSemaphoreStatic+0x5c>)
 8003b0e:	f7fe fddc 	bl	80026ca <cmr_panic>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003b12:	2302      	movs	r3, #2
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f7ff ff6b 	bl	80039f8 <xQueueGenericCreateStatic>
 8003b22:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <xQueueCreateCountingSemaphoreStatic+0x4c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003b30:	697b      	ldr	r3, [r7, #20]
	}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	08009244 	.word	0x08009244
 8003b40:	08009290 	.word	0x08009290

08003b44 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08a      	sub	sp, #40	; 0x28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d104      	bne.n	8003b62 <xQueueGiveFromISR+0x1e>
 8003b58:	f240 413c 	movw	r1, #1084	; 0x43c
 8003b5c:	4833      	ldr	r0, [pc, #204]	; (8003c2c <xQueueGiveFromISR+0xe8>)
 8003b5e:	f7fe fdb4 	bl	80026ca <cmr_panic>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d004      	beq.n	8003b74 <xQueueGiveFromISR+0x30>
 8003b6a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8003b6e:	4830      	ldr	r0, [pc, #192]	; (8003c30 <xQueueGiveFromISR+0xec>)
 8003b70:	f7fe fdab 	bl	80026ca <cmr_panic>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d108      	bne.n	8003b8e <xQueueGiveFromISR+0x4a>
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d004      	beq.n	8003b8e <xQueueGiveFromISR+0x4a>
 8003b84:	f240 4145 	movw	r1, #1093	; 0x445
 8003b88:	482a      	ldr	r0, [pc, #168]	; (8003c34 <xQueueGiveFromISR+0xf0>)
 8003b8a:	f7fe fd9e 	bl	80026ca <cmr_panic>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b8e:	f7ff fe99 	bl	80038c4 <vPortValidateInterruptPriority>
	__asm volatile
 8003b92:	f3ef 8211 	mrs	r2, BASEPRI
 8003b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	613a      	str	r2, [r7, #16]
 8003ba8:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8003baa:	693b      	ldr	r3, [r7, #16]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003bac:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d929      	bls.n	8003c12 <xQueueGiveFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bc4:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003bce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd6:	d112      	bne.n	8003bfe <xQueueGiveFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d015      	beq.n	8003c0c <xQueueGiveFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	3324      	adds	r3, #36	; 0x24
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fd99 	bl	800471c <xTaskRemoveFromEventList>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00d      	beq.n	8003c0c <xQueueGiveFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <xQueueGiveFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	e006      	b.n	8003c0c <xQueueGiveFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
 8003c00:	3301      	adds	r3, #1
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	b25a      	sxtb	r2, r3
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c10:	e001      	b.n	8003c16 <xQueueGiveFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3728      	adds	r7, #40	; 0x28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	0800900c 	.word	0x0800900c
 8003c30:	08009490 	.word	0x08009490
 8003c34:	080094e8 	.word	0x080094e8

08003c38 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08a      	sub	sp, #40	; 0x28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c46:	2300      	movs	r3, #0
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d104      	bne.n	8003c5e <xQueueGenericReceive+0x26>
 8003c54:	f240 41dc 	movw	r1, #1244	; 0x4dc
 8003c58:	4873      	ldr	r0, [pc, #460]	; (8003e28 <xQueueGenericReceive+0x1f0>)
 8003c5a:	f7fe fd36 	bl	80026ca <cmr_panic>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d108      	bne.n	8003c76 <xQueueGenericReceive+0x3e>
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d004      	beq.n	8003c76 <xQueueGenericReceive+0x3e>
 8003c6c:	f240 41dd 	movw	r1, #1245	; 0x4dd
 8003c70:	486e      	ldr	r0, [pc, #440]	; (8003e2c <xQueueGenericReceive+0x1f4>)
 8003c72:	f7fe fd2a 	bl	80026ca <cmr_panic>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c76:	f000 feb1 	bl	80049dc <xTaskGetSchedulerState>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d107      	bne.n	8003c90 <xQueueGenericReceive+0x58>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d004      	beq.n	8003c90 <xQueueGenericReceive+0x58>
 8003c86:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8003c8a:	4869      	ldr	r0, [pc, #420]	; (8003e30 <xQueueGenericReceive+0x1f8>)
 8003c8c:	f7fe fd1d 	bl	80026ca <cmr_panic>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c90:	f7ff fd50 	bl	8003734 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d046      	beq.n	8003d2e <xQueueGenericReceive+0xf6>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ca6:	68b9      	ldr	r1, [r7, #8]
 8003ca8:	6a38      	ldr	r0, [r7, #32]
 8003caa:	f000 f8c5 	bl	8003e38 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d121      	bne.n	8003cf8 <xQueueGenericReceive+0xc0>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	1e5a      	subs	r2, r3, #1
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d104      	bne.n	8003cce <xQueueGenericReceive+0x96>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003cc4:	f000 ff1e 	bl	8004b04 <pvTaskIncrementMutexHeldCount>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d027      	beq.n	8003d26 <xQueueGenericReceive+0xee>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	3310      	adds	r3, #16
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fd1e 	bl	800471c <xTaskRemoveFromEventList>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d01f      	beq.n	8003d26 <xQueueGenericReceive+0xee>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8003ce6:	4b53      	ldr	r3, [pc, #332]	; (8003e34 <xQueueGenericReceive+0x1fc>)
 8003ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	e016      	b.n	8003d26 <xQueueGenericReceive+0xee>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00f      	beq.n	8003d26 <xQueueGenericReceive+0xee>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	3324      	adds	r3, #36	; 0x24
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fd06 	bl	800471c <xTaskRemoveFromEventList>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d007      	beq.n	8003d26 <xQueueGenericReceive+0xee>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d16:	4b47      	ldr	r3, [pc, #284]	; (8003e34 <xQueueGenericReceive+0x1fc>)
 8003d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8003d26:	f7ff fd2f 	bl	8003788 <vPortExitCritical>
				return pdPASS;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e077      	b.n	8003e1e <xQueueGenericReceive+0x1e6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d103      	bne.n	8003d3c <xQueueGenericReceive+0x104>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d34:	f7ff fd28 	bl	8003788 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e070      	b.n	8003e1e <xQueueGenericReceive+0x1e6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <xQueueGenericReceive+0x118>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003d42:	f107 0310 	add.w	r3, r7, #16
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fd46 	bl	80047d8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d50:	f7ff fd1a 	bl	8003788 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d54:	f000 faea 	bl	800432c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d58:	f7ff fcec 	bl	8003734 <vPortEnterCritical>
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d62:	b25b      	sxtb	r3, r3
 8003d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d68:	d103      	bne.n	8003d72 <xQueueGenericReceive+0x13a>
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d78:	b25b      	sxtb	r3, r3
 8003d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7e:	d103      	bne.n	8003d88 <xQueueGenericReceive+0x150>
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d88:	f7ff fcfe 	bl	8003788 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d8c:	1d3a      	adds	r2, r7, #4
 8003d8e:	f107 0310 	add.w	r3, r7, #16
 8003d92:	4611      	mov	r1, r2
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fd3d 	bl	8004814 <xTaskCheckForTimeOut>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d131      	bne.n	8003e04 <xQueueGenericReceive+0x1cc>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003da0:	6a38      	ldr	r0, [r7, #32]
 8003da2:	f000 f8c1 	bl	8003f28 <prvIsQueueEmpty>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d025      	beq.n	8003df8 <xQueueGenericReceive+0x1c0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d108      	bne.n	8003dc6 <xQueueGenericReceive+0x18e>
					{
						taskENTER_CRITICAL();
 8003db4:	f7ff fcbe 	bl	8003734 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fe2b 	bl	8004a18 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8003dc2:	f7ff fce1 	bl	8003788 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	3324      	adds	r3, #36	; 0x24
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	4611      	mov	r1, r2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 fc84 	bl	80046dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003dd4:	6a38      	ldr	r0, [r7, #32]
 8003dd6:	f000 f855 	bl	8003e84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003dda:	f000 fab5 	bl	8004348 <xTaskResumeAll>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f47f af55 	bne.w	8003c90 <xQueueGenericReceive+0x58>
				{
					portYIELD_WITHIN_API();
 8003de6:	4b13      	ldr	r3, [pc, #76]	; (8003e34 <xQueueGenericReceive+0x1fc>)
 8003de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	e74b      	b.n	8003c90 <xQueueGenericReceive+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003df8:	6a38      	ldr	r0, [r7, #32]
 8003dfa:	f000 f843 	bl	8003e84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dfe:	f000 faa3 	bl	8004348 <xTaskResumeAll>
 8003e02:	e745      	b.n	8003c90 <xQueueGenericReceive+0x58>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8003e04:	6a38      	ldr	r0, [r7, #32]
 8003e06:	f000 f83d 	bl	8003e84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e0a:	f000 fa9d 	bl	8004348 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e0e:	6a38      	ldr	r0, [r7, #32]
 8003e10:	f000 f88a 	bl	8003f28 <prvIsQueueEmpty>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f43f af3a 	beq.w	8003c90 <xQueueGenericReceive+0x58>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3728      	adds	r7, #40	; 0x28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	0800900c 	.word	0x0800900c
 8003e2c:	08009580 	.word	0x08009580
 8003e30:	080093fc 	.word	0x080093fc
 8003e34:	e000ed04 	.word	0xe000ed04

08003e38 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d018      	beq.n	8003e7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	441a      	add	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d303      	bcc.n	8003e6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68d9      	ldr	r1, [r3, #12]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	461a      	mov	r2, r3
 8003e76:	6838      	ldr	r0, [r7, #0]
 8003e78:	f003 ffb2 	bl	8007de0 <memcpy>
	}
}
 8003e7c:	bf00      	nop
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e8c:	f7ff fc52 	bl	8003734 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e98:	e011      	b.n	8003ebe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d012      	beq.n	8003ec8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3324      	adds	r3, #36	; 0x24
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fc38 	bl	800471c <xTaskRemoveFromEventList>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003eb2:	f000 fd07 	bl	80048c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	dce9      	bgt.n	8003e9a <prvUnlockQueue+0x16>
 8003ec6:	e000      	b.n	8003eca <prvUnlockQueue+0x46>
					break;
 8003ec8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	22ff      	movs	r2, #255	; 0xff
 8003ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ed2:	f7ff fc59 	bl	8003788 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ed6:	f7ff fc2d 	bl	8003734 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ee0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ee2:	e011      	b.n	8003f08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d012      	beq.n	8003f12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3310      	adds	r3, #16
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fc13 	bl	800471c <xTaskRemoveFromEventList>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003efc:	f000 fce2 	bl	80048c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f00:	7bbb      	ldrb	r3, [r7, #14]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	dce9      	bgt.n	8003ee4 <prvUnlockQueue+0x60>
 8003f10:	e000      	b.n	8003f14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	22ff      	movs	r2, #255	; 0xff
 8003f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f1c:	f7ff fc34 	bl	8003788 <vPortExitCritical>
}
 8003f20:	bf00      	nop
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f30:	f7ff fc00 	bl	8003734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d102      	bne.n	8003f42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	e001      	b.n	8003f46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f42:	2300      	movs	r3, #0
 8003f44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f46:	f7ff fc1f 	bl	8003788 <vPortExitCritical>

	return xReturn;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08a      	sub	sp, #40	; 0x28
 8003f58:	af04      	add	r7, sp, #16
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d104      	bne.n	8003f72 <xTaskCreateStatic+0x1e>
 8003f68:	f240 2155 	movw	r1, #597	; 0x255
 8003f6c:	4817      	ldr	r0, [pc, #92]	; (8003fcc <xTaskCreateStatic+0x78>)
 8003f6e:	f7fe fbac 	bl	80026ca <cmr_panic>
		configASSERT( pxTaskBuffer != NULL );
 8003f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d104      	bne.n	8003f82 <xTaskCreateStatic+0x2e>
 8003f78:	f240 2156 	movw	r1, #598	; 0x256
 8003f7c:	4814      	ldr	r0, [pc, #80]	; (8003fd0 <xTaskCreateStatic+0x7c>)
 8003f7e:	f7fe fba4 	bl	80026ca <cmr_panic>

		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01a      	beq.n	8003fbe <xTaskCreateStatic+0x6a>
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d017      	beq.n	8003fbe <xTaskCreateStatic+0x6a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f96:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f98:	2300      	movs	r3, #0
 8003f9a:	9303      	str	r3, [sp, #12]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	9302      	str	r3, [sp, #8]
 8003fa0:	f107 0310 	add.w	r3, r7, #16
 8003fa4:	9301      	str	r3, [sp, #4]
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	68b9      	ldr	r1, [r7, #8]
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 f80f 	bl	8003fd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fb6:	6978      	ldr	r0, [r7, #20]
 8003fb8:	f000 f880 	bl	80040bc <prvAddNewTaskToReadyList>
 8003fbc:	e001      	b.n	8003fc2 <xTaskCreateStatic+0x6e>
		}
		else
		{
			xReturn = NULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 8003fc2:	693b      	ldr	r3, [r7, #16]
	}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	080096a4 	.word	0x080096a4
 8003fd0:	080096f8 	.word	0x080096f8

08003fd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003fec:	3b01      	subs	r3, #1
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f023 0307 	bic.w	r3, r3, #7
 8003ffa:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	2b00      	cmp	r3, #0
 8004004:	d004      	beq.n	8004010 <prvInitialiseNewTask+0x3c>
 8004006:	f240 312b 	movw	r1, #811	; 0x32b
 800400a:	482b      	ldr	r0, [pc, #172]	; (80040b8 <prvInitialiseNewTask+0xe4>)
 800400c:	f7fe fb5d 	bl	80026ca <cmr_panic>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	e012      	b.n	800403c <prvInitialiseNewTask+0x68>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	4413      	add	r3, r2
 800401c:	7819      	ldrb	r1, [r3, #0]
 800401e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	4413      	add	r3, r2
 8004024:	3334      	adds	r3, #52	; 0x34
 8004026:	460a      	mov	r2, r1
 8004028:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	4413      	add	r3, r2
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d006      	beq.n	8004044 <prvInitialiseNewTask+0x70>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	3301      	adds	r3, #1
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2b1f      	cmp	r3, #31
 8004040:	d9e9      	bls.n	8004016 <prvInitialiseNewTask+0x42>
 8004042:	e000      	b.n	8004046 <prvInitialiseNewTask+0x72>
		{
			break;
 8004044:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	2b06      	cmp	r3, #6
 8004052:	d901      	bls.n	8004058 <prvInitialiseNewTask+0x84>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004054:	2306      	movs	r3, #6
 8004056:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405a:	6a3a      	ldr	r2, [r7, #32]
 800405c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800405e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004060:	6a3a      	ldr	r2, [r7, #32]
 8004062:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8004064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004066:	2200      	movs	r2, #0
 8004068:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406c:	3304      	adds	r3, #4
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff f9cc 	bl	800340c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004076:	3318      	adds	r3, #24
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff f9c7 	bl	800340c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800407e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004082:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	f1c3 0207 	rsb	r2, r3, #7
 800408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800408e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004092:	625a      	str	r2, [r3, #36]	; 0x24
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	68f9      	ldr	r1, [r7, #12]
 8004098:	6938      	ldr	r0, [r7, #16]
 800409a:	f7ff fa4b 	bl	8003534 <pxPortInitialiseStack>
 800409e:	4602      	mov	r2, r0
 80040a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <prvInitialiseNewTask+0xdc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040b0:	bf00      	nop
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	0800974c 	.word	0x0800974c

080040bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80040c4:	f7ff fb36 	bl	8003734 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80040c8:	4b2a      	ldr	r3, [pc, #168]	; (8004174 <prvAddNewTaskToReadyList+0xb8>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3301      	adds	r3, #1
 80040ce:	4a29      	ldr	r2, [pc, #164]	; (8004174 <prvAddNewTaskToReadyList+0xb8>)
 80040d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040d2:	4b29      	ldr	r3, [pc, #164]	; (8004178 <prvAddNewTaskToReadyList+0xbc>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d109      	bne.n	80040ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040da:	4a27      	ldr	r2, [pc, #156]	; (8004178 <prvAddNewTaskToReadyList+0xbc>)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040e0:	4b24      	ldr	r3, [pc, #144]	; (8004174 <prvAddNewTaskToReadyList+0xb8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d110      	bne.n	800410a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040e8:	f000 fc10 	bl	800490c <prvInitialiseTaskLists>
 80040ec:	e00d      	b.n	800410a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040ee:	4b23      	ldr	r3, [pc, #140]	; (800417c <prvAddNewTaskToReadyList+0xc0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040f6:	4b20      	ldr	r3, [pc, #128]	; (8004178 <prvAddNewTaskToReadyList+0xbc>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	429a      	cmp	r2, r3
 8004102:	d802      	bhi.n	800410a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004104:	4a1c      	ldr	r2, [pc, #112]	; (8004178 <prvAddNewTaskToReadyList+0xbc>)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800410a:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <prvAddNewTaskToReadyList+0xc4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3301      	adds	r3, #1
 8004110:	4a1b      	ldr	r2, [pc, #108]	; (8004180 <prvAddNewTaskToReadyList+0xc4>)
 8004112:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	2201      	movs	r2, #1
 800411a:	409a      	lsls	r2, r3
 800411c:	4b19      	ldr	r3, [pc, #100]	; (8004184 <prvAddNewTaskToReadyList+0xc8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4313      	orrs	r3, r2
 8004122:	4a18      	ldr	r2, [pc, #96]	; (8004184 <prvAddNewTaskToReadyList+0xc8>)
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412a:	4613      	mov	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4a15      	ldr	r2, [pc, #84]	; (8004188 <prvAddNewTaskToReadyList+0xcc>)
 8004134:	441a      	add	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3304      	adds	r3, #4
 800413a:	4619      	mov	r1, r3
 800413c:	4610      	mov	r0, r2
 800413e:	f7ff f972 	bl	8003426 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004142:	f7ff fb21 	bl	8003788 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004146:	4b0d      	ldr	r3, [pc, #52]	; (800417c <prvAddNewTaskToReadyList+0xc0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00e      	beq.n	800416c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800414e:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <prvAddNewTaskToReadyList+0xbc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004158:	429a      	cmp	r2, r3
 800415a:	d207      	bcs.n	800416c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800415c:	4b0b      	ldr	r3, [pc, #44]	; (800418c <prvAddNewTaskToReadyList+0xd0>)
 800415e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800416c:	bf00      	nop
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	20001c94 	.word	0x20001c94
 8004178:	20001bac 	.word	0x20001bac
 800417c:	20001ca0 	.word	0x20001ca0
 8004180:	20001cb0 	.word	0x20001cb0
 8004184:	20001c9c 	.word	0x20001c9c
 8004188:	20001bb0 	.word	0x20001bb0
 800418c:	e000ed04 	.word	0xe000ed04

08004190 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800419a:	2300      	movs	r3, #0
 800419c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d104      	bne.n	80041ae <vTaskDelayUntil+0x1e>
 80041a4:	f240 4179 	movw	r1, #1145	; 0x479
 80041a8:	482c      	ldr	r0, [pc, #176]	; (800425c <vTaskDelayUntil+0xcc>)
 80041aa:	f7fe fa8e 	bl	80026ca <cmr_panic>
		configASSERT( ( xTimeIncrement > 0U ) );
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d104      	bne.n	80041be <vTaskDelayUntil+0x2e>
 80041b4:	f240 417a 	movw	r1, #1146	; 0x47a
 80041b8:	4829      	ldr	r0, [pc, #164]	; (8004260 <vTaskDelayUntil+0xd0>)
 80041ba:	f7fe fa86 	bl	80026ca <cmr_panic>
		configASSERT( uxSchedulerSuspended == 0 );
 80041be:	4b29      	ldr	r3, [pc, #164]	; (8004264 <vTaskDelayUntil+0xd4>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d004      	beq.n	80041d0 <vTaskDelayUntil+0x40>
 80041c6:	f240 417b 	movw	r1, #1147	; 0x47b
 80041ca:	4827      	ldr	r0, [pc, #156]	; (8004268 <vTaskDelayUntil+0xd8>)
 80041cc:	f7fe fa7d 	bl	80026ca <cmr_panic>

		vTaskSuspendAll();
 80041d0:	f000 f8ac 	bl	800432c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80041d4:	4b25      	ldr	r3, [pc, #148]	; (800426c <vTaskDelayUntil+0xdc>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	4413      	add	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d90b      	bls.n	8004206 <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d911      	bls.n	800421c <vTaskDelayUntil+0x8c>
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d90d      	bls.n	800421c <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
 8004200:	2301      	movs	r3, #1
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	e00a      	b.n	800421c <vTaskDelayUntil+0x8c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	429a      	cmp	r2, r3
 800420e:	d803      	bhi.n	8004218 <vTaskDelayUntil+0x88>
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	429a      	cmp	r2, r3
 8004216:	d901      	bls.n	800421c <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
 8004218:	2301      	movs	r3, #1
 800421a:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d006      	beq.n	8004236 <vTaskDelayUntil+0xa6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2100      	movs	r1, #0
 8004230:	4618      	mov	r0, r3
 8004232:	f000 fc7b 	bl	8004b2c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004236:	f000 f887 	bl	8004348 <xTaskResumeAll>
 800423a:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d107      	bne.n	8004252 <vTaskDelayUntil+0xc2>
		{
			portYIELD_WITHIN_API();
 8004242:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <vTaskDelayUntil+0xe0>)
 8004244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004252:	bf00      	nop
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	080097f4 	.word	0x080097f4
 8004260:	08009844 	.word	0x08009844
 8004264:	20001cbc 	.word	0x20001cbc
 8004268:	08009898 	.word	0x08009898
 800426c:	20001c98 	.word	0x20001c98
 8004270:	e000ed04 	.word	0xe000ed04

08004274 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08a      	sub	sp, #40	; 0x28
 8004278:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800427e:	2300      	movs	r3, #0
 8004280:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004282:	1d3a      	adds	r2, r7, #4
 8004284:	f107 0108 	add.w	r1, r7, #8
 8004288:	f107 030c 	add.w	r3, r7, #12
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff f823 	bl	80032d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	9202      	str	r2, [sp, #8]
 800429a:	9301      	str	r3, [sp, #4]
 800429c:	2300      	movs	r3, #0
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	2300      	movs	r3, #0
 80042a2:	460a      	mov	r2, r1
 80042a4:	491a      	ldr	r1, [pc, #104]	; (8004310 <vTaskStartScheduler+0x9c>)
 80042a6:	481b      	ldr	r0, [pc, #108]	; (8004314 <vTaskStartScheduler+0xa0>)
 80042a8:	f7ff fe54 	bl	8003f54 <xTaskCreateStatic>
 80042ac:	4602      	mov	r2, r0
 80042ae:	4b1a      	ldr	r3, [pc, #104]	; (8004318 <vTaskStartScheduler+0xa4>)
 80042b0:	601a      	str	r2, [r3, #0]
												( void * ) NULL,
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042b2:	4b19      	ldr	r3, [pc, #100]	; (8004318 <vTaskStartScheduler+0xa4>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 80042ba:	2301      	movs	r3, #1
 80042bc:	617b      	str	r3, [r7, #20]
 80042be:	e001      	b.n	80042c4 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d115      	bne.n	80042f6 <vTaskStartScheduler+0x82>
	__asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042dc:	4b0f      	ldr	r3, [pc, #60]	; (800431c <vTaskStartScheduler+0xa8>)
 80042de:	f04f 32ff 	mov.w	r2, #4294967295
 80042e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042e4:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <vTaskStartScheduler+0xac>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80042ea:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <vTaskStartScheduler+0xb0>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042f0:	f7ff f99a 	bl	8003628 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042f4:	e008      	b.n	8004308 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fc:	d104      	bne.n	8004308 <vTaskStartScheduler+0x94>
 80042fe:	f240 7184 	movw	r1, #1924	; 0x784
 8004302:	4809      	ldr	r0, [pc, #36]	; (8004328 <vTaskStartScheduler+0xb4>)
 8004304:	f7fe f9e1 	bl	80026ca <cmr_panic>
}
 8004308:	bf00      	nop
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	08009980 	.word	0x08009980
 8004314:	080048dd 	.word	0x080048dd
 8004318:	20001cb8 	.word	0x20001cb8
 800431c:	20001cb4 	.word	0x20001cb4
 8004320:	20001ca0 	.word	0x20001ca0
 8004324:	20001c98 	.word	0x20001c98
 8004328:	08009988 	.word	0x08009988

0800432c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004330:	4b04      	ldr	r3, [pc, #16]	; (8004344 <vTaskSuspendAll+0x18>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3301      	adds	r3, #1
 8004336:	4a03      	ldr	r2, [pc, #12]	; (8004344 <vTaskSuspendAll+0x18>)
 8004338:	6013      	str	r3, [r2, #0]
}
 800433a:	bf00      	nop
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	20001cbc 	.word	0x20001cbc

08004348 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004352:	2300      	movs	r3, #0
 8004354:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004356:	4b3e      	ldr	r3, [pc, #248]	; (8004450 <xTaskResumeAll+0x108>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d104      	bne.n	8004368 <xTaskResumeAll+0x20>
 800435e:	f44f 61fd 	mov.w	r1, #2024	; 0x7e8
 8004362:	483c      	ldr	r0, [pc, #240]	; (8004454 <xTaskResumeAll+0x10c>)
 8004364:	f7fe f9b1 	bl	80026ca <cmr_panic>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004368:	f7ff f9e4 	bl	8003734 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800436c:	4b38      	ldr	r3, [pc, #224]	; (8004450 <xTaskResumeAll+0x108>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3b01      	subs	r3, #1
 8004372:	4a37      	ldr	r2, [pc, #220]	; (8004450 <xTaskResumeAll+0x108>)
 8004374:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004376:	4b36      	ldr	r3, [pc, #216]	; (8004450 <xTaskResumeAll+0x108>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d161      	bne.n	8004442 <xTaskResumeAll+0xfa>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800437e:	4b36      	ldr	r3, [pc, #216]	; (8004458 <xTaskResumeAll+0x110>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d05d      	beq.n	8004442 <xTaskResumeAll+0xfa>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004386:	e02e      	b.n	80043e6 <xTaskResumeAll+0x9e>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004388:	4b34      	ldr	r3, [pc, #208]	; (800445c <xTaskResumeAll+0x114>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	3318      	adds	r3, #24
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff f8a3 	bl	80034e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	3304      	adds	r3, #4
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff f89e 	bl	80034e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	2201      	movs	r2, #1
 80043aa:	409a      	lsls	r2, r3
 80043ac:	4b2c      	ldr	r3, [pc, #176]	; (8004460 <xTaskResumeAll+0x118>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	4a2b      	ldr	r2, [pc, #172]	; (8004460 <xTaskResumeAll+0x118>)
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4a28      	ldr	r2, [pc, #160]	; (8004464 <xTaskResumeAll+0x11c>)
 80043c4:	441a      	add	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3304      	adds	r3, #4
 80043ca:	4619      	mov	r1, r3
 80043cc:	4610      	mov	r0, r2
 80043ce:	f7ff f82a 	bl	8003426 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d6:	4b24      	ldr	r3, [pc, #144]	; (8004468 <xTaskResumeAll+0x120>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	429a      	cmp	r2, r3
 80043de:	d302      	bcc.n	80043e6 <xTaskResumeAll+0x9e>
					{
						xYieldPending = pdTRUE;
 80043e0:	4b22      	ldr	r3, [pc, #136]	; (800446c <xTaskResumeAll+0x124>)
 80043e2:	2201      	movs	r2, #1
 80043e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043e6:	4b1d      	ldr	r3, [pc, #116]	; (800445c <xTaskResumeAll+0x114>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1cc      	bne.n	8004388 <xTaskResumeAll+0x40>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <xTaskResumeAll+0xb0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043f4:	f000 facc 	bl	8004990 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80043f8:	4b1d      	ldr	r3, [pc, #116]	; (8004470 <xTaskResumeAll+0x128>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d010      	beq.n	8004426 <xTaskResumeAll+0xde>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004404:	f000 f85a 	bl	80044bc <xTaskIncrementTick>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <xTaskResumeAll+0xcc>
							{
								xYieldPending = pdTRUE;
 800440e:	4b17      	ldr	r3, [pc, #92]	; (800446c <xTaskResumeAll+0x124>)
 8004410:	2201      	movs	r2, #1
 8004412:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3b01      	subs	r3, #1
 8004418:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1f1      	bne.n	8004404 <xTaskResumeAll+0xbc>

						uxPendedTicks = 0;
 8004420:	4b13      	ldr	r3, [pc, #76]	; (8004470 <xTaskResumeAll+0x128>)
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004426:	4b11      	ldr	r3, [pc, #68]	; (800446c <xTaskResumeAll+0x124>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d009      	beq.n	8004442 <xTaskResumeAll+0xfa>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800442e:	2301      	movs	r3, #1
 8004430:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004432:	4b10      	ldr	r3, [pc, #64]	; (8004474 <xTaskResumeAll+0x12c>)
 8004434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004442:	f7ff f9a1 	bl	8003788 <vPortExitCritical>

	return xAlreadyYielded;
 8004446:	68bb      	ldr	r3, [r7, #8]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	20001cbc 	.word	0x20001cbc
 8004454:	080099f8 	.word	0x080099f8
 8004458:	20001c94 	.word	0x20001c94
 800445c:	20001c6c 	.word	0x20001c6c
 8004460:	20001c9c 	.word	0x20001c9c
 8004464:	20001bb0 	.word	0x20001bb0
 8004468:	20001bac 	.word	0x20001bac
 800446c:	20001ca8 	.word	0x20001ca8
 8004470:	20001ca4 	.word	0x20001ca4
 8004474:	e000ed04 	.word	0xe000ed04

08004478 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800447e:	4b05      	ldr	r3, [pc, #20]	; (8004494 <xTaskGetTickCount+0x1c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004484:	687b      	ldr	r3, [r7, #4]
}
 8004486:	4618      	mov	r0, r3
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	20001c98 	.word	0x20001c98

08004498 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800449e:	f7ff fa11 	bl	80038c4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80044a2:	2300      	movs	r3, #0
 80044a4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80044a6:	4b04      	ldr	r3, [pc, #16]	; (80044b8 <xTaskGetTickCountFromISR+0x20>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044ac:	683b      	ldr	r3, [r7, #0]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	20001c98 	.word	0x20001c98

080044bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044c6:	4b4e      	ldr	r3, [pc, #312]	; (8004600 <xTaskIncrementTick+0x144>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f040 8087 	bne.w	80045de <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80044d0:	4b4c      	ldr	r3, [pc, #304]	; (8004604 <xTaskIncrementTick+0x148>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3301      	adds	r3, #1
 80044d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044d8:	4a4a      	ldr	r2, [pc, #296]	; (8004604 <xTaskIncrementTick+0x148>)
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d11a      	bne.n	800451a <xTaskIncrementTick+0x5e>
		{
			taskSWITCH_DELAYED_LISTS();
 80044e4:	4b48      	ldr	r3, [pc, #288]	; (8004608 <xTaskIncrementTick+0x14c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d004      	beq.n	80044f8 <xTaskIncrementTick+0x3c>
 80044ee:	f640 11d9 	movw	r1, #2521	; 0x9d9
 80044f2:	4846      	ldr	r0, [pc, #280]	; (800460c <xTaskIncrementTick+0x150>)
 80044f4:	f7fe f8e9 	bl	80026ca <cmr_panic>
 80044f8:	4b43      	ldr	r3, [pc, #268]	; (8004608 <xTaskIncrementTick+0x14c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	4b44      	ldr	r3, [pc, #272]	; (8004610 <xTaskIncrementTick+0x154>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a41      	ldr	r2, [pc, #260]	; (8004608 <xTaskIncrementTick+0x14c>)
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	4a42      	ldr	r2, [pc, #264]	; (8004610 <xTaskIncrementTick+0x154>)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	4b41      	ldr	r3, [pc, #260]	; (8004614 <xTaskIncrementTick+0x158>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3301      	adds	r3, #1
 8004512:	4a40      	ldr	r2, [pc, #256]	; (8004614 <xTaskIncrementTick+0x158>)
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	f000 fa3b 	bl	8004990 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800451a:	4b3f      	ldr	r3, [pc, #252]	; (8004618 <xTaskIncrementTick+0x15c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	429a      	cmp	r2, r3
 8004522:	d34d      	bcc.n	80045c0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004524:	4b38      	ldr	r3, [pc, #224]	; (8004608 <xTaskIncrementTick+0x14c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <xTaskIncrementTick+0x76>
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <xTaskIncrementTick+0x78>
 8004532:	2300      	movs	r3, #0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d004      	beq.n	8004542 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004538:	4b37      	ldr	r3, [pc, #220]	; (8004618 <xTaskIncrementTick+0x15c>)
 800453a:	f04f 32ff 	mov.w	r2, #4294967295
 800453e:	601a      	str	r2, [r3, #0]
					break;
 8004540:	e03e      	b.n	80045c0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004542:	4b31      	ldr	r3, [pc, #196]	; (8004608 <xTaskIncrementTick+0x14c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	429a      	cmp	r2, r3
 8004558:	d203      	bcs.n	8004562 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800455a:	4a2f      	ldr	r2, [pc, #188]	; (8004618 <xTaskIncrementTick+0x15c>)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6013      	str	r3, [r2, #0]
						break;
 8004560:	e02e      	b.n	80045c0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	3304      	adds	r3, #4
 8004566:	4618      	mov	r0, r3
 8004568:	f7fe ffba 	bl	80034e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004570:	2b00      	cmp	r3, #0
 8004572:	d004      	beq.n	800457e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	3318      	adds	r3, #24
 8004578:	4618      	mov	r0, r3
 800457a:	f7fe ffb1 	bl	80034e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	2201      	movs	r2, #1
 8004584:	409a      	lsls	r2, r3
 8004586:	4b25      	ldr	r3, [pc, #148]	; (800461c <xTaskIncrementTick+0x160>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4313      	orrs	r3, r2
 800458c:	4a23      	ldr	r2, [pc, #140]	; (800461c <xTaskIncrementTick+0x160>)
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004594:	4613      	mov	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4a20      	ldr	r2, [pc, #128]	; (8004620 <xTaskIncrementTick+0x164>)
 800459e:	441a      	add	r2, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	3304      	adds	r3, #4
 80045a4:	4619      	mov	r1, r3
 80045a6:	4610      	mov	r0, r2
 80045a8:	f7fe ff3d 	bl	8003426 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b0:	4b1c      	ldr	r3, [pc, #112]	; (8004624 <xTaskIncrementTick+0x168>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d3b4      	bcc.n	8004524 <xTaskIncrementTick+0x68>
						{
							xSwitchRequired = pdTRUE;
 80045ba:	2301      	movs	r3, #1
 80045bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045be:	e7b1      	b.n	8004524 <xTaskIncrementTick+0x68>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045c0:	4b18      	ldr	r3, [pc, #96]	; (8004624 <xTaskIncrementTick+0x168>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c6:	4916      	ldr	r1, [pc, #88]	; (8004620 <xTaskIncrementTick+0x164>)
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d907      	bls.n	80045e8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80045d8:	2301      	movs	r3, #1
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	e004      	b.n	80045e8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80045de:	4b12      	ldr	r3, [pc, #72]	; (8004628 <xTaskIncrementTick+0x16c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3301      	adds	r3, #1
 80045e4:	4a10      	ldr	r2, [pc, #64]	; (8004628 <xTaskIncrementTick+0x16c>)
 80045e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80045e8:	4b10      	ldr	r3, [pc, #64]	; (800462c <xTaskIncrementTick+0x170>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80045f0:	2301      	movs	r3, #1
 80045f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80045f4:	697b      	ldr	r3, [r7, #20]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20001cbc 	.word	0x20001cbc
 8004604:	20001c98 	.word	0x20001c98
 8004608:	20001c64 	.word	0x20001c64
 800460c:	08009a90 	.word	0x08009a90
 8004610:	20001c68 	.word	0x20001c68
 8004614:	20001cac 	.word	0x20001cac
 8004618:	20001cb4 	.word	0x20001cb4
 800461c:	20001c9c 	.word	0x20001c9c
 8004620:	20001bb0 	.word	0x20001bb0
 8004624:	20001bac 	.word	0x20001bac
 8004628:	20001ca4 	.word	0x20001ca4
 800462c:	20001ca8 	.word	0x20001ca8

08004630 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004636:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <vTaskSwitchContext+0x94>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800463e:	4b22      	ldr	r3, [pc, #136]	; (80046c8 <vTaskSwitchContext+0x98>)
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004644:	e039      	b.n	80046ba <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 8004646:	4b20      	ldr	r3, [pc, #128]	; (80046c8 <vTaskSwitchContext+0x98>)
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800464c:	4b1f      	ldr	r3, [pc, #124]	; (80046cc <vTaskSwitchContext+0x9c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	fab3 f383 	clz	r3, r3
 8004658:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 800465a:	78fb      	ldrb	r3, [r7, #3]
 800465c:	f1c3 031f 	rsb	r3, r3, #31
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	491b      	ldr	r1, [pc, #108]	; (80046d0 <vTaskSwitchContext+0xa0>)
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	440b      	add	r3, r1
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d104      	bne.n	8004680 <vTaskSwitchContext+0x50>
 8004676:	f640 21f6 	movw	r1, #2806	; 0xaf6
 800467a:	4816      	ldr	r0, [pc, #88]	; (80046d4 <vTaskSwitchContext+0xa4>)
 800467c:	f7fe f825 	bl	80026ca <cmr_panic>
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4613      	mov	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4a11      	ldr	r2, [pc, #68]	; (80046d0 <vTaskSwitchContext+0xa0>)
 800468c:	4413      	add	r3, r2
 800468e:	60bb      	str	r3, [r7, #8]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	605a      	str	r2, [r3, #4]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	3308      	adds	r3, #8
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d104      	bne.n	80046b0 <vTaskSwitchContext+0x80>
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	605a      	str	r2, [r3, #4]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	4a08      	ldr	r2, [pc, #32]	; (80046d8 <vTaskSwitchContext+0xa8>)
 80046b8:	6013      	str	r3, [r2, #0]
}
 80046ba:	bf00      	nop
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20001cbc 	.word	0x20001cbc
 80046c8:	20001ca8 	.word	0x20001ca8
 80046cc:	20001c9c 	.word	0x20001c9c
 80046d0:	20001bb0 	.word	0x20001bb0
 80046d4:	08009af8 	.word	0x08009af8
 80046d8:	20001bac 	.word	0x20001bac

080046dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d104      	bne.n	80046f6 <vTaskPlaceOnEventList+0x1a>
 80046ec:	f640 3106 	movw	r1, #2822	; 0xb06
 80046f0:	4808      	ldr	r0, [pc, #32]	; (8004714 <vTaskPlaceOnEventList+0x38>)
 80046f2:	f7fd ffea 	bl	80026ca <cmr_panic>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046f6:	4b08      	ldr	r3, [pc, #32]	; (8004718 <vTaskPlaceOnEventList+0x3c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3318      	adds	r3, #24
 80046fc:	4619      	mov	r1, r3
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fe feb5 	bl	800346e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004704:	2101      	movs	r1, #1
 8004706:	6838      	ldr	r0, [r7, #0]
 8004708:	f000 fa10 	bl	8004b2c <prvAddCurrentTaskToDelayedList>
}
 800470c:	bf00      	nop
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	08009b7c 	.word	0x08009b7c
 8004718:	20001bac 	.word	0x20001bac

0800471c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d104      	bne.n	800473c <xTaskRemoveFromEventList+0x20>
 8004732:	f640 3161 	movw	r1, #2913	; 0xb61
 8004736:	4821      	ldr	r0, [pc, #132]	; (80047bc <xTaskRemoveFromEventList+0xa0>)
 8004738:	f7fd ffc7 	bl	80026ca <cmr_panic>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	3318      	adds	r3, #24
 8004740:	4618      	mov	r0, r3
 8004742:	f7fe fecd 	bl	80034e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004746:	4b1e      	ldr	r3, [pc, #120]	; (80047c0 <xTaskRemoveFromEventList+0xa4>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d11c      	bne.n	8004788 <xTaskRemoveFromEventList+0x6c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	3304      	adds	r3, #4
 8004752:	4618      	mov	r0, r3
 8004754:	f7fe fec4 	bl	80034e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	2201      	movs	r2, #1
 800475e:	409a      	lsls	r2, r3
 8004760:	4b18      	ldr	r3, [pc, #96]	; (80047c4 <xTaskRemoveFromEventList+0xa8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4313      	orrs	r3, r2
 8004766:	4a17      	ldr	r2, [pc, #92]	; (80047c4 <xTaskRemoveFromEventList+0xa8>)
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476e:	4613      	mov	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4a14      	ldr	r2, [pc, #80]	; (80047c8 <xTaskRemoveFromEventList+0xac>)
 8004778:	441a      	add	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	3304      	adds	r3, #4
 800477e:	4619      	mov	r1, r3
 8004780:	4610      	mov	r0, r2
 8004782:	f7fe fe50 	bl	8003426 <vListInsertEnd>
 8004786:	e005      	b.n	8004794 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	3318      	adds	r3, #24
 800478c:	4619      	mov	r1, r3
 800478e:	480f      	ldr	r0, [pc, #60]	; (80047cc <xTaskRemoveFromEventList+0xb0>)
 8004790:	f7fe fe49 	bl	8003426 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004798:	4b0d      	ldr	r3, [pc, #52]	; (80047d0 <xTaskRemoveFromEventList+0xb4>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	429a      	cmp	r2, r3
 80047a0:	d905      	bls.n	80047ae <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047a2:	2301      	movs	r3, #1
 80047a4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047a6:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <xTaskRemoveFromEventList+0xb8>)
 80047a8:	2201      	movs	r2, #1
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	e001      	b.n	80047b2 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80047ae:	2300      	movs	r3, #0
 80047b0:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80047b2:	68fb      	ldr	r3, [r7, #12]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	08009c1c 	.word	0x08009c1c
 80047c0:	20001cbc 	.word	0x20001cbc
 80047c4:	20001c9c 	.word	0x20001c9c
 80047c8:	20001bb0 	.word	0x20001bb0
 80047cc:	20001c6c 	.word	0x20001c6c
 80047d0:	20001bac 	.word	0x20001bac
 80047d4:	20001ca8 	.word	0x20001ca8

080047d8 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d104      	bne.n	80047f0 <vTaskSetTimeOutState+0x18>
 80047e6:	f640 31c1 	movw	r1, #3009	; 0xbc1
 80047ea:	4807      	ldr	r0, [pc, #28]	; (8004808 <vTaskSetTimeOutState+0x30>)
 80047ec:	f7fd ff6d 	bl	80026ca <cmr_panic>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047f0:	4b06      	ldr	r3, [pc, #24]	; (800480c <vTaskSetTimeOutState+0x34>)
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047f8:	4b05      	ldr	r3, [pc, #20]	; (8004810 <vTaskSetTimeOutState+0x38>)
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	605a      	str	r2, [r3, #4]
}
 8004800:	bf00      	nop
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	08009cc4 	.word	0x08009cc4
 800480c:	20001cac 	.word	0x20001cac
 8004810:	20001c98 	.word	0x20001c98

08004814 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d104      	bne.n	800482e <xTaskCheckForTimeOut+0x1a>
 8004824:	f640 31cb 	movw	r1, #3019	; 0xbcb
 8004828:	4822      	ldr	r0, [pc, #136]	; (80048b4 <xTaskCheckForTimeOut+0xa0>)
 800482a:	f7fd ff4e 	bl	80026ca <cmr_panic>
	configASSERT( pxTicksToWait );
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d104      	bne.n	800483e <xTaskCheckForTimeOut+0x2a>
 8004834:	f640 31cc 	movw	r1, #3020	; 0xbcc
 8004838:	481f      	ldr	r0, [pc, #124]	; (80048b8 <xTaskCheckForTimeOut+0xa4>)
 800483a:	f7fd ff46 	bl	80026ca <cmr_panic>

	taskENTER_CRITICAL();
 800483e:	f7fe ff79 	bl	8003734 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004842:	4b1e      	ldr	r3, [pc, #120]	; (80048bc <xTaskCheckForTimeOut+0xa8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004850:	d102      	bne.n	8004858 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	e026      	b.n	80048a6 <xTaskCheckForTimeOut+0x92>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	4b18      	ldr	r3, [pc, #96]	; (80048c0 <xTaskCheckForTimeOut+0xac>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d007      	beq.n	8004874 <xTaskCheckForTimeOut+0x60>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	d802      	bhi.n	8004874 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800486e:	2301      	movs	r3, #1
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	e018      	b.n	80048a6 <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	1ad2      	subs	r2, r2, r3
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d20e      	bcs.n	80048a2 <xTaskCheckForTimeOut+0x8e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6859      	ldr	r1, [r3, #4]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	1acb      	subs	r3, r1, r3
 8004890:	441a      	add	r2, r3
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff ff9e 	bl	80047d8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800489c:	2300      	movs	r3, #0
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	e001      	b.n	80048a6 <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
 80048a2:	2301      	movs	r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048a6:	f7fe ff6f 	bl	8003788 <vPortExitCritical>

	return xReturn;
 80048aa:	68fb      	ldr	r3, [r7, #12]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	08009cc4 	.word	0x08009cc4
 80048b8:	08009d0c 	.word	0x08009d0c
 80048bc:	20001c98 	.word	0x20001c98
 80048c0:	20001cac 	.word	0x20001cac

080048c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048c8:	4b03      	ldr	r3, [pc, #12]	; (80048d8 <vTaskMissedYield+0x14>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	601a      	str	r2, [r3, #0]
}
 80048ce:	bf00      	nop
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	20001ca8 	.word	0x20001ca8

080048dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048e4:	f000 f84c 	bl	8004980 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048e8:	4b06      	ldr	r3, [pc, #24]	; (8004904 <prvIdleTask+0x28>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d9f9      	bls.n	80048e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80048f0:	4b05      	ldr	r3, [pc, #20]	; (8004908 <prvIdleTask+0x2c>)
 80048f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004900:	e7f0      	b.n	80048e4 <prvIdleTask+0x8>
 8004902:	bf00      	nop
 8004904:	20001bb0 	.word	0x20001bb0
 8004908:	e000ed04 	.word	0xe000ed04

0800490c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004912:	2300      	movs	r3, #0
 8004914:	607b      	str	r3, [r7, #4]
 8004916:	e00c      	b.n	8004932 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	4613      	mov	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4a10      	ldr	r2, [pc, #64]	; (8004964 <prvInitialiseTaskLists+0x58>)
 8004924:	4413      	add	r3, r2
 8004926:	4618      	mov	r0, r3
 8004928:	f7fe fd50 	bl	80033cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3301      	adds	r3, #1
 8004930:	607b      	str	r3, [r7, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b06      	cmp	r3, #6
 8004936:	d9ef      	bls.n	8004918 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004938:	480b      	ldr	r0, [pc, #44]	; (8004968 <prvInitialiseTaskLists+0x5c>)
 800493a:	f7fe fd47 	bl	80033cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800493e:	480b      	ldr	r0, [pc, #44]	; (800496c <prvInitialiseTaskLists+0x60>)
 8004940:	f7fe fd44 	bl	80033cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004944:	480a      	ldr	r0, [pc, #40]	; (8004970 <prvInitialiseTaskLists+0x64>)
 8004946:	f7fe fd41 	bl	80033cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800494a:	480a      	ldr	r0, [pc, #40]	; (8004974 <prvInitialiseTaskLists+0x68>)
 800494c:	f7fe fd3e 	bl	80033cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004950:	4b09      	ldr	r3, [pc, #36]	; (8004978 <prvInitialiseTaskLists+0x6c>)
 8004952:	4a05      	ldr	r2, [pc, #20]	; (8004968 <prvInitialiseTaskLists+0x5c>)
 8004954:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004956:	4b09      	ldr	r3, [pc, #36]	; (800497c <prvInitialiseTaskLists+0x70>)
 8004958:	4a04      	ldr	r2, [pc, #16]	; (800496c <prvInitialiseTaskLists+0x60>)
 800495a:	601a      	str	r2, [r3, #0]
}
 800495c:	bf00      	nop
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	20001bb0 	.word	0x20001bb0
 8004968:	20001c3c 	.word	0x20001c3c
 800496c:	20001c50 	.word	0x20001c50
 8004970:	20001c6c 	.word	0x20001c6c
 8004974:	20001c80 	.word	0x20001c80
 8004978:	20001c64 	.word	0x20001c64
 800497c:	20001c68 	.word	0x20001c68

08004980 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
	...

08004990 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004996:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <prvResetNextTaskUnblockTime+0x44>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <prvResetNextTaskUnblockTime+0x14>
 80049a0:	2301      	movs	r3, #1
 80049a2:	e000      	b.n	80049a6 <prvResetNextTaskUnblockTime+0x16>
 80049a4:	2300      	movs	r3, #0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d004      	beq.n	80049b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80049aa:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <prvResetNextTaskUnblockTime+0x48>)
 80049ac:	f04f 32ff 	mov.w	r2, #4294967295
 80049b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80049b2:	e008      	b.n	80049c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80049b4:	4b07      	ldr	r3, [pc, #28]	; (80049d4 <prvResetNextTaskUnblockTime+0x44>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	4a05      	ldr	r2, [pc, #20]	; (80049d8 <prvResetNextTaskUnblockTime+0x48>)
 80049c4:	6013      	str	r3, [r2, #0]
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	20001c64 	.word	0x20001c64
 80049d8:	20001cb4 	.word	0x20001cb4

080049dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80049e2:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <xTaskGetSchedulerState+0x34>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d102      	bne.n	80049f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80049ea:	2301      	movs	r3, #1
 80049ec:	607b      	str	r3, [r7, #4]
 80049ee:	e008      	b.n	8004a02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049f0:	4b08      	ldr	r3, [pc, #32]	; (8004a14 <xTaskGetSchedulerState+0x38>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d102      	bne.n	80049fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80049f8:	2302      	movs	r3, #2
 80049fa:	607b      	str	r3, [r7, #4]
 80049fc:	e001      	b.n	8004a02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80049fe:	2300      	movs	r3, #0
 8004a00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a02:	687b      	ldr	r3, [r7, #4]
	}
 8004a04:	4618      	mov	r0, r3
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	20001ca0 	.word	0x20001ca0
 8004a14:	20001cbc 	.word	0x20001cbc

08004a18 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d062      	beq.n	8004af0 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2e:	4b32      	ldr	r3, [pc, #200]	; (8004af8 <vTaskPriorityInherit+0xe0>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d25b      	bcs.n	8004af0 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	db06      	blt.n	8004a4e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a40:	4b2d      	ldr	r3, [pc, #180]	; (8004af8 <vTaskPriorityInherit+0xe0>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	f1c3 0207 	rsb	r2, r3, #7
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6959      	ldr	r1, [r3, #20]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4a27      	ldr	r2, [pc, #156]	; (8004afc <vTaskPriorityInherit+0xe4>)
 8004a60:	4413      	add	r3, r2
 8004a62:	4299      	cmp	r1, r3
 8004a64:	d101      	bne.n	8004a6a <vTaskPriorityInherit+0x52>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <vTaskPriorityInherit+0x54>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d03a      	beq.n	8004ae6 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	3304      	adds	r3, #4
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fe fd33 	bl	80034e0 <uxListRemove>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d115      	bne.n	8004aac <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a84:	491d      	ldr	r1, [pc, #116]	; (8004afc <vTaskPriorityInherit+0xe4>)
 8004a86:	4613      	mov	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	440b      	add	r3, r1
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10a      	bne.n	8004aac <vTaskPriorityInherit+0x94>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	43da      	mvns	r2, r3
 8004aa2:	4b17      	ldr	r3, [pc, #92]	; (8004b00 <vTaskPriorityInherit+0xe8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	4a15      	ldr	r2, [pc, #84]	; (8004b00 <vTaskPriorityInherit+0xe8>)
 8004aaa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004aac:	4b12      	ldr	r3, [pc, #72]	; (8004af8 <vTaskPriorityInherit+0xe0>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aba:	2201      	movs	r2, #1
 8004abc:	409a      	lsls	r2, r3
 8004abe:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <vTaskPriorityInherit+0xe8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	4a0e      	ldr	r2, [pc, #56]	; (8004b00 <vTaskPriorityInherit+0xe8>)
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4a09      	ldr	r2, [pc, #36]	; (8004afc <vTaskPriorityInherit+0xe4>)
 8004ad6:	441a      	add	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	3304      	adds	r3, #4
 8004adc:	4619      	mov	r1, r3
 8004ade:	4610      	mov	r0, r2
 8004ae0:	f7fe fca1 	bl	8003426 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ae4:	e004      	b.n	8004af0 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ae6:	4b04      	ldr	r3, [pc, #16]	; (8004af8 <vTaskPriorityInherit+0xe0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8004af0:	bf00      	nop
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	20001bac 	.word	0x20001bac
 8004afc:	20001bb0 	.word	0x20001bb0
 8004b00:	20001c9c 	.word	0x20001c9c

08004b04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004b08:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d004      	beq.n	8004b1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004b10:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004b16:	3201      	adds	r2, #1
 8004b18:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 8004b1a:	4b03      	ldr	r3, [pc, #12]	; (8004b28 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
	}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	20001bac 	.word	0x20001bac

08004b2c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b36:	4b29      	ldr	r3, [pc, #164]	; (8004bdc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b3c:	4b28      	ldr	r3, [pc, #160]	; (8004be0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3304      	adds	r3, #4
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fe fccc 	bl	80034e0 <uxListRemove>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10b      	bne.n	8004b66 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004b4e:	4b24      	ldr	r3, [pc, #144]	; (8004be0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	2201      	movs	r2, #1
 8004b56:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5a:	43da      	mvns	r2, r3
 8004b5c:	4b21      	ldr	r3, [pc, #132]	; (8004be4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4013      	ands	r3, r2
 8004b62:	4a20      	ldr	r2, [pc, #128]	; (8004be4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b64:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6c:	d10a      	bne.n	8004b84 <prvAddCurrentTaskToDelayedList+0x58>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d007      	beq.n	8004b84 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b74:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	481a      	ldr	r0, [pc, #104]	; (8004be8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004b7e:	f7fe fc52 	bl	8003426 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b82:	e026      	b.n	8004bd2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4413      	add	r3, r2
 8004b8a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b8c:	4b14      	ldr	r3, [pc, #80]	; (8004be0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d209      	bcs.n	8004bb0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b9c:	4b13      	ldr	r3, [pc, #76]	; (8004bec <prvAddCurrentTaskToDelayedList+0xc0>)
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	4b0f      	ldr	r3, [pc, #60]	; (8004be0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4610      	mov	r0, r2
 8004baa:	f7fe fc60 	bl	800346e <vListInsert>
}
 8004bae:	e010      	b.n	8004bd2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bb0:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	4b0a      	ldr	r3, [pc, #40]	; (8004be0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3304      	adds	r3, #4
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	f7fe fc56 	bl	800346e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004bc2:	4b0c      	ldr	r3, [pc, #48]	; (8004bf4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d202      	bcs.n	8004bd2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004bcc:	4a09      	ldr	r2, [pc, #36]	; (8004bf4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	6013      	str	r3, [r2, #0]
}
 8004bd2:	bf00      	nop
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20001c98 	.word	0x20001c98
 8004be0:	20001bac 	.word	0x20001bac
 8004be4:	20001c9c 	.word	0x20001c9c
 8004be8:	20001c80 	.word	0x20001c80
 8004bec:	20001c68 	.word	0x20001c68
 8004bf0:	20001c64 	.word	0x20001c64
 8004bf4:	20001cb4 	.word	0x20001cb4

08004bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004bfc:	4a0e      	ldr	r2, [pc, #56]	; (8004c38 <HAL_Init+0x40>)
 8004bfe:	4b0e      	ldr	r3, [pc, #56]	; (8004c38 <HAL_Init+0x40>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c08:	4a0b      	ldr	r2, [pc, #44]	; (8004c38 <HAL_Init+0x40>)
 8004c0a:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <HAL_Init+0x40>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c14:	4a08      	ldr	r2, [pc, #32]	; (8004c38 <HAL_Init+0x40>)
 8004c16:	4b08      	ldr	r3, [pc, #32]	; (8004c38 <HAL_Init+0x40>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c20:	2003      	movs	r0, #3
 8004c22:	f001 fb05 	bl	8006230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c26:	200f      	movs	r0, #15
 8004c28:	f000 f810 	bl	8004c4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c2c:	f000 f806 	bl	8004c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40023c00 	.word	0x40023c00

08004c3c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
	...

08004c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c54:	4b12      	ldr	r3, [pc, #72]	; (8004ca0 <HAL_InitTick+0x54>)
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <HAL_InitTick+0x58>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f001 fb15 	bl	800629a <HAL_SYSTICK_Config>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e00e      	b.n	8004c98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b0f      	cmp	r3, #15
 8004c7e:	d80a      	bhi.n	8004c96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c80:	2200      	movs	r2, #0
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	f04f 30ff 	mov.w	r0, #4294967295
 8004c88:	f001 fadd 	bl	8006246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c8c:	4a06      	ldr	r2, [pc, #24]	; (8004ca8 <HAL_InitTick+0x5c>)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	e000      	b.n	8004c98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	200003c8 	.word	0x200003c8
 8004ca4:	200003d4 	.word	0x200003d4
 8004ca8:	200003d0 	.word	0x200003d0

08004cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cb0:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <HAL_IncTick+0x20>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <HAL_IncTick+0x24>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4413      	add	r3, r2
 8004cbc:	4a04      	ldr	r2, [pc, #16]	; (8004cd0 <HAL_IncTick+0x24>)
 8004cbe:	6013      	str	r3, [r2, #0]
}
 8004cc0:	bf00      	nop
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	200003d4 	.word	0x200003d4
 8004cd0:	20001cd8 	.word	0x20001cd8

08004cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8004cd8:	4b03      	ldr	r3, [pc, #12]	; (8004ce8 <HAL_GetTick+0x14>)
 8004cda:	681b      	ldr	r3, [r3, #0]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	20001cd8 	.word	0x20001cd8

08004cec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e033      	b.n	8004d6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d109      	bne.n	8004d1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f831 	bl	8004d72 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	f003 0310 	and.w	r3, r3, #16
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d118      	bne.n	8004d5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004d32:	f023 0302 	bic.w	r3, r3, #2
 8004d36:	f043 0202 	orr.w	r2, r3, #2
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fa8e 	bl	8005260 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f023 0303 	bic.w	r3, r3, #3
 8004d52:	f043 0201 	orr.w	r2, r3, #1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	641a      	str	r2, [r3, #64]	; 0x40
 8004d5a:	e001      	b.n	8004d60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
	...

08004d88 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <HAL_ADC_Start+0x1a>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e08a      	b.n	8004eb8 <HAL_ADC_Start+0x130>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d018      	beq.n	8004dea <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6812      	ldr	r2, [r2, #0]
 8004dc0:	6892      	ldr	r2, [r2, #8]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004dc8:	4b3e      	ldr	r3, [pc, #248]	; (8004ec4 <HAL_ADC_Start+0x13c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a3e      	ldr	r2, [pc, #248]	; (8004ec8 <HAL_ADC_Start+0x140>)
 8004dce:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd2:	0c9a      	lsrs	r2, r3, #18
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	4413      	add	r3, r2
 8004dda:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004ddc:	e002      	b.n	8004de4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	3b01      	subs	r3, #1
 8004de2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1f9      	bne.n	8004dde <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d15e      	bne.n	8004eb6 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d007      	beq.n	8004e2a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e36:	d106      	bne.n	8004e46 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3c:	f023 0206 	bic.w	r2, r3, #6
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	645a      	str	r2, [r3, #68]	; 0x44
 8004e44:	e002      	b.n	8004e4c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e54:	4b1d      	ldr	r3, [pc, #116]	; (8004ecc <HAL_ADC_Start+0x144>)
 8004e56:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004e60:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f003 031f 	and.w	r3, r3, #31
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10f      	bne.n	8004e8e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d11c      	bne.n	8004eb6 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	6892      	ldr	r2, [r2, #8]
 8004e86:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e8a:	609a      	str	r2, [r3, #8]
 8004e8c:	e013      	b.n	8004eb6 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a0f      	ldr	r2, [pc, #60]	; (8004ed0 <HAL_ADC_Start+0x148>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d10e      	bne.n	8004eb6 <HAL_ADC_Start+0x12e>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d107      	bne.n	8004eb6 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	6892      	ldr	r2, [r2, #8]
 8004eb0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004eb4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	200003c8 	.word	0x200003c8
 8004ec8:	431bde83 	.word	0x431bde83
 8004ecc:	40012300 	.word	0x40012300
 8004ed0:	40012000 	.word	0x40012000

08004ed4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef0:	d113      	bne.n	8004f1a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f00:	d10b      	bne.n	8004f1a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	f043 0220 	orr.w	r2, r3, #32
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e05c      	b.n	8004fd4 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004f1a:	f7ff fedb 	bl	8004cd4 <HAL_GetTick>
 8004f1e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004f20:	e01a      	b.n	8004f58 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f28:	d016      	beq.n	8004f58 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d007      	beq.n	8004f40 <HAL_ADC_PollForConversion+0x6c>
 8004f30:	f7ff fed0 	bl	8004cd4 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	1ad2      	subs	r2, r2, r3
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d90b      	bls.n	8004f58 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	f043 0204 	orr.w	r2, r3, #4
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e03d      	b.n	8004fd4 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d1dd      	bne.n	8004f22 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f06f 0212 	mvn.w	r2, #18
 8004f6e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d123      	bne.n	8004fd2 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d11f      	bne.n	8004fd2 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d006      	beq.n	8004fae <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d111      	bne.n	8004fd2 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d105      	bne.n	8004fd2 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f043 0201 	orr.w	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
	...

08004ff8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004ff8:	b490      	push	{r4, r7}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_ADC_ConfigChannel+0x1c>
 8005010:	2302      	movs	r3, #2
 8005012:	e115      	b.n	8005240 <HAL_ADC_ConfigChannel+0x248>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b09      	cmp	r3, #9
 8005022:	d926      	bls.n	8005072 <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68d9      	ldr	r1, [r3, #12]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	b29b      	uxth	r3, r3
 8005034:	4618      	mov	r0, r3
 8005036:	4603      	mov	r3, r0
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	4403      	add	r3, r0
 800503c:	3b1e      	subs	r3, #30
 800503e:	2007      	movs	r0, #7
 8005040:	fa00 f303 	lsl.w	r3, r0, r3
 8005044:	43db      	mvns	r3, r3
 8005046:	400b      	ands	r3, r1
 8005048:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68d9      	ldr	r1, [r3, #12]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	6898      	ldr	r0, [r3, #8]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	b29b      	uxth	r3, r3
 800505e:	461c      	mov	r4, r3
 8005060:	4623      	mov	r3, r4
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	4423      	add	r3, r4
 8005066:	3b1e      	subs	r3, #30
 8005068:	fa00 f303 	lsl.w	r3, r0, r3
 800506c:	430b      	orrs	r3, r1
 800506e:	60d3      	str	r3, [r2, #12]
 8005070:	e023      	b.n	80050ba <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6919      	ldr	r1, [r3, #16]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	b29b      	uxth	r3, r3
 8005082:	4618      	mov	r0, r3
 8005084:	4603      	mov	r3, r0
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	4403      	add	r3, r0
 800508a:	2007      	movs	r0, #7
 800508c:	fa00 f303 	lsl.w	r3, r0, r3
 8005090:	43db      	mvns	r3, r3
 8005092:	400b      	ands	r3, r1
 8005094:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6919      	ldr	r1, [r3, #16]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	6898      	ldr	r0, [r3, #8]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	461c      	mov	r4, r3
 80050ac:	4623      	mov	r3, r4
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	4423      	add	r3, r4
 80050b2:	fa00 f303 	lsl.w	r3, r0, r3
 80050b6:	430b      	orrs	r3, r1
 80050b8:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b06      	cmp	r3, #6
 80050c0:	d824      	bhi.n	800510c <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6819      	ldr	r1, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	3b05      	subs	r3, #5
 80050d8:	221f      	movs	r2, #31
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	43db      	mvns	r3, r3
 80050e0:	4003      	ands	r3, r0
 80050e2:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6819      	ldr	r1, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	461c      	mov	r4, r3
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	4613      	mov	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	3b05      	subs	r3, #5
 8005102:	fa04 f303 	lsl.w	r3, r4, r3
 8005106:	4303      	orrs	r3, r0
 8005108:	634b      	str	r3, [r1, #52]	; 0x34
 800510a:	e04c      	b.n	80051a6 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b0c      	cmp	r3, #12
 8005112:	d824      	bhi.n	800515e <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6819      	ldr	r1, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	4613      	mov	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	3b23      	subs	r3, #35	; 0x23
 800512a:	221f      	movs	r2, #31
 800512c:	fa02 f303 	lsl.w	r3, r2, r3
 8005130:	43db      	mvns	r3, r3
 8005132:	4003      	ands	r3, r0
 8005134:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6819      	ldr	r1, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	b29b      	uxth	r3, r3
 8005146:	461c      	mov	r4, r3
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	4613      	mov	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	3b23      	subs	r3, #35	; 0x23
 8005154:	fa04 f303 	lsl.w	r3, r4, r3
 8005158:	4303      	orrs	r3, r0
 800515a:	630b      	str	r3, [r1, #48]	; 0x30
 800515c:	e023      	b.n	80051a6 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6819      	ldr	r1, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	3b41      	subs	r3, #65	; 0x41
 8005174:	221f      	movs	r2, #31
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	43db      	mvns	r3, r3
 800517c:	4003      	ands	r3, r0
 800517e:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6819      	ldr	r1, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	b29b      	uxth	r3, r3
 8005190:	461c      	mov	r4, r3
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	3b41      	subs	r3, #65	; 0x41
 800519e:	fa04 f303 	lsl.w	r3, r4, r3
 80051a2:	4303      	orrs	r3, r0
 80051a4:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051a6:	4b29      	ldr	r3, [pc, #164]	; (800524c <HAL_ADC_ConfigChannel+0x254>)
 80051a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a28      	ldr	r2, [pc, #160]	; (8005250 <HAL_ADC_ConfigChannel+0x258>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d10f      	bne.n	80051d4 <HAL_ADC_ConfigChannel+0x1dc>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b12      	cmp	r3, #18
 80051ba:	d10b      	bne.n	80051d4 <HAL_ADC_ConfigChannel+0x1dc>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a1d      	ldr	r2, [pc, #116]	; (8005250 <HAL_ADC_ConfigChannel+0x258>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d12b      	bne.n	8005236 <HAL_ADC_ConfigChannel+0x23e>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a1c      	ldr	r2, [pc, #112]	; (8005254 <HAL_ADC_ConfigChannel+0x25c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d003      	beq.n	80051f0 <HAL_ADC_ConfigChannel+0x1f8>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b11      	cmp	r3, #17
 80051ee:	d122      	bne.n	8005236 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a11      	ldr	r2, [pc, #68]	; (8005254 <HAL_ADC_ConfigChannel+0x25c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d111      	bne.n	8005236 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005212:	4b11      	ldr	r3, [pc, #68]	; (8005258 <HAL_ADC_ConfigChannel+0x260>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a11      	ldr	r2, [pc, #68]	; (800525c <HAL_ADC_ConfigChannel+0x264>)
 8005218:	fba2 2303 	umull	r2, r3, r2, r3
 800521c:	0c9a      	lsrs	r2, r3, #18
 800521e:	4613      	mov	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005228:	e002      	b.n	8005230 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	3b01      	subs	r3, #1
 800522e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1f9      	bne.n	800522a <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bc90      	pop	{r4, r7}
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40012300 	.word	0x40012300
 8005250:	40012000 	.word	0x40012000
 8005254:	10000012 	.word	0x10000012
 8005258:	200003c8 	.word	0x200003c8
 800525c:	431bde83 	.word	0x431bde83

08005260 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005268:	4b79      	ldr	r3, [pc, #484]	; (8005450 <ADC_Init+0x1f0>)
 800526a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	431a      	orrs	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6812      	ldr	r2, [r2, #0]
 800528e:	6852      	ldr	r2, [r2, #4]
 8005290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005294:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6812      	ldr	r2, [r2, #0]
 800529e:	6851      	ldr	r1, [r2, #4]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	6912      	ldr	r2, [r2, #16]
 80052a4:	0212      	lsls	r2, r2, #8
 80052a6:	430a      	orrs	r2, r1
 80052a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6812      	ldr	r2, [r2, #0]
 80052b2:	6852      	ldr	r2, [r2, #4]
 80052b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80052b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6812      	ldr	r2, [r2, #0]
 80052c2:	6851      	ldr	r1, [r2, #4]
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6892      	ldr	r2, [r2, #8]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	6892      	ldr	r2, [r2, #8]
 80052d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6812      	ldr	r2, [r2, #0]
 80052e4:	6891      	ldr	r1, [r2, #8]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	68d2      	ldr	r2, [r2, #12]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f2:	4a58      	ldr	r2, [pc, #352]	; (8005454 <ADC_Init+0x1f4>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d022      	beq.n	800533e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6812      	ldr	r2, [r2, #0]
 8005300:	6892      	ldr	r2, [r2, #8]
 8005302:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005306:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6812      	ldr	r2, [r2, #0]
 8005310:	6891      	ldr	r1, [r2, #8]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005316:	430a      	orrs	r2, r1
 8005318:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6812      	ldr	r2, [r2, #0]
 8005322:	6892      	ldr	r2, [r2, #8]
 8005324:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005328:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6812      	ldr	r2, [r2, #0]
 8005332:	6891      	ldr	r1, [r2, #8]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005338:	430a      	orrs	r2, r1
 800533a:	609a      	str	r2, [r3, #8]
 800533c:	e00f      	b.n	800535e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	6812      	ldr	r2, [r2, #0]
 8005346:	6892      	ldr	r2, [r2, #8]
 8005348:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800534c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6812      	ldr	r2, [r2, #0]
 8005356:	6892      	ldr	r2, [r2, #8]
 8005358:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800535c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6812      	ldr	r2, [r2, #0]
 8005366:	6892      	ldr	r2, [r2, #8]
 8005368:	f022 0202 	bic.w	r2, r2, #2
 800536c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	6812      	ldr	r2, [r2, #0]
 8005376:	6891      	ldr	r1, [r2, #8]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	7e12      	ldrb	r2, [r2, #24]
 800537c:	0052      	lsls	r2, r2, #1
 800537e:	430a      	orrs	r2, r1
 8005380:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d01b      	beq.n	80053c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6812      	ldr	r2, [r2, #0]
 8005394:	6852      	ldr	r2, [r2, #4]
 8005396:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800539a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	6812      	ldr	r2, [r2, #0]
 80053a4:	6852      	ldr	r2, [r2, #4]
 80053a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80053aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	6812      	ldr	r2, [r2, #0]
 80053b4:	6851      	ldr	r1, [r2, #4]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053ba:	3a01      	subs	r2, #1
 80053bc:	0352      	lsls	r2, r2, #13
 80053be:	430a      	orrs	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]
 80053c2:	e007      	b.n	80053d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6812      	ldr	r2, [r2, #0]
 80053cc:	6852      	ldr	r2, [r2, #4]
 80053ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	6812      	ldr	r2, [r2, #0]
 80053dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80053de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80053e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	6812      	ldr	r2, [r2, #0]
 80053ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	69d2      	ldr	r2, [r2, #28]
 80053f2:	3a01      	subs	r2, #1
 80053f4:	0512      	lsls	r2, r2, #20
 80053f6:	430a      	orrs	r2, r1
 80053f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6812      	ldr	r2, [r2, #0]
 8005402:	6892      	ldr	r2, [r2, #8]
 8005404:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005408:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6812      	ldr	r2, [r2, #0]
 8005412:	6891      	ldr	r1, [r2, #8]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800541a:	0252      	lsls	r2, r2, #9
 800541c:	430a      	orrs	r2, r1
 800541e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6812      	ldr	r2, [r2, #0]
 8005428:	6892      	ldr	r2, [r2, #8]
 800542a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800542e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6812      	ldr	r2, [r2, #0]
 8005438:	6891      	ldr	r1, [r2, #8]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6952      	ldr	r2, [r2, #20]
 800543e:	0292      	lsls	r2, r2, #10
 8005440:	430a      	orrs	r2, r1
 8005442:	609a      	str	r2, [r3, #8]
}
 8005444:	bf00      	nop
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	40012300 	.word	0x40012300
 8005454:	0f000001 	.word	0x0f000001

08005458 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e0ec      	b.n	8005644 <HAL_CAN_Init+0x1ec>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d102      	bne.n	800547c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f8e8 	bl	800564c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6812      	ldr	r2, [r2, #0]
 8005484:	6812      	ldr	r2, [r2, #0]
 8005486:	f022 0202 	bic.w	r2, r2, #2
 800548a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800548c:	f7ff fc22 	bl	8004cd4 <HAL_GetTick>
 8005490:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005492:	e012      	b.n	80054ba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005494:	f7ff fc1e 	bl	8004cd4 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b0a      	cmp	r3, #10
 80054a0:	d90b      	bls.n	80054ba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2205      	movs	r2, #5
 80054b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e0c4      	b.n	8005644 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e5      	bne.n	8005494 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6812      	ldr	r2, [r2, #0]
 80054d0:	6812      	ldr	r2, [r2, #0]
 80054d2:	f042 0201 	orr.w	r2, r2, #1
 80054d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054d8:	f7ff fbfc 	bl	8004cd4 <HAL_GetTick>
 80054dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80054de:	e012      	b.n	8005506 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80054e0:	f7ff fbf8 	bl	8004cd4 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b0a      	cmp	r3, #10
 80054ec:	d90b      	bls.n	8005506 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2205      	movs	r2, #5
 80054fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e09e      	b.n	8005644 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0e5      	beq.n	80054e0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	7e1b      	ldrb	r3, [r3, #24]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d108      	bne.n	800552e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6812      	ldr	r2, [r2, #0]
 8005524:	6812      	ldr	r2, [r2, #0]
 8005526:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	e007      	b.n	800553e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6812      	ldr	r2, [r2, #0]
 8005536:	6812      	ldr	r2, [r2, #0]
 8005538:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800553c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	7e5b      	ldrb	r3, [r3, #25]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d108      	bne.n	8005558 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6812      	ldr	r2, [r2, #0]
 800554e:	6812      	ldr	r2, [r2, #0]
 8005550:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	e007      	b.n	8005568 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6812      	ldr	r2, [r2, #0]
 8005560:	6812      	ldr	r2, [r2, #0]
 8005562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005566:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	7e9b      	ldrb	r3, [r3, #26]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d108      	bne.n	8005582 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6812      	ldr	r2, [r2, #0]
 8005578:	6812      	ldr	r2, [r2, #0]
 800557a:	f042 0220 	orr.w	r2, r2, #32
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	e007      	b.n	8005592 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	6812      	ldr	r2, [r2, #0]
 800558a:	6812      	ldr	r2, [r2, #0]
 800558c:	f022 0220 	bic.w	r2, r2, #32
 8005590:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	7edb      	ldrb	r3, [r3, #27]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d108      	bne.n	80055ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	6812      	ldr	r2, [r2, #0]
 80055a2:	6812      	ldr	r2, [r2, #0]
 80055a4:	f022 0210 	bic.w	r2, r2, #16
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	e007      	b.n	80055bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6812      	ldr	r2, [r2, #0]
 80055b4:	6812      	ldr	r2, [r2, #0]
 80055b6:	f042 0210 	orr.w	r2, r2, #16
 80055ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	7f1b      	ldrb	r3, [r3, #28]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d108      	bne.n	80055d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6812      	ldr	r2, [r2, #0]
 80055cc:	6812      	ldr	r2, [r2, #0]
 80055ce:	f042 0208 	orr.w	r2, r2, #8
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	e007      	b.n	80055e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6812      	ldr	r2, [r2, #0]
 80055de:	6812      	ldr	r2, [r2, #0]
 80055e0:	f022 0208 	bic.w	r2, r2, #8
 80055e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	7f5b      	ldrb	r3, [r3, #29]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d108      	bne.n	8005600 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6812      	ldr	r2, [r2, #0]
 80055f6:	6812      	ldr	r2, [r2, #0]
 80055f8:	f042 0204 	orr.w	r2, r2, #4
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	e007      	b.n	8005610 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	6812      	ldr	r2, [r2, #0]
 800560a:	f022 0204 	bic.w	r2, r2, #4
 800560e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6891      	ldr	r1, [r2, #8]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	68d2      	ldr	r2, [r2, #12]
 800561c:	4311      	orrs	r1, r2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6912      	ldr	r2, [r2, #16]
 8005622:	4311      	orrs	r1, r2
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6952      	ldr	r2, [r2, #20]
 8005628:	4311      	orrs	r1, r2
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	6852      	ldr	r2, [r2, #4]
 800562e:	3a01      	subs	r2, #1
 8005630:	430a      	orrs	r2, r1
 8005632:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_CAN_MspInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_MspInit could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005676:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005678:	7cfb      	ldrb	r3, [r7, #19]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d003      	beq.n	8005686 <HAL_CAN_ConfigFilter+0x26>
 800567e:	7cfb      	ldrb	r3, [r7, #19]
 8005680:	2b02      	cmp	r3, #2
 8005682:	f040 80c7 	bne.w	8005814 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a69      	ldr	r2, [pc, #420]	; (8005830 <HAL_CAN_ConfigFilter+0x1d0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d001      	beq.n	8005694 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8005690:	4b68      	ldr	r3, [pc, #416]	; (8005834 <HAL_CAN_ConfigFilter+0x1d4>)
 8005692:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800569a:	f043 0201 	orr.w	r2, r3, #1
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	4a63      	ldr	r2, [pc, #396]	; (8005834 <HAL_CAN_ConfigFilter+0x1d4>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d111      	bne.n	80056d0 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80056b2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	021b      	lsls	r3, r3, #8
 80056c8:	431a      	orrs	r2, r3
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	f003 031f 	and.w	r3, r3, #31
 80056d8:	2201      	movs	r2, #1
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	43db      	mvns	r3, r3
 80056ea:	401a      	ands	r2, r3
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d123      	bne.n	8005742 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	43db      	mvns	r3, r3
 8005704:	401a      	ands	r2, r3
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800571c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	3248      	adds	r2, #72	; 0x48
 8005722:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	6892      	ldr	r2, [r2, #8]
 800572e:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	6812      	ldr	r2, [r2, #0]
 8005734:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005736:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005738:	6979      	ldr	r1, [r7, #20]
 800573a:	3348      	adds	r3, #72	; 0x48
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	440b      	add	r3, r1
 8005740:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d122      	bne.n	8005790 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	431a      	orrs	r2, r3
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800576a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	3248      	adds	r2, #72	; 0x48
 8005770:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	6892      	ldr	r2, [r2, #8]
 800577c:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	68d2      	ldr	r2, [r2, #12]
 8005782:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005784:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005786:	6979      	ldr	r1, [r7, #20]
 8005788:	3348      	adds	r3, #72	; 0x48
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	440b      	add	r3, r1
 800578e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d109      	bne.n	80057ac <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	43db      	mvns	r3, r3
 80057a2:	401a      	ands	r2, r3
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80057aa:	e007      	b.n	80057bc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	431a      	orrs	r2, r3
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d109      	bne.n	80057d8 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	43db      	mvns	r3, r3
 80057ce:	401a      	ands	r2, r3
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80057d6:	e007      	b.n	80057e8 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	431a      	orrs	r2, r3
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d107      	bne.n	8005800 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	431a      	orrs	r2, r3
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005806:	f023 0201 	bic.w	r2, r3, #1
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005810:	2300      	movs	r3, #0
 8005812:	e006      	b.n	8005822 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
  }
}
 8005822:	4618      	mov	r0, r3
 8005824:	371c      	adds	r7, #28
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	40006c00 	.word	0x40006c00
 8005834:	40006400 	.word	0x40006400

08005838 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b01      	cmp	r3, #1
 800584a:	d12e      	bne.n	80058aa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6812      	ldr	r2, [r2, #0]
 800585c:	6812      	ldr	r2, [r2, #0]
 800585e:	f022 0201 	bic.w	r2, r2, #1
 8005862:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005864:	f7ff fa36 	bl	8004cd4 <HAL_GetTick>
 8005868:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800586a:	e012      	b.n	8005892 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800586c:	f7ff fa32 	bl	8004cd4 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b0a      	cmp	r3, #10
 8005878:	d90b      	bls.n	8005892 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2205      	movs	r2, #5
 800588a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e012      	b.n	80058b8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e5      	bne.n	800586c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	e006      	b.n	80058b8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
  }
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b089      	sub	sp, #36	; 0x24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
 80058cc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058d4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80058de:	7ffb      	ldrb	r3, [r7, #31]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d003      	beq.n	80058ec <HAL_CAN_AddTxMessage+0x2c>
 80058e4:	7ffb      	ldrb	r3, [r7, #31]
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	f040 80b4 	bne.w	8005a54 <HAL_CAN_AddTxMessage+0x194>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10a      	bne.n	800590c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d105      	bne.n	800590c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 809c 	beq.w	8005a44 <HAL_CAN_AddTxMessage+0x184>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	0e1b      	lsrs	r3, r3, #24
 8005910:	f003 0303 	and.w	r3, r3, #3
 8005914:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	2b02      	cmp	r3, #2
 800591a:	d907      	bls.n	800592c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005920:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e09a      	b.n	8005a62 <HAL_CAN_AddTxMessage+0x1a2>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800592c:	2201      	movs	r2, #1
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	409a      	lsls	r2, r3
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10d      	bne.n	800595a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6819      	ldr	r1, [r3, #0]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800594c:	431a      	orrs	r2, r3
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	3318      	adds	r3, #24
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	440b      	add	r3, r1
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	e00f      	b.n	800597a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6819      	ldr	r1, [r3, #0]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005968:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	68db      	ldr	r3, [r3, #12]
                                                           pHeader->IDE |
 800596e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	3318      	adds	r3, #24
 8005974:	011b      	lsls	r3, r3, #4
 8005976:	440b      	add	r3, r1
 8005978:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6819      	ldr	r1, [r3, #0]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	691a      	ldr	r2, [r3, #16]
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	3318      	adds	r3, #24
 8005986:	011b      	lsls	r3, r3, #4
 8005988:	440b      	add	r3, r1
 800598a:	3304      	adds	r3, #4
 800598c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	7d1b      	ldrb	r3, [r3, #20]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d111      	bne.n	80059ba <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6819      	ldr	r1, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	3318      	adds	r3, #24
 80059a2:	011b      	lsls	r3, r3, #4
 80059a4:	4413      	add	r3, r2
 80059a6:	3304      	adds	r3, #4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	3318      	adds	r3, #24
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	440b      	add	r3, r1
 80059b6:	3304      	adds	r3, #4
 80059b8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6819      	ldr	r1, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	3307      	adds	r3, #7
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	061a      	lsls	r2, r3, #24
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	3306      	adds	r3, #6
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	041b      	lsls	r3, r3, #16
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3305      	adds	r3, #5
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	4313      	orrs	r3, r2
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	3204      	adds	r2, #4
 80059de:	7812      	ldrb	r2, [r2, #0]
 80059e0:	431a      	orrs	r2, r3
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	011b      	lsls	r3, r3, #4
 80059e6:	440b      	add	r3, r1
 80059e8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80059ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6819      	ldr	r1, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	3303      	adds	r3, #3
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	061a      	lsls	r2, r3, #24
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	3302      	adds	r3, #2
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	041b      	lsls	r3, r3, #16
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	3301      	adds	r3, #1
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	021b      	lsls	r3, r3, #8
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	7812      	ldrb	r2, [r2, #0]
 8005a12:	431a      	orrs	r2, r3
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	440b      	add	r3, r1
 8005a1a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005a1e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6819      	ldr	r1, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	3318      	adds	r3, #24
 8005a2c:	011b      	lsls	r3, r3, #4
 8005a2e:	4413      	add	r3, r2
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f043 0201 	orr.w	r2, r3, #1
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	3318      	adds	r3, #24
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	440b      	add	r3, r1
 8005a3e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	e00e      	b.n	8005a62 <HAL_CAN_AddTxMessage+0x1a2>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e006      	b.n	8005a62 <HAL_CAN_AddTxMessage+0x1a2>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
  }
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3724      	adds	r7, #36	; 0x24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b087      	sub	sp, #28
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
 8005a7a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a82:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005a84:	7dfb      	ldrb	r3, [r7, #23]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d003      	beq.n	8005a92 <HAL_CAN_GetRxMessage+0x24>
 8005a8a:	7dfb      	ldrb	r3, [r7, #23]
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	f040 80f4 	bne.w	8005c7a <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10e      	bne.n	8005ab6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f003 0303 	and.w	r3, r3, #3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d116      	bne.n	8005ad4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aaa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e0e8      	b.n	8005c88 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	f003 0303 	and.w	r3, r3, #3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d107      	bne.n	8005ad4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e0d9      	b.n	8005c88 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	331b      	adds	r3, #27
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	4413      	add	r3, r2
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0204 	and.w	r2, r3, #4
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10c      	bne.n	8005b0c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	331b      	adds	r3, #27
 8005afa:	011b      	lsls	r3, r3, #4
 8005afc:	4413      	add	r3, r2
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	0d5b      	lsrs	r3, r3, #21
 8005b02:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	e00b      	b.n	8005b24 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	331b      	adds	r3, #27
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	4413      	add	r3, r2
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	08db      	lsrs	r3, r3, #3
 8005b1c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	331b      	adds	r3, #27
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	4413      	add	r3, r2
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	085b      	lsrs	r3, r3, #1
 8005b34:	f003 0201 	and.w	r2, r3, #1
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	331b      	adds	r3, #27
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	4413      	add	r3, r2
 8005b48:	3304      	adds	r3, #4
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 020f 	and.w	r2, r3, #15
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	331b      	adds	r3, #27
 8005b5c:	011b      	lsls	r3, r3, #4
 8005b5e:	4413      	add	r3, r2
 8005b60:	3304      	adds	r3, #4
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	0a1b      	lsrs	r3, r3, #8
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	331b      	adds	r3, #27
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	4413      	add	r3, r2
 8005b78:	3304      	adds	r3, #4
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	0c1b      	lsrs	r3, r3, #16
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	011b      	lsls	r3, r3, #4
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	6811      	ldr	r1, [r2, #0]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	0112      	lsls	r2, r2, #4
 8005ba6:	440a      	add	r2, r1
 8005ba8:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8005bac:	6812      	ldr	r2, [r2, #0]
 8005bae:	0a12      	lsrs	r2, r2, #8
 8005bb0:	b2d2      	uxtb	r2, r2
 8005bb2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	3302      	adds	r3, #2
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	6811      	ldr	r1, [r2, #0]
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	0112      	lsls	r2, r2, #4
 8005bc0:	440a      	add	r2, r1
 8005bc2:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8005bc6:	6812      	ldr	r2, [r2, #0]
 8005bc8:	0c12      	lsrs	r2, r2, #16
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	3303      	adds	r3, #3
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	6811      	ldr	r1, [r2, #0]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	0112      	lsls	r2, r2, #4
 8005bda:	440a      	add	r2, r1
 8005bdc:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8005be0:	6812      	ldr	r2, [r2, #0]
 8005be2:	0e12      	lsrs	r2, r2, #24
 8005be4:	b2d2      	uxtb	r2, r2
 8005be6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	3304      	adds	r3, #4
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	6811      	ldr	r1, [r2, #0]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	0112      	lsls	r2, r2, #4
 8005bf4:	440a      	add	r2, r1
 8005bf6:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8005bfa:	6812      	ldr	r2, [r2, #0]
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	3305      	adds	r3, #5
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	6811      	ldr	r1, [r2, #0]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	0112      	lsls	r2, r2, #4
 8005c0c:	440a      	add	r2, r1
 8005c0e:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8005c12:	6812      	ldr	r2, [r2, #0]
 8005c14:	0a12      	lsrs	r2, r2, #8
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	3306      	adds	r3, #6
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	6811      	ldr	r1, [r2, #0]
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	0112      	lsls	r2, r2, #4
 8005c26:	440a      	add	r2, r1
 8005c28:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8005c2c:	6812      	ldr	r2, [r2, #0]
 8005c2e:	0c12      	lsrs	r2, r2, #16
 8005c30:	b2d2      	uxtb	r2, r2
 8005c32:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	3307      	adds	r3, #7
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	6811      	ldr	r1, [r2, #0]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	0112      	lsls	r2, r2, #4
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8005c46:	6812      	ldr	r2, [r2, #0]
 8005c48:	0e12      	lsrs	r2, r2, #24
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d108      	bne.n	8005c66 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	6812      	ldr	r2, [r2, #0]
 8005c5c:	68d2      	ldr	r2, [r2, #12]
 8005c5e:	f042 0220 	orr.w	r2, r2, #32
 8005c62:	60da      	str	r2, [r3, #12]
 8005c64:	e007      	b.n	8005c76 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	6812      	ldr	r2, [r2, #0]
 8005c6e:	6912      	ldr	r2, [r2, #16]
 8005c70:	f042 0220 	orr.w	r2, r2, #32
 8005c74:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	e006      	b.n	8005c88 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
  }
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	371c      	adds	r7, #28
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ca4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d002      	beq.n	8005cb2 <HAL_CAN_ActivateNotification+0x1e>
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d109      	bne.n	8005cc6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6812      	ldr	r2, [r2, #0]
 8005cba:	6951      	ldr	r1, [r2, #20]
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e006      	b.n	8005cd4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
  }
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b08a      	sub	sp, #40	; 0x28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d07c      	beq.n	8005e20 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d023      	beq.n	8005d78 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2201      	movs	r2, #1
 8005d36:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7fb ffd8 	bl	8001cf8 <HAL_CAN_TxMailbox0CompleteCallback>
 8005d48:	e016      	b.n	8005d78 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d004      	beq.n	8005d5e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d5c:	e00c      	b.n	8005d78 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	f003 0308 	and.w	r3, r3, #8
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d004      	beq.n	8005d72 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d70:	e002      	b.n	8005d78 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7fb ffcc 	bl	8001d10 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d024      	beq.n	8005dcc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d8a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7fb ffc6 	bl	8001d28 <HAL_CAN_TxMailbox1CompleteCallback>
 8005d9c:	e016      	b.n	8005dcc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d004      	beq.n	8005db2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005dae:	627b      	str	r3, [r7, #36]	; 0x24
 8005db0:	e00c      	b.n	8005dcc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d004      	beq.n	8005dc6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc4:	e002      	b.n	8005dcc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7fb ffba 	bl	8001d40 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d024      	beq.n	8005e20 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005dde:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fb ffb4 	bl	8001d58 <HAL_CAN_TxMailbox2CompleteCallback>
 8005df0:	e016      	b.n	8005e20 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d004      	beq.n	8005e06 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e02:	627b      	str	r3, [r7, #36]	; 0x24
 8005e04:	e00c      	b.n	8005e20 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d004      	beq.n	8005e1a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24
 8005e18:	e002      	b.n	8005e20 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7fb ffa8 	bl	8001d70 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005e20:	6a3b      	ldr	r3, [r7, #32]
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00c      	beq.n	8005e44 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f003 0310 	and.w	r3, r3, #16
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d007      	beq.n	8005e44 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e3a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2210      	movs	r2, #16
 8005e42:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	f003 0304 	and.w	r3, r3, #4
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00b      	beq.n	8005e66 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d006      	beq.n	8005e66 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2208      	movs	r2, #8
 8005e5e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f8ee 	bl	8006042 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d009      	beq.n	8005e84 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d002      	beq.n	8005e84 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7fc f87b 	bl	8001f7a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00c      	beq.n	8005ea8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f003 0310 	and.w	r3, r3, #16
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d007      	beq.n	8005ea8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e9e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2210      	movs	r2, #16
 8005ea6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	f003 0320 	and.w	r3, r3, #32
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00b      	beq.n	8005eca <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f003 0308 	and.w	r3, r3, #8
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d006      	beq.n	8005eca <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2208      	movs	r2, #8
 8005ec2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f8c6 	bl	8006056 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	f003 0310 	and.w	r3, r3, #16
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d009      	beq.n	8005ee8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d002      	beq.n	8005ee8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7fc f855 	bl	8001f92 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00b      	beq.n	8005f0a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	f003 0310 	and.w	r3, r3, #16
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d006      	beq.n	8005f0a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2210      	movs	r2, #16
 8005f02:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f8b0 	bl	800606a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00b      	beq.n	8005f2c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	f003 0308 	and.w	r3, r3, #8
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d006      	beq.n	8005f2c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2208      	movs	r2, #8
 8005f24:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f8a9 	bl	800607e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d075      	beq.n	8006022 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d06c      	beq.n	800601a <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d008      	beq.n	8005f5c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	f043 0301 	orr.w	r3, r3, #1
 8005f5a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d008      	beq.n	8005f78 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	f043 0302 	orr.w	r3, r3, #2
 8005f76:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d008      	beq.n	8005f94 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	f043 0304 	orr.w	r3, r3, #4
 8005f92:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d03d      	beq.n	800601a <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d038      	beq.n	800601a <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fae:	2b30      	cmp	r3, #48	; 0x30
 8005fb0:	d017      	beq.n	8005fe2 <HAL_CAN_IRQHandler+0x302>
 8005fb2:	2b30      	cmp	r3, #48	; 0x30
 8005fb4:	d804      	bhi.n	8005fc0 <HAL_CAN_IRQHandler+0x2e0>
 8005fb6:	2b10      	cmp	r3, #16
 8005fb8:	d009      	beq.n	8005fce <HAL_CAN_IRQHandler+0x2ee>
 8005fba:	2b20      	cmp	r3, #32
 8005fbc:	d00c      	beq.n	8005fd8 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005fbe:	e024      	b.n	800600a <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8005fc0:	2b50      	cmp	r3, #80	; 0x50
 8005fc2:	d018      	beq.n	8005ff6 <HAL_CAN_IRQHandler+0x316>
 8005fc4:	2b60      	cmp	r3, #96	; 0x60
 8005fc6:	d01b      	beq.n	8006000 <HAL_CAN_IRQHandler+0x320>
 8005fc8:	2b40      	cmp	r3, #64	; 0x40
 8005fca:	d00f      	beq.n	8005fec <HAL_CAN_IRQHandler+0x30c>
            break;
 8005fcc:	e01d      	b.n	800600a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	f043 0308 	orr.w	r3, r3, #8
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005fd6:	e018      	b.n	800600a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	f043 0310 	orr.w	r3, r3, #16
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005fe0:	e013      	b.n	800600a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	f043 0320 	orr.w	r3, r3, #32
 8005fe8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005fea:	e00e      	b.n	800600a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ff2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ff4:	e009      	b.n	800600a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ffc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ffe:	e004      	b.n	800600a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006006:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006008:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	6812      	ldr	r2, [r2, #0]
 8006012:	6992      	ldr	r2, [r2, #24]
 8006014:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006018:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2204      	movs	r2, #4
 8006020:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	2b00      	cmp	r3, #0
 8006026:	d008      	beq.n	800603a <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	431a      	orrs	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7fb fea7 	bl	8001d88 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800603a:	bf00      	nop
 800603c:	3728      	adds	r7, #40	; 0x28
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800604a:	bf00      	nop
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800605e:	bf00      	nop
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800606a:	b480      	push	{r7}
 800606c:	b083      	sub	sp, #12
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006072:	bf00      	nop
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
	...

08006094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f003 0307 	and.w	r3, r3, #7
 80060a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060a4:	4b0c      	ldr	r3, [pc, #48]	; (80060d8 <__NVIC_SetPriorityGrouping+0x44>)
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80060b0:	4013      	ands	r3, r2
 80060b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80060c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060c6:	4a04      	ldr	r2, [pc, #16]	; (80060d8 <__NVIC_SetPriorityGrouping+0x44>)
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	60d3      	str	r3, [r2, #12]
}
 80060cc:	bf00      	nop
 80060ce:	3714      	adds	r7, #20
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	e000ed00 	.word	0xe000ed00

080060dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060dc:	b480      	push	{r7}
 80060de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060e0:	4b04      	ldr	r3, [pc, #16]	; (80060f4 <__NVIC_GetPriorityGrouping+0x18>)
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	0a1b      	lsrs	r3, r3, #8
 80060e6:	f003 0307 	and.w	r3, r3, #7
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	e000ed00 	.word	0xe000ed00

080060f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	4603      	mov	r3, r0
 8006100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006106:	2b00      	cmp	r3, #0
 8006108:	db0b      	blt.n	8006122 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800610a:	4909      	ldr	r1, [pc, #36]	; (8006130 <__NVIC_EnableIRQ+0x38>)
 800610c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006110:	095b      	lsrs	r3, r3, #5
 8006112:	79fa      	ldrb	r2, [r7, #7]
 8006114:	f002 021f 	and.w	r2, r2, #31
 8006118:	2001      	movs	r0, #1
 800611a:	fa00 f202 	lsl.w	r2, r0, r2
 800611e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	e000e100 	.word	0xe000e100

08006134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	4603      	mov	r3, r0
 800613c:	6039      	str	r1, [r7, #0]
 800613e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006144:	2b00      	cmp	r3, #0
 8006146:	db0a      	blt.n	800615e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006148:	490d      	ldr	r1, [pc, #52]	; (8006180 <__NVIC_SetPriority+0x4c>)
 800614a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	0112      	lsls	r2, r2, #4
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	440b      	add	r3, r1
 8006158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800615c:	e00a      	b.n	8006174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800615e:	4909      	ldr	r1, [pc, #36]	; (8006184 <__NVIC_SetPriority+0x50>)
 8006160:	79fb      	ldrb	r3, [r7, #7]
 8006162:	f003 030f 	and.w	r3, r3, #15
 8006166:	3b04      	subs	r3, #4
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	b2d2      	uxtb	r2, r2
 800616c:	0112      	lsls	r2, r2, #4
 800616e:	b2d2      	uxtb	r2, r2
 8006170:	440b      	add	r3, r1
 8006172:	761a      	strb	r2, [r3, #24]
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	e000e100 	.word	0xe000e100
 8006184:	e000ed00 	.word	0xe000ed00

08006188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006188:	b480      	push	{r7}
 800618a:	b089      	sub	sp, #36	; 0x24
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f003 0307 	and.w	r3, r3, #7
 800619a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	f1c3 0307 	rsb	r3, r3, #7
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	bf28      	it	cs
 80061a6:	2304      	movcs	r3, #4
 80061a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	3304      	adds	r3, #4
 80061ae:	2b06      	cmp	r3, #6
 80061b0:	d902      	bls.n	80061b8 <NVIC_EncodePriority+0x30>
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	3b03      	subs	r3, #3
 80061b6:	e000      	b.n	80061ba <NVIC_EncodePriority+0x32>
 80061b8:	2300      	movs	r3, #0
 80061ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061bc:	2201      	movs	r2, #1
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	fa02 f303 	lsl.w	r3, r2, r3
 80061c4:	1e5a      	subs	r2, r3, #1
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	401a      	ands	r2, r3
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061ce:	2101      	movs	r1, #1
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	fa01 f303 	lsl.w	r3, r1, r3
 80061d6:	1e59      	subs	r1, r3, #1
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061dc:	4313      	orrs	r3, r2
         );
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3724      	adds	r7, #36	; 0x24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
	...

080061ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	3b01      	subs	r3, #1
 80061f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061fc:	d301      	bcc.n	8006202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061fe:	2301      	movs	r3, #1
 8006200:	e00f      	b.n	8006222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006202:	4a0a      	ldr	r2, [pc, #40]	; (800622c <SysTick_Config+0x40>)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	3b01      	subs	r3, #1
 8006208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800620a:	210f      	movs	r1, #15
 800620c:	f04f 30ff 	mov.w	r0, #4294967295
 8006210:	f7ff ff90 	bl	8006134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006214:	4b05      	ldr	r3, [pc, #20]	; (800622c <SysTick_Config+0x40>)
 8006216:	2200      	movs	r2, #0
 8006218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800621a:	4b04      	ldr	r3, [pc, #16]	; (800622c <SysTick_Config+0x40>)
 800621c:	2207      	movs	r2, #7
 800621e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	e000e010 	.word	0xe000e010

08006230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff ff2b 	bl	8006094 <__NVIC_SetPriorityGrouping>
}
 800623e:	bf00      	nop
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006246:	b580      	push	{r7, lr}
 8006248:	b086      	sub	sp, #24
 800624a:	af00      	add	r7, sp, #0
 800624c:	4603      	mov	r3, r0
 800624e:	60b9      	str	r1, [r7, #8]
 8006250:	607a      	str	r2, [r7, #4]
 8006252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006254:	2300      	movs	r3, #0
 8006256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006258:	f7ff ff40 	bl	80060dc <__NVIC_GetPriorityGrouping>
 800625c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	68b9      	ldr	r1, [r7, #8]
 8006262:	6978      	ldr	r0, [r7, #20]
 8006264:	f7ff ff90 	bl	8006188 <NVIC_EncodePriority>
 8006268:	4602      	mov	r2, r0
 800626a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800626e:	4611      	mov	r1, r2
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff ff5f 	bl	8006134 <__NVIC_SetPriority>
}
 8006276:	bf00      	nop
 8006278:	3718      	adds	r7, #24
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b082      	sub	sp, #8
 8006282:	af00      	add	r7, sp, #0
 8006284:	4603      	mov	r3, r0
 8006286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800628c:	4618      	mov	r0, r3
 800628e:	f7ff ff33 	bl	80060f8 <__NVIC_EnableIRQ>
}
 8006292:	bf00      	nop
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b082      	sub	sp, #8
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7ff ffa2 	bl	80061ec <SysTick_Config>
 80062a8:	4603      	mov	r3, r0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
	...

080062b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80062bc:	2300      	movs	r3, #0
 80062be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80062c0:	4b92      	ldr	r3, [pc, #584]	; (800650c <HAL_DMA_IRQHandler+0x258>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a92      	ldr	r2, [pc, #584]	; (8006510 <HAL_DMA_IRQHandler+0x25c>)
 80062c6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ca:	0a9b      	lsrs	r3, r3, #10
 80062cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062de:	2208      	movs	r2, #8
 80062e0:	409a      	lsls	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4013      	ands	r3, r2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d01a      	beq.n	8006320 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d013      	beq.n	8006320 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	6812      	ldr	r2, [r2, #0]
 8006300:	6812      	ldr	r2, [r2, #0]
 8006302:	f022 0204 	bic.w	r2, r2, #4
 8006306:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800630c:	2208      	movs	r2, #8
 800630e:	409a      	lsls	r2, r3
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006318:	f043 0201 	orr.w	r2, r3, #1
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006324:	2201      	movs	r2, #1
 8006326:	409a      	lsls	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4013      	ands	r3, r2
 800632c:	2b00      	cmp	r3, #0
 800632e:	d012      	beq.n	8006356 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00b      	beq.n	8006356 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006342:	2201      	movs	r2, #1
 8006344:	409a      	lsls	r2, r3
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634e:	f043 0202 	orr.w	r2, r3, #2
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800635a:	2204      	movs	r2, #4
 800635c:	409a      	lsls	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4013      	ands	r3, r2
 8006362:	2b00      	cmp	r3, #0
 8006364:	d012      	beq.n	800638c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00b      	beq.n	800638c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006378:	2204      	movs	r2, #4
 800637a:	409a      	lsls	r2, r3
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006384:	f043 0204 	orr.w	r2, r3, #4
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006390:	2210      	movs	r2, #16
 8006392:	409a      	lsls	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4013      	ands	r3, r2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d043      	beq.n	8006424 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0308 	and.w	r3, r3, #8
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d03c      	beq.n	8006424 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ae:	2210      	movs	r2, #16
 80063b0:	409a      	lsls	r2, r3
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d018      	beq.n	80063f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d108      	bne.n	80063e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d024      	beq.n	8006424 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	4798      	blx	r3
 80063e2:	e01f      	b.n	8006424 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d01b      	beq.n	8006424 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	4798      	blx	r3
 80063f4:	e016      	b.n	8006424 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006400:	2b00      	cmp	r3, #0
 8006402:	d107      	bne.n	8006414 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	6812      	ldr	r2, [r2, #0]
 800640c:	6812      	ldr	r2, [r2, #0]
 800640e:	f022 0208 	bic.w	r2, r2, #8
 8006412:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006428:	2220      	movs	r2, #32
 800642a:	409a      	lsls	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4013      	ands	r3, r2
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 808e 	beq.w	8006552 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0310 	and.w	r3, r3, #16
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 8086 	beq.w	8006552 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800644a:	2220      	movs	r2, #32
 800644c:	409a      	lsls	r2, r3
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b05      	cmp	r3, #5
 800645c:	d136      	bne.n	80064cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6812      	ldr	r2, [r2, #0]
 8006466:	6812      	ldr	r2, [r2, #0]
 8006468:	f022 0216 	bic.w	r2, r2, #22
 800646c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	6812      	ldr	r2, [r2, #0]
 8006476:	6952      	ldr	r2, [r2, #20]
 8006478:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800647c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006482:	2b00      	cmp	r3, #0
 8006484:	d103      	bne.n	800648e <HAL_DMA_IRQHandler+0x1da>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800648a:	2b00      	cmp	r3, #0
 800648c:	d007      	beq.n	800649e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	6812      	ldr	r2, [r2, #0]
 8006496:	6812      	ldr	r2, [r2, #0]
 8006498:	f022 0208 	bic.w	r2, r2, #8
 800649c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a2:	223f      	movs	r2, #63	; 0x3f
 80064a4:	409a      	lsls	r2, r3
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d07d      	beq.n	80065be <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	4798      	blx	r3
        }
        return;
 80064ca:	e078      	b.n	80065be <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d01c      	beq.n	8006514 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d108      	bne.n	80064fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d030      	beq.n	8006552 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	4798      	blx	r3
 80064f8:	e02b      	b.n	8006552 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d027      	beq.n	8006552 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	4798      	blx	r3
 800650a:	e022      	b.n	8006552 <HAL_DMA_IRQHandler+0x29e>
 800650c:	200003c8 	.word	0x200003c8
 8006510:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10f      	bne.n	8006542 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	6812      	ldr	r2, [r2, #0]
 800652a:	6812      	ldr	r2, [r2, #0]
 800652c:	f022 0210 	bic.w	r2, r2, #16
 8006530:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006556:	2b00      	cmp	r3, #0
 8006558:	d032      	beq.n	80065c0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d022      	beq.n	80065ac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2205      	movs	r2, #5
 800656a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	6812      	ldr	r2, [r2, #0]
 8006576:	6812      	ldr	r2, [r2, #0]
 8006578:	f022 0201 	bic.w	r2, r2, #1
 800657c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	3301      	adds	r3, #1
 8006582:	60bb      	str	r3, [r7, #8]
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	4293      	cmp	r3, r2
 8006588:	d807      	bhi.n	800659a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1f2      	bne.n	800657e <HAL_DMA_IRQHandler+0x2ca>
 8006598:	e000      	b.n	800659c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800659a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d005      	beq.n	80065c0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	4798      	blx	r3
 80065bc:	e000      	b.n	80065c0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80065be:	bf00      	nop
    }
  }
}
 80065c0:	3718      	adds	r7, #24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop

080065c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b089      	sub	sp, #36	; 0x24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80065da:	2300      	movs	r3, #0
 80065dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065de:	2300      	movs	r3, #0
 80065e0:	61fb      	str	r3, [r7, #28]
 80065e2:	e165      	b.n	80068b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80065e4:	2201      	movs	r2, #1
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	fa02 f303 	lsl.w	r3, r2, r3
 80065ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	4013      	ands	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	f040 8154 	bne.w	80068aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	2b02      	cmp	r3, #2
 8006608:	d003      	beq.n	8006612 <HAL_GPIO_Init+0x4a>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	2b12      	cmp	r3, #18
 8006610:	d123      	bne.n	800665a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	08da      	lsrs	r2, r3, #3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	3208      	adds	r2, #8
 800661a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800661e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	f003 0307 	and.w	r3, r3, #7
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	220f      	movs	r2, #15
 800662a:	fa02 f303 	lsl.w	r3, r2, r3
 800662e:	43db      	mvns	r3, r3
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	4013      	ands	r3, r2
 8006634:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	691a      	ldr	r2, [r3, #16]
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	f003 0307 	and.w	r3, r3, #7
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	fa02 f303 	lsl.w	r3, r2, r3
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	4313      	orrs	r3, r2
 800664a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	08da      	lsrs	r2, r3, #3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3208      	adds	r2, #8
 8006654:	69b9      	ldr	r1, [r7, #24]
 8006656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	2203      	movs	r2, #3
 8006666:	fa02 f303 	lsl.w	r3, r2, r3
 800666a:	43db      	mvns	r3, r3
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	4013      	ands	r3, r2
 8006670:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f003 0203 	and.w	r2, r3, #3
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	005b      	lsls	r3, r3, #1
 800667e:	fa02 f303 	lsl.w	r3, r2, r3
 8006682:	69ba      	ldr	r2, [r7, #24]
 8006684:	4313      	orrs	r3, r2
 8006686:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d00b      	beq.n	80066ae <HAL_GPIO_Init+0xe6>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	2b02      	cmp	r3, #2
 800669c:	d007      	beq.n	80066ae <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80066a2:	2b11      	cmp	r3, #17
 80066a4:	d003      	beq.n	80066ae <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	2b12      	cmp	r3, #18
 80066ac:	d130      	bne.n	8006710 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	2203      	movs	r2, #3
 80066ba:	fa02 f303 	lsl.w	r3, r2, r3
 80066be:	43db      	mvns	r3, r3
 80066c0:	69ba      	ldr	r2, [r7, #24]
 80066c2:	4013      	ands	r3, r2
 80066c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	fa02 f303 	lsl.w	r3, r2, r3
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80066e4:	2201      	movs	r2, #1
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ec:	43db      	mvns	r3, r3
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	4013      	ands	r3, r2
 80066f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	091b      	lsrs	r3, r3, #4
 80066fa:	f003 0201 	and.w	r2, r3, #1
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	fa02 f303 	lsl.w	r3, r2, r3
 8006704:	69ba      	ldr	r2, [r7, #24]
 8006706:	4313      	orrs	r3, r2
 8006708:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	2203      	movs	r2, #3
 800671c:	fa02 f303 	lsl.w	r3, r2, r3
 8006720:	43db      	mvns	r3, r3
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	4013      	ands	r3, r2
 8006726:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	689a      	ldr	r2, [r3, #8]
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	fa02 f303 	lsl.w	r3, r2, r3
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	4313      	orrs	r3, r2
 8006738:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 80ae 	beq.w	80068aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800674e:	2300      	movs	r3, #0
 8006750:	60fb      	str	r3, [r7, #12]
 8006752:	4a5c      	ldr	r2, [pc, #368]	; (80068c4 <HAL_GPIO_Init+0x2fc>)
 8006754:	4b5b      	ldr	r3, [pc, #364]	; (80068c4 <HAL_GPIO_Init+0x2fc>)
 8006756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800675c:	6453      	str	r3, [r2, #68]	; 0x44
 800675e:	4b59      	ldr	r3, [pc, #356]	; (80068c4 <HAL_GPIO_Init+0x2fc>)
 8006760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006766:	60fb      	str	r3, [r7, #12]
 8006768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800676a:	4a57      	ldr	r2, [pc, #348]	; (80068c8 <HAL_GPIO_Init+0x300>)
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	089b      	lsrs	r3, r3, #2
 8006770:	3302      	adds	r3, #2
 8006772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	f003 0303 	and.w	r3, r3, #3
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	220f      	movs	r2, #15
 8006782:	fa02 f303 	lsl.w	r3, r2, r3
 8006786:	43db      	mvns	r3, r3
 8006788:	69ba      	ldr	r2, [r7, #24]
 800678a:	4013      	ands	r3, r2
 800678c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a4e      	ldr	r2, [pc, #312]	; (80068cc <HAL_GPIO_Init+0x304>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d025      	beq.n	80067e2 <HAL_GPIO_Init+0x21a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a4d      	ldr	r2, [pc, #308]	; (80068d0 <HAL_GPIO_Init+0x308>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d01f      	beq.n	80067de <HAL_GPIO_Init+0x216>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a4c      	ldr	r2, [pc, #304]	; (80068d4 <HAL_GPIO_Init+0x30c>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d019      	beq.n	80067da <HAL_GPIO_Init+0x212>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a4b      	ldr	r2, [pc, #300]	; (80068d8 <HAL_GPIO_Init+0x310>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d013      	beq.n	80067d6 <HAL_GPIO_Init+0x20e>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a4a      	ldr	r2, [pc, #296]	; (80068dc <HAL_GPIO_Init+0x314>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d00d      	beq.n	80067d2 <HAL_GPIO_Init+0x20a>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a49      	ldr	r2, [pc, #292]	; (80068e0 <HAL_GPIO_Init+0x318>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d007      	beq.n	80067ce <HAL_GPIO_Init+0x206>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a48      	ldr	r2, [pc, #288]	; (80068e4 <HAL_GPIO_Init+0x31c>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d101      	bne.n	80067ca <HAL_GPIO_Init+0x202>
 80067c6:	2306      	movs	r3, #6
 80067c8:	e00c      	b.n	80067e4 <HAL_GPIO_Init+0x21c>
 80067ca:	2307      	movs	r3, #7
 80067cc:	e00a      	b.n	80067e4 <HAL_GPIO_Init+0x21c>
 80067ce:	2305      	movs	r3, #5
 80067d0:	e008      	b.n	80067e4 <HAL_GPIO_Init+0x21c>
 80067d2:	2304      	movs	r3, #4
 80067d4:	e006      	b.n	80067e4 <HAL_GPIO_Init+0x21c>
 80067d6:	2303      	movs	r3, #3
 80067d8:	e004      	b.n	80067e4 <HAL_GPIO_Init+0x21c>
 80067da:	2302      	movs	r3, #2
 80067dc:	e002      	b.n	80067e4 <HAL_GPIO_Init+0x21c>
 80067de:	2301      	movs	r3, #1
 80067e0:	e000      	b.n	80067e4 <HAL_GPIO_Init+0x21c>
 80067e2:	2300      	movs	r3, #0
 80067e4:	69fa      	ldr	r2, [r7, #28]
 80067e6:	f002 0203 	and.w	r2, r2, #3
 80067ea:	0092      	lsls	r2, r2, #2
 80067ec:	4093      	lsls	r3, r2
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80067f4:	4934      	ldr	r1, [pc, #208]	; (80068c8 <HAL_GPIO_Init+0x300>)
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	089b      	lsrs	r3, r3, #2
 80067fa:	3302      	adds	r3, #2
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006802:	4b39      	ldr	r3, [pc, #228]	; (80068e8 <HAL_GPIO_Init+0x320>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	43db      	mvns	r3, r3
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	4013      	ands	r3, r2
 8006810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	4313      	orrs	r3, r2
 8006824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006826:	4a30      	ldr	r2, [pc, #192]	; (80068e8 <HAL_GPIO_Init+0x320>)
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800682c:	4b2e      	ldr	r3, [pc, #184]	; (80068e8 <HAL_GPIO_Init+0x320>)
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	43db      	mvns	r3, r3
 8006836:	69ba      	ldr	r2, [r7, #24]
 8006838:	4013      	ands	r3, r2
 800683a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d003      	beq.n	8006850 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006848:	69ba      	ldr	r2, [r7, #24]
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	4313      	orrs	r3, r2
 800684e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006850:	4a25      	ldr	r2, [pc, #148]	; (80068e8 <HAL_GPIO_Init+0x320>)
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006856:	4b24      	ldr	r3, [pc, #144]	; (80068e8 <HAL_GPIO_Init+0x320>)
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	43db      	mvns	r3, r3
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	4013      	ands	r3, r2
 8006864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	4313      	orrs	r3, r2
 8006878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800687a:	4a1b      	ldr	r2, [pc, #108]	; (80068e8 <HAL_GPIO_Init+0x320>)
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006880:	4b19      	ldr	r3, [pc, #100]	; (80068e8 <HAL_GPIO_Init+0x320>)
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	43db      	mvns	r3, r3
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	4013      	ands	r3, r2
 800688e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800689c:	69ba      	ldr	r2, [r7, #24]
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80068a4:	4a10      	ldr	r2, [pc, #64]	; (80068e8 <HAL_GPIO_Init+0x320>)
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	3301      	adds	r3, #1
 80068ae:	61fb      	str	r3, [r7, #28]
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	2b0f      	cmp	r3, #15
 80068b4:	f67f ae96 	bls.w	80065e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80068b8:	bf00      	nop
 80068ba:	3724      	adds	r7, #36	; 0x24
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	40023800 	.word	0x40023800
 80068c8:	40013800 	.word	0x40013800
 80068cc:	40020000 	.word	0x40020000
 80068d0:	40020400 	.word	0x40020400
 80068d4:	40020800 	.word	0x40020800
 80068d8:	40020c00 	.word	0x40020c00
 80068dc:	40021000 	.word	0x40021000
 80068e0:	40021400 	.word	0x40021400
 80068e4:	40021800 	.word	0x40021800
 80068e8:	40013c00 	.word	0x40013c00

080068ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	460b      	mov	r3, r1
 80068f6:	807b      	strh	r3, [r7, #2]
 80068f8:	4613      	mov	r3, r2
 80068fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80068fc:	787b      	ldrb	r3, [r7, #1]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d003      	beq.n	800690a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006902:	887a      	ldrh	r2, [r7, #2]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006908:	e003      	b.n	8006912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800690a:	887b      	ldrh	r3, [r7, #2]
 800690c:	041a      	lsls	r2, r3, #16
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	619a      	str	r2, [r3, #24]
}
 8006912:	bf00      	nop
 8006914:	370c      	adds	r7, #12
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800691e:	b480      	push	{r7}
 8006920:	b083      	sub	sp, #12
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	460b      	mov	r3, r1
 8006928:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	695a      	ldr	r2, [r3, #20]
 800692e:	887b      	ldrh	r3, [r7, #2]
 8006930:	401a      	ands	r2, r3
 8006932:	887b      	ldrh	r3, [r7, #2]
 8006934:	429a      	cmp	r2, r3
 8006936:	d104      	bne.n	8006942 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006938:	887b      	ldrh	r3, [r7, #2]
 800693a:	041a      	lsls	r2, r3, #16
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006940:	e002      	b.n	8006948 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006942:	887a      	ldrh	r2, [r7, #2]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	619a      	str	r2, [r3, #24]
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	4603      	mov	r3, r0
 800695c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800695e:	4b08      	ldr	r3, [pc, #32]	; (8006980 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006960:	695a      	ldr	r2, [r3, #20]
 8006962:	88fb      	ldrh	r3, [r7, #6]
 8006964:	4013      	ands	r3, r2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d006      	beq.n	8006978 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800696a:	4a05      	ldr	r2, [pc, #20]	; (8006980 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800696c:	88fb      	ldrh	r3, [r7, #6]
 800696e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006970:	88fb      	ldrh	r3, [r7, #6]
 8006972:	4618      	mov	r0, r3
 8006974:	f000 f806 	bl	8006984 <HAL_GPIO_EXTI_Callback>
  }
}
 8006978:	bf00      	nop
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	40013c00 	.word	0x40013c00

08006984 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	4603      	mov	r3, r0
 800698c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800698e:	bf00      	nop
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
	...

0800699c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e0ca      	b.n	8006b46 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069b0:	4b67      	ldr	r3, [pc, #412]	; (8006b50 <HAL_RCC_ClockConfig+0x1b4>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 020f 	and.w	r2, r3, #15
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d20c      	bcs.n	80069d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069be:	4b64      	ldr	r3, [pc, #400]	; (8006b50 <HAL_RCC_ClockConfig+0x1b4>)
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	b2d2      	uxtb	r2, r2
 80069c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069c6:	4b62      	ldr	r3, [pc, #392]	; (8006b50 <HAL_RCC_ClockConfig+0x1b4>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 020f 	and.w	r2, r3, #15
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d001      	beq.n	80069d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e0b6      	b.n	8006b46 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d020      	beq.n	8006a26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d005      	beq.n	80069fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069f0:	4a58      	ldr	r2, [pc, #352]	; (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 80069f2:	4b58      	ldr	r3, [pc, #352]	; (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80069fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0308 	and.w	r3, r3, #8
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d005      	beq.n	8006a14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a08:	4a52      	ldr	r2, [pc, #328]	; (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 8006a0a:	4b52      	ldr	r3, [pc, #328]	; (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a14:	494f      	ldr	r1, [pc, #316]	; (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 8006a16:	4b4f      	ldr	r3, [pc, #316]	; (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d044      	beq.n	8006abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d107      	bne.n	8006a4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a3a:	4b46      	ldr	r3, [pc, #280]	; (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d119      	bne.n	8006a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e07d      	b.n	8006b46 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d003      	beq.n	8006a5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a56:	2b03      	cmp	r3, #3
 8006a58:	d107      	bne.n	8006a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a5a:	4b3e      	ldr	r3, [pc, #248]	; (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d109      	bne.n	8006a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e06d      	b.n	8006b46 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a6a:	4b3a      	ldr	r3, [pc, #232]	; (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e065      	b.n	8006b46 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a7a:	4936      	ldr	r1, [pc, #216]	; (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 8006a7c:	4b35      	ldr	r3, [pc, #212]	; (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f023 0203 	bic.w	r2, r3, #3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a8c:	f7fe f922 	bl	8004cd4 <HAL_GetTick>
 8006a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a92:	e00a      	b.n	8006aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a94:	f7fe f91e 	bl	8004cd4 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e04d      	b.n	8006b46 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aaa:	4b2a      	ldr	r3, [pc, #168]	; (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 020c 	and.w	r2, r3, #12
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d1eb      	bne.n	8006a94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006abc:	4b24      	ldr	r3, [pc, #144]	; (8006b50 <HAL_RCC_ClockConfig+0x1b4>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 020f 	and.w	r2, r3, #15
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d90c      	bls.n	8006ae4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aca:	4b21      	ldr	r3, [pc, #132]	; (8006b50 <HAL_RCC_ClockConfig+0x1b4>)
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ad2:	4b1f      	ldr	r3, [pc, #124]	; (8006b50 <HAL_RCC_ClockConfig+0x1b4>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 020f 	and.w	r2, r3, #15
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d001      	beq.n	8006ae4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e030      	b.n	8006b46 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d008      	beq.n	8006b02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006af0:	4918      	ldr	r1, [pc, #96]	; (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 8006af2:	4b18      	ldr	r3, [pc, #96]	; (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0308 	and.w	r3, r3, #8
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d009      	beq.n	8006b22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b0e:	4911      	ldr	r1, [pc, #68]	; (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 8006b10:	4b10      	ldr	r3, [pc, #64]	; (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	00db      	lsls	r3, r3, #3
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b22:	f000 f81d 	bl	8006b60 <HAL_RCC_GetSysClockFreq>
 8006b26:	4601      	mov	r1, r0
 8006b28:	4b0a      	ldr	r3, [pc, #40]	; (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	091b      	lsrs	r3, r3, #4
 8006b2e:	f003 030f 	and.w	r3, r3, #15
 8006b32:	4a09      	ldr	r2, [pc, #36]	; (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b34:	5cd3      	ldrb	r3, [r2, r3]
 8006b36:	fa21 f303 	lsr.w	r3, r1, r3
 8006b3a:	4a08      	ldr	r2, [pc, #32]	; (8006b5c <HAL_RCC_ClockConfig+0x1c0>)
 8006b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8006b3e:	200f      	movs	r0, #15
 8006b40:	f7fe f884 	bl	8004c4c <HAL_InitTick>

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	40023c00 	.word	0x40023c00
 8006b54:	40023800 	.word	0x40023800
 8006b58:	08009eb8 	.word	0x08009eb8
 8006b5c:	200003c8 	.word	0x200003c8

08006b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b64:	b087      	sub	sp, #28
 8006b66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006b68:	2200      	movs	r2, #0
 8006b6a:	60fa      	str	r2, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	617a      	str	r2, [r7, #20]
 8006b70:	2200      	movs	r2, #0
 8006b72:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8006b74:	2200      	movs	r2, #0
 8006b76:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b78:	4a51      	ldr	r2, [pc, #324]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006b7a:	6892      	ldr	r2, [r2, #8]
 8006b7c:	f002 020c 	and.w	r2, r2, #12
 8006b80:	2a04      	cmp	r2, #4
 8006b82:	d007      	beq.n	8006b94 <HAL_RCC_GetSysClockFreq+0x34>
 8006b84:	2a08      	cmp	r2, #8
 8006b86:	d008      	beq.n	8006b9a <HAL_RCC_GetSysClockFreq+0x3a>
 8006b88:	2a00      	cmp	r2, #0
 8006b8a:	f040 8090 	bne.w	8006cae <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b8e:	4b4d      	ldr	r3, [pc, #308]	; (8006cc4 <HAL_RCC_GetSysClockFreq+0x164>)
 8006b90:	613b      	str	r3, [r7, #16]
       break;
 8006b92:	e08f      	b.n	8006cb4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b94:	4b4c      	ldr	r3, [pc, #304]	; (8006cc8 <HAL_RCC_GetSysClockFreq+0x168>)
 8006b96:	613b      	str	r3, [r7, #16]
      break;
 8006b98:	e08c      	b.n	8006cb4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b9a:	4a49      	ldr	r2, [pc, #292]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006b9c:	6852      	ldr	r2, [r2, #4]
 8006b9e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006ba2:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ba4:	4a46      	ldr	r2, [pc, #280]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006ba6:	6852      	ldr	r2, [r2, #4]
 8006ba8:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8006bac:	2a00      	cmp	r2, #0
 8006bae:	d023      	beq.n	8006bf8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bb0:	4b43      	ldr	r3, [pc, #268]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	099b      	lsrs	r3, r3, #6
 8006bb6:	f04f 0400 	mov.w	r4, #0
 8006bba:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006bbe:	f04f 0200 	mov.w	r2, #0
 8006bc2:	ea03 0301 	and.w	r3, r3, r1
 8006bc6:	ea04 0402 	and.w	r4, r4, r2
 8006bca:	4a3f      	ldr	r2, [pc, #252]	; (8006cc8 <HAL_RCC_GetSysClockFreq+0x168>)
 8006bcc:	fb02 f104 	mul.w	r1, r2, r4
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	fb02 f203 	mul.w	r2, r2, r3
 8006bd6:	440a      	add	r2, r1
 8006bd8:	493b      	ldr	r1, [pc, #236]	; (8006cc8 <HAL_RCC_GetSysClockFreq+0x168>)
 8006bda:	fba3 0101 	umull	r0, r1, r3, r1
 8006bde:	1853      	adds	r3, r2, r1
 8006be0:	4619      	mov	r1, r3
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f04f 0400 	mov.w	r4, #0
 8006be8:	461a      	mov	r2, r3
 8006bea:	4623      	mov	r3, r4
 8006bec:	f7f9 ffd0 	bl	8000b90 <__aeabi_uldivmod>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	460c      	mov	r4, r1
 8006bf4:	617b      	str	r3, [r7, #20]
 8006bf6:	e04c      	b.n	8006c92 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bf8:	4a31      	ldr	r2, [pc, #196]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006bfa:	6852      	ldr	r2, [r2, #4]
 8006bfc:	0992      	lsrs	r2, r2, #6
 8006bfe:	4611      	mov	r1, r2
 8006c00:	f04f 0200 	mov.w	r2, #0
 8006c04:	f240 15ff 	movw	r5, #511	; 0x1ff
 8006c08:	f04f 0600 	mov.w	r6, #0
 8006c0c:	ea05 0501 	and.w	r5, r5, r1
 8006c10:	ea06 0602 	and.w	r6, r6, r2
 8006c14:	4629      	mov	r1, r5
 8006c16:	4632      	mov	r2, r6
 8006c18:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8006c1c:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8006c20:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8006c24:	4651      	mov	r1, sl
 8006c26:	465a      	mov	r2, fp
 8006c28:	46aa      	mov	sl, r5
 8006c2a:	46b3      	mov	fp, r6
 8006c2c:	4655      	mov	r5, sl
 8006c2e:	465e      	mov	r6, fp
 8006c30:	1b4d      	subs	r5, r1, r5
 8006c32:	eb62 0606 	sbc.w	r6, r2, r6
 8006c36:	4629      	mov	r1, r5
 8006c38:	4632      	mov	r2, r6
 8006c3a:	0194      	lsls	r4, r2, #6
 8006c3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006c40:	018b      	lsls	r3, r1, #6
 8006c42:	1a5b      	subs	r3, r3, r1
 8006c44:	eb64 0402 	sbc.w	r4, r4, r2
 8006c48:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8006c4c:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8006c50:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8006c54:	4643      	mov	r3, r8
 8006c56:	464c      	mov	r4, r9
 8006c58:	4655      	mov	r5, sl
 8006c5a:	465e      	mov	r6, fp
 8006c5c:	18ed      	adds	r5, r5, r3
 8006c5e:	eb46 0604 	adc.w	r6, r6, r4
 8006c62:	462b      	mov	r3, r5
 8006c64:	4634      	mov	r4, r6
 8006c66:	02a2      	lsls	r2, r4, #10
 8006c68:	607a      	str	r2, [r7, #4]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006c70:	607a      	str	r2, [r7, #4]
 8006c72:	029b      	lsls	r3, r3, #10
 8006c74:	603b      	str	r3, [r7, #0]
 8006c76:	e897 0018 	ldmia.w	r7, {r3, r4}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f04f 0400 	mov.w	r4, #0
 8006c84:	461a      	mov	r2, r3
 8006c86:	4623      	mov	r3, r4
 8006c88:	f7f9 ff82 	bl	8000b90 <__aeabi_uldivmod>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	460c      	mov	r4, r1
 8006c90:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c92:	4b0b      	ldr	r3, [pc, #44]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	0c1b      	lsrs	r3, r3, #16
 8006c98:	f003 0303 	and.w	r3, r3, #3
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	005b      	lsls	r3, r3, #1
 8006ca0:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006caa:	613b      	str	r3, [r7, #16]
      break;
 8006cac:	e002      	b.n	8006cb4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cae:	4b05      	ldr	r3, [pc, #20]	; (8006cc4 <HAL_RCC_GetSysClockFreq+0x164>)
 8006cb0:	613b      	str	r3, [r7, #16]
      break;
 8006cb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cb4:	693b      	ldr	r3, [r7, #16]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	371c      	adds	r7, #28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc0:	40023800 	.word	0x40023800
 8006cc4:	00f42400 	.word	0x00f42400
 8006cc8:	017d7840 	.word	0x017d7840

08006ccc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d075      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006ce4:	4ba2      	ldr	r3, [pc, #648]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f003 030c 	and.w	r3, r3, #12
 8006cec:	2b04      	cmp	r3, #4
 8006cee:	d00c      	beq.n	8006d0a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cf0:	4b9f      	ldr	r3, [pc, #636]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006cf8:	2b08      	cmp	r3, #8
 8006cfa:	d112      	bne.n	8006d22 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cfc:	4b9c      	ldr	r3, [pc, #624]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d08:	d10b      	bne.n	8006d22 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d0a:	4b99      	ldr	r3, [pc, #612]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d05b      	beq.n	8006dce <HAL_RCC_OscConfig+0x102>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d157      	bne.n	8006dce <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e20b      	b.n	800713a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d2a:	d106      	bne.n	8006d3a <HAL_RCC_OscConfig+0x6e>
 8006d2c:	4a90      	ldr	r2, [pc, #576]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006d2e:	4b90      	ldr	r3, [pc, #576]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d36:	6013      	str	r3, [r2, #0]
 8006d38:	e01d      	b.n	8006d76 <HAL_RCC_OscConfig+0xaa>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d42:	d10c      	bne.n	8006d5e <HAL_RCC_OscConfig+0x92>
 8006d44:	4a8a      	ldr	r2, [pc, #552]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006d46:	4b8a      	ldr	r3, [pc, #552]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d4e:	6013      	str	r3, [r2, #0]
 8006d50:	4a87      	ldr	r2, [pc, #540]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006d52:	4b87      	ldr	r3, [pc, #540]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d5a:	6013      	str	r3, [r2, #0]
 8006d5c:	e00b      	b.n	8006d76 <HAL_RCC_OscConfig+0xaa>
 8006d5e:	4a84      	ldr	r2, [pc, #528]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006d60:	4b83      	ldr	r3, [pc, #524]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d68:	6013      	str	r3, [r2, #0]
 8006d6a:	4a81      	ldr	r2, [pc, #516]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006d6c:	4b80      	ldr	r3, [pc, #512]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d74:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d013      	beq.n	8006da6 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d7e:	f7fd ffa9 	bl	8004cd4 <HAL_GetTick>
 8006d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d84:	e008      	b.n	8006d98 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d86:	f7fd ffa5 	bl	8004cd4 <HAL_GetTick>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	2b64      	cmp	r3, #100	; 0x64
 8006d92:	d901      	bls.n	8006d98 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e1d0      	b.n	800713a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d98:	4b75      	ldr	r3, [pc, #468]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d0f0      	beq.n	8006d86 <HAL_RCC_OscConfig+0xba>
 8006da4:	e014      	b.n	8006dd0 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da6:	f7fd ff95 	bl	8004cd4 <HAL_GetTick>
 8006daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dac:	e008      	b.n	8006dc0 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dae:	f7fd ff91 	bl	8004cd4 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	2b64      	cmp	r3, #100	; 0x64
 8006dba:	d901      	bls.n	8006dc0 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e1bc      	b.n	800713a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dc0:	4b6b      	ldr	r3, [pc, #428]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1f0      	bne.n	8006dae <HAL_RCC_OscConfig+0xe2>
 8006dcc:	e000      	b.n	8006dd0 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d063      	beq.n	8006ea4 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006ddc:	4b64      	ldr	r3, [pc, #400]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 030c 	and.w	r3, r3, #12
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00b      	beq.n	8006e00 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006de8:	4b61      	ldr	r3, [pc, #388]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006df0:	2b08      	cmp	r3, #8
 8006df2:	d11c      	bne.n	8006e2e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006df4:	4b5e      	ldr	r3, [pc, #376]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d116      	bne.n	8006e2e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e00:	4b5b      	ldr	r3, [pc, #364]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d005      	beq.n	8006e18 <HAL_RCC_OscConfig+0x14c>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d001      	beq.n	8006e18 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e190      	b.n	800713a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e18:	4955      	ldr	r1, [pc, #340]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006e1a:	4b55      	ldr	r3, [pc, #340]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	00db      	lsls	r3, r3, #3
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e2c:	e03a      	b.n	8006ea4 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d020      	beq.n	8006e78 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e36:	4b4f      	ldr	r3, [pc, #316]	; (8006f74 <HAL_RCC_OscConfig+0x2a8>)
 8006e38:	2201      	movs	r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e3c:	f7fd ff4a 	bl	8004cd4 <HAL_GetTick>
 8006e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e42:	e008      	b.n	8006e56 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e44:	f7fd ff46 	bl	8004cd4 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d901      	bls.n	8006e56 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e171      	b.n	800713a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e56:	4b46      	ldr	r3, [pc, #280]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d0f0      	beq.n	8006e44 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e62:	4943      	ldr	r1, [pc, #268]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006e64:	4b42      	ldr	r3, [pc, #264]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	00db      	lsls	r3, r3, #3
 8006e72:	4313      	orrs	r3, r2
 8006e74:	600b      	str	r3, [r1, #0]
 8006e76:	e015      	b.n	8006ea4 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e78:	4b3e      	ldr	r3, [pc, #248]	; (8006f74 <HAL_RCC_OscConfig+0x2a8>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e7e:	f7fd ff29 	bl	8004cd4 <HAL_GetTick>
 8006e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e84:	e008      	b.n	8006e98 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e86:	f7fd ff25 	bl	8004cd4 <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d901      	bls.n	8006e98 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e150      	b.n	800713a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e98:	4b35      	ldr	r3, [pc, #212]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1f0      	bne.n	8006e86 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0308 	and.w	r3, r3, #8
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d030      	beq.n	8006f12 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d016      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006eb8:	4b2f      	ldr	r3, [pc, #188]	; (8006f78 <HAL_RCC_OscConfig+0x2ac>)
 8006eba:	2201      	movs	r2, #1
 8006ebc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ebe:	f7fd ff09 	bl	8004cd4 <HAL_GetTick>
 8006ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ec4:	e008      	b.n	8006ed8 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ec6:	f7fd ff05 	bl	8004cd4 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d901      	bls.n	8006ed8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e130      	b.n	800713a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ed8:	4b25      	ldr	r3, [pc, #148]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d0f0      	beq.n	8006ec6 <HAL_RCC_OscConfig+0x1fa>
 8006ee4:	e015      	b.n	8006f12 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ee6:	4b24      	ldr	r3, [pc, #144]	; (8006f78 <HAL_RCC_OscConfig+0x2ac>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eec:	f7fd fef2 	bl	8004cd4 <HAL_GetTick>
 8006ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ef2:	e008      	b.n	8006f06 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ef4:	f7fd feee 	bl	8004cd4 <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d901      	bls.n	8006f06 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e119      	b.n	800713a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f06:	4b1a      	ldr	r3, [pc, #104]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f0a:	f003 0302 	and.w	r3, r3, #2
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1f0      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0304 	and.w	r3, r3, #4
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 809f 	beq.w	800705e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f20:	2300      	movs	r3, #0
 8006f22:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f24:	4b12      	ldr	r3, [pc, #72]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10f      	bne.n	8006f50 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f30:	2300      	movs	r3, #0
 8006f32:	60fb      	str	r3, [r7, #12]
 8006f34:	4a0e      	ldr	r2, [pc, #56]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006f36:	4b0e      	ldr	r3, [pc, #56]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8006f40:	4b0b      	ldr	r3, [pc, #44]	; (8006f70 <HAL_RCC_OscConfig+0x2a4>)
 8006f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f48:	60fb      	str	r3, [r7, #12]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f50:	4b0a      	ldr	r3, [pc, #40]	; (8006f7c <HAL_RCC_OscConfig+0x2b0>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d120      	bne.n	8006f9e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f5c:	4a07      	ldr	r2, [pc, #28]	; (8006f7c <HAL_RCC_OscConfig+0x2b0>)
 8006f5e:	4b07      	ldr	r3, [pc, #28]	; (8006f7c <HAL_RCC_OscConfig+0x2b0>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f68:	f7fd feb4 	bl	8004cd4 <HAL_GetTick>
 8006f6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f6e:	e010      	b.n	8006f92 <HAL_RCC_OscConfig+0x2c6>
 8006f70:	40023800 	.word	0x40023800
 8006f74:	42470000 	.word	0x42470000
 8006f78:	42470e80 	.word	0x42470e80
 8006f7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f80:	f7fd fea8 	bl	8004cd4 <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e0d3      	b.n	800713a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f92:	4b6c      	ldr	r3, [pc, #432]	; (8007144 <HAL_RCC_OscConfig+0x478>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0f0      	beq.n	8006f80 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d106      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x2e8>
 8006fa6:	4a68      	ldr	r2, [pc, #416]	; (8007148 <HAL_RCC_OscConfig+0x47c>)
 8006fa8:	4b67      	ldr	r3, [pc, #412]	; (8007148 <HAL_RCC_OscConfig+0x47c>)
 8006faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fac:	f043 0301 	orr.w	r3, r3, #1
 8006fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8006fb2:	e01c      	b.n	8006fee <HAL_RCC_OscConfig+0x322>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	2b05      	cmp	r3, #5
 8006fba:	d10c      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x30a>
 8006fbc:	4a62      	ldr	r2, [pc, #392]	; (8007148 <HAL_RCC_OscConfig+0x47c>)
 8006fbe:	4b62      	ldr	r3, [pc, #392]	; (8007148 <HAL_RCC_OscConfig+0x47c>)
 8006fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc2:	f043 0304 	orr.w	r3, r3, #4
 8006fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8006fc8:	4a5f      	ldr	r2, [pc, #380]	; (8007148 <HAL_RCC_OscConfig+0x47c>)
 8006fca:	4b5f      	ldr	r3, [pc, #380]	; (8007148 <HAL_RCC_OscConfig+0x47c>)
 8006fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fce:	f043 0301 	orr.w	r3, r3, #1
 8006fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8006fd4:	e00b      	b.n	8006fee <HAL_RCC_OscConfig+0x322>
 8006fd6:	4a5c      	ldr	r2, [pc, #368]	; (8007148 <HAL_RCC_OscConfig+0x47c>)
 8006fd8:	4b5b      	ldr	r3, [pc, #364]	; (8007148 <HAL_RCC_OscConfig+0x47c>)
 8006fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fdc:	f023 0301 	bic.w	r3, r3, #1
 8006fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8006fe2:	4a59      	ldr	r2, [pc, #356]	; (8007148 <HAL_RCC_OscConfig+0x47c>)
 8006fe4:	4b58      	ldr	r3, [pc, #352]	; (8007148 <HAL_RCC_OscConfig+0x47c>)
 8006fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe8:	f023 0304 	bic.w	r3, r3, #4
 8006fec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d015      	beq.n	8007022 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ff6:	f7fd fe6d 	bl	8004cd4 <HAL_GetTick>
 8006ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ffc:	e00a      	b.n	8007014 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ffe:	f7fd fe69 	bl	8004cd4 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	f241 3288 	movw	r2, #5000	; 0x1388
 800700c:	4293      	cmp	r3, r2
 800700e:	d901      	bls.n	8007014 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e092      	b.n	800713a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007014:	4b4c      	ldr	r3, [pc, #304]	; (8007148 <HAL_RCC_OscConfig+0x47c>)
 8007016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0ee      	beq.n	8006ffe <HAL_RCC_OscConfig+0x332>
 8007020:	e014      	b.n	800704c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007022:	f7fd fe57 	bl	8004cd4 <HAL_GetTick>
 8007026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007028:	e00a      	b.n	8007040 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800702a:	f7fd fe53 	bl	8004cd4 <HAL_GetTick>
 800702e:	4602      	mov	r2, r0
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	f241 3288 	movw	r2, #5000	; 0x1388
 8007038:	4293      	cmp	r3, r2
 800703a:	d901      	bls.n	8007040 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e07c      	b.n	800713a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007040:	4b41      	ldr	r3, [pc, #260]	; (8007148 <HAL_RCC_OscConfig+0x47c>)
 8007042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007044:	f003 0302 	and.w	r3, r3, #2
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1ee      	bne.n	800702a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800704c:	7dfb      	ldrb	r3, [r7, #23]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d105      	bne.n	800705e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007052:	4a3d      	ldr	r2, [pc, #244]	; (8007148 <HAL_RCC_OscConfig+0x47c>)
 8007054:	4b3c      	ldr	r3, [pc, #240]	; (8007148 <HAL_RCC_OscConfig+0x47c>)
 8007056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800705c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d068      	beq.n	8007138 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007066:	4b38      	ldr	r3, [pc, #224]	; (8007148 <HAL_RCC_OscConfig+0x47c>)
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f003 030c 	and.w	r3, r3, #12
 800706e:	2b08      	cmp	r3, #8
 8007070:	d060      	beq.n	8007134 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	2b02      	cmp	r3, #2
 8007078:	d145      	bne.n	8007106 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800707a:	4b34      	ldr	r3, [pc, #208]	; (800714c <HAL_RCC_OscConfig+0x480>)
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007080:	f7fd fe28 	bl	8004cd4 <HAL_GetTick>
 8007084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007086:	e008      	b.n	800709a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007088:	f7fd fe24 	bl	8004cd4 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b02      	cmp	r3, #2
 8007094:	d901      	bls.n	800709a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e04f      	b.n	800713a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800709a:	4b2b      	ldr	r3, [pc, #172]	; (8007148 <HAL_RCC_OscConfig+0x47c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1f0      	bne.n	8007088 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070a6:	4928      	ldr	r1, [pc, #160]	; (8007148 <HAL_RCC_OscConfig+0x47c>)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	69da      	ldr	r2, [r3, #28]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a1b      	ldr	r3, [r3, #32]
 80070b0:	431a      	orrs	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b6:	019b      	lsls	r3, r3, #6
 80070b8:	431a      	orrs	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070be:	085b      	lsrs	r3, r3, #1
 80070c0:	3b01      	subs	r3, #1
 80070c2:	041b      	lsls	r3, r3, #16
 80070c4:	431a      	orrs	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ca:	061b      	lsls	r3, r3, #24
 80070cc:	431a      	orrs	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d2:	071b      	lsls	r3, r3, #28
 80070d4:	4313      	orrs	r3, r2
 80070d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070d8:	4b1c      	ldr	r3, [pc, #112]	; (800714c <HAL_RCC_OscConfig+0x480>)
 80070da:	2201      	movs	r2, #1
 80070dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070de:	f7fd fdf9 	bl	8004cd4 <HAL_GetTick>
 80070e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070e4:	e008      	b.n	80070f8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070e6:	f7fd fdf5 	bl	8004cd4 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d901      	bls.n	80070f8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e020      	b.n	800713a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070f8:	4b13      	ldr	r3, [pc, #76]	; (8007148 <HAL_RCC_OscConfig+0x47c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d0f0      	beq.n	80070e6 <HAL_RCC_OscConfig+0x41a>
 8007104:	e018      	b.n	8007138 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007106:	4b11      	ldr	r3, [pc, #68]	; (800714c <HAL_RCC_OscConfig+0x480>)
 8007108:	2200      	movs	r2, #0
 800710a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800710c:	f7fd fde2 	bl	8004cd4 <HAL_GetTick>
 8007110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007112:	e008      	b.n	8007126 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007114:	f7fd fdde 	bl	8004cd4 <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	2b02      	cmp	r3, #2
 8007120:	d901      	bls.n	8007126 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e009      	b.n	800713a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007126:	4b08      	ldr	r3, [pc, #32]	; (8007148 <HAL_RCC_OscConfig+0x47c>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1f0      	bne.n	8007114 <HAL_RCC_OscConfig+0x448>
 8007132:	e001      	b.n	8007138 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e000      	b.n	800713a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3718      	adds	r7, #24
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	40007000 	.word	0x40007000
 8007148:	40023800 	.word	0x40023800
 800714c:	42470060 	.word	0x42470060

08007150 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e01d      	b.n	800719e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d106      	bne.n	800717c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f815 	bl	80071a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	3304      	adds	r3, #4
 800718c:	4619      	mov	r1, r3
 800718e:	4610      	mov	r0, r2
 8007190:	f000 fa5c 	bl	800764c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b083      	sub	sp, #12
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80071ae:	bf00      	nop
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b082      	sub	sp, #8
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e01d      	b.n	8007208 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d106      	bne.n	80071e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f815 	bl	8007210 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2202      	movs	r2, #2
 80071ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	3304      	adds	r3, #4
 80071f6:	4619      	mov	r1, r3
 80071f8:	4610      	mov	r0, r2
 80071fa:	f000 fa27 	bl	800764c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2201      	movs	r2, #1
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	4618      	mov	r0, r3
 8007238:	f000 fcf2 	bl	8007c20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a15      	ldr	r2, [pc, #84]	; (8007298 <HAL_TIM_PWM_Start+0x74>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d004      	beq.n	8007250 <HAL_TIM_PWM_Start+0x2c>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a14      	ldr	r2, [pc, #80]	; (800729c <HAL_TIM_PWM_Start+0x78>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d101      	bne.n	8007254 <HAL_TIM_PWM_Start+0x30>
 8007250:	2301      	movs	r3, #1
 8007252:	e000      	b.n	8007256 <HAL_TIM_PWM_Start+0x32>
 8007254:	2300      	movs	r3, #0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d007      	beq.n	800726a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6812      	ldr	r2, [r2, #0]
 8007262:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007264:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007268:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f003 0307 	and.w	r3, r3, #7
 8007274:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2b06      	cmp	r3, #6
 800727a:	d007      	beq.n	800728c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	6812      	ldr	r2, [r2, #0]
 8007284:	6812      	ldr	r2, [r2, #0]
 8007286:	f042 0201 	orr.w	r2, r2, #1
 800728a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	40010000 	.word	0x40010000
 800729c:	40010400 	.word	0x40010400

080072a0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2200      	movs	r2, #0
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 fcb4 	bl	8007c20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a22      	ldr	r2, [pc, #136]	; (8007348 <HAL_TIM_PWM_Stop+0xa8>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d004      	beq.n	80072cc <HAL_TIM_PWM_Stop+0x2c>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a21      	ldr	r2, [pc, #132]	; (800734c <HAL_TIM_PWM_Stop+0xac>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d101      	bne.n	80072d0 <HAL_TIM_PWM_Stop+0x30>
 80072cc:	2301      	movs	r3, #1
 80072ce:	e000      	b.n	80072d2 <HAL_TIM_PWM_Stop+0x32>
 80072d0:	2300      	movs	r3, #0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d017      	beq.n	8007306 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6a1a      	ldr	r2, [r3, #32]
 80072dc:	f241 1311 	movw	r3, #4369	; 0x1111
 80072e0:	4013      	ands	r3, r2
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10f      	bne.n	8007306 <HAL_TIM_PWM_Stop+0x66>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6a1a      	ldr	r2, [r3, #32]
 80072ec:	f240 4344 	movw	r3, #1092	; 0x444
 80072f0:	4013      	ands	r3, r2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d107      	bne.n	8007306 <HAL_TIM_PWM_Stop+0x66>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	6812      	ldr	r2, [r2, #0]
 80072fe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007300:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007304:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6a1a      	ldr	r2, [r3, #32]
 800730c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007310:	4013      	ands	r3, r2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10f      	bne.n	8007336 <HAL_TIM_PWM_Stop+0x96>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6a1a      	ldr	r2, [r3, #32]
 800731c:	f240 4344 	movw	r3, #1092	; 0x444
 8007320:	4013      	ands	r3, r2
 8007322:	2b00      	cmp	r3, #0
 8007324:	d107      	bne.n	8007336 <HAL_TIM_PWM_Stop+0x96>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	6812      	ldr	r2, [r2, #0]
 800732e:	6812      	ldr	r2, [r2, #0]
 8007330:	f022 0201 	bic.w	r2, r2, #1
 8007334:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	40010000 	.word	0x40010000
 800734c:	40010400 	.word	0x40010400

08007350 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007362:	2b01      	cmp	r3, #1
 8007364:	d101      	bne.n	800736a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007366:	2302      	movs	r3, #2
 8007368:	e0b4      	b.n	80074d4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2202      	movs	r2, #2
 8007376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b0c      	cmp	r3, #12
 800737e:	f200 809f 	bhi.w	80074c0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007382:	a201      	add	r2, pc, #4	; (adr r2, 8007388 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007388:	080073bd 	.word	0x080073bd
 800738c:	080074c1 	.word	0x080074c1
 8007390:	080074c1 	.word	0x080074c1
 8007394:	080074c1 	.word	0x080074c1
 8007398:	080073fd 	.word	0x080073fd
 800739c:	080074c1 	.word	0x080074c1
 80073a0:	080074c1 	.word	0x080074c1
 80073a4:	080074c1 	.word	0x080074c1
 80073a8:	0800743f 	.word	0x0800743f
 80073ac:	080074c1 	.word	0x080074c1
 80073b0:	080074c1 	.word	0x080074c1
 80073b4:	080074c1 	.word	0x080074c1
 80073b8:	0800747f 	.word	0x0800747f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68b9      	ldr	r1, [r7, #8]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 f9e2 	bl	800778c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	6812      	ldr	r2, [r2, #0]
 80073d0:	6992      	ldr	r2, [r2, #24]
 80073d2:	f042 0208 	orr.w	r2, r2, #8
 80073d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	6812      	ldr	r2, [r2, #0]
 80073e0:	6992      	ldr	r2, [r2, #24]
 80073e2:	f022 0204 	bic.w	r2, r2, #4
 80073e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	6812      	ldr	r2, [r2, #0]
 80073f0:	6991      	ldr	r1, [r2, #24]
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	6912      	ldr	r2, [r2, #16]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	619a      	str	r2, [r3, #24]
      break;
 80073fa:	e062      	b.n	80074c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68b9      	ldr	r1, [r7, #8]
 8007402:	4618      	mov	r0, r3
 8007404:	f000 fa32 	bl	800786c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	6812      	ldr	r2, [r2, #0]
 8007410:	6992      	ldr	r2, [r2, #24]
 8007412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	6812      	ldr	r2, [r2, #0]
 8007420:	6992      	ldr	r2, [r2, #24]
 8007422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	6812      	ldr	r2, [r2, #0]
 8007430:	6991      	ldr	r1, [r2, #24]
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	6912      	ldr	r2, [r2, #16]
 8007436:	0212      	lsls	r2, r2, #8
 8007438:	430a      	orrs	r2, r1
 800743a:	619a      	str	r2, [r3, #24]
      break;
 800743c:	e041      	b.n	80074c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68b9      	ldr	r1, [r7, #8]
 8007444:	4618      	mov	r0, r3
 8007446:	f000 fa87 	bl	8007958 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	6812      	ldr	r2, [r2, #0]
 8007452:	69d2      	ldr	r2, [r2, #28]
 8007454:	f042 0208 	orr.w	r2, r2, #8
 8007458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	6812      	ldr	r2, [r2, #0]
 8007462:	69d2      	ldr	r2, [r2, #28]
 8007464:	f022 0204 	bic.w	r2, r2, #4
 8007468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	6812      	ldr	r2, [r2, #0]
 8007472:	69d1      	ldr	r1, [r2, #28]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	6912      	ldr	r2, [r2, #16]
 8007478:	430a      	orrs	r2, r1
 800747a:	61da      	str	r2, [r3, #28]
      break;
 800747c:	e021      	b.n	80074c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68b9      	ldr	r1, [r7, #8]
 8007484:	4618      	mov	r0, r3
 8007486:	f000 fadb 	bl	8007a40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	6812      	ldr	r2, [r2, #0]
 8007492:	69d2      	ldr	r2, [r2, #28]
 8007494:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	6812      	ldr	r2, [r2, #0]
 80074a2:	69d2      	ldr	r2, [r2, #28]
 80074a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	6812      	ldr	r2, [r2, #0]
 80074b2:	69d1      	ldr	r1, [r2, #28]
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	6912      	ldr	r2, [r2, #16]
 80074b8:	0212      	lsls	r2, r2, #8
 80074ba:	430a      	orrs	r2, r1
 80074bc:	61da      	str	r2, [r3, #28]
      break;
 80074be:	e000      	b.n	80074c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80074c0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d101      	bne.n	80074f4 <HAL_TIM_ConfigClockSource+0x18>
 80074f0:	2302      	movs	r3, #2
 80074f2:	e0a6      	b.n	8007642 <HAL_TIM_ConfigClockSource+0x166>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007512:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800751a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b40      	cmp	r3, #64	; 0x40
 800752a:	d067      	beq.n	80075fc <HAL_TIM_ConfigClockSource+0x120>
 800752c:	2b40      	cmp	r3, #64	; 0x40
 800752e:	d80b      	bhi.n	8007548 <HAL_TIM_ConfigClockSource+0x6c>
 8007530:	2b10      	cmp	r3, #16
 8007532:	d073      	beq.n	800761c <HAL_TIM_ConfigClockSource+0x140>
 8007534:	2b10      	cmp	r3, #16
 8007536:	d802      	bhi.n	800753e <HAL_TIM_ConfigClockSource+0x62>
 8007538:	2b00      	cmp	r3, #0
 800753a:	d06f      	beq.n	800761c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800753c:	e078      	b.n	8007630 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800753e:	2b20      	cmp	r3, #32
 8007540:	d06c      	beq.n	800761c <HAL_TIM_ConfigClockSource+0x140>
 8007542:	2b30      	cmp	r3, #48	; 0x30
 8007544:	d06a      	beq.n	800761c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007546:	e073      	b.n	8007630 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007548:	2b70      	cmp	r3, #112	; 0x70
 800754a:	d00d      	beq.n	8007568 <HAL_TIM_ConfigClockSource+0x8c>
 800754c:	2b70      	cmp	r3, #112	; 0x70
 800754e:	d804      	bhi.n	800755a <HAL_TIM_ConfigClockSource+0x7e>
 8007550:	2b50      	cmp	r3, #80	; 0x50
 8007552:	d033      	beq.n	80075bc <HAL_TIM_ConfigClockSource+0xe0>
 8007554:	2b60      	cmp	r3, #96	; 0x60
 8007556:	d041      	beq.n	80075dc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007558:	e06a      	b.n	8007630 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800755a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800755e:	d066      	beq.n	800762e <HAL_TIM_ConfigClockSource+0x152>
 8007560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007564:	d017      	beq.n	8007596 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007566:	e063      	b.n	8007630 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6818      	ldr	r0, [r3, #0]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	6899      	ldr	r1, [r3, #8]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	685a      	ldr	r2, [r3, #4]
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f000 fb32 	bl	8007be0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800758a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	609a      	str	r2, [r3, #8]
      break;
 8007594:	e04c      	b.n	8007630 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6818      	ldr	r0, [r3, #0]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	6899      	ldr	r1, [r3, #8]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	685a      	ldr	r2, [r3, #4]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	f000 fb1b 	bl	8007be0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	6812      	ldr	r2, [r2, #0]
 80075b2:	6892      	ldr	r2, [r2, #8]
 80075b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075b8:	609a      	str	r2, [r3, #8]
      break;
 80075ba:	e039      	b.n	8007630 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6818      	ldr	r0, [r3, #0]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	6859      	ldr	r1, [r3, #4]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	461a      	mov	r2, r3
 80075ca:	f000 fa8f 	bl	8007aec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2150      	movs	r1, #80	; 0x50
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 fae8 	bl	8007baa <TIM_ITRx_SetConfig>
      break;
 80075da:	e029      	b.n	8007630 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6818      	ldr	r0, [r3, #0]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	6859      	ldr	r1, [r3, #4]
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	461a      	mov	r2, r3
 80075ea:	f000 faae 	bl	8007b4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2160      	movs	r1, #96	; 0x60
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 fad8 	bl	8007baa <TIM_ITRx_SetConfig>
      break;
 80075fa:	e019      	b.n	8007630 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6818      	ldr	r0, [r3, #0]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	6859      	ldr	r1, [r3, #4]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	461a      	mov	r2, r3
 800760a:	f000 fa6f 	bl	8007aec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2140      	movs	r1, #64	; 0x40
 8007614:	4618      	mov	r0, r3
 8007616:	f000 fac8 	bl	8007baa <TIM_ITRx_SetConfig>
      break;
 800761a:	e009      	b.n	8007630 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4619      	mov	r1, r3
 8007626:	4610      	mov	r0, r2
 8007628:	f000 fabf 	bl	8007baa <TIM_ITRx_SetConfig>
      break;
 800762c:	e000      	b.n	8007630 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800762e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
	...

0800764c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a40      	ldr	r2, [pc, #256]	; (8007760 <TIM_Base_SetConfig+0x114>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d013      	beq.n	800768c <TIM_Base_SetConfig+0x40>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800766a:	d00f      	beq.n	800768c <TIM_Base_SetConfig+0x40>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a3d      	ldr	r2, [pc, #244]	; (8007764 <TIM_Base_SetConfig+0x118>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d00b      	beq.n	800768c <TIM_Base_SetConfig+0x40>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a3c      	ldr	r2, [pc, #240]	; (8007768 <TIM_Base_SetConfig+0x11c>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d007      	beq.n	800768c <TIM_Base_SetConfig+0x40>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a3b      	ldr	r2, [pc, #236]	; (800776c <TIM_Base_SetConfig+0x120>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d003      	beq.n	800768c <TIM_Base_SetConfig+0x40>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a3a      	ldr	r2, [pc, #232]	; (8007770 <TIM_Base_SetConfig+0x124>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d108      	bne.n	800769e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	4313      	orrs	r3, r2
 800769c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a2f      	ldr	r2, [pc, #188]	; (8007760 <TIM_Base_SetConfig+0x114>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d02b      	beq.n	80076fe <TIM_Base_SetConfig+0xb2>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ac:	d027      	beq.n	80076fe <TIM_Base_SetConfig+0xb2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a2c      	ldr	r2, [pc, #176]	; (8007764 <TIM_Base_SetConfig+0x118>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d023      	beq.n	80076fe <TIM_Base_SetConfig+0xb2>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a2b      	ldr	r2, [pc, #172]	; (8007768 <TIM_Base_SetConfig+0x11c>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d01f      	beq.n	80076fe <TIM_Base_SetConfig+0xb2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a2a      	ldr	r2, [pc, #168]	; (800776c <TIM_Base_SetConfig+0x120>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d01b      	beq.n	80076fe <TIM_Base_SetConfig+0xb2>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a29      	ldr	r2, [pc, #164]	; (8007770 <TIM_Base_SetConfig+0x124>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d017      	beq.n	80076fe <TIM_Base_SetConfig+0xb2>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a28      	ldr	r2, [pc, #160]	; (8007774 <TIM_Base_SetConfig+0x128>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d013      	beq.n	80076fe <TIM_Base_SetConfig+0xb2>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a27      	ldr	r2, [pc, #156]	; (8007778 <TIM_Base_SetConfig+0x12c>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d00f      	beq.n	80076fe <TIM_Base_SetConfig+0xb2>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a26      	ldr	r2, [pc, #152]	; (800777c <TIM_Base_SetConfig+0x130>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d00b      	beq.n	80076fe <TIM_Base_SetConfig+0xb2>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a25      	ldr	r2, [pc, #148]	; (8007780 <TIM_Base_SetConfig+0x134>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d007      	beq.n	80076fe <TIM_Base_SetConfig+0xb2>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a24      	ldr	r2, [pc, #144]	; (8007784 <TIM_Base_SetConfig+0x138>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d003      	beq.n	80076fe <TIM_Base_SetConfig+0xb2>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a23      	ldr	r2, [pc, #140]	; (8007788 <TIM_Base_SetConfig+0x13c>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d108      	bne.n	8007710 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	4313      	orrs	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	4313      	orrs	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	689a      	ldr	r2, [r3, #8]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a0a      	ldr	r2, [pc, #40]	; (8007760 <TIM_Base_SetConfig+0x114>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d003      	beq.n	8007744 <TIM_Base_SetConfig+0xf8>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a0c      	ldr	r2, [pc, #48]	; (8007770 <TIM_Base_SetConfig+0x124>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d103      	bne.n	800774c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	691a      	ldr	r2, [r3, #16]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	615a      	str	r2, [r3, #20]
}
 8007752:	bf00      	nop
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	40010000 	.word	0x40010000
 8007764:	40000400 	.word	0x40000400
 8007768:	40000800 	.word	0x40000800
 800776c:	40000c00 	.word	0x40000c00
 8007770:	40010400 	.word	0x40010400
 8007774:	40014000 	.word	0x40014000
 8007778:	40014400 	.word	0x40014400
 800777c:	40014800 	.word	0x40014800
 8007780:	40001800 	.word	0x40001800
 8007784:	40001c00 	.word	0x40001c00
 8007788:	40002000 	.word	0x40002000

0800778c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	f023 0201 	bic.w	r2, r3, #1
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f023 0303 	bic.w	r3, r3, #3
 80077c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f023 0302 	bic.w	r3, r3, #2
 80077d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	4313      	orrs	r3, r2
 80077de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a20      	ldr	r2, [pc, #128]	; (8007864 <TIM_OC1_SetConfig+0xd8>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d003      	beq.n	80077f0 <TIM_OC1_SetConfig+0x64>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a1f      	ldr	r2, [pc, #124]	; (8007868 <TIM_OC1_SetConfig+0xdc>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d10c      	bne.n	800780a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f023 0308 	bic.w	r3, r3, #8
 80077f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	697a      	ldr	r2, [r7, #20]
 80077fe:	4313      	orrs	r3, r2
 8007800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f023 0304 	bic.w	r3, r3, #4
 8007808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a15      	ldr	r2, [pc, #84]	; (8007864 <TIM_OC1_SetConfig+0xd8>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d003      	beq.n	800781a <TIM_OC1_SetConfig+0x8e>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a14      	ldr	r2, [pc, #80]	; (8007868 <TIM_OC1_SetConfig+0xdc>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d111      	bne.n	800783e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	4313      	orrs	r3, r2
 8007832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	4313      	orrs	r3, r2
 800783c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	621a      	str	r2, [r3, #32]
}
 8007858:	bf00      	nop
 800785a:	371c      	adds	r7, #28
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	40010000 	.word	0x40010000
 8007868:	40010400 	.word	0x40010400

0800786c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800786c:	b480      	push	{r7}
 800786e:	b087      	sub	sp, #28
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	f023 0210 	bic.w	r2, r3, #16
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800789a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	021b      	lsls	r3, r3, #8
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f023 0320 	bic.w	r3, r3, #32
 80078b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	011b      	lsls	r3, r3, #4
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a22      	ldr	r2, [pc, #136]	; (8007950 <TIM_OC2_SetConfig+0xe4>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d003      	beq.n	80078d4 <TIM_OC2_SetConfig+0x68>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a21      	ldr	r2, [pc, #132]	; (8007954 <TIM_OC2_SetConfig+0xe8>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d10d      	bne.n	80078f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	011b      	lsls	r3, r3, #4
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a17      	ldr	r2, [pc, #92]	; (8007950 <TIM_OC2_SetConfig+0xe4>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d003      	beq.n	8007900 <TIM_OC2_SetConfig+0x94>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a16      	ldr	r2, [pc, #88]	; (8007954 <TIM_OC2_SetConfig+0xe8>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d113      	bne.n	8007928 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007906:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800790e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	4313      	orrs	r3, r2
 800791a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	4313      	orrs	r3, r2
 8007926:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	621a      	str	r2, [r3, #32]
}
 8007942:	bf00      	nop
 8007944:	371c      	adds	r7, #28
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	40010000 	.word	0x40010000
 8007954:	40010400 	.word	0x40010400

08007958 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007958:	b480      	push	{r7}
 800795a:	b087      	sub	sp, #28
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f023 0303 	bic.w	r3, r3, #3
 800798e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	4313      	orrs	r3, r2
 8007998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	021b      	lsls	r3, r3, #8
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a21      	ldr	r2, [pc, #132]	; (8007a38 <TIM_OC3_SetConfig+0xe0>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d003      	beq.n	80079be <TIM_OC3_SetConfig+0x66>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a20      	ldr	r2, [pc, #128]	; (8007a3c <TIM_OC3_SetConfig+0xe4>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d10d      	bne.n	80079da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	021b      	lsls	r3, r3, #8
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a16      	ldr	r2, [pc, #88]	; (8007a38 <TIM_OC3_SetConfig+0xe0>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d003      	beq.n	80079ea <TIM_OC3_SetConfig+0x92>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a15      	ldr	r2, [pc, #84]	; (8007a3c <TIM_OC3_SetConfig+0xe4>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d113      	bne.n	8007a12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	011b      	lsls	r3, r3, #4
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	011b      	lsls	r3, r3, #4
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	621a      	str	r2, [r3, #32]
}
 8007a2c:	bf00      	nop
 8007a2e:	371c      	adds	r7, #28
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr
 8007a38:	40010000 	.word	0x40010000
 8007a3c:	40010400 	.word	0x40010400

08007a40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a1b      	ldr	r3, [r3, #32]
 8007a5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	69db      	ldr	r3, [r3, #28]
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	021b      	lsls	r3, r3, #8
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	031b      	lsls	r3, r3, #12
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a12      	ldr	r2, [pc, #72]	; (8007ae4 <TIM_OC4_SetConfig+0xa4>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d003      	beq.n	8007aa8 <TIM_OC4_SetConfig+0x68>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a11      	ldr	r2, [pc, #68]	; (8007ae8 <TIM_OC4_SetConfig+0xa8>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d109      	bne.n	8007abc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007aae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	019b      	lsls	r3, r3, #6
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	621a      	str	r2, [r3, #32]
}
 8007ad6:	bf00      	nop
 8007ad8:	371c      	adds	r7, #28
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	40010000 	.word	0x40010000
 8007ae8:	40010400 	.word	0x40010400

08007aec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b087      	sub	sp, #28
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6a1b      	ldr	r3, [r3, #32]
 8007afc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	f023 0201 	bic.w	r2, r3, #1
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	011b      	lsls	r3, r3, #4
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	f023 030a 	bic.w	r3, r3, #10
 8007b28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	621a      	str	r2, [r3, #32]
}
 8007b3e:	bf00      	nop
 8007b40:	371c      	adds	r7, #28
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b087      	sub	sp, #28
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	60f8      	str	r0, [r7, #12]
 8007b52:	60b9      	str	r1, [r7, #8]
 8007b54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6a1b      	ldr	r3, [r3, #32]
 8007b5a:	f023 0210 	bic.w	r2, r3, #16
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6a1b      	ldr	r3, [r3, #32]
 8007b6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	031b      	lsls	r3, r3, #12
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	011b      	lsls	r3, r3, #4
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	621a      	str	r2, [r3, #32]
}
 8007b9e:	bf00      	nop
 8007ba0:	371c      	adds	r7, #28
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b085      	sub	sp, #20
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	f043 0307 	orr.w	r3, r3, #7
 8007bcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	609a      	str	r2, [r3, #8]
}
 8007bd4:	bf00      	nop
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b087      	sub	sp, #28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	021a      	lsls	r2, r3, #8
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	431a      	orrs	r2, r3
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	609a      	str	r2, [r3, #8]
}
 8007c14:	bf00      	nop
 8007c16:	371c      	adds	r7, #28
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b087      	sub	sp, #28
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	f003 031f 	and.w	r3, r3, #31
 8007c32:	2201      	movs	r2, #1
 8007c34:	fa02 f303 	lsl.w	r3, r2, r3
 8007c38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6a1a      	ldr	r2, [r3, #32]
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	43db      	mvns	r3, r3
 8007c42:	401a      	ands	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6a1a      	ldr	r2, [r3, #32]
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	f003 031f 	and.w	r3, r3, #31
 8007c52:	6879      	ldr	r1, [r7, #4]
 8007c54:	fa01 f303 	lsl.w	r3, r1, r3
 8007c58:	431a      	orrs	r2, r3
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	621a      	str	r2, [r3, #32]
}
 8007c5e:	bf00      	nop
 8007c60:	371c      	adds	r7, #28
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b085      	sub	sp, #20
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d101      	bne.n	8007c82 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c7e:	2302      	movs	r3, #2
 8007c80:	e032      	b.n	8007ce8 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2202      	movs	r2, #2
 8007c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cba:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d101      	bne.n	8007d10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	e03d      	b.n	8007d8c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	695b      	ldr	r3, [r3, #20]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	69db      	ldr	r3, [r3, #28]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <__libc_init_array>:
 8007d98:	b570      	push	{r4, r5, r6, lr}
 8007d9a:	4e0d      	ldr	r6, [pc, #52]	; (8007dd0 <__libc_init_array+0x38>)
 8007d9c:	4c0d      	ldr	r4, [pc, #52]	; (8007dd4 <__libc_init_array+0x3c>)
 8007d9e:	1ba4      	subs	r4, r4, r6
 8007da0:	10a4      	asrs	r4, r4, #2
 8007da2:	2500      	movs	r5, #0
 8007da4:	42a5      	cmp	r5, r4
 8007da6:	d109      	bne.n	8007dbc <__libc_init_array+0x24>
 8007da8:	4e0b      	ldr	r6, [pc, #44]	; (8007dd8 <__libc_init_array+0x40>)
 8007daa:	4c0c      	ldr	r4, [pc, #48]	; (8007ddc <__libc_init_array+0x44>)
 8007dac:	f000 fa96 	bl	80082dc <_init>
 8007db0:	1ba4      	subs	r4, r4, r6
 8007db2:	10a4      	asrs	r4, r4, #2
 8007db4:	2500      	movs	r5, #0
 8007db6:	42a5      	cmp	r5, r4
 8007db8:	d105      	bne.n	8007dc6 <__libc_init_array+0x2e>
 8007dba:	bd70      	pop	{r4, r5, r6, pc}
 8007dbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007dc0:	4798      	blx	r3
 8007dc2:	3501      	adds	r5, #1
 8007dc4:	e7ee      	b.n	8007da4 <__libc_init_array+0xc>
 8007dc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007dca:	4798      	blx	r3
 8007dcc:	3501      	adds	r5, #1
 8007dce:	e7f2      	b.n	8007db6 <__libc_init_array+0x1e>
 8007dd0:	08009f58 	.word	0x08009f58
 8007dd4:	08009f58 	.word	0x08009f58
 8007dd8:	08009f58 	.word	0x08009f58
 8007ddc:	08009f5c 	.word	0x08009f5c

08007de0 <memcpy>:
 8007de0:	b510      	push	{r4, lr}
 8007de2:	1e43      	subs	r3, r0, #1
 8007de4:	440a      	add	r2, r1
 8007de6:	4291      	cmp	r1, r2
 8007de8:	d100      	bne.n	8007dec <memcpy+0xc>
 8007dea:	bd10      	pop	{r4, pc}
 8007dec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007df0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007df4:	e7f7      	b.n	8007de6 <memcpy+0x6>

08007df6 <memset>:
 8007df6:	4402      	add	r2, r0
 8007df8:	4603      	mov	r3, r0
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d100      	bne.n	8007e00 <memset+0xa>
 8007dfe:	4770      	bx	lr
 8007e00:	f803 1b01 	strb.w	r1, [r3], #1
 8007e04:	e7f9      	b.n	8007dfa <memset+0x4>
	...

08007e08 <log>:
 8007e08:	b570      	push	{r4, r5, r6, lr}
 8007e0a:	ed2d 8b02 	vpush	{d8}
 8007e0e:	b08a      	sub	sp, #40	; 0x28
 8007e10:	ec55 4b10 	vmov	r4, r5, d0
 8007e14:	f000 f878 	bl	8007f08 <__ieee754_log>
 8007e18:	4b36      	ldr	r3, [pc, #216]	; (8007ef4 <log+0xec>)
 8007e1a:	eeb0 8a40 	vmov.f32	s16, s0
 8007e1e:	eef0 8a60 	vmov.f32	s17, s1
 8007e22:	f993 6000 	ldrsb.w	r6, [r3]
 8007e26:	1c73      	adds	r3, r6, #1
 8007e28:	d05b      	beq.n	8007ee2 <log+0xda>
 8007e2a:	4622      	mov	r2, r4
 8007e2c:	462b      	mov	r3, r5
 8007e2e:	4620      	mov	r0, r4
 8007e30:	4629      	mov	r1, r5
 8007e32:	f7f8 fe47 	bl	8000ac4 <__aeabi_dcmpun>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	d153      	bne.n	8007ee2 <log+0xda>
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	4620      	mov	r0, r4
 8007e40:	4629      	mov	r1, r5
 8007e42:	f7f8 fe35 	bl	8000ab0 <__aeabi_dcmpgt>
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d14b      	bne.n	8007ee2 <log+0xda>
 8007e4a:	4b2b      	ldr	r3, [pc, #172]	; (8007ef8 <log+0xf0>)
 8007e4c:	9301      	str	r3, [sp, #4]
 8007e4e:	9008      	str	r0, [sp, #32]
 8007e50:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007e54:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007e58:	b9a6      	cbnz	r6, 8007e84 <log+0x7c>
 8007e5a:	4b28      	ldr	r3, [pc, #160]	; (8007efc <log+0xf4>)
 8007e5c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007e60:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007e64:	4620      	mov	r0, r4
 8007e66:	2200      	movs	r2, #0
 8007e68:	2300      	movs	r3, #0
 8007e6a:	4629      	mov	r1, r5
 8007e6c:	f7f8 fdf8 	bl	8000a60 <__aeabi_dcmpeq>
 8007e70:	bb40      	cbnz	r0, 8007ec4 <log+0xbc>
 8007e72:	2301      	movs	r3, #1
 8007e74:	2e02      	cmp	r6, #2
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	d119      	bne.n	8007eae <log+0xa6>
 8007e7a:	f000 fa29 	bl	80082d0 <__errno>
 8007e7e:	2321      	movs	r3, #33	; 0x21
 8007e80:	6003      	str	r3, [r0, #0]
 8007e82:	e019      	b.n	8007eb8 <log+0xb0>
 8007e84:	4b1e      	ldr	r3, [pc, #120]	; (8007f00 <log+0xf8>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	2200      	movs	r2, #0
 8007e90:	2300      	movs	r3, #0
 8007e92:	4629      	mov	r1, r5
 8007e94:	f7f8 fde4 	bl	8000a60 <__aeabi_dcmpeq>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	d0ea      	beq.n	8007e72 <log+0x6a>
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	429e      	cmp	r6, r3
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	d111      	bne.n	8007ec8 <log+0xc0>
 8007ea4:	f000 fa14 	bl	80082d0 <__errno>
 8007ea8:	2322      	movs	r3, #34	; 0x22
 8007eaa:	6003      	str	r3, [r0, #0]
 8007eac:	e011      	b.n	8007ed2 <log+0xca>
 8007eae:	4668      	mov	r0, sp
 8007eb0:	f000 fa02 	bl	80082b8 <matherr>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	d0e0      	beq.n	8007e7a <log+0x72>
 8007eb8:	4812      	ldr	r0, [pc, #72]	; (8007f04 <log+0xfc>)
 8007eba:	f000 fa01 	bl	80082c0 <nan>
 8007ebe:	ed8d 0b06 	vstr	d0, [sp, #24]
 8007ec2:	e006      	b.n	8007ed2 <log+0xca>
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	4668      	mov	r0, sp
 8007eca:	f000 f9f5 	bl	80082b8 <matherr>
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	d0e8      	beq.n	8007ea4 <log+0x9c>
 8007ed2:	9b08      	ldr	r3, [sp, #32]
 8007ed4:	b11b      	cbz	r3, 8007ede <log+0xd6>
 8007ed6:	f000 f9fb 	bl	80082d0 <__errno>
 8007eda:	9b08      	ldr	r3, [sp, #32]
 8007edc:	6003      	str	r3, [r0, #0]
 8007ede:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007ee2:	eeb0 0a48 	vmov.f32	s0, s16
 8007ee6:	eef0 0a68 	vmov.f32	s1, s17
 8007eea:	b00a      	add	sp, #40	; 0x28
 8007eec:	ecbd 8b02 	vpop	{d8}
 8007ef0:	bd70      	pop	{r4, r5, r6, pc}
 8007ef2:	bf00      	nop
 8007ef4:	200003d5 	.word	0x200003d5
 8007ef8:	08009f4c 	.word	0x08009f4c
 8007efc:	c7efffff 	.word	0xc7efffff
 8007f00:	fff00000 	.word	0xfff00000
 8007f04:	08009f4f 	.word	0x08009f4f

08007f08 <__ieee754_log>:
 8007f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0c:	ec51 0b10 	vmov	r0, r1, d0
 8007f10:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007f14:	b087      	sub	sp, #28
 8007f16:	ee10 3a10 	vmov	r3, s0
 8007f1a:	460d      	mov	r5, r1
 8007f1c:	da27      	bge.n	8007f6e <__ieee754_log+0x66>
 8007f1e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007f22:	4313      	orrs	r3, r2
 8007f24:	d10a      	bne.n	8007f3c <__ieee754_log+0x34>
 8007f26:	49cc      	ldr	r1, [pc, #816]	; (8008258 <__ieee754_log+0x350>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	f7f8 fc59 	bl	80007e4 <__aeabi_ddiv>
 8007f32:	ec41 0b10 	vmov	d0, r0, r1
 8007f36:	b007      	add	sp, #28
 8007f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f3c:	2900      	cmp	r1, #0
 8007f3e:	da07      	bge.n	8007f50 <__ieee754_log+0x48>
 8007f40:	ee10 2a10 	vmov	r2, s0
 8007f44:	460b      	mov	r3, r1
 8007f46:	f7f8 f96f 	bl	8000228 <__aeabi_dsub>
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	e7ee      	b.n	8007f2e <__ieee754_log+0x26>
 8007f50:	4bc2      	ldr	r3, [pc, #776]	; (800825c <__ieee754_log+0x354>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	f7f8 fb1c 	bl	8000590 <__aeabi_dmul>
 8007f58:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8007f5c:	460d      	mov	r5, r1
 8007f5e:	4ac0      	ldr	r2, [pc, #768]	; (8008260 <__ieee754_log+0x358>)
 8007f60:	4295      	cmp	r5, r2
 8007f62:	dd06      	ble.n	8007f72 <__ieee754_log+0x6a>
 8007f64:	4602      	mov	r2, r0
 8007f66:	460b      	mov	r3, r1
 8007f68:	f7f8 f960 	bl	800022c <__adddf3>
 8007f6c:	e7e1      	b.n	8007f32 <__ieee754_log+0x2a>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	e7f5      	b.n	8007f5e <__ieee754_log+0x56>
 8007f72:	152c      	asrs	r4, r5, #20
 8007f74:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007f78:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007f7c:	441c      	add	r4, r3
 8007f7e:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8007f82:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8007f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f8a:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8007f8e:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8007f92:	ea42 0105 	orr.w	r1, r2, r5
 8007f96:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	4bb1      	ldr	r3, [pc, #708]	; (8008264 <__ieee754_log+0x35c>)
 8007f9e:	f7f8 f943 	bl	8000228 <__aeabi_dsub>
 8007fa2:	1cab      	adds	r3, r5, #2
 8007fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	4682      	mov	sl, r0
 8007fac:	468b      	mov	fp, r1
 8007fae:	f04f 0200 	mov.w	r2, #0
 8007fb2:	dc5b      	bgt.n	800806c <__ieee754_log+0x164>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	f7f8 fd53 	bl	8000a60 <__aeabi_dcmpeq>
 8007fba:	b1d0      	cbz	r0, 8007ff2 <__ieee754_log+0xea>
 8007fbc:	2c00      	cmp	r4, #0
 8007fbe:	f000 8170 	beq.w	80082a2 <__ieee754_log+0x39a>
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f7f8 fa7e 	bl	80004c4 <__aeabi_i2d>
 8007fc8:	a38f      	add	r3, pc, #572	; (adr r3, 8008208 <__ieee754_log+0x300>)
 8007fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fce:	4606      	mov	r6, r0
 8007fd0:	460f      	mov	r7, r1
 8007fd2:	f7f8 fadd 	bl	8000590 <__aeabi_dmul>
 8007fd6:	a38e      	add	r3, pc, #568	; (adr r3, 8008210 <__ieee754_log+0x308>)
 8007fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fdc:	4604      	mov	r4, r0
 8007fde:	460d      	mov	r5, r1
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	4639      	mov	r1, r7
 8007fe4:	f7f8 fad4 	bl	8000590 <__aeabi_dmul>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	460b      	mov	r3, r1
 8007fec:	4620      	mov	r0, r4
 8007fee:	4629      	mov	r1, r5
 8007ff0:	e7ba      	b.n	8007f68 <__ieee754_log+0x60>
 8007ff2:	a389      	add	r3, pc, #548	; (adr r3, 8008218 <__ieee754_log+0x310>)
 8007ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff8:	4650      	mov	r0, sl
 8007ffa:	4659      	mov	r1, fp
 8007ffc:	f7f8 fac8 	bl	8000590 <__aeabi_dmul>
 8008000:	4602      	mov	r2, r0
 8008002:	460b      	mov	r3, r1
 8008004:	2000      	movs	r0, #0
 8008006:	4998      	ldr	r1, [pc, #608]	; (8008268 <__ieee754_log+0x360>)
 8008008:	f7f8 f90e 	bl	8000228 <__aeabi_dsub>
 800800c:	4652      	mov	r2, sl
 800800e:	4606      	mov	r6, r0
 8008010:	460f      	mov	r7, r1
 8008012:	465b      	mov	r3, fp
 8008014:	4650      	mov	r0, sl
 8008016:	4659      	mov	r1, fp
 8008018:	f7f8 faba 	bl	8000590 <__aeabi_dmul>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	4630      	mov	r0, r6
 8008022:	4639      	mov	r1, r7
 8008024:	f7f8 fab4 	bl	8000590 <__aeabi_dmul>
 8008028:	4606      	mov	r6, r0
 800802a:	460f      	mov	r7, r1
 800802c:	b934      	cbnz	r4, 800803c <__ieee754_log+0x134>
 800802e:	4602      	mov	r2, r0
 8008030:	460b      	mov	r3, r1
 8008032:	4650      	mov	r0, sl
 8008034:	4659      	mov	r1, fp
 8008036:	f7f8 f8f7 	bl	8000228 <__aeabi_dsub>
 800803a:	e77a      	b.n	8007f32 <__ieee754_log+0x2a>
 800803c:	4620      	mov	r0, r4
 800803e:	f7f8 fa41 	bl	80004c4 <__aeabi_i2d>
 8008042:	a371      	add	r3, pc, #452	; (adr r3, 8008208 <__ieee754_log+0x300>)
 8008044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008048:	4680      	mov	r8, r0
 800804a:	4689      	mov	r9, r1
 800804c:	f7f8 faa0 	bl	8000590 <__aeabi_dmul>
 8008050:	a36f      	add	r3, pc, #444	; (adr r3, 8008210 <__ieee754_log+0x308>)
 8008052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008056:	4604      	mov	r4, r0
 8008058:	460d      	mov	r5, r1
 800805a:	4640      	mov	r0, r8
 800805c:	4649      	mov	r1, r9
 800805e:	f7f8 fa97 	bl	8000590 <__aeabi_dmul>
 8008062:	4602      	mov	r2, r0
 8008064:	460b      	mov	r3, r1
 8008066:	4630      	mov	r0, r6
 8008068:	4639      	mov	r1, r7
 800806a:	e0b2      	b.n	80081d2 <__ieee754_log+0x2ca>
 800806c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008070:	f7f8 f8dc 	bl	800022c <__adddf3>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	4650      	mov	r0, sl
 800807a:	4659      	mov	r1, fp
 800807c:	f7f8 fbb2 	bl	80007e4 <__aeabi_ddiv>
 8008080:	e9cd 0100 	strd	r0, r1, [sp]
 8008084:	4620      	mov	r0, r4
 8008086:	f7f8 fa1d 	bl	80004c4 <__aeabi_i2d>
 800808a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800808e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008092:	4610      	mov	r0, r2
 8008094:	4619      	mov	r1, r3
 8008096:	f7f8 fa7b 	bl	8000590 <__aeabi_dmul>
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080a2:	f7f8 fa75 	bl	8000590 <__aeabi_dmul>
 80080a6:	a35e      	add	r3, pc, #376	; (adr r3, 8008220 <__ieee754_log+0x318>)
 80080a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ac:	4606      	mov	r6, r0
 80080ae:	460f      	mov	r7, r1
 80080b0:	f7f8 fa6e 	bl	8000590 <__aeabi_dmul>
 80080b4:	a35c      	add	r3, pc, #368	; (adr r3, 8008228 <__ieee754_log+0x320>)
 80080b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ba:	f7f8 f8b7 	bl	800022c <__adddf3>
 80080be:	4632      	mov	r2, r6
 80080c0:	463b      	mov	r3, r7
 80080c2:	f7f8 fa65 	bl	8000590 <__aeabi_dmul>
 80080c6:	a35a      	add	r3, pc, #360	; (adr r3, 8008230 <__ieee754_log+0x328>)
 80080c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080cc:	f7f8 f8ae 	bl	800022c <__adddf3>
 80080d0:	4632      	mov	r2, r6
 80080d2:	463b      	mov	r3, r7
 80080d4:	f7f8 fa5c 	bl	8000590 <__aeabi_dmul>
 80080d8:	a357      	add	r3, pc, #348	; (adr r3, 8008238 <__ieee754_log+0x330>)
 80080da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080de:	f7f8 f8a5 	bl	800022c <__adddf3>
 80080e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080e6:	f7f8 fa53 	bl	8000590 <__aeabi_dmul>
 80080ea:	a355      	add	r3, pc, #340	; (adr r3, 8008240 <__ieee754_log+0x338>)
 80080ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080f4:	4630      	mov	r0, r6
 80080f6:	4639      	mov	r1, r7
 80080f8:	f7f8 fa4a 	bl	8000590 <__aeabi_dmul>
 80080fc:	a352      	add	r3, pc, #328	; (adr r3, 8008248 <__ieee754_log+0x340>)
 80080fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008102:	f7f8 f893 	bl	800022c <__adddf3>
 8008106:	4632      	mov	r2, r6
 8008108:	463b      	mov	r3, r7
 800810a:	f7f8 fa41 	bl	8000590 <__aeabi_dmul>
 800810e:	a350      	add	r3, pc, #320	; (adr r3, 8008250 <__ieee754_log+0x348>)
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	f7f8 f88a 	bl	800022c <__adddf3>
 8008118:	4632      	mov	r2, r6
 800811a:	463b      	mov	r3, r7
 800811c:	f7f8 fa38 	bl	8000590 <__aeabi_dmul>
 8008120:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800812c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008130:	f7f8 f87c 	bl	800022c <__adddf3>
 8008134:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 8008138:	3551      	adds	r5, #81	; 0x51
 800813a:	ea45 0508 	orr.w	r5, r5, r8
 800813e:	2d00      	cmp	r5, #0
 8008140:	4606      	mov	r6, r0
 8008142:	460f      	mov	r7, r1
 8008144:	dd50      	ble.n	80081e8 <__ieee754_log+0x2e0>
 8008146:	2200      	movs	r2, #0
 8008148:	4b47      	ldr	r3, [pc, #284]	; (8008268 <__ieee754_log+0x360>)
 800814a:	4650      	mov	r0, sl
 800814c:	4659      	mov	r1, fp
 800814e:	f7f8 fa1f 	bl	8000590 <__aeabi_dmul>
 8008152:	4652      	mov	r2, sl
 8008154:	465b      	mov	r3, fp
 8008156:	f7f8 fa1b 	bl	8000590 <__aeabi_dmul>
 800815a:	4680      	mov	r8, r0
 800815c:	4689      	mov	r9, r1
 800815e:	b994      	cbnz	r4, 8008186 <__ieee754_log+0x27e>
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	4630      	mov	r0, r6
 8008166:	4639      	mov	r1, r7
 8008168:	f7f8 f860 	bl	800022c <__adddf3>
 800816c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008170:	f7f8 fa0e 	bl	8000590 <__aeabi_dmul>
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	4640      	mov	r0, r8
 800817a:	4649      	mov	r1, r9
 800817c:	f7f8 f854 	bl	8000228 <__aeabi_dsub>
 8008180:	4602      	mov	r2, r0
 8008182:	460b      	mov	r3, r1
 8008184:	e755      	b.n	8008032 <__ieee754_log+0x12a>
 8008186:	a320      	add	r3, pc, #128	; (adr r3, 8008208 <__ieee754_log+0x300>)
 8008188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008190:	f7f8 f9fe 	bl	8000590 <__aeabi_dmul>
 8008194:	4642      	mov	r2, r8
 8008196:	464b      	mov	r3, r9
 8008198:	4604      	mov	r4, r0
 800819a:	460d      	mov	r5, r1
 800819c:	4630      	mov	r0, r6
 800819e:	4639      	mov	r1, r7
 80081a0:	f7f8 f844 	bl	800022c <__adddf3>
 80081a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081a8:	f7f8 f9f2 	bl	8000590 <__aeabi_dmul>
 80081ac:	a318      	add	r3, pc, #96	; (adr r3, 8008210 <__ieee754_log+0x308>)
 80081ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b2:	4606      	mov	r6, r0
 80081b4:	460f      	mov	r7, r1
 80081b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081ba:	f7f8 f9e9 	bl	8000590 <__aeabi_dmul>
 80081be:	4602      	mov	r2, r0
 80081c0:	460b      	mov	r3, r1
 80081c2:	4630      	mov	r0, r6
 80081c4:	4639      	mov	r1, r7
 80081c6:	f7f8 f831 	bl	800022c <__adddf3>
 80081ca:	4602      	mov	r2, r0
 80081cc:	460b      	mov	r3, r1
 80081ce:	4640      	mov	r0, r8
 80081d0:	4649      	mov	r1, r9
 80081d2:	f7f8 f829 	bl	8000228 <__aeabi_dsub>
 80081d6:	4652      	mov	r2, sl
 80081d8:	465b      	mov	r3, fp
 80081da:	f7f8 f825 	bl	8000228 <__aeabi_dsub>
 80081de:	4602      	mov	r2, r0
 80081e0:	460b      	mov	r3, r1
 80081e2:	4620      	mov	r0, r4
 80081e4:	4629      	mov	r1, r5
 80081e6:	e726      	b.n	8008036 <__ieee754_log+0x12e>
 80081e8:	2c00      	cmp	r4, #0
 80081ea:	d13f      	bne.n	800826c <__ieee754_log+0x364>
 80081ec:	4602      	mov	r2, r0
 80081ee:	460b      	mov	r3, r1
 80081f0:	4650      	mov	r0, sl
 80081f2:	4659      	mov	r1, fp
 80081f4:	f7f8 f818 	bl	8000228 <__aeabi_dsub>
 80081f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081fc:	f7f8 f9c8 	bl	8000590 <__aeabi_dmul>
 8008200:	e7be      	b.n	8008180 <__ieee754_log+0x278>
 8008202:	bf00      	nop
 8008204:	f3af 8000 	nop.w
 8008208:	fee00000 	.word	0xfee00000
 800820c:	3fe62e42 	.word	0x3fe62e42
 8008210:	35793c76 	.word	0x35793c76
 8008214:	3dea39ef 	.word	0x3dea39ef
 8008218:	55555555 	.word	0x55555555
 800821c:	3fd55555 	.word	0x3fd55555
 8008220:	df3e5244 	.word	0xdf3e5244
 8008224:	3fc2f112 	.word	0x3fc2f112
 8008228:	96cb03de 	.word	0x96cb03de
 800822c:	3fc74664 	.word	0x3fc74664
 8008230:	94229359 	.word	0x94229359
 8008234:	3fd24924 	.word	0x3fd24924
 8008238:	55555593 	.word	0x55555593
 800823c:	3fe55555 	.word	0x3fe55555
 8008240:	d078c69f 	.word	0xd078c69f
 8008244:	3fc39a09 	.word	0x3fc39a09
 8008248:	1d8e78af 	.word	0x1d8e78af
 800824c:	3fcc71c5 	.word	0x3fcc71c5
 8008250:	9997fa04 	.word	0x9997fa04
 8008254:	3fd99999 	.word	0x3fd99999
 8008258:	c3500000 	.word	0xc3500000
 800825c:	43500000 	.word	0x43500000
 8008260:	7fefffff 	.word	0x7fefffff
 8008264:	3ff00000 	.word	0x3ff00000
 8008268:	3fe00000 	.word	0x3fe00000
 800826c:	a30e      	add	r3, pc, #56	; (adr r3, 80082a8 <__ieee754_log+0x3a0>)
 800826e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008272:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008276:	f7f8 f98b 	bl	8000590 <__aeabi_dmul>
 800827a:	4632      	mov	r2, r6
 800827c:	463b      	mov	r3, r7
 800827e:	4604      	mov	r4, r0
 8008280:	460d      	mov	r5, r1
 8008282:	4650      	mov	r0, sl
 8008284:	4659      	mov	r1, fp
 8008286:	f7f7 ffcf 	bl	8000228 <__aeabi_dsub>
 800828a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800828e:	f7f8 f97f 	bl	8000590 <__aeabi_dmul>
 8008292:	a307      	add	r3, pc, #28	; (adr r3, 80082b0 <__ieee754_log+0x3a8>)
 8008294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008298:	4606      	mov	r6, r0
 800829a:	460f      	mov	r7, r1
 800829c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082a0:	e6dd      	b.n	800805e <__ieee754_log+0x156>
 80082a2:	2000      	movs	r0, #0
 80082a4:	2100      	movs	r1, #0
 80082a6:	e644      	b.n	8007f32 <__ieee754_log+0x2a>
 80082a8:	fee00000 	.word	0xfee00000
 80082ac:	3fe62e42 	.word	0x3fe62e42
 80082b0:	35793c76 	.word	0x35793c76
 80082b4:	3dea39ef 	.word	0x3dea39ef

080082b8 <matherr>:
 80082b8:	2000      	movs	r0, #0
 80082ba:	4770      	bx	lr
 80082bc:	0000      	movs	r0, r0
	...

080082c0 <nan>:
 80082c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80082c8 <nan+0x8>
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	00000000 	.word	0x00000000
 80082cc:	7ff80000 	.word	0x7ff80000

080082d0 <__errno>:
 80082d0:	4b01      	ldr	r3, [pc, #4]	; (80082d8 <__errno+0x8>)
 80082d2:	6818      	ldr	r0, [r3, #0]
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	200003d8 	.word	0x200003d8

080082dc <_init>:
 80082dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082de:	bf00      	nop
 80082e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082e2:	bc08      	pop	{r3}
 80082e4:	469e      	mov	lr, r3
 80082e6:	4770      	bx	lr

080082e8 <_fini>:
 80082e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ea:	bf00      	nop
 80082ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ee:	bc08      	pop	{r3}
 80082f0:	469e      	mov	lr, r3
 80082f2:	4770      	bx	lr
