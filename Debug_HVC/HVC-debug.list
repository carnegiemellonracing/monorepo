
HVC-debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001dc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c078  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f24  0800c258  0800c258  0001c258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e17c  0800e17c  0001e17c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e184  0800e184  0001e184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e188  0800e188  0001e188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001bc  20000000  0800e18c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00034498  200001bc  0800e348  000201bc  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20034654  0800e348  00024654  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d630  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000545e  00000000  00000000  0003d81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001718  00000000  00000000  00042c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000014d0  00000000  00000000  00044398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00025bd4  00000000  00000000  00045868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f733  00000000  00000000  0006b43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d6df7  00000000  00000000  0008ab6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00161966  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005c4c  00000000  00000000  001619b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001bc 	.word	0x200001bc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c240 	.word	0x0800c240

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001c0 	.word	0x200001c0
 800021c:	0800c240 	.word	0x0800c240

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2iz>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009c4:	d215      	bcs.n	80009f2 <__aeabi_d2iz+0x36>
 80009c6:	d511      	bpl.n	80009ec <__aeabi_d2iz+0x30>
 80009c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d0:	d912      	bls.n	80009f8 <__aeabi_d2iz+0x3c>
 80009d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009e2:	fa23 f002 	lsr.w	r0, r3, r2
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d105      	bne.n	8000a04 <__aeabi_d2iz+0x48>
 80009f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	bf08      	it	eq
 80009fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a02:	4770      	bx	lr
 8000a04:	f04f 0000 	mov.w	r0, #0
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b974 	b.w	8000d0c <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	4604      	mov	r4, r0
 8000a44:	468e      	mov	lr, r1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d14d      	bne.n	8000ae6 <__udivmoddi4+0xaa>
 8000a4a:	428a      	cmp	r2, r1
 8000a4c:	4694      	mov	ip, r2
 8000a4e:	d969      	bls.n	8000b24 <__udivmoddi4+0xe8>
 8000a50:	fab2 f282 	clz	r2, r2
 8000a54:	b152      	cbz	r2, 8000a6c <__udivmoddi4+0x30>
 8000a56:	fa01 f302 	lsl.w	r3, r1, r2
 8000a5a:	f1c2 0120 	rsb	r1, r2, #32
 8000a5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a66:	ea41 0e03 	orr.w	lr, r1, r3
 8000a6a:	4094      	lsls	r4, r2
 8000a6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a70:	0c21      	lsrs	r1, r4, #16
 8000a72:	fbbe f6f8 	udiv	r6, lr, r8
 8000a76:	fa1f f78c 	uxth.w	r7, ip
 8000a7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a82:	fb06 f107 	mul.w	r1, r6, r7
 8000a86:	4299      	cmp	r1, r3
 8000a88:	d90a      	bls.n	8000aa0 <__udivmoddi4+0x64>
 8000a8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a92:	f080 811f 	bcs.w	8000cd4 <__udivmoddi4+0x298>
 8000a96:	4299      	cmp	r1, r3
 8000a98:	f240 811c 	bls.w	8000cd4 <__udivmoddi4+0x298>
 8000a9c:	3e02      	subs	r6, #2
 8000a9e:	4463      	add	r3, ip
 8000aa0:	1a5b      	subs	r3, r3, r1
 8000aa2:	b2a4      	uxth	r4, r4
 8000aa4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab0:	fb00 f707 	mul.w	r7, r0, r7
 8000ab4:	42a7      	cmp	r7, r4
 8000ab6:	d90a      	bls.n	8000ace <__udivmoddi4+0x92>
 8000ab8:	eb1c 0404 	adds.w	r4, ip, r4
 8000abc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac0:	f080 810a 	bcs.w	8000cd8 <__udivmoddi4+0x29c>
 8000ac4:	42a7      	cmp	r7, r4
 8000ac6:	f240 8107 	bls.w	8000cd8 <__udivmoddi4+0x29c>
 8000aca:	4464      	add	r4, ip
 8000acc:	3802      	subs	r0, #2
 8000ace:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ad2:	1be4      	subs	r4, r4, r7
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	b11d      	cbz	r5, 8000ae0 <__udivmoddi4+0xa4>
 8000ad8:	40d4      	lsrs	r4, r2
 8000ada:	2300      	movs	r3, #0
 8000adc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d909      	bls.n	8000afe <__udivmoddi4+0xc2>
 8000aea:	2d00      	cmp	r5, #0
 8000aec:	f000 80ef 	beq.w	8000cce <__udivmoddi4+0x292>
 8000af0:	2600      	movs	r6, #0
 8000af2:	e9c5 0100 	strd	r0, r1, [r5]
 8000af6:	4630      	mov	r0, r6
 8000af8:	4631      	mov	r1, r6
 8000afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afe:	fab3 f683 	clz	r6, r3
 8000b02:	2e00      	cmp	r6, #0
 8000b04:	d14a      	bne.n	8000b9c <__udivmoddi4+0x160>
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d302      	bcc.n	8000b10 <__udivmoddi4+0xd4>
 8000b0a:	4282      	cmp	r2, r0
 8000b0c:	f200 80f9 	bhi.w	8000d02 <__udivmoddi4+0x2c6>
 8000b10:	1a84      	subs	r4, r0, r2
 8000b12:	eb61 0303 	sbc.w	r3, r1, r3
 8000b16:	2001      	movs	r0, #1
 8000b18:	469e      	mov	lr, r3
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d0e0      	beq.n	8000ae0 <__udivmoddi4+0xa4>
 8000b1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b22:	e7dd      	b.n	8000ae0 <__udivmoddi4+0xa4>
 8000b24:	b902      	cbnz	r2, 8000b28 <__udivmoddi4+0xec>
 8000b26:	deff      	udf	#255	; 0xff
 8000b28:	fab2 f282 	clz	r2, r2
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	f040 8092 	bne.w	8000c56 <__udivmoddi4+0x21a>
 8000b32:	eba1 010c 	sub.w	r1, r1, ip
 8000b36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3a:	fa1f fe8c 	uxth.w	lr, ip
 8000b3e:	2601      	movs	r6, #1
 8000b40:	0c20      	lsrs	r0, r4, #16
 8000b42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b46:	fb07 1113 	mls	r1, r7, r3, r1
 8000b4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b4e:	fb0e f003 	mul.w	r0, lr, r3
 8000b52:	4288      	cmp	r0, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x12c>
 8000b56:	eb1c 0101 	adds.w	r1, ip, r1
 8000b5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x12a>
 8000b60:	4288      	cmp	r0, r1
 8000b62:	f200 80cb 	bhi.w	8000cfc <__udivmoddi4+0x2c0>
 8000b66:	4643      	mov	r3, r8
 8000b68:	1a09      	subs	r1, r1, r0
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b70:	fb07 1110 	mls	r1, r7, r0, r1
 8000b74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b78:	fb0e fe00 	mul.w	lr, lr, r0
 8000b7c:	45a6      	cmp	lr, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x156>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x154>
 8000b8a:	45a6      	cmp	lr, r4
 8000b8c:	f200 80bb 	bhi.w	8000d06 <__udivmoddi4+0x2ca>
 8000b90:	4608      	mov	r0, r1
 8000b92:	eba4 040e 	sub.w	r4, r4, lr
 8000b96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b9a:	e79c      	b.n	8000ad6 <__udivmoddi4+0x9a>
 8000b9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ba0:	40b3      	lsls	r3, r6
 8000ba2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ba6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000baa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bae:	fa01 f306 	lsl.w	r3, r1, r6
 8000bb2:	431c      	orrs	r4, r3
 8000bb4:	40f9      	lsrs	r1, r7
 8000bb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bba:	fa00 f306 	lsl.w	r3, r0, r6
 8000bbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bc2:	0c20      	lsrs	r0, r4, #16
 8000bc4:	fa1f fe8c 	uxth.w	lr, ip
 8000bc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000bd4:	4288      	cmp	r0, r1
 8000bd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bda:	d90b      	bls.n	8000bf4 <__udivmoddi4+0x1b8>
 8000bdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000be0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000be4:	f080 8088 	bcs.w	8000cf8 <__udivmoddi4+0x2bc>
 8000be8:	4288      	cmp	r0, r1
 8000bea:	f240 8085 	bls.w	8000cf8 <__udivmoddi4+0x2bc>
 8000bee:	f1a8 0802 	sub.w	r8, r8, #2
 8000bf2:	4461      	add	r1, ip
 8000bf4:	1a09      	subs	r1, r1, r0
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000c00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c08:	458e      	cmp	lr, r1
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x1e2>
 8000c0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c14:	d26c      	bcs.n	8000cf0 <__udivmoddi4+0x2b4>
 8000c16:	458e      	cmp	lr, r1
 8000c18:	d96a      	bls.n	8000cf0 <__udivmoddi4+0x2b4>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4461      	add	r1, ip
 8000c1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c22:	fba0 9402 	umull	r9, r4, r0, r2
 8000c26:	eba1 010e 	sub.w	r1, r1, lr
 8000c2a:	42a1      	cmp	r1, r4
 8000c2c:	46c8      	mov	r8, r9
 8000c2e:	46a6      	mov	lr, r4
 8000c30:	d356      	bcc.n	8000ce0 <__udivmoddi4+0x2a4>
 8000c32:	d053      	beq.n	8000cdc <__udivmoddi4+0x2a0>
 8000c34:	b15d      	cbz	r5, 8000c4e <__udivmoddi4+0x212>
 8000c36:	ebb3 0208 	subs.w	r2, r3, r8
 8000c3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c42:	fa22 f306 	lsr.w	r3, r2, r6
 8000c46:	40f1      	lsrs	r1, r6
 8000c48:	431f      	orrs	r7, r3
 8000c4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c4e:	2600      	movs	r6, #0
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	40d8      	lsrs	r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	fa21 f303 	lsr.w	r3, r1, r3
 8000c64:	4091      	lsls	r1, r2
 8000c66:	4301      	orrs	r1, r0
 8000c68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6c:	fa1f fe8c 	uxth.w	lr, ip
 8000c70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c74:	fb07 3610 	mls	r6, r7, r0, r3
 8000c78:	0c0b      	lsrs	r3, r1, #16
 8000c7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c82:	429e      	cmp	r6, r3
 8000c84:	fa04 f402 	lsl.w	r4, r4, r2
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x260>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c92:	d22f      	bcs.n	8000cf4 <__udivmoddi4+0x2b8>
 8000c94:	429e      	cmp	r6, r3
 8000c96:	d92d      	bls.n	8000cf4 <__udivmoddi4+0x2b8>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	b289      	uxth	r1, r1
 8000ca0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ca4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ca8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cac:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb0:	428b      	cmp	r3, r1
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x28a>
 8000cb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cbc:	d216      	bcs.n	8000cec <__udivmoddi4+0x2b0>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d914      	bls.n	8000cec <__udivmoddi4+0x2b0>
 8000cc2:	3e02      	subs	r6, #2
 8000cc4:	4461      	add	r1, ip
 8000cc6:	1ac9      	subs	r1, r1, r3
 8000cc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ccc:	e738      	b.n	8000b40 <__udivmoddi4+0x104>
 8000cce:	462e      	mov	r6, r5
 8000cd0:	4628      	mov	r0, r5
 8000cd2:	e705      	b.n	8000ae0 <__udivmoddi4+0xa4>
 8000cd4:	4606      	mov	r6, r0
 8000cd6:	e6e3      	b.n	8000aa0 <__udivmoddi4+0x64>
 8000cd8:	4618      	mov	r0, r3
 8000cda:	e6f8      	b.n	8000ace <__udivmoddi4+0x92>
 8000cdc:	454b      	cmp	r3, r9
 8000cde:	d2a9      	bcs.n	8000c34 <__udivmoddi4+0x1f8>
 8000ce0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ce4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ce8:	3801      	subs	r0, #1
 8000cea:	e7a3      	b.n	8000c34 <__udivmoddi4+0x1f8>
 8000cec:	4646      	mov	r6, r8
 8000cee:	e7ea      	b.n	8000cc6 <__udivmoddi4+0x28a>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	e794      	b.n	8000c1e <__udivmoddi4+0x1e2>
 8000cf4:	4640      	mov	r0, r8
 8000cf6:	e7d1      	b.n	8000c9c <__udivmoddi4+0x260>
 8000cf8:	46d0      	mov	r8, sl
 8000cfa:	e77b      	b.n	8000bf4 <__udivmoddi4+0x1b8>
 8000cfc:	3b02      	subs	r3, #2
 8000cfe:	4461      	add	r1, ip
 8000d00:	e732      	b.n	8000b68 <__udivmoddi4+0x12c>
 8000d02:	4630      	mov	r0, r6
 8000d04:	e709      	b.n	8000b1a <__udivmoddi4+0xde>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	e742      	b.n	8000b92 <__udivmoddi4+0x156>

08000d0c <__aeabi_idiv0>:
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <setBMBErr>:
		{ 12657, 700 }, { 14281, 650 }, { 16112, 600 }, { 18146, 550 }, {
				20408, 500 }, { 22879, 450 }, { 25575, 400 },
		{ 28459, 350 }, { 31533, 300 }, { 34744, 250 }, { 38019, 200 }, {
				41331, 150 }, { 44621, 100 }, { 47792, 50 }, { 50833, 0 }, };

static void setBMBErr(uint8_t BMBIndex, BMB_I2C_Errs_t err) {
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	460a      	mov	r2, r1
 8000d1a:	71fb      	strb	r3, [r7, #7]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	71bb      	strb	r3, [r7, #6]
	if (BMBErrs[BMBIndex] == BMB_NO_ERR) {
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <setBMBErr+0x34>)
 8000d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d104      	bne.n	8000d36 <setBMBErr+0x26>
		BMBErrs[BMBIndex] = err;
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	79ba      	ldrb	r2, [r7, #6]
 8000d30:	4904      	ldr	r1, [pc, #16]	; (8000d44 <setBMBErr+0x34>)
 8000d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	2000588c 	.word	0x2000588c

08000d48 <adcOutputToVoltage>:

//takes in adc output and cell index to get voltage value
static int16_t adcOutputToVoltage(uint16_t ADC_val, int cell) {
 8000d48:	b5b0      	push	{r4, r5, r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	80fb      	strh	r3, [r7, #6]
	return ((ADC_val / 1023.0) * 4096) * resistorRatios[cell];
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fbb4 	bl	80004c4 <__aeabi_i2d>
 8000d5c:	a318      	add	r3, pc, #96	; (adr r3, 8000dc0 <adcOutputToVoltage+0x78>)
 8000d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d62:	f7ff fd43 	bl	80007ec <__aeabi_ddiv>
 8000d66:	4602      	mov	r2, r0
 8000d68:	460b      	mov	r3, r1
 8000d6a:	4610      	mov	r0, r2
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f04f 0200 	mov.w	r2, #0
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <adcOutputToVoltage+0x70>)
 8000d74:	f7ff fc10 	bl	8000598 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4614      	mov	r4, r2
 8000d7e:	461d      	mov	r5, r3
 8000d80:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <adcOutputToVoltage+0x74>)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fbac 	bl	80004e8 <__aeabi_f2d>
 8000d90:	4602      	mov	r2, r0
 8000d92:	460b      	mov	r3, r1
 8000d94:	4620      	mov	r0, r4
 8000d96:	4629      	mov	r1, r5
 8000d98:	f7ff fbfe 	bl	8000598 <__aeabi_dmul>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	460b      	mov	r3, r1
 8000da0:	4610      	mov	r0, r2
 8000da2:	4619      	mov	r1, r3
 8000da4:	f7ff fe0a 	bl	80009bc <__aeabi_d2iz>
 8000da8:	4603      	mov	r3, r0
 8000daa:	b21b      	sxth	r3, r3
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bdb0      	pop	{r4, r5, r7, pc}
 8000db4:	f3af 8000 	nop.w
 8000db8:	40b00000 	.word	0x40b00000
 8000dbc:	0800dfe0 	.word	0x0800dfe0
 8000dc0:	00000000 	.word	0x00000000
 8000dc4:	408ff800 	.word	0x408ff800

08000dc8 <lutTemp>:

// Returns temperature in 1/10th degC given ADC
// using LUT interpolation from the transfer function.
// See drive doc "18e CMR BMS Temperature Math" for LUT
static int16_t lutTemp(uint16_t ADC_lt) {
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80fb      	strh	r3, [r7, #6]
	// Check if input is out of LUT bounds
	// If so, return the boundary values
	if (ADC_lt < lut[0][0]) {
 8000dd2:	f242 2262 	movw	r2, #8802	; 0x2262
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d203      	bcs.n	8000de4 <lutTemp+0x1c>
		return lut[0][1];
 8000ddc:	f240 3352 	movw	r3, #850	; 0x352
 8000de0:	b21b      	sxth	r3, r3
 8000de2:	e05a      	b.n	8000e9a <lutTemp+0xd2>
	}
	if (ADC_lt > lut[LUT_SIZE - 1][0]) {
 8000de4:	2312      	movs	r3, #18
 8000de6:	3b01      	subs	r3, #1
 8000de8:	4a2f      	ldr	r2, [pc, #188]	; (8000ea8 <lutTemp+0xe0>)
 8000dea:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000dee:	88fa      	ldrh	r2, [r7, #6]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d907      	bls.n	8000e04 <lutTemp+0x3c>
		return lut[LUT_SIZE - 1][1];
 8000df4:	2312      	movs	r3, #18
 8000df6:	3b01      	subs	r3, #1
 8000df8:	4a2b      	ldr	r2, [pc, #172]	; (8000ea8 <lutTemp+0xe0>)
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	4413      	add	r3, r2
 8000dfe:	885b      	ldrh	r3, [r3, #2]
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	e04a      	b.n	8000e9a <lutTemp+0xd2>
	}

	// Modified LUT linear interpolation code from stack overflow
	uint8_t i;
	for (i = 0; i < LUT_SIZE - 1; ++i) {
 8000e04:	2300      	movs	r3, #0
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	e040      	b.n	8000e8c <lutTemp+0xc4>
		if (lut[i][0] <= ADC_lt && lut[i + 1][0] >= ADC_lt) {
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	4a26      	ldr	r2, [pc, #152]	; (8000ea8 <lutTemp+0xe0>)
 8000e0e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000e12:	88fa      	ldrh	r2, [r7, #6]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d336      	bcc.n	8000e86 <lutTemp+0xbe>
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	4a22      	ldr	r2, [pc, #136]	; (8000ea8 <lutTemp+0xe0>)
 8000e1e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000e22:	88fa      	ldrh	r2, [r7, #6]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d82e      	bhi.n	8000e86 <lutTemp+0xbe>
			// Target value is between two LUT points
			uint16_t diffADC = ADC_lt - lut[i][0];
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	4a1f      	ldr	r2, [pc, #124]	; (8000ea8 <lutTemp+0xe0>)
 8000e2c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000e30:	88fa      	ldrh	r2, [r7, #6]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	81bb      	strh	r3, [r7, #12]
			uint16_t diffLUT = lut[i + 1][0] - lut[i][0];
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	4a1b      	ldr	r2, [pc, #108]	; (8000ea8 <lutTemp+0xe0>)
 8000e3c:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	4919      	ldr	r1, [pc, #100]	; (8000ea8 <lutTemp+0xe0>)
 8000e44:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	817b      	strh	r3, [r7, #10]

			return lut[i][1] + ((lut[i + 1][1] - lut[i][1]) * diffADC) / diffLUT;
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	4a16      	ldr	r2, [pc, #88]	; (8000ea8 <lutTemp+0xe0>)
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	885a      	ldrh	r2, [r3, #2]
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	4913      	ldr	r1, [pc, #76]	; (8000ea8 <lutTemp+0xe0>)
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	440b      	add	r3, r1
 8000e60:	885b      	ldrh	r3, [r3, #2]
 8000e62:	4618      	mov	r0, r3
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	4910      	ldr	r1, [pc, #64]	; (8000ea8 <lutTemp+0xe0>)
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	885b      	ldrh	r3, [r3, #2]
 8000e6e:	1ac3      	subs	r3, r0, r3
 8000e70:	89b9      	ldrh	r1, [r7, #12]
 8000e72:	fb03 f101 	mul.w	r1, r3, r1
 8000e76:	897b      	ldrh	r3, [r7, #10]
 8000e78:	fb91 f3f3 	sdiv	r3, r1, r3
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	4413      	add	r3, r2
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	b21b      	sxth	r3, r3
 8000e84:	e009      	b.n	8000e9a <lutTemp+0xd2>
	for (i = 0; i < LUT_SIZE - 1; ++i) {
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	73fb      	strb	r3, [r7, #15]
 8000e8c:	7bfa      	ldrb	r2, [r7, #15]
 8000e8e:	2312      	movs	r3, #18
 8000e90:	3b01      	subs	r3, #1
 8000e92:	429a      	cmp	r2, r3
 8000e94:	dbb9      	blt.n	8000e0a <lutTemp+0x42>
		}
	}

	// Something went wrong, return max temp
	return 850;
 8000e96:	f240 3352 	movw	r3, #850	; 0x352
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	0800e004 	.word	0x0800e004

08000eac <updateBMBData>:


//update corresponding voltage or temperature reading
void updateBMBData(uint16_t val, uint8_t adcChannel, uint8_t muxChannel, uint8_t bmb) {
 8000eac:	b5b0      	push	{r4, r5, r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4604      	mov	r4, r0
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4623      	mov	r3, r4
 8000ebc:	80fb      	strh	r3, [r7, #6]
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	717b      	strb	r3, [r7, #5]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	713b      	strb	r3, [r7, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	70fb      	strb	r3, [r7, #3]
	ADC_Mux_Channel_t indexToUpdate = ADCChannelLookupArr[adcChannel][muxChannel];
 8000eca:	797a      	ldrb	r2, [r7, #5]
 8000ecc:	793b      	ldrb	r3, [r7, #4]
 8000ece:	492b      	ldr	r1, [pc, #172]	; (8000f7c <updateBMBData+0xd0>)
 8000ed0:	0092      	lsls	r2, r2, #2
 8000ed2:	440a      	add	r2, r1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	73fb      	strb	r3, [r7, #15]
	if(indexToUpdate <= CELL9) {
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	2b08      	cmp	r3, #8
 8000ede:	d82e      	bhi.n	8000f3e <updateBMBData+0x92>
		int16_t voltage = adcOutputToVoltage(val, indexToUpdate);
 8000ee0:	7bfa      	ldrb	r2, [r7, #15]
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff2e 	bl	8000d48 <adcOutputToVoltage>
 8000eec:	4603      	mov	r3, r0
 8000eee:	81bb      	strh	r3, [r7, #12]
		if (indexToUpdate == CELL1) {
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10a      	bne.n	8000f0c <updateBMBData+0x60>
		    BMBData[bmb].cellVoltages[0] = voltage;
 8000ef6:	78fa      	ldrb	r2, [r7, #3]
 8000ef8:	89b8      	ldrh	r0, [r7, #12]
 8000efa:	4921      	ldr	r1, [pc, #132]	; (8000f80 <updateBMBData+0xd4>)
 8000efc:	4613      	mov	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	440b      	add	r3, r1
 8000f06:	4602      	mov	r2, r0
 8000f08:	801a      	strh	r2, [r3, #0]
 8000f0a:	e018      	b.n	8000f3e <updateBMBData+0x92>
        } else {
            BMBData[bmb].cellVoltages[indexToUpdate] = voltage - BMBData[bmb].cellVoltages[indexToUpdate - 1];
 8000f0c:	89b8      	ldrh	r0, [r7, #12]
 8000f0e:	78fa      	ldrb	r2, [r7, #3]
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	1e59      	subs	r1, r3, #1
 8000f14:	4c1a      	ldr	r4, [pc, #104]	; (8000f80 <updateBMBData+0xd4>)
 8000f16:	4613      	mov	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	4413      	add	r3, r2
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	440b      	add	r3, r1
 8000f20:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8000f24:	78fa      	ldrb	r2, [r7, #3]
 8000f26:	7bf9      	ldrb	r1, [r7, #15]
 8000f28:	1ac3      	subs	r3, r0, r3
 8000f2a:	b29c      	uxth	r4, r3
 8000f2c:	4814      	ldr	r0, [pc, #80]	; (8000f80 <updateBMBData+0xd4>)
 8000f2e:	4613      	mov	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	440b      	add	r3, r1
 8000f38:	4622      	mov	r2, r4
 8000f3a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        }
	}
	if(CELL9 < indexToUpdate && indexToUpdate <= THERM15) {
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d917      	bls.n	8000f74 <updateBMBData+0xc8>
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	2b17      	cmp	r3, #23
 8000f48:	d814      	bhi.n	8000f74 <updateBMBData+0xc8>
		BMBData[bmb].cellTemperatures[indexToUpdate - THERM1] = lutTemp(val);
 8000f4a:	78fc      	ldrb	r4, [r7, #3]
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	f1a3 0509 	sub.w	r5, r3, #9
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff37 	bl	8000dc8 <lutTemp>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <updateBMBData+0xd4>)
 8000f60:	4623      	mov	r3, r4
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4423      	add	r3, r4
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	442b      	add	r3, r5
 8000f6a:	3308      	adds	r3, #8
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	460a      	mov	r2, r1
 8000f72:	805a      	strh	r2, [r3, #2]
	}
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	200001d8 	.word	0x200001d8

08000f84 <BMBInit>:
	for (int i = 0; i < NUM_BMBS; i++) {
		BMBTimeoutCount[i] = BMB_TIMEOUT;
	}
}

void BMBInit() {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
	// Period
	const TickType_t xPeriod = 1000 / BMB_SAMPLE_TASK_RATE;		// In ticks (ms)
 8000f8a:	23c8      	movs	r3, #200	; 0xc8
 8000f8c:	607b      	str	r3, [r7, #4]
	if (!i2cInit()) {
 8000f8e:	f001 f89f 	bl	80020d0 <i2cInit>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f083 0301 	eor.w	r3, r3, #1
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <BMBInit+0x20>
		cmr_panic("Couldn't initialize I2C BMB Chain");
 8000f9e:	4803      	ldr	r0, [pc, #12]	; (8000fac <BMBInit+0x28>)
 8000fa0:	f003 fceb 	bl	800497a <cmr_panic>
	}
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	0800c258 	.word	0x0800c258

08000fb0 <sampleOneBMB>:

bool sampleOneBMB(uint8_t BMBIndex, uint8_t BMBNum, uint8_t BMBSide) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	71bb      	strb	r3, [r7, #6]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	717b      	strb	r3, [r7, #5]
    if (!i2c_enableI2CMux(BMBNum, BMBSide)) {
 8000fc2:	797a      	ldrb	r2, [r7, #5]
 8000fc4:	79bb      	ldrb	r3, [r7, #6]
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f001 f93d 	bl	8002248 <i2c_enableI2CMux>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f083 0301 	eor.w	r3, r3, #1
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00e      	beq.n	8000ff8 <sampleOneBMB+0x48>
    	BMBTimeoutCount[BMBIndex]++;
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	4a58      	ldr	r2, [pc, #352]	; (8001140 <sampleOneBMB+0x190>)
 8000fde:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fe2:	3201      	adds	r2, #1
 8000fe4:	4956      	ldr	r1, [pc, #344]	; (8001140 <sampleOneBMB+0x190>)
 8000fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	setBMBErr(BMBIndex, BMB_ENABLE_I2C_MUX_ERR);
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2107      	movs	r1, #7
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fe8e 	bl	8000d10 <setBMBErr>
        return false;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	e09e      	b.n	8001136 <sampleOneBMB+0x186>
    }
    //select through each of the mux channels
    for (int channel = 0; channel < NUM_MUX_CHANNELS; channel++) {
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	e038      	b.n	8001070 <sampleOneBMB+0xc0>
        if (!i2c_select4MuxChannel(channel)) {
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f001 f9ae 	bl	8002364 <i2c_select4MuxChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	f083 0301 	eor.w	r3, r3, #1
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00e      	beq.n	8001032 <sampleOneBMB+0x82>
        	BMBTimeoutCount[BMBIndex]++;
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	4a4a      	ldr	r2, [pc, #296]	; (8001140 <sampleOneBMB+0x190>)
 8001018:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800101c:	3201      	adds	r2, #1
 800101e:	4948      	ldr	r1, [pc, #288]	; (8001140 <sampleOneBMB+0x190>)
 8001020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        	setBMBErr(BMBIndex, BMB_SEL_4_MUX_ERR);
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2109      	movs	r1, #9
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fe71 	bl	8000d10 <setBMBErr>
            return false;
 800102e:	2300      	movs	r3, #0
 8001030:	e081      	b.n	8001136 <sampleOneBMB+0x186>
        }
        // through each channel, input 8 adc channels
        if (!i2c_scanADC(BMBADCResponse[channel])) {
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	011b      	lsls	r3, r3, #4
 8001036:	4a43      	ldr	r2, [pc, #268]	; (8001144 <sampleOneBMB+0x194>)
 8001038:	4413      	add	r3, r2
 800103a:	4618      	mov	r0, r3
 800103c:	f001 fa12 	bl	8002464 <i2c_scanADC>
 8001040:	4603      	mov	r3, r0
 8001042:	f083 0301 	eor.w	r3, r3, #1
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00e      	beq.n	800106a <sampleOneBMB+0xba>
        	BMBTimeoutCount[BMBIndex]++;
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	4a3c      	ldr	r2, [pc, #240]	; (8001140 <sampleOneBMB+0x190>)
 8001050:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001054:	3201      	adds	r2, #1
 8001056:	493a      	ldr	r1, [pc, #232]	; (8001140 <sampleOneBMB+0x190>)
 8001058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        	setBMBErr(BMBIndex, BMB_SCAN_ADC_ERR);
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	210a      	movs	r1, #10
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fe55 	bl	8000d10 <setBMBErr>
            return false;
 8001066:	2300      	movs	r3, #0
 8001068:	e065      	b.n	8001136 <sampleOneBMB+0x186>
    for (int channel = 0; channel < NUM_MUX_CHANNELS; channel++) {
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	3301      	adds	r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2b03      	cmp	r3, #3
 8001074:	ddc3      	ble.n	8000ffe <sampleOneBMB+0x4e>
        }
    }
    // increment the counter or reset if we just flashed
    if (BMBFlashCounter >= LED_FLASH_COUNT) {
 8001076:	4b34      	ldr	r3, [pc, #208]	; (8001148 <sampleOneBMB+0x198>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2232      	movs	r2, #50	; 0x32
 800107c:	4293      	cmp	r3, r2
 800107e:	d31a      	bcc.n	80010b6 <sampleOneBMB+0x106>
        // we got to threshold, blink this BMB
        if (!i2c_selectMuxBlink()) {
 8001080:	f001 f99e 	bl	80023c0 <i2c_selectMuxBlink>
 8001084:	4603      	mov	r3, r0
 8001086:	f083 0301 	eor.w	r3, r3, #1
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00e      	beq.n	80010ae <sampleOneBMB+0xfe>
        	setBMBErr(BMBIndex, BMB_MUX_BLINK_ERR);
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	210b      	movs	r1, #11
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fe3b 	bl	8000d10 <setBMBErr>
        	BMBTimeoutCount[BMBIndex]++;
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	4a28      	ldr	r2, [pc, #160]	; (8001140 <sampleOneBMB+0x190>)
 800109e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010a2:	3201      	adds	r2, #1
 80010a4:	4926      	ldr	r1, [pc, #152]	; (8001140 <sampleOneBMB+0x190>)
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            return false;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e043      	b.n	8001136 <sampleOneBMB+0x186>
        }
        BMBFlashCounter = 0;
 80010ae:	4b26      	ldr	r3, [pc, #152]	; (8001148 <sampleOneBMB+0x198>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
 80010b4:	e005      	b.n	80010c2 <sampleOneBMB+0x112>
    } else {
        BMBFlashCounter++;
 80010b6:	4b24      	ldr	r3, [pc, #144]	; (8001148 <sampleOneBMB+0x198>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4b22      	ldr	r3, [pc, #136]	; (8001148 <sampleOneBMB+0x198>)
 80010c0:	701a      	strb	r2, [r3, #0]
    }
    if (!(i2c_disableI2CMux(BMBNum))) {
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f001 f913 	bl	80022f0 <i2c_disableI2CMux>
 80010ca:	4603      	mov	r3, r0
 80010cc:	f083 0301 	eor.w	r3, r3, #1
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00e      	beq.n	80010f4 <sampleOneBMB+0x144>
    	BMBTimeoutCount[BMBIndex]++;
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	4a19      	ldr	r2, [pc, #100]	; (8001140 <sampleOneBMB+0x190>)
 80010da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010de:	3201      	adds	r2, #1
 80010e0:	4917      	ldr	r1, [pc, #92]	; (8001140 <sampleOneBMB+0x190>)
 80010e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	setBMBErr(BMBIndex, BMB_DISABLE_I2C_MUX_ERR);
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	210c      	movs	r1, #12
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fe10 	bl	8000d10 <setBMBErr>
        return false;
 80010f0:	2300      	movs	r3, #0
 80010f2:	e020      	b.n	8001136 <sampleOneBMB+0x186>
    }
    uint8_t enabled, side;
    if (!i2c_readI2CMux(BMBNum, &enabled, &side) || enabled) {
 80010f4:	f107 020a 	add.w	r2, r7, #10
 80010f8:	f107 010b 	add.w	r1, r7, #11
 80010fc:	79bb      	ldrb	r3, [r7, #6]
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 f8c8 	bl	8002294 <i2c_readI2CMux>
 8001104:	4603      	mov	r3, r0
 8001106:	f083 0301 	eor.w	r3, r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <sampleOneBMB+0x166>
 8001110:	7afb      	ldrb	r3, [r7, #11]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00e      	beq.n	8001134 <sampleOneBMB+0x184>
    	BMBTimeoutCount[BMBIndex]++;
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	4a09      	ldr	r2, [pc, #36]	; (8001140 <sampleOneBMB+0x190>)
 800111a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800111e:	3201      	adds	r2, #1
 8001120:	4907      	ldr	r1, [pc, #28]	; (8001140 <sampleOneBMB+0x190>)
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	setBMBErr(BMBIndex, BMB_DISABLE_I2C_MUX_ERR);
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	210c      	movs	r1, #12
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fdf0 	bl	8000d10 <setBMBErr>
        return false;
 8001130:	2300      	movs	r3, #0
 8001132:	e000      	b.n	8001136 <sampleOneBMB+0x186>
    }
    return true;
 8001134:	2301      	movs	r3, #1
}
 8001136:	4618      	mov	r0, r3
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000584c 	.word	0x2000584c
 8001144:	200004d8 	.word	0x200004d8
 8001148:	20000518 	.word	0x20000518

0800114c <calculateOneBMB>:
	}
}

// calculate all the values for a single BMB
// this does converting to voltage, converting to temp, calculating avg
void calculateOneBMB(uint8_t BMBIndex) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
    for(int mux = 0; mux < NUM_MUX_CHANNELS; mux++) {
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	e01a      	b.n	8001192 <calculateOneBMB+0x46>
        for(int adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	e011      	b.n	8001186 <calculateOneBMB+0x3a>
            // convert each bmb response to voltage or temperature
            updateBMBData(BMBADCResponse[mux][adc], adc, mux, BMBIndex);
 8001162:	4910      	ldr	r1, [pc, #64]	; (80011a4 <calculateOneBMB+0x58>)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	00da      	lsls	r2, r3, #3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4413      	add	r3, r2
 800116c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001170:	b298      	uxth	r0, r3
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	b2d9      	uxtb	r1, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	b2da      	uxtb	r2, r3
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	f7ff fe96 	bl	8000eac <updateBMBData>
        for(int adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	3301      	adds	r3, #1
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	2b07      	cmp	r3, #7
 800118a:	ddea      	ble.n	8001162 <calculateOneBMB+0x16>
    for(int mux = 0; mux < NUM_MUX_CHANNELS; mux++) {
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	3301      	adds	r3, #1
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2b03      	cmp	r3, #3
 8001196:	dde1      	ble.n	800115c <calculateOneBMB+0x10>
        }
    }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200004d8 	.word	0x200004d8

080011a8 <vBMBSampleTask>:


void vBMBSampleTask(void *pvParameters) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

	BMBInit();
 80011b0:	f7ff fee8 	bl	8000f84 <BMBInit>

	// Previous wake time pointer
	TickType_t xLastWakeTime = xTaskGetTickCount();
 80011b4:	f005 f890 	bl	80062d8 <xTaskGetTickCount>
 80011b8:	4603      	mov	r3, r0
 80011ba:	60bb      	str	r3, [r7, #8]
	vTaskDelayUntil(&xLastWakeTime, 50);
 80011bc:	f107 0308 	add.w	r3, r7, #8
 80011c0:	2132      	movs	r1, #50	; 0x32
 80011c2:	4618      	mov	r0, r3
 80011c4:	f004 ff12 	bl	8005fec <vTaskDelayUntil>

	while (1) {
		for (uint8_t BMBIndex = 0; BMBIndex < 16; BMBIndex++) {//TODO: Change back to BMBIndex < NUM_BMBS
 80011c8:	2300      	movs	r3, #0
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	e03c      	b.n	8001248 <vBMBSampleTask+0xa0>
			//since we treat each BMB side as an individual bmb
			//we just check whether the current bmb index is odd/even
			//uint8_t BMBSide = BMBIndex % 2;
			uint8_t BMBSide = 1; // TODO: CHANGE THIS BACKs
 80011ce:	2301      	movs	r3, #1
 80011d0:	73bb      	strb	r3, [r7, #14]
			// our actual BMB number, the physical board
			//uint8_t BMBNum = BMBIndex / 2;
			uint8_t BMBNum = 0; // TODO: Change back
 80011d2:	2300      	movs	r3, #0
 80011d4:	737b      	strb	r3, [r7, #13]

			//Sample BMBs
			// Get interesting crashes in list.c:192 with critical
			//taskENTER_CRITICAL();
			// Sample a single BMB (number and side fully)
			if (!sampleOneBMB(0, BMBNum, BMBSide)) {
 80011d6:	7bba      	ldrb	r2, [r7, #14]
 80011d8:	7b7b      	ldrb	r3, [r7, #13]
 80011da:	4619      	mov	r1, r3
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff fee7 	bl	8000fb0 <sampleOneBMB>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f083 0301 	eor.w	r3, r3, #1
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d019      	beq.n	8001222 <vBMBSampleTask+0x7a>
				// there was an error, so reset mux
				BMBTimeoutCount[BMBIndex]++;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	4a1a      	ldr	r2, [pc, #104]	; (800125c <vBMBSampleTask+0xb4>)
 80011f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011f6:	3201      	adds	r2, #1
 80011f8:	4918      	ldr	r1, [pc, #96]	; (800125c <vBMBSampleTask+0xb4>)
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (!(i2c_disableI2CMux(0))) {
 80011fe:	2000      	movs	r0, #0
 8001200:	f001 f876 	bl	80022f0 <i2c_disableI2CMux>
 8001204:	4603      	mov	r3, r0
 8001206:	f083 0301 	eor.w	r3, r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00d      	beq.n	800122c <vBMBSampleTask+0x84>
					BMBTimeoutCount[BMBIndex]++;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	4a12      	ldr	r2, [pc, #72]	; (800125c <vBMBSampleTask+0xb4>)
 8001214:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001218:	3201      	adds	r2, #1
 800121a:	4910      	ldr	r1, [pc, #64]	; (800125c <vBMBSampleTask+0xb4>)
 800121c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001220:	e004      	b.n	800122c <vBMBSampleTask+0x84>
				}
			} else {
				BMBTimeoutCount[BMBIndex] = 0;
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <vBMBSampleTask+0xb4>)
 8001226:	2100      	movs	r1, #0
 8001228:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			//taskEXIT_CRITICAL();

			if(BMBTimeoutCount[BMBIndex] != 0) {
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	4a0b      	ldr	r2, [pc, #44]	; (800125c <vBMBSampleTask+0xb4>)
 8001230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d103      	bne.n	8001240 <vBMBSampleTask+0x98>
				// we had a timeout, continue onto next BMB
				continue;
			}

			// Calculate the values for this BMB
			calculateOneBMB(0);
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff ff87 	bl	800114c <calculateOneBMB>
 800123e:	e000      	b.n	8001242 <vBMBSampleTask+0x9a>
				continue;
 8001240:	bf00      	nop
		for (uint8_t BMBIndex = 0; BMBIndex < 16; BMBIndex++) {//TODO: Change back to BMBIndex < NUM_BMBS
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	3301      	adds	r3, #1
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	2b0f      	cmp	r3, #15
 800124c:	d9bf      	bls.n	80011ce <vBMBSampleTask+0x26>
			//doCellBalanceOneBMB(BMBIndex);

		} // end for loop
		//doCellBalanceAllBMBs();
		//TickType_t temp = xTaskGetTickCount();
		vTaskDelayUntil(&xLastWakeTime, BMB_SAMPLE_TASK_RATE);
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	2105      	movs	r1, #5
 8001254:	4618      	mov	r0, r3
 8001256:	f004 fec9 	bl	8005fec <vTaskDelayUntil>
		for (uint8_t BMBIndex = 0; BMBIndex < 16; BMBIndex++) {//TODO: Change back to BMBIndex < NUM_BMBS
 800125a:	e7b5      	b.n	80011c8 <vBMBSampleTask+0x20>
 800125c:	2000584c 	.word	0x2000584c

08001260 <getBMBMaxTempIndex>:
static int16_t linearTemp(uint16_t ADC_lt) {
	return (int16_t) ((-2 * ((int32_t) (uint32_t) ADC_lt)) / 117 + 860);
}

// Lookup functions
uint8_t getBMBMaxTempIndex(uint8_t bmb_index) {
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
	int16_t maxTemp = 0xFFFF;
 800126a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800126e:	81fb      	strh	r3, [r7, #14]
	uint8_t cell_index = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < TSENSE_CHANNELS_PER_BMB; i++) {
 8001274:	2300      	movs	r3, #0
 8001276:	733b      	strb	r3, [r7, #12]
 8001278:	e019      	b.n	80012ae <getBMBMaxTempIndex+0x4e>
		int16_t temp = BMBData[bmb_index].cellTemperatures[i];
 800127a:	79fa      	ldrb	r2, [r7, #7]
 800127c:	7b39      	ldrb	r1, [r7, #12]
 800127e:	4811      	ldr	r0, [pc, #68]	; (80012c4 <getBMBMaxTempIndex+0x64>)
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4413      	add	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	440b      	add	r3, r1
 800128a:	3308      	adds	r3, #8
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4403      	add	r3, r0
 8001290:	885b      	ldrh	r3, [r3, #2]
 8001292:	817b      	strh	r3, [r7, #10]
		if (temp > maxTemp) {
 8001294:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001298:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800129c:	429a      	cmp	r2, r3
 800129e:	dd03      	ble.n	80012a8 <getBMBMaxTempIndex+0x48>
			maxTemp = temp;
 80012a0:	897b      	ldrh	r3, [r7, #10]
 80012a2:	81fb      	strh	r3, [r7, #14]
			cell_index = i;
 80012a4:	7b3b      	ldrb	r3, [r7, #12]
 80012a6:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < TSENSE_CHANNELS_PER_BMB; i++) {
 80012a8:	7b3b      	ldrb	r3, [r7, #12]
 80012aa:	3301      	adds	r3, #1
 80012ac:	733b      	strb	r3, [r7, #12]
 80012ae:	7b3b      	ldrb	r3, [r7, #12]
 80012b0:	2b0e      	cmp	r3, #14
 80012b2:	d9e2      	bls.n	800127a <getBMBMaxTempIndex+0x1a>
		}
	}
	return cell_index;
 80012b4:	7b7b      	ldrb	r3, [r7, #13]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	200001d8 	.word	0x200001d8

080012c8 <getBMBMinTempIndex>:

uint8_t getBMBMinTempIndex(uint8_t bmb_index) {
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
	int16_t minTemp = 0x7FFF;
 80012d2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80012d6:	81fb      	strh	r3, [r7, #14]
	uint8_t cell_index = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < TSENSE_CHANNELS_PER_BMB; i++) {
 80012dc:	2300      	movs	r3, #0
 80012de:	733b      	strb	r3, [r7, #12]
 80012e0:	e019      	b.n	8001316 <getBMBMinTempIndex+0x4e>
		int16_t temp = BMBData[bmb_index].cellTemperatures[i];
 80012e2:	79fa      	ldrb	r2, [r7, #7]
 80012e4:	7b39      	ldrb	r1, [r7, #12]
 80012e6:	4811      	ldr	r0, [pc, #68]	; (800132c <getBMBMinTempIndex+0x64>)
 80012e8:	4613      	mov	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4413      	add	r3, r2
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	440b      	add	r3, r1
 80012f2:	3308      	adds	r3, #8
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4403      	add	r3, r0
 80012f8:	885b      	ldrh	r3, [r3, #2]
 80012fa:	817b      	strh	r3, [r7, #10]
		if (temp < minTemp) {
 80012fc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001300:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001304:	429a      	cmp	r2, r3
 8001306:	da03      	bge.n	8001310 <getBMBMinTempIndex+0x48>
			minTemp = temp;
 8001308:	897b      	ldrh	r3, [r7, #10]
 800130a:	81fb      	strh	r3, [r7, #14]
			cell_index = i;
 800130c:	7b3b      	ldrb	r3, [r7, #12]
 800130e:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < TSENSE_CHANNELS_PER_BMB; i++) {
 8001310:	7b3b      	ldrb	r3, [r7, #12]
 8001312:	3301      	adds	r3, #1
 8001314:	733b      	strb	r3, [r7, #12]
 8001316:	7b3b      	ldrb	r3, [r7, #12]
 8001318:	2b0e      	cmp	r3, #14
 800131a:	d9e2      	bls.n	80012e2 <getBMBMinTempIndex+0x1a>
		}
	}
	return cell_index;
 800131c:	7b7b      	ldrb	r3, [r7, #13]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	200001d8 	.word	0x200001d8

08001330 <getBMBMaxVoltIndex>:

uint8_t getBMBMaxVoltIndex(uint8_t bmb_index) {
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
	uint16_t maxVoltage = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	81fb      	strh	r3, [r7, #14]
	uint8_t cell_index = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 8001342:	2300      	movs	r3, #0
 8001344:	733b      	strb	r3, [r7, #12]
 8001346:	e015      	b.n	8001374 <getBMBMaxVoltIndex+0x44>
		uint16_t voltage = BMBData[bmb_index].cellVoltages[i];
 8001348:	79fa      	ldrb	r2, [r7, #7]
 800134a:	7b39      	ldrb	r1, [r7, #12]
 800134c:	480e      	ldr	r0, [pc, #56]	; (8001388 <getBMBMaxVoltIndex+0x58>)
 800134e:	4613      	mov	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	440b      	add	r3, r1
 8001358:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800135c:	817b      	strh	r3, [r7, #10]
		if (voltage > maxVoltage) {
 800135e:	897a      	ldrh	r2, [r7, #10]
 8001360:	89fb      	ldrh	r3, [r7, #14]
 8001362:	429a      	cmp	r2, r3
 8001364:	d903      	bls.n	800136e <getBMBMaxVoltIndex+0x3e>
			maxVoltage = voltage;
 8001366:	897b      	ldrh	r3, [r7, #10]
 8001368:	81fb      	strh	r3, [r7, #14]
			cell_index = i;
 800136a:	7b3b      	ldrb	r3, [r7, #12]
 800136c:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 800136e:	7b3b      	ldrb	r3, [r7, #12]
 8001370:	3301      	adds	r3, #1
 8001372:	733b      	strb	r3, [r7, #12]
 8001374:	7b3b      	ldrb	r3, [r7, #12]
 8001376:	2b08      	cmp	r3, #8
 8001378:	d9e6      	bls.n	8001348 <getBMBMaxVoltIndex+0x18>
		}
	}
	return cell_index;
 800137a:	7b7b      	ldrb	r3, [r7, #13]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	200001d8 	.word	0x200001d8

0800138c <getBMBMinVoltIndex>:

uint8_t getBMBMinVoltIndex(uint8_t bmb_index) {
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
	uint16_t minVoltage = 0xFFFF;
 8001396:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800139a:	81fb      	strh	r3, [r7, #14]
	uint8_t cell_index = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 80013a0:	2300      	movs	r3, #0
 80013a2:	733b      	strb	r3, [r7, #12]
 80013a4:	e015      	b.n	80013d2 <getBMBMinVoltIndex+0x46>
		uint16_t voltage = BMBData[bmb_index].cellVoltages[i];
 80013a6:	79fa      	ldrb	r2, [r7, #7]
 80013a8:	7b39      	ldrb	r1, [r7, #12]
 80013aa:	480f      	ldr	r0, [pc, #60]	; (80013e8 <getBMBMinVoltIndex+0x5c>)
 80013ac:	4613      	mov	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	440b      	add	r3, r1
 80013b6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80013ba:	817b      	strh	r3, [r7, #10]
		if (voltage < minVoltage) {
 80013bc:	897a      	ldrh	r2, [r7, #10]
 80013be:	89fb      	ldrh	r3, [r7, #14]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d203      	bcs.n	80013cc <getBMBMinVoltIndex+0x40>
			minVoltage = voltage;
 80013c4:	897b      	ldrh	r3, [r7, #10]
 80013c6:	81fb      	strh	r3, [r7, #14]
			cell_index = i;
 80013c8:	7b3b      	ldrb	r3, [r7, #12]
 80013ca:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 80013cc:	7b3b      	ldrb	r3, [r7, #12]
 80013ce:	3301      	adds	r3, #1
 80013d0:	733b      	strb	r3, [r7, #12]
 80013d2:	7b3b      	ldrb	r3, [r7, #12]
 80013d4:	2b08      	cmp	r3, #8
 80013d6:	d9e6      	bls.n	80013a6 <getBMBMinVoltIndex+0x1a>
		}
	}
	return cell_index;
 80013d8:	7b7b      	ldrb	r3, [r7, #13]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	200001d8 	.word	0x200001d8

080013ec <getBMBTemp>:

// Accessor Functions

int16_t getBMBTemp(uint8_t bmb_index, uint8_t cell_index) {
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	460a      	mov	r2, r1
 80013f6:	71fb      	strb	r3, [r7, #7]
 80013f8:	4613      	mov	r3, r2
 80013fa:	71bb      	strb	r3, [r7, #6]
	return BMBData[bmb_index].cellTemperatures[cell_index];
 80013fc:	79fa      	ldrb	r2, [r7, #7]
 80013fe:	79b9      	ldrb	r1, [r7, #6]
 8001400:	4808      	ldr	r0, [pc, #32]	; (8001424 <getBMBTemp+0x38>)
 8001402:	4613      	mov	r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4413      	add	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	440b      	add	r3, r1
 800140c:	3308      	adds	r3, #8
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4403      	add	r3, r0
 8001412:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	200001d8 	.word	0x200001d8

08001428 <getBMBVoltage>:

uint16_t getBMBVoltage(uint8_t bmb_index, uint8_t cell_index) {
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	460a      	mov	r2, r1
 8001432:	71fb      	strb	r3, [r7, #7]
 8001434:	4613      	mov	r3, r2
 8001436:	71bb      	strb	r3, [r7, #6]
	return BMBData[bmb_index].cellVoltages[cell_index];
 8001438:	79fa      	ldrb	r2, [r7, #7]
 800143a:	79b9      	ldrb	r1, [r7, #6]
 800143c:	4806      	ldr	r0, [pc, #24]	; (8001458 <getBMBVoltage+0x30>)
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	440b      	add	r3, r1
 8001448:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	200001d8 	.word	0x200001d8

0800145c <getPackMaxCellVoltage>:

uint16_t getPackMaxCellVoltage() {
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
	uint16_t packMaxCellVoltage = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	80fb      	strh	r3, [r7, #6]
	uint16_t maxCellVoltage = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	807b      	strh	r3, [r7, #2]
	uint8_t maxCellVoltageIndex;

	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 800146a:	2300      	movs	r3, #0
 800146c:	717b      	strb	r3, [r7, #5]
 800146e:	e019      	b.n	80014a4 <getPackMaxCellVoltage+0x48>
		// find highest cell voltage on current BMB, update packMaxCellVoltage if needed
		maxCellVoltageIndex = getBMBMaxVoltIndex(bmb_index);
 8001470:	797b      	ldrb	r3, [r7, #5]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ff5c 	bl	8001330 <getBMBMaxVoltIndex>
 8001478:	4603      	mov	r3, r0
 800147a:	707b      	strb	r3, [r7, #1]
		maxCellVoltage = BMBData[bmb_index].cellVoltages[maxCellVoltageIndex];
 800147c:	797a      	ldrb	r2, [r7, #5]
 800147e:	7879      	ldrb	r1, [r7, #1]
 8001480:	480c      	ldr	r0, [pc, #48]	; (80014b4 <getPackMaxCellVoltage+0x58>)
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	440b      	add	r3, r1
 800148c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001490:	807b      	strh	r3, [r7, #2]

		if (maxCellVoltage > packMaxCellVoltage) {
 8001492:	887a      	ldrh	r2, [r7, #2]
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	429a      	cmp	r2, r3
 8001498:	d901      	bls.n	800149e <getPackMaxCellVoltage+0x42>
			packMaxCellVoltage = maxCellVoltage;
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	80fb      	strh	r3, [r7, #6]
	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 800149e:	797b      	ldrb	r3, [r7, #5]
 80014a0:	3301      	adds	r3, #1
 80014a2:	717b      	strb	r3, [r7, #5]
 80014a4:	797b      	ldrb	r3, [r7, #5]
 80014a6:	2b0f      	cmp	r3, #15
 80014a8:	d9e2      	bls.n	8001470 <getPackMaxCellVoltage+0x14>
		}
	}

	return packMaxCellVoltage;
 80014aa:	88fb      	ldrh	r3, [r7, #6]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200001d8 	.word	0x200001d8

080014b8 <getPackMinCellVoltage>:

uint16_t getPackMinCellVoltage() {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
	uint16_t packMinCellVoltage = UINT16_MAX;
 80014be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014c2:	80fb      	strh	r3, [r7, #6]
	uint16_t minCellVoltage = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	807b      	strh	r3, [r7, #2]
	uint8_t minCellVoltageIndex;

	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 80014c8:	2300      	movs	r3, #0
 80014ca:	717b      	strb	r3, [r7, #5]
 80014cc:	e019      	b.n	8001502 <getPackMinCellVoltage+0x4a>
		// find lowest cell temp on current BMB, update packMinCellVoltage if needed
		minCellVoltageIndex = getBMBMinVoltIndex(bmb_index);
 80014ce:	797b      	ldrb	r3, [r7, #5]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff5b 	bl	800138c <getBMBMinVoltIndex>
 80014d6:	4603      	mov	r3, r0
 80014d8:	707b      	strb	r3, [r7, #1]
		minCellVoltage = BMBData[bmb_index].cellVoltages[minCellVoltageIndex];
 80014da:	797a      	ldrb	r2, [r7, #5]
 80014dc:	7879      	ldrb	r1, [r7, #1]
 80014de:	480d      	ldr	r0, [pc, #52]	; (8001514 <getPackMinCellVoltage+0x5c>)
 80014e0:	4613      	mov	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4413      	add	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	440b      	add	r3, r1
 80014ea:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80014ee:	807b      	strh	r3, [r7, #2]

		if (minCellVoltage < packMinCellVoltage) {
 80014f0:	887a      	ldrh	r2, [r7, #2]
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d201      	bcs.n	80014fc <getPackMinCellVoltage+0x44>
			packMinCellVoltage = minCellVoltage;
 80014f8:	887b      	ldrh	r3, [r7, #2]
 80014fa:	80fb      	strh	r3, [r7, #6]
	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 80014fc:	797b      	ldrb	r3, [r7, #5]
 80014fe:	3301      	adds	r3, #1
 8001500:	717b      	strb	r3, [r7, #5]
 8001502:	797b      	ldrb	r3, [r7, #5]
 8001504:	2b0f      	cmp	r3, #15
 8001506:	d9e2      	bls.n	80014ce <getPackMinCellVoltage+0x16>
		}
	}

	return packMinCellVoltage;
 8001508:	88fb      	ldrh	r3, [r7, #6]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200001d8 	.word	0x200001d8

08001518 <getPackMaxCellTemp>:

uint16_t getPackMaxCellTemp() {
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
	uint16_t packMaxCellTemp = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	80fb      	strh	r3, [r7, #6]
	uint16_t maxCellTemp = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	807b      	strh	r3, [r7, #2]
	uint8_t maxCellTempIndex;

	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001526:	2300      	movs	r3, #0
 8001528:	717b      	strb	r3, [r7, #5]
 800152a:	e01c      	b.n	8001566 <getPackMaxCellTemp+0x4e>
		// find highest cell temp on current BMB, update packMaxCellTemp if needed
		maxCellTempIndex = getBMBMaxTempIndex(bmb_index);
 800152c:	797b      	ldrb	r3, [r7, #5]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fe96 	bl	8001260 <getBMBMaxTempIndex>
 8001534:	4603      	mov	r3, r0
 8001536:	707b      	strb	r3, [r7, #1]
		maxCellTemp = BMBData[bmb_index].cellTemperatures[maxCellTempIndex];
 8001538:	797a      	ldrb	r2, [r7, #5]
 800153a:	7879      	ldrb	r1, [r7, #1]
 800153c:	480e      	ldr	r0, [pc, #56]	; (8001578 <getPackMaxCellTemp+0x60>)
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	440b      	add	r3, r1
 8001548:	3308      	adds	r3, #8
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4403      	add	r3, r0
 800154e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001552:	807b      	strh	r3, [r7, #2]

		if (maxCellTemp > packMaxCellTemp) {
 8001554:	887a      	ldrh	r2, [r7, #2]
 8001556:	88fb      	ldrh	r3, [r7, #6]
 8001558:	429a      	cmp	r2, r3
 800155a:	d901      	bls.n	8001560 <getPackMaxCellTemp+0x48>
			packMaxCellTemp = maxCellTemp;
 800155c:	887b      	ldrh	r3, [r7, #2]
 800155e:	80fb      	strh	r3, [r7, #6]
	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001560:	797b      	ldrb	r3, [r7, #5]
 8001562:	3301      	adds	r3, #1
 8001564:	717b      	strb	r3, [r7, #5]
 8001566:	797b      	ldrb	r3, [r7, #5]
 8001568:	2b0f      	cmp	r3, #15
 800156a:	d9df      	bls.n	800152c <getPackMaxCellTemp+0x14>
		}
	}

	return packMaxCellTemp;
 800156c:	88fb      	ldrh	r3, [r7, #6]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200001d8 	.word	0x200001d8

0800157c <getBattMillivolts>:

BMB_Data_t* getBMBData(uint8_t bmb_index) {
	return &(BMBData[bmb_index]);
}

int32_t getBattMillivolts() {
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
	int32_t totalPackCellVoltage = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]

	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001586:	2300      	movs	r3, #0
 8001588:	70fb      	strb	r3, [r7, #3]
 800158a:	e019      	b.n	80015c0 <getBattMillivolts+0x44>
		for (uint8_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 800158c:	2300      	movs	r3, #0
 800158e:	70bb      	strb	r3, [r7, #2]
 8001590:	e010      	b.n	80015b4 <getBattMillivolts+0x38>
			totalPackCellVoltage +=
					(int32_t) BMBData[bmb_index].cellVoltages[i];
 8001592:	78fa      	ldrb	r2, [r7, #3]
 8001594:	78b9      	ldrb	r1, [r7, #2]
 8001596:	480f      	ldr	r0, [pc, #60]	; (80015d4 <getBattMillivolts+0x58>)
 8001598:	4613      	mov	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	440b      	add	r3, r1
 80015a2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80015a6:	461a      	mov	r2, r3
			totalPackCellVoltage +=
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4413      	add	r3, r2
 80015ac:	607b      	str	r3, [r7, #4]
		for (uint8_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 80015ae:	78bb      	ldrb	r3, [r7, #2]
 80015b0:	3301      	adds	r3, #1
 80015b2:	70bb      	strb	r3, [r7, #2]
 80015b4:	78bb      	ldrb	r3, [r7, #2]
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d9eb      	bls.n	8001592 <getBattMillivolts+0x16>
	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 80015ba:	78fb      	ldrb	r3, [r7, #3]
 80015bc:	3301      	adds	r3, #1
 80015be:	70fb      	strb	r3, [r7, #3]
 80015c0:	78fb      	ldrb	r3, [r7, #3]
 80015c2:	2b0f      	cmp	r3, #15
 80015c4:	d9e2      	bls.n	800158c <getBattMillivolts+0x10>
		}
	}

	return totalPackCellVoltage;
 80015c6:	687b      	ldr	r3, [r7, #4]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	200001d8 	.word	0x200001d8

080015d8 <adcInit>:
static cmr_adc_t adc;

/**
 * @brief Initializes the ADC interface.
 */
void adcInit(void) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
    // ADC initialization and channel configuration.
    cmr_adcInit(
 80015dc:	2305      	movs	r3, #5
 80015de:	4a03      	ldr	r2, [pc, #12]	; (80015ec <adcInit+0x14>)
 80015e0:	4903      	ldr	r1, [pc, #12]	; (80015f0 <adcInit+0x18>)
 80015e2:	4804      	ldr	r0, [pc, #16]	; (80015f4 <adcInit+0x1c>)
 80015e4:	f001 fc0a 	bl	8002dfc <cmr_adcInit>
        &adc, ADC1,
        adcChannels, sizeof(adcChannels) / sizeof(adcChannels[0])
    );
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000020 	.word	0x20000020
 80015f0:	40012000 	.word	0x40012000
 80015f4:	2000051c 	.word	0x2000051c

080015f8 <adcRead>:

/**
 * @brief Returns the current value of an ADC channel.
 */
uint32_t adcRead(adcChannels_t ch) {
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
    return adcChannels[ch].value;
 8001602:	79fa      	ldrb	r2, [r7, #7]
 8001604:	4906      	ldr	r1, [pc, #24]	; (8001620 <adcRead+0x28>)
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	440b      	add	r3, r1
 8001610:	3310      	adds	r3, #16
 8001612:	681b      	ldr	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	20000020 	.word	0x20000020

08001624 <checkErrors>:

// Persistent value for storing the error type. Will be useful if
// error checking becomes its own task
static cmr_canHVCError_t errorRegister = CMR_CAN_HVC_STATE_ERROR;

cmr_canHVCError_t checkErrors(cmr_canHVCState_t currentState){
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
    cmr_canHVCError_t errorFlags = CMR_CAN_HVC_ERROR_NONE;
 800162e:	2300      	movs	r3, #0
 8001630:	81fb      	strh	r3, [r7, #14]
    if(checkCommandTimeout()) {
 8001632:	f000 f8ab 	bl	800178c <checkCommandTimeout>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <checkErrors+0x20>
        // TODO E1 check the timeout field of the command message meta data
        errorFlags |= CMR_CAN_HVC_ERROR_CAN_TIMEOUT;
 800163c:	89fb      	ldrh	r3, [r7, #14]
 800163e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001642:	81fb      	strh	r3, [r7, #14]
    }
    if(checkBMBTimeout()) {
 8001644:	f000 f8b6 	bl	80017b4 <checkBMBTimeout>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <checkErrors+0x32>
        // TODO E2 devise a UART monitor system
        errorFlags |= CMR_CAN_HVC_ERROR_BMB_TIMEOUT; /**< @brief BMB has timed out. */
 800164e:	89fb      	ldrh	r3, [r7, #14]
 8001650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001654:	81fb      	strh	r3, [r7, #14]
    }
    if(getPackMaxCellTemp() > 590) { // Temp limit of 59C
 8001656:	f7ff ff5f 	bl	8001518 <getPackMaxCellTemp>
 800165a:	4603      	mov	r3, r0
 800165c:	461a      	mov	r2, r3
 800165e:	f240 234e 	movw	r3, #590	; 0x24e
 8001662:	429a      	cmp	r2, r3
 8001664:	d903      	bls.n	800166e <checkErrors+0x4a>
        // TODO: #Define with 590
        // TODO E3 create structures for cell temp data and stats (min/max)
        errorFlags |= CMR_CAN_HVC_ERROR_CELL_OVERTEMP;
 8001666:	89fb      	ldrh	r3, [r7, #14]
 8001668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800166c:	81fb      	strh	r3, [r7, #14]
    }
    if(getPackMaxCellVoltage() > 4175) { // Cell voltage limit of 4175
 800166e:	f7ff fef5 	bl	800145c <getPackMaxCellVoltage>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	f241 034f 	movw	r3, #4175	; 0x104f
 800167a:	429a      	cmp	r2, r3
 800167c:	d903      	bls.n	8001686 <checkErrors+0x62>
        // TODO E4 create structures for cell voltage data and stats (min/max)
        errorFlags |= CMR_CAN_HVC_ERROR_CELL_OVERVOLT;
 800167e:	89fb      	ldrh	r3, [r7, #14]
 8001680:	f043 0320 	orr.w	r3, r3, #32
 8001684:	81fb      	strh	r3, [r7, #14]
    }
    if(getPackMinCellVoltage() < 2400) {
 8001686:	f7ff ff17 	bl	80014b8 <getPackMinCellVoltage>
 800168a:	4603      	mov	r3, r0
 800168c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8001690:	d203      	bcs.n	800169a <checkErrors+0x76>
        // TODO E5 create structures for cell voltage data and stats (min/max)
        errorFlags |= CMR_CAN_HVC_ERROR_CELL_UNDERVOLT;
 8001692:	89fb      	ldrh	r3, [r7, #14]
 8001694:	f043 0310 	orr.w	r3, r3, #16
 8001698:	81fb      	strh	r3, [r7, #14]
    }
    if((getBattMillivolts()) > maxPackVoltageMV) {
 800169a:	f7ff ff6f 	bl	800157c <getBattMillivolts>
 800169e:	4603      	mov	r3, r0
 80016a0:	4a26      	ldr	r2, [pc, #152]	; (800173c <checkErrors+0x118>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	dd03      	ble.n	80016ae <checkErrors+0x8a>
        // E6
        errorFlags |= CMR_CAN_HVC_ERROR_PACK_OVERVOLT;
 80016a6:	89fb      	ldrh	r3, [r7, #14]
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	81fb      	strh	r3, [r7, #14]
    }
    if((getBattMillivolts()) < minPackVoltageMV) {
 80016ae:	f7ff ff65 	bl	800157c <getBattMillivolts>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4a22      	ldr	r2, [pc, #136]	; (8001740 <checkErrors+0x11c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	da03      	bge.n	80016c2 <checkErrors+0x9e>
        // E7
        errorFlags |= CMR_CAN_HVC_ERROR_PACK_UNDERVOLT;
 80016ba:	89fb      	ldrh	r3, [r7, #14]
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	81fb      	strh	r3, [r7, #14]
    }
//    if(getCurrentAverage() > maxPackCurrentAverageMA) {
//        // E9
//        errorFlags |= CMR_CAN_HVC_ERROR_PACK_OVERCURRENT;
//    }
    if(checkRelayPowerFault() && (getState() != CMR_CAN_HVC_STATE_ERROR && getState() != CMR_CAN_HVC_STATE_CLEAR_ERROR)) {//(getRelayStatus() & 0xAA) != 0xAA) {
 80016c2:	f000 f979 	bl	80019b8 <checkRelayPowerFault>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d006      	beq.n	80016da <checkErrors+0xb6>
 80016cc:	f001 f842 	bl	8002754 <getState>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <checkErrors+0xb6>
 80016d6:	f001 f83d 	bl	8002754 <getState>
        // TODO look into the AIR_Fault_L signal, it might be necessary to confirm this is not active
        // before looking at relay status, otherwise we could be in dead lock trying to clear errors.
        //errorFlags |= BMS_ERROR_CODE_RELAY;
    }

    if(
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d014      	beq.n	800170a <checkErrors+0xe6>
    	(currentState == CMR_CAN_HVC_STATE_DRIVE_PRECHARGE ||
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d011      	beq.n	800170a <checkErrors+0xe6>
        currentState == CMR_CAN_HVC_STATE_DRIVE_PRECHARGE_COMPLETE ||
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	2b05      	cmp	r3, #5
 80016ea:	d00e      	beq.n	800170a <checkErrors+0xe6>
        currentState == CMR_CAN_HVC_STATE_DRIVE ||
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	2b06      	cmp	r3, #6
 80016f0:	d00b      	beq.n	800170a <checkErrors+0xe6>
        currentState == CMR_CAN_HVC_STATE_CHARGE_PRECHARGE ||
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	2b07      	cmp	r3, #7
 80016f6:	d008      	beq.n	800170a <checkErrors+0xe6>
        currentState == CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE ||
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	d005      	beq.n	800170a <checkErrors+0xe6>
        currentState == CMR_CAN_HVC_STATE_CHARGE_TRICKLE ||
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	2b09      	cmp	r3, #9
 8001702:	d002      	beq.n	800170a <checkErrors+0xe6>
        currentState == CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT ||
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	2b0a      	cmp	r3, #10
 8001708:	d109      	bne.n	800171e <checkErrors+0xfa>
        currentState == CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE) &&
        (cmr_gpioRead(SAFETY_BINARY) == 0)) {
 800170a:	200a      	movs	r0, #10
 800170c:	f002 fdba 	bl	8004284 <cmr_gpioRead>
 8001710:	4603      	mov	r3, r0
        currentState == CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE) &&
 8001712:	2b00      	cmp	r3, #0
 8001714:	d103      	bne.n	800171e <checkErrors+0xfa>
        // E11
        // If SC voltage is below 8v while we're trying to drive relays, throw an error.
        errorFlags |= CMR_CAN_HVC_ERROR_LV_UNDERVOLT;
 8001716:	89fb      	ldrh	r3, [r7, #14]
 8001718:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800171c:	81fb      	strh	r3, [r7, #14]
    }

    // Cut relay power if we have an error
    if (errorFlags != CMR_CAN_HVC_ERROR_NONE) {
 800171e:	89fb      	ldrh	r3, [r7, #14]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d003      	beq.n	800172c <checkErrors+0x108>
        cmr_gpioWrite(GPIO_BMB_FAULT_L, 0);
 8001724:	2100      	movs	r1, #0
 8001726:	2003      	movs	r0, #3
 8001728:	f002 fd36 	bl	8004198 <cmr_gpioWrite>
    }
    errorRegister = errorFlags;
 800172c:	4a05      	ldr	r2, [pc, #20]	; (8001744 <checkErrors+0x120>)
 800172e:	89fb      	ldrh	r3, [r7, #14]
 8001730:	8013      	strh	r3, [r2, #0]
    
    return errorFlags;
 8001732:	89fb      	ldrh	r3, [r7, #14]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	000927c0 	.word	0x000927c0
 8001740:	00057e40 	.word	0x00057e40
 8001744:	200058cc 	.word	0x200058cc

08001748 <clearHardwareFault>:

void clearHardwareFault(bool assertClear) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
    // Set GPIO pin low (asserted) if
    // assertClear, high (deasserted) otherwise
    if (assertClear) {
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d004      	beq.n	8001762 <clearHardwareFault+0x1a>
        cmr_gpioWrite(GPIO_CLEAR_FAULT_L, 0);
 8001758:	2100      	movs	r1, #0
 800175a:	2004      	movs	r0, #4
 800175c:	f002 fd1c 	bl	8004198 <cmr_gpioWrite>
    } else {
        cmr_gpioWrite(GPIO_CLEAR_FAULT_L, 1);
    }
}
 8001760:	e003      	b.n	800176a <clearHardwareFault+0x22>
        cmr_gpioWrite(GPIO_CLEAR_FAULT_L, 1);
 8001762:	2101      	movs	r1, #1
 8001764:	2004      	movs	r0, #4
 8001766:	f002 fd17 	bl	8004198 <cmr_gpioWrite>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <clearErrorReg>:


void clearErrorReg() {
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
    errorRegister = CMR_CAN_HVC_ERROR_NONE;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <clearErrorReg+0x14>)
 800177a:	2200      	movs	r2, #0
 800177c:	801a      	strh	r2, [r3, #0]
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	200058cc 	.word	0x200058cc

0800178c <checkCommandTimeout>:

cmr_canHVCError_t getErrorReg(){
    return errorRegister;
}

static bool checkCommandTimeout() {
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
    // CAN error if HVC Command has timed out after 50ms
    // TODO: latch can error?
    TickType_t lastWakeTime = xTaskGetTickCount();
 8001792:	f004 fda1 	bl	80062d8 <xTaskGetTickCount>
 8001796:	6078      	str	r0, [r7, #4]
    bool hvc_commmand_error = (cmr_canRXMetaTimeoutError(&(canRXMeta[CANRX_HVC_COMMAND]), lastWakeTime) < 0);
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <checkCommandTimeout+0x24>)
 800179c:	f001 fc79 	bl	8003092 <cmr_canRXMetaTimeoutError>
 80017a0:	4603      	mov	r3, r0
 80017a2:	0fdb      	lsrs	r3, r3, #31
 80017a4:	70fb      	strb	r3, [r7, #3]

	return hvc_commmand_error;
 80017a6:	78fb      	ldrb	r3, [r7, #3]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	200000a4 	.word	0x200000a4

080017b4 <checkBMBTimeout>:

static bool checkBMBTimeout() {
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_BMBS; i++) {
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	e00a      	b.n	80017d6 <checkBMBTimeout+0x22>
        if (BMBTimeoutCount[i] >= BMB_TIMEOUT) {
 80017c0:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <checkBMBTimeout+0x38>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	dd01      	ble.n	80017d0 <checkBMBTimeout+0x1c>
            return true;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e006      	b.n	80017de <checkBMBTimeout+0x2a>
    for (int i = 0; i < NUM_BMBS; i++) {
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3301      	adds	r3, #1
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b0f      	cmp	r3, #15
 80017da:	ddf1      	ble.n	80017c0 <checkBMBTimeout+0xc>
        }
    }
    return false;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	2000584c 	.word	0x2000584c

080017f0 <setRelay>:
void relaySetup() {
    // Discharge relay is default closed, initialize pin accordingly
    relayUsageVector = RELAY_CONTACTOR_MASK << DISCHARGE_RELAY;
}

uint8_t setRelay(BMS_relay_t relay, BMS_relay_state_t state) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	460a      	mov	r2, r1
 80017fa:	71fb      	strb	r3, [r7, #7]
 80017fc:	4613      	mov	r3, r2
 80017fe:	71bb      	strb	r3, [r7, #6]
    
    switch (relay) {
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	2b03      	cmp	r3, #3
 8001804:	f200 80a6 	bhi.w	8001954 <setRelay+0x164>
 8001808:	a201      	add	r2, pc, #4	; (adr r2, 8001810 <setRelay+0x20>)
 800180a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180e:	bf00      	nop
 8001810:	08001911 	.word	0x08001911
 8001814:	080018c1 	.word	0x080018c1
 8001818:	08001871 	.word	0x08001871
 800181c:	08001821 	.word	0x08001821
        case AIR_POS_RELAY:
            if (state == OPEN) {
 8001820:	79bb      	ldrb	r3, [r7, #6]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d113      	bne.n	800184e <setRelay+0x5e>
                relayUsageVector &= ~(RELAY_CONTACTOR_MASK << AIR_POS_RELAY);
 8001826:	2301      	movs	r3, #1
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	b2db      	uxtb	r3, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	b2db      	uxtb	r3, r3
 8001830:	b25a      	sxtb	r2, r3
 8001832:	4b56      	ldr	r3, [pc, #344]	; (800198c <setRelay+0x19c>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	b25b      	sxtb	r3, r3
 800183a:	4013      	ands	r3, r2
 800183c:	b25b      	sxtb	r3, r3
 800183e:	b2da      	uxtb	r2, r3
 8001840:	4b52      	ldr	r3, [pc, #328]	; (800198c <setRelay+0x19c>)
 8001842:	701a      	strb	r2, [r3, #0]
                cmr_gpioWrite(GPIO_AIR_POSITIVE_EN, 0);
 8001844:	2100      	movs	r1, #0
 8001846:	2008      	movs	r0, #8
 8001848:	f002 fca6 	bl	8004198 <cmr_gpioWrite>
            } else {
                // Close relay
                relayUsageVector |= RELAY_CONTACTOR_MASK << AIR_POS_RELAY;
                cmr_gpioWrite(GPIO_AIR_POSITIVE_EN, 1);
            }
            break;
 800184c:	e096      	b.n	800197c <setRelay+0x18c>
                relayUsageVector |= RELAY_CONTACTOR_MASK << AIR_POS_RELAY;
 800184e:	2301      	movs	r3, #1
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	b25a      	sxtb	r2, r3
 8001854:	4b4d      	ldr	r3, [pc, #308]	; (800198c <setRelay+0x19c>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	b25b      	sxtb	r3, r3
 800185c:	4313      	orrs	r3, r2
 800185e:	b25b      	sxtb	r3, r3
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4b4a      	ldr	r3, [pc, #296]	; (800198c <setRelay+0x19c>)
 8001864:	701a      	strb	r2, [r3, #0]
                cmr_gpioWrite(GPIO_AIR_POSITIVE_EN, 1);
 8001866:	2101      	movs	r1, #1
 8001868:	2008      	movs	r0, #8
 800186a:	f002 fc95 	bl	8004198 <cmr_gpioWrite>
            break;
 800186e:	e085      	b.n	800197c <setRelay+0x18c>
        case AIR_NEG_RELAY:
            if (state == OPEN) {
 8001870:	79bb      	ldrb	r3, [r7, #6]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d113      	bne.n	800189e <setRelay+0xae>
                relayUsageVector &= ~(RELAY_CONTACTOR_MASK << AIR_NEG_RELAY);
 8001876:	2301      	movs	r3, #1
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	b2db      	uxtb	r3, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	b2db      	uxtb	r3, r3
 8001880:	b25a      	sxtb	r2, r3
 8001882:	4b42      	ldr	r3, [pc, #264]	; (800198c <setRelay+0x19c>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	b25b      	sxtb	r3, r3
 800188a:	4013      	ands	r3, r2
 800188c:	b25b      	sxtb	r3, r3
 800188e:	b2da      	uxtb	r2, r3
 8001890:	4b3e      	ldr	r3, [pc, #248]	; (800198c <setRelay+0x19c>)
 8001892:	701a      	strb	r2, [r3, #0]
                cmr_gpioWrite(GPIO_AIR_NEGATIVE_EN, 0);
 8001894:	2100      	movs	r1, #0
 8001896:	2009      	movs	r0, #9
 8001898:	f002 fc7e 	bl	8004198 <cmr_gpioWrite>
            } else {
                // Close relay
                relayUsageVector |= RELAY_CONTACTOR_MASK << AIR_NEG_RELAY;
                cmr_gpioWrite(GPIO_AIR_NEGATIVE_EN, 1);
            }
            break;
 800189c:	e06e      	b.n	800197c <setRelay+0x18c>
                relayUsageVector |= RELAY_CONTACTOR_MASK << AIR_NEG_RELAY;
 800189e:	2301      	movs	r3, #1
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	b25a      	sxtb	r2, r3
 80018a4:	4b39      	ldr	r3, [pc, #228]	; (800198c <setRelay+0x19c>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	b25b      	sxtb	r3, r3
 80018ac:	4313      	orrs	r3, r2
 80018ae:	b25b      	sxtb	r3, r3
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4b36      	ldr	r3, [pc, #216]	; (800198c <setRelay+0x19c>)
 80018b4:	701a      	strb	r2, [r3, #0]
                cmr_gpioWrite(GPIO_AIR_NEGATIVE_EN, 1);
 80018b6:	2101      	movs	r1, #1
 80018b8:	2009      	movs	r0, #9
 80018ba:	f002 fc6d 	bl	8004198 <cmr_gpioWrite>
            break;
 80018be:	e05d      	b.n	800197c <setRelay+0x18c>
        case PRECHARGE_RELAY:
            if (state == OPEN) {
 80018c0:	79bb      	ldrb	r3, [r7, #6]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d113      	bne.n	80018ee <setRelay+0xfe>
                relayUsageVector &= ~(RELAY_CONTACTOR_MASK << PRECHARGE_RELAY);
 80018c6:	2301      	movs	r3, #1
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	b25a      	sxtb	r2, r3
 80018d2:	4b2e      	ldr	r3, [pc, #184]	; (800198c <setRelay+0x19c>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	b25b      	sxtb	r3, r3
 80018da:	4013      	ands	r3, r2
 80018dc:	b25b      	sxtb	r3, r3
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	4b2a      	ldr	r3, [pc, #168]	; (800198c <setRelay+0x19c>)
 80018e2:	701a      	strb	r2, [r3, #0]
                cmr_gpioWrite(GPIO_PRECHARGE_EN, 0);
 80018e4:	2100      	movs	r1, #0
 80018e6:	2007      	movs	r0, #7
 80018e8:	f002 fc56 	bl	8004198 <cmr_gpioWrite>
            } else {
                // Close relay
                relayUsageVector |= RELAY_CONTACTOR_MASK << PRECHARGE_RELAY;
                cmr_gpioWrite(GPIO_PRECHARGE_EN, 1);
            }
            break;
 80018ec:	e046      	b.n	800197c <setRelay+0x18c>
                relayUsageVector |= RELAY_CONTACTOR_MASK << PRECHARGE_RELAY;
 80018ee:	2301      	movs	r3, #1
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	b25a      	sxtb	r2, r3
 80018f4:	4b25      	ldr	r3, [pc, #148]	; (800198c <setRelay+0x19c>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	b25b      	sxtb	r3, r3
 80018fc:	4313      	orrs	r3, r2
 80018fe:	b25b      	sxtb	r3, r3
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b22      	ldr	r3, [pc, #136]	; (800198c <setRelay+0x19c>)
 8001904:	701a      	strb	r2, [r3, #0]
                cmr_gpioWrite(GPIO_PRECHARGE_EN, 1);
 8001906:	2101      	movs	r1, #1
 8001908:	2007      	movs	r0, #7
 800190a:	f002 fc45 	bl	8004198 <cmr_gpioWrite>
            break;
 800190e:	e035      	b.n	800197c <setRelay+0x18c>
        case DISCHARGE_RELAY:
            if (state == OPEN) {
 8001910:	79bb      	ldrb	r3, [r7, #6]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d111      	bne.n	800193a <setRelay+0x14a>
                relayUsageVector &= ~(RELAY_CONTACTOR_MASK << DISCHARGE_RELAY);
 8001916:	2301      	movs	r3, #1
 8001918:	b25b      	sxtb	r3, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	b25a      	sxtb	r2, r3
 800191e:	4b1b      	ldr	r3, [pc, #108]	; (800198c <setRelay+0x19c>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	b25b      	sxtb	r3, r3
 8001926:	4013      	ands	r3, r2
 8001928:	b25b      	sxtb	r3, r3
 800192a:	b2da      	uxtb	r2, r3
 800192c:	4b17      	ldr	r3, [pc, #92]	; (800198c <setRelay+0x19c>)
 800192e:	701a      	strb	r2, [r3, #0]
                // Discharge relay is default close, set high pin to open
                cmr_gpioWrite(GPIO_DISCHARGE_EN, 1);
 8001930:	2101      	movs	r1, #1
 8001932:	2006      	movs	r0, #6
 8001934:	f002 fc30 	bl	8004198 <cmr_gpioWrite>
            } else {
                // Close relay
                relayUsageVector |= RELAY_CONTACTOR_MASK << DISCHARGE_RELAY;
                cmr_gpioWrite(GPIO_DISCHARGE_EN, 0);
            }
            break;
 8001938:	e020      	b.n	800197c <setRelay+0x18c>
                relayUsageVector |= RELAY_CONTACTOR_MASK << DISCHARGE_RELAY;
 800193a:	4b14      	ldr	r3, [pc, #80]	; (800198c <setRelay+0x19c>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2201      	movs	r2, #1
 8001942:	4313      	orrs	r3, r2
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4b11      	ldr	r3, [pc, #68]	; (800198c <setRelay+0x19c>)
 8001948:	701a      	strb	r2, [r3, #0]
                cmr_gpioWrite(GPIO_DISCHARGE_EN, 0);
 800194a:	2100      	movs	r1, #0
 800194c:	2006      	movs	r0, #6
 800194e:	f002 fc23 	bl	8004198 <cmr_gpioWrite>
            break;
 8001952:	e013      	b.n	800197c <setRelay+0x18c>
        default:
            // Error, open relays
            cmr_gpioWrite(GPIO_AIR_POSITIVE_EN, 0);
 8001954:	2100      	movs	r1, #0
 8001956:	2008      	movs	r0, #8
 8001958:	f002 fc1e 	bl	8004198 <cmr_gpioWrite>
            cmr_gpioWrite(GPIO_AIR_NEGATIVE_EN, 0);
 800195c:	2100      	movs	r1, #0
 800195e:	2009      	movs	r0, #9
 8001960:	f002 fc1a 	bl	8004198 <cmr_gpioWrite>
            cmr_gpioWrite(GPIO_PRECHARGE_EN, 0);
 8001964:	2100      	movs	r1, #0
 8001966:	2007      	movs	r0, #7
 8001968:	f002 fc16 	bl	8004198 <cmr_gpioWrite>
            cmr_gpioWrite(GPIO_DISCHARGE_EN, 1);
 800196c:	2101      	movs	r1, #1
 800196e:	2006      	movs	r0, #6
 8001970:	f002 fc12 	bl	8004198 <cmr_gpioWrite>
            relayUsageVector = RELAY_CONTACTOR_MASK << DISCHARGE_RELAY;
 8001974:	2201      	movs	r2, #1
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <setRelay+0x19c>)
 8001978:	701a      	strb	r2, [r3, #0]
            break;
 800197a:	bf00      	nop
    }
    
    return relayUsageVector;
 800197c:	4b03      	ldr	r3, [pc, #12]	; (800198c <setRelay+0x19c>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	b2db      	uxtb	r3, r3
    
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200058ce 	.word	0x200058ce

08001990 <getRelayStatus>:

uint8_t getRelayStatus(){
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
    // Status pin is high for OK, low for FAULT
    uint8_t relayStatusVector = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	71fb      	strb	r3, [r7, #7]

	// AIR status feedback functionality removed

    return relayUsageVector | relayStatusVector;
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <getRelayStatus+0x24>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	b2db      	uxtb	r3, r3
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	200058ce 	.word	0x200058ce

080019b8 <checkRelayPowerFault>:

bool checkRelayPowerFault() {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
    return !cmr_gpioRead(GPIO_AIR_FAULT_L);
 80019bc:	2005      	movs	r0, #5
 80019be:	f002 fc61 	bl	8004284 <cmr_gpioRead>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bf0c      	ite	eq
 80019c8:	2301      	moveq	r3, #1
 80019ca:	2300      	movne	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <canTX1Hz>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void canTX1Hz(void *pvParameters) {
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b084      	sub	sp, #16
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    TickType_t lastWakeTime = xTaskGetTickCount();
 80019da:	f004 fc7d 	bl	80062d8 <xTaskGetTickCount>
 80019de:	4603      	mov	r3, r0
 80019e0:	60bb      	str	r3, [r7, #8]
    while (1) {

        // BMB Temperature Status 
        for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 80019e2:	2300      	movs	r3, #0
 80019e4:	73fb      	strb	r3, [r7, #15]
 80019e6:	e006      	b.n	80019f6 <canTX1Hz+0x24>
            sendBMSBMBStatusTemp(bmb_index);
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 f9cf 	bl	8001d8e <sendBMSBMBStatusTemp>
        for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	3301      	adds	r3, #1
 80019f4:	73fb      	strb	r3, [r7, #15]
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	2b0f      	cmp	r3, #15
 80019fa:	d9f5      	bls.n	80019e8 <canTX1Hz+0x16>
        }
        sendBMSMinMaxCellTemp();
 80019fc:	f000 fa5a 	bl	8001eb4 <sendBMSMinMaxCellTemp>

        sendAllBMBVoltages();
 8001a00:	f000 fb54 	bl	80020ac <sendAllBMBVoltages>

        vTaskDelayUntil(&lastWakeTime, canTX1Hz_period_ms);
 8001a04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a08:	f107 0308 	add.w	r3, r7, #8
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f004 faec 	bl	8005fec <vTaskDelayUntil>
        for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001a14:	e7e5      	b.n	80019e2 <canTX1Hz+0x10>

08001a16 <canTX10Hz>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void canTX10Hz(void *pvParameters) {
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    TickType_t lastWakeTime = xTaskGetTickCount();
 8001a1e:	f004 fc5b 	bl	80062d8 <xTaskGetTickCount>
 8001a22:	4603      	mov	r3, r0
 8001a24:	60bb      	str	r3, [r7, #8]
    while (1) {
        // BRUSA Charger decided by state machine 
        // sendBRUSAChargerControl();

        // BMB Voltage Status 
        for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001a26:	2300      	movs	r3, #0
 8001a28:	73fb      	strb	r3, [r7, #15]
 8001a2a:	e006      	b.n	8001a3a <canTX10Hz+0x24>
            sendBMSBMBStatusVoltage(bmb_index);
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 f973 	bl	8001d1a <sendBMSBMBStatusVoltage>
        for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	3301      	adds	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	2b0f      	cmp	r3, #15
 8001a3e:	d9f5      	bls.n	8001a2c <canTX10Hz+0x16>
        }

        vTaskDelayUntil(&lastWakeTime, canTX10Hz_period_ms);
 8001a40:	2264      	movs	r2, #100	; 0x64
 8001a42:	f107 0308 	add.w	r3, r7, #8
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f004 facf 	bl	8005fec <vTaskDelayUntil>
        for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001a4e:	e7ea      	b.n	8001a26 <canTX10Hz+0x10>

08001a50 <canTX200Hz>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void canTX200Hz(void *pvParameters) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

//    cmr_canRXMeta_t *heartbeatVSMMeta = canRXMeta + CANRX_HEARTBEAT_VSM;
//    volatile cmr_canHeartbeat_t *heartbeatVSM =
//        (void *) heartbeatVSMMeta->payload;

    TickType_t lastWakeTime = xTaskGetTickCount();
 8001a58:	f004 fc3e 	bl	80062d8 <xTaskGetTickCount>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	60fb      	str	r3, [r7, #12]
    while (1) {
        sendBMSMinMaxCellVoltage();
 8001a60:	f000 f9d0 	bl	8001e04 <sendBMSMinMaxCellVoltage>

        vTaskDelayUntil(&lastWakeTime, canTX200Hz_period_ms);
 8001a64:	2205      	movs	r2, #5
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f004 fabd 	bl	8005fec <vTaskDelayUntil>
        sendBMSMinMaxCellVoltage();
 8001a72:	e7f5      	b.n	8001a60 <canTX200Hz+0x10>

08001a74 <canTX100Hz>:
    }
}

static void canTX100Hz(void *pvParameters) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

//    cmr_canRXMeta_t *heartbeatVSMMeta = canRXMeta + CANRX_HEARTBEAT_VSM;
//    volatile cmr_canHeartbeat_t *heartbeatVSM =
//        (void *) heartbeatVSMMeta->payload;

    TickType_t lastWakeTime = xTaskGetTickCount();
 8001a7c:	f004 fc2c 	bl	80062d8 <xTaskGetTickCount>
 8001a80:	4603      	mov	r3, r0
 8001a82:	60fb      	str	r3, [r7, #12]
    while (1) {
        sendHeartbeat(lastWakeTime);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 f8aa 	bl	8001be0 <sendHeartbeat>
        sendHVCPackVoltage();
 8001a8c:	f000 f916 	bl	8001cbc <sendHVCPackVoltage>
        sendBMSPackCurrent();
 8001a90:	f000 f92c 	bl	8001cec <sendBMSPackCurrent>
        sendBMSLowVoltage();
 8001a94:	f000 fa66 	bl	8001f64 <sendBMSLowVoltage>
        sendBMSBMBStatusErrors();
 8001a98:	f000 faa0 	bl	8001fdc <sendBMSBMBStatusErrors>

        vTaskDelayUntil(&lastWakeTime, canTX100Hz_period_ms);
 8001a9c:	220a      	movs	r2, #10
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f004 faa1 	bl	8005fec <vTaskDelayUntil>
        sendHeartbeat(lastWakeTime);
 8001aaa:	e7eb      	b.n	8001a84 <canTX100Hz+0x10>

08001aac <canInit>:
}

/**
 * @brief Initializes the CAN interface.
 */
void canInit(void) {
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b08b      	sub	sp, #44	; 0x2c
 8001ab0:	af06      	add	r7, sp, #24
    // CAN2 initialization.
    cmr_canInit(
 8001ab2:	2340      	movs	r3, #64	; 0x40
 8001ab4:	9305      	str	r3, [sp, #20]
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <canInit+0x88>)
 8001ab8:	9304      	str	r3, [sp, #16]
 8001aba:	2320      	movs	r3, #32
 8001abc:	9303      	str	r3, [sp, #12]
 8001abe:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <canInit+0x88>)
 8001ac0:	9302      	str	r3, [sp, #8]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <canInit+0x8c>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	491b      	ldr	r1, [pc, #108]	; (8001b3c <canInit+0x90>)
 8001ad0:	481b      	ldr	r0, [pc, #108]	; (8001b40 <canInit+0x94>)
 8001ad2:	f001 fb85 	bl	80031e0 <cmr_canInit>
        GPIOB, GPIO_PIN_5,     // CAN2 RX port/pin.
        GPIOB, GPIO_PIN_6      // CAN2 TX port/pin.
    );

    // CAN2 filters.
    const cmr_canFilter_t canFilters[] = {
 8001ad6:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <canInit+0x98>)
 8001ad8:	463c      	mov	r4, r7
 8001ada:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001adc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                CMR_CANID_HVC_COMMAND,
				CMR_CANID_EMD_MEASUREMENT
            }
        }
    };
    cmr_canFilter(
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4816      	ldr	r0, [pc, #88]	; (8001b40 <canInit+0x94>)
 8001ae8:	f001 fc28 	bl	800333c <cmr_canFilter>
        &can, canFilters, sizeof(canFilters) / sizeof(canFilters[0])
    );

    // Task initialization.
    cmr_taskInit(
 8001aec:	2203      	movs	r2, #3
 8001aee:	2300      	movs	r3, #0
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <canInit+0x9c>)
 8001af4:	4915      	ldr	r1, [pc, #84]	; (8001b4c <canInit+0xa0>)
 8001af6:	4816      	ldr	r0, [pc, #88]	; (8001b50 <canInit+0xa4>)
 8001af8:	f003 f8a8 	bl	8004c4c <cmr_taskInit>
        "CAN TX 1Hz",
        canTX1Hz_priority,
        canTX1Hz,
        NULL
    );
    cmr_taskInit(
 8001afc:	2203      	movs	r2, #3
 8001afe:	2300      	movs	r3, #0
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <canInit+0xa8>)
 8001b04:	4914      	ldr	r1, [pc, #80]	; (8001b58 <canInit+0xac>)
 8001b06:	4815      	ldr	r0, [pc, #84]	; (8001b5c <canInit+0xb0>)
 8001b08:	f003 f8a0 	bl	8004c4c <cmr_taskInit>
        "CAN TX 10Hz",
        canTX10Hz_priority,
        canTX10Hz,
        NULL
    );
    cmr_taskInit(
 8001b0c:	2205      	movs	r2, #5
 8001b0e:	2300      	movs	r3, #0
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <canInit+0xb4>)
 8001b14:	4913      	ldr	r1, [pc, #76]	; (8001b64 <canInit+0xb8>)
 8001b16:	4814      	ldr	r0, [pc, #80]	; (8001b68 <canInit+0xbc>)
 8001b18:	f003 f898 	bl	8004c4c <cmr_taskInit>
        "CAN TX 200Hz",
        canTX200Hz_priority,
        canTX200Hz,
        NULL
    );
    cmr_taskInit(
 8001b1c:	2205      	movs	r2, #5
 8001b1e:	2300      	movs	r3, #0
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <canInit+0xc0>)
 8001b24:	4912      	ldr	r1, [pc, #72]	; (8001b70 <canInit+0xc4>)
 8001b26:	4813      	ldr	r0, [pc, #76]	; (8001b74 <canInit+0xc8>)
 8001b28:	f003 f890 	bl	8004c4c <cmr_taskInit>
        "CAN TX 100Hz",
        canTX100Hz_priority,
        canTX100Hz,
        NULL
    );
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd90      	pop	{r4, r7, pc}
 8001b34:	40020400 	.word	0x40020400
 8001b38:	20000084 	.word	0x20000084
 8001b3c:	40006800 	.word	0x40006800
 8001b40:	200058d0 	.word	0x200058d0
 8001b44:	0800c2b4 	.word	0x0800c2b4
 8001b48:	080019d3 	.word	0x080019d3
 8001b4c:	0800c27c 	.word	0x0800c27c
 8001b50:	20005950 	.word	0x20005950
 8001b54:	08001a17 	.word	0x08001a17
 8001b58:	0800c288 	.word	0x0800c288
 8001b5c:	2000ac30 	.word	0x2000ac30
 8001b60:	08001a51 	.word	0x08001a51
 8001b64:	0800c294 	.word	0x0800c294
 8001b68:	2000ff10 	.word	0x2000ff10
 8001b6c:	08001a75 	.word	0x08001a75
 8001b70:	0800c2a4 	.word	0x0800c2a4
 8001b74:	200151f0 	.word	0x200151f0

08001b78 <canTX>:
 * @param len The data's length, in bytes.
 * @param timeout The timeout, in ticks.
 *
 * @return 0 on success, or a negative error code on timeout.
 */
int canTX(cmr_canID_t id, const void *data, size_t len, TickType_t timeout) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af02      	add	r7, sp, #8
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	4603      	mov	r3, r0
 8001b86:	81fb      	strh	r3, [r7, #14]
    return cmr_canTX(&can, id, data, len, timeout);
 8001b88:	89f9      	ldrh	r1, [r7, #14]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	4804      	ldr	r0, [pc, #16]	; (8001ba4 <canTX+0x2c>)
 8001b94:	f001 fb96 	bl	80032c4 <cmr_canTX>
 8001b98:	4603      	mov	r3, r0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200058d0 	.word	0x200058d0

08001ba8 <getPayload>:
 *
 * @param rxMsg The message to get the payload of.
 *
 * @return Pointer to payload, or NULL if rxMsg is invalid.
 */
volatile void *getPayload(canRX_t rxMsg) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
    configASSERT(rxMsg < CANRX_LEN);
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d904      	bls.n	8001bc2 <getPayload+0x1a>
 8001bb8:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001bbc:	4806      	ldr	r0, [pc, #24]	; (8001bd8 <getPayload+0x30>)
 8001bbe:	f002 fedc 	bl	800497a <cmr_panic>

    cmr_canRXMeta_t *rxMeta = &(canRXMeta[rxMsg]);
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	015b      	lsls	r3, r3, #5
 8001bc6:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <getPayload+0x34>)
 8001bc8:	4413      	add	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]

    return (void *)(&rxMeta->payload);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	3318      	adds	r3, #24
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	0800c2c4 	.word	0x0800c2c4
 8001bdc:	20000084 	.word	0x20000084

08001be0 <sendHeartbeat>:
/**
 * @brief Sets up HVC CAN heartbeat with current errors and warnings, then sends it.
 *
 * @param lastWakeTime Pass in from canTX100Hz. Used to update lastStateChangeTime and errors/warnings.
 */
static void sendHeartbeat(TickType_t lastWakeTime) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
    cmr_canHVCState_t currentState = getState();
 8001be8:	f000 fdb4 	bl	8002754 <getState>
 8001bec:	4603      	mov	r3, r0
 8001bee:	75fb      	strb	r3, [r7, #23]
    cmr_canHVCError_t currentError = CMR_CAN_HVC_ERROR_NONE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	82bb      	strh	r3, [r7, #20]
    currentError = checkErrors(currentState);
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fd14 	bl	8001624 <checkErrors>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	82bb      	strh	r3, [r7, #20]

    cmr_canHVCHeartbeat_t HVCHeartbeat = {
 8001c00:	8abb      	ldrh	r3, [r7, #20]
 8001c02:	81bb      	strh	r3, [r7, #12]
 8001c04:	2300      	movs	r3, #0
 8001c06:	73bb      	strb	r3, [r7, #14]
 8001c08:	7dfb      	ldrb	r3, [r7, #23]
 8001c0a:	73fb      	strb	r3, [r7, #15]
        .errorStatus = currentError,
        .hvcMode = CMR_CAN_HVC_MODE_ERROR,
        .hvcState = currentState,
        .relayStatus = getRelayStatus(),
 8001c0c:	f7ff fec0 	bl	8001990 <getRelayStatus>
 8001c10:	4603      	mov	r3, r0
    cmr_canHVCHeartbeat_t HVCHeartbeat = {
 8001c12:	743b      	strb	r3, [r7, #16]
 8001c14:	2300      	movs	r3, #0
 8001c16:	747b      	strb	r3, [r7, #17]
        .uptime_s = 0,
    };

    switch (currentState) {
 8001c18:	7dfb      	ldrb	r3, [r7, #23]
 8001c1a:	2b0b      	cmp	r3, #11
 8001c1c:	d83e      	bhi.n	8001c9c <sendHeartbeat+0xbc>
 8001c1e:	a201      	add	r2, pc, #4	; (adr r2, 8001c24 <sendHeartbeat+0x44>)
 8001c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c24:	08001c91 	.word	0x08001c91
 8001c28:	08001c55 	.word	0x08001c55
 8001c2c:	08001c5b 	.word	0x08001c5b
 8001c30:	08001c61 	.word	0x08001c61
 8001c34:	08001c67 	.word	0x08001c67
 8001c38:	08001c6d 	.word	0x08001c6d
 8001c3c:	08001c73 	.word	0x08001c73
 8001c40:	08001c79 	.word	0x08001c79
 8001c44:	08001c7f 	.word	0x08001c7f
 8001c48:	08001c85 	.word	0x08001c85
 8001c4c:	08001c8b 	.word	0x08001c8b
 8001c50:	08001c97 	.word	0x08001c97
        case CMR_CAN_HVC_STATE_DISCHARGE: // S1
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_IDLE;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73bb      	strb	r3, [r7, #14]
            break;
 8001c58:	e023      	b.n	8001ca2 <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_STANDBY: // S2
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_IDLE;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	73bb      	strb	r3, [r7, #14]
            break;
 8001c5e:	e020      	b.n	8001ca2 <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_DRIVE_PRECHARGE: // S3
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_START;
 8001c60:	2302      	movs	r3, #2
 8001c62:	73bb      	strb	r3, [r7, #14]
            break;
 8001c64:	e01d      	b.n	8001ca2 <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_DRIVE_PRECHARGE_COMPLETE: // S4
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_START;
 8001c66:	2302      	movs	r3, #2
 8001c68:	73bb      	strb	r3, [r7, #14]
            break;
 8001c6a:	e01a      	b.n	8001ca2 <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_DRIVE: // S5
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_RUN;
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	73bb      	strb	r3, [r7, #14]
            break;
 8001c70:	e017      	b.n	8001ca2 <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_CHARGE_PRECHARGE: // S6
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_CHARGE;
 8001c72:	2308      	movs	r3, #8
 8001c74:	73bb      	strb	r3, [r7, #14]
            break;
 8001c76:	e014      	b.n	8001ca2 <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE: // S7
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_CHARGE;
 8001c78:	2308      	movs	r3, #8
 8001c7a:	73bb      	strb	r3, [r7, #14]
            break;
 8001c7c:	e011      	b.n	8001ca2 <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_CHARGE_TRICKLE: // S8
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_CHARGE;
 8001c7e:	2308      	movs	r3, #8
 8001c80:	73bb      	strb	r3, [r7, #14]
            break;
 8001c82:	e00e      	b.n	8001ca2 <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT: // S9
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_CHARGE;
 8001c84:	2308      	movs	r3, #8
 8001c86:	73bb      	strb	r3, [r7, #14]
            break;
 8001c88:	e00b      	b.n	8001ca2 <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE: // S10
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_CHARGE;
 8001c8a:	2308      	movs	r3, #8
 8001c8c:	73bb      	strb	r3, [r7, #14]
            break;
 8001c8e:	e008      	b.n	8001ca2 <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_ERROR: // S0
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_ERROR;
 8001c90:	2300      	movs	r3, #0
 8001c92:	73bb      	strb	r3, [r7, #14]
            break;
 8001c94:	e005      	b.n	8001ca2 <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_CLEAR_ERROR: // S11
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_ERROR;
 8001c96:	2300      	movs	r3, #0
 8001c98:	73bb      	strb	r3, [r7, #14]
            break;
 8001c9a:	e002      	b.n	8001ca2 <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_UNKNOWN:
        default:
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_ERROR;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73bb      	strb	r3, [r7, #14]
            break;
 8001ca0:	bf00      	nop
    }

    canTX(CMR_CANID_HEARTBEAT_HVC, &HVCHeartbeat, sizeof(HVCHeartbeat), canTX100Hz_period_ms);
 8001ca2:	230a      	movs	r3, #10
 8001ca4:	f107 010c 	add.w	r1, r7, #12
 8001ca8:	2206      	movs	r2, #6
 8001caa:	f44f 7081 	mov.w	r0, #258	; 0x102
 8001cae:	f7ff ff63 	bl	8001b78 <canTX>
}
 8001cb2:	bf00      	nop
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop

08001cbc <sendHVCPackVoltage>:

static void sendHVCPackVoltage(void) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
    int32_t bVolt = getBattMillivolts();
 8001cc2:	f7ff fc5b 	bl	800157c <getBattMillivolts>
 8001cc6:	60f8      	str	r0, [r7, #12]
    int32_t hvVolt = getHVmillivolts();
 8001cc8:	f000 fd2c 	bl	8002724 <getHVmillivolts>
 8001ccc:	60b8      	str	r0, [r7, #8]

    cmr_canHVCPackVoltage_t HVCPackVoltage = {
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	603b      	str	r3, [r7, #0]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	607b      	str	r3, [r7, #4]
        .battVoltage_mV = bVolt,
        .hvVoltage_mV = hvVolt,
    };

    canTX(CMR_CANID_HVC_PACK_VOLTAGE, &HVCPackVoltage, sizeof(HVCPackVoltage), canTX100Hz_period_ms);
 8001cd6:	230a      	movs	r3, #10
 8001cd8:	4639      	mov	r1, r7
 8001cda:	2208      	movs	r2, #8
 8001cdc:	f240 3001 	movw	r0, #769	; 0x301
 8001ce0:	f7ff ff4a 	bl	8001b78 <canTX>
}
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <sendBMSPackCurrent>:

static void sendBMSPackCurrent(void) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
    int32_t instantCurrent = getHVmilliamps();
 8001cf2:	f000 fd23 	bl	800273c <getHVmilliamps>
 8001cf6:	60f8      	str	r0, [r7, #12]
    // int32_t avgCurrent = getCurrentAverage(); // TODO: Gustav change this back
    int32_t avgCurrent = instantCurrent;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	60bb      	str	r3, [r7, #8]

    cmr_canBMSPackCurrent_t BMSPackCurrent = {
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	607b      	str	r3, [r7, #4]
        .instantCurrent_mA = instantCurrent,
        .averageCurrent_mA = avgCurrent,
    };

    canTX(CMR_CANID_HVC_PACK_CURRENT, &BMSPackCurrent, sizeof(BMSPackCurrent), canTX100Hz_period_ms);
 8001d04:	230a      	movs	r3, #10
 8001d06:	4639      	mov	r1, r7
 8001d08:	2208      	movs	r2, #8
 8001d0a:	f240 3002 	movw	r0, #770	; 0x302
 8001d0e:	f7ff ff33 	bl	8001b78 <canTX>
}
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <sendBMSBMBStatusVoltage>:

static void sendBMSBMBStatusVoltage(uint8_t bmb_index) {
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	71fb      	strb	r3, [r7, #7]
    uint8_t maxIndex = getBMBMaxVoltIndex(bmb_index);
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fb02 	bl	8001330 <getBMBMaxVoltIndex>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	75fb      	strb	r3, [r7, #23]
    uint8_t minIndex = getBMBMinVoltIndex(bmb_index);
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fb2a 	bl	800138c <getBMBMinVoltIndex>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	75bb      	strb	r3, [r7, #22]
    uint16_t maxVoltage = getBMBVoltage(bmb_index, maxIndex);
 8001d3c:	7dfa      	ldrb	r2, [r7, #23]
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	4611      	mov	r1, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fb70 	bl	8001428 <getBMBVoltage>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	82bb      	strh	r3, [r7, #20]
    uint16_t minVoltage = getBMBVoltage(bmb_index, minIndex);
 8001d4c:	7dba      	ldrb	r2, [r7, #22]
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fb68 	bl	8001428 <getBMBVoltage>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	827b      	strh	r3, [r7, #18]

    cmr_canBMSBMBStatusVoltage_t BMSBMBStatusVoltage = {
 8001d5c:	7dfb      	ldrb	r3, [r7, #23]
 8001d5e:	733b      	strb	r3, [r7, #12]
 8001d60:	7dbb      	ldrb	r3, [r7, #22]
 8001d62:	737b      	strb	r3, [r7, #13]
 8001d64:	8abb      	ldrh	r3, [r7, #20]
 8001d66:	81fb      	strh	r3, [r7, #14]
 8001d68:	8a7b      	ldrh	r3, [r7, #18]
 8001d6a:	823b      	strh	r3, [r7, #16]
        .minVoltIndex = minIndex,
        .maxCellVoltage_mV = maxVoltage,
        .minCellVoltage_mV = minVoltage,
    };

    canTX(CMR_CANID_HVC_BMB_0_STATUS_VOLTAGE + (bmb_index << 1), &BMSBMBStatusVoltage, sizeof(BMSBMBStatusVoltage), canTX10Hz_period_ms);
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8001d78:	b298      	uxth	r0, r3
 8001d7a:	2364      	movs	r3, #100	; 0x64
 8001d7c:	f107 010c 	add.w	r1, r7, #12
 8001d80:	2206      	movs	r2, #6
 8001d82:	f7ff fef9 	bl	8001b78 <canTX>
}
 8001d86:	bf00      	nop
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <sendBMSBMBStatusTemp>:

static void sendBMSBMBStatusTemp(uint8_t bmb_index) {
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	71fb      	strb	r3, [r7, #7]
    uint8_t maxIndex = getBMBMaxTempIndex(bmb_index);
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fa60 	bl	8001260 <getBMBMaxTempIndex>
 8001da0:	4603      	mov	r3, r0
 8001da2:	75fb      	strb	r3, [r7, #23]
    uint8_t minIndex = getBMBMinTempIndex(bmb_index);
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fa8e 	bl	80012c8 <getBMBMinTempIndex>
 8001dac:	4603      	mov	r3, r0
 8001dae:	75bb      	strb	r3, [r7, #22]
    int16_t maxTemp = getBMBTemp(bmb_index, maxIndex);
 8001db0:	7dfa      	ldrb	r2, [r7, #23]
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	4611      	mov	r1, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fb18 	bl	80013ec <getBMBTemp>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	82bb      	strh	r3, [r7, #20]
    int16_t minTemp = getBMBTemp(bmb_index, minIndex);
 8001dc0:	7dba      	ldrb	r2, [r7, #22]
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff fb10 	bl	80013ec <getBMBTemp>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	827b      	strh	r3, [r7, #18]

    cmr_canBMSBMBStatusTemp_t BMSBMBStatusTemp = {
 8001dd0:	7dfb      	ldrb	r3, [r7, #23]
 8001dd2:	733b      	strb	r3, [r7, #12]
 8001dd4:	7dbb      	ldrb	r3, [r7, #22]
 8001dd6:	737b      	strb	r3, [r7, #13]
 8001dd8:	8abb      	ldrh	r3, [r7, #20]
 8001dda:	81fb      	strh	r3, [r7, #14]
 8001ddc:	8a7b      	ldrh	r3, [r7, #18]
 8001dde:	823b      	strh	r3, [r7, #16]
        .minTempIndex = minIndex,
        .maxCellTemp_C = maxTemp,
        .minCellTemp_C = minTemp,
    };

    canTX(CMR_CANID_HVC_BMB_0_STATUS_TEMP + (bmb_index << 1), &BMSBMBStatusTemp, sizeof(BMSBMBStatusTemp), canTX1Hz_period_ms);
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	f203 3381 	addw	r3, r3, #897	; 0x381
 8001dec:	b298      	uxth	r0, r3
 8001dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df2:	f107 010c 	add.w	r1, r7, #12
 8001df6:	2206      	movs	r2, #6
 8001df8:	f7ff febe 	bl	8001b78 <canTX>
}
 8001dfc:	bf00      	nop
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <sendBMSMinMaxCellVoltage>:

static void sendBMSMinMaxCellVoltage(void) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
    uint16_t minCellVoltage = UINT16_MAX;
 8001e0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e0e:	82fb      	strh	r3, [r7, #22]
    uint16_t maxCellVoltage = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	82bb      	strh	r3, [r7, #20]
	uint8_t maxCellVoltageBMBNum;
	
	uint8_t minCellVoltageIndex;
	uint8_t maxCellVoltageIndex;

    for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001e14:	2300      	movs	r3, #0
 8001e16:	73fb      	strb	r3, [r7, #15]
 8001e18:	e032      	b.n	8001e80 <sendBMSMinMaxCellVoltage+0x7c>
        uint8_t maxIndex = getBMBMaxVoltIndex(bmb_index);
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fa87 	bl	8001330 <getBMBMaxVoltIndex>
 8001e22:	4603      	mov	r3, r0
 8001e24:	73bb      	strb	r3, [r7, #14]
        uint8_t minIndex = getBMBMinVoltIndex(bmb_index);
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff faaf 	bl	800138c <getBMBMinVoltIndex>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	737b      	strb	r3, [r7, #13]
        uint16_t maxVoltage = getBMBVoltage(bmb_index, maxIndex);
 8001e32:	7bba      	ldrb	r2, [r7, #14]
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff faf5 	bl	8001428 <getBMBVoltage>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	817b      	strh	r3, [r7, #10]
        uint16_t minVoltage = getBMBVoltage(bmb_index, minIndex);
 8001e42:	7b7a      	ldrb	r2, [r7, #13]
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff faed 	bl	8001428 <getBMBVoltage>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	813b      	strh	r3, [r7, #8]

        if (maxVoltage > maxCellVoltage) {
 8001e52:	897a      	ldrh	r2, [r7, #10]
 8001e54:	8abb      	ldrh	r3, [r7, #20]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d905      	bls.n	8001e66 <sendBMSMinMaxCellVoltage+0x62>
            maxCellVoltage = maxVoltage;
 8001e5a:	897b      	ldrh	r3, [r7, #10]
 8001e5c:	82bb      	strh	r3, [r7, #20]
            maxCellVoltageBMBNum = bmb_index;
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	74bb      	strb	r3, [r7, #18]
            maxCellVoltageIndex = maxIndex;
 8001e62:	7bbb      	ldrb	r3, [r7, #14]
 8001e64:	743b      	strb	r3, [r7, #16]
        }

        if (minVoltage < minCellVoltage) {
 8001e66:	893a      	ldrh	r2, [r7, #8]
 8001e68:	8afb      	ldrh	r3, [r7, #22]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d205      	bcs.n	8001e7a <sendBMSMinMaxCellVoltage+0x76>
            minCellVoltage = minVoltage;
 8001e6e:	893b      	ldrh	r3, [r7, #8]
 8001e70:	82fb      	strh	r3, [r7, #22]
            minCellVoltageBMBNum = bmb_index;
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	74fb      	strb	r3, [r7, #19]
            minCellVoltageIndex = minIndex;
 8001e76:	7b7b      	ldrb	r3, [r7, #13]
 8001e78:	747b      	strb	r3, [r7, #17]
    for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	2b0f      	cmp	r3, #15
 8001e84:	d9c9      	bls.n	8001e1a <sendBMSMinMaxCellVoltage+0x16>
        }
    }

    cmr_canBMSMinMaxCellVoltage_t BMSBMBMinMaxVoltage = {
 8001e86:	8afb      	ldrh	r3, [r7, #22]
 8001e88:	803b      	strh	r3, [r7, #0]
 8001e8a:	8abb      	ldrh	r3, [r7, #20]
 8001e8c:	807b      	strh	r3, [r7, #2]
 8001e8e:	7cfb      	ldrb	r3, [r7, #19]
 8001e90:	713b      	strb	r3, [r7, #4]
 8001e92:	7c7b      	ldrb	r3, [r7, #17]
 8001e94:	717b      	strb	r3, [r7, #5]
 8001e96:	7cbb      	ldrb	r3, [r7, #18]
 8001e98:	71bb      	strb	r3, [r7, #6]
 8001e9a:	7c3b      	ldrb	r3, [r7, #16]
 8001e9c:	71fb      	strb	r3, [r7, #7]
        .maxVoltageBMBNum = maxCellVoltageBMBNum,
        .minVoltageCellNum = minCellVoltageIndex,
        .maxVoltageCellNum = maxCellVoltageIndex,
    };

    canTX(CMR_CANID_HVC_MIN_MAX_CELL_VOLTAGE, &BMSBMBMinMaxVoltage, sizeof(BMSBMBMinMaxVoltage), canTX200Hz_period_ms);
 8001e9e:	2305      	movs	r3, #5
 8001ea0:	4639      	mov	r1, r7
 8001ea2:	2208      	movs	r2, #8
 8001ea4:	f44f 7044 	mov.w	r0, #784	; 0x310
 8001ea8:	f7ff fe66 	bl	8001b78 <canTX>
}
 8001eac:	bf00      	nop
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <sendBMSMinMaxCellTemp>:

static void sendBMSMinMaxCellTemp(void) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
    uint16_t minCellTemp = UINT16_MAX;
 8001eba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ebe:	82fb      	strh	r3, [r7, #22]
    uint16_t maxCellTemp = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	82bb      	strh	r3, [r7, #20]
	uint8_t maxCellTempBMBNum;
	
	uint8_t minCellTempIndex;
	uint8_t maxCellTempIndex;

    for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	73fb      	strb	r3, [r7, #15]
 8001ec8:	e032      	b.n	8001f30 <sendBMSMinMaxCellTemp+0x7c>
        uint8_t maxIndex = getBMBMaxTempIndex(bmb_index);
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff f9c7 	bl	8001260 <getBMBMaxTempIndex>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	73bb      	strb	r3, [r7, #14]
        uint8_t minIndex = getBMBMinTempIndex(bmb_index);
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff f9f5 	bl	80012c8 <getBMBMinTempIndex>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	737b      	strb	r3, [r7, #13]
        uint16_t maxTemp = getBMBTemp(bmb_index, maxIndex);
 8001ee2:	7bba      	ldrb	r2, [r7, #14]
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fa7f 	bl	80013ec <getBMBTemp>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	817b      	strh	r3, [r7, #10]
        uint16_t minTemp = getBMBTemp(bmb_index, minIndex);
 8001ef2:	7b7a      	ldrb	r2, [r7, #13]
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff fa77 	bl	80013ec <getBMBTemp>
 8001efe:	4603      	mov	r3, r0
 8001f00:	813b      	strh	r3, [r7, #8]

        if (maxTemp > maxCellTemp) {
 8001f02:	897a      	ldrh	r2, [r7, #10]
 8001f04:	8abb      	ldrh	r3, [r7, #20]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d905      	bls.n	8001f16 <sendBMSMinMaxCellTemp+0x62>
            maxCellTemp = maxTemp;
 8001f0a:	897b      	ldrh	r3, [r7, #10]
 8001f0c:	82bb      	strh	r3, [r7, #20]
            maxCellTempBMBNum = bmb_index;
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	74bb      	strb	r3, [r7, #18]
            maxCellTempIndex = maxIndex;
 8001f12:	7bbb      	ldrb	r3, [r7, #14]
 8001f14:	743b      	strb	r3, [r7, #16]
        }

        if (minTemp < minCellTemp) {
 8001f16:	893a      	ldrh	r2, [r7, #8]
 8001f18:	8afb      	ldrh	r3, [r7, #22]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d205      	bcs.n	8001f2a <sendBMSMinMaxCellTemp+0x76>
            minCellTemp = minTemp;
 8001f1e:	893b      	ldrh	r3, [r7, #8]
 8001f20:	82fb      	strh	r3, [r7, #22]
            minCellTempBMBNum = bmb_index;
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	74fb      	strb	r3, [r7, #19]
            minCellTempIndex = minIndex;
 8001f26:	7b7b      	ldrb	r3, [r7, #13]
 8001f28:	747b      	strb	r3, [r7, #17]
    for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	2b0f      	cmp	r3, #15
 8001f34:	d9c9      	bls.n	8001eca <sendBMSMinMaxCellTemp+0x16>
        }
    }

    cmr_canBMSMinMaxCellTemperature_t BMSBMBMinMaxTemperature = {
 8001f36:	8afb      	ldrh	r3, [r7, #22]
 8001f38:	803b      	strh	r3, [r7, #0]
 8001f3a:	8abb      	ldrh	r3, [r7, #20]
 8001f3c:	807b      	strh	r3, [r7, #2]
 8001f3e:	7cfb      	ldrb	r3, [r7, #19]
 8001f40:	713b      	strb	r3, [r7, #4]
 8001f42:	7c7b      	ldrb	r3, [r7, #17]
 8001f44:	717b      	strb	r3, [r7, #5]
 8001f46:	7cbb      	ldrb	r3, [r7, #18]
 8001f48:	71bb      	strb	r3, [r7, #6]
 8001f4a:	7c3b      	ldrb	r3, [r7, #16]
 8001f4c:	71fb      	strb	r3, [r7, #7]
        .maxTempBMBNum = maxCellTempBMBNum,
        .minTempCellNum = minCellTempIndex,
        .maxTempCellNum = maxCellTempIndex,
    };

    canTX(CMR_CANID_HVC_MIN_MAX_CELL_TEMPERATURE, &BMSBMBMinMaxTemperature, sizeof(BMSBMBMinMaxTemperature), canTX10Hz_period_ms);
 8001f4e:	2364      	movs	r3, #100	; 0x64
 8001f50:	4639      	mov	r1, r7
 8001f52:	2208      	movs	r2, #8
 8001f54:	f240 3011 	movw	r0, #785	; 0x311
 8001f58:	f7ff fe0e 	bl	8001b78 <canTX>
}
 8001f5c:	bf00      	nop
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <sendBMSLowVoltage>:

static void sendBMSLowVoltage(void) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
    cmr_canBMSLowVoltage_t BMSLowVoltage = {
        .ibatt_mA = (getSafetymillivolts()*15)/2000, // Convert mA to 2/15th mA //TODO: Gustav change this back?
        .iDCDC_mA =0,
        .vAIR_mV = (getAIRmillivolts()*15)/2000, // Convert mV to 2/15th V
        .vbatt_mV= (getLVmillivolts()*15/2000), // Convert mV to 2/15th V
 8001f6a:	f000 fbb7 	bl	80026dc <getLVmillivolts>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	4613      	mov	r3, r2
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	4a18      	ldr	r2, [pc, #96]	; (8001fd8 <sendBMSLowVoltage+0x74>)
 8001f78:	fb82 1203 	smull	r1, r2, r2, r3
 8001f7c:	11d2      	asrs	r2, r2, #7
 8001f7e:	17db      	asrs	r3, r3, #31
 8001f80:	1ad3      	subs	r3, r2, r3
    cmr_canBMSLowVoltage_t BMSLowVoltage = {
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	713b      	strb	r3, [r7, #4]
        .vAIR_mV = (getAIRmillivolts()*15)/2000, // Convert mV to 2/15th V
 8001f86:	f000 fbb5 	bl	80026f4 <getAIRmillivolts>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	1a9b      	subs	r3, r3, r2
 8001f92:	4a11      	ldr	r2, [pc, #68]	; (8001fd8 <sendBMSLowVoltage+0x74>)
 8001f94:	fb82 1203 	smull	r1, r2, r2, r3
 8001f98:	11d2      	asrs	r2, r2, #7
 8001f9a:	17db      	asrs	r3, r3, #31
 8001f9c:	1ad3      	subs	r3, r2, r3
    cmr_canBMSLowVoltage_t BMSLowVoltage = {
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	717b      	strb	r3, [r7, #5]
        .ibatt_mA = (getSafetymillivolts()*15)/2000, // Convert mA to 2/15th mA //TODO: Gustav change this back?
 8001fa2:	f000 fbb3 	bl	800270c <getSafetymillivolts>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	4613      	mov	r3, r2
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	1a9b      	subs	r3, r3, r2
 8001fae:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <sendBMSLowVoltage+0x74>)
 8001fb0:	fb82 1203 	smull	r1, r2, r2, r3
 8001fb4:	11d2      	asrs	r2, r2, #7
 8001fb6:	17db      	asrs	r3, r3, #31
 8001fb8:	1ad3      	subs	r3, r2, r3
    cmr_canBMSLowVoltage_t BMSLowVoltage = {
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	71bb      	strb	r3, [r7, #6]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	71fb      	strb	r3, [r7, #7]
    };
    (void) BMSLowVoltage;

    canTX(CMR_CANID_HVC_LOW_VOLTAGE, &BMSLowVoltage, sizeof(BMSLowVoltage), canTX100Hz_period_ms);
 8001fc2:	230a      	movs	r3, #10
 8001fc4:	1d39      	adds	r1, r7, #4
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	f240 3003 	movw	r0, #771	; 0x303
 8001fcc:	f7ff fdd4 	bl	8001b78 <canTX>
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	10624dd3 	.word	0x10624dd3

08001fdc <sendBMSBMBStatusErrors>:

static void sendBMSBMBStatusErrors(void) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
	configASSERT(BMB_ERR_LEN < 16);

	cmr_canHVCBMBErrors_t errs = {
			.BMB1_2_Errs = (BMBErrs[0] << 4) | BMBErrs[1],
 8001fe2:	4b31      	ldr	r3, [pc, #196]	; (80020a8 <sendBMSBMBStatusErrors+0xcc>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	b25a      	sxtb	r2, r3
 8001fea:	4b2f      	ldr	r3, [pc, #188]	; (80020a8 <sendBMSBMBStatusErrors+0xcc>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	b25b      	sxtb	r3, r3
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	b25b      	sxtb	r3, r3
 8001ff4:	b2db      	uxtb	r3, r3
	cmr_canHVCBMBErrors_t errs = {
 8001ff6:	703b      	strb	r3, [r7, #0]
			.BMB3_4_Errs = (BMBErrs[2] << 4) | BMBErrs[3],
 8001ff8:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <sendBMSBMBStatusErrors+0xcc>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	b25a      	sxtb	r2, r3
 8002000:	4b29      	ldr	r3, [pc, #164]	; (80020a8 <sendBMSBMBStatusErrors+0xcc>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	b25b      	sxtb	r3, r3
 8002006:	4313      	orrs	r3, r2
 8002008:	b25b      	sxtb	r3, r3
 800200a:	b2db      	uxtb	r3, r3
	cmr_canHVCBMBErrors_t errs = {
 800200c:	707b      	strb	r3, [r7, #1]
			.BMB5_6_Errs = (BMBErrs[4] << 4) | BMBErrs[5],
 800200e:	4b26      	ldr	r3, [pc, #152]	; (80020a8 <sendBMSBMBStatusErrors+0xcc>)
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	b25a      	sxtb	r2, r3
 8002016:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <sendBMSBMBStatusErrors+0xcc>)
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	b25b      	sxtb	r3, r3
 800201c:	4313      	orrs	r3, r2
 800201e:	b25b      	sxtb	r3, r3
 8002020:	b2db      	uxtb	r3, r3
	cmr_canHVCBMBErrors_t errs = {
 8002022:	70bb      	strb	r3, [r7, #2]
			.BMB7_8_Errs = (BMBErrs[6] << 4) | BMBErrs[7],
 8002024:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <sendBMSBMBStatusErrors+0xcc>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	b25a      	sxtb	r2, r3
 800202c:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <sendBMSBMBStatusErrors+0xcc>)
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	b25b      	sxtb	r3, r3
 8002032:	4313      	orrs	r3, r2
 8002034:	b25b      	sxtb	r3, r3
 8002036:	b2db      	uxtb	r3, r3
	cmr_canHVCBMBErrors_t errs = {
 8002038:	70fb      	strb	r3, [r7, #3]
			.BMB9_10_Errs = (BMBErrs[8] << 4) | BMBErrs[9],
 800203a:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <sendBMSBMBStatusErrors+0xcc>)
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	b25a      	sxtb	r2, r3
 8002042:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <sendBMSBMBStatusErrors+0xcc>)
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	b25b      	sxtb	r3, r3
 8002048:	4313      	orrs	r3, r2
 800204a:	b25b      	sxtb	r3, r3
 800204c:	b2db      	uxtb	r3, r3
	cmr_canHVCBMBErrors_t errs = {
 800204e:	713b      	strb	r3, [r7, #4]
			.BMB11_12_Errs = (BMBErrs[10] << 4) | BMBErrs[11],
 8002050:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <sendBMSBMBStatusErrors+0xcc>)
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	b25a      	sxtb	r2, r3
 8002058:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <sendBMSBMBStatusErrors+0xcc>)
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	b25b      	sxtb	r3, r3
 800205e:	4313      	orrs	r3, r2
 8002060:	b25b      	sxtb	r3, r3
 8002062:	b2db      	uxtb	r3, r3
	cmr_canHVCBMBErrors_t errs = {
 8002064:	717b      	strb	r3, [r7, #5]
			.BMB13_14_Errs = (BMBErrs[12] << 4) | BMBErrs[13],
 8002066:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <sendBMSBMBStatusErrors+0xcc>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	b25a      	sxtb	r2, r3
 800206e:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <sendBMSBMBStatusErrors+0xcc>)
 8002070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002072:	b25b      	sxtb	r3, r3
 8002074:	4313      	orrs	r3, r2
 8002076:	b25b      	sxtb	r3, r3
 8002078:	b2db      	uxtb	r3, r3
	cmr_canHVCBMBErrors_t errs = {
 800207a:	71bb      	strb	r3, [r7, #6]
			.BMB15_16_Errs = (BMBErrs[14] << 4) | BMBErrs[15],
 800207c:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <sendBMSBMBStatusErrors+0xcc>)
 800207e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	b25a      	sxtb	r2, r3
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <sendBMSBMBStatusErrors+0xcc>)
 8002086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002088:	b25b      	sxtb	r3, r3
 800208a:	4313      	orrs	r3, r2
 800208c:	b25b      	sxtb	r3, r3
 800208e:	b2db      	uxtb	r3, r3
	cmr_canHVCBMBErrors_t errs = {
 8002090:	71fb      	strb	r3, [r7, #7]
	};

	canTX(CMR_CANID_HVC_BMB_STATUS_ERRORS, &errs, sizeof(cmr_canHVCBMBErrors_t), canTX100Hz_period_ms);
 8002092:	230a      	movs	r3, #10
 8002094:	4639      	mov	r1, r7
 8002096:	2208      	movs	r2, #8
 8002098:	f44f 7041 	mov.w	r0, #772	; 0x304
 800209c:	f7ff fd6c 	bl	8001b78 <canTX>
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	2000588c 	.word	0x2000588c

080020ac <sendAllBMBVoltages>:

static void sendAllBMBVoltages(void) {
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
//        canTX(CMR_CANID_HVC_BMB_0_STATUS_VOLTAGE_2 + (bmbIndex << 4), &volt2, sizeof(volt2), canTX1Hz_period_ms);
//        canTX(CMR_CANID_HVC_BMB_0_STATUS_TEMP_0 + (bmbIndex << 4), &temp0, sizeof(temp0), canTX1Hz_period_ms);
//        canTX(CMR_CANID_HVC_BMB_0_STATUS_TEMP_1 + (bmbIndex << 4), &temp1, sizeof(temp1), canTX1Hz_period_ms);
//        canTX(CMR_CANID_HVC_BMB_0_STATUS_TEMP_2 + (bmbIndex << 4), &temp2, sizeof(temp2), canTX1Hz_period_ms);
//    }
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <gpioInit>:
};

/**
 * @brief Initializes the GPIO interface.
 */
void gpioInit(void) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
    cmr_gpioPinInit(
 80020c0:	210b      	movs	r1, #11
 80020c2:	4802      	ldr	r0, [pc, #8]	; (80020cc <gpioInit+0x10>)
 80020c4:	f002 f832 	bl	800412c <cmr_gpioPinInit>
        gpioPinConfigs, sizeof(gpioPinConfigs) / sizeof(gpioPinConfigs[0])
    );
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	0800e04c 	.word	0x0800e04c

080020d0 <i2cInit>:

static cmr_i2c_t bmb_i2c;

extern volatile int BMBErrs[NUM_BMBS];

bool i2cInit(void) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08c      	sub	sp, #48	; 0x30
 80020d4:	af08      	add	r7, sp, #32
    cmr_i2cDmaInit(&bmb_i2c, I2C1,
 80020d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020da:	9307      	str	r3, [sp, #28]
 80020dc:	4b53      	ldr	r3, [pc, #332]	; (800222c <i2cInit+0x15c>)
 80020de:	9306      	str	r3, [sp, #24]
 80020e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020e4:	9305      	str	r3, [sp, #20]
 80020e6:	4b51      	ldr	r3, [pc, #324]	; (800222c <i2cInit+0x15c>)
 80020e8:	9304      	str	r3, [sp, #16]
 80020ea:	2300      	movs	r3, #0
 80020ec:	9303      	str	r3, [sp, #12]
 80020ee:	4b50      	ldr	r3, [pc, #320]	; (8002230 <i2cInit+0x160>)
 80020f0:	9302      	str	r3, [sp, #8]
 80020f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020f6:	9301      	str	r3, [sp, #4]
 80020f8:	4b4e      	ldr	r3, [pc, #312]	; (8002234 <i2cInit+0x164>)
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	2300      	movs	r3, #0
 80020fe:	4a4e      	ldr	r2, [pc, #312]	; (8002238 <i2cInit+0x168>)
 8002100:	494e      	ldr	r1, [pc, #312]	; (800223c <i2cInit+0x16c>)
 8002102:	484f      	ldr	r0, [pc, #316]	; (8002240 <i2cInit+0x170>)
 8002104:	f002 f96c 	bl	80043e0 <cmr_i2cDmaInit>
                GPIOB, GPIO_PIN_8, // clock
                GPIOB, GPIO_PIN_9); // data

    // This is so that the I2C devices have time to turn
    // on, b/c they are controlled by the relay
    TickType_t xLastWakeTime = xTaskGetTickCount();
 8002108:	f004 f8e6 	bl	80062d8 <xTaskGetTickCount>
 800210c:	4603      	mov	r3, r0
 800210e:	607b      	str	r3, [r7, #4]
    vTaskDelayUntil(&xLastWakeTime, 2000);
 8002110:	1d3b      	adds	r3, r7, #4
 8002112:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002116:	4618      	mov	r0, r3
 8002118:	f003 ff68 	bl	8005fec <vTaskDelayUntil>

    for (int bmb = 0; bmb < I2C_NUM_BMBS; bmb++) {
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	e07b      	b.n	800221a <i2cInit+0x14a>
        for (int side = 1; side < 2; side++) { //TODO: CHANGE THIS BACK
 8002122:	2301      	movs	r3, #1
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	e05f      	b.n	80021e8 <i2cInit+0x118>
            if (!i2c_enableI2CMux(bmb, side)) {
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	4611      	mov	r1, r2
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f888 	bl	8002248 <i2c_enableI2CMux>
 8002138:	4603      	mov	r3, r0
 800213a:	f083 0301 	eor.w	r3, r3, #1
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d009      	beq.n	8002158 <i2cInit+0x88>
                BMBErrs[bmb*2+side] = BMB_INIT_ENABLE_I2C_MUX_ERR;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	005a      	lsls	r2, r3, #1
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4413      	add	r3, r2
 800214c:	4a3d      	ldr	r2, [pc, #244]	; (8002244 <i2cInit+0x174>)
 800214e:	2101      	movs	r1, #1
 8002150:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                return false;
 8002154:	2300      	movs	r3, #0
 8002156:	e064      	b.n	8002222 <i2cInit+0x152>
            }
            // verify mux is correctly set
            uint8_t recv_en, recv_side;
            if (!i2c_readI2CMux(bmb, &recv_en, &recv_side)) {
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	b2db      	uxtb	r3, r3
 800215c:	1cba      	adds	r2, r7, #2
 800215e:	1cf9      	adds	r1, r7, #3
 8002160:	4618      	mov	r0, r3
 8002162:	f000 f897 	bl	8002294 <i2c_readI2CMux>
 8002166:	4603      	mov	r3, r0
 8002168:	f083 0301 	eor.w	r3, r3, #1
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <i2cInit+0xb6>
                BMBErrs[bmb*2+side] = BMB_INIT_READ_I2C_MUX_ERR;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	005a      	lsls	r2, r3, #1
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	4413      	add	r3, r2
 800217a:	4a32      	ldr	r2, [pc, #200]	; (8002244 <i2cInit+0x174>)
 800217c:	2102      	movs	r1, #2
 800217e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            	return false;
 8002182:	2300      	movs	r3, #0
 8002184:	e04d      	b.n	8002222 <i2cInit+0x152>
            }

            if (!(recv_en && recv_side == side))
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d004      	beq.n	8002196 <i2cInit+0xc6>
 800218c:	78bb      	ldrb	r3, [r7, #2]
 800218e:	461a      	mov	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	4293      	cmp	r3, r2
 8002194:	d001      	beq.n	800219a <i2cInit+0xca>
            	return false;
 8002196:	2300      	movs	r3, #0
 8002198:	e043      	b.n	8002222 <i2cInit+0x152>
            if (!i2c_configSelectMux()) {
 800219a:	f000 f8c9 	bl	8002330 <i2c_configSelectMux>
 800219e:	4603      	mov	r3, r0
 80021a0:	f083 0301 	eor.w	r3, r3, #1
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d009      	beq.n	80021be <i2cInit+0xee>
                BMBErrs[bmb*2+side] = BMB_INIT_CONFIG_SEL_MUX_ERR;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	005a      	lsls	r2, r3, #1
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	4413      	add	r3, r2
 80021b2:	4a24      	ldr	r2, [pc, #144]	; (8002244 <i2cInit+0x174>)
 80021b4:	2103      	movs	r1, #3
 80021b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            	return false;
 80021ba:	2300      	movs	r3, #0
 80021bc:	e031      	b.n	8002222 <i2cInit+0x152>
            }
            if (!i2c_configADC()) {
 80021be:	f000 f929 	bl	8002414 <i2c_configADC>
 80021c2:	4603      	mov	r3, r0
 80021c4:	f083 0301 	eor.w	r3, r3, #1
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d009      	beq.n	80021e2 <i2cInit+0x112>
                BMBErrs[bmb*2+side] = BMB_INIT_CONFIG_ADC_ERR;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	005a      	lsls	r2, r3, #1
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	4413      	add	r3, r2
 80021d6:	4a1b      	ldr	r2, [pc, #108]	; (8002244 <i2cInit+0x174>)
 80021d8:	2104      	movs	r1, #4
 80021da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            	return false;
 80021de:	2300      	movs	r3, #0
 80021e0:	e01f      	b.n	8002222 <i2cInit+0x152>
        for (int side = 1; side < 2; side++) { //TODO: CHANGE THIS BACK
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	3301      	adds	r3, #1
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	dd9c      	ble.n	8002128 <i2cInit+0x58>
            }
        }
        if (!i2c_disableI2CMux(bmb)) {
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 f87c 	bl	80022f0 <i2c_disableI2CMux>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f083 0301 	eor.w	r3, r3, #1
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d007      	beq.n	8002214 <i2cInit+0x144>
            BMBErrs[bmb*2] = BMB_INIT_DISABLE_I2C_MUX_ERR;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <i2cInit+0x174>)
 800220a:	2105      	movs	r1, #5
 800220c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	return false;
 8002210:	2300      	movs	r3, #0
 8002212:	e006      	b.n	8002222 <i2cInit+0x152>
    for (int bmb = 0; bmb < I2C_NUM_BMBS; bmb++) {
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	3301      	adds	r3, #1
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	dd80      	ble.n	8002122 <i2cInit+0x52>
        }
    }
    return true;
 8002220:	2301      	movs	r3, #1
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40020400 	.word	0x40020400
 8002230:	00061a80 	.word	0x00061a80
 8002234:	40026010 	.word	0x40026010
 8002238:	40026028 	.word	0x40026028
 800223c:	40005400 	.word	0x40005400
 8002240:	2001a4d4 	.word	0x2001a4d4
 8002244:	2000588c 	.word	0x2000588c

08002248 <i2c_enableI2CMux>:
//        }
//    }
//    return 0;
//}

bool i2c_enableI2CMux(uint8_t bmb, uint8_t side) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af02      	add	r7, sp, #8
 800224e:	4603      	mov	r3, r0
 8002250:	460a      	mov	r2, r1
 8002252:	71fb      	strb	r3, [r7, #7]
 8002254:	4613      	mov	r3, r2
 8002256:	71bb      	strb	r3, [r7, #6]
    // bit 2 is enable bit, bit 1 & 0 is the side (either 00 or 01)
    uint8_t data = 0x4 | side;
 8002258:	79bb      	ldrb	r3, [r7, #6]
 800225a:	f043 0304 	orr.w	r3, r3, #4
 800225e:	b2db      	uxtb	r3, r3
 8002260:	73fb      	strb	r3, [r7, #15]
    if(cmr_i2cDmaTX(&bmb_i2c, BMS_MUX_BASE_ADDR + bmb, &data, 1, I2C_TIMEOUT) != 0) {
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	b29b      	uxth	r3, r3
 8002266:	3370      	adds	r3, #112	; 0x70
 8002268:	b299      	uxth	r1, r3
 800226a:	f107 020f 	add.w	r2, r7, #15
 800226e:	2332      	movs	r3, #50	; 0x32
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	2301      	movs	r3, #1
 8002274:	4806      	ldr	r0, [pc, #24]	; (8002290 <i2c_enableI2CMux+0x48>)
 8002276:	f002 fa79 	bl	800476c <cmr_i2cDmaTX>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <i2c_enableI2CMux+0x3c>
        return false;
 8002280:	2300      	movs	r3, #0
 8002282:	e000      	b.n	8002286 <i2c_enableI2CMux+0x3e>
    }
    return true;
 8002284:	2301      	movs	r3, #1
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2001a4d4 	.word	0x2001a4d4

08002294 <i2c_readI2CMux>:

bool i2c_readI2CMux(uint8_t bmb, uint8_t *enabled, uint8_t *side) {
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af02      	add	r7, sp, #8
 800229a:	4603      	mov	r3, r0
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	73fb      	strb	r3, [r7, #15]
    // bit 2 is enable bit, bit 1 & 0 is the side (either 00 or 01)
    uint8_t buf;
    if(cmr_i2cDmaRX(&bmb_i2c, BMS_MUX_BASE_ADDR + bmb, &buf, 1, I2C_TIMEOUT) != 0) {
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	3370      	adds	r3, #112	; 0x70
 80022a8:	b299      	uxth	r1, r3
 80022aa:	f107 0217 	add.w	r2, r7, #23
 80022ae:	2332      	movs	r3, #50	; 0x32
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	2301      	movs	r3, #1
 80022b4:	480d      	ldr	r0, [pc, #52]	; (80022ec <i2c_readI2CMux+0x58>)
 80022b6:	f002 facb 	bl	8004850 <cmr_i2cDmaRX>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <i2c_readI2CMux+0x30>
        return false;
 80022c0:	2300      	movs	r3, #0
 80022c2:	e00e      	b.n	80022e2 <i2c_readI2CMux+0x4e>
    }
    *enabled = (buf >> 2) & 0x1;
 80022c4:	7dfb      	ldrb	r3, [r7, #23]
 80022c6:	089b      	lsrs	r3, r3, #2
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	701a      	strb	r2, [r3, #0]
    *side = buf & 0x1;
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	701a      	strb	r2, [r3, #0]
    return true;
 80022e0:	2301      	movs	r3, #1
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	2001a4d4 	.word	0x2001a4d4

080022f0 <i2c_disableI2CMux>:

bool i2c_disableI2CMux(uint8_t bmb) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
    // bit 2 is enable bit
    uint8_t data = 0x0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	73fb      	strb	r3, [r7, #15]
    if(cmr_i2cDmaTX(&bmb_i2c, BMS_MUX_BASE_ADDR + bmb, &data, 1, I2C_TIMEOUT) != 0) {
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	b29b      	uxth	r3, r3
 8002302:	3370      	adds	r3, #112	; 0x70
 8002304:	b299      	uxth	r1, r3
 8002306:	f107 020f 	add.w	r2, r7, #15
 800230a:	2332      	movs	r3, #50	; 0x32
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	2301      	movs	r3, #1
 8002310:	4806      	ldr	r0, [pc, #24]	; (800232c <i2c_disableI2CMux+0x3c>)
 8002312:	f002 fa2b 	bl	800476c <cmr_i2cDmaTX>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <i2c_disableI2CMux+0x30>
        return false;
 800231c:	2300      	movs	r3, #0
 800231e:	e000      	b.n	8002322 <i2c_disableI2CMux+0x32>
    }
    return true;
 8002320:	2301      	movs	r3, #1
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	2001a4d4 	.word	0x2001a4d4

08002330 <i2c_configSelectMux>:

bool i2c_configSelectMux() {
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af02      	add	r7, sp, #8
    // select control register, set them all to output
    uint8_t data[2] = {0x3, 0x00};
 8002336:	2303      	movs	r3, #3
 8002338:	80bb      	strh	r3, [r7, #4]
    //i2c_flipEndianness(data, 2);
    if (cmr_i2cDmaTX(&bmb_i2c, BMS_SELECT_IO_ADDR, (uint8_t*)&data, 2, I2C_TIMEOUT) != 0) {
 800233a:	1d3a      	adds	r2, r7, #4
 800233c:	2332      	movs	r3, #50	; 0x32
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2302      	movs	r3, #2
 8002342:	2141      	movs	r1, #65	; 0x41
 8002344:	4806      	ldr	r0, [pc, #24]	; (8002360 <i2c_configSelectMux+0x30>)
 8002346:	f002 fa11 	bl	800476c <cmr_i2cDmaTX>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <i2c_configSelectMux+0x24>
        return false;
 8002350:	2300      	movs	r3, #0
 8002352:	e000      	b.n	8002356 <i2c_configSelectMux+0x26>
    }
    return true;
 8002354:	2301      	movs	r3, #1
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	2001a4d4 	.word	0x2001a4d4

08002364 <i2c_select4MuxChannel>:

bool i2c_select4MuxChannel(uint8_t channel) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af02      	add	r7, sp, #8
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]
    // 0x1 is output port, we set select lines of mux
    // mux only uses last 2 bits, the top 4th bit is the LED blinking
    // save top 2 bits, overwrite bottom 2 bits
    selectIOCurrent = (selectIOCurrent & 0xC) | channel;
 800236e:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <i2c_select4MuxChannel+0x54>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	b25b      	sxtb	r3, r3
 8002374:	f003 030c 	and.w	r3, r3, #12
 8002378:	b25a      	sxtb	r2, r3
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	4313      	orrs	r3, r2
 8002380:	b25b      	sxtb	r3, r3
 8002382:	b2da      	uxtb	r2, r3
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <i2c_select4MuxChannel+0x54>)
 8002386:	701a      	strb	r2, [r3, #0]
    uint8_t outData[2] = {0x1, selectIOCurrent};
 8002388:	2301      	movs	r3, #1
 800238a:	733b      	strb	r3, [r7, #12]
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <i2c_select4MuxChannel+0x54>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	737b      	strb	r3, [r7, #13]
    //i2c_flipEndianness(outData, 2);
    if(cmr_i2cDmaTX(&bmb_i2c, BMS_SELECT_IO_ADDR, (uint8_t*)&outData, 2, I2C_TIMEOUT) != 0) {
 8002392:	f107 020c 	add.w	r2, r7, #12
 8002396:	2332      	movs	r3, #50	; 0x32
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	2302      	movs	r3, #2
 800239c:	2141      	movs	r1, #65	; 0x41
 800239e:	4807      	ldr	r0, [pc, #28]	; (80023bc <i2c_select4MuxChannel+0x58>)
 80023a0:	f002 f9e4 	bl	800476c <cmr_i2cDmaTX>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <i2c_select4MuxChannel+0x4a>
        return false;
 80023aa:	2300      	movs	r3, #0
 80023ac:	e000      	b.n	80023b0 <i2c_select4MuxChannel+0x4c>
    }
    return true;
 80023ae:	2301      	movs	r3, #1
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	2001a4d0 	.word	0x2001a4d0
 80023bc:	2001a4d4 	.word	0x2001a4d4

080023c0 <i2c_selectMuxBlink>:

bool i2c_selectMuxBlink() {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af02      	add	r7, sp, #8
    // flip top 2 bits, don't flip bottom 2 bits
    selectIOCurrent = (~selectIOCurrent & 0xC) | (selectIOCurrent & 0x3);
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <i2c_selectMuxBlink+0x4c>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	b25b      	sxtb	r3, r3
 80023cc:	f003 030f 	and.w	r3, r3, #15
 80023d0:	b25b      	sxtb	r3, r3
 80023d2:	f083 030c 	eor.w	r3, r3, #12
 80023d6:	b25b      	sxtb	r3, r3
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <i2c_selectMuxBlink+0x4c>)
 80023dc:	701a      	strb	r2, [r3, #0]
    uint8_t outData[2] = {0x1, selectIOCurrent};
 80023de:	2301      	movs	r3, #1
 80023e0:	713b      	strb	r3, [r7, #4]
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <i2c_selectMuxBlink+0x4c>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	717b      	strb	r3, [r7, #5]
    //i2c_flipEndianness(outData, 2);
    if(cmr_i2cDmaTX(&bmb_i2c, BMS_SELECT_IO_ADDR, (uint8_t*)&outData, 2, I2C_TIMEOUT) != 0) {
 80023e8:	1d3a      	adds	r2, r7, #4
 80023ea:	2332      	movs	r3, #50	; 0x32
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2302      	movs	r3, #2
 80023f0:	2141      	movs	r1, #65	; 0x41
 80023f2:	4807      	ldr	r0, [pc, #28]	; (8002410 <i2c_selectMuxBlink+0x50>)
 80023f4:	f002 f9ba 	bl	800476c <cmr_i2cDmaTX>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <i2c_selectMuxBlink+0x42>
        return false;
 80023fe:	2300      	movs	r3, #0
 8002400:	e000      	b.n	8002404 <i2c_selectMuxBlink+0x44>
    }
    return true;
 8002402:	2301      	movs	r3, #1
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	2001a4d0 	.word	0x2001a4d0
 8002410:	2001a4d4 	.word	0x2001a4d4

08002414 <i2c_configADC>:

bool i2c_configADC() {
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af02      	add	r7, sp, #8
	// 1111 means {setup_bit, internal_ref, ref_output, ref_always_on}
	// 0010 means {internal_clock, unipolar, no_action, X}
	uint8_t setupByte = 0xF0;
 800241a:	23f0      	movs	r3, #240	; 0xf0
 800241c:	71fb      	strb	r3, [r7, #7]
	// 0_00_0111_1 means {config_bit, scan_all, scan_to_A7, single_ended}
	uint8_t configByte = 0x1F;
 800241e:	231f      	movs	r3, #31
 8002420:	71bb      	strb	r3, [r7, #6]
	if (cmr_i2cDmaTX(&bmb_i2c, BMS_ADC_ADDR, &setupByte, 1, I2C_TIMEOUT) != 0) {
 8002422:	1dfa      	adds	r2, r7, #7
 8002424:	2332      	movs	r3, #50	; 0x32
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2301      	movs	r3, #1
 800242a:	2133      	movs	r1, #51	; 0x33
 800242c:	480c      	ldr	r0, [pc, #48]	; (8002460 <i2c_configADC+0x4c>)
 800242e:	f002 f99d 	bl	800476c <cmr_i2cDmaTX>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <i2c_configADC+0x28>
		return false;
 8002438:	2300      	movs	r3, #0
 800243a:	e00d      	b.n	8002458 <i2c_configADC+0x44>
	}
	if (cmr_i2cDmaTX(&bmb_i2c, BMS_ADC_ADDR, &configByte, 1, I2C_TIMEOUT) != 0) {
 800243c:	1dba      	adds	r2, r7, #6
 800243e:	2332      	movs	r3, #50	; 0x32
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	2301      	movs	r3, #1
 8002444:	2133      	movs	r1, #51	; 0x33
 8002446:	4806      	ldr	r0, [pc, #24]	; (8002460 <i2c_configADC+0x4c>)
 8002448:	f002 f990 	bl	800476c <cmr_i2cDmaTX>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <i2c_configADC+0x42>
		return false;
 8002452:	2300      	movs	r3, #0
 8002454:	e000      	b.n	8002458 <i2c_configADC+0x44>
	}
	return true;
 8002456:	2301      	movs	r3, #1
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	2001a4d4 	.word	0x2001a4d4

08002464 <i2c_scanADC>:

bool i2c_scanADC(int16_t adcResponse[]) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b08a      	sub	sp, #40	; 0x28
 8002468:	af02      	add	r7, sp, #8
 800246a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[16] = {0};
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	f107 0310 	add.w	r3, r7, #16
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
	if (cmr_i2cDmaRX(&bmb_i2c, BMS_ADC_ADDR, buffer, 16, I2C_TIMEOUT) != 0) {
 800247c:	f107 020c 	add.w	r2, r7, #12
 8002480:	2332      	movs	r3, #50	; 0x32
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2310      	movs	r3, #16
 8002486:	2133      	movs	r1, #51	; 0x33
 8002488:	481d      	ldr	r0, [pc, #116]	; (8002500 <i2c_scanADC+0x9c>)
 800248a:	f002 f9e1 	bl	8004850 <cmr_i2cDmaRX>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <i2c_scanADC+0x34>
		return false;
 8002494:	2300      	movs	r3, #0
 8002496:	e02f      	b.n	80024f8 <i2c_scanADC+0x94>
	}
    //i2c_flipEndianness(buffer, 16);
	for (int i = 0; i < 8; i++) {
 8002498:	2300      	movs	r3, #0
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	e028      	b.n	80024f0 <i2c_scanADC+0x8c>
		// top 6 bits should be 1
		if ((buffer[i << 1] & 0xFC) != 0xFC) {
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	3320      	adds	r3, #32
 80024a4:	443b      	add	r3, r7
 80024a6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80024aa:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80024ae:	2bfc      	cmp	r3, #252	; 0xfc
 80024b0:	d001      	beq.n	80024b6 <i2c_scanADC+0x52>
			return false;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e020      	b.n	80024f8 <i2c_scanADC+0x94>
		}
		adcResponse[i] = ((((uint16_t) buffer[i << 1]) << 8)
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	3320      	adds	r3, #32
 80024bc:	443b      	add	r3, r7
 80024be:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80024c2:	021b      	lsls	r3, r3, #8
				| (buffer[(i << 1) + 1])) & 0x3FF;
 80024c4:	b21a      	sxth	r2, r3
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	3301      	adds	r3, #1
 80024cc:	3320      	adds	r3, #32
 80024ce:	443b      	add	r3, r7
 80024d0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80024d4:	b21b      	sxth	r3, r3
 80024d6:	4313      	orrs	r3, r2
 80024d8:	b21a      	sxth	r2, r3
		adcResponse[i] = ((((uint16_t) buffer[i << 1]) << 8)
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	440b      	add	r3, r1
				| (buffer[(i << 1) + 1])) & 0x3FF;
 80024e2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80024e6:	b212      	sxth	r2, r2
		adcResponse[i] = ((((uint16_t) buffer[i << 1]) << 8)
 80024e8:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 8; i++) {
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3301      	adds	r3, #1
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	2b07      	cmp	r3, #7
 80024f4:	ddd3      	ble.n	800249e <i2c_scanADC+0x3a>
	}
	return true;
 80024f6:	2301      	movs	r3, #1
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3720      	adds	r7, #32
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	2001a4d4 	.word	0x2001a4d4

08002504 <statusLED>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void statusLED(void *pvParameters) {
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
    (void) pvParameters;

    cmr_gpioWrite(GPIO_MCU_LED, 0);
 800250c:	2100      	movs	r1, #0
 800250e:	2000      	movs	r0, #0
 8002510:	f001 fe42 	bl	8004198 <cmr_gpioWrite>

    TickType_t lastWakeTime = xTaskGetTickCount();
 8002514:	f003 fee0 	bl	80062d8 <xTaskGetTickCount>
 8002518:	4603      	mov	r3, r0
 800251a:	60fb      	str	r3, [r7, #12]
    while (1) {
        cmr_gpioToggle(GPIO_MCU_LED);
 800251c:	2000      	movs	r0, #0
 800251e:	f001 fe79 	bl	8004214 <cmr_gpioToggle>

        vTaskDelayUntil(&lastWakeTime, statusLED_period_ms);
 8002522:	22fa      	movs	r2, #250	; 0xfa
 8002524:	f107 030c 	add.w	r3, r7, #12
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f003 fd5e 	bl	8005fec <vTaskDelayUntil>
        cmr_gpioToggle(GPIO_MCU_LED);
 8002530:	e7f4      	b.n	800251c <statusLED+0x18>
	...

08002534 <main>:
 *
 * Device configuration and task initialization should be performed here.
 *
 * @return Does not return.
 */
int main(void) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af02      	add	r7, sp, #8
//
//    *ACTLR |= 2; // disable write buffering

    // System initialization.

	HAL_Init();
 800253a:	f004 fc8b 	bl	8006e54 <HAL_Init>
    cmr_rccSystemClockEnable();
 800253e:	f002 fa22 	bl	8004986 <cmr_rccSystemClockEnable>
    // cmr_rccSystemInternalClockEnable();

    // Peripheral configuration.
    gpioInit();
 8002542:	f7ff fdbb 	bl	80020bc <gpioInit>
    canInit();
 8002546:	f7ff fab1 	bl	8001aac <canInit>
    adcInit();
 800254a:	f7ff f845 	bl	80015d8 <adcInit>
    sensorsInit();
 800254e:	f000 f8a7 	bl	80026a0 <sensorsInit>
//    wwdgInit();

    cmr_taskInit(
 8002552:	2202      	movs	r2, #2
 8002554:	2300      	movs	r3, #0
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	4b0c      	ldr	r3, [pc, #48]	; (800258c <main+0x58>)
 800255a:	490d      	ldr	r1, [pc, #52]	; (8002590 <main+0x5c>)
 800255c:	480d      	ldr	r0, [pc, #52]	; (8002594 <main+0x60>)
 800255e:	f002 fb75 	bl	8004c4c <cmr_taskInit>
        statusLED,
        NULL
    );

    // BMB_task
    cmr_taskInit(
 8002562:	2206      	movs	r2, #6
 8002564:	2300      	movs	r3, #0
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <main+0x64>)
 800256a:	490c      	ldr	r1, [pc, #48]	; (800259c <main+0x68>)
 800256c:	480c      	ldr	r0, [pc, #48]	; (80025a0 <main+0x6c>)
 800256e:	f002 fb6d 	bl	8004c4c <cmr_taskInit>
        vBMBSampleTask,
        NULL
    );

    // State Task
    cmr_taskInit(
 8002572:	2204      	movs	r2, #4
 8002574:	2300      	movs	r3, #0
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <main+0x70>)
 800257a:	490b      	ldr	r1, [pc, #44]	; (80025a8 <main+0x74>)
 800257c:	480b      	ldr	r0, [pc, #44]	; (80025ac <main+0x78>)
 800257e:	f002 fb65 	bl	8004c4c <cmr_taskInit>
        setState_priority,
        vSetStateTask,
        NULL
    );

    vTaskStartScheduler();
 8002582:	f003 fda5 	bl	80060d0 <vTaskStartScheduler>
    cmr_panic("vTaskStartScheduler returned!");
 8002586:	480a      	ldr	r0, [pc, #40]	; (80025b0 <main+0x7c>)
 8002588:	f002 f9f7 	bl	800497a <cmr_panic>
 800258c:	08002505 	.word	0x08002505
 8002590:	0800c2f8 	.word	0x0800c2f8
 8002594:	2001a644 	.word	0x2001a644
 8002598:	080011a9 	.word	0x080011a9
 800259c:	0800c304 	.word	0x0800c304
 80025a0:	2001f924 	.word	0x2001f924
 80025a4:	08002c75 	.word	0x08002c75
 80025a8:	0800c314 	.word	0x0800c314
 80025ac:	20024c04 	.word	0x20024c04
 80025b0:	0800c324 	.word	0x0800c324

080025b4 <sampleADCSensor>:
 *
 * @param sensor The ADC sensor to sample.
 *
 * @return The latest sampled value from the ADC.
 */
static uint32_t sampleADCSensor(const cmr_sensor_t *sensor) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
    sensorChannel_t sensorChannel = sensor - sensors;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a0c      	ldr	r2, [pc, #48]	; (80025f0 <sampleADCSensor+0x3c>)
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	10db      	asrs	r3, r3, #3
 80025c4:	4a0b      	ldr	r2, [pc, #44]	; (80025f4 <sampleADCSensor+0x40>)
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	73fb      	strb	r3, [r7, #15]
    configASSERT(sensorChannel < SENSOR_CH_LEN);
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d903      	bls.n	80025da <sampleADCSensor+0x26>
 80025d2:	212a      	movs	r1, #42	; 0x2a
 80025d4:	4808      	ldr	r0, [pc, #32]	; (80025f8 <sampleADCSensor+0x44>)
 80025d6:	f002 f9d0 	bl	800497a <cmr_panic>
    return adcRead(sensorsADCCHANNELS[sensorChannel]); //* ADCChannelPolarity[ch]; Figure adc polarity
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	4a07      	ldr	r2, [pc, #28]	; (80025fc <sampleADCSensor+0x48>)
 80025de:	5cd3      	ldrb	r3, [r2, r3]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff f809 	bl	80015f8 <adcRead>
 80025e6:	4603      	mov	r3, r0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	200000e4 	.word	0x200000e4
 80025f4:	cccccccd 	.word	0xcccccccd
 80025f8:	0800c344 	.word	0x0800c344
 80025fc:	0800e154 	.word	0x0800e154

08002600 <ADCtoMV_24v>:
 * @param reading The ADC value to convert.
 *
 * @return Voltage in mV.
 */
// 24v voltage divider is factor of 1.13/14.43
static int32_t ADCtoMV_24v(const cmr_sensor_t *sensor, uint32_t reading) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
    (void) sensor;
	
    return ((int32_t) reading) * 7.39;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7fd ff59 	bl	80004c4 <__aeabi_i2d>
 8002612:	a309      	add	r3, pc, #36	; (adr r3, 8002638 <ADCtoMV_24v+0x38>)
 8002614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002618:	f7fd ffbe 	bl	8000598 <__aeabi_dmul>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4610      	mov	r0, r2
 8002622:	4619      	mov	r1, r3
 8002624:	f7fe f9ca 	bl	80009bc <__aeabi_d2iz>
 8002628:	4603      	mov	r3, r0

}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	f3af 8000 	nop.w
 8002638:	28f5c28f 	.word	0x28f5c28f
 800263c:	401d8f5c 	.word	0x401d8f5c

08002640 <ADCtoMV_HV>:
 * @param reading The ADC value to convert.
 *
 * @return Voltage in V.
 */
// was determined experimentally
static int32_t ADCtoMV_HV(const cmr_sensor_t *sensor, uint32_t reading) {
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
    (void) sensor;
	
	return (((int32_t) reading) * 268 - 426400);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8002650:	fb02 f303 	mul.w	r3, r2, r3
 8002654:	f5a3 23d0 	sub.w	r3, r3, #425984	; 0x68000
 8002658:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <sensorsUpdate>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void sensorsUpdate(void *pvParameters) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    TickType_t lastWakeTime = xTaskGetTickCount();
 8002670:	f003 fe32 	bl	80062d8 <xTaskGetTickCount>
 8002674:	4603      	mov	r3, r0
 8002676:	60fb      	str	r3, [r7, #12]
    while (1) {
        vTaskDelayUntil(&lastWakeTime, sensorsUpdate_period_ms);
 8002678:	2232      	movs	r2, #50	; 0x32
 800267a:	f107 030c 	add.w	r3, r7, #12
 800267e:	4611      	mov	r1, r2
 8002680:	4618      	mov	r0, r3
 8002682:	f003 fcb3 	bl	8005fec <vTaskDelayUntil>

        cmr_sensorListUpdate(&sensorList);
 8002686:	4805      	ldr	r0, [pc, #20]	; (800269c <sensorsUpdate+0x34>)
 8002688:	f002 faac 	bl	8004be4 <cmr_sensorListUpdate>

        vTaskDelayUntil(&lastWakeTime, sensorsUpdate_period_ms);
 800268c:	2232      	movs	r2, #50	; 0x32
 800268e:	f107 030c 	add.w	r3, r7, #12
 8002692:	4611      	mov	r1, r2
 8002694:	4618      	mov	r0, r3
 8002696:	f003 fca9 	bl	8005fec <vTaskDelayUntil>
        vTaskDelayUntil(&lastWakeTime, sensorsUpdate_period_ms);
 800269a:	e7ed      	b.n	8002678 <sensorsUpdate+0x10>
 800269c:	20029ee4 	.word	0x20029ee4

080026a0 <sensorsInit>:
}

/**
 * @brief Initializes the sensor interface.
 */
void sensorsInit(void) {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af02      	add	r7, sp, #8
    cmr_sensorListInit(
 80026a6:	2205      	movs	r2, #5
 80026a8:	4907      	ldr	r1, [pc, #28]	; (80026c8 <sensorsInit+0x28>)
 80026aa:	4808      	ldr	r0, [pc, #32]	; (80026cc <sensorsInit+0x2c>)
 80026ac:	f002 fa75 	bl	8004b9a <cmr_sensorListInit>
        &sensorList,
        sensors, sizeof(sensors) / sizeof(sensors[0])
    );

    // Task creation.
    cmr_taskInit(
 80026b0:	2201      	movs	r2, #1
 80026b2:	2300      	movs	r3, #0
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <sensorsInit+0x30>)
 80026b8:	4906      	ldr	r1, [pc, #24]	; (80026d4 <sensorsInit+0x34>)
 80026ba:	4807      	ldr	r0, [pc, #28]	; (80026d8 <sensorsInit+0x38>)
 80026bc:	f002 fac6 	bl	8004c4c <cmr_taskInit>
        "sensors update",
        sensorsUpdate_priority,
        sensorsUpdate,
        NULL
    );
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	200000e4 	.word	0x200000e4
 80026cc:	20029ee4 	.word	0x20029ee4
 80026d0:	08002669 	.word	0x08002669
 80026d4:	0800c388 	.word	0x0800c388
 80026d8:	20029eec 	.word	0x20029eec

080026dc <getLVmillivolts>:

// Accessor functions used in the state machine. These casts should be safe because all the feasible values
// for any of these variables should be less than INT_MAX, so the value will be preserved on the cast.
int32_t getLVmillivolts(){
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
    return (int32_t) cmr_sensorListGetValue(&sensorList, SENSOR_CH_V24V);
 80026e0:	2100      	movs	r1, #0
 80026e2:	4803      	ldr	r0, [pc, #12]	; (80026f0 <getLVmillivolts+0x14>)
 80026e4:	f002 fa9d 	bl	8004c22 <cmr_sensorListGetValue>
 80026e8:	4603      	mov	r3, r0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20029ee4 	.word	0x20029ee4

080026f4 <getAIRmillivolts>:

int32_t getAIRmillivolts(){
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
    return ((int32_t) cmr_sensorListGetValue(&sensorList, SENSOR_CH_AIR_POWER));
 80026f8:	2101      	movs	r1, #1
 80026fa:	4803      	ldr	r0, [pc, #12]	; (8002708 <getAIRmillivolts+0x14>)
 80026fc:	f002 fa91 	bl	8004c22 <cmr_sensorListGetValue>
 8002700:	4603      	mov	r3, r0
}
 8002702:	4618      	mov	r0, r3
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20029ee4 	.word	0x20029ee4

0800270c <getSafetymillivolts>:

int32_t getSafetymillivolts(){
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
    return ((int32_t) cmr_sensorListGetValue(&sensorList, SENSOR_CH_SAFETY));
 8002710:	2102      	movs	r1, #2
 8002712:	4803      	ldr	r0, [pc, #12]	; (8002720 <getSafetymillivolts+0x14>)
 8002714:	f002 fa85 	bl	8004c22 <cmr_sensorListGetValue>
 8002718:	4603      	mov	r3, r0
}
 800271a:	4618      	mov	r0, r3
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20029ee4 	.word	0x20029ee4

08002724 <getHVmillivolts>:

int32_t getHVmillivolts(){
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
    return ((int32_t) cmr_sensorListGetValue(&sensorList, SENSOR_CH_VSENSE));
 8002728:	2103      	movs	r1, #3
 800272a:	4803      	ldr	r0, [pc, #12]	; (8002738 <getHVmillivolts+0x14>)
 800272c:	f002 fa79 	bl	8004c22 <cmr_sensorListGetValue>
 8002730:	4603      	mov	r3, r0
}
 8002732:	4618      	mov	r0, r3
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20029ee4 	.word	0x20029ee4

0800273c <getHVmilliamps>:

int32_t getHVmilliamps(){
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
    return ((int32_t) cmr_sensorListGetValue(&sensorList, SENSOR_CH_ISENSE));
 8002740:	2104      	movs	r1, #4
 8002742:	4803      	ldr	r0, [pc, #12]	; (8002750 <getHVmilliamps+0x14>)
 8002744:	f002 fa6d 	bl	8004c22 <cmr_sensorListGetValue>
 8002748:	4603      	mov	r3, r0
}
 800274a:	4618      	mov	r0, r3
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20029ee4 	.word	0x20029ee4

08002754 <getState>:

/*
 * External Accessor Functions
 */

cmr_canHVCState_t getState() {
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
    return currentState;
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <getState+0x14>)
 800275a:	781b      	ldrb	r3, [r3, #0]
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	2002f1cc 	.word	0x2002f1cc

0800276c <getNextState>:

/*
 * Helper Functions
 */

static cmr_canHVCState_t getNextState(cmr_canHVCError_t currentError){
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	80fb      	strh	r3, [r7, #6]
    
    //Default to unknown state if no paths are satisfied.
    cmr_canHVCState_t nextState = CMR_CAN_HVC_STATE_UNKNOWN;
 8002776:	230c      	movs	r3, #12
 8002778:	75fb      	strb	r3, [r7, #23]
    
    // initialize min/max cell voltage variables for next state logic
    uint16_t packMinCellVoltage;
    uint16_t packMaxCellVoltage;

    if (currentError != CMR_CAN_HVC_ERROR_NONE) {
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <getNextState+0x18>
        // An error condition is active, stay in ERROR state
        return CMR_CAN_HVC_STATE_ERROR;
 8002780:	2300      	movs	r3, #0
 8002782:	e141      	b.n	8002a08 <getNextState+0x29c>
    }

    // Getting HVC Command
    volatile cmr_canHVCCommand_t *HVCCommand = getPayload(CANRX_HVC_COMMAND);
 8002784:	2001      	movs	r0, #1
 8002786:	f7ff fa0f 	bl	8001ba8 <getPayload>
 800278a:	6138      	str	r0, [r7, #16]
    
    switch (currentState) {
 800278c:	4ba0      	ldr	r3, [pc, #640]	; (8002a10 <getNextState+0x2a4>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b0b      	cmp	r3, #11
 8002792:	f200 8135 	bhi.w	8002a00 <getNextState+0x294>
 8002796:	a201      	add	r2, pc, #4	; (adr r2, 800279c <getNextState+0x30>)
 8002798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279c:	080029d5 	.word	0x080029d5
 80027a0:	080027cd 	.word	0x080027cd
 80027a4:	080027d3 	.word	0x080027d3
 80027a8:	0800280d 	.word	0x0800280d
 80027ac:	08002867 	.word	0x08002867
 80027b0:	080028b5 	.word	0x080028b5
 80027b4:	080028cb 	.word	0x080028cb
 80027b8:	08002919 	.word	0x08002919
 80027bc:	08002951 	.word	0x08002951
 80027c0:	0800297f 	.word	0x0800297f
 80027c4:	080029ad 	.word	0x080029ad
 80027c8:	080029eb 	.word	0x080029eb
        case CMR_CAN_HVC_STATE_DISCHARGE: // S1
            nextState = CMR_CAN_HVC_STATE_STANDBY;
 80027cc:	2302      	movs	r3, #2
 80027ce:	75fb      	strb	r3, [r7, #23]
            break;
 80027d0:	e119      	b.n	8002a06 <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_STANDBY: // S2
            if (HVCCommand->modeRequest == CMR_CAN_HVC_MODE_START) {
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d107      	bne.n	80027ec <getNextState+0x80>
                //T1: START mode requested
                nextState = CMR_CAN_HVC_STATE_DRIVE_PRECHARGE;
 80027dc:	2303      	movs	r3, #3
 80027de:	75fb      	strb	r3, [r7, #23]
                lastPrechargeTime = xTaskGetTickCount();
 80027e0:	f003 fd7a 	bl	80062d8 <xTaskGetTickCount>
 80027e4:	4603      	mov	r3, r0
 80027e6:	4a8b      	ldr	r2, [pc, #556]	; (8002a14 <getNextState+0x2a8>)
 80027e8:	6013      	str	r3, [r2, #0]
                nextState = CMR_CAN_HVC_STATE_CHARGE_PRECHARGE;
                lastPrechargeTime = xTaskGetTickCount();
            } else {
                nextState = CMR_CAN_HVC_STATE_STANDBY;
            }
            break;
 80027ea:	e10c      	b.n	8002a06 <getNextState+0x29a>
            } else if (HVCCommand->modeRequest == CMR_CAN_HVC_MODE_CHARGE) {
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d107      	bne.n	8002806 <getNextState+0x9a>
                nextState = CMR_CAN_HVC_STATE_CHARGE_PRECHARGE;
 80027f6:	2306      	movs	r3, #6
 80027f8:	75fb      	strb	r3, [r7, #23]
                lastPrechargeTime = xTaskGetTickCount();
 80027fa:	f003 fd6d 	bl	80062d8 <xTaskGetTickCount>
 80027fe:	4603      	mov	r3, r0
 8002800:	4a84      	ldr	r2, [pc, #528]	; (8002a14 <getNextState+0x2a8>)
 8002802:	6013      	str	r3, [r2, #0]
            break;
 8002804:	e0ff      	b.n	8002a06 <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_STANDBY;
 8002806:	2302      	movs	r3, #2
 8002808:	75fb      	strb	r3, [r7, #23]
            break;
 800280a:	e0fc      	b.n	8002a06 <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_DRIVE_PRECHARGE: // S3
            if (!(HVCCommand->modeRequest == CMR_CAN_HVC_MODE_START ||
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d007      	beq.n	8002826 <getNextState+0xba>
                  HVCCommand->modeRequest == CMR_CAN_HVC_MODE_RUN)) {
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b2db      	uxtb	r3, r3
            if (!(HVCCommand->modeRequest == CMR_CAN_HVC_MODE_START ||
 800281c:	2b04      	cmp	r3, #4
 800281e:	d002      	beq.n	8002826 <getNextState+0xba>
                //T6: Mode requested is neither START nor RUN
                nextState = CMR_CAN_HVC_STATE_DISCHARGE;
 8002820:	2301      	movs	r3, #1
 8002822:	75fb      	strb	r3, [r7, #23]
 8002824:	e01e      	b.n	8002864 <getNextState+0xf8>
            } else if (xTaskGetTickCount() > lastPrechargeTime + 5000 && xTaskGetTickCount() < lastPrechargeTime + 6000) {
 8002826:	f003 fd57 	bl	80062d8 <xTaskGetTickCount>
 800282a:	4602      	mov	r2, r0
 800282c:	4b79      	ldr	r3, [pc, #484]	; (8002a14 <getNextState+0x2a8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002834:	3308      	adds	r3, #8
 8002836:	429a      	cmp	r2, r3
 8002838:	d911      	bls.n	800285e <getNextState+0xf2>
 800283a:	f003 fd4d 	bl	80062d8 <xTaskGetTickCount>
 800283e:	4602      	mov	r2, r0
 8002840:	4b74      	ldr	r3, [pc, #464]	; (8002a14 <getNextState+0x2a8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8002848:	3310      	adds	r3, #16
 800284a:	429a      	cmp	r2, r3
 800284c:	d207      	bcs.n	800285e <getNextState+0xf2>
                //T2: HV rails are precharged to within 10000mV
                nextState = CMR_CAN_HVC_STATE_DRIVE_PRECHARGE_COMPLETE;
 800284e:	2304      	movs	r3, #4
 8002850:	75fb      	strb	r3, [r7, #23]
                lastPrechargeTime = xTaskGetTickCount();
 8002852:	f003 fd41 	bl	80062d8 <xTaskGetTickCount>
 8002856:	4603      	mov	r3, r0
 8002858:	4a6e      	ldr	r2, [pc, #440]	; (8002a14 <getNextState+0x2a8>)
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	e002      	b.n	8002864 <getNextState+0xf8>
            } else {
                nextState = CMR_CAN_HVC_STATE_DRIVE_PRECHARGE;
 800285e:	2303      	movs	r3, #3
 8002860:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8002862:	e0d0      	b.n	8002a06 <getNextState+0x29a>
 8002864:	e0cf      	b.n	8002a06 <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_DRIVE_PRECHARGE_COMPLETE: // S4
            if (!(HVCCommand->modeRequest == CMR_CAN_HVC_MODE_START ||
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d007      	beq.n	8002880 <getNextState+0x114>
                  HVCCommand->modeRequest == CMR_CAN_HVC_MODE_RUN)) {
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	b2db      	uxtb	r3, r3
            if (!(HVCCommand->modeRequest == CMR_CAN_HVC_MODE_START ||
 8002876:	2b04      	cmp	r3, #4
 8002878:	d002      	beq.n	8002880 <getNextState+0x114>
                //T7: Mode requested is neither START nor RUN
                nextState = CMR_CAN_HVC_STATE_DISCHARGE;
 800287a:	2301      	movs	r3, #1
 800287c:	75fb      	strb	r3, [r7, #23]
 800287e:	e018      	b.n	80028b2 <getNextState+0x146>
            } else if ((HVCCommand->modeRequest == CMR_CAN_HVC_MODE_RUN) &&
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b04      	cmp	r3, #4
 8002888:	d110      	bne.n	80028ac <getNextState+0x140>
                        abs(getBattMillivolts() - getHVmillivolts()) < 30000) {
 800288a:	f7fe fe77 	bl	800157c <getBattMillivolts>
 800288e:	4604      	mov	r4, r0
 8002890:	f7ff ff48 	bl	8002724 <getHVmillivolts>
 8002894:	4603      	mov	r3, r0
 8002896:	1ae3      	subs	r3, r4, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	bfb8      	it	lt
 800289c:	425b      	neglt	r3, r3
            } else if ((HVCCommand->modeRequest == CMR_CAN_HVC_MODE_RUN) &&
 800289e:	f247 522f 	movw	r2, #29999	; 0x752f
 80028a2:	4293      	cmp	r3, r2
 80028a4:	dc02      	bgt.n	80028ac <getNextState+0x140>
                // T3: Contactors are closed and RUN mode is requested
                nextState = CMR_CAN_HVC_STATE_DRIVE;
 80028a6:	2305      	movs	r3, #5
 80028a8:	75fb      	strb	r3, [r7, #23]
 80028aa:	e002      	b.n	80028b2 <getNextState+0x146>
            } else {
                nextState = CMR_CAN_HVC_STATE_DRIVE_PRECHARGE_COMPLETE;
 80028ac:	2304      	movs	r3, #4
 80028ae:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80028b0:	e0a9      	b.n	8002a06 <getNextState+0x29a>
 80028b2:	e0a8      	b.n	8002a06 <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_DRIVE: // S5
            if (HVCCommand->modeRequest != CMR_CAN_HVC_MODE_RUN) {
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d002      	beq.n	80028c4 <getNextState+0x158>
                // T8: Mode requested is not RUN
                nextState = CMR_CAN_HVC_STATE_DISCHARGE;
 80028be:	2301      	movs	r3, #1
 80028c0:	75fb      	strb	r3, [r7, #23]
            } else {                
                nextState = CMR_CAN_HVC_STATE_DRIVE;
            }
            break;
 80028c2:	e0a0      	b.n	8002a06 <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_DRIVE;
 80028c4:	2305      	movs	r3, #5
 80028c6:	75fb      	strb	r3, [r7, #23]
            break;
 80028c8:	e09d      	b.n	8002a06 <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_CHARGE_PRECHARGE: // S6
            if (HVCCommand->modeRequest != CMR_CAN_HVC_MODE_CHARGE) {
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d002      	beq.n	80028da <getNextState+0x16e>
                //T18: Mode requested is not CHARGE
                nextState = CMR_CAN_HVC_STATE_DISCHARGE;
 80028d4:	2301      	movs	r3, #1
 80028d6:	75fb      	strb	r3, [r7, #23]
                //T10: HV rails are precharged
                nextState = CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE;
            } else {
                nextState = CMR_CAN_HVC_STATE_CHARGE_PRECHARGE;
            }
            break;
 80028d8:	e095      	b.n	8002a06 <getNextState+0x29a>
            } else if (xTaskGetTickCount() > lastPrechargeTime + 5000 && xTaskGetTickCount() < lastPrechargeTime + 6000) {
 80028da:	f003 fcfd 	bl	80062d8 <xTaskGetTickCount>
 80028de:	4602      	mov	r2, r0
 80028e0:	4b4c      	ldr	r3, [pc, #304]	; (8002a14 <getNextState+0x2a8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80028e8:	3308      	adds	r3, #8
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d911      	bls.n	8002912 <getNextState+0x1a6>
 80028ee:	f003 fcf3 	bl	80062d8 <xTaskGetTickCount>
 80028f2:	4602      	mov	r2, r0
 80028f4:	4b47      	ldr	r3, [pc, #284]	; (8002a14 <getNextState+0x2a8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80028fc:	3310      	adds	r3, #16
 80028fe:	429a      	cmp	r2, r3
 8002900:	d207      	bcs.n	8002912 <getNextState+0x1a6>
            	lastPrechargeTime = xTaskGetTickCount();
 8002902:	f003 fce9 	bl	80062d8 <xTaskGetTickCount>
 8002906:	4603      	mov	r3, r0
 8002908:	4a42      	ldr	r2, [pc, #264]	; (8002a14 <getNextState+0x2a8>)
 800290a:	6013      	str	r3, [r2, #0]
                nextState = CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE;
 800290c:	2307      	movs	r3, #7
 800290e:	75fb      	strb	r3, [r7, #23]
            break;
 8002910:	e079      	b.n	8002a06 <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_CHARGE_PRECHARGE;
 8002912:	2306      	movs	r3, #6
 8002914:	75fb      	strb	r3, [r7, #23]
            break;
 8002916:	e076      	b.n	8002a06 <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE: // S7
            if (HVCCommand->modeRequest != CMR_CAN_HVC_MODE_CHARGE) {
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b08      	cmp	r3, #8
 8002920:	d002      	beq.n	8002928 <getNextState+0x1bc>
                // T17: Mode requested is not CHARGE
                nextState = CMR_CAN_HVC_STATE_DISCHARGE;
 8002922:	2301      	movs	r3, #1
 8002924:	75fb      	strb	r3, [r7, #23]
                // T11: Contactors are closed
                nextState = CMR_CAN_HVC_STATE_CHARGE_TRICKLE;
            } else {
                nextState = CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE;
            }
            break;
 8002926:	e06e      	b.n	8002a06 <getNextState+0x29a>
            } else if (abs(getBattMillivolts() - getHVmillivolts()) < 5000) {
 8002928:	f7fe fe28 	bl	800157c <getBattMillivolts>
 800292c:	4604      	mov	r4, r0
 800292e:	f7ff fef9 	bl	8002724 <getHVmillivolts>
 8002932:	4603      	mov	r3, r0
 8002934:	1ae3      	subs	r3, r4, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	bfb8      	it	lt
 800293a:	425b      	neglt	r3, r3
 800293c:	f241 3287 	movw	r2, #4999	; 0x1387
 8002940:	4293      	cmp	r3, r2
 8002942:	dc02      	bgt.n	800294a <getNextState+0x1de>
                nextState = CMR_CAN_HVC_STATE_CHARGE_TRICKLE;
 8002944:	2308      	movs	r3, #8
 8002946:	75fb      	strb	r3, [r7, #23]
            break;
 8002948:	e05d      	b.n	8002a06 <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE;
 800294a:	2307      	movs	r3, #7
 800294c:	75fb      	strb	r3, [r7, #23]
            break;
 800294e:	e05a      	b.n	8002a06 <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_CHARGE_TRICKLE: // S8
            // find lowest cell voltage among all BMBs
            packMinCellVoltage = getPackMinCellVoltage();
 8002950:	f7fe fdb2 	bl	80014b8 <getPackMinCellVoltage>
 8002954:	4603      	mov	r3, r0
 8002956:	81fb      	strh	r3, [r7, #14]

            if (HVCCommand->modeRequest != CMR_CAN_HVC_MODE_CHARGE) {
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b08      	cmp	r3, #8
 8002960:	d002      	beq.n	8002968 <getNextState+0x1fc>
                // T16: Mode requested is not CHARGE
                nextState = CMR_CAN_HVC_STATE_DISCHARGE;
 8002962:	2301      	movs	r3, #1
 8002964:	75fb      	strb	r3, [r7, #23]
                // T12: Minimum cell voltage > 3V, begin full charging
                nextState = CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT;
            } else {
                nextState = CMR_CAN_HVC_STATE_CHARGE_TRICKLE;
            }
            break;
 8002966:	e04e      	b.n	8002a06 <getNextState+0x29a>
            } else if (packMinCellVoltage >= 3000) {
 8002968:	89fb      	ldrh	r3, [r7, #14]
 800296a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800296e:	4293      	cmp	r3, r2
 8002970:	d902      	bls.n	8002978 <getNextState+0x20c>
                nextState = CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT;
 8002972:	2309      	movs	r3, #9
 8002974:	75fb      	strb	r3, [r7, #23]
            break;
 8002976:	e046      	b.n	8002a06 <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_CHARGE_TRICKLE;
 8002978:	2308      	movs	r3, #8
 800297a:	75fb      	strb	r3, [r7, #23]
            break;
 800297c:	e043      	b.n	8002a06 <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT: // S9
            // find highest cell voltage among all BMBs
            packMaxCellVoltage = getPackMaxCellVoltage();
 800297e:	f7fe fd6d 	bl	800145c <getPackMaxCellVoltage>
 8002982:	4603      	mov	r3, r0
 8002984:	81bb      	strh	r3, [r7, #12]

            if (HVCCommand->modeRequest != CMR_CAN_HVC_MODE_CHARGE) {
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b08      	cmp	r3, #8
 800298e:	d002      	beq.n	8002996 <getNextState+0x22a>
                // T15: Mode requested is not CHARGE
                nextState = CMR_CAN_HVC_STATE_DISCHARGE;
 8002990:	2301      	movs	r3, #1
 8002992:	75fb      	strb	r3, [r7, #23]
//                nextState = CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE;
                nextState = CMR_CAN_HVC_STATE_ERROR; // not balancing for now
            } else {
                nextState = CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT;
            }
            break;
 8002994:	e037      	b.n	8002a06 <getNextState+0x29a>
            } else if (packMaxCellVoltage >= 4150) {
 8002996:	89bb      	ldrh	r3, [r7, #12]
 8002998:	f241 0235 	movw	r2, #4149	; 0x1035
 800299c:	4293      	cmp	r3, r2
 800299e:	d902      	bls.n	80029a6 <getNextState+0x23a>
                nextState = CMR_CAN_HVC_STATE_ERROR; // not balancing for now
 80029a0:	2300      	movs	r3, #0
 80029a2:	75fb      	strb	r3, [r7, #23]
            break;
 80029a4:	e02f      	b.n	8002a06 <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT;
 80029a6:	2309      	movs	r3, #9
 80029a8:	75fb      	strb	r3, [r7, #23]
            break;
 80029aa:	e02c      	b.n	8002a06 <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE: // S10
            // find lowest cell voltage among all BMBs
            packMinCellVoltage = getPackMinCellVoltage();
 80029ac:	f7fe fd84 	bl	80014b8 <getPackMinCellVoltage>
 80029b0:	4603      	mov	r3, r0
 80029b2:	81fb      	strh	r3, [r7, #14]

            if (HVCCommand->modeRequest != CMR_CAN_HVC_MODE_CHARGE || packMinCellVoltage >= 4145) {
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d104      	bne.n	80029c8 <getNextState+0x25c>
 80029be:	89fb      	ldrh	r3, [r7, #14]
 80029c0:	f241 0230 	movw	r2, #4144	; 0x1030
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d902      	bls.n	80029ce <getNextState+0x262>
                //T14: Mode requested is not CHARGE or all cells fully charged
                nextState = CMR_CAN_HVC_STATE_DISCHARGE;
 80029c8:	2301      	movs	r3, #1
 80029ca:	75fb      	strb	r3, [r7, #23]
            } else {
                nextState = CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE;
            }
            break;
 80029cc:	e01b      	b.n	8002a06 <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE;
 80029ce:	230a      	movs	r3, #10
 80029d0:	75fb      	strb	r3, [r7, #23]
            break;
 80029d2:	e018      	b.n	8002a06 <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_ERROR: // S0
            if (HVCCommand->modeRequest == CMR_CAN_HVC_MODE_ERROR) {
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d102      	bne.n	80029e4 <getNextState+0x278>
                //T19: GLV acknowledged error, move to clear error
                nextState = CMR_CAN_HVC_STATE_CLEAR_ERROR;
 80029de:	230b      	movs	r3, #11
 80029e0:	75fb      	strb	r3, [r7, #23]
            } else {
                nextState = CMR_CAN_HVC_STATE_ERROR;
            }
            break;  
 80029e2:	e010      	b.n	8002a06 <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_ERROR;
 80029e4:	2300      	movs	r3, #0
 80029e6:	75fb      	strb	r3, [r7, #23]
            break;  
 80029e8:	e00d      	b.n	8002a06 <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_CLEAR_ERROR: // S11
            if ((HVCCommand->modeRequest == CMR_CAN_HVC_MODE_IDLE) &&
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d102      	bne.n	80029fa <getNextState+0x28e>
                (true || getHVmillivolts()) < 5000) {
                //T4: GLV requesting idle and rails discharged
                nextState = CMR_CAN_HVC_STATE_STANDBY;
 80029f4:	2302      	movs	r3, #2
 80029f6:	75fb      	strb	r3, [r7, #23]
            } else {
                nextState = CMR_CAN_HVC_STATE_CLEAR_ERROR;
            }
            break;
 80029f8:	e005      	b.n	8002a06 <getNextState+0x29a>
                nextState = CMR_CAN_HVC_STATE_CLEAR_ERROR;
 80029fa:	230b      	movs	r3, #11
 80029fc:	75fb      	strb	r3, [r7, #23]
            break;
 80029fe:	e002      	b.n	8002a06 <getNextState+0x29a>
        case CMR_CAN_HVC_STATE_UNKNOWN:
        default:
            nextState = CMR_CAN_HVC_STATE_UNKNOWN;
 8002a00:	230c      	movs	r3, #12
 8002a02:	75fb      	strb	r3, [r7, #23]
            break;
 8002a04:	bf00      	nop
    }
    
    // Return the result of next state logic            
    return nextState;    
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	371c      	adds	r7, #28
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd90      	pop	{r4, r7, pc}
 8002a10:	2002f1cc 	.word	0x2002f1cc
 8002a14:	2002f1d0 	.word	0x2002f1d0

08002a18 <setStateOutput>:

static cmr_canHVCState_t setStateOutput(){
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0

    //Note: For relay action, set all opens before closes to avoid shorts
    switch (currentState) {
 8002a1c:	4b94      	ldr	r3, [pc, #592]	; (8002c70 <setStateOutput+0x258>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b0b      	cmp	r3, #11
 8002a22:	f200 810d 	bhi.w	8002c40 <setStateOutput+0x228>
 8002a26:	a201      	add	r2, pc, #4	; (adr r2, 8002a2c <setStateOutput+0x14>)
 8002a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2c:	08002bed 	.word	0x08002bed
 8002a30:	08002a5d 	.word	0x08002a5d
 8002a34:	08002a85 	.word	0x08002a85
 8002a38:	08002aad 	.word	0x08002aad
 8002a3c:	08002ad5 	.word	0x08002ad5
 8002a40:	08002afd 	.word	0x08002afd
 8002a44:	08002b25 	.word	0x08002b25
 8002a48:	08002b4d 	.word	0x08002b4d
 8002a4c:	08002b75 	.word	0x08002b75
 8002a50:	08002b9d 	.word	0x08002b9d
 8002a54:	08002bc5 	.word	0x08002bc5
 8002a58:	08002c15 	.word	0x08002c15
        case CMR_CAN_HVC_STATE_DISCHARGE: // S1
            setRelay(AIR_POS_RELAY, OPEN);
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	2003      	movs	r0, #3
 8002a60:	f7fe fec6 	bl	80017f0 <setRelay>
            setRelay(AIR_NEG_RELAY, OPEN);
 8002a64:	2101      	movs	r1, #1
 8002a66:	2002      	movs	r0, #2
 8002a68:	f7fe fec2 	bl	80017f0 <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	2001      	movs	r0, #1
 8002a70:	f7fe febe 	bl	80017f0 <setRelay>
            setRelay(DISCHARGE_RELAY, CLOSED);
 8002a74:	2102      	movs	r1, #2
 8002a76:	2000      	movs	r0, #0
 8002a78:	f7fe feba 	bl	80017f0 <setRelay>
            clearHardwareFault(false);
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f7fe fe63 	bl	8001748 <clearHardwareFault>
            break;
 8002a82:	e0f1      	b.n	8002c68 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_STANDBY: // S2
            setRelay(AIR_POS_RELAY, OPEN);
 8002a84:	2101      	movs	r1, #1
 8002a86:	2003      	movs	r0, #3
 8002a88:	f7fe feb2 	bl	80017f0 <setRelay>
            setRelay(AIR_NEG_RELAY, OPEN);
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	2002      	movs	r0, #2
 8002a90:	f7fe feae 	bl	80017f0 <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002a94:	2101      	movs	r1, #1
 8002a96:	2001      	movs	r0, #1
 8002a98:	f7fe feaa 	bl	80017f0 <setRelay>
            setRelay(DISCHARGE_RELAY, CLOSED);
 8002a9c:	2102      	movs	r1, #2
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f7fe fea6 	bl	80017f0 <setRelay>
            clearHardwareFault(false);
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f7fe fe4f 	bl	8001748 <clearHardwareFault>
            break;
 8002aaa:	e0dd      	b.n	8002c68 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_DRIVE_PRECHARGE: // S3
            setRelay(DISCHARGE_RELAY, OPEN);
 8002aac:	2101      	movs	r1, #1
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f7fe fe9e 	bl	80017f0 <setRelay>
            setRelay(AIR_POS_RELAY, OPEN);
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	2003      	movs	r0, #3
 8002ab8:	f7fe fe9a 	bl	80017f0 <setRelay>
            setRelay(AIR_NEG_RELAY, CLOSED);
 8002abc:	2102      	movs	r1, #2
 8002abe:	2002      	movs	r0, #2
 8002ac0:	f7fe fe96 	bl	80017f0 <setRelay>
            setRelay(PRECHARGE_RELAY, CLOSED);
 8002ac4:	2102      	movs	r1, #2
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	f7fe fe92 	bl	80017f0 <setRelay>
            clearHardwareFault(false);
 8002acc:	2000      	movs	r0, #0
 8002ace:	f7fe fe3b 	bl	8001748 <clearHardwareFault>
            break;
 8002ad2:	e0c9      	b.n	8002c68 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_DRIVE_PRECHARGE_COMPLETE: // S4
            setRelay(DISCHARGE_RELAY, OPEN);
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f7fe fe8a 	bl	80017f0 <setRelay>
            setRelay(AIR_POS_RELAY, CLOSED);
 8002adc:	2102      	movs	r1, #2
 8002ade:	2003      	movs	r0, #3
 8002ae0:	f7fe fe86 	bl	80017f0 <setRelay>
            setRelay(AIR_NEG_RELAY, CLOSED);
 8002ae4:	2102      	movs	r1, #2
 8002ae6:	2002      	movs	r0, #2
 8002ae8:	f7fe fe82 	bl	80017f0 <setRelay>
            setRelay(PRECHARGE_RELAY, CLOSED);
 8002aec:	2102      	movs	r1, #2
 8002aee:	2001      	movs	r0, #1
 8002af0:	f7fe fe7e 	bl	80017f0 <setRelay>
            clearHardwareFault(false);
 8002af4:	2000      	movs	r0, #0
 8002af6:	f7fe fe27 	bl	8001748 <clearHardwareFault>
            break;
 8002afa:	e0b5      	b.n	8002c68 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_DRIVE: // S5
            setRelay(DISCHARGE_RELAY, OPEN);
 8002afc:	2101      	movs	r1, #1
 8002afe:	2000      	movs	r0, #0
 8002b00:	f7fe fe76 	bl	80017f0 <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002b04:	2101      	movs	r1, #1
 8002b06:	2001      	movs	r0, #1
 8002b08:	f7fe fe72 	bl	80017f0 <setRelay>
            setRelay(AIR_POS_RELAY, CLOSED);
 8002b0c:	2102      	movs	r1, #2
 8002b0e:	2003      	movs	r0, #3
 8002b10:	f7fe fe6e 	bl	80017f0 <setRelay>
            setRelay(AIR_NEG_RELAY, CLOSED);
 8002b14:	2102      	movs	r1, #2
 8002b16:	2002      	movs	r0, #2
 8002b18:	f7fe fe6a 	bl	80017f0 <setRelay>
            clearHardwareFault(false);
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f7fe fe13 	bl	8001748 <clearHardwareFault>
            break;
 8002b22:	e0a1      	b.n	8002c68 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_CHARGE_PRECHARGE: // S6
            setRelay(DISCHARGE_RELAY, OPEN);
 8002b24:	2101      	movs	r1, #1
 8002b26:	2000      	movs	r0, #0
 8002b28:	f7fe fe62 	bl	80017f0 <setRelay>
            setRelay(AIR_POS_RELAY, OPEN);
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	2003      	movs	r0, #3
 8002b30:	f7fe fe5e 	bl	80017f0 <setRelay>
            setRelay(AIR_NEG_RELAY, CLOSED);
 8002b34:	2102      	movs	r1, #2
 8002b36:	2002      	movs	r0, #2
 8002b38:	f7fe fe5a 	bl	80017f0 <setRelay>
            setRelay(PRECHARGE_RELAY, CLOSED);
 8002b3c:	2102      	movs	r1, #2
 8002b3e:	2001      	movs	r0, #1
 8002b40:	f7fe fe56 	bl	80017f0 <setRelay>
            clearHardwareFault(false);
 8002b44:	2000      	movs	r0, #0
 8002b46:	f7fe fdff 	bl	8001748 <clearHardwareFault>
            break;
 8002b4a:	e08d      	b.n	8002c68 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE: // S7
            setRelay(DISCHARGE_RELAY, OPEN);
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f7fe fe4e 	bl	80017f0 <setRelay>
            setRelay(AIR_POS_RELAY, CLOSED);
 8002b54:	2102      	movs	r1, #2
 8002b56:	2003      	movs	r0, #3
 8002b58:	f7fe fe4a 	bl	80017f0 <setRelay>
            setRelay(AIR_NEG_RELAY, CLOSED);
 8002b5c:	2102      	movs	r1, #2
 8002b5e:	2002      	movs	r0, #2
 8002b60:	f7fe fe46 	bl	80017f0 <setRelay>
            setRelay(PRECHARGE_RELAY, CLOSED);
 8002b64:	2102      	movs	r1, #2
 8002b66:	2001      	movs	r0, #1
 8002b68:	f7fe fe42 	bl	80017f0 <setRelay>
            clearHardwareFault(false);
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f7fe fdeb 	bl	8001748 <clearHardwareFault>
            break;
 8002b72:	e079      	b.n	8002c68 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_CHARGE_TRICKLE: // S8
            setRelay(DISCHARGE_RELAY, OPEN);
 8002b74:	2101      	movs	r1, #1
 8002b76:	2000      	movs	r0, #0
 8002b78:	f7fe fe3a 	bl	80017f0 <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	2001      	movs	r0, #1
 8002b80:	f7fe fe36 	bl	80017f0 <setRelay>
            setRelay(AIR_POS_RELAY, CLOSED);
 8002b84:	2102      	movs	r1, #2
 8002b86:	2003      	movs	r0, #3
 8002b88:	f7fe fe32 	bl	80017f0 <setRelay>
            setRelay(AIR_NEG_RELAY, CLOSED);
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	2002      	movs	r0, #2
 8002b90:	f7fe fe2e 	bl	80017f0 <setRelay>
            clearHardwareFault(false);
 8002b94:	2000      	movs	r0, #0
 8002b96:	f7fe fdd7 	bl	8001748 <clearHardwareFault>
            break;
 8002b9a:	e065      	b.n	8002c68 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT: // S9
            setRelay(DISCHARGE_RELAY, OPEN);
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f7fe fe26 	bl	80017f0 <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	f7fe fe22 	bl	80017f0 <setRelay>
            setRelay(AIR_POS_RELAY, CLOSED);
 8002bac:	2102      	movs	r1, #2
 8002bae:	2003      	movs	r0, #3
 8002bb0:	f7fe fe1e 	bl	80017f0 <setRelay>
            setRelay(AIR_NEG_RELAY, CLOSED);
 8002bb4:	2102      	movs	r1, #2
 8002bb6:	2002      	movs	r0, #2
 8002bb8:	f7fe fe1a 	bl	80017f0 <setRelay>
            clearHardwareFault(false);
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f7fe fdc3 	bl	8001748 <clearHardwareFault>
            break;
 8002bc2:	e051      	b.n	8002c68 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE: // S10
            setRelay(DISCHARGE_RELAY, OPEN);
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	f7fe fe12 	bl	80017f0 <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002bcc:	2101      	movs	r1, #1
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f7fe fe0e 	bl	80017f0 <setRelay>
            setRelay(AIR_POS_RELAY, CLOSED);
 8002bd4:	2102      	movs	r1, #2
 8002bd6:	2003      	movs	r0, #3
 8002bd8:	f7fe fe0a 	bl	80017f0 <setRelay>
            setRelay(AIR_NEG_RELAY, CLOSED);
 8002bdc:	2102      	movs	r1, #2
 8002bde:	2002      	movs	r0, #2
 8002be0:	f7fe fe06 	bl	80017f0 <setRelay>
            clearHardwareFault(false);
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7fe fdaf 	bl	8001748 <clearHardwareFault>
            break;
 8002bea:	e03d      	b.n	8002c68 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_ERROR: // S0
            // Note, relays will not powered, as
            // the fault cuts their supply
            setRelay(AIR_POS_RELAY, OPEN);
 8002bec:	2101      	movs	r1, #1
 8002bee:	2003      	movs	r0, #3
 8002bf0:	f7fe fdfe 	bl	80017f0 <setRelay>
            setRelay(AIR_NEG_RELAY, OPEN);
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	2002      	movs	r0, #2
 8002bf8:	f7fe fdfa 	bl	80017f0 <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	2001      	movs	r0, #1
 8002c00:	f7fe fdf6 	bl	80017f0 <setRelay>
            setRelay(DISCHARGE_RELAY, CLOSED);
 8002c04:	2102      	movs	r1, #2
 8002c06:	2000      	movs	r0, #0
 8002c08:	f7fe fdf2 	bl	80017f0 <setRelay>
            clearHardwareFault(false);
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f7fe fd9b 	bl	8001748 <clearHardwareFault>
            // Its possible that in some error cases we might want to
            // open the contactors without cutting their power.
            // For now, take the more definitive approach
            break;
 8002c12:	e029      	b.n	8002c68 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_CLEAR_ERROR: // S11
            setRelay(AIR_POS_RELAY, OPEN);
 8002c14:	2101      	movs	r1, #1
 8002c16:	2003      	movs	r0, #3
 8002c18:	f7fe fdea 	bl	80017f0 <setRelay>
            setRelay(AIR_NEG_RELAY, OPEN);
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	2002      	movs	r0, #2
 8002c20:	f7fe fde6 	bl	80017f0 <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002c24:	2101      	movs	r1, #1
 8002c26:	2001      	movs	r0, #1
 8002c28:	f7fe fde2 	bl	80017f0 <setRelay>
            setRelay(DISCHARGE_RELAY, CLOSED);
 8002c2c:	2102      	movs	r1, #2
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f7fe fdde 	bl	80017f0 <setRelay>
            clearErrorReg();
 8002c34:	f7fe fd9e 	bl	8001774 <clearErrorReg>
            clearHardwareFault(true);
 8002c38:	2001      	movs	r0, #1
 8002c3a:	f7fe fd85 	bl	8001748 <clearHardwareFault>
            break;
 8002c3e:	e013      	b.n	8002c68 <setStateOutput+0x250>
        case CMR_CAN_HVC_STATE_UNKNOWN:
        default:
            setRelay(AIR_POS_RELAY, OPEN);
 8002c40:	2101      	movs	r1, #1
 8002c42:	2003      	movs	r0, #3
 8002c44:	f7fe fdd4 	bl	80017f0 <setRelay>
            setRelay(AIR_NEG_RELAY, OPEN);
 8002c48:	2101      	movs	r1, #1
 8002c4a:	2002      	movs	r0, #2
 8002c4c:	f7fe fdd0 	bl	80017f0 <setRelay>
            setRelay(PRECHARGE_RELAY, OPEN);
 8002c50:	2101      	movs	r1, #1
 8002c52:	2001      	movs	r0, #1
 8002c54:	f7fe fdcc 	bl	80017f0 <setRelay>
            setRelay(DISCHARGE_RELAY, CLOSED);
 8002c58:	2102      	movs	r1, #2
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f7fe fdc8 	bl	80017f0 <setRelay>
            clearHardwareFault(false);
 8002c60:	2000      	movs	r0, #0
 8002c62:	f7fe fd71 	bl	8001748 <clearHardwareFault>
            break;
 8002c66:	bf00      	nop
    }
    
    return currentState;
 8002c68:	4b01      	ldr	r3, [pc, #4]	; (8002c70 <setStateOutput+0x258>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	2002f1cc 	.word	0x2002f1cc

08002c74 <vSetStateTask>:

/*
 * Task function
 */

void vSetStateTask(void *pvParameters) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
    // Make compiler happy
    (void) pvParameters;

    // Previous wake time pointer, initialized to current tick count.
    // This gets updated by vTaskDelayUntil every time it is called
    TickType_t xLastWakeTime = xTaskGetTickCount();
 8002c7c:	f003 fb2c 	bl	80062d8 <xTaskGetTickCount>
 8002c80:	4603      	mov	r3, r0
 8002c82:	60fb      	str	r3, [r7, #12]

    // Period
    const TickType_t xPeriod = 10;        // In ticks (ms)
 8002c84:	230a      	movs	r3, #10
 8002c86:	617b      	str	r3, [r7, #20]

    cmr_canHVCState_t nextState;
    cmr_canHVCError_t currentError = CMR_CAN_HVC_ERROR_NONE;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	827b      	strh	r3, [r7, #18]

    cmr_gpioWrite(GPIO_CLEAR_FAULT_L, 1);
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	2004      	movs	r0, #4
 8002c90:	f001 fa82 	bl	8004198 <cmr_gpioWrite>
    cmr_gpioWrite(GPIO_AIR_POSITIVE_EN, 1);
 8002c94:	2101      	movs	r1, #1
 8002c96:	2008      	movs	r0, #8
 8002c98:	f001 fa7e 	bl	8004198 <cmr_gpioWrite>
    cmr_gpioWrite(GPIO_AIR_NEGATIVE_EN, 1);
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	2009      	movs	r0, #9
 8002ca0:	f001 fa7a 	bl	8004198 <cmr_gpioWrite>
    cmr_gpioWrite(GPIO_AMS_EN_L, 0); // set power on for the HVC
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	2002      	movs	r0, #2
 8002ca8:	f001 fa76 	bl	8004198 <cmr_gpioWrite>
    // Executes infinitely with defined period using vTaskDelayUntil
    for (;;) {

        // Ask Deepak ab getting rid of this
        //Critical block so that the contents of the heartbeat are consistent
        taskENTER_CRITICAL();
 8002cac:	f003 ffd2 	bl	8006c54 <vPortEnterCritical>
        setStateOutput();
 8002cb0:	f7ff feb2 	bl	8002a18 <setStateOutput>
        // HVCHeartbeat->errorStatus = __REVSH(currentError);
        // HVCHeartbeat->state = currentState;
        // HVCHeartbeat->contactorStatus = getRelayStatus();
        taskEXIT_CRITICAL();
 8002cb4:	f003 fff8 	bl	8006ca8 <vPortExitCritical>
        

        currentError = checkErrors(currentState);
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <vSetStateTask+0x74>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fe fcb1 	bl	8001624 <checkErrors>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	827b      	strh	r3, [r7, #18]
        nextState = getNextState(currentError);
 8002cc6:	8a7b      	ldrh	r3, [r7, #18]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff fd4f 	bl	800276c <getNextState>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	747b      	strb	r3, [r7, #17]

        currentState = nextState;
 8002cd2:	4a05      	ldr	r2, [pc, #20]	; (8002ce8 <vSetStateTask+0x74>)
 8002cd4:	7c7b      	ldrb	r3, [r7, #17]
 8002cd6:	7013      	strb	r3, [r2, #0]

        // Delay until next period
        vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8002cd8:	f107 030c 	add.w	r3, r7, #12
 8002cdc:	6979      	ldr	r1, [r7, #20]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f003 f984 	bl	8005fec <vTaskDelayUntil>
        taskENTER_CRITICAL();
 8002ce4:	e7e2      	b.n	8002cac <vSetStateTask+0x38>
 8002ce6:	bf00      	nop
 8002ce8:	2002f1cc 	.word	0x2002f1cc

08002cec <cmr_adcSample>:
 *
 * @param pvParameters (cmr_adc_t *) The ADC.
 *
 * @return Does not return.
 */
static void cmr_adcSample(void *pvParameters) {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
    cmr_adc_t *adc = (cmr_adc_t *) pvParameters;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	613b      	str	r3, [r7, #16]

    TickType_t lastWakeTime = xTaskGetTickCount();
 8002cf8:	f003 faee 	bl	80062d8 <xTaskGetTickCount>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	60bb      	str	r3, [r7, #8]
    while (1) {
        // ADC set up in discontinuous scan mode.
        // Each `HAL_ADC_Start()` call converts the next-highest-rank channel.
        for (size_t i = 0; i < adc->channelsLen; i++) {
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e01c      	b.n	8002d40 <cmr_adcSample+0x54>
            cmr_adcChannel_t *channel = &(adc->channels[i]);
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	60fb      	str	r3, [r7, #12]

            HAL_ADC_Start(&adc->handle);
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f004 f962 	bl	8006fe4 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&adc->handle, CMR_ADC_TIMEOUT_MS);
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	2201      	movs	r2, #1
 8002d24:	4611      	mov	r1, r2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f004 fa02 	bl	8007130 <HAL_ADC_PollForConversion>
            channel->value = HAL_ADC_GetValue(&adc->handle);
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f004 fa82 	bl	8007238 <HAL_ADC_GetValue>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	611a      	str	r2, [r3, #16]
        for (size_t i = 0; i < adc->channelsLen; i++) {
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d3dd      	bcc.n	8002d06 <cmr_adcSample+0x1a>
        }

        vTaskDelayUntil(&lastWakeTime, cmr_adcSample_period_ms);
 8002d4a:	220a      	movs	r2, #10
 8002d4c:	f107 0308 	add.w	r3, r7, #8
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f003 f94a 	bl	8005fec <vTaskDelayUntil>
        for (size_t i = 0; i < adc->channelsLen; i++) {
 8002d58:	e7d2      	b.n	8002d00 <cmr_adcSample+0x14>
	...

08002d5c <cmr_adcConfigChannels>:
/**
 * @brief Initializes ADC channel sequence.
 *
 * @param adc The ADC to configure.
 */
static void cmr_adcConfigChannels(cmr_adc_t *adc) {
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08e      	sub	sp, #56	; 0x38
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < adc->channelsLen; i++) {
 8002d64:	2300      	movs	r3, #0
 8002d66:	637b      	str	r3, [r7, #52]	; 0x34
 8002d68:	e03a      	b.n	8002de0 <cmr_adcConfigChannels+0x84>
        const cmr_adcChannel_t *channel = adc->channels + i;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002d6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	633b      	str	r3, [r7, #48]	; 0x30
        if (channel->channel > ADC_CHANNEL_15) {
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b0f      	cmp	r3, #15
 8002d82:	d902      	bls.n	8002d8a <cmr_adcConfigChannels+0x2e>
            cmr_panic("Invalid ADC channel!");
 8002d84:	481b      	ldr	r0, [pc, #108]	; (8002df4 <cmr_adcConfigChannels+0x98>)
 8002d86:	f001 fdf8 	bl	800497a <cmr_panic>
        }

        // Rank goes from 1 to 16
        ADC_ChannelConfTypeDef channelConfig = _platform_adcChannelConfig(channel, (uint32_t) i+1);
 8002d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	f107 0320 	add.w	r3, r7, #32
 8002d92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d94:	4618      	mov	r0, r3
 8002d96:	f001 f857 	bl	8003e48 <_platform_adcChannelConfig>

        if (HAL_ADC_ConfigChannel(&adc->handle, &channelConfig) != HAL_OK) {
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f107 0220 	add.w	r2, r7, #32
 8002da0:	4611      	mov	r1, r2
 8002da2:	4618      	mov	r0, r3
 8002da4:	f004 fa56 	bl	8007254 <HAL_ADC_ConfigChannel>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <cmr_adcConfigChannels+0x58>
            cmr_panic("HAL_ADC_ConfigChannel() failed!");
 8002dae:	4812      	ldr	r0, [pc, #72]	; (8002df8 <cmr_adcConfigChannels+0x9c>)
 8002db0:	f001 fde3 	bl	800497a <cmr_panic>
        }

        // Configure the pin for analog use.
        cmr_rccGPIOClockEnable(channel->port);
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f001 fdea 	bl	8004992 <cmr_rccGPIOClockEnable>

        GPIO_InitTypeDef pinConfig = _platform_adcPinConfig(channel);
 8002dbe:	f107 030c 	add.w	r3, r7, #12
 8002dc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f001 f85b 	bl	8003e80 <_platform_adcPinConfig>

        HAL_GPIO_Init(channel->port, &pinConfig);
 8002dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f107 020c 	add.w	r2, r7, #12
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f005 ff5b 	bl	8008c90 <HAL_GPIO_Init>
    for (size_t i = 0; i < adc->channelsLen; i++) {
 8002dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ddc:	3301      	adds	r3, #1
 8002dde:	637b      	str	r3, [r7, #52]	; 0x34
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d3bf      	bcc.n	8002d6a <cmr_adcConfigChannels+0xe>
    }
}
 8002dea:	bf00      	nop
 8002dec:	bf00      	nop
 8002dee:	3738      	adds	r7, #56	; 0x38
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	0800c398 	.word	0x0800c398
 8002df8:	0800c3b0 	.word	0x0800c3b0

08002dfc <cmr_adcInit>:
 * @param channelsLen Length of channels array.
 */
void cmr_adcInit(
    cmr_adc_t *adc, ADC_TypeDef *instance,
    cmr_adcChannel_t *channels, const size_t channelsLen
) {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	603b      	str	r3, [r7, #0]
    if (channelsLen > CMR_ADC_CHANNELS) {
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b10      	cmp	r3, #16
 8002e0e:	d902      	bls.n	8002e16 <cmr_adcInit+0x1a>
        cmr_panic("Too many channels");
 8002e10:	4813      	ldr	r0, [pc, #76]	; (8002e60 <cmr_adcInit+0x64>)
 8002e12:	f001 fdb2 	bl	800497a <cmr_panic>
    }

    _platform_adcInit(adc, instance, channels, channelsLen);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f001 f86f 	bl	8003f00 <_platform_adcInit>

    cmr_rccADCClockEnable(instance);
 8002e22:	68b8      	ldr	r0, [r7, #8]
 8002e24:	f001 fdc0 	bl	80049a8 <cmr_rccADCClockEnable>

    if (HAL_ADC_Init(&adc->handle) != HAL_OK) {
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f004 f88c 	bl	8006f48 <HAL_ADC_Init>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <cmr_adcInit+0x40>
        cmr_panic("HAL_ADC_Init() failed!");
 8002e36:	480b      	ldr	r0, [pc, #44]	; (8002e64 <cmr_adcInit+0x68>)
 8002e38:	f001 fd9f 	bl	800497a <cmr_panic>
    }

    cmr_adcConfigChannels(adc);
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f7ff ff8d 	bl	8002d5c <cmr_adcConfigChannels>

    cmr_taskInit(
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8002e48:	2205      	movs	r2, #5
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <cmr_adcInit+0x6c>)
 8002e50:	4906      	ldr	r1, [pc, #24]	; (8002e6c <cmr_adcInit+0x70>)
 8002e52:	f001 fefb 	bl	8004c4c <cmr_taskInit>
        "ADC sample",
        cmr_adcSample_priority,
        cmr_adcSample,
        adc
    );
}
 8002e56:	bf00      	nop
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	0800c3d0 	.word	0x0800c3d0
 8002e64:	0800c3e4 	.word	0x0800c3e4
 8002e68:	08002ced 	.word	0x08002ced
 8002e6c:	0800c3fc 	.word	0x0800c3fc

08002e70 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e74:	f3bf 8f4f 	dsb	sy
}
 8002e78:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002e7a:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <__NVIC_SystemReset+0x24>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002e82:	4904      	ldr	r1, [pc, #16]	; (8002e94 <__NVIC_SystemReset+0x24>)
 8002e84:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <__NVIC_SystemReset+0x28>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e8a:	f3bf 8f4f 	dsb	sy
}
 8002e8e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002e90:	bf00      	nop
 8002e92:	e7fd      	b.n	8002e90 <__NVIC_SystemReset+0x20>
 8002e94:	e000ed00 	.word	0xe000ed00
 8002e98:	05fa0004 	.word	0x05fa0004

08002e9c <cmr_bootloaderReceiveCallback>:
/**
 * @brief Callback for every time that a message is received from CAN to
 * check if we should system reset and enter bootloader
 */
void cmr_bootloaderReceiveCallback(CAN_RxHeaderTypeDef *msg, uint8_t *rxData)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
#ifdef CMR_ENABLE_BOOTLOADER
    if (msg->StdId == CMR_CANID_OPENBLT_XMP_RX) {
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f240 72e9 	movw	r2, #2025	; 0x7e9
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d10b      	bne.n	8002eca <cmr_bootloaderReceiveCallback+0x2e>
        if (rxData[0] == 0xff && rxData[1] == CMR_ENABLE_BOOTLOADER) {
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2bff      	cmp	r3, #255	; 0xff
 8002eb8:	d106      	bne.n	8002ec8 <cmr_bootloaderReceiveCallback+0x2c>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d101      	bne.n	8002ec8 <cmr_bootloaderReceiveCallback+0x2c>
            NVIC_SystemReset();
 8002ec4:	f7ff ffd4 	bl	8002e70 <__NVIC_SystemReset>
        }
        return;
 8002ec8:	bf00      	nop
    }
#endif
}
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <cmr_canFromHandle>:
 *
 * @param handle The handle.
 *
 * @return The interface.
 */
static cmr_can_t *cmr_canFromHandle(CAN_HandleTypeDef *handle) {
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
    char *addr = (void *) handle;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	60fb      	str	r3, [r7, #12]
    return (void *) (addr - offsetof(cmr_can_t, handle));
 8002edc:	68fb      	ldr	r3, [r7, #12]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <cmr_canTXCpltCallback>:
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL CAN handle.
 * @param mailbox The completed mailbox.
 */
static void cmr_canTXCpltCallback(CAN_HandleTypeDef *handle, size_t mailbox) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
    (void) mailbox;     // Placate compiler.
    cmr_can_t *can = cmr_canFromHandle(handle);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff ffea 	bl	8002ed0 <cmr_canFromHandle>
 8002efc:	60f8      	str	r0, [r7, #12]

    // Indicate completion.
    BaseType_t higherWoken;
    if (xSemaphoreGiveFromISR(can->txSem, &higherWoken) != pdTRUE) {
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	f107 0208 	add.w	r2, r7, #8
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f002 fc7f 	bl	800580c <xQueueGiveFromISR>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d002      	beq.n	8002f1a <cmr_canTXCpltCallback+0x2e>
        cmr_panic("TX semaphore released too many times!");
 8002f14:	4808      	ldr	r0, [pc, #32]	; (8002f38 <cmr_canTXCpltCallback+0x4c>)
 8002f16:	f001 fd30 	bl	800497a <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d007      	beq.n	8002f30 <cmr_canTXCpltCallback+0x44>
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <cmr_canTXCpltCallback+0x50>)
 8002f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	f3bf 8f6f 	isb	sy
}
 8002f30:	bf00      	nop
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	0800c408 	.word	0x0800c408
 8002f3c:	e000ed04 	.word	0xe000ed04

08002f40 <HAL_CAN_TxMailbox0CompleteCallback>:
        CAN_HandleTypeDef *handle \
    ) { \
        /* Treat abort as complete. */ \
        cmr_canTXCpltCallback(handle, mailbox); \
    }
CAN_TX_MAILBOX_CALLBACK(0)
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	2100      	movs	r1, #0
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff ffce 	bl	8002eec <cmr_canTXCpltCallback>
 8002f50:	bf00      	nop
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_CAN_TxMailbox0AbortCallback>:
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	2100      	movs	r1, #0
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff ffc2 	bl	8002eec <cmr_canTXCpltCallback>
 8002f68:	bf00      	nop
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_CAN_TxMailbox1CompleteCallback>:
CAN_TX_MAILBOX_CALLBACK(1)
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	2101      	movs	r1, #1
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff ffb6 	bl	8002eec <cmr_canTXCpltCallback>
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_CAN_TxMailbox1AbortCallback>:
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	2101      	movs	r1, #1
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff ffaa 	bl	8002eec <cmr_canTXCpltCallback>
 8002f98:	bf00      	nop
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_CAN_TxMailbox2CompleteCallback>:
CAN_TX_MAILBOX_CALLBACK(2)
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	2102      	movs	r1, #2
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff ff9e 	bl	8002eec <cmr_canTXCpltCallback>
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_CAN_TxMailbox2AbortCallback>:
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	2102      	movs	r1, #2
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff ff92 	bl	8002eec <cmr_canTXCpltCallback>
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_CAN_ErrorCallback>:
 * @brief HAL CAN error callback.
 *
 * @warning Called from an interrupt handler!
 * @warning The handle must have been configured through this library!
 */
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *handle) {
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
    cmr_can_t *can = cmr_canFromHandle(handle);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff ff79 	bl	8002ed0 <cmr_canFromHandle>
 8002fde:	6178      	str	r0, [r7, #20]

    uint32_t error = handle->ErrorCode;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	613b      	str	r3, [r7, #16]
    if (error & (
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f403 33fc 	and.w	r3, r3, #129024	; 0x1f800
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d018      	beq.n	8003022 <HAL_CAN_ErrorCallback+0x52>
            HAL_CAN_ERROR_TX_TERR1 |
            HAL_CAN_ERROR_TX_TERR2
    )) {
        // Transmit error; drop semaphore.
        BaseType_t higherWoken;
        if (xSemaphoreGiveFromISR(can->txSem, &higherWoken) != pdTRUE) {
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	f107 020c 	add.w	r2, r7, #12
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f002 fc06 	bl	800580c <xQueueGiveFromISR>
 8003000:	4603      	mov	r3, r0
 8003002:	2b01      	cmp	r3, #1
 8003004:	d002      	beq.n	800300c <HAL_CAN_ErrorCallback+0x3c>
            cmr_panic("TX semaphore released too many times!");
 8003006:	480a      	ldr	r0, [pc, #40]	; (8003030 <HAL_CAN_ErrorCallback+0x60>)
 8003008:	f001 fcb7 	bl	800497a <cmr_panic>
        }
        portYIELD_FROM_ISR(higherWoken);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d007      	beq.n	8003022 <HAL_CAN_ErrorCallback+0x52>
 8003012:	4b08      	ldr	r3, [pc, #32]	; (8003034 <HAL_CAN_ErrorCallback+0x64>)
 8003014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	f3bf 8f6f 	isb	sy
    }

    // Clear errors.
    handle->ErrorCode = 0;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003028:	bf00      	nop
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	0800c408 	.word	0x0800c408
 8003034:	e000ed04 	.word	0xe000ed04

08003038 <cmr_canTimeout>:
 *
 * @return A negative value if a timeout has occurred; otherwise 0.
 */
static int cmr_canTimeout(
    TickType_t lastReceived_ms, TickType_t threshold_ms, TickType_t now_ms
) {
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
    TickType_t release_ms = lastReceived_ms + threshold_ms;
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	4413      	add	r3, r2
 800304a:	617b      	str	r3, [r7, #20]

    if (now_ms < lastReceived_ms && release_ms <= lastReceived_ms) {
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	429a      	cmp	r2, r3
 8003052:	d206      	bcs.n	8003062 <cmr_canTimeout+0x2a>
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	429a      	cmp	r2, r3
 800305a:	d802      	bhi.n	8003062 <cmr_canTimeout+0x2a>
        // Current time overflowed; release did not. Timeout!
        return -1;
 800305c:	f04f 33ff 	mov.w	r3, #4294967295
 8003060:	e011      	b.n	8003086 <cmr_canTimeout+0x4e>
    }

    if (lastReceived_ms <= now_ms && release_ms < lastReceived_ms) {
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	429a      	cmp	r2, r3
 8003068:	d805      	bhi.n	8003076 <cmr_canTimeout+0x3e>
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	429a      	cmp	r2, r3
 8003070:	d201      	bcs.n	8003076 <cmr_canTimeout+0x3e>
        // Current time did not overflow; release time did. No timeout.
        return 0;
 8003072:	2300      	movs	r3, #0
 8003074:	e007      	b.n	8003086 <cmr_canTimeout+0x4e>
    }

    // Neither current nor release overflowed, or both have.
    // In either case, release less than current indicates timeout.
    if (release_ms < now_ms) {
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	429a      	cmp	r2, r3
 800307c:	d202      	bcs.n	8003084 <cmr_canTimeout+0x4c>
        return -1;
 800307e:	f04f 33ff 	mov.w	r3, #4294967295
 8003082:	e000      	b.n	8003086 <cmr_canTimeout+0x4e>
    }

    return 0;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <cmr_canRXMetaTimeoutError>:
 * @param meta The periodic message's reception metadata.
 * @param now_ms Current timestamp, in milliseconds.
 *
 * @return A negative value if a timeout error has occurred; otherwise 0.
 */
int cmr_canRXMetaTimeoutError(const cmr_canRXMeta_t *meta, TickType_t now_ms) {
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	6039      	str	r1, [r7, #0]
    return cmr_canTimeout(
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6958      	ldr	r0, [r3, #20]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	4619      	mov	r1, r3
 80030a8:	f7ff ffc6 	bl	8003038 <cmr_canTimeout>
 80030ac:	4603      	mov	r3, r0
        meta->lastReceived_ms, meta->timeoutError_ms, now_ms
    );
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <cmr_canRXMetaFind>:
 * @param can The interface.
 * @param canID The CAN ID to search for.
 *
 * @return The associated receive metadata, or `NULL` if not found.
 */
static cmr_canRXMeta_t *cmr_canRXMetaFind(cmr_can_t *can, uint16_t canID) {
 80030b6:	b480      	push	{r7}
 80030b8:	b085      	sub	sp, #20
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	460b      	mov	r3, r1
 80030c0:	807b      	strh	r3, [r7, #2]
    for (size_t i = 0; i < can->rxMetaLen; i++) {
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	e00f      	b.n	80030e8 <cmr_canRXMetaFind+0x32>
        cmr_canRXMeta_t *meta = can->rxMeta + i;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	015b      	lsls	r3, r3, #5
 80030d0:	4413      	add	r3, r2
 80030d2:	60bb      	str	r3, [r7, #8]
        if (meta->canID == canID) {
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	887a      	ldrh	r2, [r7, #2]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d101      	bne.n	80030e2 <cmr_canRXMetaFind+0x2c>
            return meta;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	e008      	b.n	80030f4 <cmr_canRXMetaFind+0x3e>
    for (size_t i = 0; i < can->rxMetaLen; i++) {
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	3301      	adds	r3, #1
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d3ea      	bcc.n	80030c8 <cmr_canRXMetaFind+0x12>
        }
    }

    return NULL;    // No matching metadata.
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <cmr_canRXData>:
 * @param data The received data.
 * @param dataLen The received data's length.
 */
static void cmr_canRXData(
    cmr_can_t *can, uint16_t canID, const void *data, size_t dataLen
) {
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	460b      	mov	r3, r1
 800310e:	817b      	strh	r3, [r7, #10]
    cmr_canRXMeta_t *meta = cmr_canRXMetaFind(can, canID);
 8003110:	897b      	ldrh	r3, [r7, #10]
 8003112:	4619      	mov	r1, r3
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f7ff ffce 	bl	80030b6 <cmr_canRXMetaFind>
 800311a:	6178      	str	r0, [r7, #20]
    if (meta == NULL) {
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10b      	bne.n	800313a <cmr_canRXData+0x3a>
        // Not a configured message; attempt to use the callback.
        if (can->rxCallback) {
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003126:	2b00      	cmp	r3, #0
 8003128:	d014      	beq.n	8003154 <cmr_canRXData+0x54>
            can->rxCallback(can, canID, data, dataLen);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800312e:	8979      	ldrh	r1, [r7, #10]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	47a0      	blx	r4
        }

        return;
 8003138:	e00c      	b.n	8003154 <cmr_canRXData+0x54>
    }

    memcpy((void *) meta->payload, data, dataLen);
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	3318      	adds	r3, #24
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4618      	mov	r0, r3
 8003144:	f009 f866 	bl	800c214 <memcpy>
    meta->lastReceived_ms = xTaskGetTickCountFromISR();
 8003148:	f003 f8d6 	bl	80062f8 <xTaskGetTickCountFromISR>
 800314c:	4602      	mov	r2, r0
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	615a      	str	r2, [r3, #20]
 8003152:	e000      	b.n	8003156 <cmr_canRXData+0x56>
        return;
 8003154:	bf00      	nop
}
 8003156:	371c      	adds	r7, #28
 8003158:	46bd      	mov	sp, r7
 800315a:	bd90      	pop	{r4, r7, pc}

0800315c <cmr_canRXPendingCallback>:
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL CAN handle.
 * @param fifo The pending FIFO.
 */
static void cmr_canRXPendingCallback(CAN_HandleTypeDef *handle, uint32_t fifo) {
 800315c:	b580      	push	{r7, lr}
 800315e:	b08c      	sub	sp, #48	; 0x30
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
    CAN_RxHeaderTypeDef msg;
    uint8_t data[8];
    if (HAL_CAN_GetRxMessage(handle, fifo, &msg, data) != HAL_OK) {
 8003166:	f107 0308 	add.w	r3, r7, #8
 800316a:	f107 0210 	add.w	r2, r7, #16
 800316e:	6839      	ldr	r1, [r7, #0]
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f004 fdae 	bl	8007cd2 <HAL_CAN_GetRxMessage>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d114      	bne.n	80031a6 <cmr_canRXPendingCallback+0x4a>
        return;
    }

    cmr_bootloaderReceiveCallback(&msg, (uint8_t*)data);
 800317c:	f107 0208 	add.w	r2, r7, #8
 8003180:	f107 0310 	add.w	r3, r7, #16
 8003184:	4611      	mov	r1, r2
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fe88 	bl	8002e9c <cmr_bootloaderReceiveCallback>

    cmr_can_t *can = cmr_canFromHandle(handle);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff fe9f 	bl	8002ed0 <cmr_canFromHandle>
 8003192:	62f8      	str	r0, [r7, #44]	; 0x2c
    cmr_canRXData(can, msg.StdId, data, msg.DLC);
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	b299      	uxth	r1, r3
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	f107 0208 	add.w	r2, r7, #8
 800319e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031a0:	f7ff ffae 	bl	8003100 <cmr_canRXData>
 80031a4:	e000      	b.n	80031a8 <cmr_canRXPendingCallback+0x4c>
        return;
 80031a6:	bf00      	nop
}
 80031a8:	3730      	adds	r7, #48	; 0x30
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_CAN_RxFifo0MsgPendingCallback>:
    void HAL_CAN_RxFifo ## fifo ## MsgPendingCallback( \
        CAN_HandleTypeDef *handle \
    ) { \
        cmr_canRXPendingCallback(handle, CAN_RX_FIFO ## fifo); \
    }
CAN_RX_FIFO_PENDING(0)
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	2100      	movs	r1, #0
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff ffcf 	bl	800315c <cmr_canRXPendingCallback>
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_CAN_RxFifo1MsgPendingCallback>:
CAN_RX_FIFO_PENDING(1)
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b082      	sub	sp, #8
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	2101      	movs	r1, #1
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff ffc3 	bl	800315c <cmr_canRXPendingCallback>
 80031d6:	bf00      	nop
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <cmr_canInit>:
    cmr_canBitRate_t bitRate,
    cmr_canRXMeta_t *rxMeta, size_t rxMetaLen,
    cmr_canRXCallback_t rxCallback,
    GPIO_TypeDef *rxPort, uint16_t rxPin,
    GPIO_TypeDef *txPort, uint16_t txPin
) {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b090      	sub	sp, #64	; 0x40
 80031e4:	af06      	add	r7, sp, #24
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	4613      	mov	r3, r2
 80031ee:	71fb      	strb	r3, [r7, #7]
    /* Do any platform-specific initialization */
    _platform_canInit(
 80031f0:	79fa      	ldrb	r2, [r7, #7]
 80031f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80031f6:	9305      	str	r3, [sp, #20]
 80031f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031fa:	9304      	str	r3, [sp, #16]
 80031fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80031fe:	9303      	str	r3, [sp, #12]
 8003200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003202:	9302      	str	r3, [sp, #8]
 8003204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003206:	9301      	str	r3, [sp, #4]
 8003208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	68b9      	ldr	r1, [r7, #8]
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 fb99 	bl	8003948 <_platform_canInit>
        rxCallback,
        rxPort, rxPin,
        txPort, txPin
    );

    cmr_rccCANClockEnable(instance);
 8003216:	68b8      	ldr	r0, [r7, #8]
 8003218:	f001 fbd1 	bl	80049be <cmr_rccCANClockEnable>
    cmr_rccGPIOClockEnable(rxPort);
 800321c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800321e:	f001 fbb8 	bl	8004992 <cmr_rccGPIOClockEnable>
    cmr_rccGPIOClockEnable(txPort);
 8003222:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003224:	f001 fbb5 	bl	8004992 <cmr_rccGPIOClockEnable>

    // Configure CAN RX pin.
    GPIO_InitTypeDef pinConfig = {
 8003228:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	2302      	movs	r3, #2
 800322e:	61bb      	str	r3, [r7, #24]
 8003230:	2300      	movs	r3, #0
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	2303      	movs	r3, #3
 8003236:	623b      	str	r3, [r7, #32]
        .Pin = rxPin,
        .Mode = GPIO_MODE_AF_PP,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_VERY_HIGH,
        .Alternate = cmr_canGPIOAF(instance, rxPort)
 8003238:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800323a:	68b8      	ldr	r0, [r7, #8]
 800323c:	f000 f88d 	bl	800335a <cmr_canGPIOAF>
 8003240:	4603      	mov	r3, r0
    GPIO_InitTypeDef pinConfig = {
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
    };
    HAL_GPIO_Init(rxPort, &pinConfig);
 8003244:	f107 0314 	add.w	r3, r7, #20
 8003248:	4619      	mov	r1, r3
 800324a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800324c:	f005 fd20 	bl	8008c90 <HAL_GPIO_Init>

    // Configure CAN TX pin.
    pinConfig.Pin = txPin;
 8003250:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003254:	617b      	str	r3, [r7, #20]
    pinConfig.Alternate = cmr_canGPIOAF(instance, txPort);
 8003256:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003258:	68b8      	ldr	r0, [r7, #8]
 800325a:	f000 f87e 	bl	800335a <cmr_canGPIOAF>
 800325e:	4603      	mov	r3, r0
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(txPort, &pinConfig);
 8003262:	f107 0314 	add.w	r3, r7, #20
 8003266:	4619      	mov	r1, r3
 8003268:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800326a:	f005 fd11 	bl	8008c90 <HAL_GPIO_Init>

    if (HAL_CAN_Init(&can->handle) != HAL_OK) {
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4618      	mov	r0, r3
 8003272:	f004 fa1d 	bl	80076b0 <HAL_CAN_Init>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <cmr_canInit+0xa2>
        cmr_panic("HAL_CAN_Init() failed!");
 800327c:	480e      	ldr	r0, [pc, #56]	; (80032b8 <cmr_canInit+0xd8>)
 800327e:	f001 fb7c 	bl	800497a <cmr_panic>
    }

    if (HAL_CAN_Start(&can->handle) != HAL_OK) {
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4618      	mov	r0, r3
 8003286:	f004 fc05 	bl	8007a94 <HAL_CAN_Start>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <cmr_canInit+0xb6>
        cmr_panic("HAL_CAN_Start() failed!");
 8003290:	480a      	ldr	r0, [pc, #40]	; (80032bc <cmr_canInit+0xdc>)
 8003292:	f001 fb72 	bl	800497a <cmr_panic>
    }

    if (HAL_CAN_ActivateNotification(
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f648 7113 	movw	r1, #36627	; 0x8f13
 800329c:	4618      	mov	r0, r3
 800329e:	f004 fe2b 	bl	8007ef8 <HAL_CAN_ActivateNotification>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <cmr_canInit+0xce>
            CAN_IT_ERROR_PASSIVE |
            CAN_IT_BUSOFF |
            CAN_IT_LAST_ERROR_CODE |
            CAN_IT_ERROR
    )) {
        cmr_panic("HAL_CAN_ActivateNotification() failed!");
 80032a8:	4805      	ldr	r0, [pc, #20]	; (80032c0 <cmr_canInit+0xe0>)
 80032aa:	f001 fb66 	bl	800497a <cmr_panic>
    }
}
 80032ae:	bf00      	nop
 80032b0:	3728      	adds	r7, #40	; 0x28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	0800c430 	.word	0x0800c430
 80032bc:	0800c448 	.word	0x0800c448
 80032c0:	0800c460 	.word	0x0800c460

080032c4 <cmr_canTX>:
 */
int cmr_canTX(
    cmr_can_t *can,
    uint16_t id, const void *data, size_t len,
    TickType_t timeout
) {
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08e      	sub	sp, #56	; 0x38
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	460b      	mov	r3, r1
 80032d2:	817b      	strh	r3, [r7, #10]
    CAN_TxHeaderTypeDef txHeader = {
 80032d4:	897b      	ldrh	r3, [r7, #10]
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	2300      	movs	r3, #0
 80032da:	61fb      	str	r3, [r7, #28]
 80032dc:	2300      	movs	r3, #0
 80032de:	623b      	str	r3, [r7, #32]
 80032e0:	2300      	movs	r3, #0
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032e8:	2300      	movs	r3, #0
 80032ea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        .DLC = len,
        .TransmitGlobalTime = DISABLE
    };

    // Attempt to reserve a mailbox.
    BaseType_t result = xSemaphoreTake(can->txSem, timeout);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80032f2:	2300      	movs	r3, #0
 80032f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032f6:	2100      	movs	r1, #0
 80032f8:	f002 fb02 	bl	8005900 <xQueueGenericReceive>
 80032fc:	6378      	str	r0, [r7, #52]	; 0x34
    if (result != pdTRUE) {
 80032fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003300:	2b01      	cmp	r3, #1
 8003302:	d002      	beq.n	800330a <cmr_canTX+0x46>
        return -1;
 8003304:	f04f 33ff 	mov.w	r3, #4294967295
 8003308:	e012      	b.n	8003330 <cmr_canTX+0x6c>
    }

    // Even though the interface for HAL_CAN_AddTxMessage() does not specify the
    // data as `const`, it does not touch the data. Oh well.
    uint32_t txMailbox;
    HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f107 0314 	add.w	r3, r7, #20
 8003310:	f107 0118 	add.w	r1, r7, #24
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	f004 fc01 	bl	8007b1c <HAL_CAN_AddTxMessage>
 800331a:	4603      	mov	r3, r0
 800331c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        &can->handle, &txHeader, (void *) data, &txMailbox
    );
    if (status != HAL_OK) {
 8003320:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <cmr_canTX+0x6a>
        cmr_panic("Semaphore was available, but no mailboxes were found!");
 8003328:	4803      	ldr	r0, [pc, #12]	; (8003338 <cmr_canTX+0x74>)
 800332a:	f001 fb26 	bl	800497a <cmr_panic>
    }

    return 0;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3738      	adds	r7, #56	; 0x38
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	0800c488 	.word	0x0800c488

0800333c <cmr_canFilter>:
 * @param filtersLen The number of filters. Must be less than
 * `CMR_CAN_FILTERBANKS`.
 */
void cmr_canFilter(
    cmr_can_t *can, const cmr_canFilter_t *filters, size_t filtersLen
) {
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
    _platform_canFilter(can, filters, filtersLen);
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	68b9      	ldr	r1, [r7, #8]
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 fbd5 	bl	8003afc <_platform_canFilter>
}
 8003352:	bf00      	nop
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <cmr_canGPIOAF>:
 * @param can The CAN interface.
 * @param port The GPIO port.
 *
 * @return The GPIO alternate function.
 */
uint32_t cmr_canGPIOAF(CAN_TypeDef *instance, GPIO_TypeDef *port) {
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	6039      	str	r1, [r7, #0]
    return _platform_canGPIOAF(instance, port);
 8003364:	6839      	ldr	r1, [r7, #0]
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 faaa 	bl	80038c0 <_platform_canGPIOAF>
 800336c:	4603      	mov	r3, r0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <DMA1_Stream0_IRQHandler>:
 */
#define DMA_IRQ_HANDLER(ctrl, stream) \
    void DMA_STREAM_NAME(ctrl, stream, _IRQHandler)(void) { \
        HAL_DMA_IRQHandler(cmr_dmaInterrupts[ctrl - 1][stream].handle); \
    }
DMA_STREAM_FOREACH(DMA_IRQ_HANDLER)
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
 800337c:	4b03      	ldr	r3, [pc, #12]	; (800338c <DMA1_Stream0_IRQHandler+0x14>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f005 fa01 	bl	8008788 <HAL_DMA_IRQHandler>
 8003386:	bf00      	nop
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	2002f1d4 	.word	0x2002f1d4

08003390 <DMA1_Stream1_IRQHandler>:
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
 8003394:	4b03      	ldr	r3, [pc, #12]	; (80033a4 <DMA1_Stream1_IRQHandler+0x14>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4618      	mov	r0, r3
 800339a:	f005 f9f5 	bl	8008788 <HAL_DMA_IRQHandler>
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	2002f1d4 	.word	0x2002f1d4

080033a8 <DMA1_Stream2_IRQHandler>:
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	4b03      	ldr	r3, [pc, #12]	; (80033bc <DMA1_Stream2_IRQHandler+0x14>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f005 f9e9 	bl	8008788 <HAL_DMA_IRQHandler>
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	2002f1d4 	.word	0x2002f1d4

080033c0 <DMA1_Stream3_IRQHandler>:
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	4b03      	ldr	r3, [pc, #12]	; (80033d4 <DMA1_Stream3_IRQHandler+0x14>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f005 f9dd 	bl	8008788 <HAL_DMA_IRQHandler>
 80033ce:	bf00      	nop
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	2002f1d4 	.word	0x2002f1d4

080033d8 <DMA1_Stream4_IRQHandler>:
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
 80033dc:	4b03      	ldr	r3, [pc, #12]	; (80033ec <DMA1_Stream4_IRQHandler+0x14>)
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f005 f9d1 	bl	8008788 <HAL_DMA_IRQHandler>
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	2002f1d4 	.word	0x2002f1d4

080033f0 <DMA1_Stream5_IRQHandler>:
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	4b03      	ldr	r3, [pc, #12]	; (8003404 <DMA1_Stream5_IRQHandler+0x14>)
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f005 f9c5 	bl	8008788 <HAL_DMA_IRQHandler>
 80033fe:	bf00      	nop
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	2002f1d4 	.word	0x2002f1d4

08003408 <DMA1_Stream6_IRQHandler>:
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
 800340c:	4b03      	ldr	r3, [pc, #12]	; (800341c <DMA1_Stream6_IRQHandler+0x14>)
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	4618      	mov	r0, r3
 8003412:	f005 f9b9 	bl	8008788 <HAL_DMA_IRQHandler>
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	2002f1d4 	.word	0x2002f1d4

08003420 <DMA1_Stream7_IRQHandler>:
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
 8003424:	4b03      	ldr	r3, [pc, #12]	; (8003434 <DMA1_Stream7_IRQHandler+0x14>)
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	4618      	mov	r0, r3
 800342a:	f005 f9ad 	bl	8008788 <HAL_DMA_IRQHandler>
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	2002f1d4 	.word	0x2002f1d4

08003438 <DMA2_Stream0_IRQHandler>:
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
 800343c:	4b03      	ldr	r3, [pc, #12]	; (800344c <DMA2_Stream0_IRQHandler+0x14>)
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	4618      	mov	r0, r3
 8003442:	f005 f9a1 	bl	8008788 <HAL_DMA_IRQHandler>
 8003446:	bf00      	nop
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	2002f1d4 	.word	0x2002f1d4

08003450 <DMA2_Stream1_IRQHandler>:
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
 8003454:	4b03      	ldr	r3, [pc, #12]	; (8003464 <DMA2_Stream1_IRQHandler+0x14>)
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	4618      	mov	r0, r3
 800345a:	f005 f995 	bl	8008788 <HAL_DMA_IRQHandler>
 800345e:	bf00      	nop
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	2002f1d4 	.word	0x2002f1d4

08003468 <DMA2_Stream2_IRQHandler>:
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
 800346c:	4b03      	ldr	r3, [pc, #12]	; (800347c <DMA2_Stream2_IRQHandler+0x14>)
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	4618      	mov	r0, r3
 8003472:	f005 f989 	bl	8008788 <HAL_DMA_IRQHandler>
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	2002f1d4 	.word	0x2002f1d4

08003480 <DMA2_Stream3_IRQHandler>:
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
 8003484:	4b03      	ldr	r3, [pc, #12]	; (8003494 <DMA2_Stream3_IRQHandler+0x14>)
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	4618      	mov	r0, r3
 800348a:	f005 f97d 	bl	8008788 <HAL_DMA_IRQHandler>
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	2002f1d4 	.word	0x2002f1d4

08003498 <DMA2_Stream4_IRQHandler>:
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
 800349c:	4b03      	ldr	r3, [pc, #12]	; (80034ac <DMA2_Stream4_IRQHandler+0x14>)
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	4618      	mov	r0, r3
 80034a2:	f005 f971 	bl	8008788 <HAL_DMA_IRQHandler>
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	2002f1d4 	.word	0x2002f1d4

080034b0 <DMA2_Stream5_IRQHandler>:
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	4b03      	ldr	r3, [pc, #12]	; (80034c4 <DMA2_Stream5_IRQHandler+0x14>)
 80034b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b8:	4618      	mov	r0, r3
 80034ba:	f005 f965 	bl	8008788 <HAL_DMA_IRQHandler>
 80034be:	bf00      	nop
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	2002f1d4 	.word	0x2002f1d4

080034c8 <DMA2_Stream6_IRQHandler>:
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	4b03      	ldr	r3, [pc, #12]	; (80034dc <DMA2_Stream6_IRQHandler+0x14>)
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	4618      	mov	r0, r3
 80034d2:	f005 f959 	bl	8008788 <HAL_DMA_IRQHandler>
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	2002f1d4 	.word	0x2002f1d4

080034e0 <DMA2_Stream7_IRQHandler>:
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <DMA2_Stream7_IRQHandler+0x14>)
 80034e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e8:	4618      	mov	r0, r3
 80034ea:	f005 f94d 	bl	8008788 <HAL_DMA_IRQHandler>
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	2002f1d4 	.word	0x2002f1d4

080034f8 <cmr_dmaInit>:
 * @brief Initializes the given HAL DMA handle, including interrupt handler
 * configuration for the corresponding stream.
 *
 * @param handle The HAL DMA handle.
 */
void cmr_dmaInit(DMA_HandleTypeDef *handle) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b088      	sub	sp, #32
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
    size_t ctrlIndex;
    size_t streamIndex;
    IRQn_Type irqNum;

    // Configure interrupts.
    switch ((uintptr_t) handle->Instance) {
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a92      	ldr	r2, [pc, #584]	; (8003750 <cmr_dmaInit+0x258>)
 8003506:	4293      	cmp	r3, r2
 8003508:	f000 80d2 	beq.w	80036b0 <cmr_dmaInit+0x1b8>
 800350c:	4a90      	ldr	r2, [pc, #576]	; (8003750 <cmr_dmaInit+0x258>)
 800350e:	4293      	cmp	r3, r2
 8003510:	f200 80d5 	bhi.w	80036be <cmr_dmaInit+0x1c6>
 8003514:	4a8f      	ldr	r2, [pc, #572]	; (8003754 <cmr_dmaInit+0x25c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	f000 80c3 	beq.w	80036a2 <cmr_dmaInit+0x1aa>
 800351c:	4a8d      	ldr	r2, [pc, #564]	; (8003754 <cmr_dmaInit+0x25c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	f200 80cd 	bhi.w	80036be <cmr_dmaInit+0x1c6>
 8003524:	4a8c      	ldr	r2, [pc, #560]	; (8003758 <cmr_dmaInit+0x260>)
 8003526:	4293      	cmp	r3, r2
 8003528:	f000 80b4 	beq.w	8003694 <cmr_dmaInit+0x19c>
 800352c:	4a8a      	ldr	r2, [pc, #552]	; (8003758 <cmr_dmaInit+0x260>)
 800352e:	4293      	cmp	r3, r2
 8003530:	f200 80c5 	bhi.w	80036be <cmr_dmaInit+0x1c6>
 8003534:	4a89      	ldr	r2, [pc, #548]	; (800375c <cmr_dmaInit+0x264>)
 8003536:	4293      	cmp	r3, r2
 8003538:	f000 80a5 	beq.w	8003686 <cmr_dmaInit+0x18e>
 800353c:	4a87      	ldr	r2, [pc, #540]	; (800375c <cmr_dmaInit+0x264>)
 800353e:	4293      	cmp	r3, r2
 8003540:	f200 80bd 	bhi.w	80036be <cmr_dmaInit+0x1c6>
 8003544:	4a86      	ldr	r2, [pc, #536]	; (8003760 <cmr_dmaInit+0x268>)
 8003546:	4293      	cmp	r3, r2
 8003548:	f000 8096 	beq.w	8003678 <cmr_dmaInit+0x180>
 800354c:	4a84      	ldr	r2, [pc, #528]	; (8003760 <cmr_dmaInit+0x268>)
 800354e:	4293      	cmp	r3, r2
 8003550:	f200 80b5 	bhi.w	80036be <cmr_dmaInit+0x1c6>
 8003554:	4a83      	ldr	r2, [pc, #524]	; (8003764 <cmr_dmaInit+0x26c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	f000 8087 	beq.w	800366a <cmr_dmaInit+0x172>
 800355c:	4a81      	ldr	r2, [pc, #516]	; (8003764 <cmr_dmaInit+0x26c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	f200 80ad 	bhi.w	80036be <cmr_dmaInit+0x1c6>
 8003564:	4a80      	ldr	r2, [pc, #512]	; (8003768 <cmr_dmaInit+0x270>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d078      	beq.n	800365c <cmr_dmaInit+0x164>
 800356a:	4a7f      	ldr	r2, [pc, #508]	; (8003768 <cmr_dmaInit+0x270>)
 800356c:	4293      	cmp	r3, r2
 800356e:	f200 80a6 	bhi.w	80036be <cmr_dmaInit+0x1c6>
 8003572:	4a7e      	ldr	r2, [pc, #504]	; (800376c <cmr_dmaInit+0x274>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d06a      	beq.n	800364e <cmr_dmaInit+0x156>
 8003578:	4a7c      	ldr	r2, [pc, #496]	; (800376c <cmr_dmaInit+0x274>)
 800357a:	4293      	cmp	r3, r2
 800357c:	f200 809f 	bhi.w	80036be <cmr_dmaInit+0x1c6>
 8003580:	4a7b      	ldr	r2, [pc, #492]	; (8003770 <cmr_dmaInit+0x278>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d05c      	beq.n	8003640 <cmr_dmaInit+0x148>
 8003586:	4a7a      	ldr	r2, [pc, #488]	; (8003770 <cmr_dmaInit+0x278>)
 8003588:	4293      	cmp	r3, r2
 800358a:	f200 8098 	bhi.w	80036be <cmr_dmaInit+0x1c6>
 800358e:	4a79      	ldr	r2, [pc, #484]	; (8003774 <cmr_dmaInit+0x27c>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d04e      	beq.n	8003632 <cmr_dmaInit+0x13a>
 8003594:	4a77      	ldr	r2, [pc, #476]	; (8003774 <cmr_dmaInit+0x27c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	f200 8091 	bhi.w	80036be <cmr_dmaInit+0x1c6>
 800359c:	4a76      	ldr	r2, [pc, #472]	; (8003778 <cmr_dmaInit+0x280>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d040      	beq.n	8003624 <cmr_dmaInit+0x12c>
 80035a2:	4a75      	ldr	r2, [pc, #468]	; (8003778 <cmr_dmaInit+0x280>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	f200 808a 	bhi.w	80036be <cmr_dmaInit+0x1c6>
 80035aa:	4a74      	ldr	r2, [pc, #464]	; (800377c <cmr_dmaInit+0x284>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d032      	beq.n	8003616 <cmr_dmaInit+0x11e>
 80035b0:	4a72      	ldr	r2, [pc, #456]	; (800377c <cmr_dmaInit+0x284>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	f200 8083 	bhi.w	80036be <cmr_dmaInit+0x1c6>
 80035b8:	4a71      	ldr	r2, [pc, #452]	; (8003780 <cmr_dmaInit+0x288>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d024      	beq.n	8003608 <cmr_dmaInit+0x110>
 80035be:	4a70      	ldr	r2, [pc, #448]	; (8003780 <cmr_dmaInit+0x288>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d87c      	bhi.n	80036be <cmr_dmaInit+0x1c6>
 80035c4:	4a6f      	ldr	r2, [pc, #444]	; (8003784 <cmr_dmaInit+0x28c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d017      	beq.n	80035fa <cmr_dmaInit+0x102>
 80035ca:	4a6e      	ldr	r2, [pc, #440]	; (8003784 <cmr_dmaInit+0x28c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d876      	bhi.n	80036be <cmr_dmaInit+0x1c6>
 80035d0:	4a6d      	ldr	r2, [pc, #436]	; (8003788 <cmr_dmaInit+0x290>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d003      	beq.n	80035de <cmr_dmaInit+0xe6>
 80035d6:	4a6d      	ldr	r2, [pc, #436]	; (800378c <cmr_dmaInit+0x294>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d007      	beq.n	80035ec <cmr_dmaInit+0xf4>
 80035dc:	e06f      	b.n	80036be <cmr_dmaInit+0x1c6>
        case DMA_STREAM_NAME(ctrl, stream, _BASE): \
            ctrlIndex = ctrl - 1; \
            streamIndex = stream; \
            irqNum = DMA_STREAM_NAME(ctrl, stream, _IRQn); \
            break;
DMA_STREAM_FOREACH(DMA_INTERRUPT_CONFIG)
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	2300      	movs	r3, #0
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	230b      	movs	r3, #11
 80035e8:	75fb      	strb	r3, [r7, #23]
 80035ea:	e06b      	b.n	80036c4 <cmr_dmaInit+0x1cc>
 80035ec:	2300      	movs	r3, #0
 80035ee:	61fb      	str	r3, [r7, #28]
 80035f0:	2301      	movs	r3, #1
 80035f2:	61bb      	str	r3, [r7, #24]
 80035f4:	230c      	movs	r3, #12
 80035f6:	75fb      	strb	r3, [r7, #23]
 80035f8:	e064      	b.n	80036c4 <cmr_dmaInit+0x1cc>
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
 80035fe:	2302      	movs	r3, #2
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	230d      	movs	r3, #13
 8003604:	75fb      	strb	r3, [r7, #23]
 8003606:	e05d      	b.n	80036c4 <cmr_dmaInit+0x1cc>
 8003608:	2300      	movs	r3, #0
 800360a:	61fb      	str	r3, [r7, #28]
 800360c:	2303      	movs	r3, #3
 800360e:	61bb      	str	r3, [r7, #24]
 8003610:	230e      	movs	r3, #14
 8003612:	75fb      	strb	r3, [r7, #23]
 8003614:	e056      	b.n	80036c4 <cmr_dmaInit+0x1cc>
 8003616:	2300      	movs	r3, #0
 8003618:	61fb      	str	r3, [r7, #28]
 800361a:	2304      	movs	r3, #4
 800361c:	61bb      	str	r3, [r7, #24]
 800361e:	230f      	movs	r3, #15
 8003620:	75fb      	strb	r3, [r7, #23]
 8003622:	e04f      	b.n	80036c4 <cmr_dmaInit+0x1cc>
 8003624:	2300      	movs	r3, #0
 8003626:	61fb      	str	r3, [r7, #28]
 8003628:	2305      	movs	r3, #5
 800362a:	61bb      	str	r3, [r7, #24]
 800362c:	2310      	movs	r3, #16
 800362e:	75fb      	strb	r3, [r7, #23]
 8003630:	e048      	b.n	80036c4 <cmr_dmaInit+0x1cc>
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	2306      	movs	r3, #6
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	2311      	movs	r3, #17
 800363c:	75fb      	strb	r3, [r7, #23]
 800363e:	e041      	b.n	80036c4 <cmr_dmaInit+0x1cc>
 8003640:	2300      	movs	r3, #0
 8003642:	61fb      	str	r3, [r7, #28]
 8003644:	2307      	movs	r3, #7
 8003646:	61bb      	str	r3, [r7, #24]
 8003648:	232f      	movs	r3, #47	; 0x2f
 800364a:	75fb      	strb	r3, [r7, #23]
 800364c:	e03a      	b.n	80036c4 <cmr_dmaInit+0x1cc>
 800364e:	2301      	movs	r3, #1
 8003650:	61fb      	str	r3, [r7, #28]
 8003652:	2300      	movs	r3, #0
 8003654:	61bb      	str	r3, [r7, #24]
 8003656:	2338      	movs	r3, #56	; 0x38
 8003658:	75fb      	strb	r3, [r7, #23]
 800365a:	e033      	b.n	80036c4 <cmr_dmaInit+0x1cc>
 800365c:	2301      	movs	r3, #1
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	2301      	movs	r3, #1
 8003662:	61bb      	str	r3, [r7, #24]
 8003664:	2339      	movs	r3, #57	; 0x39
 8003666:	75fb      	strb	r3, [r7, #23]
 8003668:	e02c      	b.n	80036c4 <cmr_dmaInit+0x1cc>
 800366a:	2301      	movs	r3, #1
 800366c:	61fb      	str	r3, [r7, #28]
 800366e:	2302      	movs	r3, #2
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	233a      	movs	r3, #58	; 0x3a
 8003674:	75fb      	strb	r3, [r7, #23]
 8003676:	e025      	b.n	80036c4 <cmr_dmaInit+0x1cc>
 8003678:	2301      	movs	r3, #1
 800367a:	61fb      	str	r3, [r7, #28]
 800367c:	2303      	movs	r3, #3
 800367e:	61bb      	str	r3, [r7, #24]
 8003680:	233b      	movs	r3, #59	; 0x3b
 8003682:	75fb      	strb	r3, [r7, #23]
 8003684:	e01e      	b.n	80036c4 <cmr_dmaInit+0x1cc>
 8003686:	2301      	movs	r3, #1
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	2304      	movs	r3, #4
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	233c      	movs	r3, #60	; 0x3c
 8003690:	75fb      	strb	r3, [r7, #23]
 8003692:	e017      	b.n	80036c4 <cmr_dmaInit+0x1cc>
 8003694:	2301      	movs	r3, #1
 8003696:	61fb      	str	r3, [r7, #28]
 8003698:	2305      	movs	r3, #5
 800369a:	61bb      	str	r3, [r7, #24]
 800369c:	2344      	movs	r3, #68	; 0x44
 800369e:	75fb      	strb	r3, [r7, #23]
 80036a0:	e010      	b.n	80036c4 <cmr_dmaInit+0x1cc>
 80036a2:	2301      	movs	r3, #1
 80036a4:	61fb      	str	r3, [r7, #28]
 80036a6:	2306      	movs	r3, #6
 80036a8:	61bb      	str	r3, [r7, #24]
 80036aa:	2345      	movs	r3, #69	; 0x45
 80036ac:	75fb      	strb	r3, [r7, #23]
 80036ae:	e009      	b.n	80036c4 <cmr_dmaInit+0x1cc>
 80036b0:	2301      	movs	r3, #1
 80036b2:	61fb      	str	r3, [r7, #28]
 80036b4:	2307      	movs	r3, #7
 80036b6:	61bb      	str	r3, [r7, #24]
 80036b8:	2346      	movs	r3, #70	; 0x46
 80036ba:	75fb      	strb	r3, [r7, #23]
 80036bc:	e002      	b.n	80036c4 <cmr_dmaInit+0x1cc>
#undef DMA_INTERRUPT_CONFIG
        default:
            cmr_panic("Unknown DMA stream!");
 80036be:	4834      	ldr	r0, [pc, #208]	; (8003790 <cmr_dmaInit+0x298>)
 80036c0:	f001 f95b 	bl	800497a <cmr_panic>
    }
    cmr_dmaInterrupts[ctrlIndex][streamIndex] = (cmr_dmaInterrupt_t) {
 80036c4:	4933      	ldr	r1, [pc, #204]	; (8003794 <cmr_dmaInit+0x29c>)
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	00da      	lsls	r2, r3, #3
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	4413      	add	r3, r2
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        .handle = handle
    };
    HAL_NVIC_SetPriority(irqNum, 5, 0);
 80036d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036d8:	2200      	movs	r2, #0
 80036da:	2105      	movs	r1, #5
 80036dc:	4618      	mov	r0, r3
 80036de:	f004 feec 	bl	80084ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqNum);
 80036e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f004 ff03 	bl	80084f2 <HAL_NVIC_EnableIRQ>

    // Enable DMA clocks.
    switch (ctrlIndex) {
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <cmr_dmaInit+0x202>
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d00f      	beq.n	8003718 <cmr_dmaInit+0x220>
 80036f8:	e01d      	b.n	8003736 <cmr_dmaInit+0x23e>
        case 0:
            __HAL_RCC_DMA1_CLK_ENABLE();
 80036fa:	2300      	movs	r3, #0
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	4b26      	ldr	r3, [pc, #152]	; (8003798 <cmr_dmaInit+0x2a0>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	4a25      	ldr	r2, [pc, #148]	; (8003798 <cmr_dmaInit+0x2a0>)
 8003704:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003708:	6313      	str	r3, [r2, #48]	; 0x30
 800370a:	4b23      	ldr	r3, [pc, #140]	; (8003798 <cmr_dmaInit+0x2a0>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	693b      	ldr	r3, [r7, #16]
            break;
 8003716:	e00e      	b.n	8003736 <cmr_dmaInit+0x23e>
        case 1:
            __HAL_RCC_DMA2_CLK_ENABLE();
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	4b1e      	ldr	r3, [pc, #120]	; (8003798 <cmr_dmaInit+0x2a0>)
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	4a1d      	ldr	r2, [pc, #116]	; (8003798 <cmr_dmaInit+0x2a0>)
 8003722:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003726:	6313      	str	r3, [r2, #48]	; 0x30
 8003728:	4b1b      	ldr	r3, [pc, #108]	; (8003798 <cmr_dmaInit+0x2a0>)
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	68fb      	ldr	r3, [r7, #12]
            break;
 8003734:	bf00      	nop
    }

    if (HAL_DMA_Init(handle) != HAL_OK) {
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f004 fef6 	bl	8008528 <HAL_DMA_Init>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <cmr_dmaInit+0x250>
        cmr_panic("HAL_DMA_Init() failed!");
 8003742:	4816      	ldr	r0, [pc, #88]	; (800379c <cmr_dmaInit+0x2a4>)
 8003744:	f001 f919 	bl	800497a <cmr_panic>
    }
}
 8003748:	bf00      	nop
 800374a:	3720      	adds	r7, #32
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	400264b8 	.word	0x400264b8
 8003754:	400264a0 	.word	0x400264a0
 8003758:	40026488 	.word	0x40026488
 800375c:	40026470 	.word	0x40026470
 8003760:	40026458 	.word	0x40026458
 8003764:	40026440 	.word	0x40026440
 8003768:	40026428 	.word	0x40026428
 800376c:	40026410 	.word	0x40026410
 8003770:	400260b8 	.word	0x400260b8
 8003774:	400260a0 	.word	0x400260a0
 8003778:	40026088 	.word	0x40026088
 800377c:	40026070 	.word	0x40026070
 8003780:	40026058 	.word	0x40026058
 8003784:	40026040 	.word	0x40026040
 8003788:	40026010 	.word	0x40026010
 800378c:	40026028 	.word	0x40026028
 8003790:	0800c4c0 	.word	0x0800c4c0
 8003794:	2002f1d4 	.word	0x2002f1d4
 8003798:	40023800 	.word	0x40023800
 800379c:	0800c4d4 	.word	0x0800c4d4

080037a0 <CAN1_TX_IRQHandler>:
                                                               \
    void CAN##can##_SCE_IRQHandler(void)                       \
    {                                                          \
        HAL_CAN_IRQHandler(cmr_canInterrupts[can - 1].handle); \
    }
CAN_FOREACH(CAN_IRQ_HANDLERS)
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	4b03      	ldr	r3, [pc, #12]	; (80037b4 <CAN1_TX_IRQHandler+0x14>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f004 fbcb 	bl	8007f44 <HAL_CAN_IRQHandler>
 80037ae:	bf00      	nop
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	2002f214 	.word	0x2002f214

080037b8 <CAN1_RX0_IRQHandler>:
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <CAN1_RX0_IRQHandler+0x14>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f004 fbbf 	bl	8007f44 <HAL_CAN_IRQHandler>
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	2002f214 	.word	0x2002f214

080037d0 <CAN1_RX1_IRQHandler>:
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	4b03      	ldr	r3, [pc, #12]	; (80037e4 <CAN1_RX1_IRQHandler+0x14>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f004 fbb3 	bl	8007f44 <HAL_CAN_IRQHandler>
 80037de:	bf00      	nop
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	2002f214 	.word	0x2002f214

080037e8 <CAN1_SCE_IRQHandler>:
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	4b03      	ldr	r3, [pc, #12]	; (80037fc <CAN1_SCE_IRQHandler+0x14>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f004 fba7 	bl	8007f44 <HAL_CAN_IRQHandler>
 80037f6:	bf00      	nop
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	2002f214 	.word	0x2002f214

08003800 <CAN2_TX_IRQHandler>:
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
 8003804:	4b03      	ldr	r3, [pc, #12]	; (8003814 <CAN2_TX_IRQHandler+0x14>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	4618      	mov	r0, r3
 800380a:	f004 fb9b 	bl	8007f44 <HAL_CAN_IRQHandler>
 800380e:	bf00      	nop
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	2002f214 	.word	0x2002f214

08003818 <CAN2_RX0_IRQHandler>:
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
 800381c:	4b03      	ldr	r3, [pc, #12]	; (800382c <CAN2_RX0_IRQHandler+0x14>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	4618      	mov	r0, r3
 8003822:	f004 fb8f 	bl	8007f44 <HAL_CAN_IRQHandler>
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	2002f214 	.word	0x2002f214

08003830 <CAN2_RX1_IRQHandler>:
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
 8003834:	4b03      	ldr	r3, [pc, #12]	; (8003844 <CAN2_RX1_IRQHandler+0x14>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	4618      	mov	r0, r3
 800383a:	f004 fb83 	bl	8007f44 <HAL_CAN_IRQHandler>
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	2002f214 	.word	0x2002f214

08003848 <CAN2_SCE_IRQHandler>:
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
 800384c:	4b03      	ldr	r3, [pc, #12]	; (800385c <CAN2_SCE_IRQHandler+0x14>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	4618      	mov	r0, r3
 8003852:	f004 fb77 	bl	8007f44 <HAL_CAN_IRQHandler>
 8003856:	bf00      	nop
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	2002f214 	.word	0x2002f214

08003860 <CAN3_TX_IRQHandler>:
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
 8003864:	4b03      	ldr	r3, [pc, #12]	; (8003874 <CAN3_TX_IRQHandler+0x14>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4618      	mov	r0, r3
 800386a:	f004 fb6b 	bl	8007f44 <HAL_CAN_IRQHandler>
 800386e:	bf00      	nop
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	2002f214 	.word	0x2002f214

08003878 <CAN3_RX0_IRQHandler>:
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
 800387c:	4b03      	ldr	r3, [pc, #12]	; (800388c <CAN3_RX0_IRQHandler+0x14>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	4618      	mov	r0, r3
 8003882:	f004 fb5f 	bl	8007f44 <HAL_CAN_IRQHandler>
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	2002f214 	.word	0x2002f214

08003890 <CAN3_RX1_IRQHandler>:
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
 8003894:	4b03      	ldr	r3, [pc, #12]	; (80038a4 <CAN3_RX1_IRQHandler+0x14>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4618      	mov	r0, r3
 800389a:	f004 fb53 	bl	8007f44 <HAL_CAN_IRQHandler>
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	2002f214 	.word	0x2002f214

080038a8 <CAN3_SCE_IRQHandler>:
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	4b03      	ldr	r3, [pc, #12]	; (80038bc <CAN3_SCE_IRQHandler+0x14>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f004 fb47 	bl	8007f44 <HAL_CAN_IRQHandler>
 80038b6:	bf00      	nop
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	2002f214 	.word	0x2002f214

080038c0 <_platform_canGPIOAF>:
 * @param port The GPIO port.
 *
 * @return The GPIO alternate function.
 */
uint32_t _platform_canGPIOAF(CAN_TypeDef *instance, GPIO_TypeDef *port)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
    switch ((uintptr_t)instance)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a16      	ldr	r2, [pc, #88]	; (8003928 <_platform_canGPIOAF+0x68>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d020      	beq.n	8003914 <_platform_canGPIOAF+0x54>
 80038d2:	4a15      	ldr	r2, [pc, #84]	; (8003928 <_platform_canGPIOAF+0x68>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d81f      	bhi.n	8003918 <_platform_canGPIOAF+0x58>
 80038d8:	4a14      	ldr	r2, [pc, #80]	; (800392c <_platform_canGPIOAF+0x6c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d003      	beq.n	80038e6 <_platform_canGPIOAF+0x26>
 80038de:	4a14      	ldr	r2, [pc, #80]	; (8003930 <_platform_canGPIOAF+0x70>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d015      	beq.n	8003910 <_platform_canGPIOAF+0x50>
 80038e4:	e018      	b.n	8003918 <_platform_canGPIOAF+0x58>
    {
    case CAN1_BASE:
        switch ((uintptr_t)port)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	4a12      	ldr	r2, [pc, #72]	; (8003934 <_platform_canGPIOAF+0x74>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d009      	beq.n	8003902 <_platform_canGPIOAF+0x42>
 80038ee:	4a11      	ldr	r2, [pc, #68]	; (8003934 <_platform_canGPIOAF+0x74>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d80a      	bhi.n	800390a <_platform_canGPIOAF+0x4a>
 80038f4:	4a10      	ldr	r2, [pc, #64]	; (8003938 <_platform_canGPIOAF+0x78>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d003      	beq.n	8003902 <_platform_canGPIOAF+0x42>
 80038fa:	4a10      	ldr	r2, [pc, #64]	; (800393c <_platform_canGPIOAF+0x7c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d002      	beq.n	8003906 <_platform_canGPIOAF+0x46>
 8003900:	e003      	b.n	800390a <_platform_canGPIOAF+0x4a>
        {
        case GPIOA_BASE:
        case GPIOD_BASE:
            return GPIO_AF9_CAN1;
 8003902:	2309      	movs	r3, #9
 8003904:	e00b      	b.n	800391e <_platform_canGPIOAF+0x5e>
        case GPIOB_BASE:
            return GPIO_AF8_CAN1;
 8003906:	2308      	movs	r3, #8
 8003908:	e009      	b.n	800391e <_platform_canGPIOAF+0x5e>
        default:
            cmr_panic("Unknown/unspported GPIO port!");
 800390a:	480d      	ldr	r0, [pc, #52]	; (8003940 <_platform_canGPIOAF+0x80>)
 800390c:	f001 f835 	bl	800497a <cmr_panic>
        }
    case CAN2_BASE:
        return GPIO_AF9_CAN2;
 8003910:	2309      	movs	r3, #9
 8003912:	e004      	b.n	800391e <_platform_canGPIOAF+0x5e>
    case CAN3_BASE:
        return GPIO_AF11_CAN3;
 8003914:	230b      	movs	r3, #11
 8003916:	e002      	b.n	800391e <_platform_canGPIOAF+0x5e>
    default:
        cmr_panic("Unknown CAN instance!");
 8003918:	480a      	ldr	r0, [pc, #40]	; (8003944 <_platform_canGPIOAF+0x84>)
 800391a:	f001 f82e 	bl	800497a <cmr_panic>
    }
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40006c00 	.word	0x40006c00
 800392c:	40006400 	.word	0x40006400
 8003930:	40006800 	.word	0x40006800
 8003934:	40020c00 	.word	0x40020c00
 8003938:	40020000 	.word	0x40020000
 800393c:	40020400 	.word	0x40020400
 8003940:	0800c4ec 	.word	0x0800c4ec
 8003944:	0800c50c 	.word	0x0800c50c

08003948 <_platform_canInit>:
    cmr_canBitRate_t bitRate,
    cmr_canRXMeta_t *rxMeta, size_t rxMetaLen,
    cmr_canRXCallback_t rxCallback,
    GPIO_TypeDef *rxPort, uint16_t rxPin,
    GPIO_TypeDef *txPort, uint16_t txPin
) {
 8003948:	b580      	push	{r7, lr}
 800394a:	b0a6      	sub	sp, #152	; 0x98
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	603b      	str	r3, [r7, #0]
 8003954:	4613      	mov	r3, r2
 8003956:	71fb      	strb	r3, [r7, #7]
    *can = (cmr_can_t) {
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4618      	mov	r0, r3
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	461a      	mov	r2, r3
 8003960:	2100      	movs	r1, #0
 8003962:	f008 fc65 	bl	800c230 <memset>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003972:	60da      	str	r2, [r3, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800397a:	611a      	str	r2, [r3, #16]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2201      	movs	r2, #1
 8003980:	765a      	strb	r2, [r3, #25]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2201      	movs	r2, #1
 8003986:	76da      	strb	r2, [r3, #27]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	675a      	str	r2, [r3, #116]	; 0x74
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8003994:	679a      	str	r2, [r3, #120]	; 0x78
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800399c:	67da      	str	r2, [r3, #124]	; 0x7c
        .rxCallback = rxCallback
    };

    // These numbers assume 48 MHz ABP1 peripheral clock frequency
    // 48 MHz / (6 + 1 + 1 time quanta) / Prescaler = bitRate
    switch (bitRate) {
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d00e      	beq.n	80039c2 <_platform_canInit+0x7a>
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	dc10      	bgt.n	80039ca <_platform_canInit+0x82>
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <_platform_canInit+0x6a>
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d004      	beq.n	80039ba <_platform_canInit+0x72>
 80039b0:	e00b      	b.n	80039ca <_platform_canInit+0x82>
        case CMR_CAN_BITRATE_250K:
            can->handle.Init.Prescaler = 24;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2218      	movs	r2, #24
 80039b6:	605a      	str	r2, [r3, #4]
            break;
 80039b8:	e007      	b.n	80039ca <_platform_canInit+0x82>
        case CMR_CAN_BITRATE_500K:
            can->handle.Init.Prescaler = 12;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	220c      	movs	r2, #12
 80039be:	605a      	str	r2, [r3, #4]
            break;
 80039c0:	e003      	b.n	80039ca <_platform_canInit+0x82>
        case CMR_CAN_BITRATE_1M:
            can->handle.Init.Prescaler = 6;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2206      	movs	r2, #6
 80039c6:	605a      	str	r2, [r3, #4]
            break;
 80039c8:	bf00      	nop
    }

    can->txSem = xSemaphoreCreateCountingStatic(
 80039ca:	2003      	movs	r0, #3
 80039cc:	2103      	movs	r1, #3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	332c      	adds	r3, #44	; 0x2c
 80039d2:	461a      	mov	r2, r3
 80039d4:	f001 feea 	bl	80057ac <xQueueCreateCountingSemaphoreStatic>
 80039d8:	4602      	mov	r2, r0
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	629a      	str	r2, [r3, #40]	; 0x28
        CAN_TX_MAILBOXES, CAN_TX_MAILBOXES, &can->txSemBuf
    );
    configASSERT(can->txSem != NULL);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d103      	bne.n	80039ee <_platform_canInit+0xa6>
 80039e6:	219f      	movs	r1, #159	; 0x9f
 80039e8:	483e      	ldr	r0, [pc, #248]	; (8003ae4 <_platform_canInit+0x19c>)
 80039ea:	f000 ffc6 	bl	800497a <cmr_panic>
    size_t canIdx;
    IRQn_Type irqTX;
    IRQn_Type irqRX0;
    IRQn_Type irqRX1;
    IRQn_Type irqSCE;
    switch ((uintptr_t) instance) {
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	4a3d      	ldr	r2, [pc, #244]	; (8003ae8 <_platform_canInit+0x1a0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d029      	beq.n	8003a4a <_platform_canInit+0x102>
 80039f6:	4a3c      	ldr	r2, [pc, #240]	; (8003ae8 <_platform_canInit+0x1a0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d836      	bhi.n	8003a6a <_platform_canInit+0x122>
 80039fc:	4a3b      	ldr	r2, [pc, #236]	; (8003aec <_platform_canInit+0x1a4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d003      	beq.n	8003a0a <_platform_canInit+0xc2>
 8003a02:	4a3b      	ldr	r2, [pc, #236]	; (8003af0 <_platform_canInit+0x1a8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d010      	beq.n	8003a2a <_platform_canInit+0xe2>
 8003a08:	e02f      	b.n	8003a6a <_platform_canInit+0x122>
            irqTX = CAN ## num ## _TX_IRQn; \
            irqRX0 = CAN ## num ## _RX0_IRQn; \
            irqRX1 = CAN ## num ## _RX1_IRQn; \
            irqSCE = CAN ## num ## _SCE_IRQn; \
            break;
CAN_FOREACH(CAN_INTERRUPT_CONFIG)
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a10:	2313      	movs	r3, #19
 8003a12:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8003a16:	2314      	movs	r3, #20
 8003a18:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 8003a1c:	2315      	movs	r3, #21
 8003a1e:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8003a22:	2316      	movs	r3, #22
 8003a24:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 8003a28:	e022      	b.n	8003a70 <_platform_canInit+0x128>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a30:	233f      	movs	r3, #63	; 0x3f
 8003a32:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8003a36:	2340      	movs	r3, #64	; 0x40
 8003a38:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 8003a3c:	2341      	movs	r3, #65	; 0x41
 8003a3e:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8003a42:	2342      	movs	r3, #66	; 0x42
 8003a44:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 8003a48:	e012      	b.n	8003a70 <_platform_canInit+0x128>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a50:	234a      	movs	r3, #74	; 0x4a
 8003a52:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8003a56:	234b      	movs	r3, #75	; 0x4b
 8003a58:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 8003a5c:	234c      	movs	r3, #76	; 0x4c
 8003a5e:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8003a62:	234d      	movs	r3, #77	; 0x4d
 8003a64:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 8003a68:	e002      	b.n	8003a70 <_platform_canInit+0x128>
#undef CAN_INTERRUPT_CONFIG
        default:
            cmr_panic("Unknown CAN instance!");
 8003a6a:	4822      	ldr	r0, [pc, #136]	; (8003af4 <_platform_canInit+0x1ac>)
 8003a6c:	f000 ff85 	bl	800497a <cmr_panic>
    }

    cmr_canInterrupts[canIdx] = (cmr_canInterrupt_t) {
        .handle = &can->handle
 8003a70:	68fa      	ldr	r2, [r7, #12]
    cmr_canInterrupts[canIdx] = (cmr_canInterrupt_t) {
 8003a72:	4921      	ldr	r1, [pc, #132]	; (8003af8 <_platform_canInit+0x1b0>)
 8003a74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    };
    HAL_NVIC_SetPriority(irqTX, 5, 0);
 8003a7c:	f997 3093 	ldrsb.w	r3, [r7, #147]	; 0x93
 8003a80:	2200      	movs	r2, #0
 8003a82:	2105      	movs	r1, #5
 8003a84:	4618      	mov	r0, r3
 8003a86:	f004 fd18 	bl	80084ba <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(irqRX0, 5, 0);
 8003a8a:	f997 3092 	ldrsb.w	r3, [r7, #146]	; 0x92
 8003a8e:	2200      	movs	r2, #0
 8003a90:	2105      	movs	r1, #5
 8003a92:	4618      	mov	r0, r3
 8003a94:	f004 fd11 	bl	80084ba <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(irqRX1, 5, 0);
 8003a98:	f997 3091 	ldrsb.w	r3, [r7, #145]	; 0x91
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2105      	movs	r1, #5
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f004 fd0a 	bl	80084ba <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(irqSCE, 5, 0);
 8003aa6:	f997 3090 	ldrsb.w	r3, [r7, #144]	; 0x90
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2105      	movs	r1, #5
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f004 fd03 	bl	80084ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqTX);
 8003ab4:	f997 3093 	ldrsb.w	r3, [r7, #147]	; 0x93
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f004 fd1a 	bl	80084f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(irqRX0);
 8003abe:	f997 3092 	ldrsb.w	r3, [r7, #146]	; 0x92
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f004 fd15 	bl	80084f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(irqRX1);
 8003ac8:	f997 3091 	ldrsb.w	r3, [r7, #145]	; 0x91
 8003acc:	4618      	mov	r0, r3
 8003ace:	f004 fd10 	bl	80084f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(irqSCE);
 8003ad2:	f997 3090 	ldrsb.w	r3, [r7, #144]	; 0x90
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f004 fd0b 	bl	80084f2 <HAL_NVIC_EnableIRQ>
}
 8003adc:	bf00      	nop
 8003ade:	3798      	adds	r7, #152	; 0x98
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	0800c524 	.word	0x0800c524
 8003ae8:	40006c00 	.word	0x40006c00
 8003aec:	40006400 	.word	0x40006400
 8003af0:	40006800 	.word	0x40006800
 8003af4:	0800c50c 	.word	0x0800c50c
 8003af8:	2002f214 	.word	0x2002f214

08003afc <_platform_canFilter>:
 * @param filtersLen The number of filters. Must be less than
 * `CMR_CAN_FILTERBANKS`.
 */
void _platform_canFilter(
    cmr_can_t *can, const cmr_canFilter_t *filters, size_t filtersLen)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b094      	sub	sp, #80	; 0x50
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
    if (filtersLen >= CMR_CAN_FILTERBANKS)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b0d      	cmp	r3, #13
 8003b0c:	d902      	bls.n	8003b14 <_platform_canFilter+0x18>
    {
        cmr_panic("Too many filter banks!");
 8003b0e:	4830      	ldr	r0, [pc, #192]	; (8003bd0 <_platform_canFilter+0xd4>)
 8003b10:	f000 ff33 	bl	800497a <cmr_panic>
    }

    CAN_TypeDef *instance = can->handle.Instance;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	647b      	str	r3, [r7, #68]	; 0x44

    for (size_t i = 0; i < filtersLen; i++)
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b1e:	e04e      	b.n	8003bbe <_platform_canFilter+0xc2>
    {
        const cmr_canFilter_t *filter = filters + i;
 8003b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	4413      	add	r3, r2
 8003b28:	643b      	str	r3, [r7, #64]	; 0x40

        uint32_t bank = i;
 8003b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b2c:	64bb      	str	r3, [r7, #72]	; 0x48
        if (instance == CAN2) {
 8003b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b30:	4a28      	ldr	r2, [pc, #160]	; (8003bd4 <_platform_canFilter+0xd8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d102      	bne.n	8003b3c <_platform_canFilter+0x40>
            // CAN2 uses banks 14-27.
            bank += CMR_CAN_FILTERBANKS;
 8003b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b38:	330e      	adds	r3, #14
 8003b3a:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        uint32_t filterMode = filter->isMask
 8003b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b3e:	781b      	ldrb	r3, [r3, #0]
            ? CAN_FILTERMODE_IDMASK
            : CAN_FILTERMODE_IDLIST;
 8003b40:	f083 0301 	eor.w	r3, r3, #1
 8003b44:	b2db      	uxtb	r3, r3
        uint32_t filterMode = filter->isMask
 8003b46:	63fb      	str	r3, [r7, #60]	; 0x3c

        // In 16 bit ID list mode, FilterIdHigh, FilterIdLow, FilterMaskIdHigh,
        // and FilterMaskIdLow all serve as a whitelist of left-aligned 11-bit
        // CAN IDs.
        // See RM0430 32.7.4 Fig. 387.
        const uint16_t CMR_CAN_ID_FILTER_SHIFT = 5;
 8003b48:	2305      	movs	r3, #5
 8003b4a:	877b      	strh	r3, [r7, #58]	; 0x3a
        CAN_FilterTypeDef config = {
            .FilterIdHigh           = filter->ids[0] << CMR_CAN_ID_FILTER_SHIFT,
 8003b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b4e:	891b      	ldrh	r3, [r3, #8]
 8003b50:	461a      	mov	r2, r3
 8003b52:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
        CAN_FilterTypeDef config = {
 8003b58:	613b      	str	r3, [r7, #16]
            .FilterIdLow            = filter->ids[1] << CMR_CAN_ID_FILTER_SHIFT,
 8003b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b5c:	895b      	ldrh	r3, [r3, #10]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
        CAN_FilterTypeDef config = {
 8003b66:	617b      	str	r3, [r7, #20]
            .FilterMaskIdHigh       = filter->ids[2] << CMR_CAN_ID_FILTER_SHIFT,
 8003b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b6a:	899b      	ldrh	r3, [r3, #12]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
        CAN_FilterTypeDef config = {
 8003b74:	61bb      	str	r3, [r7, #24]
            .FilterMaskIdLow        = filter->ids[3] << CMR_CAN_ID_FILTER_SHIFT,
 8003b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b78:	89db      	ldrh	r3, [r3, #14]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
        CAN_FilterTypeDef config = {
 8003b82:	61fb      	str	r3, [r7, #28]
            .FilterFIFOAssignment   = filter->rxFIFO,
 8003b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b86:	685b      	ldr	r3, [r3, #4]
        CAN_FilterTypeDef config = {
 8003b88:	623b      	str	r3, [r7, #32]
 8003b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b92:	2300      	movs	r3, #0
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b96:	2301      	movs	r3, #1
 8003b98:	633b      	str	r3, [r7, #48]	; 0x30
 8003b9a:	230e      	movs	r3, #14
 8003b9c:	637b      	str	r3, [r7, #52]	; 0x34
            .FilterScale            = CAN_FILTERSCALE_16BIT,
            .FilterActivation       = ENABLE,
            .SlaveStartFilterBank   = CMR_CAN_FILTERBANKS
        };

        if (HAL_CAN_ConfigFilter(&can->handle, &config) != HAL_OK)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f107 0210 	add.w	r2, r7, #16
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f003 fe88 	bl	80078bc <HAL_CAN_ConfigFilter>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <_platform_canFilter+0xbc>
        {
            cmr_panic("HAL_CAN_ConfigFilter() failed!");
 8003bb2:	4809      	ldr	r0, [pc, #36]	; (8003bd8 <_platform_canFilter+0xdc>)
 8003bb4:	f000 fee1 	bl	800497a <cmr_panic>
    for (size_t i = 0; i < filtersLen; i++)
 8003bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bba:	3301      	adds	r3, #1
 8003bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d3ac      	bcc.n	8003b20 <_platform_canFilter+0x24>
        }
    }
}
 8003bc6:	bf00      	nop
 8003bc8:	bf00      	nop
 8003bca:	3750      	adds	r7, #80	; 0x50
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	0800c570 	.word	0x0800c570
 8003bd4:	40006800 	.word	0x40006800
 8003bd8:	0800c588 	.word	0x0800c588

08003bdc <_platform_rccSystemClockEnable>:
 *
 * @note Generated by STM32Cube. Sets System Clock to 96 MHz, with only APB1
 * Peripheral Clocks at 48 MHz (APB1 Timer Clocks are still 96 MHz).
 */
void _platform_rccSystemClockEnable(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b094      	sub	sp, #80	; 0x50
 8003be0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003be2:	f107 031c 	add.w	r3, r7, #28
 8003be6:	2234      	movs	r2, #52	; 0x34
 8003be8:	2100      	movs	r1, #0
 8003bea:	4618      	mov	r0, r3
 8003bec:	f008 fb20 	bl	800c230 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bf0:	f107 0308 	add.w	r3, r7, #8
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	605a      	str	r2, [r3, #4]
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	60da      	str	r2, [r3, #12]
 8003bfe:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c00:	2300      	movs	r3, #0
 8003c02:	607b      	str	r3, [r7, #4]
 8003c04:	4b29      	ldr	r3, [pc, #164]	; (8003cac <_platform_rccSystemClockEnable+0xd0>)
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	4a28      	ldr	r2, [pc, #160]	; (8003cac <_platform_rccSystemClockEnable+0xd0>)
 8003c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8003c10:	4b26      	ldr	r3, [pc, #152]	; (8003cac <_platform_rccSystemClockEnable+0xd0>)
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c18:	607b      	str	r3, [r7, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	4b23      	ldr	r3, [pc, #140]	; (8003cb0 <_platform_rccSystemClockEnable+0xd4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a22      	ldr	r2, [pc, #136]	; (8003cb0 <_platform_rccSystemClockEnable+0xd4>)
 8003c26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	4b20      	ldr	r3, [pc, #128]	; (8003cb0 <_platform_rccSystemClockEnable+0xd4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c34:	603b      	str	r3, [r7, #0]
 8003c36:	683b      	ldr	r3, [r7, #0]

    // Initializes the CPU, AHB and APB busses clocks
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c40:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c42:	2302      	movs	r3, #2
 8003c44:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c4a:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 25;
 8003c4c:	2319      	movs	r3, #25
 8003c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 192;
 8003c50:	23c0      	movs	r3, #192	; 0xc0
 8003c52:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c54:	2302      	movs	r3, #2
 8003c56:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c60:	f107 031c 	add.w	r3, r7, #28
 8003c64:	4618      	mov	r0, r3
 8003c66:	f007 fc05 	bl	800b474 <HAL_RCC_OscConfig>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <_platform_rccSystemClockEnable+0x9a>
    {
        cmr_panic("HAL_RCC_OscConfig() failed!");
 8003c70:	4810      	ldr	r0, [pc, #64]	; (8003cb4 <_platform_rccSystemClockEnable+0xd8>)
 8003c72:	f000 fe82 	bl	800497a <cmr_panic>
    }

    // Initializes the CPU, AHB and APB busses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003c76:	230f      	movs	r3, #15
 8003c78:	60bb      	str	r3, [r7, #8]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c86:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003c8c:	f107 0308 	add.w	r3, r7, #8
 8003c90:	2103      	movs	r1, #3
 8003c92:	4618      	mov	r0, r3
 8003c94:	f007 fa26 	bl	800b0e4 <HAL_RCC_ClockConfig>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <_platform_rccSystemClockEnable+0xc8>
    {
        cmr_panic("HAL_RCC_ClockConfig() failed!");
 8003c9e:	4806      	ldr	r0, [pc, #24]	; (8003cb8 <_platform_rccSystemClockEnable+0xdc>)
 8003ca0:	f000 fe6b 	bl	800497a <cmr_panic>
    }
}
 8003ca4:	bf00      	nop
 8003ca6:	3750      	adds	r7, #80	; 0x50
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	40007000 	.word	0x40007000
 8003cb4:	0800c5a8 	.word	0x0800c5a8
 8003cb8:	0800c5c4 	.word	0x0800c5c4

08003cbc <_platform_rccGPIOClockEnable>:
 * @brief Enables the specified GPIO port's clock.
 *
 * @param port The GPIO port.
 */
void _platform_rccGPIOClockEnable(GPIO_TypeDef *port)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b08b      	sub	sp, #44	; 0x2c
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
    switch ((uintptr_t)port)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a57      	ldr	r2, [pc, #348]	; (8003e24 <_platform_rccGPIOClockEnable+0x168>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	f000 8096 	beq.w	8003dfa <_platform_rccGPIOClockEnable+0x13e>
 8003cce:	4a55      	ldr	r2, [pc, #340]	; (8003e24 <_platform_rccGPIOClockEnable+0x168>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	f200 80a1 	bhi.w	8003e18 <_platform_rccGPIOClockEnable+0x15c>
 8003cd6:	4a54      	ldr	r2, [pc, #336]	; (8003e28 <_platform_rccGPIOClockEnable+0x16c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d07f      	beq.n	8003ddc <_platform_rccGPIOClockEnable+0x120>
 8003cdc:	4a52      	ldr	r2, [pc, #328]	; (8003e28 <_platform_rccGPIOClockEnable+0x16c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	f200 809a 	bhi.w	8003e18 <_platform_rccGPIOClockEnable+0x15c>
 8003ce4:	4a51      	ldr	r2, [pc, #324]	; (8003e2c <_platform_rccGPIOClockEnable+0x170>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d069      	beq.n	8003dbe <_platform_rccGPIOClockEnable+0x102>
 8003cea:	4a50      	ldr	r2, [pc, #320]	; (8003e2c <_platform_rccGPIOClockEnable+0x170>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	f200 8093 	bhi.w	8003e18 <_platform_rccGPIOClockEnable+0x15c>
 8003cf2:	4a4f      	ldr	r2, [pc, #316]	; (8003e30 <_platform_rccGPIOClockEnable+0x174>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d053      	beq.n	8003da0 <_platform_rccGPIOClockEnable+0xe4>
 8003cf8:	4a4d      	ldr	r2, [pc, #308]	; (8003e30 <_platform_rccGPIOClockEnable+0x174>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	f200 808c 	bhi.w	8003e18 <_platform_rccGPIOClockEnable+0x15c>
 8003d00:	4a4c      	ldr	r2, [pc, #304]	; (8003e34 <_platform_rccGPIOClockEnable+0x178>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d03d      	beq.n	8003d82 <_platform_rccGPIOClockEnable+0xc6>
 8003d06:	4a4b      	ldr	r2, [pc, #300]	; (8003e34 <_platform_rccGPIOClockEnable+0x178>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	f200 8085 	bhi.w	8003e18 <_platform_rccGPIOClockEnable+0x15c>
 8003d0e:	4a4a      	ldr	r2, [pc, #296]	; (8003e38 <_platform_rccGPIOClockEnable+0x17c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d027      	beq.n	8003d64 <_platform_rccGPIOClockEnable+0xa8>
 8003d14:	4a48      	ldr	r2, [pc, #288]	; (8003e38 <_platform_rccGPIOClockEnable+0x17c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d87e      	bhi.n	8003e18 <_platform_rccGPIOClockEnable+0x15c>
 8003d1a:	4a48      	ldr	r2, [pc, #288]	; (8003e3c <_platform_rccGPIOClockEnable+0x180>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d003      	beq.n	8003d28 <_platform_rccGPIOClockEnable+0x6c>
 8003d20:	4a47      	ldr	r2, [pc, #284]	; (8003e40 <_platform_rccGPIOClockEnable+0x184>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00f      	beq.n	8003d46 <_platform_rccGPIOClockEnable+0x8a>
        break;
    case GPIOH_BASE:
        __HAL_RCC_GPIOH_CLK_ENABLE();
        break;
    }
}
 8003d26:	e077      	b.n	8003e18 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d28:	2300      	movs	r3, #0
 8003d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d2c:	4b45      	ldr	r3, [pc, #276]	; (8003e44 <_platform_rccGPIOClockEnable+0x188>)
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d30:	4a44      	ldr	r2, [pc, #272]	; (8003e44 <_platform_rccGPIOClockEnable+0x188>)
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	6313      	str	r3, [r2, #48]	; 0x30
 8003d38:	4b42      	ldr	r3, [pc, #264]	; (8003e44 <_platform_rccGPIOClockEnable+0x188>)
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        break;
 8003d44:	e068      	b.n	8003e18 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	623b      	str	r3, [r7, #32]
 8003d4a:	4b3e      	ldr	r3, [pc, #248]	; (8003e44 <_platform_rccGPIOClockEnable+0x188>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	4a3d      	ldr	r2, [pc, #244]	; (8003e44 <_platform_rccGPIOClockEnable+0x188>)
 8003d50:	f043 0302 	orr.w	r3, r3, #2
 8003d54:	6313      	str	r3, [r2, #48]	; 0x30
 8003d56:	4b3b      	ldr	r3, [pc, #236]	; (8003e44 <_platform_rccGPIOClockEnable+0x188>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	623b      	str	r3, [r7, #32]
 8003d60:	6a3b      	ldr	r3, [r7, #32]
        break;
 8003d62:	e059      	b.n	8003e18 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d64:	2300      	movs	r3, #0
 8003d66:	61fb      	str	r3, [r7, #28]
 8003d68:	4b36      	ldr	r3, [pc, #216]	; (8003e44 <_platform_rccGPIOClockEnable+0x188>)
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	4a35      	ldr	r2, [pc, #212]	; (8003e44 <_platform_rccGPIOClockEnable+0x188>)
 8003d6e:	f043 0304 	orr.w	r3, r3, #4
 8003d72:	6313      	str	r3, [r2, #48]	; 0x30
 8003d74:	4b33      	ldr	r3, [pc, #204]	; (8003e44 <_platform_rccGPIOClockEnable+0x188>)
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	69fb      	ldr	r3, [r7, #28]
        break;
 8003d80:	e04a      	b.n	8003e18 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d82:	2300      	movs	r3, #0
 8003d84:	61bb      	str	r3, [r7, #24]
 8003d86:	4b2f      	ldr	r3, [pc, #188]	; (8003e44 <_platform_rccGPIOClockEnable+0x188>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	4a2e      	ldr	r2, [pc, #184]	; (8003e44 <_platform_rccGPIOClockEnable+0x188>)
 8003d8c:	f043 0308 	orr.w	r3, r3, #8
 8003d90:	6313      	str	r3, [r2, #48]	; 0x30
 8003d92:	4b2c      	ldr	r3, [pc, #176]	; (8003e44 <_platform_rccGPIOClockEnable+0x188>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	61bb      	str	r3, [r7, #24]
 8003d9c:	69bb      	ldr	r3, [r7, #24]
        break;
 8003d9e:	e03b      	b.n	8003e18 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	4b27      	ldr	r3, [pc, #156]	; (8003e44 <_platform_rccGPIOClockEnable+0x188>)
 8003da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da8:	4a26      	ldr	r2, [pc, #152]	; (8003e44 <_platform_rccGPIOClockEnable+0x188>)
 8003daa:	f043 0310 	orr.w	r3, r3, #16
 8003dae:	6313      	str	r3, [r2, #48]	; 0x30
 8003db0:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <_platform_rccGPIOClockEnable+0x188>)
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	f003 0310 	and.w	r3, r3, #16
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	697b      	ldr	r3, [r7, #20]
        break;
 8003dbc:	e02c      	b.n	8003e18 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOF_CLK_ENABLE();
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	4b20      	ldr	r3, [pc, #128]	; (8003e44 <_platform_rccGPIOClockEnable+0x188>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	4a1f      	ldr	r2, [pc, #124]	; (8003e44 <_platform_rccGPIOClockEnable+0x188>)
 8003dc8:	f043 0320 	orr.w	r3, r3, #32
 8003dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dce:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <_platform_rccGPIOClockEnable+0x188>)
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	693b      	ldr	r3, [r7, #16]
        break;
 8003dda:	e01d      	b.n	8003e18 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	4b18      	ldr	r3, [pc, #96]	; (8003e44 <_platform_rccGPIOClockEnable+0x188>)
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	4a17      	ldr	r2, [pc, #92]	; (8003e44 <_platform_rccGPIOClockEnable+0x188>)
 8003de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dea:	6313      	str	r3, [r2, #48]	; 0x30
 8003dec:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <_platform_rccGPIOClockEnable+0x188>)
 8003dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	68fb      	ldr	r3, [r7, #12]
        break;
 8003df8:	e00e      	b.n	8003e18 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOH_CLK_ENABLE();
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60bb      	str	r3, [r7, #8]
 8003dfe:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <_platform_rccGPIOClockEnable+0x188>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	4a10      	ldr	r2, [pc, #64]	; (8003e44 <_platform_rccGPIOClockEnable+0x188>)
 8003e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e08:	6313      	str	r3, [r2, #48]	; 0x30
 8003e0a:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <_platform_rccGPIOClockEnable+0x188>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e12:	60bb      	str	r3, [r7, #8]
 8003e14:	68bb      	ldr	r3, [r7, #8]
        break;
 8003e16:	bf00      	nop
}
 8003e18:	bf00      	nop
 8003e1a:	372c      	adds	r7, #44	; 0x2c
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	40021c00 	.word	0x40021c00
 8003e28:	40021800 	.word	0x40021800
 8003e2c:	40021400 	.word	0x40021400
 8003e30:	40021000 	.word	0x40021000
 8003e34:	40020c00 	.word	0x40020c00
 8003e38:	40020800 	.word	0x40020800
 8003e3c:	40020000 	.word	0x40020000
 8003e40:	40020400 	.word	0x40020400
 8003e44:	40023800 	.word	0x40023800

08003e48 <_platform_adcChannelConfig>:
#endif /* HAL_GPIO_MODULE_ENABLED */

#ifdef HAL_ADC_MODULE_ENABLED

ADC_ChannelConfTypeDef _platform_adcChannelConfig(const cmr_adcChannel_t *channel, uint32_t rank)
{
 8003e48:	b490      	push	{r4, r7}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
    ADC_ChannelConfTypeDef channelConfig = {
        .Channel = channel->channel,
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	681b      	ldr	r3, [r3, #0]
    ADC_ChannelConfTypeDef channelConfig = {
 8003e58:	613b      	str	r3, [r7, #16]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	617b      	str	r3, [r7, #20]
        .Rank = rank, // HAL needs Rank to be from 1 to 16
        .SamplingTime = channel->samplingTime,
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	68db      	ldr	r3, [r3, #12]
    ADC_ChannelConfTypeDef channelConfig = {
 8003e62:	61bb      	str	r3, [r7, #24]
 8003e64:	2300      	movs	r3, #0
 8003e66:	61fb      	str	r3, [r7, #28]
        .Offset = 0 // reserved, set to 0
    };

    return channelConfig;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	461c      	mov	r4, r3
 8003e6c:	f107 0310 	add.w	r3, r7, #16
 8003e70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	3720      	adds	r7, #32
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc90      	pop	{r4, r7}
 8003e7e:	4770      	bx	lr

08003e80 <_platform_adcPinConfig>:

GPIO_InitTypeDef _platform_adcPinConfig(const cmr_adcChannel_t *channel)
{
 8003e80:	b4b0      	push	{r4, r5, r7}
 8003e82:	b089      	sub	sp, #36	; 0x24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
    GPIO_InitTypeDef pinConfig = {
        .Pin = channel->pin,
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	891b      	ldrh	r3, [r3, #8]
    GPIO_InitTypeDef pinConfig = {
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	2303      	movs	r3, #3
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61bb      	str	r3, [r7, #24]
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61fb      	str	r3, [r7, #28]
        .Mode = GPIO_MODE_ANALOG,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_LOW,
        .Alternate = 0};

    return pinConfig;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	461d      	mov	r5, r3
 8003ea4:	f107 040c 	add.w	r4, r7, #12
 8003ea8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	602b      	str	r3, [r5, #0]
}
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	3724      	adds	r7, #36	; 0x24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bcb0      	pop	{r4, r5, r7}
 8003eb8:	4770      	bx	lr
	...

08003ebc <_platform_rccADCClockEnable>:
 * @brief Enables the specified ADC's clock.
 *
 * @param instance The HAL ADC instance.
 */
void _platform_rccADCClockEnable(ADC_TypeDef *instance)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
    switch ((uintptr_t)instance)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a0c      	ldr	r2, [pc, #48]	; (8003ef8 <_platform_rccADCClockEnable+0x3c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d10e      	bne.n	8003eea <_platform_rccADCClockEnable+0x2e>
    {
    case ADC1_BASE:
        __HAL_RCC_ADC1_CLK_ENABLE();
 8003ecc:	2300      	movs	r3, #0
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <_platform_rccADCClockEnable+0x40>)
 8003ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed4:	4a09      	ldr	r2, [pc, #36]	; (8003efc <_platform_rccADCClockEnable+0x40>)
 8003ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eda:	6453      	str	r3, [r2, #68]	; 0x44
 8003edc:	4b07      	ldr	r3, [pc, #28]	; (8003efc <_platform_rccADCClockEnable+0x40>)
 8003ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
        break;
 8003ee8:	bf00      	nop
    }
}
 8003eea:	bf00      	nop
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40012000 	.word	0x40012000
 8003efc:	40023800 	.word	0x40023800

08003f00 <_platform_adcInit>:
 * @brief Platform-specifc adc initialization
 *
 *  @param adc The ADC to initialize.
 */
void _platform_adcInit(cmr_adc_t *adc, ADC_TypeDef *instance, cmr_adcChannel_t *channels, const size_t channelsLen)
{
 8003f00:	b590      	push	{r4, r7, lr}
 8003f02:	f5ad 4da6 	sub.w	sp, sp, #21248	; 0x5300
 8003f06:	b091      	sub	sp, #68	; 0x44
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	f507 7450 	add.w	r4, r7, #832	; 0x340
 8003f0e:	f5a4 744d 	sub.w	r4, r4, #820	; 0x334
 8003f12:	6020      	str	r0, [r4, #0]
 8003f14:	f507 7050 	add.w	r0, r7, #832	; 0x340
 8003f18:	f5a0 704e 	sub.w	r0, r0, #824	; 0x338
 8003f1c:	6001      	str	r1, [r0, #0]
 8003f1e:	f507 7150 	add.w	r1, r7, #832	; 0x340
 8003f22:	f5a1 714f 	sub.w	r1, r1, #828	; 0x33c
 8003f26:	600a      	str	r2, [r1, #0]
 8003f28:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8003f2c:	f5a2 7250 	sub.w	r2, r2, #832	; 0x340
 8003f30:	6013      	str	r3, [r2, #0]
    *adc = (cmr_adc_t){
 8003f32:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003f36:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f245 3330 	movw	r3, #21296	; 0x5330
 8003f42:	461a      	mov	r2, r3
 8003f44:	2100      	movs	r1, #0
 8003f46:	f008 f973 	bl	800c230 <memset>
 8003f4a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003f4e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8003f58:	f5a2 724e 	sub.w	r2, r2, #824	; 0x338
 8003f5c:	6812      	ldr	r2, [r2, #0]
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003f64:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003f74:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	611a      	str	r2, [r3, #16]
 8003f7e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003f82:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	615a      	str	r2, [r3, #20]
 8003f8c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003f90:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8003f9a:	f5a2 7250 	sub.w	r2, r2, #832	; 0x340
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	61da      	str	r2, [r3, #28]
 8003fa2:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003fa6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2020 	strb.w	r2, [r3, #32]
 8003fb2:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003fb6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	625a      	str	r2, [r3, #36]	; 0x24
 8003fc0:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003fc4:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a0f      	ldr	r2, [pc, #60]	; (8004008 <_platform_adcInit+0x108>)
 8003fcc:	629a      	str	r2, [r3, #40]	; 0x28
 8003fce:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003fd2:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8003fdc:	f5a2 724f 	sub.w	r2, r2, #828	; 0x33c
 8003fe0:	6812      	ldr	r2, [r2, #0]
 8003fe2:	649a      	str	r2, [r3, #72]	; 0x48
 8003fe4:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003fe8:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8003ff2:	f5a2 7250 	sub.w	r2, r2, #832	; 0x340
 8003ff6:	6812      	ldr	r2, [r2, #0]
 8003ff8:	64da      	str	r2, [r3, #76]	; 0x4c
                .NbrOfConversion = channelsLen,
                .DMAContinuousRequests = DISABLE,
                .EOCSelection = ADC_EOC_SINGLE_CONV}},
        .channels = channels,
        .channelsLen = channelsLen};
}
 8003ffa:	bf00      	nop
 8003ffc:	f507 47a6 	add.w	r7, r7, #21248	; 0x5300
 8004000:	3744      	adds	r7, #68	; 0x44
 8004002:	46bd      	mov	sp, r7
 8004004:	bd90      	pop	{r4, r7, pc}
 8004006:	bf00      	nop
 8004008:	0f000001 	.word	0x0f000001

0800400c <_platform_rccCANClockEnable>:
 * @brief Enables the specified CAN interface's clock.
 *
 * @param instance The HAL CAN instance.
 */
void _platform_rccCANClockEnable(CAN_TypeDef *instance)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
    switch ((uintptr_t) instance) {
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a27      	ldr	r2, [pc, #156]	; (80040b4 <_platform_rccCANClockEnable+0xa8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d035      	beq.n	8004088 <_platform_rccCANClockEnable+0x7c>
 800401c:	4a25      	ldr	r2, [pc, #148]	; (80040b4 <_platform_rccCANClockEnable+0xa8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d841      	bhi.n	80040a6 <_platform_rccCANClockEnable+0x9a>
 8004022:	4a25      	ldr	r2, [pc, #148]	; (80040b8 <_platform_rccCANClockEnable+0xac>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d003      	beq.n	8004030 <_platform_rccCANClockEnable+0x24>
 8004028:	4a24      	ldr	r2, [pc, #144]	; (80040bc <_platform_rccCANClockEnable+0xb0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00f      	beq.n	800404e <_platform_rccCANClockEnable+0x42>
            break;
        case CAN3_BASE:
            __HAL_RCC_CAN3_CLK_ENABLE();
            break;
    }
}
 800402e:	e03a      	b.n	80040a6 <_platform_rccCANClockEnable+0x9a>
            __HAL_RCC_CAN1_CLK_ENABLE();
 8004030:	2300      	movs	r3, #0
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	4b22      	ldr	r3, [pc, #136]	; (80040c0 <_platform_rccCANClockEnable+0xb4>)
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	4a21      	ldr	r2, [pc, #132]	; (80040c0 <_platform_rccCANClockEnable+0xb4>)
 800403a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800403e:	6413      	str	r3, [r2, #64]	; 0x40
 8004040:	4b1f      	ldr	r3, [pc, #124]	; (80040c0 <_platform_rccCANClockEnable+0xb4>)
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	697b      	ldr	r3, [r7, #20]
            break;
 800404c:	e02b      	b.n	80040a6 <_platform_rccCANClockEnable+0x9a>
            __HAL_RCC_CAN2_CLK_ENABLE();
 800404e:	2300      	movs	r3, #0
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	4b1b      	ldr	r3, [pc, #108]	; (80040c0 <_platform_rccCANClockEnable+0xb4>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	4a1a      	ldr	r2, [pc, #104]	; (80040c0 <_platform_rccCANClockEnable+0xb4>)
 8004058:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800405c:	6413      	str	r3, [r2, #64]	; 0x40
 800405e:	4b18      	ldr	r3, [pc, #96]	; (80040c0 <_platform_rccCANClockEnable+0xb4>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	693b      	ldr	r3, [r7, #16]
            __HAL_RCC_CAN1_CLK_ENABLE();    // CAN2 also needs CAN1 clock.
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	4b14      	ldr	r3, [pc, #80]	; (80040c0 <_platform_rccCANClockEnable+0xb4>)
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	4a13      	ldr	r2, [pc, #76]	; (80040c0 <_platform_rccCANClockEnable+0xb4>)
 8004074:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004078:	6413      	str	r3, [r2, #64]	; 0x40
 800407a:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <_platform_rccCANClockEnable+0xb4>)
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]
            break;
 8004086:	e00e      	b.n	80040a6 <_platform_rccCANClockEnable+0x9a>
            __HAL_RCC_CAN3_CLK_ENABLE();
 8004088:	2300      	movs	r3, #0
 800408a:	60bb      	str	r3, [r7, #8]
 800408c:	4b0c      	ldr	r3, [pc, #48]	; (80040c0 <_platform_rccCANClockEnable+0xb4>)
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	4a0b      	ldr	r2, [pc, #44]	; (80040c0 <_platform_rccCANClockEnable+0xb4>)
 8004092:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004096:	6413      	str	r3, [r2, #64]	; 0x40
 8004098:	4b09      	ldr	r3, [pc, #36]	; (80040c0 <_platform_rccCANClockEnable+0xb4>)
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040a0:	60bb      	str	r3, [r7, #8]
 80040a2:	68bb      	ldr	r3, [r7, #8]
            break;
 80040a4:	bf00      	nop
}
 80040a6:	bf00      	nop
 80040a8:	371c      	adds	r7, #28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40006c00 	.word	0x40006c00
 80040b8:	40006400 	.word	0x40006400
 80040bc:	40006800 	.word	0x40006800
 80040c0:	40023800 	.word	0x40023800

080040c4 <EXTI0_IRQHandler>:
 */
#define EXTI_IRQHandler(name, pins) \
    void EXTI##name##_IRQHandler(void) { \
        HAL_GPIO_EXTI_IRQHandler(pins); \
    }
EXTI_IRQHandler(0, GPIO_PIN_0)
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	2001      	movs	r0, #1
 80040ca:	f004 ffc1 	bl	8009050 <HAL_GPIO_EXTI_IRQHandler>
 80040ce:	bf00      	nop
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <EXTI1_IRQHandler>:
EXTI_IRQHandler(1, GPIO_PIN_1)
 80040d2:	b580      	push	{r7, lr}
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	2002      	movs	r0, #2
 80040d8:	f004 ffba 	bl	8009050 <HAL_GPIO_EXTI_IRQHandler>
 80040dc:	bf00      	nop
 80040de:	bd80      	pop	{r7, pc}

080040e0 <EXTI2_IRQHandler>:
EXTI_IRQHandler(2, GPIO_PIN_2)
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	2004      	movs	r0, #4
 80040e6:	f004 ffb3 	bl	8009050 <HAL_GPIO_EXTI_IRQHandler>
 80040ea:	bf00      	nop
 80040ec:	bd80      	pop	{r7, pc}

080040ee <EXTI3_IRQHandler>:
EXTI_IRQHandler(3, GPIO_PIN_3)
 80040ee:	b580      	push	{r7, lr}
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	2008      	movs	r0, #8
 80040f4:	f004 ffac 	bl	8009050 <HAL_GPIO_EXTI_IRQHandler>
 80040f8:	bf00      	nop
 80040fa:	bd80      	pop	{r7, pc}

080040fc <EXTI4_IRQHandler>:
EXTI_IRQHandler(4, GPIO_PIN_4)
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
 8004100:	2010      	movs	r0, #16
 8004102:	f004 ffa5 	bl	8009050 <HAL_GPIO_EXTI_IRQHandler>
 8004106:	bf00      	nop
 8004108:	bd80      	pop	{r7, pc}

0800410a <EXTI9_5_IRQHandler>:
EXTI_IRQHandler(
 800410a:	b580      	push	{r7, lr}
 800410c:	af00      	add	r7, sp, #0
 800410e:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 8004112:	f004 ff9d 	bl	8009050 <HAL_GPIO_EXTI_IRQHandler>
 8004116:	bf00      	nop
 8004118:	bd80      	pop	{r7, pc}

0800411a <EXTI15_10_IRQHandler>:
    9_5,
    GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_7 | GPIO_PIN_6 | GPIO_PIN_5
)
EXTI_IRQHandler(
 800411a:	b580      	push	{r7, lr}
 800411c:	af00      	add	r7, sp, #0
 800411e:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 8004122:	f004 ff95 	bl	8009050 <HAL_GPIO_EXTI_IRQHandler>
 8004126:	bf00      	nop
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <cmr_gpioPinInit>:
 * @brief Configures the specified GPIO pin(s).
 *
 * @param pinConfigs The pin configuration(s).
 * @param pinConfigsLen The number of pin configurations.
 */
void cmr_gpioPinInit(const cmr_gpioPinConfig_t *pinConfigs, const size_t pinConfigsLen) {
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
    cmr_gpioPinConfigs = pinConfigs;
 8004136:	4a16      	ldr	r2, [pc, #88]	; (8004190 <cmr_gpioPinInit+0x64>)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6013      	str	r3, [r2, #0]
    cmr_gpioPinConfigsLen = pinConfigsLen;
 800413c:	4a15      	ldr	r2, [pc, #84]	; (8004194 <cmr_gpioPinInit+0x68>)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	6013      	str	r3, [r2, #0]

    for (size_t i = 0; i < cmr_gpioPinConfigsLen; i++) {
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	e018      	b.n	800417a <cmr_gpioPinInit+0x4e>
        const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[i];
 8004148:	4b11      	ldr	r3, [pc, #68]	; (8004190 <cmr_gpioPinInit+0x64>)
 800414a:	6819      	ldr	r1, [r3, #0]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	4613      	mov	r3, r2
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	4413      	add	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	440b      	add	r3, r1
 8004158:	60bb      	str	r3, [r7, #8]
        cmr_rccGPIOClockEnable(pinConfig->port);
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fc17 	bl	8004992 <cmr_rccGPIOClockEnable>

        // The HAL GPIO driver doesn't actually declare the initialization
        // struct as `const`, but it doesn't modify it either.
        HAL_GPIO_Init(
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	681a      	ldr	r2, [r3, #0]
            pinConfig->port,
            (GPIO_InitTypeDef *) &pinConfig->init
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	3304      	adds	r3, #4
        HAL_GPIO_Init(
 800416c:	4619      	mov	r1, r3
 800416e:	4610      	mov	r0, r2
 8004170:	f004 fd8e 	bl	8008c90 <HAL_GPIO_Init>
    for (size_t i = 0; i < cmr_gpioPinConfigsLen; i++) {
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	3301      	adds	r3, #1
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	4b06      	ldr	r3, [pc, #24]	; (8004194 <cmr_gpioPinInit+0x68>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	429a      	cmp	r2, r3
 8004182:	d3e1      	bcc.n	8004148 <cmr_gpioPinInit+0x1c>
        );
    }
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	2002f220 	.word	0x2002f220
 8004194:	2002f224 	.word	0x2002f224

08004198 <cmr_gpioWrite>:
 * @brief Writes a value to an output GPIO pin.
 *
 * @param pin The pin to write to.
 * @param value The value to write (zero for off; non-zero for on).
 */
void cmr_gpioWrite(size_t pin, int value) {
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
    configASSERT(pin < cmr_gpioPinConfigsLen);
 80041a2:	4b18      	ldr	r3, [pc, #96]	; (8004204 <cmr_gpioWrite+0x6c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d303      	bcc.n	80041b4 <cmr_gpioWrite+0x1c>
 80041ac:	214f      	movs	r1, #79	; 0x4f
 80041ae:	4816      	ldr	r0, [pc, #88]	; (8004208 <cmr_gpioWrite+0x70>)
 80041b0:	f000 fbe3 	bl	800497a <cmr_panic>

    const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[pin];
 80041b4:	4b15      	ldr	r3, [pc, #84]	; (800420c <cmr_gpioWrite+0x74>)
 80041b6:	6819      	ldr	r1, [r3, #0]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	4613      	mov	r3, r2
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	4413      	add	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	440b      	add	r3, r1
 80041c4:	60fb      	str	r3, [r7, #12]
    configASSERT(
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d007      	beq.n	80041de <cmr_gpioWrite+0x46>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2b11      	cmp	r3, #17
 80041d4:	d003      	beq.n	80041de <cmr_gpioWrite+0x46>
 80041d6:	2152      	movs	r1, #82	; 0x52
 80041d8:	480d      	ldr	r0, [pc, #52]	; (8004210 <cmr_gpioWrite+0x78>)
 80041da:	f000 fbce 	bl	800497a <cmr_panic>
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_PP) ||
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_OD)
    );

    HAL_GPIO_WritePin(
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6818      	ldr	r0, [r3, #0]
        pinConfig->port, pinConfig->init.Pin,
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	685b      	ldr	r3, [r3, #4]
    HAL_GPIO_WritePin(
 80041e6:	b299      	uxth	r1, r3
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	bf14      	ite	ne
 80041ee:	2301      	movne	r3, #1
 80041f0:	2300      	moveq	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	461a      	mov	r2, r3
 80041f6:	f004 fef7 	bl	8008fe8 <HAL_GPIO_WritePin>
        value ? GPIO_PIN_SET : GPIO_PIN_RESET
    );
}
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	2002f224 	.word	0x2002f224
 8004208:	0800c62c 	.word	0x0800c62c
 800420c:	2002f220 	.word	0x2002f220
 8004210:	0800c680 	.word	0x0800c680

08004214 <cmr_gpioToggle>:
/**
 * @brief Toggles an output GPIO pin's value.
 *
 * @param pin The pin to toggle.
 */
void cmr_gpioToggle(size_t pin) {
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
    configASSERT(pin < cmr_gpioPinConfigsLen);
 800421c:	4b15      	ldr	r3, [pc, #84]	; (8004274 <cmr_gpioToggle+0x60>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	429a      	cmp	r2, r3
 8004224:	d303      	bcc.n	800422e <cmr_gpioToggle+0x1a>
 8004226:	2163      	movs	r1, #99	; 0x63
 8004228:	4813      	ldr	r0, [pc, #76]	; (8004278 <cmr_gpioToggle+0x64>)
 800422a:	f000 fba6 	bl	800497a <cmr_panic>

    const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[pin];
 800422e:	4b13      	ldr	r3, [pc, #76]	; (800427c <cmr_gpioToggle+0x68>)
 8004230:	6819      	ldr	r1, [r3, #0]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	4613      	mov	r3, r2
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	4413      	add	r3, r2
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	440b      	add	r3, r1
 800423e:	60fb      	str	r3, [r7, #12]
    configASSERT(
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d007      	beq.n	8004258 <cmr_gpioToggle+0x44>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b11      	cmp	r3, #17
 800424e:	d003      	beq.n	8004258 <cmr_gpioToggle+0x44>
 8004250:	2166      	movs	r1, #102	; 0x66
 8004252:	480b      	ldr	r0, [pc, #44]	; (8004280 <cmr_gpioToggle+0x6c>)
 8004254:	f000 fb91 	bl	800497a <cmr_panic>
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_PP) ||
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_OD)
    );

    HAL_GPIO_TogglePin(pinConfig->port, pinConfig->init.Pin);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	b29b      	uxth	r3, r3
 8004262:	4619      	mov	r1, r3
 8004264:	4610      	mov	r0, r2
 8004266:	f004 fed8 	bl	800901a <HAL_GPIO_TogglePin>
}
 800426a:	bf00      	nop
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	2002f224 	.word	0x2002f224
 8004278:	0800c62c 	.word	0x0800c62c
 800427c:	2002f220 	.word	0x2002f220
 8004280:	0800c680 	.word	0x0800c680

08004284 <cmr_gpioRead>:
/**
 * @brief Reads a value from a GPIO pin.
 *
 * @return 0 if the pin was off; otherwise 1.
 */
int cmr_gpioRead(size_t pin) {
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
    configASSERT(pin < cmr_gpioPinConfigsLen);
 800428c:	4b13      	ldr	r3, [pc, #76]	; (80042dc <cmr_gpioRead+0x58>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	429a      	cmp	r2, r3
 8004294:	d303      	bcc.n	800429e <cmr_gpioRead+0x1a>
 8004296:	2174      	movs	r1, #116	; 0x74
 8004298:	4811      	ldr	r0, [pc, #68]	; (80042e0 <cmr_gpioRead+0x5c>)
 800429a:	f000 fb6e 	bl	800497a <cmr_panic>

    const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[pin];
 800429e:	4b11      	ldr	r3, [pc, #68]	; (80042e4 <cmr_gpioRead+0x60>)
 80042a0:	6819      	ldr	r1, [r3, #0]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	4413      	add	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	440b      	add	r3, r1
 80042ae:	60fb      	str	r3, [r7, #12]
    GPIO_PinState state = HAL_GPIO_ReadPin(
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681a      	ldr	r2, [r3, #0]
        pinConfig->port, pinConfig->init.Pin
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	685b      	ldr	r3, [r3, #4]
    GPIO_PinState state = HAL_GPIO_ReadPin(
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	4619      	mov	r1, r3
 80042bc:	4610      	mov	r0, r2
 80042be:	f004 fe7b 	bl	8008fb8 <HAL_GPIO_ReadPin>
 80042c2:	4603      	mov	r3, r0
 80042c4:	72fb      	strb	r3, [r7, #11]
    );
    if (state == GPIO_PIN_RESET) {
 80042c6:	7afb      	ldrb	r3, [r7, #11]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <cmr_gpioRead+0x4c>
        return 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	e000      	b.n	80042d2 <cmr_gpioRead+0x4e>
    }

    return 1;
 80042d0:	2301      	movs	r3, #1
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	2002f224 	.word	0x2002f224
 80042e0:	0800c62c 	.word	0x0800c62c
 80042e4:	2002f220 	.word	0x2002f220

080042e8 <I2C1_EV_IRQHandler>:
static cmr_i2cDevice_t cmr_i2cDevices[2];

/**
 * @brief I2C interrupt handler.
 */
void I2C1_EV_IRQHandler(void) {
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
    HAL_I2C_EV_IRQHandler(cmr_i2cDevices[0].handle);
 80042ec:	4b03      	ldr	r3, [pc, #12]	; (80042fc <I2C1_EV_IRQHandler+0x14>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f005 fa3b 	bl	800976c <HAL_I2C_EV_IRQHandler>
}
 80042f6:	bf00      	nop
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	2002f228 	.word	0x2002f228

08004300 <I2C2_EV_IRQHandler>:

/**
 * @brief I2C interrupt handler.
 */
void I2C2_EV_IRQHandler(void) {
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
    HAL_I2C_EV_IRQHandler(cmr_i2cDevices[1].handle);
 8004304:	4b03      	ldr	r3, [pc, #12]	; (8004314 <I2C2_EV_IRQHandler+0x14>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4618      	mov	r0, r3
 800430a:	f005 fa2f 	bl	800976c <HAL_I2C_EV_IRQHandler>
}
 800430e:	bf00      	nop
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	2002f228 	.word	0x2002f228

08004318 <I2C1_ER_IRQHandler>:
/**
 * @brief I2C interrupt handler.
 */
void I2C1_ER_IRQHandler(void) {
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
    HAL_I2C_ER_IRQHandler(cmr_i2cDevices[0].handle);
 800431c:	4b03      	ldr	r3, [pc, #12]	; (800432c <I2C1_ER_IRQHandler+0x14>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f005 fb89 	bl	8009a38 <HAL_I2C_ER_IRQHandler>
}
 8004326:	bf00      	nop
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	2002f228 	.word	0x2002f228

08004330 <I2C2_ER_IRQHandler>:

/**
 * @brief I2C interrupt handler.
 */
void I2C2_ER_IRQHandler(void) {
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
    HAL_I2C_ER_IRQHandler(cmr_i2cDevices[1].handle);
 8004334:	4b03      	ldr	r3, [pc, #12]	; (8004344 <I2C2_ER_IRQHandler+0x14>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	4618      	mov	r0, r3
 800433a:	f005 fb7d 	bl	8009a38 <HAL_I2C_ER_IRQHandler>
}
 800433e:	bf00      	nop
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	2002f228 	.word	0x2002f228

08004348 <cmr_i2cDoneCallback>:
 *
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL I2C handle.
 */
static void cmr_i2cDoneCallback(I2C_HandleTypeDef *handle) {
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
    char *addr = (void *) handle;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	617b      	str	r3, [r7, #20]
    cmr_i2c_t *i2c = (void *) (addr - offsetof(cmr_i2c_t, handle));
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	613b      	str	r3, [r7, #16]

    // Indicate completion.
    BaseType_t higherWoken;
    if (xSemaphoreGiveFromISR(i2c->doneSem, &higherWoken) != pdTRUE) {
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800435e:	f107 020c 	add.w	r2, r7, #12
 8004362:	4611      	mov	r1, r2
 8004364:	4618      	mov	r0, r3
 8004366:	f001 fa51 	bl	800580c <xQueueGiveFromISR>
 800436a:	4603      	mov	r3, r0
 800436c:	2b01      	cmp	r3, #1
 800436e:	d002      	beq.n	8004376 <cmr_i2cDoneCallback+0x2e>
        cmr_panic("I2C done semaphore released more than once!");
 8004370:	4808      	ldr	r0, [pc, #32]	; (8004394 <cmr_i2cDoneCallback+0x4c>)
 8004372:	f000 fb02 	bl	800497a <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d007      	beq.n	800438c <cmr_i2cDoneCallback+0x44>
 800437c:	4b06      	ldr	r3, [pc, #24]	; (8004398 <cmr_i2cDoneCallback+0x50>)
 800437e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	f3bf 8f6f 	isb	sy
}
 800438c:	bf00      	nop
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	0800c76c 	.word	0x0800c76c
 8004398:	e000ed04 	.word	0xe000ed04

0800439c <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *handle) {
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
    cmr_i2cDoneCallback(handle);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7ff ffcf 	bl	8004348 <cmr_i2cDoneCallback>
}
 80043aa:	bf00      	nop
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *handle) {
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
    cmr_i2cDoneCallback(handle);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7ff ffc4 	bl	8004348 <cmr_i2cDoneCallback>
}
 80043c0:	bf00      	nop
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *handle) {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	cmr_i2cDoneCallback(handle);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff ffb9 	bl	8004348 <cmr_i2cDoneCallback>
}
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <cmr_i2cDmaInit>:
    DMA_Stream_TypeDef *txDmaStream, uint32_t txDmaChannel,
    DMA_Stream_TypeDef *rxDmaStream, uint32_t rxDmaChannel,
    uint32_t clockSpeed, uint32_t ownAddr,
    GPIO_TypeDef *i2cClkPort, uint32_t i2cClkPin,
    GPIO_TypeDef *i2cDataPort, uint32_t i2cDataPin
) {
 80043e0:	b590      	push	{r4, r7, lr}
 80043e2:	b0e9      	sub	sp, #420	; 0x1a4
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	f507 74cc 	add.w	r4, r7, #408	; 0x198
 80043ea:	f5a4 74c6 	sub.w	r4, r4, #396	; 0x18c
 80043ee:	6020      	str	r0, [r4, #0]
 80043f0:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 80043f4:	f5a0 70c8 	sub.w	r0, r0, #400	; 0x190
 80043f8:	6001      	str	r1, [r0, #0]
 80043fa:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 80043fe:	f5a1 71ca 	sub.w	r1, r1, #404	; 0x194
 8004402:	600a      	str	r2, [r1, #0]
 8004404:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8004408:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 800440c:	6013      	str	r3, [r2, #0]
    *i2c = (cmr_i2c_t) {
 800440e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004412:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f44f 73b8 	mov.w	r3, #368	; 0x170
 800441e:	461a      	mov	r2, r3
 8004420:	2100      	movs	r1, #0
 8004422:	f007 ff05 	bl	800c230 <memset>
 8004426:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800442a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8004434:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 8004438:	6812      	ldr	r2, [r2, #0]
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004440:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800444a:	605a      	str	r2, [r3, #4]
 800444c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004450:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800445a:	60da      	str	r2, [r3, #12]
 800445c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004460:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800446a:	611a      	str	r2, [r3, #16]
 800446c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004470:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 800447a:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	655a      	str	r2, [r3, #84]	; 0x54
 8004482:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004486:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8004490:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 8004494:	6812      	ldr	r2, [r2, #0]
 8004496:	659a      	str	r2, [r3, #88]	; 0x58
 8004498:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800449c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2240      	movs	r2, #64	; 0x40
 80044a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80044a6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80044aa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044b4:	665a      	str	r2, [r3, #100]	; 0x64
 80044b6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80044ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2203      	movs	r2, #3
 80044c2:	67da      	str	r2, [r3, #124]	; 0x7c
 80044c4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80044c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 80044d2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80044d6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80044da:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80044e4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80044e8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80044ec:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044f6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 80044fa:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80044fe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2203      	movs	r2, #3
 8004506:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800450a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800450e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004518:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800451c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004520:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800452a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800452e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004532:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800453c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8004540:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004544:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800454e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
            }
        }

    };

    i2c->doneSem = xSemaphoreCreateBinaryStatic(&(i2c->doneSemBuf));
 8004552:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004556:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004560:	2203      	movs	r2, #3
 8004562:	9200      	str	r2, [sp, #0]
 8004564:	2200      	movs	r2, #0
 8004566:	2100      	movs	r1, #0
 8004568:	2001      	movs	r0, #1
 800456a:	f001 f8a9 	bl	80056c0 <xQueueGenericCreateStatic>
 800456e:	4602      	mov	r2, r0
 8004570:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004574:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    configASSERT(i2c->doneSem != NULL);
 800457e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004582:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800458c:	2b00      	cmp	r3, #0
 800458e:	d104      	bne.n	800459a <cmr_i2cDmaInit+0x1ba>
 8004590:	f240 1121 	movw	r1, #289	; 0x121
 8004594:	486f      	ldr	r0, [pc, #444]	; (8004754 <cmr_i2cDmaInit+0x374>)
 8004596:	f000 f9f0 	bl	800497a <cmr_panic>

    cmr_rccGPIOClockEnable(i2cClkPort);
 800459a:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 800459e:	f000 f9f8 	bl	8004992 <cmr_rccGPIOClockEnable>
    cmr_rccGPIOClockEnable(i2cDataPort);
 80045a2:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 80045a6:	f000 f9f4 	bl	8004992 <cmr_rccGPIOClockEnable>
    cmr_rccI2CClockEnable(instance);
 80045aa:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80045ae:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	f000 fa0e 	bl	80049d4 <cmr_rccI2CClockEnable>

    if (HAL_I2C_Init(&(i2c->handle)) != HAL_OK) {
 80045b8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80045bc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f004 fd68 	bl	8009098 <HAL_I2C_Init>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <cmr_i2cDmaInit+0x1f4>
        cmr_panic("HAL_I2C_Init() failed!");
 80045ce:	4862      	ldr	r0, [pc, #392]	; (8004758 <cmr_i2cDmaInit+0x378>)
 80045d0:	f000 f9d3 	bl	800497a <cmr_panic>
    }

    // TODO: Init GPIO with CMR drivers instead of HAL
    GPIO_InitTypeDef pinConfig = {
 80045d4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80045d8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80045dc:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80045e6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80045ea:	2212      	movs	r2, #18
 80045ec:	605a      	str	r2, [r3, #4]
 80045ee:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80045f2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80045f6:	2201      	movs	r2, #1
 80045f8:	609a      	str	r2, [r3, #8]
 80045fa:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80045fe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004602:	2202      	movs	r2, #2
 8004604:	60da      	str	r2, [r3, #12]
 8004606:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800460a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800460e:	2204      	movs	r2, #4
 8004610:	611a      	str	r2, [r3, #16]
        .Pull = GPIO_PULLUP,
        .Speed = GPIO_SPEED_FREQ_HIGH,
        .Alternate = GPIO_AF4_I2C1
    };

    HAL_GPIO_Init(i2cClkPort, &pinConfig);
 8004612:	f107 0314 	add.w	r3, r7, #20
 8004616:	4619      	mov	r1, r3
 8004618:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 800461c:	f004 fb38 	bl	8008c90 <HAL_GPIO_Init>
    pinConfig.Pin = i2cDataPin;
 8004620:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004624:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004628:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800462c:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(i2cDataPort, &pinConfig);
 800462e:	f107 0314 	add.w	r3, r7, #20
 8004632:	4619      	mov	r1, r3
 8004634:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8004638:	f004 fb2a 	bl	8008c90 <HAL_GPIO_Init>

    cmr_dmaInit(&(i2c->dmatx_handle));
 800463c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004640:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3354      	adds	r3, #84	; 0x54
 8004648:	4618      	mov	r0, r3
 800464a:	f7fe ff55 	bl	80034f8 <cmr_dmaInit>
    __HAL_LINKDMA(&i2c->handle,hdmatx,i2c->dmatx_handle);
 800464e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004652:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800465c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004660:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	635a      	str	r2, [r3, #52]	; 0x34
 8004668:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800466c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004676:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    cmr_dmaInit(&(i2c->dmarx_handle));
 8004680:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004684:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	33b4      	adds	r3, #180	; 0xb4
 800468c:	4618      	mov	r0, r3
 800468e:	f7fe ff33 	bl	80034f8 <cmr_dmaInit>
    __HAL_LINKDMA(&i2c->handle,hdmarx,i2c->dmarx_handle);
 8004692:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004696:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 80046a0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80046a4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	639a      	str	r2, [r3, #56]	; 0x38
 80046ac:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80046b0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80046ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

    if (instance == I2C1) {
 80046c4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80046c8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a23      	ldr	r2, [pc, #140]	; (800475c <cmr_i2cDmaInit+0x37c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d117      	bne.n	8004704 <cmr_i2cDmaInit+0x324>
        cmr_i2cDevices[0].handle = &(i2c->handle);
 80046d4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80046d8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a20      	ldr	r2, [pc, #128]	; (8004760 <cmr_i2cDmaInit+0x380>)
 80046e0:	6013      	str	r3, [r2, #0]
        // HAL_NVIC_SetPriority(I2C1_DMA_IRQn, 7, 0);
        // HAL_NVIC_EnableIRQ(I2C1_DMA_IRQn);
        HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80046e2:	2200      	movs	r2, #0
 80046e4:	2105      	movs	r1, #5
 80046e6:	201f      	movs	r0, #31
 80046e8:	f003 fee7 	bl	80084ba <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80046ec:	201f      	movs	r0, #31
 80046ee:	f003 ff00 	bl	80084f2 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80046f2:	2200      	movs	r2, #0
 80046f4:	2105      	movs	r1, #5
 80046f6:	2020      	movs	r0, #32
 80046f8:	f003 fedf 	bl	80084ba <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80046fc:	2020      	movs	r0, #32
 80046fe:	f003 fef8 	bl	80084f2 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
        HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
    } else {
        cmr_panic("Unexpected I2C instance!");
    }
}
 8004702:	e022      	b.n	800474a <cmr_i2cDmaInit+0x36a>
    } else if (instance == I2C2) {
 8004704:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004708:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a15      	ldr	r2, [pc, #84]	; (8004764 <cmr_i2cDmaInit+0x384>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d117      	bne.n	8004744 <cmr_i2cDmaInit+0x364>
    	cmr_i2cDevices[1].handle = &(i2c->handle);
 8004714:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004718:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a10      	ldr	r2, [pc, #64]	; (8004760 <cmr_i2cDmaInit+0x380>)
 8004720:	6053      	str	r3, [r2, #4]
        HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8004722:	2200      	movs	r2, #0
 8004724:	2105      	movs	r1, #5
 8004726:	2021      	movs	r0, #33	; 0x21
 8004728:	f003 fec7 	bl	80084ba <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800472c:	2021      	movs	r0, #33	; 0x21
 800472e:	f003 fee0 	bl	80084f2 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8004732:	2200      	movs	r2, #0
 8004734:	2105      	movs	r1, #5
 8004736:	2022      	movs	r0, #34	; 0x22
 8004738:	f003 febf 	bl	80084ba <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800473c:	2022      	movs	r0, #34	; 0x22
 800473e:	f003 fed8 	bl	80084f2 <HAL_NVIC_EnableIRQ>
}
 8004742:	e002      	b.n	800474a <cmr_i2cDmaInit+0x36a>
        cmr_panic("Unexpected I2C instance!");
 8004744:	4808      	ldr	r0, [pc, #32]	; (8004768 <cmr_i2cDmaInit+0x388>)
 8004746:	f000 f918 	bl	800497a <cmr_panic>
}
 800474a:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 800474e:	46bd      	mov	sp, r7
 8004750:	bd90      	pop	{r4, r7, pc}
 8004752:	bf00      	nop
 8004754:	0800c7b0 	.word	0x0800c7b0
 8004758:	0800c798 	.word	0x0800c798
 800475c:	40005400 	.word	0x40005400
 8004760:	2002f228 	.word	0x2002f228
 8004764:	40005800 	.word	0x40005800
 8004768:	0800c7fc 	.word	0x0800c7fc

0800476c <cmr_i2cDmaTX>:
  * @param timeout_ms Amount of time to wait in milliseconds.
  *
  * @retval 0 upon success, or otherwise a negative error code
  */
int cmr_i2cDmaTX(cmr_i2c_t *i2c, uint16_t devAddr, uint8_t *data,
              size_t dataLength, uint32_t timeout_ms) {
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	607a      	str	r2, [r7, #4]
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	460b      	mov	r3, r1
 800477a:	817b      	strh	r3, [r7, #10]
    // IMPORTANT: If we don't check this and an existing transaction is
    // going on, very bad things happen
	configASSERT(HAL_I2C_GetState(&(i2c->handle)) == HAL_I2C_STATE_READY);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4618      	mov	r0, r3
 8004780:	f005 fa49 	bl	8009c16 <HAL_I2C_GetState>
 8004784:	4603      	mov	r3, r0
 8004786:	2b20      	cmp	r3, #32
 8004788:	d004      	beq.n	8004794 <cmr_i2cDmaTX+0x28>
 800478a:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800478e:	482d      	ldr	r0, [pc, #180]	; (8004844 <cmr_i2cDmaTX+0xd8>)
 8004790:	f000 f8f3 	bl	800497a <cmr_panic>
	configASSERT(i2c->handle.hdmatx->State == HAL_DMA_STATE_READY);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d004      	beq.n	80047ac <cmr_i2cDmaTX+0x40>
 80047a2:	f240 1167 	movw	r1, #359	; 0x167
 80047a6:	4828      	ldr	r0, [pc, #160]	; (8004848 <cmr_i2cDmaTX+0xdc>)
 80047a8:	f000 f8e7 	bl	800497a <cmr_panic>
	configASSERT(i2c->handle.hdmarx->State == HAL_DMA_STATE_READY);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d004      	beq.n	80047c4 <cmr_i2cDmaTX+0x58>
 80047ba:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80047be:	4823      	ldr	r0, [pc, #140]	; (800484c <cmr_i2cDmaTX+0xe0>)
 80047c0:	f000 f8db 	bl	800497a <cmr_panic>
    // Shift the address by 1 per HAL library suggestion
    HAL_StatusTypeDef txStatus = HAL_I2C_Master_Transmit_DMA(
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	897b      	ldrh	r3, [r7, #10]
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	b299      	uxth	r1, r3
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	f004 fd9f 	bl	8009314 <HAL_I2C_Master_Transmit_DMA>
 80047d6:	4603      	mov	r3, r0
 80047d8:	75fb      	strb	r3, [r7, #23]
        &(i2c->handle), devAddr << 1, data, dataLength 
    );

    if (txStatus != HAL_OK) {
 80047da:	7dfb      	ldrb	r3, [r7, #23]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d011      	beq.n	8004804 <cmr_i2cDmaTX+0x98>
    	if (__HAL_I2C_GET_FLAG(&(i2c->handle), I2C_FLAG_BUSY) != RESET) {
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d107      	bne.n	80047fe <cmr_i2cDmaTX+0x92>
    		//I2C_ClearBusyFlagErratum(i2c, 1000);
    		SET_BIT(i2c->handle.Instance->CR1, I2C_CR1_STOP);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047fc:	601a      	str	r2, [r3, #0]
    		//I2C_WaitOnFlagUntilTimeout(&(i2c->handle), I2C_FLAG_BUSY, SET, 1000);
    	}
        return -1;
 80047fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004802:	e01a      	b.n	800483a <cmr_i2cDmaTX+0xce>
    }

    if (xSemaphoreTake(i2c->doneSem, timeout_ms) != pdTRUE) {
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
 800480a:	2300      	movs	r3, #0
 800480c:	6a3a      	ldr	r2, [r7, #32]
 800480e:	2100      	movs	r1, #0
 8004810:	f001 f876 	bl	8005900 <xQueueGenericReceive>
 8004814:	4603      	mov	r3, r0
 8004816:	2b01      	cmp	r3, #1
 8004818:	d002      	beq.n	8004820 <cmr_i2cDmaTX+0xb4>
        return -2;
 800481a:	f06f 0301 	mvn.w	r3, #1
 800481e:	e00c      	b.n	800483a <cmr_i2cDmaTX+0xce>
    }
    configASSERT(HAL_I2C_GetState(&(i2c->handle)) == HAL_I2C_STATE_READY);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4618      	mov	r0, r3
 8004824:	f005 f9f7 	bl	8009c16 <HAL_I2C_GetState>
 8004828:	4603      	mov	r3, r0
 800482a:	2b20      	cmp	r3, #32
 800482c:	d004      	beq.n	8004838 <cmr_i2cDmaTX+0xcc>
 800482e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8004832:	4804      	ldr	r0, [pc, #16]	; (8004844 <cmr_i2cDmaTX+0xd8>)
 8004834:	f000 f8a1 	bl	800497a <cmr_panic>

    return 0;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	0800c818 	.word	0x0800c818
 8004848:	0800c888 	.word	0x0800c888
 800484c:	0800c8f0 	.word	0x0800c8f0

08004850 <cmr_i2cDmaRX>:
  * @param timeout_ms Amount of time to wait in milliseconds.
  *
  * @retval 0 upon success, or otherwise a negative error code
  */
int cmr_i2cDmaRX(cmr_i2c_t *i2c, uint16_t devAddr, uint8_t *data,
              size_t dataLength, uint32_t timeout_ms) {
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	607a      	str	r2, [r7, #4]
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	460b      	mov	r3, r1
 800485e:	817b      	strh	r3, [r7, #10]
    // IMPORTANT: If we don't check this and an existing transaction is
    // going on, very bad things happen
	configASSERT(HAL_I2C_GetState(&(i2c->handle)) == HAL_I2C_STATE_READY);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4618      	mov	r0, r3
 8004864:	f005 f9d7 	bl	8009c16 <HAL_I2C_GetState>
 8004868:	4603      	mov	r3, r0
 800486a:	2b20      	cmp	r3, #32
 800486c:	d004      	beq.n	8004878 <cmr_i2cDmaRX+0x28>
 800486e:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8004872:	482d      	ldr	r0, [pc, #180]	; (8004928 <cmr_i2cDmaRX+0xd8>)
 8004874:	f000 f881 	bl	800497a <cmr_panic>
	configASSERT(i2c->handle.hdmatx->State == HAL_DMA_STATE_READY);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b01      	cmp	r3, #1
 8004884:	d004      	beq.n	8004890 <cmr_i2cDmaRX+0x40>
 8004886:	f240 118f 	movw	r1, #399	; 0x18f
 800488a:	4828      	ldr	r0, [pc, #160]	; (800492c <cmr_i2cDmaRX+0xdc>)
 800488c:	f000 f875 	bl	800497a <cmr_panic>
	configASSERT(i2c->handle.hdmarx->State == HAL_DMA_STATE_READY);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b01      	cmp	r3, #1
 800489c:	d004      	beq.n	80048a8 <cmr_i2cDmaRX+0x58>
 800489e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80048a2:	4823      	ldr	r0, [pc, #140]	; (8004930 <cmr_i2cDmaRX+0xe0>)
 80048a4:	f000 f869 	bl	800497a <cmr_panic>
    // Shift the address by 1 per HAL library suggestion
    HAL_StatusTypeDef rxStatus = HAL_I2C_Master_Receive_DMA(
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	897b      	ldrh	r3, [r7, #10]
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	b299      	uxth	r1, r3
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	f004 fe43 	bl	8009540 <HAL_I2C_Master_Receive_DMA>
 80048ba:	4603      	mov	r3, r0
 80048bc:	75fb      	strb	r3, [r7, #23]
        &(i2c->handle), devAddr << 1, data, dataLength 
    );


    if (rxStatus != HAL_OK) {
 80048be:	7dfb      	ldrb	r3, [r7, #23]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d011      	beq.n	80048e8 <cmr_i2cDmaRX+0x98>
    	if (__HAL_I2C_GET_FLAG(&(i2c->handle), I2C_FLAG_BUSY) != RESET) {
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d107      	bne.n	80048e2 <cmr_i2cDmaRX+0x92>
    		//I2C_ClearBusyFlagErratum(i2c, 1000);
    		SET_BIT(i2c->handle.Instance->CR1, I2C_CR1_STOP);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048e0:	601a      	str	r2, [r3, #0]
    		//I2C_WaitOnFlagUntilTimeout(&(i2c->handle), I2C_FLAG_BUSY, SET, 1000);
    	}
        return -1;
 80048e2:	f04f 33ff 	mov.w	r3, #4294967295
 80048e6:	e01a      	b.n	800491e <cmr_i2cDmaRX+0xce>
    }

    if (xSemaphoreTake(i2c->doneSem, timeout_ms) != pdTRUE) {
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
 80048ee:	2300      	movs	r3, #0
 80048f0:	6a3a      	ldr	r2, [r7, #32]
 80048f2:	2100      	movs	r1, #0
 80048f4:	f001 f804 	bl	8005900 <xQueueGenericReceive>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d002      	beq.n	8004904 <cmr_i2cDmaRX+0xb4>
        return -2;
 80048fe:	f06f 0301 	mvn.w	r3, #1
 8004902:	e00c      	b.n	800491e <cmr_i2cDmaRX+0xce>
    }
    configASSERT(HAL_I2C_GetState(&(i2c->handle)) == HAL_I2C_STATE_READY);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4618      	mov	r0, r3
 8004908:	f005 f985 	bl	8009c16 <HAL_I2C_GetState>
 800490c:	4603      	mov	r3, r0
 800490e:	2b20      	cmp	r3, #32
 8004910:	d004      	beq.n	800491c <cmr_i2cDmaRX+0xcc>
 8004912:	f240 11a3 	movw	r1, #419	; 0x1a3
 8004916:	4804      	ldr	r0, [pc, #16]	; (8004928 <cmr_i2cDmaRX+0xd8>)
 8004918:	f000 f82f 	bl	800497a <cmr_panic>

    return 0;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	0800c818 	.word	0x0800c818
 800492c:	0800c888 	.word	0x0800c888
 8004930:	0800c8f0 	.word	0x0800c8f0

08004934 <SysTick_Handler>:
extern void xPortSysTickHandler(void);

/**
 * @brief System tick interrupt handler.
 */
void SysTick_Handler(void) {
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
    HAL_IncTick();  // Report tick to HAL.
 8004938:	f002 fae6 	bl	8006f08 <HAL_IncTick>

    if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED) {
 800493c:	f001 ff7e 	bl	800683c <xTaskGetSchedulerState>
 8004940:	4603      	mov	r3, r0
 8004942:	2b01      	cmp	r3, #1
 8004944:	d002      	beq.n	800494c <SysTick_Handler+0x18>
        return;
    }

    xPortSysTickHandler();  // Invoke FreeRTOS tick handler.
 8004946:	f002 fa07 	bl	8006d58 <xPortSysTickHandler>
 800494a:	e000      	b.n	800494e <SysTick_Handler+0x1a>
        return;
 800494c:	bf00      	nop
}
 800494e:	bd80      	pop	{r7, pc}

08004950 <NMI_Handler>:

/**
 * @brief Non-maskable interrupt handler.
 */
void NMI_Handler(void) {
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
    // Nothing to do.
}
 8004954:	bf00      	nop
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <DebugMon_Handler>:

/**
 * @brief Debug monitor exception handler.
 */
void DebugMon_Handler(void) {
 800495e:	b480      	push	{r7}
 8004960:	af00      	add	r7, sp, #0
    // Nothing to do.
}
 8004962:	bf00      	nop
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <cmr_panicSetup>:
 * @brief Default pre-panic setup implementation.
 *
 * Nothing happens by default; this should be overridden if custom behavior is
 * desired.
 */
void cmr_panicSetup(void) {
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
    // Nothing to do.
}
 8004970:	bf00      	nop
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <cmr_panic>:
 * @param fmt The formatting string.
 * @param ... Additional arguments for formatting.
 *
 * @return Does not return.
 */
void cmr_panic(const char *fmt, ...) {
 800497a:	b40f      	push	{r0, r1, r2, r3}
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
    (void) fmt;

    cmr_panicSetup();
 8004980:	f7ff fff4 	bl	800496c <cmr_panicSetup>

    while (1) {
        continue;
 8004984:	e7fe      	b.n	8004984 <cmr_panic+0xa>

08004986 <cmr_rccSystemClockEnable>:
 * @brief Configures the system and peripheral clocks using external oscillator
 *
 * @note Generated by STM32Cube. Sets System Clock to 96 MHz, with only APB1
 * Peripheral Clocks at 48 MHz (APB1 Timer Clocks are still 96 MHz).
 */
void cmr_rccSystemClockEnable(void)  {
 8004986:	b580      	push	{r7, lr}
 8004988:	af00      	add	r7, sp, #0
    _platform_rccSystemClockEnable();
 800498a:	f7ff f927 	bl	8003bdc <_platform_rccSystemClockEnable>
}
 800498e:	bf00      	nop
 8004990:	bd80      	pop	{r7, pc}

08004992 <cmr_rccGPIOClockEnable>:
/**
 * @brief Enables the specified GPIO port's clock.
 *
 * @param port The GPIO port.
 */
void cmr_rccGPIOClockEnable(GPIO_TypeDef *port) {
 8004992:	b580      	push	{r7, lr}
 8004994:	b082      	sub	sp, #8
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
    _platform_rccGPIOClockEnable(port);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7ff f98e 	bl	8003cbc <_platform_rccGPIOClockEnable>
}
 80049a0:	bf00      	nop
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <cmr_rccADCClockEnable>:
/**
 * @brief Enables the specified ADC's clock.
 *
 * @param instance The HAL ADC instance.
 */
void cmr_rccADCClockEnable(ADC_TypeDef *instance) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
    _platform_rccADCClockEnable(instance);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7ff fa83 	bl	8003ebc <_platform_rccADCClockEnable>
}
 80049b6:	bf00      	nop
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <cmr_rccCANClockEnable>:
/**
 * @brief Enables the specified CAN interface's clock.
 *
 * @param instance The HAL CAN instance.
 */
void cmr_rccCANClockEnable(CAN_TypeDef *instance) {
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
    _platform_rccCANClockEnable(instance);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7ff fb20 	bl	800400c <_platform_rccCANClockEnable>
}
 80049cc:	bf00      	nop
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <cmr_rccI2CClockEnable>:
/**
 * @brief Enables the specified I2C port's clock.
 *
 * @param instance The HAL I2C instance.
 */
void cmr_rccI2CClockEnable(I2C_TypeDef *instance) {
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
    switch ((uintptr_t) instance) {
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a20      	ldr	r2, [pc, #128]	; (8004a60 <cmr_rccI2CClockEnable+0x8c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d027      	beq.n	8004a34 <cmr_rccI2CClockEnable+0x60>
 80049e4:	4a1e      	ldr	r2, [pc, #120]	; (8004a60 <cmr_rccI2CClockEnable+0x8c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d833      	bhi.n	8004a52 <cmr_rccI2CClockEnable+0x7e>
 80049ea:	4a1e      	ldr	r2, [pc, #120]	; (8004a64 <cmr_rccI2CClockEnable+0x90>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d003      	beq.n	80049f8 <cmr_rccI2CClockEnable+0x24>
 80049f0:	4a1d      	ldr	r2, [pc, #116]	; (8004a68 <cmr_rccI2CClockEnable+0x94>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00f      	beq.n	8004a16 <cmr_rccI2CClockEnable+0x42>
            break;
        case I2C3_BASE:
            __HAL_RCC_I2C3_CLK_ENABLE();
            break;
    }
}
 80049f6:	e02c      	b.n	8004a52 <cmr_rccI2CClockEnable+0x7e>
            __HAL_RCC_I2C1_CLK_ENABLE();
 80049f8:	2300      	movs	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	4b1b      	ldr	r3, [pc, #108]	; (8004a6c <cmr_rccI2CClockEnable+0x98>)
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	4a1a      	ldr	r2, [pc, #104]	; (8004a6c <cmr_rccI2CClockEnable+0x98>)
 8004a02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a06:	6413      	str	r3, [r2, #64]	; 0x40
 8004a08:	4b18      	ldr	r3, [pc, #96]	; (8004a6c <cmr_rccI2CClockEnable+0x98>)
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	697b      	ldr	r3, [r7, #20]
            break;
 8004a14:	e01d      	b.n	8004a52 <cmr_rccI2CClockEnable+0x7e>
            __HAL_RCC_I2C2_CLK_ENABLE();
 8004a16:	2300      	movs	r3, #0
 8004a18:	613b      	str	r3, [r7, #16]
 8004a1a:	4b14      	ldr	r3, [pc, #80]	; (8004a6c <cmr_rccI2CClockEnable+0x98>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	4a13      	ldr	r2, [pc, #76]	; (8004a6c <cmr_rccI2CClockEnable+0x98>)
 8004a20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a24:	6413      	str	r3, [r2, #64]	; 0x40
 8004a26:	4b11      	ldr	r3, [pc, #68]	; (8004a6c <cmr_rccI2CClockEnable+0x98>)
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a2e:	613b      	str	r3, [r7, #16]
 8004a30:	693b      	ldr	r3, [r7, #16]
            break;
 8004a32:	e00e      	b.n	8004a52 <cmr_rccI2CClockEnable+0x7e>
            __HAL_RCC_I2C3_CLK_ENABLE();
 8004a34:	2300      	movs	r3, #0
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	4b0c      	ldr	r3, [pc, #48]	; (8004a6c <cmr_rccI2CClockEnable+0x98>)
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	4a0b      	ldr	r2, [pc, #44]	; (8004a6c <cmr_rccI2CClockEnable+0x98>)
 8004a3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a42:	6413      	str	r3, [r2, #64]	; 0x40
 8004a44:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <cmr_rccI2CClockEnable+0x98>)
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
            break;
 8004a50:	bf00      	nop
}
 8004a52:	bf00      	nop
 8004a54:	371c      	adds	r7, #28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	40005c00 	.word	0x40005c00
 8004a64:	40005400 	.word	0x40005400
 8004a68:	40005800 	.word	0x40005800
 8004a6c:	40023800 	.word	0x40023800

08004a70 <cmr_sensorInit>:
 *
 * @note The sensor's public fields should already be filled in!
 *
 * @param sensor The sensor to initialize.
 */
static void cmr_sensorInit(cmr_sensor_t *sensor) {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08a      	sub	sp, #40	; 0x28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
    configASSERT(sensor->readingMax >= sensor->readingMin);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d203      	bcs.n	8004a8c <cmr_sensorInit+0x1c>
 8004a84:	2114      	movs	r1, #20
 8004a86:	482a      	ldr	r0, [pc, #168]	; (8004b30 <cmr_sensorInit+0xc0>)
 8004a88:	f7ff ff77 	bl	800497a <cmr_panic>

    // Calculate tolerance.
    const uint32_t readingRange = sensor->readingMax - sensor->readingMin;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68da      	ldr	r2, [r3, #12]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	61bb      	str	r3, [r7, #24]
    uint32_t readingTolerance;
    // Prevent overflow.
    if (UINT32_MAX / sensor->outOfRange_pcnt < readingRange) {
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	fba3 2302 	umull	r2, r3, r3, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d000      	beq.n	8004aaa <cmr_sensorInit+0x3a>
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	460b      	mov	r3, r1
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00a      	beq.n	8004ac6 <cmr_sensorInit+0x56>
        readingTolerance = (readingRange / 100) * sensor->outOfRange_pcnt;
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	4a20      	ldr	r2, [pc, #128]	; (8004b34 <cmr_sensorInit+0xc4>)
 8004ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab8:	095b      	lsrs	r3, r3, #5
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6912      	ldr	r2, [r2, #16]
 8004abe:	fb02 f303 	mul.w	r3, r2, r3
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac4:	e009      	b.n	8004ada <cmr_sensorInit+0x6a>
    } else {
        readingTolerance = (readingRange * sensor->outOfRange_pcnt) / 100;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	fb02 f303 	mul.w	r3, r2, r3
 8004ad0:	4a18      	ldr	r2, [pc, #96]	; (8004b34 <cmr_sensorInit+0xc4>)
 8004ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    // Calculate thresholds from tolerance.
    uint32_t readingUpper = sensor->readingMax + readingTolerance;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae0:	4413      	add	r3, r2
 8004ae2:	623b      	str	r3, [r7, #32]
    if (readingUpper < sensor->readingMax) {
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	6a3a      	ldr	r2, [r7, #32]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d202      	bcs.n	8004af4 <cmr_sensorInit+0x84>
        readingUpper = UINT32_MAX;  // Overflow!
 8004aee:	f04f 33ff 	mov.w	r3, #4294967295
 8004af2:	623b      	str	r3, [r7, #32]
    }

    uint32_t readingLower = sensor->readingMin - readingTolerance;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	61fb      	str	r3, [r7, #28]
    if (readingLower > sensor->readingMin) {
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	69fa      	ldr	r2, [r7, #28]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d901      	bls.n	8004b0c <cmr_sensorInit+0x9c>
        readingLower = 0;  // Underflow!
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61fb      	str	r3, [r7, #28]
    }

    sensor->_ = (struct cmr_sensor_private) {
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a3a      	ldr	r2, [r7, #32]
 8004b10:	619a      	str	r2, [r3, #24]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69fa      	ldr	r2, [r7, #28]
 8004b16:	61da      	str	r2, [r3, #28]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	621a      	str	r2, [r3, #32]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        .readingUpper = readingUpper,
        .readingLower = readingLower,
        .value = 0,
        .error = CMR_SENSOR_ERR_NONE
    };
}
 8004b26:	bf00      	nop
 8004b28:	3728      	adds	r7, #40	; 0x28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	0800c958 	.word	0x0800c958
 8004b34:	51eb851f 	.word	0x51eb851f

08004b38 <cmr_sensorUpdate>:
/**
 * @brief Updates the sensor.
 *
 * @param sensor The sensor to sample.
 */
static void cmr_sensorUpdate(cmr_sensor_t *sensor) {
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
    uint32_t reading = sensor->sample(sensor);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	4798      	blx	r3
 8004b48:	60b8      	str	r0, [r7, #8]

    // Check if sensor has gone out-of-range.
    if (reading < sensor->_.readingLower || sensor->_.readingUpper < reading) {
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d304      	bcc.n	8004b5e <cmr_sensorUpdate+0x26>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d904      	bls.n	8004b68 <cmr_sensorUpdate+0x30>
        sensor->_.error = CMR_SENSOR_ERR_OUT_OF_RANGE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004b66:	e003      	b.n	8004b70 <cmr_sensorUpdate+0x38>
    } else {
        sensor->_.error = CMR_SENSOR_ERR_NONE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }

    uint32_t value;
    if (sensor->conv != NULL) {
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d007      	beq.n	8004b88 <cmr_sensorUpdate+0x50>
        value = sensor->conv(sensor, reading);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	68b9      	ldr	r1, [r7, #8]
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	4798      	blx	r3
 8004b82:	4603      	mov	r3, r0
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	e001      	b.n	8004b8c <cmr_sensorUpdate+0x54>
    } else {
        value = reading;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	60fb      	str	r3, [r7, #12]
    }

    sensor->_.value = value;
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	621a      	str	r2, [r3, #32]
}
 8004b92:	bf00      	nop
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <cmr_sensorListInit>:
 * @param sensorsLen The total number of sensors in the array.
 */
void cmr_sensorListInit(
    cmr_sensorList_t *list,
    cmr_sensor_t *sensors, size_t sensorsLen
) {
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b086      	sub	sp, #24
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < sensorsLen; i++) {
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	617b      	str	r3, [r7, #20]
 8004baa:	e00d      	b.n	8004bc8 <cmr_sensorListInit+0x2e>
        cmr_sensorInit(sensors + i);
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4413      	add	r3, r2
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff ff57 	bl	8004a70 <cmr_sensorInit>
    for (size_t i = 0; i < sensorsLen; i++) {
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	617b      	str	r3, [r7, #20]
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d3ed      	bcc.n	8004bac <cmr_sensorListInit+0x12>
    }

    list->sensors = sensors;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	601a      	str	r2, [r3, #0]
    list->sensorsLen = sensorsLen;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	605a      	str	r2, [r3, #4]
}
 8004bdc:	bf00      	nop
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <cmr_sensorListUpdate>:
/**
 * @brief Updates the given sensor list.
 *
 * @param list The list to update.
 */
void cmr_sensorListUpdate(cmr_sensorList_t *list) {
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < list->sensorsLen; i++) {
 8004bec:	2300      	movs	r3, #0
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	e00d      	b.n	8004c0e <cmr_sensorListUpdate+0x2a>
        cmr_sensorUpdate(list->sensors + i);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6819      	ldr	r1, [r3, #0]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	440b      	add	r3, r1
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff ff98 	bl	8004b38 <cmr_sensorUpdate>
    for (size_t i = 0; i < list->sensorsLen; i++) {
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d3ec      	bcc.n	8004bf2 <cmr_sensorListUpdate+0xe>
    }
}
 8004c18:	bf00      	nop
 8004c1a:	bf00      	nop
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <cmr_sensorListGetValue>:
 *
 * @return The most recent converted value.
 */
int32_t cmr_sensorListGetValue(
    cmr_sensorList_t *list, size_t channel
) {
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	6039      	str	r1, [r7, #0]
    return list->sensors[channel]._.value;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6819      	ldr	r1, [r3, #0]
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	440b      	add	r3, r1
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
	...

08004c4c <cmr_taskInit>:
    cmr_task_t *task,
    const char *name,
    UBaseType_t priority,
    TaskFunction_t func,
    void *arg
) {
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af04      	add	r7, sp, #16
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	603b      	str	r3, [r7, #0]
        func,
        name,
        sizeof(task->stackBuf) / sizeof(task->stackBuf[0]),
        arg,
        priority,
        task->stackBuf,
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	3360      	adds	r3, #96	; 0x60
    task->handle = xTaskCreateStatic(
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	3204      	adds	r2, #4
 8004c62:	9202      	str	r2, [sp, #8]
 8004c64:	9301      	str	r3, [sp, #4]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	f44f 52a5 	mov.w	r2, #5280	; 0x14a0
 8004c70:	68b9      	ldr	r1, [r7, #8]
 8004c72:	6838      	ldr	r0, [r7, #0]
 8004c74:	f001 f89c 	bl	8005db0 <xTaskCreateStatic>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	601a      	str	r2, [r3, #0]
    );
#else
#error "At least one of configSUPPORT_{STATIC,DYNAMIC}_ALLOCATION must be 1!"
#endif

    configASSERT(task->handle != NULL);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d103      	bne.n	8004c8e <cmr_taskInit+0x42>
 8004c86:	2130      	movs	r1, #48	; 0x30
 8004c88:	4803      	ldr	r0, [pc, #12]	; (8004c98 <cmr_taskInit+0x4c>)
 8004c8a:	f7ff fe76 	bl	800497a <cmr_panic>
}
 8004c8e:	bf00      	nop
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	0800c9bc 	.word	0x0800c9bc

08004c9c <vApplicationGetIdleTaskMemory>:
 */
void vApplicationGetIdleTaskMemory(
    StaticTask_t **task,
    StackType_t **stack,
    uint32_t *stackLen
) {
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
    static StaticTask_t taskBuf;

    /** @brief The task's stack buffer. */
    static StackType_t stackBuf[configMINIMAL_STACK_SIZE];

    *task = &taskBuf;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4a07      	ldr	r2, [pc, #28]	; (8004cc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004cac:	601a      	str	r2, [r3, #0]
    *stack = stackBuf;
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4a06      	ldr	r2, [pc, #24]	; (8004ccc <vApplicationGetIdleTaskMemory+0x30>)
 8004cb2:	601a      	str	r2, [r3, #0]
    *stackLen = sizeof(stackBuf) / sizeof(stackBuf[0]);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f44f 52a5 	mov.w	r2, #5280	; 0x14a0
 8004cba:	601a      	str	r2, [r3, #0]
}
 8004cbc:	bf00      	nop
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	2002f230 	.word	0x2002f230
 8004ccc:	2002f28c 	.word	0x2002f28c

08004cd0 <USART1_IRQHandler>:
            HAL_StatusTypeDef status = HAL_UART_AbortReceive_IT(handle); \
            configASSERT(status == HAL_OK); \
        } \
        HAL_UART_IRQHandler(handle); \
    }
UART_FOREACH(UART_IRQ_HANDLERS)
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	4b18      	ldr	r3, [pc, #96]	; (8004d38 <USART1_IRQHandler+0x68>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f003 0310 	and.w	r3, r3, #16
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d01e      	beq.n	8004d28 <USART1_IRQHandler+0x58>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0210 	bic.w	r2, r2, #16
 8004cf8:	60da      	str	r2, [r3, #12]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	607b      	str	r3, [r7, #4]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	607b      	str	r3, [r7, #4]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	607b      	str	r3, [r7, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f006 fedb 	bl	800bacc <HAL_UART_AbortReceive_IT>
 8004d16:	4603      	mov	r3, r0
 8004d18:	72fb      	strb	r3, [r7, #11]
 8004d1a:	7afb      	ldrb	r3, [r7, #11]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <USART1_IRQHandler+0x58>
 8004d20:	2177      	movs	r1, #119	; 0x77
 8004d22:	4806      	ldr	r0, [pc, #24]	; (8004d3c <USART1_IRQHandler+0x6c>)
 8004d24:	f7ff fe29 	bl	800497a <cmr_panic>
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f006 ff27 	bl	800bb7c <HAL_UART_IRQHandler>
 8004d2e:	bf00      	nop
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	2003450c 	.word	0x2003450c
 8004d3c:	0800ca20 	.word	0x0800ca20

08004d40 <USART2_IRQHandler>:
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4b18      	ldr	r3, [pc, #96]	; (8004da8 <USART2_IRQHandler+0x68>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	f003 0310 	and.w	r3, r3, #16
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d01e      	beq.n	8004d98 <USART2_IRQHandler+0x58>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0210 	bic.w	r2, r2, #16
 8004d68:	60da      	str	r2, [r3, #12]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	607b      	str	r3, [r7, #4]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	607b      	str	r3, [r7, #4]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	607b      	str	r3, [r7, #4]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f006 fea3 	bl	800bacc <HAL_UART_AbortReceive_IT>
 8004d86:	4603      	mov	r3, r0
 8004d88:	72fb      	strb	r3, [r7, #11]
 8004d8a:	7afb      	ldrb	r3, [r7, #11]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <USART2_IRQHandler+0x58>
 8004d90:	2177      	movs	r1, #119	; 0x77
 8004d92:	4806      	ldr	r0, [pc, #24]	; (8004dac <USART2_IRQHandler+0x6c>)
 8004d94:	f7ff fdf1 	bl	800497a <cmr_panic>
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f006 feef 	bl	800bb7c <HAL_UART_IRQHandler>
 8004d9e:	bf00      	nop
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	2003450c 	.word	0x2003450c
 8004dac:	0800ca20 	.word	0x0800ca20

08004db0 <USART3_IRQHandler>:
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	4b18      	ldr	r3, [pc, #96]	; (8004e18 <USART3_IRQHandler+0x68>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f003 0310 	and.w	r3, r3, #16
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d01e      	beq.n	8004e08 <USART3_IRQHandler+0x58>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0210 	bic.w	r2, r2, #16
 8004dd8:	60da      	str	r2, [r3, #12]
 8004dda:	2300      	movs	r3, #0
 8004ddc:	607b      	str	r3, [r7, #4]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	607b      	str	r3, [r7, #4]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	607b      	str	r3, [r7, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f006 fe6b 	bl	800bacc <HAL_UART_AbortReceive_IT>
 8004df6:	4603      	mov	r3, r0
 8004df8:	72fb      	strb	r3, [r7, #11]
 8004dfa:	7afb      	ldrb	r3, [r7, #11]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <USART3_IRQHandler+0x58>
 8004e00:	2177      	movs	r1, #119	; 0x77
 8004e02:	4806      	ldr	r0, [pc, #24]	; (8004e1c <USART3_IRQHandler+0x6c>)
 8004e04:	f7ff fdb9 	bl	800497a <cmr_panic>
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f006 feb7 	bl	800bb7c <HAL_UART_IRQHandler>
 8004e0e:	bf00      	nop
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	2003450c 	.word	0x2003450c
 8004e1c:	0800ca20 	.word	0x0800ca20

08004e20 <UART4_IRQHandler>:
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	4b18      	ldr	r3, [pc, #96]	; (8004e88 <UART4_IRQHandler+0x68>)
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f003 0310 	and.w	r3, r3, #16
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d01e      	beq.n	8004e78 <UART4_IRQHandler+0x58>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0210 	bic.w	r2, r2, #16
 8004e48:	60da      	str	r2, [r3, #12]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	607b      	str	r3, [r7, #4]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	607b      	str	r3, [r7, #4]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	607b      	str	r3, [r7, #4]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f006 fe33 	bl	800bacc <HAL_UART_AbortReceive_IT>
 8004e66:	4603      	mov	r3, r0
 8004e68:	72fb      	strb	r3, [r7, #11]
 8004e6a:	7afb      	ldrb	r3, [r7, #11]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <UART4_IRQHandler+0x58>
 8004e70:	2177      	movs	r1, #119	; 0x77
 8004e72:	4806      	ldr	r0, [pc, #24]	; (8004e8c <UART4_IRQHandler+0x6c>)
 8004e74:	f7ff fd81 	bl	800497a <cmr_panic>
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f006 fe7f 	bl	800bb7c <HAL_UART_IRQHandler>
 8004e7e:	bf00      	nop
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	2003450c 	.word	0x2003450c
 8004e8c:	0800ca20 	.word	0x0800ca20

08004e90 <UART5_IRQHandler>:
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	4b18      	ldr	r3, [pc, #96]	; (8004ef8 <UART5_IRQHandler+0x68>)
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f003 0310 	and.w	r3, r3, #16
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d01e      	beq.n	8004ee8 <UART5_IRQHandler+0x58>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0210 	bic.w	r2, r2, #16
 8004eb8:	60da      	str	r2, [r3, #12]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	607b      	str	r3, [r7, #4]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	607b      	str	r3, [r7, #4]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	607b      	str	r3, [r7, #4]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f006 fdfb 	bl	800bacc <HAL_UART_AbortReceive_IT>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	72fb      	strb	r3, [r7, #11]
 8004eda:	7afb      	ldrb	r3, [r7, #11]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <UART5_IRQHandler+0x58>
 8004ee0:	2177      	movs	r1, #119	; 0x77
 8004ee2:	4806      	ldr	r0, [pc, #24]	; (8004efc <UART5_IRQHandler+0x6c>)
 8004ee4:	f7ff fd49 	bl	800497a <cmr_panic>
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f006 fe47 	bl	800bb7c <HAL_UART_IRQHandler>
 8004eee:	bf00      	nop
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	2003450c 	.word	0x2003450c
 8004efc:	0800ca20 	.word	0x0800ca20

08004f00 <USART6_IRQHandler>:
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	4b18      	ldr	r3, [pc, #96]	; (8004f68 <USART6_IRQHandler+0x68>)
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f003 0310 	and.w	r3, r3, #16
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d01e      	beq.n	8004f58 <USART6_IRQHandler+0x58>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0210 	bic.w	r2, r2, #16
 8004f28:	60da      	str	r2, [r3, #12]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	607b      	str	r3, [r7, #4]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	607b      	str	r3, [r7, #4]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	607b      	str	r3, [r7, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f006 fdc3 	bl	800bacc <HAL_UART_AbortReceive_IT>
 8004f46:	4603      	mov	r3, r0
 8004f48:	72fb      	strb	r3, [r7, #11]
 8004f4a:	7afb      	ldrb	r3, [r7, #11]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <USART6_IRQHandler+0x58>
 8004f50:	2177      	movs	r1, #119	; 0x77
 8004f52:	4806      	ldr	r0, [pc, #24]	; (8004f6c <USART6_IRQHandler+0x6c>)
 8004f54:	f7ff fd11 	bl	800497a <cmr_panic>
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f006 fe0f 	bl	800bb7c <HAL_UART_IRQHandler>
 8004f5e:	bf00      	nop
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	2003450c 	.word	0x2003450c
 8004f6c:	0800ca20 	.word	0x0800ca20

08004f70 <UART7_IRQHandler>:
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	4b18      	ldr	r3, [pc, #96]	; (8004fd8 <UART7_IRQHandler+0x68>)
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f003 0310 	and.w	r3, r3, #16
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d01e      	beq.n	8004fc8 <UART7_IRQHandler+0x58>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68da      	ldr	r2, [r3, #12]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0210 	bic.w	r2, r2, #16
 8004f98:	60da      	str	r2, [r3, #12]
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	607b      	str	r3, [r7, #4]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	607b      	str	r3, [r7, #4]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	607b      	str	r3, [r7, #4]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f006 fd8b 	bl	800bacc <HAL_UART_AbortReceive_IT>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	72fb      	strb	r3, [r7, #11]
 8004fba:	7afb      	ldrb	r3, [r7, #11]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <UART7_IRQHandler+0x58>
 8004fc0:	2177      	movs	r1, #119	; 0x77
 8004fc2:	4806      	ldr	r0, [pc, #24]	; (8004fdc <UART7_IRQHandler+0x6c>)
 8004fc4:	f7ff fcd9 	bl	800497a <cmr_panic>
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f006 fdd7 	bl	800bb7c <HAL_UART_IRQHandler>
 8004fce:	bf00      	nop
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	2003450c 	.word	0x2003450c
 8004fdc:	0800ca20 	.word	0x0800ca20

08004fe0 <UART8_IRQHandler>:
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	4b18      	ldr	r3, [pc, #96]	; (8005048 <UART8_IRQHandler+0x68>)
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f003 0310 	and.w	r3, r3, #16
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d01e      	beq.n	8005038 <UART8_IRQHandler+0x58>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0210 	bic.w	r2, r2, #16
 8005008:	60da      	str	r2, [r3, #12]
 800500a:	2300      	movs	r3, #0
 800500c:	607b      	str	r3, [r7, #4]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	607b      	str	r3, [r7, #4]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	607b      	str	r3, [r7, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f006 fd53 	bl	800bacc <HAL_UART_AbortReceive_IT>
 8005026:	4603      	mov	r3, r0
 8005028:	72fb      	strb	r3, [r7, #11]
 800502a:	7afb      	ldrb	r3, [r7, #11]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <UART8_IRQHandler+0x58>
 8005030:	2177      	movs	r1, #119	; 0x77
 8005032:	4806      	ldr	r0, [pc, #24]	; (800504c <UART8_IRQHandler+0x6c>)
 8005034:	f7ff fca1 	bl	800497a <cmr_panic>
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f006 fd9f 	bl	800bb7c <HAL_UART_IRQHandler>
 800503e:	bf00      	nop
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	2003450c 	.word	0x2003450c
 800504c:	0800ca20 	.word	0x0800ca20

08005050 <UART9_IRQHandler>:
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	4b18      	ldr	r3, [pc, #96]	; (80050b8 <UART9_IRQHandler+0x68>)
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f003 0310 	and.w	r3, r3, #16
 8005066:	2b00      	cmp	r3, #0
 8005068:	d01e      	beq.n	80050a8 <UART9_IRQHandler+0x58>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0210 	bic.w	r2, r2, #16
 8005078:	60da      	str	r2, [r3, #12]
 800507a:	2300      	movs	r3, #0
 800507c:	607b      	str	r3, [r7, #4]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	607b      	str	r3, [r7, #4]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	607b      	str	r3, [r7, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f006 fd1b 	bl	800bacc <HAL_UART_AbortReceive_IT>
 8005096:	4603      	mov	r3, r0
 8005098:	72fb      	strb	r3, [r7, #11]
 800509a:	7afb      	ldrb	r3, [r7, #11]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <UART9_IRQHandler+0x58>
 80050a0:	2177      	movs	r1, #119	; 0x77
 80050a2:	4806      	ldr	r0, [pc, #24]	; (80050bc <UART9_IRQHandler+0x6c>)
 80050a4:	f7ff fc69 	bl	800497a <cmr_panic>
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f006 fd67 	bl	800bb7c <HAL_UART_IRQHandler>
 80050ae:	bf00      	nop
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	2003450c 	.word	0x2003450c
 80050bc:	0800ca20 	.word	0x0800ca20

080050c0 <UART10_IRQHandler>:
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	4b18      	ldr	r3, [pc, #96]	; (8005128 <UART10_IRQHandler+0x68>)
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f003 0310 	and.w	r3, r3, #16
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d01e      	beq.n	8005118 <UART10_IRQHandler+0x58>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0210 	bic.w	r2, r2, #16
 80050e8:	60da      	str	r2, [r3, #12]
 80050ea:	2300      	movs	r3, #0
 80050ec:	607b      	str	r3, [r7, #4]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	607b      	str	r3, [r7, #4]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	607b      	str	r3, [r7, #4]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f006 fce3 	bl	800bacc <HAL_UART_AbortReceive_IT>
 8005106:	4603      	mov	r3, r0
 8005108:	72fb      	strb	r3, [r7, #11]
 800510a:	7afb      	ldrb	r3, [r7, #11]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <UART10_IRQHandler+0x58>
 8005110:	2177      	movs	r1, #119	; 0x77
 8005112:	4806      	ldr	r0, [pc, #24]	; (800512c <UART10_IRQHandler+0x6c>)
 8005114:	f7ff fc31 	bl	800497a <cmr_panic>
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f006 fd2f 	bl	800bb7c <HAL_UART_IRQHandler>
 800511e:	bf00      	nop
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	2003450c 	.word	0x2003450c
 800512c:	0800ca20 	.word	0x0800ca20

08005130 <cmr_uartFromHandle>:
 *
 * @param handle The handle.
 *
 * @return The interface.
 */
static cmr_uart_t *cmr_uartFromHandle(UART_HandleTypeDef *handle) {
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
    char *addr = (void *) handle;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	60fb      	str	r3, [r7, #12]
    return (void *) (addr - offsetof(cmr_uart_t, handle));
 800513c:	68fb      	ldr	r3, [r7, #12]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
	...

0800514c <HAL_UART_TxCpltCallback>:
 * @warning Called from an interrupt handler!
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *handle) {
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
    cmr_uart_t *uart = cmr_uartFromHandle(handle);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7ff ffeb 	bl	8005130 <cmr_uartFromHandle>
 800515a:	6178      	str	r0, [r7, #20]

    BaseType_t higherWoken;
    cmr_uartMsg_t *msg;
    if (xQueueReceiveFromISR(uart->tx.q, &msg, &higherWoken) != pdTRUE) {
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005162:	f107 020c 	add.w	r2, r7, #12
 8005166:	f107 0108 	add.w	r1, r7, #8
 800516a:	4618      	mov	r0, r3
 800516c:	f000 fcc8 	bl	8005b00 <xQueueReceiveFromISR>
 8005170:	4603      	mov	r3, r0
 8005172:	2b01      	cmp	r3, #1
 8005174:	d002      	beq.n	800517c <HAL_UART_TxCpltCallback+0x30>
        cmr_panic("HAL UART TX completion handler called with empty queue!");
 8005176:	4831      	ldr	r0, [pc, #196]	; (800523c <HAL_UART_TxCpltCallback+0xf0>)
 8005178:	f7ff fbff 	bl	800497a <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d007      	beq.n	8005192 <HAL_UART_TxCpltCallback+0x46>
 8005182:	4b2f      	ldr	r3, [pc, #188]	; (8005240 <HAL_UART_TxCpltCallback+0xf4>)
 8005184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	f3bf 8f6f 	isb	sy

    // Signal message as done.
    if (xSemaphoreGiveFromISR(msg->doneSem, &higherWoken) != pdTRUE) {
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f107 020c 	add.w	r2, r7, #12
 800519a:	4611      	mov	r1, r2
 800519c:	4618      	mov	r0, r3
 800519e:	f000 fb35 	bl	800580c <xQueueGiveFromISR>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d002      	beq.n	80051ae <HAL_UART_TxCpltCallback+0x62>
        cmr_panic("HAL UART TX completion handler failed to signal message!");
 80051a8:	4826      	ldr	r0, [pc, #152]	; (8005244 <HAL_UART_TxCpltCallback+0xf8>)
 80051aa:	f7ff fbe6 	bl	800497a <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d007      	beq.n	80051c4 <HAL_UART_TxCpltCallback+0x78>
 80051b4:	4b22      	ldr	r3, [pc, #136]	; (8005240 <HAL_UART_TxCpltCallback+0xf4>)
 80051b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	f3bf 8f6f 	isb	sy

    if (xQueuePeekFromISR(uart->tx.q, &msg) != pdTRUE) {
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80051ca:	f107 0208 	add.w	r2, r7, #8
 80051ce:	4611      	mov	r1, r2
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 fd07 	bl	8005be4 <xQueuePeekFromISR>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d01a      	beq.n	8005212 <HAL_UART_TxCpltCallback+0xc6>
        // No more messages pending; release DMA semaphore.
        if (xSemaphoreGiveFromISR(uart->tx.dmaSem, &higherWoken) != pdTRUE) {
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 80051e2:	f107 020c 	add.w	r2, r7, #12
 80051e6:	4611      	mov	r1, r2
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fb0f 	bl	800580c <xQueueGiveFromISR>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d002      	beq.n	80051fa <HAL_UART_TxCpltCallback+0xae>
            cmr_panic("HAL UART TX completion handler failed to release DMA!");
 80051f4:	4814      	ldr	r0, [pc, #80]	; (8005248 <HAL_UART_TxCpltCallback+0xfc>)
 80051f6:	f7ff fbc0 	bl	800497a <cmr_panic>
        }
        portYIELD_FROM_ISR(higherWoken);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d019      	beq.n	8005234 <HAL_UART_TxCpltCallback+0xe8>
 8005200:	4b0f      	ldr	r3, [pc, #60]	; (8005240 <HAL_UART_TxCpltCallback+0xf4>)
 8005202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	e011      	b.n	8005236 <HAL_UART_TxCpltCallback+0xea>
        return;
    }

    // Message pending; start DMA.
    HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(
 8005212:	6978      	ldr	r0, [r7, #20]
        &uart->handle, msg->data, msg->len
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(
 800521c:	b29b      	uxth	r3, r3
 800521e:	461a      	mov	r2, r3
 8005220:	f006 fb68 	bl	800b8f4 <HAL_UART_Transmit_DMA>
 8005224:	4603      	mov	r3, r0
 8005226:	74fb      	strb	r3, [r7, #19]
    );
    if (status != HAL_OK) {
 8005228:	7cfb      	ldrb	r3, [r7, #19]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_UART_TxCpltCallback+0xea>
        cmr_panic("HAL UART TX failed!");
 800522e:	4807      	ldr	r0, [pc, #28]	; (800524c <HAL_UART_TxCpltCallback+0x100>)
 8005230:	f7ff fba3 	bl	800497a <cmr_panic>
        return;
 8005234:	bf00      	nop
    }
}
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	0800ca68 	.word	0x0800ca68
 8005240:	e000ed04 	.word	0xe000ed04
 8005244:	0800caa0 	.word	0x0800caa0
 8005248:	0800cadc 	.word	0x0800cadc
 800524c:	0800cb14 	.word	0x0800cb14

08005250 <HAL_UART_RxCpltCallback>:
 * @warning Called from an interrupt handler!
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL UART handle.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *handle) {
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
    cmr_uart_t *uart = cmr_uartFromHandle(handle);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff ff69 	bl	8005130 <cmr_uartFromHandle>
 800525e:	61f8      	str	r0, [r7, #28]

    BaseType_t higherWoken;
    cmr_uartMsg_t *msg;
    if (xQueueReceiveFromISR(uart->rx.q, &msg, &higherWoken) != pdTRUE) {
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005266:	f107 0210 	add.w	r2, r7, #16
 800526a:	f107 010c 	add.w	r1, r7, #12
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fc46 	bl	8005b00 <xQueueReceiveFromISR>
 8005274:	4603      	mov	r3, r0
 8005276:	2b01      	cmp	r3, #1
 8005278:	d002      	beq.n	8005280 <HAL_UART_RxCpltCallback+0x30>
        cmr_panic("HAL UART RX completion handler called with empty queue!");
 800527a:	4842      	ldr	r0, [pc, #264]	; (8005384 <HAL_UART_RxCpltCallback+0x134>)
 800527c:	f7ff fb7d 	bl	800497a <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d007      	beq.n	8005296 <HAL_UART_RxCpltCallback+0x46>
 8005286:	4b40      	ldr	r3, [pc, #256]	; (8005388 <HAL_UART_RxCpltCallback+0x138>)
 8005288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	f3bf 8f6f 	isb	sy

    // Record actual number of bytes received.
    size_t remLen = __HAL_DMA_GET_COUNTER(&uart->rx.dma);
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	61bb      	str	r3, [r7, #24]
    configASSERT(remLen <= msg->len);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d903      	bls.n	80052b0 <HAL_UART_RxCpltCallback+0x60>
 80052a8:	21c6      	movs	r1, #198	; 0xc6
 80052aa:	4838      	ldr	r0, [pc, #224]	; (800538c <HAL_UART_RxCpltCallback+0x13c>)
 80052ac:	f7ff fb65 	bl	800497a <cmr_panic>
    msg->len -= remLen;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	1a8a      	subs	r2, r1, r2
 80052ba:	651a      	str	r2, [r3, #80]	; 0x50

    // Signal message as done.
    if (xSemaphoreGiveFromISR(msg->doneSem, &higherWoken) != pdTRUE) {
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f107 0210 	add.w	r2, r7, #16
 80052c4:	4611      	mov	r1, r2
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 faa0 	bl	800580c <xQueueGiveFromISR>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d002      	beq.n	80052d8 <HAL_UART_RxCpltCallback+0x88>
        cmr_panic("HAL UART RX completion handler failed to signal message!");
 80052d2:	482f      	ldr	r0, [pc, #188]	; (8005390 <HAL_UART_RxCpltCallback+0x140>)
 80052d4:	f7ff fb51 	bl	800497a <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d007      	beq.n	80052ee <HAL_UART_RxCpltCallback+0x9e>
 80052de:	4b2a      	ldr	r3, [pc, #168]	; (8005388 <HAL_UART_RxCpltCallback+0x138>)
 80052e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	f3bf 8f6f 	isb	sy

    if (xQueuePeekFromISR(uart->rx.q, &msg) != pdTRUE) {
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80052f4:	f107 020c 	add.w	r2, r7, #12
 80052f8:	4611      	mov	r1, r2
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fc72 	bl	8005be4 <xQueuePeekFromISR>
 8005300:	4603      	mov	r3, r0
 8005302:	2b01      	cmp	r3, #1
 8005304:	d01a      	beq.n	800533c <HAL_UART_RxCpltCallback+0xec>
        // No more messages pending; release DMA semaphore.
        if (xSemaphoreGiveFromISR(uart->rx.dmaSem, &higherWoken) != pdTRUE) {
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800530c:	f107 0210 	add.w	r2, r7, #16
 8005310:	4611      	mov	r1, r2
 8005312:	4618      	mov	r0, r3
 8005314:	f000 fa7a 	bl	800580c <xQueueGiveFromISR>
 8005318:	4603      	mov	r3, r0
 800531a:	2b01      	cmp	r3, #1
 800531c:	d002      	beq.n	8005324 <HAL_UART_RxCpltCallback+0xd4>
            cmr_panic("HAL UART RX completion handler failed to release DMA!");
 800531e:	481d      	ldr	r0, [pc, #116]	; (8005394 <HAL_UART_RxCpltCallback+0x144>)
 8005320:	f7ff fb2b 	bl	800497a <cmr_panic>
        }
        portYIELD_FROM_ISR(higherWoken);
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d028      	beq.n	800537c <HAL_UART_RxCpltCallback+0x12c>
 800532a:	4b17      	ldr	r3, [pc, #92]	; (8005388 <HAL_UART_RxCpltCallback+0x138>)
 800532c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	e020      	b.n	800537e <HAL_UART_RxCpltCallback+0x12e>
        return;
    }

    // Message pending; start DMA.
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(
 800533c:	69f8      	ldr	r0, [r7, #28]
        &uart->handle, msg->data, msg->len
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(
 8005346:	b29b      	uxth	r3, r3
 8005348:	461a      	mov	r2, r3
 800534a:	f006 fb3f 	bl	800b9cc <HAL_UART_Receive_DMA>
 800534e:	4603      	mov	r3, r0
 8005350:	75fb      	strb	r3, [r7, #23]
    );
    if (status != HAL_OK) {
 8005352:	7dfb      	ldrb	r3, [r7, #23]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <HAL_UART_RxCpltCallback+0x10e>
        cmr_panic("HAL UART RX failed!");
 8005358:	480f      	ldr	r0, [pc, #60]	; (8005398 <HAL_UART_RxCpltCallback+0x148>)
 800535a:	f7ff fb0e 	bl	800497a <cmr_panic>
    }

    if (msg->opts & CMR_UART_RXOPTS_IDLEABORT) {
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d009      	beq.n	800537e <HAL_UART_RxCpltCallback+0x12e>
        // Enable idle line detection.
        __HAL_UART_ENABLE_IT(&uart->handle, UART_IT_IDLE);
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68da      	ldr	r2, [r3, #12]
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f042 0210 	orr.w	r2, r2, #16
 8005378:	60da      	str	r2, [r3, #12]
 800537a:	e000      	b.n	800537e <HAL_UART_RxCpltCallback+0x12e>
        return;
 800537c:	bf00      	nop
    }
}
 800537e:	3720      	adds	r7, #32
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	0800cb28 	.word	0x0800cb28
 8005388:	e000ed04 	.word	0xe000ed04
 800538c:	0800cb60 	.word	0x0800cb60
 8005390:	0800cbac 	.word	0x0800cbac
 8005394:	0800cbe8 	.word	0x0800cbe8
 8005398:	0800cc20 	.word	0x0800cc20

0800539c <HAL_UART_AbortReceiveCpltCallback>:
 * @warning Called from an interrupt handler!
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL UART handle.
 */
void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *handle) {
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
    // Receive aborted; treat as completion.
    HAL_UART_RxCpltCallback(handle);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7ff ff53 	bl	8005250 <HAL_UART_RxCpltCallback>
}
 80053aa:	bf00      	nop
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80053b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80053ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80053b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80053ba:	e003      	b.n	80053c4 <LoopCopyDataInit>

080053bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80053bc:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80053be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80053c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80053c2:	3104      	adds	r1, #4

080053c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80053c4:	480b      	ldr	r0, [pc, #44]	; (80053f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80053c6:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80053c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80053ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80053cc:	d3f6      	bcc.n	80053bc <CopyDataInit>
  ldr  r2, =_sbss
 80053ce:	4a0b      	ldr	r2, [pc, #44]	; (80053fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80053d0:	e002      	b.n	80053d8 <LoopFillZerobss>

080053d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80053d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80053d4:	f842 3b04 	str.w	r3, [r2], #4

080053d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80053d8:	4b09      	ldr	r3, [pc, #36]	; (8005400 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80053da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80053dc:	d3f9      	bcc.n	80053d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80053de:	f000 f821 	bl	8005424 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80053e2:	f006 fef3 	bl	800c1cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80053e6:	f7fd f8a5 	bl	8002534 <main>
  bx  lr    
 80053ea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80053ec:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80053f0:	0800e18c 	.word	0x0800e18c
  ldr  r0, =_sdata
 80053f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80053f8:	200001bc 	.word	0x200001bc
  ldr  r2, =_sbss
 80053fc:	200001bc 	.word	0x200001bc
  ldr  r3, = _ebss
 8005400:	20034654 	.word	0x20034654
	...

08005410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
  /* Load the address of the interrupt control register into r3. */
  ldr r3, NVIC_INT_CTRL_CONST
 8005410:	4b03      	ldr	r3, [pc, #12]	; (8005420 <NVIC_INT_CTRL_CONST>)
  /* Load the value of the interrupt control register into r2 from the
  address held in r3. */
  ldr r2, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
  /* The interrupt number is in the least significant byte - clear all
  other bits. */
  uxtb r2, r2
 8005414:	b2d2      	uxtb	r2, r2

08005416 <Infinite_Loop>:
Infinite_Loop:
  b  Infinite_Loop
 8005416:	e7fe      	b.n	8005416 <Infinite_Loop>
 8005418:	f3af 8000 	nop.w
 800541c:	f3af 8000 	nop.w

08005420 <NVIC_INT_CTRL_CONST>:
 8005420:	e000ed04 	.word	0xe000ed04

08005424 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005428:	4b16      	ldr	r3, [pc, #88]	; (8005484 <SystemInit+0x60>)
 800542a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542e:	4a15      	ldr	r2, [pc, #84]	; (8005484 <SystemInit+0x60>)
 8005430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005438:	4b13      	ldr	r3, [pc, #76]	; (8005488 <SystemInit+0x64>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a12      	ldr	r2, [pc, #72]	; (8005488 <SystemInit+0x64>)
 800543e:	f043 0301 	orr.w	r3, r3, #1
 8005442:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005444:	4b10      	ldr	r3, [pc, #64]	; (8005488 <SystemInit+0x64>)
 8005446:	2200      	movs	r2, #0
 8005448:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800544a:	4b0f      	ldr	r3, [pc, #60]	; (8005488 <SystemInit+0x64>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a0e      	ldr	r2, [pc, #56]	; (8005488 <SystemInit+0x64>)
 8005450:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005458:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800545a:	4b0b      	ldr	r3, [pc, #44]	; (8005488 <SystemInit+0x64>)
 800545c:	4a0b      	ldr	r2, [pc, #44]	; (800548c <SystemInit+0x68>)
 800545e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005460:	4b09      	ldr	r3, [pc, #36]	; (8005488 <SystemInit+0x64>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a08      	ldr	r2, [pc, #32]	; (8005488 <SystemInit+0x64>)
 8005466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800546a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800546c:	4b06      	ldr	r3, [pc, #24]	; (8005488 <SystemInit+0x64>)
 800546e:	2200      	movs	r2, #0
 8005470:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005472:	4b04      	ldr	r3, [pc, #16]	; (8005484 <SystemInit+0x60>)
 8005474:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005478:	609a      	str	r2, [r3, #8]
#endif
}
 800547a:	bf00      	nop
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	e000ed00 	.word	0xe000ed00
 8005488:	40023800 	.word	0x40023800
 800548c:	24003010 	.word	0x24003010

08005490 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f103 0208 	add.w	r2, r3, #8
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f04f 32ff 	mov.w	r2, #4294967295
 80054a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f103 0208 	add.w	r2, r3, #8
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f103 0208 	add.w	r2, r3, #8
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054ea:	b480      	push	{r7}
 80054ec:	b085      	sub	sp, #20
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	601a      	str	r2, [r3, #0]
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005532:	b480      	push	{r7}
 8005534:	b085      	sub	sp, #20
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005548:	d103      	bne.n	8005552 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	e00c      	b.n	800556c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3308      	adds	r3, #8
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	e002      	b.n	8005560 <vListInsert+0x2e>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	429a      	cmp	r2, r3
 800556a:	d2f6      	bcs.n	800555a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	1c5a      	adds	r2, r3, #1
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	601a      	str	r2, [r3, #0]
}
 8005598:	bf00      	nop
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6892      	ldr	r2, [r2, #8]
 80055ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6852      	ldr	r2, [r2, #4]
 80055c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d103      	bne.n	80055d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	1e5a      	subs	r2, r3, #1
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d104      	bne.n	8005616 <xQueueGenericReset+0x1e>
 800560c:	f240 111b 	movw	r1, #283	; 0x11b
 8005610:	4829      	ldr	r0, [pc, #164]	; (80056b8 <xQueueGenericReset+0xc0>)
 8005612:	f7ff f9b2 	bl	800497a <cmr_panic>

	taskENTER_CRITICAL();
 8005616:	f001 fb1d 	bl	8006c54 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005622:	68f9      	ldr	r1, [r7, #12]
 8005624:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005626:	fb01 f303 	mul.w	r3, r1, r3
 800562a:	441a      	add	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005646:	3b01      	subs	r3, #1
 8005648:	68f9      	ldr	r1, [r7, #12]
 800564a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800564c:	fb01 f303 	mul.w	r3, r1, r3
 8005650:	441a      	add	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	22ff      	movs	r2, #255	; 0xff
 800565a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	22ff      	movs	r2, #255	; 0xff
 8005662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d114      	bne.n	8005696 <xQueueGenericReset+0x9e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d01a      	beq.n	80056aa <xQueueGenericReset+0xb2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	3310      	adds	r3, #16
 8005678:	4618      	mov	r0, r3
 800567a:	f000 ff7f 	bl	800657c <xTaskRemoveFromEventList>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d012      	beq.n	80056aa <xQueueGenericReset+0xb2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005684:	4b0d      	ldr	r3, [pc, #52]	; (80056bc <xQueueGenericReset+0xc4>)
 8005686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	e009      	b.n	80056aa <xQueueGenericReset+0xb2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3310      	adds	r3, #16
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff fef8 	bl	8005490 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	3324      	adds	r3, #36	; 0x24
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7ff fef3 	bl	8005490 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80056aa:	f001 fafd 	bl	8006ca8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80056ae:	2301      	movs	r3, #1
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	0800ce2c 	.word	0x0800ce2c
 80056bc:	e000ed04 	.word	0xe000ed04

080056c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af02      	add	r7, sp, #8
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d104      	bne.n	80056de <xQueueGenericCreateStatic+0x1e>
 80056d4:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80056d8:	481f      	ldr	r0, [pc, #124]	; (8005758 <xQueueGenericCreateStatic+0x98>)
 80056da:	f7ff f94e 	bl	800497a <cmr_panic>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d104      	bne.n	80056ee <xQueueGenericCreateStatic+0x2e>
 80056e4:	f44f 71ab 	mov.w	r1, #342	; 0x156
 80056e8:	481c      	ldr	r0, [pc, #112]	; (800575c <xQueueGenericCreateStatic+0x9c>)
 80056ea:	f7ff f946 	bl	800497a <cmr_panic>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d007      	beq.n	8005704 <xQueueGenericCreateStatic+0x44>
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d104      	bne.n	8005704 <xQueueGenericCreateStatic+0x44>
 80056fa:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 80056fe:	4818      	ldr	r0, [pc, #96]	; (8005760 <xQueueGenericCreateStatic+0xa0>)
 8005700:	f7ff f93b 	bl	800497a <cmr_panic>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d107      	bne.n	800571a <xQueueGenericCreateStatic+0x5a>
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d004      	beq.n	800571a <xQueueGenericCreateStatic+0x5a>
 8005710:	f240 115b 	movw	r1, #347	; 0x15b
 8005714:	4813      	ldr	r0, [pc, #76]	; (8005764 <xQueueGenericCreateStatic+0xa4>)
 8005716:	f7ff f930 	bl	800497a <cmr_panic>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800571a:	2348      	movs	r3, #72	; 0x48
 800571c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	2b48      	cmp	r3, #72	; 0x48
 8005722:	d004      	beq.n	800572e <xQueueGenericCreateStatic+0x6e>
 8005724:	f240 1163 	movw	r1, #355	; 0x163
 8005728:	480f      	ldr	r0, [pc, #60]	; (8005768 <xQueueGenericCreateStatic+0xa8>)
 800572a:	f7ff f926 	bl	800497a <cmr_panic>
			(void) xSize; // Placate compiler
 800572e:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d009      	beq.n	800574e <xQueueGenericCreateStatic+0x8e>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800573a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	4613      	mov	r3, r2
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	68b9      	ldr	r1, [r7, #8]
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 f80f 	bl	800576c <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 800574e:	697b      	ldr	r3, [r7, #20]
	}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	0800ce70 	.word	0x0800ce70
 800575c:	0800ced0 	.word	0x0800ced0
 8005760:	0800cf24 	.word	0x0800cf24
 8005764:	0800cf98 	.word	0x0800cf98
 8005768:	0800d00c 	.word	0x0800d00c

0800576c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d103      	bne.n	8005788 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	e002      	b.n	800578e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800579a:	2101      	movs	r1, #1
 800579c:	69b8      	ldr	r0, [r7, #24]
 800579e:	f7ff ff2b 	bl	80055f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80057a2:	bf00      	nop
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
	...

080057ac <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af02      	add	r7, sp, #8
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d104      	bne.n	80057c8 <xQueueCreateCountingSemaphoreStatic+0x1c>
 80057be:	f240 21a2 	movw	r1, #674	; 0x2a2
 80057c2:	4810      	ldr	r0, [pc, #64]	; (8005804 <xQueueCreateCountingSemaphoreStatic+0x58>)
 80057c4:	f7ff f8d9 	bl	800497a <cmr_panic>
		configASSERT( uxInitialCount <= uxMaxCount );
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d904      	bls.n	80057da <xQueueCreateCountingSemaphoreStatic+0x2e>
 80057d0:	f240 21a3 	movw	r1, #675	; 0x2a3
 80057d4:	480c      	ldr	r0, [pc, #48]	; (8005808 <xQueueCreateCountingSemaphoreStatic+0x5c>)
 80057d6:	f7ff f8d0 	bl	800497a <cmr_panic>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80057da:	2302      	movs	r3, #2
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	2100      	movs	r1, #0
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f7ff ff6b 	bl	80056c0 <xQueueGenericCreateStatic>
 80057ea:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d002      	beq.n	80057f8 <xQueueCreateCountingSemaphoreStatic+0x4c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80057f8:	697b      	ldr	r3, [r7, #20]
	}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	0800d064 	.word	0x0800d064
 8005808:	0800d0b0 	.word	0x0800d0b0

0800580c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08a      	sub	sp, #40	; 0x28
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d104      	bne.n	800582a <xQueueGiveFromISR+0x1e>
 8005820:	f240 413d 	movw	r1, #1085	; 0x43d
 8005824:	4833      	ldr	r0, [pc, #204]	; (80058f4 <xQueueGiveFromISR+0xe8>)
 8005826:	f7ff f8a8 	bl	800497a <cmr_panic>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	2b00      	cmp	r3, #0
 8005830:	d004      	beq.n	800583c <xQueueGiveFromISR+0x30>
 8005832:	f240 4141 	movw	r1, #1089	; 0x441
 8005836:	4830      	ldr	r0, [pc, #192]	; (80058f8 <xQueueGiveFromISR+0xec>)
 8005838:	f7ff f89f 	bl	800497a <cmr_panic>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d108      	bne.n	8005856 <xQueueGiveFromISR+0x4a>
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d004      	beq.n	8005856 <xQueueGiveFromISR+0x4a>
 800584c:	f240 4146 	movw	r1, #1094	; 0x446
 8005850:	482a      	ldr	r0, [pc, #168]	; (80058fc <xQueueGiveFromISR+0xf0>)
 8005852:	f7ff f892 	bl	800497a <cmr_panic>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005856:	f001 fac7 	bl	8006de8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800585a:	f3ef 8211 	mrs	r2, BASEPRI
 800585e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	613a      	str	r2, [r7, #16]
 8005870:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005872:	693b      	ldr	r3, [r7, #16]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005874:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587a:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	429a      	cmp	r2, r3
 8005884:	d229      	bcs.n	80058da <xQueueGiveFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800588c:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005896:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800589a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589e:	d112      	bne.n	80058c6 <xQueueGiveFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d015      	beq.n	80058d4 <xQueueGiveFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058a8:	6a3b      	ldr	r3, [r7, #32]
 80058aa:	3324      	adds	r3, #36	; 0x24
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 fe65 	bl	800657c <xTaskRemoveFromEventList>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00d      	beq.n	80058d4 <xQueueGiveFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <xQueueGiveFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2201      	movs	r2, #1
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	e006      	b.n	80058d4 <xQueueGiveFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058c6:	7dfb      	ldrb	r3, [r7, #23]
 80058c8:	3301      	adds	r3, #1
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	b25a      	sxtb	r2, r3
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80058d4:	2301      	movs	r3, #1
 80058d6:	627b      	str	r3, [r7, #36]	; 0x24
 80058d8:	e001      	b.n	80058de <xQueueGiveFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058da:	2300      	movs	r3, #0
 80058dc:	627b      	str	r3, [r7, #36]	; 0x24
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue )
	);
}
 80058e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3728      	adds	r7, #40	; 0x28
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	0800ce2c 	.word	0x0800ce2c
 80058f8:	0800d2b0 	.word	0x0800d2b0
 80058fc:	0800d308 	.word	0x0800d308

08005900 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08a      	sub	sp, #40	; 0x28
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800590e:	2300      	movs	r3, #0
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005916:	6a3b      	ldr	r3, [r7, #32]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <xQueueGenericReceive+0x26>
 800591c:	f240 41dd 	movw	r1, #1245	; 0x4dd
 8005920:	4873      	ldr	r0, [pc, #460]	; (8005af0 <xQueueGenericReceive+0x1f0>)
 8005922:	f7ff f82a 	bl	800497a <cmr_panic>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d108      	bne.n	800593e <xQueueGenericReceive+0x3e>
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	d004      	beq.n	800593e <xQueueGenericReceive+0x3e>
 8005934:	f240 41de 	movw	r1, #1246	; 0x4de
 8005938:	486e      	ldr	r0, [pc, #440]	; (8005af4 <xQueueGenericReceive+0x1f4>)
 800593a:	f7ff f81e 	bl	800497a <cmr_panic>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800593e:	f000 ff7d 	bl	800683c <xTaskGetSchedulerState>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d107      	bne.n	8005958 <xQueueGenericReceive+0x58>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d004      	beq.n	8005958 <xQueueGenericReceive+0x58>
 800594e:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8005952:	4869      	ldr	r0, [pc, #420]	; (8005af8 <xQueueGenericReceive+0x1f8>)
 8005954:	f7ff f811 	bl	800497a <cmr_panic>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005958:	f001 f97c 	bl	8006c54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d046      	beq.n	80059f6 <xQueueGenericReceive+0xf6>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800596e:	68b9      	ldr	r1, [r7, #8]
 8005970:	6a38      	ldr	r0, [r7, #32]
 8005972:	f000 f98f 	bl	8005c94 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d121      	bne.n	80059c0 <xQueueGenericReceive+0xc0>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	1e5a      	subs	r2, r3, #1
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d104      	bne.n	8005996 <xQueueGenericReceive+0x96>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800598c:	f000 ffea 	bl	8006964 <pvTaskIncrementMutexHeldCount>
 8005990:	4602      	mov	r2, r0
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d027      	beq.n	80059ee <xQueueGenericReceive+0xee>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	3310      	adds	r3, #16
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 fdea 	bl	800657c <xTaskRemoveFromEventList>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d01f      	beq.n	80059ee <xQueueGenericReceive+0xee>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80059ae:	4b53      	ldr	r3, [pc, #332]	; (8005afc <xQueueGenericReceive+0x1fc>)
 80059b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	e016      	b.n	80059ee <xQueueGenericReceive+0xee>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00f      	beq.n	80059ee <xQueueGenericReceive+0xee>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	3324      	adds	r3, #36	; 0x24
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fdd2 	bl	800657c <xTaskRemoveFromEventList>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d007      	beq.n	80059ee <xQueueGenericReceive+0xee>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 80059de:	4b47      	ldr	r3, [pc, #284]	; (8005afc <xQueueGenericReceive+0x1fc>)
 80059e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 80059ee:	f001 f95b 	bl	8006ca8 <vPortExitCritical>
				return pdPASS;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e077      	b.n	8005ae6 <xQueueGenericReceive+0x1e6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d103      	bne.n	8005a04 <xQueueGenericReceive+0x104>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059fc:	f001 f954 	bl	8006ca8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a00:	2300      	movs	r3, #0
 8005a02:	e070      	b.n	8005ae6 <xQueueGenericReceive+0x1e6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d106      	bne.n	8005a18 <xQueueGenericReceive+0x118>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8005a0a:	f107 0310 	add.w	r3, r7, #16
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 fe12 	bl	8006638 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a14:	2301      	movs	r3, #1
 8005a16:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a18:	f001 f946 	bl	8006ca8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a1c:	f000 fbb6 	bl	800618c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a20:	f001 f918 	bl	8006c54 <vPortEnterCritical>
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a2a:	b25b      	sxtb	r3, r3
 8005a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a30:	d103      	bne.n	8005a3a <xQueueGenericReceive+0x13a>
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a40:	b25b      	sxtb	r3, r3
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a46:	d103      	bne.n	8005a50 <xQueueGenericReceive+0x150>
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a50:	f001 f92a 	bl	8006ca8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a54:	1d3a      	adds	r2, r7, #4
 8005a56:	f107 0310 	add.w	r3, r7, #16
 8005a5a:	4611      	mov	r1, r2
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f000 fe09 	bl	8006674 <xTaskCheckForTimeOut>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d131      	bne.n	8005acc <xQueueGenericReceive+0x1cc>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a68:	6a38      	ldr	r0, [r7, #32]
 8005a6a:	f000 f98b 	bl	8005d84 <prvIsQueueEmpty>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d025      	beq.n	8005ac0 <xQueueGenericReceive+0x1c0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d108      	bne.n	8005a8e <xQueueGenericReceive+0x18e>
					{
						taskENTER_CRITICAL();
 8005a7c:	f001 f8ea 	bl	8006c54 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 fef7 	bl	8006878 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8005a8a:	f001 f90d 	bl	8006ca8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	3324      	adds	r3, #36	; 0x24
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	4611      	mov	r1, r2
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fd50 	bl	800653c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a9c:	6a38      	ldr	r0, [r7, #32]
 8005a9e:	f000 f91f 	bl	8005ce0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005aa2:	f000 fb81 	bl	80061a8 <xTaskResumeAll>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f47f af55 	bne.w	8005958 <xQueueGenericReceive+0x58>
				{
					portYIELD_WITHIN_API();
 8005aae:	4b13      	ldr	r3, [pc, #76]	; (8005afc <xQueueGenericReceive+0x1fc>)
 8005ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	e74b      	b.n	8005958 <xQueueGenericReceive+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ac0:	6a38      	ldr	r0, [r7, #32]
 8005ac2:	f000 f90d 	bl	8005ce0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ac6:	f000 fb6f 	bl	80061a8 <xTaskResumeAll>
 8005aca:	e745      	b.n	8005958 <xQueueGenericReceive+0x58>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8005acc:	6a38      	ldr	r0, [r7, #32]
 8005ace:	f000 f907 	bl	8005ce0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ad2:	f000 fb69 	bl	80061a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ad6:	6a38      	ldr	r0, [r7, #32]
 8005ad8:	f000 f954 	bl	8005d84 <prvIsQueueEmpty>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f43f af3a 	beq.w	8005958 <xQueueGenericReceive+0x58>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ae4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3728      	adds	r7, #40	; 0x28
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	0800ce2c 	.word	0x0800ce2c
 8005af4:	0800d3a0 	.word	0x0800d3a0
 8005af8:	0800d21c 	.word	0x0800d21c
 8005afc:	e000ed04 	.word	0xe000ed04

08005b00 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08c      	sub	sp, #48	; 0x30
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 8005b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d104      	bne.n	8005b20 <xQueueReceiveFromISR+0x20>
 8005b16:	f240 51a1 	movw	r1, #1441	; 0x5a1
 8005b1a:	4830      	ldr	r0, [pc, #192]	; (8005bdc <xQueueReceiveFromISR+0xdc>)
 8005b1c:	f7fe ff2d 	bl	800497a <cmr_panic>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d108      	bne.n	8005b38 <xQueueReceiveFromISR+0x38>
 8005b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d004      	beq.n	8005b38 <xQueueReceiveFromISR+0x38>
 8005b2e:	f240 51a2 	movw	r1, #1442	; 0x5a2
 8005b32:	482b      	ldr	r0, [pc, #172]	; (8005be0 <xQueueReceiveFromISR+0xe0>)
 8005b34:	f7fe ff21 	bl	800497a <cmr_panic>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b38:	f001 f956 	bl	8006de8 <vPortValidateInterruptPriority>
	__asm volatile
 8005b3c:	f3ef 8211 	mrs	r2, BASEPRI
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	61ba      	str	r2, [r7, #24]
 8005b52:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005b54:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b56:	627b      	str	r3, [r7, #36]	; 0x24
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	623b      	str	r3, [r7, #32]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d02d      	beq.n	8005bc0 <xQueueReceiveFromISR+0xc0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b6a:	77fb      	strb	r3, [r7, #31]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b6c:	68b9      	ldr	r1, [r7, #8]
 8005b6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b70:	f000 f890 	bl	8005c94 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	1e5a      	subs	r2, r3, #1
 8005b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005b7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b84:	d112      	bne.n	8005bac <xQueueReceiveFromISR+0xac>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d015      	beq.n	8005bba <xQueueReceiveFromISR+0xba>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b90:	3310      	adds	r3, #16
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fcf2 	bl	800657c <xTaskRemoveFromEventList>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00d      	beq.n	8005bba <xQueueReceiveFromISR+0xba>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00a      	beq.n	8005bba <xQueueReceiveFromISR+0xba>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	e006      	b.n	8005bba <xQueueReceiveFromISR+0xba>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005bac:	7ffb      	ldrb	r3, [r7, #31]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	b25a      	sxtb	r2, r3
 8005bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bbe:	e001      	b.n	8005bc4 <xQueueReceiveFromISR+0xc4>
		}
		else
		{
			xReturn = pdFAIL;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f383 8811 	msr	BASEPRI, r3
}
 8005bce:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3730      	adds	r7, #48	; 0x30
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	0800ce2c 	.word	0x0800ce2c
 8005be0:	0800d3a0 	.word	0x0800d3a0

08005be4 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08a      	sub	sp, #40	; 0x28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005bf2:	6a3b      	ldr	r3, [r7, #32]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d104      	bne.n	8005c02 <xQueuePeekFromISR+0x1e>
 8005bf8:	f240 51fd 	movw	r1, #1533	; 0x5fd
 8005bfc:	4822      	ldr	r0, [pc, #136]	; (8005c88 <xQueuePeekFromISR+0xa4>)
 8005bfe:	f7fe febc 	bl	800497a <cmr_panic>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d108      	bne.n	8005c1a <xQueuePeekFromISR+0x36>
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d004      	beq.n	8005c1a <xQueuePeekFromISR+0x36>
 8005c10:	f240 51fe 	movw	r1, #1534	; 0x5fe
 8005c14:	481d      	ldr	r0, [pc, #116]	; (8005c8c <xQueuePeekFromISR+0xa8>)
 8005c16:	f7fe feb0 	bl	800497a <cmr_panic>
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d104      	bne.n	8005c2c <xQueuePeekFromISR+0x48>
 8005c22:	f240 51ff 	movw	r1, #1535	; 0x5ff
 8005c26:	481a      	ldr	r0, [pc, #104]	; (8005c90 <xQueuePeekFromISR+0xac>)
 8005c28:	f7fe fea7 	bl	800497a <cmr_panic>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c2c:	f001 f8dc 	bl	8006de8 <vPortValidateInterruptPriority>
	__asm volatile
 8005c30:	f3ef 8211 	mrs	r2, BASEPRI
 8005c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	617a      	str	r2, [r7, #20]
 8005c46:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005c48:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c4a:	61fb      	str	r3, [r7, #28]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00c      	beq.n	8005c6e <xQueuePeekFromISR+0x8a>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	61bb      	str	r3, [r7, #24]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c5a:	6839      	ldr	r1, [r7, #0]
 8005c5c:	6a38      	ldr	r0, [r7, #32]
 8005c5e:	f000 f819 	bl	8005c94 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	60da      	str	r2, [r3, #12]

			xReturn = pdPASS;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c6c:	e001      	b.n	8005c72 <xQueuePeekFromISR+0x8e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f383 8811 	msr	BASEPRI, r3
}
 8005c7c:	bf00      	nop
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3728      	adds	r7, #40	; 0x28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	0800ce2c 	.word	0x0800ce2c
 8005c8c:	0800d3a0 	.word	0x0800d3a0
 8005c90:	0800d428 	.word	0x0800d428

08005c94 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d018      	beq.n	8005cd8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	441a      	add	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68da      	ldr	r2, [r3, #12]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d303      	bcc.n	8005cc8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68d9      	ldr	r1, [r3, #12]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6838      	ldr	r0, [r7, #0]
 8005cd4:	f006 fa9e 	bl	800c214 <memcpy>
	}
}
 8005cd8:	bf00      	nop
 8005cda:	3708      	adds	r7, #8
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ce8:	f000 ffb4 	bl	8006c54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cf2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cf4:	e011      	b.n	8005d1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d012      	beq.n	8005d24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	3324      	adds	r3, #36	; 0x24
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fc3a 	bl	800657c <xTaskRemoveFromEventList>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d0e:	f000 fd09 	bl	8006724 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d12:	7bfb      	ldrb	r3, [r7, #15]
 8005d14:	3b01      	subs	r3, #1
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	dce9      	bgt.n	8005cf6 <prvUnlockQueue+0x16>
 8005d22:	e000      	b.n	8005d26 <prvUnlockQueue+0x46>
					break;
 8005d24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	22ff      	movs	r2, #255	; 0xff
 8005d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d2e:	f000 ffbb 	bl	8006ca8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d32:	f000 ff8f 	bl	8006c54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d3e:	e011      	b.n	8005d64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d012      	beq.n	8005d6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3310      	adds	r3, #16
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 fc15 	bl	800657c <xTaskRemoveFromEventList>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d58:	f000 fce4 	bl	8006724 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d5c:	7bbb      	ldrb	r3, [r7, #14]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	dce9      	bgt.n	8005d40 <prvUnlockQueue+0x60>
 8005d6c:	e000      	b.n	8005d70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	22ff      	movs	r2, #255	; 0xff
 8005d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d78:	f000 ff96 	bl	8006ca8 <vPortExitCritical>
}
 8005d7c:	bf00      	nop
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d8c:	f000 ff62 	bl	8006c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d102      	bne.n	8005d9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	e001      	b.n	8005da2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005da2:	f000 ff81 	bl	8006ca8 <vPortExitCritical>

	return xReturn;
 8005da6:	68fb      	ldr	r3, [r7, #12]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b08a      	sub	sp, #40	; 0x28
 8005db4:	af04      	add	r7, sp, #16
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
 8005dbc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d104      	bne.n	8005dce <xTaskCreateStatic+0x1e>
 8005dc4:	f240 2155 	movw	r1, #597	; 0x255
 8005dc8:	4817      	ldr	r0, [pc, #92]	; (8005e28 <xTaskCreateStatic+0x78>)
 8005dca:	f7fe fdd6 	bl	800497a <cmr_panic>
		configASSERT( pxTaskBuffer != NULL );
 8005dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d104      	bne.n	8005dde <xTaskCreateStatic+0x2e>
 8005dd4:	f240 2156 	movw	r1, #598	; 0x256
 8005dd8:	4814      	ldr	r0, [pc, #80]	; (8005e2c <xTaskCreateStatic+0x7c>)
 8005dda:	f7fe fdce 	bl	800497a <cmr_panic>

		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d01a      	beq.n	8005e1a <xTaskCreateStatic+0x6a>
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d017      	beq.n	8005e1a <xTaskCreateStatic+0x6a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dec:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df2:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005df4:	2300      	movs	r3, #0
 8005df6:	9303      	str	r3, [sp, #12]
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	9302      	str	r3, [sp, #8]
 8005dfc:	f107 0310 	add.w	r3, r7, #16
 8005e00:	9301      	str	r3, [sp, #4]
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	68b9      	ldr	r1, [r7, #8]
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 f80f 	bl	8005e30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e12:	6978      	ldr	r0, [r7, #20]
 8005e14:	f000 f880 	bl	8005f18 <prvAddNewTaskToReadyList>
 8005e18:	e001      	b.n	8005e1e <xTaskCreateStatic+0x6e>
		}
		else
		{
			xReturn = NULL;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 8005e1e:	693b      	ldr	r3, [r7, #16]
	}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3718      	adds	r7, #24
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	0800d4c4 	.word	0x0800d4c4
 8005e2c:	0800d518 	.word	0x0800d518

08005e30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
 8005e3c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	f023 0307 	bic.w	r3, r3, #7
 8005e56:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d004      	beq.n	8005e6c <prvInitialiseNewTask+0x3c>
 8005e62:	f240 312b 	movw	r1, #811	; 0x32b
 8005e66:	482b      	ldr	r0, [pc, #172]	; (8005f14 <prvInitialiseNewTask+0xe4>)
 8005e68:	f7fe fd87 	bl	800497a <cmr_panic>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	617b      	str	r3, [r7, #20]
 8005e70:	e012      	b.n	8005e98 <prvInitialiseNewTask+0x68>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	4413      	add	r3, r2
 8005e78:	7819      	ldrb	r1, [r3, #0]
 8005e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	4413      	add	r3, r2
 8005e80:	3334      	adds	r3, #52	; 0x34
 8005e82:	460a      	mov	r2, r1
 8005e84:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d006      	beq.n	8005ea0 <prvInitialiseNewTask+0x70>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	3301      	adds	r3, #1
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	2b1f      	cmp	r3, #31
 8005e9c:	d9e9      	bls.n	8005e72 <prvInitialiseNewTask+0x42>
 8005e9e:	e000      	b.n	8005ea2 <prvInitialiseNewTask+0x72>
		{
			break;
 8005ea0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	2b06      	cmp	r3, #6
 8005eae:	d901      	bls.n	8005eb4 <prvInitialiseNewTask+0x84>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005eb0:	2306      	movs	r3, #6
 8005eb2:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb6:	6a3a      	ldr	r2, [r7, #32]
 8005eb8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebc:	6a3a      	ldr	r2, [r7, #32]
 8005ebe:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8005ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec8:	3304      	adds	r3, #4
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff fb00 	bl	80054d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed2:	3318      	adds	r3, #24
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7ff fafb 	bl	80054d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ede:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	f1c3 0207 	rsb	r2, r3, #7
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eee:	625a      	str	r2, [r3, #36]	; 0x24
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	68f9      	ldr	r1, [r7, #12]
 8005ef4:	6938      	ldr	r0, [r7, #16]
 8005ef6:	f000 fdaf 	bl	8006a58 <pxPortInitialiseStack>
 8005efa:	4602      	mov	r2, r0
 8005efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <prvInitialiseNewTask+0xdc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f0c:	bf00      	nop
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	0800d56c 	.word	0x0800d56c

08005f18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f20:	f000 fe98 	bl	8006c54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f24:	4b2a      	ldr	r3, [pc, #168]	; (8005fd0 <prvAddNewTaskToReadyList+0xb8>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	4a29      	ldr	r2, [pc, #164]	; (8005fd0 <prvAddNewTaskToReadyList+0xb8>)
 8005f2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f2e:	4b29      	ldr	r3, [pc, #164]	; (8005fd4 <prvAddNewTaskToReadyList+0xbc>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d109      	bne.n	8005f4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f36:	4a27      	ldr	r2, [pc, #156]	; (8005fd4 <prvAddNewTaskToReadyList+0xbc>)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f3c:	4b24      	ldr	r3, [pc, #144]	; (8005fd0 <prvAddNewTaskToReadyList+0xb8>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d110      	bne.n	8005f66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f44:	f000 fc12 	bl	800676c <prvInitialiseTaskLists>
 8005f48:	e00d      	b.n	8005f66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f4a:	4b23      	ldr	r3, [pc, #140]	; (8005fd8 <prvAddNewTaskToReadyList+0xc0>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d109      	bne.n	8005f66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f52:	4b20      	ldr	r3, [pc, #128]	; (8005fd4 <prvAddNewTaskToReadyList+0xbc>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d802      	bhi.n	8005f66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f60:	4a1c      	ldr	r2, [pc, #112]	; (8005fd4 <prvAddNewTaskToReadyList+0xbc>)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f66:	4b1d      	ldr	r3, [pc, #116]	; (8005fdc <prvAddNewTaskToReadyList+0xc4>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	4a1b      	ldr	r2, [pc, #108]	; (8005fdc <prvAddNewTaskToReadyList+0xc4>)
 8005f6e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	2201      	movs	r2, #1
 8005f76:	409a      	lsls	r2, r3
 8005f78:	4b19      	ldr	r3, [pc, #100]	; (8005fe0 <prvAddNewTaskToReadyList+0xc8>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	4a18      	ldr	r2, [pc, #96]	; (8005fe0 <prvAddNewTaskToReadyList+0xc8>)
 8005f80:	6013      	str	r3, [r2, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f86:	4613      	mov	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4a15      	ldr	r2, [pc, #84]	; (8005fe4 <prvAddNewTaskToReadyList+0xcc>)
 8005f90:	441a      	add	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	3304      	adds	r3, #4
 8005f96:	4619      	mov	r1, r3
 8005f98:	4610      	mov	r0, r2
 8005f9a:	f7ff faa6 	bl	80054ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f9e:	f000 fe83 	bl	8006ca8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005fa2:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <prvAddNewTaskToReadyList+0xc0>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00e      	beq.n	8005fc8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005faa:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <prvAddNewTaskToReadyList+0xbc>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d207      	bcs.n	8005fc8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005fb8:	4b0b      	ldr	r3, [pc, #44]	; (8005fe8 <prvAddNewTaskToReadyList+0xd0>)
 8005fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fc8:	bf00      	nop
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	2003461c 	.word	0x2003461c
 8005fd4:	20034534 	.word	0x20034534
 8005fd8:	20034628 	.word	0x20034628
 8005fdc:	20034638 	.word	0x20034638
 8005fe0:	20034624 	.word	0x20034624
 8005fe4:	20034538 	.word	0x20034538
 8005fe8:	e000ed04 	.word	0xe000ed04

08005fec <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d104      	bne.n	800600a <vTaskDelayUntil+0x1e>
 8006000:	f240 4179 	movw	r1, #1145	; 0x479
 8006004:	482c      	ldr	r0, [pc, #176]	; (80060b8 <vTaskDelayUntil+0xcc>)
 8006006:	f7fe fcb8 	bl	800497a <cmr_panic>
		configASSERT( ( xTimeIncrement > 0U ) );
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d104      	bne.n	800601a <vTaskDelayUntil+0x2e>
 8006010:	f240 417a 	movw	r1, #1146	; 0x47a
 8006014:	4829      	ldr	r0, [pc, #164]	; (80060bc <vTaskDelayUntil+0xd0>)
 8006016:	f7fe fcb0 	bl	800497a <cmr_panic>
		configASSERT( uxSchedulerSuspended == 0 );
 800601a:	4b29      	ldr	r3, [pc, #164]	; (80060c0 <vTaskDelayUntil+0xd4>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d004      	beq.n	800602c <vTaskDelayUntil+0x40>
 8006022:	f240 417b 	movw	r1, #1147	; 0x47b
 8006026:	4827      	ldr	r0, [pc, #156]	; (80060c4 <vTaskDelayUntil+0xd8>)
 8006028:	f7fe fca7 	bl	800497a <cmr_panic>

		vTaskSuspendAll();
 800602c:	f000 f8ae 	bl	800618c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006030:	4b25      	ldr	r3, [pc, #148]	; (80060c8 <vTaskDelayUntil+0xdc>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	4413      	add	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	429a      	cmp	r2, r3
 8006048:	d20b      	bcs.n	8006062 <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	429a      	cmp	r2, r3
 8006052:	d211      	bcs.n	8006078 <vTaskDelayUntil+0x8c>
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	429a      	cmp	r2, r3
 800605a:	d90d      	bls.n	8006078 <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
 800605c:	2301      	movs	r3, #1
 800605e:	617b      	str	r3, [r7, #20]
 8006060:	e00a      	b.n	8006078 <vTaskDelayUntil+0x8c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	429a      	cmp	r2, r3
 800606a:	d303      	bcc.n	8006074 <vTaskDelayUntil+0x88>
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	429a      	cmp	r2, r3
 8006072:	d901      	bls.n	8006078 <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
 8006074:	2301      	movs	r3, #1
 8006076:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d006      	beq.n	8006092 <vTaskDelayUntil+0xa6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2100      	movs	r1, #0
 800608c:	4618      	mov	r0, r3
 800608e:	f000 fc7d 	bl	800698c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006092:	f000 f889 	bl	80061a8 <xTaskResumeAll>
 8006096:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d107      	bne.n	80060ae <vTaskDelayUntil+0xc2>
		{
			portYIELD_WITHIN_API();
 800609e:	4b0b      	ldr	r3, [pc, #44]	; (80060cc <vTaskDelayUntil+0xe0>)
 80060a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060ae:	bf00      	nop
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	0800d614 	.word	0x0800d614
 80060bc:	0800d664 	.word	0x0800d664
 80060c0:	20034644 	.word	0x20034644
 80060c4:	0800d6b8 	.word	0x0800d6b8
 80060c8:	20034620 	.word	0x20034620
 80060cc:	e000ed04 	.word	0xe000ed04

080060d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08a      	sub	sp, #40	; 0x28
 80060d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060d6:	2300      	movs	r3, #0
 80060d8:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060da:	2300      	movs	r3, #0
 80060dc:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060de:	1d3a      	adds	r2, r7, #4
 80060e0:	f107 0108 	add.w	r1, r7, #8
 80060e4:	f107 030c 	add.w	r3, r7, #12
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fe fdd7 	bl	8004c9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	9202      	str	r2, [sp, #8]
 80060f6:	9301      	str	r3, [sp, #4]
 80060f8:	2300      	movs	r3, #0
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	2300      	movs	r3, #0
 80060fe:	460a      	mov	r2, r1
 8006100:	491b      	ldr	r1, [pc, #108]	; (8006170 <vTaskStartScheduler+0xa0>)
 8006102:	481c      	ldr	r0, [pc, #112]	; (8006174 <vTaskStartScheduler+0xa4>)
 8006104:	f7ff fe54 	bl	8005db0 <xTaskCreateStatic>
 8006108:	4603      	mov	r3, r0
 800610a:	4a1b      	ldr	r2, [pc, #108]	; (8006178 <vTaskStartScheduler+0xa8>)
 800610c:	6013      	str	r3, [r2, #0]
												( void * ) NULL,
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800610e:	4b1a      	ldr	r3, [pc, #104]	; (8006178 <vTaskStartScheduler+0xa8>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d002      	beq.n	800611c <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 8006116:	2301      	movs	r3, #1
 8006118:	617b      	str	r3, [r7, #20]
 800611a:	e001      	b.n	8006120 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 800611c:	2300      	movs	r3, #0
 800611e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d116      	bne.n	8006154 <vTaskStartScheduler+0x84>
	__asm volatile
 8006126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	613b      	str	r3, [r7, #16]
}
 8006138:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800613a:	4b10      	ldr	r3, [pc, #64]	; (800617c <vTaskStartScheduler+0xac>)
 800613c:	f04f 32ff 	mov.w	r2, #4294967295
 8006140:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006142:	4b0f      	ldr	r3, [pc, #60]	; (8006180 <vTaskStartScheduler+0xb0>)
 8006144:	2201      	movs	r2, #1
 8006146:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006148:	4b0e      	ldr	r3, [pc, #56]	; (8006184 <vTaskStartScheduler+0xb4>)
 800614a:	2200      	movs	r2, #0
 800614c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800614e:	f000 fcfb 	bl	8006b48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006152:	e008      	b.n	8006166 <vTaskStartScheduler+0x96>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615a:	d104      	bne.n	8006166 <vTaskStartScheduler+0x96>
 800615c:	f240 7184 	movw	r1, #1924	; 0x784
 8006160:	4809      	ldr	r0, [pc, #36]	; (8006188 <vTaskStartScheduler+0xb8>)
 8006162:	f7fe fc0a 	bl	800497a <cmr_panic>
}
 8006166:	bf00      	nop
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	0800d7a0 	.word	0x0800d7a0
 8006174:	0800673d 	.word	0x0800673d
 8006178:	20034640 	.word	0x20034640
 800617c:	2003463c 	.word	0x2003463c
 8006180:	20034628 	.word	0x20034628
 8006184:	20034620 	.word	0x20034620
 8006188:	0800d7a8 	.word	0x0800d7a8

0800618c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006190:	4b04      	ldr	r3, [pc, #16]	; (80061a4 <vTaskSuspendAll+0x18>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3301      	adds	r3, #1
 8006196:	4a03      	ldr	r2, [pc, #12]	; (80061a4 <vTaskSuspendAll+0x18>)
 8006198:	6013      	str	r3, [r2, #0]
}
 800619a:	bf00      	nop
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr
 80061a4:	20034644 	.word	0x20034644

080061a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061b2:	2300      	movs	r3, #0
 80061b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061b6:	4b3e      	ldr	r3, [pc, #248]	; (80062b0 <xTaskResumeAll+0x108>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d104      	bne.n	80061c8 <xTaskResumeAll+0x20>
 80061be:	f44f 61fd 	mov.w	r1, #2024	; 0x7e8
 80061c2:	483c      	ldr	r0, [pc, #240]	; (80062b4 <xTaskResumeAll+0x10c>)
 80061c4:	f7fe fbd9 	bl	800497a <cmr_panic>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80061c8:	f000 fd44 	bl	8006c54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061cc:	4b38      	ldr	r3, [pc, #224]	; (80062b0 <xTaskResumeAll+0x108>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3b01      	subs	r3, #1
 80061d2:	4a37      	ldr	r2, [pc, #220]	; (80062b0 <xTaskResumeAll+0x108>)
 80061d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061d6:	4b36      	ldr	r3, [pc, #216]	; (80062b0 <xTaskResumeAll+0x108>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d161      	bne.n	80062a2 <xTaskResumeAll+0xfa>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061de:	4b36      	ldr	r3, [pc, #216]	; (80062b8 <xTaskResumeAll+0x110>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d05d      	beq.n	80062a2 <xTaskResumeAll+0xfa>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061e6:	e02e      	b.n	8006246 <xTaskResumeAll+0x9e>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80061e8:	4b34      	ldr	r3, [pc, #208]	; (80062bc <xTaskResumeAll+0x114>)
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	3318      	adds	r3, #24
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7ff f9d5 	bl	80055a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	3304      	adds	r3, #4
 80061fe:	4618      	mov	r0, r3
 8006200:	f7ff f9d0 	bl	80055a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	2201      	movs	r2, #1
 800620a:	409a      	lsls	r2, r3
 800620c:	4b2c      	ldr	r3, [pc, #176]	; (80062c0 <xTaskResumeAll+0x118>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4313      	orrs	r3, r2
 8006212:	4a2b      	ldr	r2, [pc, #172]	; (80062c0 <xTaskResumeAll+0x118>)
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800621a:	4613      	mov	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4413      	add	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4a28      	ldr	r2, [pc, #160]	; (80062c4 <xTaskResumeAll+0x11c>)
 8006224:	441a      	add	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3304      	adds	r3, #4
 800622a:	4619      	mov	r1, r3
 800622c:	4610      	mov	r0, r2
 800622e:	f7ff f95c 	bl	80054ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006236:	4b24      	ldr	r3, [pc, #144]	; (80062c8 <xTaskResumeAll+0x120>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623c:	429a      	cmp	r2, r3
 800623e:	d302      	bcc.n	8006246 <xTaskResumeAll+0x9e>
					{
						xYieldPending = pdTRUE;
 8006240:	4b22      	ldr	r3, [pc, #136]	; (80062cc <xTaskResumeAll+0x124>)
 8006242:	2201      	movs	r2, #1
 8006244:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006246:	4b1d      	ldr	r3, [pc, #116]	; (80062bc <xTaskResumeAll+0x114>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1cc      	bne.n	80061e8 <xTaskResumeAll+0x40>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <xTaskResumeAll+0xb0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006254:	f000 facc 	bl	80067f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006258:	4b1d      	ldr	r3, [pc, #116]	; (80062d0 <xTaskResumeAll+0x128>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d010      	beq.n	8006286 <xTaskResumeAll+0xde>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006264:	f000 f85a 	bl	800631c <xTaskIncrementTick>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d002      	beq.n	8006274 <xTaskResumeAll+0xcc>
							{
								xYieldPending = pdTRUE;
 800626e:	4b17      	ldr	r3, [pc, #92]	; (80062cc <xTaskResumeAll+0x124>)
 8006270:	2201      	movs	r2, #1
 8006272:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	3b01      	subs	r3, #1
 8006278:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1f1      	bne.n	8006264 <xTaskResumeAll+0xbc>

						uxPendedTicks = 0;
 8006280:	4b13      	ldr	r3, [pc, #76]	; (80062d0 <xTaskResumeAll+0x128>)
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006286:	4b11      	ldr	r3, [pc, #68]	; (80062cc <xTaskResumeAll+0x124>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d009      	beq.n	80062a2 <xTaskResumeAll+0xfa>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800628e:	2301      	movs	r3, #1
 8006290:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006292:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <xTaskResumeAll+0x12c>)
 8006294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062a2:	f000 fd01 	bl	8006ca8 <vPortExitCritical>

	return xAlreadyYielded;
 80062a6:	68bb      	ldr	r3, [r7, #8]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	20034644 	.word	0x20034644
 80062b4:	0800d818 	.word	0x0800d818
 80062b8:	2003461c 	.word	0x2003461c
 80062bc:	200345f4 	.word	0x200345f4
 80062c0:	20034624 	.word	0x20034624
 80062c4:	20034538 	.word	0x20034538
 80062c8:	20034534 	.word	0x20034534
 80062cc:	20034630 	.word	0x20034630
 80062d0:	2003462c 	.word	0x2003462c
 80062d4:	e000ed04 	.word	0xe000ed04

080062d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80062de:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <xTaskGetTickCount+0x1c>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80062e4:	687b      	ldr	r3, [r7, #4]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	20034620 	.word	0x20034620

080062f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062fe:	f000 fd73 	bl	8006de8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006302:	2300      	movs	r3, #0
 8006304:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006306:	4b04      	ldr	r3, [pc, #16]	; (8006318 <xTaskGetTickCountFromISR+0x20>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800630c:	683b      	ldr	r3, [r7, #0]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	20034620 	.word	0x20034620

0800631c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006322:	2300      	movs	r3, #0
 8006324:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006326:	4b4e      	ldr	r3, [pc, #312]	; (8006460 <xTaskIncrementTick+0x144>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	f040 8087 	bne.w	800643e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8006330:	4b4c      	ldr	r3, [pc, #304]	; (8006464 <xTaskIncrementTick+0x148>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	3301      	adds	r3, #1
 8006336:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006338:	4a4a      	ldr	r2, [pc, #296]	; (8006464 <xTaskIncrementTick+0x148>)
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d11a      	bne.n	800637a <xTaskIncrementTick+0x5e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006344:	4b48      	ldr	r3, [pc, #288]	; (8006468 <xTaskIncrementTick+0x14c>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d004      	beq.n	8006358 <xTaskIncrementTick+0x3c>
 800634e:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8006352:	4846      	ldr	r0, [pc, #280]	; (800646c <xTaskIncrementTick+0x150>)
 8006354:	f7fe fb11 	bl	800497a <cmr_panic>
 8006358:	4b43      	ldr	r3, [pc, #268]	; (8006468 <xTaskIncrementTick+0x14c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	60fb      	str	r3, [r7, #12]
 800635e:	4b44      	ldr	r3, [pc, #272]	; (8006470 <xTaskIncrementTick+0x154>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a41      	ldr	r2, [pc, #260]	; (8006468 <xTaskIncrementTick+0x14c>)
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	4a42      	ldr	r2, [pc, #264]	; (8006470 <xTaskIncrementTick+0x154>)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6013      	str	r3, [r2, #0]
 800636c:	4b41      	ldr	r3, [pc, #260]	; (8006474 <xTaskIncrementTick+0x158>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3301      	adds	r3, #1
 8006372:	4a40      	ldr	r2, [pc, #256]	; (8006474 <xTaskIncrementTick+0x158>)
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	f000 fa3b 	bl	80067f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800637a:	4b3f      	ldr	r3, [pc, #252]	; (8006478 <xTaskIncrementTick+0x15c>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	429a      	cmp	r2, r3
 8006382:	d34d      	bcc.n	8006420 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006384:	4b38      	ldr	r3, [pc, #224]	; (8006468 <xTaskIncrementTick+0x14c>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <xTaskIncrementTick+0x76>
 800638e:	2301      	movs	r3, #1
 8006390:	e000      	b.n	8006394 <xTaskIncrementTick+0x78>
 8006392:	2300      	movs	r3, #0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d004      	beq.n	80063a2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006398:	4b37      	ldr	r3, [pc, #220]	; (8006478 <xTaskIncrementTick+0x15c>)
 800639a:	f04f 32ff 	mov.w	r2, #4294967295
 800639e:	601a      	str	r2, [r3, #0]
					break;
 80063a0:	e03e      	b.n	8006420 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80063a2:	4b31      	ldr	r3, [pc, #196]	; (8006468 <xTaskIncrementTick+0x14c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d203      	bcs.n	80063c2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80063ba:	4a2f      	ldr	r2, [pc, #188]	; (8006478 <xTaskIncrementTick+0x15c>)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6013      	str	r3, [r2, #0]
						break;
 80063c0:	e02e      	b.n	8006420 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	3304      	adds	r3, #4
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7ff f8ec 	bl	80055a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d004      	beq.n	80063de <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	3318      	adds	r3, #24
 80063d8:	4618      	mov	r0, r3
 80063da:	f7ff f8e3 	bl	80055a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e2:	2201      	movs	r2, #1
 80063e4:	409a      	lsls	r2, r3
 80063e6:	4b25      	ldr	r3, [pc, #148]	; (800647c <xTaskIncrementTick+0x160>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	4a23      	ldr	r2, [pc, #140]	; (800647c <xTaskIncrementTick+0x160>)
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f4:	4613      	mov	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4a20      	ldr	r2, [pc, #128]	; (8006480 <xTaskIncrementTick+0x164>)
 80063fe:	441a      	add	r2, r3
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	3304      	adds	r3, #4
 8006404:	4619      	mov	r1, r3
 8006406:	4610      	mov	r0, r2
 8006408:	f7ff f86f 	bl	80054ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006410:	4b1c      	ldr	r3, [pc, #112]	; (8006484 <xTaskIncrementTick+0x168>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006416:	429a      	cmp	r2, r3
 8006418:	d3b4      	bcc.n	8006384 <xTaskIncrementTick+0x68>
						{
							xSwitchRequired = pdTRUE;
 800641a:	2301      	movs	r3, #1
 800641c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800641e:	e7b1      	b.n	8006384 <xTaskIncrementTick+0x68>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006420:	4b18      	ldr	r3, [pc, #96]	; (8006484 <xTaskIncrementTick+0x168>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006426:	4916      	ldr	r1, [pc, #88]	; (8006480 <xTaskIncrementTick+0x164>)
 8006428:	4613      	mov	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	440b      	add	r3, r1
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d907      	bls.n	8006448 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8006438:	2301      	movs	r3, #1
 800643a:	617b      	str	r3, [r7, #20]
 800643c:	e004      	b.n	8006448 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800643e:	4b12      	ldr	r3, [pc, #72]	; (8006488 <xTaskIncrementTick+0x16c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3301      	adds	r3, #1
 8006444:	4a10      	ldr	r2, [pc, #64]	; (8006488 <xTaskIncrementTick+0x16c>)
 8006446:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006448:	4b10      	ldr	r3, [pc, #64]	; (800648c <xTaskIncrementTick+0x170>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8006450:	2301      	movs	r3, #1
 8006452:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006454:	697b      	ldr	r3, [r7, #20]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20034644 	.word	0x20034644
 8006464:	20034620 	.word	0x20034620
 8006468:	200345ec 	.word	0x200345ec
 800646c:	0800d8b0 	.word	0x0800d8b0
 8006470:	200345f0 	.word	0x200345f0
 8006474:	20034634 	.word	0x20034634
 8006478:	2003463c 	.word	0x2003463c
 800647c:	20034624 	.word	0x20034624
 8006480:	20034538 	.word	0x20034538
 8006484:	20034534 	.word	0x20034534
 8006488:	2003462c 	.word	0x2003462c
 800648c:	20034630 	.word	0x20034630

08006490 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006496:	4b23      	ldr	r3, [pc, #140]	; (8006524 <vTaskSwitchContext+0x94>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800649e:	4b22      	ldr	r3, [pc, #136]	; (8006528 <vTaskSwitchContext+0x98>)
 80064a0:	2201      	movs	r2, #1
 80064a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064a4:	e039      	b.n	800651a <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 80064a6:	4b20      	ldr	r3, [pc, #128]	; (8006528 <vTaskSwitchContext+0x98>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80064ac:	4b1f      	ldr	r3, [pc, #124]	; (800652c <vTaskSwitchContext+0x9c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	fab3 f383 	clz	r3, r3
 80064b8:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 80064ba:	78fb      	ldrb	r3, [r7, #3]
 80064bc:	f1c3 031f 	rsb	r3, r3, #31
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	491b      	ldr	r1, [pc, #108]	; (8006530 <vTaskSwitchContext+0xa0>)
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4613      	mov	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	440b      	add	r3, r1
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d104      	bne.n	80064e0 <vTaskSwitchContext+0x50>
 80064d6:	f640 21f6 	movw	r1, #2806	; 0xaf6
 80064da:	4816      	ldr	r0, [pc, #88]	; (8006534 <vTaskSwitchContext+0xa4>)
 80064dc:	f7fe fa4d 	bl	800497a <cmr_panic>
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	4613      	mov	r3, r2
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4a11      	ldr	r2, [pc, #68]	; (8006530 <vTaskSwitchContext+0xa0>)
 80064ec:	4413      	add	r3, r2
 80064ee:	60bb      	str	r3, [r7, #8]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	605a      	str	r2, [r3, #4]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	3308      	adds	r3, #8
 8006502:	429a      	cmp	r2, r3
 8006504:	d104      	bne.n	8006510 <vTaskSwitchContext+0x80>
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	605a      	str	r2, [r3, #4]
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	4a08      	ldr	r2, [pc, #32]	; (8006538 <vTaskSwitchContext+0xa8>)
 8006518:	6013      	str	r3, [r2, #0]
}
 800651a:	bf00      	nop
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	20034644 	.word	0x20034644
 8006528:	20034630 	.word	0x20034630
 800652c:	20034624 	.word	0x20034624
 8006530:	20034538 	.word	0x20034538
 8006534:	0800d918 	.word	0x0800d918
 8006538:	20034534 	.word	0x20034534

0800653c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d104      	bne.n	8006556 <vTaskPlaceOnEventList+0x1a>
 800654c:	f640 3106 	movw	r1, #2822	; 0xb06
 8006550:	4808      	ldr	r0, [pc, #32]	; (8006574 <vTaskPlaceOnEventList+0x38>)
 8006552:	f7fe fa12 	bl	800497a <cmr_panic>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006556:	4b08      	ldr	r3, [pc, #32]	; (8006578 <vTaskPlaceOnEventList+0x3c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3318      	adds	r3, #24
 800655c:	4619      	mov	r1, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7fe ffe7 	bl	8005532 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006564:	2101      	movs	r1, #1
 8006566:	6838      	ldr	r0, [r7, #0]
 8006568:	f000 fa10 	bl	800698c <prvAddCurrentTaskToDelayedList>
}
 800656c:	bf00      	nop
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	0800d99c 	.word	0x0800d99c
 8006578:	20034534 	.word	0x20034534

0800657c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d104      	bne.n	800659c <xTaskRemoveFromEventList+0x20>
 8006592:	f640 3161 	movw	r1, #2913	; 0xb61
 8006596:	4821      	ldr	r0, [pc, #132]	; (800661c <xTaskRemoveFromEventList+0xa0>)
 8006598:	f7fe f9ef 	bl	800497a <cmr_panic>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	3318      	adds	r3, #24
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7fe ffff 	bl	80055a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065a6:	4b1e      	ldr	r3, [pc, #120]	; (8006620 <xTaskRemoveFromEventList+0xa4>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d11c      	bne.n	80065e8 <xTaskRemoveFromEventList+0x6c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	3304      	adds	r3, #4
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7fe fff6 	bl	80055a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065bc:	2201      	movs	r2, #1
 80065be:	409a      	lsls	r2, r3
 80065c0:	4b18      	ldr	r3, [pc, #96]	; (8006624 <xTaskRemoveFromEventList+0xa8>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	4a17      	ldr	r2, [pc, #92]	; (8006624 <xTaskRemoveFromEventList+0xa8>)
 80065c8:	6013      	str	r3, [r2, #0]
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4a14      	ldr	r2, [pc, #80]	; (8006628 <xTaskRemoveFromEventList+0xac>)
 80065d8:	441a      	add	r2, r3
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	3304      	adds	r3, #4
 80065de:	4619      	mov	r1, r3
 80065e0:	4610      	mov	r0, r2
 80065e2:	f7fe ff82 	bl	80054ea <vListInsertEnd>
 80065e6:	e005      	b.n	80065f4 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	3318      	adds	r3, #24
 80065ec:	4619      	mov	r1, r3
 80065ee:	480f      	ldr	r0, [pc, #60]	; (800662c <xTaskRemoveFromEventList+0xb0>)
 80065f0:	f7fe ff7b 	bl	80054ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f8:	4b0d      	ldr	r3, [pc, #52]	; (8006630 <xTaskRemoveFromEventList+0xb4>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fe:	429a      	cmp	r2, r3
 8006600:	d905      	bls.n	800660e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006602:	2301      	movs	r3, #1
 8006604:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006606:	4b0b      	ldr	r3, [pc, #44]	; (8006634 <xTaskRemoveFromEventList+0xb8>)
 8006608:	2201      	movs	r2, #1
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	e001      	b.n	8006612 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800660e:	2300      	movs	r3, #0
 8006610:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006612:	68fb      	ldr	r3, [r7, #12]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	0800da3c 	.word	0x0800da3c
 8006620:	20034644 	.word	0x20034644
 8006624:	20034624 	.word	0x20034624
 8006628:	20034538 	.word	0x20034538
 800662c:	200345f4 	.word	0x200345f4
 8006630:	20034534 	.word	0x20034534
 8006634:	20034630 	.word	0x20034630

08006638 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d104      	bne.n	8006650 <vTaskSetTimeOutState+0x18>
 8006646:	f640 31c1 	movw	r1, #3009	; 0xbc1
 800664a:	4807      	ldr	r0, [pc, #28]	; (8006668 <vTaskSetTimeOutState+0x30>)
 800664c:	f7fe f995 	bl	800497a <cmr_panic>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006650:	4b06      	ldr	r3, [pc, #24]	; (800666c <vTaskSetTimeOutState+0x34>)
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006658:	4b05      	ldr	r3, [pc, #20]	; (8006670 <vTaskSetTimeOutState+0x38>)
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	605a      	str	r2, [r3, #4]
}
 8006660:	bf00      	nop
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	0800dae4 	.word	0x0800dae4
 800666c:	20034634 	.word	0x20034634
 8006670:	20034620 	.word	0x20034620

08006674 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d104      	bne.n	800668e <xTaskCheckForTimeOut+0x1a>
 8006684:	f640 31cb 	movw	r1, #3019	; 0xbcb
 8006688:	4822      	ldr	r0, [pc, #136]	; (8006714 <xTaskCheckForTimeOut+0xa0>)
 800668a:	f7fe f976 	bl	800497a <cmr_panic>
	configASSERT( pxTicksToWait );
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d104      	bne.n	800669e <xTaskCheckForTimeOut+0x2a>
 8006694:	f640 31cc 	movw	r1, #3020	; 0xbcc
 8006698:	481f      	ldr	r0, [pc, #124]	; (8006718 <xTaskCheckForTimeOut+0xa4>)
 800669a:	f7fe f96e 	bl	800497a <cmr_panic>

	taskENTER_CRITICAL();
 800669e:	f000 fad9 	bl	8006c54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80066a2:	4b1e      	ldr	r3, [pc, #120]	; (800671c <xTaskCheckForTimeOut+0xa8>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b0:	d102      	bne.n	80066b8 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80066b2:	2300      	movs	r3, #0
 80066b4:	60fb      	str	r3, [r7, #12]
 80066b6:	e026      	b.n	8006706 <xTaskCheckForTimeOut+0x92>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	4b18      	ldr	r3, [pc, #96]	; (8006720 <xTaskCheckForTimeOut+0xac>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d007      	beq.n	80066d4 <xTaskCheckForTimeOut+0x60>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d302      	bcc.n	80066d4 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80066ce:	2301      	movs	r3, #1
 80066d0:	60fb      	str	r3, [r7, #12]
 80066d2:	e018      	b.n	8006706 <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	1ad2      	subs	r2, r2, r3
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d20e      	bcs.n	8006702 <xTaskCheckForTimeOut+0x8e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6859      	ldr	r1, [r3, #4]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	1acb      	subs	r3, r1, r3
 80066f0:	441a      	add	r2, r3
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7ff ff9e 	bl	8006638 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80066fc:	2300      	movs	r3, #0
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	e001      	b.n	8006706 <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
 8006702:	2301      	movs	r3, #1
 8006704:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006706:	f000 facf 	bl	8006ca8 <vPortExitCritical>

	return xReturn;
 800670a:	68fb      	ldr	r3, [r7, #12]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	0800dae4 	.word	0x0800dae4
 8006718:	0800db2c 	.word	0x0800db2c
 800671c:	20034620 	.word	0x20034620
 8006720:	20034634 	.word	0x20034634

08006724 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006724:	b480      	push	{r7}
 8006726:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006728:	4b03      	ldr	r3, [pc, #12]	; (8006738 <vTaskMissedYield+0x14>)
 800672a:	2201      	movs	r2, #1
 800672c:	601a      	str	r2, [r3, #0]
}
 800672e:	bf00      	nop
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	20034630 	.word	0x20034630

0800673c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006744:	f000 f84c 	bl	80067e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006748:	4b06      	ldr	r3, [pc, #24]	; (8006764 <prvIdleTask+0x28>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d9f9      	bls.n	8006744 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006750:	4b05      	ldr	r3, [pc, #20]	; (8006768 <prvIdleTask+0x2c>)
 8006752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006760:	e7f0      	b.n	8006744 <prvIdleTask+0x8>
 8006762:	bf00      	nop
 8006764:	20034538 	.word	0x20034538
 8006768:	e000ed04 	.word	0xe000ed04

0800676c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006772:	2300      	movs	r3, #0
 8006774:	607b      	str	r3, [r7, #4]
 8006776:	e00c      	b.n	8006792 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	4613      	mov	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4a10      	ldr	r2, [pc, #64]	; (80067c4 <prvInitialiseTaskLists+0x58>)
 8006784:	4413      	add	r3, r2
 8006786:	4618      	mov	r0, r3
 8006788:	f7fe fe82 	bl	8005490 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	3301      	adds	r3, #1
 8006790:	607b      	str	r3, [r7, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b06      	cmp	r3, #6
 8006796:	d9ef      	bls.n	8006778 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006798:	480b      	ldr	r0, [pc, #44]	; (80067c8 <prvInitialiseTaskLists+0x5c>)
 800679a:	f7fe fe79 	bl	8005490 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800679e:	480b      	ldr	r0, [pc, #44]	; (80067cc <prvInitialiseTaskLists+0x60>)
 80067a0:	f7fe fe76 	bl	8005490 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80067a4:	480a      	ldr	r0, [pc, #40]	; (80067d0 <prvInitialiseTaskLists+0x64>)
 80067a6:	f7fe fe73 	bl	8005490 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80067aa:	480a      	ldr	r0, [pc, #40]	; (80067d4 <prvInitialiseTaskLists+0x68>)
 80067ac:	f7fe fe70 	bl	8005490 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80067b0:	4b09      	ldr	r3, [pc, #36]	; (80067d8 <prvInitialiseTaskLists+0x6c>)
 80067b2:	4a05      	ldr	r2, [pc, #20]	; (80067c8 <prvInitialiseTaskLists+0x5c>)
 80067b4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80067b6:	4b09      	ldr	r3, [pc, #36]	; (80067dc <prvInitialiseTaskLists+0x70>)
 80067b8:	4a04      	ldr	r2, [pc, #16]	; (80067cc <prvInitialiseTaskLists+0x60>)
 80067ba:	601a      	str	r2, [r3, #0]
}
 80067bc:	bf00      	nop
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	20034538 	.word	0x20034538
 80067c8:	200345c4 	.word	0x200345c4
 80067cc:	200345d8 	.word	0x200345d8
 80067d0:	200345f4 	.word	0x200345f4
 80067d4:	20034608 	.word	0x20034608
 80067d8:	200345ec 	.word	0x200345ec
 80067dc:	200345f0 	.word	0x200345f0

080067e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067e0:	b480      	push	{r7}
 80067e2:	af00      	add	r7, sp, #0
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067e4:	bf00      	nop
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
	...

080067f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067f6:	4b0f      	ldr	r3, [pc, #60]	; (8006834 <prvResetNextTaskUnblockTime+0x44>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <prvResetNextTaskUnblockTime+0x14>
 8006800:	2301      	movs	r3, #1
 8006802:	e000      	b.n	8006806 <prvResetNextTaskUnblockTime+0x16>
 8006804:	2300      	movs	r3, #0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d004      	beq.n	8006814 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800680a:	4b0b      	ldr	r3, [pc, #44]	; (8006838 <prvResetNextTaskUnblockTime+0x48>)
 800680c:	f04f 32ff 	mov.w	r2, #4294967295
 8006810:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006812:	e008      	b.n	8006826 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006814:	4b07      	ldr	r3, [pc, #28]	; (8006834 <prvResetNextTaskUnblockTime+0x44>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	4a05      	ldr	r2, [pc, #20]	; (8006838 <prvResetNextTaskUnblockTime+0x48>)
 8006824:	6013      	str	r3, [r2, #0]
}
 8006826:	bf00      	nop
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	200345ec 	.word	0x200345ec
 8006838:	2003463c 	.word	0x2003463c

0800683c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006842:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <xTaskGetSchedulerState+0x34>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d102      	bne.n	8006850 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800684a:	2301      	movs	r3, #1
 800684c:	607b      	str	r3, [r7, #4]
 800684e:	e008      	b.n	8006862 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006850:	4b08      	ldr	r3, [pc, #32]	; (8006874 <xTaskGetSchedulerState+0x38>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d102      	bne.n	800685e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006858:	2302      	movs	r3, #2
 800685a:	607b      	str	r3, [r7, #4]
 800685c:	e001      	b.n	8006862 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800685e:	2300      	movs	r3, #0
 8006860:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006862:	687b      	ldr	r3, [r7, #4]
	}
 8006864:	4618      	mov	r0, r3
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	20034628 	.word	0x20034628
 8006874:	20034644 	.word	0x20034644

08006878 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d062      	beq.n	8006950 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800688e:	4b32      	ldr	r3, [pc, #200]	; (8006958 <vTaskPriorityInherit+0xe0>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006894:	429a      	cmp	r2, r3
 8006896:	d25b      	bcs.n	8006950 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	2b00      	cmp	r3, #0
 800689e:	db06      	blt.n	80068ae <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068a0:	4b2d      	ldr	r3, [pc, #180]	; (8006958 <vTaskPriorityInherit+0xe0>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a6:	f1c3 0207 	rsb	r2, r3, #7
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6959      	ldr	r1, [r3, #20]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b6:	4613      	mov	r3, r2
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	4413      	add	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4a27      	ldr	r2, [pc, #156]	; (800695c <vTaskPriorityInherit+0xe4>)
 80068c0:	4413      	add	r3, r2
 80068c2:	4299      	cmp	r1, r3
 80068c4:	d101      	bne.n	80068ca <vTaskPriorityInherit+0x52>
 80068c6:	2301      	movs	r3, #1
 80068c8:	e000      	b.n	80068cc <vTaskPriorityInherit+0x54>
 80068ca:	2300      	movs	r3, #0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d03a      	beq.n	8006946 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	3304      	adds	r3, #4
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fe fe65 	bl	80055a4 <uxListRemove>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d115      	bne.n	800690c <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e4:	491d      	ldr	r1, [pc, #116]	; (800695c <vTaskPriorityInherit+0xe4>)
 80068e6:	4613      	mov	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	440b      	add	r3, r1
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10a      	bne.n	800690c <vTaskPriorityInherit+0x94>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fa:	2201      	movs	r2, #1
 80068fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006900:	43da      	mvns	r2, r3
 8006902:	4b17      	ldr	r3, [pc, #92]	; (8006960 <vTaskPriorityInherit+0xe8>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4013      	ands	r3, r2
 8006908:	4a15      	ldr	r2, [pc, #84]	; (8006960 <vTaskPriorityInherit+0xe8>)
 800690a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800690c:	4b12      	ldr	r3, [pc, #72]	; (8006958 <vTaskPriorityInherit+0xe0>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691a:	2201      	movs	r2, #1
 800691c:	409a      	lsls	r2, r3
 800691e:	4b10      	ldr	r3, [pc, #64]	; (8006960 <vTaskPriorityInherit+0xe8>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4313      	orrs	r3, r2
 8006924:	4a0e      	ldr	r2, [pc, #56]	; (8006960 <vTaskPriorityInherit+0xe8>)
 8006926:	6013      	str	r3, [r2, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800692c:	4613      	mov	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4a09      	ldr	r2, [pc, #36]	; (800695c <vTaskPriorityInherit+0xe4>)
 8006936:	441a      	add	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	3304      	adds	r3, #4
 800693c:	4619      	mov	r1, r3
 800693e:	4610      	mov	r0, r2
 8006940:	f7fe fdd3 	bl	80054ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006944:	e004      	b.n	8006950 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006946:	4b04      	ldr	r3, [pc, #16]	; (8006958 <vTaskPriorityInherit+0xe0>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8006950:	bf00      	nop
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	20034534 	.word	0x20034534
 800695c:	20034538 	.word	0x20034538
 8006960:	20034624 	.word	0x20034624

08006964 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006964:	b480      	push	{r7}
 8006966:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006968:	4b07      	ldr	r3, [pc, #28]	; (8006988 <pvTaskIncrementMutexHeldCount+0x24>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d004      	beq.n	800697a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006970:	4b05      	ldr	r3, [pc, #20]	; (8006988 <pvTaskIncrementMutexHeldCount+0x24>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006976:	3201      	adds	r2, #1
 8006978:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 800697a:	4b03      	ldr	r3, [pc, #12]	; (8006988 <pvTaskIncrementMutexHeldCount+0x24>)
 800697c:	681b      	ldr	r3, [r3, #0]
	}
 800697e:	4618      	mov	r0, r3
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	20034534 	.word	0x20034534

0800698c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006996:	4b29      	ldr	r3, [pc, #164]	; (8006a3c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800699c:	4b28      	ldr	r3, [pc, #160]	; (8006a40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3304      	adds	r3, #4
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7fe fdfe 	bl	80055a4 <uxListRemove>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10b      	bne.n	80069c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80069ae:	4b24      	ldr	r3, [pc, #144]	; (8006a40 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b4:	2201      	movs	r2, #1
 80069b6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ba:	43da      	mvns	r2, r3
 80069bc:	4b21      	ldr	r3, [pc, #132]	; (8006a44 <prvAddCurrentTaskToDelayedList+0xb8>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4013      	ands	r3, r2
 80069c2:	4a20      	ldr	r2, [pc, #128]	; (8006a44 <prvAddCurrentTaskToDelayedList+0xb8>)
 80069c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069cc:	d10a      	bne.n	80069e4 <prvAddCurrentTaskToDelayedList+0x58>
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d007      	beq.n	80069e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069d4:	4b1a      	ldr	r3, [pc, #104]	; (8006a40 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	3304      	adds	r3, #4
 80069da:	4619      	mov	r1, r3
 80069dc:	481a      	ldr	r0, [pc, #104]	; (8006a48 <prvAddCurrentTaskToDelayedList+0xbc>)
 80069de:	f7fe fd84 	bl	80054ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80069e2:	e026      	b.n	8006a32 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4413      	add	r3, r2
 80069ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069ec:	4b14      	ldr	r3, [pc, #80]	; (8006a40 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d209      	bcs.n	8006a10 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069fc:	4b13      	ldr	r3, [pc, #76]	; (8006a4c <prvAddCurrentTaskToDelayedList+0xc0>)
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	4b0f      	ldr	r3, [pc, #60]	; (8006a40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	3304      	adds	r3, #4
 8006a06:	4619      	mov	r1, r3
 8006a08:	4610      	mov	r0, r2
 8006a0a:	f7fe fd92 	bl	8005532 <vListInsert>
}
 8006a0e:	e010      	b.n	8006a32 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a10:	4b0f      	ldr	r3, [pc, #60]	; (8006a50 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	f7fe fd88 	bl	8005532 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a22:	4b0c      	ldr	r3, [pc, #48]	; (8006a54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d202      	bcs.n	8006a32 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006a2c:	4a09      	ldr	r2, [pc, #36]	; (8006a54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	6013      	str	r3, [r2, #0]
}
 8006a32:	bf00      	nop
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20034620 	.word	0x20034620
 8006a40:	20034534 	.word	0x20034534
 8006a44:	20034624 	.word	0x20034624
 8006a48:	20034608 	.word	0x20034608
 8006a4c:	200345f0 	.word	0x200345f0
 8006a50:	200345ec 	.word	0x200345ec
 8006a54:	2003463c 	.word	0x2003463c

08006a58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	3b04      	subs	r3, #4
 8006a68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3b04      	subs	r3, #4
 8006a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f023 0201 	bic.w	r2, r3, #1
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	3b04      	subs	r3, #4
 8006a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a88:	4a0c      	ldr	r2, [pc, #48]	; (8006abc <pxPortInitialiseStack+0x64>)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	3b14      	subs	r3, #20
 8006a92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3b04      	subs	r3, #4
 8006a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f06f 0202 	mvn.w	r2, #2
 8006aa6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	3b20      	subs	r3, #32
 8006aac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006aae:	68fb      	ldr	r3, [r7, #12]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	08006ac1 	.word	0x08006ac1

08006ac0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ac6:	4b0a      	ldr	r3, [pc, #40]	; (8006af0 <prvTaskExitError+0x30>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ace:	d004      	beq.n	8006ada <prvTaskExitError+0x1a>
 8006ad0:	f240 110b 	movw	r1, #267	; 0x10b
 8006ad4:	4807      	ldr	r0, [pc, #28]	; (8006af4 <prvTaskExitError+0x34>)
 8006ad6:	f7fd ff50 	bl	800497a <cmr_panic>
	__asm volatile
 8006ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ade:	f383 8811 	msr	BASEPRI, r3
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	f3bf 8f4f 	dsb	sy
 8006aea:	607b      	str	r3, [r7, #4]
}
 8006aec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	for( ;; );
 8006aee:	e7fe      	b.n	8006aee <prvTaskExitError+0x2e>
 8006af0:	200001b0 	.word	0x200001b0
 8006af4:	0800dc20 	.word	0x0800dc20
	...

08006b00 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b00:	4b07      	ldr	r3, [pc, #28]	; (8006b20 <pxCurrentTCBConst2>)
 8006b02:	6819      	ldr	r1, [r3, #0]
 8006b04:	6808      	ldr	r0, [r1, #0]
 8006b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0a:	f380 8809 	msr	PSP, r0
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f04f 0000 	mov.w	r0, #0
 8006b16:	f380 8811 	msr	BASEPRI, r0
 8006b1a:	4770      	bx	lr
 8006b1c:	f3af 8000 	nop.w

08006b20 <pxCurrentTCBConst2>:
 8006b20:	20034534 	.word	0x20034534
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b24:	bf00      	nop
 8006b26:	bf00      	nop

08006b28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006b28:	4806      	ldr	r0, [pc, #24]	; (8006b44 <prvPortStartFirstTask+0x1c>)
 8006b2a:	6800      	ldr	r0, [r0, #0]
 8006b2c:	6800      	ldr	r0, [r0, #0]
 8006b2e:	f380 8808 	msr	MSP, r0
 8006b32:	b662      	cpsie	i
 8006b34:	b661      	cpsie	f
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	df00      	svc	0
 8006b40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b42:	bf00      	nop
 8006b44:	e000ed08 	.word	0xe000ed08

08006b48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b4e:	4b36      	ldr	r3, [pc, #216]	; (8006c28 <xPortStartScheduler+0xe0>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a36      	ldr	r2, [pc, #216]	; (8006c2c <xPortStartScheduler+0xe4>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d104      	bne.n	8006b62 <xPortStartScheduler+0x1a>
 8006b58:	f240 1141 	movw	r1, #321	; 0x141
 8006b5c:	4834      	ldr	r0, [pc, #208]	; (8006c30 <xPortStartScheduler+0xe8>)
 8006b5e:	f7fd ff0c 	bl	800497a <cmr_panic>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b62:	4b31      	ldr	r3, [pc, #196]	; (8006c28 <xPortStartScheduler+0xe0>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a33      	ldr	r2, [pc, #204]	; (8006c34 <xPortStartScheduler+0xec>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d104      	bne.n	8006b76 <xPortStartScheduler+0x2e>
 8006b6c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8006b70:	4831      	ldr	r0, [pc, #196]	; (8006c38 <xPortStartScheduler+0xf0>)
 8006b72:	f7fd ff02 	bl	800497a <cmr_panic>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b76:	4b31      	ldr	r3, [pc, #196]	; (8006c3c <xPortStartScheduler+0xf4>)
 8006b78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	22ff      	movs	r2, #255	; 0xff
 8006b86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b90:	79fb      	ldrb	r3, [r7, #7]
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	4b29      	ldr	r3, [pc, #164]	; (8006c40 <xPortStartScheduler+0xf8>)
 8006b9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b9e:	4b29      	ldr	r3, [pc, #164]	; (8006c44 <xPortStartScheduler+0xfc>)
 8006ba0:	2207      	movs	r2, #7
 8006ba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ba4:	e009      	b.n	8006bba <xPortStartScheduler+0x72>
		{
			ulMaxPRIGROUPValue--;
 8006ba6:	4b27      	ldr	r3, [pc, #156]	; (8006c44 <xPortStartScheduler+0xfc>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	3b01      	subs	r3, #1
 8006bac:	4a25      	ldr	r2, [pc, #148]	; (8006c44 <xPortStartScheduler+0xfc>)
 8006bae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006bb0:	79fb      	ldrb	r3, [r7, #7]
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	005b      	lsls	r3, r3, #1
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bba:	79fb      	ldrb	r3, [r7, #7]
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc2:	2b80      	cmp	r3, #128	; 0x80
 8006bc4:	d0ef      	beq.n	8006ba6 <xPortStartScheduler+0x5e>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006bc6:	4b1f      	ldr	r3, [pc, #124]	; (8006c44 <xPortStartScheduler+0xfc>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	021b      	lsls	r3, r3, #8
 8006bcc:	4a1d      	ldr	r2, [pc, #116]	; (8006c44 <xPortStartScheduler+0xfc>)
 8006bce:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006bd0:	4b1c      	ldr	r3, [pc, #112]	; (8006c44 <xPortStartScheduler+0xfc>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006bd8:	4a1a      	ldr	r2, [pc, #104]	; (8006c44 <xPortStartScheduler+0xfc>)
 8006bda:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006be4:	4b18      	ldr	r3, [pc, #96]	; (8006c48 <xPortStartScheduler+0x100>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a17      	ldr	r2, [pc, #92]	; (8006c48 <xPortStartScheduler+0x100>)
 8006bea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006bee:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006bf0:	4b15      	ldr	r3, [pc, #84]	; (8006c48 <xPortStartScheduler+0x100>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a14      	ldr	r2, [pc, #80]	; (8006c48 <xPortStartScheduler+0x100>)
 8006bf6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006bfa:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006bfc:	f000 f8ce 	bl	8006d9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c00:	4b12      	ldr	r3, [pc, #72]	; (8006c4c <xPortStartScheduler+0x104>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006c06:	f000 f8e5 	bl	8006dd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c0a:	4b11      	ldr	r3, [pc, #68]	; (8006c50 <xPortStartScheduler+0x108>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a10      	ldr	r2, [pc, #64]	; (8006c50 <xPortStartScheduler+0x108>)
 8006c10:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006c14:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c16:	f7ff ff87 	bl	8006b28 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8006c1a:	f7ff ff51 	bl	8006ac0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	e000ed00 	.word	0xe000ed00
 8006c2c:	410fc271 	.word	0x410fc271
 8006c30:	0800dc8c 	.word	0x0800dc8c
 8006c34:	410fc270 	.word	0x410fc270
 8006c38:	0800dd00 	.word	0x0800dd00
 8006c3c:	e000e400 	.word	0xe000e400
 8006c40:	20034648 	.word	0x20034648
 8006c44:	2003464c 	.word	0x2003464c
 8006c48:	e000ed20 	.word	0xe000ed20
 8006c4c:	200001b0 	.word	0x200001b0
 8006c50:	e000ef34 	.word	0xe000ef34

08006c54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
	__asm volatile
 8006c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	607b      	str	r3, [r7, #4]
}
 8006c6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c6e:	4b0b      	ldr	r3, [pc, #44]	; (8006c9c <vPortEnterCritical+0x48>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	3301      	adds	r3, #1
 8006c74:	4a09      	ldr	r2, [pc, #36]	; (8006c9c <vPortEnterCritical+0x48>)
 8006c76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c78:	4b08      	ldr	r3, [pc, #32]	; (8006c9c <vPortEnterCritical+0x48>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d109      	bne.n	8006c94 <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c80:	4b07      	ldr	r3, [pc, #28]	; (8006ca0 <vPortEnterCritical+0x4c>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d004      	beq.n	8006c94 <vPortEnterCritical+0x40>
 8006c8a:	f240 11a3 	movw	r1, #419	; 0x1a3
 8006c8e:	4805      	ldr	r0, [pc, #20]	; (8006ca4 <vPortEnterCritical+0x50>)
 8006c90:	f7fd fe73 	bl	800497a <cmr_panic>
	}
}
 8006c94:	bf00      	nop
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	200001b0 	.word	0x200001b0
 8006ca0:	e000ed04 	.word	0xe000ed04
 8006ca4:	0800dde4 	.word	0x0800dde4

08006ca8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006cae:	4b0e      	ldr	r3, [pc, #56]	; (8006ce8 <vPortExitCritical+0x40>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d104      	bne.n	8006cc0 <vPortExitCritical+0x18>
 8006cb6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006cba:	480c      	ldr	r0, [pc, #48]	; (8006cec <vPortExitCritical+0x44>)
 8006cbc:	f7fd fe5d 	bl	800497a <cmr_panic>
	uxCriticalNesting--;
 8006cc0:	4b09      	ldr	r3, [pc, #36]	; (8006ce8 <vPortExitCritical+0x40>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	4a08      	ldr	r2, [pc, #32]	; (8006ce8 <vPortExitCritical+0x40>)
 8006cc8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006cca:	4b07      	ldr	r3, [pc, #28]	; (8006ce8 <vPortExitCritical+0x40>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d105      	bne.n	8006cde <vPortExitCritical+0x36>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	607b      	str	r3, [r7, #4]
	__asm volatile
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f383 8811 	msr	BASEPRI, r3
}
 8006cdc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006cde:	bf00      	nop
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	200001b0 	.word	0x200001b0
 8006cec:	0800de6c 	.word	0x0800de6c

08006cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006cf0:	f3ef 8009 	mrs	r0, PSP
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	4b15      	ldr	r3, [pc, #84]	; (8006d50 <pxCurrentTCBConst>)
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	f01e 0f10 	tst.w	lr, #16
 8006d00:	bf08      	it	eq
 8006d02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d0a:	6010      	str	r0, [r2, #0]
 8006d0c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8006d10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d14:	f380 8811 	msr	BASEPRI, r0
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f7ff fbb6 	bl	8006490 <vTaskSwitchContext>
 8006d24:	f04f 0000 	mov.w	r0, #0
 8006d28:	f380 8811 	msr	BASEPRI, r0
 8006d2c:	bc08      	pop	{r3}
 8006d2e:	6819      	ldr	r1, [r3, #0]
 8006d30:	6808      	ldr	r0, [r1, #0]
 8006d32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d36:	f01e 0f10 	tst.w	lr, #16
 8006d3a:	bf08      	it	eq
 8006d3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d40:	f380 8809 	msr	PSP, r0
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	f3af 8000 	nop.w

08006d50 <pxCurrentTCBConst>:
 8006d50:	20034534 	.word	0x20034534
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop

08006d58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	607b      	str	r3, [r7, #4]
}
 8006d70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d72:	f7ff fad3 	bl	800631c <xTaskIncrementTick>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d003      	beq.n	8006d84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d7c:	4b06      	ldr	r3, [pc, #24]	; (8006d98 <xPortSysTickHandler+0x40>)
 8006d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	2300      	movs	r3, #0
 8006d86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	f383 8811 	msr	BASEPRI, r3
}
 8006d8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d90:	bf00      	nop
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	e000ed04 	.word	0xe000ed04

08006d9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006da0:	4b08      	ldr	r3, [pc, #32]	; (8006dc4 <vPortSetupTimerInterrupt+0x28>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a08      	ldr	r2, [pc, #32]	; (8006dc8 <vPortSetupTimerInterrupt+0x2c>)
 8006da6:	fba2 2303 	umull	r2, r3, r2, r3
 8006daa:	099b      	lsrs	r3, r3, #6
 8006dac:	4a07      	ldr	r2, [pc, #28]	; (8006dcc <vPortSetupTimerInterrupt+0x30>)
 8006dae:	3b01      	subs	r3, #1
 8006db0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006db2:	4b07      	ldr	r3, [pc, #28]	; (8006dd0 <vPortSetupTimerInterrupt+0x34>)
 8006db4:	2207      	movs	r2, #7
 8006db6:	601a      	str	r2, [r3, #0]
}
 8006db8:	bf00      	nop
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	200001ac 	.word	0x200001ac
 8006dc8:	10624dd3 	.word	0x10624dd3
 8006dcc:	e000e014 	.word	0xe000e014
 8006dd0:	e000e010 	.word	0xe000e010

08006dd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006dd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006de4 <vPortEnableVFP+0x10>
 8006dd8:	6801      	ldr	r1, [r0, #0]
 8006dda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006dde:	6001      	str	r1, [r0, #0]
 8006de0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006de2:	bf00      	nop
 8006de4:	e000ed88 	.word	0xe000ed88

08006de8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8006dee:	f3ef 8305 	mrs	r3, IPSR
 8006df2:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b0f      	cmp	r3, #15
 8006df8:	d90e      	bls.n	8006e18 <vPortValidateInterruptPriority+0x30>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006dfa:	4a10      	ldr	r2, [pc, #64]	; (8006e3c <vPortValidateInterruptPriority+0x54>)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4413      	add	r3, r2
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e04:	4b0e      	ldr	r3, [pc, #56]	; (8006e40 <vPortValidateInterruptPriority+0x58>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	78fa      	ldrb	r2, [r7, #3]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d204      	bcs.n	8006e18 <vPortValidateInterruptPriority+0x30>
 8006e0e:	f240 21e6 	movw	r1, #742	; 0x2e6
 8006e12:	480c      	ldr	r0, [pc, #48]	; (8006e44 <vPortValidateInterruptPriority+0x5c>)
 8006e14:	f7fd fdb1 	bl	800497a <cmr_panic>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e18:	4b0b      	ldr	r3, [pc, #44]	; (8006e48 <vPortValidateInterruptPriority+0x60>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e20:	4b0a      	ldr	r3, [pc, #40]	; (8006e4c <vPortValidateInterruptPriority+0x64>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d904      	bls.n	8006e32 <vPortValidateInterruptPriority+0x4a>
 8006e28:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 8006e2c:	4808      	ldr	r0, [pc, #32]	; (8006e50 <vPortValidateInterruptPriority+0x68>)
 8006e2e:	f7fd fda4 	bl	800497a <cmr_panic>
	}
 8006e32:	bf00      	nop
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	e000e3f0 	.word	0xe000e3f0
 8006e40:	20034648 	.word	0x20034648
 8006e44:	0800ded0 	.word	0x0800ded0
 8006e48:	e000ed0c 	.word	0xe000ed0c
 8006e4c:	2003464c 	.word	0x2003464c
 8006e50:	0800df4c 	.word	0x0800df4c

08006e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006e58:	4b0e      	ldr	r3, [pc, #56]	; (8006e94 <HAL_Init+0x40>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a0d      	ldr	r2, [pc, #52]	; (8006e94 <HAL_Init+0x40>)
 8006e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006e64:	4b0b      	ldr	r3, [pc, #44]	; (8006e94 <HAL_Init+0x40>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a0a      	ldr	r2, [pc, #40]	; (8006e94 <HAL_Init+0x40>)
 8006e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006e70:	4b08      	ldr	r3, [pc, #32]	; (8006e94 <HAL_Init+0x40>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a07      	ldr	r2, [pc, #28]	; (8006e94 <HAL_Init+0x40>)
 8006e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e7c:	2003      	movs	r0, #3
 8006e7e:	f001 fb11 	bl	80084a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006e82:	200f      	movs	r0, #15
 8006e84:	f000 f810 	bl	8006ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006e88:	f000 f806 	bl	8006e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	40023c00 	.word	0x40023c00

08006e98 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8006e9c:	bf00      	nop
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
	...

08006ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006eb0:	4b12      	ldr	r3, [pc, #72]	; (8006efc <HAL_InitTick+0x54>)
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	4b12      	ldr	r3, [pc, #72]	; (8006f00 <HAL_InitTick+0x58>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	4619      	mov	r1, r3
 8006eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f001 fb21 	bl	800850e <HAL_SYSTICK_Config>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e00e      	b.n	8006ef4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b0f      	cmp	r3, #15
 8006eda:	d80a      	bhi.n	8006ef2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006edc:	2200      	movs	r2, #0
 8006ede:	6879      	ldr	r1, [r7, #4]
 8006ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee4:	f001 fae9 	bl	80084ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006ee8:	4a06      	ldr	r2, [pc, #24]	; (8006f04 <HAL_InitTick+0x5c>)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	e000      	b.n	8006ef4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	200001ac 	.word	0x200001ac
 8006f00:	200001b8 	.word	0x200001b8
 8006f04:	200001b4 	.word	0x200001b4

08006f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006f0c:	4b06      	ldr	r3, [pc, #24]	; (8006f28 <HAL_IncTick+0x20>)
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	461a      	mov	r2, r3
 8006f12:	4b06      	ldr	r3, [pc, #24]	; (8006f2c <HAL_IncTick+0x24>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4413      	add	r3, r2
 8006f18:	4a04      	ldr	r2, [pc, #16]	; (8006f2c <HAL_IncTick+0x24>)
 8006f1a:	6013      	str	r3, [r2, #0]
}
 8006f1c:	bf00      	nop
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	200001b8 	.word	0x200001b8
 8006f2c:	20034650 	.word	0x20034650

08006f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f30:	b480      	push	{r7}
 8006f32:	af00      	add	r7, sp, #0
  return uwTick;
 8006f34:	4b03      	ldr	r3, [pc, #12]	; (8006f44 <HAL_GetTick+0x14>)
 8006f36:	681b      	ldr	r3, [r3, #0]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	20034650 	.word	0x20034650

08006f48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e033      	b.n	8006fc6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d109      	bne.n	8006f7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f831 	bl	8006fce <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	f003 0310 	and.w	r3, r3, #16
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d118      	bne.n	8006fb8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006f8e:	f023 0302 	bic.w	r3, r3, #2
 8006f92:	f043 0202 	orr.w	r2, r3, #2
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fa8c 	bl	80074b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	f023 0303 	bic.w	r3, r3, #3
 8006fae:	f043 0201 	orr.w	r2, r3, #1
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	641a      	str	r2, [r3, #64]	; 0x40
 8006fb6:	e001      	b.n	8006fbc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b083      	sub	sp, #12
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
	...

08006fe4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d101      	bne.n	8006ffe <HAL_ADC_Start+0x1a>
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	e08a      	b.n	8007114 <HAL_ADC_Start+0x130>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	2b01      	cmp	r3, #1
 8007012:	d018      	beq.n	8007046 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689a      	ldr	r2, [r3, #8]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f042 0201 	orr.w	r2, r2, #1
 8007022:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007024:	4b3e      	ldr	r3, [pc, #248]	; (8007120 <HAL_ADC_Start+0x13c>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a3e      	ldr	r2, [pc, #248]	; (8007124 <HAL_ADC_Start+0x140>)
 800702a:	fba2 2303 	umull	r2, r3, r2, r3
 800702e:	0c9a      	lsrs	r2, r3, #18
 8007030:	4613      	mov	r3, r2
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	4413      	add	r3, r2
 8007036:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007038:	e002      	b.n	8007040 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	3b01      	subs	r3, #1
 800703e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1f9      	bne.n	800703a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b01      	cmp	r3, #1
 8007052:	d15e      	bne.n	8007112 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007058:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800705c:	f023 0301 	bic.w	r3, r3, #1
 8007060:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007072:	2b00      	cmp	r3, #0
 8007074:	d007      	beq.n	8007086 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800707e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800708e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007092:	d106      	bne.n	80070a2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007098:	f023 0206 	bic.w	r2, r3, #6
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	645a      	str	r2, [r3, #68]	; 0x44
 80070a0:	e002      	b.n	80070a8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80070b0:	4b1d      	ldr	r3, [pc, #116]	; (8007128 <HAL_ADC_Start+0x144>)
 80070b2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80070bc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f003 031f 	and.w	r3, r3, #31
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10f      	bne.n	80070ea <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d11c      	bne.n	8007112 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	689a      	ldr	r2, [r3, #8]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80070e6:	609a      	str	r2, [r3, #8]
 80070e8:	e013      	b.n	8007112 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a0f      	ldr	r2, [pc, #60]	; (800712c <HAL_ADC_Start+0x148>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d10e      	bne.n	8007112 <HAL_ADC_Start+0x12e>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d107      	bne.n	8007112 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689a      	ldr	r2, [r3, #8]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007110:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	200001ac 	.word	0x200001ac
 8007124:	431bde83 	.word	0x431bde83
 8007128:	40012300 	.word	0x40012300
 800712c:	40012000 	.word	0x40012000

08007130 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800714c:	d113      	bne.n	8007176 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800715c:	d10b      	bne.n	8007176 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	f043 0220 	orr.w	r2, r3, #32
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e05c      	b.n	8007230 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007176:	f7ff fedb 	bl	8006f30 <HAL_GetTick>
 800717a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800717c:	e01a      	b.n	80071b4 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007184:	d016      	beq.n	80071b4 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d007      	beq.n	800719c <HAL_ADC_PollForConversion+0x6c>
 800718c:	f7ff fed0 	bl	8006f30 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	429a      	cmp	r2, r3
 800719a:	d20b      	bcs.n	80071b4 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a0:	f043 0204 	orr.w	r2, r3, #4
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e03d      	b.n	8007230 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0302 	and.w	r3, r3, #2
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d1dd      	bne.n	800717e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f06f 0212 	mvn.w	r2, #18
 80071ca:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d123      	bne.n	800722e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d11f      	bne.n	800722e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d006      	beq.n	800720a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007206:	2b00      	cmp	r3, #0
 8007208:	d111      	bne.n	800722e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d105      	bne.n	800722e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007226:	f043 0201 	orr.w	r2, r3, #1
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8007246:	4618      	mov	r0, r3
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
	...

08007254 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800725e:	2300      	movs	r3, #0
 8007260:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007268:	2b01      	cmp	r3, #1
 800726a:	d101      	bne.n	8007270 <HAL_ADC_ConfigChannel+0x1c>
 800726c:	2302      	movs	r3, #2
 800726e:	e113      	b.n	8007498 <HAL_ADC_ConfigChannel+0x244>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b09      	cmp	r3, #9
 800727e:	d925      	bls.n	80072cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68d9      	ldr	r1, [r3, #12]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	b29b      	uxth	r3, r3
 800728c:	461a      	mov	r2, r3
 800728e:	4613      	mov	r3, r2
 8007290:	005b      	lsls	r3, r3, #1
 8007292:	4413      	add	r3, r2
 8007294:	3b1e      	subs	r3, #30
 8007296:	2207      	movs	r2, #7
 8007298:	fa02 f303 	lsl.w	r3, r2, r3
 800729c:	43da      	mvns	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	400a      	ands	r2, r1
 80072a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68d9      	ldr	r1, [r3, #12]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	689a      	ldr	r2, [r3, #8]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	4618      	mov	r0, r3
 80072b8:	4603      	mov	r3, r0
 80072ba:	005b      	lsls	r3, r3, #1
 80072bc:	4403      	add	r3, r0
 80072be:	3b1e      	subs	r3, #30
 80072c0:	409a      	lsls	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	60da      	str	r2, [r3, #12]
 80072ca:	e022      	b.n	8007312 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6919      	ldr	r1, [r3, #16]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	461a      	mov	r2, r3
 80072da:	4613      	mov	r3, r2
 80072dc:	005b      	lsls	r3, r3, #1
 80072de:	4413      	add	r3, r2
 80072e0:	2207      	movs	r2, #7
 80072e2:	fa02 f303 	lsl.w	r3, r2, r3
 80072e6:	43da      	mvns	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	400a      	ands	r2, r1
 80072ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6919      	ldr	r1, [r3, #16]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	689a      	ldr	r2, [r3, #8]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	b29b      	uxth	r3, r3
 8007300:	4618      	mov	r0, r3
 8007302:	4603      	mov	r3, r0
 8007304:	005b      	lsls	r3, r3, #1
 8007306:	4403      	add	r3, r0
 8007308:	409a      	lsls	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	2b06      	cmp	r3, #6
 8007318:	d824      	bhi.n	8007364 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	685a      	ldr	r2, [r3, #4]
 8007324:	4613      	mov	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	3b05      	subs	r3, #5
 800732c:	221f      	movs	r2, #31
 800732e:	fa02 f303 	lsl.w	r3, r2, r3
 8007332:	43da      	mvns	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	400a      	ands	r2, r1
 800733a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	b29b      	uxth	r3, r3
 8007348:	4618      	mov	r0, r3
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	4613      	mov	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	3b05      	subs	r3, #5
 8007356:	fa00 f203 	lsl.w	r2, r0, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	635a      	str	r2, [r3, #52]	; 0x34
 8007362:	e04c      	b.n	80073fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	2b0c      	cmp	r3, #12
 800736a:	d824      	bhi.n	80073b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	4613      	mov	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	3b23      	subs	r3, #35	; 0x23
 800737e:	221f      	movs	r2, #31
 8007380:	fa02 f303 	lsl.w	r3, r2, r3
 8007384:	43da      	mvns	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	400a      	ands	r2, r1
 800738c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	b29b      	uxth	r3, r3
 800739a:	4618      	mov	r0, r3
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	4613      	mov	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	3b23      	subs	r3, #35	; 0x23
 80073a8:	fa00 f203 	lsl.w	r2, r0, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	631a      	str	r2, [r3, #48]	; 0x30
 80073b4:	e023      	b.n	80073fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	4613      	mov	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	3b41      	subs	r3, #65	; 0x41
 80073c8:	221f      	movs	r2, #31
 80073ca:	fa02 f303 	lsl.w	r3, r2, r3
 80073ce:	43da      	mvns	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	400a      	ands	r2, r1
 80073d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	4618      	mov	r0, r3
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	4613      	mov	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4413      	add	r3, r2
 80073f0:	3b41      	subs	r3, #65	; 0x41
 80073f2:	fa00 f203 	lsl.w	r2, r0, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	430a      	orrs	r2, r1
 80073fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80073fe:	4b29      	ldr	r3, [pc, #164]	; (80074a4 <HAL_ADC_ConfigChannel+0x250>)
 8007400:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a28      	ldr	r2, [pc, #160]	; (80074a8 <HAL_ADC_ConfigChannel+0x254>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d10f      	bne.n	800742c <HAL_ADC_ConfigChannel+0x1d8>
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2b12      	cmp	r3, #18
 8007412:	d10b      	bne.n	800742c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a1d      	ldr	r2, [pc, #116]	; (80074a8 <HAL_ADC_ConfigChannel+0x254>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d12b      	bne.n	800748e <HAL_ADC_ConfigChannel+0x23a>
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a1c      	ldr	r2, [pc, #112]	; (80074ac <HAL_ADC_ConfigChannel+0x258>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d003      	beq.n	8007448 <HAL_ADC_ConfigChannel+0x1f4>
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b11      	cmp	r3, #17
 8007446:	d122      	bne.n	800748e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a11      	ldr	r2, [pc, #68]	; (80074ac <HAL_ADC_ConfigChannel+0x258>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d111      	bne.n	800748e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800746a:	4b11      	ldr	r3, [pc, #68]	; (80074b0 <HAL_ADC_ConfigChannel+0x25c>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a11      	ldr	r2, [pc, #68]	; (80074b4 <HAL_ADC_ConfigChannel+0x260>)
 8007470:	fba2 2303 	umull	r2, r3, r2, r3
 8007474:	0c9a      	lsrs	r2, r3, #18
 8007476:	4613      	mov	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	005b      	lsls	r3, r3, #1
 800747e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007480:	e002      	b.n	8007488 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	3b01      	subs	r3, #1
 8007486:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1f9      	bne.n	8007482 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr
 80074a4:	40012300 	.word	0x40012300
 80074a8:	40012000 	.word	0x40012000
 80074ac:	10000012 	.word	0x10000012
 80074b0:	200001ac 	.word	0x200001ac
 80074b4:	431bde83 	.word	0x431bde83

080074b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80074c0:	4b79      	ldr	r3, [pc, #484]	; (80076a8 <ADC_Init+0x1f0>)
 80074c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	431a      	orrs	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6859      	ldr	r1, [r3, #4]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	021a      	lsls	r2, r3, #8
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007510:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6859      	ldr	r1, [r3, #4]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689a      	ldr	r2, [r3, #8]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007532:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6899      	ldr	r1, [r3, #8]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68da      	ldr	r2, [r3, #12]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	430a      	orrs	r2, r1
 8007544:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754a:	4a58      	ldr	r2, [pc, #352]	; (80076ac <ADC_Init+0x1f4>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d022      	beq.n	8007596 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	689a      	ldr	r2, [r3, #8]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800755e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6899      	ldr	r1, [r3, #8]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	430a      	orrs	r2, r1
 8007570:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	689a      	ldr	r2, [r3, #8]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007580:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6899      	ldr	r1, [r3, #8]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	430a      	orrs	r2, r1
 8007592:	609a      	str	r2, [r3, #8]
 8007594:	e00f      	b.n	80075b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	689a      	ldr	r2, [r3, #8]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80075a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	689a      	ldr	r2, [r3, #8]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80075b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	689a      	ldr	r2, [r3, #8]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f022 0202 	bic.w	r2, r2, #2
 80075c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6899      	ldr	r1, [r3, #8]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	7e1b      	ldrb	r3, [r3, #24]
 80075d0:	005a      	lsls	r2, r3, #1
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d01b      	beq.n	800761c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007602:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6859      	ldr	r1, [r3, #4]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760e:	3b01      	subs	r3, #1
 8007610:	035a      	lsls	r2, r3, #13
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	605a      	str	r2, [r3, #4]
 800761a:	e007      	b.n	800762c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800762a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800763a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	3b01      	subs	r3, #1
 8007648:	051a      	lsls	r2, r3, #20
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	689a      	ldr	r2, [r3, #8]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007660:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6899      	ldr	r1, [r3, #8]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800766e:	025a      	lsls	r2, r3, #9
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	430a      	orrs	r2, r1
 8007676:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689a      	ldr	r2, [r3, #8]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007686:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6899      	ldr	r1, [r3, #8]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	029a      	lsls	r2, r3, #10
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	430a      	orrs	r2, r1
 800769a:	609a      	str	r2, [r3, #8]
}
 800769c:	bf00      	nop
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	40012300 	.word	0x40012300
 80076ac:	0f000001 	.word	0x0f000001

080076b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e0ed      	b.n	800789e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d102      	bne.n	80076d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f8e9 	bl	80078a6 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f022 0202 	bic.w	r2, r2, #2
 80076e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80076e4:	f7ff fc24 	bl	8006f30 <HAL_GetTick>
 80076e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80076ea:	e012      	b.n	8007712 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80076ec:	f7ff fc20 	bl	8006f30 <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	2b0a      	cmp	r3, #10
 80076f8:	d90b      	bls.n	8007712 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2205      	movs	r2, #5
 800770a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e0c5      	b.n	800789e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	f003 0302 	and.w	r3, r3, #2
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1e5      	bne.n	80076ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f042 0201 	orr.w	r2, r2, #1
 800772e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007730:	f7ff fbfe 	bl	8006f30 <HAL_GetTick>
 8007734:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007736:	e012      	b.n	800775e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007738:	f7ff fbfa 	bl	8006f30 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	2b0a      	cmp	r3, #10
 8007744:	d90b      	bls.n	800775e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2205      	movs	r2, #5
 8007756:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e09f      	b.n	800789e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	2b00      	cmp	r3, #0
 800776a:	d0e5      	beq.n	8007738 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	7e1b      	ldrb	r3, [r3, #24]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d108      	bne.n	8007786 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	e007      	b.n	8007796 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007794:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	7e5b      	ldrb	r3, [r3, #25]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d108      	bne.n	80077b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	e007      	b.n	80077c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	7e9b      	ldrb	r3, [r3, #26]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d108      	bne.n	80077da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0220 	orr.w	r2, r2, #32
 80077d6:	601a      	str	r2, [r3, #0]
 80077d8:	e007      	b.n	80077ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f022 0220 	bic.w	r2, r2, #32
 80077e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	7edb      	ldrb	r3, [r3, #27]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d108      	bne.n	8007804 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f022 0210 	bic.w	r2, r2, #16
 8007800:	601a      	str	r2, [r3, #0]
 8007802:	e007      	b.n	8007814 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f042 0210 	orr.w	r2, r2, #16
 8007812:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	7f1b      	ldrb	r3, [r3, #28]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d108      	bne.n	800782e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f042 0208 	orr.w	r2, r2, #8
 800782a:	601a      	str	r2, [r3, #0]
 800782c:	e007      	b.n	800783e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f022 0208 	bic.w	r2, r2, #8
 800783c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	7f5b      	ldrb	r3, [r3, #29]
 8007842:	2b01      	cmp	r3, #1
 8007844:	d108      	bne.n	8007858 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f042 0204 	orr.w	r2, r2, #4
 8007854:	601a      	str	r2, [r3, #0]
 8007856:	e007      	b.n	8007868 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f022 0204 	bic.w	r2, r2, #4
 8007866:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689a      	ldr	r2, [r3, #8]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	431a      	orrs	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	431a      	orrs	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	ea42 0103 	orr.w	r1, r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	1e5a      	subs	r2, r3, #1
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	430a      	orrs	r2, r1
 800788c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <HAL_CAN_MspInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b083      	sub	sp, #12
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_MspInit could be implemented in the user file
   */
}
 80078ae:	bf00      	nop
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
	...

080078bc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80078bc:	b480      	push	{r7}
 80078be:	b087      	sub	sp, #28
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078d2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80078d4:	7cfb      	ldrb	r3, [r7, #19]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d003      	beq.n	80078e2 <HAL_CAN_ConfigFilter+0x26>
 80078da:	7cfb      	ldrb	r3, [r7, #19]
 80078dc:	2b02      	cmp	r3, #2
 80078de:	f040 80c7 	bne.w	8007a70 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a69      	ldr	r2, [pc, #420]	; (8007a8c <HAL_CAN_ConfigFilter+0x1d0>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d001      	beq.n	80078f0 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80078ec:	4b68      	ldr	r3, [pc, #416]	; (8007a90 <HAL_CAN_ConfigFilter+0x1d4>)
 80078ee:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80078f6:	f043 0201 	orr.w	r2, r3, #1
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	4a63      	ldr	r2, [pc, #396]	; (8007a90 <HAL_CAN_ConfigFilter+0x1d4>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d111      	bne.n	800792c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800790e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007922:	021b      	lsls	r3, r3, #8
 8007924:	431a      	orrs	r2, r3
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	f003 031f 	and.w	r3, r3, #31
 8007934:	2201      	movs	r2, #1
 8007936:	fa02 f303 	lsl.w	r3, r2, r3
 800793a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	43db      	mvns	r3, r3
 8007946:	401a      	ands	r2, r3
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d123      	bne.n	800799e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	43db      	mvns	r3, r3
 8007960:	401a      	ands	r2, r3
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007978:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	3248      	adds	r2, #72	; 0x48
 800797e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007992:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007994:	6979      	ldr	r1, [r7, #20]
 8007996:	3348      	adds	r3, #72	; 0x48
 8007998:	00db      	lsls	r3, r3, #3
 800799a:	440b      	add	r3, r1
 800799c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d122      	bne.n	80079ec <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	431a      	orrs	r2, r3
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80079c6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	3248      	adds	r2, #72	; 0x48
 80079cc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80079e0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80079e2:	6979      	ldr	r1, [r7, #20]
 80079e4:	3348      	adds	r3, #72	; 0x48
 80079e6:	00db      	lsls	r3, r3, #3
 80079e8:	440b      	add	r3, r1
 80079ea:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d109      	bne.n	8007a08 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	43db      	mvns	r3, r3
 80079fe:	401a      	ands	r2, r3
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007a06:	e007      	b.n	8007a18 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	431a      	orrs	r2, r3
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d109      	bne.n	8007a34 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	43db      	mvns	r3, r3
 8007a2a:	401a      	ands	r2, r3
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007a32:	e007      	b.n	8007a44 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	6a1b      	ldr	r3, [r3, #32]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d107      	bne.n	8007a5c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	431a      	orrs	r2, r3
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a62:	f023 0201 	bic.w	r2, r3, #1
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	e006      	b.n	8007a7e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
  }
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	371c      	adds	r7, #28
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	40006c00 	.word	0x40006c00
 8007a90:	40006400 	.word	0x40006400

08007a94 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d12e      	bne.n	8007b06 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2202      	movs	r2, #2
 8007aac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f022 0201 	bic.w	r2, r2, #1
 8007abe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007ac0:	f7ff fa36 	bl	8006f30 <HAL_GetTick>
 8007ac4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007ac6:	e012      	b.n	8007aee <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007ac8:	f7ff fa32 	bl	8006f30 <HAL_GetTick>
 8007acc:	4602      	mov	r2, r0
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	2b0a      	cmp	r3, #10
 8007ad4:	d90b      	bls.n	8007aee <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ada:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2205      	movs	r2, #5
 8007ae6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e012      	b.n	8007b14 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1e5      	bne.n	8007ac8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	e006      	b.n	8007b14 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
  }
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b089      	sub	sp, #36	; 0x24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
 8007b28:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b30:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007b3a:	7ffb      	ldrb	r3, [r7, #31]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d003      	beq.n	8007b48 <HAL_CAN_AddTxMessage+0x2c>
 8007b40:	7ffb      	ldrb	r3, [r7, #31]
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	f040 80b8 	bne.w	8007cb8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10a      	bne.n	8007b68 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d105      	bne.n	8007b68 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 80a0 	beq.w	8007ca8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	0e1b      	lsrs	r3, r3, #24
 8007b6c:	f003 0303 	and.w	r3, r3, #3
 8007b70:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d907      	bls.n	8007b88 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e09e      	b.n	8007cc6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007b88:	2201      	movs	r2, #1
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	409a      	lsls	r2, r3
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d10d      	bne.n	8007bb6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007ba4:	68f9      	ldr	r1, [r7, #12]
 8007ba6:	6809      	ldr	r1, [r1, #0]
 8007ba8:	431a      	orrs	r2, r3
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	3318      	adds	r3, #24
 8007bae:	011b      	lsls	r3, r3, #4
 8007bb0:	440b      	add	r3, r1
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	e00f      	b.n	8007bd6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007bc0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007bc6:	68f9      	ldr	r1, [r7, #12]
 8007bc8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007bca:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	3318      	adds	r3, #24
 8007bd0:	011b      	lsls	r3, r3, #4
 8007bd2:	440b      	add	r3, r1
 8007bd4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6819      	ldr	r1, [r3, #0]
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	691a      	ldr	r2, [r3, #16]
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	3318      	adds	r3, #24
 8007be2:	011b      	lsls	r3, r3, #4
 8007be4:	440b      	add	r3, r1
 8007be6:	3304      	adds	r3, #4
 8007be8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	7d1b      	ldrb	r3, [r3, #20]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d111      	bne.n	8007c16 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	3318      	adds	r3, #24
 8007bfa:	011b      	lsls	r3, r3, #4
 8007bfc:	4413      	add	r3, r2
 8007bfe:	3304      	adds	r3, #4
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	6811      	ldr	r1, [r2, #0]
 8007c06:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	3318      	adds	r3, #24
 8007c0e:	011b      	lsls	r3, r3, #4
 8007c10:	440b      	add	r3, r1
 8007c12:	3304      	adds	r3, #4
 8007c14:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	3307      	adds	r3, #7
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	061a      	lsls	r2, r3, #24
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	3306      	adds	r3, #6
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	041b      	lsls	r3, r3, #16
 8007c26:	431a      	orrs	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	3305      	adds	r3, #5
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	021b      	lsls	r3, r3, #8
 8007c30:	4313      	orrs	r3, r2
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	3204      	adds	r2, #4
 8007c36:	7812      	ldrb	r2, [r2, #0]
 8007c38:	4610      	mov	r0, r2
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	6811      	ldr	r1, [r2, #0]
 8007c3e:	ea43 0200 	orr.w	r2, r3, r0
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	011b      	lsls	r3, r3, #4
 8007c46:	440b      	add	r3, r1
 8007c48:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007c4c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	3303      	adds	r3, #3
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	061a      	lsls	r2, r3, #24
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	3302      	adds	r3, #2
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	041b      	lsls	r3, r3, #16
 8007c5e:	431a      	orrs	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	3301      	adds	r3, #1
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	021b      	lsls	r3, r3, #8
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	7812      	ldrb	r2, [r2, #0]
 8007c6e:	4610      	mov	r0, r2
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	6811      	ldr	r1, [r2, #0]
 8007c74:	ea43 0200 	orr.w	r2, r3, r0
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	011b      	lsls	r3, r3, #4
 8007c7c:	440b      	add	r3, r1
 8007c7e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007c82:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	3318      	adds	r3, #24
 8007c8c:	011b      	lsls	r3, r3, #4
 8007c8e:	4413      	add	r3, r2
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	6811      	ldr	r1, [r2, #0]
 8007c96:	f043 0201 	orr.w	r2, r3, #1
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	3318      	adds	r3, #24
 8007c9e:	011b      	lsls	r3, r3, #4
 8007ca0:	440b      	add	r3, r1
 8007ca2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	e00e      	b.n	8007cc6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e006      	b.n	8007cc6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
  }
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3724      	adds	r7, #36	; 0x24
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b087      	sub	sp, #28
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	60f8      	str	r0, [r7, #12]
 8007cda:	60b9      	str	r1, [r7, #8]
 8007cdc:	607a      	str	r2, [r7, #4]
 8007cde:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ce6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d003      	beq.n	8007cf6 <HAL_CAN_GetRxMessage+0x24>
 8007cee:	7dfb      	ldrb	r3, [r7, #23]
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	f040 80f4 	bne.w	8007ede <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10e      	bne.n	8007d1a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	f003 0303 	and.w	r3, r3, #3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d116      	bne.n	8007d38 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e0e8      	b.n	8007eec <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	f003 0303 	and.w	r3, r3, #3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d107      	bne.n	8007d38 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e0d9      	b.n	8007eec <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	331b      	adds	r3, #27
 8007d40:	011b      	lsls	r3, r3, #4
 8007d42:	4413      	add	r3, r2
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 0204 	and.w	r2, r3, #4
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10c      	bne.n	8007d70 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	331b      	adds	r3, #27
 8007d5e:	011b      	lsls	r3, r3, #4
 8007d60:	4413      	add	r3, r2
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	0d5b      	lsrs	r3, r3, #21
 8007d66:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	601a      	str	r2, [r3, #0]
 8007d6e:	e00b      	b.n	8007d88 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	331b      	adds	r3, #27
 8007d78:	011b      	lsls	r3, r3, #4
 8007d7a:	4413      	add	r3, r2
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	08db      	lsrs	r3, r3, #3
 8007d80:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	331b      	adds	r3, #27
 8007d90:	011b      	lsls	r3, r3, #4
 8007d92:	4413      	add	r3, r2
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	085b      	lsrs	r3, r3, #1
 8007d98:	f003 0201 	and.w	r2, r3, #1
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	331b      	adds	r3, #27
 8007da8:	011b      	lsls	r3, r3, #4
 8007daa:	4413      	add	r3, r2
 8007dac:	3304      	adds	r3, #4
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 020f 	and.w	r2, r3, #15
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	331b      	adds	r3, #27
 8007dc0:	011b      	lsls	r3, r3, #4
 8007dc2:	4413      	add	r3, r2
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	0a1b      	lsrs	r3, r3, #8
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	331b      	adds	r3, #27
 8007dd8:	011b      	lsls	r3, r3, #4
 8007dda:	4413      	add	r3, r2
 8007ddc:	3304      	adds	r3, #4
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	0c1b      	lsrs	r3, r3, #16
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	011b      	lsls	r3, r3, #4
 8007df0:	4413      	add	r3, r2
 8007df2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	011b      	lsls	r3, r3, #4
 8007e06:	4413      	add	r3, r2
 8007e08:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	0a1a      	lsrs	r2, r3, #8
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	3301      	adds	r3, #1
 8007e14:	b2d2      	uxtb	r2, r2
 8007e16:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	011b      	lsls	r3, r3, #4
 8007e20:	4413      	add	r3, r2
 8007e22:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	0c1a      	lsrs	r2, r3, #16
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	3302      	adds	r3, #2
 8007e2e:	b2d2      	uxtb	r2, r2
 8007e30:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	011b      	lsls	r3, r3, #4
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	0e1a      	lsrs	r2, r3, #24
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	3303      	adds	r3, #3
 8007e48:	b2d2      	uxtb	r2, r2
 8007e4a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	011b      	lsls	r3, r3, #4
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	3304      	adds	r3, #4
 8007e60:	b2d2      	uxtb	r2, r2
 8007e62:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	011b      	lsls	r3, r3, #4
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	0a1a      	lsrs	r2, r3, #8
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	3305      	adds	r3, #5
 8007e7a:	b2d2      	uxtb	r2, r2
 8007e7c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	011b      	lsls	r3, r3, #4
 8007e86:	4413      	add	r3, r2
 8007e88:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	0c1a      	lsrs	r2, r3, #16
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	3306      	adds	r3, #6
 8007e94:	b2d2      	uxtb	r2, r2
 8007e96:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	011b      	lsls	r3, r3, #4
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	0e1a      	lsrs	r2, r3, #24
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	3307      	adds	r3, #7
 8007eae:	b2d2      	uxtb	r2, r2
 8007eb0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d108      	bne.n	8007eca <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68da      	ldr	r2, [r3, #12]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f042 0220 	orr.w	r2, r2, #32
 8007ec6:	60da      	str	r2, [r3, #12]
 8007ec8:	e007      	b.n	8007eda <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	691a      	ldr	r2, [r3, #16]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f042 0220 	orr.w	r2, r2, #32
 8007ed8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	e006      	b.n	8007eec <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
  }
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	371c      	adds	r7, #28
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f08:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d002      	beq.n	8007f16 <HAL_CAN_ActivateNotification+0x1e>
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d109      	bne.n	8007f2a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6959      	ldr	r1, [r3, #20]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	430a      	orrs	r2, r1
 8007f24:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007f26:	2300      	movs	r3, #0
 8007f28:	e006      	b.n	8007f38 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
  }
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b08a      	sub	sp, #40	; 0x28
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	695b      	ldr	r3, [r3, #20]
 8007f56:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007f80:	6a3b      	ldr	r3, [r7, #32]
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d07c      	beq.n	8008084 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	f003 0301 	and.w	r3, r3, #1
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d023      	beq.n	8007fdc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	f003 0302 	and.w	r3, r3, #2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d003      	beq.n	8007fae <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f7fa ffca 	bl	8002f40 <HAL_CAN_TxMailbox0CompleteCallback>
 8007fac:	e016      	b.n	8007fdc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	f003 0304 	and.w	r3, r3, #4
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d004      	beq.n	8007fc2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8007fc0:	e00c      	b.n	8007fdc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	f003 0308 	and.w	r3, r3, #8
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d004      	beq.n	8007fd6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8007fd4:	e002      	b.n	8007fdc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f7fa ffbe 	bl	8002f58 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d024      	beq.n	8008030 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f7fa ffb8 	bl	8002f70 <HAL_CAN_TxMailbox1CompleteCallback>
 8008000:	e016      	b.n	8008030 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008008:	2b00      	cmp	r3, #0
 800800a:	d004      	beq.n	8008016 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008012:	627b      	str	r3, [r7, #36]	; 0x24
 8008014:	e00c      	b.n	8008030 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800801c:	2b00      	cmp	r3, #0
 800801e:	d004      	beq.n	800802a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8008020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008022:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008026:	627b      	str	r3, [r7, #36]	; 0x24
 8008028:	e002      	b.n	8008030 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7fa ffac 	bl	8002f88 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d024      	beq.n	8008084 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008042:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800804a:	2b00      	cmp	r3, #0
 800804c:	d003      	beq.n	8008056 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7fa ffa6 	bl	8002fa0 <HAL_CAN_TxMailbox2CompleteCallback>
 8008054:	e016      	b.n	8008084 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d004      	beq.n	800806a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008066:	627b      	str	r3, [r7, #36]	; 0x24
 8008068:	e00c      	b.n	8008084 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d004      	beq.n	800807e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800807a:	627b      	str	r3, [r7, #36]	; 0x24
 800807c:	e002      	b.n	8008084 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f7fa ff9a 	bl	8002fb8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	f003 0308 	and.w	r3, r3, #8
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00c      	beq.n	80080a8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f003 0310 	and.w	r3, r3, #16
 8008094:	2b00      	cmp	r3, #0
 8008096:	d007      	beq.n	80080a8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8008098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800809e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2210      	movs	r2, #16
 80080a6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	f003 0304 	and.w	r3, r3, #4
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00b      	beq.n	80080ca <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f003 0308 	and.w	r3, r3, #8
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d006      	beq.n	80080ca <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2208      	movs	r2, #8
 80080c2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f8f4 	bl	80082b2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80080ca:	6a3b      	ldr	r3, [r7, #32]
 80080cc:	f003 0302 	and.w	r3, r3, #2
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d009      	beq.n	80080e8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	f003 0303 	and.w	r3, r3, #3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d002      	beq.n	80080e8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7fb f863 	bl	80031ae <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80080e8:	6a3b      	ldr	r3, [r7, #32]
 80080ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00c      	beq.n	800810c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	f003 0310 	and.w	r3, r3, #16
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d007      	beq.n	800810c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80080fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008102:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2210      	movs	r2, #16
 800810a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800810c:	6a3b      	ldr	r3, [r7, #32]
 800810e:	f003 0320 	and.w	r3, r3, #32
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00b      	beq.n	800812e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f003 0308 	and.w	r3, r3, #8
 800811c:	2b00      	cmp	r3, #0
 800811e:	d006      	beq.n	800812e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2208      	movs	r2, #8
 8008126:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f8cc 	bl	80082c6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	f003 0310 	and.w	r3, r3, #16
 8008134:	2b00      	cmp	r3, #0
 8008136:	d009      	beq.n	800814c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	f003 0303 	and.w	r3, r3, #3
 8008142:	2b00      	cmp	r3, #0
 8008144:	d002      	beq.n	800814c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7fb f83d 	bl	80031c6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800814c:	6a3b      	ldr	r3, [r7, #32]
 800814e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00b      	beq.n	800816e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	f003 0310 	and.w	r3, r3, #16
 800815c:	2b00      	cmp	r3, #0
 800815e:	d006      	beq.n	800816e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2210      	movs	r2, #16
 8008166:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f8b6 	bl	80082da <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800816e:	6a3b      	ldr	r3, [r7, #32]
 8008170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00b      	beq.n	8008190 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	f003 0308 	and.w	r3, r3, #8
 800817e:	2b00      	cmp	r3, #0
 8008180:	d006      	beq.n	8008190 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2208      	movs	r2, #8
 8008188:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f8af 	bl	80082ee <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8008190:	6a3b      	ldr	r3, [r7, #32]
 8008192:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d07b      	beq.n	8008292 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	f003 0304 	and.w	r3, r3, #4
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d072      	beq.n	800828a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80081a4:	6a3b      	ldr	r3, [r7, #32]
 80081a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d008      	beq.n	80081c0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d003      	beq.n	80081c0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	f043 0301 	orr.w	r3, r3, #1
 80081be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d008      	beq.n	80081dc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d003      	beq.n	80081dc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80081d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d6:	f043 0302 	orr.w	r3, r3, #2
 80081da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80081dc:	6a3b      	ldr	r3, [r7, #32]
 80081de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d008      	beq.n	80081f8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d003      	beq.n	80081f8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	f043 0304 	orr.w	r3, r3, #4
 80081f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80081f8:	6a3b      	ldr	r3, [r7, #32]
 80081fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d043      	beq.n	800828a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008208:	2b00      	cmp	r3, #0
 800820a:	d03e      	beq.n	800828a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008212:	2b60      	cmp	r3, #96	; 0x60
 8008214:	d02b      	beq.n	800826e <HAL_CAN_IRQHandler+0x32a>
 8008216:	2b60      	cmp	r3, #96	; 0x60
 8008218:	d82e      	bhi.n	8008278 <HAL_CAN_IRQHandler+0x334>
 800821a:	2b50      	cmp	r3, #80	; 0x50
 800821c:	d022      	beq.n	8008264 <HAL_CAN_IRQHandler+0x320>
 800821e:	2b50      	cmp	r3, #80	; 0x50
 8008220:	d82a      	bhi.n	8008278 <HAL_CAN_IRQHandler+0x334>
 8008222:	2b40      	cmp	r3, #64	; 0x40
 8008224:	d019      	beq.n	800825a <HAL_CAN_IRQHandler+0x316>
 8008226:	2b40      	cmp	r3, #64	; 0x40
 8008228:	d826      	bhi.n	8008278 <HAL_CAN_IRQHandler+0x334>
 800822a:	2b30      	cmp	r3, #48	; 0x30
 800822c:	d010      	beq.n	8008250 <HAL_CAN_IRQHandler+0x30c>
 800822e:	2b30      	cmp	r3, #48	; 0x30
 8008230:	d822      	bhi.n	8008278 <HAL_CAN_IRQHandler+0x334>
 8008232:	2b10      	cmp	r3, #16
 8008234:	d002      	beq.n	800823c <HAL_CAN_IRQHandler+0x2f8>
 8008236:	2b20      	cmp	r3, #32
 8008238:	d005      	beq.n	8008246 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800823a:	e01d      	b.n	8008278 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800823c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823e:	f043 0308 	orr.w	r3, r3, #8
 8008242:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008244:	e019      	b.n	800827a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8008246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008248:	f043 0310 	orr.w	r3, r3, #16
 800824c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800824e:	e014      	b.n	800827a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8008250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008252:	f043 0320 	orr.w	r3, r3, #32
 8008256:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008258:	e00f      	b.n	800827a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008260:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008262:	e00a      	b.n	800827a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800826a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800826c:	e005      	b.n	800827a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008274:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008276:	e000      	b.n	800827a <HAL_CAN_IRQHandler+0x336>
            break;
 8008278:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	699a      	ldr	r2, [r3, #24]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008288:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2204      	movs	r2, #4
 8008290:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008294:	2b00      	cmp	r3, #0
 8008296:	d008      	beq.n	80082aa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800829c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829e:	431a      	orrs	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f7fa fe93 	bl	8002fd0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80082aa:	bf00      	nop
 80082ac:	3728      	adds	r7, #40	; 0x28
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b083      	sub	sp, #12
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80082ba:	bf00      	nop
 80082bc:	370c      	adds	r7, #12
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr

080082c6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80082c6:	b480      	push	{r7}
 80082c8:	b083      	sub	sp, #12
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80082ce:	bf00      	nop
 80082d0:	370c      	adds	r7, #12
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80082da:	b480      	push	{r7}
 80082dc:	b083      	sub	sp, #12
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80082e2:	bf00      	nop
 80082e4:	370c      	adds	r7, #12
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b083      	sub	sp, #12
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80082f6:	bf00      	nop
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
	...

08008304 <__NVIC_SetPriorityGrouping>:
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f003 0307 	and.w	r3, r3, #7
 8008312:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008314:	4b0c      	ldr	r3, [pc, #48]	; (8008348 <__NVIC_SetPriorityGrouping+0x44>)
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008320:	4013      	ands	r3, r2
 8008322:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800832c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008336:	4a04      	ldr	r2, [pc, #16]	; (8008348 <__NVIC_SetPriorityGrouping+0x44>)
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	60d3      	str	r3, [r2, #12]
}
 800833c:	bf00      	nop
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	e000ed00 	.word	0xe000ed00

0800834c <__NVIC_GetPriorityGrouping>:
{
 800834c:	b480      	push	{r7}
 800834e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008350:	4b04      	ldr	r3, [pc, #16]	; (8008364 <__NVIC_GetPriorityGrouping+0x18>)
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	0a1b      	lsrs	r3, r3, #8
 8008356:	f003 0307 	and.w	r3, r3, #7
}
 800835a:	4618      	mov	r0, r3
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr
 8008364:	e000ed00 	.word	0xe000ed00

08008368 <__NVIC_EnableIRQ>:
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	4603      	mov	r3, r0
 8008370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008376:	2b00      	cmp	r3, #0
 8008378:	db0b      	blt.n	8008392 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800837a:	79fb      	ldrb	r3, [r7, #7]
 800837c:	f003 021f 	and.w	r2, r3, #31
 8008380:	4907      	ldr	r1, [pc, #28]	; (80083a0 <__NVIC_EnableIRQ+0x38>)
 8008382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008386:	095b      	lsrs	r3, r3, #5
 8008388:	2001      	movs	r0, #1
 800838a:	fa00 f202 	lsl.w	r2, r0, r2
 800838e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008392:	bf00      	nop
 8008394:	370c      	adds	r7, #12
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	e000e100 	.word	0xe000e100

080083a4 <__NVIC_SetPriority>:
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	4603      	mov	r3, r0
 80083ac:	6039      	str	r1, [r7, #0]
 80083ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	db0a      	blt.n	80083ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	490c      	ldr	r1, [pc, #48]	; (80083f0 <__NVIC_SetPriority+0x4c>)
 80083be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083c2:	0112      	lsls	r2, r2, #4
 80083c4:	b2d2      	uxtb	r2, r2
 80083c6:	440b      	add	r3, r1
 80083c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80083cc:	e00a      	b.n	80083e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	4908      	ldr	r1, [pc, #32]	; (80083f4 <__NVIC_SetPriority+0x50>)
 80083d4:	79fb      	ldrb	r3, [r7, #7]
 80083d6:	f003 030f 	and.w	r3, r3, #15
 80083da:	3b04      	subs	r3, #4
 80083dc:	0112      	lsls	r2, r2, #4
 80083de:	b2d2      	uxtb	r2, r2
 80083e0:	440b      	add	r3, r1
 80083e2:	761a      	strb	r2, [r3, #24]
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	e000e100 	.word	0xe000e100
 80083f4:	e000ed00 	.word	0xe000ed00

080083f8 <NVIC_EncodePriority>:
{
 80083f8:	b480      	push	{r7}
 80083fa:	b089      	sub	sp, #36	; 0x24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f003 0307 	and.w	r3, r3, #7
 800840a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	f1c3 0307 	rsb	r3, r3, #7
 8008412:	2b04      	cmp	r3, #4
 8008414:	bf28      	it	cs
 8008416:	2304      	movcs	r3, #4
 8008418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	3304      	adds	r3, #4
 800841e:	2b06      	cmp	r3, #6
 8008420:	d902      	bls.n	8008428 <NVIC_EncodePriority+0x30>
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	3b03      	subs	r3, #3
 8008426:	e000      	b.n	800842a <NVIC_EncodePriority+0x32>
 8008428:	2300      	movs	r3, #0
 800842a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800842c:	f04f 32ff 	mov.w	r2, #4294967295
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	fa02 f303 	lsl.w	r3, r2, r3
 8008436:	43da      	mvns	r2, r3
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	401a      	ands	r2, r3
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008440:	f04f 31ff 	mov.w	r1, #4294967295
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	fa01 f303 	lsl.w	r3, r1, r3
 800844a:	43d9      	mvns	r1, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008450:	4313      	orrs	r3, r2
}
 8008452:	4618      	mov	r0, r3
 8008454:	3724      	adds	r7, #36	; 0x24
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
	...

08008460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3b01      	subs	r3, #1
 800846c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008470:	d301      	bcc.n	8008476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008472:	2301      	movs	r3, #1
 8008474:	e00f      	b.n	8008496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008476:	4a0a      	ldr	r2, [pc, #40]	; (80084a0 <SysTick_Config+0x40>)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	3b01      	subs	r3, #1
 800847c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800847e:	210f      	movs	r1, #15
 8008480:	f04f 30ff 	mov.w	r0, #4294967295
 8008484:	f7ff ff8e 	bl	80083a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008488:	4b05      	ldr	r3, [pc, #20]	; (80084a0 <SysTick_Config+0x40>)
 800848a:	2200      	movs	r2, #0
 800848c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800848e:	4b04      	ldr	r3, [pc, #16]	; (80084a0 <SysTick_Config+0x40>)
 8008490:	2207      	movs	r2, #7
 8008492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	e000e010 	.word	0xe000e010

080084a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f7ff ff29 	bl	8008304 <__NVIC_SetPriorityGrouping>
}
 80084b2:	bf00      	nop
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b086      	sub	sp, #24
 80084be:	af00      	add	r7, sp, #0
 80084c0:	4603      	mov	r3, r0
 80084c2:	60b9      	str	r1, [r7, #8]
 80084c4:	607a      	str	r2, [r7, #4]
 80084c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80084cc:	f7ff ff3e 	bl	800834c <__NVIC_GetPriorityGrouping>
 80084d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	68b9      	ldr	r1, [r7, #8]
 80084d6:	6978      	ldr	r0, [r7, #20]
 80084d8:	f7ff ff8e 	bl	80083f8 <NVIC_EncodePriority>
 80084dc:	4602      	mov	r2, r0
 80084de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084e2:	4611      	mov	r1, r2
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7ff ff5d 	bl	80083a4 <__NVIC_SetPriority>
}
 80084ea:	bf00      	nop
 80084ec:	3718      	adds	r7, #24
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b082      	sub	sp, #8
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	4603      	mov	r3, r0
 80084fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80084fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008500:	4618      	mov	r0, r3
 8008502:	f7ff ff31 	bl	8008368 <__NVIC_EnableIRQ>
}
 8008506:	bf00      	nop
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b082      	sub	sp, #8
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f7ff ffa2 	bl	8008460 <SysTick_Config>
 800851c:	4603      	mov	r3, r0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
	...

08008528 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b086      	sub	sp, #24
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008530:	2300      	movs	r3, #0
 8008532:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008534:	f7fe fcfc 	bl	8006f30 <HAL_GetTick>
 8008538:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d101      	bne.n	8008544 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e099      	b.n	8008678 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2202      	movs	r2, #2
 8008550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f022 0201 	bic.w	r2, r2, #1
 8008562:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008564:	e00f      	b.n	8008586 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008566:	f7fe fce3 	bl	8006f30 <HAL_GetTick>
 800856a:	4602      	mov	r2, r0
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	2b05      	cmp	r3, #5
 8008572:	d908      	bls.n	8008586 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2220      	movs	r2, #32
 8008578:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2203      	movs	r2, #3
 800857e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008582:	2303      	movs	r3, #3
 8008584:	e078      	b.n	8008678 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0301 	and.w	r3, r3, #1
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1e8      	bne.n	8008566 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	4b38      	ldr	r3, [pc, #224]	; (8008680 <HAL_DMA_Init+0x158>)
 80085a0:	4013      	ands	r3, r2
 80085a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685a      	ldr	r2, [r3, #4]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80085b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a1b      	ldr	r3, [r3, #32]
 80085d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085dc:	2b04      	cmp	r3, #4
 80085de:	d107      	bne.n	80085f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e8:	4313      	orrs	r3, r2
 80085ea:	697a      	ldr	r2, [r7, #20]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	697a      	ldr	r2, [r7, #20]
 80085f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	695b      	ldr	r3, [r3, #20]
 80085fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	f023 0307 	bic.w	r3, r3, #7
 8008606:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860c:	697a      	ldr	r2, [r7, #20]
 800860e:	4313      	orrs	r3, r2
 8008610:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008616:	2b04      	cmp	r3, #4
 8008618:	d117      	bne.n	800864a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	4313      	orrs	r3, r2
 8008622:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00e      	beq.n	800864a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fab3 	bl	8008b98 <DMA_CheckFifoParam>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d008      	beq.n	800864a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2240      	movs	r2, #64	; 0x40
 800863c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008646:	2301      	movs	r3, #1
 8008648:	e016      	b.n	8008678 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fa6a 	bl	8008b2c <DMA_CalcBaseAndBitshift>
 8008658:	4603      	mov	r3, r0
 800865a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008660:	223f      	movs	r2, #63	; 0x3f
 8008662:	409a      	lsls	r2, r3
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3718      	adds	r7, #24
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	e010803f 	.word	0xe010803f

08008684 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
 8008690:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008692:	2300      	movs	r3, #0
 8008694:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800869a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d101      	bne.n	80086aa <HAL_DMA_Start_IT+0x26>
 80086a6:	2302      	movs	r3, #2
 80086a8:	e048      	b.n	800873c <HAL_DMA_Start_IT+0xb8>
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2201      	movs	r2, #1
 80086ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d137      	bne.n	800872e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2202      	movs	r2, #2
 80086c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	68b9      	ldr	r1, [r7, #8]
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f000 f9fc 	bl	8008ad0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086dc:	223f      	movs	r2, #63	; 0x3f
 80086de:	409a      	lsls	r2, r3
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f042 0216 	orr.w	r2, r2, #22
 80086f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	695a      	ldr	r2, [r3, #20]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008702:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008708:	2b00      	cmp	r3, #0
 800870a:	d007      	beq.n	800871c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f042 0208 	orr.w	r2, r2, #8
 800871a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f042 0201 	orr.w	r2, r2, #1
 800872a:	601a      	str	r2, [r3, #0]
 800872c:	e005      	b.n	800873a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008736:	2302      	movs	r3, #2
 8008738:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800873a:	7dfb      	ldrb	r3, [r7, #23]
}
 800873c:	4618      	mov	r0, r3
 800873e:	3718      	adds	r7, #24
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b02      	cmp	r3, #2
 8008756:	d004      	beq.n	8008762 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2280      	movs	r2, #128	; 0x80
 800875c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	e00c      	b.n	800877c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2205      	movs	r2, #5
 8008766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f022 0201 	bic.w	r2, r2, #1
 8008778:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b086      	sub	sp, #24
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008790:	2300      	movs	r3, #0
 8008792:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008794:	4b8e      	ldr	r3, [pc, #568]	; (80089d0 <HAL_DMA_IRQHandler+0x248>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a8e      	ldr	r2, [pc, #568]	; (80089d4 <HAL_DMA_IRQHandler+0x24c>)
 800879a:	fba2 2303 	umull	r2, r3, r2, r3
 800879e:	0a9b      	lsrs	r3, r3, #10
 80087a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087b2:	2208      	movs	r2, #8
 80087b4:	409a      	lsls	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	4013      	ands	r3, r2
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d01a      	beq.n	80087f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 0304 	and.w	r3, r3, #4
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d013      	beq.n	80087f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f022 0204 	bic.w	r2, r2, #4
 80087da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087e0:	2208      	movs	r2, #8
 80087e2:	409a      	lsls	r2, r3
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ec:	f043 0201 	orr.w	r2, r3, #1
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087f8:	2201      	movs	r2, #1
 80087fa:	409a      	lsls	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	4013      	ands	r3, r2
 8008800:	2b00      	cmp	r3, #0
 8008802:	d012      	beq.n	800882a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00b      	beq.n	800882a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008816:	2201      	movs	r2, #1
 8008818:	409a      	lsls	r2, r3
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008822:	f043 0202 	orr.w	r2, r3, #2
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800882e:	2204      	movs	r2, #4
 8008830:	409a      	lsls	r2, r3
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	4013      	ands	r3, r2
 8008836:	2b00      	cmp	r3, #0
 8008838:	d012      	beq.n	8008860 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 0302 	and.w	r3, r3, #2
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00b      	beq.n	8008860 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800884c:	2204      	movs	r2, #4
 800884e:	409a      	lsls	r2, r3
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008858:	f043 0204 	orr.w	r2, r3, #4
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008864:	2210      	movs	r2, #16
 8008866:	409a      	lsls	r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4013      	ands	r3, r2
 800886c:	2b00      	cmp	r3, #0
 800886e:	d043      	beq.n	80088f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 0308 	and.w	r3, r3, #8
 800887a:	2b00      	cmp	r3, #0
 800887c:	d03c      	beq.n	80088f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008882:	2210      	movs	r2, #16
 8008884:	409a      	lsls	r2, r3
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d018      	beq.n	80088ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d108      	bne.n	80088b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d024      	beq.n	80088f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	4798      	blx	r3
 80088b6:	e01f      	b.n	80088f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d01b      	beq.n	80088f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	4798      	blx	r3
 80088c8:	e016      	b.n	80088f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d107      	bne.n	80088e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 0208 	bic.w	r2, r2, #8
 80088e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d003      	beq.n	80088f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088fc:	2220      	movs	r2, #32
 80088fe:	409a      	lsls	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	4013      	ands	r3, r2
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 808f 	beq.w	8008a28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 0310 	and.w	r3, r3, #16
 8008914:	2b00      	cmp	r3, #0
 8008916:	f000 8087 	beq.w	8008a28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800891e:	2220      	movs	r2, #32
 8008920:	409a      	lsls	r2, r3
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800892c:	b2db      	uxtb	r3, r3
 800892e:	2b05      	cmp	r3, #5
 8008930:	d136      	bne.n	80089a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f022 0216 	bic.w	r2, r2, #22
 8008940:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	695a      	ldr	r2, [r3, #20]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008950:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008956:	2b00      	cmp	r3, #0
 8008958:	d103      	bne.n	8008962 <HAL_DMA_IRQHandler+0x1da>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800895e:	2b00      	cmp	r3, #0
 8008960:	d007      	beq.n	8008972 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f022 0208 	bic.w	r2, r2, #8
 8008970:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008976:	223f      	movs	r2, #63	; 0x3f
 8008978:	409a      	lsls	r2, r3
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2201      	movs	r2, #1
 800898a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008992:	2b00      	cmp	r3, #0
 8008994:	d07e      	beq.n	8008a94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	4798      	blx	r3
        }
        return;
 800899e:	e079      	b.n	8008a94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d01d      	beq.n	80089ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10d      	bne.n	80089d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d031      	beq.n	8008a28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	4798      	blx	r3
 80089cc:	e02c      	b.n	8008a28 <HAL_DMA_IRQHandler+0x2a0>
 80089ce:	bf00      	nop
 80089d0:	200001ac 	.word	0x200001ac
 80089d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d023      	beq.n	8008a28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	4798      	blx	r3
 80089e8:	e01e      	b.n	8008a28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10f      	bne.n	8008a18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f022 0210 	bic.w	r2, r2, #16
 8008a06:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d003      	beq.n	8008a28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d032      	beq.n	8008a96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a34:	f003 0301 	and.w	r3, r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d022      	beq.n	8008a82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2205      	movs	r2, #5
 8008a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f022 0201 	bic.w	r2, r2, #1
 8008a52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	3301      	adds	r3, #1
 8008a58:	60bb      	str	r3, [r7, #8]
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d307      	bcc.n	8008a70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 0301 	and.w	r3, r3, #1
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1f2      	bne.n	8008a54 <HAL_DMA_IRQHandler+0x2cc>
 8008a6e:	e000      	b.n	8008a72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008a70:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d005      	beq.n	8008a96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	4798      	blx	r3
 8008a92:	e000      	b.n	8008a96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008a94:	bf00      	nop
    }
  }
}
 8008a96:	3718      	adds	r7, #24
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008aaa:	b2db      	uxtb	r3, r3
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	607a      	str	r2, [r7, #4]
 8008adc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008aec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	683a      	ldr	r2, [r7, #0]
 8008af4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	2b40      	cmp	r3, #64	; 0x40
 8008afc:	d108      	bne.n	8008b10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008b0e:	e007      	b.n	8008b20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	60da      	str	r2, [r3, #12]
}
 8008b20:	bf00      	nop
 8008b22:	3714      	adds	r7, #20
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	3b10      	subs	r3, #16
 8008b3c:	4a14      	ldr	r2, [pc, #80]	; (8008b90 <DMA_CalcBaseAndBitshift+0x64>)
 8008b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b42:	091b      	lsrs	r3, r3, #4
 8008b44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008b46:	4a13      	ldr	r2, [pc, #76]	; (8008b94 <DMA_CalcBaseAndBitshift+0x68>)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d909      	bls.n	8008b6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008b62:	f023 0303 	bic.w	r3, r3, #3
 8008b66:	1d1a      	adds	r2, r3, #4
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	659a      	str	r2, [r3, #88]	; 0x58
 8008b6c:	e007      	b.n	8008b7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008b76:	f023 0303 	bic.w	r3, r3, #3
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3714      	adds	r7, #20
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	aaaaaaab 	.word	0xaaaaaaab
 8008b94:	0800e174 	.word	0x0800e174

08008b98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d11f      	bne.n	8008bf2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	2b03      	cmp	r3, #3
 8008bb6:	d856      	bhi.n	8008c66 <DMA_CheckFifoParam+0xce>
 8008bb8:	a201      	add	r2, pc, #4	; (adr r2, 8008bc0 <DMA_CheckFifoParam+0x28>)
 8008bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bbe:	bf00      	nop
 8008bc0:	08008bd1 	.word	0x08008bd1
 8008bc4:	08008be3 	.word	0x08008be3
 8008bc8:	08008bd1 	.word	0x08008bd1
 8008bcc:	08008c67 	.word	0x08008c67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d046      	beq.n	8008c6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008be0:	e043      	b.n	8008c6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008bea:	d140      	bne.n	8008c6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008bf0:	e03d      	b.n	8008c6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bfa:	d121      	bne.n	8008c40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	d837      	bhi.n	8008c72 <DMA_CheckFifoParam+0xda>
 8008c02:	a201      	add	r2, pc, #4	; (adr r2, 8008c08 <DMA_CheckFifoParam+0x70>)
 8008c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c08:	08008c19 	.word	0x08008c19
 8008c0c:	08008c1f 	.word	0x08008c1f
 8008c10:	08008c19 	.word	0x08008c19
 8008c14:	08008c31 	.word	0x08008c31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c1c:	e030      	b.n	8008c80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d025      	beq.n	8008c76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c2e:	e022      	b.n	8008c76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008c38:	d11f      	bne.n	8008c7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008c3e:	e01c      	b.n	8008c7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d903      	bls.n	8008c4e <DMA_CheckFifoParam+0xb6>
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d003      	beq.n	8008c54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008c4c:	e018      	b.n	8008c80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	73fb      	strb	r3, [r7, #15]
      break;
 8008c52:	e015      	b.n	8008c80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00e      	beq.n	8008c7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	73fb      	strb	r3, [r7, #15]
      break;
 8008c64:	e00b      	b.n	8008c7e <DMA_CheckFifoParam+0xe6>
      break;
 8008c66:	bf00      	nop
 8008c68:	e00a      	b.n	8008c80 <DMA_CheckFifoParam+0xe8>
      break;
 8008c6a:	bf00      	nop
 8008c6c:	e008      	b.n	8008c80 <DMA_CheckFifoParam+0xe8>
      break;
 8008c6e:	bf00      	nop
 8008c70:	e006      	b.n	8008c80 <DMA_CheckFifoParam+0xe8>
      break;
 8008c72:	bf00      	nop
 8008c74:	e004      	b.n	8008c80 <DMA_CheckFifoParam+0xe8>
      break;
 8008c76:	bf00      	nop
 8008c78:	e002      	b.n	8008c80 <DMA_CheckFifoParam+0xe8>
      break;   
 8008c7a:	bf00      	nop
 8008c7c:	e000      	b.n	8008c80 <DMA_CheckFifoParam+0xe8>
      break;
 8008c7e:	bf00      	nop
    }
  } 
  
  return status; 
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3714      	adds	r7, #20
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop

08008c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b089      	sub	sp, #36	; 0x24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	61fb      	str	r3, [r7, #28]
 8008caa:	e165      	b.n	8008f78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008cac:	2201      	movs	r2, #1
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	f040 8154 	bne.w	8008f72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	d003      	beq.n	8008cda <HAL_GPIO_Init+0x4a>
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	2b12      	cmp	r3, #18
 8008cd8:	d123      	bne.n	8008d22 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	08da      	lsrs	r2, r3, #3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	3208      	adds	r2, #8
 8008ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	f003 0307 	and.w	r3, r3, #7
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	220f      	movs	r2, #15
 8008cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf6:	43db      	mvns	r3, r3
 8008cf8:	69ba      	ldr	r2, [r7, #24]
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	691a      	ldr	r2, [r3, #16]
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	f003 0307 	and.w	r3, r3, #7
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0e:	69ba      	ldr	r2, [r7, #24]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	08da      	lsrs	r2, r3, #3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3208      	adds	r2, #8
 8008d1c:	69b9      	ldr	r1, [r7, #24]
 8008d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	005b      	lsls	r3, r3, #1
 8008d2c:	2203      	movs	r2, #3
 8008d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d32:	43db      	mvns	r3, r3
 8008d34:	69ba      	ldr	r2, [r7, #24]
 8008d36:	4013      	ands	r3, r2
 8008d38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	f003 0203 	and.w	r2, r3, #3
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	005b      	lsls	r3, r3, #1
 8008d46:	fa02 f303 	lsl.w	r3, r2, r3
 8008d4a:	69ba      	ldr	r2, [r7, #24]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	69ba      	ldr	r2, [r7, #24]
 8008d54:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d00b      	beq.n	8008d76 <HAL_GPIO_Init+0xe6>
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d007      	beq.n	8008d76 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008d6a:	2b11      	cmp	r3, #17
 8008d6c:	d003      	beq.n	8008d76 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	2b12      	cmp	r3, #18
 8008d74:	d130      	bne.n	8008dd8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	005b      	lsls	r3, r3, #1
 8008d80:	2203      	movs	r2, #3
 8008d82:	fa02 f303 	lsl.w	r3, r2, r3
 8008d86:	43db      	mvns	r3, r3
 8008d88:	69ba      	ldr	r2, [r7, #24]
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	68da      	ldr	r2, [r3, #12]
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	005b      	lsls	r3, r3, #1
 8008d96:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9a:	69ba      	ldr	r2, [r7, #24]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	69ba      	ldr	r2, [r7, #24]
 8008da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008dac:	2201      	movs	r2, #1
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	fa02 f303 	lsl.w	r3, r2, r3
 8008db4:	43db      	mvns	r3, r3
 8008db6:	69ba      	ldr	r2, [r7, #24]
 8008db8:	4013      	ands	r3, r2
 8008dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	091b      	lsrs	r3, r3, #4
 8008dc2:	f003 0201 	and.w	r2, r3, #1
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dcc:	69ba      	ldr	r2, [r7, #24]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	69ba      	ldr	r2, [r7, #24]
 8008dd6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	005b      	lsls	r3, r3, #1
 8008de2:	2203      	movs	r2, #3
 8008de4:	fa02 f303 	lsl.w	r3, r2, r3
 8008de8:	43db      	mvns	r3, r3
 8008dea:	69ba      	ldr	r2, [r7, #24]
 8008dec:	4013      	ands	r3, r2
 8008dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	689a      	ldr	r2, [r3, #8]
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	005b      	lsls	r3, r3, #1
 8008df8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dfc:	69ba      	ldr	r2, [r7, #24]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	69ba      	ldr	r2, [r7, #24]
 8008e06:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 80ae 	beq.w	8008f72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e16:	2300      	movs	r3, #0
 8008e18:	60fb      	str	r3, [r7, #12]
 8008e1a:	4b5d      	ldr	r3, [pc, #372]	; (8008f90 <HAL_GPIO_Init+0x300>)
 8008e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e1e:	4a5c      	ldr	r2, [pc, #368]	; (8008f90 <HAL_GPIO_Init+0x300>)
 8008e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e24:	6453      	str	r3, [r2, #68]	; 0x44
 8008e26:	4b5a      	ldr	r3, [pc, #360]	; (8008f90 <HAL_GPIO_Init+0x300>)
 8008e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e2e:	60fb      	str	r3, [r7, #12]
 8008e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008e32:	4a58      	ldr	r2, [pc, #352]	; (8008f94 <HAL_GPIO_Init+0x304>)
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	089b      	lsrs	r3, r3, #2
 8008e38:	3302      	adds	r3, #2
 8008e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	f003 0303 	and.w	r3, r3, #3
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	220f      	movs	r2, #15
 8008e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e4e:	43db      	mvns	r3, r3
 8008e50:	69ba      	ldr	r2, [r7, #24]
 8008e52:	4013      	ands	r3, r2
 8008e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a4f      	ldr	r2, [pc, #316]	; (8008f98 <HAL_GPIO_Init+0x308>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d025      	beq.n	8008eaa <HAL_GPIO_Init+0x21a>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a4e      	ldr	r2, [pc, #312]	; (8008f9c <HAL_GPIO_Init+0x30c>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d01f      	beq.n	8008ea6 <HAL_GPIO_Init+0x216>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a4d      	ldr	r2, [pc, #308]	; (8008fa0 <HAL_GPIO_Init+0x310>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d019      	beq.n	8008ea2 <HAL_GPIO_Init+0x212>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a4c      	ldr	r2, [pc, #304]	; (8008fa4 <HAL_GPIO_Init+0x314>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d013      	beq.n	8008e9e <HAL_GPIO_Init+0x20e>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4a4b      	ldr	r2, [pc, #300]	; (8008fa8 <HAL_GPIO_Init+0x318>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d00d      	beq.n	8008e9a <HAL_GPIO_Init+0x20a>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a4a      	ldr	r2, [pc, #296]	; (8008fac <HAL_GPIO_Init+0x31c>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d007      	beq.n	8008e96 <HAL_GPIO_Init+0x206>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a49      	ldr	r2, [pc, #292]	; (8008fb0 <HAL_GPIO_Init+0x320>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d101      	bne.n	8008e92 <HAL_GPIO_Init+0x202>
 8008e8e:	2306      	movs	r3, #6
 8008e90:	e00c      	b.n	8008eac <HAL_GPIO_Init+0x21c>
 8008e92:	2307      	movs	r3, #7
 8008e94:	e00a      	b.n	8008eac <HAL_GPIO_Init+0x21c>
 8008e96:	2305      	movs	r3, #5
 8008e98:	e008      	b.n	8008eac <HAL_GPIO_Init+0x21c>
 8008e9a:	2304      	movs	r3, #4
 8008e9c:	e006      	b.n	8008eac <HAL_GPIO_Init+0x21c>
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e004      	b.n	8008eac <HAL_GPIO_Init+0x21c>
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	e002      	b.n	8008eac <HAL_GPIO_Init+0x21c>
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e000      	b.n	8008eac <HAL_GPIO_Init+0x21c>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	69fa      	ldr	r2, [r7, #28]
 8008eae:	f002 0203 	and.w	r2, r2, #3
 8008eb2:	0092      	lsls	r2, r2, #2
 8008eb4:	4093      	lsls	r3, r2
 8008eb6:	69ba      	ldr	r2, [r7, #24]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008ebc:	4935      	ldr	r1, [pc, #212]	; (8008f94 <HAL_GPIO_Init+0x304>)
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	089b      	lsrs	r3, r3, #2
 8008ec2:	3302      	adds	r3, #2
 8008ec4:	69ba      	ldr	r2, [r7, #24]
 8008ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008eca:	4b3a      	ldr	r3, [pc, #232]	; (8008fb4 <HAL_GPIO_Init+0x324>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	43db      	mvns	r3, r3
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d003      	beq.n	8008eee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008ee6:	69ba      	ldr	r2, [r7, #24]
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008eee:	4a31      	ldr	r2, [pc, #196]	; (8008fb4 <HAL_GPIO_Init+0x324>)
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008ef4:	4b2f      	ldr	r3, [pc, #188]	; (8008fb4 <HAL_GPIO_Init+0x324>)
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	43db      	mvns	r3, r3
 8008efe:	69ba      	ldr	r2, [r7, #24]
 8008f00:	4013      	ands	r3, r2
 8008f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d003      	beq.n	8008f18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008f10:	69ba      	ldr	r2, [r7, #24]
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008f18:	4a26      	ldr	r2, [pc, #152]	; (8008fb4 <HAL_GPIO_Init+0x324>)
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008f1e:	4b25      	ldr	r3, [pc, #148]	; (8008fb4 <HAL_GPIO_Init+0x324>)
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	43db      	mvns	r3, r3
 8008f28:	69ba      	ldr	r2, [r7, #24]
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d003      	beq.n	8008f42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008f3a:	69ba      	ldr	r2, [r7, #24]
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008f42:	4a1c      	ldr	r2, [pc, #112]	; (8008fb4 <HAL_GPIO_Init+0x324>)
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008f48:	4b1a      	ldr	r3, [pc, #104]	; (8008fb4 <HAL_GPIO_Init+0x324>)
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	43db      	mvns	r3, r3
 8008f52:	69ba      	ldr	r2, [r7, #24]
 8008f54:	4013      	ands	r3, r2
 8008f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d003      	beq.n	8008f6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008f64:	69ba      	ldr	r2, [r7, #24]
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008f6c:	4a11      	ldr	r2, [pc, #68]	; (8008fb4 <HAL_GPIO_Init+0x324>)
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	3301      	adds	r3, #1
 8008f76:	61fb      	str	r3, [r7, #28]
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	2b0f      	cmp	r3, #15
 8008f7c:	f67f ae96 	bls.w	8008cac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008f80:	bf00      	nop
 8008f82:	bf00      	nop
 8008f84:	3724      	adds	r7, #36	; 0x24
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	40023800 	.word	0x40023800
 8008f94:	40013800 	.word	0x40013800
 8008f98:	40020000 	.word	0x40020000
 8008f9c:	40020400 	.word	0x40020400
 8008fa0:	40020800 	.word	0x40020800
 8008fa4:	40020c00 	.word	0x40020c00
 8008fa8:	40021000 	.word	0x40021000
 8008fac:	40021400 	.word	0x40021400
 8008fb0:	40021800 	.word	0x40021800
 8008fb4:	40013c00 	.word	0x40013c00

08008fb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	691a      	ldr	r2, [r3, #16]
 8008fc8:	887b      	ldrh	r3, [r7, #2]
 8008fca:	4013      	ands	r3, r2
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d002      	beq.n	8008fd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	73fb      	strb	r3, [r7, #15]
 8008fd4:	e001      	b.n	8008fda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3714      	adds	r7, #20
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	807b      	strh	r3, [r7, #2]
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008ff8:	787b      	ldrb	r3, [r7, #1]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d003      	beq.n	8009006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008ffe:	887a      	ldrh	r2, [r7, #2]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009004:	e003      	b.n	800900e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009006:	887b      	ldrh	r3, [r7, #2]
 8009008:	041a      	lsls	r2, r3, #16
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	619a      	str	r2, [r3, #24]
}
 800900e:	bf00      	nop
 8009010:	370c      	adds	r7, #12
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr

0800901a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800901a:	b480      	push	{r7}
 800901c:	b083      	sub	sp, #12
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
 8009022:	460b      	mov	r3, r1
 8009024:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	695a      	ldr	r2, [r3, #20]
 800902a:	887b      	ldrh	r3, [r7, #2]
 800902c:	401a      	ands	r2, r3
 800902e:	887b      	ldrh	r3, [r7, #2]
 8009030:	429a      	cmp	r2, r3
 8009032:	d104      	bne.n	800903e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009034:	887b      	ldrh	r3, [r7, #2]
 8009036:	041a      	lsls	r2, r3, #16
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800903c:	e002      	b.n	8009044 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800903e:	887a      	ldrh	r2, [r7, #2]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	619a      	str	r2, [r3, #24]
}
 8009044:	bf00      	nop
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	4603      	mov	r3, r0
 8009058:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800905a:	4b08      	ldr	r3, [pc, #32]	; (800907c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800905c:	695a      	ldr	r2, [r3, #20]
 800905e:	88fb      	ldrh	r3, [r7, #6]
 8009060:	4013      	ands	r3, r2
 8009062:	2b00      	cmp	r3, #0
 8009064:	d006      	beq.n	8009074 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009066:	4a05      	ldr	r2, [pc, #20]	; (800907c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009068:	88fb      	ldrh	r3, [r7, #6]
 800906a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800906c:	88fb      	ldrh	r3, [r7, #6]
 800906e:	4618      	mov	r0, r3
 8009070:	f000 f806 	bl	8009080 <HAL_GPIO_EXTI_Callback>
  }
}
 8009074:	bf00      	nop
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}
 800907c:	40013c00 	.word	0x40013c00

08009080 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	4603      	mov	r3, r0
 8009088:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800908a:	bf00      	nop
 800908c:	370c      	adds	r7, #12
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr
	...

08009098 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d101      	bne.n	80090aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e11b      	b.n	80092e2 <HAL_I2C_Init+0x24a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d106      	bne.n	80090c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 f91e 	bl	8009300 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2224      	movs	r2, #36	; 0x24
 80090c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f022 0201 	bic.w	r2, r2, #1
 80090da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80090dc:	f002 f9b6 	bl	800b44c <HAL_RCC_GetPCLK1Freq>
 80090e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	4a81      	ldr	r2, [pc, #516]	; (80092ec <HAL_I2C_Init+0x254>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d807      	bhi.n	80090fc <HAL_I2C_Init+0x64>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	4a80      	ldr	r2, [pc, #512]	; (80092f0 <HAL_I2C_Init+0x258>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	bf94      	ite	ls
 80090f4:	2301      	movls	r3, #1
 80090f6:	2300      	movhi	r3, #0
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	e006      	b.n	800910a <HAL_I2C_Init+0x72>
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	4a7d      	ldr	r2, [pc, #500]	; (80092f4 <HAL_I2C_Init+0x25c>)
 8009100:	4293      	cmp	r3, r2
 8009102:	bf94      	ite	ls
 8009104:	2301      	movls	r3, #1
 8009106:	2300      	movhi	r3, #0
 8009108:	b2db      	uxtb	r3, r3
 800910a:	2b00      	cmp	r3, #0
 800910c:	d001      	beq.n	8009112 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e0e7      	b.n	80092e2 <HAL_I2C_Init+0x24a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	4a78      	ldr	r2, [pc, #480]	; (80092f8 <HAL_I2C_Init+0x260>)
 8009116:	fba2 2303 	umull	r2, r3, r2, r3
 800911a:	0c9b      	lsrs	r3, r3, #18
 800911c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	430a      	orrs	r2, r1
 8009130:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	6a1b      	ldr	r3, [r3, #32]
 8009138:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	4a6a      	ldr	r2, [pc, #424]	; (80092ec <HAL_I2C_Init+0x254>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d802      	bhi.n	800914c <HAL_I2C_Init+0xb4>
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	3301      	adds	r3, #1
 800914a:	e009      	b.n	8009160 <HAL_I2C_Init+0xc8>
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009152:	fb02 f303 	mul.w	r3, r2, r3
 8009156:	4a69      	ldr	r2, [pc, #420]	; (80092fc <HAL_I2C_Init+0x264>)
 8009158:	fba2 2303 	umull	r2, r3, r2, r3
 800915c:	099b      	lsrs	r3, r3, #6
 800915e:	3301      	adds	r3, #1
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	6812      	ldr	r2, [r2, #0]
 8009164:	430b      	orrs	r3, r1
 8009166:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	69db      	ldr	r3, [r3, #28]
 800916e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009172:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	495c      	ldr	r1, [pc, #368]	; (80092ec <HAL_I2C_Init+0x254>)
 800917c:	428b      	cmp	r3, r1
 800917e:	d819      	bhi.n	80091b4 <HAL_I2C_Init+0x11c>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	1e59      	subs	r1, r3, #1
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	005b      	lsls	r3, r3, #1
 800918a:	fbb1 f3f3 	udiv	r3, r1, r3
 800918e:	1c59      	adds	r1, r3, #1
 8009190:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009194:	400b      	ands	r3, r1
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00a      	beq.n	80091b0 <HAL_I2C_Init+0x118>
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	1e59      	subs	r1, r3, #1
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	005b      	lsls	r3, r3, #1
 80091a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80091a8:	3301      	adds	r3, #1
 80091aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091ae:	e051      	b.n	8009254 <HAL_I2C_Init+0x1bc>
 80091b0:	2304      	movs	r3, #4
 80091b2:	e04f      	b.n	8009254 <HAL_I2C_Init+0x1bc>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d111      	bne.n	80091e0 <HAL_I2C_Init+0x148>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	1e58      	subs	r0, r3, #1
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6859      	ldr	r1, [r3, #4]
 80091c4:	460b      	mov	r3, r1
 80091c6:	005b      	lsls	r3, r3, #1
 80091c8:	440b      	add	r3, r1
 80091ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80091ce:	3301      	adds	r3, #1
 80091d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	bf0c      	ite	eq
 80091d8:	2301      	moveq	r3, #1
 80091da:	2300      	movne	r3, #0
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	e012      	b.n	8009206 <HAL_I2C_Init+0x16e>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	1e58      	subs	r0, r3, #1
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6859      	ldr	r1, [r3, #4]
 80091e8:	460b      	mov	r3, r1
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	440b      	add	r3, r1
 80091ee:	0099      	lsls	r1, r3, #2
 80091f0:	440b      	add	r3, r1
 80091f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80091f6:	3301      	adds	r3, #1
 80091f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	bf0c      	ite	eq
 8009200:	2301      	moveq	r3, #1
 8009202:	2300      	movne	r3, #0
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b00      	cmp	r3, #0
 8009208:	d001      	beq.n	800920e <HAL_I2C_Init+0x176>
 800920a:	2301      	movs	r3, #1
 800920c:	e022      	b.n	8009254 <HAL_I2C_Init+0x1bc>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d10e      	bne.n	8009234 <HAL_I2C_Init+0x19c>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	1e58      	subs	r0, r3, #1
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6859      	ldr	r1, [r3, #4]
 800921e:	460b      	mov	r3, r1
 8009220:	005b      	lsls	r3, r3, #1
 8009222:	440b      	add	r3, r1
 8009224:	fbb0 f3f3 	udiv	r3, r0, r3
 8009228:	3301      	adds	r3, #1
 800922a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800922e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009232:	e00f      	b.n	8009254 <HAL_I2C_Init+0x1bc>
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	1e58      	subs	r0, r3, #1
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6859      	ldr	r1, [r3, #4]
 800923c:	460b      	mov	r3, r1
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	440b      	add	r3, r1
 8009242:	0099      	lsls	r1, r3, #2
 8009244:	440b      	add	r3, r1
 8009246:	fbb0 f3f3 	udiv	r3, r0, r3
 800924a:	3301      	adds	r3, #1
 800924c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009250:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009254:	6879      	ldr	r1, [r7, #4]
 8009256:	6809      	ldr	r1, [r1, #0]
 8009258:	4313      	orrs	r3, r2
 800925a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	69da      	ldr	r2, [r3, #28]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a1b      	ldr	r3, [r3, #32]
 800926e:	431a      	orrs	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	430a      	orrs	r2, r1
 8009276:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009282:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	6911      	ldr	r1, [r2, #16]
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	68d2      	ldr	r2, [r2, #12]
 800928e:	4311      	orrs	r1, r2
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	6812      	ldr	r2, [r2, #0]
 8009294:	430b      	orrs	r3, r1
 8009296:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	695a      	ldr	r2, [r3, #20]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	431a      	orrs	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	430a      	orrs	r2, r1
 80092b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f042 0201 	orr.w	r2, r2, #1
 80092c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2220      	movs	r2, #32
 80092ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	000186a0 	.word	0x000186a0
 80092f0:	001e847f 	.word	0x001e847f
 80092f4:	003d08ff 	.word	0x003d08ff
 80092f8:	431bde83 	.word	0x431bde83
 80092fc:	10624dd3 	.word	0x10624dd3

08009300 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8009308:	bf00      	nop
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	607a      	str	r2, [r7, #4]
 800931e:	461a      	mov	r2, r3
 8009320:	460b      	mov	r3, r1
 8009322:	817b      	strh	r3, [r7, #10]
 8009324:	4613      	mov	r3, r2
 8009326:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8009328:	2300      	movs	r3, #0
 800932a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b20      	cmp	r3, #32
 8009336:	f040 80f4 	bne.w	8009522 <HAL_I2C_Master_Transmit_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800933a:	4b7c      	ldr	r3, [pc, #496]	; (800952c <HAL_I2C_Master_Transmit_DMA+0x218>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	08db      	lsrs	r3, r3, #3
 8009340:	4a7b      	ldr	r2, [pc, #492]	; (8009530 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8009342:	fba2 2303 	umull	r2, r3, r2, r3
 8009346:	0a1a      	lsrs	r2, r3, #8
 8009348:	4613      	mov	r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	4413      	add	r3, r2
 800934e:	009a      	lsls	r2, r3, #2
 8009350:	4413      	add	r3, r2
 8009352:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	3b01      	subs	r3, #1
 8009358:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d116      	bne.n	800938e <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2200      	movs	r2, #0
 8009364:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2220      	movs	r2, #32
 800936a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800937a:	f043 0220 	orr.w	r2, r3, #32
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	e0ca      	b.n	8009524 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	f003 0302 	and.w	r3, r3, #2
 8009398:	2b02      	cmp	r3, #2
 800939a:	d0db      	beq.n	8009354 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d101      	bne.n	80093aa <HAL_I2C_Master_Transmit_DMA+0x96>
 80093a6:	2302      	movs	r3, #2
 80093a8:	e0bc      	b.n	8009524 <HAL_I2C_Master_Transmit_DMA+0x210>
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2201      	movs	r2, #1
 80093ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 0301 	and.w	r3, r3, #1
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d007      	beq.n	80093d0 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f042 0201 	orr.w	r2, r2, #1
 80093ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2221      	movs	r2, #33	; 0x21
 80093e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2210      	movs	r2, #16
 80093ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2200      	movs	r2, #0
 80093f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	893a      	ldrh	r2, [r7, #8]
 8009400:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009406:	b29a      	uxth	r2, r3
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	4a49      	ldr	r2, [pc, #292]	; (8009534 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8009410:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8009412:	897a      	ldrh	r2, [r7, #10]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800941c:	2b00      	cmp	r3, #0
 800941e:	d062      	beq.n	80094e6 <HAL_I2C_Master_Transmit_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009424:	4a44      	ldr	r2, [pc, #272]	; (8009538 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8009426:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800942c:	4a43      	ldr	r2, [pc, #268]	; (800953c <HAL_I2C_Master_Transmit_DMA+0x228>)
 800942e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009434:	2200      	movs	r2, #0
 8009436:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800943c:	2200      	movs	r2, #0
 800943e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009444:	2200      	movs	r2, #0
 8009446:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800944c:	2200      	movs	r2, #0
 800944e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009458:	4619      	mov	r1, r3
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	3310      	adds	r3, #16
 8009460:	461a      	mov	r2, r3
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009466:	f7ff f90d 	bl	8008684 <HAL_DMA_Start_IT>
 800946a:	4603      	mov	r3, r0
 800946c:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 800946e:	7dfb      	ldrb	r3, [r7, #23]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d124      	bne.n	80094be <HAL_I2C_Master_Transmit_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009482:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009492:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	685a      	ldr	r2, [r3, #4]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80094aa:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	685a      	ldr	r2, [r3, #4]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094ba:	605a      	str	r2, [r3, #4]
 80094bc:	e02f      	b.n	800951e <HAL_I2C_Master_Transmit_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2220      	movs	r2, #32
 80094c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d2:	f043 0210 	orr.w	r2, r3, #16
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	e01e      	b.n	8009524 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80094f4:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009504:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	685a      	ldr	r2, [r3, #4]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800951c:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800951e:	2300      	movs	r3, #0
 8009520:	e000      	b.n	8009524 <HAL_I2C_Master_Transmit_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 8009522:	2302      	movs	r3, #2
  }
}
 8009524:	4618      	mov	r0, r3
 8009526:	3718      	adds	r7, #24
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	200001ac 	.word	0x200001ac
 8009530:	14f8b589 	.word	0x14f8b589
 8009534:	ffff0000 	.word	0xffff0000
 8009538:	0800adcd 	.word	0x0800adcd
 800953c:	0800af67 	.word	0x0800af67

08009540 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b086      	sub	sp, #24
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	607a      	str	r2, [r7, #4]
 800954a:	461a      	mov	r2, r3
 800954c:	460b      	mov	r3, r1
 800954e:	817b      	strh	r3, [r7, #10]
 8009550:	4613      	mov	r3, r2
 8009552:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8009554:	2300      	movs	r3, #0
 8009556:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800955e:	b2db      	uxtb	r3, r3
 8009560:	2b20      	cmp	r3, #32
 8009562:	f040 80f4 	bne.w	800974e <HAL_I2C_Master_Receive_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8009566:	4b7c      	ldr	r3, [pc, #496]	; (8009758 <HAL_I2C_Master_Receive_DMA+0x218>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	08db      	lsrs	r3, r3, #3
 800956c:	4a7b      	ldr	r2, [pc, #492]	; (800975c <HAL_I2C_Master_Receive_DMA+0x21c>)
 800956e:	fba2 2303 	umull	r2, r3, r2, r3
 8009572:	0a1a      	lsrs	r2, r3, #8
 8009574:	4613      	mov	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4413      	add	r3, r2
 800957a:	009a      	lsls	r2, r3, #2
 800957c:	4413      	add	r3, r2
 800957e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	3b01      	subs	r3, #1
 8009584:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d116      	bne.n	80095ba <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2220      	movs	r2, #32
 8009596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a6:	f043 0220 	orr.w	r2, r3, #32
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	e0ca      	b.n	8009750 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	699b      	ldr	r3, [r3, #24]
 80095c0:	f003 0302 	and.w	r3, r3, #2
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d0db      	beq.n	8009580 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d101      	bne.n	80095d6 <HAL_I2C_Master_Receive_DMA+0x96>
 80095d2:	2302      	movs	r3, #2
 80095d4:	e0bc      	b.n	8009750 <HAL_I2C_Master_Receive_DMA+0x210>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 0301 	and.w	r3, r3, #1
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d007      	beq.n	80095fc <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f042 0201 	orr.w	r2, r2, #1
 80095fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800960a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2222      	movs	r2, #34	; 0x22
 8009610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2210      	movs	r2, #16
 8009618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	893a      	ldrh	r2, [r7, #8]
 800962c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009632:	b29a      	uxth	r2, r3
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	4a49      	ldr	r2, [pc, #292]	; (8009760 <HAL_I2C_Master_Receive_DMA+0x220>)
 800963c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800963e:	897a      	ldrh	r2, [r7, #10]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009648:	2b00      	cmp	r3, #0
 800964a:	d062      	beq.n	8009712 <HAL_I2C_Master_Receive_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009650:	4a44      	ldr	r2, [pc, #272]	; (8009764 <HAL_I2C_Master_Receive_DMA+0x224>)
 8009652:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009658:	4a43      	ldr	r2, [pc, #268]	; (8009768 <HAL_I2C_Master_Receive_DMA+0x228>)
 800965a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009660:	2200      	movs	r2, #0
 8009662:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009668:	2200      	movs	r2, #0
 800966a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009670:	2200      	movs	r2, #0
 8009672:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009678:	2200      	movs	r2, #0
 800967a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	3310      	adds	r3, #16
 8009686:	4619      	mov	r1, r3
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968c:	461a      	mov	r2, r3
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009692:	f7fe fff7 	bl	8008684 <HAL_DMA_Start_IT>
 8009696:	4603      	mov	r3, r0
 8009698:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 800969a:	7dfb      	ldrb	r3, [r7, #23]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d124      	bne.n	80096ea <HAL_I2C_Master_Receive_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80096ae:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096be:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2200      	movs	r2, #0
 80096c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	685a      	ldr	r2, [r3, #4]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80096d6:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	685a      	ldr	r2, [r3, #4]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096e6:	605a      	str	r2, [r3, #4]
 80096e8:	e02f      	b.n	800974a <HAL_I2C_Master_Receive_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2220      	movs	r2, #32
 80096ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fe:	f043 0210 	orr.w	r2, r3, #16
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e01e      	b.n	8009750 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009720:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009730:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2200      	movs	r2, #0
 8009736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	685a      	ldr	r2, [r3, #4]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8009748:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	e000      	b.n	8009750 <HAL_I2C_Master_Receive_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 800974e:	2302      	movs	r3, #2
  }
}
 8009750:	4618      	mov	r0, r3
 8009752:	3718      	adds	r7, #24
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	200001ac 	.word	0x200001ac
 800975c:	14f8b589 	.word	0x14f8b589
 8009760:	ffff0000 	.word	0xffff0000
 8009764:	0800adcd 	.word	0x0800adcd
 8009768:	0800af67 	.word	0x0800af67

0800976c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b088      	sub	sp, #32
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8009774:	2300      	movs	r3, #0
 8009776:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009784:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800978c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009794:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8009796:	7bfb      	ldrb	r3, [r7, #15]
 8009798:	2b10      	cmp	r3, #16
 800979a:	d003      	beq.n	80097a4 <HAL_I2C_EV_IRQHandler+0x38>
 800979c:	7bfb      	ldrb	r3, [r7, #15]
 800979e:	2b40      	cmp	r3, #64	; 0x40
 80097a0:	f040 80b6 	bne.w	8009910 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	695b      	ldr	r3, [r3, #20]
 80097b2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	f003 0301 	and.w	r3, r3, #1
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d10d      	bne.n	80097da <HAL_I2C_EV_IRQHandler+0x6e>
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80097c4:	d003      	beq.n	80097ce <HAL_I2C_EV_IRQHandler+0x62>
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80097cc:	d101      	bne.n	80097d2 <HAL_I2C_EV_IRQHandler+0x66>
 80097ce:	2301      	movs	r3, #1
 80097d0:	e000      	b.n	80097d4 <HAL_I2C_EV_IRQHandler+0x68>
 80097d2:	2300      	movs	r3, #0
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	f000 8127 	beq.w	8009a28 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	f003 0301 	and.w	r3, r3, #1
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00c      	beq.n	80097fe <HAL_I2C_EV_IRQHandler+0x92>
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	0a5b      	lsrs	r3, r3, #9
 80097e8:	f003 0301 	and.w	r3, r3, #1
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d006      	beq.n	80097fe <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f001 fc5c 	bl	800b0ae <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 fcf5 	bl	800a1e6 <I2C_Master_SB>
 80097fc:	e087      	b.n	800990e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	08db      	lsrs	r3, r3, #3
 8009802:	f003 0301 	and.w	r3, r3, #1
 8009806:	2b00      	cmp	r3, #0
 8009808:	d009      	beq.n	800981e <HAL_I2C_EV_IRQHandler+0xb2>
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	0a5b      	lsrs	r3, r3, #9
 800980e:	f003 0301 	and.w	r3, r3, #1
 8009812:	2b00      	cmp	r3, #0
 8009814:	d003      	beq.n	800981e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fd63 	bl	800a2e2 <I2C_Master_ADD10>
 800981c:	e077      	b.n	800990e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	085b      	lsrs	r3, r3, #1
 8009822:	f003 0301 	and.w	r3, r3, #1
 8009826:	2b00      	cmp	r3, #0
 8009828:	d009      	beq.n	800983e <HAL_I2C_EV_IRQHandler+0xd2>
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	0a5b      	lsrs	r3, r3, #9
 800982e:	f003 0301 	and.w	r3, r3, #1
 8009832:	2b00      	cmp	r3, #0
 8009834:	d003      	beq.n	800983e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fd7d 	bl	800a336 <I2C_Master_ADDR>
 800983c:	e067      	b.n	800990e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	089b      	lsrs	r3, r3, #2
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	2b00      	cmp	r3, #0
 8009848:	d030      	beq.n	80098ac <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009858:	f000 80e8 	beq.w	8009a2c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	09db      	lsrs	r3, r3, #7
 8009860:	f003 0301 	and.w	r3, r3, #1
 8009864:	2b00      	cmp	r3, #0
 8009866:	d00f      	beq.n	8009888 <HAL_I2C_EV_IRQHandler+0x11c>
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	0a9b      	lsrs	r3, r3, #10
 800986c:	f003 0301 	and.w	r3, r3, #1
 8009870:	2b00      	cmp	r3, #0
 8009872:	d009      	beq.n	8009888 <HAL_I2C_EV_IRQHandler+0x11c>
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	089b      	lsrs	r3, r3, #2
 8009878:	f003 0301 	and.w	r3, r3, #1
 800987c:	2b00      	cmp	r3, #0
 800987e:	d103      	bne.n	8009888 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 f9d6 	bl	8009c32 <I2C_MasterTransmit_TXE>
 8009886:	e042      	b.n	800990e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	089b      	lsrs	r3, r3, #2
 800988c:	f003 0301 	and.w	r3, r3, #1
 8009890:	2b00      	cmp	r3, #0
 8009892:	f000 80cb 	beq.w	8009a2c <HAL_I2C_EV_IRQHandler+0x2c0>
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	0a5b      	lsrs	r3, r3, #9
 800989a:	f003 0301 	and.w	r3, r3, #1
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f000 80c4 	beq.w	8009a2c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 fabc 	bl	8009e22 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80098aa:	e0bf      	b.n	8009a2c <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098ba:	f000 80b7 	beq.w	8009a2c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	099b      	lsrs	r3, r3, #6
 80098c2:	f003 0301 	and.w	r3, r3, #1
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00f      	beq.n	80098ea <HAL_I2C_EV_IRQHandler+0x17e>
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	0a9b      	lsrs	r3, r3, #10
 80098ce:	f003 0301 	and.w	r3, r3, #1
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d009      	beq.n	80098ea <HAL_I2C_EV_IRQHandler+0x17e>
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	089b      	lsrs	r3, r3, #2
 80098da:	f003 0301 	and.w	r3, r3, #1
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d103      	bne.n	80098ea <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fb13 	bl	8009f0e <I2C_MasterReceive_RXNE>
 80098e8:	e011      	b.n	800990e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	089b      	lsrs	r3, r3, #2
 80098ee:	f003 0301 	and.w	r3, r3, #1
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	f000 809a 	beq.w	8009a2c <HAL_I2C_EV_IRQHandler+0x2c0>
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	0a5b      	lsrs	r3, r3, #9
 80098fc:	f003 0301 	and.w	r3, r3, #1
 8009900:	2b00      	cmp	r3, #0
 8009902:	f000 8093 	beq.w	8009a2c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 fb83 	bl	800a012 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800990c:	e08e      	b.n	8009a2c <HAL_I2C_EV_IRQHandler+0x2c0>
 800990e:	e08d      	b.n	8009a2c <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009914:	2b00      	cmp	r3, #0
 8009916:	d004      	beq.n	8009922 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	695b      	ldr	r3, [r3, #20]
 800991e:	61fb      	str	r3, [r7, #28]
 8009920:	e007      	b.n	8009932 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	695b      	ldr	r3, [r3, #20]
 8009930:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	085b      	lsrs	r3, r3, #1
 8009936:	f003 0301 	and.w	r3, r3, #1
 800993a:	2b00      	cmp	r3, #0
 800993c:	d012      	beq.n	8009964 <HAL_I2C_EV_IRQHandler+0x1f8>
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	0a5b      	lsrs	r3, r3, #9
 8009942:	f003 0301 	and.w	r3, r3, #1
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00c      	beq.n	8009964 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800994e:	2b00      	cmp	r3, #0
 8009950:	d003      	beq.n	800995a <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800995a:	69b9      	ldr	r1, [r7, #24]
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 ff39 	bl	800a7d4 <I2C_Slave_ADDR>
 8009962:	e066      	b.n	8009a32 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	091b      	lsrs	r3, r3, #4
 8009968:	f003 0301 	and.w	r3, r3, #1
 800996c:	2b00      	cmp	r3, #0
 800996e:	d009      	beq.n	8009984 <HAL_I2C_EV_IRQHandler+0x218>
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	0a5b      	lsrs	r3, r3, #9
 8009974:	f003 0301 	and.w	r3, r3, #1
 8009978:	2b00      	cmp	r3, #0
 800997a:	d003      	beq.n	8009984 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 ff6d 	bl	800a85c <I2C_Slave_STOPF>
 8009982:	e056      	b.n	8009a32 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009984:	7bbb      	ldrb	r3, [r7, #14]
 8009986:	2b21      	cmp	r3, #33	; 0x21
 8009988:	d002      	beq.n	8009990 <HAL_I2C_EV_IRQHandler+0x224>
 800998a:	7bbb      	ldrb	r3, [r7, #14]
 800998c:	2b29      	cmp	r3, #41	; 0x29
 800998e:	d125      	bne.n	80099dc <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	09db      	lsrs	r3, r3, #7
 8009994:	f003 0301 	and.w	r3, r3, #1
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00f      	beq.n	80099bc <HAL_I2C_EV_IRQHandler+0x250>
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	0a9b      	lsrs	r3, r3, #10
 80099a0:	f003 0301 	and.w	r3, r3, #1
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d009      	beq.n	80099bc <HAL_I2C_EV_IRQHandler+0x250>
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	089b      	lsrs	r3, r3, #2
 80099ac:	f003 0301 	and.w	r3, r3, #1
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d103      	bne.n	80099bc <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fe4f 	bl	800a658 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80099ba:	e039      	b.n	8009a30 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	089b      	lsrs	r3, r3, #2
 80099c0:	f003 0301 	and.w	r3, r3, #1
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d033      	beq.n	8009a30 <HAL_I2C_EV_IRQHandler+0x2c4>
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	0a5b      	lsrs	r3, r3, #9
 80099cc:	f003 0301 	and.w	r3, r3, #1
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d02d      	beq.n	8009a30 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fe7c 	bl	800a6d2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80099da:	e029      	b.n	8009a30 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	099b      	lsrs	r3, r3, #6
 80099e0:	f003 0301 	and.w	r3, r3, #1
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d00f      	beq.n	8009a08 <HAL_I2C_EV_IRQHandler+0x29c>
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	0a9b      	lsrs	r3, r3, #10
 80099ec:	f003 0301 	and.w	r3, r3, #1
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d009      	beq.n	8009a08 <HAL_I2C_EV_IRQHandler+0x29c>
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	089b      	lsrs	r3, r3, #2
 80099f8:	f003 0301 	and.w	r3, r3, #1
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d103      	bne.n	8009a08 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 fe87 	bl	800a714 <I2C_SlaveReceive_RXNE>
 8009a06:	e014      	b.n	8009a32 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	089b      	lsrs	r3, r3, #2
 8009a0c:	f003 0301 	and.w	r3, r3, #1
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d00e      	beq.n	8009a32 <HAL_I2C_EV_IRQHandler+0x2c6>
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	0a5b      	lsrs	r3, r3, #9
 8009a18:	f003 0301 	and.w	r3, r3, #1
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d008      	beq.n	8009a32 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 feb5 	bl	800a790 <I2C_SlaveReceive_BTF>
 8009a26:	e004      	b.n	8009a32 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8009a28:	bf00      	nop
 8009a2a:	e002      	b.n	8009a32 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009a2c:	bf00      	nop
 8009a2e:	e000      	b.n	8009a32 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009a30:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8009a32:	3720      	adds	r7, #32
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b08a      	sub	sp, #40	; 0x28
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	695b      	ldr	r3, [r3, #20]
 8009a46:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8009a50:	2300      	movs	r3, #0
 8009a52:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	0a1b      	lsrs	r3, r3, #8
 8009a58:	f003 0301 	and.w	r3, r3, #1
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d00e      	beq.n	8009a7e <HAL_I2C_ER_IRQHandler+0x46>
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	0a1b      	lsrs	r3, r3, #8
 8009a64:	f003 0301 	and.w	r3, r3, #1
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d008      	beq.n	8009a7e <HAL_I2C_ER_IRQHandler+0x46>
  {
    error |= HAL_I2C_ERROR_BERR;
 8009a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6e:	f043 0301 	orr.w	r3, r3, #1
 8009a72:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009a7c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009a7e:	6a3b      	ldr	r3, [r7, #32]
 8009a80:	0a5b      	lsrs	r3, r3, #9
 8009a82:	f003 0301 	and.w	r3, r3, #1
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00e      	beq.n	8009aa8 <HAL_I2C_ER_IRQHandler+0x70>
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	0a1b      	lsrs	r3, r3, #8
 8009a8e:	f003 0301 	and.w	r3, r3, #1
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d008      	beq.n	8009aa8 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8009a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a98:	f043 0302 	orr.w	r3, r3, #2
 8009a9c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8009aa6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009aa8:	6a3b      	ldr	r3, [r7, #32]
 8009aaa:	0a9b      	lsrs	r3, r3, #10
 8009aac:	f003 0301 	and.w	r3, r3, #1
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d041      	beq.n	8009b38 <HAL_I2C_ER_IRQHandler+0x100>
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	0a1b      	lsrs	r3, r3, #8
 8009ab8:	f003 0301 	and.w	r3, r3, #1
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d03b      	beq.n	8009b38 <HAL_I2C_ER_IRQHandler+0x100>
  {
    tmp1 = hi2c->Mode;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ac6:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ad6:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009adc:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8009ade:	7efb      	ldrb	r3, [r7, #27]
 8009ae0:	2b20      	cmp	r3, #32
 8009ae2:	d112      	bne.n	8009b0a <HAL_I2C_ER_IRQHandler+0xd2>
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10f      	bne.n	8009b0a <HAL_I2C_ER_IRQHandler+0xd2>
 8009aea:	7cfb      	ldrb	r3, [r7, #19]
 8009aec:	2b21      	cmp	r3, #33	; 0x21
 8009aee:	d008      	beq.n	8009b02 <HAL_I2C_ER_IRQHandler+0xca>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8009af0:	7cfb      	ldrb	r3, [r7, #19]
 8009af2:	2b29      	cmp	r3, #41	; 0x29
 8009af4:	d005      	beq.n	8009b02 <HAL_I2C_ER_IRQHandler+0xca>
 8009af6:	7cfb      	ldrb	r3, [r7, #19]
 8009af8:	2b28      	cmp	r3, #40	; 0x28
 8009afa:	d106      	bne.n	8009b0a <HAL_I2C_ER_IRQHandler+0xd2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2b21      	cmp	r3, #33	; 0x21
 8009b00:	d103      	bne.n	8009b0a <HAL_I2C_ER_IRQHandler+0xd2>
    {
      I2C_Slave_AF(hi2c);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 ffda 	bl	800aabc <I2C_Slave_AF>
 8009b08:	e016      	b.n	8009b38 <HAL_I2C_ER_IRQHandler+0x100>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009b12:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8009b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b16:	f043 0304 	orr.w	r3, r3, #4
 8009b1a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	2b10      	cmp	r3, #16
 8009b26:	d107      	bne.n	8009b38 <HAL_I2C_ER_IRQHandler+0x100>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b36:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009b38:	6a3b      	ldr	r3, [r7, #32]
 8009b3a:	0adb      	lsrs	r3, r3, #11
 8009b3c:	f003 0301 	and.w	r3, r3, #1
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00e      	beq.n	8009b62 <HAL_I2C_ER_IRQHandler+0x12a>
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	0a1b      	lsrs	r3, r3, #8
 8009b48:	f003 0301 	and.w	r3, r3, #1
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d008      	beq.n	8009b62 <HAL_I2C_ER_IRQHandler+0x12a>
  {
    error |= HAL_I2C_ERROR_OVR;
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	f043 0308 	orr.w	r3, r3, #8
 8009b56:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8009b60:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8009b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d008      	beq.n	8009b7a <HAL_I2C_ER_IRQHandler+0x142>
  {
    hi2c->ErrorCode |= error;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6e:	431a      	orrs	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f001 f811 	bl	800ab9c <I2C_ITError>
  }
}
 8009b7a:	bf00      	nop
 8009b7c:	3728      	adds	r7, #40	; 0x28
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009b82:	b480      	push	{r7}
 8009b84:	b083      	sub	sp, #12
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009b8a:	bf00      	nop
 8009b8c:	370c      	adds	r7, #12
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr

08009b96 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009b96:	b480      	push	{r7}
 8009b98:	b083      	sub	sp, #12
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009b9e:	bf00      	nop
 8009ba0:	370c      	adds	r7, #12
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr

08009baa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009baa:	b480      	push	{r7}
 8009bac:	b083      	sub	sp, #12
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	70fb      	strb	r3, [r7, #3]
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009bba:	bf00      	nop
 8009bbc:	370c      	adds	r7, #12
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr

08009bc6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009bc6:	b480      	push	{r7}
 8009bc8:	b083      	sub	sp, #12
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8009bce:	bf00      	nop
 8009bd0:	370c      	adds	r7, #12
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr

08009bda <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009bda:	b480      	push	{r7}
 8009bdc:	b083      	sub	sp, #12
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8009be2:	bf00      	nop
 8009be4:	370c      	adds	r7, #12
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr

08009bee <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009bee:	b480      	push	{r7}
 8009bf0:	b083      	sub	sp, #12
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8009bf6:	bf00      	nop
 8009bf8:	370c      	adds	r7, #12
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009c02:	b480      	push	{r7}
 8009c04:	b083      	sub	sp, #12
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009c0a:	bf00      	nop
 8009c0c:	370c      	adds	r7, #12
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr

08009c16 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009c16:	b480      	push	{r7}
 8009c18:	b083      	sub	sp, #12
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c24:	b2db      	uxtb	r3, r3
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	370c      	adds	r7, #12
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr

08009c32 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b084      	sub	sp, #16
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c40:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c48:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d150      	bne.n	8009cfa <I2C_MasterTransmit_TXE+0xc8>
 8009c58:	7bfb      	ldrb	r3, [r7, #15]
 8009c5a:	2b21      	cmp	r3, #33	; 0x21
 8009c5c:	d14d      	bne.n	8009cfa <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	2b08      	cmp	r3, #8
 8009c62:	d01d      	beq.n	8009ca0 <I2C_MasterTransmit_TXE+0x6e>
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	2b20      	cmp	r3, #32
 8009c68:	d01a      	beq.n	8009ca0 <I2C_MasterTransmit_TXE+0x6e>
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009c70:	d016      	beq.n	8009ca0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	685a      	ldr	r2, [r3, #4]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009c80:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2211      	movs	r2, #17
 8009c86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2220      	movs	r2, #32
 8009c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f7fa fb7f 	bl	800439c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009c9e:	e0bc      	b.n	8009e1a <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	685a      	ldr	r2, [r3, #4]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009cae:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cbe:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2220      	movs	r2, #32
 8009cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	2b40      	cmp	r3, #64	; 0x40
 8009cd8:	d107      	bne.n	8009cea <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f7ff ff79 	bl	8009bda <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009ce8:	e097      	b.n	8009e1a <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f7fa fb52 	bl	800439c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009cf8:	e08f      	b.n	8009e1a <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8009cfa:	7bfb      	ldrb	r3, [r7, #15]
 8009cfc:	2b21      	cmp	r3, #33	; 0x21
 8009cfe:	d007      	beq.n	8009d10 <I2C_MasterTransmit_TXE+0xde>
 8009d00:	7bbb      	ldrb	r3, [r7, #14]
 8009d02:	2b40      	cmp	r3, #64	; 0x40
 8009d04:	f040 8089 	bne.w	8009e1a <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8009d08:	7bfb      	ldrb	r3, [r7, #15]
 8009d0a:	2b22      	cmp	r3, #34	; 0x22
 8009d0c:	f040 8085 	bne.w	8009e1a <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d108      	bne.n	8009d2c <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	685a      	ldr	r2, [r3, #4]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d28:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8009d2a:	e076      	b.n	8009e1a <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	2b40      	cmp	r3, #64	; 0x40
 8009d36:	d15d      	bne.n	8009df4 <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d11d      	bne.n	8009d7c <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d10b      	bne.n	8009d60 <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d4c:	b2da      	uxtb	r2, r3
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d58:	1c9a      	adds	r2, r3, #2
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009d5e:	e05c      	b.n	8009e1a <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	121b      	asrs	r3, r3, #8
 8009d68:	b2da      	uxtb	r2, r3
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009d7a:	e04e      	b.n	8009e1a <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d10b      	bne.n	8009d9c <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d88:	b2da      	uxtb	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d94:	1c5a      	adds	r2, r3, #1
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009d9a:	e03e      	b.n	8009e1a <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009da0:	2b02      	cmp	r3, #2
 8009da2:	d13a      	bne.n	8009e1a <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	2b22      	cmp	r3, #34	; 0x22
 8009dae:	d108      	bne.n	8009dc2 <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dbe:	601a      	str	r2, [r3, #0]
}
 8009dc0:	e02b      	b.n	8009e1a <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	2b21      	cmp	r3, #33	; 0x21
 8009dcc:	d125      	bne.n	8009e1a <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd2:	781a      	ldrb	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dde:	1c5a      	adds	r2, r3, #1
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	3b01      	subs	r3, #1
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009df2:	e012      	b.n	8009e1a <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df8:	781a      	ldrb	r2, [r3, #0]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e04:	1c5a      	adds	r2, r3, #1
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	3b01      	subs	r3, #1
 8009e12:	b29a      	uxth	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009e18:	e7ff      	b.n	8009e1a <I2C_MasterTransmit_TXE+0x1e8>
 8009e1a:	bf00      	nop
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b084      	sub	sp, #16
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	2b21      	cmp	r3, #33	; 0x21
 8009e3a:	d164      	bne.n	8009f06 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d012      	beq.n	8009e6c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4a:	781a      	ldrb	r2, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e56:	1c5a      	adds	r2, r3, #1
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	3b01      	subs	r3, #1
 8009e64:	b29a      	uxth	r2, r3
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 8009e6a:	e04c      	b.n	8009f06 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2b08      	cmp	r3, #8
 8009e70:	d01d      	beq.n	8009eae <I2C_MasterTransmit_BTF+0x8c>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2b20      	cmp	r3, #32
 8009e76:	d01a      	beq.n	8009eae <I2C_MasterTransmit_BTF+0x8c>
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009e7e:	d016      	beq.n	8009eae <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	685a      	ldr	r2, [r3, #4]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009e8e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2211      	movs	r2, #17
 8009e94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2220      	movs	r2, #32
 8009ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7fa fa78 	bl	800439c <HAL_I2C_MasterTxCpltCallback>
}
 8009eac:	e02b      	b.n	8009f06 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	685a      	ldr	r2, [r3, #4]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009ebc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ecc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2220      	movs	r2, #32
 8009ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	2b40      	cmp	r3, #64	; 0x40
 8009ee6:	d107      	bne.n	8009ef8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f7ff fe72 	bl	8009bda <HAL_I2C_MemTxCpltCallback>
}
 8009ef6:	e006      	b.n	8009f06 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f7fa fa4b 	bl	800439c <HAL_I2C_MasterTxCpltCallback>
}
 8009f06:	bf00      	nop
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}

08009f0e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009f0e:	b580      	push	{r7, lr}
 8009f10:	b084      	sub	sp, #16
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	2b22      	cmp	r3, #34	; 0x22
 8009f20:	d173      	bne.n	800a00a <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2b03      	cmp	r3, #3
 8009f2e:	d920      	bls.n	8009f72 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	691a      	ldr	r2, [r3, #16]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3a:	b2d2      	uxtb	r2, r2
 8009f3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f42:	1c5a      	adds	r2, r3, #1
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	b29a      	uxth	r2, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	2b03      	cmp	r3, #3
 8009f5e:	d154      	bne.n	800a00a <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	685a      	ldr	r2, [r3, #4]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f6e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8009f70:	e04b      	b.n	800a00a <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	d047      	beq.n	800a00a <I2C_MasterReceive_RXNE+0xfc>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d002      	beq.n	8009f86 <I2C_MasterReceive_RXNE+0x78>
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d141      	bne.n	800a00a <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f94:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009fa4:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	691a      	ldr	r2, [r3, #16]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb0:	b2d2      	uxtb	r2, r2
 8009fb2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb8:	1c5a      	adds	r2, r3, #1
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	3b01      	subs	r3, #1
 8009fc6:	b29a      	uxth	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2220      	movs	r2, #32
 8009fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	2b40      	cmp	r3, #64	; 0x40
 8009fde:	d10a      	bne.n	8009ff6 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f7ff fdfd 	bl	8009bee <HAL_I2C_MemRxCpltCallback>
}
 8009ff4:	e009      	b.n	800a00a <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2212      	movs	r2, #18
 800a002:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f7fa f9d4 	bl	80043b2 <HAL_I2C_MasterRxCpltCallback>
}
 800a00a:	bf00      	nop
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b084      	sub	sp, #16
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a024:	b29b      	uxth	r3, r3
 800a026:	2b04      	cmp	r3, #4
 800a028:	d11b      	bne.n	800a062 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	685a      	ldr	r2, [r3, #4]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a038:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	691a      	ldr	r2, [r3, #16]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a044:	b2d2      	uxtb	r2, r2
 800a046:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04c:	1c5a      	adds	r2, r3, #1
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a056:	b29b      	uxth	r3, r3
 800a058:	3b01      	subs	r3, #1
 800a05a:	b29a      	uxth	r2, r3
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800a060:	e0bd      	b.n	800a1de <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a066:	b29b      	uxth	r3, r3
 800a068:	2b03      	cmp	r3, #3
 800a06a:	d129      	bne.n	800a0c0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	685a      	ldr	r2, [r3, #4]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a07a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2b04      	cmp	r3, #4
 800a080:	d00a      	beq.n	800a098 <I2C_MasterReceive_BTF+0x86>
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2b02      	cmp	r3, #2
 800a086:	d007      	beq.n	800a098 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a096:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	691a      	ldr	r2, [r3, #16]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a2:	b2d2      	uxtb	r2, r2
 800a0a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0aa:	1c5a      	adds	r2, r3, #1
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	3b01      	subs	r3, #1
 800a0b8:	b29a      	uxth	r2, r3
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a0be:	e08e      	b.n	800a1de <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	d176      	bne.n	800a1b8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d002      	beq.n	800a0d6 <I2C_MasterReceive_BTF+0xc4>
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2b10      	cmp	r3, #16
 800a0d4:	d108      	bne.n	800a0e8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0e4:	601a      	str	r2, [r3, #0]
 800a0e6:	e019      	b.n	800a11c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2b04      	cmp	r3, #4
 800a0ec:	d002      	beq.n	800a0f4 <I2C_MasterReceive_BTF+0xe2>
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d108      	bne.n	800a106 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a102:	601a      	str	r2, [r3, #0]
 800a104:	e00a      	b.n	800a11c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2b10      	cmp	r3, #16
 800a10a:	d007      	beq.n	800a11c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a11a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	691a      	ldr	r2, [r3, #16]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a126:	b2d2      	uxtb	r2, r2
 800a128:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12e:	1c5a      	adds	r2, r3, #1
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a138:	b29b      	uxth	r3, r3
 800a13a:	3b01      	subs	r3, #1
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	691a      	ldr	r2, [r3, #16]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14c:	b2d2      	uxtb	r2, r2
 800a14e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a154:	1c5a      	adds	r2, r3, #1
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a15e:	b29b      	uxth	r3, r3
 800a160:	3b01      	subs	r3, #1
 800a162:	b29a      	uxth	r2, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	685a      	ldr	r2, [r3, #4]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a176:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2220      	movs	r2, #32
 800a17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a186:	b2db      	uxtb	r3, r3
 800a188:	2b40      	cmp	r3, #64	; 0x40
 800a18a:	d10a      	bne.n	800a1a2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f7ff fd27 	bl	8009bee <HAL_I2C_MemRxCpltCallback>
}
 800a1a0:	e01d      	b.n	800a1de <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2212      	movs	r2, #18
 800a1ae:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7fa f8fe 	bl	80043b2 <HAL_I2C_MasterRxCpltCallback>
}
 800a1b6:	e012      	b.n	800a1de <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	691a      	ldr	r2, [r3, #16]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c2:	b2d2      	uxtb	r2, r2
 800a1c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ca:	1c5a      	adds	r2, r3, #1
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	b29a      	uxth	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a1de:	bf00      	nop
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800a1e6:	b480      	push	{r7}
 800a1e8:	b083      	sub	sp, #12
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	2b40      	cmp	r3, #64	; 0x40
 800a1f8:	d117      	bne.n	800a22a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d109      	bne.n	800a216 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a206:	b2db      	uxtb	r3, r3
 800a208:	461a      	mov	r2, r3
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a212:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800a214:	e05f      	b.n	800a2d6 <I2C_Master_SB+0xf0>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	f043 0301 	orr.w	r3, r3, #1
 800a220:	b2da      	uxtb	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	611a      	str	r2, [r3, #16]
}
 800a228:	e055      	b.n	800a2d6 <I2C_Master_SB+0xf0>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a232:	d12b      	bne.n	800a28c <I2C_Master_SB+0xa6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	2b21      	cmp	r3, #33	; 0x21
 800a23e:	d109      	bne.n	800a254 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a244:	b2db      	uxtb	r3, r3
 800a246:	461a      	mov	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a250:	611a      	str	r2, [r3, #16]
 800a252:	e008      	b.n	800a266 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	f043 0301 	orr.w	r3, r3, #1
 800a25e:	b2da      	uxtb	r2, r3
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a26a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d104      	bne.n	800a27a <I2C_Master_SB+0x94>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a276:	2b00      	cmp	r3, #0
 800a278:	d02d      	beq.n	800a2d6 <I2C_Master_SB+0xf0>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	685a      	ldr	r2, [r3, #4]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a288:	605a      	str	r2, [r3, #4]
}
 800a28a:	e024      	b.n	800a2d6 <I2C_Master_SB+0xf0>
      if (hi2c->EventCount == 0U)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a290:	2b00      	cmp	r3, #0
 800a292:	d10e      	bne.n	800a2b2 <I2C_Master_SB+0xcc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a298:	b29b      	uxth	r3, r3
 800a29a:	11db      	asrs	r3, r3, #7
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	f003 0306 	and.w	r3, r3, #6
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	f063 030f 	orn	r3, r3, #15
 800a2a8:	b2da      	uxtb	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	611a      	str	r2, [r3, #16]
}
 800a2b0:	e011      	b.n	800a2d6 <I2C_Master_SB+0xf0>
      else if (hi2c->EventCount == 1U)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d10d      	bne.n	800a2d6 <I2C_Master_SB+0xf0>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	11db      	asrs	r3, r3, #7
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	f003 0306 	and.w	r3, r3, #6
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	f063 030e 	orn	r3, r3, #14
 800a2ce:	b2da      	uxtb	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	611a      	str	r2, [r3, #16]
}
 800a2d6:	bf00      	nop
 800a2d8:	370c      	adds	r7, #12
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr

0800a2e2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800a2e2:	b480      	push	{r7}
 800a2e4:	b083      	sub	sp, #12
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2ee:	b2da      	uxtb	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d103      	bne.n	800a306 <I2C_Master_ADD10+0x24>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a302:	2b00      	cmp	r3, #0
 800a304:	d011      	beq.n	800a32a <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a30a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d104      	bne.n	800a31a <I2C_Master_ADD10+0x38>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a316:	2b00      	cmp	r3, #0
 800a318:	d007      	beq.n	800a32a <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	685a      	ldr	r2, [r3, #4]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a328:	605a      	str	r2, [r3, #4]
    }
  }
}
 800a32a:	bf00      	nop
 800a32c:	370c      	adds	r7, #12
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800a336:	b480      	push	{r7}
 800a338:	b091      	sub	sp, #68	; 0x44
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a344:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a352:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	2b22      	cmp	r3, #34	; 0x22
 800a35e:	f040 8169 	bne.w	800a634 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a366:	2b00      	cmp	r3, #0
 800a368:	d10f      	bne.n	800a38a <I2C_Master_ADDR+0x54>
 800a36a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a36e:	2b40      	cmp	r3, #64	; 0x40
 800a370:	d10b      	bne.n	800a38a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a372:	2300      	movs	r3, #0
 800a374:	633b      	str	r3, [r7, #48]	; 0x30
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	695b      	ldr	r3, [r3, #20]
 800a37c:	633b      	str	r3, [r7, #48]	; 0x30
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	699b      	ldr	r3, [r3, #24]
 800a384:	633b      	str	r3, [r7, #48]	; 0x30
 800a386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a388:	e160      	b.n	800a64c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d11d      	bne.n	800a3ce <I2C_Master_ADDR+0x98>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	691b      	ldr	r3, [r3, #16]
 800a396:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a39a:	d118      	bne.n	800a3ce <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a39c:	2300      	movs	r3, #0
 800a39e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	699b      	ldr	r3, [r3, #24]
 800a3ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3c0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3c6:	1c5a      	adds	r2, r3, #1
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	651a      	str	r2, [r3, #80]	; 0x50
 800a3cc:	e13e      	b.n	800a64c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d113      	bne.n	800a400 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3d8:	2300      	movs	r3, #0
 800a3da:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	695b      	ldr	r3, [r3, #20]
 800a3e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	699b      	ldr	r3, [r3, #24]
 800a3ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3fc:	601a      	str	r2, [r3, #0]
 800a3fe:	e115      	b.n	800a62c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a404:	b29b      	uxth	r3, r3
 800a406:	2b01      	cmp	r3, #1
 800a408:	f040 808a 	bne.w	800a520 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800a40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a412:	d137      	bne.n	800a484 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a422:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a42e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a432:	d113      	bne.n	800a45c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a442:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a444:	2300      	movs	r3, #0
 800a446:	627b      	str	r3, [r7, #36]	; 0x24
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	695b      	ldr	r3, [r3, #20]
 800a44e:	627b      	str	r3, [r7, #36]	; 0x24
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	699b      	ldr	r3, [r3, #24]
 800a456:	627b      	str	r3, [r7, #36]	; 0x24
 800a458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45a:	e0e7      	b.n	800a62c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a45c:	2300      	movs	r3, #0
 800a45e:	623b      	str	r3, [r7, #32]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	695b      	ldr	r3, [r3, #20]
 800a466:	623b      	str	r3, [r7, #32]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	699b      	ldr	r3, [r3, #24]
 800a46e:	623b      	str	r3, [r7, #32]
 800a470:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a480:	601a      	str	r2, [r3, #0]
 800a482:	e0d3      	b.n	800a62c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800a484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a486:	2b08      	cmp	r3, #8
 800a488:	d02e      	beq.n	800a4e8 <I2C_Master_ADDR+0x1b2>
 800a48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48c:	2b20      	cmp	r3, #32
 800a48e:	d02b      	beq.n	800a4e8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800a490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a492:	2b12      	cmp	r3, #18
 800a494:	d102      	bne.n	800a49c <I2C_Master_ADDR+0x166>
 800a496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d125      	bne.n	800a4e8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800a49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49e:	2b04      	cmp	r3, #4
 800a4a0:	d00e      	beq.n	800a4c0 <I2C_Master_ADDR+0x18a>
 800a4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d00b      	beq.n	800a4c0 <I2C_Master_ADDR+0x18a>
 800a4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4aa:	2b10      	cmp	r3, #16
 800a4ac:	d008      	beq.n	800a4c0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4bc:	601a      	str	r2, [r3, #0]
 800a4be:	e007      	b.n	800a4d0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a4ce:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	61fb      	str	r3, [r7, #28]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	695b      	ldr	r3, [r3, #20]
 800a4da:	61fb      	str	r3, [r7, #28]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	699b      	ldr	r3, [r3, #24]
 800a4e2:	61fb      	str	r3, [r7, #28]
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	e0a1      	b.n	800a62c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4f6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	61bb      	str	r3, [r7, #24]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	695b      	ldr	r3, [r3, #20]
 800a502:	61bb      	str	r3, [r7, #24]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	699b      	ldr	r3, [r3, #24]
 800a50a:	61bb      	str	r3, [r7, #24]
 800a50c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a51c:	601a      	str	r2, [r3, #0]
 800a51e:	e085      	b.n	800a62c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a524:	b29b      	uxth	r3, r3
 800a526:	2b02      	cmp	r3, #2
 800a528:	d14d      	bne.n	800a5c6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800a52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52c:	2b04      	cmp	r3, #4
 800a52e:	d016      	beq.n	800a55e <I2C_Master_ADDR+0x228>
 800a530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a532:	2b02      	cmp	r3, #2
 800a534:	d013      	beq.n	800a55e <I2C_Master_ADDR+0x228>
 800a536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a538:	2b10      	cmp	r3, #16
 800a53a:	d010      	beq.n	800a55e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a54a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a55a:	601a      	str	r2, [r3, #0]
 800a55c:	e007      	b.n	800a56e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a56c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a57c:	d117      	bne.n	800a5ae <I2C_Master_ADDR+0x278>
 800a57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a580:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a584:	d00b      	beq.n	800a59e <I2C_Master_ADDR+0x268>
 800a586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d008      	beq.n	800a59e <I2C_Master_ADDR+0x268>
 800a58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58e:	2b08      	cmp	r3, #8
 800a590:	d005      	beq.n	800a59e <I2C_Master_ADDR+0x268>
 800a592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a594:	2b10      	cmp	r3, #16
 800a596:	d002      	beq.n	800a59e <I2C_Master_ADDR+0x268>
 800a598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59a:	2b20      	cmp	r3, #32
 800a59c:	d107      	bne.n	800a5ae <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	685a      	ldr	r2, [r3, #4]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a5ac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	617b      	str	r3, [r7, #20]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	695b      	ldr	r3, [r3, #20]
 800a5b8:	617b      	str	r3, [r7, #20]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	617b      	str	r3, [r7, #20]
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	e032      	b.n	800a62c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a5d4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5e4:	d117      	bne.n	800a616 <I2C_Master_ADDR+0x2e0>
 800a5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a5ec:	d00b      	beq.n	800a606 <I2C_Master_ADDR+0x2d0>
 800a5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d008      	beq.n	800a606 <I2C_Master_ADDR+0x2d0>
 800a5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f6:	2b08      	cmp	r3, #8
 800a5f8:	d005      	beq.n	800a606 <I2C_Master_ADDR+0x2d0>
 800a5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fc:	2b10      	cmp	r3, #16
 800a5fe:	d002      	beq.n	800a606 <I2C_Master_ADDR+0x2d0>
 800a600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a602:	2b20      	cmp	r3, #32
 800a604:	d107      	bne.n	800a616 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	685a      	ldr	r2, [r3, #4]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a614:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a616:	2300      	movs	r3, #0
 800a618:	613b      	str	r3, [r7, #16]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	695b      	ldr	r3, [r3, #20]
 800a620:	613b      	str	r3, [r7, #16]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	699b      	ldr	r3, [r3, #24]
 800a628:	613b      	str	r3, [r7, #16]
 800a62a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800a632:	e00b      	b.n	800a64c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a634:	2300      	movs	r3, #0
 800a636:	60fb      	str	r3, [r7, #12]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	695b      	ldr	r3, [r3, #20]
 800a63e:	60fb      	str	r3, [r7, #12]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	60fb      	str	r3, [r7, #12]
 800a648:	68fb      	ldr	r3, [r7, #12]
}
 800a64a:	e7ff      	b.n	800a64c <I2C_Master_ADDR+0x316>
 800a64c:	bf00      	nop
 800a64e:	3744      	adds	r7, #68	; 0x44
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a666:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d02b      	beq.n	800a6ca <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a676:	781a      	ldrb	r2, [r3, #0]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a682:	1c5a      	adds	r2, r3, #1
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	3b01      	subs	r3, #1
 800a690:	b29a      	uxth	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d114      	bne.n	800a6ca <I2C_SlaveTransmit_TXE+0x72>
 800a6a0:	7bfb      	ldrb	r3, [r7, #15]
 800a6a2:	2b29      	cmp	r3, #41	; 0x29
 800a6a4:	d111      	bne.n	800a6ca <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6b4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2221      	movs	r2, #33	; 0x21
 800a6ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2228      	movs	r2, #40	; 0x28
 800a6c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f7ff fa5c 	bl	8009b82 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800a6ca:	bf00      	nop
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800a6d2:	b480      	push	{r7}
 800a6d4:	b083      	sub	sp, #12
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d011      	beq.n	800a708 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e8:	781a      	ldrb	r2, [r3, #0]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f4:	1c5a      	adds	r2, r3, #1
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	3b01      	subs	r3, #1
 800a702:	b29a      	uxth	r2, r3
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800a708:	bf00      	nop
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a722:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a728:	b29b      	uxth	r3, r3
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d02c      	beq.n	800a788 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	691a      	ldr	r2, [r3, #16]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a738:	b2d2      	uxtb	r2, r2
 800a73a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a740:	1c5a      	adds	r2, r3, #1
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	3b01      	subs	r3, #1
 800a74e:	b29a      	uxth	r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a758:	b29b      	uxth	r3, r3
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d114      	bne.n	800a788 <I2C_SlaveReceive_RXNE+0x74>
 800a75e:	7bfb      	ldrb	r3, [r7, #15]
 800a760:	2b2a      	cmp	r3, #42	; 0x2a
 800a762:	d111      	bne.n	800a788 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	685a      	ldr	r2, [r3, #4]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a772:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2222      	movs	r2, #34	; 0x22
 800a778:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2228      	movs	r2, #40	; 0x28
 800a77e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f7ff fa07 	bl	8009b96 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800a788:	bf00      	nop
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d012      	beq.n	800a7c8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	691a      	ldr	r2, [r3, #16]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ac:	b2d2      	uxtb	r2, r2
 800a7ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b4:	1c5a      	adds	r2, r3, #1
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800a7c8:	bf00      	nop
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a7ee:	2b28      	cmp	r3, #40	; 0x28
 800a7f0:	d127      	bne.n	800a842 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	685a      	ldr	r2, [r3, #4]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a800:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	089b      	lsrs	r3, r3, #2
 800a806:	f003 0301 	and.w	r3, r3, #1
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d101      	bne.n	800a812 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800a80e:	2301      	movs	r3, #1
 800a810:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	09db      	lsrs	r3, r3, #7
 800a816:	f003 0301 	and.w	r3, r3, #1
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d103      	bne.n	800a826 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	68db      	ldr	r3, [r3, #12]
 800a822:	81bb      	strh	r3, [r7, #12]
 800a824:	e002      	b.n	800a82c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	699b      	ldr	r3, [r3, #24]
 800a82a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800a834:	89ba      	ldrh	r2, [r7, #12]
 800a836:	7bfb      	ldrb	r3, [r7, #15]
 800a838:	4619      	mov	r1, r3
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f7ff f9b5 	bl	8009baa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a840:	e008      	b.n	800a854 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f06f 0202 	mvn.w	r2, #2
 800a84a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800a854:	bf00      	nop
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a86a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	685a      	ldr	r2, [r3, #4]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a87a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800a87c:	2300      	movs	r3, #0
 800a87e:	60bb      	str	r3, [r7, #8]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	695b      	ldr	r3, [r3, #20]
 800a886:	60bb      	str	r3, [r7, #8]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f042 0201 	orr.w	r2, r2, #1
 800a896:	601a      	str	r2, [r3, #0]
 800a898:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8a8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8b8:	d172      	bne.n	800a9a0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a8ba:	7bfb      	ldrb	r3, [r7, #15]
 800a8bc:	2b22      	cmp	r3, #34	; 0x22
 800a8be:	d002      	beq.n	800a8c6 <I2C_Slave_STOPF+0x6a>
 800a8c0:	7bfb      	ldrb	r3, [r7, #15]
 800a8c2:	2b2a      	cmp	r3, #42	; 0x2a
 800a8c4:	d135      	bne.n	800a932 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d005      	beq.n	800a8ea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e2:	f043 0204 	orr.w	r2, r3, #4
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	685a      	ldr	r2, [r3, #4]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a8f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7fe f8cc 	bl	8008a9c <HAL_DMA_GetState>
 800a904:	4603      	mov	r3, r0
 800a906:	2b01      	cmp	r3, #1
 800a908:	d049      	beq.n	800a99e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a90e:	4a69      	ldr	r2, [pc, #420]	; (800aab4 <I2C_Slave_STOPF+0x258>)
 800a910:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a916:	4618      	mov	r0, r3
 800a918:	f7fd ff14 	bl	8008744 <HAL_DMA_Abort_IT>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d03d      	beq.n	800a99e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a92c:	4610      	mov	r0, r2
 800a92e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a930:	e035      	b.n	800a99e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a944:	b29b      	uxth	r3, r3
 800a946:	2b00      	cmp	r3, #0
 800a948:	d005      	beq.n	800a956 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a94e:	f043 0204 	orr.w	r2, r3, #4
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	685a      	ldr	r2, [r3, #4]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a964:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7fe f896 	bl	8008a9c <HAL_DMA_GetState>
 800a970:	4603      	mov	r3, r0
 800a972:	2b01      	cmp	r3, #1
 800a974:	d014      	beq.n	800a9a0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a97a:	4a4e      	ldr	r2, [pc, #312]	; (800aab4 <I2C_Slave_STOPF+0x258>)
 800a97c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a982:	4618      	mov	r0, r3
 800a984:	f7fd fede 	bl	8008744 <HAL_DMA_Abort_IT>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d008      	beq.n	800a9a0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a998:	4610      	mov	r0, r2
 800a99a:	4798      	blx	r3
 800a99c:	e000      	b.n	800a9a0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a99e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d03e      	beq.n	800aa28 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	695b      	ldr	r3, [r3, #20]
 800a9b0:	f003 0304 	and.w	r3, r3, #4
 800a9b4:	2b04      	cmp	r3, #4
 800a9b6:	d112      	bne.n	800a9de <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	691a      	ldr	r2, [r3, #16]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c2:	b2d2      	uxtb	r2, r2
 800a9c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ca:	1c5a      	adds	r2, r3, #1
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	b29a      	uxth	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	695b      	ldr	r3, [r3, #20]
 800a9e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9e8:	2b40      	cmp	r3, #64	; 0x40
 800a9ea:	d112      	bne.n	800aa12 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	691a      	ldr	r2, [r3, #16]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f6:	b2d2      	uxtb	r2, r2
 800a9f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fe:	1c5a      	adds	r2, r3, #1
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d005      	beq.n	800aa28 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa20:	f043 0204 	orr.w	r2, r3, #4
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d003      	beq.n	800aa38 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 f8b3 	bl	800ab9c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800aa36:	e039      	b.n	800aaac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800aa38:	7bfb      	ldrb	r3, [r7, #15]
 800aa3a:	2b2a      	cmp	r3, #42	; 0x2a
 800aa3c:	d109      	bne.n	800aa52 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2200      	movs	r2, #0
 800aa42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2228      	movs	r2, #40	; 0x28
 800aa48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f7ff f8a2 	bl	8009b96 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	2b28      	cmp	r3, #40	; 0x28
 800aa5c:	d111      	bne.n	800aa82 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a15      	ldr	r2, [pc, #84]	; (800aab8 <I2C_Slave_STOPF+0x25c>)
 800aa62:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2220      	movs	r2, #32
 800aa6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f7ff f8a3 	bl	8009bc6 <HAL_I2C_ListenCpltCallback>
}
 800aa80:	e014      	b.n	800aaac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa86:	2b22      	cmp	r3, #34	; 0x22
 800aa88:	d002      	beq.n	800aa90 <I2C_Slave_STOPF+0x234>
 800aa8a:	7bfb      	ldrb	r3, [r7, #15]
 800aa8c:	2b22      	cmp	r3, #34	; 0x22
 800aa8e:	d10d      	bne.n	800aaac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2220      	movs	r2, #32
 800aa9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f7ff f875 	bl	8009b96 <HAL_I2C_SlaveRxCpltCallback>
}
 800aaac:	bf00      	nop
 800aaae:	3710      	adds	r7, #16
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	0800afd1 	.word	0x0800afd1
 800aab8:	ffff0000 	.word	0xffff0000

0800aabc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	2b08      	cmp	r3, #8
 800aad6:	d002      	beq.n	800aade <I2C_Slave_AF+0x22>
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	2b20      	cmp	r3, #32
 800aadc:	d129      	bne.n	800ab32 <I2C_Slave_AF+0x76>
 800aade:	7bfb      	ldrb	r3, [r7, #15]
 800aae0:	2b28      	cmp	r3, #40	; 0x28
 800aae2:	d126      	bne.n	800ab32 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a2c      	ldr	r2, [pc, #176]	; (800ab98 <I2C_Slave_AF+0xdc>)
 800aae8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	685a      	ldr	r2, [r3, #4]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800aaf8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ab02:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab12:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2220      	movs	r2, #32
 800ab1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f7ff f84b 	bl	8009bc6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800ab30:	e02e      	b.n	800ab90 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800ab32:	7bfb      	ldrb	r3, [r7, #15]
 800ab34:	2b21      	cmp	r3, #33	; 0x21
 800ab36:	d126      	bne.n	800ab86 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4a17      	ldr	r2, [pc, #92]	; (800ab98 <I2C_Slave_AF+0xdc>)
 800ab3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2221      	movs	r2, #33	; 0x21
 800ab42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2220      	movs	r2, #32
 800ab48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	685a      	ldr	r2, [r3, #4]
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ab62:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ab6c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab7c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f7fe ffff 	bl	8009b82 <HAL_I2C_SlaveTxCpltCallback>
}
 800ab84:	e004      	b.n	800ab90 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ab8e:	615a      	str	r2, [r3, #20]
}
 800ab90:	bf00      	nop
 800ab92:	3710      	adds	r7, #16
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	ffff0000 	.word	0xffff0000

0800ab9c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abaa:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	2b10      	cmp	r3, #16
 800abb6:	d10a      	bne.n	800abce <I2C_ITError+0x32>
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
 800abba:	2b22      	cmp	r3, #34	; 0x22
 800abbc:	d107      	bne.n	800abce <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800abcc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800abce:	7bfb      	ldrb	r3, [r7, #15]
 800abd0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800abd4:	2b28      	cmp	r3, #40	; 0x28
 800abd6:	d107      	bne.n	800abe8 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2228      	movs	r2, #40	; 0x28
 800abe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800abe6:	e015      	b.n	800ac14 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800abf6:	d006      	beq.n	800ac06 <I2C_ITError+0x6a>
 800abf8:	7bfb      	ldrb	r3, [r7, #15]
 800abfa:	2b60      	cmp	r3, #96	; 0x60
 800abfc:	d003      	beq.n	800ac06 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2220      	movs	r2, #32
 800ac02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac22:	d162      	bne.n	800acea <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	685a      	ldr	r2, [r3, #4]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ac32:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d020      	beq.n	800ac84 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac46:	4a5f      	ldr	r2, [pc, #380]	; (800adc4 <I2C_ITError+0x228>)
 800ac48:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7fd fd78 	bl	8008744 <HAL_DMA_Abort_IT>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f000 8089 	beq.w	800ad6e <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f022 0201 	bic.w	r2, r2, #1
 800ac6a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2220      	movs	r2, #32
 800ac70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ac7e:	4610      	mov	r0, r2
 800ac80:	4798      	blx	r3
 800ac82:	e074      	b.n	800ad6e <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac88:	4a4e      	ldr	r2, [pc, #312]	; (800adc4 <I2C_ITError+0x228>)
 800ac8a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac90:	4618      	mov	r0, r3
 800ac92:	f7fd fd57 	bl	8008744 <HAL_DMA_Abort_IT>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d068      	beq.n	800ad6e <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	695b      	ldr	r3, [r3, #20]
 800aca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca6:	2b40      	cmp	r3, #64	; 0x40
 800aca8:	d10b      	bne.n	800acc2 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	691a      	ldr	r2, [r3, #16]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb4:	b2d2      	uxtb	r2, r2
 800acb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbc:	1c5a      	adds	r2, r3, #1
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f022 0201 	bic.w	r2, r2, #1
 800acd0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2220      	movs	r2, #32
 800acd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ace4:	4610      	mov	r0, r2
 800ace6:	4798      	blx	r3
 800ace8:	e041      	b.n	800ad6e <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	2b60      	cmp	r3, #96	; 0x60
 800acf4:	d125      	bne.n	800ad42 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2220      	movs	r2, #32
 800acfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	695b      	ldr	r3, [r3, #20]
 800ad0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad0e:	2b40      	cmp	r3, #64	; 0x40
 800ad10:	d10b      	bne.n	800ad2a <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	691a      	ldr	r2, [r3, #16]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1c:	b2d2      	uxtb	r2, r2
 800ad1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad24:	1c5a      	adds	r2, r3, #1
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f022 0201 	bic.w	r2, r2, #1
 800ad38:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f7fe ff61 	bl	8009c02 <HAL_I2C_AbortCpltCallback>
 800ad40:	e015      	b.n	800ad6e <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	695b      	ldr	r3, [r3, #20]
 800ad48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad4c:	2b40      	cmp	r3, #64	; 0x40
 800ad4e:	d10b      	bne.n	800ad68 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	691a      	ldr	r2, [r3, #16]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5a:	b2d2      	uxtb	r2, r2
 800ad5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad62:	1c5a      	adds	r2, r3, #1
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f7f9 fb2d 	bl	80043c8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad74:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad7a:	f003 0304 	and.w	r3, r3, #4
 800ad7e:	2b04      	cmp	r3, #4
 800ad80:	d11b      	bne.n	800adba <I2C_ITError+0x21e>
 800ad82:	7bfb      	ldrb	r3, [r7, #15]
 800ad84:	2b28      	cmp	r3, #40	; 0x28
 800ad86:	d118      	bne.n	800adba <I2C_ITError+0x21e>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	685a      	ldr	r2, [r3, #4]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ad96:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4a0b      	ldr	r2, [pc, #44]	; (800adc8 <I2C_ITError+0x22c>)
 800ad9c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2220      	movs	r2, #32
 800ada8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7fe ff06 	bl	8009bc6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800adba:	bf00      	nop
 800adbc:	3710      	adds	r7, #16
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	0800afd1 	.word	0x0800afd1
 800adc8:	ffff0000 	.word	0xffff0000

0800adcc <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b086      	sub	sp, #24
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ade0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ade8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adee:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	685a      	ldr	r2, [r3, #4]
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800adfe:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae04:	2200      	movs	r2, #0
 800ae06:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	63da      	str	r2, [r3, #60]	; 0x3c

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800ae10:	7cfb      	ldrb	r3, [r7, #19]
 800ae12:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800ae16:	2b21      	cmp	r3, #33	; 0x21
 800ae18:	d007      	beq.n	800ae2a <I2C_DMAXferCplt+0x5e>
 800ae1a:	7cfb      	ldrb	r3, [r7, #19]
 800ae1c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800ae20:	2b22      	cmp	r3, #34	; 0x22
 800ae22:	d131      	bne.n	800ae88 <I2C_DMAXferCplt+0xbc>
 800ae24:	7cbb      	ldrb	r3, [r7, #18]
 800ae26:	2b20      	cmp	r3, #32
 800ae28:	d12e      	bne.n	800ae88 <I2C_DMAXferCplt+0xbc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	685a      	ldr	r2, [r3, #4]
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ae38:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800ae40:	7cfb      	ldrb	r3, [r7, #19]
 800ae42:	2b29      	cmp	r3, #41	; 0x29
 800ae44:	d10a      	bne.n	800ae5c <I2C_DMAXferCplt+0x90>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	2221      	movs	r2, #33	; 0x21
 800ae4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	2228      	movs	r2, #40	; 0x28
 800ae50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ae54:	6978      	ldr	r0, [r7, #20]
 800ae56:	f7fe fe94 	bl	8009b82 <HAL_I2C_SlaveTxCpltCallback>
 800ae5a:	e00c      	b.n	800ae76 <I2C_DMAXferCplt+0xaa>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ae5c:	7cfb      	ldrb	r3, [r7, #19]
 800ae5e:	2b2a      	cmp	r3, #42	; 0x2a
 800ae60:	d109      	bne.n	800ae76 <I2C_DMAXferCplt+0xaa>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	2222      	movs	r2, #34	; 0x22
 800ae66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	2228      	movs	r2, #40	; 0x28
 800ae6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ae70:	6978      	ldr	r0, [r7, #20]
 800ae72:	f7fe fe90 	bl	8009b96 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	685a      	ldr	r2, [r3, #4]
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800ae84:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800ae86:	e06a      	b.n	800af5e <I2C_DMAXferCplt+0x192>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d064      	beq.n	800af5e <I2C_DMAXferCplt+0x192>
    if (hi2c->XferCount == (uint16_t)1)
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d107      	bne.n	800aeae <I2C_DMAXferCplt+0xe2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aeac:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	685a      	ldr	r2, [r3, #4]
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800aebc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800aec4:	d009      	beq.n	800aeda <I2C_DMAXferCplt+0x10e>
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2b08      	cmp	r3, #8
 800aeca:	d006      	beq.n	800aeda <I2C_DMAXferCplt+0x10e>
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800aed2:	d002      	beq.n	800aeda <I2C_DMAXferCplt+0x10e>
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2b20      	cmp	r3, #32
 800aed8:	d107      	bne.n	800aeea <I2C_DMAXferCplt+0x11e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aee8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	685a      	ldr	r2, [r3, #4]
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aef8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	685a      	ldr	r2, [r3, #4]
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800af08:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	2200      	movs	r2, #0
 800af0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af14:	2b00      	cmp	r3, #0
 800af16:	d003      	beq.n	800af20 <I2C_DMAXferCplt+0x154>
      HAL_I2C_ErrorCallback(hi2c);
 800af18:	6978      	ldr	r0, [r7, #20]
 800af1a:	f7f9 fa55 	bl	80043c8 <HAL_I2C_ErrorCallback>
}
 800af1e:	e01e      	b.n	800af5e <I2C_DMAXferCplt+0x192>
      hi2c->State = HAL_I2C_STATE_READY;
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	2220      	movs	r2, #32
 800af24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	2b40      	cmp	r3, #64	; 0x40
 800af32:	d10a      	bne.n	800af4a <I2C_DMAXferCplt+0x17e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	2200      	movs	r2, #0
 800af38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	2200      	movs	r2, #0
 800af40:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800af42:	6978      	ldr	r0, [r7, #20]
 800af44:	f7fe fe53 	bl	8009bee <HAL_I2C_MemRxCpltCallback>
}
 800af48:	e009      	b.n	800af5e <I2C_DMAXferCplt+0x192>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	2200      	movs	r2, #0
 800af4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	2212      	movs	r2, #18
 800af56:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800af58:	6978      	ldr	r0, [r7, #20]
 800af5a:	f7f9 fa2a 	bl	80043b2 <HAL_I2C_MasterRxCpltCallback>
}
 800af5e:	bf00      	nop
 800af60:	3718      	adds	r7, #24
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b084      	sub	sp, #16
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af72:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af78:	2200      	movs	r2, #0
 800af7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af80:	2200      	movs	r2, #0
 800af82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f7fd fd97 	bl	8008ab8 <HAL_DMA_GetError>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	d01b      	beq.n	800afc8 <I2C_DMAError+0x62>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af9e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2200      	movs	r2, #0
 800afa4:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2220      	movs	r2, #32
 800afaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2200      	movs	r2, #0
 800afb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afba:	f043 0210 	orr.w	r2, r3, #16
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f7f9 fa00 	bl	80043c8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800afc8:	bf00      	nop
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afdc:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afe4:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afea:	2200      	movs	r2, #0
 800afec:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff2:	2200      	movs	r2, #0
 800aff4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b004:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2200      	movs	r2, #0
 800b00a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b010:	2200      	movs	r2, #0
 800b012:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b018:	2200      	movs	r2, #0
 800b01a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f022 0201 	bic.w	r2, r2, #1
 800b02a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b032:	b2db      	uxtb	r3, r3
 800b034:	2b60      	cmp	r3, #96	; 0x60
 800b036:	d10e      	bne.n	800b056 <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2220      	movs	r2, #32
 800b03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2200      	movs	r2, #0
 800b044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2200      	movs	r2, #0
 800b04c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f7fe fdd7 	bl	8009c02 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b054:	e027      	b.n	800b0a6 <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b056:	7afb      	ldrb	r3, [r7, #11]
 800b058:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b05c:	2b28      	cmp	r3, #40	; 0x28
 800b05e:	d117      	bne.n	800b090 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	681a      	ldr	r2, [r3, #0]
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f042 0201 	orr.w	r2, r2, #1
 800b06e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b07e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2228      	movs	r2, #40	; 0x28
 800b08a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b08e:	e007      	b.n	800b0a0 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2220      	movs	r2, #32
 800b094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2200      	movs	r2, #0
 800b09c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f7f9 f991 	bl	80043c8 <HAL_I2C_ErrorCallback>
}
 800b0a6:	bf00      	nop
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800b0ae:	b480      	push	{r7}
 800b0b0:	b083      	sub	sp, #12
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ba:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800b0be:	d103      	bne.n	800b0c8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800b0c6:	e007      	b.n	800b0d8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0cc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800b0d0:	d102      	bne.n	800b0d8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2208      	movs	r2, #8
 800b0d6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800b0d8:	bf00      	nop
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d101      	bne.n	800b0f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e0ca      	b.n	800b28e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b0f8:	4b67      	ldr	r3, [pc, #412]	; (800b298 <HAL_RCC_ClockConfig+0x1b4>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f003 030f 	and.w	r3, r3, #15
 800b100:	683a      	ldr	r2, [r7, #0]
 800b102:	429a      	cmp	r2, r3
 800b104:	d90c      	bls.n	800b120 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b106:	4b64      	ldr	r3, [pc, #400]	; (800b298 <HAL_RCC_ClockConfig+0x1b4>)
 800b108:	683a      	ldr	r2, [r7, #0]
 800b10a:	b2d2      	uxtb	r2, r2
 800b10c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b10e:	4b62      	ldr	r3, [pc, #392]	; (800b298 <HAL_RCC_ClockConfig+0x1b4>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f003 030f 	and.w	r3, r3, #15
 800b116:	683a      	ldr	r2, [r7, #0]
 800b118:	429a      	cmp	r2, r3
 800b11a:	d001      	beq.n	800b120 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	e0b6      	b.n	800b28e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f003 0302 	and.w	r3, r3, #2
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d020      	beq.n	800b16e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 0304 	and.w	r3, r3, #4
 800b134:	2b00      	cmp	r3, #0
 800b136:	d005      	beq.n	800b144 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b138:	4b58      	ldr	r3, [pc, #352]	; (800b29c <HAL_RCC_ClockConfig+0x1b8>)
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	4a57      	ldr	r2, [pc, #348]	; (800b29c <HAL_RCC_ClockConfig+0x1b8>)
 800b13e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b142:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f003 0308 	and.w	r3, r3, #8
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d005      	beq.n	800b15c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b150:	4b52      	ldr	r3, [pc, #328]	; (800b29c <HAL_RCC_ClockConfig+0x1b8>)
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	4a51      	ldr	r2, [pc, #324]	; (800b29c <HAL_RCC_ClockConfig+0x1b8>)
 800b156:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b15a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b15c:	4b4f      	ldr	r3, [pc, #316]	; (800b29c <HAL_RCC_ClockConfig+0x1b8>)
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	494c      	ldr	r1, [pc, #304]	; (800b29c <HAL_RCC_ClockConfig+0x1b8>)
 800b16a:	4313      	orrs	r3, r2
 800b16c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f003 0301 	and.w	r3, r3, #1
 800b176:	2b00      	cmp	r3, #0
 800b178:	d044      	beq.n	800b204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	2b01      	cmp	r3, #1
 800b180:	d107      	bne.n	800b192 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b182:	4b46      	ldr	r3, [pc, #280]	; (800b29c <HAL_RCC_ClockConfig+0x1b8>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d119      	bne.n	800b1c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b18e:	2301      	movs	r3, #1
 800b190:	e07d      	b.n	800b28e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	2b02      	cmp	r3, #2
 800b198:	d003      	beq.n	800b1a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b19e:	2b03      	cmp	r3, #3
 800b1a0:	d107      	bne.n	800b1b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b1a2:	4b3e      	ldr	r3, [pc, #248]	; (800b29c <HAL_RCC_ClockConfig+0x1b8>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d109      	bne.n	800b1c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	e06d      	b.n	800b28e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b1b2:	4b3a      	ldr	r3, [pc, #232]	; (800b29c <HAL_RCC_ClockConfig+0x1b8>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f003 0302 	and.w	r3, r3, #2
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d101      	bne.n	800b1c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	e065      	b.n	800b28e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b1c2:	4b36      	ldr	r3, [pc, #216]	; (800b29c <HAL_RCC_ClockConfig+0x1b8>)
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	f023 0203 	bic.w	r2, r3, #3
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	4933      	ldr	r1, [pc, #204]	; (800b29c <HAL_RCC_ClockConfig+0x1b8>)
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b1d4:	f7fb feac 	bl	8006f30 <HAL_GetTick>
 800b1d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b1da:	e00a      	b.n	800b1f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b1dc:	f7fb fea8 	bl	8006f30 <HAL_GetTick>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	1ad3      	subs	r3, r2, r3
 800b1e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d901      	bls.n	800b1f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b1ee:	2303      	movs	r3, #3
 800b1f0:	e04d      	b.n	800b28e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b1f2:	4b2a      	ldr	r3, [pc, #168]	; (800b29c <HAL_RCC_ClockConfig+0x1b8>)
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	f003 020c 	and.w	r2, r3, #12
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	429a      	cmp	r2, r3
 800b202:	d1eb      	bne.n	800b1dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b204:	4b24      	ldr	r3, [pc, #144]	; (800b298 <HAL_RCC_ClockConfig+0x1b4>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f003 030f 	and.w	r3, r3, #15
 800b20c:	683a      	ldr	r2, [r7, #0]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d20c      	bcs.n	800b22c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b212:	4b21      	ldr	r3, [pc, #132]	; (800b298 <HAL_RCC_ClockConfig+0x1b4>)
 800b214:	683a      	ldr	r2, [r7, #0]
 800b216:	b2d2      	uxtb	r2, r2
 800b218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b21a:	4b1f      	ldr	r3, [pc, #124]	; (800b298 <HAL_RCC_ClockConfig+0x1b4>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f003 030f 	and.w	r3, r3, #15
 800b222:	683a      	ldr	r2, [r7, #0]
 800b224:	429a      	cmp	r2, r3
 800b226:	d001      	beq.n	800b22c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b228:	2301      	movs	r3, #1
 800b22a:	e030      	b.n	800b28e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f003 0304 	and.w	r3, r3, #4
 800b234:	2b00      	cmp	r3, #0
 800b236:	d008      	beq.n	800b24a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b238:	4b18      	ldr	r3, [pc, #96]	; (800b29c <HAL_RCC_ClockConfig+0x1b8>)
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	4915      	ldr	r1, [pc, #84]	; (800b29c <HAL_RCC_ClockConfig+0x1b8>)
 800b246:	4313      	orrs	r3, r2
 800b248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f003 0308 	and.w	r3, r3, #8
 800b252:	2b00      	cmp	r3, #0
 800b254:	d009      	beq.n	800b26a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b256:	4b11      	ldr	r3, [pc, #68]	; (800b29c <HAL_RCC_ClockConfig+0x1b8>)
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	691b      	ldr	r3, [r3, #16]
 800b262:	00db      	lsls	r3, r3, #3
 800b264:	490d      	ldr	r1, [pc, #52]	; (800b29c <HAL_RCC_ClockConfig+0x1b8>)
 800b266:	4313      	orrs	r3, r2
 800b268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b26a:	f000 f81d 	bl	800b2a8 <HAL_RCC_GetSysClockFreq>
 800b26e:	4602      	mov	r2, r0
 800b270:	4b0a      	ldr	r3, [pc, #40]	; (800b29c <HAL_RCC_ClockConfig+0x1b8>)
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	091b      	lsrs	r3, r3, #4
 800b276:	f003 030f 	and.w	r3, r3, #15
 800b27a:	4909      	ldr	r1, [pc, #36]	; (800b2a0 <HAL_RCC_ClockConfig+0x1bc>)
 800b27c:	5ccb      	ldrb	r3, [r1, r3]
 800b27e:	fa22 f303 	lsr.w	r3, r2, r3
 800b282:	4a08      	ldr	r2, [pc, #32]	; (800b2a4 <HAL_RCC_ClockConfig+0x1c0>)
 800b284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800b286:	200f      	movs	r0, #15
 800b288:	f7fb fe0e 	bl	8006ea8 <HAL_InitTick>

  return HAL_OK;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	40023c00 	.word	0x40023c00
 800b29c:	40023800 	.word	0x40023800
 800b2a0:	0800e15c 	.word	0x0800e15c
 800b2a4:	200001ac 	.word	0x200001ac

0800b2a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b2a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2ac:	b090      	sub	sp, #64	; 0x40
 800b2ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	637b      	str	r3, [r7, #52]	; 0x34
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b2c0:	4b59      	ldr	r3, [pc, #356]	; (800b428 <HAL_RCC_GetSysClockFreq+0x180>)
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	f003 030c 	and.w	r3, r3, #12
 800b2c8:	2b08      	cmp	r3, #8
 800b2ca:	d00d      	beq.n	800b2e8 <HAL_RCC_GetSysClockFreq+0x40>
 800b2cc:	2b08      	cmp	r3, #8
 800b2ce:	f200 80a1 	bhi.w	800b414 <HAL_RCC_GetSysClockFreq+0x16c>
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d002      	beq.n	800b2dc <HAL_RCC_GetSysClockFreq+0x34>
 800b2d6:	2b04      	cmp	r3, #4
 800b2d8:	d003      	beq.n	800b2e2 <HAL_RCC_GetSysClockFreq+0x3a>
 800b2da:	e09b      	b.n	800b414 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b2dc:	4b53      	ldr	r3, [pc, #332]	; (800b42c <HAL_RCC_GetSysClockFreq+0x184>)
 800b2de:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800b2e0:	e09b      	b.n	800b41a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b2e2:	4b53      	ldr	r3, [pc, #332]	; (800b430 <HAL_RCC_GetSysClockFreq+0x188>)
 800b2e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b2e6:	e098      	b.n	800b41a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b2e8:	4b4f      	ldr	r3, [pc, #316]	; (800b428 <HAL_RCC_GetSysClockFreq+0x180>)
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b2f2:	4b4d      	ldr	r3, [pc, #308]	; (800b428 <HAL_RCC_GetSysClockFreq+0x180>)
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d028      	beq.n	800b350 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b2fe:	4b4a      	ldr	r3, [pc, #296]	; (800b428 <HAL_RCC_GetSysClockFreq+0x180>)
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	099b      	lsrs	r3, r3, #6
 800b304:	2200      	movs	r2, #0
 800b306:	623b      	str	r3, [r7, #32]
 800b308:	627a      	str	r2, [r7, #36]	; 0x24
 800b30a:	6a3b      	ldr	r3, [r7, #32]
 800b30c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800b310:	2100      	movs	r1, #0
 800b312:	4b47      	ldr	r3, [pc, #284]	; (800b430 <HAL_RCC_GetSysClockFreq+0x188>)
 800b314:	fb03 f201 	mul.w	r2, r3, r1
 800b318:	2300      	movs	r3, #0
 800b31a:	fb00 f303 	mul.w	r3, r0, r3
 800b31e:	4413      	add	r3, r2
 800b320:	4a43      	ldr	r2, [pc, #268]	; (800b430 <HAL_RCC_GetSysClockFreq+0x188>)
 800b322:	fba0 1202 	umull	r1, r2, r0, r2
 800b326:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b328:	460a      	mov	r2, r1
 800b32a:	62ba      	str	r2, [r7, #40]	; 0x28
 800b32c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b32e:	4413      	add	r3, r2
 800b330:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b334:	2200      	movs	r2, #0
 800b336:	61bb      	str	r3, [r7, #24]
 800b338:	61fa      	str	r2, [r7, #28]
 800b33a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b33e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b342:	f7f5 fb63 	bl	8000a0c <__aeabi_uldivmod>
 800b346:	4602      	mov	r2, r0
 800b348:	460b      	mov	r3, r1
 800b34a:	4613      	mov	r3, r2
 800b34c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b34e:	e053      	b.n	800b3f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b350:	4b35      	ldr	r3, [pc, #212]	; (800b428 <HAL_RCC_GetSysClockFreq+0x180>)
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	099b      	lsrs	r3, r3, #6
 800b356:	2200      	movs	r2, #0
 800b358:	613b      	str	r3, [r7, #16]
 800b35a:	617a      	str	r2, [r7, #20]
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800b362:	f04f 0b00 	mov.w	fp, #0
 800b366:	4652      	mov	r2, sl
 800b368:	465b      	mov	r3, fp
 800b36a:	f04f 0000 	mov.w	r0, #0
 800b36e:	f04f 0100 	mov.w	r1, #0
 800b372:	0159      	lsls	r1, r3, #5
 800b374:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b378:	0150      	lsls	r0, r2, #5
 800b37a:	4602      	mov	r2, r0
 800b37c:	460b      	mov	r3, r1
 800b37e:	ebb2 080a 	subs.w	r8, r2, sl
 800b382:	eb63 090b 	sbc.w	r9, r3, fp
 800b386:	f04f 0200 	mov.w	r2, #0
 800b38a:	f04f 0300 	mov.w	r3, #0
 800b38e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800b392:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800b396:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800b39a:	ebb2 0408 	subs.w	r4, r2, r8
 800b39e:	eb63 0509 	sbc.w	r5, r3, r9
 800b3a2:	f04f 0200 	mov.w	r2, #0
 800b3a6:	f04f 0300 	mov.w	r3, #0
 800b3aa:	00eb      	lsls	r3, r5, #3
 800b3ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b3b0:	00e2      	lsls	r2, r4, #3
 800b3b2:	4614      	mov	r4, r2
 800b3b4:	461d      	mov	r5, r3
 800b3b6:	eb14 030a 	adds.w	r3, r4, sl
 800b3ba:	603b      	str	r3, [r7, #0]
 800b3bc:	eb45 030b 	adc.w	r3, r5, fp
 800b3c0:	607b      	str	r3, [r7, #4]
 800b3c2:	f04f 0200 	mov.w	r2, #0
 800b3c6:	f04f 0300 	mov.w	r3, #0
 800b3ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b3ce:	4629      	mov	r1, r5
 800b3d0:	028b      	lsls	r3, r1, #10
 800b3d2:	4621      	mov	r1, r4
 800b3d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b3d8:	4621      	mov	r1, r4
 800b3da:	028a      	lsls	r2, r1, #10
 800b3dc:	4610      	mov	r0, r2
 800b3de:	4619      	mov	r1, r3
 800b3e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	60bb      	str	r3, [r7, #8]
 800b3e6:	60fa      	str	r2, [r7, #12]
 800b3e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b3ec:	f7f5 fb0e 	bl	8000a0c <__aeabi_uldivmod>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	4613      	mov	r3, r2
 800b3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b3f8:	4b0b      	ldr	r3, [pc, #44]	; (800b428 <HAL_RCC_GetSysClockFreq+0x180>)
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	0c1b      	lsrs	r3, r3, #16
 800b3fe:	f003 0303 	and.w	r3, r3, #3
 800b402:	3301      	adds	r3, #1
 800b404:	005b      	lsls	r3, r3, #1
 800b406:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800b408:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b410:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b412:	e002      	b.n	800b41a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b414:	4b05      	ldr	r3, [pc, #20]	; (800b42c <HAL_RCC_GetSysClockFreq+0x184>)
 800b416:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3740      	adds	r7, #64	; 0x40
 800b420:	46bd      	mov	sp, r7
 800b422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b426:	bf00      	nop
 800b428:	40023800 	.word	0x40023800
 800b42c:	00f42400 	.word	0x00f42400
 800b430:	017d7840 	.word	0x017d7840

0800b434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b434:	b480      	push	{r7}
 800b436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b438:	4b03      	ldr	r3, [pc, #12]	; (800b448 <HAL_RCC_GetHCLKFreq+0x14>)
 800b43a:	681b      	ldr	r3, [r3, #0]
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr
 800b446:	bf00      	nop
 800b448:	200001ac 	.word	0x200001ac

0800b44c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b450:	f7ff fff0 	bl	800b434 <HAL_RCC_GetHCLKFreq>
 800b454:	4602      	mov	r2, r0
 800b456:	4b05      	ldr	r3, [pc, #20]	; (800b46c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	0a9b      	lsrs	r3, r3, #10
 800b45c:	f003 0307 	and.w	r3, r3, #7
 800b460:	4903      	ldr	r1, [pc, #12]	; (800b470 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b462:	5ccb      	ldrb	r3, [r1, r3]
 800b464:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b468:	4618      	mov	r0, r3
 800b46a:	bd80      	pop	{r7, pc}
 800b46c:	40023800 	.word	0x40023800
 800b470:	0800e16c 	.word	0x0800e16c

0800b474 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b086      	sub	sp, #24
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b47c:	2300      	movs	r3, #0
 800b47e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f003 0301 	and.w	r3, r3, #1
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d075      	beq.n	800b578 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b48c:	4b88      	ldr	r3, [pc, #544]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	f003 030c 	and.w	r3, r3, #12
 800b494:	2b04      	cmp	r3, #4
 800b496:	d00c      	beq.n	800b4b2 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b498:	4b85      	ldr	r3, [pc, #532]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b4a0:	2b08      	cmp	r3, #8
 800b4a2:	d112      	bne.n	800b4ca <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b4a4:	4b82      	ldr	r3, [pc, #520]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b4b0:	d10b      	bne.n	800b4ca <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b4b2:	4b7f      	ldr	r3, [pc, #508]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d05b      	beq.n	800b576 <HAL_RCC_OscConfig+0x102>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d157      	bne.n	800b576 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e20a      	b.n	800b8e0 <HAL_RCC_OscConfig+0x46c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4d2:	d106      	bne.n	800b4e2 <HAL_RCC_OscConfig+0x6e>
 800b4d4:	4b76      	ldr	r3, [pc, #472]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a75      	ldr	r2, [pc, #468]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b4da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b4de:	6013      	str	r3, [r2, #0]
 800b4e0:	e01d      	b.n	800b51e <HAL_RCC_OscConfig+0xaa>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b4ea:	d10c      	bne.n	800b506 <HAL_RCC_OscConfig+0x92>
 800b4ec:	4b70      	ldr	r3, [pc, #448]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a6f      	ldr	r2, [pc, #444]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b4f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b4f6:	6013      	str	r3, [r2, #0]
 800b4f8:	4b6d      	ldr	r3, [pc, #436]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a6c      	ldr	r2, [pc, #432]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b4fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b502:	6013      	str	r3, [r2, #0]
 800b504:	e00b      	b.n	800b51e <HAL_RCC_OscConfig+0xaa>
 800b506:	4b6a      	ldr	r3, [pc, #424]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a69      	ldr	r2, [pc, #420]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b50c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b510:	6013      	str	r3, [r2, #0]
 800b512:	4b67      	ldr	r3, [pc, #412]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a66      	ldr	r2, [pc, #408]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b518:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b51c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d013      	beq.n	800b54e <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b526:	f7fb fd03 	bl	8006f30 <HAL_GetTick>
 800b52a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b52c:	e008      	b.n	800b540 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b52e:	f7fb fcff 	bl	8006f30 <HAL_GetTick>
 800b532:	4602      	mov	r2, r0
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	1ad3      	subs	r3, r2, r3
 800b538:	2b64      	cmp	r3, #100	; 0x64
 800b53a:	d901      	bls.n	800b540 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800b53c:	2303      	movs	r3, #3
 800b53e:	e1cf      	b.n	800b8e0 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b540:	4b5b      	ldr	r3, [pc, #364]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d0f0      	beq.n	800b52e <HAL_RCC_OscConfig+0xba>
 800b54c:	e014      	b.n	800b578 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b54e:	f7fb fcef 	bl	8006f30 <HAL_GetTick>
 800b552:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b554:	e008      	b.n	800b568 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b556:	f7fb fceb 	bl	8006f30 <HAL_GetTick>
 800b55a:	4602      	mov	r2, r0
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	1ad3      	subs	r3, r2, r3
 800b560:	2b64      	cmp	r3, #100	; 0x64
 800b562:	d901      	bls.n	800b568 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800b564:	2303      	movs	r3, #3
 800b566:	e1bb      	b.n	800b8e0 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b568:	4b51      	ldr	r3, [pc, #324]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b570:	2b00      	cmp	r3, #0
 800b572:	d1f0      	bne.n	800b556 <HAL_RCC_OscConfig+0xe2>
 800b574:	e000      	b.n	800b578 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b576:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f003 0302 	and.w	r3, r3, #2
 800b580:	2b00      	cmp	r3, #0
 800b582:	d063      	beq.n	800b64c <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b584:	4b4a      	ldr	r3, [pc, #296]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b586:	689b      	ldr	r3, [r3, #8]
 800b588:	f003 030c 	and.w	r3, r3, #12
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d00b      	beq.n	800b5a8 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b590:	4b47      	ldr	r3, [pc, #284]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b592:	689b      	ldr	r3, [r3, #8]
 800b594:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b598:	2b08      	cmp	r3, #8
 800b59a:	d11c      	bne.n	800b5d6 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b59c:	4b44      	ldr	r3, [pc, #272]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d116      	bne.n	800b5d6 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b5a8:	4b41      	ldr	r3, [pc, #260]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f003 0302 	and.w	r3, r3, #2
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d005      	beq.n	800b5c0 <HAL_RCC_OscConfig+0x14c>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d001      	beq.n	800b5c0 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	e18f      	b.n	800b8e0 <HAL_RCC_OscConfig+0x46c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b5c0:	4b3b      	ldr	r3, [pc, #236]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	691b      	ldr	r3, [r3, #16]
 800b5cc:	00db      	lsls	r3, r3, #3
 800b5ce:	4938      	ldr	r1, [pc, #224]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b5d4:	e03a      	b.n	800b64c <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	68db      	ldr	r3, [r3, #12]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d020      	beq.n	800b620 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b5de:	4b35      	ldr	r3, [pc, #212]	; (800b6b4 <HAL_RCC_OscConfig+0x240>)
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5e4:	f7fb fca4 	bl	8006f30 <HAL_GetTick>
 800b5e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b5ea:	e008      	b.n	800b5fe <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b5ec:	f7fb fca0 	bl	8006f30 <HAL_GetTick>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	1ad3      	subs	r3, r2, r3
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	d901      	bls.n	800b5fe <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800b5fa:	2303      	movs	r3, #3
 800b5fc:	e170      	b.n	800b8e0 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b5fe:	4b2c      	ldr	r3, [pc, #176]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f003 0302 	and.w	r3, r3, #2
 800b606:	2b00      	cmp	r3, #0
 800b608:	d0f0      	beq.n	800b5ec <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b60a:	4b29      	ldr	r3, [pc, #164]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	691b      	ldr	r3, [r3, #16]
 800b616:	00db      	lsls	r3, r3, #3
 800b618:	4925      	ldr	r1, [pc, #148]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b61a:	4313      	orrs	r3, r2
 800b61c:	600b      	str	r3, [r1, #0]
 800b61e:	e015      	b.n	800b64c <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b620:	4b24      	ldr	r3, [pc, #144]	; (800b6b4 <HAL_RCC_OscConfig+0x240>)
 800b622:	2200      	movs	r2, #0
 800b624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b626:	f7fb fc83 	bl	8006f30 <HAL_GetTick>
 800b62a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b62c:	e008      	b.n	800b640 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b62e:	f7fb fc7f 	bl	8006f30 <HAL_GetTick>
 800b632:	4602      	mov	r2, r0
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	1ad3      	subs	r3, r2, r3
 800b638:	2b02      	cmp	r3, #2
 800b63a:	d901      	bls.n	800b640 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800b63c:	2303      	movs	r3, #3
 800b63e:	e14f      	b.n	800b8e0 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b640:	4b1b      	ldr	r3, [pc, #108]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f003 0302 	and.w	r3, r3, #2
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d1f0      	bne.n	800b62e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f003 0308 	and.w	r3, r3, #8
 800b654:	2b00      	cmp	r3, #0
 800b656:	d037      	beq.n	800b6c8 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	695b      	ldr	r3, [r3, #20]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d016      	beq.n	800b68e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b660:	4b15      	ldr	r3, [pc, #84]	; (800b6b8 <HAL_RCC_OscConfig+0x244>)
 800b662:	2201      	movs	r2, #1
 800b664:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b666:	f7fb fc63 	bl	8006f30 <HAL_GetTick>
 800b66a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b66c:	e008      	b.n	800b680 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b66e:	f7fb fc5f 	bl	8006f30 <HAL_GetTick>
 800b672:	4602      	mov	r2, r0
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	1ad3      	subs	r3, r2, r3
 800b678:	2b02      	cmp	r3, #2
 800b67a:	d901      	bls.n	800b680 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800b67c:	2303      	movs	r3, #3
 800b67e:	e12f      	b.n	800b8e0 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b680:	4b0b      	ldr	r3, [pc, #44]	; (800b6b0 <HAL_RCC_OscConfig+0x23c>)
 800b682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b684:	f003 0302 	and.w	r3, r3, #2
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d0f0      	beq.n	800b66e <HAL_RCC_OscConfig+0x1fa>
 800b68c:	e01c      	b.n	800b6c8 <HAL_RCC_OscConfig+0x254>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b68e:	4b0a      	ldr	r3, [pc, #40]	; (800b6b8 <HAL_RCC_OscConfig+0x244>)
 800b690:	2200      	movs	r2, #0
 800b692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b694:	f7fb fc4c 	bl	8006f30 <HAL_GetTick>
 800b698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b69a:	e00f      	b.n	800b6bc <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b69c:	f7fb fc48 	bl	8006f30 <HAL_GetTick>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	1ad3      	subs	r3, r2, r3
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	d908      	bls.n	800b6bc <HAL_RCC_OscConfig+0x248>
        {
          return HAL_TIMEOUT;
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	e118      	b.n	800b8e0 <HAL_RCC_OscConfig+0x46c>
 800b6ae:	bf00      	nop
 800b6b0:	40023800 	.word	0x40023800
 800b6b4:	42470000 	.word	0x42470000
 800b6b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b6bc:	4b8a      	ldr	r3, [pc, #552]	; (800b8e8 <HAL_RCC_OscConfig+0x474>)
 800b6be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6c0:	f003 0302 	and.w	r3, r3, #2
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d1e9      	bne.n	800b69c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f003 0304 	and.w	r3, r3, #4
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	f000 8097 	beq.w	800b804 <HAL_RCC_OscConfig+0x390>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b6da:	4b83      	ldr	r3, [pc, #524]	; (800b8e8 <HAL_RCC_OscConfig+0x474>)
 800b6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d10f      	bne.n	800b706 <HAL_RCC_OscConfig+0x292>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	60fb      	str	r3, [r7, #12]
 800b6ea:	4b7f      	ldr	r3, [pc, #508]	; (800b8e8 <HAL_RCC_OscConfig+0x474>)
 800b6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ee:	4a7e      	ldr	r2, [pc, #504]	; (800b8e8 <HAL_RCC_OscConfig+0x474>)
 800b6f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6f4:	6413      	str	r3, [r2, #64]	; 0x40
 800b6f6:	4b7c      	ldr	r3, [pc, #496]	; (800b8e8 <HAL_RCC_OscConfig+0x474>)
 800b6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6fe:	60fb      	str	r3, [r7, #12]
 800b700:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b702:	2301      	movs	r3, #1
 800b704:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b706:	4b79      	ldr	r3, [pc, #484]	; (800b8ec <HAL_RCC_OscConfig+0x478>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d118      	bne.n	800b744 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b712:	4b76      	ldr	r3, [pc, #472]	; (800b8ec <HAL_RCC_OscConfig+0x478>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a75      	ldr	r2, [pc, #468]	; (800b8ec <HAL_RCC_OscConfig+0x478>)
 800b718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b71c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b71e:	f7fb fc07 	bl	8006f30 <HAL_GetTick>
 800b722:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b724:	e008      	b.n	800b738 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b726:	f7fb fc03 	bl	8006f30 <HAL_GetTick>
 800b72a:	4602      	mov	r2, r0
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	1ad3      	subs	r3, r2, r3
 800b730:	2b02      	cmp	r3, #2
 800b732:	d901      	bls.n	800b738 <HAL_RCC_OscConfig+0x2c4>
        {
          return HAL_TIMEOUT;
 800b734:	2303      	movs	r3, #3
 800b736:	e0d3      	b.n	800b8e0 <HAL_RCC_OscConfig+0x46c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b738:	4b6c      	ldr	r3, [pc, #432]	; (800b8ec <HAL_RCC_OscConfig+0x478>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b740:	2b00      	cmp	r3, #0
 800b742:	d0f0      	beq.n	800b726 <HAL_RCC_OscConfig+0x2b2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d106      	bne.n	800b75a <HAL_RCC_OscConfig+0x2e6>
 800b74c:	4b66      	ldr	r3, [pc, #408]	; (800b8e8 <HAL_RCC_OscConfig+0x474>)
 800b74e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b750:	4a65      	ldr	r2, [pc, #404]	; (800b8e8 <HAL_RCC_OscConfig+0x474>)
 800b752:	f043 0301 	orr.w	r3, r3, #1
 800b756:	6713      	str	r3, [r2, #112]	; 0x70
 800b758:	e01c      	b.n	800b794 <HAL_RCC_OscConfig+0x320>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	2b05      	cmp	r3, #5
 800b760:	d10c      	bne.n	800b77c <HAL_RCC_OscConfig+0x308>
 800b762:	4b61      	ldr	r3, [pc, #388]	; (800b8e8 <HAL_RCC_OscConfig+0x474>)
 800b764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b766:	4a60      	ldr	r2, [pc, #384]	; (800b8e8 <HAL_RCC_OscConfig+0x474>)
 800b768:	f043 0304 	orr.w	r3, r3, #4
 800b76c:	6713      	str	r3, [r2, #112]	; 0x70
 800b76e:	4b5e      	ldr	r3, [pc, #376]	; (800b8e8 <HAL_RCC_OscConfig+0x474>)
 800b770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b772:	4a5d      	ldr	r2, [pc, #372]	; (800b8e8 <HAL_RCC_OscConfig+0x474>)
 800b774:	f043 0301 	orr.w	r3, r3, #1
 800b778:	6713      	str	r3, [r2, #112]	; 0x70
 800b77a:	e00b      	b.n	800b794 <HAL_RCC_OscConfig+0x320>
 800b77c:	4b5a      	ldr	r3, [pc, #360]	; (800b8e8 <HAL_RCC_OscConfig+0x474>)
 800b77e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b780:	4a59      	ldr	r2, [pc, #356]	; (800b8e8 <HAL_RCC_OscConfig+0x474>)
 800b782:	f023 0301 	bic.w	r3, r3, #1
 800b786:	6713      	str	r3, [r2, #112]	; 0x70
 800b788:	4b57      	ldr	r3, [pc, #348]	; (800b8e8 <HAL_RCC_OscConfig+0x474>)
 800b78a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b78c:	4a56      	ldr	r2, [pc, #344]	; (800b8e8 <HAL_RCC_OscConfig+0x474>)
 800b78e:	f023 0304 	bic.w	r3, r3, #4
 800b792:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d015      	beq.n	800b7c8 <HAL_RCC_OscConfig+0x354>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b79c:	f7fb fbc8 	bl	8006f30 <HAL_GetTick>
 800b7a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b7a2:	e00a      	b.n	800b7ba <HAL_RCC_OscConfig+0x346>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b7a4:	f7fb fbc4 	bl	8006f30 <HAL_GetTick>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	1ad3      	subs	r3, r2, r3
 800b7ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d901      	bls.n	800b7ba <HAL_RCC_OscConfig+0x346>
        {
          return HAL_TIMEOUT;
 800b7b6:	2303      	movs	r3, #3
 800b7b8:	e092      	b.n	800b8e0 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b7ba:	4b4b      	ldr	r3, [pc, #300]	; (800b8e8 <HAL_RCC_OscConfig+0x474>)
 800b7bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7be:	f003 0302 	and.w	r3, r3, #2
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d0ee      	beq.n	800b7a4 <HAL_RCC_OscConfig+0x330>
 800b7c6:	e014      	b.n	800b7f2 <HAL_RCC_OscConfig+0x37e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7c8:	f7fb fbb2 	bl	8006f30 <HAL_GetTick>
 800b7cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b7ce:	e00a      	b.n	800b7e6 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b7d0:	f7fb fbae 	bl	8006f30 <HAL_GetTick>
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	1ad3      	subs	r3, r2, r3
 800b7da:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d901      	bls.n	800b7e6 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800b7e2:	2303      	movs	r3, #3
 800b7e4:	e07c      	b.n	800b8e0 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b7e6:	4b40      	ldr	r3, [pc, #256]	; (800b8e8 <HAL_RCC_OscConfig+0x474>)
 800b7e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ea:	f003 0302 	and.w	r3, r3, #2
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d1ee      	bne.n	800b7d0 <HAL_RCC_OscConfig+0x35c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b7f2:	7dfb      	ldrb	r3, [r7, #23]
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d105      	bne.n	800b804 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b7f8:	4b3b      	ldr	r3, [pc, #236]	; (800b8e8 <HAL_RCC_OscConfig+0x474>)
 800b7fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7fc:	4a3a      	ldr	r2, [pc, #232]	; (800b8e8 <HAL_RCC_OscConfig+0x474>)
 800b7fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b802:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	699b      	ldr	r3, [r3, #24]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d068      	beq.n	800b8de <HAL_RCC_OscConfig+0x46a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b80c:	4b36      	ldr	r3, [pc, #216]	; (800b8e8 <HAL_RCC_OscConfig+0x474>)
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	f003 030c 	and.w	r3, r3, #12
 800b814:	2b08      	cmp	r3, #8
 800b816:	d060      	beq.n	800b8da <HAL_RCC_OscConfig+0x466>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	699b      	ldr	r3, [r3, #24]
 800b81c:	2b02      	cmp	r3, #2
 800b81e:	d145      	bne.n	800b8ac <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b820:	4b33      	ldr	r3, [pc, #204]	; (800b8f0 <HAL_RCC_OscConfig+0x47c>)
 800b822:	2200      	movs	r2, #0
 800b824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b826:	f7fb fb83 	bl	8006f30 <HAL_GetTick>
 800b82a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b82c:	e008      	b.n	800b840 <HAL_RCC_OscConfig+0x3cc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b82e:	f7fb fb7f 	bl	8006f30 <HAL_GetTick>
 800b832:	4602      	mov	r2, r0
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	1ad3      	subs	r3, r2, r3
 800b838:	2b02      	cmp	r3, #2
 800b83a:	d901      	bls.n	800b840 <HAL_RCC_OscConfig+0x3cc>
          {
            return HAL_TIMEOUT;
 800b83c:	2303      	movs	r3, #3
 800b83e:	e04f      	b.n	800b8e0 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b840:	4b29      	ldr	r3, [pc, #164]	; (800b8e8 <HAL_RCC_OscConfig+0x474>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d1f0      	bne.n	800b82e <HAL_RCC_OscConfig+0x3ba>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	69da      	ldr	r2, [r3, #28]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6a1b      	ldr	r3, [r3, #32]
 800b854:	431a      	orrs	r2, r3
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85a:	019b      	lsls	r3, r3, #6
 800b85c:	431a      	orrs	r2, r3
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b862:	085b      	lsrs	r3, r3, #1
 800b864:	3b01      	subs	r3, #1
 800b866:	041b      	lsls	r3, r3, #16
 800b868:	431a      	orrs	r2, r3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b86e:	061b      	lsls	r3, r3, #24
 800b870:	431a      	orrs	r2, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b876:	071b      	lsls	r3, r3, #28
 800b878:	491b      	ldr	r1, [pc, #108]	; (800b8e8 <HAL_RCC_OscConfig+0x474>)
 800b87a:	4313      	orrs	r3, r2
 800b87c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b87e:	4b1c      	ldr	r3, [pc, #112]	; (800b8f0 <HAL_RCC_OscConfig+0x47c>)
 800b880:	2201      	movs	r2, #1
 800b882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b884:	f7fb fb54 	bl	8006f30 <HAL_GetTick>
 800b888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b88a:	e008      	b.n	800b89e <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b88c:	f7fb fb50 	bl	8006f30 <HAL_GetTick>
 800b890:	4602      	mov	r2, r0
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	1ad3      	subs	r3, r2, r3
 800b896:	2b02      	cmp	r3, #2
 800b898:	d901      	bls.n	800b89e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b89a:	2303      	movs	r3, #3
 800b89c:	e020      	b.n	800b8e0 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b89e:	4b12      	ldr	r3, [pc, #72]	; (800b8e8 <HAL_RCC_OscConfig+0x474>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d0f0      	beq.n	800b88c <HAL_RCC_OscConfig+0x418>
 800b8aa:	e018      	b.n	800b8de <HAL_RCC_OscConfig+0x46a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8ac:	4b10      	ldr	r3, [pc, #64]	; (800b8f0 <HAL_RCC_OscConfig+0x47c>)
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8b2:	f7fb fb3d 	bl	8006f30 <HAL_GetTick>
 800b8b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b8b8:	e008      	b.n	800b8cc <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b8ba:	f7fb fb39 	bl	8006f30 <HAL_GetTick>
 800b8be:	4602      	mov	r2, r0
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	1ad3      	subs	r3, r2, r3
 800b8c4:	2b02      	cmp	r3, #2
 800b8c6:	d901      	bls.n	800b8cc <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800b8c8:	2303      	movs	r3, #3
 800b8ca:	e009      	b.n	800b8e0 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b8cc:	4b06      	ldr	r3, [pc, #24]	; (800b8e8 <HAL_RCC_OscConfig+0x474>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d1f0      	bne.n	800b8ba <HAL_RCC_OscConfig+0x446>
 800b8d8:	e001      	b.n	800b8de <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e000      	b.n	800b8e0 <HAL_RCC_OscConfig+0x46c>
    }
  }
  return HAL_OK;
 800b8de:	2300      	movs	r3, #0
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3718      	adds	r7, #24
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	40023800 	.word	0x40023800
 800b8ec:	40007000 	.word	0x40007000
 800b8f0:	42470060 	.word	0x42470060

0800b8f4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b086      	sub	sp, #24
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	60b9      	str	r1, [r7, #8]
 800b8fe:	4613      	mov	r3, r2
 800b900:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	2b20      	cmp	r3, #32
 800b90c:	d153      	bne.n	800b9b6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d002      	beq.n	800b91a <HAL_UART_Transmit_DMA+0x26>
 800b914:	88fb      	ldrh	r3, [r7, #6]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d101      	bne.n	800b91e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b91a:	2301      	movs	r3, #1
 800b91c:	e04c      	b.n	800b9b8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b924:	2b01      	cmp	r3, #1
 800b926:	d101      	bne.n	800b92c <HAL_UART_Transmit_DMA+0x38>
 800b928:	2302      	movs	r3, #2
 800b92a:	e045      	b.n	800b9b8 <HAL_UART_Transmit_DMA+0xc4>
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2201      	movs	r2, #1
 800b930:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800b934:	68ba      	ldr	r2, [r7, #8]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	88fa      	ldrh	r2, [r7, #6]
 800b93e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	88fa      	ldrh	r2, [r7, #6]
 800b944:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2200      	movs	r2, #0
 800b94a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2221      	movs	r2, #33	; 0x21
 800b950:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b958:	4a19      	ldr	r2, [pc, #100]	; (800b9c0 <HAL_UART_Transmit_DMA+0xcc>)
 800b95a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b960:	4a18      	ldr	r2, [pc, #96]	; (800b9c4 <HAL_UART_Transmit_DMA+0xd0>)
 800b962:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b968:	4a17      	ldr	r2, [pc, #92]	; (800b9c8 <HAL_UART_Transmit_DMA+0xd4>)
 800b96a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b970:	2200      	movs	r2, #0
 800b972:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800b974:	f107 0308 	add.w	r3, r7, #8
 800b978:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	6819      	ldr	r1, [r3, #0]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	3304      	adds	r3, #4
 800b988:	461a      	mov	r2, r3
 800b98a:	88fb      	ldrh	r3, [r7, #6]
 800b98c:	f7fc fe7a 	bl	8008684 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b998:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2200      	movs	r2, #0
 800b99e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	695a      	ldr	r2, [r3, #20]
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b9b0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	e000      	b.n	800b9b8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800b9b6:	2302      	movs	r3, #2
  }
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3718      	adds	r7, #24
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	0800bdad 	.word	0x0800bdad
 800b9c4:	0800bdff 	.word	0x0800bdff
 800b9c8:	0800be9f 	.word	0x0800be9f

0800b9cc <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b086      	sub	sp, #24
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	2b20      	cmp	r3, #32
 800b9e4:	d166      	bne.n	800bab4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d002      	beq.n	800b9f2 <HAL_UART_Receive_DMA+0x26>
 800b9ec:	88fb      	ldrh	r3, [r7, #6]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d101      	bne.n	800b9f6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e05f      	b.n	800bab6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d101      	bne.n	800ba04 <HAL_UART_Receive_DMA+0x38>
 800ba00:	2302      	movs	r3, #2
 800ba02:	e058      	b.n	800bab6 <HAL_UART_Receive_DMA+0xea>
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800ba0c:	68ba      	ldr	r2, [r7, #8]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	88fa      	ldrh	r2, [r7, #6]
 800ba16:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2222      	movs	r2, #34	; 0x22
 800ba22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba2a:	4a25      	ldr	r2, [pc, #148]	; (800bac0 <HAL_UART_Receive_DMA+0xf4>)
 800ba2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba32:	4a24      	ldr	r2, [pc, #144]	; (800bac4 <HAL_UART_Receive_DMA+0xf8>)
 800ba34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba3a:	4a23      	ldr	r2, [pc, #140]	; (800bac8 <HAL_UART_Receive_DMA+0xfc>)
 800ba3c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba42:	2200      	movs	r2, #0
 800ba44:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800ba46:	f107 0308 	add.w	r3, r7, #8
 800ba4a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	3304      	adds	r3, #4
 800ba56:	4619      	mov	r1, r3
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	88fb      	ldrh	r3, [r7, #6]
 800ba5e:	f7fc fe11 	bl	8008684 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800ba62:	2300      	movs	r3, #0
 800ba64:	613b      	str	r3, [r7, #16]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	613b      	str	r3, [r7, #16]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	613b      	str	r3, [r7, #16]
 800ba76:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	68da      	ldr	r2, [r3, #12]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba8e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	695a      	ldr	r2, [r3, #20]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f042 0201 	orr.w	r2, r2, #1
 800ba9e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	695a      	ldr	r2, [r3, #20]
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800baae:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800bab0:	2300      	movs	r3, #0
 800bab2:	e000      	b.n	800bab6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800bab4:	2302      	movs	r3, #2
  }
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3718      	adds	r7, #24
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	0800be1b 	.word	0x0800be1b
 800bac4:	0800be83 	.word	0x0800be83
 800bac8:	0800be9f 	.word	0x0800be9f

0800bacc <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	68da      	ldr	r2, [r3, #12]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bae2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	695a      	ldr	r2, [r3, #20]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f022 0201 	bic.w	r2, r2, #1
 800baf2:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	695b      	ldr	r3, [r3, #20]
 800bafa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bafe:	2b40      	cmp	r3, #64	; 0x40
 800bb00:	d12a      	bne.n	800bb58 <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	695a      	ldr	r2, [r3, #20]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb10:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d013      	beq.n	800bb42 <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb1e:	4a16      	ldr	r2, [pc, #88]	; (800bb78 <HAL_UART_AbortReceive_IT+0xac>)
 800bb20:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7fc fe0c 	bl	8008744 <HAL_DMA_Abort_IT>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d01c      	beq.n	800bb6c <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bb3c:	4610      	mov	r0, r2
 800bb3e:	4798      	blx	r3
 800bb40:	e014      	b.n	800bb6c <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2220      	movs	r2, #32
 800bb4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f7f9 fc23 	bl	800539c <HAL_UART_AbortReceiveCpltCallback>
 800bb56:	e009      	b.n	800bb6c <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2220      	movs	r2, #32
 800bb62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f7f9 fc18 	bl	800539c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800bb6c:	2300      	movs	r3, #0
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3708      	adds	r7, #8
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	0800bfc3 	.word	0x0800bfc3

0800bb7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b088      	sub	sp, #32
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	695b      	ldr	r3, [r3, #20]
 800bb9a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800bba0:	2300      	movs	r3, #0
 800bba2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	f003 030f 	and.w	r3, r3, #15
 800bbaa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d10d      	bne.n	800bbce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bbb2:	69fb      	ldr	r3, [r7, #28]
 800bbb4:	f003 0320 	and.w	r3, r3, #32
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d008      	beq.n	800bbce <HAL_UART_IRQHandler+0x52>
 800bbbc:	69bb      	ldr	r3, [r7, #24]
 800bbbe:	f003 0320 	and.w	r3, r3, #32
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d003      	beq.n	800bbce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 fa7e 	bl	800c0c8 <UART_Receive_IT>
      return;
 800bbcc:	e0cb      	b.n	800bd66 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	f000 80ab 	beq.w	800bd2c <HAL_UART_IRQHandler+0x1b0>
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	f003 0301 	and.w	r3, r3, #1
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d105      	bne.n	800bbec <HAL_UART_IRQHandler+0x70>
 800bbe0:	69bb      	ldr	r3, [r7, #24]
 800bbe2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	f000 80a0 	beq.w	800bd2c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bbec:	69fb      	ldr	r3, [r7, #28]
 800bbee:	f003 0301 	and.w	r3, r3, #1
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d00a      	beq.n	800bc0c <HAL_UART_IRQHandler+0x90>
 800bbf6:	69bb      	ldr	r3, [r7, #24]
 800bbf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d005      	beq.n	800bc0c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc04:	f043 0201 	orr.w	r2, r3, #1
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	f003 0304 	and.w	r3, r3, #4
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d00a      	beq.n	800bc2c <HAL_UART_IRQHandler+0xb0>
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	f003 0301 	and.w	r3, r3, #1
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d005      	beq.n	800bc2c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc24:	f043 0202 	orr.w	r2, r3, #2
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bc2c:	69fb      	ldr	r3, [r7, #28]
 800bc2e:	f003 0302 	and.w	r3, r3, #2
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d00a      	beq.n	800bc4c <HAL_UART_IRQHandler+0xd0>
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	f003 0301 	and.w	r3, r3, #1
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d005      	beq.n	800bc4c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc44:	f043 0204 	orr.w	r2, r3, #4
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	f003 0308 	and.w	r3, r3, #8
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00a      	beq.n	800bc6c <HAL_UART_IRQHandler+0xf0>
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	f003 0301 	and.w	r3, r3, #1
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d005      	beq.n	800bc6c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc64:	f043 0208 	orr.w	r2, r3, #8
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d077      	beq.n	800bd64 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bc74:	69fb      	ldr	r3, [r7, #28]
 800bc76:	f003 0320 	and.w	r3, r3, #32
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d007      	beq.n	800bc8e <HAL_UART_IRQHandler+0x112>
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	f003 0320 	and.w	r3, r3, #32
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d002      	beq.n	800bc8e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 fa1d 	bl	800c0c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	695b      	ldr	r3, [r3, #20]
 800bc94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc98:	2b40      	cmp	r3, #64	; 0x40
 800bc9a:	bf0c      	ite	eq
 800bc9c:	2301      	moveq	r3, #1
 800bc9e:	2300      	movne	r3, #0
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bca8:	f003 0308 	and.w	r3, r3, #8
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d102      	bne.n	800bcb6 <HAL_UART_IRQHandler+0x13a>
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d031      	beq.n	800bd1a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 f951 	bl	800bf5e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	695b      	ldr	r3, [r3, #20]
 800bcc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcc6:	2b40      	cmp	r3, #64	; 0x40
 800bcc8:	d123      	bne.n	800bd12 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	695a      	ldr	r2, [r3, #20]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bcd8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d013      	beq.n	800bd0a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bce6:	4a21      	ldr	r2, [pc, #132]	; (800bd6c <HAL_UART_IRQHandler+0x1f0>)
 800bce8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7fc fd28 	bl	8008744 <HAL_DMA_Abort_IT>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d016      	beq.n	800bd28 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bd04:	4610      	mov	r0, r2
 800bd06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd08:	e00e      	b.n	800bd28 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f000 f844 	bl	800bd98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd10:	e00a      	b.n	800bd28 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 f840 	bl	800bd98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd18:	e006      	b.n	800bd28 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 f83c 	bl	800bd98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800bd26:	e01d      	b.n	800bd64 <HAL_UART_IRQHandler+0x1e8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd28:	bf00      	nop
    return;
 800bd2a:	e01b      	b.n	800bd64 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bd2c:	69fb      	ldr	r3, [r7, #28]
 800bd2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d008      	beq.n	800bd48 <HAL_UART_IRQHandler+0x1cc>
 800bd36:	69bb      	ldr	r3, [r7, #24]
 800bd38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d003      	beq.n	800bd48 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 f953 	bl	800bfec <UART_Transmit_IT>
    return;
 800bd46:	e00e      	b.n	800bd66 <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bd48:	69fb      	ldr	r3, [r7, #28]
 800bd4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d009      	beq.n	800bd66 <HAL_UART_IRQHandler+0x1ea>
 800bd52:	69bb      	ldr	r3, [r7, #24]
 800bd54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d004      	beq.n	800bd66 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f000 f99b 	bl	800c098 <UART_EndTransmit_IT>
    return;
 800bd62:	e000      	b.n	800bd66 <HAL_UART_IRQHandler+0x1ea>
    return;
 800bd64:	bf00      	nop
  }
}
 800bd66:	3720      	adds	r7, #32
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	0800bf9b 	.word	0x0800bf9b

0800bd70 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800bd78:	bf00      	nop
 800bd7a:	370c      	adds	r7, #12
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800bd8c:	bf00      	nop
 800bd8e:	370c      	adds	r7, #12
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bda0:	bf00      	nop
 800bda2:	370c      	adds	r7, #12
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d113      	bne.n	800bdf0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	695a      	ldr	r2, [r3, #20]
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bddc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	68da      	ldr	r2, [r3, #12]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bdec:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bdee:	e002      	b.n	800bdf6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800bdf0:	68f8      	ldr	r0, [r7, #12]
 800bdf2:	f7f9 f9ab 	bl	800514c <HAL_UART_TxCpltCallback>
}
 800bdf6:	bf00      	nop
 800bdf8:	3710      	adds	r7, #16
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}

0800bdfe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bdfe:	b580      	push	{r7, lr}
 800be00:	b084      	sub	sp, #16
 800be02:	af00      	add	r7, sp, #0
 800be04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be0a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800be0c:	68f8      	ldr	r0, [r7, #12]
 800be0e:	f7ff ffaf 	bl	800bd70 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be12:	bf00      	nop
 800be14:	3710      	adds	r7, #16
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}

0800be1a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800be1a:	b580      	push	{r7, lr}
 800be1c:	b084      	sub	sp, #16
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be26:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be32:	2b00      	cmp	r3, #0
 800be34:	d11e      	bne.n	800be74 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2200      	movs	r2, #0
 800be3a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	68da      	ldr	r2, [r3, #12]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800be4a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	695a      	ldr	r2, [r3, #20]
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f022 0201 	bic.w	r2, r2, #1
 800be5a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	695a      	ldr	r2, [r3, #20]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be6a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2220      	movs	r2, #32
 800be70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800be74:	68f8      	ldr	r0, [r7, #12]
 800be76:	f7f9 f9eb 	bl	8005250 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be7a:	bf00      	nop
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}

0800be82 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800be82:	b580      	push	{r7, lr}
 800be84:	b084      	sub	sp, #16
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be8e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f7ff ff77 	bl	800bd84 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be96:	bf00      	nop
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}

0800be9e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800be9e:	b580      	push	{r7, lr}
 800bea0:	b084      	sub	sp, #16
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800bea6:	2300      	movs	r3, #0
 800bea8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	695b      	ldr	r3, [r3, #20]
 800beb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beba:	2b80      	cmp	r3, #128	; 0x80
 800bebc:	bf0c      	ite	eq
 800bebe:	2301      	moveq	r3, #1
 800bec0:	2300      	movne	r3, #0
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800becc:	b2db      	uxtb	r3, r3
 800bece:	2b21      	cmp	r3, #33	; 0x21
 800bed0:	d108      	bne.n	800bee4 <UART_DMAError+0x46>
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d005      	beq.n	800bee4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	2200      	movs	r2, #0
 800bedc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800bede:	68b8      	ldr	r0, [r7, #8]
 800bee0:	f000 f827 	bl	800bf32 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	695b      	ldr	r3, [r3, #20]
 800beea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beee:	2b40      	cmp	r3, #64	; 0x40
 800bef0:	bf0c      	ite	eq
 800bef2:	2301      	moveq	r3, #1
 800bef4:	2300      	movne	r3, #0
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	2b22      	cmp	r3, #34	; 0x22
 800bf04:	d108      	bne.n	800bf18 <UART_DMAError+0x7a>
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d005      	beq.n	800bf18 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800bf12:	68b8      	ldr	r0, [r7, #8]
 800bf14:	f000 f823 	bl	800bf5e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf1c:	f043 0210 	orr.w	r2, r3, #16
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf24:	68b8      	ldr	r0, [r7, #8]
 800bf26:	f7ff ff37 	bl	800bd98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf2a:	bf00      	nop
 800bf2c:	3710      	adds	r7, #16
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}

0800bf32 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bf32:	b480      	push	{r7}
 800bf34:	b083      	sub	sp, #12
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	68da      	ldr	r2, [r3, #12]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800bf48:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2220      	movs	r2, #32
 800bf4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800bf52:	bf00      	nop
 800bf54:	370c      	adds	r7, #12
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr

0800bf5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf5e:	b480      	push	{r7}
 800bf60:	b083      	sub	sp, #12
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	68da      	ldr	r2, [r3, #12]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bf74:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	695a      	ldr	r2, [r3, #20]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f022 0201 	bic.w	r2, r2, #1
 800bf84:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2220      	movs	r2, #32
 800bf8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800bf8e:	bf00      	nop
 800bf90:	370c      	adds	r7, #12
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr

0800bf9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf9a:	b580      	push	{r7, lr}
 800bf9c:	b084      	sub	sp, #16
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bfb4:	68f8      	ldr	r0, [r7, #12]
 800bfb6:	f7ff feef 	bl	800bd98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfba:	bf00      	nop
 800bfbc:	3710      	adds	r7, #16
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}

0800bfc2 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800bfc2:	b580      	push	{r7, lr}
 800bfc4:	b084      	sub	sp, #16
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfce:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2220      	movs	r2, #32
 800bfda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800bfde:	68f8      	ldr	r0, [r7, #12]
 800bfe0:	f7f9 f9dc 	bl	800539c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfe4:	bf00      	nop
 800bfe6:	3710      	adds	r7, #16
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b085      	sub	sp, #20
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	2b21      	cmp	r3, #33	; 0x21
 800bffe:	d144      	bne.n	800c08a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c008:	d11a      	bne.n	800c040 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6a1b      	ldr	r3, [r3, #32]
 800c00e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	881b      	ldrh	r3, [r3, #0]
 800c014:	461a      	mov	r2, r3
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c01e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	691b      	ldr	r3, [r3, #16]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d105      	bne.n	800c034 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6a1b      	ldr	r3, [r3, #32]
 800c02c:	1c9a      	adds	r2, r3, #2
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	621a      	str	r2, [r3, #32]
 800c032:	e00e      	b.n	800c052 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6a1b      	ldr	r3, [r3, #32]
 800c038:	1c5a      	adds	r2, r3, #1
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	621a      	str	r2, [r3, #32]
 800c03e:	e008      	b.n	800c052 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6a1b      	ldr	r3, [r3, #32]
 800c044:	1c59      	adds	r1, r3, #1
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	6211      	str	r1, [r2, #32]
 800c04a:	781a      	ldrb	r2, [r3, #0]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c056:	b29b      	uxth	r3, r3
 800c058:	3b01      	subs	r3, #1
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	4619      	mov	r1, r3
 800c060:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c062:	2b00      	cmp	r3, #0
 800c064:	d10f      	bne.n	800c086 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	68da      	ldr	r2, [r3, #12]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c074:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	68da      	ldr	r2, [r3, #12]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c084:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c086:	2300      	movs	r3, #0
 800c088:	e000      	b.n	800c08c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c08a:	2302      	movs	r3, #2
  }
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3714      	adds	r7, #20
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	68da      	ldr	r2, [r3, #12]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2220      	movs	r2, #32
 800c0b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f7f9 f847 	bl	800514c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c0be:	2300      	movs	r3, #0
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3708      	adds	r7, #8
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	2b22      	cmp	r3, #34	; 0x22
 800c0da:	d171      	bne.n	800c1c0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0e4:	d123      	bne.n	800c12e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ea:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	691b      	ldr	r3, [r3, #16]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d10e      	bne.n	800c112 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	b29b      	uxth	r3, r3
 800c0fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c100:	b29a      	uxth	r2, r3
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c10a:	1c9a      	adds	r2, r3, #2
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	629a      	str	r2, [r3, #40]	; 0x28
 800c110:	e029      	b.n	800c166 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	b29b      	uxth	r3, r3
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	b29a      	uxth	r2, r3
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c126:	1c5a      	adds	r2, r3, #1
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	629a      	str	r2, [r3, #40]	; 0x28
 800c12c:	e01b      	b.n	800c166 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	691b      	ldr	r3, [r3, #16]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d10a      	bne.n	800c14c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	6858      	ldr	r0, [r3, #4]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c140:	1c59      	adds	r1, r3, #1
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	6291      	str	r1, [r2, #40]	; 0x28
 800c146:	b2c2      	uxtb	r2, r0
 800c148:	701a      	strb	r2, [r3, #0]
 800c14a:	e00c      	b.n	800c166 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	b2da      	uxtb	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c158:	1c58      	adds	r0, r3, #1
 800c15a:	6879      	ldr	r1, [r7, #4]
 800c15c:	6288      	str	r0, [r1, #40]	; 0x28
 800c15e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c162:	b2d2      	uxtb	r2, r2
 800c164:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	3b01      	subs	r3, #1
 800c16e:	b29b      	uxth	r3, r3
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	4619      	mov	r1, r3
 800c174:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c176:	2b00      	cmp	r3, #0
 800c178:	d120      	bne.n	800c1bc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	68da      	ldr	r2, [r3, #12]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f022 0220 	bic.w	r2, r2, #32
 800c188:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	68da      	ldr	r2, [r3, #12]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c198:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	695a      	ldr	r2, [r3, #20]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f022 0201 	bic.w	r2, r2, #1
 800c1a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2220      	movs	r2, #32
 800c1ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f7f9 f84c 	bl	8005250 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	e002      	b.n	800c1c2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	e000      	b.n	800c1c2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800c1c0:	2302      	movs	r3, #2
  }
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3710      	adds	r7, #16
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
	...

0800c1cc <__libc_init_array>:
 800c1cc:	b570      	push	{r4, r5, r6, lr}
 800c1ce:	4d0d      	ldr	r5, [pc, #52]	; (800c204 <__libc_init_array+0x38>)
 800c1d0:	4c0d      	ldr	r4, [pc, #52]	; (800c208 <__libc_init_array+0x3c>)
 800c1d2:	1b64      	subs	r4, r4, r5
 800c1d4:	10a4      	asrs	r4, r4, #2
 800c1d6:	2600      	movs	r6, #0
 800c1d8:	42a6      	cmp	r6, r4
 800c1da:	d109      	bne.n	800c1f0 <__libc_init_array+0x24>
 800c1dc:	4d0b      	ldr	r5, [pc, #44]	; (800c20c <__libc_init_array+0x40>)
 800c1de:	4c0c      	ldr	r4, [pc, #48]	; (800c210 <__libc_init_array+0x44>)
 800c1e0:	f000 f82e 	bl	800c240 <_init>
 800c1e4:	1b64      	subs	r4, r4, r5
 800c1e6:	10a4      	asrs	r4, r4, #2
 800c1e8:	2600      	movs	r6, #0
 800c1ea:	42a6      	cmp	r6, r4
 800c1ec:	d105      	bne.n	800c1fa <__libc_init_array+0x2e>
 800c1ee:	bd70      	pop	{r4, r5, r6, pc}
 800c1f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1f4:	4798      	blx	r3
 800c1f6:	3601      	adds	r6, #1
 800c1f8:	e7ee      	b.n	800c1d8 <__libc_init_array+0xc>
 800c1fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1fe:	4798      	blx	r3
 800c200:	3601      	adds	r6, #1
 800c202:	e7f2      	b.n	800c1ea <__libc_init_array+0x1e>
 800c204:	0800e184 	.word	0x0800e184
 800c208:	0800e184 	.word	0x0800e184
 800c20c:	0800e184 	.word	0x0800e184
 800c210:	0800e188 	.word	0x0800e188

0800c214 <memcpy>:
 800c214:	440a      	add	r2, r1
 800c216:	4291      	cmp	r1, r2
 800c218:	f100 33ff 	add.w	r3, r0, #4294967295
 800c21c:	d100      	bne.n	800c220 <memcpy+0xc>
 800c21e:	4770      	bx	lr
 800c220:	b510      	push	{r4, lr}
 800c222:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c226:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c22a:	4291      	cmp	r1, r2
 800c22c:	d1f9      	bne.n	800c222 <memcpy+0xe>
 800c22e:	bd10      	pop	{r4, pc}

0800c230 <memset>:
 800c230:	4402      	add	r2, r0
 800c232:	4603      	mov	r3, r0
 800c234:	4293      	cmp	r3, r2
 800c236:	d100      	bne.n	800c23a <memset+0xa>
 800c238:	4770      	bx	lr
 800c23a:	f803 1b01 	strb.w	r1, [r3], #1
 800c23e:	e7f9      	b.n	800c234 <memset+0x4>

0800c240 <_init>:
 800c240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c242:	bf00      	nop
 800c244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c246:	bc08      	pop	{r3}
 800c248:	469e      	mov	lr, r3
 800c24a:	4770      	bx	lr

0800c24c <_fini>:
 800c24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24e:	bf00      	nop
 800c250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c252:	bc08      	pop	{r3}
 800c254:	469e      	mov	lr, r3
 800c256:	4770      	bx	lr
