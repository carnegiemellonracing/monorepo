
HVC-debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b63c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e94  0800b81c  0800b81c  0001b81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d6b0  0800d6b0  0001d6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d6b8  0800d6b8  0001d6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d6bc  0800d6bc  0001d6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001bc  20000000  0800d6c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0002eea4  200001bc  0800d87c  000201bc  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2002f060  0800d87c  0002f060  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001be20  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005143  00000000  00000000  0003c00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016b0  00000000  00000000  00041150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001478  00000000  00000000  00042800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00025808  00000000  00000000  00043c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e9c4  00000000  00000000  00069480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d6a80  00000000  00000000  00087e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0015e8c4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005ae0  00000000  00000000  0015e914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001bc 	.word	0x200001bc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b804 	.word	0x0800b804

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001c0 	.word	0x200001c0
 800021c:	0800b804 	.word	0x0800b804

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2iz>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009c4:	d215      	bcs.n	80009f2 <__aeabi_d2iz+0x36>
 80009c6:	d511      	bpl.n	80009ec <__aeabi_d2iz+0x30>
 80009c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d0:	d912      	bls.n	80009f8 <__aeabi_d2iz+0x3c>
 80009d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009e2:	fa23 f002 	lsr.w	r0, r3, r2
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d105      	bne.n	8000a04 <__aeabi_d2iz+0x48>
 80009f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	bf08      	it	eq
 80009fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a02:	4770      	bx	lr
 8000a04:	f04f 0000 	mov.w	r0, #0
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b974 	b.w	8000d0c <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	4604      	mov	r4, r0
 8000a44:	468e      	mov	lr, r1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d14d      	bne.n	8000ae6 <__udivmoddi4+0xaa>
 8000a4a:	428a      	cmp	r2, r1
 8000a4c:	4694      	mov	ip, r2
 8000a4e:	d969      	bls.n	8000b24 <__udivmoddi4+0xe8>
 8000a50:	fab2 f282 	clz	r2, r2
 8000a54:	b152      	cbz	r2, 8000a6c <__udivmoddi4+0x30>
 8000a56:	fa01 f302 	lsl.w	r3, r1, r2
 8000a5a:	f1c2 0120 	rsb	r1, r2, #32
 8000a5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a66:	ea41 0e03 	orr.w	lr, r1, r3
 8000a6a:	4094      	lsls	r4, r2
 8000a6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a70:	0c21      	lsrs	r1, r4, #16
 8000a72:	fbbe f6f8 	udiv	r6, lr, r8
 8000a76:	fa1f f78c 	uxth.w	r7, ip
 8000a7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a82:	fb06 f107 	mul.w	r1, r6, r7
 8000a86:	4299      	cmp	r1, r3
 8000a88:	d90a      	bls.n	8000aa0 <__udivmoddi4+0x64>
 8000a8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a92:	f080 811f 	bcs.w	8000cd4 <__udivmoddi4+0x298>
 8000a96:	4299      	cmp	r1, r3
 8000a98:	f240 811c 	bls.w	8000cd4 <__udivmoddi4+0x298>
 8000a9c:	3e02      	subs	r6, #2
 8000a9e:	4463      	add	r3, ip
 8000aa0:	1a5b      	subs	r3, r3, r1
 8000aa2:	b2a4      	uxth	r4, r4
 8000aa4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab0:	fb00 f707 	mul.w	r7, r0, r7
 8000ab4:	42a7      	cmp	r7, r4
 8000ab6:	d90a      	bls.n	8000ace <__udivmoddi4+0x92>
 8000ab8:	eb1c 0404 	adds.w	r4, ip, r4
 8000abc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac0:	f080 810a 	bcs.w	8000cd8 <__udivmoddi4+0x29c>
 8000ac4:	42a7      	cmp	r7, r4
 8000ac6:	f240 8107 	bls.w	8000cd8 <__udivmoddi4+0x29c>
 8000aca:	4464      	add	r4, ip
 8000acc:	3802      	subs	r0, #2
 8000ace:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ad2:	1be4      	subs	r4, r4, r7
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	b11d      	cbz	r5, 8000ae0 <__udivmoddi4+0xa4>
 8000ad8:	40d4      	lsrs	r4, r2
 8000ada:	2300      	movs	r3, #0
 8000adc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d909      	bls.n	8000afe <__udivmoddi4+0xc2>
 8000aea:	2d00      	cmp	r5, #0
 8000aec:	f000 80ef 	beq.w	8000cce <__udivmoddi4+0x292>
 8000af0:	2600      	movs	r6, #0
 8000af2:	e9c5 0100 	strd	r0, r1, [r5]
 8000af6:	4630      	mov	r0, r6
 8000af8:	4631      	mov	r1, r6
 8000afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afe:	fab3 f683 	clz	r6, r3
 8000b02:	2e00      	cmp	r6, #0
 8000b04:	d14a      	bne.n	8000b9c <__udivmoddi4+0x160>
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d302      	bcc.n	8000b10 <__udivmoddi4+0xd4>
 8000b0a:	4282      	cmp	r2, r0
 8000b0c:	f200 80f9 	bhi.w	8000d02 <__udivmoddi4+0x2c6>
 8000b10:	1a84      	subs	r4, r0, r2
 8000b12:	eb61 0303 	sbc.w	r3, r1, r3
 8000b16:	2001      	movs	r0, #1
 8000b18:	469e      	mov	lr, r3
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d0e0      	beq.n	8000ae0 <__udivmoddi4+0xa4>
 8000b1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b22:	e7dd      	b.n	8000ae0 <__udivmoddi4+0xa4>
 8000b24:	b902      	cbnz	r2, 8000b28 <__udivmoddi4+0xec>
 8000b26:	deff      	udf	#255	; 0xff
 8000b28:	fab2 f282 	clz	r2, r2
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	f040 8092 	bne.w	8000c56 <__udivmoddi4+0x21a>
 8000b32:	eba1 010c 	sub.w	r1, r1, ip
 8000b36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3a:	fa1f fe8c 	uxth.w	lr, ip
 8000b3e:	2601      	movs	r6, #1
 8000b40:	0c20      	lsrs	r0, r4, #16
 8000b42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b46:	fb07 1113 	mls	r1, r7, r3, r1
 8000b4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b4e:	fb0e f003 	mul.w	r0, lr, r3
 8000b52:	4288      	cmp	r0, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x12c>
 8000b56:	eb1c 0101 	adds.w	r1, ip, r1
 8000b5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x12a>
 8000b60:	4288      	cmp	r0, r1
 8000b62:	f200 80cb 	bhi.w	8000cfc <__udivmoddi4+0x2c0>
 8000b66:	4643      	mov	r3, r8
 8000b68:	1a09      	subs	r1, r1, r0
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b70:	fb07 1110 	mls	r1, r7, r0, r1
 8000b74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b78:	fb0e fe00 	mul.w	lr, lr, r0
 8000b7c:	45a6      	cmp	lr, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x156>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x154>
 8000b8a:	45a6      	cmp	lr, r4
 8000b8c:	f200 80bb 	bhi.w	8000d06 <__udivmoddi4+0x2ca>
 8000b90:	4608      	mov	r0, r1
 8000b92:	eba4 040e 	sub.w	r4, r4, lr
 8000b96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b9a:	e79c      	b.n	8000ad6 <__udivmoddi4+0x9a>
 8000b9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ba0:	40b3      	lsls	r3, r6
 8000ba2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ba6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000baa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bae:	fa01 f306 	lsl.w	r3, r1, r6
 8000bb2:	431c      	orrs	r4, r3
 8000bb4:	40f9      	lsrs	r1, r7
 8000bb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bba:	fa00 f306 	lsl.w	r3, r0, r6
 8000bbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bc2:	0c20      	lsrs	r0, r4, #16
 8000bc4:	fa1f fe8c 	uxth.w	lr, ip
 8000bc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000bd4:	4288      	cmp	r0, r1
 8000bd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bda:	d90b      	bls.n	8000bf4 <__udivmoddi4+0x1b8>
 8000bdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000be0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000be4:	f080 8088 	bcs.w	8000cf8 <__udivmoddi4+0x2bc>
 8000be8:	4288      	cmp	r0, r1
 8000bea:	f240 8085 	bls.w	8000cf8 <__udivmoddi4+0x2bc>
 8000bee:	f1a8 0802 	sub.w	r8, r8, #2
 8000bf2:	4461      	add	r1, ip
 8000bf4:	1a09      	subs	r1, r1, r0
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000c00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c08:	458e      	cmp	lr, r1
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x1e2>
 8000c0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c14:	d26c      	bcs.n	8000cf0 <__udivmoddi4+0x2b4>
 8000c16:	458e      	cmp	lr, r1
 8000c18:	d96a      	bls.n	8000cf0 <__udivmoddi4+0x2b4>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4461      	add	r1, ip
 8000c1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c22:	fba0 9402 	umull	r9, r4, r0, r2
 8000c26:	eba1 010e 	sub.w	r1, r1, lr
 8000c2a:	42a1      	cmp	r1, r4
 8000c2c:	46c8      	mov	r8, r9
 8000c2e:	46a6      	mov	lr, r4
 8000c30:	d356      	bcc.n	8000ce0 <__udivmoddi4+0x2a4>
 8000c32:	d053      	beq.n	8000cdc <__udivmoddi4+0x2a0>
 8000c34:	b15d      	cbz	r5, 8000c4e <__udivmoddi4+0x212>
 8000c36:	ebb3 0208 	subs.w	r2, r3, r8
 8000c3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c42:	fa22 f306 	lsr.w	r3, r2, r6
 8000c46:	40f1      	lsrs	r1, r6
 8000c48:	431f      	orrs	r7, r3
 8000c4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c4e:	2600      	movs	r6, #0
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	40d8      	lsrs	r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	fa21 f303 	lsr.w	r3, r1, r3
 8000c64:	4091      	lsls	r1, r2
 8000c66:	4301      	orrs	r1, r0
 8000c68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6c:	fa1f fe8c 	uxth.w	lr, ip
 8000c70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c74:	fb07 3610 	mls	r6, r7, r0, r3
 8000c78:	0c0b      	lsrs	r3, r1, #16
 8000c7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c82:	429e      	cmp	r6, r3
 8000c84:	fa04 f402 	lsl.w	r4, r4, r2
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x260>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c92:	d22f      	bcs.n	8000cf4 <__udivmoddi4+0x2b8>
 8000c94:	429e      	cmp	r6, r3
 8000c96:	d92d      	bls.n	8000cf4 <__udivmoddi4+0x2b8>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	b289      	uxth	r1, r1
 8000ca0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ca4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ca8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cac:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb0:	428b      	cmp	r3, r1
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x28a>
 8000cb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cbc:	d216      	bcs.n	8000cec <__udivmoddi4+0x2b0>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d914      	bls.n	8000cec <__udivmoddi4+0x2b0>
 8000cc2:	3e02      	subs	r6, #2
 8000cc4:	4461      	add	r1, ip
 8000cc6:	1ac9      	subs	r1, r1, r3
 8000cc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ccc:	e738      	b.n	8000b40 <__udivmoddi4+0x104>
 8000cce:	462e      	mov	r6, r5
 8000cd0:	4628      	mov	r0, r5
 8000cd2:	e705      	b.n	8000ae0 <__udivmoddi4+0xa4>
 8000cd4:	4606      	mov	r6, r0
 8000cd6:	e6e3      	b.n	8000aa0 <__udivmoddi4+0x64>
 8000cd8:	4618      	mov	r0, r3
 8000cda:	e6f8      	b.n	8000ace <__udivmoddi4+0x92>
 8000cdc:	454b      	cmp	r3, r9
 8000cde:	d2a9      	bcs.n	8000c34 <__udivmoddi4+0x1f8>
 8000ce0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ce4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ce8:	3801      	subs	r0, #1
 8000cea:	e7a3      	b.n	8000c34 <__udivmoddi4+0x1f8>
 8000cec:	4646      	mov	r6, r8
 8000cee:	e7ea      	b.n	8000cc6 <__udivmoddi4+0x28a>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	e794      	b.n	8000c1e <__udivmoddi4+0x1e2>
 8000cf4:	4640      	mov	r0, r8
 8000cf6:	e7d1      	b.n	8000c9c <__udivmoddi4+0x260>
 8000cf8:	46d0      	mov	r8, sl
 8000cfa:	e77b      	b.n	8000bf4 <__udivmoddi4+0x1b8>
 8000cfc:	3b02      	subs	r3, #2
 8000cfe:	4461      	add	r1, ip
 8000d00:	e732      	b.n	8000b68 <__udivmoddi4+0x12c>
 8000d02:	4630      	mov	r0, r6
 8000d04:	e709      	b.n	8000b1a <__udivmoddi4+0xde>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	e742      	b.n	8000b92 <__udivmoddi4+0x156>

08000d0c <__aeabi_idiv0>:
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <adcOutputToVoltage>:
// Counter for how many times until we flash the LED
static const uint8_t LED_FLASH_COUNT = 50;
static uint8_t BMBFlashCounter = 0;

//takes in adc output and cell index to get voltage value
static int16_t adcOutputToVoltage(uint16_t ADC_val, int cell) {
 8000d10:	b5b0      	push	{r4, r5, r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	80fb      	strh	r3, [r7, #6]
	return ((ADC_val / 1023.0) * 4096) * resistorRatios[cell];
 8000d1c:	88fb      	ldrh	r3, [r7, #6]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fbd0 	bl	80004c4 <__aeabi_i2d>
 8000d24:	a318      	add	r3, pc, #96	; (adr r3, 8000d88 <adcOutputToVoltage+0x78>)
 8000d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2a:	f7ff fd5f 	bl	80007ec <__aeabi_ddiv>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	460b      	mov	r3, r1
 8000d32:	4610      	mov	r0, r2
 8000d34:	4619      	mov	r1, r3
 8000d36:	f04f 0200 	mov.w	r2, #0
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <adcOutputToVoltage+0x70>)
 8000d3c:	f7ff fc2c 	bl	8000598 <__aeabi_dmul>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	4614      	mov	r4, r2
 8000d46:	461d      	mov	r5, r3
 8000d48:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <adcOutputToVoltage+0x74>)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fbc8 	bl	80004e8 <__aeabi_f2d>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4620      	mov	r0, r4
 8000d5e:	4629      	mov	r1, r5
 8000d60:	f7ff fc1a 	bl	8000598 <__aeabi_dmul>
 8000d64:	4602      	mov	r2, r0
 8000d66:	460b      	mov	r3, r1
 8000d68:	4610      	mov	r0, r2
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f7ff fe26 	bl	80009bc <__aeabi_d2iz>
 8000d70:	4603      	mov	r3, r0
 8000d72:	b21b      	sxth	r3, r3
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d7c:	f3af 8000 	nop.w
 8000d80:	40b00000 	.word	0x40b00000
 8000d84:	0800d558 	.word	0x0800d558
 8000d88:	00000000 	.word	0x00000000
 8000d8c:	408ff800 	.word	0x408ff800

08000d90 <lutTemp>:

// Returns temperature in 1/10th degC given ADC
// using LUT interpolation from the transfer function.
// See drive doc "18e CMR BMS Temperature Math" for LUT
static int16_t lutTemp(uint16_t ADC_lt) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b096      	sub	sp, #88	; 0x58
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	80fb      	strh	r3, [r7, #6]
	const uint8_t LUT_SIZE = 18;
 8000d9a:	2312      	movs	r3, #18
 8000d9c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	const uint16_t lut[18][2] = { { 8802, 850 }, { 9930, 800 }, { 11208, 750 },
 8000da0:	4a48      	ldr	r2, [pc, #288]	; (8000ec4 <lutTemp+0x134>)
 8000da2:	f107 0308 	add.w	r3, r7, #8
 8000da6:	4611      	mov	r1, r2
 8000da8:	2248      	movs	r2, #72	; 0x48
 8000daa:	4618      	mov	r0, r3
 8000dac:	f00a fd14 	bl	800b7d8 <memcpy>
			{ 28459, 350 }, { 31533, 300 }, { 34744, 250 }, { 38019, 200 }, {
					41331, 150 }, { 44621, 100 }, { 47792, 50 }, { 50833, 0 }, };

	// Check if input is out of LUT bounds
	// If so, return the boundary values
	if (ADC_lt < lut[0][0]) {
 8000db0:	893b      	ldrh	r3, [r7, #8]
 8000db2:	88fa      	ldrh	r2, [r7, #6]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d202      	bcs.n	8000dbe <lutTemp+0x2e>
		return lut[0][1];
 8000db8:	897b      	ldrh	r3, [r7, #10]
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	e07d      	b.n	8000eba <lutTemp+0x12a>
	}
	if (ADC_lt > lut[LUT_SIZE - 1][0]) {
 8000dbe:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	3358      	adds	r3, #88	; 0x58
 8000dc8:	443b      	add	r3, r7
 8000dca:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8000dce:	88fa      	ldrh	r2, [r7, #6]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d909      	bls.n	8000de8 <lutTemp+0x58>
		return lut[LUT_SIZE - 1][1];
 8000dd4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	3358      	adds	r3, #88	; 0x58
 8000dde:	443b      	add	r3, r7
 8000de0:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	e068      	b.n	8000eba <lutTemp+0x12a>
	}

	// Modified LUT linear interpolation code from stack overflow
	uint8_t i;
	for (i = 0; i < LUT_SIZE - 1; ++i) {
 8000de8:	2300      	movs	r3, #0
 8000dea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000dee:	e05b      	b.n	8000ea8 <lutTemp+0x118>
		if (lut[i][0] <= ADC_lt && lut[i + 1][0] >= ADC_lt) {
 8000df0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	3358      	adds	r3, #88	; 0x58
 8000df8:	443b      	add	r3, r7
 8000dfa:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8000dfe:	88fa      	ldrh	r2, [r7, #6]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d34c      	bcc.n	8000e9e <lutTemp+0x10e>
 8000e04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e08:	3301      	adds	r3, #1
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	3358      	adds	r3, #88	; 0x58
 8000e0e:	443b      	add	r3, r7
 8000e10:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8000e14:	88fa      	ldrh	r2, [r7, #6]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d841      	bhi.n	8000e9e <lutTemp+0x10e>
			// Target value is between two LUT points
			uint16_t diffADC = ADC_lt - lut[i][0];
 8000e1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	3358      	adds	r3, #88	; 0x58
 8000e22:	443b      	add	r3, r7
 8000e24:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8000e28:	88fa      	ldrh	r2, [r7, #6]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			uint16_t diffLUT = lut[i + 1][0] - lut[i][0];
 8000e30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e34:	3301      	adds	r3, #1
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	3358      	adds	r3, #88	; 0x58
 8000e3a:	443b      	add	r3, r7
 8000e3c:	f833 2c50 	ldrh.w	r2, [r3, #-80]
 8000e40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	3358      	adds	r3, #88	; 0x58
 8000e48:	443b      	add	r3, r7
 8000e4a:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

			return lut[i][1] + ((lut[i + 1][1] - lut[i][1]) * diffADC) / diffLUT;
 8000e54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	3358      	adds	r3, #88	; 0x58
 8000e5c:	443b      	add	r3, r7
 8000e5e:	f833 2c4e 	ldrh.w	r2, [r3, #-78]
 8000e62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e66:	3301      	adds	r3, #1
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	3358      	adds	r3, #88	; 0x58
 8000e6c:	443b      	add	r3, r7
 8000e6e:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
 8000e72:	4619      	mov	r1, r3
 8000e74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	3358      	adds	r3, #88	; 0x58
 8000e7c:	443b      	add	r3, r7
 8000e7e:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
 8000e82:	1acb      	subs	r3, r1, r3
 8000e84:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 8000e88:	fb03 f101 	mul.w	r1, r3, r1
 8000e8c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000e90:	fb91 f3f3 	sdiv	r3, r1, r3
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	4413      	add	r3, r2
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	e00d      	b.n	8000eba <lutTemp+0x12a>
	for (i = 0; i < LUT_SIZE - 1; ++i) {
 8000e9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000ea8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000eac:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	db9c      	blt.n	8000df0 <lutTemp+0x60>
		}
	}

	// Something went wrong, return max temp
	return 850;
 8000eb6:	f240 3352 	movw	r3, #850	; 0x352
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3758      	adds	r7, #88	; 0x58
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	0800b81c 	.word	0x0800b81c

08000ec8 <updateBMBData>:


//update corresponding voltage or temperature reading
void updateBMBData(uint16_t val, uint8_t adcChannel, uint8_t muxChannel, uint8_t bmb) {
 8000ec8:	b5b0      	push	{r4, r5, r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4604      	mov	r4, r0
 8000ed0:	4608      	mov	r0, r1
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	80fb      	strh	r3, [r7, #6]
 8000eda:	4603      	mov	r3, r0
 8000edc:	717b      	strb	r3, [r7, #5]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	713b      	strb	r3, [r7, #4]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	70fb      	strb	r3, [r7, #3]
	ADC_Mux_Channel_t indexToUpdate = ADCChannelLookupArr[adcChannel][muxChannel];
 8000ee6:	797a      	ldrb	r2, [r7, #5]
 8000ee8:	793b      	ldrb	r3, [r7, #4]
 8000eea:	492b      	ldr	r1, [pc, #172]	; (8000f98 <updateBMBData+0xd0>)
 8000eec:	0092      	lsls	r2, r2, #2
 8000eee:	440a      	add	r2, r1
 8000ef0:	4413      	add	r3, r2
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	73fb      	strb	r3, [r7, #15]
	if(indexToUpdate <= CELL9) {
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2b08      	cmp	r3, #8
 8000efa:	d82e      	bhi.n	8000f5a <updateBMBData+0x92>
		int16_t voltage = adcOutputToVoltage(val, indexToUpdate);
 8000efc:	7bfa      	ldrb	r2, [r7, #15]
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	4611      	mov	r1, r2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff04 	bl	8000d10 <adcOutputToVoltage>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	81bb      	strh	r3, [r7, #12]
		if (indexToUpdate == CELL1) {
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10a      	bne.n	8000f28 <updateBMBData+0x60>
		    BMBData[bmb].cellVoltages[0] = voltage;
 8000f12:	78fa      	ldrb	r2, [r7, #3]
 8000f14:	89b8      	ldrh	r0, [r7, #12]
 8000f16:	4921      	ldr	r1, [pc, #132]	; (8000f9c <updateBMBData+0xd4>)
 8000f18:	4613      	mov	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	011b      	lsls	r3, r3, #4
 8000f20:	440b      	add	r3, r1
 8000f22:	4602      	mov	r2, r0
 8000f24:	801a      	strh	r2, [r3, #0]
 8000f26:	e018      	b.n	8000f5a <updateBMBData+0x92>
        } else {
            BMBData[bmb].cellVoltages[indexToUpdate] = voltage - BMBData[bmb].cellVoltages[indexToUpdate - 1];
 8000f28:	89b8      	ldrh	r0, [r7, #12]
 8000f2a:	78fa      	ldrb	r2, [r7, #3]
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	1e59      	subs	r1, r3, #1
 8000f30:	4c1a      	ldr	r4, [pc, #104]	; (8000f9c <updateBMBData+0xd4>)
 8000f32:	4613      	mov	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4413      	add	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8000f40:	78fa      	ldrb	r2, [r7, #3]
 8000f42:	7bf9      	ldrb	r1, [r7, #15]
 8000f44:	1ac3      	subs	r3, r0, r3
 8000f46:	b29c      	uxth	r4, r3
 8000f48:	4814      	ldr	r0, [pc, #80]	; (8000f9c <updateBMBData+0xd4>)
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4413      	add	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	440b      	add	r3, r1
 8000f54:	4622      	mov	r2, r4
 8000f56:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        }
	}
	if(CELL9 < indexToUpdate && indexToUpdate <= THERM15) {
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	2b08      	cmp	r3, #8
 8000f5e:	d917      	bls.n	8000f90 <updateBMBData+0xc8>
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	2b17      	cmp	r3, #23
 8000f64:	d814      	bhi.n	8000f90 <updateBMBData+0xc8>
		BMBData[bmb].cellTemperatures[indexToUpdate - THERM1] = lutTemp(val);
 8000f66:	78fc      	ldrb	r4, [r7, #3]
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	f1a3 0509 	sub.w	r5, r3, #9
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff0d 	bl	8000d90 <lutTemp>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4a08      	ldr	r2, [pc, #32]	; (8000f9c <updateBMBData+0xd4>)
 8000f7c:	4623      	mov	r3, r4
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4423      	add	r3, r4
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	442b      	add	r3, r5
 8000f86:	3308      	adds	r3, #8
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	805a      	strh	r2, [r3, #2]
	}
}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bdb0      	pop	{r4, r5, r7, pc}
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	200001d8 	.word	0x200001d8

08000fa0 <BMBInit>:
	for (int i = 0; i < NUM_BMBS; i++) {
		BMBTimeoutCount[i] = BMB_TIMEOUT;
	}
}

void BMBInit() {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
	// Period
	const TickType_t xPeriod = 1000 / BMB_SAMPLE_TASK_RATE;		// In ticks (ms)
 8000fa6:	2364      	movs	r3, #100	; 0x64
 8000fa8:	607b      	str	r3, [r7, #4]
	if (!i2cInit()) {
 8000faa:	f000 feed 	bl	8001d88 <i2cInit>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f083 0301 	eor.w	r3, r3, #1
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d002      	beq.n	8000fc0 <BMBInit+0x20>
		cmr_panic("Couldn't initialize I2C BMB Chain");
 8000fba:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <BMBInit+0x28>)
 8000fbc:	f002 ffbb 	bl	8003f36 <cmr_panic>
	}
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	0800b864 	.word	0x0800b864

08000fcc <sampleOneBMB>:

bool sampleOneBMB(uint8_t BMBIndex, uint8_t BMBNum, uint8_t BMBSide) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	71bb      	strb	r3, [r7, #6]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	717b      	strb	r3, [r7, #5]
    if (!i2c_enableI2CMux(BMBNum, BMBSide)) {
 8000fde:	797a      	ldrb	r2, [r7, #5]
 8000fe0:	79bb      	ldrb	r3, [r7, #6]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 ff5f 	bl	8001ea8 <i2c_enableI2CMux>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f083 0301 	eor.w	r3, r3, #1
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d009      	beq.n	800100a <sampleOneBMB+0x3e>
    	BMBTimeoutCount[BMBIndex]++;
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	4a3b      	ldr	r2, [pc, #236]	; (80010e8 <sampleOneBMB+0x11c>)
 8000ffa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ffe:	3201      	adds	r2, #1
 8001000:	4939      	ldr	r1, [pc, #228]	; (80010e8 <sampleOneBMB+0x11c>)
 8001002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        return false;
 8001006:	2300      	movs	r3, #0
 8001008:	e06a      	b.n	80010e0 <sampleOneBMB+0x114>
    }
    //select through each of the mux channels
    for (int channel = 0; channel < NUM_MUX_CHANNELS; channel++) {
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	e02e      	b.n	800106e <sampleOneBMB+0xa2>
        if (!i2c_select4MuxChannel(channel)) {
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f000 ffd5 	bl	8001fc4 <i2c_select4MuxChannel>
 800101a:	4603      	mov	r3, r0
 800101c:	f083 0301 	eor.w	r3, r3, #1
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d009      	beq.n	800103a <sampleOneBMB+0x6e>
        	BMBTimeoutCount[BMBIndex]++;
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	4a2f      	ldr	r2, [pc, #188]	; (80010e8 <sampleOneBMB+0x11c>)
 800102a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800102e:	3201      	adds	r2, #1
 8001030:	492d      	ldr	r1, [pc, #180]	; (80010e8 <sampleOneBMB+0x11c>)
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            return false;
 8001036:	2300      	movs	r3, #0
 8001038:	e052      	b.n	80010e0 <sampleOneBMB+0x114>
        }
        // through each channel, input 8 adc channels
        if (!i2c_scanADC(BMBADCResponse[channel])) {
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	4a2b      	ldr	r2, [pc, #172]	; (80010ec <sampleOneBMB+0x120>)
 8001040:	4413      	add	r3, r2
 8001042:	4618      	mov	r0, r3
 8001044:	f001 f83e 	bl	80020c4 <i2c_scanADC>
 8001048:	4603      	mov	r3, r0
 800104a:	f083 0301 	eor.w	r3, r3, #1
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d009      	beq.n	8001068 <sampleOneBMB+0x9c>
        	BMBTimeoutCount[BMBIndex]++;
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	4a24      	ldr	r2, [pc, #144]	; (80010e8 <sampleOneBMB+0x11c>)
 8001058:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800105c:	3201      	adds	r2, #1
 800105e:	4922      	ldr	r1, [pc, #136]	; (80010e8 <sampleOneBMB+0x11c>)
 8001060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            return false;
 8001064:	2300      	movs	r3, #0
 8001066:	e03b      	b.n	80010e0 <sampleOneBMB+0x114>
    for (int channel = 0; channel < NUM_MUX_CHANNELS; channel++) {
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	3301      	adds	r3, #1
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2b03      	cmp	r3, #3
 8001072:	ddcd      	ble.n	8001010 <sampleOneBMB+0x44>
        }
    }
    // increment the counter or reset if we just flashed
    if (BMBFlashCounter >= LED_FLASH_COUNT) {
 8001074:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <sampleOneBMB+0x124>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2232      	movs	r2, #50	; 0x32
 800107a:	4293      	cmp	r3, r2
 800107c:	d315      	bcc.n	80010aa <sampleOneBMB+0xde>
        // we got to threshold, blink this BMB
        if (!i2c_selectMuxBlink()) {
 800107e:	f000 ffcf 	bl	8002020 <i2c_selectMuxBlink>
 8001082:	4603      	mov	r3, r0
 8001084:	f083 0301 	eor.w	r3, r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d009      	beq.n	80010a2 <sampleOneBMB+0xd6>
        	BMBTimeoutCount[BMBIndex]++;
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	4a15      	ldr	r2, [pc, #84]	; (80010e8 <sampleOneBMB+0x11c>)
 8001092:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001096:	3201      	adds	r2, #1
 8001098:	4913      	ldr	r1, [pc, #76]	; (80010e8 <sampleOneBMB+0x11c>)
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            return false;
 800109e:	2300      	movs	r3, #0
 80010a0:	e01e      	b.n	80010e0 <sampleOneBMB+0x114>
        }
        BMBFlashCounter = 0;
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <sampleOneBMB+0x124>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
 80010a8:	e005      	b.n	80010b6 <sampleOneBMB+0xea>
    } else {
        BMBFlashCounter++;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <sampleOneBMB+0x124>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	3301      	adds	r3, #1
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <sampleOneBMB+0x124>)
 80010b4:	701a      	strb	r2, [r3, #0]
    }
    if (!(i2c_disableI2CMux(BMBIndex))) {
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 ff49 	bl	8001f50 <i2c_disableI2CMux>
 80010be:	4603      	mov	r3, r0
 80010c0:	f083 0301 	eor.w	r3, r3, #1
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d009      	beq.n	80010de <sampleOneBMB+0x112>
    	BMBTimeoutCount[BMBIndex]++;
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <sampleOneBMB+0x11c>)
 80010ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010d2:	3201      	adds	r2, #1
 80010d4:	4904      	ldr	r1, [pc, #16]	; (80010e8 <sampleOneBMB+0x11c>)
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        return false;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <sampleOneBMB+0x114>
    }
    return true;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2000557c 	.word	0x2000557c
 80010ec:	20000208 	.word	0x20000208
 80010f0:	20000248 	.word	0x20000248

080010f4 <calculateOneBMB>:
	}
}

// calculate all the values for a single BMB
// this does converting to voltage, converting to temp, calculating avg
void calculateOneBMB(uint8_t BMBIndex) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
    for(int mux = 0; mux < NUM_MUX_CHANNELS; mux++) {
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	e01a      	b.n	800113a <calculateOneBMB+0x46>
        for(int adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 8001104:	2300      	movs	r3, #0
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	e011      	b.n	800112e <calculateOneBMB+0x3a>
            // convert each bmb response to voltage or temperature
            updateBMBData(BMBADCResponse[mux][adc], adc, mux, BMBIndex);
 800110a:	4910      	ldr	r1, [pc, #64]	; (800114c <calculateOneBMB+0x58>)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	00da      	lsls	r2, r3, #3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4413      	add	r3, r2
 8001114:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001118:	b298      	uxth	r0, r3
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	b2d9      	uxtb	r1, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	f7ff fed0 	bl	8000ec8 <updateBMBData>
        for(int adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	3301      	adds	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	2b07      	cmp	r3, #7
 8001132:	ddea      	ble.n	800110a <calculateOneBMB+0x16>
    for(int mux = 0; mux < NUM_MUX_CHANNELS; mux++) {
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	3301      	adds	r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2b03      	cmp	r3, #3
 800113e:	dde1      	ble.n	8001104 <calculateOneBMB+0x10>
        }
    }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000208 	.word	0x20000208

08001150 <vBMBSampleTask>:


void vBMBSampleTask(void *pvParameters) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

	BMBInit();
 8001158:	f7ff ff22 	bl	8000fa0 <BMBInit>

	// Previous wake time pointer
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800115c:	f004 fb94 	bl	8005888 <xTaskGetTickCount>
 8001160:	4603      	mov	r3, r0
 8001162:	60bb      	str	r3, [r7, #8]
	vTaskDelayUntil(&xLastWakeTime, 50);
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	2132      	movs	r1, #50	; 0x32
 800116a:	4618      	mov	r0, r3
 800116c:	f004 fa16 	bl	800559c <vTaskDelayUntil>

	while (1) {
		for (uint8_t BMBIndex = 0; BMBIndex < 1; BMBIndex++) {//TODO: Change back to BMBIndex < NUM_BMBS
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e03c      	b.n	80011f0 <vBMBSampleTask+0xa0>
			//since we treat each BMB side as an individual bmb
			//we just check whether the current bmb index is odd/even
			//uint8_t BMBSide = BMBIndex % 2;
			uint8_t BMBSide = 1; // TODO: CHANGE THIS BACKs
 8001176:	2301      	movs	r3, #1
 8001178:	73bb      	strb	r3, [r7, #14]
			// our actual BMB number, the physical board
			//uint8_t BMBNum = BMBIndex / 2;
			uint8_t BMBNum = 0; // TODO: Change back
 800117a:	2300      	movs	r3, #0
 800117c:	737b      	strb	r3, [r7, #13]

			//Sample BMBs
			// Get interesting crashes in list.c:192 with critical
			//taskENTER_CRITICAL();
			// Sample a single BMB (number and side fully)
			if (!sampleOneBMB(0, BMBNum, BMBSide)) {
 800117e:	7bba      	ldrb	r2, [r7, #14]
 8001180:	7b7b      	ldrb	r3, [r7, #13]
 8001182:	4619      	mov	r1, r3
 8001184:	2000      	movs	r0, #0
 8001186:	f7ff ff21 	bl	8000fcc <sampleOneBMB>
 800118a:	4603      	mov	r3, r0
 800118c:	f083 0301 	eor.w	r3, r3, #1
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d019      	beq.n	80011ca <vBMBSampleTask+0x7a>
				// there was an error, so reset mux
				BMBTimeoutCount[BMBIndex]++;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	4a1a      	ldr	r2, [pc, #104]	; (8001204 <vBMBSampleTask+0xb4>)
 800119a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800119e:	3201      	adds	r2, #1
 80011a0:	4918      	ldr	r1, [pc, #96]	; (8001204 <vBMBSampleTask+0xb4>)
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (!(i2c_disableI2CMux(0))) {
 80011a6:	2000      	movs	r0, #0
 80011a8:	f000 fed2 	bl	8001f50 <i2c_disableI2CMux>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f083 0301 	eor.w	r3, r3, #1
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00d      	beq.n	80011d4 <vBMBSampleTask+0x84>
					BMBTimeoutCount[BMBIndex]++;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <vBMBSampleTask+0xb4>)
 80011bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011c0:	3201      	adds	r2, #1
 80011c2:	4910      	ldr	r1, [pc, #64]	; (8001204 <vBMBSampleTask+0xb4>)
 80011c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80011c8:	e004      	b.n	80011d4 <vBMBSampleTask+0x84>
				}
			} else {
				BMBTimeoutCount[BMBIndex] = 0;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <vBMBSampleTask+0xb4>)
 80011ce:	2100      	movs	r1, #0
 80011d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			//taskEXIT_CRITICAL();

			if(BMBTimeoutCount[BMBIndex] != 0) {
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <vBMBSampleTask+0xb4>)
 80011d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d103      	bne.n	80011e8 <vBMBSampleTask+0x98>
				// we had a timeout, continue onto next BMB
				continue;
			}

			// Calculate the values for this BMB
			calculateOneBMB(0);
 80011e0:	2000      	movs	r0, #0
 80011e2:	f7ff ff87 	bl	80010f4 <calculateOneBMB>
 80011e6:	e000      	b.n	80011ea <vBMBSampleTask+0x9a>
				continue;
 80011e8:	bf00      	nop
		for (uint8_t BMBIndex = 0; BMBIndex < 1; BMBIndex++) {//TODO: Change back to BMBIndex < NUM_BMBS
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	3301      	adds	r3, #1
 80011ee:	73fb      	strb	r3, [r7, #15]
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0bf      	beq.n	8001176 <vBMBSampleTask+0x26>
			//doCellBalanceOneBMB(BMBIndex);

		} // end for loop
		//doCellBalanceAllBMBs();
		//TickType_t temp = xTaskGetTickCount();
		vTaskDelayUntil(&xLastWakeTime, 5);
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	2105      	movs	r1, #5
 80011fc:	4618      	mov	r0, r3
 80011fe:	f004 f9cd 	bl	800559c <vTaskDelayUntil>
		for (uint8_t BMBIndex = 0; BMBIndex < 1; BMBIndex++) {//TODO: Change back to BMBIndex < NUM_BMBS
 8001202:	e7b5      	b.n	8001170 <vBMBSampleTask+0x20>
 8001204:	2000557c 	.word	0x2000557c

08001208 <getBMBMaxTempIndex>:
static int16_t linearTemp(uint16_t ADC_lt) {
	return (int16_t) ((-2 * ((int32_t) (uint32_t) ADC_lt)) / 117 + 860);
}

// Lookup functions
uint8_t getBMBMaxTempIndex(uint8_t bmb_index) {
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
	int16_t maxTemp = 0xFFFF;
 8001212:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001216:	81fb      	strh	r3, [r7, #14]
	uint8_t cell_index = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < TSENSE_CHANNELS_PER_BMB; i++) {
 800121c:	2300      	movs	r3, #0
 800121e:	733b      	strb	r3, [r7, #12]
 8001220:	e019      	b.n	8001256 <getBMBMaxTempIndex+0x4e>
		int16_t temp = BMBData[bmb_index].cellTemperatures[i];
 8001222:	79fa      	ldrb	r2, [r7, #7]
 8001224:	7b39      	ldrb	r1, [r7, #12]
 8001226:	4811      	ldr	r0, [pc, #68]	; (800126c <getBMBMaxTempIndex+0x64>)
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	440b      	add	r3, r1
 8001232:	3308      	adds	r3, #8
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4403      	add	r3, r0
 8001238:	885b      	ldrh	r3, [r3, #2]
 800123a:	817b      	strh	r3, [r7, #10]
		if (temp > maxTemp) {
 800123c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001240:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001244:	429a      	cmp	r2, r3
 8001246:	dd03      	ble.n	8001250 <getBMBMaxTempIndex+0x48>
			maxTemp = temp;
 8001248:	897b      	ldrh	r3, [r7, #10]
 800124a:	81fb      	strh	r3, [r7, #14]
			cell_index = i;
 800124c:	7b3b      	ldrb	r3, [r7, #12]
 800124e:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < TSENSE_CHANNELS_PER_BMB; i++) {
 8001250:	7b3b      	ldrb	r3, [r7, #12]
 8001252:	3301      	adds	r3, #1
 8001254:	733b      	strb	r3, [r7, #12]
 8001256:	7b3b      	ldrb	r3, [r7, #12]
 8001258:	2b0e      	cmp	r3, #14
 800125a:	d9e2      	bls.n	8001222 <getBMBMaxTempIndex+0x1a>
		}
	}
	return cell_index;
 800125c:	7b7b      	ldrb	r3, [r7, #13]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	200001d8 	.word	0x200001d8

08001270 <getBMBMinTempIndex>:

uint8_t getBMBMinTempIndex(uint8_t bmb_index) {
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
	int16_t minTemp = 0x7FFF;
 800127a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800127e:	81fb      	strh	r3, [r7, #14]
	uint8_t cell_index = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < TSENSE_CHANNELS_PER_BMB; i++) {
 8001284:	2300      	movs	r3, #0
 8001286:	733b      	strb	r3, [r7, #12]
 8001288:	e019      	b.n	80012be <getBMBMinTempIndex+0x4e>
		int16_t temp = BMBData[bmb_index].cellTemperatures[i];
 800128a:	79fa      	ldrb	r2, [r7, #7]
 800128c:	7b39      	ldrb	r1, [r7, #12]
 800128e:	4811      	ldr	r0, [pc, #68]	; (80012d4 <getBMBMinTempIndex+0x64>)
 8001290:	4613      	mov	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	4413      	add	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	440b      	add	r3, r1
 800129a:	3308      	adds	r3, #8
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4403      	add	r3, r0
 80012a0:	885b      	ldrh	r3, [r3, #2]
 80012a2:	817b      	strh	r3, [r7, #10]
		if (temp < minTemp) {
 80012a4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80012a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	da03      	bge.n	80012b8 <getBMBMinTempIndex+0x48>
			minTemp = temp;
 80012b0:	897b      	ldrh	r3, [r7, #10]
 80012b2:	81fb      	strh	r3, [r7, #14]
			cell_index = i;
 80012b4:	7b3b      	ldrb	r3, [r7, #12]
 80012b6:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < TSENSE_CHANNELS_PER_BMB; i++) {
 80012b8:	7b3b      	ldrb	r3, [r7, #12]
 80012ba:	3301      	adds	r3, #1
 80012bc:	733b      	strb	r3, [r7, #12]
 80012be:	7b3b      	ldrb	r3, [r7, #12]
 80012c0:	2b0e      	cmp	r3, #14
 80012c2:	d9e2      	bls.n	800128a <getBMBMinTempIndex+0x1a>
		}
	}
	return cell_index;
 80012c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	200001d8 	.word	0x200001d8

080012d8 <getBMBMaxVoltIndex>:

uint8_t getBMBMaxVoltIndex(uint8_t bmb_index) {
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
	uint16_t maxVoltage = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	81fb      	strh	r3, [r7, #14]
	uint8_t cell_index = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 80012ea:	2300      	movs	r3, #0
 80012ec:	733b      	strb	r3, [r7, #12]
 80012ee:	e015      	b.n	800131c <getBMBMaxVoltIndex+0x44>
		uint16_t voltage = BMBData[bmb_index].cellVoltages[i];
 80012f0:	79fa      	ldrb	r2, [r7, #7]
 80012f2:	7b39      	ldrb	r1, [r7, #12]
 80012f4:	480e      	ldr	r0, [pc, #56]	; (8001330 <getBMBMaxVoltIndex+0x58>)
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	440b      	add	r3, r1
 8001300:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001304:	817b      	strh	r3, [r7, #10]
		if (voltage > maxVoltage) {
 8001306:	897a      	ldrh	r2, [r7, #10]
 8001308:	89fb      	ldrh	r3, [r7, #14]
 800130a:	429a      	cmp	r2, r3
 800130c:	d903      	bls.n	8001316 <getBMBMaxVoltIndex+0x3e>
			maxVoltage = voltage;
 800130e:	897b      	ldrh	r3, [r7, #10]
 8001310:	81fb      	strh	r3, [r7, #14]
			cell_index = i;
 8001312:	7b3b      	ldrb	r3, [r7, #12]
 8001314:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 8001316:	7b3b      	ldrb	r3, [r7, #12]
 8001318:	3301      	adds	r3, #1
 800131a:	733b      	strb	r3, [r7, #12]
 800131c:	7b3b      	ldrb	r3, [r7, #12]
 800131e:	2b08      	cmp	r3, #8
 8001320:	d9e6      	bls.n	80012f0 <getBMBMaxVoltIndex+0x18>
		}
	}
	return cell_index;
 8001322:	7b7b      	ldrb	r3, [r7, #13]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	200001d8 	.word	0x200001d8

08001334 <getBMBMinVoltIndex>:

uint8_t getBMBMinVoltIndex(uint8_t bmb_index) {
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
	uint16_t minVoltage = 0xFFFF;
 800133e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001342:	81fb      	strh	r3, [r7, #14]
	uint8_t cell_index = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 8001348:	2300      	movs	r3, #0
 800134a:	733b      	strb	r3, [r7, #12]
 800134c:	e015      	b.n	800137a <getBMBMinVoltIndex+0x46>
		uint16_t voltage = BMBData[bmb_index].cellVoltages[i];
 800134e:	79fa      	ldrb	r2, [r7, #7]
 8001350:	7b39      	ldrb	r1, [r7, #12]
 8001352:	480f      	ldr	r0, [pc, #60]	; (8001390 <getBMBMinVoltIndex+0x5c>)
 8001354:	4613      	mov	r3, r2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	440b      	add	r3, r1
 800135e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001362:	817b      	strh	r3, [r7, #10]
		if (voltage < minVoltage) {
 8001364:	897a      	ldrh	r2, [r7, #10]
 8001366:	89fb      	ldrh	r3, [r7, #14]
 8001368:	429a      	cmp	r2, r3
 800136a:	d203      	bcs.n	8001374 <getBMBMinVoltIndex+0x40>
			minVoltage = voltage;
 800136c:	897b      	ldrh	r3, [r7, #10]
 800136e:	81fb      	strh	r3, [r7, #14]
			cell_index = i;
 8001370:	7b3b      	ldrb	r3, [r7, #12]
 8001372:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 8001374:	7b3b      	ldrb	r3, [r7, #12]
 8001376:	3301      	adds	r3, #1
 8001378:	733b      	strb	r3, [r7, #12]
 800137a:	7b3b      	ldrb	r3, [r7, #12]
 800137c:	2b08      	cmp	r3, #8
 800137e:	d9e6      	bls.n	800134e <getBMBMinVoltIndex+0x1a>
		}
	}
	return cell_index;
 8001380:	7b7b      	ldrb	r3, [r7, #13]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	200001d8 	.word	0x200001d8

08001394 <getBMBTemp>:

// Accessor Functions

int16_t getBMBTemp(uint8_t bmb_index, uint8_t cell_index) {
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	460a      	mov	r2, r1
 800139e:	71fb      	strb	r3, [r7, #7]
 80013a0:	4613      	mov	r3, r2
 80013a2:	71bb      	strb	r3, [r7, #6]
	return BMBData[bmb_index].cellTemperatures[cell_index];
 80013a4:	79fa      	ldrb	r2, [r7, #7]
 80013a6:	79b9      	ldrb	r1, [r7, #6]
 80013a8:	4808      	ldr	r0, [pc, #32]	; (80013cc <getBMBTemp+0x38>)
 80013aa:	4613      	mov	r3, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	4413      	add	r3, r2
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	440b      	add	r3, r1
 80013b4:	3308      	adds	r3, #8
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4403      	add	r3, r0
 80013ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	200001d8 	.word	0x200001d8

080013d0 <getBMBVoltage>:

uint16_t getBMBVoltage(uint8_t bmb_index, uint8_t cell_index) {
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	460a      	mov	r2, r1
 80013da:	71fb      	strb	r3, [r7, #7]
 80013dc:	4613      	mov	r3, r2
 80013de:	71bb      	strb	r3, [r7, #6]
	return BMBData[bmb_index].cellVoltages[cell_index];
 80013e0:	79fa      	ldrb	r2, [r7, #7]
 80013e2:	79b9      	ldrb	r1, [r7, #6]
 80013e4:	4806      	ldr	r0, [pc, #24]	; (8001400 <getBMBVoltage+0x30>)
 80013e6:	4613      	mov	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	440b      	add	r3, r1
 80013f0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	200001d8 	.word	0x200001d8

08001404 <getPackMaxCellVoltage>:

uint16_t getPackMaxCellVoltage() {
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
	uint16_t packMaxCellVoltage = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	80fb      	strh	r3, [r7, #6]
	uint16_t maxCellVoltage = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	807b      	strh	r3, [r7, #2]
	uint8_t maxCellVoltageIndex;

	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001412:	2300      	movs	r3, #0
 8001414:	717b      	strb	r3, [r7, #5]
 8001416:	e019      	b.n	800144c <getPackMaxCellVoltage+0x48>
		// find highest cell voltage on current BMB, update packMaxCellVoltage if needed
		maxCellVoltageIndex = getBMBMaxVoltIndex(bmb_index);
 8001418:	797b      	ldrb	r3, [r7, #5]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff5c 	bl	80012d8 <getBMBMaxVoltIndex>
 8001420:	4603      	mov	r3, r0
 8001422:	707b      	strb	r3, [r7, #1]
		maxCellVoltage = BMBData[bmb_index].cellVoltages[maxCellVoltageIndex];
 8001424:	797a      	ldrb	r2, [r7, #5]
 8001426:	7879      	ldrb	r1, [r7, #1]
 8001428:	480c      	ldr	r0, [pc, #48]	; (800145c <getPackMaxCellVoltage+0x58>)
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	440b      	add	r3, r1
 8001434:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001438:	807b      	strh	r3, [r7, #2]

		if (maxCellVoltage > packMaxCellVoltage) {
 800143a:	887a      	ldrh	r2, [r7, #2]
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	429a      	cmp	r2, r3
 8001440:	d901      	bls.n	8001446 <getPackMaxCellVoltage+0x42>
			packMaxCellVoltage = maxCellVoltage;
 8001442:	887b      	ldrh	r3, [r7, #2]
 8001444:	80fb      	strh	r3, [r7, #6]
	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001446:	797b      	ldrb	r3, [r7, #5]
 8001448:	3301      	adds	r3, #1
 800144a:	717b      	strb	r3, [r7, #5]
 800144c:	797b      	ldrb	r3, [r7, #5]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0e2      	beq.n	8001418 <getPackMaxCellVoltage+0x14>
		}
	}

	return packMaxCellVoltage;
 8001452:	88fb      	ldrh	r3, [r7, #6]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	200001d8 	.word	0x200001d8

08001460 <getPackMinCellVoltage>:

uint16_t getPackMinCellVoltage() {
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
	uint16_t packMinCellVoltage = UINT16_MAX;
 8001466:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800146a:	80fb      	strh	r3, [r7, #6]
	uint16_t minCellVoltage = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	807b      	strh	r3, [r7, #2]
	uint8_t minCellVoltageIndex;

	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001470:	2300      	movs	r3, #0
 8001472:	717b      	strb	r3, [r7, #5]
 8001474:	e019      	b.n	80014aa <getPackMinCellVoltage+0x4a>
		// find lowest cell temp on current BMB, update packMinCellVoltage if needed
		minCellVoltageIndex = getBMBMinVoltIndex(bmb_index);
 8001476:	797b      	ldrb	r3, [r7, #5]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff5b 	bl	8001334 <getBMBMinVoltIndex>
 800147e:	4603      	mov	r3, r0
 8001480:	707b      	strb	r3, [r7, #1]
		minCellVoltage = BMBData[bmb_index].cellVoltages[minCellVoltageIndex];
 8001482:	797a      	ldrb	r2, [r7, #5]
 8001484:	7879      	ldrb	r1, [r7, #1]
 8001486:	480d      	ldr	r0, [pc, #52]	; (80014bc <getPackMinCellVoltage+0x5c>)
 8001488:	4613      	mov	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	440b      	add	r3, r1
 8001492:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001496:	807b      	strh	r3, [r7, #2]

		if (minCellVoltage < packMinCellVoltage) {
 8001498:	887a      	ldrh	r2, [r7, #2]
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	429a      	cmp	r2, r3
 800149e:	d201      	bcs.n	80014a4 <getPackMinCellVoltage+0x44>
			packMinCellVoltage = minCellVoltage;
 80014a0:	887b      	ldrh	r3, [r7, #2]
 80014a2:	80fb      	strh	r3, [r7, #6]
	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 80014a4:	797b      	ldrb	r3, [r7, #5]
 80014a6:	3301      	adds	r3, #1
 80014a8:	717b      	strb	r3, [r7, #5]
 80014aa:	797b      	ldrb	r3, [r7, #5]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0e2      	beq.n	8001476 <getPackMinCellVoltage+0x16>
		}
	}

	return packMinCellVoltage;
 80014b0:	88fb      	ldrh	r3, [r7, #6]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200001d8 	.word	0x200001d8

080014c0 <getPackMaxCellTemp>:

uint16_t getPackMaxCellTemp() {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
	uint16_t packMaxCellTemp = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	80fb      	strh	r3, [r7, #6]
	uint16_t maxCellTemp = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	807b      	strh	r3, [r7, #2]
	uint8_t maxCellTempIndex;

	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 80014ce:	2300      	movs	r3, #0
 80014d0:	717b      	strb	r3, [r7, #5]
 80014d2:	e01c      	b.n	800150e <getPackMaxCellTemp+0x4e>
		// find highest cell temp on current BMB, update packMaxCellTemp if needed
		maxCellTempIndex = getBMBMaxTempIndex(bmb_index);
 80014d4:	797b      	ldrb	r3, [r7, #5]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fe96 	bl	8001208 <getBMBMaxTempIndex>
 80014dc:	4603      	mov	r3, r0
 80014de:	707b      	strb	r3, [r7, #1]
		maxCellTemp = BMBData[bmb_index].cellTemperatures[maxCellTempIndex];
 80014e0:	797a      	ldrb	r2, [r7, #5]
 80014e2:	7879      	ldrb	r1, [r7, #1]
 80014e4:	480e      	ldr	r0, [pc, #56]	; (8001520 <getPackMaxCellTemp+0x60>)
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	440b      	add	r3, r1
 80014f0:	3308      	adds	r3, #8
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4403      	add	r3, r0
 80014f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014fa:	807b      	strh	r3, [r7, #2]

		if (maxCellTemp > packMaxCellTemp) {
 80014fc:	887a      	ldrh	r2, [r7, #2]
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	429a      	cmp	r2, r3
 8001502:	d901      	bls.n	8001508 <getPackMaxCellTemp+0x48>
			packMaxCellTemp = maxCellTemp;
 8001504:	887b      	ldrh	r3, [r7, #2]
 8001506:	80fb      	strh	r3, [r7, #6]
	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001508:	797b      	ldrb	r3, [r7, #5]
 800150a:	3301      	adds	r3, #1
 800150c:	717b      	strb	r3, [r7, #5]
 800150e:	797b      	ldrb	r3, [r7, #5]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0df      	beq.n	80014d4 <getPackMaxCellTemp+0x14>
		}
	}

	return packMaxCellTemp;
 8001514:	88fb      	ldrh	r3, [r7, #6]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200001d8 	.word	0x200001d8

08001524 <getBattMillivolts>:

BMB_Data_t* getBMBData(uint8_t bmb_index) {
	return &(BMBData[bmb_index]);
}

int32_t getBattMillivolts() {
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
	int32_t totalPackCellVoltage = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]

	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 800152e:	2300      	movs	r3, #0
 8001530:	70fb      	strb	r3, [r7, #3]
 8001532:	e019      	b.n	8001568 <getBattMillivolts+0x44>
		for (uint8_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 8001534:	2300      	movs	r3, #0
 8001536:	70bb      	strb	r3, [r7, #2]
 8001538:	e010      	b.n	800155c <getBattMillivolts+0x38>
			totalPackCellVoltage +=
					(int32_t) BMBData[bmb_index].cellVoltages[i];
 800153a:	78fa      	ldrb	r2, [r7, #3]
 800153c:	78b9      	ldrb	r1, [r7, #2]
 800153e:	480f      	ldr	r0, [pc, #60]	; (800157c <getBattMillivolts+0x58>)
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	440b      	add	r3, r1
 800154a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800154e:	461a      	mov	r2, r3
			totalPackCellVoltage +=
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	607b      	str	r3, [r7, #4]
		for (uint8_t i = 0; i < VSENSE_CHANNELS_PER_BMB; i++) {
 8001556:	78bb      	ldrb	r3, [r7, #2]
 8001558:	3301      	adds	r3, #1
 800155a:	70bb      	strb	r3, [r7, #2]
 800155c:	78bb      	ldrb	r3, [r7, #2]
 800155e:	2b08      	cmp	r3, #8
 8001560:	d9eb      	bls.n	800153a <getBattMillivolts+0x16>
	for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	3301      	adds	r3, #1
 8001566:	70fb      	strb	r3, [r7, #3]
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0e2      	beq.n	8001534 <getBattMillivolts+0x10>
		}
	}

	return totalPackCellVoltage;
 800156e:	687b      	ldr	r3, [r7, #4]
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	200001d8 	.word	0x200001d8

08001580 <adcInit>:
static cmr_adc_t adc;

/**
 * @brief Initializes the ADC interface.
 */
void adcInit(void) {
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
    // ADC initialization and channel configuration.
    cmr_adcInit(
 8001584:	2305      	movs	r3, #5
 8001586:	4a03      	ldr	r2, [pc, #12]	; (8001594 <adcInit+0x14>)
 8001588:	4903      	ldr	r1, [pc, #12]	; (8001598 <adcInit+0x18>)
 800158a:	4804      	ldr	r0, [pc, #16]	; (800159c <adcInit+0x1c>)
 800158c:	f000 ffaa 	bl	80024e4 <cmr_adcInit>
        &adc, ADC1,
        adcChannels, sizeof(adcChannels) / sizeof(adcChannels[0])
    );
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000020 	.word	0x20000020
 8001598:	40012000 	.word	0x40012000
 800159c:	2000024c 	.word	0x2000024c

080015a0 <adcRead>:

/**
 * @brief Returns the current value of an ADC channel.
 */
uint32_t adcRead(adcChannels_t ch) {
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
    return adcChannels[ch].value;
 80015aa:	79fa      	ldrb	r2, [r7, #7]
 80015ac:	4906      	ldr	r1, [pc, #24]	; (80015c8 <adcRead+0x28>)
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	3310      	adds	r3, #16
 80015ba:	681b      	ldr	r3, [r3, #0]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	20000020 	.word	0x20000020

080015cc <checkErrors>:

// Persistent value for storing the error type. Will be useful if
// error checking becomes its own task
static cmr_canHVCError_t errorRegister = CMR_CAN_HVC_STATE_ERROR;

cmr_canHVCError_t checkErrors(cmr_canHVCState_t currentState){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
    cmr_canHVCError_t errorFlags = CMR_CAN_HVC_ERROR_NONE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	81fb      	strh	r3, [r7, #14]
    if(checkCommandTimeout()) {
 80015da:	f000 f889 	bl	80016f0 <checkCommandTimeout>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <checkErrors+0x20>
        // TODO E1 check the timeout field of the command message meta data
        errorFlags |= CMR_CAN_HVC_ERROR_CAN_TIMEOUT;
 80015e4:	89fb      	ldrh	r3, [r7, #14]
 80015e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ea:	81fb      	strh	r3, [r7, #14]
    }
    if(checkBMBTimeout()) {
 80015ec:	f000 f894 	bl	8001718 <checkBMBTimeout>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <checkErrors+0x32>
        // TODO E2 devise a UART monitor system
        errorFlags |= CMR_CAN_HVC_ERROR_BMB_TIMEOUT; /**< @brief BMB has timed out. */
 80015f6:	89fb      	ldrh	r3, [r7, #14]
 80015f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fc:	81fb      	strh	r3, [r7, #14]
    }
    if(getPackMaxCellTemp() > 590) { // Temp limit of 59C
 80015fe:	f7ff ff5f 	bl	80014c0 <getPackMaxCellTemp>
 8001602:	4603      	mov	r3, r0
 8001604:	461a      	mov	r2, r3
 8001606:	f240 234e 	movw	r3, #590	; 0x24e
 800160a:	429a      	cmp	r2, r3
 800160c:	d903      	bls.n	8001616 <checkErrors+0x4a>
        // TODO: #Define with 590
        // TODO E3 create structures for cell temp data and stats (min/max)
        errorFlags |= CMR_CAN_HVC_ERROR_CELL_OVERTEMP;
 800160e:	89fb      	ldrh	r3, [r7, #14]
 8001610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001614:	81fb      	strh	r3, [r7, #14]
    }
    if(getPackMaxCellVoltage() > 4175) { // Cell voltage limit of 4175
 8001616:	f7ff fef5 	bl	8001404 <getPackMaxCellVoltage>
 800161a:	4603      	mov	r3, r0
 800161c:	461a      	mov	r2, r3
 800161e:	f241 034f 	movw	r3, #4175	; 0x104f
 8001622:	429a      	cmp	r2, r3
 8001624:	d903      	bls.n	800162e <checkErrors+0x62>
        // TODO E4 create structures for cell voltage data and stats (min/max)
        errorFlags |= CMR_CAN_HVC_ERROR_CELL_OVERVOLT;
 8001626:	89fb      	ldrh	r3, [r7, #14]
 8001628:	f043 0320 	orr.w	r3, r3, #32
 800162c:	81fb      	strh	r3, [r7, #14]
    }
    if(getPackMinCellVoltage() < 2400) {
 800162e:	f7ff ff17 	bl	8001460 <getPackMinCellVoltage>
 8001632:	4603      	mov	r3, r0
 8001634:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8001638:	d203      	bcs.n	8001642 <checkErrors+0x76>
        // TODO E5 create structures for cell voltage data and stats (min/max)
        errorFlags |= CMR_CAN_HVC_ERROR_CELL_UNDERVOLT;
 800163a:	89fb      	ldrh	r3, [r7, #14]
 800163c:	f043 0310 	orr.w	r3, r3, #16
 8001640:	81fb      	strh	r3, [r7, #14]
    }
    if((getBattMillivolts()) > maxPackVoltageMV) {
 8001642:	f7ff ff6f 	bl	8001524 <getBattMillivolts>
 8001646:	4603      	mov	r3, r0
 8001648:	4a26      	ldr	r2, [pc, #152]	; (80016e4 <checkErrors+0x118>)
 800164a:	4293      	cmp	r3, r2
 800164c:	dd03      	ble.n	8001656 <checkErrors+0x8a>
        // E6
        errorFlags |= CMR_CAN_HVC_ERROR_PACK_OVERVOLT;
 800164e:	89fb      	ldrh	r3, [r7, #14]
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	81fb      	strh	r3, [r7, #14]
    }
    if((getBattMillivolts()) < minPackVoltageMV) {
 8001656:	f7ff ff65 	bl	8001524 <getBattMillivolts>
 800165a:	4603      	mov	r3, r0
 800165c:	4a22      	ldr	r2, [pc, #136]	; (80016e8 <checkErrors+0x11c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	da03      	bge.n	800166a <checkErrors+0x9e>
        // E7
        errorFlags |= CMR_CAN_HVC_ERROR_PACK_UNDERVOLT;
 8001662:	89fb      	ldrh	r3, [r7, #14]
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	81fb      	strh	r3, [r7, #14]
    }
//    if(getCurrentAverage() > maxPackCurrentAverageMA) {
//        // E9
//        errorFlags |= CMR_CAN_HVC_ERROR_PACK_OVERCURRENT;
//    }
    if(checkRelayPowerFault() && (getState() != CMR_CAN_HVC_STATE_ERROR && getState() != CMR_CAN_HVC_STATE_CLEAR_ERROR)) {//(getRelayStatus() & 0xAA) != 0xAA) {
 800166a:	f000 f887 	bl	800177c <checkRelayPowerFault>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d006      	beq.n	8001682 <checkErrors+0xb6>
 8001674:	f000 fea2 	bl	80023bc <getState>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <checkErrors+0xb6>
 800167e:	f000 fe9d 	bl	80023bc <getState>
        // TODO look into the AIR_Fault_L signal, it might be necessary to confirm this is not active
        // before looking at relay status, otherwise we could be in dead lock trying to clear errors.
        //errorFlags |= BMS_ERROR_CODE_RELAY;
    }

    if(
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	2b03      	cmp	r3, #3
 8001686:	d014      	beq.n	80016b2 <checkErrors+0xe6>
    	(currentState == CMR_CAN_HVC_STATE_DRIVE_PRECHARGE ||
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	2b04      	cmp	r3, #4
 800168c:	d011      	beq.n	80016b2 <checkErrors+0xe6>
        currentState == CMR_CAN_HVC_STATE_DRIVE_PRECHARGE_COMPLETE ||
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	2b05      	cmp	r3, #5
 8001692:	d00e      	beq.n	80016b2 <checkErrors+0xe6>
        currentState == CMR_CAN_HVC_STATE_DRIVE ||
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	2b06      	cmp	r3, #6
 8001698:	d00b      	beq.n	80016b2 <checkErrors+0xe6>
        currentState == CMR_CAN_HVC_STATE_CHARGE_PRECHARGE ||
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2b07      	cmp	r3, #7
 800169e:	d008      	beq.n	80016b2 <checkErrors+0xe6>
        currentState == CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE ||
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	d005      	beq.n	80016b2 <checkErrors+0xe6>
        currentState == CMR_CAN_HVC_STATE_CHARGE_TRICKLE ||
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	2b09      	cmp	r3, #9
 80016aa:	d002      	beq.n	80016b2 <checkErrors+0xe6>
        currentState == CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT ||
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	2b0a      	cmp	r3, #10
 80016b0:	d109      	bne.n	80016c6 <checkErrors+0xfa>
        currentState == CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE) &&
        (cmr_gpioRead(SAFETY_BINARY) == 0)) {
 80016b2:	200a      	movs	r0, #10
 80016b4:	f002 f922 	bl	80038fc <cmr_gpioRead>
 80016b8:	4603      	mov	r3, r0
        currentState == CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE) &&
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d103      	bne.n	80016c6 <checkErrors+0xfa>
        // E11
        // If SC voltage is below 8v while we're trying to drive relays, throw an error.
        errorFlags |= CMR_CAN_HVC_ERROR_LV_UNDERVOLT;
 80016be:	89fb      	ldrh	r3, [r7, #14]
 80016c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016c4:	81fb      	strh	r3, [r7, #14]
    }

    // Cut relay power if we have an error
    if (errorFlags != CMR_CAN_HVC_ERROR_NONE) {
 80016c6:	89fb      	ldrh	r3, [r7, #14]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <checkErrors+0x108>
        cmr_gpioWrite(GPIO_BMB_FAULT_L, 0);
 80016cc:	2100      	movs	r1, #0
 80016ce:	2003      	movs	r0, #3
 80016d0:	f002 f89e 	bl	8003810 <cmr_gpioWrite>
    }
    errorRegister = errorFlags;
 80016d4:	4a05      	ldr	r2, [pc, #20]	; (80016ec <checkErrors+0x120>)
 80016d6:	89fb      	ldrh	r3, [r7, #14]
 80016d8:	8013      	strh	r3, [r2, #0]
    
    return errorFlags;
 80016da:	89fb      	ldrh	r3, [r7, #14]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	000927c0 	.word	0x000927c0
 80016e8:	00057e40 	.word	0x00057e40
 80016ec:	20005580 	.word	0x20005580

080016f0 <checkCommandTimeout>:

cmr_canHVCError_t getErrorReg(){
    return errorRegister;
}

static bool checkCommandTimeout() {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
    // CAN error if HVC Command has timed out after 50ms
    // TODO: latch can error?
    TickType_t lastWakeTime = xTaskGetTickCount();
 80016f6:	f004 f8c7 	bl	8005888 <xTaskGetTickCount>
 80016fa:	6078      	str	r0, [r7, #4]
    bool hvc_commmand_error = (cmr_canRXMetaTimeoutError(&(canRXMeta[CANRX_HVC_COMMAND]), lastWakeTime) < 0);
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <checkCommandTimeout+0x24>)
 8001700:	f001 f80b 	bl	800271a <cmr_canRXMetaTimeoutError>
 8001704:	4603      	mov	r3, r0
 8001706:	0fdb      	lsrs	r3, r3, #31
 8001708:	70fb      	strb	r3, [r7, #3]

	return hvc_commmand_error;
 800170a:	78fb      	ldrb	r3, [r7, #3]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200000a4 	.word	0x200000a4

08001718 <checkBMBTimeout>:

static bool checkBMBTimeout() {
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_BMBS; i++) {
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	e00a      	b.n	800173a <checkBMBTimeout+0x22>
        if (BMBTimeoutCount[i] >= BMB_TIMEOUT) {
 8001724:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <checkBMBTimeout+0x38>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172c:	2b04      	cmp	r3, #4
 800172e:	dd01      	ble.n	8001734 <checkBMBTimeout+0x1c>
            return true;
 8001730:	2301      	movs	r3, #1
 8001732:	e006      	b.n	8001742 <checkBMBTimeout+0x2a>
    for (int i = 0; i < NUM_BMBS; i++) {
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3301      	adds	r3, #1
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	ddf1      	ble.n	8001724 <checkBMBTimeout+0xc>
        }
    }
    return false;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	2000557c 	.word	0x2000557c

08001754 <getRelayStatus>:
    
    return relayUsageVector;
    
}

uint8_t getRelayStatus(){
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
    // Status pin is high for OK, low for FAULT
    uint8_t relayStatusVector = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	71fb      	strb	r3, [r7, #7]

	// AIR status feedback functionality removed

    return relayUsageVector | relayStatusVector;
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <getRelayStatus+0x24>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	4313      	orrs	r3, r2
 8001768:	b2db      	uxtb	r3, r3
}
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20005582 	.word	0x20005582

0800177c <checkRelayPowerFault>:

bool checkRelayPowerFault() {
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
    return !cmr_gpioRead(GPIO_AIR_FAULT_L);
 8001780:	2005      	movs	r0, #5
 8001782:	f002 f8bb 	bl	80038fc <cmr_gpioRead>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf0c      	ite	eq
 800178c:	2301      	moveq	r3, #1
 800178e:	2300      	movne	r3, #0
 8001790:	b2db      	uxtb	r3, r3
}
 8001792:	4618      	mov	r0, r3
 8001794:	bd80      	pop	{r7, pc}

08001796 <canTX1Hz>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void canTX1Hz(void *pvParameters) {
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    TickType_t lastWakeTime = xTaskGetTickCount();
 800179e:	f004 f873 	bl	8005888 <xTaskGetTickCount>
 80017a2:	4603      	mov	r3, r0
 80017a4:	60bb      	str	r3, [r7, #8]
    while (1) {

        // BMB Temperature Status 
        for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 80017a6:	2300      	movs	r3, #0
 80017a8:	73fb      	strb	r3, [r7, #15]
 80017aa:	e006      	b.n	80017ba <canTX1Hz+0x24>
            sendBMSBMBStatusTemp(bmb_index);
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 f9b1 	bl	8001b16 <sendBMSBMBStatusTemp>
        for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	3301      	adds	r3, #1
 80017b8:	73fb      	strb	r3, [r7, #15]
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0f5      	beq.n	80017ac <canTX1Hz+0x16>
        }
        sendBMSMinMaxCellTemp();
 80017c0:	f000 fa3c 	bl	8001c3c <sendBMSMinMaxCellTemp>

        sendAllBMBVoltages();
 80017c4:	f000 face 	bl	8001d64 <sendAllBMBVoltages>

        vTaskDelayUntil(&lastWakeTime, canTX1Hz_period_ms);
 80017c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017cc:	f107 0308 	add.w	r3, r7, #8
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f003 fee2 	bl	800559c <vTaskDelayUntil>
        for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 80017d8:	e7e5      	b.n	80017a6 <canTX1Hz+0x10>

080017da <canTX10Hz>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void canTX10Hz(void *pvParameters) {
 80017da:	b580      	push	{r7, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    TickType_t lastWakeTime = xTaskGetTickCount();
 80017e2:	f004 f851 	bl	8005888 <xTaskGetTickCount>
 80017e6:	4603      	mov	r3, r0
 80017e8:	60bb      	str	r3, [r7, #8]
    while (1) {
        // BRUSA Charger decided by state machine 
        // sendBRUSAChargerControl();

        // BMB Voltage Status 
        for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 80017ea:	2300      	movs	r3, #0
 80017ec:	73fb      	strb	r3, [r7, #15]
 80017ee:	e006      	b.n	80017fe <canTX10Hz+0x24>
            sendBMSBMBStatusVoltage(bmb_index);
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f955 	bl	8001aa2 <sendBMSBMBStatusVoltage>
        for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	3301      	adds	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f5      	beq.n	80017f0 <canTX10Hz+0x16>
        }

        vTaskDelayUntil(&lastWakeTime, canTX10Hz_period_ms);
 8001804:	2264      	movs	r2, #100	; 0x64
 8001806:	f107 0308 	add.w	r3, r7, #8
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f003 fec5 	bl	800559c <vTaskDelayUntil>
        for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001812:	e7ea      	b.n	80017ea <canTX10Hz+0x10>

08001814 <canTX200Hz>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void canTX200Hz(void *pvParameters) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

//    cmr_canRXMeta_t *heartbeatVSMMeta = canRXMeta + CANRX_HEARTBEAT_VSM;
//    volatile cmr_canHeartbeat_t *heartbeatVSM =
//        (void *) heartbeatVSMMeta->payload;

    TickType_t lastWakeTime = xTaskGetTickCount();
 800181c:	f004 f834 	bl	8005888 <xTaskGetTickCount>
 8001820:	4603      	mov	r3, r0
 8001822:	60fb      	str	r3, [r7, #12]
    while (1) {
        sendBMSMinMaxCellVoltage();
 8001824:	f000 f9b2 	bl	8001b8c <sendBMSMinMaxCellVoltage>

        vTaskDelayUntil(&lastWakeTime, canTX200Hz_period_ms);
 8001828:	2205      	movs	r2, #5
 800182a:	f107 030c 	add.w	r3, r7, #12
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f003 feb3 	bl	800559c <vTaskDelayUntil>
        sendBMSMinMaxCellVoltage();
 8001836:	e7f5      	b.n	8001824 <canTX200Hz+0x10>

08001838 <canTX100Hz>:
    }
}

static void canTX100Hz(void *pvParameters) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

//    cmr_canRXMeta_t *heartbeatVSMMeta = canRXMeta + CANRX_HEARTBEAT_VSM;
//    volatile cmr_canHeartbeat_t *heartbeatVSM =
//        (void *) heartbeatVSMMeta->payload;

    TickType_t lastWakeTime = xTaskGetTickCount();
 8001840:	f004 f822 	bl	8005888 <xTaskGetTickCount>
 8001844:	4603      	mov	r3, r0
 8001846:	60fb      	str	r3, [r7, #12]
    while (1) {
        sendHeartbeat(lastWakeTime);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f88c 	bl	8001968 <sendHeartbeat>
        sendHVCPackVoltage();
 8001850:	f000 f8f8 	bl	8001a44 <sendHVCPackVoltage>
        sendBMSPackCurrent();
 8001854:	f000 f90e 	bl	8001a74 <sendBMSPackCurrent>
        sendBMSLowVoltage();
 8001858:	f000 fa48 	bl	8001cec <sendBMSLowVoltage>

        vTaskDelayUntil(&lastWakeTime, canTX100Hz_period_ms);
 800185c:	220a      	movs	r2, #10
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f003 fe99 	bl	800559c <vTaskDelayUntil>
        sendHeartbeat(lastWakeTime);
 800186a:	e7ed      	b.n	8001848 <canTX100Hz+0x10>

0800186c <canInit>:
}

/**
 * @brief Initializes the CAN interface.
 */
void canInit(void) {
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	b08b      	sub	sp, #44	; 0x2c
 8001870:	af06      	add	r7, sp, #24
    // CAN2 initialization.
    cmr_canInit(
 8001872:	2340      	movs	r3, #64	; 0x40
 8001874:	9305      	str	r3, [sp, #20]
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <canInit+0x88>)
 8001878:	9304      	str	r3, [sp, #16]
 800187a:	2320      	movs	r3, #32
 800187c:	9303      	str	r3, [sp, #12]
 800187e:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <canInit+0x88>)
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	2300      	movs	r3, #0
 8001884:	9301      	str	r3, [sp, #4]
 8001886:	2303      	movs	r3, #3
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <canInit+0x8c>)
 800188c:	2201      	movs	r2, #1
 800188e:	491b      	ldr	r1, [pc, #108]	; (80018fc <canInit+0x90>)
 8001890:	481b      	ldr	r0, [pc, #108]	; (8001900 <canInit+0x94>)
 8001892:	f000 ffe1 	bl	8002858 <cmr_canInit>
        GPIOB, GPIO_PIN_5,     // CAN2 RX port/pin.
        GPIOB, GPIO_PIN_6      // CAN2 TX port/pin.
    );

    // CAN2 filters.
    const cmr_canFilter_t canFilters[] = {
 8001896:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <canInit+0x98>)
 8001898:	463c      	mov	r4, r7
 800189a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800189c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                CMR_CANID_HVC_COMMAND,
				CMR_CANID_EMD_MEASUREMENT
            }
        }
    };
    cmr_canFilter(
 80018a0:	463b      	mov	r3, r7
 80018a2:	2201      	movs	r2, #1
 80018a4:	4619      	mov	r1, r3
 80018a6:	4816      	ldr	r0, [pc, #88]	; (8001900 <canInit+0x94>)
 80018a8:	f001 f884 	bl	80029b4 <cmr_canFilter>
        &can, canFilters, sizeof(canFilters) / sizeof(canFilters[0])
    );

    // Task initialization.
    cmr_taskInit(
 80018ac:	2203      	movs	r2, #3
 80018ae:	2300      	movs	r3, #0
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <canInit+0x9c>)
 80018b4:	4915      	ldr	r1, [pc, #84]	; (800190c <canInit+0xa0>)
 80018b6:	4816      	ldr	r0, [pc, #88]	; (8001910 <canInit+0xa4>)
 80018b8:	f002 fca6 	bl	8004208 <cmr_taskInit>
        "CAN TX 1Hz",
        canTX1Hz_priority,
        canTX1Hz,
        NULL
    );
    cmr_taskInit(
 80018bc:	2203      	movs	r2, #3
 80018be:	2300      	movs	r3, #0
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <canInit+0xa8>)
 80018c4:	4914      	ldr	r1, [pc, #80]	; (8001918 <canInit+0xac>)
 80018c6:	4815      	ldr	r0, [pc, #84]	; (800191c <canInit+0xb0>)
 80018c8:	f002 fc9e 	bl	8004208 <cmr_taskInit>
        "CAN TX 10Hz",
        canTX10Hz_priority,
        canTX10Hz,
        NULL
    );
    cmr_taskInit(
 80018cc:	2205      	movs	r2, #5
 80018ce:	2300      	movs	r3, #0
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	4b13      	ldr	r3, [pc, #76]	; (8001920 <canInit+0xb4>)
 80018d4:	4913      	ldr	r1, [pc, #76]	; (8001924 <canInit+0xb8>)
 80018d6:	4814      	ldr	r0, [pc, #80]	; (8001928 <canInit+0xbc>)
 80018d8:	f002 fc96 	bl	8004208 <cmr_taskInit>
        "CAN TX 200Hz",
        canTX200Hz_priority,
        canTX200Hz,
        NULL
    );
    cmr_taskInit(
 80018dc:	2205      	movs	r2, #5
 80018de:	2300      	movs	r3, #0
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <canInit+0xc0>)
 80018e4:	4912      	ldr	r1, [pc, #72]	; (8001930 <canInit+0xc4>)
 80018e6:	4813      	ldr	r0, [pc, #76]	; (8001934 <canInit+0xc8>)
 80018e8:	f002 fc8e 	bl	8004208 <cmr_taskInit>
        "CAN TX 100Hz",
        canTX100Hz_priority,
        canTX100Hz,
        NULL
    );
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd90      	pop	{r4, r7, pc}
 80018f4:	40020400 	.word	0x40020400
 80018f8:	20000084 	.word	0x20000084
 80018fc:	40006800 	.word	0x40006800
 8001900:	20005584 	.word	0x20005584
 8001904:	0800b8c0 	.word	0x0800b8c0
 8001908:	08001797 	.word	0x08001797
 800190c:	0800b888 	.word	0x0800b888
 8001910:	20005604 	.word	0x20005604
 8001914:	080017db 	.word	0x080017db
 8001918:	0800b894 	.word	0x0800b894
 800191c:	2000a8e4 	.word	0x2000a8e4
 8001920:	08001815 	.word	0x08001815
 8001924:	0800b8a0 	.word	0x0800b8a0
 8001928:	2000fbc4 	.word	0x2000fbc4
 800192c:	08001839 	.word	0x08001839
 8001930:	0800b8b0 	.word	0x0800b8b0
 8001934:	20014ea4 	.word	0x20014ea4

08001938 <canTX>:
 * @param len The data's length, in bytes.
 * @param timeout The timeout, in ticks.
 *
 * @return 0 on success, or a negative error code on timeout.
 */
int canTX(cmr_canID_t id, const void *data, size_t len, TickType_t timeout) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af02      	add	r7, sp, #8
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	4603      	mov	r3, r0
 8001946:	81fb      	strh	r3, [r7, #14]
    return cmr_canTX(&can, id, data, len, timeout);
 8001948:	89f9      	ldrh	r1, [r7, #14]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	4804      	ldr	r0, [pc, #16]	; (8001964 <canTX+0x2c>)
 8001954:	f000 fff2 	bl	800293c <cmr_canTX>
 8001958:	4603      	mov	r3, r0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20005584 	.word	0x20005584

08001968 <sendHeartbeat>:
/**
 * @brief Sets up HVC CAN heartbeat with current errors and warnings, then sends it.
 *
 * @param lastWakeTime Pass in from canTX100Hz. Used to update lastStateChangeTime and errors/warnings.
 */
static void sendHeartbeat(TickType_t lastWakeTime) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
    cmr_canHVCState_t currentState = getState();
 8001970:	f000 fd24 	bl	80023bc <getState>
 8001974:	4603      	mov	r3, r0
 8001976:	75fb      	strb	r3, [r7, #23]
    cmr_canHVCError_t currentError = CMR_CAN_HVC_ERROR_NONE;
 8001978:	2300      	movs	r3, #0
 800197a:	82bb      	strh	r3, [r7, #20]
    currentError = checkErrors(currentState);
 800197c:	7dfb      	ldrb	r3, [r7, #23]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fe24 	bl	80015cc <checkErrors>
 8001984:	4603      	mov	r3, r0
 8001986:	82bb      	strh	r3, [r7, #20]

    cmr_canHVCHeartbeat_t HVCHeartbeat = {
 8001988:	8abb      	ldrh	r3, [r7, #20]
 800198a:	81bb      	strh	r3, [r7, #12]
 800198c:	2300      	movs	r3, #0
 800198e:	73bb      	strb	r3, [r7, #14]
 8001990:	7dfb      	ldrb	r3, [r7, #23]
 8001992:	73fb      	strb	r3, [r7, #15]
        .errorStatus = currentError,
        .hvcMode = CMR_CAN_HVC_MODE_ERROR,
        .hvcState = currentState,
        .relayStatus = getRelayStatus(),
 8001994:	f7ff fede 	bl	8001754 <getRelayStatus>
 8001998:	4603      	mov	r3, r0
    cmr_canHVCHeartbeat_t HVCHeartbeat = {
 800199a:	743b      	strb	r3, [r7, #16]
 800199c:	2300      	movs	r3, #0
 800199e:	747b      	strb	r3, [r7, #17]
        .uptime_s = 0,
    };

    switch (currentState) {
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
 80019a2:	2b0b      	cmp	r3, #11
 80019a4:	d83e      	bhi.n	8001a24 <sendHeartbeat+0xbc>
 80019a6:	a201      	add	r2, pc, #4	; (adr r2, 80019ac <sendHeartbeat+0x44>)
 80019a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ac:	08001a19 	.word	0x08001a19
 80019b0:	080019dd 	.word	0x080019dd
 80019b4:	080019e3 	.word	0x080019e3
 80019b8:	080019e9 	.word	0x080019e9
 80019bc:	080019ef 	.word	0x080019ef
 80019c0:	080019f5 	.word	0x080019f5
 80019c4:	080019fb 	.word	0x080019fb
 80019c8:	08001a01 	.word	0x08001a01
 80019cc:	08001a07 	.word	0x08001a07
 80019d0:	08001a0d 	.word	0x08001a0d
 80019d4:	08001a13 	.word	0x08001a13
 80019d8:	08001a1f 	.word	0x08001a1f
        case CMR_CAN_HVC_STATE_DISCHARGE: // S1
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_IDLE;
 80019dc:	2301      	movs	r3, #1
 80019de:	73bb      	strb	r3, [r7, #14]
            break;
 80019e0:	e023      	b.n	8001a2a <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_STANDBY: // S2
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_IDLE;
 80019e2:	2301      	movs	r3, #1
 80019e4:	73bb      	strb	r3, [r7, #14]
            break;
 80019e6:	e020      	b.n	8001a2a <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_DRIVE_PRECHARGE: // S3
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_START;
 80019e8:	2302      	movs	r3, #2
 80019ea:	73bb      	strb	r3, [r7, #14]
            break;
 80019ec:	e01d      	b.n	8001a2a <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_DRIVE_PRECHARGE_COMPLETE: // S4
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_START;
 80019ee:	2302      	movs	r3, #2
 80019f0:	73bb      	strb	r3, [r7, #14]
            break;
 80019f2:	e01a      	b.n	8001a2a <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_DRIVE: // S5
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_RUN;
 80019f4:	2304      	movs	r3, #4
 80019f6:	73bb      	strb	r3, [r7, #14]
            break;
 80019f8:	e017      	b.n	8001a2a <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_CHARGE_PRECHARGE: // S6
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_CHARGE;
 80019fa:	2308      	movs	r3, #8
 80019fc:	73bb      	strb	r3, [r7, #14]
            break;
 80019fe:	e014      	b.n	8001a2a <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_CHARGE_PRECHARGE_COMPLETE: // S7
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_CHARGE;
 8001a00:	2308      	movs	r3, #8
 8001a02:	73bb      	strb	r3, [r7, #14]
            break;
 8001a04:	e011      	b.n	8001a2a <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_CHARGE_TRICKLE: // S8
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_CHARGE;
 8001a06:	2308      	movs	r3, #8
 8001a08:	73bb      	strb	r3, [r7, #14]
            break;
 8001a0a:	e00e      	b.n	8001a2a <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_CHARGE_CONSTANT_CURRENT: // S9
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_CHARGE;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	73bb      	strb	r3, [r7, #14]
            break;
 8001a10:	e00b      	b.n	8001a2a <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_CHARGE_CONSTANT_VOLTAGE: // S10
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_CHARGE;
 8001a12:	2308      	movs	r3, #8
 8001a14:	73bb      	strb	r3, [r7, #14]
            break;
 8001a16:	e008      	b.n	8001a2a <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_ERROR: // S0
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_ERROR;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	73bb      	strb	r3, [r7, #14]
            break;
 8001a1c:	e005      	b.n	8001a2a <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_CLEAR_ERROR: // S11
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_ERROR;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73bb      	strb	r3, [r7, #14]
            break;
 8001a22:	e002      	b.n	8001a2a <sendHeartbeat+0xc2>
        case CMR_CAN_HVC_STATE_UNKNOWN:
        default:
            HVCHeartbeat.hvcMode = CMR_CAN_HVC_MODE_ERROR;
 8001a24:	2300      	movs	r3, #0
 8001a26:	73bb      	strb	r3, [r7, #14]
            break;
 8001a28:	bf00      	nop
    }

    canTX(CMR_CANID_HEARTBEAT_HVC, &HVCHeartbeat, sizeof(HVCHeartbeat), canTX100Hz_period_ms);
 8001a2a:	230a      	movs	r3, #10
 8001a2c:	f107 010c 	add.w	r1, r7, #12
 8001a30:	2206      	movs	r2, #6
 8001a32:	f44f 7081 	mov.w	r0, #258	; 0x102
 8001a36:	f7ff ff7f 	bl	8001938 <canTX>
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop

08001a44 <sendHVCPackVoltage>:

static void sendHVCPackVoltage(void) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
    int32_t bVolt = getBattMillivolts();
 8001a4a:	f7ff fd6b 	bl	8001524 <getBattMillivolts>
 8001a4e:	60f8      	str	r0, [r7, #12]
    int32_t hvVolt = getHVmillivolts();
 8001a50:	f000 fc9c 	bl	800238c <getHVmillivolts>
 8001a54:	60b8      	str	r0, [r7, #8]

    cmr_canHVCPackVoltage_t HVCPackVoltage = {
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	603b      	str	r3, [r7, #0]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	607b      	str	r3, [r7, #4]
        .battVoltage_mV = bVolt,
        .hvVoltage_mV = hvVolt,
    };

    canTX(CMR_CANID_HVC_PACK_VOLTAGE, &HVCPackVoltage, sizeof(HVCPackVoltage), canTX100Hz_period_ms);
 8001a5e:	230a      	movs	r3, #10
 8001a60:	4639      	mov	r1, r7
 8001a62:	2208      	movs	r2, #8
 8001a64:	f240 3001 	movw	r0, #769	; 0x301
 8001a68:	f7ff ff66 	bl	8001938 <canTX>
}
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <sendBMSPackCurrent>:

static void sendBMSPackCurrent(void) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
    int32_t instantCurrent = getHVmilliamps();
 8001a7a:	f000 fc93 	bl	80023a4 <getHVmilliamps>
 8001a7e:	60f8      	str	r0, [r7, #12]
    // int32_t avgCurrent = getCurrentAverage(); // TODO: Gustav change this back
    int32_t avgCurrent = instantCurrent;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	60bb      	str	r3, [r7, #8]

    cmr_canBMSPackCurrent_t BMSPackCurrent = {
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	607b      	str	r3, [r7, #4]
        .instantCurrent_mA = instantCurrent,
        .averageCurrent_mA = avgCurrent,
    };

    canTX(CMR_CANID_HVC_PACK_CURRENT, &BMSPackCurrent, sizeof(BMSPackCurrent), canTX100Hz_period_ms);
 8001a8c:	230a      	movs	r3, #10
 8001a8e:	4639      	mov	r1, r7
 8001a90:	2208      	movs	r2, #8
 8001a92:	f240 3002 	movw	r0, #770	; 0x302
 8001a96:	f7ff ff4f 	bl	8001938 <canTX>
}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <sendBMSBMBStatusVoltage>:

static void sendBMSBMBStatusVoltage(uint8_t bmb_index) {
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	71fb      	strb	r3, [r7, #7]
    uint8_t maxIndex = getBMBMaxVoltIndex(bmb_index);
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fc12 	bl	80012d8 <getBMBMaxVoltIndex>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	75fb      	strb	r3, [r7, #23]
    uint8_t minIndex = getBMBMinVoltIndex(bmb_index);
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fc3a 	bl	8001334 <getBMBMinVoltIndex>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	75bb      	strb	r3, [r7, #22]
    uint16_t maxVoltage = getBMBVoltage(bmb_index, maxIndex);
 8001ac4:	7dfa      	ldrb	r2, [r7, #23]
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	4611      	mov	r1, r2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fc80 	bl	80013d0 <getBMBVoltage>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	82bb      	strh	r3, [r7, #20]
    uint16_t minVoltage = getBMBVoltage(bmb_index, minIndex);
 8001ad4:	7dba      	ldrb	r2, [r7, #22]
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	4611      	mov	r1, r2
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fc78 	bl	80013d0 <getBMBVoltage>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	827b      	strh	r3, [r7, #18]

    cmr_canBMSBMBStatusVoltage_t BMSBMBStatusVoltage = {
 8001ae4:	7dfb      	ldrb	r3, [r7, #23]
 8001ae6:	733b      	strb	r3, [r7, #12]
 8001ae8:	7dbb      	ldrb	r3, [r7, #22]
 8001aea:	737b      	strb	r3, [r7, #13]
 8001aec:	8abb      	ldrh	r3, [r7, #20]
 8001aee:	81fb      	strh	r3, [r7, #14]
 8001af0:	8a7b      	ldrh	r3, [r7, #18]
 8001af2:	823b      	strh	r3, [r7, #16]
        .minVoltIndex = minIndex,
        .maxCellVoltage_mV = maxVoltage,
        .minCellVoltage_mV = minVoltage,
    };

    canTX(CMR_CANID_HVC_BMB_0_STATUS_VOLTAGE + (bmb_index << 1), &BMSBMBStatusVoltage, sizeof(BMSBMBStatusVoltage), canTX10Hz_period_ms);
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8001b00:	b298      	uxth	r0, r3
 8001b02:	2364      	movs	r3, #100	; 0x64
 8001b04:	f107 010c 	add.w	r1, r7, #12
 8001b08:	2206      	movs	r2, #6
 8001b0a:	f7ff ff15 	bl	8001938 <canTX>
}
 8001b0e:	bf00      	nop
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <sendBMSBMBStatusTemp>:

static void sendBMSBMBStatusTemp(uint8_t bmb_index) {
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b086      	sub	sp, #24
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	71fb      	strb	r3, [r7, #7]
    uint8_t maxIndex = getBMBMaxTempIndex(bmb_index);
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fb70 	bl	8001208 <getBMBMaxTempIndex>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	75fb      	strb	r3, [r7, #23]
    uint8_t minIndex = getBMBMinTempIndex(bmb_index);
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fb9e 	bl	8001270 <getBMBMinTempIndex>
 8001b34:	4603      	mov	r3, r0
 8001b36:	75bb      	strb	r3, [r7, #22]
    int16_t maxTemp = getBMBTemp(bmb_index, maxIndex);
 8001b38:	7dfa      	ldrb	r2, [r7, #23]
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fc28 	bl	8001394 <getBMBTemp>
 8001b44:	4603      	mov	r3, r0
 8001b46:	82bb      	strh	r3, [r7, #20]
    int16_t minTemp = getBMBTemp(bmb_index, minIndex);
 8001b48:	7dba      	ldrb	r2, [r7, #22]
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fc20 	bl	8001394 <getBMBTemp>
 8001b54:	4603      	mov	r3, r0
 8001b56:	827b      	strh	r3, [r7, #18]

    cmr_canBMSBMBStatusTemp_t BMSBMBStatusTemp = {
 8001b58:	7dfb      	ldrb	r3, [r7, #23]
 8001b5a:	733b      	strb	r3, [r7, #12]
 8001b5c:	7dbb      	ldrb	r3, [r7, #22]
 8001b5e:	737b      	strb	r3, [r7, #13]
 8001b60:	8abb      	ldrh	r3, [r7, #20]
 8001b62:	81fb      	strh	r3, [r7, #14]
 8001b64:	8a7b      	ldrh	r3, [r7, #18]
 8001b66:	823b      	strh	r3, [r7, #16]
        .minTempIndex = minIndex,
        .maxCellTemp_C = maxTemp,
        .minCellTemp_C = minTemp,
    };

    canTX(CMR_CANID_HVC_BMB_0_STATUS_TEMP + (bmb_index << 1), &BMSBMBStatusTemp, sizeof(BMSBMBStatusTemp), canTX1Hz_period_ms);
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	f203 3381 	addw	r3, r3, #897	; 0x381
 8001b74:	b298      	uxth	r0, r3
 8001b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7a:	f107 010c 	add.w	r1, r7, #12
 8001b7e:	2206      	movs	r2, #6
 8001b80:	f7ff feda 	bl	8001938 <canTX>
}
 8001b84:	bf00      	nop
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <sendBMSMinMaxCellVoltage>:

static void sendBMSMinMaxCellVoltage(void) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
    uint16_t minCellVoltage = UINT16_MAX;
 8001b92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b96:	82fb      	strh	r3, [r7, #22]
    uint16_t maxCellVoltage = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	82bb      	strh	r3, [r7, #20]
	uint8_t maxCellVoltageBMBNum;
	
	uint8_t minCellVoltageIndex;
	uint8_t maxCellVoltageIndex;

    for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	73fb      	strb	r3, [r7, #15]
 8001ba0:	e032      	b.n	8001c08 <sendBMSMinMaxCellVoltage+0x7c>
        uint8_t maxIndex = getBMBMaxVoltIndex(bmb_index);
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fb97 	bl	80012d8 <getBMBMaxVoltIndex>
 8001baa:	4603      	mov	r3, r0
 8001bac:	73bb      	strb	r3, [r7, #14]
        uint8_t minIndex = getBMBMinVoltIndex(bmb_index);
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fbbf 	bl	8001334 <getBMBMinVoltIndex>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	737b      	strb	r3, [r7, #13]
        uint16_t maxVoltage = getBMBVoltage(bmb_index, maxIndex);
 8001bba:	7bba      	ldrb	r2, [r7, #14]
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fc05 	bl	80013d0 <getBMBVoltage>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	817b      	strh	r3, [r7, #10]
        uint16_t minVoltage = getBMBVoltage(bmb_index, minIndex);
 8001bca:	7b7a      	ldrb	r2, [r7, #13]
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fbfd 	bl	80013d0 <getBMBVoltage>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	813b      	strh	r3, [r7, #8]

        if (maxVoltage > maxCellVoltage) {
 8001bda:	897a      	ldrh	r2, [r7, #10]
 8001bdc:	8abb      	ldrh	r3, [r7, #20]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d905      	bls.n	8001bee <sendBMSMinMaxCellVoltage+0x62>
            maxCellVoltage = maxVoltage;
 8001be2:	897b      	ldrh	r3, [r7, #10]
 8001be4:	82bb      	strh	r3, [r7, #20]
            maxCellVoltageBMBNum = bmb_index;
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	74bb      	strb	r3, [r7, #18]
            maxCellVoltageIndex = maxIndex;
 8001bea:	7bbb      	ldrb	r3, [r7, #14]
 8001bec:	743b      	strb	r3, [r7, #16]
        }

        if (minVoltage < minCellVoltage) {
 8001bee:	893a      	ldrh	r2, [r7, #8]
 8001bf0:	8afb      	ldrh	r3, [r7, #22]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d205      	bcs.n	8001c02 <sendBMSMinMaxCellVoltage+0x76>
            minCellVoltage = minVoltage;
 8001bf6:	893b      	ldrh	r3, [r7, #8]
 8001bf8:	82fb      	strh	r3, [r7, #22]
            minCellVoltageBMBNum = bmb_index;
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	74fb      	strb	r3, [r7, #19]
            minCellVoltageIndex = minIndex;
 8001bfe:	7b7b      	ldrb	r3, [r7, #13]
 8001c00:	747b      	strb	r3, [r7, #17]
    for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	3301      	adds	r3, #1
 8001c06:	73fb      	strb	r3, [r7, #15]
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0c9      	beq.n	8001ba2 <sendBMSMinMaxCellVoltage+0x16>
        }
    }

    cmr_canBMSMinMaxCellVoltage_t BMSBMBMinMaxVoltage = {
 8001c0e:	8afb      	ldrh	r3, [r7, #22]
 8001c10:	803b      	strh	r3, [r7, #0]
 8001c12:	8abb      	ldrh	r3, [r7, #20]
 8001c14:	807b      	strh	r3, [r7, #2]
 8001c16:	7cfb      	ldrb	r3, [r7, #19]
 8001c18:	713b      	strb	r3, [r7, #4]
 8001c1a:	7c7b      	ldrb	r3, [r7, #17]
 8001c1c:	717b      	strb	r3, [r7, #5]
 8001c1e:	7cbb      	ldrb	r3, [r7, #18]
 8001c20:	71bb      	strb	r3, [r7, #6]
 8001c22:	7c3b      	ldrb	r3, [r7, #16]
 8001c24:	71fb      	strb	r3, [r7, #7]
        .maxVoltageBMBNum = maxCellVoltageBMBNum,
        .minVoltageCellNum = minCellVoltageIndex,
        .maxVoltageCellNum = maxCellVoltageIndex,
    };

    canTX(CMR_CANID_HVC_MIN_MAX_CELL_VOLTAGE, &BMSBMBMinMaxVoltage, sizeof(BMSBMBMinMaxVoltage), canTX200Hz_period_ms);
 8001c26:	2305      	movs	r3, #5
 8001c28:	4639      	mov	r1, r7
 8001c2a:	2208      	movs	r2, #8
 8001c2c:	f44f 7044 	mov.w	r0, #784	; 0x310
 8001c30:	f7ff fe82 	bl	8001938 <canTX>
}
 8001c34:	bf00      	nop
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <sendBMSMinMaxCellTemp>:

static void sendBMSMinMaxCellTemp(void) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
    uint16_t minCellTemp = UINT16_MAX;
 8001c42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c46:	82fb      	strh	r3, [r7, #22]
    uint16_t maxCellTemp = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	82bb      	strh	r3, [r7, #20]
	uint8_t maxCellTempBMBNum;
	
	uint8_t minCellTempIndex;
	uint8_t maxCellTempIndex;

    for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	e032      	b.n	8001cb8 <sendBMSMinMaxCellTemp+0x7c>
        uint8_t maxIndex = getBMBMaxTempIndex(bmb_index);
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fad7 	bl	8001208 <getBMBMaxTempIndex>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	73bb      	strb	r3, [r7, #14]
        uint8_t minIndex = getBMBMinTempIndex(bmb_index);
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fb05 	bl	8001270 <getBMBMinTempIndex>
 8001c66:	4603      	mov	r3, r0
 8001c68:	737b      	strb	r3, [r7, #13]
        uint16_t maxTemp = getBMBTemp(bmb_index, maxIndex);
 8001c6a:	7bba      	ldrb	r2, [r7, #14]
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fb8f 	bl	8001394 <getBMBTemp>
 8001c76:	4603      	mov	r3, r0
 8001c78:	817b      	strh	r3, [r7, #10]
        uint16_t minTemp = getBMBTemp(bmb_index, minIndex);
 8001c7a:	7b7a      	ldrb	r2, [r7, #13]
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fb87 	bl	8001394 <getBMBTemp>
 8001c86:	4603      	mov	r3, r0
 8001c88:	813b      	strh	r3, [r7, #8]

        if (maxTemp > maxCellTemp) {
 8001c8a:	897a      	ldrh	r2, [r7, #10]
 8001c8c:	8abb      	ldrh	r3, [r7, #20]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d905      	bls.n	8001c9e <sendBMSMinMaxCellTemp+0x62>
            maxCellTemp = maxTemp;
 8001c92:	897b      	ldrh	r3, [r7, #10]
 8001c94:	82bb      	strh	r3, [r7, #20]
            maxCellTempBMBNum = bmb_index;
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	74bb      	strb	r3, [r7, #18]
            maxCellTempIndex = maxIndex;
 8001c9a:	7bbb      	ldrb	r3, [r7, #14]
 8001c9c:	743b      	strb	r3, [r7, #16]
        }

        if (minTemp < minCellTemp) {
 8001c9e:	893a      	ldrh	r2, [r7, #8]
 8001ca0:	8afb      	ldrh	r3, [r7, #22]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d205      	bcs.n	8001cb2 <sendBMSMinMaxCellTemp+0x76>
            minCellTemp = minTemp;
 8001ca6:	893b      	ldrh	r3, [r7, #8]
 8001ca8:	82fb      	strh	r3, [r7, #22]
            minCellTempBMBNum = bmb_index;
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	74fb      	strb	r3, [r7, #19]
            minCellTempIndex = minIndex;
 8001cae:	7b7b      	ldrb	r3, [r7, #13]
 8001cb0:	747b      	strb	r3, [r7, #17]
    for (uint8_t bmb_index = 0; bmb_index < NUM_BMBS; bmb_index++) {
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0c9      	beq.n	8001c52 <sendBMSMinMaxCellTemp+0x16>
        }
    }

    cmr_canBMSMinMaxCellTemperature_t BMSBMBMinMaxTemperature = {
 8001cbe:	8afb      	ldrh	r3, [r7, #22]
 8001cc0:	803b      	strh	r3, [r7, #0]
 8001cc2:	8abb      	ldrh	r3, [r7, #20]
 8001cc4:	807b      	strh	r3, [r7, #2]
 8001cc6:	7cfb      	ldrb	r3, [r7, #19]
 8001cc8:	713b      	strb	r3, [r7, #4]
 8001cca:	7c7b      	ldrb	r3, [r7, #17]
 8001ccc:	717b      	strb	r3, [r7, #5]
 8001cce:	7cbb      	ldrb	r3, [r7, #18]
 8001cd0:	71bb      	strb	r3, [r7, #6]
 8001cd2:	7c3b      	ldrb	r3, [r7, #16]
 8001cd4:	71fb      	strb	r3, [r7, #7]
        .maxTempBMBNum = maxCellTempBMBNum,
        .minTempCellNum = minCellTempIndex,
        .maxTempCellNum = maxCellTempIndex,
    };

    canTX(CMR_CANID_HVC_MIN_MAX_CELL_TEMPERATURE, &BMSBMBMinMaxTemperature, sizeof(BMSBMBMinMaxTemperature), canTX10Hz_period_ms);
 8001cd6:	2364      	movs	r3, #100	; 0x64
 8001cd8:	4639      	mov	r1, r7
 8001cda:	2208      	movs	r2, #8
 8001cdc:	f240 3011 	movw	r0, #785	; 0x311
 8001ce0:	f7ff fe2a 	bl	8001938 <canTX>
}
 8001ce4:	bf00      	nop
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <sendBMSLowVoltage>:

static void sendBMSLowVoltage(void) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
    cmr_canBMSLowVoltage_t BMSLowVoltage = {
        .ibatt_mA = (getSafetymillivolts()*15)/2000, // Convert mA to 2/15th mA //TODO: Gustav change this back?
        .iDCDC_mA =0,
        .vAIR_mV = (getAIRmillivolts()*15)/2000, // Convert mV to 2/15th V
        .vbatt_mV= (getLVmillivolts()*15/2000), // Convert mV to 2/15th V
 8001cf2:	f000 fb27 	bl	8002344 <getLVmillivolts>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	4a18      	ldr	r2, [pc, #96]	; (8001d60 <sendBMSLowVoltage+0x74>)
 8001d00:	fb82 1203 	smull	r1, r2, r2, r3
 8001d04:	11d2      	asrs	r2, r2, #7
 8001d06:	17db      	asrs	r3, r3, #31
 8001d08:	1ad3      	subs	r3, r2, r3
    cmr_canBMSLowVoltage_t BMSLowVoltage = {
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	713b      	strb	r3, [r7, #4]
        .vAIR_mV = (getAIRmillivolts()*15)/2000, // Convert mV to 2/15th V
 8001d0e:	f000 fb25 	bl	800235c <getAIRmillivolts>
 8001d12:	4602      	mov	r2, r0
 8001d14:	4613      	mov	r3, r2
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	1a9b      	subs	r3, r3, r2
 8001d1a:	4a11      	ldr	r2, [pc, #68]	; (8001d60 <sendBMSLowVoltage+0x74>)
 8001d1c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d20:	11d2      	asrs	r2, r2, #7
 8001d22:	17db      	asrs	r3, r3, #31
 8001d24:	1ad3      	subs	r3, r2, r3
    cmr_canBMSLowVoltage_t BMSLowVoltage = {
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	717b      	strb	r3, [r7, #5]
        .ibatt_mA = (getSafetymillivolts()*15)/2000, // Convert mA to 2/15th mA //TODO: Gustav change this back?
 8001d2a:	f000 fb23 	bl	8002374 <getSafetymillivolts>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	4613      	mov	r3, r2
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	1a9b      	subs	r3, r3, r2
 8001d36:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <sendBMSLowVoltage+0x74>)
 8001d38:	fb82 1203 	smull	r1, r2, r2, r3
 8001d3c:	11d2      	asrs	r2, r2, #7
 8001d3e:	17db      	asrs	r3, r3, #31
 8001d40:	1ad3      	subs	r3, r2, r3
    cmr_canBMSLowVoltage_t BMSLowVoltage = {
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	71bb      	strb	r3, [r7, #6]
 8001d46:	2300      	movs	r3, #0
 8001d48:	71fb      	strb	r3, [r7, #7]
    };
    (void) BMSLowVoltage;

    canTX(CMR_CANID_HVC_LOW_VOLTAGE, &BMSLowVoltage, sizeof(BMSLowVoltage), canTX100Hz_period_ms);
 8001d4a:	230a      	movs	r3, #10
 8001d4c:	1d39      	adds	r1, r7, #4
 8001d4e:	2204      	movs	r2, #4
 8001d50:	f240 3003 	movw	r0, #771	; 0x303
 8001d54:	f7ff fdf0 	bl	8001938 <canTX>
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	10624dd3 	.word	0x10624dd3

08001d64 <sendAllBMBVoltages>:

static void sendAllBMBVoltages(void) {
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
//        canTX(CMR_CANID_HVC_BMB_0_STATUS_VOLTAGE_2 + (bmbIndex << 4), &volt2, sizeof(volt2), canTX1Hz_period_ms);
//        canTX(CMR_CANID_HVC_BMB_0_STATUS_TEMP_0 + (bmbIndex << 4), &temp0, sizeof(temp0), canTX1Hz_period_ms);
//        canTX(CMR_CANID_HVC_BMB_0_STATUS_TEMP_1 + (bmbIndex << 4), &temp1, sizeof(temp1), canTX1Hz_period_ms);
//        canTX(CMR_CANID_HVC_BMB_0_STATUS_TEMP_2 + (bmbIndex << 4), &temp2, sizeof(temp2), canTX1Hz_period_ms);
//    }
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <gpioInit>:
};

/**
 * @brief Initializes the GPIO interface.
 */
void gpioInit(void) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
    cmr_gpioPinInit(
 8001d78:	210b      	movs	r1, #11
 8001d7a:	4802      	ldr	r0, [pc, #8]	; (8001d84 <gpioInit+0x10>)
 8001d7c:	f001 fd12 	bl	80037a4 <cmr_gpioPinInit>
        gpioPinConfigs, sizeof(gpioPinConfigs) / sizeof(gpioPinConfigs[0])
    );
}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	0800d57c 	.word	0x0800d57c

08001d88 <i2cInit>:
// current config of the selectIO (cause we don't want to overwrite the top LED bit)
static uint8_t selectIOCurrent = 0x0;

static cmr_i2c_t bmb_i2c;

bool i2cInit(void) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af06      	add	r7, sp, #24
    cmr_i2cDmaInit(&bmb_i2c, I2C1,
 8001d8e:	4b40      	ldr	r3, [pc, #256]	; (8001e90 <i2cInit+0x108>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d96:	9205      	str	r2, [sp, #20]
 8001d98:	4a3e      	ldr	r2, [pc, #248]	; (8001e94 <i2cInit+0x10c>)
 8001d9a:	9204      	str	r2, [sp, #16]
 8001d9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001da0:	9203      	str	r2, [sp, #12]
 8001da2:	4a3c      	ldr	r2, [pc, #240]	; (8001e94 <i2cInit+0x10c>)
 8001da4:	9202      	str	r2, [sp, #8]
 8001da6:	2200      	movs	r2, #0
 8001da8:	9201      	str	r2, [sp, #4]
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	4b3a      	ldr	r3, [pc, #232]	; (8001e98 <i2cInit+0x110>)
 8001dae:	4a3b      	ldr	r2, [pc, #236]	; (8001e9c <i2cInit+0x114>)
 8001db0:	493b      	ldr	r1, [pc, #236]	; (8001ea0 <i2cInit+0x118>)
 8001db2:	483c      	ldr	r0, [pc, #240]	; (8001ea4 <i2cInit+0x11c>)
 8001db4:	f001 fe50 	bl	8003a58 <cmr_i2cDmaInit>
                GPIOB, GPIO_PIN_9); // data

//    for (int i = 0; i < 5000*100; i++)
//    	__NOP();
    //HAL_Delay(2000);
    TickType_t xLastWakeTime = xTaskGetTickCount();
 8001db8:	f003 fd66 	bl	8005888 <xTaskGetTickCount>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	607b      	str	r3, [r7, #4]
    vTaskDelayUntil(&xLastWakeTime, 2000);
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f003 fbe8 	bl	800559c <vTaskDelayUntil>

    // TODO: I2C IS GOING TO NEED DELAYS
    for (int bmb = 0; bmb < I2C_NUM_BMBS; bmb++) {
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	e055      	b.n	8001e7e <i2cInit+0xf6>
        for (int side = 1; side < 2; side++) { //TODO: CHANGE THIS BACK
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	e03f      	b.n	8001e58 <i2cInit+0xd0>
            if (!i2c_enableI2CMux(bmb, side))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	4611      	mov	r1, r2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f860 	bl	8001ea8 <i2c_enableI2CMux>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f083 0301 	eor.w	r3, r3, #1
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <i2cInit+0x70>
            	return false;
 8001df4:	2300      	movs	r3, #0
 8001df6:	e046      	b.n	8001e86 <i2cInit+0xfe>
            // verify mux is correctly set
            uint8_t recv_en, recv_side;
            if (!i2c_readI2CMux(bmb, &recv_en, &recv_side))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	1cba      	adds	r2, r7, #2
 8001dfe:	1cf9      	adds	r1, r7, #3
 8001e00:	4618      	mov	r0, r3
 8001e02:	f000 f877 	bl	8001ef4 <i2c_readI2CMux>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f083 0301 	eor.w	r3, r3, #1
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <i2cInit+0x8e>
            	return false;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e037      	b.n	8001e86 <i2cInit+0xfe>
            // TODO: Make error messages for root cause, not just
            // all false
            if (!(recv_en && recv_side == side))
 8001e16:	78fb      	ldrb	r3, [r7, #3]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d004      	beq.n	8001e26 <i2cInit+0x9e>
 8001e1c:	78bb      	ldrb	r3, [r7, #2]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d001      	beq.n	8001e2a <i2cInit+0xa2>
            	return false;
 8001e26:	2300      	movs	r3, #0
 8001e28:	e02d      	b.n	8001e86 <i2cInit+0xfe>
            if (!i2c_configSelectMux())
 8001e2a:	f000 f8b1 	bl	8001f90 <i2c_configSelectMux>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f083 0301 	eor.w	r3, r3, #1
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <i2cInit+0xb6>
            	return false;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e023      	b.n	8001e86 <i2cInit+0xfe>
            if (!i2c_configADC())
 8001e3e:	f000 f919 	bl	8002074 <i2c_configADC>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f083 0301 	eor.w	r3, r3, #1
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <i2cInit+0xca>
            	return false;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e019      	b.n	8001e86 <i2cInit+0xfe>
        for (int side = 1; side < 2; side++) { //TODO: CHANGE THIS BACK
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	3301      	adds	r3, #1
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	ddbc      	ble.n	8001dd8 <i2cInit+0x50>
        }
        if (!i2c_disableI2CMux(bmb))
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f874 	bl	8001f50 <i2c_disableI2CMux>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	f083 0301 	eor.w	r3, r3, #1
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <i2cInit+0xf0>
        	return false;
 8001e74:	2300      	movs	r3, #0
 8001e76:	e006      	b.n	8001e86 <i2cInit+0xfe>
    for (int bmb = 0; bmb < I2C_NUM_BMBS; bmb++) {
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	dda6      	ble.n	8001dd2 <i2cInit+0x4a>
    }
    return true;
 8001e84:	2301      	movs	r3, #1
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	0800d68c 	.word	0x0800d68c
 8001e94:	40020400 	.word	0x40020400
 8001e98:	40026088 	.word	0x40026088
 8001e9c:	400260a0 	.word	0x400260a0
 8001ea0:	40005400 	.word	0x40005400
 8001ea4:	2001a188 	.word	0x2001a188

08001ea8 <i2c_enableI2CMux>:
//        }
//    }
//    return 0;
//}

bool i2c_enableI2CMux(uint8_t bmb, uint8_t side) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	4603      	mov	r3, r0
 8001eb0:	460a      	mov	r2, r1
 8001eb2:	71fb      	strb	r3, [r7, #7]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	71bb      	strb	r3, [r7, #6]
    // bit 2 is enable bit, bit 1 & 0 is the side (either 00 or 01)
    uint8_t data = 0x4 | side;
 8001eb8:	79bb      	ldrb	r3, [r7, #6]
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	73fb      	strb	r3, [r7, #15]
    if(cmr_i2cDmaTX(&bmb_i2c, BMS_MUX_BASE_ADDR + bmb, &data, 1, I2C_TIMEOUT) != 0) {
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3370      	adds	r3, #112	; 0x70
 8001ec8:	b299      	uxth	r1, r3
 8001eca:	f107 020f 	add.w	r2, r7, #15
 8001ece:	2301      	movs	r3, #1
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	4806      	ldr	r0, [pc, #24]	; (8001ef0 <i2c_enableI2CMux+0x48>)
 8001ed6:	f001 ff97 	bl	8003e08 <cmr_i2cDmaTX>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <i2c_enableI2CMux+0x3c>
        return false;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e000      	b.n	8001ee6 <i2c_enableI2CMux+0x3e>
    }
    return true;
 8001ee4:	2301      	movs	r3, #1
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	2001a188 	.word	0x2001a188

08001ef4 <i2c_readI2CMux>:

bool i2c_readI2CMux(uint8_t bmb, uint8_t *enabled, uint8_t *side) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af02      	add	r7, sp, #8
 8001efa:	4603      	mov	r3, r0
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
 8001f00:	73fb      	strb	r3, [r7, #15]
    // bit 2 is enable bit, bit 1 & 0 is the side (either 00 or 01)
    uint8_t buf;
    if(cmr_i2cDmaRX(&bmb_i2c, BMS_MUX_BASE_ADDR + bmb, &buf, 1, I2C_TIMEOUT) != 0) {
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	3370      	adds	r3, #112	; 0x70
 8001f08:	b299      	uxth	r1, r3
 8001f0a:	f107 0217 	add.w	r2, r7, #23
 8001f0e:	2301      	movs	r3, #1
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	2301      	movs	r3, #1
 8001f14:	480d      	ldr	r0, [pc, #52]	; (8001f4c <i2c_readI2CMux+0x58>)
 8001f16:	f001 ffb1 	bl	8003e7c <cmr_i2cDmaRX>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <i2c_readI2CMux+0x30>
        return false;
 8001f20:	2300      	movs	r3, #0
 8001f22:	e00e      	b.n	8001f42 <i2c_readI2CMux+0x4e>
    }
    *enabled = (buf >> 2) & 0x1;
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
 8001f26:	089b      	lsrs	r3, r3, #2
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	701a      	strb	r2, [r3, #0]
    *side = buf & 0x1;
 8001f34:	7dfb      	ldrb	r3, [r7, #23]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	701a      	strb	r2, [r3, #0]
    return true;
 8001f40:	2301      	movs	r3, #1
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2001a188 	.word	0x2001a188

08001f50 <i2c_disableI2CMux>:

bool i2c_disableI2CMux(uint8_t bmb) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
    // bit 2 is enable bit
    uint8_t data = 0x0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	73fb      	strb	r3, [r7, #15]
    if(cmr_i2cDmaTX(&bmb_i2c, BMS_MUX_BASE_ADDR + bmb, &data, 1, I2C_TIMEOUT) != 0) {
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	3370      	adds	r3, #112	; 0x70
 8001f64:	b299      	uxth	r1, r3
 8001f66:	f107 020f 	add.w	r2, r7, #15
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2301      	movs	r3, #1
 8001f70:	4806      	ldr	r0, [pc, #24]	; (8001f8c <i2c_disableI2CMux+0x3c>)
 8001f72:	f001 ff49 	bl	8003e08 <cmr_i2cDmaTX>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <i2c_disableI2CMux+0x30>
        return false;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	e000      	b.n	8001f82 <i2c_disableI2CMux+0x32>
    }
    return true;
 8001f80:	2301      	movs	r3, #1
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	2001a188 	.word	0x2001a188

08001f90 <i2c_configSelectMux>:

bool i2c_configSelectMux() {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af02      	add	r7, sp, #8
    // select control register, set them all to output
    uint8_t data[2] = {0x3, 0x00};
 8001f96:	2303      	movs	r3, #3
 8001f98:	80bb      	strh	r3, [r7, #4]
    //i2c_flipEndianness(data, 2);
    if (cmr_i2cDmaTX(&bmb_i2c, BMS_SELECT_IO_ADDR, (uint8_t*)&data, 2, I2C_TIMEOUT) != 0) {
 8001f9a:	1d3a      	adds	r2, r7, #4
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	2141      	movs	r1, #65	; 0x41
 8001fa4:	4806      	ldr	r0, [pc, #24]	; (8001fc0 <i2c_configSelectMux+0x30>)
 8001fa6:	f001 ff2f 	bl	8003e08 <cmr_i2cDmaTX>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <i2c_configSelectMux+0x24>
        return false;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	e000      	b.n	8001fb6 <i2c_configSelectMux+0x26>
    }
    return true;
 8001fb4:	2301      	movs	r3, #1
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	2001a188 	.word	0x2001a188

08001fc4 <i2c_select4MuxChannel>:

bool i2c_select4MuxChannel(uint8_t channel) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af02      	add	r7, sp, #8
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
    // 0x1 is output port, we set select lines of mux
    // mux only uses last 2 bits, the top 4th bit is the LED blinking
    // save top 2 bits, overwrite bottom 2 bits
    selectIOCurrent = (selectIOCurrent & 0xC) | channel;
 8001fce:	4b12      	ldr	r3, [pc, #72]	; (8002018 <i2c_select4MuxChannel+0x54>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	b25b      	sxtb	r3, r3
 8001fd4:	f003 030c 	and.w	r3, r3, #12
 8001fd8:	b25a      	sxtb	r2, r3
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	b25b      	sxtb	r3, r3
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <i2c_select4MuxChannel+0x54>)
 8001fe6:	701a      	strb	r2, [r3, #0]
    uint8_t outData[2] = {0x1, selectIOCurrent};
 8001fe8:	2301      	movs	r3, #1
 8001fea:	733b      	strb	r3, [r7, #12]
 8001fec:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <i2c_select4MuxChannel+0x54>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	737b      	strb	r3, [r7, #13]
    //i2c_flipEndianness(outData, 2);
    if(cmr_i2cDmaTX(&bmb_i2c, BMS_SELECT_IO_ADDR, (uint8_t*)&outData, 2, I2C_TIMEOUT) != 0) {
 8001ff2:	f107 020c 	add.w	r2, r7, #12
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	2141      	movs	r1, #65	; 0x41
 8001ffe:	4807      	ldr	r0, [pc, #28]	; (800201c <i2c_select4MuxChannel+0x58>)
 8002000:	f001 ff02 	bl	8003e08 <cmr_i2cDmaTX>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <i2c_select4MuxChannel+0x4a>
        return false;
 800200a:	2300      	movs	r3, #0
 800200c:	e000      	b.n	8002010 <i2c_select4MuxChannel+0x4c>
    }
    return true;
 800200e:	2301      	movs	r3, #1
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	2001a184 	.word	0x2001a184
 800201c:	2001a188 	.word	0x2001a188

08002020 <i2c_selectMuxBlink>:

bool i2c_selectMuxBlink() {
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af02      	add	r7, sp, #8
    // flip top 2 bits, don't flip bottom 2 bits
    selectIOCurrent = (~selectIOCurrent & 0xC) | (selectIOCurrent & 0x3);
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <i2c_selectMuxBlink+0x4c>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	b25b      	sxtb	r3, r3
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	b25b      	sxtb	r3, r3
 8002032:	f083 030c 	eor.w	r3, r3, #12
 8002036:	b25b      	sxtb	r3, r3
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <i2c_selectMuxBlink+0x4c>)
 800203c:	701a      	strb	r2, [r3, #0]
    uint8_t outData[2] = {0x1, selectIOCurrent};
 800203e:	2301      	movs	r3, #1
 8002040:	713b      	strb	r3, [r7, #4]
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <i2c_selectMuxBlink+0x4c>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	717b      	strb	r3, [r7, #5]
    //i2c_flipEndianness(outData, 2);
    if(cmr_i2cDmaTX(&bmb_i2c, BMS_SELECT_IO_ADDR, (uint8_t*)&outData, 2, I2C_TIMEOUT) != 0) {
 8002048:	1d3a      	adds	r2, r7, #4
 800204a:	2301      	movs	r3, #1
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	2302      	movs	r3, #2
 8002050:	2141      	movs	r1, #65	; 0x41
 8002052:	4807      	ldr	r0, [pc, #28]	; (8002070 <i2c_selectMuxBlink+0x50>)
 8002054:	f001 fed8 	bl	8003e08 <cmr_i2cDmaTX>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <i2c_selectMuxBlink+0x42>
        return false;
 800205e:	2300      	movs	r3, #0
 8002060:	e000      	b.n	8002064 <i2c_selectMuxBlink+0x44>
    }
    return true;
 8002062:	2301      	movs	r3, #1
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	2001a184 	.word	0x2001a184
 8002070:	2001a188 	.word	0x2001a188

08002074 <i2c_configADC>:

bool i2c_configADC() {
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af02      	add	r7, sp, #8
	// 1111 means {setup_bit, internal_ref, ref_output, ref_always_on}
	// 0010 means {internal_clock, unipolar, no_action, X}
	uint8_t setupByte = 0xF0;
 800207a:	23f0      	movs	r3, #240	; 0xf0
 800207c:	71fb      	strb	r3, [r7, #7]
	// 0_00_0111_1 means {config_bit, scan_all, scan_to_A7, single_ended}
	uint8_t configByte = 0x1F;
 800207e:	231f      	movs	r3, #31
 8002080:	71bb      	strb	r3, [r7, #6]
	if (cmr_i2cDmaTX(&bmb_i2c, BMS_ADC_ADDR, &setupByte, 1, I2C_TIMEOUT) != 0) {
 8002082:	1dfa      	adds	r2, r7, #7
 8002084:	2301      	movs	r3, #1
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	2301      	movs	r3, #1
 800208a:	2133      	movs	r1, #51	; 0x33
 800208c:	480c      	ldr	r0, [pc, #48]	; (80020c0 <i2c_configADC+0x4c>)
 800208e:	f001 febb 	bl	8003e08 <cmr_i2cDmaTX>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <i2c_configADC+0x28>
		return false;
 8002098:	2300      	movs	r3, #0
 800209a:	e00d      	b.n	80020b8 <i2c_configADC+0x44>
	}
	if (cmr_i2cDmaTX(&bmb_i2c, BMS_ADC_ADDR, &configByte, 1, I2C_TIMEOUT) != 0) {
 800209c:	1dba      	adds	r2, r7, #6
 800209e:	2301      	movs	r3, #1
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	2301      	movs	r3, #1
 80020a4:	2133      	movs	r1, #51	; 0x33
 80020a6:	4806      	ldr	r0, [pc, #24]	; (80020c0 <i2c_configADC+0x4c>)
 80020a8:	f001 feae 	bl	8003e08 <cmr_i2cDmaTX>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <i2c_configADC+0x42>
		return false;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e000      	b.n	80020b8 <i2c_configADC+0x44>
	}
	return true;
 80020b6:	2301      	movs	r3, #1
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	2001a188 	.word	0x2001a188

080020c4 <i2c_scanADC>:

bool i2c_scanADC(int16_t adcResponse[]) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08a      	sub	sp, #40	; 0x28
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	6078      	str	r0, [r7, #4]
	uint8_t buffer[16];
	//TODO: WHY IS THIS 14
	if (cmr_i2cDmaRX(&bmb_i2c, BMS_ADC_ADDR, buffer, 14, I2C_TIMEOUT) != 0) {
 80020cc:	f107 020c 	add.w	r2, r7, #12
 80020d0:	2301      	movs	r3, #1
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	230e      	movs	r3, #14
 80020d6:	2133      	movs	r1, #51	; 0x33
 80020d8:	481d      	ldr	r0, [pc, #116]	; (8002150 <i2c_scanADC+0x8c>)
 80020da:	f001 fecf 	bl	8003e7c <cmr_i2cDmaRX>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <i2c_scanADC+0x24>
		return false;
 80020e4:	2300      	movs	r3, #0
 80020e6:	e02f      	b.n	8002148 <i2c_scanADC+0x84>
	}
    //i2c_flipEndianness(buffer, 16);
	for (int i = 0; i < 7; i++) {
 80020e8:	2300      	movs	r3, #0
 80020ea:	61fb      	str	r3, [r7, #28]
 80020ec:	e028      	b.n	8002140 <i2c_scanADC+0x7c>
		// top 6 bits should be 1
		if ((buffer[i << 1] & 0xFC) != 0xFC) {
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	3320      	adds	r3, #32
 80020f4:	443b      	add	r3, r7
 80020f6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80020fa:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80020fe:	2bfc      	cmp	r3, #252	; 0xfc
 8002100:	d001      	beq.n	8002106 <i2c_scanADC+0x42>
			return false;
 8002102:	2300      	movs	r3, #0
 8002104:	e020      	b.n	8002148 <i2c_scanADC+0x84>
		}
		adcResponse[i] = ((((uint16_t) buffer[i << 1]) << 8)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	3320      	adds	r3, #32
 800210c:	443b      	add	r3, r7
 800210e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002112:	021b      	lsls	r3, r3, #8
				| (buffer[(i << 1) + 1])) & 0x3FF;
 8002114:	b21a      	sxth	r2, r3
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	3301      	adds	r3, #1
 800211c:	3320      	adds	r3, #32
 800211e:	443b      	add	r3, r7
 8002120:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002124:	b21b      	sxth	r3, r3
 8002126:	4313      	orrs	r3, r2
 8002128:	b21a      	sxth	r2, r3
		adcResponse[i] = ((((uint16_t) buffer[i << 1]) << 8)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	440b      	add	r3, r1
				| (buffer[(i << 1) + 1])) & 0x3FF;
 8002132:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002136:	b212      	sxth	r2, r2
		adcResponse[i] = ((((uint16_t) buffer[i << 1]) << 8)
 8002138:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 7; i++) {
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3301      	adds	r3, #1
 800213e:	61fb      	str	r3, [r7, #28]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	2b06      	cmp	r3, #6
 8002144:	ddd3      	ble.n	80020ee <i2c_scanADC+0x2a>
	}
	return true;
 8002146:	2301      	movs	r3, #1
}
 8002148:	4618      	mov	r0, r3
 800214a:	3720      	adds	r7, #32
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	2001a188 	.word	0x2001a188

08002154 <statusLED>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void statusLED(void *pvParameters) {
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
    (void) pvParameters;

    cmr_gpioWrite(GPIO_MCU_LED, 0);
 800215c:	2100      	movs	r1, #0
 800215e:	2000      	movs	r0, #0
 8002160:	f001 fb56 	bl	8003810 <cmr_gpioWrite>

    TickType_t lastWakeTime = xTaskGetTickCount();
 8002164:	f003 fb90 	bl	8005888 <xTaskGetTickCount>
 8002168:	4603      	mov	r3, r0
 800216a:	60fb      	str	r3, [r7, #12]
    while (1) {
        cmr_gpioToggle(GPIO_MCU_LED);
 800216c:	2000      	movs	r0, #0
 800216e:	f001 fb8d 	bl	800388c <cmr_gpioToggle>

        vTaskDelayUntil(&lastWakeTime, statusLED_period_ms);
 8002172:	22fa      	movs	r2, #250	; 0xfa
 8002174:	f107 030c 	add.w	r3, r7, #12
 8002178:	4611      	mov	r1, r2
 800217a:	4618      	mov	r0, r3
 800217c:	f003 fa0e 	bl	800559c <vTaskDelayUntil>
        cmr_gpioToggle(GPIO_MCU_LED);
 8002180:	e7f4      	b.n	800216c <statusLED+0x18>
	...

08002184 <main>:
 *
 * Device configuration and task initialization should be performed here.
 *
 * @return Does not return.
 */
int main(void) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af02      	add	r7, sp, #8
	// Enable TRCENA
	DEMCR |= ( 1 << 24);
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <main+0x70>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a19      	ldr	r2, [pc, #100]	; (80021f4 <main+0x70>)
 8002190:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002194:	6013      	str	r3, [r2, #0]
	// Enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8002196:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <main+0x74>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a17      	ldr	r2, [pc, #92]	; (80021f8 <main+0x74>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6013      	str	r3, [r2, #0]

    // System initialization.
    uint32_t *ACTLR = (uint32_t *)0xE000E008;
 80021a2:	4b16      	ldr	r3, [pc, #88]	; (80021fc <main+0x78>)
 80021a4:	607b      	str	r3, [r7, #4]


    *ACTLR |= 2; // disable write buffering
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f043 0202 	orr.w	r2, r3, #2
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	601a      	str	r2, [r3, #0]

    // System initialization.

	HAL_Init();
 80021b2:	f004 f927 	bl	8006404 <HAL_Init>
    cmr_rccSystemClockEnable();
 80021b6:	f001 fec4 	bl	8003f42 <cmr_rccSystemClockEnable>
    // cmr_rccSystemInternalClockEnable();

    // Peripheral configuration.
    gpioInit();
 80021ba:	f7ff fddb 	bl	8001d74 <gpioInit>
    canInit();
 80021be:	f7ff fb55 	bl	800186c <canInit>
    adcInit();
 80021c2:	f7ff f9dd 	bl	8001580 <adcInit>
    sensorsInit();
 80021c6:	f000 f89f 	bl	8002308 <sensorsInit>
//    wwdgInit();

    cmr_taskInit(
 80021ca:	2202      	movs	r2, #2
 80021cc:	2300      	movs	r3, #0
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <main+0x7c>)
 80021d2:	490c      	ldr	r1, [pc, #48]	; (8002204 <main+0x80>)
 80021d4:	480c      	ldr	r0, [pc, #48]	; (8002208 <main+0x84>)
 80021d6:	f002 f817 	bl	8004208 <cmr_taskInit>
        statusLED,
        NULL
    );

    // BMB_task
    cmr_taskInit(
 80021da:	2207      	movs	r2, #7
 80021dc:	2300      	movs	r3, #0
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <main+0x88>)
 80021e2:	490b      	ldr	r1, [pc, #44]	; (8002210 <main+0x8c>)
 80021e4:	480b      	ldr	r0, [pc, #44]	; (8002214 <main+0x90>)
 80021e6:	f002 f80f 	bl	8004208 <cmr_taskInit>
//        setState_priority,
//        vSetStateTask,
//        NULL
//    );

    vTaskStartScheduler();
 80021ea:	f003 fa49 	bl	8005680 <vTaskStartScheduler>
    cmr_panic("vTaskStartScheduler returned!");
 80021ee:	480a      	ldr	r0, [pc, #40]	; (8002218 <main+0x94>)
 80021f0:	f001 fea1 	bl	8003f36 <cmr_panic>
 80021f4:	e000edfc 	.word	0xe000edfc
 80021f8:	e0000e00 	.word	0xe0000e00
 80021fc:	e000e008 	.word	0xe000e008
 8002200:	08002155 	.word	0x08002155
 8002204:	0800b904 	.word	0x0800b904
 8002208:	2001a334 	.word	0x2001a334
 800220c:	08001151 	.word	0x08001151
 8002210:	0800b910 	.word	0x0800b910
 8002214:	2001f614 	.word	0x2001f614
 8002218:	0800b920 	.word	0x0800b920

0800221c <sampleADCSensor>:
 *
 * @param sensor The ADC sensor to sample.
 *
 * @return The latest sampled value from the ADC.
 */
static uint32_t sampleADCSensor(const cmr_sensor_t *sensor) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
    sensorChannel_t sensorChannel = sensor - sensors;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a0c      	ldr	r2, [pc, #48]	; (8002258 <sampleADCSensor+0x3c>)
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	10db      	asrs	r3, r3, #3
 800222c:	4a0b      	ldr	r2, [pc, #44]	; (800225c <sampleADCSensor+0x40>)
 800222e:	fb02 f303 	mul.w	r3, r2, r3
 8002232:	73fb      	strb	r3, [r7, #15]
    configASSERT(sensorChannel < SENSOR_CH_LEN);
 8002234:	7bfb      	ldrb	r3, [r7, #15]
 8002236:	2b04      	cmp	r3, #4
 8002238:	d903      	bls.n	8002242 <sampleADCSensor+0x26>
 800223a:	212a      	movs	r1, #42	; 0x2a
 800223c:	4808      	ldr	r0, [pc, #32]	; (8002260 <sampleADCSensor+0x44>)
 800223e:	f001 fe7a 	bl	8003f36 <cmr_panic>
    return adcRead(sensorsADCCHANNELS[sensorChannel]); //* ADCChannelPolarity[ch]; Figure adc polarity
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	4a07      	ldr	r2, [pc, #28]	; (8002264 <sampleADCSensor+0x48>)
 8002246:	5cd3      	ldrb	r3, [r2, r3]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff f9a9 	bl	80015a0 <adcRead>
 800224e:	4603      	mov	r3, r0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	200000e4 	.word	0x200000e4
 800225c:	cccccccd 	.word	0xcccccccd
 8002260:	0800b940 	.word	0x0800b940
 8002264:	0800d684 	.word	0x0800d684

08002268 <ADCtoMV_24v>:
 * @param reading The ADC value to convert.
 *
 * @return Voltage in mV.
 */
// 24v voltage divider is factor of 1.13/14.43
static int32_t ADCtoMV_24v(const cmr_sensor_t *sensor, uint32_t reading) {
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
    (void) sensor;
	
    return ((int32_t) reading) * 7.39;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe f925 	bl	80004c4 <__aeabi_i2d>
 800227a:	a309      	add	r3, pc, #36	; (adr r3, 80022a0 <ADCtoMV_24v+0x38>)
 800227c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002280:	f7fe f98a 	bl	8000598 <__aeabi_dmul>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4610      	mov	r0, r2
 800228a:	4619      	mov	r1, r3
 800228c:	f7fe fb96 	bl	80009bc <__aeabi_d2iz>
 8002290:	4603      	mov	r3, r0

}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	f3af 8000 	nop.w
 80022a0:	28f5c28f 	.word	0x28f5c28f
 80022a4:	401d8f5c 	.word	0x401d8f5c

080022a8 <ADCtoMV_HV>:
 * @param reading The ADC value to convert.
 *
 * @return Voltage in V.
 */
// was determined experimentally
static int32_t ADCtoMV_HV(const cmr_sensor_t *sensor, uint32_t reading) {
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
    (void) sensor;
	
	return (((int32_t) reading) * 268 - 426400);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	f44f 7286 	mov.w	r2, #268	; 0x10c
 80022b8:	fb02 f303 	mul.w	r3, r2, r3
 80022bc:	f5a3 23d0 	sub.w	r3, r3, #425984	; 0x68000
 80022c0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <sensorsUpdate>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void sensorsUpdate(void *pvParameters) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    TickType_t lastWakeTime = xTaskGetTickCount();
 80022d8:	f003 fad6 	bl	8005888 <xTaskGetTickCount>
 80022dc:	4603      	mov	r3, r0
 80022de:	60fb      	str	r3, [r7, #12]
    while (1) {
        vTaskDelayUntil(&lastWakeTime, sensorsUpdate_period_ms);
 80022e0:	2232      	movs	r2, #50	; 0x32
 80022e2:	f107 030c 	add.w	r3, r7, #12
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f003 f957 	bl	800559c <vTaskDelayUntil>

        cmr_sensorListUpdate(&sensorList);
 80022ee:	4805      	ldr	r0, [pc, #20]	; (8002304 <sensorsUpdate+0x34>)
 80022f0:	f001 ff56 	bl	80041a0 <cmr_sensorListUpdate>

        vTaskDelayUntil(&lastWakeTime, sensorsUpdate_period_ms);
 80022f4:	2232      	movs	r2, #50	; 0x32
 80022f6:	f107 030c 	add.w	r3, r7, #12
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f003 f94d 	bl	800559c <vTaskDelayUntil>
        vTaskDelayUntil(&lastWakeTime, sensorsUpdate_period_ms);
 8002302:	e7ed      	b.n	80022e0 <sensorsUpdate+0x10>
 8002304:	200248f4 	.word	0x200248f4

08002308 <sensorsInit>:
}

/**
 * @brief Initializes the sensor interface.
 */
void sensorsInit(void) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af02      	add	r7, sp, #8
    cmr_sensorListInit(
 800230e:	2205      	movs	r2, #5
 8002310:	4907      	ldr	r1, [pc, #28]	; (8002330 <sensorsInit+0x28>)
 8002312:	4808      	ldr	r0, [pc, #32]	; (8002334 <sensorsInit+0x2c>)
 8002314:	f001 ff1f 	bl	8004156 <cmr_sensorListInit>
        &sensorList,
        sensors, sizeof(sensors) / sizeof(sensors[0])
    );

    // Task creation.
    cmr_taskInit(
 8002318:	2201      	movs	r2, #1
 800231a:	2300      	movs	r3, #0
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <sensorsInit+0x30>)
 8002320:	4906      	ldr	r1, [pc, #24]	; (800233c <sensorsInit+0x34>)
 8002322:	4807      	ldr	r0, [pc, #28]	; (8002340 <sensorsInit+0x38>)
 8002324:	f001 ff70 	bl	8004208 <cmr_taskInit>
        "sensors update",
        sensorsUpdate_priority,
        sensorsUpdate,
        NULL
    );
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	200000e4 	.word	0x200000e4
 8002334:	200248f4 	.word	0x200248f4
 8002338:	080022d1 	.word	0x080022d1
 800233c:	0800b984 	.word	0x0800b984
 8002340:	200248fc 	.word	0x200248fc

08002344 <getLVmillivolts>:

// Accessor functions used in the state machine. These casts should be safe because all the feasible values
// for any of these variables should be less than INT_MAX, so the value will be preserved on the cast.
int32_t getLVmillivolts(){
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
    return (int32_t) cmr_sensorListGetValue(&sensorList, SENSOR_CH_V24V);
 8002348:	2100      	movs	r1, #0
 800234a:	4803      	ldr	r0, [pc, #12]	; (8002358 <getLVmillivolts+0x14>)
 800234c:	f001 ff47 	bl	80041de <cmr_sensorListGetValue>
 8002350:	4603      	mov	r3, r0
}
 8002352:	4618      	mov	r0, r3
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	200248f4 	.word	0x200248f4

0800235c <getAIRmillivolts>:

int32_t getAIRmillivolts(){
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
    return ((int32_t) cmr_sensorListGetValue(&sensorList, SENSOR_CH_AIR_POWER));
 8002360:	2101      	movs	r1, #1
 8002362:	4803      	ldr	r0, [pc, #12]	; (8002370 <getAIRmillivolts+0x14>)
 8002364:	f001 ff3b 	bl	80041de <cmr_sensorListGetValue>
 8002368:	4603      	mov	r3, r0
}
 800236a:	4618      	mov	r0, r3
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200248f4 	.word	0x200248f4

08002374 <getSafetymillivolts>:

int32_t getSafetymillivolts(){
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
    return ((int32_t) cmr_sensorListGetValue(&sensorList, SENSOR_CH_SAFETY));
 8002378:	2102      	movs	r1, #2
 800237a:	4803      	ldr	r0, [pc, #12]	; (8002388 <getSafetymillivolts+0x14>)
 800237c:	f001 ff2f 	bl	80041de <cmr_sensorListGetValue>
 8002380:	4603      	mov	r3, r0
}
 8002382:	4618      	mov	r0, r3
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	200248f4 	.word	0x200248f4

0800238c <getHVmillivolts>:

int32_t getHVmillivolts(){
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
    return ((int32_t) cmr_sensorListGetValue(&sensorList, SENSOR_CH_VSENSE));
 8002390:	2103      	movs	r1, #3
 8002392:	4803      	ldr	r0, [pc, #12]	; (80023a0 <getHVmillivolts+0x14>)
 8002394:	f001 ff23 	bl	80041de <cmr_sensorListGetValue>
 8002398:	4603      	mov	r3, r0
}
 800239a:	4618      	mov	r0, r3
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200248f4 	.word	0x200248f4

080023a4 <getHVmilliamps>:

int32_t getHVmilliamps(){
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
    return ((int32_t) cmr_sensorListGetValue(&sensorList, SENSOR_CH_ISENSE));
 80023a8:	2104      	movs	r1, #4
 80023aa:	4803      	ldr	r0, [pc, #12]	; (80023b8 <getHVmilliamps+0x14>)
 80023ac:	f001 ff17 	bl	80041de <cmr_sensorListGetValue>
 80023b0:	4603      	mov	r3, r0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	200248f4 	.word	0x200248f4

080023bc <getState>:

/*
 * External Accessor Functions
 */

cmr_canHVCState_t getState() {
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
    return currentState;
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <getState+0x14>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20029bdc 	.word	0x20029bdc

080023d4 <cmr_adcSample>:
 *
 * @param pvParameters (cmr_adc_t *) The ADC.
 *
 * @return Does not return.
 */
static void cmr_adcSample(void *pvParameters) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
    cmr_adc_t *adc = (cmr_adc_t *) pvParameters;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	613b      	str	r3, [r7, #16]

    TickType_t lastWakeTime = xTaskGetTickCount();
 80023e0:	f003 fa52 	bl	8005888 <xTaskGetTickCount>
 80023e4:	4603      	mov	r3, r0
 80023e6:	60bb      	str	r3, [r7, #8]
    while (1) {
        // ADC set up in discontinuous scan mode.
        // Each `HAL_ADC_Start()` call converts the next-highest-rank channel.
        for (size_t i = 0; i < adc->channelsLen; i++) {
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	e01c      	b.n	8002428 <cmr_adcSample+0x54>
            cmr_adcChannel_t *channel = &(adc->channels[i]);
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	60fb      	str	r3, [r7, #12]

            HAL_ADC_Start(&adc->handle);
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4618      	mov	r0, r3
 8002404:	f004 f8c6 	bl	8006594 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&adc->handle, CMR_ADC_TIMEOUT_MS);
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	2201      	movs	r2, #1
 800240c:	4611      	mov	r1, r2
 800240e:	4618      	mov	r0, r3
 8002410:	f004 f966 	bl	80066e0 <HAL_ADC_PollForConversion>
            channel->value = HAL_ADC_GetValue(&adc->handle);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4618      	mov	r0, r3
 8002418:	f004 f9e6 	bl	80067e8 <HAL_ADC_GetValue>
 800241c:	4602      	mov	r2, r0
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	611a      	str	r2, [r3, #16]
        for (size_t i = 0; i < adc->channelsLen; i++) {
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	3301      	adds	r3, #1
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	429a      	cmp	r2, r3
 8002430:	d3dd      	bcc.n	80023ee <cmr_adcSample+0x1a>
        }

        vTaskDelayUntil(&lastWakeTime, cmr_adcSample_period_ms);
 8002432:	220a      	movs	r2, #10
 8002434:	f107 0308 	add.w	r3, r7, #8
 8002438:	4611      	mov	r1, r2
 800243a:	4618      	mov	r0, r3
 800243c:	f003 f8ae 	bl	800559c <vTaskDelayUntil>
        for (size_t i = 0; i < adc->channelsLen; i++) {
 8002440:	e7d2      	b.n	80023e8 <cmr_adcSample+0x14>
	...

08002444 <cmr_adcConfigChannels>:
/**
 * @brief Initializes ADC channel sequence.
 *
 * @param adc The ADC to configure.
 */
static void cmr_adcConfigChannels(cmr_adc_t *adc) {
 8002444:	b580      	push	{r7, lr}
 8002446:	b08e      	sub	sp, #56	; 0x38
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < adc->channelsLen; i++) {
 800244c:	2300      	movs	r3, #0
 800244e:	637b      	str	r3, [r7, #52]	; 0x34
 8002450:	e03a      	b.n	80024c8 <cmr_adcConfigChannels+0x84>
        const cmr_adcChannel_t *channel = adc->channels + i;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002456:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	633b      	str	r3, [r7, #48]	; 0x30
        if (channel->channel > ADC_CHANNEL_15) {
 8002464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b0f      	cmp	r3, #15
 800246a:	d902      	bls.n	8002472 <cmr_adcConfigChannels+0x2e>
            cmr_panic("Invalid ADC channel!");
 800246c:	481b      	ldr	r0, [pc, #108]	; (80024dc <cmr_adcConfigChannels+0x98>)
 800246e:	f001 fd62 	bl	8003f36 <cmr_panic>
        }

        // Rank goes from 1 to 16
        ADC_ChannelConfTypeDef channelConfig = _platform_adcChannelConfig(channel, (uint32_t) i+1);
 8002472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	f107 0320 	add.w	r3, r7, #32
 800247a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800247c:	4618      	mov	r0, r3
 800247e:	f001 f81f 	bl	80034c0 <_platform_adcChannelConfig>

        if (HAL_ADC_ConfigChannel(&adc->handle, &channelConfig) != HAL_OK) {
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f107 0220 	add.w	r2, r7, #32
 8002488:	4611      	mov	r1, r2
 800248a:	4618      	mov	r0, r3
 800248c:	f004 f9ba 	bl	8006804 <HAL_ADC_ConfigChannel>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <cmr_adcConfigChannels+0x58>
            cmr_panic("HAL_ADC_ConfigChannel() failed!");
 8002496:	4812      	ldr	r0, [pc, #72]	; (80024e0 <cmr_adcConfigChannels+0x9c>)
 8002498:	f001 fd4d 	bl	8003f36 <cmr_panic>
        }

        // Configure the pin for analog use.
        cmr_rccGPIOClockEnable(channel->port);
 800249c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f001 fd54 	bl	8003f4e <cmr_rccGPIOClockEnable>

        GPIO_InitTypeDef pinConfig = _platform_adcPinConfig(channel);
 80024a6:	f107 030c 	add.w	r3, r7, #12
 80024aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024ac:	4618      	mov	r0, r3
 80024ae:	f001 f823 	bl	80034f8 <_platform_adcPinConfig>

        HAL_GPIO_Init(channel->port, &pinConfig);
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f107 020c 	add.w	r2, r7, #12
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f005 febf 	bl	8008240 <HAL_GPIO_Init>
    for (size_t i = 0; i < adc->channelsLen; i++) {
 80024c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c4:	3301      	adds	r3, #1
 80024c6:	637b      	str	r3, [r7, #52]	; 0x34
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d3bf      	bcc.n	8002452 <cmr_adcConfigChannels+0xe>
    }
}
 80024d2:	bf00      	nop
 80024d4:	bf00      	nop
 80024d6:	3738      	adds	r7, #56	; 0x38
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	0800b994 	.word	0x0800b994
 80024e0:	0800b9ac 	.word	0x0800b9ac

080024e4 <cmr_adcInit>:
 * @param channelsLen Length of channels array.
 */
void cmr_adcInit(
    cmr_adc_t *adc, ADC_TypeDef *instance,
    cmr_adcChannel_t *channels, const size_t channelsLen
) {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
    if (channelsLen > CMR_ADC_CHANNELS) {
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2b10      	cmp	r3, #16
 80024f6:	d902      	bls.n	80024fe <cmr_adcInit+0x1a>
        cmr_panic("Too many channels");
 80024f8:	4813      	ldr	r0, [pc, #76]	; (8002548 <cmr_adcInit+0x64>)
 80024fa:	f001 fd1c 	bl	8003f36 <cmr_panic>
    }

    _platform_adcInit(adc, instance, channels, channelsLen);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	68b9      	ldr	r1, [r7, #8]
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f001 f837 	bl	8003578 <_platform_adcInit>

    cmr_rccADCClockEnable(instance);
 800250a:	68b8      	ldr	r0, [r7, #8]
 800250c:	f001 fd2a 	bl	8003f64 <cmr_rccADCClockEnable>

    if (HAL_ADC_Init(&adc->handle) != HAL_OK) {
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4618      	mov	r0, r3
 8002514:	f003 fff0 	bl	80064f8 <HAL_ADC_Init>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <cmr_adcInit+0x40>
        cmr_panic("HAL_ADC_Init() failed!");
 800251e:	480b      	ldr	r0, [pc, #44]	; (800254c <cmr_adcInit+0x68>)
 8002520:	f001 fd09 	bl	8003f36 <cmr_panic>
    }

    cmr_adcConfigChannels(adc);
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f7ff ff8d 	bl	8002444 <cmr_adcConfigChannels>

    cmr_taskInit(
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8002530:	2205      	movs	r2, #5
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <cmr_adcInit+0x6c>)
 8002538:	4906      	ldr	r1, [pc, #24]	; (8002554 <cmr_adcInit+0x70>)
 800253a:	f001 fe65 	bl	8004208 <cmr_taskInit>
        "ADC sample",
        cmr_adcSample_priority,
        cmr_adcSample,
        adc
    );
}
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	0800b9cc 	.word	0x0800b9cc
 800254c:	0800b9e0 	.word	0x0800b9e0
 8002550:	080023d5 	.word	0x080023d5
 8002554:	0800b9f8 	.word	0x0800b9f8

08002558 <cmr_canFromHandle>:
 *
 * @param handle The handle.
 *
 * @return The interface.
 */
static cmr_can_t *cmr_canFromHandle(CAN_HandleTypeDef *handle) {
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
    char *addr = (void *) handle;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	60fb      	str	r3, [r7, #12]
    return (void *) (addr - offsetof(cmr_can_t, handle));
 8002564:	68fb      	ldr	r3, [r7, #12]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
	...

08002574 <cmr_canTXCpltCallback>:
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL CAN handle.
 * @param mailbox The completed mailbox.
 */
static void cmr_canTXCpltCallback(CAN_HandleTypeDef *handle, size_t mailbox) {
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
    (void) mailbox;     // Placate compiler.
    cmr_can_t *can = cmr_canFromHandle(handle);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ffea 	bl	8002558 <cmr_canFromHandle>
 8002584:	60f8      	str	r0, [r7, #12]

    // Indicate completion.
    BaseType_t higherWoken;
    if (xSemaphoreGiveFromISR(can->txSem, &higherWoken) != pdTRUE) {
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258a:	f107 0208 	add.w	r2, r7, #8
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f002 fc13 	bl	8004dbc <xQueueGiveFromISR>
 8002596:	4603      	mov	r3, r0
 8002598:	2b01      	cmp	r3, #1
 800259a:	d002      	beq.n	80025a2 <cmr_canTXCpltCallback+0x2e>
        cmr_panic("TX semaphore released too many times!");
 800259c:	4808      	ldr	r0, [pc, #32]	; (80025c0 <cmr_canTXCpltCallback+0x4c>)
 800259e:	f001 fcca 	bl	8003f36 <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d007      	beq.n	80025b8 <cmr_canTXCpltCallback+0x44>
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <cmr_canTXCpltCallback+0x50>)
 80025aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	f3bf 8f6f 	isb	sy
}
 80025b8:	bf00      	nop
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	0800ba04 	.word	0x0800ba04
 80025c4:	e000ed04 	.word	0xe000ed04

080025c8 <HAL_CAN_TxMailbox0CompleteCallback>:
        CAN_HandleTypeDef *handle \
    ) { \
        /* Treat abort as complete. */ \
        cmr_canTXCpltCallback(handle, mailbox); \
    }
CAN_TX_MAILBOX_CALLBACK(0)
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	2100      	movs	r1, #0
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff ffce 	bl	8002574 <cmr_canTXCpltCallback>
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_CAN_TxMailbox0AbortCallback>:
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	2100      	movs	r1, #0
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff ffc2 	bl	8002574 <cmr_canTXCpltCallback>
 80025f0:	bf00      	nop
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_CAN_TxMailbox1CompleteCallback>:
CAN_TX_MAILBOX_CALLBACK(1)
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	2101      	movs	r1, #1
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff ffb6 	bl	8002574 <cmr_canTXCpltCallback>
 8002608:	bf00      	nop
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_CAN_TxMailbox1AbortCallback>:
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	2101      	movs	r1, #1
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff ffaa 	bl	8002574 <cmr_canTXCpltCallback>
 8002620:	bf00      	nop
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_CAN_TxMailbox2CompleteCallback>:
CAN_TX_MAILBOX_CALLBACK(2)
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	2102      	movs	r1, #2
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff ff9e 	bl	8002574 <cmr_canTXCpltCallback>
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_CAN_TxMailbox2AbortCallback>:
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	2102      	movs	r1, #2
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff ff92 	bl	8002574 <cmr_canTXCpltCallback>
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_CAN_ErrorCallback>:
 * @brief HAL CAN error callback.
 *
 * @warning Called from an interrupt handler!
 * @warning The handle must have been configured through this library!
 */
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *handle) {
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
    cmr_can_t *can = cmr_canFromHandle(handle);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff ff79 	bl	8002558 <cmr_canFromHandle>
 8002666:	6178      	str	r0, [r7, #20]

    uint32_t error = handle->ErrorCode;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	613b      	str	r3, [r7, #16]
    if (error & (
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f403 33fc 	and.w	r3, r3, #129024	; 0x1f800
 8002674:	2b00      	cmp	r3, #0
 8002676:	d018      	beq.n	80026aa <HAL_CAN_ErrorCallback+0x52>
            HAL_CAN_ERROR_TX_TERR1 |
            HAL_CAN_ERROR_TX_TERR2
    )) {
        // Transmit error; drop semaphore.
        BaseType_t higherWoken;
        if (xSemaphoreGiveFromISR(can->txSem, &higherWoken) != pdTRUE) {
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	f107 020c 	add.w	r2, r7, #12
 8002680:	4611      	mov	r1, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f002 fb9a 	bl	8004dbc <xQueueGiveFromISR>
 8002688:	4603      	mov	r3, r0
 800268a:	2b01      	cmp	r3, #1
 800268c:	d002      	beq.n	8002694 <HAL_CAN_ErrorCallback+0x3c>
            cmr_panic("TX semaphore released too many times!");
 800268e:	480a      	ldr	r0, [pc, #40]	; (80026b8 <HAL_CAN_ErrorCallback+0x60>)
 8002690:	f001 fc51 	bl	8003f36 <cmr_panic>
        }
        portYIELD_FROM_ISR(higherWoken);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d007      	beq.n	80026aa <HAL_CAN_ErrorCallback+0x52>
 800269a:	4b08      	ldr	r3, [pc, #32]	; (80026bc <HAL_CAN_ErrorCallback+0x64>)
 800269c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	f3bf 8f4f 	dsb	sy
 80026a6:	f3bf 8f6f 	isb	sy
    }

    // Clear errors.
    handle->ErrorCode = 0;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	625a      	str	r2, [r3, #36]	; 0x24
}
 80026b0:	bf00      	nop
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	0800ba04 	.word	0x0800ba04
 80026bc:	e000ed04 	.word	0xe000ed04

080026c0 <cmr_canTimeout>:
 *
 * @return A negative value if a timeout has occurred; otherwise 0.
 */
static int cmr_canTimeout(
    TickType_t lastReceived_ms, TickType_t threshold_ms, TickType_t now_ms
) {
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
    TickType_t release_ms = lastReceived_ms + threshold_ms;
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	4413      	add	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]

    if (now_ms < lastReceived_ms && release_ms <= lastReceived_ms) {
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d206      	bcs.n	80026ea <cmr_canTimeout+0x2a>
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d802      	bhi.n	80026ea <cmr_canTimeout+0x2a>
        // Current time overflowed; release did not. Timeout!
        return -1;
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295
 80026e8:	e011      	b.n	800270e <cmr_canTimeout+0x4e>
    }

    if (lastReceived_ms <= now_ms && release_ms < lastReceived_ms) {
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d805      	bhi.n	80026fe <cmr_canTimeout+0x3e>
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d201      	bcs.n	80026fe <cmr_canTimeout+0x3e>
        // Current time did not overflow; release time did. No timeout.
        return 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	e007      	b.n	800270e <cmr_canTimeout+0x4e>
    }

    // Neither current nor release overflowed, or both have.
    // In either case, release less than current indicates timeout.
    if (release_ms < now_ms) {
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	429a      	cmp	r2, r3
 8002704:	d202      	bcs.n	800270c <cmr_canTimeout+0x4c>
        return -1;
 8002706:	f04f 33ff 	mov.w	r3, #4294967295
 800270a:	e000      	b.n	800270e <cmr_canTimeout+0x4e>
    }

    return 0;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	371c      	adds	r7, #28
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <cmr_canRXMetaTimeoutError>:
 * @param meta The periodic message's reception metadata.
 * @param now_ms Current timestamp, in milliseconds.
 *
 * @return A negative value if a timeout error has occurred; otherwise 0.
 */
int cmr_canRXMetaTimeoutError(const cmr_canRXMeta_t *meta, TickType_t now_ms) {
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	6039      	str	r1, [r7, #0]
    return cmr_canTimeout(
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6958      	ldr	r0, [r3, #20]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	4619      	mov	r1, r3
 8002730:	f7ff ffc6 	bl	80026c0 <cmr_canTimeout>
 8002734:	4603      	mov	r3, r0
        meta->lastReceived_ms, meta->timeoutError_ms, now_ms
    );
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <cmr_canRXMetaFind>:
 * @param can The interface.
 * @param canID The CAN ID to search for.
 *
 * @return The associated receive metadata, or `NULL` if not found.
 */
static cmr_canRXMeta_t *cmr_canRXMetaFind(cmr_can_t *can, uint16_t canID) {
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	460b      	mov	r3, r1
 8002748:	807b      	strh	r3, [r7, #2]
    for (size_t i = 0; i < can->rxMetaLen; i++) {
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	e00f      	b.n	8002770 <cmr_canRXMetaFind+0x32>
        cmr_canRXMeta_t *meta = can->rxMeta + i;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	015b      	lsls	r3, r3, #5
 8002758:	4413      	add	r3, r2
 800275a:	60bb      	str	r3, [r7, #8]
        if (meta->canID == canID) {
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	887a      	ldrh	r2, [r7, #2]
 8002762:	429a      	cmp	r2, r3
 8002764:	d101      	bne.n	800276a <cmr_canRXMetaFind+0x2c>
            return meta;
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	e008      	b.n	800277c <cmr_canRXMetaFind+0x3e>
    for (size_t i = 0; i < can->rxMetaLen; i++) {
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	3301      	adds	r3, #1
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	429a      	cmp	r2, r3
 8002778:	d3ea      	bcc.n	8002750 <cmr_canRXMetaFind+0x12>
        }
    }

    return NULL;    // No matching metadata.
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <cmr_canRXData>:
 * @param data The received data.
 * @param dataLen The received data's length.
 */
static void cmr_canRXData(
    cmr_can_t *can, uint16_t canID, const void *data, size_t dataLen
) {
 8002788:	b590      	push	{r4, r7, lr}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	460b      	mov	r3, r1
 8002796:	817b      	strh	r3, [r7, #10]
    cmr_canRXMeta_t *meta = cmr_canRXMetaFind(can, canID);
 8002798:	897b      	ldrh	r3, [r7, #10]
 800279a:	4619      	mov	r1, r3
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f7ff ffce 	bl	800273e <cmr_canRXMetaFind>
 80027a2:	6178      	str	r0, [r7, #20]
    if (meta == NULL) {
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10b      	bne.n	80027c2 <cmr_canRXData+0x3a>
        // Not a configured message; attempt to use the callback.
        if (can->rxCallback) {
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d014      	beq.n	80027dc <cmr_canRXData+0x54>
            can->rxCallback(can, canID, data, dataLen);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 80027b6:	8979      	ldrh	r1, [r7, #10]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	47a0      	blx	r4
        }

        return;
 80027c0:	e00c      	b.n	80027dc <cmr_canRXData+0x54>
    }

    memcpy((void *) meta->payload, data, dataLen);
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3318      	adds	r3, #24
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f009 f804 	bl	800b7d8 <memcpy>
    meta->lastReceived_ms = xTaskGetTickCountFromISR();
 80027d0:	f003 f86a 	bl	80058a8 <xTaskGetTickCountFromISR>
 80027d4:	4602      	mov	r2, r0
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	615a      	str	r2, [r3, #20]
 80027da:	e000      	b.n	80027de <cmr_canRXData+0x56>
        return;
 80027dc:	bf00      	nop
}
 80027de:	371c      	adds	r7, #28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd90      	pop	{r4, r7, pc}

080027e4 <cmr_canRXPendingCallback>:
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL CAN handle.
 * @param fifo The pending FIFO.
 */
static void cmr_canRXPendingCallback(CAN_HandleTypeDef *handle, uint32_t fifo) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08c      	sub	sp, #48	; 0x30
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
    CAN_RxHeaderTypeDef msg;
    uint8_t data[8];
    if (HAL_CAN_GetRxMessage(handle, fifo, &msg, data) != HAL_OK) {
 80027ee:	f107 0308 	add.w	r3, r7, #8
 80027f2:	f107 0210 	add.w	r2, r7, #16
 80027f6:	6839      	ldr	r1, [r7, #0]
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f004 fd42 	bl	8007282 <HAL_CAN_GetRxMessage>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10c      	bne.n	800281e <cmr_canRXPendingCallback+0x3a>
        return;
    }

    cmr_can_t *can = cmr_canFromHandle(handle);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff fea7 	bl	8002558 <cmr_canFromHandle>
 800280a:	62f8      	str	r0, [r7, #44]	; 0x2c
    cmr_canRXData(can, msg.StdId, data, msg.DLC);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	b299      	uxth	r1, r3
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	f107 0208 	add.w	r2, r7, #8
 8002816:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002818:	f7ff ffb6 	bl	8002788 <cmr_canRXData>
 800281c:	e000      	b.n	8002820 <cmr_canRXPendingCallback+0x3c>
        return;
 800281e:	bf00      	nop
}
 8002820:	3730      	adds	r7, #48	; 0x30
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_CAN_RxFifo0MsgPendingCallback>:
    void HAL_CAN_RxFifo ## fifo ## MsgPendingCallback( \
        CAN_HandleTypeDef *handle \
    ) { \
        cmr_canRXPendingCallback(handle, CAN_RX_FIFO ## fifo); \
    }
CAN_RX_FIFO_PENDING(0)
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
 800282e:	2100      	movs	r1, #0
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff ffd7 	bl	80027e4 <cmr_canRXPendingCallback>
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_CAN_RxFifo1MsgPendingCallback>:
CAN_RX_FIFO_PENDING(1)
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	2101      	movs	r1, #1
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff ffcb 	bl	80027e4 <cmr_canRXPendingCallback>
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <cmr_canInit>:
    cmr_canBitRate_t bitRate,
    cmr_canRXMeta_t *rxMeta, size_t rxMetaLen,
    cmr_canRXCallback_t rxCallback,
    GPIO_TypeDef *rxPort, uint16_t rxPin,
    GPIO_TypeDef *txPort, uint16_t txPin
) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b090      	sub	sp, #64	; 0x40
 800285c:	af06      	add	r7, sp, #24
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	4613      	mov	r3, r2
 8002866:	71fb      	strb	r3, [r7, #7]
    /* Do any platform-specific initialization */
    _platform_canInit(
 8002868:	79fa      	ldrb	r2, [r7, #7]
 800286a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800286e:	9305      	str	r3, [sp, #20]
 8002870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002872:	9304      	str	r3, [sp, #16]
 8002874:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002876:	9303      	str	r3, [sp, #12]
 8002878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287a:	9302      	str	r3, [sp, #8]
 800287c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287e:	9301      	str	r3, [sp, #4]
 8002880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68b9      	ldr	r1, [r7, #8]
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 fb99 	bl	8002fc0 <_platform_canInit>
        rxCallback,
        rxPort, rxPin,
        txPort, txPin
    );

    cmr_rccCANClockEnable(instance);
 800288e:	68b8      	ldr	r0, [r7, #8]
 8002890:	f001 fb73 	bl	8003f7a <cmr_rccCANClockEnable>
    cmr_rccGPIOClockEnable(rxPort);
 8002894:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002896:	f001 fb5a 	bl	8003f4e <cmr_rccGPIOClockEnable>
    cmr_rccGPIOClockEnable(txPort);
 800289a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800289c:	f001 fb57 	bl	8003f4e <cmr_rccGPIOClockEnable>

    // Configure CAN RX pin.
    GPIO_InitTypeDef pinConfig = {
 80028a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	2302      	movs	r3, #2
 80028a6:	61bb      	str	r3, [r7, #24]
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
 80028ac:	2303      	movs	r3, #3
 80028ae:	623b      	str	r3, [r7, #32]
        .Pin = rxPin,
        .Mode = GPIO_MODE_AF_PP,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_VERY_HIGH,
        .Alternate = cmr_canGPIOAF(instance, rxPort)
 80028b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028b2:	68b8      	ldr	r0, [r7, #8]
 80028b4:	f000 f88d 	bl	80029d2 <cmr_canGPIOAF>
 80028b8:	4603      	mov	r3, r0
    GPIO_InitTypeDef pinConfig = {
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
    };
    HAL_GPIO_Init(rxPort, &pinConfig);
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	4619      	mov	r1, r3
 80028c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80028c4:	f005 fcbc 	bl	8008240 <HAL_GPIO_Init>

    // Configure CAN TX pin.
    pinConfig.Pin = txPin;
 80028c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80028cc:	617b      	str	r3, [r7, #20]
    pinConfig.Alternate = cmr_canGPIOAF(instance, txPort);
 80028ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028d0:	68b8      	ldr	r0, [r7, #8]
 80028d2:	f000 f87e 	bl	80029d2 <cmr_canGPIOAF>
 80028d6:	4603      	mov	r3, r0
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(txPort, &pinConfig);
 80028da:	f107 0314 	add.w	r3, r7, #20
 80028de:	4619      	mov	r1, r3
 80028e0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80028e2:	f005 fcad 	bl	8008240 <HAL_GPIO_Init>

    if (HAL_CAN_Init(&can->handle) != HAL_OK) {
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f004 f9b9 	bl	8006c60 <HAL_CAN_Init>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <cmr_canInit+0xa2>
        cmr_panic("HAL_CAN_Init() failed!");
 80028f4:	480e      	ldr	r0, [pc, #56]	; (8002930 <cmr_canInit+0xd8>)
 80028f6:	f001 fb1e 	bl	8003f36 <cmr_panic>
    }

    if (HAL_CAN_Start(&can->handle) != HAL_OK) {
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f004 fba1 	bl	8007044 <HAL_CAN_Start>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <cmr_canInit+0xb6>
        cmr_panic("HAL_CAN_Start() failed!");
 8002908:	480a      	ldr	r0, [pc, #40]	; (8002934 <cmr_canInit+0xdc>)
 800290a:	f001 fb14 	bl	8003f36 <cmr_panic>
    }

    if (HAL_CAN_ActivateNotification(
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f648 7113 	movw	r1, #36627	; 0x8f13
 8002914:	4618      	mov	r0, r3
 8002916:	f004 fdc7 	bl	80074a8 <HAL_CAN_ActivateNotification>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <cmr_canInit+0xce>
            CAN_IT_ERROR_PASSIVE |
            CAN_IT_BUSOFF |
            CAN_IT_LAST_ERROR_CODE |
            CAN_IT_ERROR
    )) {
        cmr_panic("HAL_CAN_ActivateNotification() failed!");
 8002920:	4805      	ldr	r0, [pc, #20]	; (8002938 <cmr_canInit+0xe0>)
 8002922:	f001 fb08 	bl	8003f36 <cmr_panic>
    }
}
 8002926:	bf00      	nop
 8002928:	3728      	adds	r7, #40	; 0x28
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	0800ba2c 	.word	0x0800ba2c
 8002934:	0800ba44 	.word	0x0800ba44
 8002938:	0800ba5c 	.word	0x0800ba5c

0800293c <cmr_canTX>:
 */
int cmr_canTX(
    cmr_can_t *can,
    uint16_t id, const void *data, size_t len,
    TickType_t timeout
) {
 800293c:	b580      	push	{r7, lr}
 800293e:	b08e      	sub	sp, #56	; 0x38
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	460b      	mov	r3, r1
 800294a:	817b      	strh	r3, [r7, #10]
    CAN_TxHeaderTypeDef txHeader = {
 800294c:	897b      	ldrh	r3, [r7, #10]
 800294e:	61bb      	str	r3, [r7, #24]
 8002950:	2300      	movs	r3, #0
 8002952:	61fb      	str	r3, [r7, #28]
 8002954:	2300      	movs	r3, #0
 8002956:	623b      	str	r3, [r7, #32]
 8002958:	2300      	movs	r3, #0
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002960:	2300      	movs	r3, #0
 8002962:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        .DLC = len,
        .TransmitGlobalTime = DISABLE
    };

    // Attempt to reserve a mailbox.
    BaseType_t result = xSemaphoreTake(can->txSem, timeout);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800296a:	2300      	movs	r3, #0
 800296c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800296e:	2100      	movs	r1, #0
 8002970:	f002 fa9e 	bl	8004eb0 <xQueueGenericReceive>
 8002974:	6378      	str	r0, [r7, #52]	; 0x34
    if (result != pdTRUE) {
 8002976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002978:	2b01      	cmp	r3, #1
 800297a:	d002      	beq.n	8002982 <cmr_canTX+0x46>
        return -1;
 800297c:	f04f 33ff 	mov.w	r3, #4294967295
 8002980:	e012      	b.n	80029a8 <cmr_canTX+0x6c>
    }

    // Even though the interface for HAL_CAN_AddTxMessage() does not specify the
    // data as `const`, it does not touch the data. Oh well.
    uint32_t txMailbox;
    HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	f107 0118 	add.w	r1, r7, #24
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	f004 fb9d 	bl	80070cc <HAL_CAN_AddTxMessage>
 8002992:	4603      	mov	r3, r0
 8002994:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        &can->handle, &txHeader, (void *) data, &txMailbox
    );
    if (status != HAL_OK) {
 8002998:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <cmr_canTX+0x6a>
        cmr_panic("Semaphore was available, but no mailboxes were found!");
 80029a0:	4803      	ldr	r0, [pc, #12]	; (80029b0 <cmr_canTX+0x74>)
 80029a2:	f001 fac8 	bl	8003f36 <cmr_panic>
    }

    return 0;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3738      	adds	r7, #56	; 0x38
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	0800ba84 	.word	0x0800ba84

080029b4 <cmr_canFilter>:
 * @param filtersLen The number of filters. Must be less than
 * `CMR_CAN_FILTERBANKS`.
 */
void cmr_canFilter(
    cmr_can_t *can, const cmr_canFilter_t *filters, size_t filtersLen
) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
    _platform_canFilter(can, filters, filtersLen);
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 fbd5 	bl	8003174 <_platform_canFilter>
}
 80029ca:	bf00      	nop
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <cmr_canGPIOAF>:
 * @param can The CAN interface.
 * @param port The GPIO port.
 *
 * @return The GPIO alternate function.
 */
uint32_t cmr_canGPIOAF(CAN_TypeDef *instance, GPIO_TypeDef *port) {
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	6039      	str	r1, [r7, #0]
    return _platform_canGPIOAF(instance, port);
 80029dc:	6839      	ldr	r1, [r7, #0]
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 faaa 	bl	8002f38 <_platform_canGPIOAF>
 80029e4:	4603      	mov	r3, r0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <DMA1_Stream0_IRQHandler>:
 */
#define DMA_IRQ_HANDLER(ctrl, stream) \
    void DMA_STREAM_NAME(ctrl, stream, _IRQHandler)(void) { \
        HAL_DMA_IRQHandler(cmr_dmaInterrupts[ctrl - 1][stream].handle); \
    }
DMA_STREAM_FOREACH(DMA_IRQ_HANDLER)
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <DMA1_Stream0_IRQHandler+0x14>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f005 f99d 	bl	8007d38 <HAL_DMA_IRQHandler>
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20029be0 	.word	0x20029be0

08002a08 <DMA1_Stream1_IRQHandler>:
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4b03      	ldr	r3, [pc, #12]	; (8002a1c <DMA1_Stream1_IRQHandler+0x14>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f005 f991 	bl	8007d38 <HAL_DMA_IRQHandler>
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20029be0 	.word	0x20029be0

08002a20 <DMA1_Stream2_IRQHandler>:
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <DMA1_Stream2_IRQHandler+0x14>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f005 f985 	bl	8007d38 <HAL_DMA_IRQHandler>
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20029be0 	.word	0x20029be0

08002a38 <DMA1_Stream3_IRQHandler>:
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	4b03      	ldr	r3, [pc, #12]	; (8002a4c <DMA1_Stream3_IRQHandler+0x14>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f005 f979 	bl	8007d38 <HAL_DMA_IRQHandler>
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20029be0 	.word	0x20029be0

08002a50 <DMA1_Stream4_IRQHandler>:
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4b03      	ldr	r3, [pc, #12]	; (8002a64 <DMA1_Stream4_IRQHandler+0x14>)
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f005 f96d 	bl	8007d38 <HAL_DMA_IRQHandler>
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20029be0 	.word	0x20029be0

08002a68 <DMA1_Stream5_IRQHandler>:
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4b03      	ldr	r3, [pc, #12]	; (8002a7c <DMA1_Stream5_IRQHandler+0x14>)
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f005 f961 	bl	8007d38 <HAL_DMA_IRQHandler>
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20029be0 	.word	0x20029be0

08002a80 <DMA1_Stream6_IRQHandler>:
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4b03      	ldr	r3, [pc, #12]	; (8002a94 <DMA1_Stream6_IRQHandler+0x14>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f005 f955 	bl	8007d38 <HAL_DMA_IRQHandler>
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20029be0 	.word	0x20029be0

08002a98 <DMA1_Stream7_IRQHandler>:
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <DMA1_Stream7_IRQHandler+0x14>)
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f005 f949 	bl	8007d38 <HAL_DMA_IRQHandler>
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20029be0 	.word	0x20029be0

08002ab0 <DMA2_Stream0_IRQHandler>:
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <DMA2_Stream0_IRQHandler+0x14>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f005 f93d 	bl	8007d38 <HAL_DMA_IRQHandler>
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20029be0 	.word	0x20029be0

08002ac8 <DMA2_Stream1_IRQHandler>:
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	4b03      	ldr	r3, [pc, #12]	; (8002adc <DMA2_Stream1_IRQHandler+0x14>)
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f005 f931 	bl	8007d38 <HAL_DMA_IRQHandler>
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20029be0 	.word	0x20029be0

08002ae0 <DMA2_Stream2_IRQHandler>:
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	4b03      	ldr	r3, [pc, #12]	; (8002af4 <DMA2_Stream2_IRQHandler+0x14>)
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f005 f925 	bl	8007d38 <HAL_DMA_IRQHandler>
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20029be0 	.word	0x20029be0

08002af8 <DMA2_Stream3_IRQHandler>:
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	4b03      	ldr	r3, [pc, #12]	; (8002b0c <DMA2_Stream3_IRQHandler+0x14>)
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b00:	4618      	mov	r0, r3
 8002b02:	f005 f919 	bl	8007d38 <HAL_DMA_IRQHandler>
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20029be0 	.word	0x20029be0

08002b10 <DMA2_Stream4_IRQHandler>:
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <DMA2_Stream4_IRQHandler+0x14>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f005 f90d 	bl	8007d38 <HAL_DMA_IRQHandler>
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20029be0 	.word	0x20029be0

08002b28 <DMA2_Stream5_IRQHandler>:
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	4b03      	ldr	r3, [pc, #12]	; (8002b3c <DMA2_Stream5_IRQHandler+0x14>)
 8002b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b30:	4618      	mov	r0, r3
 8002b32:	f005 f901 	bl	8007d38 <HAL_DMA_IRQHandler>
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20029be0 	.word	0x20029be0

08002b40 <DMA2_Stream6_IRQHandler>:
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <DMA2_Stream6_IRQHandler+0x14>)
 8002b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f005 f8f5 	bl	8007d38 <HAL_DMA_IRQHandler>
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20029be0 	.word	0x20029be0

08002b58 <DMA2_Stream7_IRQHandler>:
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	4b03      	ldr	r3, [pc, #12]	; (8002b6c <DMA2_Stream7_IRQHandler+0x14>)
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b60:	4618      	mov	r0, r3
 8002b62:	f005 f8e9 	bl	8007d38 <HAL_DMA_IRQHandler>
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20029be0 	.word	0x20029be0

08002b70 <cmr_dmaInit>:
 * @brief Initializes the given HAL DMA handle, including interrupt handler
 * configuration for the corresponding stream.
 *
 * @param handle The HAL DMA handle.
 */
void cmr_dmaInit(DMA_HandleTypeDef *handle) {
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
    size_t ctrlIndex;
    size_t streamIndex;
    IRQn_Type irqNum;

    // Configure interrupts.
    switch ((uintptr_t) handle->Instance) {
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a92      	ldr	r2, [pc, #584]	; (8002dc8 <cmr_dmaInit+0x258>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	f000 80d2 	beq.w	8002d28 <cmr_dmaInit+0x1b8>
 8002b84:	4a90      	ldr	r2, [pc, #576]	; (8002dc8 <cmr_dmaInit+0x258>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	f200 80d5 	bhi.w	8002d36 <cmr_dmaInit+0x1c6>
 8002b8c:	4a8f      	ldr	r2, [pc, #572]	; (8002dcc <cmr_dmaInit+0x25c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	f000 80c3 	beq.w	8002d1a <cmr_dmaInit+0x1aa>
 8002b94:	4a8d      	ldr	r2, [pc, #564]	; (8002dcc <cmr_dmaInit+0x25c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	f200 80cd 	bhi.w	8002d36 <cmr_dmaInit+0x1c6>
 8002b9c:	4a8c      	ldr	r2, [pc, #560]	; (8002dd0 <cmr_dmaInit+0x260>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	f000 80b4 	beq.w	8002d0c <cmr_dmaInit+0x19c>
 8002ba4:	4a8a      	ldr	r2, [pc, #552]	; (8002dd0 <cmr_dmaInit+0x260>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	f200 80c5 	bhi.w	8002d36 <cmr_dmaInit+0x1c6>
 8002bac:	4a89      	ldr	r2, [pc, #548]	; (8002dd4 <cmr_dmaInit+0x264>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	f000 80a5 	beq.w	8002cfe <cmr_dmaInit+0x18e>
 8002bb4:	4a87      	ldr	r2, [pc, #540]	; (8002dd4 <cmr_dmaInit+0x264>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	f200 80bd 	bhi.w	8002d36 <cmr_dmaInit+0x1c6>
 8002bbc:	4a86      	ldr	r2, [pc, #536]	; (8002dd8 <cmr_dmaInit+0x268>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	f000 8096 	beq.w	8002cf0 <cmr_dmaInit+0x180>
 8002bc4:	4a84      	ldr	r2, [pc, #528]	; (8002dd8 <cmr_dmaInit+0x268>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	f200 80b5 	bhi.w	8002d36 <cmr_dmaInit+0x1c6>
 8002bcc:	4a83      	ldr	r2, [pc, #524]	; (8002ddc <cmr_dmaInit+0x26c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	f000 8087 	beq.w	8002ce2 <cmr_dmaInit+0x172>
 8002bd4:	4a81      	ldr	r2, [pc, #516]	; (8002ddc <cmr_dmaInit+0x26c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	f200 80ad 	bhi.w	8002d36 <cmr_dmaInit+0x1c6>
 8002bdc:	4a80      	ldr	r2, [pc, #512]	; (8002de0 <cmr_dmaInit+0x270>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d078      	beq.n	8002cd4 <cmr_dmaInit+0x164>
 8002be2:	4a7f      	ldr	r2, [pc, #508]	; (8002de0 <cmr_dmaInit+0x270>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	f200 80a6 	bhi.w	8002d36 <cmr_dmaInit+0x1c6>
 8002bea:	4a7e      	ldr	r2, [pc, #504]	; (8002de4 <cmr_dmaInit+0x274>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d06a      	beq.n	8002cc6 <cmr_dmaInit+0x156>
 8002bf0:	4a7c      	ldr	r2, [pc, #496]	; (8002de4 <cmr_dmaInit+0x274>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	f200 809f 	bhi.w	8002d36 <cmr_dmaInit+0x1c6>
 8002bf8:	4a7b      	ldr	r2, [pc, #492]	; (8002de8 <cmr_dmaInit+0x278>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d05c      	beq.n	8002cb8 <cmr_dmaInit+0x148>
 8002bfe:	4a7a      	ldr	r2, [pc, #488]	; (8002de8 <cmr_dmaInit+0x278>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	f200 8098 	bhi.w	8002d36 <cmr_dmaInit+0x1c6>
 8002c06:	4a79      	ldr	r2, [pc, #484]	; (8002dec <cmr_dmaInit+0x27c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d04e      	beq.n	8002caa <cmr_dmaInit+0x13a>
 8002c0c:	4a77      	ldr	r2, [pc, #476]	; (8002dec <cmr_dmaInit+0x27c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	f200 8091 	bhi.w	8002d36 <cmr_dmaInit+0x1c6>
 8002c14:	4a76      	ldr	r2, [pc, #472]	; (8002df0 <cmr_dmaInit+0x280>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d040      	beq.n	8002c9c <cmr_dmaInit+0x12c>
 8002c1a:	4a75      	ldr	r2, [pc, #468]	; (8002df0 <cmr_dmaInit+0x280>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	f200 808a 	bhi.w	8002d36 <cmr_dmaInit+0x1c6>
 8002c22:	4a74      	ldr	r2, [pc, #464]	; (8002df4 <cmr_dmaInit+0x284>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d032      	beq.n	8002c8e <cmr_dmaInit+0x11e>
 8002c28:	4a72      	ldr	r2, [pc, #456]	; (8002df4 <cmr_dmaInit+0x284>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	f200 8083 	bhi.w	8002d36 <cmr_dmaInit+0x1c6>
 8002c30:	4a71      	ldr	r2, [pc, #452]	; (8002df8 <cmr_dmaInit+0x288>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d024      	beq.n	8002c80 <cmr_dmaInit+0x110>
 8002c36:	4a70      	ldr	r2, [pc, #448]	; (8002df8 <cmr_dmaInit+0x288>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d87c      	bhi.n	8002d36 <cmr_dmaInit+0x1c6>
 8002c3c:	4a6f      	ldr	r2, [pc, #444]	; (8002dfc <cmr_dmaInit+0x28c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d017      	beq.n	8002c72 <cmr_dmaInit+0x102>
 8002c42:	4a6e      	ldr	r2, [pc, #440]	; (8002dfc <cmr_dmaInit+0x28c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d876      	bhi.n	8002d36 <cmr_dmaInit+0x1c6>
 8002c48:	4a6d      	ldr	r2, [pc, #436]	; (8002e00 <cmr_dmaInit+0x290>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d003      	beq.n	8002c56 <cmr_dmaInit+0xe6>
 8002c4e:	4a6d      	ldr	r2, [pc, #436]	; (8002e04 <cmr_dmaInit+0x294>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d007      	beq.n	8002c64 <cmr_dmaInit+0xf4>
 8002c54:	e06f      	b.n	8002d36 <cmr_dmaInit+0x1c6>
        case DMA_STREAM_NAME(ctrl, stream, _BASE): \
            ctrlIndex = ctrl - 1; \
            streamIndex = stream; \
            irqNum = DMA_STREAM_NAME(ctrl, stream, _IRQn); \
            break;
DMA_STREAM_FOREACH(DMA_INTERRUPT_CONFIG)
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	230b      	movs	r3, #11
 8002c60:	75fb      	strb	r3, [r7, #23]
 8002c62:	e06b      	b.n	8002d3c <cmr_dmaInit+0x1cc>
 8002c64:	2300      	movs	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]
 8002c68:	2301      	movs	r3, #1
 8002c6a:	61bb      	str	r3, [r7, #24]
 8002c6c:	230c      	movs	r3, #12
 8002c6e:	75fb      	strb	r3, [r7, #23]
 8002c70:	e064      	b.n	8002d3c <cmr_dmaInit+0x1cc>
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	2302      	movs	r3, #2
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	230d      	movs	r3, #13
 8002c7c:	75fb      	strb	r3, [r7, #23]
 8002c7e:	e05d      	b.n	8002d3c <cmr_dmaInit+0x1cc>
 8002c80:	2300      	movs	r3, #0
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	2303      	movs	r3, #3
 8002c86:	61bb      	str	r3, [r7, #24]
 8002c88:	230e      	movs	r3, #14
 8002c8a:	75fb      	strb	r3, [r7, #23]
 8002c8c:	e056      	b.n	8002d3c <cmr_dmaInit+0x1cc>
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	2304      	movs	r3, #4
 8002c94:	61bb      	str	r3, [r7, #24]
 8002c96:	230f      	movs	r3, #15
 8002c98:	75fb      	strb	r3, [r7, #23]
 8002c9a:	e04f      	b.n	8002d3c <cmr_dmaInit+0x1cc>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	2305      	movs	r3, #5
 8002ca2:	61bb      	str	r3, [r7, #24]
 8002ca4:	2310      	movs	r3, #16
 8002ca6:	75fb      	strb	r3, [r7, #23]
 8002ca8:	e048      	b.n	8002d3c <cmr_dmaInit+0x1cc>
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	2306      	movs	r3, #6
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	2311      	movs	r3, #17
 8002cb4:	75fb      	strb	r3, [r7, #23]
 8002cb6:	e041      	b.n	8002d3c <cmr_dmaInit+0x1cc>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61fb      	str	r3, [r7, #28]
 8002cbc:	2307      	movs	r3, #7
 8002cbe:	61bb      	str	r3, [r7, #24]
 8002cc0:	232f      	movs	r3, #47	; 0x2f
 8002cc2:	75fb      	strb	r3, [r7, #23]
 8002cc4:	e03a      	b.n	8002d3c <cmr_dmaInit+0x1cc>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	61fb      	str	r3, [r7, #28]
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61bb      	str	r3, [r7, #24]
 8002cce:	2338      	movs	r3, #56	; 0x38
 8002cd0:	75fb      	strb	r3, [r7, #23]
 8002cd2:	e033      	b.n	8002d3c <cmr_dmaInit+0x1cc>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	61fb      	str	r3, [r7, #28]
 8002cd8:	2301      	movs	r3, #1
 8002cda:	61bb      	str	r3, [r7, #24]
 8002cdc:	2339      	movs	r3, #57	; 0x39
 8002cde:	75fb      	strb	r3, [r7, #23]
 8002ce0:	e02c      	b.n	8002d3c <cmr_dmaInit+0x1cc>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	61fb      	str	r3, [r7, #28]
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	61bb      	str	r3, [r7, #24]
 8002cea:	233a      	movs	r3, #58	; 0x3a
 8002cec:	75fb      	strb	r3, [r7, #23]
 8002cee:	e025      	b.n	8002d3c <cmr_dmaInit+0x1cc>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	61fb      	str	r3, [r7, #28]
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	61bb      	str	r3, [r7, #24]
 8002cf8:	233b      	movs	r3, #59	; 0x3b
 8002cfa:	75fb      	strb	r3, [r7, #23]
 8002cfc:	e01e      	b.n	8002d3c <cmr_dmaInit+0x1cc>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	2304      	movs	r3, #4
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	233c      	movs	r3, #60	; 0x3c
 8002d08:	75fb      	strb	r3, [r7, #23]
 8002d0a:	e017      	b.n	8002d3c <cmr_dmaInit+0x1cc>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	61fb      	str	r3, [r7, #28]
 8002d10:	2305      	movs	r3, #5
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	2344      	movs	r3, #68	; 0x44
 8002d16:	75fb      	strb	r3, [r7, #23]
 8002d18:	e010      	b.n	8002d3c <cmr_dmaInit+0x1cc>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	2306      	movs	r3, #6
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	2345      	movs	r3, #69	; 0x45
 8002d24:	75fb      	strb	r3, [r7, #23]
 8002d26:	e009      	b.n	8002d3c <cmr_dmaInit+0x1cc>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	61fb      	str	r3, [r7, #28]
 8002d2c:	2307      	movs	r3, #7
 8002d2e:	61bb      	str	r3, [r7, #24]
 8002d30:	2346      	movs	r3, #70	; 0x46
 8002d32:	75fb      	strb	r3, [r7, #23]
 8002d34:	e002      	b.n	8002d3c <cmr_dmaInit+0x1cc>
#undef DMA_INTERRUPT_CONFIG
        default:
            cmr_panic("Unknown DMA stream!");
 8002d36:	4834      	ldr	r0, [pc, #208]	; (8002e08 <cmr_dmaInit+0x298>)
 8002d38:	f001 f8fd 	bl	8003f36 <cmr_panic>
    }
    cmr_dmaInterrupts[ctrlIndex][streamIndex] = (cmr_dmaInterrupt_t) {
 8002d3c:	4933      	ldr	r1, [pc, #204]	; (8002e0c <cmr_dmaInit+0x29c>)
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	00da      	lsls	r2, r3, #3
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	4413      	add	r3, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        .handle = handle
    };
    HAL_NVIC_SetPriority(irqNum, 5, 0);
 8002d4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d50:	2200      	movs	r2, #0
 8002d52:	2105      	movs	r1, #5
 8002d54:	4618      	mov	r0, r3
 8002d56:	f004 fe88 	bl	8007a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqNum);
 8002d5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f004 fe9f 	bl	8007aa2 <HAL_NVIC_EnableIRQ>

    // Enable DMA clocks.
    switch (ctrlIndex) {
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <cmr_dmaInit+0x202>
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d00f      	beq.n	8002d90 <cmr_dmaInit+0x220>
 8002d70:	e01d      	b.n	8002dae <cmr_dmaInit+0x23e>
        case 0:
            __HAL_RCC_DMA1_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	4b26      	ldr	r3, [pc, #152]	; (8002e10 <cmr_dmaInit+0x2a0>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	4a25      	ldr	r2, [pc, #148]	; (8002e10 <cmr_dmaInit+0x2a0>)
 8002d7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d80:	6313      	str	r3, [r2, #48]	; 0x30
 8002d82:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <cmr_dmaInit+0x2a0>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	693b      	ldr	r3, [r7, #16]
            break;
 8002d8e:	e00e      	b.n	8002dae <cmr_dmaInit+0x23e>
        case 1:
            __HAL_RCC_DMA2_CLK_ENABLE();
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	4b1e      	ldr	r3, [pc, #120]	; (8002e10 <cmr_dmaInit+0x2a0>)
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	4a1d      	ldr	r2, [pc, #116]	; (8002e10 <cmr_dmaInit+0x2a0>)
 8002d9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8002da0:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <cmr_dmaInit+0x2a0>)
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	68fb      	ldr	r3, [r7, #12]
            break;
 8002dac:	bf00      	nop
    }

    if (HAL_DMA_Init(handle) != HAL_OK) {
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f004 fe92 	bl	8007ad8 <HAL_DMA_Init>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <cmr_dmaInit+0x250>
        cmr_panic("HAL_DMA_Init() failed!");
 8002dba:	4816      	ldr	r0, [pc, #88]	; (8002e14 <cmr_dmaInit+0x2a4>)
 8002dbc:	f001 f8bb 	bl	8003f36 <cmr_panic>
    }
}
 8002dc0:	bf00      	nop
 8002dc2:	3720      	adds	r7, #32
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	400264b8 	.word	0x400264b8
 8002dcc:	400264a0 	.word	0x400264a0
 8002dd0:	40026488 	.word	0x40026488
 8002dd4:	40026470 	.word	0x40026470
 8002dd8:	40026458 	.word	0x40026458
 8002ddc:	40026440 	.word	0x40026440
 8002de0:	40026428 	.word	0x40026428
 8002de4:	40026410 	.word	0x40026410
 8002de8:	400260b8 	.word	0x400260b8
 8002dec:	400260a0 	.word	0x400260a0
 8002df0:	40026088 	.word	0x40026088
 8002df4:	40026070 	.word	0x40026070
 8002df8:	40026058 	.word	0x40026058
 8002dfc:	40026040 	.word	0x40026040
 8002e00:	40026010 	.word	0x40026010
 8002e04:	40026028 	.word	0x40026028
 8002e08:	0800babc 	.word	0x0800babc
 8002e0c:	20029be0 	.word	0x20029be0
 8002e10:	40023800 	.word	0x40023800
 8002e14:	0800bad0 	.word	0x0800bad0

08002e18 <CAN1_TX_IRQHandler>:
                                                               \
    void CAN##can##_SCE_IRQHandler(void)                       \
    {                                                          \
        HAL_CAN_IRQHandler(cmr_canInterrupts[can - 1].handle); \
    }
CAN_FOREACH(CAN_IRQ_HANDLERS)
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4b03      	ldr	r3, [pc, #12]	; (8002e2c <CAN1_TX_IRQHandler+0x14>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f004 fb67 	bl	80074f4 <HAL_CAN_IRQHandler>
 8002e26:	bf00      	nop
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20029c20 	.word	0x20029c20

08002e30 <CAN1_RX0_IRQHandler>:
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <CAN1_RX0_IRQHandler+0x14>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f004 fb5b 	bl	80074f4 <HAL_CAN_IRQHandler>
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20029c20 	.word	0x20029c20

08002e48 <CAN1_RX1_IRQHandler>:
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	4b03      	ldr	r3, [pc, #12]	; (8002e5c <CAN1_RX1_IRQHandler+0x14>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f004 fb4f 	bl	80074f4 <HAL_CAN_IRQHandler>
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20029c20 	.word	0x20029c20

08002e60 <CAN1_SCE_IRQHandler>:
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <CAN1_SCE_IRQHandler+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f004 fb43 	bl	80074f4 <HAL_CAN_IRQHandler>
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20029c20 	.word	0x20029c20

08002e78 <CAN2_TX_IRQHandler>:
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	4b03      	ldr	r3, [pc, #12]	; (8002e8c <CAN2_TX_IRQHandler+0x14>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f004 fb37 	bl	80074f4 <HAL_CAN_IRQHandler>
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20029c20 	.word	0x20029c20

08002e90 <CAN2_RX0_IRQHandler>:
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	4b03      	ldr	r3, [pc, #12]	; (8002ea4 <CAN2_RX0_IRQHandler+0x14>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f004 fb2b 	bl	80074f4 <HAL_CAN_IRQHandler>
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20029c20 	.word	0x20029c20

08002ea8 <CAN2_RX1_IRQHandler>:
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <CAN2_RX1_IRQHandler+0x14>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f004 fb1f 	bl	80074f4 <HAL_CAN_IRQHandler>
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20029c20 	.word	0x20029c20

08002ec0 <CAN2_SCE_IRQHandler>:
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <CAN2_SCE_IRQHandler+0x14>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f004 fb13 	bl	80074f4 <HAL_CAN_IRQHandler>
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20029c20 	.word	0x20029c20

08002ed8 <CAN3_TX_IRQHandler>:
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <CAN3_TX_IRQHandler+0x14>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f004 fb07 	bl	80074f4 <HAL_CAN_IRQHandler>
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20029c20 	.word	0x20029c20

08002ef0 <CAN3_RX0_IRQHandler>:
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	4b03      	ldr	r3, [pc, #12]	; (8002f04 <CAN3_RX0_IRQHandler+0x14>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f004 fafb 	bl	80074f4 <HAL_CAN_IRQHandler>
 8002efe:	bf00      	nop
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20029c20 	.word	0x20029c20

08002f08 <CAN3_RX1_IRQHandler>:
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <CAN3_RX1_IRQHandler+0x14>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f004 faef 	bl	80074f4 <HAL_CAN_IRQHandler>
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20029c20 	.word	0x20029c20

08002f20 <CAN3_SCE_IRQHandler>:
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	4b03      	ldr	r3, [pc, #12]	; (8002f34 <CAN3_SCE_IRQHandler+0x14>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f004 fae3 	bl	80074f4 <HAL_CAN_IRQHandler>
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20029c20 	.word	0x20029c20

08002f38 <_platform_canGPIOAF>:
 * @param port The GPIO port.
 *
 * @return The GPIO alternate function.
 */
uint32_t _platform_canGPIOAF(CAN_TypeDef *instance, GPIO_TypeDef *port)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
    switch ((uintptr_t)instance)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a16      	ldr	r2, [pc, #88]	; (8002fa0 <_platform_canGPIOAF+0x68>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d020      	beq.n	8002f8c <_platform_canGPIOAF+0x54>
 8002f4a:	4a15      	ldr	r2, [pc, #84]	; (8002fa0 <_platform_canGPIOAF+0x68>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d81f      	bhi.n	8002f90 <_platform_canGPIOAF+0x58>
 8002f50:	4a14      	ldr	r2, [pc, #80]	; (8002fa4 <_platform_canGPIOAF+0x6c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d003      	beq.n	8002f5e <_platform_canGPIOAF+0x26>
 8002f56:	4a14      	ldr	r2, [pc, #80]	; (8002fa8 <_platform_canGPIOAF+0x70>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d015      	beq.n	8002f88 <_platform_canGPIOAF+0x50>
 8002f5c:	e018      	b.n	8002f90 <_platform_canGPIOAF+0x58>
    {
    case CAN1_BASE:
        switch ((uintptr_t)port)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	4a12      	ldr	r2, [pc, #72]	; (8002fac <_platform_canGPIOAF+0x74>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d009      	beq.n	8002f7a <_platform_canGPIOAF+0x42>
 8002f66:	4a11      	ldr	r2, [pc, #68]	; (8002fac <_platform_canGPIOAF+0x74>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d80a      	bhi.n	8002f82 <_platform_canGPIOAF+0x4a>
 8002f6c:	4a10      	ldr	r2, [pc, #64]	; (8002fb0 <_platform_canGPIOAF+0x78>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d003      	beq.n	8002f7a <_platform_canGPIOAF+0x42>
 8002f72:	4a10      	ldr	r2, [pc, #64]	; (8002fb4 <_platform_canGPIOAF+0x7c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d002      	beq.n	8002f7e <_platform_canGPIOAF+0x46>
 8002f78:	e003      	b.n	8002f82 <_platform_canGPIOAF+0x4a>
        {
        case GPIOA_BASE:
        case GPIOD_BASE:
            return GPIO_AF9_CAN1;
 8002f7a:	2309      	movs	r3, #9
 8002f7c:	e00b      	b.n	8002f96 <_platform_canGPIOAF+0x5e>
        case GPIOB_BASE:
            return GPIO_AF8_CAN1;
 8002f7e:	2308      	movs	r3, #8
 8002f80:	e009      	b.n	8002f96 <_platform_canGPIOAF+0x5e>
        default:
            cmr_panic("Unknown/unspported GPIO port!");
 8002f82:	480d      	ldr	r0, [pc, #52]	; (8002fb8 <_platform_canGPIOAF+0x80>)
 8002f84:	f000 ffd7 	bl	8003f36 <cmr_panic>
        }
    case CAN2_BASE:
        return GPIO_AF9_CAN2;
 8002f88:	2309      	movs	r3, #9
 8002f8a:	e004      	b.n	8002f96 <_platform_canGPIOAF+0x5e>
    case CAN3_BASE:
        return GPIO_AF11_CAN3;
 8002f8c:	230b      	movs	r3, #11
 8002f8e:	e002      	b.n	8002f96 <_platform_canGPIOAF+0x5e>
    default:
        cmr_panic("Unknown CAN instance!");
 8002f90:	480a      	ldr	r0, [pc, #40]	; (8002fbc <_platform_canGPIOAF+0x84>)
 8002f92:	f000 ffd0 	bl	8003f36 <cmr_panic>
    }
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40006c00 	.word	0x40006c00
 8002fa4:	40006400 	.word	0x40006400
 8002fa8:	40006800 	.word	0x40006800
 8002fac:	40020c00 	.word	0x40020c00
 8002fb0:	40020000 	.word	0x40020000
 8002fb4:	40020400 	.word	0x40020400
 8002fb8:	0800bae8 	.word	0x0800bae8
 8002fbc:	0800bb08 	.word	0x0800bb08

08002fc0 <_platform_canInit>:
    cmr_canBitRate_t bitRate,
    cmr_canRXMeta_t *rxMeta, size_t rxMetaLen,
    cmr_canRXCallback_t rxCallback,
    GPIO_TypeDef *rxPort, uint16_t rxPin,
    GPIO_TypeDef *txPort, uint16_t txPin
) {
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b0a6      	sub	sp, #152	; 0x98
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	71fb      	strb	r3, [r7, #7]
    *can = (cmr_can_t) {
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2100      	movs	r1, #0
 8002fda:	f008 fc0b 	bl	800b7f4 <memset>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fea:	60da      	str	r2, [r3, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002ff2:	611a      	str	r2, [r3, #16]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	765a      	strb	r2, [r3, #25]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	76da      	strb	r2, [r3, #27]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	675a      	str	r2, [r3, #116]	; 0x74
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800300c:	679a      	str	r2, [r3, #120]	; 0x78
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003014:	67da      	str	r2, [r3, #124]	; 0x7c
        .rxCallback = rxCallback
    };

    // These numbers assume 48 MHz ABP1 peripheral clock frequency
    // 48 MHz / (6 + 1 + 1 time quanta) / Prescaler = bitRate
    switch (bitRate) {
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d00e      	beq.n	800303a <_platform_canInit+0x7a>
 800301c:	2b02      	cmp	r3, #2
 800301e:	dc10      	bgt.n	8003042 <_platform_canInit+0x82>
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <_platform_canInit+0x6a>
 8003024:	2b01      	cmp	r3, #1
 8003026:	d004      	beq.n	8003032 <_platform_canInit+0x72>
 8003028:	e00b      	b.n	8003042 <_platform_canInit+0x82>
        case CMR_CAN_BITRATE_250K:
            can->handle.Init.Prescaler = 24;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2218      	movs	r2, #24
 800302e:	605a      	str	r2, [r3, #4]
            break;
 8003030:	e007      	b.n	8003042 <_platform_canInit+0x82>
        case CMR_CAN_BITRATE_500K:
            can->handle.Init.Prescaler = 12;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	220c      	movs	r2, #12
 8003036:	605a      	str	r2, [r3, #4]
            break;
 8003038:	e003      	b.n	8003042 <_platform_canInit+0x82>
        case CMR_CAN_BITRATE_1M:
            can->handle.Init.Prescaler = 6;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2206      	movs	r2, #6
 800303e:	605a      	str	r2, [r3, #4]
            break;
 8003040:	bf00      	nop
    }

    can->txSem = xSemaphoreCreateCountingStatic(
 8003042:	2003      	movs	r0, #3
 8003044:	2103      	movs	r1, #3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	332c      	adds	r3, #44	; 0x2c
 800304a:	461a      	mov	r2, r3
 800304c:	f001 fe86 	bl	8004d5c <xQueueCreateCountingSemaphoreStatic>
 8003050:	4602      	mov	r2, r0
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	629a      	str	r2, [r3, #40]	; 0x28
        CAN_TX_MAILBOXES, CAN_TX_MAILBOXES, &can->txSemBuf
    );
    configASSERT(can->txSem != NULL);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	2b00      	cmp	r3, #0
 800305c:	d103      	bne.n	8003066 <_platform_canInit+0xa6>
 800305e:	219f      	movs	r1, #159	; 0x9f
 8003060:	483e      	ldr	r0, [pc, #248]	; (800315c <_platform_canInit+0x19c>)
 8003062:	f000 ff68 	bl	8003f36 <cmr_panic>
    size_t canIdx;
    IRQn_Type irqTX;
    IRQn_Type irqRX0;
    IRQn_Type irqRX1;
    IRQn_Type irqSCE;
    switch ((uintptr_t)instance)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	4a3d      	ldr	r2, [pc, #244]	; (8003160 <_platform_canInit+0x1a0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d029      	beq.n	80030c2 <_platform_canInit+0x102>
 800306e:	4a3c      	ldr	r2, [pc, #240]	; (8003160 <_platform_canInit+0x1a0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d836      	bhi.n	80030e2 <_platform_canInit+0x122>
 8003074:	4a3b      	ldr	r2, [pc, #236]	; (8003164 <_platform_canInit+0x1a4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d003      	beq.n	8003082 <_platform_canInit+0xc2>
 800307a:	4a3b      	ldr	r2, [pc, #236]	; (8003168 <_platform_canInit+0x1a8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d010      	beq.n	80030a2 <_platform_canInit+0xe2>
 8003080:	e02f      	b.n	80030e2 <_platform_canInit+0x122>
        irqTX = CAN##num##_TX_IRQn;   \
        irqRX0 = CAN##num##_RX0_IRQn; \
        irqRX1 = CAN##num##_RX1_IRQn; \
        irqSCE = CAN##num##_SCE_IRQn; \
        break;
        CAN_FOREACH(CAN_INTERRUPT_CONFIG)
 8003082:	2300      	movs	r3, #0
 8003084:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003088:	2313      	movs	r3, #19
 800308a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 800308e:	2314      	movs	r3, #20
 8003090:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 8003094:	2315      	movs	r3, #21
 8003096:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 800309a:	2316      	movs	r3, #22
 800309c:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 80030a0:	e022      	b.n	80030e8 <_platform_canInit+0x128>
 80030a2:	2301      	movs	r3, #1
 80030a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030a8:	233f      	movs	r3, #63	; 0x3f
 80030aa:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 80030ae:	2340      	movs	r3, #64	; 0x40
 80030b0:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 80030b4:	2341      	movs	r3, #65	; 0x41
 80030b6:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 80030ba:	2342      	movs	r3, #66	; 0x42
 80030bc:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 80030c0:	e012      	b.n	80030e8 <_platform_canInit+0x128>
 80030c2:	2302      	movs	r3, #2
 80030c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030c8:	234a      	movs	r3, #74	; 0x4a
 80030ca:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 80030ce:	234b      	movs	r3, #75	; 0x4b
 80030d0:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 80030d4:	234c      	movs	r3, #76	; 0x4c
 80030d6:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 80030da:	234d      	movs	r3, #77	; 0x4d
 80030dc:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 80030e0:	e002      	b.n	80030e8 <_platform_canInit+0x128>
#undef CAN_INTERRUPT_CONFIG
    default:
        cmr_panic("Unknown CAN instance!");
 80030e2:	4822      	ldr	r0, [pc, #136]	; (800316c <_platform_canInit+0x1ac>)
 80030e4:	f000 ff27 	bl	8003f36 <cmr_panic>
    }

    cmr_canInterrupts[canIdx] = (cmr_canInterrupt_t){
        .handle = &can->handle
 80030e8:	68fa      	ldr	r2, [r7, #12]
    cmr_canInterrupts[canIdx] = (cmr_canInterrupt_t){
 80030ea:	4921      	ldr	r1, [pc, #132]	; (8003170 <_platform_canInit+0x1b0>)
 80030ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    };
    HAL_NVIC_SetPriority(irqTX, 5, 0);
 80030f4:	f997 3093 	ldrsb.w	r3, [r7, #147]	; 0x93
 80030f8:	2200      	movs	r2, #0
 80030fa:	2105      	movs	r1, #5
 80030fc:	4618      	mov	r0, r3
 80030fe:	f004 fcb4 	bl	8007a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(irqRX0, 5, 0);
 8003102:	f997 3092 	ldrsb.w	r3, [r7, #146]	; 0x92
 8003106:	2200      	movs	r2, #0
 8003108:	2105      	movs	r1, #5
 800310a:	4618      	mov	r0, r3
 800310c:	f004 fcad 	bl	8007a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(irqRX1, 5, 0);
 8003110:	f997 3091 	ldrsb.w	r3, [r7, #145]	; 0x91
 8003114:	2200      	movs	r2, #0
 8003116:	2105      	movs	r1, #5
 8003118:	4618      	mov	r0, r3
 800311a:	f004 fca6 	bl	8007a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(irqSCE, 5, 0);
 800311e:	f997 3090 	ldrsb.w	r3, [r7, #144]	; 0x90
 8003122:	2200      	movs	r2, #0
 8003124:	2105      	movs	r1, #5
 8003126:	4618      	mov	r0, r3
 8003128:	f004 fc9f 	bl	8007a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqTX);
 800312c:	f997 3093 	ldrsb.w	r3, [r7, #147]	; 0x93
 8003130:	4618      	mov	r0, r3
 8003132:	f004 fcb6 	bl	8007aa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(irqRX0);
 8003136:	f997 3092 	ldrsb.w	r3, [r7, #146]	; 0x92
 800313a:	4618      	mov	r0, r3
 800313c:	f004 fcb1 	bl	8007aa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(irqRX1);
 8003140:	f997 3091 	ldrsb.w	r3, [r7, #145]	; 0x91
 8003144:	4618      	mov	r0, r3
 8003146:	f004 fcac 	bl	8007aa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(irqSCE);
 800314a:	f997 3090 	ldrsb.w	r3, [r7, #144]	; 0x90
 800314e:	4618      	mov	r0, r3
 8003150:	f004 fca7 	bl	8007aa2 <HAL_NVIC_EnableIRQ>
}
 8003154:	bf00      	nop
 8003156:	3798      	adds	r7, #152	; 0x98
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	0800bb20 	.word	0x0800bb20
 8003160:	40006c00 	.word	0x40006c00
 8003164:	40006400 	.word	0x40006400
 8003168:	40006800 	.word	0x40006800
 800316c:	0800bb08 	.word	0x0800bb08
 8003170:	20029c20 	.word	0x20029c20

08003174 <_platform_canFilter>:
 * @param filtersLen The number of filters. Must be less than
 * `CMR_CAN_FILTERBANKS`.
 */
void _platform_canFilter(
    cmr_can_t *can, const cmr_canFilter_t *filters, size_t filtersLen)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b094      	sub	sp, #80	; 0x50
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
    if (filtersLen >= CMR_CAN_FILTERBANKS)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b0d      	cmp	r3, #13
 8003184:	d902      	bls.n	800318c <_platform_canFilter+0x18>
    {
        cmr_panic("Too many filter banks!");
 8003186:	4830      	ldr	r0, [pc, #192]	; (8003248 <_platform_canFilter+0xd4>)
 8003188:	f000 fed5 	bl	8003f36 <cmr_panic>
    }

    CAN_TypeDef *instance = can->handle.Instance;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	647b      	str	r3, [r7, #68]	; 0x44

    for (size_t i = 0; i < filtersLen; i++)
 8003192:	2300      	movs	r3, #0
 8003194:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003196:	e04e      	b.n	8003236 <_platform_canFilter+0xc2>
    {
        const cmr_canFilter_t *filter = filters + i;
 8003198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	4413      	add	r3, r2
 80031a0:	643b      	str	r3, [r7, #64]	; 0x40

        uint32_t bank = i;
 80031a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a4:	64bb      	str	r3, [r7, #72]	; 0x48
        if (instance == CAN2)
 80031a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031a8:	4a28      	ldr	r2, [pc, #160]	; (800324c <_platform_canFilter+0xd8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d102      	bne.n	80031b4 <_platform_canFilter+0x40>
        {
            // CAN2 uses banks 14-27.
            bank += CMR_CAN_FILTERBANKS;
 80031ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b0:	330e      	adds	r3, #14
 80031b2:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        uint32_t filterMode = filter->isMask
 80031b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031b6:	781b      	ldrb	r3, [r3, #0]
                                  ? CAN_FILTERMODE_IDMASK
                                  : CAN_FILTERMODE_IDLIST;
 80031b8:	f083 0301 	eor.w	r3, r3, #1
 80031bc:	b2db      	uxtb	r3, r3
        uint32_t filterMode = filter->isMask
 80031be:	63fb      	str	r3, [r7, #60]	; 0x3c

        // In 16 bit ID list mode, FilterIdHigh, FilterIdLow, FilterMaskIdHigh,
        // and FilterMaskIdLow all serve as a whitelist of left-aligned 11-bit
        // CAN IDs.
        // See RM0430 32.7.4 Fig. 387.
        const uint16_t CMR_CAN_ID_FILTER_SHIFT = 5;
 80031c0:	2305      	movs	r3, #5
 80031c2:	877b      	strh	r3, [r7, #58]	; 0x3a
        CAN_FilterTypeDef config = {
            .FilterIdHigh = filter->ids[0] << CMR_CAN_ID_FILTER_SHIFT,
 80031c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031c6:	891b      	ldrh	r3, [r3, #8]
 80031c8:	461a      	mov	r2, r3
 80031ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
        CAN_FilterTypeDef config = {
 80031d0:	613b      	str	r3, [r7, #16]
            .FilterIdLow = filter->ids[1] << CMR_CAN_ID_FILTER_SHIFT,
 80031d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d4:	895b      	ldrh	r3, [r3, #10]
 80031d6:	461a      	mov	r2, r3
 80031d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
        CAN_FilterTypeDef config = {
 80031de:	617b      	str	r3, [r7, #20]
            .FilterMaskIdHigh = filter->ids[2] << CMR_CAN_ID_FILTER_SHIFT,
 80031e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e2:	899b      	ldrh	r3, [r3, #12]
 80031e4:	461a      	mov	r2, r3
 80031e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
        CAN_FilterTypeDef config = {
 80031ec:	61bb      	str	r3, [r7, #24]
            .FilterMaskIdLow = filter->ids[3] << CMR_CAN_ID_FILTER_SHIFT,
 80031ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f0:	89db      	ldrh	r3, [r3, #14]
 80031f2:	461a      	mov	r2, r3
 80031f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
        CAN_FilterTypeDef config = {
 80031fa:	61fb      	str	r3, [r7, #28]
            .FilterFIFOAssignment = filter->rxFIFO,
 80031fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031fe:	685b      	ldr	r3, [r3, #4]
        CAN_FilterTypeDef config = {
 8003200:	623b      	str	r3, [r7, #32]
 8003202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
 8003206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003208:	62bb      	str	r3, [r7, #40]	; 0x28
 800320a:	2300      	movs	r3, #0
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800320e:	2301      	movs	r3, #1
 8003210:	633b      	str	r3, [r7, #48]	; 0x30
 8003212:	230e      	movs	r3, #14
 8003214:	637b      	str	r3, [r7, #52]	; 0x34
            .FilterMode = filterMode,
            .FilterScale = CAN_FILTERSCALE_16BIT,
            .FilterActivation = ENABLE,
            .SlaveStartFilterBank = CMR_CAN_FILTERBANKS};

        if (HAL_CAN_ConfigFilter(&can->handle, &config) != HAL_OK)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f107 0210 	add.w	r2, r7, #16
 800321c:	4611      	mov	r1, r2
 800321e:	4618      	mov	r0, r3
 8003220:	f003 fe24 	bl	8006e6c <HAL_CAN_ConfigFilter>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <_platform_canFilter+0xbc>
        {
            cmr_panic("HAL_CAN_ConfigFilter() failed!");
 800322a:	4809      	ldr	r0, [pc, #36]	; (8003250 <_platform_canFilter+0xdc>)
 800322c:	f000 fe83 	bl	8003f36 <cmr_panic>
    for (size_t i = 0; i < filtersLen; i++)
 8003230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003232:	3301      	adds	r3, #1
 8003234:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003236:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	429a      	cmp	r2, r3
 800323c:	d3ac      	bcc.n	8003198 <_platform_canFilter+0x24>
        }
    }
}
 800323e:	bf00      	nop
 8003240:	bf00      	nop
 8003242:	3750      	adds	r7, #80	; 0x50
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	0800bb6c 	.word	0x0800bb6c
 800324c:	40006800 	.word	0x40006800
 8003250:	0800bb84 	.word	0x0800bb84

08003254 <_platform_rccSystemClockEnable>:
 *
 * @note Generated by STM32Cube. Sets System Clock to 96 MHz, with only APB1
 * Peripheral Clocks at 48 MHz (APB1 Timer Clocks are still 96 MHz).
 */
void _platform_rccSystemClockEnable(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b094      	sub	sp, #80	; 0x50
 8003258:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800325a:	f107 031c 	add.w	r3, r7, #28
 800325e:	2234      	movs	r2, #52	; 0x34
 8003260:	2100      	movs	r1, #0
 8003262:	4618      	mov	r0, r3
 8003264:	f008 fac6 	bl	800b7f4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003268:	f107 0308 	add.w	r3, r7, #8
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	60da      	str	r2, [r3, #12]
 8003276:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    __HAL_RCC_PWR_CLK_ENABLE();
 8003278:	2300      	movs	r3, #0
 800327a:	607b      	str	r3, [r7, #4]
 800327c:	4b29      	ldr	r3, [pc, #164]	; (8003324 <_platform_rccSystemClockEnable+0xd0>)
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	4a28      	ldr	r2, [pc, #160]	; (8003324 <_platform_rccSystemClockEnable+0xd0>)
 8003282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003286:	6413      	str	r3, [r2, #64]	; 0x40
 8003288:	4b26      	ldr	r3, [pc, #152]	; (8003324 <_platform_rccSystemClockEnable+0xd0>)
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003290:	607b      	str	r3, [r7, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003294:	2300      	movs	r3, #0
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	4b23      	ldr	r3, [pc, #140]	; (8003328 <_platform_rccSystemClockEnable+0xd4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a22      	ldr	r2, [pc, #136]	; (8003328 <_platform_rccSystemClockEnable+0xd4>)
 800329e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	4b20      	ldr	r3, [pc, #128]	; (8003328 <_platform_rccSystemClockEnable+0xd4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032ac:	603b      	str	r3, [r7, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]

    // Initializes the CPU, AHB and APB busses clocks
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032b0:	2301      	movs	r3, #1
 80032b2:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032b8:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032ba:	2302      	movs	r3, #2
 80032bc:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032c2:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 25;
 80032c4:	2319      	movs	r3, #25
 80032c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 192;
 80032c8:	23c0      	movs	r3, #192	; 0xc0
 80032ca:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80032cc:	2302      	movs	r3, #2
 80032ce:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 80032d0:	2302      	movs	r3, #2
 80032d2:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 80032d4:	2302      	movs	r3, #2
 80032d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032d8:	f107 031c 	add.w	r3, r7, #28
 80032dc:	4618      	mov	r0, r3
 80032de:	f007 fbab 	bl	800aa38 <HAL_RCC_OscConfig>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <_platform_rccSystemClockEnable+0x9a>
    {
        cmr_panic("HAL_RCC_OscConfig() failed!");
 80032e8:	4810      	ldr	r0, [pc, #64]	; (800332c <_platform_rccSystemClockEnable+0xd8>)
 80032ea:	f000 fe24 	bl	8003f36 <cmr_panic>
    }

    // Initializes the CPU, AHB and APB busses clocks
    // Initializes the CPU, AHB and APB busses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80032ee:	230f      	movs	r3, #15
 80032f0:	60bb      	str	r3, [r7, #8]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032f2:	2302      	movs	r3, #2
 80032f4:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80032fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032fe:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003300:	2300      	movs	r3, #0
 8003302:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003304:	f107 0308 	add.w	r3, r7, #8
 8003308:	2103      	movs	r1, #3
 800330a:	4618      	mov	r0, r3
 800330c:	f007 f9cc 	bl	800a6a8 <HAL_RCC_ClockConfig>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <_platform_rccSystemClockEnable+0xc8>
    {
        cmr_panic("HAL_RCC_ClockConfig() failed!");
 8003316:	4806      	ldr	r0, [pc, #24]	; (8003330 <_platform_rccSystemClockEnable+0xdc>)
 8003318:	f000 fe0d 	bl	8003f36 <cmr_panic>
    }
}
 800331c:	bf00      	nop
 800331e:	3750      	adds	r7, #80	; 0x50
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40023800 	.word	0x40023800
 8003328:	40007000 	.word	0x40007000
 800332c:	0800bba4 	.word	0x0800bba4
 8003330:	0800bbc0 	.word	0x0800bbc0

08003334 <_platform_rccGPIOClockEnable>:
 * @brief Enables the specified GPIO port's clock.
 *
 * @param port The GPIO port.
 */
void _platform_rccGPIOClockEnable(GPIO_TypeDef *port)
{
 8003334:	b480      	push	{r7}
 8003336:	b08b      	sub	sp, #44	; 0x2c
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
    switch ((uintptr_t)port)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a57      	ldr	r2, [pc, #348]	; (800349c <_platform_rccGPIOClockEnable+0x168>)
 8003340:	4293      	cmp	r3, r2
 8003342:	f000 8096 	beq.w	8003472 <_platform_rccGPIOClockEnable+0x13e>
 8003346:	4a55      	ldr	r2, [pc, #340]	; (800349c <_platform_rccGPIOClockEnable+0x168>)
 8003348:	4293      	cmp	r3, r2
 800334a:	f200 80a1 	bhi.w	8003490 <_platform_rccGPIOClockEnable+0x15c>
 800334e:	4a54      	ldr	r2, [pc, #336]	; (80034a0 <_platform_rccGPIOClockEnable+0x16c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d07f      	beq.n	8003454 <_platform_rccGPIOClockEnable+0x120>
 8003354:	4a52      	ldr	r2, [pc, #328]	; (80034a0 <_platform_rccGPIOClockEnable+0x16c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	f200 809a 	bhi.w	8003490 <_platform_rccGPIOClockEnable+0x15c>
 800335c:	4a51      	ldr	r2, [pc, #324]	; (80034a4 <_platform_rccGPIOClockEnable+0x170>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d069      	beq.n	8003436 <_platform_rccGPIOClockEnable+0x102>
 8003362:	4a50      	ldr	r2, [pc, #320]	; (80034a4 <_platform_rccGPIOClockEnable+0x170>)
 8003364:	4293      	cmp	r3, r2
 8003366:	f200 8093 	bhi.w	8003490 <_platform_rccGPIOClockEnable+0x15c>
 800336a:	4a4f      	ldr	r2, [pc, #316]	; (80034a8 <_platform_rccGPIOClockEnable+0x174>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d053      	beq.n	8003418 <_platform_rccGPIOClockEnable+0xe4>
 8003370:	4a4d      	ldr	r2, [pc, #308]	; (80034a8 <_platform_rccGPIOClockEnable+0x174>)
 8003372:	4293      	cmp	r3, r2
 8003374:	f200 808c 	bhi.w	8003490 <_platform_rccGPIOClockEnable+0x15c>
 8003378:	4a4c      	ldr	r2, [pc, #304]	; (80034ac <_platform_rccGPIOClockEnable+0x178>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d03d      	beq.n	80033fa <_platform_rccGPIOClockEnable+0xc6>
 800337e:	4a4b      	ldr	r2, [pc, #300]	; (80034ac <_platform_rccGPIOClockEnable+0x178>)
 8003380:	4293      	cmp	r3, r2
 8003382:	f200 8085 	bhi.w	8003490 <_platform_rccGPIOClockEnable+0x15c>
 8003386:	4a4a      	ldr	r2, [pc, #296]	; (80034b0 <_platform_rccGPIOClockEnable+0x17c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d027      	beq.n	80033dc <_platform_rccGPIOClockEnable+0xa8>
 800338c:	4a48      	ldr	r2, [pc, #288]	; (80034b0 <_platform_rccGPIOClockEnable+0x17c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d87e      	bhi.n	8003490 <_platform_rccGPIOClockEnable+0x15c>
 8003392:	4a48      	ldr	r2, [pc, #288]	; (80034b4 <_platform_rccGPIOClockEnable+0x180>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d003      	beq.n	80033a0 <_platform_rccGPIOClockEnable+0x6c>
 8003398:	4a47      	ldr	r2, [pc, #284]	; (80034b8 <_platform_rccGPIOClockEnable+0x184>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00f      	beq.n	80033be <_platform_rccGPIOClockEnable+0x8a>
        break;
    case GPIOH_BASE:
        __HAL_RCC_GPIOH_CLK_ENABLE();
        break;
    }
}
 800339e:	e077      	b.n	8003490 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a0:	2300      	movs	r3, #0
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
 80033a4:	4b45      	ldr	r3, [pc, #276]	; (80034bc <_platform_rccGPIOClockEnable+0x188>)
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	4a44      	ldr	r2, [pc, #272]	; (80034bc <_platform_rccGPIOClockEnable+0x188>)
 80033aa:	f043 0301 	orr.w	r3, r3, #1
 80033ae:	6313      	str	r3, [r2, #48]	; 0x30
 80033b0:	4b42      	ldr	r3, [pc, #264]	; (80034bc <_platform_rccGPIOClockEnable+0x188>)
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        break;
 80033bc:	e068      	b.n	8003490 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOB_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	623b      	str	r3, [r7, #32]
 80033c2:	4b3e      	ldr	r3, [pc, #248]	; (80034bc <_platform_rccGPIOClockEnable+0x188>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	4a3d      	ldr	r2, [pc, #244]	; (80034bc <_platform_rccGPIOClockEnable+0x188>)
 80033c8:	f043 0302 	orr.w	r3, r3, #2
 80033cc:	6313      	str	r3, [r2, #48]	; 0x30
 80033ce:	4b3b      	ldr	r3, [pc, #236]	; (80034bc <_platform_rccGPIOClockEnable+0x188>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	623b      	str	r3, [r7, #32]
 80033d8:	6a3b      	ldr	r3, [r7, #32]
        break;
 80033da:	e059      	b.n	8003490 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOC_CLK_ENABLE();
 80033dc:	2300      	movs	r3, #0
 80033de:	61fb      	str	r3, [r7, #28]
 80033e0:	4b36      	ldr	r3, [pc, #216]	; (80034bc <_platform_rccGPIOClockEnable+0x188>)
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	4a35      	ldr	r2, [pc, #212]	; (80034bc <_platform_rccGPIOClockEnable+0x188>)
 80033e6:	f043 0304 	orr.w	r3, r3, #4
 80033ea:	6313      	str	r3, [r2, #48]	; 0x30
 80033ec:	4b33      	ldr	r3, [pc, #204]	; (80034bc <_platform_rccGPIOClockEnable+0x188>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	69fb      	ldr	r3, [r7, #28]
        break;
 80033f8:	e04a      	b.n	8003490 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOD_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	61bb      	str	r3, [r7, #24]
 80033fe:	4b2f      	ldr	r3, [pc, #188]	; (80034bc <_platform_rccGPIOClockEnable+0x188>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	4a2e      	ldr	r2, [pc, #184]	; (80034bc <_platform_rccGPIOClockEnable+0x188>)
 8003404:	f043 0308 	orr.w	r3, r3, #8
 8003408:	6313      	str	r3, [r2, #48]	; 0x30
 800340a:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <_platform_rccGPIOClockEnable+0x188>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	61bb      	str	r3, [r7, #24]
 8003414:	69bb      	ldr	r3, [r7, #24]
        break;
 8003416:	e03b      	b.n	8003490 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	4b27      	ldr	r3, [pc, #156]	; (80034bc <_platform_rccGPIOClockEnable+0x188>)
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	4a26      	ldr	r2, [pc, #152]	; (80034bc <_platform_rccGPIOClockEnable+0x188>)
 8003422:	f043 0310 	orr.w	r3, r3, #16
 8003426:	6313      	str	r3, [r2, #48]	; 0x30
 8003428:	4b24      	ldr	r3, [pc, #144]	; (80034bc <_platform_rccGPIOClockEnable+0x188>)
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	697b      	ldr	r3, [r7, #20]
        break;
 8003434:	e02c      	b.n	8003490 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOF_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	4b20      	ldr	r3, [pc, #128]	; (80034bc <_platform_rccGPIOClockEnable+0x188>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	4a1f      	ldr	r2, [pc, #124]	; (80034bc <_platform_rccGPIOClockEnable+0x188>)
 8003440:	f043 0320 	orr.w	r3, r3, #32
 8003444:	6313      	str	r3, [r2, #48]	; 0x30
 8003446:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <_platform_rccGPIOClockEnable+0x188>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	693b      	ldr	r3, [r7, #16]
        break;
 8003452:	e01d      	b.n	8003490 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOG_CLK_ENABLE();
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	4b18      	ldr	r3, [pc, #96]	; (80034bc <_platform_rccGPIOClockEnable+0x188>)
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	4a17      	ldr	r2, [pc, #92]	; (80034bc <_platform_rccGPIOClockEnable+0x188>)
 800345e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003462:	6313      	str	r3, [r2, #48]	; 0x30
 8003464:	4b15      	ldr	r3, [pc, #84]	; (80034bc <_platform_rccGPIOClockEnable+0x188>)
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	68fb      	ldr	r3, [r7, #12]
        break;
 8003470:	e00e      	b.n	8003490 <_platform_rccGPIOClockEnable+0x15c>
        __HAL_RCC_GPIOH_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	60bb      	str	r3, [r7, #8]
 8003476:	4b11      	ldr	r3, [pc, #68]	; (80034bc <_platform_rccGPIOClockEnable+0x188>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	4a10      	ldr	r2, [pc, #64]	; (80034bc <_platform_rccGPIOClockEnable+0x188>)
 800347c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003480:	6313      	str	r3, [r2, #48]	; 0x30
 8003482:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <_platform_rccGPIOClockEnable+0x188>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	68bb      	ldr	r3, [r7, #8]
        break;
 800348e:	bf00      	nop
}
 8003490:	bf00      	nop
 8003492:	372c      	adds	r7, #44	; 0x2c
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	40021c00 	.word	0x40021c00
 80034a0:	40021800 	.word	0x40021800
 80034a4:	40021400 	.word	0x40021400
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40020c00 	.word	0x40020c00
 80034b0:	40020800 	.word	0x40020800
 80034b4:	40020000 	.word	0x40020000
 80034b8:	40020400 	.word	0x40020400
 80034bc:	40023800 	.word	0x40023800

080034c0 <_platform_adcChannelConfig>:
#endif /* HAL_GPIO_MODULE_ENABLED */

#ifdef HAL_ADC_MODULE_ENABLED

ADC_ChannelConfTypeDef _platform_adcChannelConfig(const cmr_adcChannel_t *channel, uint32_t rank)
{
 80034c0:	b490      	push	{r4, r7}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
    ADC_ChannelConfTypeDef channelConfig = {
        .Channel = channel->channel,
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	681b      	ldr	r3, [r3, #0]
    ADC_ChannelConfTypeDef channelConfig = {
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	617b      	str	r3, [r7, #20]
        .Rank = rank, // HAL needs Rank to be from 1 to 16
        .SamplingTime = channel->samplingTime,
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	68db      	ldr	r3, [r3, #12]
    ADC_ChannelConfTypeDef channelConfig = {
 80034da:	61bb      	str	r3, [r7, #24]
 80034dc:	2300      	movs	r3, #0
 80034de:	61fb      	str	r3, [r7, #28]
        .Offset = 0 // reserved, set to 0
    };

    return channelConfig;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	461c      	mov	r4, r3
 80034e4:	f107 0310 	add.w	r3, r7, #16
 80034e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	3720      	adds	r7, #32
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc90      	pop	{r4, r7}
 80034f6:	4770      	bx	lr

080034f8 <_platform_adcPinConfig>:

GPIO_InitTypeDef _platform_adcPinConfig(const cmr_adcChannel_t *channel)
{
 80034f8:	b4b0      	push	{r4, r5, r7}
 80034fa:	b089      	sub	sp, #36	; 0x24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
    GPIO_InitTypeDef pinConfig = {
        .Pin = channel->pin,
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	891b      	ldrh	r3, [r3, #8]
    GPIO_InitTypeDef pinConfig = {
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	2303      	movs	r3, #3
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	2300      	movs	r3, #0
 8003512:	61bb      	str	r3, [r7, #24]
 8003514:	2300      	movs	r3, #0
 8003516:	61fb      	str	r3, [r7, #28]
        .Mode = GPIO_MODE_ANALOG,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_LOW,
        .Alternate = 0};

    return pinConfig;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	461d      	mov	r5, r3
 800351c:	f107 040c 	add.w	r4, r7, #12
 8003520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003522:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	602b      	str	r3, [r5, #0]
}
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	3724      	adds	r7, #36	; 0x24
 800352c:	46bd      	mov	sp, r7
 800352e:	bcb0      	pop	{r4, r5, r7}
 8003530:	4770      	bx	lr
	...

08003534 <_platform_rccADCClockEnable>:
 * @brief Enables the specified ADC's clock.
 *
 * @param instance The HAL ADC instance.
 */
void _platform_rccADCClockEnable(ADC_TypeDef *instance)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
    switch ((uintptr_t)instance)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a0c      	ldr	r2, [pc, #48]	; (8003570 <_platform_rccADCClockEnable+0x3c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d10e      	bne.n	8003562 <_platform_rccADCClockEnable+0x2e>
    {
    case ADC1_BASE:
        __HAL_RCC_ADC1_CLK_ENABLE();
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <_platform_rccADCClockEnable+0x40>)
 800354a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354c:	4a09      	ldr	r2, [pc, #36]	; (8003574 <_platform_rccADCClockEnable+0x40>)
 800354e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003552:	6453      	str	r3, [r2, #68]	; 0x44
 8003554:	4b07      	ldr	r3, [pc, #28]	; (8003574 <_platform_rccADCClockEnable+0x40>)
 8003556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	68fb      	ldr	r3, [r7, #12]
        break;
 8003560:	bf00      	nop
    }
}
 8003562:	bf00      	nop
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40012000 	.word	0x40012000
 8003574:	40023800 	.word	0x40023800

08003578 <_platform_adcInit>:
 * @brief Platform-specifc adc initialization
 *
 *  @param adc The ADC to initialize.
 */
void _platform_adcInit(cmr_adc_t *adc, ADC_TypeDef *instance, cmr_adcChannel_t *channels, const size_t channelsLen)
{
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	f5ad 4da6 	sub.w	sp, sp, #21248	; 0x5300
 800357e:	b091      	sub	sp, #68	; 0x44
 8003580:	af00      	add	r7, sp, #0
 8003582:	f507 7450 	add.w	r4, r7, #832	; 0x340
 8003586:	f5a4 744d 	sub.w	r4, r4, #820	; 0x334
 800358a:	6020      	str	r0, [r4, #0]
 800358c:	f507 7050 	add.w	r0, r7, #832	; 0x340
 8003590:	f5a0 704e 	sub.w	r0, r0, #824	; 0x338
 8003594:	6001      	str	r1, [r0, #0]
 8003596:	f507 7150 	add.w	r1, r7, #832	; 0x340
 800359a:	f5a1 714f 	sub.w	r1, r1, #828	; 0x33c
 800359e:	600a      	str	r2, [r1, #0]
 80035a0:	f507 7250 	add.w	r2, r7, #832	; 0x340
 80035a4:	f5a2 7250 	sub.w	r2, r2, #832	; 0x340
 80035a8:	6013      	str	r3, [r2, #0]
    *adc = (cmr_adc_t){
 80035aa:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80035ae:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f245 3330 	movw	r3, #21296	; 0x5330
 80035ba:	461a      	mov	r2, r3
 80035bc:	2100      	movs	r1, #0
 80035be:	f008 f919 	bl	800b7f4 <memset>
 80035c2:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80035c6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f507 7250 	add.w	r2, r7, #832	; 0x340
 80035d0:	f5a2 724e 	sub.w	r2, r2, #824	; 0x338
 80035d4:	6812      	ldr	r2, [r2, #0]
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80035dc:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80035e6:	605a      	str	r2, [r3, #4]
 80035e8:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80035ec:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2201      	movs	r2, #1
 80035f4:	611a      	str	r2, [r3, #16]
 80035f6:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80035fa:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2201      	movs	r2, #1
 8003602:	615a      	str	r2, [r3, #20]
 8003604:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003608:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8003612:	f5a2 7250 	sub.w	r2, r2, #832	; 0x340
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	61da      	str	r2, [r3, #28]
 800361a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800361e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2020 	strb.w	r2, [r3, #32]
 800362a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800362e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2201      	movs	r2, #1
 8003636:	625a      	str	r2, [r3, #36]	; 0x24
 8003638:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800363c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a0f      	ldr	r2, [pc, #60]	; (8003680 <_platform_adcInit+0x108>)
 8003644:	629a      	str	r2, [r3, #40]	; 0x28
 8003646:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800364a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8003654:	f5a2 724f 	sub.w	r2, r2, #828	; 0x33c
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	649a      	str	r2, [r3, #72]	; 0x48
 800365c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003660:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f507 7250 	add.w	r2, r7, #832	; 0x340
 800366a:	f5a2 7250 	sub.w	r2, r2, #832	; 0x340
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	64da      	str	r2, [r3, #76]	; 0x4c
                .NbrOfConversion = channelsLen,
                .DMAContinuousRequests = DISABLE,
                .EOCSelection = ADC_EOC_SINGLE_CONV}},
        .channels = channels,
        .channelsLen = channelsLen};
}
 8003672:	bf00      	nop
 8003674:	f507 47a6 	add.w	r7, r7, #21248	; 0x5300
 8003678:	3744      	adds	r7, #68	; 0x44
 800367a:	46bd      	mov	sp, r7
 800367c:	bd90      	pop	{r4, r7, pc}
 800367e:	bf00      	nop
 8003680:	0f000001 	.word	0x0f000001

08003684 <_platform_rccCANClockEnable>:
 * @brief Enables the specified CAN interface's clock.
 *
 * @param instance The HAL CAN instance.
 */
void _platform_rccCANClockEnable(CAN_TypeDef *instance)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
    switch ((uintptr_t) instance) {
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a27      	ldr	r2, [pc, #156]	; (800372c <_platform_rccCANClockEnable+0xa8>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d035      	beq.n	8003700 <_platform_rccCANClockEnable+0x7c>
 8003694:	4a25      	ldr	r2, [pc, #148]	; (800372c <_platform_rccCANClockEnable+0xa8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d841      	bhi.n	800371e <_platform_rccCANClockEnable+0x9a>
 800369a:	4a25      	ldr	r2, [pc, #148]	; (8003730 <_platform_rccCANClockEnable+0xac>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <_platform_rccCANClockEnable+0x24>
 80036a0:	4a24      	ldr	r2, [pc, #144]	; (8003734 <_platform_rccCANClockEnable+0xb0>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00f      	beq.n	80036c6 <_platform_rccCANClockEnable+0x42>
            break;
        case CAN3_BASE:
            __HAL_RCC_CAN3_CLK_ENABLE();
            break;
    }
}
 80036a6:	e03a      	b.n	800371e <_platform_rccCANClockEnable+0x9a>
            __HAL_RCC_CAN1_CLK_ENABLE();
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	4b22      	ldr	r3, [pc, #136]	; (8003738 <_platform_rccCANClockEnable+0xb4>)
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	4a21      	ldr	r2, [pc, #132]	; (8003738 <_platform_rccCANClockEnable+0xb4>)
 80036b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036b6:	6413      	str	r3, [r2, #64]	; 0x40
 80036b8:	4b1f      	ldr	r3, [pc, #124]	; (8003738 <_platform_rccCANClockEnable+0xb4>)
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	697b      	ldr	r3, [r7, #20]
            break;
 80036c4:	e02b      	b.n	800371e <_platform_rccCANClockEnable+0x9a>
            __HAL_RCC_CAN2_CLK_ENABLE();
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <_platform_rccCANClockEnable+0xb4>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	4a1a      	ldr	r2, [pc, #104]	; (8003738 <_platform_rccCANClockEnable+0xb4>)
 80036d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036d4:	6413      	str	r3, [r2, #64]	; 0x40
 80036d6:	4b18      	ldr	r3, [pc, #96]	; (8003738 <_platform_rccCANClockEnable+0xb4>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	693b      	ldr	r3, [r7, #16]
            __HAL_RCC_CAN1_CLK_ENABLE();    // CAN2 also needs CAN1 clock.
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	4b14      	ldr	r3, [pc, #80]	; (8003738 <_platform_rccCANClockEnable+0xb4>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	4a13      	ldr	r2, [pc, #76]	; (8003738 <_platform_rccCANClockEnable+0xb4>)
 80036ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036f0:	6413      	str	r3, [r2, #64]	; 0x40
 80036f2:	4b11      	ldr	r3, [pc, #68]	; (8003738 <_platform_rccCANClockEnable+0xb4>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	68fb      	ldr	r3, [r7, #12]
            break;
 80036fe:	e00e      	b.n	800371e <_platform_rccCANClockEnable+0x9a>
            __HAL_RCC_CAN3_CLK_ENABLE();
 8003700:	2300      	movs	r3, #0
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <_platform_rccCANClockEnable+0xb4>)
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	4a0b      	ldr	r2, [pc, #44]	; (8003738 <_platform_rccCANClockEnable+0xb4>)
 800370a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800370e:	6413      	str	r3, [r2, #64]	; 0x40
 8003710:	4b09      	ldr	r3, [pc, #36]	; (8003738 <_platform_rccCANClockEnable+0xb4>)
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	68bb      	ldr	r3, [r7, #8]
            break;
 800371c:	bf00      	nop
}
 800371e:	bf00      	nop
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40006c00 	.word	0x40006c00
 8003730:	40006400 	.word	0x40006400
 8003734:	40006800 	.word	0x40006800
 8003738:	40023800 	.word	0x40023800

0800373c <EXTI0_IRQHandler>:
 */
#define EXTI_IRQHandler(name, pins) \
    void EXTI##name##_IRQHandler(void) { \
        HAL_GPIO_EXTI_IRQHandler(pins); \
    }
EXTI_IRQHandler(0, GPIO_PIN_0)
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
 8003740:	2001      	movs	r0, #1
 8003742:	f004 ff5d 	bl	8008600 <HAL_GPIO_EXTI_IRQHandler>
 8003746:	bf00      	nop
 8003748:	bd80      	pop	{r7, pc}

0800374a <EXTI1_IRQHandler>:
EXTI_IRQHandler(1, GPIO_PIN_1)
 800374a:	b580      	push	{r7, lr}
 800374c:	af00      	add	r7, sp, #0
 800374e:	2002      	movs	r0, #2
 8003750:	f004 ff56 	bl	8008600 <HAL_GPIO_EXTI_IRQHandler>
 8003754:	bf00      	nop
 8003756:	bd80      	pop	{r7, pc}

08003758 <EXTI2_IRQHandler>:
EXTI_IRQHandler(2, GPIO_PIN_2)
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
 800375c:	2004      	movs	r0, #4
 800375e:	f004 ff4f 	bl	8008600 <HAL_GPIO_EXTI_IRQHandler>
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}

08003766 <EXTI3_IRQHandler>:
EXTI_IRQHandler(3, GPIO_PIN_3)
 8003766:	b580      	push	{r7, lr}
 8003768:	af00      	add	r7, sp, #0
 800376a:	2008      	movs	r0, #8
 800376c:	f004 ff48 	bl	8008600 <HAL_GPIO_EXTI_IRQHandler>
 8003770:	bf00      	nop
 8003772:	bd80      	pop	{r7, pc}

08003774 <EXTI4_IRQHandler>:
EXTI_IRQHandler(4, GPIO_PIN_4)
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
 8003778:	2010      	movs	r0, #16
 800377a:	f004 ff41 	bl	8008600 <HAL_GPIO_EXTI_IRQHandler>
 800377e:	bf00      	nop
 8003780:	bd80      	pop	{r7, pc}

08003782 <EXTI9_5_IRQHandler>:
EXTI_IRQHandler(
 8003782:	b580      	push	{r7, lr}
 8003784:	af00      	add	r7, sp, #0
 8003786:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 800378a:	f004 ff39 	bl	8008600 <HAL_GPIO_EXTI_IRQHandler>
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}

08003792 <EXTI15_10_IRQHandler>:
    9_5,
    GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_7 | GPIO_PIN_6 | GPIO_PIN_5
)
EXTI_IRQHandler(
 8003792:	b580      	push	{r7, lr}
 8003794:	af00      	add	r7, sp, #0
 8003796:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 800379a:	f004 ff31 	bl	8008600 <HAL_GPIO_EXTI_IRQHandler>
 800379e:	bf00      	nop
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <cmr_gpioPinInit>:
 * @brief Configures the specified GPIO pin(s).
 *
 * @param pinConfigs The pin configuration(s).
 * @param pinConfigsLen The number of pin configurations.
 */
void cmr_gpioPinInit(const cmr_gpioPinConfig_t *pinConfigs, const size_t pinConfigsLen) {
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
    cmr_gpioPinConfigs = pinConfigs;
 80037ae:	4a16      	ldr	r2, [pc, #88]	; (8003808 <cmr_gpioPinInit+0x64>)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6013      	str	r3, [r2, #0]
    cmr_gpioPinConfigsLen = pinConfigsLen;
 80037b4:	4a15      	ldr	r2, [pc, #84]	; (800380c <cmr_gpioPinInit+0x68>)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	6013      	str	r3, [r2, #0]

    for (size_t i = 0; i < cmr_gpioPinConfigsLen; i++) {
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	e018      	b.n	80037f2 <cmr_gpioPinInit+0x4e>
        const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[i];
 80037c0:	4b11      	ldr	r3, [pc, #68]	; (8003808 <cmr_gpioPinInit+0x64>)
 80037c2:	6819      	ldr	r1, [r3, #0]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4613      	mov	r3, r2
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	4413      	add	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	440b      	add	r3, r1
 80037d0:	60bb      	str	r3, [r7, #8]
        cmr_rccGPIOClockEnable(pinConfig->port);
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 fbb9 	bl	8003f4e <cmr_rccGPIOClockEnable>

        // The HAL GPIO driver doesn't actually declare the initialization
        // struct as `const`, but it doesn't modify it either.
        HAL_GPIO_Init(
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	681a      	ldr	r2, [r3, #0]
            pinConfig->port,
            (GPIO_InitTypeDef *) &pinConfig->init
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	3304      	adds	r3, #4
        HAL_GPIO_Init(
 80037e4:	4619      	mov	r1, r3
 80037e6:	4610      	mov	r0, r2
 80037e8:	f004 fd2a 	bl	8008240 <HAL_GPIO_Init>
    for (size_t i = 0; i < cmr_gpioPinConfigsLen; i++) {
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	3301      	adds	r3, #1
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	4b06      	ldr	r3, [pc, #24]	; (800380c <cmr_gpioPinInit+0x68>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d3e1      	bcc.n	80037c0 <cmr_gpioPinInit+0x1c>
        );
    }
}
 80037fc:	bf00      	nop
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20029c2c 	.word	0x20029c2c
 800380c:	20029c30 	.word	0x20029c30

08003810 <cmr_gpioWrite>:
 * @brief Writes a value to an output GPIO pin.
 *
 * @param pin The pin to write to.
 * @param value The value to write (zero for off; non-zero for on).
 */
void cmr_gpioWrite(size_t pin, int value) {
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
    configASSERT(pin < cmr_gpioPinConfigsLen);
 800381a:	4b18      	ldr	r3, [pc, #96]	; (800387c <cmr_gpioWrite+0x6c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	429a      	cmp	r2, r3
 8003822:	d303      	bcc.n	800382c <cmr_gpioWrite+0x1c>
 8003824:	214f      	movs	r1, #79	; 0x4f
 8003826:	4816      	ldr	r0, [pc, #88]	; (8003880 <cmr_gpioWrite+0x70>)
 8003828:	f000 fb85 	bl	8003f36 <cmr_panic>

    const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[pin];
 800382c:	4b15      	ldr	r3, [pc, #84]	; (8003884 <cmr_gpioWrite+0x74>)
 800382e:	6819      	ldr	r1, [r3, #0]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	4413      	add	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	440b      	add	r3, r1
 800383c:	60fb      	str	r3, [r7, #12]
    configASSERT(
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d007      	beq.n	8003856 <cmr_gpioWrite+0x46>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b11      	cmp	r3, #17
 800384c:	d003      	beq.n	8003856 <cmr_gpioWrite+0x46>
 800384e:	2152      	movs	r1, #82	; 0x52
 8003850:	480d      	ldr	r0, [pc, #52]	; (8003888 <cmr_gpioWrite+0x78>)
 8003852:	f000 fb70 	bl	8003f36 <cmr_panic>
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_PP) ||
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_OD)
    );

    HAL_GPIO_WritePin(
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6818      	ldr	r0, [r3, #0]
        pinConfig->port, pinConfig->init.Pin,
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	685b      	ldr	r3, [r3, #4]
    HAL_GPIO_WritePin(
 800385e:	b299      	uxth	r1, r3
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	bf14      	ite	ne
 8003866:	2301      	movne	r3, #1
 8003868:	2300      	moveq	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	461a      	mov	r2, r3
 800386e:	f004 fe93 	bl	8008598 <HAL_GPIO_WritePin>
        value ? GPIO_PIN_SET : GPIO_PIN_RESET
    );
}
 8003872:	bf00      	nop
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20029c30 	.word	0x20029c30
 8003880:	0800bc28 	.word	0x0800bc28
 8003884:	20029c2c 	.word	0x20029c2c
 8003888:	0800bc7c 	.word	0x0800bc7c

0800388c <cmr_gpioToggle>:
/**
 * @brief Toggles an output GPIO pin's value.
 *
 * @param pin The pin to toggle.
 */
void cmr_gpioToggle(size_t pin) {
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
    configASSERT(pin < cmr_gpioPinConfigsLen);
 8003894:	4b15      	ldr	r3, [pc, #84]	; (80038ec <cmr_gpioToggle+0x60>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	429a      	cmp	r2, r3
 800389c:	d303      	bcc.n	80038a6 <cmr_gpioToggle+0x1a>
 800389e:	2163      	movs	r1, #99	; 0x63
 80038a0:	4813      	ldr	r0, [pc, #76]	; (80038f0 <cmr_gpioToggle+0x64>)
 80038a2:	f000 fb48 	bl	8003f36 <cmr_panic>

    const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[pin];
 80038a6:	4b13      	ldr	r3, [pc, #76]	; (80038f4 <cmr_gpioToggle+0x68>)
 80038a8:	6819      	ldr	r1, [r3, #0]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4413      	add	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	440b      	add	r3, r1
 80038b6:	60fb      	str	r3, [r7, #12]
    configASSERT(
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d007      	beq.n	80038d0 <cmr_gpioToggle+0x44>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2b11      	cmp	r3, #17
 80038c6:	d003      	beq.n	80038d0 <cmr_gpioToggle+0x44>
 80038c8:	2166      	movs	r1, #102	; 0x66
 80038ca:	480b      	ldr	r0, [pc, #44]	; (80038f8 <cmr_gpioToggle+0x6c>)
 80038cc:	f000 fb33 	bl	8003f36 <cmr_panic>
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_PP) ||
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_OD)
    );

    HAL_GPIO_TogglePin(pinConfig->port, pinConfig->init.Pin);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	4619      	mov	r1, r3
 80038dc:	4610      	mov	r0, r2
 80038de:	f004 fe74 	bl	80085ca <HAL_GPIO_TogglePin>
}
 80038e2:	bf00      	nop
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20029c30 	.word	0x20029c30
 80038f0:	0800bc28 	.word	0x0800bc28
 80038f4:	20029c2c 	.word	0x20029c2c
 80038f8:	0800bc7c 	.word	0x0800bc7c

080038fc <cmr_gpioRead>:
/**
 * @brief Reads a value from a GPIO pin.
 *
 * @return 0 if the pin was off; otherwise 1.
 */
int cmr_gpioRead(size_t pin) {
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
    configASSERT(pin < cmr_gpioPinConfigsLen);
 8003904:	4b13      	ldr	r3, [pc, #76]	; (8003954 <cmr_gpioRead+0x58>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	429a      	cmp	r2, r3
 800390c:	d303      	bcc.n	8003916 <cmr_gpioRead+0x1a>
 800390e:	2174      	movs	r1, #116	; 0x74
 8003910:	4811      	ldr	r0, [pc, #68]	; (8003958 <cmr_gpioRead+0x5c>)
 8003912:	f000 fb10 	bl	8003f36 <cmr_panic>

    const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[pin];
 8003916:	4b11      	ldr	r3, [pc, #68]	; (800395c <cmr_gpioRead+0x60>)
 8003918:	6819      	ldr	r1, [r3, #0]
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	4413      	add	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	440b      	add	r3, r1
 8003926:	60fb      	str	r3, [r7, #12]
    GPIO_PinState state = HAL_GPIO_ReadPin(
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681a      	ldr	r2, [r3, #0]
        pinConfig->port, pinConfig->init.Pin
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685b      	ldr	r3, [r3, #4]
    GPIO_PinState state = HAL_GPIO_ReadPin(
 8003930:	b29b      	uxth	r3, r3
 8003932:	4619      	mov	r1, r3
 8003934:	4610      	mov	r0, r2
 8003936:	f004 fe17 	bl	8008568 <HAL_GPIO_ReadPin>
 800393a:	4603      	mov	r3, r0
 800393c:	72fb      	strb	r3, [r7, #11]
    );
    if (state == GPIO_PIN_RESET) {
 800393e:	7afb      	ldrb	r3, [r7, #11]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <cmr_gpioRead+0x4c>
        return 0;
 8003944:	2300      	movs	r3, #0
 8003946:	e000      	b.n	800394a <cmr_gpioRead+0x4e>
    }

    return 1;
 8003948:	2301      	movs	r3, #1
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20029c30 	.word	0x20029c30
 8003958:	0800bc28 	.word	0x0800bc28
 800395c:	20029c2c 	.word	0x20029c2c

08003960 <I2C1_EV_IRQHandler>:
static cmr_i2cDevice_t cmr_i2cDevices[2];

/**
 * @brief I2C interrupt handler.
 */
void I2C1_EV_IRQHandler(void) {
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
    HAL_I2C_EV_IRQHandler(cmr_i2cDevices[0].handle);
 8003964:	4b03      	ldr	r3, [pc, #12]	; (8003974 <I2C1_EV_IRQHandler+0x14>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f005 f9d7 	bl	8008d1c <HAL_I2C_EV_IRQHandler>
}
 800396e:	bf00      	nop
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20029c34 	.word	0x20029c34

08003978 <I2C2_EV_IRQHandler>:

/**
 * @brief I2C interrupt handler.
 */
void I2C2_EV_IRQHandler(void) {
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
    HAL_I2C_EV_IRQHandler(cmr_i2cDevices[1].handle);
 800397c:	4b03      	ldr	r3, [pc, #12]	; (800398c <I2C2_EV_IRQHandler+0x14>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	4618      	mov	r0, r3
 8003982:	f005 f9cb 	bl	8008d1c <HAL_I2C_EV_IRQHandler>
}
 8003986:	bf00      	nop
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	20029c34 	.word	0x20029c34

08003990 <I2C1_ER_IRQHandler>:
/**
 * @brief I2C interrupt handler.
 */
void I2C1_ER_IRQHandler(void) {
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
    HAL_I2C_ER_IRQHandler(cmr_i2cDevices[0].handle);
 8003994:	4b03      	ldr	r3, [pc, #12]	; (80039a4 <I2C1_ER_IRQHandler+0x14>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f005 fb25 	bl	8008fe8 <HAL_I2C_ER_IRQHandler>
}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20029c34 	.word	0x20029c34

080039a8 <I2C2_ER_IRQHandler>:

/**
 * @brief I2C interrupt handler.
 */
void I2C2_ER_IRQHandler(void) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
    HAL_I2C_ER_IRQHandler(cmr_i2cDevices[1].handle);
 80039ac:	4b03      	ldr	r3, [pc, #12]	; (80039bc <I2C2_ER_IRQHandler+0x14>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f005 fb19 	bl	8008fe8 <HAL_I2C_ER_IRQHandler>
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20029c34 	.word	0x20029c34

080039c0 <cmr_i2cDoneCallback>:
 *
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL I2C handle.
 */
static void cmr_i2cDoneCallback(I2C_HandleTypeDef *handle, int tx) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
    char *addr = (void *) handle;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	617b      	str	r3, [r7, #20]
    cmr_i2c_t *i2c = (void *) (addr - offsetof(cmr_i2c_t, handle));
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	613b      	str	r3, [r7, #16]

    // Indicate completion.
    BaseType_t higherWoken;
    SemaphoreHandle_t sem = tx ? i2c->txDone : i2c->rxDone;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <cmr_i2cDoneCallback+0x20>
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80039de:	e002      	b.n	80039e6 <cmr_i2cDoneCallback+0x26>
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80039e6:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreGiveFromISR(sem, &higherWoken) != pdTRUE) {
 80039e8:	f107 0308 	add.w	r3, r7, #8
 80039ec:	4619      	mov	r1, r3
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f001 f9e4 	bl	8004dbc <xQueueGiveFromISR>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d002      	beq.n	8003a00 <cmr_i2cDoneCallback+0x40>
        cmr_panic("I2C done semaphore released more than once!");
 80039fa:	4809      	ldr	r0, [pc, #36]	; (8003a20 <cmr_i2cDoneCallback+0x60>)
 80039fc:	f000 fa9b 	bl	8003f36 <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d007      	beq.n	8003a16 <cmr_i2cDoneCallback+0x56>
 8003a06:	4b07      	ldr	r3, [pc, #28]	; (8003a24 <cmr_i2cDoneCallback+0x64>)
 8003a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	f3bf 8f6f 	isb	sy
}
 8003a16:	bf00      	nop
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	0800bd68 	.word	0x0800bd68
 8003a24:	e000ed04 	.word	0xe000ed04

08003a28 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *handle) {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
    cmr_i2cDoneCallback(handle, 1);
 8003a30:	2101      	movs	r1, #1
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff ffc4 	bl	80039c0 <cmr_i2cDoneCallback>
}
 8003a38:	bf00      	nop
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *handle) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
    cmr_i2cDoneCallback(handle, 0);
 8003a48:	2100      	movs	r1, #0
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff ffb8 	bl	80039c0 <cmr_i2cDoneCallback>
}
 8003a50:	bf00      	nop
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <cmr_i2cDmaInit>:
    cmr_i2c_t *i2c, I2C_TypeDef *instance,
    DMA_Stream_TypeDef *txDmaStream, DMA_Stream_TypeDef *rxDmaStream,
    uint32_t clockSpeed, uint32_t ownAddr,
    GPIO_TypeDef *i2cClkPort, uint32_t i2cClkPin,
    GPIO_TypeDef *i2cDataPort, uint32_t i2cDataPin
) {
 8003a58:	b590      	push	{r4, r7, lr}
 8003a5a:	b0f7      	sub	sp, #476	; 0x1dc
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	f507 74e8 	add.w	r4, r7, #464	; 0x1d0
 8003a62:	f5a4 74e2 	sub.w	r4, r4, #452	; 0x1c4
 8003a66:	6020      	str	r0, [r4, #0]
 8003a68:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 8003a6c:	f5a0 70e4 	sub.w	r0, r0, #456	; 0x1c8
 8003a70:	6001      	str	r1, [r0, #0]
 8003a72:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8003a76:	f5a1 71e6 	sub.w	r1, r1, #460	; 0x1cc
 8003a7a:	600a      	str	r2, [r1, #0]
 8003a7c:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8003a80:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003a84:	6013      	str	r3, [r2, #0]
    *i2c = (cmr_i2c_t) {
 8003a86:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003a8a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
 8003a96:	461a      	mov	r2, r3
 8003a98:	2100      	movs	r1, #0
 8003a9a:	f007 feab 	bl	800b7f4 <memset>
 8003a9e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003aa2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8003aac:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003ab0:	6812      	ldr	r2, [r2, #0]
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003ab8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8003ac2:	605a      	str	r2, [r3, #4]
 8003ac4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003ac8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8003ad2:	60da      	str	r2, [r3, #12]
 8003ad4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003ad8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ae2:	611a      	str	r2, [r3, #16]
 8003ae4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003ae8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8003af2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	655a      	str	r2, [r3, #84]	; 0x54
 8003afa:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003afe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b08:	659a      	str	r2, [r3, #88]	; 0x58
 8003b0a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003b0e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2240      	movs	r2, #64	; 0x40
 8003b16:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b18:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003b1c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b26:	665a      	str	r2, [r3, #100]	; 0x64
 8003b28:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003b2c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b36:	675a      	str	r2, [r3, #116]	; 0x74
 8003b38:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003b3c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2203      	movs	r2, #3
 8003b44:	67da      	str	r2, [r3, #124]	; 0x7c
 8003b46:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003b4a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8003b54:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003b58:	6812      	ldr	r2, [r2, #0]
 8003b5a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8003b5e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003b62:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b6c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8003b70:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003b74:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b7e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8003b82:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003b86:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b90:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8003b94:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003b98:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
            }
        }

    };

    i2c->txDone = xSemaphoreCreateBinaryStatic(&(i2c->txDoneBuf));
 8003ba4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003ba8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	9200      	str	r2, [sp, #0]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2100      	movs	r1, #0
 8003bba:	2001      	movs	r0, #1
 8003bbc:	f001 f858 	bl	8004c70 <xQueueGenericCreateStatic>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003bc6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    i2c->rxDone = xSemaphoreCreateBinaryStatic(&(i2c->rxDoneBuf));
 8003bd0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003bd4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8003bde:	2203      	movs	r2, #3
 8003be0:	9200      	str	r2, [sp, #0]
 8003be2:	2200      	movs	r2, #0
 8003be4:	2100      	movs	r1, #0
 8003be6:	2001      	movs	r0, #1
 8003be8:	f001 f842 	bl	8004c70 <xQueueGenericCreateStatic>
 8003bec:	4602      	mov	r2, r0
 8003bee:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003bf2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    configASSERT(i2c->txDone != NULL);
 8003bfc:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003c00:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d104      	bne.n	8003c18 <cmr_i2cDmaInit+0x1c0>
 8003c0e:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8003c12:	4876      	ldr	r0, [pc, #472]	; (8003dec <cmr_i2cDmaInit+0x394>)
 8003c14:	f000 f98f 	bl	8003f36 <cmr_panic>
    configASSERT(i2c->rxDone != NULL);
 8003c18:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003c1c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d104      	bne.n	8003c34 <cmr_i2cDmaInit+0x1dc>
 8003c2a:	f240 110d 	movw	r1, #269	; 0x10d
 8003c2e:	4870      	ldr	r0, [pc, #448]	; (8003df0 <cmr_i2cDmaInit+0x398>)
 8003c30:	f000 f981 	bl	8003f36 <cmr_panic>

    cmr_rccI2CClockEnable(instance);
 8003c34:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003c38:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	f000 f9a7 	bl	8003f90 <cmr_rccI2CClockEnable>
    cmr_rccGPIOClockEnable(i2cClkPort);
 8003c42:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 8003c46:	f000 f982 	bl	8003f4e <cmr_rccGPIOClockEnable>
    cmr_rccGPIOClockEnable(i2cDataPort);
 8003c4a:	f8d7 01f0 	ldr.w	r0, [r7, #496]	; 0x1f0
 8003c4e:	f000 f97e 	bl	8003f4e <cmr_rccGPIOClockEnable>

    if (HAL_I2C_Init(&(i2c->handle)) != HAL_OK) {
 8003c52:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003c56:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f004 fcf3 	bl	8008648 <HAL_I2C_Init>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <cmr_i2cDmaInit+0x216>
        cmr_panic("HAL_I2C_Init() failed!");
 8003c68:	4862      	ldr	r0, [pc, #392]	; (8003df4 <cmr_i2cDmaInit+0x39c>)
 8003c6a:	f000 f964 	bl	8003f36 <cmr_panic>
    }

    // TODO: Init GPIO with CMR drivers instead of HAL
    GPIO_InitTypeDef pinConfig = {
 8003c6e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003c72:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003c76:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003c80:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003c84:	2212      	movs	r2, #18
 8003c86:	605a      	str	r2, [r3, #4]
 8003c88:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003c8c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003c90:	2201      	movs	r2, #1
 8003c92:	609a      	str	r2, [r3, #8]
 8003c94:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003c98:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	60da      	str	r2, [r3, #12]
 8003ca0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003ca4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003ca8:	2204      	movs	r2, #4
 8003caa:	611a      	str	r2, [r3, #16]
        .Pull = GPIO_PULLUP,
        .Speed = GPIO_SPEED_FREQ_VERY_HIGH,
        .Alternate = GPIO_AF4_I2C1
    };

    HAL_GPIO_Init(i2cClkPort, &pinConfig);
 8003cac:	f107 0310 	add.w	r3, r7, #16
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 8003cb6:	f004 fac3 	bl	8008240 <HAL_GPIO_Init>
    pinConfig.Pin = i2cDataPin;
 8003cba:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003cbe:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003cc2:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8003cc6:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(i2cDataPort, &pinConfig);
 8003cc8:	f107 0310 	add.w	r3, r7, #16
 8003ccc:	4619      	mov	r1, r3
 8003cce:	f8d7 01f0 	ldr.w	r0, [r7, #496]	; 0x1f0
 8003cd2:	f004 fab5 	bl	8008240 <HAL_GPIO_Init>

    cmr_dmaInit(&(i2c->dmatx_handle));
 8003cd6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003cda:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3354      	adds	r3, #84	; 0x54
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fe ff44 	bl	8002b70 <cmr_dmaInit>
    __HAL_LINKDMA(&i2c->handle,hdmatx,i2c->dmatx_handle);
 8003ce8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003cec:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8003cf6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003cfa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	635a      	str	r2, [r3, #52]	; 0x34
 8003d02:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003d06:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003d10:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    cmr_dmaInit(&(i2c->dmarx_handle));
 8003d1a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003d1e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	33b4      	adds	r3, #180	; 0xb4
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fe ff22 	bl	8002b70 <cmr_dmaInit>
    __HAL_LINKDMA(&i2c->handle,hdmarx,i2c->dmarx_handle);
 8003d2c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003d30:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8003d3a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003d3e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	639a      	str	r2, [r3, #56]	; 0x38
 8003d46:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003d4a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003d54:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

    if (instance == I2C1) {
 8003d5e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003d62:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a23      	ldr	r2, [pc, #140]	; (8003df8 <cmr_i2cDmaInit+0x3a0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d117      	bne.n	8003d9e <cmr_i2cDmaInit+0x346>
        cmr_i2cDevices[0].handle = &(i2c->handle);
 8003d6e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003d72:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a20      	ldr	r2, [pc, #128]	; (8003dfc <cmr_i2cDmaInit+0x3a4>)
 8003d7a:	6013      	str	r3, [r2, #0]
        HAL_NVIC_SetPriority(I2C1_EV_IRQn, 7, 0);
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2107      	movs	r1, #7
 8003d80:	201f      	movs	r0, #31
 8003d82:	f003 fe72 	bl	8007a6a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003d86:	201f      	movs	r0, #31
 8003d88:	f003 fe8b 	bl	8007aa2 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(I2C1_ER_IRQn, 7, 0);
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2107      	movs	r1, #7
 8003d90:	2020      	movs	r0, #32
 8003d92:	f003 fe6a 	bl	8007a6a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003d96:	2020      	movs	r0, #32
 8003d98:	f003 fe83 	bl	8007aa2 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(I2C2_ER_IRQn, 7, 0);
        HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
    } else {
        cmr_panic("Unexpected I2C instance!");
    }
}
 8003d9c:	e022      	b.n	8003de4 <cmr_i2cDmaInit+0x38c>
    } else if (instance == I2C2) {
 8003d9e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003da2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a15      	ldr	r2, [pc, #84]	; (8003e00 <cmr_i2cDmaInit+0x3a8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d117      	bne.n	8003dde <cmr_i2cDmaInit+0x386>
    	cmr_i2cDevices[1].handle = &(i2c->handle);
 8003dae:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003db2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a10      	ldr	r2, [pc, #64]	; (8003dfc <cmr_i2cDmaInit+0x3a4>)
 8003dba:	6053      	str	r3, [r2, #4]
        HAL_NVIC_SetPriority(I2C2_EV_IRQn, 7, 0);
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2107      	movs	r1, #7
 8003dc0:	2021      	movs	r0, #33	; 0x21
 8003dc2:	f003 fe52 	bl	8007a6a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003dc6:	2021      	movs	r0, #33	; 0x21
 8003dc8:	f003 fe6b 	bl	8007aa2 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(I2C2_ER_IRQn, 7, 0);
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2107      	movs	r1, #7
 8003dd0:	2022      	movs	r0, #34	; 0x22
 8003dd2:	f003 fe4a 	bl	8007a6a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003dd6:	2022      	movs	r0, #34	; 0x22
 8003dd8:	f003 fe63 	bl	8007aa2 <HAL_NVIC_EnableIRQ>
}
 8003ddc:	e002      	b.n	8003de4 <cmr_i2cDmaInit+0x38c>
        cmr_panic("Unexpected I2C instance!");
 8003dde:	4809      	ldr	r0, [pc, #36]	; (8003e04 <cmr_i2cDmaInit+0x3ac>)
 8003de0:	f000 f8a9 	bl	8003f36 <cmr_panic>
}
 8003de4:	f507 77ea 	add.w	r7, r7, #468	; 0x1d4
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd90      	pop	{r4, r7, pc}
 8003dec:	0800bdac 	.word	0x0800bdac
 8003df0:	0800bdf8 	.word	0x0800bdf8
 8003df4:	0800bd94 	.word	0x0800bd94
 8003df8:	40005400 	.word	0x40005400
 8003dfc:	20029c34 	.word	0x20029c34
 8003e00:	40005800 	.word	0x40005800
 8003e04:	0800be44 	.word	0x0800be44

08003e08 <cmr_i2cDmaTX>:
  * @param timeout_ms Amount of time to wait in milliseconds.
  *
  * @retval 0 upon success, or otherwise a negative error code
  */
int cmr_i2cDmaTX(cmr_i2c_t *i2c, uint16_t devAddr, uint8_t *data,
              size_t dataLength, uint32_t timeout_ms) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	607a      	str	r2, [r7, #4]
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	460b      	mov	r3, r1
 8003e16:	817b      	strh	r3, [r7, #10]
	configASSERT(HAL_I2C_GetState(&(i2c->handle)) == HAL_I2C_STATE_READY);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f005 f9dd 	bl	80091da <HAL_I2C_GetState>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b20      	cmp	r3, #32
 8003e24:	d004      	beq.n	8003e30 <cmr_i2cDmaTX+0x28>
 8003e26:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8003e2a:	4813      	ldr	r0, [pc, #76]	; (8003e78 <cmr_i2cDmaTX+0x70>)
 8003e2c:	f000 f883 	bl	8003f36 <cmr_panic>
    // Shift the address by 1 per HAL library suggestion
    HAL_StatusTypeDef txStatus = HAL_I2C_Master_Transmit_DMA(
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	897b      	ldrh	r3, [r7, #10]
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	b299      	uxth	r1, r3
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	f004 fd41 	bl	80088c4 <HAL_I2C_Master_Transmit_DMA>
 8003e42:	4603      	mov	r3, r0
 8003e44:	75fb      	strb	r3, [r7, #23]
        &(i2c->handle), devAddr << 1, data, dataLength 
    );

    if (txStatus != HAL_OK) {
 8003e46:	7dfb      	ldrb	r3, [r7, #23]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <cmr_i2cDmaTX+0x4a>
        return -1;
 8003e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e50:	e00e      	b.n	8003e70 <cmr_i2cDmaTX+0x68>
    }

    if (xSemaphoreTake(i2c->txDone, timeout_ms) != pdTRUE) {
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8003e58:	2300      	movs	r3, #0
 8003e5a:	6a3a      	ldr	r2, [r7, #32]
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	f001 f827 	bl	8004eb0 <xQueueGenericReceive>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d002      	beq.n	8003e6e <cmr_i2cDmaTX+0x66>
        return -2;
 8003e68:	f06f 0301 	mvn.w	r3, #1
 8003e6c:	e000      	b.n	8003e70 <cmr_i2cDmaTX+0x68>
    }

    return 0;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	0800be60 	.word	0x0800be60

08003e7c <cmr_i2cDmaRX>:
  * @param timeout_ms Amount of time to wait in milliseconds.
  *
  * @retval 0 upon success, or otherwise a negative error code
  */
int cmr_i2cDmaRX(cmr_i2c_t *i2c, uint16_t devAddr, uint8_t *data,
              size_t dataLength, uint32_t timeout_ms) {
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	607a      	str	r2, [r7, #4]
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	817b      	strh	r3, [r7, #10]
	configASSERT(HAL_I2C_GetState(&(i2c->handle)) == HAL_I2C_STATE_READY);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f005 f9a3 	bl	80091da <HAL_I2C_GetState>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	d004      	beq.n	8003ea4 <cmr_i2cDmaRX+0x28>
 8003e9a:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8003e9e:	4813      	ldr	r0, [pc, #76]	; (8003eec <cmr_i2cDmaRX+0x70>)
 8003ea0:	f000 f849 	bl	8003f36 <cmr_panic>
    // Shift the address by 1 per HAL library suggestion
    HAL_StatusTypeDef rxStatus = HAL_I2C_Master_Receive_DMA(
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	897b      	ldrh	r3, [r7, #10]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	b299      	uxth	r1, r3
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	f004 fe1d 	bl	8008af0 <HAL_I2C_Master_Receive_DMA>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	75fb      	strb	r3, [r7, #23]
        &(i2c->handle), devAddr << 1, data, dataLength 
    );


    if (rxStatus != HAL_OK) {
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <cmr_i2cDmaRX+0x4a>
        return -1;
 8003ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec4:	e00e      	b.n	8003ee4 <cmr_i2cDmaRX+0x68>
    }

    if (xSemaphoreTake(i2c->rxDone, timeout_ms) != pdTRUE) {
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f8d3 0160 	ldr.w	r0, [r3, #352]	; 0x160
 8003ecc:	2300      	movs	r3, #0
 8003ece:	6a3a      	ldr	r2, [r7, #32]
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	f000 ffed 	bl	8004eb0 <xQueueGenericReceive>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d002      	beq.n	8003ee2 <cmr_i2cDmaRX+0x66>
        return -2;
 8003edc:	f06f 0301 	mvn.w	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <cmr_i2cDmaRX+0x68>
    }

    return 0;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	0800be60 	.word	0x0800be60

08003ef0 <SysTick_Handler>:
extern void xPortSysTickHandler(void);

/**
 * @brief System tick interrupt handler.
 */
void SysTick_Handler(void) {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
    HAL_IncTick();  // Report tick to HAL.
 8003ef4:	f002 fae0 	bl	80064b8 <HAL_IncTick>

    if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED) {
 8003ef8:	f001 ff78 	bl	8005dec <xTaskGetSchedulerState>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d002      	beq.n	8003f08 <SysTick_Handler+0x18>
        return;
    }

    xPortSysTickHandler();  // Invoke FreeRTOS tick handler.
 8003f02:	f002 fa01 	bl	8006308 <xPortSysTickHandler>
 8003f06:	e000      	b.n	8003f0a <SysTick_Handler+0x1a>
        return;
 8003f08:	bf00      	nop
}
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <NMI_Handler>:

/**
 * @brief Non-maskable interrupt handler.
 */
void NMI_Handler(void) {
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
    // Nothing to do.
}
 8003f10:	bf00      	nop
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <DebugMon_Handler>:

/**
 * @brief Debug monitor exception handler.
 */
void DebugMon_Handler(void) {
 8003f1a:	b480      	push	{r7}
 8003f1c:	af00      	add	r7, sp, #0
    // Nothing to do.
}
 8003f1e:	bf00      	nop
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <cmr_panicSetup>:
 * @brief Default pre-panic setup implementation.
 *
 * Nothing happens by default; this should be overridden if custom behavior is
 * desired.
 */
void cmr_panicSetup(void) {
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
    // Nothing to do.
}
 8003f2c:	bf00      	nop
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <cmr_panic>:
 * @param fmt The formatting string.
 * @param ... Additional arguments for formatting.
 *
 * @return Does not return.
 */
void cmr_panic(const char *fmt, ...) {
 8003f36:	b40f      	push	{r0, r1, r2, r3}
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
    (void) fmt;

    cmr_panicSetup();
 8003f3c:	f7ff fff4 	bl	8003f28 <cmr_panicSetup>

    while (1) {
        continue;
 8003f40:	e7fe      	b.n	8003f40 <cmr_panic+0xa>

08003f42 <cmr_rccSystemClockEnable>:
 * @brief Configures the system and peripheral clocks using external oscillator
 *
 * @note Generated by STM32Cube. Sets System Clock to 96 MHz, with only APB1
 * Peripheral Clocks at 48 MHz (APB1 Timer Clocks are still 96 MHz).
 */
void cmr_rccSystemClockEnable(void)  {
 8003f42:	b580      	push	{r7, lr}
 8003f44:	af00      	add	r7, sp, #0
    _platform_rccSystemClockEnable();
 8003f46:	f7ff f985 	bl	8003254 <_platform_rccSystemClockEnable>
}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <cmr_rccGPIOClockEnable>:
/**
 * @brief Enables the specified GPIO port's clock.
 *
 * @param port The GPIO port.
 */
void cmr_rccGPIOClockEnable(GPIO_TypeDef *port) {
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
    _platform_rccGPIOClockEnable(port);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7ff f9ec 	bl	8003334 <_platform_rccGPIOClockEnable>
}
 8003f5c:	bf00      	nop
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <cmr_rccADCClockEnable>:
/**
 * @brief Enables the specified ADC's clock.
 *
 * @param instance The HAL ADC instance.
 */
void cmr_rccADCClockEnable(ADC_TypeDef *instance) {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
    _platform_rccADCClockEnable(instance);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7ff fae1 	bl	8003534 <_platform_rccADCClockEnable>
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <cmr_rccCANClockEnable>:
/**
 * @brief Enables the specified CAN interface's clock.
 *
 * @param instance The HAL CAN instance.
 */
void cmr_rccCANClockEnable(CAN_TypeDef *instance) {
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
    _platform_rccCANClockEnable(instance);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff fb7e 	bl	8003684 <_platform_rccCANClockEnable>
}
 8003f88:	bf00      	nop
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <cmr_rccI2CClockEnable>:
/**
 * @brief Enables the specified I2C port's clock.
 *
 * @param instance The HAL I2C instance.
 */
void cmr_rccI2CClockEnable(I2C_TypeDef *instance) {
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
    switch ((uintptr_t) instance) {
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a20      	ldr	r2, [pc, #128]	; (800401c <cmr_rccI2CClockEnable+0x8c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d027      	beq.n	8003ff0 <cmr_rccI2CClockEnable+0x60>
 8003fa0:	4a1e      	ldr	r2, [pc, #120]	; (800401c <cmr_rccI2CClockEnable+0x8c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d833      	bhi.n	800400e <cmr_rccI2CClockEnable+0x7e>
 8003fa6:	4a1e      	ldr	r2, [pc, #120]	; (8004020 <cmr_rccI2CClockEnable+0x90>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d003      	beq.n	8003fb4 <cmr_rccI2CClockEnable+0x24>
 8003fac:	4a1d      	ldr	r2, [pc, #116]	; (8004024 <cmr_rccI2CClockEnable+0x94>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00f      	beq.n	8003fd2 <cmr_rccI2CClockEnable+0x42>
            break;
        case I2C3_BASE:
            __HAL_RCC_I2C3_CLK_ENABLE();
            break;
    }
}
 8003fb2:	e02c      	b.n	800400e <cmr_rccI2CClockEnable+0x7e>
            __HAL_RCC_I2C1_CLK_ENABLE();
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <cmr_rccI2CClockEnable+0x98>)
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	4a1a      	ldr	r2, [pc, #104]	; (8004028 <cmr_rccI2CClockEnable+0x98>)
 8003fbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8003fc4:	4b18      	ldr	r3, [pc, #96]	; (8004028 <cmr_rccI2CClockEnable+0x98>)
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fcc:	617b      	str	r3, [r7, #20]
 8003fce:	697b      	ldr	r3, [r7, #20]
            break;
 8003fd0:	e01d      	b.n	800400e <cmr_rccI2CClockEnable+0x7e>
            __HAL_RCC_I2C2_CLK_ENABLE();
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	4b14      	ldr	r3, [pc, #80]	; (8004028 <cmr_rccI2CClockEnable+0x98>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	4a13      	ldr	r2, [pc, #76]	; (8004028 <cmr_rccI2CClockEnable+0x98>)
 8003fdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fe2:	4b11      	ldr	r3, [pc, #68]	; (8004028 <cmr_rccI2CClockEnable+0x98>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	693b      	ldr	r3, [r7, #16]
            break;
 8003fee:	e00e      	b.n	800400e <cmr_rccI2CClockEnable+0x7e>
            __HAL_RCC_I2C3_CLK_ENABLE();
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <cmr_rccI2CClockEnable+0x98>)
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	4a0b      	ldr	r2, [pc, #44]	; (8004028 <cmr_rccI2CClockEnable+0x98>)
 8003ffa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ffe:	6413      	str	r3, [r2, #64]	; 0x40
 8004000:	4b09      	ldr	r3, [pc, #36]	; (8004028 <cmr_rccI2CClockEnable+0x98>)
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	68fb      	ldr	r3, [r7, #12]
            break;
 800400c:	bf00      	nop
}
 800400e:	bf00      	nop
 8004010:	371c      	adds	r7, #28
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40005c00 	.word	0x40005c00
 8004020:	40005400 	.word	0x40005400
 8004024:	40005800 	.word	0x40005800
 8004028:	40023800 	.word	0x40023800

0800402c <cmr_sensorInit>:
 *
 * @note The sensor's public fields should already be filled in!
 *
 * @param sensor The sensor to initialize.
 */
static void cmr_sensorInit(cmr_sensor_t *sensor) {
 800402c:	b580      	push	{r7, lr}
 800402e:	b08a      	sub	sp, #40	; 0x28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
    configASSERT(sensor->readingMax >= sensor->readingMin);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	429a      	cmp	r2, r3
 800403e:	d203      	bcs.n	8004048 <cmr_sensorInit+0x1c>
 8004040:	2114      	movs	r1, #20
 8004042:	482a      	ldr	r0, [pc, #168]	; (80040ec <cmr_sensorInit+0xc0>)
 8004044:	f7ff ff77 	bl	8003f36 <cmr_panic>

    // Calculate tolerance.
    const uint32_t readingRange = sensor->readingMax - sensor->readingMin;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	61bb      	str	r3, [r7, #24]
    uint32_t readingTolerance;
    // Prevent overflow.
    if (UINT32_MAX / sensor->outOfRange_pcnt < readingRange) {
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	2100      	movs	r1, #0
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	fba3 2302 	umull	r2, r3, r3, r2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d000      	beq.n	8004066 <cmr_sensorInit+0x3a>
 8004064:	2101      	movs	r1, #1
 8004066:	460b      	mov	r3, r1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <cmr_sensorInit+0x56>
        readingTolerance = (readingRange / 100) * sensor->outOfRange_pcnt;
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	4a20      	ldr	r2, [pc, #128]	; (80040f0 <cmr_sensorInit+0xc4>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6912      	ldr	r2, [r2, #16]
 800407a:	fb02 f303 	mul.w	r3, r2, r3
 800407e:	627b      	str	r3, [r7, #36]	; 0x24
 8004080:	e009      	b.n	8004096 <cmr_sensorInit+0x6a>
    } else {
        readingTolerance = (readingRange * sensor->outOfRange_pcnt) / 100;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	fb02 f303 	mul.w	r3, r2, r3
 800408c:	4a18      	ldr	r2, [pc, #96]	; (80040f0 <cmr_sensorInit+0xc4>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
    }

    // Calculate thresholds from tolerance.
    uint32_t readingUpper = sensor->readingMax + readingTolerance;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800409c:	4413      	add	r3, r2
 800409e:	623b      	str	r3, [r7, #32]
    if (readingUpper < sensor->readingMax) {
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	6a3a      	ldr	r2, [r7, #32]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d202      	bcs.n	80040b0 <cmr_sensorInit+0x84>
        readingUpper = UINT32_MAX;  // Overflow!
 80040aa:	f04f 33ff 	mov.w	r3, #4294967295
 80040ae:	623b      	str	r3, [r7, #32]
    }

    uint32_t readingLower = sensor->readingMin - readingTolerance;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	61fb      	str	r3, [r7, #28]
    if (readingLower > sensor->readingMin) {
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	69fa      	ldr	r2, [r7, #28]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d901      	bls.n	80040c8 <cmr_sensorInit+0x9c>
        readingLower = 0;  // Underflow!
 80040c4:	2300      	movs	r3, #0
 80040c6:	61fb      	str	r3, [r7, #28]
    }

    sensor->_ = (struct cmr_sensor_private) {
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a3a      	ldr	r2, [r7, #32]
 80040cc:	619a      	str	r2, [r3, #24]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	61da      	str	r2, [r3, #28]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	621a      	str	r2, [r3, #32]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        .readingUpper = readingUpper,
        .readingLower = readingLower,
        .value = 0,
        .error = CMR_SENSOR_ERR_NONE
    };
}
 80040e2:	bf00      	nop
 80040e4:	3728      	adds	r7, #40	; 0x28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	0800bed0 	.word	0x0800bed0
 80040f0:	51eb851f 	.word	0x51eb851f

080040f4 <cmr_sensorUpdate>:
/**
 * @brief Updates the sensor.
 *
 * @param sensor The sensor to sample.
 */
static void cmr_sensorUpdate(cmr_sensor_t *sensor) {
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
    uint32_t reading = sensor->sample(sensor);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	4798      	blx	r3
 8004104:	60b8      	str	r0, [r7, #8]

    // Check if sensor has gone out-of-range.
    if (reading < sensor->_.readingLower || sensor->_.readingUpper < reading) {
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	429a      	cmp	r2, r3
 800410e:	d304      	bcc.n	800411a <cmr_sensorUpdate+0x26>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	429a      	cmp	r2, r3
 8004118:	d904      	bls.n	8004124 <cmr_sensorUpdate+0x30>
        sensor->_.error = CMR_SENSOR_ERR_OUT_OF_RANGE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004122:	e003      	b.n	800412c <cmr_sensorUpdate+0x38>
    } else {
        sensor->_.error = CMR_SENSOR_ERR_NONE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }

    uint32_t value;
    if (sensor->conv != NULL) {
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d007      	beq.n	8004144 <cmr_sensorUpdate+0x50>
        value = sensor->conv(sensor, reading);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	68b9      	ldr	r1, [r7, #8]
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	4798      	blx	r3
 800413e:	4603      	mov	r3, r0
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	e001      	b.n	8004148 <cmr_sensorUpdate+0x54>
    } else {
        value = reading;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	60fb      	str	r3, [r7, #12]
    }

    sensor->_.value = value;
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	621a      	str	r2, [r3, #32]
}
 800414e:	bf00      	nop
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <cmr_sensorListInit>:
 * @param sensorsLen The total number of sensors in the array.
 */
void cmr_sensorListInit(
    cmr_sensorList_t *list,
    cmr_sensor_t *sensors, size_t sensorsLen
) {
 8004156:	b580      	push	{r7, lr}
 8004158:	b086      	sub	sp, #24
 800415a:	af00      	add	r7, sp, #0
 800415c:	60f8      	str	r0, [r7, #12]
 800415e:	60b9      	str	r1, [r7, #8]
 8004160:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < sensorsLen; i++) {
 8004162:	2300      	movs	r3, #0
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	e00d      	b.n	8004184 <cmr_sensorListInit+0x2e>
        cmr_sensorInit(sensors + i);
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	461a      	mov	r2, r3
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	4413      	add	r3, r2
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff ff57 	bl	800402c <cmr_sensorInit>
    for (size_t i = 0; i < sensorsLen; i++) {
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	3301      	adds	r3, #1
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	429a      	cmp	r2, r3
 800418a:	d3ed      	bcc.n	8004168 <cmr_sensorListInit+0x12>
    }

    list->sensors = sensors;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	601a      	str	r2, [r3, #0]
    list->sensorsLen = sensorsLen;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	605a      	str	r2, [r3, #4]
}
 8004198:	bf00      	nop
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <cmr_sensorListUpdate>:
/**
 * @brief Updates the given sensor list.
 *
 * @param list The list to update.
 */
void cmr_sensorListUpdate(cmr_sensorList_t *list) {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < list->sensorsLen; i++) {
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	e00d      	b.n	80041ca <cmr_sensorListUpdate+0x2a>
        cmr_sensorUpdate(list->sensors + i);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6819      	ldr	r1, [r3, #0]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	440b      	add	r3, r1
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff ff98 	bl	80040f4 <cmr_sensorUpdate>
    for (size_t i = 0; i < list->sensorsLen; i++) {
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	3301      	adds	r3, #1
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d3ec      	bcc.n	80041ae <cmr_sensorListUpdate+0xe>
    }
}
 80041d4:	bf00      	nop
 80041d6:	bf00      	nop
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <cmr_sensorListGetValue>:
 *
 * @return The most recent converted value.
 */
int32_t cmr_sensorListGetValue(
    cmr_sensorList_t *list, size_t channel
) {
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6039      	str	r1, [r7, #0]
    return list->sensors[channel]._.value;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6819      	ldr	r1, [r3, #0]
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	440b      	add	r3, r1
 80041f8:	6a1b      	ldr	r3, [r3, #32]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
	...

08004208 <cmr_taskInit>:
    cmr_task_t *task,
    const char *name,
    UBaseType_t priority,
    TaskFunction_t func,
    void *arg
) {
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af04      	add	r7, sp, #16
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
        func,
        name,
        sizeof(task->stackBuf) / sizeof(task->stackBuf[0]),
        arg,
        priority,
        task->stackBuf,
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	3360      	adds	r3, #96	; 0x60
    task->handle = xTaskCreateStatic(
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	3204      	adds	r2, #4
 800421e:	9202      	str	r2, [sp, #8]
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	f44f 52a5 	mov.w	r2, #5280	; 0x14a0
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	6838      	ldr	r0, [r7, #0]
 8004230:	f001 f896 	bl	8005360 <xTaskCreateStatic>
 8004234:	4602      	mov	r2, r0
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	601a      	str	r2, [r3, #0]
    );
#else
#error "At least one of configSUPPORT_{STATIC,DYNAMIC}_ALLOCATION must be 1!"
#endif

    configASSERT(task->handle != NULL);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d103      	bne.n	800424a <cmr_taskInit+0x42>
 8004242:	2130      	movs	r1, #48	; 0x30
 8004244:	4803      	ldr	r0, [pc, #12]	; (8004254 <cmr_taskInit+0x4c>)
 8004246:	f7ff fe76 	bl	8003f36 <cmr_panic>
}
 800424a:	bf00      	nop
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	0800bf34 	.word	0x0800bf34

08004258 <vApplicationGetIdleTaskMemory>:
 */
void vApplicationGetIdleTaskMemory(
    StaticTask_t **task,
    StackType_t **stack,
    uint32_t *stackLen
) {
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
    static StaticTask_t taskBuf;

    /** @brief The task's stack buffer. */
    static StackType_t stackBuf[configMINIMAL_STACK_SIZE];

    *task = &taskBuf;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4a07      	ldr	r2, [pc, #28]	; (8004284 <vApplicationGetIdleTaskMemory+0x2c>)
 8004268:	601a      	str	r2, [r3, #0]
    *stack = stackBuf;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	4a06      	ldr	r2, [pc, #24]	; (8004288 <vApplicationGetIdleTaskMemory+0x30>)
 800426e:	601a      	str	r2, [r3, #0]
    *stackLen = sizeof(stackBuf) / sizeof(stackBuf[0]);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f44f 52a5 	mov.w	r2, #5280	; 0x14a0
 8004276:	601a      	str	r2, [r3, #0]
}
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	20029c3c 	.word	0x20029c3c
 8004288:	20029c98 	.word	0x20029c98

0800428c <USART1_IRQHandler>:
            HAL_StatusTypeDef status = HAL_UART_AbortReceive_IT(handle); \
            configASSERT(status == HAL_OK); \
        } \
        HAL_UART_IRQHandler(handle); \
    }
UART_FOREACH(UART_IRQ_HANDLERS)
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	4b18      	ldr	r3, [pc, #96]	; (80042f4 <USART1_IRQHandler+0x68>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f003 0310 	and.w	r3, r3, #16
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d01e      	beq.n	80042e4 <USART1_IRQHandler+0x58>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0210 	bic.w	r2, r2, #16
 80042b4:	60da      	str	r2, [r3, #12]
 80042b6:	2300      	movs	r3, #0
 80042b8:	607b      	str	r3, [r7, #4]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	607b      	str	r3, [r7, #4]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	607b      	str	r3, [r7, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f006 fedf 	bl	800b090 <HAL_UART_AbortReceive_IT>
 80042d2:	4603      	mov	r3, r0
 80042d4:	72fb      	strb	r3, [r7, #11]
 80042d6:	7afb      	ldrb	r3, [r7, #11]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <USART1_IRQHandler+0x58>
 80042dc:	2177      	movs	r1, #119	; 0x77
 80042de:	4806      	ldr	r0, [pc, #24]	; (80042f8 <USART1_IRQHandler+0x6c>)
 80042e0:	f7ff fe29 	bl	8003f36 <cmr_panic>
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f006 ff2b 	bl	800b140 <HAL_UART_IRQHandler>
 80042ea:	bf00      	nop
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	2002ef18 	.word	0x2002ef18
 80042f8:	0800bf98 	.word	0x0800bf98

080042fc <USART2_IRQHandler>:
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	4b18      	ldr	r3, [pc, #96]	; (8004364 <USART2_IRQHandler+0x68>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f003 0310 	and.w	r3, r3, #16
 8004312:	2b00      	cmp	r3, #0
 8004314:	d01e      	beq.n	8004354 <USART2_IRQHandler+0x58>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0210 	bic.w	r2, r2, #16
 8004324:	60da      	str	r2, [r3, #12]
 8004326:	2300      	movs	r3, #0
 8004328:	607b      	str	r3, [r7, #4]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	607b      	str	r3, [r7, #4]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	607b      	str	r3, [r7, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f006 fea7 	bl	800b090 <HAL_UART_AbortReceive_IT>
 8004342:	4603      	mov	r3, r0
 8004344:	72fb      	strb	r3, [r7, #11]
 8004346:	7afb      	ldrb	r3, [r7, #11]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <USART2_IRQHandler+0x58>
 800434c:	2177      	movs	r1, #119	; 0x77
 800434e:	4806      	ldr	r0, [pc, #24]	; (8004368 <USART2_IRQHandler+0x6c>)
 8004350:	f7ff fdf1 	bl	8003f36 <cmr_panic>
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f006 fef3 	bl	800b140 <HAL_UART_IRQHandler>
 800435a:	bf00      	nop
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	2002ef18 	.word	0x2002ef18
 8004368:	0800bf98 	.word	0x0800bf98

0800436c <USART3_IRQHandler>:
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	4b18      	ldr	r3, [pc, #96]	; (80043d4 <USART3_IRQHandler+0x68>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 0310 	and.w	r3, r3, #16
 8004382:	2b00      	cmp	r3, #0
 8004384:	d01e      	beq.n	80043c4 <USART3_IRQHandler+0x58>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0210 	bic.w	r2, r2, #16
 8004394:	60da      	str	r2, [r3, #12]
 8004396:	2300      	movs	r3, #0
 8004398:	607b      	str	r3, [r7, #4]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	607b      	str	r3, [r7, #4]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	607b      	str	r3, [r7, #4]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f006 fe6f 	bl	800b090 <HAL_UART_AbortReceive_IT>
 80043b2:	4603      	mov	r3, r0
 80043b4:	72fb      	strb	r3, [r7, #11]
 80043b6:	7afb      	ldrb	r3, [r7, #11]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <USART3_IRQHandler+0x58>
 80043bc:	2177      	movs	r1, #119	; 0x77
 80043be:	4806      	ldr	r0, [pc, #24]	; (80043d8 <USART3_IRQHandler+0x6c>)
 80043c0:	f7ff fdb9 	bl	8003f36 <cmr_panic>
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f006 febb 	bl	800b140 <HAL_UART_IRQHandler>
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	2002ef18 	.word	0x2002ef18
 80043d8:	0800bf98 	.word	0x0800bf98

080043dc <UART4_IRQHandler>:
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	4b18      	ldr	r3, [pc, #96]	; (8004444 <UART4_IRQHandler+0x68>)
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d01e      	beq.n	8004434 <UART4_IRQHandler+0x58>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0210 	bic.w	r2, r2, #16
 8004404:	60da      	str	r2, [r3, #12]
 8004406:	2300      	movs	r3, #0
 8004408:	607b      	str	r3, [r7, #4]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	607b      	str	r3, [r7, #4]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	607b      	str	r3, [r7, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f006 fe37 	bl	800b090 <HAL_UART_AbortReceive_IT>
 8004422:	4603      	mov	r3, r0
 8004424:	72fb      	strb	r3, [r7, #11]
 8004426:	7afb      	ldrb	r3, [r7, #11]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <UART4_IRQHandler+0x58>
 800442c:	2177      	movs	r1, #119	; 0x77
 800442e:	4806      	ldr	r0, [pc, #24]	; (8004448 <UART4_IRQHandler+0x6c>)
 8004430:	f7ff fd81 	bl	8003f36 <cmr_panic>
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f006 fe83 	bl	800b140 <HAL_UART_IRQHandler>
 800443a:	bf00      	nop
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	2002ef18 	.word	0x2002ef18
 8004448:	0800bf98 	.word	0x0800bf98

0800444c <UART5_IRQHandler>:
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	4b18      	ldr	r3, [pc, #96]	; (80044b4 <UART5_IRQHandler+0x68>)
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b00      	cmp	r3, #0
 8004464:	d01e      	beq.n	80044a4 <UART5_IRQHandler+0x58>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0210 	bic.w	r2, r2, #16
 8004474:	60da      	str	r2, [r3, #12]
 8004476:	2300      	movs	r3, #0
 8004478:	607b      	str	r3, [r7, #4]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	607b      	str	r3, [r7, #4]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	607b      	str	r3, [r7, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f006 fdff 	bl	800b090 <HAL_UART_AbortReceive_IT>
 8004492:	4603      	mov	r3, r0
 8004494:	72fb      	strb	r3, [r7, #11]
 8004496:	7afb      	ldrb	r3, [r7, #11]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <UART5_IRQHandler+0x58>
 800449c:	2177      	movs	r1, #119	; 0x77
 800449e:	4806      	ldr	r0, [pc, #24]	; (80044b8 <UART5_IRQHandler+0x6c>)
 80044a0:	f7ff fd49 	bl	8003f36 <cmr_panic>
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f006 fe4b 	bl	800b140 <HAL_UART_IRQHandler>
 80044aa:	bf00      	nop
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	2002ef18 	.word	0x2002ef18
 80044b8:	0800bf98 	.word	0x0800bf98

080044bc <USART6_IRQHandler>:
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	4b18      	ldr	r3, [pc, #96]	; (8004524 <USART6_IRQHandler+0x68>)
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d01e      	beq.n	8004514 <USART6_IRQHandler+0x58>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0210 	bic.w	r2, r2, #16
 80044e4:	60da      	str	r2, [r3, #12]
 80044e6:	2300      	movs	r3, #0
 80044e8:	607b      	str	r3, [r7, #4]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	607b      	str	r3, [r7, #4]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	607b      	str	r3, [r7, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f006 fdc7 	bl	800b090 <HAL_UART_AbortReceive_IT>
 8004502:	4603      	mov	r3, r0
 8004504:	72fb      	strb	r3, [r7, #11]
 8004506:	7afb      	ldrb	r3, [r7, #11]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <USART6_IRQHandler+0x58>
 800450c:	2177      	movs	r1, #119	; 0x77
 800450e:	4806      	ldr	r0, [pc, #24]	; (8004528 <USART6_IRQHandler+0x6c>)
 8004510:	f7ff fd11 	bl	8003f36 <cmr_panic>
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f006 fe13 	bl	800b140 <HAL_UART_IRQHandler>
 800451a:	bf00      	nop
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	2002ef18 	.word	0x2002ef18
 8004528:	0800bf98 	.word	0x0800bf98

0800452c <UART7_IRQHandler>:
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	4b18      	ldr	r3, [pc, #96]	; (8004594 <UART7_IRQHandler+0x68>)
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b00      	cmp	r3, #0
 8004544:	d01e      	beq.n	8004584 <UART7_IRQHandler+0x58>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68da      	ldr	r2, [r3, #12]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0210 	bic.w	r2, r2, #16
 8004554:	60da      	str	r2, [r3, #12]
 8004556:	2300      	movs	r3, #0
 8004558:	607b      	str	r3, [r7, #4]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	607b      	str	r3, [r7, #4]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	607b      	str	r3, [r7, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f006 fd8f 	bl	800b090 <HAL_UART_AbortReceive_IT>
 8004572:	4603      	mov	r3, r0
 8004574:	72fb      	strb	r3, [r7, #11]
 8004576:	7afb      	ldrb	r3, [r7, #11]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <UART7_IRQHandler+0x58>
 800457c:	2177      	movs	r1, #119	; 0x77
 800457e:	4806      	ldr	r0, [pc, #24]	; (8004598 <UART7_IRQHandler+0x6c>)
 8004580:	f7ff fcd9 	bl	8003f36 <cmr_panic>
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f006 fddb 	bl	800b140 <HAL_UART_IRQHandler>
 800458a:	bf00      	nop
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	2002ef18 	.word	0x2002ef18
 8004598:	0800bf98 	.word	0x0800bf98

0800459c <UART8_IRQHandler>:
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	4b18      	ldr	r3, [pc, #96]	; (8004604 <UART8_IRQHandler+0x68>)
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f003 0310 	and.w	r3, r3, #16
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d01e      	beq.n	80045f4 <UART8_IRQHandler+0x58>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0210 	bic.w	r2, r2, #16
 80045c4:	60da      	str	r2, [r3, #12]
 80045c6:	2300      	movs	r3, #0
 80045c8:	607b      	str	r3, [r7, #4]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	607b      	str	r3, [r7, #4]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	607b      	str	r3, [r7, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f006 fd57 	bl	800b090 <HAL_UART_AbortReceive_IT>
 80045e2:	4603      	mov	r3, r0
 80045e4:	72fb      	strb	r3, [r7, #11]
 80045e6:	7afb      	ldrb	r3, [r7, #11]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <UART8_IRQHandler+0x58>
 80045ec:	2177      	movs	r1, #119	; 0x77
 80045ee:	4806      	ldr	r0, [pc, #24]	; (8004608 <UART8_IRQHandler+0x6c>)
 80045f0:	f7ff fca1 	bl	8003f36 <cmr_panic>
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f006 fda3 	bl	800b140 <HAL_UART_IRQHandler>
 80045fa:	bf00      	nop
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	2002ef18 	.word	0x2002ef18
 8004608:	0800bf98 	.word	0x0800bf98

0800460c <UART9_IRQHandler>:
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	4b18      	ldr	r3, [pc, #96]	; (8004674 <UART9_IRQHandler+0x68>)
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f003 0310 	and.w	r3, r3, #16
 8004622:	2b00      	cmp	r3, #0
 8004624:	d01e      	beq.n	8004664 <UART9_IRQHandler+0x58>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0210 	bic.w	r2, r2, #16
 8004634:	60da      	str	r2, [r3, #12]
 8004636:	2300      	movs	r3, #0
 8004638:	607b      	str	r3, [r7, #4]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	607b      	str	r3, [r7, #4]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	607b      	str	r3, [r7, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f006 fd1f 	bl	800b090 <HAL_UART_AbortReceive_IT>
 8004652:	4603      	mov	r3, r0
 8004654:	72fb      	strb	r3, [r7, #11]
 8004656:	7afb      	ldrb	r3, [r7, #11]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <UART9_IRQHandler+0x58>
 800465c:	2177      	movs	r1, #119	; 0x77
 800465e:	4806      	ldr	r0, [pc, #24]	; (8004678 <UART9_IRQHandler+0x6c>)
 8004660:	f7ff fc69 	bl	8003f36 <cmr_panic>
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f006 fd6b 	bl	800b140 <HAL_UART_IRQHandler>
 800466a:	bf00      	nop
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	2002ef18 	.word	0x2002ef18
 8004678:	0800bf98 	.word	0x0800bf98

0800467c <UART10_IRQHandler>:
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	4b18      	ldr	r3, [pc, #96]	; (80046e4 <UART10_IRQHandler+0x68>)
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0310 	and.w	r3, r3, #16
 8004692:	2b00      	cmp	r3, #0
 8004694:	d01e      	beq.n	80046d4 <UART10_IRQHandler+0x58>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68da      	ldr	r2, [r3, #12]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0210 	bic.w	r2, r2, #16
 80046a4:	60da      	str	r2, [r3, #12]
 80046a6:	2300      	movs	r3, #0
 80046a8:	607b      	str	r3, [r7, #4]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	607b      	str	r3, [r7, #4]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	607b      	str	r3, [r7, #4]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f006 fce7 	bl	800b090 <HAL_UART_AbortReceive_IT>
 80046c2:	4603      	mov	r3, r0
 80046c4:	72fb      	strb	r3, [r7, #11]
 80046c6:	7afb      	ldrb	r3, [r7, #11]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <UART10_IRQHandler+0x58>
 80046cc:	2177      	movs	r1, #119	; 0x77
 80046ce:	4806      	ldr	r0, [pc, #24]	; (80046e8 <UART10_IRQHandler+0x6c>)
 80046d0:	f7ff fc31 	bl	8003f36 <cmr_panic>
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f006 fd33 	bl	800b140 <HAL_UART_IRQHandler>
 80046da:	bf00      	nop
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	2002ef18 	.word	0x2002ef18
 80046e8:	0800bf98 	.word	0x0800bf98

080046ec <cmr_uartFromHandle>:
 *
 * @param handle The handle.
 *
 * @return The interface.
 */
static cmr_uart_t *cmr_uartFromHandle(UART_HandleTypeDef *handle) {
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
    char *addr = (void *) handle;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	60fb      	str	r3, [r7, #12]
    return (void *) (addr - offsetof(cmr_uart_t, handle));
 80046f8:	68fb      	ldr	r3, [r7, #12]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
	...

08004708 <HAL_UART_TxCpltCallback>:
 * @warning Called from an interrupt handler!
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *handle) {
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
    cmr_uart_t *uart = cmr_uartFromHandle(handle);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff ffeb 	bl	80046ec <cmr_uartFromHandle>
 8004716:	6178      	str	r0, [r7, #20]

    BaseType_t higherWoken;
    cmr_uartMsg_t *msg;
    if (xQueueReceiveFromISR(uart->tx.q, &msg, &higherWoken) != pdTRUE) {
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800471e:	f107 020c 	add.w	r2, r7, #12
 8004722:	f107 0108 	add.w	r1, r7, #8
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fcc2 	bl	80050b0 <xQueueReceiveFromISR>
 800472c:	4603      	mov	r3, r0
 800472e:	2b01      	cmp	r3, #1
 8004730:	d002      	beq.n	8004738 <HAL_UART_TxCpltCallback+0x30>
        cmr_panic("HAL UART TX completion handler called with empty queue!");
 8004732:	4831      	ldr	r0, [pc, #196]	; (80047f8 <HAL_UART_TxCpltCallback+0xf0>)
 8004734:	f7ff fbff 	bl	8003f36 <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d007      	beq.n	800474e <HAL_UART_TxCpltCallback+0x46>
 800473e:	4b2f      	ldr	r3, [pc, #188]	; (80047fc <HAL_UART_TxCpltCallback+0xf4>)
 8004740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	f3bf 8f6f 	isb	sy

    // Signal message as done.
    if (xSemaphoreGiveFromISR(msg->doneSem, &higherWoken) != pdTRUE) {
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f107 020c 	add.w	r2, r7, #12
 8004756:	4611      	mov	r1, r2
 8004758:	4618      	mov	r0, r3
 800475a:	f000 fb2f 	bl	8004dbc <xQueueGiveFromISR>
 800475e:	4603      	mov	r3, r0
 8004760:	2b01      	cmp	r3, #1
 8004762:	d002      	beq.n	800476a <HAL_UART_TxCpltCallback+0x62>
        cmr_panic("HAL UART TX completion handler failed to signal message!");
 8004764:	4826      	ldr	r0, [pc, #152]	; (8004800 <HAL_UART_TxCpltCallback+0xf8>)
 8004766:	f7ff fbe6 	bl	8003f36 <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d007      	beq.n	8004780 <HAL_UART_TxCpltCallback+0x78>
 8004770:	4b22      	ldr	r3, [pc, #136]	; (80047fc <HAL_UART_TxCpltCallback+0xf4>)
 8004772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	f3bf 8f6f 	isb	sy

    if (xQueuePeekFromISR(uart->tx.q, &msg) != pdTRUE) {
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004786:	f107 0208 	add.w	r2, r7, #8
 800478a:	4611      	mov	r1, r2
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fd01 	bl	8005194 <xQueuePeekFromISR>
 8004792:	4603      	mov	r3, r0
 8004794:	2b01      	cmp	r3, #1
 8004796:	d01a      	beq.n	80047ce <HAL_UART_TxCpltCallback+0xc6>
        // No more messages pending; release DMA semaphore.
        if (xSemaphoreGiveFromISR(uart->tx.dmaSem, &higherWoken) != pdTRUE) {
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800479e:	f107 020c 	add.w	r2, r7, #12
 80047a2:	4611      	mov	r1, r2
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fb09 	bl	8004dbc <xQueueGiveFromISR>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d002      	beq.n	80047b6 <HAL_UART_TxCpltCallback+0xae>
            cmr_panic("HAL UART TX completion handler failed to release DMA!");
 80047b0:	4814      	ldr	r0, [pc, #80]	; (8004804 <HAL_UART_TxCpltCallback+0xfc>)
 80047b2:	f7ff fbc0 	bl	8003f36 <cmr_panic>
        }
        portYIELD_FROM_ISR(higherWoken);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d019      	beq.n	80047f0 <HAL_UART_TxCpltCallback+0xe8>
 80047bc:	4b0f      	ldr	r3, [pc, #60]	; (80047fc <HAL_UART_TxCpltCallback+0xf4>)
 80047be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	e011      	b.n	80047f2 <HAL_UART_TxCpltCallback+0xea>
        return;
    }

    // Message pending; start DMA.
    HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(
 80047ce:	6978      	ldr	r0, [r7, #20]
        &uart->handle, msg->data, msg->len
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(
 80047d8:	b29b      	uxth	r3, r3
 80047da:	461a      	mov	r2, r3
 80047dc:	f006 fb6c 	bl	800aeb8 <HAL_UART_Transmit_DMA>
 80047e0:	4603      	mov	r3, r0
 80047e2:	74fb      	strb	r3, [r7, #19]
    );
    if (status != HAL_OK) {
 80047e4:	7cfb      	ldrb	r3, [r7, #19]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_UART_TxCpltCallback+0xea>
        cmr_panic("HAL UART TX failed!");
 80047ea:	4807      	ldr	r0, [pc, #28]	; (8004808 <HAL_UART_TxCpltCallback+0x100>)
 80047ec:	f7ff fba3 	bl	8003f36 <cmr_panic>
        return;
 80047f0:	bf00      	nop
    }
}
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	0800bfe0 	.word	0x0800bfe0
 80047fc:	e000ed04 	.word	0xe000ed04
 8004800:	0800c018 	.word	0x0800c018
 8004804:	0800c054 	.word	0x0800c054
 8004808:	0800c08c 	.word	0x0800c08c

0800480c <HAL_UART_RxCpltCallback>:
 * @warning Called from an interrupt handler!
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL UART handle.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *handle) {
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
    cmr_uart_t *uart = cmr_uartFromHandle(handle);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7ff ff69 	bl	80046ec <cmr_uartFromHandle>
 800481a:	61f8      	str	r0, [r7, #28]

    BaseType_t higherWoken;
    cmr_uartMsg_t *msg;
    if (xQueueReceiveFromISR(uart->rx.q, &msg, &higherWoken) != pdTRUE) {
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004822:	f107 0210 	add.w	r2, r7, #16
 8004826:	f107 010c 	add.w	r1, r7, #12
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fc40 	bl	80050b0 <xQueueReceiveFromISR>
 8004830:	4603      	mov	r3, r0
 8004832:	2b01      	cmp	r3, #1
 8004834:	d002      	beq.n	800483c <HAL_UART_RxCpltCallback+0x30>
        cmr_panic("HAL UART RX completion handler called with empty queue!");
 8004836:	4842      	ldr	r0, [pc, #264]	; (8004940 <HAL_UART_RxCpltCallback+0x134>)
 8004838:	f7ff fb7d 	bl	8003f36 <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <HAL_UART_RxCpltCallback+0x46>
 8004842:	4b40      	ldr	r3, [pc, #256]	; (8004944 <HAL_UART_RxCpltCallback+0x138>)
 8004844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	f3bf 8f6f 	isb	sy

    // Record actual number of bytes received.
    size_t remLen = __HAL_DMA_GET_COUNTER(&uart->rx.dma);
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	61bb      	str	r3, [r7, #24]
    configASSERT(remLen <= msg->len);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	429a      	cmp	r2, r3
 8004862:	d903      	bls.n	800486c <HAL_UART_RxCpltCallback+0x60>
 8004864:	21c6      	movs	r1, #198	; 0xc6
 8004866:	4838      	ldr	r0, [pc, #224]	; (8004948 <HAL_UART_RxCpltCallback+0x13c>)
 8004868:	f7ff fb65 	bl	8003f36 <cmr_panic>
    msg->len -= remLen;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	1a8a      	subs	r2, r1, r2
 8004876:	651a      	str	r2, [r3, #80]	; 0x50

    // Signal message as done.
    if (xSemaphoreGiveFromISR(msg->doneSem, &higherWoken) != pdTRUE) {
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f107 0210 	add.w	r2, r7, #16
 8004880:	4611      	mov	r1, r2
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fa9a 	bl	8004dbc <xQueueGiveFromISR>
 8004888:	4603      	mov	r3, r0
 800488a:	2b01      	cmp	r3, #1
 800488c:	d002      	beq.n	8004894 <HAL_UART_RxCpltCallback+0x88>
        cmr_panic("HAL UART RX completion handler failed to signal message!");
 800488e:	482f      	ldr	r0, [pc, #188]	; (800494c <HAL_UART_RxCpltCallback+0x140>)
 8004890:	f7ff fb51 	bl	8003f36 <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d007      	beq.n	80048aa <HAL_UART_RxCpltCallback+0x9e>
 800489a:	4b2a      	ldr	r3, [pc, #168]	; (8004944 <HAL_UART_RxCpltCallback+0x138>)
 800489c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	f3bf 8f6f 	isb	sy

    if (xQueuePeekFromISR(uart->rx.q, &msg) != pdTRUE) {
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80048b0:	f107 020c 	add.w	r2, r7, #12
 80048b4:	4611      	mov	r1, r2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fc6c 	bl	8005194 <xQueuePeekFromISR>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d01a      	beq.n	80048f8 <HAL_UART_RxCpltCallback+0xec>
        // No more messages pending; release DMA semaphore.
        if (xSemaphoreGiveFromISR(uart->rx.dmaSem, &higherWoken) != pdTRUE) {
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048c8:	f107 0210 	add.w	r2, r7, #16
 80048cc:	4611      	mov	r1, r2
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fa74 	bl	8004dbc <xQueueGiveFromISR>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d002      	beq.n	80048e0 <HAL_UART_RxCpltCallback+0xd4>
            cmr_panic("HAL UART RX completion handler failed to release DMA!");
 80048da:	481d      	ldr	r0, [pc, #116]	; (8004950 <HAL_UART_RxCpltCallback+0x144>)
 80048dc:	f7ff fb2b 	bl	8003f36 <cmr_panic>
        }
        portYIELD_FROM_ISR(higherWoken);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d028      	beq.n	8004938 <HAL_UART_RxCpltCallback+0x12c>
 80048e6:	4b17      	ldr	r3, [pc, #92]	; (8004944 <HAL_UART_RxCpltCallback+0x138>)
 80048e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	e020      	b.n	800493a <HAL_UART_RxCpltCallback+0x12e>
        return;
    }

    // Message pending; start DMA.
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(
 80048f8:	69f8      	ldr	r0, [r7, #28]
        &uart->handle, msg->data, msg->len
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(
 8004902:	b29b      	uxth	r3, r3
 8004904:	461a      	mov	r2, r3
 8004906:	f006 fb43 	bl	800af90 <HAL_UART_Receive_DMA>
 800490a:	4603      	mov	r3, r0
 800490c:	75fb      	strb	r3, [r7, #23]
    );
    if (status != HAL_OK) {
 800490e:	7dfb      	ldrb	r3, [r7, #23]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <HAL_UART_RxCpltCallback+0x10e>
        cmr_panic("HAL UART RX failed!");
 8004914:	480f      	ldr	r0, [pc, #60]	; (8004954 <HAL_UART_RxCpltCallback+0x148>)
 8004916:	f7ff fb0e 	bl	8003f36 <cmr_panic>
    }

    if (msg->opts & CMR_UART_RXOPTS_IDLEABORT) {
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d009      	beq.n	800493a <HAL_UART_RxCpltCallback+0x12e>
        // Enable idle line detection.
        __HAL_UART_ENABLE_IT(&uart->handle, UART_IT_IDLE);
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f042 0210 	orr.w	r2, r2, #16
 8004934:	60da      	str	r2, [r3, #12]
 8004936:	e000      	b.n	800493a <HAL_UART_RxCpltCallback+0x12e>
        return;
 8004938:	bf00      	nop
    }
}
 800493a:	3720      	adds	r7, #32
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	0800c0a0 	.word	0x0800c0a0
 8004944:	e000ed04 	.word	0xe000ed04
 8004948:	0800c0d8 	.word	0x0800c0d8
 800494c:	0800c124 	.word	0x0800c124
 8004950:	0800c160 	.word	0x0800c160
 8004954:	0800c198 	.word	0x0800c198

08004958 <HAL_UART_AbortReceiveCpltCallback>:
 * @warning Called from an interrupt handler!
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL UART handle.
 */
void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *handle) {
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
    // Receive aborted; treat as completion.
    HAL_UART_RxCpltCallback(handle);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7ff ff53 	bl	800480c <HAL_UART_RxCpltCallback>
}
 8004966:	bf00      	nop
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
	...

08004970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8004970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8004974:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004976:	e003      	b.n	8004980 <LoopCopyDataInit>

08004978 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004978:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800497a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800497c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800497e:	3104      	adds	r1, #4

08004980 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004980:	480b      	ldr	r0, [pc, #44]	; (80049b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004982:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004984:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004986:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004988:	d3f6      	bcc.n	8004978 <CopyDataInit>
  ldr  r2, =_sbss
 800498a:	4a0b      	ldr	r2, [pc, #44]	; (80049b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800498c:	e002      	b.n	8004994 <LoopFillZerobss>

0800498e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800498e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004990:	f842 3b04 	str.w	r3, [r2], #4

08004994 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004994:	4b09      	ldr	r3, [pc, #36]	; (80049bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004996:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004998:	d3f9      	bcc.n	800498e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800499a:	f000 f81b 	bl	80049d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800499e:	f006 fef7 	bl	800b790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049a2:	f7fd fbef 	bl	8002184 <main>
  bx  lr    
 80049a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80049a8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80049ac:	0800d6c0 	.word	0x0800d6c0
  ldr  r0, =_sdata
 80049b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80049b4:	200001bc 	.word	0x200001bc
  ldr  r2, =_sbss
 80049b8:	200001bc 	.word	0x200001bc
  ldr  r3, = _ebss
 80049bc:	2002f060 	.word	0x2002f060

080049c0 <ADC_IRQHandler>:
*/
	.global HardFault_Handler_C
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
  /* Load the address of the interrupt control register into r3. */
  ldr r3, NVIC_INT_CTRL_CONST
 80049c0:	4b03      	ldr	r3, [pc, #12]	; (80049d0 <NVIC_INT_CTRL_CONST>)
  /* Load the value of the interrupt control register into r2 from the
  address held in r3. */
  ldr r2, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
  /* The interrupt number is in the least significant byte - clear all
  other bits. */
  uxtb r2, r2
 80049c4:	b2d2      	uxtb	r2, r2

080049c6 <Infinite_Loop>:
Infinite_Loop:
  b  Infinite_Loop
 80049c6:	e7fe      	b.n	80049c6 <Infinite_Loop>
 80049c8:	f3af 8000 	nop.w
 80049cc:	f3af 8000 	nop.w

080049d0 <NVIC_INT_CTRL_CONST>:
 80049d0:	e000ed04 	.word	0xe000ed04

080049d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049d8:	4b16      	ldr	r3, [pc, #88]	; (8004a34 <SystemInit+0x60>)
 80049da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049de:	4a15      	ldr	r2, [pc, #84]	; (8004a34 <SystemInit+0x60>)
 80049e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80049e8:	4b13      	ldr	r3, [pc, #76]	; (8004a38 <SystemInit+0x64>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a12      	ldr	r2, [pc, #72]	; (8004a38 <SystemInit+0x64>)
 80049ee:	f043 0301 	orr.w	r3, r3, #1
 80049f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80049f4:	4b10      	ldr	r3, [pc, #64]	; (8004a38 <SystemInit+0x64>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80049fa:	4b0f      	ldr	r3, [pc, #60]	; (8004a38 <SystemInit+0x64>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a0e      	ldr	r2, [pc, #56]	; (8004a38 <SystemInit+0x64>)
 8004a00:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004a0a:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <SystemInit+0x64>)
 8004a0c:	4a0b      	ldr	r2, [pc, #44]	; (8004a3c <SystemInit+0x68>)
 8004a0e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004a10:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <SystemInit+0x64>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a08      	ldr	r2, [pc, #32]	; (8004a38 <SystemInit+0x64>)
 8004a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004a1c:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <SystemInit+0x64>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a22:	4b04      	ldr	r3, [pc, #16]	; (8004a34 <SystemInit+0x60>)
 8004a24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a28:	609a      	str	r2, [r3, #8]
#endif
}
 8004a2a:	bf00      	nop
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	e000ed00 	.word	0xe000ed00
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	24003010 	.word	0x24003010

08004a40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f103 0208 	add.w	r2, r3, #8
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f04f 32ff 	mov.w	r2, #4294967295
 8004a58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f103 0208 	add.w	r2, r3, #8
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f103 0208 	add.w	r2, r3, #8
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b085      	sub	sp, #20
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	601a      	str	r2, [r3, #0]
}
 8004ad6:	bf00      	nop
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b085      	sub	sp, #20
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af8:	d103      	bne.n	8004b02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	e00c      	b.n	8004b1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3308      	adds	r3, #8
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	e002      	b.n	8004b10 <vListInsert+0x2e>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d2f6      	bcs.n	8004b0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	601a      	str	r2, [r3, #0]
}
 8004b48:	bf00      	nop
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6892      	ldr	r2, [r2, #8]
 8004b6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6852      	ldr	r2, [r2, #4]
 8004b74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d103      	bne.n	8004b88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	1e5a      	subs	r2, r3, #1
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d104      	bne.n	8004bc6 <xQueueGenericReset+0x1e>
 8004bbc:	f240 111b 	movw	r1, #283	; 0x11b
 8004bc0:	4829      	ldr	r0, [pc, #164]	; (8004c68 <xQueueGenericReset+0xc0>)
 8004bc2:	f7ff f9b8 	bl	8003f36 <cmr_panic>

	taskENTER_CRITICAL();
 8004bc6:	f001 fb1d 	bl	8006204 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd2:	68f9      	ldr	r1, [r7, #12]
 8004bd4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bd6:	fb01 f303 	mul.w	r3, r1, r3
 8004bda:	441a      	add	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	68f9      	ldr	r1, [r7, #12]
 8004bfa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	441a      	add	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	22ff      	movs	r2, #255	; 0xff
 8004c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	22ff      	movs	r2, #255	; 0xff
 8004c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d114      	bne.n	8004c46 <xQueueGenericReset+0x9e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01a      	beq.n	8004c5a <xQueueGenericReset+0xb2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	3310      	adds	r3, #16
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 ff7f 	bl	8005b2c <xTaskRemoveFromEventList>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d012      	beq.n	8004c5a <xQueueGenericReset+0xb2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c34:	4b0d      	ldr	r3, [pc, #52]	; (8004c6c <xQueueGenericReset+0xc4>)
 8004c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	e009      	b.n	8004c5a <xQueueGenericReset+0xb2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	3310      	adds	r3, #16
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff fef8 	bl	8004a40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	3324      	adds	r3, #36	; 0x24
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7ff fef3 	bl	8004a40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c5a:	f001 fafd 	bl	8006258 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c5e:	2301      	movs	r3, #1
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	0800c3a4 	.word	0x0800c3a4
 8004c6c:	e000ed04 	.word	0xe000ed04

08004c70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b088      	sub	sp, #32
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d104      	bne.n	8004c8e <xQueueGenericCreateStatic+0x1e>
 8004c84:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8004c88:	481f      	ldr	r0, [pc, #124]	; (8004d08 <xQueueGenericCreateStatic+0x98>)
 8004c8a:	f7ff f954 	bl	8003f36 <cmr_panic>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d104      	bne.n	8004c9e <xQueueGenericCreateStatic+0x2e>
 8004c94:	f44f 71ab 	mov.w	r1, #342	; 0x156
 8004c98:	481c      	ldr	r0, [pc, #112]	; (8004d0c <xQueueGenericCreateStatic+0x9c>)
 8004c9a:	f7ff f94c 	bl	8003f36 <cmr_panic>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d007      	beq.n	8004cb4 <xQueueGenericCreateStatic+0x44>
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d104      	bne.n	8004cb4 <xQueueGenericCreateStatic+0x44>
 8004caa:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8004cae:	4818      	ldr	r0, [pc, #96]	; (8004d10 <xQueueGenericCreateStatic+0xa0>)
 8004cb0:	f7ff f941 	bl	8003f36 <cmr_panic>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d107      	bne.n	8004cca <xQueueGenericCreateStatic+0x5a>
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d004      	beq.n	8004cca <xQueueGenericCreateStatic+0x5a>
 8004cc0:	f240 115b 	movw	r1, #347	; 0x15b
 8004cc4:	4813      	ldr	r0, [pc, #76]	; (8004d14 <xQueueGenericCreateStatic+0xa4>)
 8004cc6:	f7ff f936 	bl	8003f36 <cmr_panic>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004cca:	2348      	movs	r3, #72	; 0x48
 8004ccc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	2b48      	cmp	r3, #72	; 0x48
 8004cd2:	d004      	beq.n	8004cde <xQueueGenericCreateStatic+0x6e>
 8004cd4:	f240 1163 	movw	r1, #355	; 0x163
 8004cd8:	480f      	ldr	r0, [pc, #60]	; (8004d18 <xQueueGenericCreateStatic+0xa8>)
 8004cda:	f7ff f92c 	bl	8003f36 <cmr_panic>
			(void) xSize; // Placate compiler
 8004cde:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d009      	beq.n	8004cfe <xQueueGenericCreateStatic+0x8e>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004cea:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f80f 	bl	8004d1c <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8004cfe:	697b      	ldr	r3, [r7, #20]
	}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	0800c3e8 	.word	0x0800c3e8
 8004d0c:	0800c448 	.word	0x0800c448
 8004d10:	0800c49c 	.word	0x0800c49c
 8004d14:	0800c510 	.word	0x0800c510
 8004d18:	0800c584 	.word	0x0800c584

08004d1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d103      	bne.n	8004d38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	e002      	b.n	8004d3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	69b8      	ldr	r0, [r7, #24]
 8004d4e:	f7ff ff2b 	bl	8004ba8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d52:	bf00      	nop
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d104      	bne.n	8004d78 <xQueueCreateCountingSemaphoreStatic+0x1c>
 8004d6e:	f240 21a2 	movw	r1, #674	; 0x2a2
 8004d72:	4810      	ldr	r0, [pc, #64]	; (8004db4 <xQueueCreateCountingSemaphoreStatic+0x58>)
 8004d74:	f7ff f8df 	bl	8003f36 <cmr_panic>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d904      	bls.n	8004d8a <xQueueCreateCountingSemaphoreStatic+0x2e>
 8004d80:	f240 21a3 	movw	r1, #675	; 0x2a3
 8004d84:	480c      	ldr	r0, [pc, #48]	; (8004db8 <xQueueCreateCountingSemaphoreStatic+0x5c>)
 8004d86:	f7ff f8d6 	bl	8003f36 <cmr_panic>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	2100      	movs	r1, #0
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f7ff ff6b 	bl	8004c70 <xQueueGenericCreateStatic>
 8004d9a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <xQueueCreateCountingSemaphoreStatic+0x4c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004da8:	697b      	ldr	r3, [r7, #20]
	}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	0800c5dc 	.word	0x0800c5dc
 8004db8:	0800c628 	.word	0x0800c628

08004dbc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08a      	sub	sp, #40	; 0x28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d104      	bne.n	8004dda <xQueueGiveFromISR+0x1e>
 8004dd0:	f240 413d 	movw	r1, #1085	; 0x43d
 8004dd4:	4833      	ldr	r0, [pc, #204]	; (8004ea4 <xQueueGiveFromISR+0xe8>)
 8004dd6:	f7ff f8ae 	bl	8003f36 <cmr_panic>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d004      	beq.n	8004dec <xQueueGiveFromISR+0x30>
 8004de2:	f240 4141 	movw	r1, #1089	; 0x441
 8004de6:	4830      	ldr	r0, [pc, #192]	; (8004ea8 <xQueueGiveFromISR+0xec>)
 8004de8:	f7ff f8a5 	bl	8003f36 <cmr_panic>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d108      	bne.n	8004e06 <xQueueGiveFromISR+0x4a>
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d004      	beq.n	8004e06 <xQueueGiveFromISR+0x4a>
 8004dfc:	f240 4146 	movw	r1, #1094	; 0x446
 8004e00:	482a      	ldr	r0, [pc, #168]	; (8004eac <xQueueGiveFromISR+0xf0>)
 8004e02:	f7ff f898 	bl	8003f36 <cmr_panic>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e06:	f001 fac7 	bl	8006398 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e0a:	f3ef 8211 	mrs	r2, BASEPRI
 8004e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	613a      	str	r2, [r7, #16]
 8004e20:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e22:	693b      	ldr	r3, [r7, #16]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e24:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2a:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d229      	bcs.n	8004e8a <xQueueGiveFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e3c:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4e:	d112      	bne.n	8004e76 <xQueueGiveFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d015      	beq.n	8004e84 <xQueueGiveFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	3324      	adds	r3, #36	; 0x24
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fe65 	bl	8005b2c <xTaskRemoveFromEventList>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00d      	beq.n	8004e84 <xQueueGiveFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <xQueueGiveFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2201      	movs	r2, #1
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	e006      	b.n	8004e84 <xQueueGiveFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e76:	7dfb      	ldrb	r3, [r7, #23]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	b25a      	sxtb	r2, r3
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e84:	2301      	movs	r3, #1
 8004e86:	627b      	str	r3, [r7, #36]	; 0x24
 8004e88:	e001      	b.n	8004e8e <xQueueGiveFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue )
	);
}
 8004e98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3728      	adds	r7, #40	; 0x28
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	0800c3a4 	.word	0x0800c3a4
 8004ea8:	0800c828 	.word	0x0800c828
 8004eac:	0800c880 	.word	0x0800c880

08004eb0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08a      	sub	sp, #40	; 0x28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
 8004ebc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d104      	bne.n	8004ed6 <xQueueGenericReceive+0x26>
 8004ecc:	f240 41dd 	movw	r1, #1245	; 0x4dd
 8004ed0:	4873      	ldr	r0, [pc, #460]	; (80050a0 <xQueueGenericReceive+0x1f0>)
 8004ed2:	f7ff f830 	bl	8003f36 <cmr_panic>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d108      	bne.n	8004eee <xQueueGenericReceive+0x3e>
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d004      	beq.n	8004eee <xQueueGenericReceive+0x3e>
 8004ee4:	f240 41de 	movw	r1, #1246	; 0x4de
 8004ee8:	486e      	ldr	r0, [pc, #440]	; (80050a4 <xQueueGenericReceive+0x1f4>)
 8004eea:	f7ff f824 	bl	8003f36 <cmr_panic>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004eee:	f000 ff7d 	bl	8005dec <xTaskGetSchedulerState>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d107      	bne.n	8004f08 <xQueueGenericReceive+0x58>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d004      	beq.n	8004f08 <xQueueGenericReceive+0x58>
 8004efe:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8004f02:	4869      	ldr	r0, [pc, #420]	; (80050a8 <xQueueGenericReceive+0x1f8>)
 8004f04:	f7ff f817 	bl	8003f36 <cmr_panic>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f08:	f001 f97c 	bl	8006204 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f10:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d046      	beq.n	8004fa6 <xQueueGenericReceive+0xf6>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f1e:	68b9      	ldr	r1, [r7, #8]
 8004f20:	6a38      	ldr	r0, [r7, #32]
 8004f22:	f000 f98f 	bl	8005244 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d121      	bne.n	8004f70 <xQueueGenericReceive+0xc0>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	1e5a      	subs	r2, r3, #1
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d104      	bne.n	8004f46 <xQueueGenericReceive+0x96>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004f3c:	f000 ffea 	bl	8005f14 <pvTaskIncrementMutexHeldCount>
 8004f40:	4602      	mov	r2, r0
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d027      	beq.n	8004f9e <xQueueGenericReceive+0xee>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	3310      	adds	r3, #16
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 fdea 	bl	8005b2c <xTaskRemoveFromEventList>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d01f      	beq.n	8004f9e <xQueueGenericReceive+0xee>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8004f5e:	4b53      	ldr	r3, [pc, #332]	; (80050ac <xQueueGenericReceive+0x1fc>)
 8004f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	e016      	b.n	8004f9e <xQueueGenericReceive+0xee>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00f      	beq.n	8004f9e <xQueueGenericReceive+0xee>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	3324      	adds	r3, #36	; 0x24
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fdd2 	bl	8005b2c <xTaskRemoveFromEventList>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d007      	beq.n	8004f9e <xQueueGenericReceive+0xee>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f8e:	4b47      	ldr	r3, [pc, #284]	; (80050ac <xQueueGenericReceive+0x1fc>)
 8004f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8004f9e:	f001 f95b 	bl	8006258 <vPortExitCritical>
				return pdPASS;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e077      	b.n	8005096 <xQueueGenericReceive+0x1e6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d103      	bne.n	8004fb4 <xQueueGenericReceive+0x104>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fac:	f001 f954 	bl	8006258 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	e070      	b.n	8005096 <xQueueGenericReceive+0x1e6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <xQueueGenericReceive+0x118>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8004fba:	f107 0310 	add.w	r3, r7, #16
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fe12 	bl	8005be8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fc8:	f001 f946 	bl	8006258 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fcc:	f000 fbb6 	bl	800573c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fd0:	f001 f918 	bl	8006204 <vPortEnterCritical>
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fda:	b25b      	sxtb	r3, r3
 8004fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe0:	d103      	bne.n	8004fea <xQueueGenericReceive+0x13a>
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ff0:	b25b      	sxtb	r3, r3
 8004ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff6:	d103      	bne.n	8005000 <xQueueGenericReceive+0x150>
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005000:	f001 f92a 	bl	8006258 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005004:	1d3a      	adds	r2, r7, #4
 8005006:	f107 0310 	add.w	r3, r7, #16
 800500a:	4611      	mov	r1, r2
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fe09 	bl	8005c24 <xTaskCheckForTimeOut>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d131      	bne.n	800507c <xQueueGenericReceive+0x1cc>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005018:	6a38      	ldr	r0, [r7, #32]
 800501a:	f000 f98b 	bl	8005334 <prvIsQueueEmpty>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d025      	beq.n	8005070 <xQueueGenericReceive+0x1c0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d108      	bne.n	800503e <xQueueGenericReceive+0x18e>
					{
						taskENTER_CRITICAL();
 800502c:	f001 f8ea 	bl	8006204 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	4618      	mov	r0, r3
 8005036:	f000 fef7 	bl	8005e28 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800503a:	f001 f90d 	bl	8006258 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	3324      	adds	r3, #36	; 0x24
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	4611      	mov	r1, r2
 8005046:	4618      	mov	r0, r3
 8005048:	f000 fd50 	bl	8005aec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800504c:	6a38      	ldr	r0, [r7, #32]
 800504e:	f000 f91f 	bl	8005290 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005052:	f000 fb81 	bl	8005758 <xTaskResumeAll>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	f47f af55 	bne.w	8004f08 <xQueueGenericReceive+0x58>
				{
					portYIELD_WITHIN_API();
 800505e:	4b13      	ldr	r3, [pc, #76]	; (80050ac <xQueueGenericReceive+0x1fc>)
 8005060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	e74b      	b.n	8004f08 <xQueueGenericReceive+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005070:	6a38      	ldr	r0, [r7, #32]
 8005072:	f000 f90d 	bl	8005290 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005076:	f000 fb6f 	bl	8005758 <xTaskResumeAll>
 800507a:	e745      	b.n	8004f08 <xQueueGenericReceive+0x58>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800507c:	6a38      	ldr	r0, [r7, #32]
 800507e:	f000 f907 	bl	8005290 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005082:	f000 fb69 	bl	8005758 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005086:	6a38      	ldr	r0, [r7, #32]
 8005088:	f000 f954 	bl	8005334 <prvIsQueueEmpty>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	f43f af3a 	beq.w	8004f08 <xQueueGenericReceive+0x58>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005094:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005096:	4618      	mov	r0, r3
 8005098:	3728      	adds	r7, #40	; 0x28
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	0800c3a4 	.word	0x0800c3a4
 80050a4:	0800c918 	.word	0x0800c918
 80050a8:	0800c794 	.word	0x0800c794
 80050ac:	e000ed04 	.word	0xe000ed04

080050b0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08c      	sub	sp, #48	; 0x30
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 80050c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d104      	bne.n	80050d0 <xQueueReceiveFromISR+0x20>
 80050c6:	f240 51a1 	movw	r1, #1441	; 0x5a1
 80050ca:	4830      	ldr	r0, [pc, #192]	; (800518c <xQueueReceiveFromISR+0xdc>)
 80050cc:	f7fe ff33 	bl	8003f36 <cmr_panic>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d108      	bne.n	80050e8 <xQueueReceiveFromISR+0x38>
 80050d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d004      	beq.n	80050e8 <xQueueReceiveFromISR+0x38>
 80050de:	f240 51a2 	movw	r1, #1442	; 0x5a2
 80050e2:	482b      	ldr	r0, [pc, #172]	; (8005190 <xQueueReceiveFromISR+0xe0>)
 80050e4:	f7fe ff27 	bl	8003f36 <cmr_panic>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050e8:	f001 f956 	bl	8006398 <vPortValidateInterruptPriority>
	__asm volatile
 80050ec:	f3ef 8211 	mrs	r2, BASEPRI
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	61ba      	str	r2, [r7, #24]
 8005102:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005104:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510c:	623b      	str	r3, [r7, #32]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d02d      	beq.n	8005170 <xQueueReceiveFromISR+0xc0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800511a:	77fb      	strb	r3, [r7, #31]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800511c:	68b9      	ldr	r1, [r7, #8]
 800511e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005120:	f000 f890 	bl	8005244 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	1e5a      	subs	r2, r3, #1
 8005128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800512c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005134:	d112      	bne.n	800515c <xQueueReceiveFromISR+0xac>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d015      	beq.n	800516a <xQueueReceiveFromISR+0xba>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005140:	3310      	adds	r3, #16
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fcf2 	bl	8005b2c <xTaskRemoveFromEventList>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00d      	beq.n	800516a <xQueueReceiveFromISR+0xba>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <xQueueReceiveFromISR+0xba>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	e006      	b.n	800516a <xQueueReceiveFromISR+0xba>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800515c:	7ffb      	ldrb	r3, [r7, #31]
 800515e:	3301      	adds	r3, #1
 8005160:	b2db      	uxtb	r3, r3
 8005162:	b25a      	sxtb	r2, r3
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800516a:	2301      	movs	r3, #1
 800516c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800516e:	e001      	b.n	8005174 <xQueueReceiveFromISR+0xc4>
		}
		else
		{
			xReturn = pdFAIL;
 8005170:	2300      	movs	r3, #0
 8005172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f383 8811 	msr	BASEPRI, r3
}
 800517e:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005182:	4618      	mov	r0, r3
 8005184:	3730      	adds	r7, #48	; 0x30
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	0800c3a4 	.word	0x0800c3a4
 8005190:	0800c918 	.word	0x0800c918

08005194 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b08a      	sub	sp, #40	; 0x28
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d104      	bne.n	80051b2 <xQueuePeekFromISR+0x1e>
 80051a8:	f240 51fd 	movw	r1, #1533	; 0x5fd
 80051ac:	4822      	ldr	r0, [pc, #136]	; (8005238 <xQueuePeekFromISR+0xa4>)
 80051ae:	f7fe fec2 	bl	8003f36 <cmr_panic>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d108      	bne.n	80051ca <xQueuePeekFromISR+0x36>
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d004      	beq.n	80051ca <xQueuePeekFromISR+0x36>
 80051c0:	f240 51fe 	movw	r1, #1534	; 0x5fe
 80051c4:	481d      	ldr	r0, [pc, #116]	; (800523c <xQueuePeekFromISR+0xa8>)
 80051c6:	f7fe feb6 	bl	8003f36 <cmr_panic>
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d104      	bne.n	80051dc <xQueuePeekFromISR+0x48>
 80051d2:	f240 51ff 	movw	r1, #1535	; 0x5ff
 80051d6:	481a      	ldr	r0, [pc, #104]	; (8005240 <xQueuePeekFromISR+0xac>)
 80051d8:	f7fe fead 	bl	8003f36 <cmr_panic>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051dc:	f001 f8dc 	bl	8006398 <vPortValidateInterruptPriority>
	__asm volatile
 80051e0:	f3ef 8211 	mrs	r2, BASEPRI
 80051e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	617a      	str	r2, [r7, #20]
 80051f6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80051f8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051fa:	61fb      	str	r3, [r7, #28]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00c      	beq.n	800521e <xQueuePeekFromISR+0x8a>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	61bb      	str	r3, [r7, #24]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800520a:	6839      	ldr	r1, [r7, #0]
 800520c:	6a38      	ldr	r0, [r7, #32]
 800520e:	f000 f819 	bl	8005244 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	60da      	str	r2, [r3, #12]

			xReturn = pdPASS;
 8005218:	2301      	movs	r3, #1
 800521a:	627b      	str	r3, [r7, #36]	; 0x24
 800521c:	e001      	b.n	8005222 <xQueuePeekFromISR+0x8e>
		}
		else
		{
			xReturn = pdFAIL;
 800521e:	2300      	movs	r3, #0
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f383 8811 	msr	BASEPRI, r3
}
 800522c:	bf00      	nop
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005230:	4618      	mov	r0, r3
 8005232:	3728      	adds	r7, #40	; 0x28
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	0800c3a4 	.word	0x0800c3a4
 800523c:	0800c918 	.word	0x0800c918
 8005240:	0800c9a0 	.word	0x0800c9a0

08005244 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	2b00      	cmp	r3, #0
 8005254:	d018      	beq.n	8005288 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	441a      	add	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	429a      	cmp	r2, r3
 800526e:	d303      	bcc.n	8005278 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68d9      	ldr	r1, [r3, #12]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005280:	461a      	mov	r2, r3
 8005282:	6838      	ldr	r0, [r7, #0]
 8005284:	f006 faa8 	bl	800b7d8 <memcpy>
	}
}
 8005288:	bf00      	nop
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005298:	f000 ffb4 	bl	8006204 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052a4:	e011      	b.n	80052ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d012      	beq.n	80052d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3324      	adds	r3, #36	; 0x24
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fc3a 	bl	8005b2c <xTaskRemoveFromEventList>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052be:	f000 fd09 	bl	8005cd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
 80052c4:	3b01      	subs	r3, #1
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	dce9      	bgt.n	80052a6 <prvUnlockQueue+0x16>
 80052d2:	e000      	b.n	80052d6 <prvUnlockQueue+0x46>
					break;
 80052d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	22ff      	movs	r2, #255	; 0xff
 80052da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80052de:	f000 ffbb 	bl	8006258 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80052e2:	f000 ff8f 	bl	8006204 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052ee:	e011      	b.n	8005314 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d012      	beq.n	800531e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3310      	adds	r3, #16
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 fc15 	bl	8005b2c <xTaskRemoveFromEventList>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005308:	f000 fce4 	bl	8005cd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800530c:	7bbb      	ldrb	r3, [r7, #14]
 800530e:	3b01      	subs	r3, #1
 8005310:	b2db      	uxtb	r3, r3
 8005312:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005314:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005318:	2b00      	cmp	r3, #0
 800531a:	dce9      	bgt.n	80052f0 <prvUnlockQueue+0x60>
 800531c:	e000      	b.n	8005320 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800531e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	22ff      	movs	r2, #255	; 0xff
 8005324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005328:	f000 ff96 	bl	8006258 <vPortExitCritical>
}
 800532c:	bf00      	nop
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800533c:	f000 ff62 	bl	8006204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005344:	2b00      	cmp	r3, #0
 8005346:	d102      	bne.n	800534e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005348:	2301      	movs	r3, #1
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	e001      	b.n	8005352 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800534e:	2300      	movs	r3, #0
 8005350:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005352:	f000 ff81 	bl	8006258 <vPortExitCritical>

	return xReturn;
 8005356:	68fb      	ldr	r3, [r7, #12]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08a      	sub	sp, #40	; 0x28
 8005364:	af04      	add	r7, sp, #16
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
 800536c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	2b00      	cmp	r3, #0
 8005372:	d104      	bne.n	800537e <xTaskCreateStatic+0x1e>
 8005374:	f240 2155 	movw	r1, #597	; 0x255
 8005378:	4817      	ldr	r0, [pc, #92]	; (80053d8 <xTaskCreateStatic+0x78>)
 800537a:	f7fe fddc 	bl	8003f36 <cmr_panic>
		configASSERT( pxTaskBuffer != NULL );
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	2b00      	cmp	r3, #0
 8005382:	d104      	bne.n	800538e <xTaskCreateStatic+0x2e>
 8005384:	f240 2156 	movw	r1, #598	; 0x256
 8005388:	4814      	ldr	r0, [pc, #80]	; (80053dc <xTaskCreateStatic+0x7c>)
 800538a:	f7fe fdd4 	bl	8003f36 <cmr_panic>

		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	2b00      	cmp	r3, #0
 8005392:	d01a      	beq.n	80053ca <xTaskCreateStatic+0x6a>
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	2b00      	cmp	r3, #0
 8005398:	d017      	beq.n	80053ca <xTaskCreateStatic+0x6a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800539a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539c:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a2:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053a4:	2300      	movs	r3, #0
 80053a6:	9303      	str	r3, [sp, #12]
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	9302      	str	r3, [sp, #8]
 80053ac:	f107 0310 	add.w	r3, r7, #16
 80053b0:	9301      	str	r3, [sp, #4]
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f80f 	bl	80053e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053c2:	6978      	ldr	r0, [r7, #20]
 80053c4:	f000 f880 	bl	80054c8 <prvAddNewTaskToReadyList>
 80053c8:	e001      	b.n	80053ce <xTaskCreateStatic+0x6e>
		}
		else
		{
			xReturn = NULL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 80053ce:	693b      	ldr	r3, [r7, #16]
	}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	0800ca3c 	.word	0x0800ca3c
 80053dc:	0800ca90 	.word	0x0800ca90

080053e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
 80053ec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053f8:	3b01      	subs	r3, #1
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f023 0307 	bic.w	r3, r3, #7
 8005406:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	2b00      	cmp	r3, #0
 8005410:	d004      	beq.n	800541c <prvInitialiseNewTask+0x3c>
 8005412:	f240 312b 	movw	r1, #811	; 0x32b
 8005416:	482b      	ldr	r0, [pc, #172]	; (80054c4 <prvInitialiseNewTask+0xe4>)
 8005418:	f7fe fd8d 	bl	8003f36 <cmr_panic>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800541c:	2300      	movs	r3, #0
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	e012      	b.n	8005448 <prvInitialiseNewTask+0x68>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	4413      	add	r3, r2
 8005428:	7819      	ldrb	r1, [r3, #0]
 800542a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	4413      	add	r3, r2
 8005430:	3334      	adds	r3, #52	; 0x34
 8005432:	460a      	mov	r2, r1
 8005434:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	4413      	add	r3, r2
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d006      	beq.n	8005450 <prvInitialiseNewTask+0x70>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	3301      	adds	r3, #1
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2b1f      	cmp	r3, #31
 800544c:	d9e9      	bls.n	8005422 <prvInitialiseNewTask+0x42>
 800544e:	e000      	b.n	8005452 <prvInitialiseNewTask+0x72>
		{
			break;
 8005450:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	2b06      	cmp	r3, #6
 800545e:	d901      	bls.n	8005464 <prvInitialiseNewTask+0x84>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005460:	2306      	movs	r3, #6
 8005462:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005466:	6a3a      	ldr	r2, [r7, #32]
 8005468:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800546a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546c:	6a3a      	ldr	r2, [r7, #32]
 800546e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	2200      	movs	r2, #0
 8005474:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	3304      	adds	r3, #4
 800547a:	4618      	mov	r0, r3
 800547c:	f7ff fb00 	bl	8004a80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005482:	3318      	adds	r3, #24
 8005484:	4618      	mov	r0, r3
 8005486:	f7ff fafb 	bl	8004a80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800548a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800548e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	f1c3 0207 	rsb	r2, r3, #7
 8005496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005498:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800549a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800549e:	625a      	str	r2, [r3, #36]	; 0x24
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	68f9      	ldr	r1, [r7, #12]
 80054a4:	6938      	ldr	r0, [r7, #16]
 80054a6:	f000 fdaf 	bl	8006008 <pxPortInitialiseStack>
 80054aa:	4602      	mov	r2, r0
 80054ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <prvInitialiseNewTask+0xdc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054bc:	bf00      	nop
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	0800cae4 	.word	0x0800cae4

080054c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054d0:	f000 fe98 	bl	8006204 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054d4:	4b2a      	ldr	r3, [pc, #168]	; (8005580 <prvAddNewTaskToReadyList+0xb8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3301      	adds	r3, #1
 80054da:	4a29      	ldr	r2, [pc, #164]	; (8005580 <prvAddNewTaskToReadyList+0xb8>)
 80054dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054de:	4b29      	ldr	r3, [pc, #164]	; (8005584 <prvAddNewTaskToReadyList+0xbc>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d109      	bne.n	80054fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054e6:	4a27      	ldr	r2, [pc, #156]	; (8005584 <prvAddNewTaskToReadyList+0xbc>)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054ec:	4b24      	ldr	r3, [pc, #144]	; (8005580 <prvAddNewTaskToReadyList+0xb8>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d110      	bne.n	8005516 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054f4:	f000 fc12 	bl	8005d1c <prvInitialiseTaskLists>
 80054f8:	e00d      	b.n	8005516 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054fa:	4b23      	ldr	r3, [pc, #140]	; (8005588 <prvAddNewTaskToReadyList+0xc0>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d109      	bne.n	8005516 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005502:	4b20      	ldr	r3, [pc, #128]	; (8005584 <prvAddNewTaskToReadyList+0xbc>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550c:	429a      	cmp	r2, r3
 800550e:	d802      	bhi.n	8005516 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005510:	4a1c      	ldr	r2, [pc, #112]	; (8005584 <prvAddNewTaskToReadyList+0xbc>)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005516:	4b1d      	ldr	r3, [pc, #116]	; (800558c <prvAddNewTaskToReadyList+0xc4>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	3301      	adds	r3, #1
 800551c:	4a1b      	ldr	r2, [pc, #108]	; (800558c <prvAddNewTaskToReadyList+0xc4>)
 800551e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005524:	2201      	movs	r2, #1
 8005526:	409a      	lsls	r2, r3
 8005528:	4b19      	ldr	r3, [pc, #100]	; (8005590 <prvAddNewTaskToReadyList+0xc8>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4313      	orrs	r3, r2
 800552e:	4a18      	ldr	r2, [pc, #96]	; (8005590 <prvAddNewTaskToReadyList+0xc8>)
 8005530:	6013      	str	r3, [r2, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005536:	4613      	mov	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4a15      	ldr	r2, [pc, #84]	; (8005594 <prvAddNewTaskToReadyList+0xcc>)
 8005540:	441a      	add	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	3304      	adds	r3, #4
 8005546:	4619      	mov	r1, r3
 8005548:	4610      	mov	r0, r2
 800554a:	f7ff faa6 	bl	8004a9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800554e:	f000 fe83 	bl	8006258 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005552:	4b0d      	ldr	r3, [pc, #52]	; (8005588 <prvAddNewTaskToReadyList+0xc0>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00e      	beq.n	8005578 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800555a:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <prvAddNewTaskToReadyList+0xbc>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	429a      	cmp	r2, r3
 8005566:	d207      	bcs.n	8005578 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005568:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <prvAddNewTaskToReadyList+0xd0>)
 800556a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005578:	bf00      	nop
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	2002f028 	.word	0x2002f028
 8005584:	2002ef40 	.word	0x2002ef40
 8005588:	2002f034 	.word	0x2002f034
 800558c:	2002f044 	.word	0x2002f044
 8005590:	2002f030 	.word	0x2002f030
 8005594:	2002ef44 	.word	0x2002ef44
 8005598:	e000ed04 	.word	0xe000ed04

0800559c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d104      	bne.n	80055ba <vTaskDelayUntil+0x1e>
 80055b0:	f240 4179 	movw	r1, #1145	; 0x479
 80055b4:	482c      	ldr	r0, [pc, #176]	; (8005668 <vTaskDelayUntil+0xcc>)
 80055b6:	f7fe fcbe 	bl	8003f36 <cmr_panic>
		configASSERT( ( xTimeIncrement > 0U ) );
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d104      	bne.n	80055ca <vTaskDelayUntil+0x2e>
 80055c0:	f240 417a 	movw	r1, #1146	; 0x47a
 80055c4:	4829      	ldr	r0, [pc, #164]	; (800566c <vTaskDelayUntil+0xd0>)
 80055c6:	f7fe fcb6 	bl	8003f36 <cmr_panic>
		configASSERT( uxSchedulerSuspended == 0 );
 80055ca:	4b29      	ldr	r3, [pc, #164]	; (8005670 <vTaskDelayUntil+0xd4>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d004      	beq.n	80055dc <vTaskDelayUntil+0x40>
 80055d2:	f240 417b 	movw	r1, #1147	; 0x47b
 80055d6:	4827      	ldr	r0, [pc, #156]	; (8005674 <vTaskDelayUntil+0xd8>)
 80055d8:	f7fe fcad 	bl	8003f36 <cmr_panic>

		vTaskSuspendAll();
 80055dc:	f000 f8ae 	bl	800573c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80055e0:	4b25      	ldr	r3, [pc, #148]	; (8005678 <vTaskDelayUntil+0xdc>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	4413      	add	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d20b      	bcs.n	8005612 <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	429a      	cmp	r2, r3
 8005602:	d211      	bcs.n	8005628 <vTaskDelayUntil+0x8c>
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	429a      	cmp	r2, r3
 800560a:	d90d      	bls.n	8005628 <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
 800560c:	2301      	movs	r3, #1
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	e00a      	b.n	8005628 <vTaskDelayUntil+0x8c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	429a      	cmp	r2, r3
 800561a:	d303      	bcc.n	8005624 <vTaskDelayUntil+0x88>
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	429a      	cmp	r2, r3
 8005622:	d901      	bls.n	8005628 <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
 8005624:	2301      	movs	r3, #1
 8005626:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d006      	beq.n	8005642 <vTaskDelayUntil+0xa6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2100      	movs	r1, #0
 800563c:	4618      	mov	r0, r3
 800563e:	f000 fc7d 	bl	8005f3c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005642:	f000 f889 	bl	8005758 <xTaskResumeAll>
 8005646:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d107      	bne.n	800565e <vTaskDelayUntil+0xc2>
		{
			portYIELD_WITHIN_API();
 800564e:	4b0b      	ldr	r3, [pc, #44]	; (800567c <vTaskDelayUntil+0xe0>)
 8005650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800565e:	bf00      	nop
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	0800cb8c 	.word	0x0800cb8c
 800566c:	0800cbdc 	.word	0x0800cbdc
 8005670:	2002f050 	.word	0x2002f050
 8005674:	0800cc30 	.word	0x0800cc30
 8005678:	2002f02c 	.word	0x2002f02c
 800567c:	e000ed04 	.word	0xe000ed04

08005680 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b08a      	sub	sp, #40	; 0x28
 8005684:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005686:	2300      	movs	r3, #0
 8005688:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800568a:	2300      	movs	r3, #0
 800568c:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800568e:	1d3a      	adds	r2, r7, #4
 8005690:	f107 0108 	add.w	r1, r7, #8
 8005694:	f107 030c 	add.w	r3, r7, #12
 8005698:	4618      	mov	r0, r3
 800569a:	f7fe fddd 	bl	8004258 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	9202      	str	r2, [sp, #8]
 80056a6:	9301      	str	r3, [sp, #4]
 80056a8:	2300      	movs	r3, #0
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	2300      	movs	r3, #0
 80056ae:	460a      	mov	r2, r1
 80056b0:	491b      	ldr	r1, [pc, #108]	; (8005720 <vTaskStartScheduler+0xa0>)
 80056b2:	481c      	ldr	r0, [pc, #112]	; (8005724 <vTaskStartScheduler+0xa4>)
 80056b4:	f7ff fe54 	bl	8005360 <xTaskCreateStatic>
 80056b8:	4603      	mov	r3, r0
 80056ba:	4a1b      	ldr	r2, [pc, #108]	; (8005728 <vTaskStartScheduler+0xa8>)
 80056bc:	6013      	str	r3, [r2, #0]
												( void * ) NULL,
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056be:	4b1a      	ldr	r3, [pc, #104]	; (8005728 <vTaskStartScheduler+0xa8>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 80056c6:	2301      	movs	r3, #1
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	e001      	b.n	80056d0 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 80056cc:	2300      	movs	r3, #0
 80056ce:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d116      	bne.n	8005704 <vTaskStartScheduler+0x84>
	__asm volatile
 80056d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	613b      	str	r3, [r7, #16]
}
 80056e8:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056ea:	4b10      	ldr	r3, [pc, #64]	; (800572c <vTaskStartScheduler+0xac>)
 80056ec:	f04f 32ff 	mov.w	r2, #4294967295
 80056f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056f2:	4b0f      	ldr	r3, [pc, #60]	; (8005730 <vTaskStartScheduler+0xb0>)
 80056f4:	2201      	movs	r2, #1
 80056f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80056f8:	4b0e      	ldr	r3, [pc, #56]	; (8005734 <vTaskStartScheduler+0xb4>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056fe:	f000 fcfb 	bl	80060f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005702:	e008      	b.n	8005716 <vTaskStartScheduler+0x96>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570a:	d104      	bne.n	8005716 <vTaskStartScheduler+0x96>
 800570c:	f240 7184 	movw	r1, #1924	; 0x784
 8005710:	4809      	ldr	r0, [pc, #36]	; (8005738 <vTaskStartScheduler+0xb8>)
 8005712:	f7fe fc10 	bl	8003f36 <cmr_panic>
}
 8005716:	bf00      	nop
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	0800cd18 	.word	0x0800cd18
 8005724:	08005ced 	.word	0x08005ced
 8005728:	2002f04c 	.word	0x2002f04c
 800572c:	2002f048 	.word	0x2002f048
 8005730:	2002f034 	.word	0x2002f034
 8005734:	2002f02c 	.word	0x2002f02c
 8005738:	0800cd20 	.word	0x0800cd20

0800573c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005740:	4b04      	ldr	r3, [pc, #16]	; (8005754 <vTaskSuspendAll+0x18>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3301      	adds	r3, #1
 8005746:	4a03      	ldr	r2, [pc, #12]	; (8005754 <vTaskSuspendAll+0x18>)
 8005748:	6013      	str	r3, [r2, #0]
}
 800574a:	bf00      	nop
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	2002f050 	.word	0x2002f050

08005758 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800575e:	2300      	movs	r3, #0
 8005760:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005762:	2300      	movs	r3, #0
 8005764:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005766:	4b3e      	ldr	r3, [pc, #248]	; (8005860 <xTaskResumeAll+0x108>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d104      	bne.n	8005778 <xTaskResumeAll+0x20>
 800576e:	f44f 61fd 	mov.w	r1, #2024	; 0x7e8
 8005772:	483c      	ldr	r0, [pc, #240]	; (8005864 <xTaskResumeAll+0x10c>)
 8005774:	f7fe fbdf 	bl	8003f36 <cmr_panic>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005778:	f000 fd44 	bl	8006204 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800577c:	4b38      	ldr	r3, [pc, #224]	; (8005860 <xTaskResumeAll+0x108>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3b01      	subs	r3, #1
 8005782:	4a37      	ldr	r2, [pc, #220]	; (8005860 <xTaskResumeAll+0x108>)
 8005784:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005786:	4b36      	ldr	r3, [pc, #216]	; (8005860 <xTaskResumeAll+0x108>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d161      	bne.n	8005852 <xTaskResumeAll+0xfa>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800578e:	4b36      	ldr	r3, [pc, #216]	; (8005868 <xTaskResumeAll+0x110>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d05d      	beq.n	8005852 <xTaskResumeAll+0xfa>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005796:	e02e      	b.n	80057f6 <xTaskResumeAll+0x9e>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005798:	4b34      	ldr	r3, [pc, #208]	; (800586c <xTaskResumeAll+0x114>)
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	3318      	adds	r3, #24
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff f9d5 	bl	8004b54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	3304      	adds	r3, #4
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7ff f9d0 	bl	8004b54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b8:	2201      	movs	r2, #1
 80057ba:	409a      	lsls	r2, r3
 80057bc:	4b2c      	ldr	r3, [pc, #176]	; (8005870 <xTaskResumeAll+0x118>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	4a2b      	ldr	r2, [pc, #172]	; (8005870 <xTaskResumeAll+0x118>)
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4a28      	ldr	r2, [pc, #160]	; (8005874 <xTaskResumeAll+0x11c>)
 80057d4:	441a      	add	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3304      	adds	r3, #4
 80057da:	4619      	mov	r1, r3
 80057dc:	4610      	mov	r0, r2
 80057de:	f7ff f95c 	bl	8004a9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e6:	4b24      	ldr	r3, [pc, #144]	; (8005878 <xTaskResumeAll+0x120>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d302      	bcc.n	80057f6 <xTaskResumeAll+0x9e>
					{
						xYieldPending = pdTRUE;
 80057f0:	4b22      	ldr	r3, [pc, #136]	; (800587c <xTaskResumeAll+0x124>)
 80057f2:	2201      	movs	r2, #1
 80057f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057f6:	4b1d      	ldr	r3, [pc, #116]	; (800586c <xTaskResumeAll+0x114>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1cc      	bne.n	8005798 <xTaskResumeAll+0x40>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <xTaskResumeAll+0xb0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005804:	f000 facc 	bl	8005da0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005808:	4b1d      	ldr	r3, [pc, #116]	; (8005880 <xTaskResumeAll+0x128>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d010      	beq.n	8005836 <xTaskResumeAll+0xde>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005814:	f000 f85a 	bl	80058cc <xTaskIncrementTick>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <xTaskResumeAll+0xcc>
							{
								xYieldPending = pdTRUE;
 800581e:	4b17      	ldr	r3, [pc, #92]	; (800587c <xTaskResumeAll+0x124>)
 8005820:	2201      	movs	r2, #1
 8005822:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3b01      	subs	r3, #1
 8005828:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1f1      	bne.n	8005814 <xTaskResumeAll+0xbc>

						uxPendedTicks = 0;
 8005830:	4b13      	ldr	r3, [pc, #76]	; (8005880 <xTaskResumeAll+0x128>)
 8005832:	2200      	movs	r2, #0
 8005834:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005836:	4b11      	ldr	r3, [pc, #68]	; (800587c <xTaskResumeAll+0x124>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d009      	beq.n	8005852 <xTaskResumeAll+0xfa>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800583e:	2301      	movs	r3, #1
 8005840:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005842:	4b10      	ldr	r3, [pc, #64]	; (8005884 <xTaskResumeAll+0x12c>)
 8005844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005852:	f000 fd01 	bl	8006258 <vPortExitCritical>

	return xAlreadyYielded;
 8005856:	68bb      	ldr	r3, [r7, #8]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	2002f050 	.word	0x2002f050
 8005864:	0800cd90 	.word	0x0800cd90
 8005868:	2002f028 	.word	0x2002f028
 800586c:	2002f000 	.word	0x2002f000
 8005870:	2002f030 	.word	0x2002f030
 8005874:	2002ef44 	.word	0x2002ef44
 8005878:	2002ef40 	.word	0x2002ef40
 800587c:	2002f03c 	.word	0x2002f03c
 8005880:	2002f038 	.word	0x2002f038
 8005884:	e000ed04 	.word	0xe000ed04

08005888 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800588e:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <xTaskGetTickCount+0x1c>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005894:	687b      	ldr	r3, [r7, #4]
}
 8005896:	4618      	mov	r0, r3
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	2002f02c 	.word	0x2002f02c

080058a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058ae:	f000 fd73 	bl	8006398 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80058b2:	2300      	movs	r3, #0
 80058b4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80058b6:	4b04      	ldr	r3, [pc, #16]	; (80058c8 <xTaskGetTickCountFromISR+0x20>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058bc:	683b      	ldr	r3, [r7, #0]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	2002f02c 	.word	0x2002f02c

080058cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058d2:	2300      	movs	r3, #0
 80058d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058d6:	4b4e      	ldr	r3, [pc, #312]	; (8005a10 <xTaskIncrementTick+0x144>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f040 8087 	bne.w	80059ee <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80058e0:	4b4c      	ldr	r3, [pc, #304]	; (8005a14 <xTaskIncrementTick+0x148>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	3301      	adds	r3, #1
 80058e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058e8:	4a4a      	ldr	r2, [pc, #296]	; (8005a14 <xTaskIncrementTick+0x148>)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d11a      	bne.n	800592a <xTaskIncrementTick+0x5e>
		{
			taskSWITCH_DELAYED_LISTS();
 80058f4:	4b48      	ldr	r3, [pc, #288]	; (8005a18 <xTaskIncrementTick+0x14c>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d004      	beq.n	8005908 <xTaskIncrementTick+0x3c>
 80058fe:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8005902:	4846      	ldr	r0, [pc, #280]	; (8005a1c <xTaskIncrementTick+0x150>)
 8005904:	f7fe fb17 	bl	8003f36 <cmr_panic>
 8005908:	4b43      	ldr	r3, [pc, #268]	; (8005a18 <xTaskIncrementTick+0x14c>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	4b44      	ldr	r3, [pc, #272]	; (8005a20 <xTaskIncrementTick+0x154>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a41      	ldr	r2, [pc, #260]	; (8005a18 <xTaskIncrementTick+0x14c>)
 8005914:	6013      	str	r3, [r2, #0]
 8005916:	4a42      	ldr	r2, [pc, #264]	; (8005a20 <xTaskIncrementTick+0x154>)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	4b41      	ldr	r3, [pc, #260]	; (8005a24 <xTaskIncrementTick+0x158>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3301      	adds	r3, #1
 8005922:	4a40      	ldr	r2, [pc, #256]	; (8005a24 <xTaskIncrementTick+0x158>)
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	f000 fa3b 	bl	8005da0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800592a:	4b3f      	ldr	r3, [pc, #252]	; (8005a28 <xTaskIncrementTick+0x15c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	429a      	cmp	r2, r3
 8005932:	d34d      	bcc.n	80059d0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005934:	4b38      	ldr	r3, [pc, #224]	; (8005a18 <xTaskIncrementTick+0x14c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <xTaskIncrementTick+0x76>
 800593e:	2301      	movs	r3, #1
 8005940:	e000      	b.n	8005944 <xTaskIncrementTick+0x78>
 8005942:	2300      	movs	r3, #0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d004      	beq.n	8005952 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005948:	4b37      	ldr	r3, [pc, #220]	; (8005a28 <xTaskIncrementTick+0x15c>)
 800594a:	f04f 32ff 	mov.w	r2, #4294967295
 800594e:	601a      	str	r2, [r3, #0]
					break;
 8005950:	e03e      	b.n	80059d0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005952:	4b31      	ldr	r3, [pc, #196]	; (8005a18 <xTaskIncrementTick+0x14c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	429a      	cmp	r2, r3
 8005968:	d203      	bcs.n	8005972 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800596a:	4a2f      	ldr	r2, [pc, #188]	; (8005a28 <xTaskIncrementTick+0x15c>)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6013      	str	r3, [r2, #0]
						break;
 8005970:	e02e      	b.n	80059d0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	3304      	adds	r3, #4
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff f8ec 	bl	8004b54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005980:	2b00      	cmp	r3, #0
 8005982:	d004      	beq.n	800598e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	3318      	adds	r3, #24
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff f8e3 	bl	8004b54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005992:	2201      	movs	r2, #1
 8005994:	409a      	lsls	r2, r3
 8005996:	4b25      	ldr	r3, [pc, #148]	; (8005a2c <xTaskIncrementTick+0x160>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4313      	orrs	r3, r2
 800599c:	4a23      	ldr	r2, [pc, #140]	; (8005a2c <xTaskIncrementTick+0x160>)
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a4:	4613      	mov	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4a20      	ldr	r2, [pc, #128]	; (8005a30 <xTaskIncrementTick+0x164>)
 80059ae:	441a      	add	r2, r3
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	3304      	adds	r3, #4
 80059b4:	4619      	mov	r1, r3
 80059b6:	4610      	mov	r0, r2
 80059b8:	f7ff f86f 	bl	8004a9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c0:	4b1c      	ldr	r3, [pc, #112]	; (8005a34 <xTaskIncrementTick+0x168>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d3b4      	bcc.n	8005934 <xTaskIncrementTick+0x68>
						{
							xSwitchRequired = pdTRUE;
 80059ca:	2301      	movs	r3, #1
 80059cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059ce:	e7b1      	b.n	8005934 <xTaskIncrementTick+0x68>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059d0:	4b18      	ldr	r3, [pc, #96]	; (8005a34 <xTaskIncrementTick+0x168>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d6:	4916      	ldr	r1, [pc, #88]	; (8005a30 <xTaskIncrementTick+0x164>)
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	440b      	add	r3, r1
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d907      	bls.n	80059f8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80059e8:	2301      	movs	r3, #1
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	e004      	b.n	80059f8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80059ee:	4b12      	ldr	r3, [pc, #72]	; (8005a38 <xTaskIncrementTick+0x16c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3301      	adds	r3, #1
 80059f4:	4a10      	ldr	r2, [pc, #64]	; (8005a38 <xTaskIncrementTick+0x16c>)
 80059f6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80059f8:	4b10      	ldr	r3, [pc, #64]	; (8005a3c <xTaskIncrementTick+0x170>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8005a00:	2301      	movs	r3, #1
 8005a02:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005a04:	697b      	ldr	r3, [r7, #20]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	2002f050 	.word	0x2002f050
 8005a14:	2002f02c 	.word	0x2002f02c
 8005a18:	2002eff8 	.word	0x2002eff8
 8005a1c:	0800ce28 	.word	0x0800ce28
 8005a20:	2002effc 	.word	0x2002effc
 8005a24:	2002f040 	.word	0x2002f040
 8005a28:	2002f048 	.word	0x2002f048
 8005a2c:	2002f030 	.word	0x2002f030
 8005a30:	2002ef44 	.word	0x2002ef44
 8005a34:	2002ef40 	.word	0x2002ef40
 8005a38:	2002f038 	.word	0x2002f038
 8005a3c:	2002f03c 	.word	0x2002f03c

08005a40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a46:	4b23      	ldr	r3, [pc, #140]	; (8005ad4 <vTaskSwitchContext+0x94>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a4e:	4b22      	ldr	r3, [pc, #136]	; (8005ad8 <vTaskSwitchContext+0x98>)
 8005a50:	2201      	movs	r2, #1
 8005a52:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a54:	e039      	b.n	8005aca <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 8005a56:	4b20      	ldr	r3, [pc, #128]	; (8005ad8 <vTaskSwitchContext+0x98>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005a5c:	4b1f      	ldr	r3, [pc, #124]	; (8005adc <vTaskSwitchContext+0x9c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	fab3 f383 	clz	r3, r3
 8005a68:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8005a6a:	78fb      	ldrb	r3, [r7, #3]
 8005a6c:	f1c3 031f 	rsb	r3, r3, #31
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	491b      	ldr	r1, [pc, #108]	; (8005ae0 <vTaskSwitchContext+0xa0>)
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4613      	mov	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	440b      	add	r3, r1
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d104      	bne.n	8005a90 <vTaskSwitchContext+0x50>
 8005a86:	f640 21f6 	movw	r1, #2806	; 0xaf6
 8005a8a:	4816      	ldr	r0, [pc, #88]	; (8005ae4 <vTaskSwitchContext+0xa4>)
 8005a8c:	f7fe fa53 	bl	8003f36 <cmr_panic>
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4613      	mov	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4a11      	ldr	r2, [pc, #68]	; (8005ae0 <vTaskSwitchContext+0xa0>)
 8005a9c:	4413      	add	r3, r2
 8005a9e:	60bb      	str	r3, [r7, #8]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	605a      	str	r2, [r3, #4]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	3308      	adds	r3, #8
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d104      	bne.n	8005ac0 <vTaskSwitchContext+0x80>
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	605a      	str	r2, [r3, #4]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	4a08      	ldr	r2, [pc, #32]	; (8005ae8 <vTaskSwitchContext+0xa8>)
 8005ac8:	6013      	str	r3, [r2, #0]
}
 8005aca:	bf00      	nop
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	2002f050 	.word	0x2002f050
 8005ad8:	2002f03c 	.word	0x2002f03c
 8005adc:	2002f030 	.word	0x2002f030
 8005ae0:	2002ef44 	.word	0x2002ef44
 8005ae4:	0800ce90 	.word	0x0800ce90
 8005ae8:	2002ef40 	.word	0x2002ef40

08005aec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d104      	bne.n	8005b06 <vTaskPlaceOnEventList+0x1a>
 8005afc:	f640 3106 	movw	r1, #2822	; 0xb06
 8005b00:	4808      	ldr	r0, [pc, #32]	; (8005b24 <vTaskPlaceOnEventList+0x38>)
 8005b02:	f7fe fa18 	bl	8003f36 <cmr_panic>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b06:	4b08      	ldr	r3, [pc, #32]	; (8005b28 <vTaskPlaceOnEventList+0x3c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3318      	adds	r3, #24
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7fe ffe7 	bl	8004ae2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b14:	2101      	movs	r1, #1
 8005b16:	6838      	ldr	r0, [r7, #0]
 8005b18:	f000 fa10 	bl	8005f3c <prvAddCurrentTaskToDelayedList>
}
 8005b1c:	bf00      	nop
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	0800cf14 	.word	0x0800cf14
 8005b28:	2002ef40 	.word	0x2002ef40

08005b2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d104      	bne.n	8005b4c <xTaskRemoveFromEventList+0x20>
 8005b42:	f640 3161 	movw	r1, #2913	; 0xb61
 8005b46:	4821      	ldr	r0, [pc, #132]	; (8005bcc <xTaskRemoveFromEventList+0xa0>)
 8005b48:	f7fe f9f5 	bl	8003f36 <cmr_panic>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	3318      	adds	r3, #24
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7fe ffff 	bl	8004b54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b56:	4b1e      	ldr	r3, [pc, #120]	; (8005bd0 <xTaskRemoveFromEventList+0xa4>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d11c      	bne.n	8005b98 <xTaskRemoveFromEventList+0x6c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	3304      	adds	r3, #4
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fe fff6 	bl	8004b54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	409a      	lsls	r2, r3
 8005b70:	4b18      	ldr	r3, [pc, #96]	; (8005bd4 <xTaskRemoveFromEventList+0xa8>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	4a17      	ldr	r2, [pc, #92]	; (8005bd4 <xTaskRemoveFromEventList+0xa8>)
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7e:	4613      	mov	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4a14      	ldr	r2, [pc, #80]	; (8005bd8 <xTaskRemoveFromEventList+0xac>)
 8005b88:	441a      	add	r2, r3
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	4619      	mov	r1, r3
 8005b90:	4610      	mov	r0, r2
 8005b92:	f7fe ff82 	bl	8004a9a <vListInsertEnd>
 8005b96:	e005      	b.n	8005ba4 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	3318      	adds	r3, #24
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	480f      	ldr	r0, [pc, #60]	; (8005bdc <xTaskRemoveFromEventList+0xb0>)
 8005ba0:	f7fe ff7b 	bl	8004a9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba8:	4b0d      	ldr	r3, [pc, #52]	; (8005be0 <xTaskRemoveFromEventList+0xb4>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d905      	bls.n	8005bbe <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005bb6:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <xTaskRemoveFromEventList+0xb8>)
 8005bb8:	2201      	movs	r2, #1
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	e001      	b.n	8005bc2 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	0800cfb4 	.word	0x0800cfb4
 8005bd0:	2002f050 	.word	0x2002f050
 8005bd4:	2002f030 	.word	0x2002f030
 8005bd8:	2002ef44 	.word	0x2002ef44
 8005bdc:	2002f000 	.word	0x2002f000
 8005be0:	2002ef40 	.word	0x2002ef40
 8005be4:	2002f03c 	.word	0x2002f03c

08005be8 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d104      	bne.n	8005c00 <vTaskSetTimeOutState+0x18>
 8005bf6:	f640 31c1 	movw	r1, #3009	; 0xbc1
 8005bfa:	4807      	ldr	r0, [pc, #28]	; (8005c18 <vTaskSetTimeOutState+0x30>)
 8005bfc:	f7fe f99b 	bl	8003f36 <cmr_panic>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c00:	4b06      	ldr	r3, [pc, #24]	; (8005c1c <vTaskSetTimeOutState+0x34>)
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c08:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <vTaskSetTimeOutState+0x38>)
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	605a      	str	r2, [r3, #4]
}
 8005c10:	bf00      	nop
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	0800d05c 	.word	0x0800d05c
 8005c1c:	2002f040 	.word	0x2002f040
 8005c20:	2002f02c 	.word	0x2002f02c

08005c24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d104      	bne.n	8005c3e <xTaskCheckForTimeOut+0x1a>
 8005c34:	f640 31cb 	movw	r1, #3019	; 0xbcb
 8005c38:	4822      	ldr	r0, [pc, #136]	; (8005cc4 <xTaskCheckForTimeOut+0xa0>)
 8005c3a:	f7fe f97c 	bl	8003f36 <cmr_panic>
	configASSERT( pxTicksToWait );
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d104      	bne.n	8005c4e <xTaskCheckForTimeOut+0x2a>
 8005c44:	f640 31cc 	movw	r1, #3020	; 0xbcc
 8005c48:	481f      	ldr	r0, [pc, #124]	; (8005cc8 <xTaskCheckForTimeOut+0xa4>)
 8005c4a:	f7fe f974 	bl	8003f36 <cmr_panic>

	taskENTER_CRITICAL();
 8005c4e:	f000 fad9 	bl	8006204 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c52:	4b1e      	ldr	r3, [pc, #120]	; (8005ccc <xTaskCheckForTimeOut+0xa8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c60:	d102      	bne.n	8005c68 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c62:	2300      	movs	r3, #0
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	e026      	b.n	8005cb6 <xTaskCheckForTimeOut+0x92>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	4b18      	ldr	r3, [pc, #96]	; (8005cd0 <xTaskCheckForTimeOut+0xac>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d007      	beq.n	8005c84 <xTaskCheckForTimeOut+0x60>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d302      	bcc.n	8005c84 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	60fb      	str	r3, [r7, #12]
 8005c82:	e018      	b.n	8005cb6 <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	1ad2      	subs	r2, r2, r3
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d20e      	bcs.n	8005cb2 <xTaskCheckForTimeOut+0x8e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6859      	ldr	r1, [r3, #4]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	1acb      	subs	r3, r1, r3
 8005ca0:	441a      	add	r2, r3
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7ff ff9e 	bl	8005be8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	e001      	b.n	8005cb6 <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cb6:	f000 facf 	bl	8006258 <vPortExitCritical>

	return xReturn;
 8005cba:	68fb      	ldr	r3, [r7, #12]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	0800d05c 	.word	0x0800d05c
 8005cc8:	0800d0a4 	.word	0x0800d0a4
 8005ccc:	2002f02c 	.word	0x2002f02c
 8005cd0:	2002f040 	.word	0x2002f040

08005cd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005cd8:	4b03      	ldr	r3, [pc, #12]	; (8005ce8 <vTaskMissedYield+0x14>)
 8005cda:	2201      	movs	r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]
}
 8005cde:	bf00      	nop
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	2002f03c 	.word	0x2002f03c

08005cec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005cf4:	f000 f84c 	bl	8005d90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005cf8:	4b06      	ldr	r3, [pc, #24]	; (8005d14 <prvIdleTask+0x28>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d9f9      	bls.n	8005cf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d00:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <prvIdleTask+0x2c>)
 8005d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d06:	601a      	str	r2, [r3, #0]
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d10:	e7f0      	b.n	8005cf4 <prvIdleTask+0x8>
 8005d12:	bf00      	nop
 8005d14:	2002ef44 	.word	0x2002ef44
 8005d18:	e000ed04 	.word	0xe000ed04

08005d1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d22:	2300      	movs	r3, #0
 8005d24:	607b      	str	r3, [r7, #4]
 8005d26:	e00c      	b.n	8005d42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4a10      	ldr	r2, [pc, #64]	; (8005d74 <prvInitialiseTaskLists+0x58>)
 8005d34:	4413      	add	r3, r2
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fe fe82 	bl	8004a40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	607b      	str	r3, [r7, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b06      	cmp	r3, #6
 8005d46:	d9ef      	bls.n	8005d28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d48:	480b      	ldr	r0, [pc, #44]	; (8005d78 <prvInitialiseTaskLists+0x5c>)
 8005d4a:	f7fe fe79 	bl	8004a40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d4e:	480b      	ldr	r0, [pc, #44]	; (8005d7c <prvInitialiseTaskLists+0x60>)
 8005d50:	f7fe fe76 	bl	8004a40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d54:	480a      	ldr	r0, [pc, #40]	; (8005d80 <prvInitialiseTaskLists+0x64>)
 8005d56:	f7fe fe73 	bl	8004a40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d5a:	480a      	ldr	r0, [pc, #40]	; (8005d84 <prvInitialiseTaskLists+0x68>)
 8005d5c:	f7fe fe70 	bl	8004a40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d60:	4b09      	ldr	r3, [pc, #36]	; (8005d88 <prvInitialiseTaskLists+0x6c>)
 8005d62:	4a05      	ldr	r2, [pc, #20]	; (8005d78 <prvInitialiseTaskLists+0x5c>)
 8005d64:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d66:	4b09      	ldr	r3, [pc, #36]	; (8005d8c <prvInitialiseTaskLists+0x70>)
 8005d68:	4a04      	ldr	r2, [pc, #16]	; (8005d7c <prvInitialiseTaskLists+0x60>)
 8005d6a:	601a      	str	r2, [r3, #0]
}
 8005d6c:	bf00      	nop
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	2002ef44 	.word	0x2002ef44
 8005d78:	2002efd0 	.word	0x2002efd0
 8005d7c:	2002efe4 	.word	0x2002efe4
 8005d80:	2002f000 	.word	0x2002f000
 8005d84:	2002f014 	.word	0x2002f014
 8005d88:	2002eff8 	.word	0x2002eff8
 8005d8c:	2002effc 	.word	0x2002effc

08005d90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d90:	b480      	push	{r7}
 8005d92:	af00      	add	r7, sp, #0
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d94:	bf00      	nop
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
	...

08005da0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005da6:	4b0f      	ldr	r3, [pc, #60]	; (8005de4 <prvResetNextTaskUnblockTime+0x44>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <prvResetNextTaskUnblockTime+0x14>
 8005db0:	2301      	movs	r3, #1
 8005db2:	e000      	b.n	8005db6 <prvResetNextTaskUnblockTime+0x16>
 8005db4:	2300      	movs	r3, #0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d004      	beq.n	8005dc4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005dba:	4b0b      	ldr	r3, [pc, #44]	; (8005de8 <prvResetNextTaskUnblockTime+0x48>)
 8005dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005dc2:	e008      	b.n	8005dd6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005dc4:	4b07      	ldr	r3, [pc, #28]	; (8005de4 <prvResetNextTaskUnblockTime+0x44>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	4a05      	ldr	r2, [pc, #20]	; (8005de8 <prvResetNextTaskUnblockTime+0x48>)
 8005dd4:	6013      	str	r3, [r2, #0]
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	2002eff8 	.word	0x2002eff8
 8005de8:	2002f048 	.word	0x2002f048

08005dec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005df2:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <xTaskGetSchedulerState+0x34>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d102      	bne.n	8005e00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	607b      	str	r3, [r7, #4]
 8005dfe:	e008      	b.n	8005e12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e00:	4b08      	ldr	r3, [pc, #32]	; (8005e24 <xTaskGetSchedulerState+0x38>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d102      	bne.n	8005e0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e08:	2302      	movs	r3, #2
 8005e0a:	607b      	str	r3, [r7, #4]
 8005e0c:	e001      	b.n	8005e12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e12:	687b      	ldr	r3, [r7, #4]
	}
 8005e14:	4618      	mov	r0, r3
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	2002f034 	.word	0x2002f034
 8005e24:	2002f050 	.word	0x2002f050

08005e28 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d062      	beq.n	8005f00 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e3e:	4b32      	ldr	r3, [pc, #200]	; (8005f08 <vTaskPriorityInherit+0xe0>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d25b      	bcs.n	8005f00 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	db06      	blt.n	8005e5e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e50:	4b2d      	ldr	r3, [pc, #180]	; (8005f08 <vTaskPriorityInherit+0xe0>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e56:	f1c3 0207 	rsb	r2, r3, #7
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6959      	ldr	r1, [r3, #20]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e66:	4613      	mov	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4a27      	ldr	r2, [pc, #156]	; (8005f0c <vTaskPriorityInherit+0xe4>)
 8005e70:	4413      	add	r3, r2
 8005e72:	4299      	cmp	r1, r3
 8005e74:	d101      	bne.n	8005e7a <vTaskPriorityInherit+0x52>
 8005e76:	2301      	movs	r3, #1
 8005e78:	e000      	b.n	8005e7c <vTaskPriorityInherit+0x54>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d03a      	beq.n	8005ef6 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	3304      	adds	r3, #4
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fe fe65 	bl	8004b54 <uxListRemove>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d115      	bne.n	8005ebc <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e94:	491d      	ldr	r1, [pc, #116]	; (8005f0c <vTaskPriorityInherit+0xe4>)
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	440b      	add	r3, r1
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10a      	bne.n	8005ebc <vTaskPriorityInherit+0x94>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eaa:	2201      	movs	r2, #1
 8005eac:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb0:	43da      	mvns	r2, r3
 8005eb2:	4b17      	ldr	r3, [pc, #92]	; (8005f10 <vTaskPriorityInherit+0xe8>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	4a15      	ldr	r2, [pc, #84]	; (8005f10 <vTaskPriorityInherit+0xe8>)
 8005eba:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ebc:	4b12      	ldr	r3, [pc, #72]	; (8005f08 <vTaskPriorityInherit+0xe0>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eca:	2201      	movs	r2, #1
 8005ecc:	409a      	lsls	r2, r3
 8005ece:	4b10      	ldr	r3, [pc, #64]	; (8005f10 <vTaskPriorityInherit+0xe8>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	4a0e      	ldr	r2, [pc, #56]	; (8005f10 <vTaskPriorityInherit+0xe8>)
 8005ed6:	6013      	str	r3, [r2, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005edc:	4613      	mov	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4a09      	ldr	r2, [pc, #36]	; (8005f0c <vTaskPriorityInherit+0xe4>)
 8005ee6:	441a      	add	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3304      	adds	r3, #4
 8005eec:	4619      	mov	r1, r3
 8005eee:	4610      	mov	r0, r2
 8005ef0:	f7fe fdd3 	bl	8004a9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ef4:	e004      	b.n	8005f00 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ef6:	4b04      	ldr	r3, [pc, #16]	; (8005f08 <vTaskPriorityInherit+0xe0>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8005f00:	bf00      	nop
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	2002ef40 	.word	0x2002ef40
 8005f0c:	2002ef44 	.word	0x2002ef44
 8005f10:	2002f030 	.word	0x2002f030

08005f14 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005f14:	b480      	push	{r7}
 8005f16:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005f18:	4b07      	ldr	r3, [pc, #28]	; (8005f38 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d004      	beq.n	8005f2a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005f20:	4b05      	ldr	r3, [pc, #20]	; (8005f38 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f26:	3201      	adds	r2, #1
 8005f28:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 8005f2a:	4b03      	ldr	r3, [pc, #12]	; (8005f38 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
	}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	2002ef40 	.word	0x2002ef40

08005f3c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f46:	4b29      	ldr	r3, [pc, #164]	; (8005fec <prvAddCurrentTaskToDelayedList+0xb0>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f4c:	4b28      	ldr	r3, [pc, #160]	; (8005ff0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3304      	adds	r3, #4
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fe fdfe 	bl	8004b54 <uxListRemove>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10b      	bne.n	8005f76 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005f5e:	4b24      	ldr	r3, [pc, #144]	; (8005ff0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f64:	2201      	movs	r2, #1
 8005f66:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6a:	43da      	mvns	r2, r3
 8005f6c:	4b21      	ldr	r3, [pc, #132]	; (8005ff4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4013      	ands	r3, r2
 8005f72:	4a20      	ldr	r2, [pc, #128]	; (8005ff4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f74:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7c:	d10a      	bne.n	8005f94 <prvAddCurrentTaskToDelayedList+0x58>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d007      	beq.n	8005f94 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f84:	4b1a      	ldr	r3, [pc, #104]	; (8005ff0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3304      	adds	r3, #4
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	481a      	ldr	r0, [pc, #104]	; (8005ff8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005f8e:	f7fe fd84 	bl	8004a9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f92:	e026      	b.n	8005fe2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4413      	add	r3, r2
 8005f9a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f9c:	4b14      	ldr	r3, [pc, #80]	; (8005ff0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d209      	bcs.n	8005fc0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fac:	4b13      	ldr	r3, [pc, #76]	; (8005ffc <prvAddCurrentTaskToDelayedList+0xc0>)
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	4b0f      	ldr	r3, [pc, #60]	; (8005ff0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4610      	mov	r0, r2
 8005fba:	f7fe fd92 	bl	8004ae2 <vListInsert>
}
 8005fbe:	e010      	b.n	8005fe2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fc0:	4b0f      	ldr	r3, [pc, #60]	; (8006000 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	4b0a      	ldr	r3, [pc, #40]	; (8005ff0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3304      	adds	r3, #4
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4610      	mov	r0, r2
 8005fce:	f7fe fd88 	bl	8004ae2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005fd2:	4b0c      	ldr	r3, [pc, #48]	; (8006004 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d202      	bcs.n	8005fe2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005fdc:	4a09      	ldr	r2, [pc, #36]	; (8006004 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	6013      	str	r3, [r2, #0]
}
 8005fe2:	bf00      	nop
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	2002f02c 	.word	0x2002f02c
 8005ff0:	2002ef40 	.word	0x2002ef40
 8005ff4:	2002f030 	.word	0x2002f030
 8005ff8:	2002f014 	.word	0x2002f014
 8005ffc:	2002effc 	.word	0x2002effc
 8006000:	2002eff8 	.word	0x2002eff8
 8006004:	2002f048 	.word	0x2002f048

08006008 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3b04      	subs	r3, #4
 8006018:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006020:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	3b04      	subs	r3, #4
 8006026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f023 0201 	bic.w	r2, r3, #1
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	3b04      	subs	r3, #4
 8006036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006038:	4a0c      	ldr	r2, [pc, #48]	; (800606c <pxPortInitialiseStack+0x64>)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3b14      	subs	r3, #20
 8006042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	3b04      	subs	r3, #4
 800604e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f06f 0202 	mvn.w	r2, #2
 8006056:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	3b20      	subs	r3, #32
 800605c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800605e:	68fb      	ldr	r3, [r7, #12]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	08006071 	.word	0x08006071

08006070 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006076:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <prvTaskExitError+0x30>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607e:	d004      	beq.n	800608a <prvTaskExitError+0x1a>
 8006080:	f240 110b 	movw	r1, #267	; 0x10b
 8006084:	4807      	ldr	r0, [pc, #28]	; (80060a4 <prvTaskExitError+0x34>)
 8006086:	f7fd ff56 	bl	8003f36 <cmr_panic>
	__asm volatile
 800608a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	607b      	str	r3, [r7, #4]
}
 800609c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	for( ;; );
 800609e:	e7fe      	b.n	800609e <prvTaskExitError+0x2e>
 80060a0:	200001b0 	.word	0x200001b0
 80060a4:	0800d198 	.word	0x0800d198
	...

080060b0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80060b0:	4b07      	ldr	r3, [pc, #28]	; (80060d0 <pxCurrentTCBConst2>)
 80060b2:	6819      	ldr	r1, [r3, #0]
 80060b4:	6808      	ldr	r0, [r1, #0]
 80060b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ba:	f380 8809 	msr	PSP, r0
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f04f 0000 	mov.w	r0, #0
 80060c6:	f380 8811 	msr	BASEPRI, r0
 80060ca:	4770      	bx	lr
 80060cc:	f3af 8000 	nop.w

080060d0 <pxCurrentTCBConst2>:
 80060d0:	2002ef40 	.word	0x2002ef40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80060d4:	bf00      	nop
 80060d6:	bf00      	nop

080060d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80060d8:	4806      	ldr	r0, [pc, #24]	; (80060f4 <prvPortStartFirstTask+0x1c>)
 80060da:	6800      	ldr	r0, [r0, #0]
 80060dc:	6800      	ldr	r0, [r0, #0]
 80060de:	f380 8808 	msr	MSP, r0
 80060e2:	b662      	cpsie	i
 80060e4:	b661      	cpsie	f
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	f3bf 8f6f 	isb	sy
 80060ee:	df00      	svc	0
 80060f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060f2:	bf00      	nop
 80060f4:	e000ed08 	.word	0xe000ed08

080060f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060fe:	4b36      	ldr	r3, [pc, #216]	; (80061d8 <xPortStartScheduler+0xe0>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a36      	ldr	r2, [pc, #216]	; (80061dc <xPortStartScheduler+0xe4>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d104      	bne.n	8006112 <xPortStartScheduler+0x1a>
 8006108:	f240 1141 	movw	r1, #321	; 0x141
 800610c:	4834      	ldr	r0, [pc, #208]	; (80061e0 <xPortStartScheduler+0xe8>)
 800610e:	f7fd ff12 	bl	8003f36 <cmr_panic>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006112:	4b31      	ldr	r3, [pc, #196]	; (80061d8 <xPortStartScheduler+0xe0>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a33      	ldr	r2, [pc, #204]	; (80061e4 <xPortStartScheduler+0xec>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d104      	bne.n	8006126 <xPortStartScheduler+0x2e>
 800611c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8006120:	4831      	ldr	r0, [pc, #196]	; (80061e8 <xPortStartScheduler+0xf0>)
 8006122:	f7fd ff08 	bl	8003f36 <cmr_panic>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006126:	4b31      	ldr	r3, [pc, #196]	; (80061ec <xPortStartScheduler+0xf4>)
 8006128:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	b2db      	uxtb	r3, r3
 8006130:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	22ff      	movs	r2, #255	; 0xff
 8006136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	b2db      	uxtb	r3, r3
 800613e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006140:	79fb      	ldrb	r3, [r7, #7]
 8006142:	b2db      	uxtb	r3, r3
 8006144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006148:	b2da      	uxtb	r2, r3
 800614a:	4b29      	ldr	r3, [pc, #164]	; (80061f0 <xPortStartScheduler+0xf8>)
 800614c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800614e:	4b29      	ldr	r3, [pc, #164]	; (80061f4 <xPortStartScheduler+0xfc>)
 8006150:	2207      	movs	r2, #7
 8006152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006154:	e009      	b.n	800616a <xPortStartScheduler+0x72>
		{
			ulMaxPRIGROUPValue--;
 8006156:	4b27      	ldr	r3, [pc, #156]	; (80061f4 <xPortStartScheduler+0xfc>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3b01      	subs	r3, #1
 800615c:	4a25      	ldr	r2, [pc, #148]	; (80061f4 <xPortStartScheduler+0xfc>)
 800615e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006160:	79fb      	ldrb	r3, [r7, #7]
 8006162:	b2db      	uxtb	r3, r3
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	b2db      	uxtb	r3, r3
 8006168:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800616a:	79fb      	ldrb	r3, [r7, #7]
 800616c:	b2db      	uxtb	r3, r3
 800616e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006172:	2b80      	cmp	r3, #128	; 0x80
 8006174:	d0ef      	beq.n	8006156 <xPortStartScheduler+0x5e>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006176:	4b1f      	ldr	r3, [pc, #124]	; (80061f4 <xPortStartScheduler+0xfc>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	021b      	lsls	r3, r3, #8
 800617c:	4a1d      	ldr	r2, [pc, #116]	; (80061f4 <xPortStartScheduler+0xfc>)
 800617e:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006180:	4b1c      	ldr	r3, [pc, #112]	; (80061f4 <xPortStartScheduler+0xfc>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006188:	4a1a      	ldr	r2, [pc, #104]	; (80061f4 <xPortStartScheduler+0xfc>)
 800618a:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	b2da      	uxtb	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006194:	4b18      	ldr	r3, [pc, #96]	; (80061f8 <xPortStartScheduler+0x100>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a17      	ldr	r2, [pc, #92]	; (80061f8 <xPortStartScheduler+0x100>)
 800619a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800619e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061a0:	4b15      	ldr	r3, [pc, #84]	; (80061f8 <xPortStartScheduler+0x100>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a14      	ldr	r2, [pc, #80]	; (80061f8 <xPortStartScheduler+0x100>)
 80061a6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80061aa:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061ac:	f000 f8ce 	bl	800634c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061b0:	4b12      	ldr	r3, [pc, #72]	; (80061fc <xPortStartScheduler+0x104>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061b6:	f000 f8e5 	bl	8006384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061ba:	4b11      	ldr	r3, [pc, #68]	; (8006200 <xPortStartScheduler+0x108>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a10      	ldr	r2, [pc, #64]	; (8006200 <xPortStartScheduler+0x108>)
 80061c0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061c4:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061c6:	f7ff ff87 	bl	80060d8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80061ca:	f7ff ff51 	bl	8006070 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	e000ed00 	.word	0xe000ed00
 80061dc:	410fc271 	.word	0x410fc271
 80061e0:	0800d204 	.word	0x0800d204
 80061e4:	410fc270 	.word	0x410fc270
 80061e8:	0800d278 	.word	0x0800d278
 80061ec:	e000e400 	.word	0xe000e400
 80061f0:	2002f054 	.word	0x2002f054
 80061f4:	2002f058 	.word	0x2002f058
 80061f8:	e000ed20 	.word	0xe000ed20
 80061fc:	200001b0 	.word	0x200001b0
 8006200:	e000ef34 	.word	0xe000ef34

08006204 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
	__asm volatile
 800620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	607b      	str	r3, [r7, #4]
}
 800621c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800621e:	4b0b      	ldr	r3, [pc, #44]	; (800624c <vPortEnterCritical+0x48>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3301      	adds	r3, #1
 8006224:	4a09      	ldr	r2, [pc, #36]	; (800624c <vPortEnterCritical+0x48>)
 8006226:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006228:	4b08      	ldr	r3, [pc, #32]	; (800624c <vPortEnterCritical+0x48>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d109      	bne.n	8006244 <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006230:	4b07      	ldr	r3, [pc, #28]	; (8006250 <vPortEnterCritical+0x4c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d004      	beq.n	8006244 <vPortEnterCritical+0x40>
 800623a:	f240 11a3 	movw	r1, #419	; 0x1a3
 800623e:	4805      	ldr	r0, [pc, #20]	; (8006254 <vPortEnterCritical+0x50>)
 8006240:	f7fd fe79 	bl	8003f36 <cmr_panic>
	}
}
 8006244:	bf00      	nop
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	200001b0 	.word	0x200001b0
 8006250:	e000ed04 	.word	0xe000ed04
 8006254:	0800d35c 	.word	0x0800d35c

08006258 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800625e:	4b0e      	ldr	r3, [pc, #56]	; (8006298 <vPortExitCritical+0x40>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d104      	bne.n	8006270 <vPortExitCritical+0x18>
 8006266:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800626a:	480c      	ldr	r0, [pc, #48]	; (800629c <vPortExitCritical+0x44>)
 800626c:	f7fd fe63 	bl	8003f36 <cmr_panic>
	uxCriticalNesting--;
 8006270:	4b09      	ldr	r3, [pc, #36]	; (8006298 <vPortExitCritical+0x40>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3b01      	subs	r3, #1
 8006276:	4a08      	ldr	r2, [pc, #32]	; (8006298 <vPortExitCritical+0x40>)
 8006278:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800627a:	4b07      	ldr	r3, [pc, #28]	; (8006298 <vPortExitCritical+0x40>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d105      	bne.n	800628e <vPortExitCritical+0x36>
 8006282:	2300      	movs	r3, #0
 8006284:	607b      	str	r3, [r7, #4]
	__asm volatile
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f383 8811 	msr	BASEPRI, r3
}
 800628c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800628e:	bf00      	nop
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	200001b0 	.word	0x200001b0
 800629c:	0800d3e4 	.word	0x0800d3e4

080062a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062a0:	f3ef 8009 	mrs	r0, PSP
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	4b15      	ldr	r3, [pc, #84]	; (8006300 <pxCurrentTCBConst>)
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	f01e 0f10 	tst.w	lr, #16
 80062b0:	bf08      	it	eq
 80062b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ba:	6010      	str	r0, [r2, #0]
 80062bc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80062c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062c4:	f380 8811 	msr	BASEPRI, r0
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f7ff fbb6 	bl	8005a40 <vTaskSwitchContext>
 80062d4:	f04f 0000 	mov.w	r0, #0
 80062d8:	f380 8811 	msr	BASEPRI, r0
 80062dc:	bc08      	pop	{r3}
 80062de:	6819      	ldr	r1, [r3, #0]
 80062e0:	6808      	ldr	r0, [r1, #0]
 80062e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e6:	f01e 0f10 	tst.w	lr, #16
 80062ea:	bf08      	it	eq
 80062ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062f0:	f380 8809 	msr	PSP, r0
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	f3af 8000 	nop.w

08006300 <pxCurrentTCBConst>:
 8006300:	2002ef40 	.word	0x2002ef40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop

08006308 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	607b      	str	r3, [r7, #4]
}
 8006320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006322:	f7ff fad3 	bl	80058cc <xTaskIncrementTick>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800632c:	4b06      	ldr	r3, [pc, #24]	; (8006348 <xPortSysTickHandler+0x40>)
 800632e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	2300      	movs	r3, #0
 8006336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	f383 8811 	msr	BASEPRI, r3
}
 800633e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006340:	bf00      	nop
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	e000ed04 	.word	0xe000ed04

0800634c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800634c:	b480      	push	{r7}
 800634e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006350:	4b08      	ldr	r3, [pc, #32]	; (8006374 <vPortSetupTimerInterrupt+0x28>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a08      	ldr	r2, [pc, #32]	; (8006378 <vPortSetupTimerInterrupt+0x2c>)
 8006356:	fba2 2303 	umull	r2, r3, r2, r3
 800635a:	099b      	lsrs	r3, r3, #6
 800635c:	4a07      	ldr	r2, [pc, #28]	; (800637c <vPortSetupTimerInterrupt+0x30>)
 800635e:	3b01      	subs	r3, #1
 8006360:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006362:	4b07      	ldr	r3, [pc, #28]	; (8006380 <vPortSetupTimerInterrupt+0x34>)
 8006364:	2207      	movs	r2, #7
 8006366:	601a      	str	r2, [r3, #0]
}
 8006368:	bf00      	nop
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	200001ac 	.word	0x200001ac
 8006378:	10624dd3 	.word	0x10624dd3
 800637c:	e000e014 	.word	0xe000e014
 8006380:	e000e010 	.word	0xe000e010

08006384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006384:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006394 <vPortEnableVFP+0x10>
 8006388:	6801      	ldr	r1, [r0, #0]
 800638a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800638e:	6001      	str	r1, [r0, #0]
 8006390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006392:	bf00      	nop
 8006394:	e000ed88 	.word	0xe000ed88

08006398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800639e:	f3ef 8305 	mrs	r3, IPSR
 80063a2:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b0f      	cmp	r3, #15
 80063a8:	d90e      	bls.n	80063c8 <vPortValidateInterruptPriority+0x30>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063aa:	4a10      	ldr	r2, [pc, #64]	; (80063ec <vPortValidateInterruptPriority+0x54>)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4413      	add	r3, r2
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80063b4:	4b0e      	ldr	r3, [pc, #56]	; (80063f0 <vPortValidateInterruptPriority+0x58>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	78fa      	ldrb	r2, [r7, #3]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d204      	bcs.n	80063c8 <vPortValidateInterruptPriority+0x30>
 80063be:	f240 21e6 	movw	r1, #742	; 0x2e6
 80063c2:	480c      	ldr	r0, [pc, #48]	; (80063f4 <vPortValidateInterruptPriority+0x5c>)
 80063c4:	f7fd fdb7 	bl	8003f36 <cmr_panic>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80063c8:	4b0b      	ldr	r3, [pc, #44]	; (80063f8 <vPortValidateInterruptPriority+0x60>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063d0:	4b0a      	ldr	r3, [pc, #40]	; (80063fc <vPortValidateInterruptPriority+0x64>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d904      	bls.n	80063e2 <vPortValidateInterruptPriority+0x4a>
 80063d8:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 80063dc:	4808      	ldr	r0, [pc, #32]	; (8006400 <vPortValidateInterruptPriority+0x68>)
 80063de:	f7fd fdaa 	bl	8003f36 <cmr_panic>
	}
 80063e2:	bf00      	nop
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	e000e3f0 	.word	0xe000e3f0
 80063f0:	2002f054 	.word	0x2002f054
 80063f4:	0800d448 	.word	0x0800d448
 80063f8:	e000ed0c 	.word	0xe000ed0c
 80063fc:	2002f058 	.word	0x2002f058
 8006400:	0800d4c4 	.word	0x0800d4c4

08006404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006408:	4b0e      	ldr	r3, [pc, #56]	; (8006444 <HAL_Init+0x40>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a0d      	ldr	r2, [pc, #52]	; (8006444 <HAL_Init+0x40>)
 800640e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006412:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006414:	4b0b      	ldr	r3, [pc, #44]	; (8006444 <HAL_Init+0x40>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a0a      	ldr	r2, [pc, #40]	; (8006444 <HAL_Init+0x40>)
 800641a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800641e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006420:	4b08      	ldr	r3, [pc, #32]	; (8006444 <HAL_Init+0x40>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a07      	ldr	r2, [pc, #28]	; (8006444 <HAL_Init+0x40>)
 8006426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800642a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800642c:	2003      	movs	r0, #3
 800642e:	f001 fb11 	bl	8007a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006432:	200f      	movs	r0, #15
 8006434:	f000 f810 	bl	8006458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006438:	f000 f806 	bl	8006448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	40023c00 	.word	0x40023c00

08006448 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8006448:	b480      	push	{r7}
 800644a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800644c:	bf00      	nop
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
	...

08006458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006460:	4b12      	ldr	r3, [pc, #72]	; (80064ac <HAL_InitTick+0x54>)
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	4b12      	ldr	r3, [pc, #72]	; (80064b0 <HAL_InitTick+0x58>)
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	4619      	mov	r1, r3
 800646a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800646e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006472:	fbb2 f3f3 	udiv	r3, r2, r3
 8006476:	4618      	mov	r0, r3
 8006478:	f001 fb21 	bl	8007abe <HAL_SYSTICK_Config>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e00e      	b.n	80064a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b0f      	cmp	r3, #15
 800648a:	d80a      	bhi.n	80064a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800648c:	2200      	movs	r2, #0
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	f04f 30ff 	mov.w	r0, #4294967295
 8006494:	f001 fae9 	bl	8007a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006498:	4a06      	ldr	r2, [pc, #24]	; (80064b4 <HAL_InitTick+0x5c>)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800649e:	2300      	movs	r3, #0
 80064a0:	e000      	b.n	80064a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	200001ac 	.word	0x200001ac
 80064b0:	200001b8 	.word	0x200001b8
 80064b4:	200001b4 	.word	0x200001b4

080064b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064b8:	b480      	push	{r7}
 80064ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80064bc:	4b06      	ldr	r3, [pc, #24]	; (80064d8 <HAL_IncTick+0x20>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	461a      	mov	r2, r3
 80064c2:	4b06      	ldr	r3, [pc, #24]	; (80064dc <HAL_IncTick+0x24>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4413      	add	r3, r2
 80064c8:	4a04      	ldr	r2, [pc, #16]	; (80064dc <HAL_IncTick+0x24>)
 80064ca:	6013      	str	r3, [r2, #0]
}
 80064cc:	bf00      	nop
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	200001b8 	.word	0x200001b8
 80064dc:	2002f05c 	.word	0x2002f05c

080064e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80064e0:	b480      	push	{r7}
 80064e2:	af00      	add	r7, sp, #0
  return uwTick;
 80064e4:	4b03      	ldr	r3, [pc, #12]	; (80064f4 <HAL_GetTick+0x14>)
 80064e6:	681b      	ldr	r3, [r3, #0]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	2002f05c 	.word	0x2002f05c

080064f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006500:	2300      	movs	r3, #0
 8006502:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e033      	b.n	8006576 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	2b00      	cmp	r3, #0
 8006514:	d109      	bne.n	800652a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f831 	bl	800657e <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652e:	f003 0310 	and.w	r3, r3, #16
 8006532:	2b00      	cmp	r3, #0
 8006534:	d118      	bne.n	8006568 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800653e:	f023 0302 	bic.w	r3, r3, #2
 8006542:	f043 0202 	orr.w	r2, r3, #2
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fa8c 	bl	8006a68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	f023 0303 	bic.w	r3, r3, #3
 800655e:	f043 0201 	orr.w	r2, r3, #1
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	641a      	str	r2, [r3, #64]	; 0x40
 8006566:	e001      	b.n	800656c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006574:	7bfb      	ldrb	r3, [r7, #15]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800657e:	b480      	push	{r7}
 8006580:	b083      	sub	sp, #12
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8006586:	bf00      	nop
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
	...

08006594 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d101      	bne.n	80065ae <HAL_ADC_Start+0x1a>
 80065aa:	2302      	movs	r3, #2
 80065ac:	e08a      	b.n	80066c4 <HAL_ADC_Start+0x130>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d018      	beq.n	80065f6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689a      	ldr	r2, [r3, #8]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f042 0201 	orr.w	r2, r2, #1
 80065d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80065d4:	4b3e      	ldr	r3, [pc, #248]	; (80066d0 <HAL_ADC_Start+0x13c>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a3e      	ldr	r2, [pc, #248]	; (80066d4 <HAL_ADC_Start+0x140>)
 80065da:	fba2 2303 	umull	r2, r3, r2, r3
 80065de:	0c9a      	lsrs	r2, r3, #18
 80065e0:	4613      	mov	r3, r2
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	4413      	add	r3, r2
 80065e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80065e8:	e002      	b.n	80065f0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	3b01      	subs	r3, #1
 80065ee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1f9      	bne.n	80065ea <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	2b01      	cmp	r3, #1
 8006602:	d15e      	bne.n	80066c2 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006608:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800660c:	f023 0301 	bic.w	r3, r3, #1
 8006610:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006622:	2b00      	cmp	r3, #0
 8006624:	d007      	beq.n	8006636 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800662e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800663e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006642:	d106      	bne.n	8006652 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006648:	f023 0206 	bic.w	r2, r3, #6
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	645a      	str	r2, [r3, #68]	; 0x44
 8006650:	e002      	b.n	8006658 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006660:	4b1d      	ldr	r3, [pc, #116]	; (80066d8 <HAL_ADC_Start+0x144>)
 8006662:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800666c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f003 031f 	and.w	r3, r3, #31
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10f      	bne.n	800669a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d11c      	bne.n	80066c2 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689a      	ldr	r2, [r3, #8]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006696:	609a      	str	r2, [r3, #8]
 8006698:	e013      	b.n	80066c2 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a0f      	ldr	r2, [pc, #60]	; (80066dc <HAL_ADC_Start+0x148>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d10e      	bne.n	80066c2 <HAL_ADC_Start+0x12e>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d107      	bne.n	80066c2 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80066c0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	200001ac 	.word	0x200001ac
 80066d4:	431bde83 	.word	0x431bde83
 80066d8:	40012300 	.word	0x40012300
 80066dc:	40012000 	.word	0x40012000

080066e0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80066ea:	2300      	movs	r3, #0
 80066ec:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066fc:	d113      	bne.n	8006726 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800670c:	d10b      	bne.n	8006726 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006712:	f043 0220 	orr.w	r2, r3, #32
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e05c      	b.n	80067e0 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006726:	f7ff fedb 	bl	80064e0 <HAL_GetTick>
 800672a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800672c:	e01a      	b.n	8006764 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006734:	d016      	beq.n	8006764 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d007      	beq.n	800674c <HAL_ADC_PollForConversion+0x6c>
 800673c:	f7ff fed0 	bl	80064e0 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	429a      	cmp	r2, r3
 800674a:	d20b      	bcs.n	8006764 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006750:	f043 0204 	orr.w	r2, r3, #4
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e03d      	b.n	80067e0 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b02      	cmp	r3, #2
 8006770:	d1dd      	bne.n	800672e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f06f 0212 	mvn.w	r2, #18
 800677a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006780:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d123      	bne.n	80067de <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800679a:	2b00      	cmp	r3, #0
 800679c:	d11f      	bne.n	80067de <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d006      	beq.n	80067ba <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d111      	bne.n	80067de <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d105      	bne.n	80067de <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	f043 0201 	orr.w	r2, r3, #1
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
	...

08006804 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006818:	2b01      	cmp	r3, #1
 800681a:	d101      	bne.n	8006820 <HAL_ADC_ConfigChannel+0x1c>
 800681c:	2302      	movs	r3, #2
 800681e:	e113      	b.n	8006a48 <HAL_ADC_ConfigChannel+0x244>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b09      	cmp	r3, #9
 800682e:	d925      	bls.n	800687c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68d9      	ldr	r1, [r3, #12]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	b29b      	uxth	r3, r3
 800683c:	461a      	mov	r2, r3
 800683e:	4613      	mov	r3, r2
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	4413      	add	r3, r2
 8006844:	3b1e      	subs	r3, #30
 8006846:	2207      	movs	r2, #7
 8006848:	fa02 f303 	lsl.w	r3, r2, r3
 800684c:	43da      	mvns	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	400a      	ands	r2, r1
 8006854:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68d9      	ldr	r1, [r3, #12]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	689a      	ldr	r2, [r3, #8]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	b29b      	uxth	r3, r3
 8006866:	4618      	mov	r0, r3
 8006868:	4603      	mov	r3, r0
 800686a:	005b      	lsls	r3, r3, #1
 800686c:	4403      	add	r3, r0
 800686e:	3b1e      	subs	r3, #30
 8006870:	409a      	lsls	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	60da      	str	r2, [r3, #12]
 800687a:	e022      	b.n	80068c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6919      	ldr	r1, [r3, #16]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	b29b      	uxth	r3, r3
 8006888:	461a      	mov	r2, r3
 800688a:	4613      	mov	r3, r2
 800688c:	005b      	lsls	r3, r3, #1
 800688e:	4413      	add	r3, r2
 8006890:	2207      	movs	r2, #7
 8006892:	fa02 f303 	lsl.w	r3, r2, r3
 8006896:	43da      	mvns	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	400a      	ands	r2, r1
 800689e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6919      	ldr	r1, [r3, #16]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	689a      	ldr	r2, [r3, #8]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	4618      	mov	r0, r3
 80068b2:	4603      	mov	r3, r0
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	4403      	add	r3, r0
 80068b8:	409a      	lsls	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	430a      	orrs	r2, r1
 80068c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	2b06      	cmp	r3, #6
 80068c8:	d824      	bhi.n	8006914 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	4613      	mov	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	3b05      	subs	r3, #5
 80068dc:	221f      	movs	r2, #31
 80068de:	fa02 f303 	lsl.w	r3, r2, r3
 80068e2:	43da      	mvns	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	400a      	ands	r2, r1
 80068ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	4618      	mov	r0, r3
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	685a      	ldr	r2, [r3, #4]
 80068fe:	4613      	mov	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	3b05      	subs	r3, #5
 8006906:	fa00 f203 	lsl.w	r2, r0, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	635a      	str	r2, [r3, #52]	; 0x34
 8006912:	e04c      	b.n	80069ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	2b0c      	cmp	r3, #12
 800691a:	d824      	bhi.n	8006966 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	4613      	mov	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	3b23      	subs	r3, #35	; 0x23
 800692e:	221f      	movs	r2, #31
 8006930:	fa02 f303 	lsl.w	r3, r2, r3
 8006934:	43da      	mvns	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	400a      	ands	r2, r1
 800693c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	b29b      	uxth	r3, r3
 800694a:	4618      	mov	r0, r3
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	4613      	mov	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	3b23      	subs	r3, #35	; 0x23
 8006958:	fa00 f203 	lsl.w	r2, r0, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	631a      	str	r2, [r3, #48]	; 0x30
 8006964:	e023      	b.n	80069ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	4613      	mov	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4413      	add	r3, r2
 8006976:	3b41      	subs	r3, #65	; 0x41
 8006978:	221f      	movs	r2, #31
 800697a:	fa02 f303 	lsl.w	r3, r2, r3
 800697e:	43da      	mvns	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	400a      	ands	r2, r1
 8006986:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	b29b      	uxth	r3, r3
 8006994:	4618      	mov	r0, r3
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	4613      	mov	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	3b41      	subs	r3, #65	; 0x41
 80069a2:	fa00 f203 	lsl.w	r2, r0, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80069ae:	4b29      	ldr	r3, [pc, #164]	; (8006a54 <HAL_ADC_ConfigChannel+0x250>)
 80069b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a28      	ldr	r2, [pc, #160]	; (8006a58 <HAL_ADC_ConfigChannel+0x254>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d10f      	bne.n	80069dc <HAL_ADC_ConfigChannel+0x1d8>
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b12      	cmp	r3, #18
 80069c2:	d10b      	bne.n	80069dc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a1d      	ldr	r2, [pc, #116]	; (8006a58 <HAL_ADC_ConfigChannel+0x254>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d12b      	bne.n	8006a3e <HAL_ADC_ConfigChannel+0x23a>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a1c      	ldr	r2, [pc, #112]	; (8006a5c <HAL_ADC_ConfigChannel+0x258>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d003      	beq.n	80069f8 <HAL_ADC_ConfigChannel+0x1f4>
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b11      	cmp	r3, #17
 80069f6:	d122      	bne.n	8006a3e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a11      	ldr	r2, [pc, #68]	; (8006a5c <HAL_ADC_ConfigChannel+0x258>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d111      	bne.n	8006a3e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006a1a:	4b11      	ldr	r3, [pc, #68]	; (8006a60 <HAL_ADC_ConfigChannel+0x25c>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a11      	ldr	r2, [pc, #68]	; (8006a64 <HAL_ADC_ConfigChannel+0x260>)
 8006a20:	fba2 2303 	umull	r2, r3, r2, r3
 8006a24:	0c9a      	lsrs	r2, r3, #18
 8006a26:	4613      	mov	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006a30:	e002      	b.n	8006a38 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	3b01      	subs	r3, #1
 8006a36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1f9      	bne.n	8006a32 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	40012300 	.word	0x40012300
 8006a58:	40012000 	.word	0x40012000
 8006a5c:	10000012 	.word	0x10000012
 8006a60:	200001ac 	.word	0x200001ac
 8006a64:	431bde83 	.word	0x431bde83

08006a68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a70:	4b79      	ldr	r3, [pc, #484]	; (8006c58 <ADC_Init+0x1f0>)
 8006a72:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	431a      	orrs	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6859      	ldr	r1, [r3, #4]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	021a      	lsls	r2, r3, #8
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006ac0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6859      	ldr	r1, [r3, #4]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689a      	ldr	r2, [r3, #8]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ae2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6899      	ldr	r1, [r3, #8]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68da      	ldr	r2, [r3, #12]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afa:	4a58      	ldr	r2, [pc, #352]	; (8006c5c <ADC_Init+0x1f4>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d022      	beq.n	8006b46 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	689a      	ldr	r2, [r3, #8]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6899      	ldr	r1, [r3, #8]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	430a      	orrs	r2, r1
 8006b20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	689a      	ldr	r2, [r3, #8]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006b30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6899      	ldr	r1, [r3, #8]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	430a      	orrs	r2, r1
 8006b42:	609a      	str	r2, [r3, #8]
 8006b44:	e00f      	b.n	8006b66 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006b64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f022 0202 	bic.w	r2, r2, #2
 8006b74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	6899      	ldr	r1, [r3, #8]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	7e1b      	ldrb	r3, [r3, #24]
 8006b80:	005a      	lsls	r2, r3, #1
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	430a      	orrs	r2, r1
 8006b88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d01b      	beq.n	8006bcc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ba2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006bb2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6859      	ldr	r1, [r3, #4]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	035a      	lsls	r2, r3, #13
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	605a      	str	r2, [r3, #4]
 8006bca:	e007      	b.n	8006bdc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bda:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006bea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	051a      	lsls	r2, r3, #20
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689a      	ldr	r2, [r3, #8]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006c10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	6899      	ldr	r1, [r3, #8]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c1e:	025a      	lsls	r2, r3, #9
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	689a      	ldr	r2, [r3, #8]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6899      	ldr	r1, [r3, #8]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	029a      	lsls	r2, r3, #10
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	609a      	str	r2, [r3, #8]
}
 8006c4c:	bf00      	nop
 8006c4e:	3714      	adds	r7, #20
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	40012300 	.word	0x40012300
 8006c5c:	0f000001 	.word	0x0f000001

08006c60 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e0ed      	b.n	8006e4e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d102      	bne.n	8006c84 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f8e9 	bl	8006e56 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0202 	bic.w	r2, r2, #2
 8006c92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c94:	f7ff fc24 	bl	80064e0 <HAL_GetTick>
 8006c98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006c9a:	e012      	b.n	8006cc2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006c9c:	f7ff fc20 	bl	80064e0 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b0a      	cmp	r3, #10
 8006ca8:	d90b      	bls.n	8006cc2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2205      	movs	r2, #5
 8006cba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e0c5      	b.n	8006e4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e5      	bne.n	8006c9c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0201 	orr.w	r2, r2, #1
 8006cde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ce0:	f7ff fbfe 	bl	80064e0 <HAL_GetTick>
 8006ce4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006ce6:	e012      	b.n	8006d0e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006ce8:	f7ff fbfa 	bl	80064e0 <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	2b0a      	cmp	r3, #10
 8006cf4:	d90b      	bls.n	8006d0e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2205      	movs	r2, #5
 8006d06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e09f      	b.n	8006e4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d0e5      	beq.n	8006ce8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	7e1b      	ldrb	r3, [r3, #24]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d108      	bne.n	8006d36 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	e007      	b.n	8006d46 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	7e5b      	ldrb	r3, [r3, #25]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d108      	bne.n	8006d60 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	e007      	b.n	8006d70 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	7e9b      	ldrb	r3, [r3, #26]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d108      	bne.n	8006d8a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f042 0220 	orr.w	r2, r2, #32
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	e007      	b.n	8006d9a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 0220 	bic.w	r2, r2, #32
 8006d98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	7edb      	ldrb	r3, [r3, #27]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d108      	bne.n	8006db4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f022 0210 	bic.w	r2, r2, #16
 8006db0:	601a      	str	r2, [r3, #0]
 8006db2:	e007      	b.n	8006dc4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f042 0210 	orr.w	r2, r2, #16
 8006dc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	7f1b      	ldrb	r3, [r3, #28]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d108      	bne.n	8006dde <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f042 0208 	orr.w	r2, r2, #8
 8006dda:	601a      	str	r2, [r3, #0]
 8006ddc:	e007      	b.n	8006dee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 0208 	bic.w	r2, r2, #8
 8006dec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	7f5b      	ldrb	r3, [r3, #29]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d108      	bne.n	8006e08 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f042 0204 	orr.w	r2, r2, #4
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	e007      	b.n	8006e18 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0204 	bic.w	r2, r2, #4
 8006e16:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689a      	ldr	r2, [r3, #8]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	431a      	orrs	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	431a      	orrs	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	ea42 0103 	orr.w	r1, r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	1e5a      	subs	r2, r3, #1
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <HAL_CAN_MspInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_MspInit could be implemented in the user file
   */
}
 8006e5e:	bf00      	nop
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
	...

08006e6c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b087      	sub	sp, #28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e82:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8006e84:	7cfb      	ldrb	r3, [r7, #19]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d003      	beq.n	8006e92 <HAL_CAN_ConfigFilter+0x26>
 8006e8a:	7cfb      	ldrb	r3, [r7, #19]
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	f040 80c7 	bne.w	8007020 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a69      	ldr	r2, [pc, #420]	; (800703c <HAL_CAN_ConfigFilter+0x1d0>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d001      	beq.n	8006ea0 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8006e9c:	4b68      	ldr	r3, [pc, #416]	; (8007040 <HAL_CAN_ConfigFilter+0x1d4>)
 8006e9e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ea6:	f043 0201 	orr.w	r2, r3, #1
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	4a63      	ldr	r2, [pc, #396]	; (8007040 <HAL_CAN_ConfigFilter+0x1d4>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d111      	bne.n	8006edc <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ebe:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed2:	021b      	lsls	r3, r3, #8
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	f003 031f 	and.w	r3, r3, #31
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eea:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	43db      	mvns	r3, r3
 8006ef6:	401a      	ands	r2, r3
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d123      	bne.n	8006f4e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	43db      	mvns	r3, r3
 8006f10:	401a      	ands	r2, r3
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006f28:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	3248      	adds	r2, #72	; 0x48
 8006f2e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f42:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f44:	6979      	ldr	r1, [r7, #20]
 8006f46:	3348      	adds	r3, #72	; 0x48
 8006f48:	00db      	lsls	r3, r3, #3
 8006f4a:	440b      	add	r3, r1
 8006f4c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d122      	bne.n	8006f9c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	431a      	orrs	r2, r3
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006f76:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	3248      	adds	r2, #72	; 0x48
 8006f7c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f90:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f92:	6979      	ldr	r1, [r7, #20]
 8006f94:	3348      	adds	r3, #72	; 0x48
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	440b      	add	r3, r1
 8006f9a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d109      	bne.n	8006fb8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	43db      	mvns	r3, r3
 8006fae:	401a      	ands	r2, r3
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8006fb6:	e007      	b.n	8006fc8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	431a      	orrs	r2, r3
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d109      	bne.n	8006fe4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	43db      	mvns	r3, r3
 8006fda:	401a      	ands	r2, r3
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006fe2:	e007      	b.n	8006ff4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	431a      	orrs	r2, r3
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d107      	bne.n	800700c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	431a      	orrs	r2, r3
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007012:	f023 0201 	bic.w	r2, r3, #1
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800701c:	2300      	movs	r3, #0
 800701e:	e006      	b.n	800702e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
  }
}
 800702e:	4618      	mov	r0, r3
 8007030:	371c      	adds	r7, #28
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	40006c00 	.word	0x40006c00
 8007040:	40006400 	.word	0x40006400

08007044 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b01      	cmp	r3, #1
 8007056:	d12e      	bne.n	80070b6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f022 0201 	bic.w	r2, r2, #1
 800706e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007070:	f7ff fa36 	bl	80064e0 <HAL_GetTick>
 8007074:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007076:	e012      	b.n	800709e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007078:	f7ff fa32 	bl	80064e0 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	2b0a      	cmp	r3, #10
 8007084:	d90b      	bls.n	800709e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2205      	movs	r2, #5
 8007096:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e012      	b.n	80070c4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1e5      	bne.n	8007078 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	e006      	b.n	80070c4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
  }
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b089      	sub	sp, #36	; 0x24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
 80070d8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070e0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80070ea:	7ffb      	ldrb	r3, [r7, #31]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d003      	beq.n	80070f8 <HAL_CAN_AddTxMessage+0x2c>
 80070f0:	7ffb      	ldrb	r3, [r7, #31]
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	f040 80b8 	bne.w	8007268 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10a      	bne.n	8007118 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007108:	2b00      	cmp	r3, #0
 800710a:	d105      	bne.n	8007118 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007112:	2b00      	cmp	r3, #0
 8007114:	f000 80a0 	beq.w	8007258 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	0e1b      	lsrs	r3, r3, #24
 800711c:	f003 0303 	and.w	r3, r3, #3
 8007120:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	2b02      	cmp	r3, #2
 8007126:	d907      	bls.n	8007138 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e09e      	b.n	8007276 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007138:	2201      	movs	r2, #1
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	409a      	lsls	r2, r3
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10d      	bne.n	8007166 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007154:	68f9      	ldr	r1, [r7, #12]
 8007156:	6809      	ldr	r1, [r1, #0]
 8007158:	431a      	orrs	r2, r3
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	3318      	adds	r3, #24
 800715e:	011b      	lsls	r3, r3, #4
 8007160:	440b      	add	r3, r1
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	e00f      	b.n	8007186 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007170:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007176:	68f9      	ldr	r1, [r7, #12]
 8007178:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800717a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	3318      	adds	r3, #24
 8007180:	011b      	lsls	r3, r3, #4
 8007182:	440b      	add	r3, r1
 8007184:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6819      	ldr	r1, [r3, #0]
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	691a      	ldr	r2, [r3, #16]
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	3318      	adds	r3, #24
 8007192:	011b      	lsls	r3, r3, #4
 8007194:	440b      	add	r3, r1
 8007196:	3304      	adds	r3, #4
 8007198:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	7d1b      	ldrb	r3, [r3, #20]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d111      	bne.n	80071c6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	3318      	adds	r3, #24
 80071aa:	011b      	lsls	r3, r3, #4
 80071ac:	4413      	add	r3, r2
 80071ae:	3304      	adds	r3, #4
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	6811      	ldr	r1, [r2, #0]
 80071b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	3318      	adds	r3, #24
 80071be:	011b      	lsls	r3, r3, #4
 80071c0:	440b      	add	r3, r1
 80071c2:	3304      	adds	r3, #4
 80071c4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3307      	adds	r3, #7
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	061a      	lsls	r2, r3, #24
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	3306      	adds	r3, #6
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	041b      	lsls	r3, r3, #16
 80071d6:	431a      	orrs	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	3305      	adds	r3, #5
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	021b      	lsls	r3, r3, #8
 80071e0:	4313      	orrs	r3, r2
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	3204      	adds	r2, #4
 80071e6:	7812      	ldrb	r2, [r2, #0]
 80071e8:	4610      	mov	r0, r2
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	6811      	ldr	r1, [r2, #0]
 80071ee:	ea43 0200 	orr.w	r2, r3, r0
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	011b      	lsls	r3, r3, #4
 80071f6:	440b      	add	r3, r1
 80071f8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80071fc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	3303      	adds	r3, #3
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	061a      	lsls	r2, r3, #24
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	3302      	adds	r3, #2
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	041b      	lsls	r3, r3, #16
 800720e:	431a      	orrs	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	3301      	adds	r3, #1
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	021b      	lsls	r3, r3, #8
 8007218:	4313      	orrs	r3, r2
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	7812      	ldrb	r2, [r2, #0]
 800721e:	4610      	mov	r0, r2
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	6811      	ldr	r1, [r2, #0]
 8007224:	ea43 0200 	orr.w	r2, r3, r0
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	011b      	lsls	r3, r3, #4
 800722c:	440b      	add	r3, r1
 800722e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007232:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	3318      	adds	r3, #24
 800723c:	011b      	lsls	r3, r3, #4
 800723e:	4413      	add	r3, r2
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	6811      	ldr	r1, [r2, #0]
 8007246:	f043 0201 	orr.w	r2, r3, #1
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	3318      	adds	r3, #24
 800724e:	011b      	lsls	r3, r3, #4
 8007250:	440b      	add	r3, r1
 8007252:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	e00e      	b.n	8007276 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e006      	b.n	8007276 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
  }
}
 8007276:	4618      	mov	r0, r3
 8007278:	3724      	adds	r7, #36	; 0x24
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007282:	b480      	push	{r7}
 8007284:	b087      	sub	sp, #28
 8007286:	af00      	add	r7, sp, #0
 8007288:	60f8      	str	r0, [r7, #12]
 800728a:	60b9      	str	r1, [r7, #8]
 800728c:	607a      	str	r2, [r7, #4]
 800728e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007296:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007298:	7dfb      	ldrb	r3, [r7, #23]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d003      	beq.n	80072a6 <HAL_CAN_GetRxMessage+0x24>
 800729e:	7dfb      	ldrb	r3, [r7, #23]
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	f040 80f4 	bne.w	800748e <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10e      	bne.n	80072ca <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f003 0303 	and.w	r3, r3, #3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d116      	bne.n	80072e8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e0e8      	b.n	800749c <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	f003 0303 	and.w	r3, r3, #3
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d107      	bne.n	80072e8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e0d9      	b.n	800749c <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	331b      	adds	r3, #27
 80072f0:	011b      	lsls	r3, r3, #4
 80072f2:	4413      	add	r3, r2
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0204 	and.w	r2, r3, #4
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d10c      	bne.n	8007320 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	331b      	adds	r3, #27
 800730e:	011b      	lsls	r3, r3, #4
 8007310:	4413      	add	r3, r2
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	0d5b      	lsrs	r3, r3, #21
 8007316:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	e00b      	b.n	8007338 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	331b      	adds	r3, #27
 8007328:	011b      	lsls	r3, r3, #4
 800732a:	4413      	add	r3, r2
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	08db      	lsrs	r3, r3, #3
 8007330:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	331b      	adds	r3, #27
 8007340:	011b      	lsls	r3, r3, #4
 8007342:	4413      	add	r3, r2
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	085b      	lsrs	r3, r3, #1
 8007348:	f003 0201 	and.w	r2, r3, #1
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	331b      	adds	r3, #27
 8007358:	011b      	lsls	r3, r3, #4
 800735a:	4413      	add	r3, r2
 800735c:	3304      	adds	r3, #4
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 020f 	and.w	r2, r3, #15
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	331b      	adds	r3, #27
 8007370:	011b      	lsls	r3, r3, #4
 8007372:	4413      	add	r3, r2
 8007374:	3304      	adds	r3, #4
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	0a1b      	lsrs	r3, r3, #8
 800737a:	b2da      	uxtb	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	331b      	adds	r3, #27
 8007388:	011b      	lsls	r3, r3, #4
 800738a:	4413      	add	r3, r2
 800738c:	3304      	adds	r3, #4
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	0c1b      	lsrs	r3, r3, #16
 8007392:	b29a      	uxth	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	011b      	lsls	r3, r3, #4
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	011b      	lsls	r3, r3, #4
 80073b6:	4413      	add	r3, r2
 80073b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	0a1a      	lsrs	r2, r3, #8
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	3301      	adds	r3, #1
 80073c4:	b2d2      	uxtb	r2, r2
 80073c6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	011b      	lsls	r3, r3, #4
 80073d0:	4413      	add	r3, r2
 80073d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	0c1a      	lsrs	r2, r3, #16
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	3302      	adds	r3, #2
 80073de:	b2d2      	uxtb	r2, r2
 80073e0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	011b      	lsls	r3, r3, #4
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	0e1a      	lsrs	r2, r3, #24
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	3303      	adds	r3, #3
 80073f8:	b2d2      	uxtb	r2, r2
 80073fa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	011b      	lsls	r3, r3, #4
 8007404:	4413      	add	r3, r2
 8007406:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	3304      	adds	r3, #4
 8007410:	b2d2      	uxtb	r2, r2
 8007412:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	011b      	lsls	r3, r3, #4
 800741c:	4413      	add	r3, r2
 800741e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	0a1a      	lsrs	r2, r3, #8
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	3305      	adds	r3, #5
 800742a:	b2d2      	uxtb	r2, r2
 800742c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	011b      	lsls	r3, r3, #4
 8007436:	4413      	add	r3, r2
 8007438:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	0c1a      	lsrs	r2, r3, #16
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	3306      	adds	r3, #6
 8007444:	b2d2      	uxtb	r2, r2
 8007446:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	011b      	lsls	r3, r3, #4
 8007450:	4413      	add	r3, r2
 8007452:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	0e1a      	lsrs	r2, r3, #24
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	3307      	adds	r3, #7
 800745e:	b2d2      	uxtb	r2, r2
 8007460:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d108      	bne.n	800747a <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68da      	ldr	r2, [r3, #12]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f042 0220 	orr.w	r2, r2, #32
 8007476:	60da      	str	r2, [r3, #12]
 8007478:	e007      	b.n	800748a <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	691a      	ldr	r2, [r3, #16]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f042 0220 	orr.w	r2, r2, #32
 8007488:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800748a:	2300      	movs	r3, #0
 800748c:	e006      	b.n	800749c <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007492:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
  }
}
 800749c:	4618      	mov	r0, r3
 800749e:	371c      	adds	r7, #28
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80074b8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d002      	beq.n	80074c6 <HAL_CAN_ActivateNotification+0x1e>
 80074c0:	7bfb      	ldrb	r3, [r7, #15]
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d109      	bne.n	80074da <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6959      	ldr	r1, [r3, #20]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	e006      	b.n	80074e8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
  }
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b08a      	sub	sp, #40	; 0x28
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80074fc:	2300      	movs	r3, #0
 80074fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	2b00      	cmp	r3, #0
 8007538:	d07c      	beq.n	8007634 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	f003 0301 	and.w	r3, r3, #1
 8007540:	2b00      	cmp	r3, #0
 8007542:	d023      	beq.n	800758c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2201      	movs	r2, #1
 800754a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	f003 0302 	and.w	r3, r3, #2
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7fb f836 	bl	80025c8 <HAL_CAN_TxMailbox0CompleteCallback>
 800755c:	e016      	b.n	800758c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b00      	cmp	r3, #0
 8007566:	d004      	beq.n	8007572 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800756e:	627b      	str	r3, [r7, #36]	; 0x24
 8007570:	e00c      	b.n	800758c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	f003 0308 	and.w	r3, r3, #8
 8007578:	2b00      	cmp	r3, #0
 800757a:	d004      	beq.n	8007586 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007582:	627b      	str	r3, [r7, #36]	; 0x24
 8007584:	e002      	b.n	800758c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7fb f82a 	bl	80025e0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007592:	2b00      	cmp	r3, #0
 8007594:	d024      	beq.n	80075e0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800759e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d003      	beq.n	80075b2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7fb f824 	bl	80025f8 <HAL_CAN_TxMailbox1CompleteCallback>
 80075b0:	e016      	b.n	80075e0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d004      	beq.n	80075c6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80075bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80075c2:	627b      	str	r3, [r7, #36]	; 0x24
 80075c4:	e00c      	b.n	80075e0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d004      	beq.n	80075da <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80075d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075d6:	627b      	str	r3, [r7, #36]	; 0x24
 80075d8:	e002      	b.n	80075e0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7fb f818 	bl	8002610 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d024      	beq.n	8007634 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80075f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d003      	beq.n	8007606 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7fb f812 	bl	8002628 <HAL_CAN_TxMailbox2CompleteCallback>
 8007604:	e016      	b.n	8007634 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d004      	beq.n	800761a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007616:	627b      	str	r3, [r7, #36]	; 0x24
 8007618:	e00c      	b.n	8007634 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d004      	beq.n	800762e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800762a:	627b      	str	r3, [r7, #36]	; 0x24
 800762c:	e002      	b.n	8007634 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7fb f806 	bl	8002640 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	f003 0308 	and.w	r3, r3, #8
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00c      	beq.n	8007658 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f003 0310 	and.w	r3, r3, #16
 8007644:	2b00      	cmp	r3, #0
 8007646:	d007      	beq.n	8007658 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800764e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2210      	movs	r2, #16
 8007656:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007658:	6a3b      	ldr	r3, [r7, #32]
 800765a:	f003 0304 	and.w	r3, r3, #4
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00b      	beq.n	800767a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f003 0308 	and.w	r3, r3, #8
 8007668:	2b00      	cmp	r3, #0
 800766a:	d006      	beq.n	800767a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2208      	movs	r2, #8
 8007672:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f8f4 	bl	8007862 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800767a:	6a3b      	ldr	r3, [r7, #32]
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b00      	cmp	r3, #0
 8007682:	d009      	beq.n	8007698 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	f003 0303 	and.w	r3, r3, #3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d002      	beq.n	8007698 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7fb f8c7 	bl	8002826 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007698:	6a3b      	ldr	r3, [r7, #32]
 800769a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00c      	beq.n	80076bc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	f003 0310 	and.w	r3, r3, #16
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d007      	beq.n	80076bc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80076b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2210      	movs	r2, #16
 80076ba:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	f003 0320 	and.w	r3, r3, #32
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00b      	beq.n	80076de <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	f003 0308 	and.w	r3, r3, #8
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d006      	beq.n	80076de <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2208      	movs	r2, #8
 80076d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f8cc 	bl	8007876 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	f003 0310 	and.w	r3, r3, #16
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d009      	beq.n	80076fc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	f003 0303 	and.w	r3, r3, #3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f7fb f8a1 	bl	800283e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00b      	beq.n	800771e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	f003 0310 	and.w	r3, r3, #16
 800770c:	2b00      	cmp	r3, #0
 800770e:	d006      	beq.n	800771e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2210      	movs	r2, #16
 8007716:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f8b6 	bl	800788a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00b      	beq.n	8007740 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	f003 0308 	and.w	r3, r3, #8
 800772e:	2b00      	cmp	r3, #0
 8007730:	d006      	beq.n	8007740 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2208      	movs	r2, #8
 8007738:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f8af 	bl	800789e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d07b      	beq.n	8007842 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	f003 0304 	and.w	r3, r3, #4
 8007750:	2b00      	cmp	r3, #0
 8007752:	d072      	beq.n	800783a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800775a:	2b00      	cmp	r3, #0
 800775c:	d008      	beq.n	8007770 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007764:	2b00      	cmp	r3, #0
 8007766:	d003      	beq.n	8007770 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	f043 0301 	orr.w	r3, r3, #1
 800776e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007776:	2b00      	cmp	r3, #0
 8007778:	d008      	beq.n	800778c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007780:	2b00      	cmp	r3, #0
 8007782:	d003      	beq.n	800778c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	f043 0302 	orr.w	r3, r3, #2
 800778a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800778c:	6a3b      	ldr	r3, [r7, #32]
 800778e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007792:	2b00      	cmp	r3, #0
 8007794:	d008      	beq.n	80077a8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800779c:	2b00      	cmp	r3, #0
 800779e:	d003      	beq.n	80077a8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	f043 0304 	orr.w	r3, r3, #4
 80077a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80077a8:	6a3b      	ldr	r3, [r7, #32]
 80077aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d043      	beq.n	800783a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d03e      	beq.n	800783a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077c2:	2b60      	cmp	r3, #96	; 0x60
 80077c4:	d02b      	beq.n	800781e <HAL_CAN_IRQHandler+0x32a>
 80077c6:	2b60      	cmp	r3, #96	; 0x60
 80077c8:	d82e      	bhi.n	8007828 <HAL_CAN_IRQHandler+0x334>
 80077ca:	2b50      	cmp	r3, #80	; 0x50
 80077cc:	d022      	beq.n	8007814 <HAL_CAN_IRQHandler+0x320>
 80077ce:	2b50      	cmp	r3, #80	; 0x50
 80077d0:	d82a      	bhi.n	8007828 <HAL_CAN_IRQHandler+0x334>
 80077d2:	2b40      	cmp	r3, #64	; 0x40
 80077d4:	d019      	beq.n	800780a <HAL_CAN_IRQHandler+0x316>
 80077d6:	2b40      	cmp	r3, #64	; 0x40
 80077d8:	d826      	bhi.n	8007828 <HAL_CAN_IRQHandler+0x334>
 80077da:	2b30      	cmp	r3, #48	; 0x30
 80077dc:	d010      	beq.n	8007800 <HAL_CAN_IRQHandler+0x30c>
 80077de:	2b30      	cmp	r3, #48	; 0x30
 80077e0:	d822      	bhi.n	8007828 <HAL_CAN_IRQHandler+0x334>
 80077e2:	2b10      	cmp	r3, #16
 80077e4:	d002      	beq.n	80077ec <HAL_CAN_IRQHandler+0x2f8>
 80077e6:	2b20      	cmp	r3, #32
 80077e8:	d005      	beq.n	80077f6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80077ea:	e01d      	b.n	8007828 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80077ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ee:	f043 0308 	orr.w	r3, r3, #8
 80077f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80077f4:	e019      	b.n	800782a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	f043 0310 	orr.w	r3, r3, #16
 80077fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80077fe:	e014      	b.n	800782a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	f043 0320 	orr.w	r3, r3, #32
 8007806:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007808:	e00f      	b.n	800782a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007810:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007812:	e00a      	b.n	800782a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800781c:	e005      	b.n	800782a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007824:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007826:	e000      	b.n	800782a <HAL_CAN_IRQHandler+0x336>
            break;
 8007828:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	699a      	ldr	r2, [r3, #24]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007838:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2204      	movs	r2, #4
 8007840:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007844:	2b00      	cmp	r3, #0
 8007846:	d008      	beq.n	800785a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	431a      	orrs	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f7fa feff 	bl	8002658 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800785a:	bf00      	nop
 800785c:	3728      	adds	r7, #40	; 0x28
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007862:	b480      	push	{r7}
 8007864:	b083      	sub	sp, #12
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800786a:	bf00      	nop
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800787e:	bf00      	nop
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800788a:	b480      	push	{r7}
 800788c:	b083      	sub	sp, #12
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007892:	bf00      	nop
 8007894:	370c      	adds	r7, #12
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr

0800789e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800789e:	b480      	push	{r7}
 80078a0:	b083      	sub	sp, #12
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80078a6:	bf00      	nop
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
	...

080078b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f003 0307 	and.w	r3, r3, #7
 80078c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078c4:	4b0c      	ldr	r3, [pc, #48]	; (80078f8 <__NVIC_SetPriorityGrouping+0x44>)
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80078d0:	4013      	ands	r3, r2
 80078d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80078dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80078e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80078e6:	4a04      	ldr	r2, [pc, #16]	; (80078f8 <__NVIC_SetPriorityGrouping+0x44>)
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	60d3      	str	r3, [r2, #12]
}
 80078ec:	bf00      	nop
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr
 80078f8:	e000ed00 	.word	0xe000ed00

080078fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80078fc:	b480      	push	{r7}
 80078fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007900:	4b04      	ldr	r3, [pc, #16]	; (8007914 <__NVIC_GetPriorityGrouping+0x18>)
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	0a1b      	lsrs	r3, r3, #8
 8007906:	f003 0307 	and.w	r3, r3, #7
}
 800790a:	4618      	mov	r0, r3
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr
 8007914:	e000ed00 	.word	0xe000ed00

08007918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	4603      	mov	r3, r0
 8007920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007926:	2b00      	cmp	r3, #0
 8007928:	db0b      	blt.n	8007942 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800792a:	79fb      	ldrb	r3, [r7, #7]
 800792c:	f003 021f 	and.w	r2, r3, #31
 8007930:	4907      	ldr	r1, [pc, #28]	; (8007950 <__NVIC_EnableIRQ+0x38>)
 8007932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007936:	095b      	lsrs	r3, r3, #5
 8007938:	2001      	movs	r0, #1
 800793a:	fa00 f202 	lsl.w	r2, r0, r2
 800793e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007942:	bf00      	nop
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	e000e100 	.word	0xe000e100

08007954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	4603      	mov	r3, r0
 800795c:	6039      	str	r1, [r7, #0]
 800795e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007964:	2b00      	cmp	r3, #0
 8007966:	db0a      	blt.n	800797e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	b2da      	uxtb	r2, r3
 800796c:	490c      	ldr	r1, [pc, #48]	; (80079a0 <__NVIC_SetPriority+0x4c>)
 800796e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007972:	0112      	lsls	r2, r2, #4
 8007974:	b2d2      	uxtb	r2, r2
 8007976:	440b      	add	r3, r1
 8007978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800797c:	e00a      	b.n	8007994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	b2da      	uxtb	r2, r3
 8007982:	4908      	ldr	r1, [pc, #32]	; (80079a4 <__NVIC_SetPriority+0x50>)
 8007984:	79fb      	ldrb	r3, [r7, #7]
 8007986:	f003 030f 	and.w	r3, r3, #15
 800798a:	3b04      	subs	r3, #4
 800798c:	0112      	lsls	r2, r2, #4
 800798e:	b2d2      	uxtb	r2, r2
 8007990:	440b      	add	r3, r1
 8007992:	761a      	strb	r2, [r3, #24]
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	e000e100 	.word	0xe000e100
 80079a4:	e000ed00 	.word	0xe000ed00

080079a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b089      	sub	sp, #36	; 0x24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f003 0307 	and.w	r3, r3, #7
 80079ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	f1c3 0307 	rsb	r3, r3, #7
 80079c2:	2b04      	cmp	r3, #4
 80079c4:	bf28      	it	cs
 80079c6:	2304      	movcs	r3, #4
 80079c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	3304      	adds	r3, #4
 80079ce:	2b06      	cmp	r3, #6
 80079d0:	d902      	bls.n	80079d8 <NVIC_EncodePriority+0x30>
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	3b03      	subs	r3, #3
 80079d6:	e000      	b.n	80079da <NVIC_EncodePriority+0x32>
 80079d8:	2300      	movs	r3, #0
 80079da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079dc:	f04f 32ff 	mov.w	r2, #4294967295
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	fa02 f303 	lsl.w	r3, r2, r3
 80079e6:	43da      	mvns	r2, r3
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	401a      	ands	r2, r3
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80079f0:	f04f 31ff 	mov.w	r1, #4294967295
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	fa01 f303 	lsl.w	r3, r1, r3
 80079fa:	43d9      	mvns	r1, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a00:	4313      	orrs	r3, r2
         );
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3724      	adds	r7, #36	; 0x24
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
	...

08007a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a20:	d301      	bcc.n	8007a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007a22:	2301      	movs	r3, #1
 8007a24:	e00f      	b.n	8007a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a26:	4a0a      	ldr	r2, [pc, #40]	; (8007a50 <SysTick_Config+0x40>)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007a2e:	210f      	movs	r1, #15
 8007a30:	f04f 30ff 	mov.w	r0, #4294967295
 8007a34:	f7ff ff8e 	bl	8007954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a38:	4b05      	ldr	r3, [pc, #20]	; (8007a50 <SysTick_Config+0x40>)
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a3e:	4b04      	ldr	r3, [pc, #16]	; (8007a50 <SysTick_Config+0x40>)
 8007a40:	2207      	movs	r2, #7
 8007a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	e000e010 	.word	0xe000e010

08007a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f7ff ff29 	bl	80078b4 <__NVIC_SetPriorityGrouping>
}
 8007a62:	bf00      	nop
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b086      	sub	sp, #24
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	4603      	mov	r3, r0
 8007a72:	60b9      	str	r1, [r7, #8]
 8007a74:	607a      	str	r2, [r7, #4]
 8007a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007a7c:	f7ff ff3e 	bl	80078fc <__NVIC_GetPriorityGrouping>
 8007a80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	68b9      	ldr	r1, [r7, #8]
 8007a86:	6978      	ldr	r0, [r7, #20]
 8007a88:	f7ff ff8e 	bl	80079a8 <NVIC_EncodePriority>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a92:	4611      	mov	r1, r2
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7ff ff5d 	bl	8007954 <__NVIC_SetPriority>
}
 8007a9a:	bf00      	nop
 8007a9c:	3718      	adds	r7, #24
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b082      	sub	sp, #8
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7ff ff31 	bl	8007918 <__NVIC_EnableIRQ>
}
 8007ab6:	bf00      	nop
 8007ab8:	3708      	adds	r7, #8
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b082      	sub	sp, #8
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7ff ffa2 	bl	8007a10 <SysTick_Config>
 8007acc:	4603      	mov	r3, r0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
	...

08007ad8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007ae4:	f7fe fcfc 	bl	80064e0 <HAL_GetTick>
 8007ae8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d101      	bne.n	8007af4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e099      	b.n	8007c28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2202      	movs	r2, #2
 8007b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f022 0201 	bic.w	r2, r2, #1
 8007b12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b14:	e00f      	b.n	8007b36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007b16:	f7fe fce3 	bl	80064e0 <HAL_GetTick>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	2b05      	cmp	r3, #5
 8007b22:	d908      	bls.n	8007b36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2220      	movs	r2, #32
 8007b28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2203      	movs	r2, #3
 8007b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e078      	b.n	8007c28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1e8      	bne.n	8007b16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	4b38      	ldr	r3, [pc, #224]	; (8007c30 <HAL_DMA_Init+0x158>)
 8007b50:	4013      	ands	r3, r2
 8007b52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a1b      	ldr	r3, [r3, #32]
 8007b80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8c:	2b04      	cmp	r3, #4
 8007b8e:	d107      	bne.n	8007ba0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	f023 0307 	bic.w	r3, r3, #7
 8007bb6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	2b04      	cmp	r3, #4
 8007bc8:	d117      	bne.n	8007bfa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00e      	beq.n	8007bfa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fab3 	bl	8008148 <DMA_CheckFifoParam>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d008      	beq.n	8007bfa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2240      	movs	r2, #64	; 0x40
 8007bec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e016      	b.n	8007c28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fa6a 	bl	80080dc <DMA_CalcBaseAndBitshift>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c10:	223f      	movs	r2, #63	; 0x3f
 8007c12:	409a      	lsls	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3718      	adds	r7, #24
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	e010803f 	.word	0xe010803f

08007c34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
 8007c40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d101      	bne.n	8007c5a <HAL_DMA_Start_IT+0x26>
 8007c56:	2302      	movs	r3, #2
 8007c58:	e048      	b.n	8007cec <HAL_DMA_Start_IT+0xb8>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d137      	bne.n	8007cde <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2202      	movs	r2, #2
 8007c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	68b9      	ldr	r1, [r7, #8]
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f000 f9fc 	bl	8008080 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c8c:	223f      	movs	r2, #63	; 0x3f
 8007c8e:	409a      	lsls	r2, r3
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f042 0216 	orr.w	r2, r2, #22
 8007ca2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	695a      	ldr	r2, [r3, #20]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007cb2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d007      	beq.n	8007ccc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f042 0208 	orr.w	r2, r2, #8
 8007cca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f042 0201 	orr.w	r2, r2, #1
 8007cda:	601a      	str	r2, [r3, #0]
 8007cdc:	e005      	b.n	8007cea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007ce6:	2302      	movs	r3, #2
 8007ce8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3718      	adds	r7, #24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d004      	beq.n	8007d12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2280      	movs	r2, #128	; 0x80
 8007d0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e00c      	b.n	8007d2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2205      	movs	r2, #5
 8007d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f022 0201 	bic.w	r2, r2, #1
 8007d28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007d40:	2300      	movs	r3, #0
 8007d42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007d44:	4b8e      	ldr	r3, [pc, #568]	; (8007f80 <HAL_DMA_IRQHandler+0x248>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a8e      	ldr	r2, [pc, #568]	; (8007f84 <HAL_DMA_IRQHandler+0x24c>)
 8007d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d4e:	0a9b      	lsrs	r3, r3, #10
 8007d50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d62:	2208      	movs	r2, #8
 8007d64:	409a      	lsls	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	4013      	ands	r3, r2
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d01a      	beq.n	8007da4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0304 	and.w	r3, r3, #4
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d013      	beq.n	8007da4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f022 0204 	bic.w	r2, r2, #4
 8007d8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d90:	2208      	movs	r2, #8
 8007d92:	409a      	lsls	r2, r3
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d9c:	f043 0201 	orr.w	r2, r3, #1
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007da8:	2201      	movs	r2, #1
 8007daa:	409a      	lsls	r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	4013      	ands	r3, r2
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d012      	beq.n	8007dda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00b      	beq.n	8007dda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	409a      	lsls	r2, r3
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd2:	f043 0202 	orr.w	r2, r3, #2
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dde:	2204      	movs	r2, #4
 8007de0:	409a      	lsls	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	4013      	ands	r3, r2
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d012      	beq.n	8007e10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0302 	and.w	r3, r3, #2
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00b      	beq.n	8007e10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dfc:	2204      	movs	r2, #4
 8007dfe:	409a      	lsls	r2, r3
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e08:	f043 0204 	orr.w	r2, r3, #4
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e14:	2210      	movs	r2, #16
 8007e16:	409a      	lsls	r2, r3
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d043      	beq.n	8007ea8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 0308 	and.w	r3, r3, #8
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d03c      	beq.n	8007ea8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e32:	2210      	movs	r2, #16
 8007e34:	409a      	lsls	r2, r3
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d018      	beq.n	8007e7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d108      	bne.n	8007e68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d024      	beq.n	8007ea8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	4798      	blx	r3
 8007e66:	e01f      	b.n	8007ea8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d01b      	beq.n	8007ea8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	4798      	blx	r3
 8007e78:	e016      	b.n	8007ea8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d107      	bne.n	8007e98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f022 0208 	bic.w	r2, r2, #8
 8007e96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d003      	beq.n	8007ea8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eac:	2220      	movs	r2, #32
 8007eae:	409a      	lsls	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 808f 	beq.w	8007fd8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0310 	and.w	r3, r3, #16
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 8087 	beq.w	8007fd8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ece:	2220      	movs	r2, #32
 8007ed0:	409a      	lsls	r2, r3
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b05      	cmp	r3, #5
 8007ee0:	d136      	bne.n	8007f50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f022 0216 	bic.w	r2, r2, #22
 8007ef0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	695a      	ldr	r2, [r3, #20]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d103      	bne.n	8007f12 <HAL_DMA_IRQHandler+0x1da>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d007      	beq.n	8007f22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f022 0208 	bic.w	r2, r2, #8
 8007f20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f26:	223f      	movs	r2, #63	; 0x3f
 8007f28:	409a      	lsls	r2, r3
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d07e      	beq.n	8008044 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	4798      	blx	r3
        }
        return;
 8007f4e:	e079      	b.n	8008044 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d01d      	beq.n	8007f9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10d      	bne.n	8007f88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d031      	beq.n	8007fd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	4798      	blx	r3
 8007f7c:	e02c      	b.n	8007fd8 <HAL_DMA_IRQHandler+0x2a0>
 8007f7e:	bf00      	nop
 8007f80:	200001ac 	.word	0x200001ac
 8007f84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d023      	beq.n	8007fd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	4798      	blx	r3
 8007f98:	e01e      	b.n	8007fd8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10f      	bne.n	8007fc8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f022 0210 	bic.w	r2, r2, #16
 8007fb6:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d003      	beq.n	8007fd8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d032      	beq.n	8008046 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe4:	f003 0301 	and.w	r3, r3, #1
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d022      	beq.n	8008032 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2205      	movs	r2, #5
 8007ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f022 0201 	bic.w	r2, r2, #1
 8008002:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	3301      	adds	r3, #1
 8008008:	60bb      	str	r3, [r7, #8]
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	429a      	cmp	r2, r3
 800800e:	d307      	bcc.n	8008020 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1f2      	bne.n	8008004 <HAL_DMA_IRQHandler+0x2cc>
 800801e:	e000      	b.n	8008022 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008020:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008036:	2b00      	cmp	r3, #0
 8008038:	d005      	beq.n	8008046 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	4798      	blx	r3
 8008042:	e000      	b.n	8008046 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008044:	bf00      	nop
    }
  }
}
 8008046:	3718      	adds	r7, #24
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800805a:	b2db      	uxtb	r3, r3
}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008074:	4618      	mov	r0, r3
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
 800808c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800809c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	683a      	ldr	r2, [r7, #0]
 80080a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	2b40      	cmp	r3, #64	; 0x40
 80080ac:	d108      	bne.n	80080c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80080be:	e007      	b.n	80080d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	60da      	str	r2, [r3, #12]
}
 80080d0:	bf00      	nop
 80080d2:	3714      	adds	r7, #20
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	3b10      	subs	r3, #16
 80080ec:	4a14      	ldr	r2, [pc, #80]	; (8008140 <DMA_CalcBaseAndBitshift+0x64>)
 80080ee:	fba2 2303 	umull	r2, r3, r2, r3
 80080f2:	091b      	lsrs	r3, r3, #4
 80080f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80080f6:	4a13      	ldr	r2, [pc, #76]	; (8008144 <DMA_CalcBaseAndBitshift+0x68>)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4413      	add	r3, r2
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	461a      	mov	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2b03      	cmp	r3, #3
 8008108:	d909      	bls.n	800811e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008112:	f023 0303 	bic.w	r3, r3, #3
 8008116:	1d1a      	adds	r2, r3, #4
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	659a      	str	r2, [r3, #88]	; 0x58
 800811c:	e007      	b.n	800812e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008126:	f023 0303 	bic.w	r3, r3, #3
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008132:	4618      	mov	r0, r3
 8008134:	3714      	adds	r7, #20
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	aaaaaaab 	.word	0xaaaaaaab
 8008144:	0800d6a8 	.word	0x0800d6a8

08008148 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008150:	2300      	movs	r3, #0
 8008152:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008158:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d11f      	bne.n	80081a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	2b03      	cmp	r3, #3
 8008166:	d856      	bhi.n	8008216 <DMA_CheckFifoParam+0xce>
 8008168:	a201      	add	r2, pc, #4	; (adr r2, 8008170 <DMA_CheckFifoParam+0x28>)
 800816a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816e:	bf00      	nop
 8008170:	08008181 	.word	0x08008181
 8008174:	08008193 	.word	0x08008193
 8008178:	08008181 	.word	0x08008181
 800817c:	08008217 	.word	0x08008217
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d046      	beq.n	800821a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008190:	e043      	b.n	800821a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008196:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800819a:	d140      	bne.n	800821e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081a0:	e03d      	b.n	800821e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081aa:	d121      	bne.n	80081f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2b03      	cmp	r3, #3
 80081b0:	d837      	bhi.n	8008222 <DMA_CheckFifoParam+0xda>
 80081b2:	a201      	add	r2, pc, #4	; (adr r2, 80081b8 <DMA_CheckFifoParam+0x70>)
 80081b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b8:	080081c9 	.word	0x080081c9
 80081bc:	080081cf 	.word	0x080081cf
 80081c0:	080081c9 	.word	0x080081c9
 80081c4:	080081e1 	.word	0x080081e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	73fb      	strb	r3, [r7, #15]
      break;
 80081cc:	e030      	b.n	8008230 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d025      	beq.n	8008226 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081de:	e022      	b.n	8008226 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80081e8:	d11f      	bne.n	800822a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80081ee:	e01c      	b.n	800822a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d903      	bls.n	80081fe <DMA_CheckFifoParam+0xb6>
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2b03      	cmp	r3, #3
 80081fa:	d003      	beq.n	8008204 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80081fc:	e018      	b.n	8008230 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	73fb      	strb	r3, [r7, #15]
      break;
 8008202:	e015      	b.n	8008230 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00e      	beq.n	800822e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	73fb      	strb	r3, [r7, #15]
      break;
 8008214:	e00b      	b.n	800822e <DMA_CheckFifoParam+0xe6>
      break;
 8008216:	bf00      	nop
 8008218:	e00a      	b.n	8008230 <DMA_CheckFifoParam+0xe8>
      break;
 800821a:	bf00      	nop
 800821c:	e008      	b.n	8008230 <DMA_CheckFifoParam+0xe8>
      break;
 800821e:	bf00      	nop
 8008220:	e006      	b.n	8008230 <DMA_CheckFifoParam+0xe8>
      break;
 8008222:	bf00      	nop
 8008224:	e004      	b.n	8008230 <DMA_CheckFifoParam+0xe8>
      break;
 8008226:	bf00      	nop
 8008228:	e002      	b.n	8008230 <DMA_CheckFifoParam+0xe8>
      break;   
 800822a:	bf00      	nop
 800822c:	e000      	b.n	8008230 <DMA_CheckFifoParam+0xe8>
      break;
 800822e:	bf00      	nop
    }
  } 
  
  return status; 
 8008230:	7bfb      	ldrb	r3, [r7, #15]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop

08008240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008240:	b480      	push	{r7}
 8008242:	b089      	sub	sp, #36	; 0x24
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800824a:	2300      	movs	r3, #0
 800824c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800824e:	2300      	movs	r3, #0
 8008250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008252:	2300      	movs	r3, #0
 8008254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008256:	2300      	movs	r3, #0
 8008258:	61fb      	str	r3, [r7, #28]
 800825a:	e165      	b.n	8008528 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800825c:	2201      	movs	r2, #1
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	fa02 f303 	lsl.w	r3, r2, r3
 8008264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	4013      	ands	r3, r2
 800826e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	429a      	cmp	r2, r3
 8008276:	f040 8154 	bne.w	8008522 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	2b02      	cmp	r3, #2
 8008280:	d003      	beq.n	800828a <HAL_GPIO_Init+0x4a>
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	2b12      	cmp	r3, #18
 8008288:	d123      	bne.n	80082d2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	08da      	lsrs	r2, r3, #3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	3208      	adds	r2, #8
 8008292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	f003 0307 	and.w	r3, r3, #7
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	220f      	movs	r2, #15
 80082a2:	fa02 f303 	lsl.w	r3, r2, r3
 80082a6:	43db      	mvns	r3, r3
 80082a8:	69ba      	ldr	r2, [r7, #24]
 80082aa:	4013      	ands	r3, r2
 80082ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	691a      	ldr	r2, [r3, #16]
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	f003 0307 	and.w	r3, r3, #7
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	fa02 f303 	lsl.w	r3, r2, r3
 80082be:	69ba      	ldr	r2, [r7, #24]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	08da      	lsrs	r2, r3, #3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	3208      	adds	r2, #8
 80082cc:	69b9      	ldr	r1, [r7, #24]
 80082ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	005b      	lsls	r3, r3, #1
 80082dc:	2203      	movs	r2, #3
 80082de:	fa02 f303 	lsl.w	r3, r2, r3
 80082e2:	43db      	mvns	r3, r3
 80082e4:	69ba      	ldr	r2, [r7, #24]
 80082e6:	4013      	ands	r3, r2
 80082e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	f003 0203 	and.w	r2, r3, #3
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	005b      	lsls	r3, r3, #1
 80082f6:	fa02 f303 	lsl.w	r3, r2, r3
 80082fa:	69ba      	ldr	r2, [r7, #24]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	69ba      	ldr	r2, [r7, #24]
 8008304:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d00b      	beq.n	8008326 <HAL_GPIO_Init+0xe6>
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	2b02      	cmp	r3, #2
 8008314:	d007      	beq.n	8008326 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800831a:	2b11      	cmp	r3, #17
 800831c:	d003      	beq.n	8008326 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	2b12      	cmp	r3, #18
 8008324:	d130      	bne.n	8008388 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	005b      	lsls	r3, r3, #1
 8008330:	2203      	movs	r2, #3
 8008332:	fa02 f303 	lsl.w	r3, r2, r3
 8008336:	43db      	mvns	r3, r3
 8008338:	69ba      	ldr	r2, [r7, #24]
 800833a:	4013      	ands	r3, r2
 800833c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	68da      	ldr	r2, [r3, #12]
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	005b      	lsls	r3, r3, #1
 8008346:	fa02 f303 	lsl.w	r3, r2, r3
 800834a:	69ba      	ldr	r2, [r7, #24]
 800834c:	4313      	orrs	r3, r2
 800834e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	69ba      	ldr	r2, [r7, #24]
 8008354:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800835c:	2201      	movs	r2, #1
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	fa02 f303 	lsl.w	r3, r2, r3
 8008364:	43db      	mvns	r3, r3
 8008366:	69ba      	ldr	r2, [r7, #24]
 8008368:	4013      	ands	r3, r2
 800836a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	091b      	lsrs	r3, r3, #4
 8008372:	f003 0201 	and.w	r2, r3, #1
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	fa02 f303 	lsl.w	r3, r2, r3
 800837c:	69ba      	ldr	r2, [r7, #24]
 800837e:	4313      	orrs	r3, r2
 8008380:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	69ba      	ldr	r2, [r7, #24]
 8008386:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	005b      	lsls	r3, r3, #1
 8008392:	2203      	movs	r2, #3
 8008394:	fa02 f303 	lsl.w	r3, r2, r3
 8008398:	43db      	mvns	r3, r3
 800839a:	69ba      	ldr	r2, [r7, #24]
 800839c:	4013      	ands	r3, r2
 800839e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	689a      	ldr	r2, [r3, #8]
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	005b      	lsls	r3, r3, #1
 80083a8:	fa02 f303 	lsl.w	r3, r2, r3
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	69ba      	ldr	r2, [r7, #24]
 80083b6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 80ae 	beq.w	8008522 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083c6:	2300      	movs	r3, #0
 80083c8:	60fb      	str	r3, [r7, #12]
 80083ca:	4b5d      	ldr	r3, [pc, #372]	; (8008540 <HAL_GPIO_Init+0x300>)
 80083cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ce:	4a5c      	ldr	r2, [pc, #368]	; (8008540 <HAL_GPIO_Init+0x300>)
 80083d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083d4:	6453      	str	r3, [r2, #68]	; 0x44
 80083d6:	4b5a      	ldr	r3, [pc, #360]	; (8008540 <HAL_GPIO_Init+0x300>)
 80083d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083de:	60fb      	str	r3, [r7, #12]
 80083e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80083e2:	4a58      	ldr	r2, [pc, #352]	; (8008544 <HAL_GPIO_Init+0x304>)
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	089b      	lsrs	r3, r3, #2
 80083e8:	3302      	adds	r3, #2
 80083ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	f003 0303 	and.w	r3, r3, #3
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	220f      	movs	r2, #15
 80083fa:	fa02 f303 	lsl.w	r3, r2, r3
 80083fe:	43db      	mvns	r3, r3
 8008400:	69ba      	ldr	r2, [r7, #24]
 8008402:	4013      	ands	r3, r2
 8008404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a4f      	ldr	r2, [pc, #316]	; (8008548 <HAL_GPIO_Init+0x308>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d025      	beq.n	800845a <HAL_GPIO_Init+0x21a>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a4e      	ldr	r2, [pc, #312]	; (800854c <HAL_GPIO_Init+0x30c>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d01f      	beq.n	8008456 <HAL_GPIO_Init+0x216>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a4d      	ldr	r2, [pc, #308]	; (8008550 <HAL_GPIO_Init+0x310>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d019      	beq.n	8008452 <HAL_GPIO_Init+0x212>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a4c      	ldr	r2, [pc, #304]	; (8008554 <HAL_GPIO_Init+0x314>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d013      	beq.n	800844e <HAL_GPIO_Init+0x20e>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a4b      	ldr	r2, [pc, #300]	; (8008558 <HAL_GPIO_Init+0x318>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d00d      	beq.n	800844a <HAL_GPIO_Init+0x20a>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a4a      	ldr	r2, [pc, #296]	; (800855c <HAL_GPIO_Init+0x31c>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d007      	beq.n	8008446 <HAL_GPIO_Init+0x206>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a49      	ldr	r2, [pc, #292]	; (8008560 <HAL_GPIO_Init+0x320>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d101      	bne.n	8008442 <HAL_GPIO_Init+0x202>
 800843e:	2306      	movs	r3, #6
 8008440:	e00c      	b.n	800845c <HAL_GPIO_Init+0x21c>
 8008442:	2307      	movs	r3, #7
 8008444:	e00a      	b.n	800845c <HAL_GPIO_Init+0x21c>
 8008446:	2305      	movs	r3, #5
 8008448:	e008      	b.n	800845c <HAL_GPIO_Init+0x21c>
 800844a:	2304      	movs	r3, #4
 800844c:	e006      	b.n	800845c <HAL_GPIO_Init+0x21c>
 800844e:	2303      	movs	r3, #3
 8008450:	e004      	b.n	800845c <HAL_GPIO_Init+0x21c>
 8008452:	2302      	movs	r3, #2
 8008454:	e002      	b.n	800845c <HAL_GPIO_Init+0x21c>
 8008456:	2301      	movs	r3, #1
 8008458:	e000      	b.n	800845c <HAL_GPIO_Init+0x21c>
 800845a:	2300      	movs	r3, #0
 800845c:	69fa      	ldr	r2, [r7, #28]
 800845e:	f002 0203 	and.w	r2, r2, #3
 8008462:	0092      	lsls	r2, r2, #2
 8008464:	4093      	lsls	r3, r2
 8008466:	69ba      	ldr	r2, [r7, #24]
 8008468:	4313      	orrs	r3, r2
 800846a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800846c:	4935      	ldr	r1, [pc, #212]	; (8008544 <HAL_GPIO_Init+0x304>)
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	089b      	lsrs	r3, r3, #2
 8008472:	3302      	adds	r3, #2
 8008474:	69ba      	ldr	r2, [r7, #24]
 8008476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800847a:	4b3a      	ldr	r3, [pc, #232]	; (8008564 <HAL_GPIO_Init+0x324>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	43db      	mvns	r3, r3
 8008484:	69ba      	ldr	r2, [r7, #24]
 8008486:	4013      	ands	r3, r2
 8008488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008496:	69ba      	ldr	r2, [r7, #24]
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	4313      	orrs	r3, r2
 800849c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800849e:	4a31      	ldr	r2, [pc, #196]	; (8008564 <HAL_GPIO_Init+0x324>)
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80084a4:	4b2f      	ldr	r3, [pc, #188]	; (8008564 <HAL_GPIO_Init+0x324>)
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	43db      	mvns	r3, r3
 80084ae:	69ba      	ldr	r2, [r7, #24]
 80084b0:	4013      	ands	r3, r2
 80084b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d003      	beq.n	80084c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80084c0:	69ba      	ldr	r2, [r7, #24]
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80084c8:	4a26      	ldr	r2, [pc, #152]	; (8008564 <HAL_GPIO_Init+0x324>)
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80084ce:	4b25      	ldr	r3, [pc, #148]	; (8008564 <HAL_GPIO_Init+0x324>)
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	43db      	mvns	r3, r3
 80084d8:	69ba      	ldr	r2, [r7, #24]
 80084da:	4013      	ands	r3, r2
 80084dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d003      	beq.n	80084f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80084ea:	69ba      	ldr	r2, [r7, #24]
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80084f2:	4a1c      	ldr	r2, [pc, #112]	; (8008564 <HAL_GPIO_Init+0x324>)
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80084f8:	4b1a      	ldr	r3, [pc, #104]	; (8008564 <HAL_GPIO_Init+0x324>)
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	43db      	mvns	r3, r3
 8008502:	69ba      	ldr	r2, [r7, #24]
 8008504:	4013      	ands	r3, r2
 8008506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d003      	beq.n	800851c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008514:	69ba      	ldr	r2, [r7, #24]
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	4313      	orrs	r3, r2
 800851a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800851c:	4a11      	ldr	r2, [pc, #68]	; (8008564 <HAL_GPIO_Init+0x324>)
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	3301      	adds	r3, #1
 8008526:	61fb      	str	r3, [r7, #28]
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	2b0f      	cmp	r3, #15
 800852c:	f67f ae96 	bls.w	800825c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008530:	bf00      	nop
 8008532:	bf00      	nop
 8008534:	3724      	adds	r7, #36	; 0x24
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	40023800 	.word	0x40023800
 8008544:	40013800 	.word	0x40013800
 8008548:	40020000 	.word	0x40020000
 800854c:	40020400 	.word	0x40020400
 8008550:	40020800 	.word	0x40020800
 8008554:	40020c00 	.word	0x40020c00
 8008558:	40021000 	.word	0x40021000
 800855c:	40021400 	.word	0x40021400
 8008560:	40021800 	.word	0x40021800
 8008564:	40013c00 	.word	0x40013c00

08008568 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	460b      	mov	r3, r1
 8008572:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	691a      	ldr	r2, [r3, #16]
 8008578:	887b      	ldrh	r3, [r7, #2]
 800857a:	4013      	ands	r3, r2
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008580:	2301      	movs	r3, #1
 8008582:	73fb      	strb	r3, [r7, #15]
 8008584:	e001      	b.n	800858a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008586:	2300      	movs	r3, #0
 8008588:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800858a:	7bfb      	ldrb	r3, [r7, #15]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	460b      	mov	r3, r1
 80085a2:	807b      	strh	r3, [r7, #2]
 80085a4:	4613      	mov	r3, r2
 80085a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80085a8:	787b      	ldrb	r3, [r7, #1]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d003      	beq.n	80085b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80085ae:	887a      	ldrh	r2, [r7, #2]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80085b4:	e003      	b.n	80085be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80085b6:	887b      	ldrh	r3, [r7, #2]
 80085b8:	041a      	lsls	r2, r3, #16
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	619a      	str	r2, [r3, #24]
}
 80085be:	bf00      	nop
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	460b      	mov	r3, r1
 80085d4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	695a      	ldr	r2, [r3, #20]
 80085da:	887b      	ldrh	r3, [r7, #2]
 80085dc:	401a      	ands	r2, r3
 80085de:	887b      	ldrh	r3, [r7, #2]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d104      	bne.n	80085ee <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80085e4:	887b      	ldrh	r3, [r7, #2]
 80085e6:	041a      	lsls	r2, r3, #16
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80085ec:	e002      	b.n	80085f4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80085ee:	887a      	ldrh	r2, [r7, #2]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	619a      	str	r2, [r3, #24]
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	4603      	mov	r3, r0
 8008608:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800860a:	4b08      	ldr	r3, [pc, #32]	; (800862c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800860c:	695a      	ldr	r2, [r3, #20]
 800860e:	88fb      	ldrh	r3, [r7, #6]
 8008610:	4013      	ands	r3, r2
 8008612:	2b00      	cmp	r3, #0
 8008614:	d006      	beq.n	8008624 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008616:	4a05      	ldr	r2, [pc, #20]	; (800862c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008618:	88fb      	ldrh	r3, [r7, #6]
 800861a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800861c:	88fb      	ldrh	r3, [r7, #6]
 800861e:	4618      	mov	r0, r3
 8008620:	f000 f806 	bl	8008630 <HAL_GPIO_EXTI_Callback>
  }
}
 8008624:	bf00      	nop
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	40013c00 	.word	0x40013c00

08008630 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	4603      	mov	r3, r0
 8008638:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800863a:	bf00      	nop
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
	...

08008648 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d101      	bne.n	800865a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e11b      	b.n	8008892 <HAL_I2C_Init+0x24a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b00      	cmp	r3, #0
 8008664:	d106      	bne.n	8008674 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f91e 	bl	80088b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2224      	movs	r2, #36	; 0x24
 8008678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f022 0201 	bic.w	r2, r2, #1
 800868a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800868c:	f002 f9c0 	bl	800aa10 <HAL_RCC_GetPCLK1Freq>
 8008690:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	4a81      	ldr	r2, [pc, #516]	; (800889c <HAL_I2C_Init+0x254>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d807      	bhi.n	80086ac <HAL_I2C_Init+0x64>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	4a80      	ldr	r2, [pc, #512]	; (80088a0 <HAL_I2C_Init+0x258>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	bf94      	ite	ls
 80086a4:	2301      	movls	r3, #1
 80086a6:	2300      	movhi	r3, #0
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	e006      	b.n	80086ba <HAL_I2C_Init+0x72>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	4a7d      	ldr	r2, [pc, #500]	; (80088a4 <HAL_I2C_Init+0x25c>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	bf94      	ite	ls
 80086b4:	2301      	movls	r3, #1
 80086b6:	2300      	movhi	r3, #0
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e0e7      	b.n	8008892 <HAL_I2C_Init+0x24a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	4a78      	ldr	r2, [pc, #480]	; (80088a8 <HAL_I2C_Init+0x260>)
 80086c6:	fba2 2303 	umull	r2, r3, r2, r3
 80086ca:	0c9b      	lsrs	r3, r3, #18
 80086cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	430a      	orrs	r2, r1
 80086e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	6a1b      	ldr	r3, [r3, #32]
 80086e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	4a6a      	ldr	r2, [pc, #424]	; (800889c <HAL_I2C_Init+0x254>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d802      	bhi.n	80086fc <HAL_I2C_Init+0xb4>
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	3301      	adds	r3, #1
 80086fa:	e009      	b.n	8008710 <HAL_I2C_Init+0xc8>
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008702:	fb02 f303 	mul.w	r3, r2, r3
 8008706:	4a69      	ldr	r2, [pc, #420]	; (80088ac <HAL_I2C_Init+0x264>)
 8008708:	fba2 2303 	umull	r2, r3, r2, r3
 800870c:	099b      	lsrs	r3, r3, #6
 800870e:	3301      	adds	r3, #1
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	6812      	ldr	r2, [r2, #0]
 8008714:	430b      	orrs	r3, r1
 8008716:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	69db      	ldr	r3, [r3, #28]
 800871e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008722:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	495c      	ldr	r1, [pc, #368]	; (800889c <HAL_I2C_Init+0x254>)
 800872c:	428b      	cmp	r3, r1
 800872e:	d819      	bhi.n	8008764 <HAL_I2C_Init+0x11c>
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	1e59      	subs	r1, r3, #1
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	005b      	lsls	r3, r3, #1
 800873a:	fbb1 f3f3 	udiv	r3, r1, r3
 800873e:	1c59      	adds	r1, r3, #1
 8008740:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008744:	400b      	ands	r3, r1
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00a      	beq.n	8008760 <HAL_I2C_Init+0x118>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	1e59      	subs	r1, r3, #1
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	005b      	lsls	r3, r3, #1
 8008754:	fbb1 f3f3 	udiv	r3, r1, r3
 8008758:	3301      	adds	r3, #1
 800875a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800875e:	e051      	b.n	8008804 <HAL_I2C_Init+0x1bc>
 8008760:	2304      	movs	r3, #4
 8008762:	e04f      	b.n	8008804 <HAL_I2C_Init+0x1bc>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d111      	bne.n	8008790 <HAL_I2C_Init+0x148>
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	1e58      	subs	r0, r3, #1
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6859      	ldr	r1, [r3, #4]
 8008774:	460b      	mov	r3, r1
 8008776:	005b      	lsls	r3, r3, #1
 8008778:	440b      	add	r3, r1
 800877a:	fbb0 f3f3 	udiv	r3, r0, r3
 800877e:	3301      	adds	r3, #1
 8008780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008784:	2b00      	cmp	r3, #0
 8008786:	bf0c      	ite	eq
 8008788:	2301      	moveq	r3, #1
 800878a:	2300      	movne	r3, #0
 800878c:	b2db      	uxtb	r3, r3
 800878e:	e012      	b.n	80087b6 <HAL_I2C_Init+0x16e>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	1e58      	subs	r0, r3, #1
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6859      	ldr	r1, [r3, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	440b      	add	r3, r1
 800879e:	0099      	lsls	r1, r3, #2
 80087a0:	440b      	add	r3, r1
 80087a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80087a6:	3301      	adds	r3, #1
 80087a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	bf0c      	ite	eq
 80087b0:	2301      	moveq	r3, #1
 80087b2:	2300      	movne	r3, #0
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <HAL_I2C_Init+0x176>
 80087ba:	2301      	movs	r3, #1
 80087bc:	e022      	b.n	8008804 <HAL_I2C_Init+0x1bc>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10e      	bne.n	80087e4 <HAL_I2C_Init+0x19c>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	1e58      	subs	r0, r3, #1
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6859      	ldr	r1, [r3, #4]
 80087ce:	460b      	mov	r3, r1
 80087d0:	005b      	lsls	r3, r3, #1
 80087d2:	440b      	add	r3, r1
 80087d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80087d8:	3301      	adds	r3, #1
 80087da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087e2:	e00f      	b.n	8008804 <HAL_I2C_Init+0x1bc>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	1e58      	subs	r0, r3, #1
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6859      	ldr	r1, [r3, #4]
 80087ec:	460b      	mov	r3, r1
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	440b      	add	r3, r1
 80087f2:	0099      	lsls	r1, r3, #2
 80087f4:	440b      	add	r3, r1
 80087f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80087fa:	3301      	adds	r3, #1
 80087fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008800:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008804:	6879      	ldr	r1, [r7, #4]
 8008806:	6809      	ldr	r1, [r1, #0]
 8008808:	4313      	orrs	r3, r2
 800880a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	69da      	ldr	r2, [r3, #28]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	431a      	orrs	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	430a      	orrs	r2, r1
 8008826:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008832:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	6911      	ldr	r1, [r2, #16]
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	68d2      	ldr	r2, [r2, #12]
 800883e:	4311      	orrs	r1, r2
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	6812      	ldr	r2, [r2, #0]
 8008844:	430b      	orrs	r3, r1
 8008846:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	695a      	ldr	r2, [r3, #20]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	699b      	ldr	r3, [r3, #24]
 800885a:	431a      	orrs	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	430a      	orrs	r2, r1
 8008862:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f042 0201 	orr.w	r2, r2, #1
 8008872:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2220      	movs	r2, #32
 800887e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	000186a0 	.word	0x000186a0
 80088a0:	001e847f 	.word	0x001e847f
 80088a4:	003d08ff 	.word	0x003d08ff
 80088a8:	431bde83 	.word	0x431bde83
 80088ac:	10624dd3 	.word	0x10624dd3

080088b0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80088b8:	bf00      	nop
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	607a      	str	r2, [r7, #4]
 80088ce:	461a      	mov	r2, r3
 80088d0:	460b      	mov	r3, r1
 80088d2:	817b      	strh	r3, [r7, #10]
 80088d4:	4613      	mov	r3, r2
 80088d6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80088d8:	2300      	movs	r3, #0
 80088da:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b20      	cmp	r3, #32
 80088e6:	f040 80f4 	bne.w	8008ad2 <HAL_I2C_Master_Transmit_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80088ea:	4b7c      	ldr	r3, [pc, #496]	; (8008adc <HAL_I2C_Master_Transmit_DMA+0x218>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	08db      	lsrs	r3, r3, #3
 80088f0:	4a7b      	ldr	r2, [pc, #492]	; (8008ae0 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80088f2:	fba2 2303 	umull	r2, r3, r2, r3
 80088f6:	0a1a      	lsrs	r2, r3, #8
 80088f8:	4613      	mov	r3, r2
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	4413      	add	r3, r2
 80088fe:	009a      	lsls	r2, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	3b01      	subs	r3, #1
 8008908:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d116      	bne.n	800893e <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2220      	movs	r2, #32
 800891a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892a:	f043 0220 	orr.w	r2, r3, #32
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e0ca      	b.n	8008ad4 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	699b      	ldr	r3, [r3, #24]
 8008944:	f003 0302 	and.w	r3, r3, #2
 8008948:	2b02      	cmp	r3, #2
 800894a:	d0db      	beq.n	8008904 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008952:	2b01      	cmp	r3, #1
 8008954:	d101      	bne.n	800895a <HAL_I2C_Master_Transmit_DMA+0x96>
 8008956:	2302      	movs	r3, #2
 8008958:	e0bc      	b.n	8008ad4 <HAL_I2C_Master_Transmit_DMA+0x210>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	2b01      	cmp	r3, #1
 800896e:	d007      	beq.n	8008980 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f042 0201 	orr.w	r2, r2, #1
 800897e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800898e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2221      	movs	r2, #33	; 0x21
 8008994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2210      	movs	r2, #16
 800899c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	893a      	ldrh	r2, [r7, #8]
 80089b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	4a49      	ldr	r2, [pc, #292]	; (8008ae4 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80089c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80089c2:	897a      	ldrh	r2, [r7, #10]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d062      	beq.n	8008a96 <HAL_I2C_Master_Transmit_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d4:	4a44      	ldr	r2, [pc, #272]	; (8008ae8 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80089d6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089dc:	4a43      	ldr	r2, [pc, #268]	; (8008aec <HAL_I2C_Master_Transmit_DMA+0x228>)
 80089de:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e4:	2200      	movs	r2, #0
 80089e6:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ec:	2200      	movs	r2, #0
 80089ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f4:	2200      	movs	r2, #0
 80089f6:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089fc:	2200      	movs	r2, #0
 80089fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a08:	4619      	mov	r1, r3
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3310      	adds	r3, #16
 8008a10:	461a      	mov	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a16:	f7ff f90d 	bl	8007c34 <HAL_DMA_Start_IT>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 8008a1e:	7dfb      	ldrb	r3, [r7, #23]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d124      	bne.n	8008a6e <HAL_I2C_Master_Transmit_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a32:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a42:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	685a      	ldr	r2, [r3, #4]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008a5a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	685a      	ldr	r2, [r3, #4]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a6a:	605a      	str	r2, [r3, #4]
 8008a6c:	e02f      	b.n	8008ace <HAL_I2C_Master_Transmit_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2220      	movs	r2, #32
 8008a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a82:	f043 0210 	orr.w	r2, r3, #16
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e01e      	b.n	8008ad4 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008aa4:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ab4:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	685a      	ldr	r2, [r3, #4]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8008acc:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	e000      	b.n	8008ad4 <HAL_I2C_Master_Transmit_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 8008ad2:	2302      	movs	r3, #2
  }
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3718      	adds	r7, #24
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	200001ac 	.word	0x200001ac
 8008ae0:	14f8b589 	.word	0x14f8b589
 8008ae4:	ffff0000 	.word	0xffff0000
 8008ae8:	0800a391 	.word	0x0800a391
 8008aec:	0800a52b 	.word	0x0800a52b

08008af0 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b086      	sub	sp, #24
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	607a      	str	r2, [r7, #4]
 8008afa:	461a      	mov	r2, r3
 8008afc:	460b      	mov	r3, r1
 8008afe:	817b      	strh	r3, [r7, #10]
 8008b00:	4613      	mov	r3, r2
 8008b02:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8008b04:	2300      	movs	r3, #0
 8008b06:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b20      	cmp	r3, #32
 8008b12:	f040 80f4 	bne.w	8008cfe <HAL_I2C_Master_Receive_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8008b16:	4b7c      	ldr	r3, [pc, #496]	; (8008d08 <HAL_I2C_Master_Receive_DMA+0x218>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	08db      	lsrs	r3, r3, #3
 8008b1c:	4a7b      	ldr	r2, [pc, #492]	; (8008d0c <HAL_I2C_Master_Receive_DMA+0x21c>)
 8008b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b22:	0a1a      	lsrs	r2, r3, #8
 8008b24:	4613      	mov	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4413      	add	r3, r2
 8008b2a:	009a      	lsls	r2, r3, #2
 8008b2c:	4413      	add	r3, r2
 8008b2e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	3b01      	subs	r3, #1
 8008b34:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d116      	bne.n	8008b6a <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2220      	movs	r2, #32
 8008b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b56:	f043 0220 	orr.w	r2, r3, #32
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e0ca      	b.n	8008d00 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	f003 0302 	and.w	r3, r3, #2
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d0db      	beq.n	8008b30 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d101      	bne.n	8008b86 <HAL_I2C_Master_Receive_DMA+0x96>
 8008b82:	2302      	movs	r3, #2
 8008b84:	e0bc      	b.n	8008d00 <HAL_I2C_Master_Receive_DMA+0x210>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 0301 	and.w	r3, r3, #1
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d007      	beq.n	8008bac <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f042 0201 	orr.w	r2, r2, #1
 8008baa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008bba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2222      	movs	r2, #34	; 0x22
 8008bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2210      	movs	r2, #16
 8008bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	893a      	ldrh	r2, [r7, #8]
 8008bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	4a49      	ldr	r2, [pc, #292]	; (8008d10 <HAL_I2C_Master_Receive_DMA+0x220>)
 8008bec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8008bee:	897a      	ldrh	r2, [r7, #10]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d062      	beq.n	8008cc2 <HAL_I2C_Master_Receive_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c00:	4a44      	ldr	r2, [pc, #272]	; (8008d14 <HAL_I2C_Master_Receive_DMA+0x224>)
 8008c02:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c08:	4a43      	ldr	r2, [pc, #268]	; (8008d18 <HAL_I2C_Master_Receive_DMA+0x228>)
 8008c0a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c10:	2200      	movs	r2, #0
 8008c12:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c18:	2200      	movs	r2, #0
 8008c1a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c20:	2200      	movs	r2, #0
 8008c22:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c28:	2200      	movs	r2, #0
 8008c2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	3310      	adds	r3, #16
 8008c36:	4619      	mov	r1, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c42:	f7fe fff7 	bl	8007c34 <HAL_DMA_Start_IT>
 8008c46:	4603      	mov	r3, r0
 8008c48:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 8008c4a:	7dfb      	ldrb	r3, [r7, #23]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d124      	bne.n	8008c9a <HAL_I2C_Master_Receive_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c5e:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c6e:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	685a      	ldr	r2, [r3, #4]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008c86:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	685a      	ldr	r2, [r3, #4]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c96:	605a      	str	r2, [r3, #4]
 8008c98:	e02f      	b.n	8008cfa <HAL_I2C_Master_Receive_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2220      	movs	r2, #32
 8008c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cae:	f043 0210 	orr.w	r2, r3, #16
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e01e      	b.n	8008d00 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008cd0:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ce0:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8008cf8:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	e000      	b.n	8008d00 <HAL_I2C_Master_Receive_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 8008cfe:	2302      	movs	r3, #2
  }
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3718      	adds	r7, #24
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	200001ac 	.word	0x200001ac
 8008d0c:	14f8b589 	.word	0x14f8b589
 8008d10:	ffff0000 	.word	0xffff0000
 8008d14:	0800a391 	.word	0x0800a391
 8008d18:	0800a52b 	.word	0x0800a52b

08008d1c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b088      	sub	sp, #32
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8008d24:	2300      	movs	r3, #0
 8008d26:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d34:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d3c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d44:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008d46:	7bfb      	ldrb	r3, [r7, #15]
 8008d48:	2b10      	cmp	r3, #16
 8008d4a:	d003      	beq.n	8008d54 <HAL_I2C_EV_IRQHandler+0x38>
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
 8008d4e:	2b40      	cmp	r3, #64	; 0x40
 8008d50:	f040 80b6 	bne.w	8008ec0 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	f003 0301 	and.w	r3, r3, #1
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10d      	bne.n	8008d8a <HAL_I2C_EV_IRQHandler+0x6e>
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008d74:	d003      	beq.n	8008d7e <HAL_I2C_EV_IRQHandler+0x62>
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008d7c:	d101      	bne.n	8008d82 <HAL_I2C_EV_IRQHandler+0x66>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e000      	b.n	8008d84 <HAL_I2C_EV_IRQHandler+0x68>
 8008d82:	2300      	movs	r3, #0
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	f000 8127 	beq.w	8008fd8 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	f003 0301 	and.w	r3, r3, #1
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00c      	beq.n	8008dae <HAL_I2C_EV_IRQHandler+0x92>
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	0a5b      	lsrs	r3, r3, #9
 8008d98:	f003 0301 	and.w	r3, r3, #1
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d006      	beq.n	8008dae <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f001 fc66 	bl	800a672 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 fcff 	bl	80097aa <I2C_Master_SB>
 8008dac:	e087      	b.n	8008ebe <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	08db      	lsrs	r3, r3, #3
 8008db2:	f003 0301 	and.w	r3, r3, #1
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d009      	beq.n	8008dce <HAL_I2C_EV_IRQHandler+0xb2>
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	0a5b      	lsrs	r3, r3, #9
 8008dbe:	f003 0301 	and.w	r3, r3, #1
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d003      	beq.n	8008dce <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fd6d 	bl	80098a6 <I2C_Master_ADD10>
 8008dcc:	e077      	b.n	8008ebe <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	085b      	lsrs	r3, r3, #1
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d009      	beq.n	8008dee <HAL_I2C_EV_IRQHandler+0xd2>
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	0a5b      	lsrs	r3, r3, #9
 8008dde:	f003 0301 	and.w	r3, r3, #1
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d003      	beq.n	8008dee <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fd87 	bl	80098fa <I2C_Master_ADDR>
 8008dec:	e067      	b.n	8008ebe <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	089b      	lsrs	r3, r3, #2
 8008df2:	f003 0301 	and.w	r3, r3, #1
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d030      	beq.n	8008e5c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e08:	f000 80e8 	beq.w	8008fdc <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	09db      	lsrs	r3, r3, #7
 8008e10:	f003 0301 	and.w	r3, r3, #1
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00f      	beq.n	8008e38 <HAL_I2C_EV_IRQHandler+0x11c>
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	0a9b      	lsrs	r3, r3, #10
 8008e1c:	f003 0301 	and.w	r3, r3, #1
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d009      	beq.n	8008e38 <HAL_I2C_EV_IRQHandler+0x11c>
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	089b      	lsrs	r3, r3, #2
 8008e28:	f003 0301 	and.w	r3, r3, #1
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d103      	bne.n	8008e38 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 f9e0 	bl	80091f6 <I2C_MasterTransmit_TXE>
 8008e36:	e042      	b.n	8008ebe <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	089b      	lsrs	r3, r3, #2
 8008e3c:	f003 0301 	and.w	r3, r3, #1
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 80cb 	beq.w	8008fdc <HAL_I2C_EV_IRQHandler+0x2c0>
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	0a5b      	lsrs	r3, r3, #9
 8008e4a:	f003 0301 	and.w	r3, r3, #1
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f000 80c4 	beq.w	8008fdc <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fac6 	bl	80093e6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e5a:	e0bf      	b.n	8008fdc <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e6a:	f000 80b7 	beq.w	8008fdc <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	099b      	lsrs	r3, r3, #6
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00f      	beq.n	8008e9a <HAL_I2C_EV_IRQHandler+0x17e>
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	0a9b      	lsrs	r3, r3, #10
 8008e7e:	f003 0301 	and.w	r3, r3, #1
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d009      	beq.n	8008e9a <HAL_I2C_EV_IRQHandler+0x17e>
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	089b      	lsrs	r3, r3, #2
 8008e8a:	f003 0301 	and.w	r3, r3, #1
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d103      	bne.n	8008e9a <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fb1d 	bl	80094d2 <I2C_MasterReceive_RXNE>
 8008e98:	e011      	b.n	8008ebe <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	089b      	lsrs	r3, r3, #2
 8008e9e:	f003 0301 	and.w	r3, r3, #1
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f000 809a 	beq.w	8008fdc <HAL_I2C_EV_IRQHandler+0x2c0>
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	0a5b      	lsrs	r3, r3, #9
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	f000 8093 	beq.w	8008fdc <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fb8d 	bl	80095d6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008ebc:	e08e      	b.n	8008fdc <HAL_I2C_EV_IRQHandler+0x2c0>
 8008ebe:	e08d      	b.n	8008fdc <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d004      	beq.n	8008ed2 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	695b      	ldr	r3, [r3, #20]
 8008ece:	61fb      	str	r3, [r7, #28]
 8008ed0:	e007      	b.n	8008ee2 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	695b      	ldr	r3, [r3, #20]
 8008ee0:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	085b      	lsrs	r3, r3, #1
 8008ee6:	f003 0301 	and.w	r3, r3, #1
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d012      	beq.n	8008f14 <HAL_I2C_EV_IRQHandler+0x1f8>
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	0a5b      	lsrs	r3, r3, #9
 8008ef2:	f003 0301 	and.w	r3, r3, #1
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00c      	beq.n	8008f14 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d003      	beq.n	8008f0a <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	699b      	ldr	r3, [r3, #24]
 8008f08:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008f0a:	69b9      	ldr	r1, [r7, #24]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 ff43 	bl	8009d98 <I2C_Slave_ADDR>
 8008f12:	e066      	b.n	8008fe2 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	091b      	lsrs	r3, r3, #4
 8008f18:	f003 0301 	and.w	r3, r3, #1
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d009      	beq.n	8008f34 <HAL_I2C_EV_IRQHandler+0x218>
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	0a5b      	lsrs	r3, r3, #9
 8008f24:	f003 0301 	and.w	r3, r3, #1
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d003      	beq.n	8008f34 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 ff77 	bl	8009e20 <I2C_Slave_STOPF>
 8008f32:	e056      	b.n	8008fe2 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008f34:	7bbb      	ldrb	r3, [r7, #14]
 8008f36:	2b21      	cmp	r3, #33	; 0x21
 8008f38:	d002      	beq.n	8008f40 <HAL_I2C_EV_IRQHandler+0x224>
 8008f3a:	7bbb      	ldrb	r3, [r7, #14]
 8008f3c:	2b29      	cmp	r3, #41	; 0x29
 8008f3e:	d125      	bne.n	8008f8c <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	09db      	lsrs	r3, r3, #7
 8008f44:	f003 0301 	and.w	r3, r3, #1
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00f      	beq.n	8008f6c <HAL_I2C_EV_IRQHandler+0x250>
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	0a9b      	lsrs	r3, r3, #10
 8008f50:	f003 0301 	and.w	r3, r3, #1
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d009      	beq.n	8008f6c <HAL_I2C_EV_IRQHandler+0x250>
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	089b      	lsrs	r3, r3, #2
 8008f5c:	f003 0301 	and.w	r3, r3, #1
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d103      	bne.n	8008f6c <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 fe59 	bl	8009c1c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008f6a:	e039      	b.n	8008fe0 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	089b      	lsrs	r3, r3, #2
 8008f70:	f003 0301 	and.w	r3, r3, #1
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d033      	beq.n	8008fe0 <HAL_I2C_EV_IRQHandler+0x2c4>
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	0a5b      	lsrs	r3, r3, #9
 8008f7c:	f003 0301 	and.w	r3, r3, #1
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d02d      	beq.n	8008fe0 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fe86 	bl	8009c96 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008f8a:	e029      	b.n	8008fe0 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	099b      	lsrs	r3, r3, #6
 8008f90:	f003 0301 	and.w	r3, r3, #1
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00f      	beq.n	8008fb8 <HAL_I2C_EV_IRQHandler+0x29c>
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	0a9b      	lsrs	r3, r3, #10
 8008f9c:	f003 0301 	and.w	r3, r3, #1
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d009      	beq.n	8008fb8 <HAL_I2C_EV_IRQHandler+0x29c>
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	089b      	lsrs	r3, r3, #2
 8008fa8:	f003 0301 	and.w	r3, r3, #1
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d103      	bne.n	8008fb8 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 fe91 	bl	8009cd8 <I2C_SlaveReceive_RXNE>
 8008fb6:	e014      	b.n	8008fe2 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	089b      	lsrs	r3, r3, #2
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00e      	beq.n	8008fe2 <HAL_I2C_EV_IRQHandler+0x2c6>
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	0a5b      	lsrs	r3, r3, #9
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d008      	beq.n	8008fe2 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 febf 	bl	8009d54 <I2C_SlaveReceive_BTF>
 8008fd6:	e004      	b.n	8008fe2 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8008fd8:	bf00      	nop
 8008fda:	e002      	b.n	8008fe2 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008fdc:	bf00      	nop
 8008fde:	e000      	b.n	8008fe2 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008fe0:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008fe2:	3720      	adds	r7, #32
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b08a      	sub	sp, #40	; 0x28
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	695b      	ldr	r3, [r3, #20]
 8008ff6:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8009000:	2300      	movs	r3, #0
 8009002:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009004:	6a3b      	ldr	r3, [r7, #32]
 8009006:	0a1b      	lsrs	r3, r3, #8
 8009008:	f003 0301 	and.w	r3, r3, #1
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00e      	beq.n	800902e <HAL_I2C_ER_IRQHandler+0x46>
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	0a1b      	lsrs	r3, r3, #8
 8009014:	f003 0301 	and.w	r3, r3, #1
 8009018:	2b00      	cmp	r3, #0
 800901a:	d008      	beq.n	800902e <HAL_I2C_ER_IRQHandler+0x46>
  {
    error |= HAL_I2C_ERROR_BERR;
 800901c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901e:	f043 0301 	orr.w	r3, r3, #1
 8009022:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800902c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800902e:	6a3b      	ldr	r3, [r7, #32]
 8009030:	0a5b      	lsrs	r3, r3, #9
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00e      	beq.n	8009058 <HAL_I2C_ER_IRQHandler+0x70>
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	0a1b      	lsrs	r3, r3, #8
 800903e:	f003 0301 	and.w	r3, r3, #1
 8009042:	2b00      	cmp	r3, #0
 8009044:	d008      	beq.n	8009058 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8009046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009048:	f043 0302 	orr.w	r3, r3, #2
 800904c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8009056:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009058:	6a3b      	ldr	r3, [r7, #32]
 800905a:	0a9b      	lsrs	r3, r3, #10
 800905c:	f003 0301 	and.w	r3, r3, #1
 8009060:	2b00      	cmp	r3, #0
 8009062:	d041      	beq.n	80090e8 <HAL_I2C_ER_IRQHandler+0x100>
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	0a1b      	lsrs	r3, r3, #8
 8009068:	f003 0301 	and.w	r3, r3, #1
 800906c:	2b00      	cmp	r3, #0
 800906e:	d03b      	beq.n	80090e8 <HAL_I2C_ER_IRQHandler+0x100>
  {
    tmp1 = hi2c->Mode;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009076:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800907c:	b29b      	uxth	r3, r3
 800907e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009086:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800908e:	7efb      	ldrb	r3, [r7, #27]
 8009090:	2b20      	cmp	r3, #32
 8009092:	d112      	bne.n	80090ba <HAL_I2C_ER_IRQHandler+0xd2>
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d10f      	bne.n	80090ba <HAL_I2C_ER_IRQHandler+0xd2>
 800909a:	7cfb      	ldrb	r3, [r7, #19]
 800909c:	2b21      	cmp	r3, #33	; 0x21
 800909e:	d008      	beq.n	80090b2 <HAL_I2C_ER_IRQHandler+0xca>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80090a0:	7cfb      	ldrb	r3, [r7, #19]
 80090a2:	2b29      	cmp	r3, #41	; 0x29
 80090a4:	d005      	beq.n	80090b2 <HAL_I2C_ER_IRQHandler+0xca>
 80090a6:	7cfb      	ldrb	r3, [r7, #19]
 80090a8:	2b28      	cmp	r3, #40	; 0x28
 80090aa:	d106      	bne.n	80090ba <HAL_I2C_ER_IRQHandler+0xd2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2b21      	cmp	r3, #33	; 0x21
 80090b0:	d103      	bne.n	80090ba <HAL_I2C_ER_IRQHandler+0xd2>
    {
      I2C_Slave_AF(hi2c);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 ffe4 	bl	800a080 <I2C_Slave_AF>
 80090b8:	e016      	b.n	80090e8 <HAL_I2C_ER_IRQHandler+0x100>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80090c2:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80090c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c6:	f043 0304 	orr.w	r3, r3, #4
 80090ca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	2b10      	cmp	r3, #16
 80090d6:	d107      	bne.n	80090e8 <HAL_I2C_ER_IRQHandler+0x100>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090e6:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80090e8:	6a3b      	ldr	r3, [r7, #32]
 80090ea:	0adb      	lsrs	r3, r3, #11
 80090ec:	f003 0301 	and.w	r3, r3, #1
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d00e      	beq.n	8009112 <HAL_I2C_ER_IRQHandler+0x12a>
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	0a1b      	lsrs	r3, r3, #8
 80090f8:	f003 0301 	and.w	r3, r3, #1
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d008      	beq.n	8009112 <HAL_I2C_ER_IRQHandler+0x12a>
  {
    error |= HAL_I2C_ERROR_OVR;
 8009100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009102:	f043 0308 	orr.w	r3, r3, #8
 8009106:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8009110:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8009112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009114:	2b00      	cmp	r3, #0
 8009116:	d008      	beq.n	800912a <HAL_I2C_ER_IRQHandler+0x142>
  {
    hi2c->ErrorCode |= error;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911e:	431a      	orrs	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f001 f81b 	bl	800a160 <I2C_ITError>
  }
}
 800912a:	bf00      	nop
 800912c:	3728      	adds	r7, #40	; 0x28
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009132:	b480      	push	{r7}
 8009134:	b083      	sub	sp, #12
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800913a:	bf00      	nop
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009146:	b480      	push	{r7}
 8009148:	b083      	sub	sp, #12
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800914e:	bf00      	nop
 8009150:	370c      	adds	r7, #12
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr

0800915a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800915a:	b480      	push	{r7}
 800915c:	b083      	sub	sp, #12
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	460b      	mov	r3, r1
 8009164:	70fb      	strb	r3, [r7, #3]
 8009166:	4613      	mov	r3, r2
 8009168:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800916a:	bf00      	nop
 800916c:	370c      	adds	r7, #12
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr

08009176 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009176:	b480      	push	{r7}
 8009178:	b083      	sub	sp, #12
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800917e:	bf00      	nop
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800918a:	b480      	push	{r7}
 800918c:	b083      	sub	sp, #12
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8009192:	bf00      	nop
 8009194:	370c      	adds	r7, #12
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800919e:	b480      	push	{r7}
 80091a0:	b083      	sub	sp, #12
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80091a6:	bf00      	nop
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b083      	sub	sp, #12
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80091ba:	bf00      	nop
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80091c6:	b480      	push	{r7}
 80091c8:	b083      	sub	sp, #12
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80091ce:	bf00      	nop
 80091d0:	370c      	adds	r7, #12
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80091da:	b480      	push	{r7}
 80091dc:	b083      	sub	sp, #12
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091e8:	b2db      	uxtb	r3, r3
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	370c      	adds	r7, #12
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr

080091f6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b084      	sub	sp, #16
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009204:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800920c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009212:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009218:	2b00      	cmp	r3, #0
 800921a:	d150      	bne.n	80092be <I2C_MasterTransmit_TXE+0xc8>
 800921c:	7bfb      	ldrb	r3, [r7, #15]
 800921e:	2b21      	cmp	r3, #33	; 0x21
 8009220:	d14d      	bne.n	80092be <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	2b08      	cmp	r3, #8
 8009226:	d01d      	beq.n	8009264 <I2C_MasterTransmit_TXE+0x6e>
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	2b20      	cmp	r3, #32
 800922c:	d01a      	beq.n	8009264 <I2C_MasterTransmit_TXE+0x6e>
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009234:	d016      	beq.n	8009264 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	685a      	ldr	r2, [r3, #4]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009244:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2211      	movs	r2, #17
 800924a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2220      	movs	r2, #32
 8009258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f7fa fbe3 	bl	8003a28 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009262:	e0bc      	b.n	80093de <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	685a      	ldr	r2, [r3, #4]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009272:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009282:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2220      	movs	r2, #32
 800928e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b40      	cmp	r3, #64	; 0x40
 800929c:	d107      	bne.n	80092ae <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f7ff ff6f 	bl	800918a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80092ac:	e097      	b.n	80093de <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7fa fbb6 	bl	8003a28 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80092bc:	e08f      	b.n	80093de <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80092be:	7bfb      	ldrb	r3, [r7, #15]
 80092c0:	2b21      	cmp	r3, #33	; 0x21
 80092c2:	d007      	beq.n	80092d4 <I2C_MasterTransmit_TXE+0xde>
 80092c4:	7bbb      	ldrb	r3, [r7, #14]
 80092c6:	2b40      	cmp	r3, #64	; 0x40
 80092c8:	f040 8089 	bne.w	80093de <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
 80092ce:	2b22      	cmp	r3, #34	; 0x22
 80092d0:	f040 8085 	bne.w	80093de <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092d8:	b29b      	uxth	r3, r3
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d108      	bne.n	80092f0 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	685a      	ldr	r2, [r3, #4]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092ec:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80092ee:	e076      	b.n	80093de <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	2b40      	cmp	r3, #64	; 0x40
 80092fa:	d15d      	bne.n	80093b8 <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009300:	2b00      	cmp	r3, #0
 8009302:	d11d      	bne.n	8009340 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009308:	2b01      	cmp	r3, #1
 800930a:	d10b      	bne.n	8009324 <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009310:	b2da      	uxtb	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800931c:	1c9a      	adds	r2, r3, #2
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009322:	e05c      	b.n	80093de <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009328:	b29b      	uxth	r3, r3
 800932a:	121b      	asrs	r3, r3, #8
 800932c:	b2da      	uxtb	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009338:	1c5a      	adds	r2, r3, #1
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800933e:	e04e      	b.n	80093de <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009344:	2b01      	cmp	r3, #1
 8009346:	d10b      	bne.n	8009360 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800934c:	b2da      	uxtb	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009358:	1c5a      	adds	r2, r3, #1
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800935e:	e03e      	b.n	80093de <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009364:	2b02      	cmp	r3, #2
 8009366:	d13a      	bne.n	80093de <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b22      	cmp	r3, #34	; 0x22
 8009372:	d108      	bne.n	8009386 <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009382:	601a      	str	r2, [r3, #0]
}
 8009384:	e02b      	b.n	80093de <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800938c:	b2db      	uxtb	r3, r3
 800938e:	2b21      	cmp	r3, #33	; 0x21
 8009390:	d125      	bne.n	80093de <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009396:	781a      	ldrb	r2, [r3, #0]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a2:	1c5a      	adds	r2, r3, #1
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	3b01      	subs	r3, #1
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80093b6:	e012      	b.n	80093de <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093bc:	781a      	ldrb	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c8:	1c5a      	adds	r2, r3, #1
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	3b01      	subs	r3, #1
 80093d6:	b29a      	uxth	r2, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80093dc:	e7ff      	b.n	80093de <I2C_MasterTransmit_TXE+0x1e8>
 80093de:	bf00      	nop
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b084      	sub	sp, #16
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	2b21      	cmp	r3, #33	; 0x21
 80093fe:	d164      	bne.n	80094ca <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009404:	b29b      	uxth	r3, r3
 8009406:	2b00      	cmp	r3, #0
 8009408:	d012      	beq.n	8009430 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940e:	781a      	ldrb	r2, [r3, #0]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941a:	1c5a      	adds	r2, r3, #1
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009424:	b29b      	uxth	r3, r3
 8009426:	3b01      	subs	r3, #1
 8009428:	b29a      	uxth	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 800942e:	e04c      	b.n	80094ca <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2b08      	cmp	r3, #8
 8009434:	d01d      	beq.n	8009472 <I2C_MasterTransmit_BTF+0x8c>
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2b20      	cmp	r3, #32
 800943a:	d01a      	beq.n	8009472 <I2C_MasterTransmit_BTF+0x8c>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009442:	d016      	beq.n	8009472 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	685a      	ldr	r2, [r3, #4]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009452:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2211      	movs	r2, #17
 8009458:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2220      	movs	r2, #32
 8009466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f7fa fadc 	bl	8003a28 <HAL_I2C_MasterTxCpltCallback>
}
 8009470:	e02b      	b.n	80094ca <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	685a      	ldr	r2, [r3, #4]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009480:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009490:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2220      	movs	r2, #32
 800949c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	2b40      	cmp	r3, #64	; 0x40
 80094aa:	d107      	bne.n	80094bc <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7ff fe68 	bl	800918a <HAL_I2C_MemTxCpltCallback>
}
 80094ba:	e006      	b.n	80094ca <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f7fa faaf 	bl	8003a28 <HAL_I2C_MasterTxCpltCallback>
}
 80094ca:	bf00      	nop
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b084      	sub	sp, #16
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	2b22      	cmp	r3, #34	; 0x22
 80094e4:	d173      	bne.n	80095ce <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d920      	bls.n	8009536 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	691a      	ldr	r2, [r3, #16]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fe:	b2d2      	uxtb	r2, r2
 8009500:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009506:	1c5a      	adds	r2, r3, #1
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009510:	b29b      	uxth	r3, r3
 8009512:	3b01      	subs	r3, #1
 8009514:	b29a      	uxth	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800951e:	b29b      	uxth	r3, r3
 8009520:	2b03      	cmp	r3, #3
 8009522:	d154      	bne.n	80095ce <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	685a      	ldr	r2, [r3, #4]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009532:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8009534:	e04b      	b.n	80095ce <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953a:	2b02      	cmp	r3, #2
 800953c:	d047      	beq.n	80095ce <I2C_MasterReceive_RXNE+0xfc>
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d002      	beq.n	800954a <I2C_MasterReceive_RXNE+0x78>
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d141      	bne.n	80095ce <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009558:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	685a      	ldr	r2, [r3, #4]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009568:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	691a      	ldr	r2, [r3, #16]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009574:	b2d2      	uxtb	r2, r2
 8009576:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957c:	1c5a      	adds	r2, r3, #1
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009586:	b29b      	uxth	r3, r3
 8009588:	3b01      	subs	r3, #1
 800958a:	b29a      	uxth	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2220      	movs	r2, #32
 8009594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	2b40      	cmp	r3, #64	; 0x40
 80095a2:	d10a      	bne.n	80095ba <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7ff fdf3 	bl	800919e <HAL_I2C_MemRxCpltCallback>
}
 80095b8:	e009      	b.n	80095ce <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2212      	movs	r2, #18
 80095c6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f7fa fa39 	bl	8003a40 <HAL_I2C_MasterRxCpltCallback>
}
 80095ce:	bf00      	nop
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b084      	sub	sp, #16
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	2b04      	cmp	r3, #4
 80095ec:	d11b      	bne.n	8009626 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	685a      	ldr	r2, [r3, #4]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095fc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	691a      	ldr	r2, [r3, #16]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009608:	b2d2      	uxtb	r2, r2
 800960a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009610:	1c5a      	adds	r2, r3, #1
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800961a:	b29b      	uxth	r3, r3
 800961c:	3b01      	subs	r3, #1
 800961e:	b29a      	uxth	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8009624:	e0bd      	b.n	80097a2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800962a:	b29b      	uxth	r3, r3
 800962c:	2b03      	cmp	r3, #3
 800962e:	d129      	bne.n	8009684 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	685a      	ldr	r2, [r3, #4]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800963e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2b04      	cmp	r3, #4
 8009644:	d00a      	beq.n	800965c <I2C_MasterReceive_BTF+0x86>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2b02      	cmp	r3, #2
 800964a:	d007      	beq.n	800965c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800965a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	691a      	ldr	r2, [r3, #16]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009666:	b2d2      	uxtb	r2, r2
 8009668:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966e:	1c5a      	adds	r2, r3, #1
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009678:	b29b      	uxth	r3, r3
 800967a:	3b01      	subs	r3, #1
 800967c:	b29a      	uxth	r2, r3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009682:	e08e      	b.n	80097a2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009688:	b29b      	uxth	r3, r3
 800968a:	2b02      	cmp	r3, #2
 800968c:	d176      	bne.n	800977c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d002      	beq.n	800969a <I2C_MasterReceive_BTF+0xc4>
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2b10      	cmp	r3, #16
 8009698:	d108      	bne.n	80096ac <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096a8:	601a      	str	r2, [r3, #0]
 80096aa:	e019      	b.n	80096e0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2b04      	cmp	r3, #4
 80096b0:	d002      	beq.n	80096b8 <I2C_MasterReceive_BTF+0xe2>
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d108      	bne.n	80096ca <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	e00a      	b.n	80096e0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2b10      	cmp	r3, #16
 80096ce:	d007      	beq.n	80096e0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096de:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	691a      	ldr	r2, [r3, #16]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ea:	b2d2      	uxtb	r2, r2
 80096ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f2:	1c5a      	adds	r2, r3, #1
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	3b01      	subs	r3, #1
 8009700:	b29a      	uxth	r2, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	691a      	ldr	r2, [r3, #16]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009710:	b2d2      	uxtb	r2, r2
 8009712:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009718:	1c5a      	adds	r2, r3, #1
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009722:	b29b      	uxth	r3, r3
 8009724:	3b01      	subs	r3, #1
 8009726:	b29a      	uxth	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800973a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2220      	movs	r2, #32
 8009740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800974a:	b2db      	uxtb	r3, r3
 800974c:	2b40      	cmp	r3, #64	; 0x40
 800974e:	d10a      	bne.n	8009766 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f7ff fd1d 	bl	800919e <HAL_I2C_MemRxCpltCallback>
}
 8009764:	e01d      	b.n	80097a2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2212      	movs	r2, #18
 8009772:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f7fa f963 	bl	8003a40 <HAL_I2C_MasterRxCpltCallback>
}
 800977a:	e012      	b.n	80097a2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	691a      	ldr	r2, [r3, #16]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009786:	b2d2      	uxtb	r2, r2
 8009788:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978e:	1c5a      	adds	r2, r3, #1
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009798:	b29b      	uxth	r3, r3
 800979a:	3b01      	subs	r3, #1
 800979c:	b29a      	uxth	r2, r3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80097a2:	bf00      	nop
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80097aa:	b480      	push	{r7}
 80097ac:	b083      	sub	sp, #12
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	2b40      	cmp	r3, #64	; 0x40
 80097bc:	d117      	bne.n	80097ee <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d109      	bne.n	80097da <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	461a      	mov	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80097d6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80097d8:	e05f      	b.n	800989a <I2C_Master_SB+0xf0>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	f043 0301 	orr.w	r3, r3, #1
 80097e4:	b2da      	uxtb	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	611a      	str	r2, [r3, #16]
}
 80097ec:	e055      	b.n	800989a <I2C_Master_SB+0xf0>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097f6:	d12b      	bne.n	8009850 <I2C_Master_SB+0xa6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	2b21      	cmp	r3, #33	; 0x21
 8009802:	d109      	bne.n	8009818 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009808:	b2db      	uxtb	r3, r3
 800980a:	461a      	mov	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009814:	611a      	str	r2, [r3, #16]
 8009816:	e008      	b.n	800982a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800981c:	b2db      	uxtb	r3, r3
 800981e:	f043 0301 	orr.w	r3, r3, #1
 8009822:	b2da      	uxtb	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800982e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009830:	2b00      	cmp	r3, #0
 8009832:	d104      	bne.n	800983e <I2C_Master_SB+0x94>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800983a:	2b00      	cmp	r3, #0
 800983c:	d02d      	beq.n	800989a <I2C_Master_SB+0xf0>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	685a      	ldr	r2, [r3, #4]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800984c:	605a      	str	r2, [r3, #4]
}
 800984e:	e024      	b.n	800989a <I2C_Master_SB+0xf0>
      if (hi2c->EventCount == 0U)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009854:	2b00      	cmp	r3, #0
 8009856:	d10e      	bne.n	8009876 <I2C_Master_SB+0xcc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800985c:	b29b      	uxth	r3, r3
 800985e:	11db      	asrs	r3, r3, #7
 8009860:	b2db      	uxtb	r3, r3
 8009862:	f003 0306 	and.w	r3, r3, #6
 8009866:	b2db      	uxtb	r3, r3
 8009868:	f063 030f 	orn	r3, r3, #15
 800986c:	b2da      	uxtb	r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	611a      	str	r2, [r3, #16]
}
 8009874:	e011      	b.n	800989a <I2C_Master_SB+0xf0>
      else if (hi2c->EventCount == 1U)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800987a:	2b01      	cmp	r3, #1
 800987c:	d10d      	bne.n	800989a <I2C_Master_SB+0xf0>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009882:	b29b      	uxth	r3, r3
 8009884:	11db      	asrs	r3, r3, #7
 8009886:	b2db      	uxtb	r3, r3
 8009888:	f003 0306 	and.w	r3, r3, #6
 800988c:	b2db      	uxtb	r3, r3
 800988e:	f063 030e 	orn	r3, r3, #14
 8009892:	b2da      	uxtb	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	611a      	str	r2, [r3, #16]
}
 800989a:	bf00      	nop
 800989c:	370c      	adds	r7, #12
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr

080098a6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80098a6:	b480      	push	{r7}
 80098a8:	b083      	sub	sp, #12
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098b2:	b2da      	uxtb	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d103      	bne.n	80098ca <I2C_Master_ADD10+0x24>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d011      	beq.n	80098ee <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d104      	bne.n	80098de <I2C_Master_ADD10+0x38>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d007      	beq.n	80098ee <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	685a      	ldr	r2, [r3, #4]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098ec:	605a      	str	r2, [r3, #4]
    }
  }
}
 80098ee:	bf00      	nop
 80098f0:	370c      	adds	r7, #12
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr

080098fa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80098fa:	b480      	push	{r7}
 80098fc:	b091      	sub	sp, #68	; 0x44
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009908:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009910:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009916:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800991e:	b2db      	uxtb	r3, r3
 8009920:	2b22      	cmp	r3, #34	; 0x22
 8009922:	f040 8169 	bne.w	8009bf8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800992a:	2b00      	cmp	r3, #0
 800992c:	d10f      	bne.n	800994e <I2C_Master_ADDR+0x54>
 800992e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009932:	2b40      	cmp	r3, #64	; 0x40
 8009934:	d10b      	bne.n	800994e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009936:	2300      	movs	r3, #0
 8009938:	633b      	str	r3, [r7, #48]	; 0x30
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	695b      	ldr	r3, [r3, #20]
 8009940:	633b      	str	r3, [r7, #48]	; 0x30
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	633b      	str	r3, [r7, #48]	; 0x30
 800994a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994c:	e160      	b.n	8009c10 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009952:	2b00      	cmp	r3, #0
 8009954:	d11d      	bne.n	8009992 <I2C_Master_ADDR+0x98>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800995e:	d118      	bne.n	8009992 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009960:	2300      	movs	r3, #0
 8009962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	699b      	ldr	r3, [r3, #24]
 8009972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009974:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009984:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800998a:	1c5a      	adds	r2, r3, #1
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	651a      	str	r2, [r3, #80]	; 0x50
 8009990:	e13e      	b.n	8009c10 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009996:	b29b      	uxth	r3, r3
 8009998:	2b00      	cmp	r3, #0
 800999a:	d113      	bne.n	80099c4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800999c:	2300      	movs	r3, #0
 800999e:	62bb      	str	r3, [r7, #40]	; 0x28
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	695b      	ldr	r3, [r3, #20]
 80099a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80099b0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099c0:	601a      	str	r2, [r3, #0]
 80099c2:	e115      	b.n	8009bf0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	f040 808a 	bne.w	8009ae4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80099d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80099d6:	d137      	bne.n	8009a48 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099e6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099f6:	d113      	bne.n	8009a20 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a06:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a08:	2300      	movs	r3, #0
 8009a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	695b      	ldr	r3, [r3, #20]
 8009a12:	627b      	str	r3, [r7, #36]	; 0x24
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	699b      	ldr	r3, [r3, #24]
 8009a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1e:	e0e7      	b.n	8009bf0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a20:	2300      	movs	r3, #0
 8009a22:	623b      	str	r3, [r7, #32]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	623b      	str	r3, [r7, #32]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	623b      	str	r3, [r7, #32]
 8009a34:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a44:	601a      	str	r2, [r3, #0]
 8009a46:	e0d3      	b.n	8009bf0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8009a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4a:	2b08      	cmp	r3, #8
 8009a4c:	d02e      	beq.n	8009aac <I2C_Master_ADDR+0x1b2>
 8009a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a50:	2b20      	cmp	r3, #32
 8009a52:	d02b      	beq.n	8009aac <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8009a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a56:	2b12      	cmp	r3, #18
 8009a58:	d102      	bne.n	8009a60 <I2C_Master_ADDR+0x166>
 8009a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d125      	bne.n	8009aac <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a62:	2b04      	cmp	r3, #4
 8009a64:	d00e      	beq.n	8009a84 <I2C_Master_ADDR+0x18a>
 8009a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d00b      	beq.n	8009a84 <I2C_Master_ADDR+0x18a>
 8009a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6e:	2b10      	cmp	r3, #16
 8009a70:	d008      	beq.n	8009a84 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a80:	601a      	str	r2, [r3, #0]
 8009a82:	e007      	b.n	8009a94 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a92:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a94:	2300      	movs	r3, #0
 8009a96:	61fb      	str	r3, [r7, #28]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	695b      	ldr	r3, [r3, #20]
 8009a9e:	61fb      	str	r3, [r7, #28]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	699b      	ldr	r3, [r3, #24]
 8009aa6:	61fb      	str	r3, [r7, #28]
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	e0a1      	b.n	8009bf0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009aba:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009abc:	2300      	movs	r3, #0
 8009abe:	61bb      	str	r3, [r7, #24]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	695b      	ldr	r3, [r3, #20]
 8009ac6:	61bb      	str	r3, [r7, #24]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	61bb      	str	r3, [r7, #24]
 8009ad0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ae0:	601a      	str	r2, [r3, #0]
 8009ae2:	e085      	b.n	8009bf0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	2b02      	cmp	r3, #2
 8009aec:	d14d      	bne.n	8009b8a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af0:	2b04      	cmp	r3, #4
 8009af2:	d016      	beq.n	8009b22 <I2C_Master_ADDR+0x228>
 8009af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d013      	beq.n	8009b22 <I2C_Master_ADDR+0x228>
 8009afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afc:	2b10      	cmp	r3, #16
 8009afe:	d010      	beq.n	8009b22 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b0e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b1e:	601a      	str	r2, [r3, #0]
 8009b20:	e007      	b.n	8009b32 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b30:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b40:	d117      	bne.n	8009b72 <I2C_Master_ADDR+0x278>
 8009b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009b48:	d00b      	beq.n	8009b62 <I2C_Master_ADDR+0x268>
 8009b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d008      	beq.n	8009b62 <I2C_Master_ADDR+0x268>
 8009b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b52:	2b08      	cmp	r3, #8
 8009b54:	d005      	beq.n	8009b62 <I2C_Master_ADDR+0x268>
 8009b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b58:	2b10      	cmp	r3, #16
 8009b5a:	d002      	beq.n	8009b62 <I2C_Master_ADDR+0x268>
 8009b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5e:	2b20      	cmp	r3, #32
 8009b60:	d107      	bne.n	8009b72 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	685a      	ldr	r2, [r3, #4]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009b70:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b72:	2300      	movs	r3, #0
 8009b74:	617b      	str	r3, [r7, #20]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	695b      	ldr	r3, [r3, #20]
 8009b7c:	617b      	str	r3, [r7, #20]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	617b      	str	r3, [r7, #20]
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	e032      	b.n	8009bf0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b98:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ba8:	d117      	bne.n	8009bda <I2C_Master_ADDR+0x2e0>
 8009baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009bb0:	d00b      	beq.n	8009bca <I2C_Master_ADDR+0x2d0>
 8009bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d008      	beq.n	8009bca <I2C_Master_ADDR+0x2d0>
 8009bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bba:	2b08      	cmp	r3, #8
 8009bbc:	d005      	beq.n	8009bca <I2C_Master_ADDR+0x2d0>
 8009bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc0:	2b10      	cmp	r3, #16
 8009bc2:	d002      	beq.n	8009bca <I2C_Master_ADDR+0x2d0>
 8009bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc6:	2b20      	cmp	r3, #32
 8009bc8:	d107      	bne.n	8009bda <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	685a      	ldr	r2, [r3, #4]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009bd8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bda:	2300      	movs	r3, #0
 8009bdc:	613b      	str	r3, [r7, #16]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	695b      	ldr	r3, [r3, #20]
 8009be4:	613b      	str	r3, [r7, #16]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	613b      	str	r3, [r7, #16]
 8009bee:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8009bf6:	e00b      	b.n	8009c10 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	60fb      	str	r3, [r7, #12]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	695b      	ldr	r3, [r3, #20]
 8009c02:	60fb      	str	r3, [r7, #12]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	60fb      	str	r3, [r7, #12]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
}
 8009c0e:	e7ff      	b.n	8009c10 <I2C_Master_ADDR+0x316>
 8009c10:	bf00      	nop
 8009c12:	3744      	adds	r7, #68	; 0x44
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c2a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d02b      	beq.n	8009c8e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3a:	781a      	ldrb	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c46:	1c5a      	adds	r2, r3, #1
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	3b01      	subs	r3, #1
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d114      	bne.n	8009c8e <I2C_SlaveTransmit_TXE+0x72>
 8009c64:	7bfb      	ldrb	r3, [r7, #15]
 8009c66:	2b29      	cmp	r3, #41	; 0x29
 8009c68:	d111      	bne.n	8009c8e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	685a      	ldr	r2, [r3, #4]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c78:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2221      	movs	r2, #33	; 0x21
 8009c7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2228      	movs	r2, #40	; 0x28
 8009c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f7ff fa52 	bl	8009132 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009c8e:	bf00      	nop
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009c96:	b480      	push	{r7}
 8009c98:	b083      	sub	sp, #12
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d011      	beq.n	8009ccc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cac:	781a      	ldrb	r2, [r3, #0]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb8:	1c5a      	adds	r2, r3, #1
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ce6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d02c      	beq.n	8009d4c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	691a      	ldr	r2, [r3, #16]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfc:	b2d2      	uxtb	r2, r2
 8009cfe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d04:	1c5a      	adds	r2, r3, #1
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	3b01      	subs	r3, #1
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d114      	bne.n	8009d4c <I2C_SlaveReceive_RXNE+0x74>
 8009d22:	7bfb      	ldrb	r3, [r7, #15]
 8009d24:	2b2a      	cmp	r3, #42	; 0x2a
 8009d26:	d111      	bne.n	8009d4c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	685a      	ldr	r2, [r3, #4]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d36:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2222      	movs	r2, #34	; 0x22
 8009d3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2228      	movs	r2, #40	; 0x28
 8009d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f7ff f9fd 	bl	8009146 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009d4c:	bf00      	nop
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d012      	beq.n	8009d8c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	691a      	ldr	r2, [r3, #16]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d70:	b2d2      	uxtb	r2, r2
 8009d72:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d78:	1c5a      	adds	r2, r3, #1
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	3b01      	subs	r3, #1
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009d8c:	bf00      	nop
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009da2:	2300      	movs	r3, #0
 8009da4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009db2:	2b28      	cmp	r3, #40	; 0x28
 8009db4:	d127      	bne.n	8009e06 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	685a      	ldr	r2, [r3, #4]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dc4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	089b      	lsrs	r3, r3, #2
 8009dca:	f003 0301 	and.w	r3, r3, #1
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d101      	bne.n	8009dd6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	09db      	lsrs	r3, r3, #7
 8009dda:	f003 0301 	and.w	r3, r3, #1
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d103      	bne.n	8009dea <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	81bb      	strh	r3, [r7, #12]
 8009de8:	e002      	b.n	8009df0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	699b      	ldr	r3, [r3, #24]
 8009dee:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009df8:	89ba      	ldrh	r2, [r7, #12]
 8009dfa:	7bfb      	ldrb	r3, [r7, #15]
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f7ff f9ab 	bl	800915a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009e04:	e008      	b.n	8009e18 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f06f 0202 	mvn.w	r2, #2
 8009e0e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8009e18:	bf00      	nop
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e2e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	685a      	ldr	r2, [r3, #4]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009e3e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009e40:	2300      	movs	r3, #0
 8009e42:	60bb      	str	r3, [r7, #8]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	695b      	ldr	r3, [r3, #20]
 8009e4a:	60bb      	str	r3, [r7, #8]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f042 0201 	orr.w	r2, r2, #1
 8009e5a:	601a      	str	r2, [r3, #0]
 8009e5c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e6c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e7c:	d172      	bne.n	8009f64 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009e7e:	7bfb      	ldrb	r3, [r7, #15]
 8009e80:	2b22      	cmp	r3, #34	; 0x22
 8009e82:	d002      	beq.n	8009e8a <I2C_Slave_STOPF+0x6a>
 8009e84:	7bfb      	ldrb	r3, [r7, #15]
 8009e86:	2b2a      	cmp	r3, #42	; 0x2a
 8009e88:	d135      	bne.n	8009ef6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d005      	beq.n	8009eae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea6:	f043 0204 	orr.w	r2, r3, #4
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	685a      	ldr	r2, [r3, #4]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ebc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fe f8c2 	bl	800804c <HAL_DMA_GetState>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d049      	beq.n	8009f62 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed2:	4a69      	ldr	r2, [pc, #420]	; (800a078 <I2C_Slave_STOPF+0x258>)
 8009ed4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7fd ff0a 	bl	8007cf4 <HAL_DMA_Abort_IT>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d03d      	beq.n	8009f62 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009ef0:	4610      	mov	r0, r2
 8009ef2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009ef4:	e035      	b.n	8009f62 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	b29a      	uxth	r2, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d005      	beq.n	8009f1a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f12:	f043 0204 	orr.w	r2, r3, #4
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	685a      	ldr	r2, [r3, #4]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009f28:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fe f88c 	bl	800804c <HAL_DMA_GetState>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d014      	beq.n	8009f64 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f3e:	4a4e      	ldr	r2, [pc, #312]	; (800a078 <I2C_Slave_STOPF+0x258>)
 8009f40:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fd fed4 	bl	8007cf4 <HAL_DMA_Abort_IT>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d008      	beq.n	8009f64 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009f5c:	4610      	mov	r0, r2
 8009f5e:	4798      	blx	r3
 8009f60:	e000      	b.n	8009f64 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009f62:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d03e      	beq.n	8009fec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	695b      	ldr	r3, [r3, #20]
 8009f74:	f003 0304 	and.w	r3, r3, #4
 8009f78:	2b04      	cmp	r3, #4
 8009f7a:	d112      	bne.n	8009fa2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	691a      	ldr	r2, [r3, #16]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f86:	b2d2      	uxtb	r2, r2
 8009f88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8e:	1c5a      	adds	r2, r3, #1
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	695b      	ldr	r3, [r3, #20]
 8009fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fac:	2b40      	cmp	r3, #64	; 0x40
 8009fae:	d112      	bne.n	8009fd6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	691a      	ldr	r2, [r3, #16]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fba:	b2d2      	uxtb	r2, r2
 8009fbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc2:	1c5a      	adds	r2, r3, #1
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	b29a      	uxth	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d005      	beq.n	8009fec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe4:	f043 0204 	orr.w	r2, r3, #4
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d003      	beq.n	8009ffc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 f8b3 	bl	800a160 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8009ffa:	e039      	b.n	800a070 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009ffc:	7bfb      	ldrb	r3, [r7, #15]
 8009ffe:	2b2a      	cmp	r3, #42	; 0x2a
 800a000:	d109      	bne.n	800a016 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2228      	movs	r2, #40	; 0x28
 800a00c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f7ff f898 	bl	8009146 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	2b28      	cmp	r3, #40	; 0x28
 800a020:	d111      	bne.n	800a046 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	4a15      	ldr	r2, [pc, #84]	; (800a07c <I2C_Slave_STOPF+0x25c>)
 800a026:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2220      	movs	r2, #32
 800a032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f7ff f899 	bl	8009176 <HAL_I2C_ListenCpltCallback>
}
 800a044:	e014      	b.n	800a070 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a04a:	2b22      	cmp	r3, #34	; 0x22
 800a04c:	d002      	beq.n	800a054 <I2C_Slave_STOPF+0x234>
 800a04e:	7bfb      	ldrb	r3, [r7, #15]
 800a050:	2b22      	cmp	r3, #34	; 0x22
 800a052:	d10d      	bne.n	800a070 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2220      	movs	r2, #32
 800a05e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7ff f86b 	bl	8009146 <HAL_I2C_SlaveRxCpltCallback>
}
 800a070:	bf00      	nop
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	0800a595 	.word	0x0800a595
 800a07c:	ffff0000 	.word	0xffff0000

0800a080 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a08e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a094:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	2b08      	cmp	r3, #8
 800a09a:	d002      	beq.n	800a0a2 <I2C_Slave_AF+0x22>
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	2b20      	cmp	r3, #32
 800a0a0:	d129      	bne.n	800a0f6 <I2C_Slave_AF+0x76>
 800a0a2:	7bfb      	ldrb	r3, [r7, #15]
 800a0a4:	2b28      	cmp	r3, #40	; 0x28
 800a0a6:	d126      	bne.n	800a0f6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4a2c      	ldr	r2, [pc, #176]	; (800a15c <I2C_Slave_AF+0xdc>)
 800a0ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	685a      	ldr	r2, [r3, #4]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a0bc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a0c6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0d6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2220      	movs	r2, #32
 800a0e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f7ff f841 	bl	8009176 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800a0f4:	e02e      	b.n	800a154 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a0f6:	7bfb      	ldrb	r3, [r7, #15]
 800a0f8:	2b21      	cmp	r3, #33	; 0x21
 800a0fa:	d126      	bne.n	800a14a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a17      	ldr	r2, [pc, #92]	; (800a15c <I2C_Slave_AF+0xdc>)
 800a100:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2221      	movs	r2, #33	; 0x21
 800a106:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2220      	movs	r2, #32
 800a10c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	685a      	ldr	r2, [r3, #4]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a126:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a130:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a140:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f7fe fff5 	bl	8009132 <HAL_I2C_SlaveTxCpltCallback>
}
 800a148:	e004      	b.n	800a154 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a152:	615a      	str	r2, [r3, #20]
}
 800a154:	bf00      	nop
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	ffff0000 	.word	0xffff0000

0800a160 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a16e:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a176:	b2db      	uxtb	r3, r3
 800a178:	2b10      	cmp	r3, #16
 800a17a:	d10a      	bne.n	800a192 <I2C_ITError+0x32>
 800a17c:	7bfb      	ldrb	r3, [r7, #15]
 800a17e:	2b22      	cmp	r3, #34	; 0x22
 800a180:	d107      	bne.n	800a192 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a190:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a192:	7bfb      	ldrb	r3, [r7, #15]
 800a194:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a198:	2b28      	cmp	r3, #40	; 0x28
 800a19a:	d107      	bne.n	800a1ac <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2228      	movs	r2, #40	; 0x28
 800a1a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a1aa:	e015      	b.n	800a1d8 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1ba:	d006      	beq.n	800a1ca <I2C_ITError+0x6a>
 800a1bc:	7bfb      	ldrb	r3, [r7, #15]
 800a1be:	2b60      	cmp	r3, #96	; 0x60
 800a1c0:	d003      	beq.n	800a1ca <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2220      	movs	r2, #32
 800a1c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1e6:	d162      	bne.n	800a2ae <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	685a      	ldr	r2, [r3, #4]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a1f6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a200:	b2db      	uxtb	r3, r3
 800a202:	2b01      	cmp	r3, #1
 800a204:	d020      	beq.n	800a248 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a20a:	4a5f      	ldr	r2, [pc, #380]	; (800a388 <I2C_ITError+0x228>)
 800a20c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a212:	4618      	mov	r0, r3
 800a214:	f7fd fd6e 	bl	8007cf4 <HAL_DMA_Abort_IT>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f000 8089 	beq.w	800a332 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f022 0201 	bic.w	r2, r2, #1
 800a22e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2220      	movs	r2, #32
 800a234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a23c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a242:	4610      	mov	r0, r2
 800a244:	4798      	blx	r3
 800a246:	e074      	b.n	800a332 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a24c:	4a4e      	ldr	r2, [pc, #312]	; (800a388 <I2C_ITError+0x228>)
 800a24e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a254:	4618      	mov	r0, r3
 800a256:	f7fd fd4d 	bl	8007cf4 <HAL_DMA_Abort_IT>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d068      	beq.n	800a332 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	695b      	ldr	r3, [r3, #20]
 800a266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a26a:	2b40      	cmp	r3, #64	; 0x40
 800a26c:	d10b      	bne.n	800a286 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	691a      	ldr	r2, [r3, #16]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a278:	b2d2      	uxtb	r2, r2
 800a27a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a280:	1c5a      	adds	r2, r3, #1
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f022 0201 	bic.w	r2, r2, #1
 800a294:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2220      	movs	r2, #32
 800a29a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a2a8:	4610      	mov	r0, r2
 800a2aa:	4798      	blx	r3
 800a2ac:	e041      	b.n	800a332 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b60      	cmp	r3, #96	; 0x60
 800a2b8:	d125      	bne.n	800a306 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2220      	movs	r2, #32
 800a2be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	695b      	ldr	r3, [r3, #20]
 800a2ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2d2:	2b40      	cmp	r3, #64	; 0x40
 800a2d4:	d10b      	bne.n	800a2ee <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	691a      	ldr	r2, [r3, #16]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e0:	b2d2      	uxtb	r2, r2
 800a2e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e8:	1c5a      	adds	r2, r3, #1
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f022 0201 	bic.w	r2, r2, #1
 800a2fc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f7fe ff61 	bl	80091c6 <HAL_I2C_AbortCpltCallback>
 800a304:	e015      	b.n	800a332 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	695b      	ldr	r3, [r3, #20]
 800a30c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a310:	2b40      	cmp	r3, #64	; 0x40
 800a312:	d10b      	bne.n	800a32c <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	691a      	ldr	r2, [r3, #16]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31e:	b2d2      	uxtb	r2, r2
 800a320:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a326:	1c5a      	adds	r2, r3, #1
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f7fe ff40 	bl	80091b2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a338:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33e:	f003 0304 	and.w	r3, r3, #4
 800a342:	2b04      	cmp	r3, #4
 800a344:	d11b      	bne.n	800a37e <I2C_ITError+0x21e>
 800a346:	7bfb      	ldrb	r3, [r7, #15]
 800a348:	2b28      	cmp	r3, #40	; 0x28
 800a34a:	d118      	bne.n	800a37e <I2C_ITError+0x21e>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	685a      	ldr	r2, [r3, #4]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a35a:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4a0b      	ldr	r2, [pc, #44]	; (800a38c <I2C_ITError+0x22c>)
 800a360:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2220      	movs	r2, #32
 800a36c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f7fe fefc 	bl	8009176 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a37e:	bf00      	nop
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	0800a595 	.word	0x0800a595
 800a38c:	ffff0000 	.word	0xffff0000

0800a390 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a39c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3a4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3ac:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	685a      	ldr	r2, [r3, #4]
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a3c2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	63da      	str	r2, [r3, #60]	; 0x3c

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800a3d4:	7cfb      	ldrb	r3, [r7, #19]
 800a3d6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800a3da:	2b21      	cmp	r3, #33	; 0x21
 800a3dc:	d007      	beq.n	800a3ee <I2C_DMAXferCplt+0x5e>
 800a3de:	7cfb      	ldrb	r3, [r7, #19]
 800a3e0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800a3e4:	2b22      	cmp	r3, #34	; 0x22
 800a3e6:	d131      	bne.n	800a44c <I2C_DMAXferCplt+0xbc>
 800a3e8:	7cbb      	ldrb	r3, [r7, #18]
 800a3ea:	2b20      	cmp	r3, #32
 800a3ec:	d12e      	bne.n	800a44c <I2C_DMAXferCplt+0xbc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	685a      	ldr	r2, [r3, #4]
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a3fc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	2200      	movs	r2, #0
 800a402:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a404:	7cfb      	ldrb	r3, [r7, #19]
 800a406:	2b29      	cmp	r3, #41	; 0x29
 800a408:	d10a      	bne.n	800a420 <I2C_DMAXferCplt+0x90>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	2221      	movs	r2, #33	; 0x21
 800a40e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	2228      	movs	r2, #40	; 0x28
 800a414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a418:	6978      	ldr	r0, [r7, #20]
 800a41a:	f7fe fe8a 	bl	8009132 <HAL_I2C_SlaveTxCpltCallback>
 800a41e:	e00c      	b.n	800a43a <I2C_DMAXferCplt+0xaa>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a420:	7cfb      	ldrb	r3, [r7, #19]
 800a422:	2b2a      	cmp	r3, #42	; 0x2a
 800a424:	d109      	bne.n	800a43a <I2C_DMAXferCplt+0xaa>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	2222      	movs	r2, #34	; 0x22
 800a42a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	2228      	movs	r2, #40	; 0x28
 800a430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a434:	6978      	ldr	r0, [r7, #20]
 800a436:	f7fe fe86 	bl	8009146 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	685a      	ldr	r2, [r3, #4]
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800a448:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800a44a:	e06a      	b.n	800a522 <I2C_DMAXferCplt+0x192>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a452:	b2db      	uxtb	r3, r3
 800a454:	2b00      	cmp	r3, #0
 800a456:	d064      	beq.n	800a522 <I2C_DMAXferCplt+0x192>
    if (hi2c->XferCount == (uint16_t)1)
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d107      	bne.n	800a472 <I2C_DMAXferCplt+0xe2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a470:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	685a      	ldr	r2, [r3, #4]
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a480:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a488:	d009      	beq.n	800a49e <I2C_DMAXferCplt+0x10e>
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2b08      	cmp	r3, #8
 800a48e:	d006      	beq.n	800a49e <I2C_DMAXferCplt+0x10e>
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800a496:	d002      	beq.n	800a49e <I2C_DMAXferCplt+0x10e>
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2b20      	cmp	r3, #32
 800a49c:	d107      	bne.n	800a4ae <I2C_DMAXferCplt+0x11e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4ac:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	685a      	ldr	r2, [r3, #4]
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a4bc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	685a      	ldr	r2, [r3, #4]
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4cc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d003      	beq.n	800a4e4 <I2C_DMAXferCplt+0x154>
      HAL_I2C_ErrorCallback(hi2c);
 800a4dc:	6978      	ldr	r0, [r7, #20]
 800a4de:	f7fe fe68 	bl	80091b2 <HAL_I2C_ErrorCallback>
}
 800a4e2:	e01e      	b.n	800a522 <I2C_DMAXferCplt+0x192>
      hi2c->State = HAL_I2C_STATE_READY;
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	2220      	movs	r2, #32
 800a4e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	2b40      	cmp	r3, #64	; 0x40
 800a4f6:	d10a      	bne.n	800a50e <I2C_DMAXferCplt+0x17e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	2200      	movs	r2, #0
 800a504:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800a506:	6978      	ldr	r0, [r7, #20]
 800a508:	f7fe fe49 	bl	800919e <HAL_I2C_MemRxCpltCallback>
}
 800a50c:	e009      	b.n	800a522 <I2C_DMAXferCplt+0x192>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	2200      	movs	r2, #0
 800a512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	2212      	movs	r2, #18
 800a51a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800a51c:	6978      	ldr	r0, [r7, #20]
 800a51e:	f7f9 fa8f 	bl	8003a40 <HAL_I2C_MasterRxCpltCallback>
}
 800a522:	bf00      	nop
 800a524:	3718      	adds	r7, #24
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b084      	sub	sp, #16
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a536:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a53c:	2200      	movs	r2, #0
 800a53e:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a544:	2200      	movs	r2, #0
 800a546:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f7fd fd8d 	bl	8008068 <HAL_DMA_GetError>
 800a54e:	4603      	mov	r3, r0
 800a550:	2b02      	cmp	r3, #2
 800a552:	d01b      	beq.n	800a58c <I2C_DMAError+0x62>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a562:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2200      	movs	r2, #0
 800a568:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2220      	movs	r2, #32
 800a56e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a57e:	f043 0210 	orr.w	r2, r3, #16
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f7fe fe13 	bl	80091b2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a58c:	bf00      	nop
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a0:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5a8:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5c8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5dc:	2200      	movs	r2, #0
 800a5de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f022 0201 	bic.w	r2, r2, #1
 800a5ee:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	2b60      	cmp	r3, #96	; 0x60
 800a5fa:	d10e      	bne.n	800a61a <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2220      	movs	r2, #32
 800a600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2200      	movs	r2, #0
 800a608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2200      	movs	r2, #0
 800a610:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f7fe fdd7 	bl	80091c6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a618:	e027      	b.n	800a66a <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a61a:	7afb      	ldrb	r3, [r7, #11]
 800a61c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a620:	2b28      	cmp	r3, #40	; 0x28
 800a622:	d117      	bne.n	800a654 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f042 0201 	orr.w	r2, r2, #1
 800a632:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a642:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2228      	movs	r2, #40	; 0x28
 800a64e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a652:	e007      	b.n	800a664 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2220      	movs	r2, #32
 800a658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2200      	movs	r2, #0
 800a660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f7fe fda4 	bl	80091b2 <HAL_I2C_ErrorCallback>
}
 800a66a:	bf00      	nop
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800a672:	b480      	push	{r7}
 800a674:	b083      	sub	sp, #12
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a67e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800a682:	d103      	bne.n	800a68c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2201      	movs	r2, #1
 800a688:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800a68a:	e007      	b.n	800a69c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a690:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800a694:	d102      	bne.n	800a69c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2208      	movs	r2, #8
 800a69a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a69c:	bf00      	nop
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d101      	bne.n	800a6bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e0ca      	b.n	800a852 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a6bc:	4b67      	ldr	r3, [pc, #412]	; (800a85c <HAL_RCC_ClockConfig+0x1b4>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f003 030f 	and.w	r3, r3, #15
 800a6c4:	683a      	ldr	r2, [r7, #0]
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d90c      	bls.n	800a6e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6ca:	4b64      	ldr	r3, [pc, #400]	; (800a85c <HAL_RCC_ClockConfig+0x1b4>)
 800a6cc:	683a      	ldr	r2, [r7, #0]
 800a6ce:	b2d2      	uxtb	r2, r2
 800a6d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6d2:	4b62      	ldr	r3, [pc, #392]	; (800a85c <HAL_RCC_ClockConfig+0x1b4>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f003 030f 	and.w	r3, r3, #15
 800a6da:	683a      	ldr	r2, [r7, #0]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d001      	beq.n	800a6e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e0b6      	b.n	800a852 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 0302 	and.w	r3, r3, #2
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d020      	beq.n	800a732 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 0304 	and.w	r3, r3, #4
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d005      	beq.n	800a708 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a6fc:	4b58      	ldr	r3, [pc, #352]	; (800a860 <HAL_RCC_ClockConfig+0x1b8>)
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	4a57      	ldr	r2, [pc, #348]	; (800a860 <HAL_RCC_ClockConfig+0x1b8>)
 800a702:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a706:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f003 0308 	and.w	r3, r3, #8
 800a710:	2b00      	cmp	r3, #0
 800a712:	d005      	beq.n	800a720 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a714:	4b52      	ldr	r3, [pc, #328]	; (800a860 <HAL_RCC_ClockConfig+0x1b8>)
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	4a51      	ldr	r2, [pc, #324]	; (800a860 <HAL_RCC_ClockConfig+0x1b8>)
 800a71a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a71e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a720:	4b4f      	ldr	r3, [pc, #316]	; (800a860 <HAL_RCC_ClockConfig+0x1b8>)
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	494c      	ldr	r1, [pc, #304]	; (800a860 <HAL_RCC_ClockConfig+0x1b8>)
 800a72e:	4313      	orrs	r3, r2
 800a730:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f003 0301 	and.w	r3, r3, #1
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d044      	beq.n	800a7c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	2b01      	cmp	r3, #1
 800a744:	d107      	bne.n	800a756 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a746:	4b46      	ldr	r3, [pc, #280]	; (800a860 <HAL_RCC_ClockConfig+0x1b8>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d119      	bne.n	800a786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a752:	2301      	movs	r3, #1
 800a754:	e07d      	b.n	800a852 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	2b02      	cmp	r3, #2
 800a75c:	d003      	beq.n	800a766 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a762:	2b03      	cmp	r3, #3
 800a764:	d107      	bne.n	800a776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a766:	4b3e      	ldr	r3, [pc, #248]	; (800a860 <HAL_RCC_ClockConfig+0x1b8>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d109      	bne.n	800a786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a772:	2301      	movs	r3, #1
 800a774:	e06d      	b.n	800a852 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a776:	4b3a      	ldr	r3, [pc, #232]	; (800a860 <HAL_RCC_ClockConfig+0x1b8>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 0302 	and.w	r3, r3, #2
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d101      	bne.n	800a786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	e065      	b.n	800a852 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a786:	4b36      	ldr	r3, [pc, #216]	; (800a860 <HAL_RCC_ClockConfig+0x1b8>)
 800a788:	689b      	ldr	r3, [r3, #8]
 800a78a:	f023 0203 	bic.w	r2, r3, #3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	4933      	ldr	r1, [pc, #204]	; (800a860 <HAL_RCC_ClockConfig+0x1b8>)
 800a794:	4313      	orrs	r3, r2
 800a796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a798:	f7fb fea2 	bl	80064e0 <HAL_GetTick>
 800a79c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a79e:	e00a      	b.n	800a7b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a7a0:	f7fb fe9e 	bl	80064e0 <HAL_GetTick>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d901      	bls.n	800a7b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a7b2:	2303      	movs	r3, #3
 800a7b4:	e04d      	b.n	800a852 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7b6:	4b2a      	ldr	r3, [pc, #168]	; (800a860 <HAL_RCC_ClockConfig+0x1b8>)
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	f003 020c 	and.w	r2, r3, #12
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d1eb      	bne.n	800a7a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a7c8:	4b24      	ldr	r3, [pc, #144]	; (800a85c <HAL_RCC_ClockConfig+0x1b4>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f003 030f 	and.w	r3, r3, #15
 800a7d0:	683a      	ldr	r2, [r7, #0]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d20c      	bcs.n	800a7f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7d6:	4b21      	ldr	r3, [pc, #132]	; (800a85c <HAL_RCC_ClockConfig+0x1b4>)
 800a7d8:	683a      	ldr	r2, [r7, #0]
 800a7da:	b2d2      	uxtb	r2, r2
 800a7dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7de:	4b1f      	ldr	r3, [pc, #124]	; (800a85c <HAL_RCC_ClockConfig+0x1b4>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f003 030f 	and.w	r3, r3, #15
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d001      	beq.n	800a7f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	e030      	b.n	800a852 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f003 0304 	and.w	r3, r3, #4
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d008      	beq.n	800a80e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a7fc:	4b18      	ldr	r3, [pc, #96]	; (800a860 <HAL_RCC_ClockConfig+0x1b8>)
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	4915      	ldr	r1, [pc, #84]	; (800a860 <HAL_RCC_ClockConfig+0x1b8>)
 800a80a:	4313      	orrs	r3, r2
 800a80c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 0308 	and.w	r3, r3, #8
 800a816:	2b00      	cmp	r3, #0
 800a818:	d009      	beq.n	800a82e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a81a:	4b11      	ldr	r3, [pc, #68]	; (800a860 <HAL_RCC_ClockConfig+0x1b8>)
 800a81c:	689b      	ldr	r3, [r3, #8]
 800a81e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	691b      	ldr	r3, [r3, #16]
 800a826:	00db      	lsls	r3, r3, #3
 800a828:	490d      	ldr	r1, [pc, #52]	; (800a860 <HAL_RCC_ClockConfig+0x1b8>)
 800a82a:	4313      	orrs	r3, r2
 800a82c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a82e:	f000 f81d 	bl	800a86c <HAL_RCC_GetSysClockFreq>
 800a832:	4602      	mov	r2, r0
 800a834:	4b0a      	ldr	r3, [pc, #40]	; (800a860 <HAL_RCC_ClockConfig+0x1b8>)
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	091b      	lsrs	r3, r3, #4
 800a83a:	f003 030f 	and.w	r3, r3, #15
 800a83e:	4909      	ldr	r1, [pc, #36]	; (800a864 <HAL_RCC_ClockConfig+0x1bc>)
 800a840:	5ccb      	ldrb	r3, [r1, r3]
 800a842:	fa22 f303 	lsr.w	r3, r2, r3
 800a846:	4a08      	ldr	r2, [pc, #32]	; (800a868 <HAL_RCC_ClockConfig+0x1c0>)
 800a848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800a84a:	200f      	movs	r0, #15
 800a84c:	f7fb fe04 	bl	8006458 <HAL_InitTick>

  return HAL_OK;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	40023c00 	.word	0x40023c00
 800a860:	40023800 	.word	0x40023800
 800a864:	0800d690 	.word	0x0800d690
 800a868:	200001ac 	.word	0x200001ac

0800a86c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a86c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a870:	b090      	sub	sp, #64	; 0x40
 800a872:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a874:	2300      	movs	r3, #0
 800a876:	637b      	str	r3, [r7, #52]	; 0x34
 800a878:	2300      	movs	r3, #0
 800a87a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a87c:	2300      	movs	r3, #0
 800a87e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800a880:	2300      	movs	r3, #0
 800a882:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a884:	4b59      	ldr	r3, [pc, #356]	; (800a9ec <HAL_RCC_GetSysClockFreq+0x180>)
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	f003 030c 	and.w	r3, r3, #12
 800a88c:	2b08      	cmp	r3, #8
 800a88e:	d00d      	beq.n	800a8ac <HAL_RCC_GetSysClockFreq+0x40>
 800a890:	2b08      	cmp	r3, #8
 800a892:	f200 80a1 	bhi.w	800a9d8 <HAL_RCC_GetSysClockFreq+0x16c>
 800a896:	2b00      	cmp	r3, #0
 800a898:	d002      	beq.n	800a8a0 <HAL_RCC_GetSysClockFreq+0x34>
 800a89a:	2b04      	cmp	r3, #4
 800a89c:	d003      	beq.n	800a8a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800a89e:	e09b      	b.n	800a9d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a8a0:	4b53      	ldr	r3, [pc, #332]	; (800a9f0 <HAL_RCC_GetSysClockFreq+0x184>)
 800a8a2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800a8a4:	e09b      	b.n	800a9de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a8a6:	4b53      	ldr	r3, [pc, #332]	; (800a9f4 <HAL_RCC_GetSysClockFreq+0x188>)
 800a8a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a8aa:	e098      	b.n	800a9de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a8ac:	4b4f      	ldr	r3, [pc, #316]	; (800a9ec <HAL_RCC_GetSysClockFreq+0x180>)
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a8b6:	4b4d      	ldr	r3, [pc, #308]	; (800a9ec <HAL_RCC_GetSysClockFreq+0x180>)
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d028      	beq.n	800a914 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a8c2:	4b4a      	ldr	r3, [pc, #296]	; (800a9ec <HAL_RCC_GetSysClockFreq+0x180>)
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	099b      	lsrs	r3, r3, #6
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	623b      	str	r3, [r7, #32]
 800a8cc:	627a      	str	r2, [r7, #36]	; 0x24
 800a8ce:	6a3b      	ldr	r3, [r7, #32]
 800a8d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	4b47      	ldr	r3, [pc, #284]	; (800a9f4 <HAL_RCC_GetSysClockFreq+0x188>)
 800a8d8:	fb03 f201 	mul.w	r2, r3, r1
 800a8dc:	2300      	movs	r3, #0
 800a8de:	fb00 f303 	mul.w	r3, r0, r3
 800a8e2:	4413      	add	r3, r2
 800a8e4:	4a43      	ldr	r2, [pc, #268]	; (800a9f4 <HAL_RCC_GetSysClockFreq+0x188>)
 800a8e6:	fba0 1202 	umull	r1, r2, r0, r2
 800a8ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a8ec:	460a      	mov	r2, r1
 800a8ee:	62ba      	str	r2, [r7, #40]	; 0x28
 800a8f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8f2:	4413      	add	r3, r2
 800a8f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	61bb      	str	r3, [r7, #24]
 800a8fc:	61fa      	str	r2, [r7, #28]
 800a8fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a902:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a906:	f7f6 f881 	bl	8000a0c <__aeabi_uldivmod>
 800a90a:	4602      	mov	r2, r0
 800a90c:	460b      	mov	r3, r1
 800a90e:	4613      	mov	r3, r2
 800a910:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a912:	e053      	b.n	800a9bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a914:	4b35      	ldr	r3, [pc, #212]	; (800a9ec <HAL_RCC_GetSysClockFreq+0x180>)
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	099b      	lsrs	r3, r3, #6
 800a91a:	2200      	movs	r2, #0
 800a91c:	613b      	str	r3, [r7, #16]
 800a91e:	617a      	str	r2, [r7, #20]
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a926:	f04f 0b00 	mov.w	fp, #0
 800a92a:	4652      	mov	r2, sl
 800a92c:	465b      	mov	r3, fp
 800a92e:	f04f 0000 	mov.w	r0, #0
 800a932:	f04f 0100 	mov.w	r1, #0
 800a936:	0159      	lsls	r1, r3, #5
 800a938:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a93c:	0150      	lsls	r0, r2, #5
 800a93e:	4602      	mov	r2, r0
 800a940:	460b      	mov	r3, r1
 800a942:	ebb2 080a 	subs.w	r8, r2, sl
 800a946:	eb63 090b 	sbc.w	r9, r3, fp
 800a94a:	f04f 0200 	mov.w	r2, #0
 800a94e:	f04f 0300 	mov.w	r3, #0
 800a952:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a956:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a95a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a95e:	ebb2 0408 	subs.w	r4, r2, r8
 800a962:	eb63 0509 	sbc.w	r5, r3, r9
 800a966:	f04f 0200 	mov.w	r2, #0
 800a96a:	f04f 0300 	mov.w	r3, #0
 800a96e:	00eb      	lsls	r3, r5, #3
 800a970:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a974:	00e2      	lsls	r2, r4, #3
 800a976:	4614      	mov	r4, r2
 800a978:	461d      	mov	r5, r3
 800a97a:	eb14 030a 	adds.w	r3, r4, sl
 800a97e:	603b      	str	r3, [r7, #0]
 800a980:	eb45 030b 	adc.w	r3, r5, fp
 800a984:	607b      	str	r3, [r7, #4]
 800a986:	f04f 0200 	mov.w	r2, #0
 800a98a:	f04f 0300 	mov.w	r3, #0
 800a98e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a992:	4629      	mov	r1, r5
 800a994:	028b      	lsls	r3, r1, #10
 800a996:	4621      	mov	r1, r4
 800a998:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a99c:	4621      	mov	r1, r4
 800a99e:	028a      	lsls	r2, r1, #10
 800a9a0:	4610      	mov	r0, r2
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	60bb      	str	r3, [r7, #8]
 800a9aa:	60fa      	str	r2, [r7, #12]
 800a9ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a9b0:	f7f6 f82c 	bl	8000a0c <__aeabi_uldivmod>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a9bc:	4b0b      	ldr	r3, [pc, #44]	; (800a9ec <HAL_RCC_GetSysClockFreq+0x180>)
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	0c1b      	lsrs	r3, r3, #16
 800a9c2:	f003 0303 	and.w	r3, r3, #3
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	005b      	lsls	r3, r3, #1
 800a9ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800a9cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a9d6:	e002      	b.n	800a9de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a9d8:	4b05      	ldr	r3, [pc, #20]	; (800a9f0 <HAL_RCC_GetSysClockFreq+0x184>)
 800a9da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a9dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3740      	adds	r7, #64	; 0x40
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9ea:	bf00      	nop
 800a9ec:	40023800 	.word	0x40023800
 800a9f0:	00f42400 	.word	0x00f42400
 800a9f4:	017d7840 	.word	0x017d7840

0800a9f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a9fc:	4b03      	ldr	r3, [pc, #12]	; (800aa0c <HAL_RCC_GetHCLKFreq+0x14>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	200001ac 	.word	0x200001ac

0800aa10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800aa14:	f7ff fff0 	bl	800a9f8 <HAL_RCC_GetHCLKFreq>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	4b05      	ldr	r3, [pc, #20]	; (800aa30 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	0a9b      	lsrs	r3, r3, #10
 800aa20:	f003 0307 	and.w	r3, r3, #7
 800aa24:	4903      	ldr	r1, [pc, #12]	; (800aa34 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa26:	5ccb      	ldrb	r3, [r1, r3]
 800aa28:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	40023800 	.word	0x40023800
 800aa34:	0800d6a0 	.word	0x0800d6a0

0800aa38 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b086      	sub	sp, #24
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aa40:	2300      	movs	r3, #0
 800aa42:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f003 0301 	and.w	r3, r3, #1
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d075      	beq.n	800ab3c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800aa50:	4b88      	ldr	r3, [pc, #544]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	f003 030c 	and.w	r3, r3, #12
 800aa58:	2b04      	cmp	r3, #4
 800aa5a:	d00c      	beq.n	800aa76 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aa5c:	4b85      	ldr	r3, [pc, #532]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800aa64:	2b08      	cmp	r3, #8
 800aa66:	d112      	bne.n	800aa8e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aa68:	4b82      	ldr	r3, [pc, #520]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa74:	d10b      	bne.n	800aa8e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa76:	4b7f      	ldr	r3, [pc, #508]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d05b      	beq.n	800ab3a <HAL_RCC_OscConfig+0x102>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d157      	bne.n	800ab3a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	e20a      	b.n	800aea4 <HAL_RCC_OscConfig+0x46c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa96:	d106      	bne.n	800aaa6 <HAL_RCC_OscConfig+0x6e>
 800aa98:	4b76      	ldr	r3, [pc, #472]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a75      	ldr	r2, [pc, #468]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800aa9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aaa2:	6013      	str	r3, [r2, #0]
 800aaa4:	e01d      	b.n	800aae2 <HAL_RCC_OscConfig+0xaa>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aaae:	d10c      	bne.n	800aaca <HAL_RCC_OscConfig+0x92>
 800aab0:	4b70      	ldr	r3, [pc, #448]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a6f      	ldr	r2, [pc, #444]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800aab6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aaba:	6013      	str	r3, [r2, #0]
 800aabc:	4b6d      	ldr	r3, [pc, #436]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a6c      	ldr	r2, [pc, #432]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800aac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aac6:	6013      	str	r3, [r2, #0]
 800aac8:	e00b      	b.n	800aae2 <HAL_RCC_OscConfig+0xaa>
 800aaca:	4b6a      	ldr	r3, [pc, #424]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a69      	ldr	r2, [pc, #420]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800aad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aad4:	6013      	str	r3, [r2, #0]
 800aad6:	4b67      	ldr	r3, [pc, #412]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a66      	ldr	r2, [pc, #408]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800aadc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aae0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d013      	beq.n	800ab12 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaea:	f7fb fcf9 	bl	80064e0 <HAL_GetTick>
 800aaee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aaf0:	e008      	b.n	800ab04 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aaf2:	f7fb fcf5 	bl	80064e0 <HAL_GetTick>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	1ad3      	subs	r3, r2, r3
 800aafc:	2b64      	cmp	r3, #100	; 0x64
 800aafe:	d901      	bls.n	800ab04 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800ab00:	2303      	movs	r3, #3
 800ab02:	e1cf      	b.n	800aea4 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab04:	4b5b      	ldr	r3, [pc, #364]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d0f0      	beq.n	800aaf2 <HAL_RCC_OscConfig+0xba>
 800ab10:	e014      	b.n	800ab3c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab12:	f7fb fce5 	bl	80064e0 <HAL_GetTick>
 800ab16:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ab18:	e008      	b.n	800ab2c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ab1a:	f7fb fce1 	bl	80064e0 <HAL_GetTick>
 800ab1e:	4602      	mov	r2, r0
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	1ad3      	subs	r3, r2, r3
 800ab24:	2b64      	cmp	r3, #100	; 0x64
 800ab26:	d901      	bls.n	800ab2c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800ab28:	2303      	movs	r3, #3
 800ab2a:	e1bb      	b.n	800aea4 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ab2c:	4b51      	ldr	r3, [pc, #324]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1f0      	bne.n	800ab1a <HAL_RCC_OscConfig+0xe2>
 800ab38:	e000      	b.n	800ab3c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab3a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f003 0302 	and.w	r3, r3, #2
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d063      	beq.n	800ac10 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ab48:	4b4a      	ldr	r3, [pc, #296]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	f003 030c 	and.w	r3, r3, #12
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00b      	beq.n	800ab6c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ab54:	4b47      	ldr	r3, [pc, #284]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ab5c:	2b08      	cmp	r3, #8
 800ab5e:	d11c      	bne.n	800ab9a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ab60:	4b44      	ldr	r3, [pc, #272]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d116      	bne.n	800ab9a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab6c:	4b41      	ldr	r3, [pc, #260]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f003 0302 	and.w	r3, r3, #2
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d005      	beq.n	800ab84 <HAL_RCC_OscConfig+0x14c>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d001      	beq.n	800ab84 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800ab80:	2301      	movs	r3, #1
 800ab82:	e18f      	b.n	800aea4 <HAL_RCC_OscConfig+0x46c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab84:	4b3b      	ldr	r3, [pc, #236]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	691b      	ldr	r3, [r3, #16]
 800ab90:	00db      	lsls	r3, r3, #3
 800ab92:	4938      	ldr	r1, [pc, #224]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800ab94:	4313      	orrs	r3, r2
 800ab96:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab98:	e03a      	b.n	800ac10 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d020      	beq.n	800abe4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aba2:	4b35      	ldr	r3, [pc, #212]	; (800ac78 <HAL_RCC_OscConfig+0x240>)
 800aba4:	2201      	movs	r2, #1
 800aba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aba8:	f7fb fc9a 	bl	80064e0 <HAL_GetTick>
 800abac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800abae:	e008      	b.n	800abc2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800abb0:	f7fb fc96 	bl	80064e0 <HAL_GetTick>
 800abb4:	4602      	mov	r2, r0
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	1ad3      	subs	r3, r2, r3
 800abba:	2b02      	cmp	r3, #2
 800abbc:	d901      	bls.n	800abc2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800abbe:	2303      	movs	r3, #3
 800abc0:	e170      	b.n	800aea4 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800abc2:	4b2c      	ldr	r3, [pc, #176]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f003 0302 	and.w	r3, r3, #2
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d0f0      	beq.n	800abb0 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abce:	4b29      	ldr	r3, [pc, #164]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	691b      	ldr	r3, [r3, #16]
 800abda:	00db      	lsls	r3, r3, #3
 800abdc:	4925      	ldr	r1, [pc, #148]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800abde:	4313      	orrs	r3, r2
 800abe0:	600b      	str	r3, [r1, #0]
 800abe2:	e015      	b.n	800ac10 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800abe4:	4b24      	ldr	r3, [pc, #144]	; (800ac78 <HAL_RCC_OscConfig+0x240>)
 800abe6:	2200      	movs	r2, #0
 800abe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abea:	f7fb fc79 	bl	80064e0 <HAL_GetTick>
 800abee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800abf0:	e008      	b.n	800ac04 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800abf2:	f7fb fc75 	bl	80064e0 <HAL_GetTick>
 800abf6:	4602      	mov	r2, r0
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	1ad3      	subs	r3, r2, r3
 800abfc:	2b02      	cmp	r3, #2
 800abfe:	d901      	bls.n	800ac04 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800ac00:	2303      	movs	r3, #3
 800ac02:	e14f      	b.n	800aea4 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ac04:	4b1b      	ldr	r3, [pc, #108]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f003 0302 	and.w	r3, r3, #2
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d1f0      	bne.n	800abf2 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 0308 	and.w	r3, r3, #8
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d037      	beq.n	800ac8c <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	695b      	ldr	r3, [r3, #20]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d016      	beq.n	800ac52 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ac24:	4b15      	ldr	r3, [pc, #84]	; (800ac7c <HAL_RCC_OscConfig+0x244>)
 800ac26:	2201      	movs	r2, #1
 800ac28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac2a:	f7fb fc59 	bl	80064e0 <HAL_GetTick>
 800ac2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ac30:	e008      	b.n	800ac44 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ac32:	f7fb fc55 	bl	80064e0 <HAL_GetTick>
 800ac36:	4602      	mov	r2, r0
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	1ad3      	subs	r3, r2, r3
 800ac3c:	2b02      	cmp	r3, #2
 800ac3e:	d901      	bls.n	800ac44 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800ac40:	2303      	movs	r3, #3
 800ac42:	e12f      	b.n	800aea4 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ac44:	4b0b      	ldr	r3, [pc, #44]	; (800ac74 <HAL_RCC_OscConfig+0x23c>)
 800ac46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac48:	f003 0302 	and.w	r3, r3, #2
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d0f0      	beq.n	800ac32 <HAL_RCC_OscConfig+0x1fa>
 800ac50:	e01c      	b.n	800ac8c <HAL_RCC_OscConfig+0x254>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ac52:	4b0a      	ldr	r3, [pc, #40]	; (800ac7c <HAL_RCC_OscConfig+0x244>)
 800ac54:	2200      	movs	r2, #0
 800ac56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac58:	f7fb fc42 	bl	80064e0 <HAL_GetTick>
 800ac5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ac5e:	e00f      	b.n	800ac80 <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ac60:	f7fb fc3e 	bl	80064e0 <HAL_GetTick>
 800ac64:	4602      	mov	r2, r0
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	1ad3      	subs	r3, r2, r3
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d908      	bls.n	800ac80 <HAL_RCC_OscConfig+0x248>
        {
          return HAL_TIMEOUT;
 800ac6e:	2303      	movs	r3, #3
 800ac70:	e118      	b.n	800aea4 <HAL_RCC_OscConfig+0x46c>
 800ac72:	bf00      	nop
 800ac74:	40023800 	.word	0x40023800
 800ac78:	42470000 	.word	0x42470000
 800ac7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ac80:	4b8a      	ldr	r3, [pc, #552]	; (800aeac <HAL_RCC_OscConfig+0x474>)
 800ac82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac84:	f003 0302 	and.w	r3, r3, #2
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d1e9      	bne.n	800ac60 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f003 0304 	and.w	r3, r3, #4
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f000 8097 	beq.w	800adc8 <HAL_RCC_OscConfig+0x390>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ac9e:	4b83      	ldr	r3, [pc, #524]	; (800aeac <HAL_RCC_OscConfig+0x474>)
 800aca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d10f      	bne.n	800acca <HAL_RCC_OscConfig+0x292>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800acaa:	2300      	movs	r3, #0
 800acac:	60fb      	str	r3, [r7, #12]
 800acae:	4b7f      	ldr	r3, [pc, #508]	; (800aeac <HAL_RCC_OscConfig+0x474>)
 800acb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb2:	4a7e      	ldr	r2, [pc, #504]	; (800aeac <HAL_RCC_OscConfig+0x474>)
 800acb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acb8:	6413      	str	r3, [r2, #64]	; 0x40
 800acba:	4b7c      	ldr	r3, [pc, #496]	; (800aeac <HAL_RCC_OscConfig+0x474>)
 800acbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acc2:	60fb      	str	r3, [r7, #12]
 800acc4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800acc6:	2301      	movs	r3, #1
 800acc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800acca:	4b79      	ldr	r3, [pc, #484]	; (800aeb0 <HAL_RCC_OscConfig+0x478>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d118      	bne.n	800ad08 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800acd6:	4b76      	ldr	r3, [pc, #472]	; (800aeb0 <HAL_RCC_OscConfig+0x478>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a75      	ldr	r2, [pc, #468]	; (800aeb0 <HAL_RCC_OscConfig+0x478>)
 800acdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ace0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ace2:	f7fb fbfd 	bl	80064e0 <HAL_GetTick>
 800ace6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ace8:	e008      	b.n	800acfc <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800acea:	f7fb fbf9 	bl	80064e0 <HAL_GetTick>
 800acee:	4602      	mov	r2, r0
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	1ad3      	subs	r3, r2, r3
 800acf4:	2b02      	cmp	r3, #2
 800acf6:	d901      	bls.n	800acfc <HAL_RCC_OscConfig+0x2c4>
        {
          return HAL_TIMEOUT;
 800acf8:	2303      	movs	r3, #3
 800acfa:	e0d3      	b.n	800aea4 <HAL_RCC_OscConfig+0x46c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800acfc:	4b6c      	ldr	r3, [pc, #432]	; (800aeb0 <HAL_RCC_OscConfig+0x478>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d0f0      	beq.n	800acea <HAL_RCC_OscConfig+0x2b2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d106      	bne.n	800ad1e <HAL_RCC_OscConfig+0x2e6>
 800ad10:	4b66      	ldr	r3, [pc, #408]	; (800aeac <HAL_RCC_OscConfig+0x474>)
 800ad12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad14:	4a65      	ldr	r2, [pc, #404]	; (800aeac <HAL_RCC_OscConfig+0x474>)
 800ad16:	f043 0301 	orr.w	r3, r3, #1
 800ad1a:	6713      	str	r3, [r2, #112]	; 0x70
 800ad1c:	e01c      	b.n	800ad58 <HAL_RCC_OscConfig+0x320>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	2b05      	cmp	r3, #5
 800ad24:	d10c      	bne.n	800ad40 <HAL_RCC_OscConfig+0x308>
 800ad26:	4b61      	ldr	r3, [pc, #388]	; (800aeac <HAL_RCC_OscConfig+0x474>)
 800ad28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad2a:	4a60      	ldr	r2, [pc, #384]	; (800aeac <HAL_RCC_OscConfig+0x474>)
 800ad2c:	f043 0304 	orr.w	r3, r3, #4
 800ad30:	6713      	str	r3, [r2, #112]	; 0x70
 800ad32:	4b5e      	ldr	r3, [pc, #376]	; (800aeac <HAL_RCC_OscConfig+0x474>)
 800ad34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad36:	4a5d      	ldr	r2, [pc, #372]	; (800aeac <HAL_RCC_OscConfig+0x474>)
 800ad38:	f043 0301 	orr.w	r3, r3, #1
 800ad3c:	6713      	str	r3, [r2, #112]	; 0x70
 800ad3e:	e00b      	b.n	800ad58 <HAL_RCC_OscConfig+0x320>
 800ad40:	4b5a      	ldr	r3, [pc, #360]	; (800aeac <HAL_RCC_OscConfig+0x474>)
 800ad42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad44:	4a59      	ldr	r2, [pc, #356]	; (800aeac <HAL_RCC_OscConfig+0x474>)
 800ad46:	f023 0301 	bic.w	r3, r3, #1
 800ad4a:	6713      	str	r3, [r2, #112]	; 0x70
 800ad4c:	4b57      	ldr	r3, [pc, #348]	; (800aeac <HAL_RCC_OscConfig+0x474>)
 800ad4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad50:	4a56      	ldr	r2, [pc, #344]	; (800aeac <HAL_RCC_OscConfig+0x474>)
 800ad52:	f023 0304 	bic.w	r3, r3, #4
 800ad56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	689b      	ldr	r3, [r3, #8]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d015      	beq.n	800ad8c <HAL_RCC_OscConfig+0x354>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad60:	f7fb fbbe 	bl	80064e0 <HAL_GetTick>
 800ad64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad66:	e00a      	b.n	800ad7e <HAL_RCC_OscConfig+0x346>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ad68:	f7fb fbba 	bl	80064e0 <HAL_GetTick>
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	1ad3      	subs	r3, r2, r3
 800ad72:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d901      	bls.n	800ad7e <HAL_RCC_OscConfig+0x346>
        {
          return HAL_TIMEOUT;
 800ad7a:	2303      	movs	r3, #3
 800ad7c:	e092      	b.n	800aea4 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad7e:	4b4b      	ldr	r3, [pc, #300]	; (800aeac <HAL_RCC_OscConfig+0x474>)
 800ad80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad82:	f003 0302 	and.w	r3, r3, #2
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d0ee      	beq.n	800ad68 <HAL_RCC_OscConfig+0x330>
 800ad8a:	e014      	b.n	800adb6 <HAL_RCC_OscConfig+0x37e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad8c:	f7fb fba8 	bl	80064e0 <HAL_GetTick>
 800ad90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ad92:	e00a      	b.n	800adaa <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ad94:	f7fb fba4 	bl	80064e0 <HAL_GetTick>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	1ad3      	subs	r3, r2, r3
 800ad9e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d901      	bls.n	800adaa <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800ada6:	2303      	movs	r3, #3
 800ada8:	e07c      	b.n	800aea4 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800adaa:	4b40      	ldr	r3, [pc, #256]	; (800aeac <HAL_RCC_OscConfig+0x474>)
 800adac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adae:	f003 0302 	and.w	r3, r3, #2
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1ee      	bne.n	800ad94 <HAL_RCC_OscConfig+0x35c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800adb6:	7dfb      	ldrb	r3, [r7, #23]
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d105      	bne.n	800adc8 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800adbc:	4b3b      	ldr	r3, [pc, #236]	; (800aeac <HAL_RCC_OscConfig+0x474>)
 800adbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc0:	4a3a      	ldr	r2, [pc, #232]	; (800aeac <HAL_RCC_OscConfig+0x474>)
 800adc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800adc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	699b      	ldr	r3, [r3, #24]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d068      	beq.n	800aea2 <HAL_RCC_OscConfig+0x46a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800add0:	4b36      	ldr	r3, [pc, #216]	; (800aeac <HAL_RCC_OscConfig+0x474>)
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	f003 030c 	and.w	r3, r3, #12
 800add8:	2b08      	cmp	r3, #8
 800adda:	d060      	beq.n	800ae9e <HAL_RCC_OscConfig+0x466>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	699b      	ldr	r3, [r3, #24]
 800ade0:	2b02      	cmp	r3, #2
 800ade2:	d145      	bne.n	800ae70 <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ade4:	4b33      	ldr	r3, [pc, #204]	; (800aeb4 <HAL_RCC_OscConfig+0x47c>)
 800ade6:	2200      	movs	r2, #0
 800ade8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adea:	f7fb fb79 	bl	80064e0 <HAL_GetTick>
 800adee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800adf0:	e008      	b.n	800ae04 <HAL_RCC_OscConfig+0x3cc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800adf2:	f7fb fb75 	bl	80064e0 <HAL_GetTick>
 800adf6:	4602      	mov	r2, r0
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	2b02      	cmp	r3, #2
 800adfe:	d901      	bls.n	800ae04 <HAL_RCC_OscConfig+0x3cc>
          {
            return HAL_TIMEOUT;
 800ae00:	2303      	movs	r3, #3
 800ae02:	e04f      	b.n	800aea4 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae04:	4b29      	ldr	r3, [pc, #164]	; (800aeac <HAL_RCC_OscConfig+0x474>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d1f0      	bne.n	800adf2 <HAL_RCC_OscConfig+0x3ba>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	69da      	ldr	r2, [r3, #28]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6a1b      	ldr	r3, [r3, #32]
 800ae18:	431a      	orrs	r2, r3
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1e:	019b      	lsls	r3, r3, #6
 800ae20:	431a      	orrs	r2, r3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae26:	085b      	lsrs	r3, r3, #1
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	041b      	lsls	r3, r3, #16
 800ae2c:	431a      	orrs	r2, r3
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae32:	061b      	lsls	r3, r3, #24
 800ae34:	431a      	orrs	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae3a:	071b      	lsls	r3, r3, #28
 800ae3c:	491b      	ldr	r1, [pc, #108]	; (800aeac <HAL_RCC_OscConfig+0x474>)
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ae42:	4b1c      	ldr	r3, [pc, #112]	; (800aeb4 <HAL_RCC_OscConfig+0x47c>)
 800ae44:	2201      	movs	r2, #1
 800ae46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae48:	f7fb fb4a 	bl	80064e0 <HAL_GetTick>
 800ae4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae4e:	e008      	b.n	800ae62 <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae50:	f7fb fb46 	bl	80064e0 <HAL_GetTick>
 800ae54:	4602      	mov	r2, r0
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	1ad3      	subs	r3, r2, r3
 800ae5a:	2b02      	cmp	r3, #2
 800ae5c:	d901      	bls.n	800ae62 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800ae5e:	2303      	movs	r3, #3
 800ae60:	e020      	b.n	800aea4 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae62:	4b12      	ldr	r3, [pc, #72]	; (800aeac <HAL_RCC_OscConfig+0x474>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d0f0      	beq.n	800ae50 <HAL_RCC_OscConfig+0x418>
 800ae6e:	e018      	b.n	800aea2 <HAL_RCC_OscConfig+0x46a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae70:	4b10      	ldr	r3, [pc, #64]	; (800aeb4 <HAL_RCC_OscConfig+0x47c>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae76:	f7fb fb33 	bl	80064e0 <HAL_GetTick>
 800ae7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae7c:	e008      	b.n	800ae90 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae7e:	f7fb fb2f 	bl	80064e0 <HAL_GetTick>
 800ae82:	4602      	mov	r2, r0
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	1ad3      	subs	r3, r2, r3
 800ae88:	2b02      	cmp	r3, #2
 800ae8a:	d901      	bls.n	800ae90 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800ae8c:	2303      	movs	r3, #3
 800ae8e:	e009      	b.n	800aea4 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae90:	4b06      	ldr	r3, [pc, #24]	; (800aeac <HAL_RCC_OscConfig+0x474>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1f0      	bne.n	800ae7e <HAL_RCC_OscConfig+0x446>
 800ae9c:	e001      	b.n	800aea2 <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e000      	b.n	800aea4 <HAL_RCC_OscConfig+0x46c>
    }
  }
  return HAL_OK;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3718      	adds	r7, #24
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	40023800 	.word	0x40023800
 800aeb0:	40007000 	.word	0x40007000
 800aeb4:	42470060 	.word	0x42470060

0800aeb8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b086      	sub	sp, #24
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	4613      	mov	r3, r2
 800aec4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	2b20      	cmp	r3, #32
 800aed0:	d153      	bne.n	800af7a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d002      	beq.n	800aede <HAL_UART_Transmit_DMA+0x26>
 800aed8:	88fb      	ldrh	r3, [r7, #6]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d101      	bne.n	800aee2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800aede:	2301      	movs	r3, #1
 800aee0:	e04c      	b.n	800af7c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d101      	bne.n	800aef0 <HAL_UART_Transmit_DMA+0x38>
 800aeec:	2302      	movs	r3, #2
 800aeee:	e045      	b.n	800af7c <HAL_UART_Transmit_DMA+0xc4>
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2201      	movs	r2, #1
 800aef4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800aef8:	68ba      	ldr	r2, [r7, #8]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	88fa      	ldrh	r2, [r7, #6]
 800af02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	88fa      	ldrh	r2, [r7, #6]
 800af08:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2200      	movs	r2, #0
 800af0e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2221      	movs	r2, #33	; 0x21
 800af14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af1c:	4a19      	ldr	r2, [pc, #100]	; (800af84 <HAL_UART_Transmit_DMA+0xcc>)
 800af1e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af24:	4a18      	ldr	r2, [pc, #96]	; (800af88 <HAL_UART_Transmit_DMA+0xd0>)
 800af26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af2c:	4a17      	ldr	r2, [pc, #92]	; (800af8c <HAL_UART_Transmit_DMA+0xd4>)
 800af2e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af34:	2200      	movs	r2, #0
 800af36:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800af38:	f107 0308 	add.w	r3, r7, #8
 800af3c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	6819      	ldr	r1, [r3, #0]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	3304      	adds	r3, #4
 800af4c:	461a      	mov	r2, r3
 800af4e:	88fb      	ldrh	r3, [r7, #6]
 800af50:	f7fc fe70 	bl	8007c34 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af5c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2200      	movs	r2, #0
 800af62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	695a      	ldr	r2, [r3, #20]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800af74:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800af76:	2300      	movs	r3, #0
 800af78:	e000      	b.n	800af7c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800af7a:	2302      	movs	r3, #2
  }
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3718      	adds	r7, #24
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	0800b371 	.word	0x0800b371
 800af88:	0800b3c3 	.word	0x0800b3c3
 800af8c:	0800b463 	.word	0x0800b463

0800af90 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	4613      	mov	r3, r2
 800af9c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	2b20      	cmp	r3, #32
 800afa8:	d166      	bne.n	800b078 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d002      	beq.n	800afb6 <HAL_UART_Receive_DMA+0x26>
 800afb0:	88fb      	ldrh	r3, [r7, #6]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d101      	bne.n	800afba <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800afb6:	2301      	movs	r3, #1
 800afb8:	e05f      	b.n	800b07a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d101      	bne.n	800afc8 <HAL_UART_Receive_DMA+0x38>
 800afc4:	2302      	movs	r3, #2
 800afc6:	e058      	b.n	800b07a <HAL_UART_Receive_DMA+0xea>
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800afd0:	68ba      	ldr	r2, [r7, #8]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	88fa      	ldrh	r2, [r7, #6]
 800afda:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2200      	movs	r2, #0
 800afe0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2222      	movs	r2, #34	; 0x22
 800afe6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afee:	4a25      	ldr	r2, [pc, #148]	; (800b084 <HAL_UART_Receive_DMA+0xf4>)
 800aff0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aff6:	4a24      	ldr	r2, [pc, #144]	; (800b088 <HAL_UART_Receive_DMA+0xf8>)
 800aff8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800affe:	4a23      	ldr	r2, [pc, #140]	; (800b08c <HAL_UART_Receive_DMA+0xfc>)
 800b000:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b006:	2200      	movs	r2, #0
 800b008:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800b00a:	f107 0308 	add.w	r3, r7, #8
 800b00e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	3304      	adds	r3, #4
 800b01a:	4619      	mov	r1, r3
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	681a      	ldr	r2, [r3, #0]
 800b020:	88fb      	ldrh	r3, [r7, #6]
 800b022:	f7fc fe07 	bl	8007c34 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800b026:	2300      	movs	r3, #0
 800b028:	613b      	str	r3, [r7, #16]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	613b      	str	r3, [r7, #16]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	613b      	str	r3, [r7, #16]
 800b03a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2200      	movs	r2, #0
 800b040:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	68da      	ldr	r2, [r3, #12]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b052:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	695a      	ldr	r2, [r3, #20]
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f042 0201 	orr.w	r2, r2, #1
 800b062:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	695a      	ldr	r2, [r3, #20]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b072:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800b074:	2300      	movs	r3, #0
 800b076:	e000      	b.n	800b07a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b078:	2302      	movs	r3, #2
  }
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3718      	adds	r7, #24
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	0800b3df 	.word	0x0800b3df
 800b088:	0800b447 	.word	0x0800b447
 800b08c:	0800b463 	.word	0x0800b463

0800b090 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	68da      	ldr	r2, [r3, #12]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b0a6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	695a      	ldr	r2, [r3, #20]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f022 0201 	bic.w	r2, r2, #1
 800b0b6:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	695b      	ldr	r3, [r3, #20]
 800b0be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0c2:	2b40      	cmp	r3, #64	; 0x40
 800b0c4:	d12a      	bne.n	800b11c <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	695a      	ldr	r2, [r3, #20]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0d4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d013      	beq.n	800b106 <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0e2:	4a16      	ldr	r2, [pc, #88]	; (800b13c <HAL_UART_AbortReceive_IT+0xac>)
 800b0e4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7fc fe02 	bl	8007cf4 <HAL_DMA_Abort_IT>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d01c      	beq.n	800b130 <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b100:	4610      	mov	r0, r2
 800b102:	4798      	blx	r3
 800b104:	e014      	b.n	800b130 <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2220      	movs	r2, #32
 800b110:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f7f9 fc1f 	bl	8004958 <HAL_UART_AbortReceiveCpltCallback>
 800b11a:	e009      	b.n	800b130 <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2220      	movs	r2, #32
 800b126:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f7f9 fc14 	bl	8004958 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800b130:	2300      	movs	r3, #0
}
 800b132:	4618      	mov	r0, r3
 800b134:	3708      	adds	r7, #8
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	0800b587 	.word	0x0800b587

0800b140 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b088      	sub	sp, #32
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	68db      	ldr	r3, [r3, #12]
 800b156:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	695b      	ldr	r3, [r3, #20]
 800b15e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800b160:	2300      	movs	r3, #0
 800b162:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800b164:	2300      	movs	r3, #0
 800b166:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b168:	69fb      	ldr	r3, [r7, #28]
 800b16a:	f003 030f 	and.w	r3, r3, #15
 800b16e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d10d      	bne.n	800b192 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	f003 0320 	and.w	r3, r3, #32
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d008      	beq.n	800b192 <HAL_UART_IRQHandler+0x52>
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	f003 0320 	and.w	r3, r3, #32
 800b186:	2b00      	cmp	r3, #0
 800b188:	d003      	beq.n	800b192 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 fa7e 	bl	800b68c <UART_Receive_IT>
      return;
 800b190:	e0cb      	b.n	800b32a <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	2b00      	cmp	r3, #0
 800b196:	f000 80ab 	beq.w	800b2f0 <HAL_UART_IRQHandler+0x1b0>
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	f003 0301 	and.w	r3, r3, #1
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d105      	bne.n	800b1b0 <HAL_UART_IRQHandler+0x70>
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	f000 80a0 	beq.w	800b2f0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	f003 0301 	and.w	r3, r3, #1
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d00a      	beq.n	800b1d0 <HAL_UART_IRQHandler+0x90>
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d005      	beq.n	800b1d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1c8:	f043 0201 	orr.w	r2, r3, #1
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	f003 0304 	and.w	r3, r3, #4
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00a      	beq.n	800b1f0 <HAL_UART_IRQHandler+0xb0>
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	f003 0301 	and.w	r3, r3, #1
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d005      	beq.n	800b1f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1e8:	f043 0202 	orr.w	r2, r3, #2
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	f003 0302 	and.w	r3, r3, #2
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d00a      	beq.n	800b210 <HAL_UART_IRQHandler+0xd0>
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	f003 0301 	and.w	r3, r3, #1
 800b200:	2b00      	cmp	r3, #0
 800b202:	d005      	beq.n	800b210 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b208:	f043 0204 	orr.w	r2, r3, #4
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	f003 0308 	and.w	r3, r3, #8
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00a      	beq.n	800b230 <HAL_UART_IRQHandler+0xf0>
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	f003 0301 	and.w	r3, r3, #1
 800b220:	2b00      	cmp	r3, #0
 800b222:	d005      	beq.n	800b230 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b228:	f043 0208 	orr.w	r2, r3, #8
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b234:	2b00      	cmp	r3, #0
 800b236:	d077      	beq.n	800b328 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	f003 0320 	and.w	r3, r3, #32
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d007      	beq.n	800b252 <HAL_UART_IRQHandler+0x112>
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	f003 0320 	and.w	r3, r3, #32
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d002      	beq.n	800b252 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f000 fa1d 	bl	800b68c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	695b      	ldr	r3, [r3, #20]
 800b258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b25c:	2b40      	cmp	r3, #64	; 0x40
 800b25e:	bf0c      	ite	eq
 800b260:	2301      	moveq	r3, #1
 800b262:	2300      	movne	r3, #0
 800b264:	b2db      	uxtb	r3, r3
 800b266:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b26c:	f003 0308 	and.w	r3, r3, #8
 800b270:	2b00      	cmp	r3, #0
 800b272:	d102      	bne.n	800b27a <HAL_UART_IRQHandler+0x13a>
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d031      	beq.n	800b2de <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 f951 	bl	800b522 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	695b      	ldr	r3, [r3, #20]
 800b286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b28a:	2b40      	cmp	r3, #64	; 0x40
 800b28c:	d123      	bne.n	800b2d6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	695a      	ldr	r2, [r3, #20]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b29c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d013      	beq.n	800b2ce <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2aa:	4a21      	ldr	r2, [pc, #132]	; (800b330 <HAL_UART_IRQHandler+0x1f0>)
 800b2ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7fc fd1e 	bl	8007cf4 <HAL_DMA_Abort_IT>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d016      	beq.n	800b2ec <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b2c8:	4610      	mov	r0, r2
 800b2ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2cc:	e00e      	b.n	800b2ec <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 f844 	bl	800b35c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2d4:	e00a      	b.n	800b2ec <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 f840 	bl	800b35c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2dc:	e006      	b.n	800b2ec <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 f83c 	bl	800b35c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800b2ea:	e01d      	b.n	800b328 <HAL_UART_IRQHandler+0x1e8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2ec:	bf00      	nop
    return;
 800b2ee:	e01b      	b.n	800b328 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d008      	beq.n	800b30c <HAL_UART_IRQHandler+0x1cc>
 800b2fa:	69bb      	ldr	r3, [r7, #24]
 800b2fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b300:	2b00      	cmp	r3, #0
 800b302:	d003      	beq.n	800b30c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f000 f953 	bl	800b5b0 <UART_Transmit_IT>
    return;
 800b30a:	e00e      	b.n	800b32a <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b312:	2b00      	cmp	r3, #0
 800b314:	d009      	beq.n	800b32a <HAL_UART_IRQHandler+0x1ea>
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d004      	beq.n	800b32a <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 f99b 	bl	800b65c <UART_EndTransmit_IT>
    return;
 800b326:	e000      	b.n	800b32a <HAL_UART_IRQHandler+0x1ea>
    return;
 800b328:	bf00      	nop
  }
}
 800b32a:	3720      	adds	r7, #32
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	0800b55f 	.word	0x0800b55f

0800b334 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b33c:	bf00      	nop
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b350:	bf00      	nop
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b364:	bf00      	nop
 800b366:	370c      	adds	r7, #12
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b37c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d113      	bne.n	800b3b4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2200      	movs	r2, #0
 800b390:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	695a      	ldr	r2, [r3, #20]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b3a0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	68da      	ldr	r2, [r3, #12]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3b0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b3b2:	e002      	b.n	800b3ba <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800b3b4:	68f8      	ldr	r0, [r7, #12]
 800b3b6:	f7f9 f9a7 	bl	8004708 <HAL_UART_TxCpltCallback>
}
 800b3ba:	bf00      	nop
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b084      	sub	sp, #16
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f7ff ffaf 	bl	800b334 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3d6:	bf00      	nop
 800b3d8:	3710      	adds	r7, #16
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b084      	sub	sp, #16
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ea:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d11e      	bne.n	800b438 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	68da      	ldr	r2, [r3, #12]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b40e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	695a      	ldr	r2, [r3, #20]
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f022 0201 	bic.w	r2, r2, #1
 800b41e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	695a      	ldr	r2, [r3, #20]
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b42e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2220      	movs	r2, #32
 800b434:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800b438:	68f8      	ldr	r0, [r7, #12]
 800b43a:	f7f9 f9e7 	bl	800480c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b43e:	bf00      	nop
 800b440:	3710      	adds	r7, #16
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}

0800b446 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b446:	b580      	push	{r7, lr}
 800b448:	b084      	sub	sp, #16
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b452:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800b454:	68f8      	ldr	r0, [r7, #12]
 800b456:	f7ff ff77 	bl	800b348 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b45a:	bf00      	nop
 800b45c:	3710      	adds	r7, #16
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}

0800b462 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b462:	b580      	push	{r7, lr}
 800b464:	b084      	sub	sp, #16
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b46a:	2300      	movs	r3, #0
 800b46c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b472:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	695b      	ldr	r3, [r3, #20]
 800b47a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b47e:	2b80      	cmp	r3, #128	; 0x80
 800b480:	bf0c      	ite	eq
 800b482:	2301      	moveq	r3, #1
 800b484:	2300      	movne	r3, #0
 800b486:	b2db      	uxtb	r3, r3
 800b488:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b490:	b2db      	uxtb	r3, r3
 800b492:	2b21      	cmp	r3, #33	; 0x21
 800b494:	d108      	bne.n	800b4a8 <UART_DMAError+0x46>
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d005      	beq.n	800b4a8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b4a2:	68b8      	ldr	r0, [r7, #8]
 800b4a4:	f000 f827 	bl	800b4f6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	695b      	ldr	r3, [r3, #20]
 800b4ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4b2:	2b40      	cmp	r3, #64	; 0x40
 800b4b4:	bf0c      	ite	eq
 800b4b6:	2301      	moveq	r3, #1
 800b4b8:	2300      	movne	r3, #0
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	2b22      	cmp	r3, #34	; 0x22
 800b4c8:	d108      	bne.n	800b4dc <UART_DMAError+0x7a>
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d005      	beq.n	800b4dc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b4d6:	68b8      	ldr	r0, [r7, #8]
 800b4d8:	f000 f823 	bl	800b522 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4e0:	f043 0210 	orr.w	r2, r3, #16
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b4e8:	68b8      	ldr	r0, [r7, #8]
 800b4ea:	f7ff ff37 	bl	800b35c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4ee:	bf00      	nop
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b4f6:	b480      	push	{r7}
 800b4f8:	b083      	sub	sp, #12
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	68da      	ldr	r2, [r3, #12]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b50c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2220      	movs	r2, #32
 800b512:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800b516:	bf00      	nop
 800b518:	370c      	adds	r7, #12
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr

0800b522 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b522:	b480      	push	{r7}
 800b524:	b083      	sub	sp, #12
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	68da      	ldr	r2, [r3, #12]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b538:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	695a      	ldr	r2, [r3, #20]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f022 0201 	bic.w	r2, r2, #1
 800b548:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2220      	movs	r2, #32
 800b54e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800b552:	bf00      	nop
 800b554:	370c      	adds	r7, #12
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr

0800b55e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b55e:	b580      	push	{r7, lr}
 800b560:	b084      	sub	sp, #16
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b56a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2200      	movs	r2, #0
 800b570:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2200      	movs	r2, #0
 800b576:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f7ff feef 	bl	800b35c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b57e:	bf00      	nop
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b084      	sub	sp, #16
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b592:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2200      	movs	r2, #0
 800b598:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2220      	movs	r2, #32
 800b59e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800b5a2:	68f8      	ldr	r0, [r7, #12]
 800b5a4:	f7f9 f9d8 	bl	8004958 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5a8:	bf00      	nop
 800b5aa:	3710      	adds	r7, #16
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b085      	sub	sp, #20
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	2b21      	cmp	r3, #33	; 0x21
 800b5c2:	d144      	bne.n	800b64e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5cc:	d11a      	bne.n	800b604 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6a1b      	ldr	r3, [r3, #32]
 800b5d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	881b      	ldrh	r3, [r3, #0]
 800b5d8:	461a      	mov	r2, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b5e2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	691b      	ldr	r3, [r3, #16]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d105      	bne.n	800b5f8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6a1b      	ldr	r3, [r3, #32]
 800b5f0:	1c9a      	adds	r2, r3, #2
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	621a      	str	r2, [r3, #32]
 800b5f6:	e00e      	b.n	800b616 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6a1b      	ldr	r3, [r3, #32]
 800b5fc:	1c5a      	adds	r2, r3, #1
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	621a      	str	r2, [r3, #32]
 800b602:	e008      	b.n	800b616 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6a1b      	ldr	r3, [r3, #32]
 800b608:	1c59      	adds	r1, r3, #1
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	6211      	str	r1, [r2, #32]
 800b60e:	781a      	ldrb	r2, [r3, #0]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	3b01      	subs	r3, #1
 800b61e:	b29b      	uxth	r3, r3
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	4619      	mov	r1, r3
 800b624:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b626:	2b00      	cmp	r3, #0
 800b628:	d10f      	bne.n	800b64a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	68da      	ldr	r2, [r3, #12]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b638:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68da      	ldr	r2, [r3, #12]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b648:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b64a:	2300      	movs	r3, #0
 800b64c:	e000      	b.n	800b650 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b64e:	2302      	movs	r3, #2
  }
}
 800b650:	4618      	mov	r0, r3
 800b652:	3714      	adds	r7, #20
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr

0800b65c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	68da      	ldr	r2, [r3, #12]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b672:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2220      	movs	r2, #32
 800b678:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f7f9 f843 	bl	8004708 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	3708      	adds	r7, #8
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	2b22      	cmp	r3, #34	; 0x22
 800b69e:	d171      	bne.n	800b784 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6a8:	d123      	bne.n	800b6f2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ae:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	691b      	ldr	r3, [r3, #16]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d10e      	bne.n	800b6d6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6c4:	b29a      	uxth	r2, r3
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ce:	1c9a      	adds	r2, r3, #2
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	629a      	str	r2, [r3, #40]	; 0x28
 800b6d4:	e029      	b.n	800b72a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	b29b      	uxth	r3, r3
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	b29a      	uxth	r2, r3
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ea:	1c5a      	adds	r2, r3, #1
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	629a      	str	r2, [r3, #40]	; 0x28
 800b6f0:	e01b      	b.n	800b72a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	691b      	ldr	r3, [r3, #16]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d10a      	bne.n	800b710 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	6858      	ldr	r0, [r3, #4]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b704:	1c59      	adds	r1, r3, #1
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	6291      	str	r1, [r2, #40]	; 0x28
 800b70a:	b2c2      	uxtb	r2, r0
 800b70c:	701a      	strb	r2, [r3, #0]
 800b70e:	e00c      	b.n	800b72a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	b2da      	uxtb	r2, r3
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b71c:	1c58      	adds	r0, r3, #1
 800b71e:	6879      	ldr	r1, [r7, #4]
 800b720:	6288      	str	r0, [r1, #40]	; 0x28
 800b722:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b726:	b2d2      	uxtb	r2, r2
 800b728:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b72e:	b29b      	uxth	r3, r3
 800b730:	3b01      	subs	r3, #1
 800b732:	b29b      	uxth	r3, r3
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	4619      	mov	r1, r3
 800b738:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d120      	bne.n	800b780 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	68da      	ldr	r2, [r3, #12]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f022 0220 	bic.w	r2, r2, #32
 800b74c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	68da      	ldr	r2, [r3, #12]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b75c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	695a      	ldr	r2, [r3, #20]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f022 0201 	bic.w	r2, r2, #1
 800b76c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2220      	movs	r2, #32
 800b772:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f7f9 f848 	bl	800480c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800b77c:	2300      	movs	r3, #0
 800b77e:	e002      	b.n	800b786 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800b780:	2300      	movs	r3, #0
 800b782:	e000      	b.n	800b786 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800b784:	2302      	movs	r3, #2
  }
}
 800b786:	4618      	mov	r0, r3
 800b788:	3710      	adds	r7, #16
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
	...

0800b790 <__libc_init_array>:
 800b790:	b570      	push	{r4, r5, r6, lr}
 800b792:	4d0d      	ldr	r5, [pc, #52]	; (800b7c8 <__libc_init_array+0x38>)
 800b794:	4c0d      	ldr	r4, [pc, #52]	; (800b7cc <__libc_init_array+0x3c>)
 800b796:	1b64      	subs	r4, r4, r5
 800b798:	10a4      	asrs	r4, r4, #2
 800b79a:	2600      	movs	r6, #0
 800b79c:	42a6      	cmp	r6, r4
 800b79e:	d109      	bne.n	800b7b4 <__libc_init_array+0x24>
 800b7a0:	4d0b      	ldr	r5, [pc, #44]	; (800b7d0 <__libc_init_array+0x40>)
 800b7a2:	4c0c      	ldr	r4, [pc, #48]	; (800b7d4 <__libc_init_array+0x44>)
 800b7a4:	f000 f82e 	bl	800b804 <_init>
 800b7a8:	1b64      	subs	r4, r4, r5
 800b7aa:	10a4      	asrs	r4, r4, #2
 800b7ac:	2600      	movs	r6, #0
 800b7ae:	42a6      	cmp	r6, r4
 800b7b0:	d105      	bne.n	800b7be <__libc_init_array+0x2e>
 800b7b2:	bd70      	pop	{r4, r5, r6, pc}
 800b7b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7b8:	4798      	blx	r3
 800b7ba:	3601      	adds	r6, #1
 800b7bc:	e7ee      	b.n	800b79c <__libc_init_array+0xc>
 800b7be:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7c2:	4798      	blx	r3
 800b7c4:	3601      	adds	r6, #1
 800b7c6:	e7f2      	b.n	800b7ae <__libc_init_array+0x1e>
 800b7c8:	0800d6b8 	.word	0x0800d6b8
 800b7cc:	0800d6b8 	.word	0x0800d6b8
 800b7d0:	0800d6b8 	.word	0x0800d6b8
 800b7d4:	0800d6bc 	.word	0x0800d6bc

0800b7d8 <memcpy>:
 800b7d8:	440a      	add	r2, r1
 800b7da:	4291      	cmp	r1, r2
 800b7dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b7e0:	d100      	bne.n	800b7e4 <memcpy+0xc>
 800b7e2:	4770      	bx	lr
 800b7e4:	b510      	push	{r4, lr}
 800b7e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7ee:	4291      	cmp	r1, r2
 800b7f0:	d1f9      	bne.n	800b7e6 <memcpy+0xe>
 800b7f2:	bd10      	pop	{r4, pc}

0800b7f4 <memset>:
 800b7f4:	4402      	add	r2, r0
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d100      	bne.n	800b7fe <memset+0xa>
 800b7fc:	4770      	bx	lr
 800b7fe:	f803 1b01 	strb.w	r1, [r3], #1
 800b802:	e7f9      	b.n	800b7f8 <memset+0x4>

0800b804 <_init>:
 800b804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b806:	bf00      	nop
 800b808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b80a:	bc08      	pop	{r3}
 800b80c:	469e      	mov	lr, r3
 800b80e:	4770      	bx	lr

0800b810 <_fini>:
 800b810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b812:	bf00      	nop
 800b814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b816:	bc08      	pop	{r3}
 800b818:	469e      	mov	lr, r3
 800b81a:	4770      	bx	lr
