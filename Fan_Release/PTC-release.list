
PTC-release.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057c4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  080059a4  080059a4  000159a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005f58  08005f58  00015f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005f60  08005f60  00015f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005f64  08005f64  00015f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000440  20000000  08005f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000013d8  20000440  080063a8  00020440  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20001818  080063a8  00021818  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d772  00000000  00000000  00020470  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004afd  00000000  00000000  0003dbe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ed03  00000000  00000000  000426df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f18  00000000  00000000  000513e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001d60  00000000  00000000  00052300  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000afb7  00000000  00000000  00054060  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000077cf  00000000  00000000  0005f017  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000667e6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003238  00000000  00000000  00066864  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000440 	.word	0x20000440
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800598c 	.word	0x0800598c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000444 	.word	0x20000444
 800021c:	0800598c 	.word	0x0800598c

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	bf14      	ite	ne
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e720      	b.n	8000364 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aedc 	beq.w	8000312 <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6c1      	b.n	8000312 <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b97a 	b.w	8000e9c <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	468c      	mov	ip, r1
 8000bc6:	460d      	mov	r5, r1
 8000bc8:	4604      	mov	r4, r0
 8000bca:	9e08      	ldr	r6, [sp, #32]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d151      	bne.n	8000c74 <__udivmoddi4+0xb4>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	d96d      	bls.n	8000cb2 <__udivmoddi4+0xf2>
 8000bd6:	fab2 fe82 	clz	lr, r2
 8000bda:	f1be 0f00 	cmp.w	lr, #0
 8000bde:	d00b      	beq.n	8000bf8 <__udivmoddi4+0x38>
 8000be0:	f1ce 0c20 	rsb	ip, lr, #32
 8000be4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000be8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bec:	fa02 f70e 	lsl.w	r7, r2, lr
 8000bf0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000bf4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bf8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000bfc:	0c25      	lsrs	r5, r4, #16
 8000bfe:	fbbc f8fa 	udiv	r8, ip, sl
 8000c02:	fa1f f987 	uxth.w	r9, r7
 8000c06:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c0a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c0e:	fb08 f309 	mul.w	r3, r8, r9
 8000c12:	42ab      	cmp	r3, r5
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x6c>
 8000c16:	19ed      	adds	r5, r5, r7
 8000c18:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c1c:	f080 8123 	bcs.w	8000e66 <__udivmoddi4+0x2a6>
 8000c20:	42ab      	cmp	r3, r5
 8000c22:	f240 8120 	bls.w	8000e66 <__udivmoddi4+0x2a6>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	443d      	add	r5, r7
 8000c2c:	1aed      	subs	r5, r5, r3
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c34:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c38:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c3c:	fb00 f909 	mul.w	r9, r0, r9
 8000c40:	45a1      	cmp	r9, r4
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x98>
 8000c44:	19e4      	adds	r4, r4, r7
 8000c46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4a:	f080 810a 	bcs.w	8000e62 <__udivmoddi4+0x2a2>
 8000c4e:	45a1      	cmp	r9, r4
 8000c50:	f240 8107 	bls.w	8000e62 <__udivmoddi4+0x2a2>
 8000c54:	3802      	subs	r0, #2
 8000c56:	443c      	add	r4, r7
 8000c58:	eba4 0409 	sub.w	r4, r4, r9
 8000c5c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c60:	2100      	movs	r1, #0
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d061      	beq.n	8000d2a <__udivmoddi4+0x16a>
 8000c66:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	6034      	str	r4, [r6, #0]
 8000c6e:	6073      	str	r3, [r6, #4]
 8000c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c74:	428b      	cmp	r3, r1
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0xc8>
 8000c78:	2e00      	cmp	r6, #0
 8000c7a:	d054      	beq.n	8000d26 <__udivmoddi4+0x166>
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c82:	4608      	mov	r0, r1
 8000c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c88:	fab3 f183 	clz	r1, r3
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	f040 808e 	bne.w	8000dae <__udivmoddi4+0x1ee>
 8000c92:	42ab      	cmp	r3, r5
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xdc>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80fa 	bhi.w	8000e90 <__udivmoddi4+0x2d0>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb65 0503 	sbc.w	r5, r5, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	46ac      	mov	ip, r5
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d03f      	beq.n	8000d2a <__udivmoddi4+0x16a>
 8000caa:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	b912      	cbnz	r2, 8000cba <__udivmoddi4+0xfa>
 8000cb4:	2701      	movs	r7, #1
 8000cb6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cba:	fab7 fe87 	clz	lr, r7
 8000cbe:	f1be 0f00 	cmp.w	lr, #0
 8000cc2:	d134      	bne.n	8000d2e <__udivmoddi4+0x16e>
 8000cc4:	1beb      	subs	r3, r5, r7
 8000cc6:	0c3a      	lsrs	r2, r7, #16
 8000cc8:	fa1f fc87 	uxth.w	ip, r7
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fbb3 f8f2 	udiv	r8, r3, r2
 8000cd2:	0c25      	lsrs	r5, r4, #16
 8000cd4:	fb02 3318 	mls	r3, r2, r8, r3
 8000cd8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cdc:	fb0c f308 	mul.w	r3, ip, r8
 8000ce0:	42ab      	cmp	r3, r5
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x134>
 8000ce4:	19ed      	adds	r5, r5, r7
 8000ce6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x132>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	f200 80d1 	bhi.w	8000e94 <__udivmoddi4+0x2d4>
 8000cf2:	4680      	mov	r8, r0
 8000cf4:	1aed      	subs	r5, r5, r3
 8000cf6:	b2a3      	uxth	r3, r4
 8000cf8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000cfc:	fb02 5510 	mls	r5, r2, r0, r5
 8000d00:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d04:	fb0c fc00 	mul.w	ip, ip, r0
 8000d08:	45a4      	cmp	ip, r4
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x15c>
 8000d0c:	19e4      	adds	r4, r4, r7
 8000d0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x15a>
 8000d14:	45a4      	cmp	ip, r4
 8000d16:	f200 80b8 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	eba4 040c 	sub.w	r4, r4, ip
 8000d20:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d24:	e79d      	b.n	8000c62 <__udivmoddi4+0xa2>
 8000d26:	4631      	mov	r1, r6
 8000d28:	4630      	mov	r0, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	f1ce 0420 	rsb	r4, lr, #32
 8000d32:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d36:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d3a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d3e:	0c3a      	lsrs	r2, r7, #16
 8000d40:	fa25 f404 	lsr.w	r4, r5, r4
 8000d44:	ea48 0803 	orr.w	r8, r8, r3
 8000d48:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d4c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d50:	fb02 4411 	mls	r4, r2, r1, r4
 8000d54:	fa1f fc87 	uxth.w	ip, r7
 8000d58:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d5c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d60:	42ab      	cmp	r3, r5
 8000d62:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d66:	d909      	bls.n	8000d7c <__udivmoddi4+0x1bc>
 8000d68:	19ed      	adds	r5, r5, r7
 8000d6a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d6e:	f080 808a 	bcs.w	8000e86 <__udivmoddi4+0x2c6>
 8000d72:	42ab      	cmp	r3, r5
 8000d74:	f240 8087 	bls.w	8000e86 <__udivmoddi4+0x2c6>
 8000d78:	3902      	subs	r1, #2
 8000d7a:	443d      	add	r5, r7
 8000d7c:	1aeb      	subs	r3, r5, r3
 8000d7e:	fa1f f588 	uxth.w	r5, r8
 8000d82:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d86:	fb02 3310 	mls	r3, r2, r0, r3
 8000d8a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d8e:	fb00 f30c 	mul.w	r3, r0, ip
 8000d92:	42ab      	cmp	r3, r5
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x1e6>
 8000d96:	19ed      	adds	r5, r5, r7
 8000d98:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d9c:	d26f      	bcs.n	8000e7e <__udivmoddi4+0x2be>
 8000d9e:	42ab      	cmp	r3, r5
 8000da0:	d96d      	bls.n	8000e7e <__udivmoddi4+0x2be>
 8000da2:	3802      	subs	r0, #2
 8000da4:	443d      	add	r5, r7
 8000da6:	1aeb      	subs	r3, r5, r3
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	e78f      	b.n	8000cce <__udivmoddi4+0x10e>
 8000dae:	f1c1 0720 	rsb	r7, r1, #32
 8000db2:	fa22 f807 	lsr.w	r8, r2, r7
 8000db6:	408b      	lsls	r3, r1
 8000db8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dbc:	ea48 0303 	orr.w	r3, r8, r3
 8000dc0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dc4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dc8:	40fd      	lsrs	r5, r7
 8000dca:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dce:	fbb5 f9fc 	udiv	r9, r5, ip
 8000dd2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000dd6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dda:	fa1f f883 	uxth.w	r8, r3
 8000dde:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000de2:	fb09 f408 	mul.w	r4, r9, r8
 8000de6:	42ac      	cmp	r4, r5
 8000de8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dec:	fa00 fa01 	lsl.w	sl, r0, r1
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x244>
 8000df2:	18ed      	adds	r5, r5, r3
 8000df4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df8:	d243      	bcs.n	8000e82 <__udivmoddi4+0x2c2>
 8000dfa:	42ac      	cmp	r4, r5
 8000dfc:	d941      	bls.n	8000e82 <__udivmoddi4+0x2c2>
 8000dfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000e02:	441d      	add	r5, r3
 8000e04:	1b2d      	subs	r5, r5, r4
 8000e06:	fa1f fe8e 	uxth.w	lr, lr
 8000e0a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e0e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e12:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e16:	fb00 f808 	mul.w	r8, r0, r8
 8000e1a:	45a0      	cmp	r8, r4
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x26e>
 8000e1e:	18e4      	adds	r4, r4, r3
 8000e20:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e24:	d229      	bcs.n	8000e7a <__udivmoddi4+0x2ba>
 8000e26:	45a0      	cmp	r8, r4
 8000e28:	d927      	bls.n	8000e7a <__udivmoddi4+0x2ba>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	441c      	add	r4, r3
 8000e2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e32:	eba4 0408 	sub.w	r4, r4, r8
 8000e36:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3a:	454c      	cmp	r4, r9
 8000e3c:	46c6      	mov	lr, r8
 8000e3e:	464d      	mov	r5, r9
 8000e40:	d315      	bcc.n	8000e6e <__udivmoddi4+0x2ae>
 8000e42:	d012      	beq.n	8000e6a <__udivmoddi4+0x2aa>
 8000e44:	b156      	cbz	r6, 8000e5c <__udivmoddi4+0x29c>
 8000e46:	ebba 030e 	subs.w	r3, sl, lr
 8000e4a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e52:	40cb      	lsrs	r3, r1
 8000e54:	431f      	orrs	r7, r3
 8000e56:	40cc      	lsrs	r4, r1
 8000e58:	6037      	str	r7, [r6, #0]
 8000e5a:	6074      	str	r4, [r6, #4]
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	4618      	mov	r0, r3
 8000e64:	e6f8      	b.n	8000c58 <__udivmoddi4+0x98>
 8000e66:	4690      	mov	r8, r2
 8000e68:	e6e0      	b.n	8000c2c <__udivmoddi4+0x6c>
 8000e6a:	45c2      	cmp	sl, r8
 8000e6c:	d2ea      	bcs.n	8000e44 <__udivmoddi4+0x284>
 8000e6e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e72:	eb69 0503 	sbc.w	r5, r9, r3
 8000e76:	3801      	subs	r0, #1
 8000e78:	e7e4      	b.n	8000e44 <__udivmoddi4+0x284>
 8000e7a:	4628      	mov	r0, r5
 8000e7c:	e7d7      	b.n	8000e2e <__udivmoddi4+0x26e>
 8000e7e:	4640      	mov	r0, r8
 8000e80:	e791      	b.n	8000da6 <__udivmoddi4+0x1e6>
 8000e82:	4681      	mov	r9, r0
 8000e84:	e7be      	b.n	8000e04 <__udivmoddi4+0x244>
 8000e86:	4601      	mov	r1, r0
 8000e88:	e778      	b.n	8000d7c <__udivmoddi4+0x1bc>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	e745      	b.n	8000d1c <__udivmoddi4+0x15c>
 8000e90:	4608      	mov	r0, r1
 8000e92:	e708      	b.n	8000ca6 <__udivmoddi4+0xe6>
 8000e94:	f1a8 0802 	sub.w	r8, r8, #2
 8000e98:	443d      	add	r5, r7
 8000e9a:	e72b      	b.n	8000cf4 <__udivmoddi4+0x134>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <adcInit>:
 * @brief Initializes the ADC interface.
 */
void adcInit(void) {
    // ADC initialization and channel configuration.
    // XXX edit me to match your pin configuration
    cmr_adcInit(
 8000ea0:	230d      	movs	r3, #13
 8000ea2:	4a02      	ldr	r2, [pc, #8]	; (8000eac <adcInit+0xc>)
 8000ea4:	4902      	ldr	r1, [pc, #8]	; (8000eb0 <adcInit+0x10>)
 8000ea6:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <adcInit+0x14>)
 8000ea8:	f000 bb54 	b.w	8001554 <cmr_adcInit>
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	40012000 	.word	0x40012000
 8000eb4:	2000045c 	.word	0x2000045c

08000eb8 <adcRead>:
 * @param channel The channel.
 *
 * @return The read value.
 */
uint32_t adcRead(adcChannel_t channel) {
    return cmr_adcRead(&adc, channel);
 8000eb8:	4601      	mov	r1, r0
 8000eba:	4801      	ldr	r0, [pc, #4]	; (8000ec0 <adcRead+0x8>)
 8000ebc:	f000 bbc8 	b.w	8001650 <cmr_adcRead>
 8000ec0:	2000045c 	.word	0x2000045c

08000ec4 <canTX10Hz>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void canTX10Hz(void *pvParameters) {
 8000ec4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000ec8:	b08d      	sub	sp, #52	; 0x34
    (void) pvParameters;    // Placate compiler.

    TickType_t lastWakeTime = xTaskGetTickCount();
 8000eca:	f002 f94b 	bl	8003164 <xTaskGetTickCount>
 8000ece:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8000fec <canTX10Hz+0x128>

/**
 * @brief Send cooling system temps on CAN bus.
 */
static void sendCoolingLoopTemps(void) {
    int32_t Temp_1_dC =
 8000ed2:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8000ff0 <canTX10Hz+0x12c>
    return cmr_canTX(&can, id, data, len, timeout);
 8000ed6:	4f42      	ldr	r7, [pc, #264]	; (8000fe0 <canTX10Hz+0x11c>)
    TickType_t lastWakeTime = xTaskGetTickCount();
 8000ed8:	9007      	str	r0, [sp, #28]
    int32_t Temp_1_dC =
 8000eda:	2105      	movs	r1, #5
 8000edc:	4640      	mov	r0, r8
 8000ede:	f001 fbf3 	bl	80026c8 <cmr_sensorListGetValue>
        cmr_sensorListGetValue(&sensorList, SENSOR_CH_THERM_1);
    int32_t Temp_2_dC =
 8000ee2:	2106      	movs	r1, #6
    int32_t Temp_1_dC =
 8000ee4:	4683      	mov	fp, r0
    int32_t Temp_2_dC =
 8000ee6:	4640      	mov	r0, r8
 8000ee8:	f001 fbee 	bl	80026c8 <cmr_sensorListGetValue>
        cmr_sensorListGetValue(&sensorList, SENSOR_CH_THERM_2);
    int32_t Temp_3_dC =
 8000eec:	2107      	movs	r1, #7
    int32_t Temp_2_dC =
 8000eee:	4682      	mov	sl, r0
    int32_t Temp_3_dC =
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	f001 fbe9 	bl	80026c8 <cmr_sensorListGetValue>
        cmr_sensorListGetValue(&sensorList, SENSOR_CH_THERM_3);
    int32_t Temp_4_dC =
 8000ef6:	2108      	movs	r1, #8
    int32_t Temp_3_dC =
 8000ef8:	4606      	mov	r6, r0
    int32_t Temp_4_dC =
 8000efa:	4640      	mov	r0, r8
 8000efc:	f001 fbe4 	bl	80026c8 <cmr_sensorListGetValue>
        cmr_sensorListGetValue(&sensorList, SENSOR_CH_THERM_4);
    int32_t Temp_5_dC =
 8000f00:	2109      	movs	r1, #9
    int32_t Temp_4_dC =
 8000f02:	9003      	str	r0, [sp, #12]
    int32_t Temp_5_dC =
 8000f04:	4640      	mov	r0, r8
 8000f06:	f001 fbdf 	bl	80026c8 <cmr_sensorListGetValue>
        cmr_sensorListGetValue(&sensorList, SENSOR_CH_THERM_5);
    int32_t Temp_6_dC =
 8000f0a:	210a      	movs	r1, #10
    int32_t Temp_5_dC =
 8000f0c:	9004      	str	r0, [sp, #16]
    int32_t Temp_6_dC =
 8000f0e:	4640      	mov	r0, r8
 8000f10:	f001 fbda 	bl	80026c8 <cmr_sensorListGetValue>
        cmr_sensorListGetValue(&sensorList, SENSOR_CH_THERM_6);
    int32_t Temp_7_dC =
 8000f14:	210b      	movs	r1, #11
    int32_t Temp_6_dC =
 8000f16:	9005      	str	r0, [sp, #20]
    int32_t Temp_7_dC =
 8000f18:	4640      	mov	r0, r8
 8000f1a:	f001 fbd5 	bl	80026c8 <cmr_sensorListGetValue>
        cmr_sensorListGetValue(&sensorList, SENSOR_CH_THERM_7);
    int32_t Temp_8_dC =
 8000f1e:	210c      	movs	r1, #12
    int32_t Temp_7_dC =
 8000f20:	4605      	mov	r5, r0
    int32_t Temp_8_dC =
 8000f22:	4640      	mov	r0, r8
 8000f24:	f001 fbd0 	bl	80026c8 <cmr_sensorListGetValue>
        cmr_sensorListGetValue(&sensorList, SENSOR_CH_THERM_8);

    /* Separate A and B messages are due to can packet size limits */
    cmr_canPTCpLoopTemp_A_t coolMsg1 = {
 8000f28:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8000f2c:	f8bd 600c 	ldrh.w	r6, [sp, #12]
 8000f30:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
    return cmr_canTX(&can, id, data, len, timeout);
 8000f34:	2464      	movs	r4, #100	; 0x64
        .temp2_dC = Temp_2_dC,
        .temp3_dC = Temp_3_dC,
        .temp4_dC = Temp_4_dC
    };

    cmr_canPTCpLoopTemp_B_t coolMsg2 = {
 8000f36:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 8000f3a:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
    return cmr_canTX(&can, id, data, len, timeout);
 8000f3e:	aa08      	add	r2, sp, #32
    cmr_canPTCpLoopTemp_B_t coolMsg2 = {
 8000f40:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
    return cmr_canTX(&can, id, data, len, timeout);
 8000f44:	9400      	str	r4, [sp, #0]
    cmr_canPTCpLoopTemp_B_t coolMsg2 = {
 8000f46:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 8000f4a:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
    return cmr_canTX(&can, id, data, len, timeout);
 8000f4e:	2308      	movs	r3, #8
 8000f50:	f44f 7109 	mov.w	r1, #548	; 0x224
 8000f54:	4638      	mov	r0, r7
    cmr_canPTCpLoopTemp_B_t coolMsg2 = {
 8000f56:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
    cmr_canPTCpLoopTemp_A_t coolMsg1 = {
 8000f5a:	f8ad b020 	strh.w	fp, [sp, #32]
 8000f5e:	f8ad a022 	strh.w	sl, [sp, #34]	; 0x22
    return cmr_canTX(&can, id, data, len, timeout);
 8000f62:	f000 fec3 	bl	8001cec <cmr_canTX>
 8000f66:	aa0a      	add	r2, sp, #40	; 0x28
 8000f68:	2308      	movs	r3, #8
 8000f6a:	9400      	str	r4, [sp, #0]
 8000f6c:	f44f 710d 	mov.w	r1, #564	; 0x234
 8000f70:	4638      	mov	r0, r7
 8000f72:	f000 febb 	bl	8001cec <cmr_canTX>

/**
 * @brief Send power diagnostic information.
 */
static void sendPowerDiagnostics(void) {
    int32_t logicVoltage_mV =
 8000f76:	2102      	movs	r1, #2
 8000f78:	4640      	mov	r0, r8
 8000f7a:	f001 fba5 	bl	80026c8 <cmr_sensorListGetValue>
        cmr_sensorListGetValue(&sensorList, SENSOR_CH_LOGIC_VOLTAGE_MV);
    int32_t loadVoltage_mV =
 8000f7e:	2100      	movs	r1, #0
    int32_t logicVoltage_mV =
 8000f80:	4606      	mov	r6, r0
    int32_t loadVoltage_mV =
 8000f82:	4640      	mov	r0, r8
 8000f84:	f001 fba0 	bl	80026c8 <cmr_sensorListGetValue>
        cmr_sensorListGetValue(&sensorList, SENSOR_CH_LOAD_VOLTAGE_MV);
    int32_t loadCurrent_mA =
 8000f88:	2101      	movs	r1, #1
    int32_t loadVoltage_mV =
 8000f8a:	4605      	mov	r5, r0
    int32_t loadCurrent_mA =
 8000f8c:	4640      	mov	r0, r8
 8000f8e:	f001 fb9b 	bl	80026c8 <cmr_sensorListGetValue>
    return cmr_canTX(&can, id, data, len, timeout);
 8000f92:	aa0a      	add	r2, sp, #40	; 0x28
        cmr_sensorListGetValue(&sensorList, SENSOR_CH_LOAD_CURRENT_MA);

    cmr_canPTCPowerDiagnostics_t powerMsg = {
 8000f94:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    return cmr_canTX(&can, id, data, len, timeout);
 8000f98:	9400      	str	r4, [sp, #0]
 8000f9a:	2306      	movs	r3, #6
 8000f9c:	f240 5134 	movw	r1, #1332	; 0x534
 8000fa0:	4638      	mov	r0, r7
    cmr_canPTCPowerDiagnostics_t powerMsg = {
 8000fa2:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 8000fa6:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
    return cmr_canTX(&can, id, data, len, timeout);
 8000faa:	f000 fe9f 	bl	8001cec <cmr_canTX>
    uint8_t Channel2_Duty_Cycle_pcnt = channel_2_State;
 8000fae:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <canTX10Hz+0x120>)
    return cmr_canTX(&can, id, data, len, timeout);
 8000fb0:	9400      	str	r4, [sp, #0]
    uint8_t Channel3_Duty_Cycle_pcnt = channel_3_State;
 8000fb2:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <canTX10Hz+0x124>)
    uint8_t Channel2_Duty_Cycle_pcnt = channel_2_State;
 8000fb4:	781b      	ldrb	r3, [r3, #0]
    uint8_t Channel3_Duty_Cycle_pcnt = channel_3_State;
 8000fb6:	7816      	ldrb	r6, [r2, #0]
    uint8_t Channel1_Duty_Cycle_pcnt = channel_1_State;
 8000fb8:	f8b9 5000 	ldrh.w	r5, [r9]
    cmr_canPTCDriverStatus_t driverStatusMsg = {
 8000fbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    return cmr_canTX(&can, id, data, len, timeout);
 8000fc0:	aa0a      	add	r2, sp, #40	; 0x28
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	f44f 7145 	mov.w	r1, #788	; 0x314
 8000fc8:	4638      	mov	r0, r7
    cmr_canPTCDriverStatus_t driverStatusMsg = {
 8000fca:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
    uint8_t Channel1_Duty_Cycle_pcnt = channel_1_State;
 8000fce:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
    return cmr_canTX(&can, id, data, len, timeout);
 8000fd2:	f000 fe8b 	bl	8001cec <cmr_canTX>
        vTaskDelayUntil(&lastWakeTime, canTX10Hz_period_ms);
 8000fd6:	4621      	mov	r1, r4
 8000fd8:	a807      	add	r0, sp, #28
 8000fda:	f002 fa01 	bl	80033e0 <vTaskDelayUntil>
 8000fde:	e77c      	b.n	8000eda <canTX10Hz+0x16>
 8000fe0:	2000070c 	.word	0x2000070c
 8000fe4:	200017fc 	.word	0x200017fc
 8000fe8:	20001800 	.word	0x20001800
 8000fec:	200017fe 	.word	0x200017fe
 8000ff0:	2000180c 	.word	0x2000180c

08000ff4 <canTX100Hz>:
static void canTX100Hz(void *pvParameters) {
 8000ff4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000ff8:	b085      	sub	sp, #20
    TickType_t lastWakeTime = xTaskGetTickCount();
 8000ffa:	f002 f8b3 	bl	8003164 <xTaskGetTickCount>
 8000ffe:	f10d 0810 	add.w	r8, sp, #16
 8001002:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8001064 <canTX100Hz+0x70>
 8001006:	4c16      	ldr	r4, [pc, #88]	; (8001060 <canTX100Hz+0x6c>)
 8001008:	f848 0d04 	str.w	r0, [r8, #-4]!
    return cmr_canTX(&can, id, data, len, timeout);
 800100c:	f8df b058 	ldr.w	fp, [pc, #88]	; 8001068 <canTX100Hz+0x74>
    TickType_t lastWakeTime = xTaskGetTickCount();
 8001010:	4605      	mov	r5, r0
    if (cmr_canRXMetaTimeoutError(heartbeatVSMMeta, lastWakeTime) < 0) {
 8001012:	464f      	mov	r7, r9
    return cmr_canTX(&can, id, data, len, timeout);
 8001014:	46a2      	mov	sl, r4
    heartbeat.state = heartbeatVSM->state;
 8001016:	f899 3018 	ldrb.w	r3, [r9, #24]
 800101a:	7023      	strb	r3, [r4, #0]
    if (cmr_canRXMetaTimeoutError(heartbeatVSMMeta, lastWakeTime) < 0) {
 800101c:	4629      	mov	r1, r5
 800101e:	4638      	mov	r0, r7
 8001020:	f000 fc4a 	bl	80018b8 <cmr_canRXMetaTimeoutError>
 8001024:	2800      	cmp	r0, #0
        heartbeat.state = CMR_CAN_ERROR;
 8001026:	bfbb      	ittet	lt
 8001028:	2304      	movlt	r3, #4
 800102a:	7023      	strblt	r3, [r4, #0]
    uint16_t error = CMR_CAN_ERROR_NONE;
 800102c:	2300      	movge	r3, #0
        error |= CMR_CAN_ERROR_VSM_TIMEOUT;
 800102e:	2301      	movlt	r3, #1
    if (cmr_canRXMetaTimeoutWarn(heartbeatVSMMeta, lastWakeTime) < 0) {
 8001030:	4629      	mov	r1, r5
 8001032:	4638      	mov	r0, r7
    memcpy(&heartbeat.error, &error, sizeof(error));
 8001034:	f8a4 3001 	strh.w	r3, [r4, #1]
    if (cmr_canRXMetaTimeoutWarn(heartbeatVSMMeta, lastWakeTime) < 0) {
 8001038:	f000 fc2a 	bl	8001890 <cmr_canRXMetaTimeoutWarn>
    return cmr_canTX(&can, id, data, len, timeout);
 800103c:	260a      	movs	r6, #10
    if (cmr_canRXMetaTimeoutWarn(heartbeatVSMMeta, lastWakeTime) < 0) {
 800103e:	0fc5      	lsrs	r5, r0, #31
    return cmr_canTX(&can, id, data, len, timeout);
 8001040:	2305      	movs	r3, #5
 8001042:	4652      	mov	r2, sl
 8001044:	f44f 7183 	mov.w	r1, #262	; 0x106
 8001048:	9600      	str	r6, [sp, #0]
 800104a:	4658      	mov	r0, fp
    memcpy(&heartbeat.warning, &warning, sizeof(warning));
 800104c:	f8a4 5003 	strh.w	r5, [r4, #3]
    return cmr_canTX(&can, id, data, len, timeout);
 8001050:	f000 fe4c 	bl	8001cec <cmr_canTX>
        vTaskDelayUntil(&lastWakeTime, canTX100Hz_period_ms);
 8001054:	4631      	mov	r1, r6
 8001056:	4640      	mov	r0, r8
 8001058:	f002 f9c2 	bl	80033e0 <vTaskDelayUntil>
 800105c:	9d03      	ldr	r5, [sp, #12]
        sendHeartbeat(lastWakeTime);
 800105e:	e7da      	b.n	8001016 <canTX100Hz+0x22>
 8001060:	20001804 	.word	0x20001804
 8001064:	20000104 	.word	0x20000104
 8001068:	2000070c 	.word	0x2000070c

0800106c <canInit>:
void canInit(void) {
 800106c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cmr_canInit(
 8001070:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8001100 <canInit+0x94>
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <canInit+0x6c>)
    const cmr_canFilter_t canFilters[] = {
 8001076:	4d19      	ldr	r5, [pc, #100]	; (80010dc <canInit+0x70>)
void canInit(void) {
 8001078:	b08e      	sub	sp, #56	; 0x38
    cmr_canInit(
 800107a:	2600      	movs	r6, #0
 800107c:	2705      	movs	r7, #5
 800107e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001082:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001086:	9304      	str	r3, [sp, #16]
 8001088:	4640      	mov	r0, r8
 800108a:	9105      	str	r1, [sp, #20]
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	9203      	str	r2, [sp, #12]
 8001090:	9601      	str	r6, [sp, #4]
 8001092:	9700      	str	r7, [sp, #0]
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <canInit+0x74>)
 8001096:	4913      	ldr	r1, [pc, #76]	; (80010e4 <canInit+0x78>)
 8001098:	2201      	movs	r2, #1
 800109a:	f000 fc91 	bl	80019c0 <cmr_canInit>
    const cmr_canFilter_t canFilters[] = {
 800109e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a0:	ac06      	add	r4, sp, #24
 80010a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    cmr_canFilter(
 80010ac:	4640      	mov	r0, r8
 80010ae:	a906      	add	r1, sp, #24
 80010b0:	2202      	movs	r2, #2
 80010b2:	f000 fd97 	bl	8001be4 <cmr_canFilter>
    cmr_taskInit(
 80010b6:	9600      	str	r6, [sp, #0]
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <canInit+0x7c>)
 80010ba:	490c      	ldr	r1, [pc, #48]	; (80010ec <canInit+0x80>)
 80010bc:	480c      	ldr	r0, [pc, #48]	; (80010f0 <canInit+0x84>)
 80010be:	2203      	movs	r2, #3
 80010c0:	f001 fb0a 	bl	80026d8 <cmr_taskInit>
    cmr_taskInit(
 80010c4:	9600      	str	r6, [sp, #0]
 80010c6:	463a      	mov	r2, r7
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <canInit+0x88>)
 80010ca:	490b      	ldr	r1, [pc, #44]	; (80010f8 <canInit+0x8c>)
 80010cc:	480b      	ldr	r0, [pc, #44]	; (80010fc <canInit+0x90>)
 80010ce:	f001 fb03 	bl	80026d8 <cmr_taskInit>
}
 80010d2:	b00e      	add	sp, #56	; 0x38
 80010d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010d8:	40020000 	.word	0x40020000
 80010dc:	080059a4 	.word	0x080059a4
 80010e0:	20000104 	.word	0x20000104
 80010e4:	40006400 	.word	0x40006400
 80010e8:	08000ec5 	.word	0x08000ec5
 80010ec:	08005a28 	.word	0x08005a28
 80010f0:	200009ec 	.word	0x200009ec
 80010f4:	08000ff5 	.word	0x08000ff5
 80010f8:	08005a34 	.word	0x08005a34
 80010fc:	2000078c 	.word	0x2000078c
 8001100:	2000070c 	.word	0x2000070c

08001104 <canGetPayload>:
    return (void *)(&rxMeta->payload);
 8001104:	4b02      	ldr	r3, [pc, #8]	; (8001110 <canGetPayload+0xc>)
 8001106:	eb03 1040 	add.w	r0, r3, r0, lsl #5
}
 800110a:	3018      	adds	r0, #24
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000104 	.word	0x20000104

08001114 <fanControl>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void fanControl(void *pvParameters) {
 8001114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void) pvParameters;    // Placate compiler.

    /* Enable the half bridges so that output isn't floating */
    cmr_gpioWrite(GPIO_CHANNEL_1_ENABLE, 1);
 8001118:	2101      	movs	r1, #1
static void fanControl(void *pvParameters) {
 800111a:	b095      	sub	sp, #84	; 0x54
    cmr_gpioWrite(GPIO_CHANNEL_1_ENABLE, 1);
 800111c:	2002      	movs	r0, #2
 800111e:	f000 fead 	bl	8001e7c <cmr_gpioWrite>
    cmr_gpioWrite(GPIO_CHANNEL_2_ENABLE, 1);
 8001122:	2101      	movs	r1, #1
 8001124:	2003      	movs	r0, #3
 8001126:	f000 fea9 	bl	8001e7c <cmr_gpioWrite>

    //cmr_canHeartbeat_t *heartbeat = &heartbeat;

    /* Initialize PWM channels to 25kHz for fan control lines */
    /* 96Mhz / (24 * 160) = 25kHz */
    const cmr_pwmPinConfig_t pwmPinConfig1 = {
 800112a:	4c4d      	ldr	r4, [pc, #308]	; (8001260 <fanControl+0x14c>)
 800112c:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8001278 <fanControl+0x164>
 8001130:	f8df b148 	ldr.w	fp, [pc, #328]	; 800127c <fanControl+0x168>
    cmr_gpioWrite(GPIO_CHANNEL_3_ENABLE, 1);
 8001134:	2101      	movs	r1, #1
 8001136:	2004      	movs	r0, #4
 8001138:	f000 fea0 	bl	8001e7c <cmr_gpioWrite>
    volatile cmr_canHeartbeat_t *vsmHeartbeat = canGetPayload(CANRX_HEARTBEAT_VSM);
 800113c:	2000      	movs	r0, #0
 800113e:	f7ff ffe1 	bl	8001104 <canGetPayload>
    const cmr_pwmPinConfig_t pwmPinConfig1 = {
 8001142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001144:	ad02      	add	r5, sp, #8
 8001146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001148:	e894 0003 	ldmia.w	r4, {r0, r1}
        .channel = TIM_CHANNEL_2,
        .presc = 24,
        .period_ticks = 160,
        .timer = TIM3
    };
    const cmr_pwmPinConfig_t pwmPinConfig2 = {
 800114c:	f104 0608 	add.w	r6, r4, #8
    const cmr_pwmPinConfig_t pwmPinConfig1 = {
 8001150:	e885 0003 	stmia.w	r5, {r0, r1}
    const cmr_pwmPinConfig_t pwmPinConfig2 = {
 8001154:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001156:	ad08      	add	r5, sp, #32
 8001158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800115a:	e896 0003 	ldmia.w	r6, {r0, r1}
        .channel = TIM_CHANNEL_2,
        .presc = 24,
        .period_ticks = 160,
        .timer = TIM4
    };
    const cmr_pwmPinConfig_t pwmPinConfig3 = {
 800115e:	3420      	adds	r4, #32
    const cmr_pwmPinConfig_t pwmPinConfig2 = {
 8001160:	e885 0003 	stmia.w	r5, {r0, r1}
    const cmr_pwmPinConfig_t pwmPinConfig3 = {
 8001164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001166:	ad0e      	add	r5, sp, #56	; 0x38
 8001168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800116a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800116e:	e885 0003 	stmia.w	r5, {r0, r1}
        .channel = TIM_CHANNEL_3,
        .presc = 24,
        .period_ticks = 160,
        .timer = TIM4
    };
    cmr_pwmInit(&channel_1_PWM, &pwmPinConfig1);
 8001172:	483c      	ldr	r0, [pc, #240]	; (8001264 <fanControl+0x150>)
 8001174:	4d3c      	ldr	r5, [pc, #240]	; (8001268 <fanControl+0x154>)
 8001176:	4c3d      	ldr	r4, [pc, #244]	; (800126c <fanControl+0x158>)
 8001178:	a902      	add	r1, sp, #8
                break;
            case CMR_CAN_HV_EN:
                channel_1_State = 50;
                channel_2_State = 50;
                channel_3_State = 50;
                cmr_pwmSetDutyCycle(&channel_1_PWM, channel_1_State);
 800117a:	4606      	mov	r6, r0
    cmr_pwmInit(&channel_1_PWM, &pwmPinConfig1);
 800117c:	f000 feb4 	bl	8001ee8 <cmr_pwmInit>
    cmr_pwmInit(&channel_2_PWM, &pwmPinConfig2);
 8001180:	a908      	add	r1, sp, #32
 8001182:	483b      	ldr	r0, [pc, #236]	; (8001270 <fanControl+0x15c>)
 8001184:	f000 feb0 	bl	8001ee8 <cmr_pwmInit>
    cmr_pwmInit(&channel_3_PWM, &pwmPinConfig3);
 8001188:	a90e      	add	r1, sp, #56	; 0x38
 800118a:	483a      	ldr	r0, [pc, #232]	; (8001274 <fanControl+0x160>)
 800118c:	f000 feac 	bl	8001ee8 <cmr_pwmInit>
    TickType_t lastWakeTime = xTaskGetTickCount();
 8001190:	f001 ffe8 	bl	8003164 <xTaskGetTickCount>
 8001194:	af14      	add	r7, sp, #80	; 0x50
                channel_1_State = 50;
 8001196:	f04f 0932 	mov.w	r9, #50	; 0x32
    TickType_t lastWakeTime = xTaskGetTickCount();
 800119a:	f847 0d4c 	str.w	r0, [r7, #-76]!
 800119e:	e01d      	b.n	80011dc <fanControl+0xc8>
                channel_1_State = 100;
 80011a0:	f8ab 2000 	strh.w	r2, [fp]
                channel_2_State = 100;
 80011a4:	802a      	strh	r2, [r5, #0]
                channel_3_State = 100;
 80011a6:	8022      	strh	r2, [r4, #0]
                cmr_pwmSetDutyCycle(&channel_1_PWM, channel_1_State);
 80011a8:	f000 ffa4 	bl	80020f4 <cmr_pwmSetDutyCycle>
                cmr_pwmSetDutyCycle(&channel_2_PWM, channel_2_State);
 80011ac:	8829      	ldrh	r1, [r5, #0]
 80011ae:	4830      	ldr	r0, [pc, #192]	; (8001270 <fanControl+0x15c>)
 80011b0:	f000 ffa0 	bl	80020f4 <cmr_pwmSetDutyCycle>
                cmr_pwmSetDutyCycle(&channel_3_PWM, channel_3_State);
 80011b4:	8821      	ldrh	r1, [r4, #0]
 80011b6:	482f      	ldr	r0, [pc, #188]	; (8001274 <fanControl+0x160>)
 80011b8:	f000 ff9c 	bl	80020f4 <cmr_pwmSetDutyCycle>
                cmr_gpioWrite(GPIO_CHANNEL_1_ENABLE, 1);
 80011bc:	2101      	movs	r1, #1
 80011be:	2002      	movs	r0, #2
 80011c0:	f000 fe5c 	bl	8001e7c <cmr_gpioWrite>
                cmr_gpioWrite(GPIO_CHANNEL_2_ENABLE, 1);
 80011c4:	4650      	mov	r0, sl
 80011c6:	2101      	movs	r1, #1
 80011c8:	f000 fe58 	bl	8001e7c <cmr_gpioWrite>
                cmr_gpioWrite(GPIO_CHANNEL_3_ENABLE, 1);
 80011cc:	2101      	movs	r1, #1
 80011ce:	2004      	movs	r0, #4
 80011d0:	f000 fe54 	bl	8001e7c <cmr_gpioWrite>
                cmr_gpioWrite(GPIO_CHANNEL_2_ENABLE, 1);
                cmr_gpioWrite(GPIO_CHANNEL_3_ENABLE, 1);
                break;
        }

        vTaskDelayUntil(&lastWakeTime, fanControl_period_ms);
 80011d4:	2132      	movs	r1, #50	; 0x32
 80011d6:	4638      	mov	r0, r7
 80011d8:	f002 f902 	bl	80033e0 <vTaskDelayUntil>
        switch (heartbeat.state) {
 80011dc:	f898 a000 	ldrb.w	sl, [r8]
 80011e0:	f1ba 0f02 	cmp.w	sl, #2
 80011e4:	d026      	beq.n	8001234 <fanControl+0x120>
                channel_1_State = 100;
 80011e6:	2264      	movs	r2, #100	; 0x64
        switch (heartbeat.state) {
 80011e8:	f1ba 0f03 	cmp.w	sl, #3
                channel_1_State = 0;
 80011ec:	f04f 0e00 	mov.w	lr, #0
                cmr_pwmSetDutyCycle(&channel_1_PWM, channel_1_State);
 80011f0:	4611      	mov	r1, r2
 80011f2:	4630      	mov	r0, r6
        switch (heartbeat.state) {
 80011f4:	d0d4      	beq.n	80011a0 <fanControl+0x8c>
                cmr_pwmSetDutyCycle(&channel_1_PWM, channel_1_State);
 80011f6:	4671      	mov	r1, lr
 80011f8:	4630      	mov	r0, r6
                channel_1_State = 0;
 80011fa:	f8ab e000 	strh.w	lr, [fp]
                channel_2_State = 0;
 80011fe:	f8a5 e000 	strh.w	lr, [r5]
                channel_3_State = 0;
 8001202:	f8a4 e000 	strh.w	lr, [r4]
                cmr_pwmSetDutyCycle(&channel_1_PWM, channel_1_State);
 8001206:	f000 ff75 	bl	80020f4 <cmr_pwmSetDutyCycle>
                cmr_pwmSetDutyCycle(&channel_2_PWM, channel_2_State);
 800120a:	8829      	ldrh	r1, [r5, #0]
 800120c:	4818      	ldr	r0, [pc, #96]	; (8001270 <fanControl+0x15c>)
 800120e:	f000 ff71 	bl	80020f4 <cmr_pwmSetDutyCycle>
                cmr_pwmSetDutyCycle(&channel_3_PWM, channel_3_State);
 8001212:	8821      	ldrh	r1, [r4, #0]
 8001214:	4817      	ldr	r0, [pc, #92]	; (8001274 <fanControl+0x160>)
 8001216:	f000 ff6d 	bl	80020f4 <cmr_pwmSetDutyCycle>
                cmr_gpioWrite(GPIO_CHANNEL_1_ENABLE, 1);
 800121a:	2101      	movs	r1, #1
 800121c:	2002      	movs	r0, #2
 800121e:	f000 fe2d 	bl	8001e7c <cmr_gpioWrite>
                cmr_gpioWrite(GPIO_CHANNEL_2_ENABLE, 1);
 8001222:	2101      	movs	r1, #1
 8001224:	2003      	movs	r0, #3
 8001226:	f000 fe29 	bl	8001e7c <cmr_gpioWrite>
                cmr_gpioWrite(GPIO_CHANNEL_3_ENABLE, 1);
 800122a:	2101      	movs	r1, #1
 800122c:	2004      	movs	r0, #4
 800122e:	f000 fe25 	bl	8001e7c <cmr_gpioWrite>
                break;
 8001232:	e7cf      	b.n	80011d4 <fanControl+0xc0>
                cmr_pwmSetDutyCycle(&channel_1_PWM, channel_1_State);
 8001234:	2132      	movs	r1, #50	; 0x32
 8001236:	4630      	mov	r0, r6
                channel_1_State = 50;
 8001238:	f8ab 9000 	strh.w	r9, [fp]
                channel_2_State = 50;
 800123c:	f8a5 9000 	strh.w	r9, [r5]
                channel_3_State = 50;
 8001240:	f8a4 9000 	strh.w	r9, [r4]
                cmr_pwmSetDutyCycle(&channel_1_PWM, channel_1_State);
 8001244:	f000 ff56 	bl	80020f4 <cmr_pwmSetDutyCycle>
                cmr_pwmSetDutyCycle(&channel_2_PWM, channel_2_State);
 8001248:	8829      	ldrh	r1, [r5, #0]
 800124a:	4809      	ldr	r0, [pc, #36]	; (8001270 <fanControl+0x15c>)
 800124c:	f000 ff52 	bl	80020f4 <cmr_pwmSetDutyCycle>
                cmr_pwmSetDutyCycle(&channel_3_PWM, channel_3_State);
 8001250:	8821      	ldrh	r1, [r4, #0]
 8001252:	4808      	ldr	r0, [pc, #32]	; (8001274 <fanControl+0x160>)
 8001254:	f000 ff4e 	bl	80020f4 <cmr_pwmSetDutyCycle>
                cmr_gpioWrite(GPIO_CHANNEL_1_ENABLE, 1);
 8001258:	4650      	mov	r0, sl
 800125a:	2101      	movs	r1, #1
 800125c:	e7df      	b.n	800121e <fanControl+0x10a>
 800125e:	bf00      	nop
 8001260:	080059c4 	.word	0x080059c4
 8001264:	20000c4c 	.word	0x20000c4c
 8001268:	200017fc 	.word	0x200017fc
 800126c:	20001800 	.word	0x20001800
 8001270:	20000c90 	.word	0x20000c90
 8001274:	20000cd4 	.word	0x20000cd4
 8001278:	20001804 	.word	0x20001804
 800127c:	200017fe 	.word	0x200017fe

08001280 <fanInit>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
void fanInit() {
 8001280:	b500      	push	{lr}
 8001282:	b083      	sub	sp, #12
    cmr_taskInit(
 8001284:	2300      	movs	r3, #0
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	4904      	ldr	r1, [pc, #16]	; (800129c <fanInit+0x1c>)
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <fanInit+0x20>)
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <fanInit+0x24>)
 800128e:	2204      	movs	r2, #4
 8001290:	f001 fa22 	bl	80026d8 <cmr_taskInit>
        "fanControl",
        fanControl_priority,
        fanControl,
        NULL
    );
}
 8001294:	b003      	add	sp, #12
 8001296:	f85d fb04 	ldr.w	pc, [sp], #4
 800129a:	bf00      	nop
 800129c:	08005a44 	.word	0x08005a44
 80012a0:	08001115 	.word	0x08001115
 80012a4:	20000d18 	.word	0x20000d18

080012a8 <gpioInit>:

/**
 * @brief Initializes the GPIO interface.
 */
void gpioInit(void) {
    cmr_gpioPinInit(
 80012a8:	2107      	movs	r1, #7
 80012aa:	4801      	ldr	r0, [pc, #4]	; (80012b0 <gpioInit+0x8>)
 80012ac:	f000 bdc0 	b.w	8001e30 <cmr_gpioPinInit>
 80012b0:	08005a50 	.word	0x08005a50

080012b4 <statusLED>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void statusLED(void *pvParameters) {
 80012b4:	b500      	push	{lr}
    (void) pvParameters;    // Placate compiler.

    cmr_gpioWrite(GPIO_LED_STATUS, 0);
 80012b6:	2100      	movs	r1, #0
static void statusLED(void *pvParameters) {
 80012b8:	b083      	sub	sp, #12
    cmr_gpioWrite(GPIO_LED_STATUS, 0);
 80012ba:	4608      	mov	r0, r1
 80012bc:	f000 fdde 	bl	8001e7c <cmr_gpioWrite>

    TickType_t lastWakeTime = xTaskGetTickCount();
 80012c0:	f001 ff50 	bl	8003164 <xTaskGetTickCount>
 80012c4:	ac02      	add	r4, sp, #8
 80012c6:	f844 0d04 	str.w	r0, [r4, #-4]!
    while (1) {
        cmr_gpioToggle(GPIO_LED_STATUS);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 fde8 	bl	8001ea0 <cmr_gpioToggle>

        vTaskDelayUntil(&lastWakeTime, statusLED_period_ms);
 80012d0:	21fa      	movs	r1, #250	; 0xfa
 80012d2:	4620      	mov	r0, r4
 80012d4:	f002 f884 	bl	80033e0 <vTaskDelayUntil>
 80012d8:	e7f7      	b.n	80012ca <statusLED+0x16>
 80012da:	bf00      	nop

080012dc <main>:
 *
 * Device configuration and task initialization should be performed here.
 *
 * @return Does not return.
 */
int main(void) {
 80012dc:	b500      	push	{lr}
 80012de:	b083      	sub	sp, #12
    // System initialization.
    HAL_Init();
 80012e0:	f002 fa5c 	bl	800379c <HAL_Init>
    cmr_rccSystemClockEnable();
 80012e4:	f000 ff42 	bl	800216c <cmr_rccSystemClockEnable>

    // Peripheral configuration.
    gpioInit();
 80012e8:	f7ff ffde 	bl	80012a8 <gpioInit>
    adcInit();
 80012ec:	f7ff fdd8 	bl	8000ea0 <adcInit>
    canInit();
 80012f0:	f7ff febc 	bl	800106c <canInit>
    sensorsInit();
 80012f4:	f000 f8ec 	bl	80014d0 <sensorsInit>

    cmr_taskInit(
 80012f8:	2300      	movs	r3, #0
 80012fa:	4807      	ldr	r0, [pc, #28]	; (8001318 <main+0x3c>)
 80012fc:	4907      	ldr	r1, [pc, #28]	; (800131c <main+0x40>)
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2202      	movs	r2, #2
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <main+0x44>)
 8001304:	f001 f9e8 	bl	80026d8 <cmr_taskInit>
    brakelightInit();
    pumpInit();

#elif (CMR_PTC_ID == 1) /* Fan Control Board */

    fanInit();
 8001308:	f7ff ffba 	bl	8001280 <fanInit>

    #pragma warning "CMR_PTC_ID is not a valid value!"

#endif

    vTaskStartScheduler();
 800130c:	f001 fec0 	bl	8003090 <vTaskStartScheduler>
    cmr_panic("vTaskStartScheduler returned!");
 8001310:	4804      	ldr	r0, [pc, #16]	; (8001324 <main+0x48>)
 8001312:	f000 fde3 	bl	8001edc <cmr_panic>
 8001316:	bf00      	nop
 8001318:	20000f78 	.word	0x20000f78
 800131c:	08005af8 	.word	0x08005af8
 8001320:	080012b5 	.word	0x080012b5
 8001324:	08005b04 	.word	0x08005b04

08001328 <adcConvLoadVoltage_mV>:
static int32_t adcFractionalConvert(
    const cmr_sensor_t *sensor, uint32_t reading,
    int32_t numerator, int32_t divisor, uint32_t offset
) {
    (void) sensor;  // Placate compiler.
    return ((int32_t) (reading + offset)) * numerator / divisor;
 8001328:	2058      	movs	r0, #88	; 0x58
 800132a:	4b04      	ldr	r3, [pc, #16]	; (800133c <adcConvLoadVoltage_mV+0x14>)
 800132c:	fb00 f101 	mul.w	r1, r0, r1
 8001330:	fb83 3001 	smull	r3, r0, r3, r1
 8001334:	17c9      	asrs	r1, r1, #31
 * @return load voltage in mV.
 */
static int32_t adcConvLoadVoltage_mV(const cmr_sensor_t *s, uint32_t r) {
    // value * 0.8 (mV per bit) * 11 (1:11 voltage divider)
    return adcFractionalConvert(s, r, 88, 10, 0);
}
 8001336:	ebc1 00a0 	rsb	r0, r1, r0, asr #2
 800133a:	4770      	bx	lr
 800133c:	66666667 	.word	0x66666667

08001340 <adcConvLoadCurrent_mA>:
 */
static int32_t adcConvLoadCurrent_mA(const cmr_sensor_t *s, uint32_t r) {
    // mA * 0.010 Ohm * 20 V/V = mV = adcVal * 0.8 mV/bit
    // Solve for mA = adcVal * 24 / 100
    return adcFractionalConvert(s, r, 4, 1, 0);
}
 8001340:	0088      	lsls	r0, r1, #2
 8001342:	4770      	bx	lr

08001344 <adcConvSwitchTemp_dC>:
    // Rth = (33000 / adcVal * (8 / 10000)) - 10000
    // Rth = (33000 / (adcVal * 8) / 10000) - 10000
    // Rth = (330,000,000 / (adcVal * 8)) - 10000
    uint32_t thermistorResistance_Ohm = (330000000 / (adcVal * 8)) - 10000;

    for (size_t i = 0; i < thermTempConvsSwitch_len; i++) {
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <adcConvSwitchTemp_dC+0x54>)
    uint32_t thermistorResistance_Ohm = (330000000 / (adcVal * 8)) - 10000;
 8001346:	4815      	ldr	r0, [pc, #84]	; (800139c <adcConvSwitchTemp_dC+0x58>)
static int32_t adcConvSwitchTemp_dC(const cmr_sensor_t *s, uint32_t adcVal) {
 8001348:	b430      	push	{r4, r5}
    for (size_t i = 0; i < thermTempConvsSwitch_len; i++) {
 800134a:	681d      	ldr	r5, [r3, #0]
    uint32_t thermistorResistance_Ohm = (330000000 / (adcVal * 8)) - 10000;
 800134c:	00c9      	lsls	r1, r1, #3
 800134e:	fbb0 f0f1 	udiv	r0, r0, r1
    for (size_t i = 0; i < thermTempConvsSwitch_len; i++) {
 8001352:	b1e5      	cbz	r5, 800138e <adcConvSwitchTemp_dC+0x4a>
        if (thermistorResistance_Ohm >= thermTempConvsSwitch[i].resistance_Ohm) {
 8001354:	4c12      	ldr	r4, [pc, #72]	; (80013a0 <adcConvSwitchTemp_dC+0x5c>)
 8001356:	f5a0 501c 	sub.w	r0, r0, #9984	; 0x2700
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	3810      	subs	r0, #16
 800135e:	4298      	cmp	r0, r3
 8001360:	d210      	bcs.n	8001384 <adcConvSwitchTemp_dC+0x40>
 8001362:	2200      	movs	r2, #0
 8001364:	e006      	b.n	8001374 <adcConvSwitchTemp_dC+0x30>
 8001366:	f854 1033 	ldr.w	r1, [r4, r3, lsl #3]
 800136a:	4288      	cmp	r0, r1
 800136c:	461a      	mov	r2, r3
 800136e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001372:	d208      	bcs.n	8001386 <adcConvSwitchTemp_dC+0x42>
    for (size_t i = 0; i < thermTempConvsSwitch_len; i++) {
 8001374:	1c53      	adds	r3, r2, #1
 8001376:	42ab      	cmp	r3, r5
 8001378:	d1f5      	bne.n	8001366 <adcConvSwitchTemp_dC+0x22>
            return thermTempConvsSwitch[i].temp_dC;
        }
    }

    return thermTempConvsSwitch[thermTempConvsSwitch_len - 1].temp_dC;
 800137a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
}
 800137e:	bc30      	pop	{r4, r5}
    return thermTempConvsSwitch[thermTempConvsSwitch_len - 1].temp_dC;
 8001380:	6850      	ldr	r0, [r2, #4]
}
 8001382:	4770      	bx	lr
 8001384:	2300      	movs	r3, #0
            return thermTempConvsSwitch[i].temp_dC;
 8001386:	441c      	add	r4, r3
 8001388:	6860      	ldr	r0, [r4, #4]
}
 800138a:	bc30      	pop	{r4, r5}
 800138c:	4770      	bx	lr
 800138e:	4c04      	ldr	r4, [pc, #16]	; (80013a0 <adcConvSwitchTemp_dC+0x5c>)
    for (size_t i = 0; i < thermTempConvsSwitch_len; i++) {
 8001390:	f04f 32ff 	mov.w	r2, #4294967295
 8001394:	e7f1      	b.n	800137a <adcConvSwitchTemp_dC+0x36>
 8001396:	bf00      	nop
 8001398:	08005f50 	.word	0x08005f50
 800139c:	13ab6680 	.word	0x13ab6680
 80013a0:	08005ed0 	.word	0x08005ed0
 80013a4:	00000000 	.word	0x00000000

080013a8 <adcConvRadTherm_dC>:
 * @param adcVal The raw reading.
 *
 * @return Cooling temperature in 10th of degrees C.
 */
static int32_t adcConvRadTherm_dC(const cmr_sensor_t *s, uint32_t adcVal) {
    float sensed_ratio = adcVal / ((float) 4095);
 80013a8:	ee07 1a90 	vmov	s15, r1
 80013ac:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8001458 <adcConvRadTherm_dC+0xb0>
    float r2 = biasR * ((vBias / vSense) - 1);
 80013b0:	ed9f 5a2a 	vldr	s10, [pc, #168]	; 800145c <adcConvRadTherm_dC+0xb4>
 80013b4:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 8001460 <adcConvRadTherm_dC+0xb8>
    float temp = (B * (rTemp + 273.15f)) / (B - ((rTemp + 273.15f) * log(r1/r2)));
 80013b8:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001464 <adcConvRadTherm_dC+0xbc>
    float sensed_ratio = adcVal / ((float) 4095);
 80013bc:	eef8 4a67 	vcvt.f32.u32	s9, s15
    float sensed_voltage = sensed_ratio * ((float) 3.3);
 80013c0:	eddf 7a29 	vldr	s15, [pc, #164]	; 8001468 <adcConvRadTherm_dC+0xc0>
    float sensed_ratio = adcVal / ((float) 4095);
 80013c4:	ee84 7aa5 	vdiv.f32	s14, s9, s11
static int32_t adcConvRadTherm_dC(const cmr_sensor_t *s, uint32_t adcVal) {
 80013c8:	b508      	push	{r3, lr}
    float r2 = biasR * ((vBias / vSense) - 1);
 80013ca:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    float sensed_voltage = sensed_ratio * ((float) 3.3);
 80013ce:	ee27 7a27 	vmul.f32	s14, s14, s15
    float r2 = biasR * ((vBias / vSense) - 1);
 80013d2:	eec5 7a07 	vdiv.f32	s15, s10, s14
 80013d6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80013da:	ee67 7a86 	vmul.f32	s15, s15, s12
    float temp = (B * (rTemp + 273.15f)) / (B - ((rTemp + 273.15f) * log(r1/r2)));
 80013de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013e2:	ee17 0a10 	vmov	r0, s14
 80013e6:	f7ff f87f 	bl	80004e8 <__aeabi_f2d>
 80013ea:	ec41 0b10 	vmov	d0, r0, r1
 80013ee:	f004 f861 	bl	80054b4 <log>
 80013f2:	a313      	add	r3, pc, #76	; (adr r3, 8001440 <adcConvRadTherm_dC+0x98>)
 80013f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f8:	ec51 0b10 	vmov	r0, r1, d0
 80013fc:	f7ff f8c8 	bl	8000590 <__aeabi_dmul>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	a110      	add	r1, pc, #64	; (adr r1, 8001448 <adcConvRadTherm_dC+0xa0>)
 8001406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800140a:	f7fe ff0d 	bl	8000228 <__aeabi_dsub>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	a10f      	add	r1, pc, #60	; (adr r1, 8001450 <adcConvRadTherm_dC+0xa8>)
 8001414:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001418:	f7ff f9e4 	bl	80007e4 <__aeabi_ddiv>
 800141c:	f7ff fb68 	bl	8000af0 <__aeabi_d2f>
    return temp - 273.15f;
 8001420:	eddf 7a12 	vldr	s15, [pc, #72]	; 800146c <adcConvRadTherm_dC+0xc4>
 8001424:	ee07 0a10 	vmov	s14, r0
 8001428:	ee77 7a67 	vsub.f32	s15, s14, s15

    //3435
    float sensed_temp = thermistorCalc(3892.f, 10000.f, 25.f, 5.6e3, sensed_voltage, 2.6f);
    return sensed_temp * 10; //to report dC units
 800142c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001430:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001438:	ee17 0a90 	vmov	r0, s15
 800143c:	bd08      	pop	{r3, pc}
 800143e:	bf00      	nop
 8001440:	60000000 	.word	0x60000000
 8001444:	4072a266 	.word	0x4072a266
 8001448:	00000000 	.word	0x00000000
 800144c:	40ae6800 	.word	0x40ae6800
 8001450:	c0000000 	.word	0xc0000000
 8001454:	4131b4cf 	.word	0x4131b4cf
 8001458:	457ff000 	.word	0x457ff000
 800145c:	40266666 	.word	0x40266666
 8001460:	45af0000 	.word	0x45af0000
 8001464:	461c4000 	.word	0x461c4000
 8001468:	40533333 	.word	0x40533333
 800146c:	43889333 	.word	0x43889333

08001470 <sensorsUpdate>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void sensorsUpdate(void *pvParameters) {
 8001470:	b500      	push	{lr}
 8001472:	b083      	sub	sp, #12
    (void) pvParameters;    // Placate compiler.

    TickType_t lastWakeTime = xTaskGetTickCount();
 8001474:	f001 fe76 	bl	8003164 <xTaskGetTickCount>
 8001478:	ac02      	add	r4, sp, #8
    while (1) {
        cmr_sensorListUpdate(&sensorList);
 800147a:	4d05      	ldr	r5, [pc, #20]	; (8001490 <sensorsUpdate+0x20>)
    TickType_t lastWakeTime = xTaskGetTickCount();
 800147c:	f844 0d04 	str.w	r0, [r4, #-4]!
        cmr_sensorListUpdate(&sensorList);
 8001480:	4628      	mov	r0, r5
 8001482:	f001 f8f9 	bl	8002678 <cmr_sensorListUpdate>

        vTaskDelayUntil(&lastWakeTime, sensorsUpdate_period_ms);
 8001486:	210a      	movs	r1, #10
 8001488:	4620      	mov	r0, r4
 800148a:	f001 ffa9 	bl	80033e0 <vTaskDelayUntil>
 800148e:	e7f7      	b.n	8001480 <sensorsUpdate+0x10>
 8001490:	2000180c 	.word	0x2000180c

08001494 <sampleADCSensor>:
    sensorChannel_t sensorChannel = sensor - sensors;
 8001494:	4a05      	ldr	r2, [pc, #20]	; (80014ac <sampleADCSensor+0x18>)
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <sampleADCSensor+0x1c>)
    return adcRead(sensorsADCChannels[sensorChannel]);
 8001498:	4906      	ldr	r1, [pc, #24]	; (80014b4 <sampleADCSensor+0x20>)
    sensorChannel_t sensorChannel = sensor - sensors;
 800149a:	1a80      	subs	r0, r0, r2
 800149c:	10c0      	asrs	r0, r0, #3
 800149e:	fb03 f300 	mul.w	r3, r3, r0
    return adcRead(sensorsADCChannels[sensorChannel]);
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	5cc8      	ldrb	r0, [r1, r3]
 80014a6:	f7ff bd07 	b.w	8000eb8 <adcRead>
 80014aa:	bf00      	nop
 80014ac:	200001a4 	.word	0x200001a4
 80014b0:	cccccccd 	.word	0xcccccccd
 80014b4:	08005b24 	.word	0x08005b24

080014b8 <adcConvLogicVoltage_mV>:
 80014b8:	2058      	movs	r0, #88	; 0x58
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <adcConvLogicVoltage_mV+0x14>)
 80014bc:	fb00 f101 	mul.w	r1, r0, r1
 80014c0:	fb83 3001 	smull	r3, r0, r3, r1
 80014c4:	17c9      	asrs	r1, r1, #31
 80014c6:	ebc1 00a0 	rsb	r0, r1, r0, asr #2
 80014ca:	4770      	bx	lr
 80014cc:	66666667 	.word	0x66666667

080014d0 <sensorsInit>:
}

/**
 * @brief Initializes the sensor interface.
 */
void sensorsInit(void) {
 80014d0:	b500      	push	{lr}
    cmr_sensorListInit(
 80014d2:	220d      	movs	r2, #13
void sensorsInit(void) {
 80014d4:	b083      	sub	sp, #12
    cmr_sensorListInit(
 80014d6:	4907      	ldr	r1, [pc, #28]	; (80014f4 <sensorsInit+0x24>)
 80014d8:	4807      	ldr	r0, [pc, #28]	; (80014f8 <sensorsInit+0x28>)
 80014da:	f001 f88f 	bl	80025fc <cmr_sensorListInit>
        &sensorList,
        sensors, sizeof(sensors) / sizeof(sensors[0])
    );

    // Task creation.
    cmr_taskInit(
 80014de:	2300      	movs	r3, #0
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	4906      	ldr	r1, [pc, #24]	; (80014fc <sensorsInit+0x2c>)
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <sensorsInit+0x30>)
 80014e6:	4807      	ldr	r0, [pc, #28]	; (8001504 <sensorsInit+0x34>)
 80014e8:	2205      	movs	r2, #5
 80014ea:	f001 f8f5 	bl	80026d8 <cmr_taskInit>
        "sensors update",
        sensorsUpdate_priority,
        sensorsUpdate,
        NULL
    );
}
 80014ee:	b003      	add	sp, #12
 80014f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80014f4:	200001a4 	.word	0x200001a4
 80014f8:	2000180c 	.word	0x2000180c
 80014fc:	08005b34 	.word	0x08005b34
 8001500:	08001471 	.word	0x08001471
 8001504:	200011d8 	.word	0x200011d8

08001508 <cmr_adcSample>:
 *
 * @param pvParameters (cmr_adc_t *) The ADC.
 *
 * @return Does not return.
 */
static void cmr_adcSample(void *pvParameters) {
 8001508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	4604      	mov	r4, r0
    cmr_adc_t *adc = (cmr_adc_t *) pvParameters;

    TickType_t lastWakeTime = xTaskGetTickCount();
 8001510:	f001 fe28 	bl	8003164 <xTaskGetTickCount>
 8001514:	f10d 0808 	add.w	r8, sp, #8
 8001518:	f848 0d04 	str.w	r0, [r8, #-4]!
    while (1) {
        // ADC set up in discontinuous scan mode.
        // Each `HAL_ADC_Start()` call converts the next-highest-rank channel.
        for (size_t i = 0; i < adc->channelsLen; i++) {
 800151c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800151e:	b1a3      	cbz	r3, 800154a <cmr_adcSample+0x42>
 8001520:	2600      	movs	r6, #0
 8001522:	4637      	mov	r7, r6
            cmr_adcChannel_t *channel = &(adc->channels[i]);
 8001524:	6ca3      	ldr	r3, [r4, #72]	; 0x48

            HAL_ADC_Start(&adc->handle);
 8001526:	4620      	mov	r0, r4
            cmr_adcChannel_t *channel = &(adc->channels[i]);
 8001528:	199d      	adds	r5, r3, r6
            HAL_ADC_Start(&adc->handle);
 800152a:	f002 fa15 	bl	8003958 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&adc->handle, CMR_ADC_TIMEOUT_MS);
 800152e:	2101      	movs	r1, #1
 8001530:	4620      	mov	r0, r4
 8001532:	f002 fa7d 	bl	8003a30 <HAL_ADC_PollForConversion>
            channel->value = HAL_ADC_GetValue(&adc->handle);
 8001536:	4620      	mov	r0, r4
 8001538:	f002 facc 	bl	8003ad4 <HAL_ADC_GetValue>
        for (size_t i = 0; i < adc->channelsLen; i++) {
 800153c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
            channel->value = HAL_ADC_GetValue(&adc->handle);
 800153e:	6128      	str	r0, [r5, #16]
        for (size_t i = 0; i < adc->channelsLen; i++) {
 8001540:	3701      	adds	r7, #1
 8001542:	42bb      	cmp	r3, r7
 8001544:	f106 0614 	add.w	r6, r6, #20
 8001548:	d8ec      	bhi.n	8001524 <cmr_adcSample+0x1c>
        }

        vTaskDelayUntil(&lastWakeTime, cmr_adcSample_period_ms);
 800154a:	210a      	movs	r1, #10
 800154c:	4640      	mov	r0, r8
 800154e:	f001 ff47 	bl	80033e0 <vTaskDelayUntil>
        for (size_t i = 0; i < adc->channelsLen; i++) {
 8001552:	e7e3      	b.n	800151c <cmr_adcSample+0x14>

08001554 <cmr_adcInit>:
 * @param channelsLen Length of channels array.
 */
void cmr_adcInit(
    cmr_adc_t *adc, ADC_TypeDef *instance,
    cmr_adcChannel_t *channels, const size_t channelsLen
) {
 8001554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (channelsLen > CMR_ADC_CHANNELS) {
 8001558:	2b10      	cmp	r3, #16
) {
 800155a:	b08d      	sub	sp, #52	; 0x34
    if (channelsLen > CMR_ADC_CHANNELS) {
 800155c:	d866      	bhi.n	800162c <cmr_adcInit+0xd8>
 800155e:	4607      	mov	r7, r0
 8001560:	460d      	mov	r5, r1
 8001562:	4616      	mov	r6, r2
        cmr_panic("Too many channels");
    }

    *adc = (cmr_adc_t) {
 8001564:	2100      	movs	r1, #0
 8001566:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 800156a:	461c      	mov	r4, r3
 800156c:	f003 ff99 	bl	80054a2 <memset>
 8001570:	2201      	movs	r2, #1
 8001572:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001576:	4b2f      	ldr	r3, [pc, #188]	; (8001634 <cmr_adcInit+0xe0>)
 8001578:	603d      	str	r5, [r7, #0]
        },
        .channels = channels,
        .channelsLen = channelsLen
    };

    cmr_rccADCClockEnable(instance);
 800157a:	4628      	mov	r0, r5
    *adc = (cmr_adc_t) {
 800157c:	61fc      	str	r4, [r7, #28]
 800157e:	64be      	str	r6, [r7, #72]	; 0x48
 8001580:	64fc      	str	r4, [r7, #76]	; 0x4c
 8001582:	6079      	str	r1, [r7, #4]
 8001584:	613a      	str	r2, [r7, #16]
 8001586:	617a      	str	r2, [r7, #20]
 8001588:	f887 2020 	strb.w	r2, [r7, #32]
 800158c:	627a      	str	r2, [r7, #36]	; 0x24
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
    cmr_rccADCClockEnable(instance);
 8001590:	f000 feda 	bl	8002348 <cmr_rccADCClockEnable>

    if (HAL_ADC_Init(&adc->handle) != HAL_OK) {
 8001594:	4638      	mov	r0, r7
 8001596:	f002 f92f 	bl	80037f8 <HAL_ADC_Init>
 800159a:	2800      	cmp	r0, #0
 800159c:	d143      	bne.n	8001626 <cmr_adcInit+0xd2>
    for (size_t i = 0; i < adc->channelsLen; i++) {
 800159e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d02f      	beq.n	8001604 <cmr_adcInit+0xb0>
        const cmr_adcChannel_t *channel = adc->channels + i;
 80015a4:	6cbc      	ldr	r4, [r7, #72]	; 0x48
        if (channel->channel > ADC_CHANNEL_15) {
 80015a6:	6822      	ldr	r2, [r4, #0]
 80015a8:	2a0f      	cmp	r2, #15
 80015aa:	d836      	bhi.n	800161a <cmr_adcInit+0xc6>
 80015ac:	4605      	mov	r5, r0
        ADC_ChannelConfTypeDef channelConfig = {
 80015ae:	4681      	mov	r9, r0
        GPIO_InitTypeDef pinConfig = {
 80015b0:	f04f 0803 	mov.w	r8, #3
 80015b4:	e008      	b.n	80015c8 <cmr_adcInit+0x74>
        const cmr_adcChannel_t *channel = adc->channels + i;
 80015b6:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 80015ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
        if (channel->channel > ADC_CHANNEL_15) {
 80015bc:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 80015c0:	2a0f      	cmp	r2, #15
        const cmr_adcChannel_t *channel = adc->channels + i;
 80015c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
        if (channel->channel > ADC_CHANNEL_15) {
 80015c6:	d828      	bhi.n	800161a <cmr_adcInit+0xc6>
        ADC_ChannelConfTypeDef channelConfig = {
 80015c8:	68e3      	ldr	r3, [r4, #12]
 80015ca:	9203      	str	r2, [sp, #12]
            .Rank = i + 1,  // HAL needs Rank to be from 1 to 16
 80015cc:	3501      	adds	r5, #1
        if (HAL_ADC_ConfigChannel(&adc->handle, &channelConfig) != HAL_OK) {
 80015ce:	a903      	add	r1, sp, #12
 80015d0:	4638      	mov	r0, r7
        ADC_ChannelConfTypeDef channelConfig = {
 80015d2:	9504      	str	r5, [sp, #16]
 80015d4:	9305      	str	r3, [sp, #20]
 80015d6:	f8cd 9018 	str.w	r9, [sp, #24]
        if (HAL_ADC_ConfigChannel(&adc->handle, &channelConfig) != HAL_OK) {
 80015da:	f002 fa7f 	bl	8003adc <HAL_ADC_ConfigChannel>
 80015de:	4606      	mov	r6, r0
 80015e0:	b9f0      	cbnz	r0, 8001620 <cmr_adcInit+0xcc>
        cmr_rccGPIOClockEnable(channel->port);
 80015e2:	6860      	ldr	r0, [r4, #4]
 80015e4:	f000 fe18 	bl	8002218 <cmr_rccGPIOClockEnable>
            .Pin = channel->pin,
 80015e8:	8923      	ldrh	r3, [r4, #8]
        HAL_GPIO_Init(channel->port, &pinConfig);
 80015ea:	6860      	ldr	r0, [r4, #4]
            .Pin = channel->pin,
 80015ec:	9307      	str	r3, [sp, #28]
        HAL_GPIO_Init(channel->port, &pinConfig);
 80015ee:	a907      	add	r1, sp, #28
        GPIO_InitTypeDef pinConfig = {
 80015f0:	f8cd 8020 	str.w	r8, [sp, #32]
 80015f4:	9609      	str	r6, [sp, #36]	; 0x24
 80015f6:	960a      	str	r6, [sp, #40]	; 0x28
 80015f8:	960b      	str	r6, [sp, #44]	; 0x2c
        HAL_GPIO_Init(channel->port, &pinConfig);
 80015fa:	f002 ffd1 	bl	80045a0 <HAL_GPIO_Init>
    for (size_t i = 0; i < adc->channelsLen; i++) {
 80015fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001600:	429d      	cmp	r5, r3
 8001602:	d3d8      	bcc.n	80015b6 <cmr_adcInit+0x62>
        cmr_panic("HAL_ADC_Init() failed!");
    }

    cmr_adcConfigChannels(adc);

    cmr_taskInit(
 8001604:	9700      	str	r7, [sp, #0]
 8001606:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <cmr_adcInit+0xe4>)
 800160c:	490b      	ldr	r1, [pc, #44]	; (800163c <cmr_adcInit+0xe8>)
 800160e:	2205      	movs	r2, #5
 8001610:	f001 f862 	bl	80026d8 <cmr_taskInit>
        "ADC sample",
        cmr_adcSample_priority,
        cmr_adcSample,
        adc
    );
}
 8001614:	b00d      	add	sp, #52	; 0x34
 8001616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            cmr_panic("Invalid ADC channel!");
 800161a:	4809      	ldr	r0, [pc, #36]	; (8001640 <cmr_adcInit+0xec>)
 800161c:	f000 fc5e 	bl	8001edc <cmr_panic>
            cmr_panic("HAL_ADC_ConfigChannel() failed!");
 8001620:	4808      	ldr	r0, [pc, #32]	; (8001644 <cmr_adcInit+0xf0>)
 8001622:	f000 fc5b 	bl	8001edc <cmr_panic>
        cmr_panic("HAL_ADC_Init() failed!");
 8001626:	4808      	ldr	r0, [pc, #32]	; (8001648 <cmr_adcInit+0xf4>)
 8001628:	f000 fc58 	bl	8001edc <cmr_panic>
        cmr_panic("Too many channels");
 800162c:	4807      	ldr	r0, [pc, #28]	; (800164c <cmr_adcInit+0xf8>)
 800162e:	f000 fc55 	bl	8001edc <cmr_panic>
 8001632:	bf00      	nop
 8001634:	0f000001 	.word	0x0f000001
 8001638:	08001509 	.word	0x08001509
 800163c:	08005b58 	.word	0x08005b58
 8001640:	08005b64 	.word	0x08005b64
 8001644:	08005b94 	.word	0x08005b94
 8001648:	08005b7c 	.word	0x08005b7c
 800164c:	08005b44 	.word	0x08005b44

08001650 <cmr_adcRead>:
 * @param channel The channel's index.
 *
 * @return The most recent sample for that channel.
 */
uint32_t cmr_adcRead(cmr_adc_t *adc, size_t channel) {
    return adc->channels[channel].value;
 8001650:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001652:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001656:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800165a:	6918      	ldr	r0, [r3, #16]
}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop

08001660 <CAN1_TX_IRQHandler>:
 8001660:	4b01      	ldr	r3, [pc, #4]	; (8001668 <CAN1_TX_IRQHandler+0x8>)
 8001662:	6818      	ldr	r0, [r3, #0]
 8001664:	f002 bd32 	b.w	80040cc <HAL_CAN_IRQHandler>
 8001668:	20001438 	.word	0x20001438

0800166c <CAN1_RX0_IRQHandler>:
 800166c:	4b01      	ldr	r3, [pc, #4]	; (8001674 <CAN1_RX0_IRQHandler+0x8>)
 800166e:	6818      	ldr	r0, [r3, #0]
 8001670:	f002 bd2c 	b.w	80040cc <HAL_CAN_IRQHandler>
 8001674:	20001438 	.word	0x20001438

08001678 <CAN1_RX1_IRQHandler>:
 8001678:	4b01      	ldr	r3, [pc, #4]	; (8001680 <CAN1_RX1_IRQHandler+0x8>)
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	f002 bd26 	b.w	80040cc <HAL_CAN_IRQHandler>
 8001680:	20001438 	.word	0x20001438

08001684 <CAN1_SCE_IRQHandler>:
    } \
    \
    void CAN ## can ## _SCE_IRQHandler(void) { \
        HAL_CAN_IRQHandler(cmr_canInterrupts[can - 1].handle); \
    }
CAN_FOREACH(CAN_IRQ_HANDLERS)
 8001684:	4b01      	ldr	r3, [pc, #4]	; (800168c <CAN1_SCE_IRQHandler+0x8>)
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	f002 bd20 	b.w	80040cc <HAL_CAN_IRQHandler>
 800168c:	20001438 	.word	0x20001438

08001690 <CAN2_TX_IRQHandler>:
 8001690:	4b01      	ldr	r3, [pc, #4]	; (8001698 <CAN2_TX_IRQHandler+0x8>)
 8001692:	6858      	ldr	r0, [r3, #4]
 8001694:	f002 bd1a 	b.w	80040cc <HAL_CAN_IRQHandler>
 8001698:	20001438 	.word	0x20001438

0800169c <CAN2_RX0_IRQHandler>:
 800169c:	4b01      	ldr	r3, [pc, #4]	; (80016a4 <CAN2_RX0_IRQHandler+0x8>)
 800169e:	6858      	ldr	r0, [r3, #4]
 80016a0:	f002 bd14 	b.w	80040cc <HAL_CAN_IRQHandler>
 80016a4:	20001438 	.word	0x20001438

080016a8 <CAN2_RX1_IRQHandler>:
 80016a8:	4b01      	ldr	r3, [pc, #4]	; (80016b0 <CAN2_RX1_IRQHandler+0x8>)
 80016aa:	6858      	ldr	r0, [r3, #4]
 80016ac:	f002 bd0e 	b.w	80040cc <HAL_CAN_IRQHandler>
 80016b0:	20001438 	.word	0x20001438

080016b4 <CAN2_SCE_IRQHandler>:
 80016b4:	4b01      	ldr	r3, [pc, #4]	; (80016bc <CAN2_SCE_IRQHandler+0x8>)
 80016b6:	6858      	ldr	r0, [r3, #4]
 80016b8:	f002 bd08 	b.w	80040cc <HAL_CAN_IRQHandler>
 80016bc:	20001438 	.word	0x20001438

080016c0 <CAN3_TX_IRQHandler>:
 80016c0:	4b01      	ldr	r3, [pc, #4]	; (80016c8 <CAN3_TX_IRQHandler+0x8>)
 80016c2:	6898      	ldr	r0, [r3, #8]
 80016c4:	f002 bd02 	b.w	80040cc <HAL_CAN_IRQHandler>
 80016c8:	20001438 	.word	0x20001438

080016cc <CAN3_RX0_IRQHandler>:
 80016cc:	4b01      	ldr	r3, [pc, #4]	; (80016d4 <CAN3_RX0_IRQHandler+0x8>)
 80016ce:	6898      	ldr	r0, [r3, #8]
 80016d0:	f002 bcfc 	b.w	80040cc <HAL_CAN_IRQHandler>
 80016d4:	20001438 	.word	0x20001438

080016d8 <CAN3_RX1_IRQHandler>:
 80016d8:	4b01      	ldr	r3, [pc, #4]	; (80016e0 <CAN3_RX1_IRQHandler+0x8>)
 80016da:	6898      	ldr	r0, [r3, #8]
 80016dc:	f002 bcf6 	b.w	80040cc <HAL_CAN_IRQHandler>
 80016e0:	20001438 	.word	0x20001438

080016e4 <CAN3_SCE_IRQHandler>:
 80016e4:	4b01      	ldr	r3, [pc, #4]	; (80016ec <CAN3_SCE_IRQHandler+0x8>)
 80016e6:	6898      	ldr	r0, [r3, #8]
 80016e8:	f002 bcf0 	b.w	80040cc <HAL_CAN_IRQHandler>
 80016ec:	20001438 	.word	0x20001438

080016f0 <HAL_CAN_TxMailbox0CompleteCallback>:
 80016f0:	b500      	push	{lr}
 80016f2:	b083      	sub	sp, #12
 80016f4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80016f6:	a901      	add	r1, sp, #4
 80016f8:	f001 f9fe 	bl	8002af8 <xQueueGiveFromISR>
 80016fc:	2801      	cmp	r0, #1
 80016fe:	d10c      	bne.n	800171a <HAL_CAN_TxMailbox0CompleteCallback+0x2a>
 8001700:	9b01      	ldr	r3, [sp, #4]
 8001702:	b13b      	cbz	r3, 8001714 <HAL_CAN_TxMailbox0CompleteCallback+0x24>
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_CAN_TxMailbox0CompleteCallback+0x30>)
 8001706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	f3bf 8f4f 	dsb	sy
 8001710:	f3bf 8f6f 	isb	sy
 8001714:	b003      	add	sp, #12
 8001716:	f85d fb04 	ldr.w	pc, [sp], #4
 800171a:	4802      	ldr	r0, [pc, #8]	; (8001724 <HAL_CAN_TxMailbox0CompleteCallback+0x34>)
 800171c:	f000 fbde 	bl	8001edc <cmr_panic>
 8001720:	e000ed04 	.word	0xe000ed04
 8001724:	08005bb4 	.word	0x08005bb4

08001728 <HAL_CAN_TxMailbox0AbortCallback>:
 8001728:	b500      	push	{lr}
 800172a:	b083      	sub	sp, #12
 800172c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800172e:	a901      	add	r1, sp, #4
 8001730:	f001 f9e2 	bl	8002af8 <xQueueGiveFromISR>
 8001734:	2801      	cmp	r0, #1
 8001736:	d10c      	bne.n	8001752 <HAL_CAN_TxMailbox0AbortCallback+0x2a>
 8001738:	9b01      	ldr	r3, [sp, #4]
 800173a:	b13b      	cbz	r3, 800174c <HAL_CAN_TxMailbox0AbortCallback+0x24>
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_CAN_TxMailbox0AbortCallback+0x30>)
 800173e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	f3bf 8f4f 	dsb	sy
 8001748:	f3bf 8f6f 	isb	sy
 800174c:	b003      	add	sp, #12
 800174e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001752:	4802      	ldr	r0, [pc, #8]	; (800175c <HAL_CAN_TxMailbox0AbortCallback+0x34>)
 8001754:	f000 fbc2 	bl	8001edc <cmr_panic>
 8001758:	e000ed04 	.word	0xe000ed04
 800175c:	08005bb4 	.word	0x08005bb4

08001760 <HAL_CAN_TxMailbox1CompleteCallback>:
 8001760:	b500      	push	{lr}
 8001762:	b083      	sub	sp, #12
 8001764:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001766:	a901      	add	r1, sp, #4
 8001768:	f001 f9c6 	bl	8002af8 <xQueueGiveFromISR>
 800176c:	2801      	cmp	r0, #1
 800176e:	d10c      	bne.n	800178a <HAL_CAN_TxMailbox1CompleteCallback+0x2a>
 8001770:	9b01      	ldr	r3, [sp, #4]
 8001772:	b13b      	cbz	r3, 8001784 <HAL_CAN_TxMailbox1CompleteCallback+0x24>
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_CAN_TxMailbox1CompleteCallback+0x30>)
 8001776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	f3bf 8f4f 	dsb	sy
 8001780:	f3bf 8f6f 	isb	sy
 8001784:	b003      	add	sp, #12
 8001786:	f85d fb04 	ldr.w	pc, [sp], #4
 800178a:	4802      	ldr	r0, [pc, #8]	; (8001794 <HAL_CAN_TxMailbox1CompleteCallback+0x34>)
 800178c:	f000 fba6 	bl	8001edc <cmr_panic>
 8001790:	e000ed04 	.word	0xe000ed04
 8001794:	08005bb4 	.word	0x08005bb4

08001798 <HAL_CAN_TxMailbox1AbortCallback>:
 8001798:	b500      	push	{lr}
 800179a:	b083      	sub	sp, #12
 800179c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800179e:	a901      	add	r1, sp, #4
 80017a0:	f001 f9aa 	bl	8002af8 <xQueueGiveFromISR>
 80017a4:	2801      	cmp	r0, #1
 80017a6:	d10c      	bne.n	80017c2 <HAL_CAN_TxMailbox1AbortCallback+0x2a>
 80017a8:	9b01      	ldr	r3, [sp, #4]
 80017aa:	b13b      	cbz	r3, 80017bc <HAL_CAN_TxMailbox1AbortCallback+0x24>
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_CAN_TxMailbox1AbortCallback+0x30>)
 80017ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	f3bf 8f4f 	dsb	sy
 80017b8:	f3bf 8f6f 	isb	sy
 80017bc:	b003      	add	sp, #12
 80017be:	f85d fb04 	ldr.w	pc, [sp], #4
 80017c2:	4802      	ldr	r0, [pc, #8]	; (80017cc <HAL_CAN_TxMailbox1AbortCallback+0x34>)
 80017c4:	f000 fb8a 	bl	8001edc <cmr_panic>
 80017c8:	e000ed04 	.word	0xe000ed04
 80017cc:	08005bb4 	.word	0x08005bb4

080017d0 <HAL_CAN_TxMailbox2CompleteCallback>:
 80017d0:	b500      	push	{lr}
 80017d2:	b083      	sub	sp, #12
 80017d4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80017d6:	a901      	add	r1, sp, #4
 80017d8:	f001 f98e 	bl	8002af8 <xQueueGiveFromISR>
 80017dc:	2801      	cmp	r0, #1
 80017de:	d10c      	bne.n	80017fa <HAL_CAN_TxMailbox2CompleteCallback+0x2a>
 80017e0:	9b01      	ldr	r3, [sp, #4]
 80017e2:	b13b      	cbz	r3, 80017f4 <HAL_CAN_TxMailbox2CompleteCallback+0x24>
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_CAN_TxMailbox2CompleteCallback+0x30>)
 80017e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	f3bf 8f4f 	dsb	sy
 80017f0:	f3bf 8f6f 	isb	sy
 80017f4:	b003      	add	sp, #12
 80017f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80017fa:	4802      	ldr	r0, [pc, #8]	; (8001804 <HAL_CAN_TxMailbox2CompleteCallback+0x34>)
 80017fc:	f000 fb6e 	bl	8001edc <cmr_panic>
 8001800:	e000ed04 	.word	0xe000ed04
 8001804:	08005bb4 	.word	0x08005bb4

08001808 <HAL_CAN_TxMailbox2AbortCallback>:
        /* Treat abort as complete. */ \
        cmr_canTXCpltCallback(handle, mailbox); \
    }
CAN_TX_MAILBOX_CALLBACK(0)
CAN_TX_MAILBOX_CALLBACK(1)
CAN_TX_MAILBOX_CALLBACK(2)
 8001808:	b500      	push	{lr}
 800180a:	b083      	sub	sp, #12
    if (xSemaphoreGiveFromISR(can->txSem, &higherWoken) != pdTRUE) {
 800180c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800180e:	a901      	add	r1, sp, #4
 8001810:	f001 f972 	bl	8002af8 <xQueueGiveFromISR>
 8001814:	2801      	cmp	r0, #1
 8001816:	d10c      	bne.n	8001832 <HAL_CAN_TxMailbox2AbortCallback+0x2a>
    portYIELD_FROM_ISR(higherWoken);
 8001818:	9b01      	ldr	r3, [sp, #4]
 800181a:	b13b      	cbz	r3, 800182c <HAL_CAN_TxMailbox2AbortCallback+0x24>
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_CAN_TxMailbox2AbortCallback+0x30>)
 800181e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	f3bf 8f4f 	dsb	sy
 8001828:	f3bf 8f6f 	isb	sy
CAN_TX_MAILBOX_CALLBACK(2)
 800182c:	b003      	add	sp, #12
 800182e:	f85d fb04 	ldr.w	pc, [sp], #4
        cmr_panic("TX semaphore released too many times!");
 8001832:	4802      	ldr	r0, [pc, #8]	; (800183c <HAL_CAN_TxMailbox2AbortCallback+0x34>)
 8001834:	f000 fb52 	bl	8001edc <cmr_panic>
 8001838:	e000ed04 	.word	0xe000ed04
 800183c:	08005bb4 	.word	0x08005bb4

08001840 <HAL_CAN_ErrorCallback>:
 * @brief HAL CAN error callback.
 *
 * @warning Called from an interrupt handler!
 * @warning The handle must have been configured through this library!
 */
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *handle) {
 8001840:	b510      	push	{r4, lr}
    cmr_can_t *can = cmr_canFromHandle(handle);

    uint32_t error = handle->ErrorCode;
 8001842:	6a43      	ldr	r3, [r0, #36]	; 0x24
    if (error & (
 8001844:	f413 3ffc 	tst.w	r3, #129024	; 0x1f800
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *handle) {
 8001848:	b082      	sub	sp, #8
 800184a:	4604      	mov	r4, r0
    if (error & (
 800184c:	d103      	bne.n	8001856 <HAL_CAN_ErrorCallback+0x16>
        }
        portYIELD_FROM_ISR(higherWoken);
    }

    // Clear errors.
    handle->ErrorCode = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	6263      	str	r3, [r4, #36]	; 0x24
}
 8001852:	b002      	add	sp, #8
 8001854:	bd10      	pop	{r4, pc}
        if (xSemaphoreGiveFromISR(can->txSem, &higherWoken) != pdTRUE) {
 8001856:	a901      	add	r1, sp, #4
 8001858:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800185a:	f001 f94d 	bl	8002af8 <xQueueGiveFromISR>
 800185e:	2801      	cmp	r0, #1
 8001860:	d10e      	bne.n	8001880 <HAL_CAN_ErrorCallback+0x40>
        portYIELD_FROM_ISR(higherWoken);
 8001862:	9b01      	ldr	r3, [sp, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f2      	beq.n	800184e <HAL_CAN_ErrorCallback+0xe>
 8001868:	4b07      	ldr	r3, [pc, #28]	; (8001888 <HAL_CAN_ErrorCallback+0x48>)
 800186a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	f3bf 8f4f 	dsb	sy
 8001874:	f3bf 8f6f 	isb	sy
    handle->ErrorCode = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	6263      	str	r3, [r4, #36]	; 0x24
}
 800187c:	b002      	add	sp, #8
 800187e:	bd10      	pop	{r4, pc}
            cmr_panic("TX semaphore released too many times!");
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <HAL_CAN_ErrorCallback+0x4c>)
 8001882:	f000 fb2b 	bl	8001edc <cmr_panic>
 8001886:	bf00      	nop
 8001888:	e000ed04 	.word	0xe000ed04
 800188c:	08005bb4 	.word	0x08005bb4

08001890 <cmr_canRXMetaTimeoutWarn>:
 * @param now_ms Current timestamp, in milliseconds.
 *
 * @return A negative value if a timeout warning has occurred; otherwise 0.
 */
int cmr_canRXMetaTimeoutWarn(const cmr_canRXMeta_t *meta, TickType_t now_ms) {
    return cmr_canTimeout(
 8001890:	6943      	ldr	r3, [r0, #20]
    TickType_t release_ms = lastReceived_ms + threshold_ms;
 8001892:	6840      	ldr	r0, [r0, #4]
    if (now_ms < lastReceived_ms && release_ms <= lastReceived_ms) {
 8001894:	428b      	cmp	r3, r1
    TickType_t release_ms = lastReceived_ms + threshold_ms;
 8001896:	4418      	add	r0, r3
    if (now_ms < lastReceived_ms && release_ms <= lastReceived_ms) {
 8001898:	d907      	bls.n	80018aa <cmr_canRXMetaTimeoutWarn+0x1a>
 800189a:	4283      	cmp	r3, r0
 800189c:	d209      	bcs.n	80018b2 <cmr_canRXMetaTimeoutWarn+0x22>
    if (release_ms < now_ms) {
 800189e:	4281      	cmp	r1, r0
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	bf98      	it	ls
 80018a6:	2000      	movls	r0, #0
 80018a8:	4770      	bx	lr
    if (lastReceived_ms <= now_ms && release_ms < lastReceived_ms) {
 80018aa:	4283      	cmp	r3, r0
 80018ac:	d9f7      	bls.n	800189e <cmr_canRXMetaTimeoutWarn+0xe>
        return 0;
 80018ae:	2000      	movs	r0, #0
        meta->lastReceived_ms, meta->timeoutWarn_ms, now_ms
    );
}
 80018b0:	4770      	bx	lr
        return -1;
 80018b2:	f04f 30ff 	mov.w	r0, #4294967295
 80018b6:	4770      	bx	lr

080018b8 <cmr_canRXMetaTimeoutError>:
 * @param now_ms Current timestamp, in milliseconds.
 *
 * @return A negative value if a timeout error has occurred; otherwise 0.
 */
int cmr_canRXMetaTimeoutError(const cmr_canRXMeta_t *meta, TickType_t now_ms) {
    return cmr_canTimeout(
 80018b8:	6943      	ldr	r3, [r0, #20]
    TickType_t release_ms = lastReceived_ms + threshold_ms;
 80018ba:	68c0      	ldr	r0, [r0, #12]
    if (now_ms < lastReceived_ms && release_ms <= lastReceived_ms) {
 80018bc:	428b      	cmp	r3, r1
    TickType_t release_ms = lastReceived_ms + threshold_ms;
 80018be:	4418      	add	r0, r3
    if (now_ms < lastReceived_ms && release_ms <= lastReceived_ms) {
 80018c0:	d907      	bls.n	80018d2 <cmr_canRXMetaTimeoutError+0x1a>
 80018c2:	4283      	cmp	r3, r0
 80018c4:	d209      	bcs.n	80018da <cmr_canRXMetaTimeoutError+0x22>
    if (release_ms < now_ms) {
 80018c6:	4281      	cmp	r1, r0
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	bf98      	it	ls
 80018ce:	2000      	movls	r0, #0
 80018d0:	4770      	bx	lr
    if (lastReceived_ms <= now_ms && release_ms < lastReceived_ms) {
 80018d2:	4283      	cmp	r3, r0
 80018d4:	d9f7      	bls.n	80018c6 <cmr_canRXMetaTimeoutError+0xe>
        return 0;
 80018d6:	2000      	movs	r0, #0
        meta->lastReceived_ms, meta->timeoutError_ms, now_ms
    );
}
 80018d8:	4770      	bx	lr
        return -1;
 80018da:	f04f 30ff 	mov.w	r0, #4294967295
 80018de:	4770      	bx	lr

080018e0 <HAL_CAN_RxFifo0MsgPendingCallback>:
    void HAL_CAN_RxFifo ## fifo ## MsgPendingCallback( \
        CAN_HandleTypeDef *handle \
    ) { \
        cmr_canRXPendingCallback(handle, CAN_RX_FIFO ## fifo); \
    }
CAN_RX_FIFO_PENDING(0)
 80018e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018e4:	b08a      	sub	sp, #40	; 0x28
    if (HAL_CAN_GetRxMessage(handle, fifo, &msg, data) != HAL_OK) {
 80018e6:	ab01      	add	r3, sp, #4
 80018e8:	aa03      	add	r2, sp, #12
 80018ea:	2100      	movs	r1, #0
CAN_RX_FIFO_PENDING(0)
 80018ec:	4680      	mov	r8, r0
    if (HAL_CAN_GetRxMessage(handle, fifo, &msg, data) != HAL_OK) {
 80018ee:	f002 fb51 	bl	8003f94 <HAL_CAN_GetRxMessage>
 80018f2:	b110      	cbz	r0, 80018fa <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
CAN_RX_FIFO_PENDING(0)
 80018f4:	b00a      	add	sp, #40	; 0x28
 80018f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (size_t i = 0; i < can->rxMetaLen; i++) {
 80018fa:	f8d8 7078 	ldr.w	r7, [r8, #120]	; 0x78
    cmr_canRXData(can, msg.StdId, data, msg.DLC);
 80018fe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8001902:	9a07      	ldr	r2, [sp, #28]
    for (size_t i = 0; i < can->rxMetaLen; i++) {
 8001904:	b17f      	cbz	r7, 8001926 <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
        cmr_canRXMeta_t *meta = can->rxMeta + i;
 8001906:	f8d8 6074 	ldr.w	r6, [r8, #116]	; 0x74
        if (meta->canID == canID) {
 800190a:	8834      	ldrh	r4, [r6, #0]
 800190c:	428c      	cmp	r4, r1
 800190e:	d013      	beq.n	8001938 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
 8001910:	f106 0420 	add.w	r4, r6, #32
 8001914:	e003      	b.n	800191e <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
 8001916:	f834 5b20 	ldrh.w	r5, [r4], #32
 800191a:	428d      	cmp	r5, r1
 800191c:	d00c      	beq.n	8001938 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
    for (size_t i = 0; i < can->rxMetaLen; i++) {
 800191e:	3001      	adds	r0, #1
 8001920:	42b8      	cmp	r0, r7
        cmr_canRXMeta_t *meta = can->rxMeta + i;
 8001922:	4626      	mov	r6, r4
    for (size_t i = 0; i < can->rxMetaLen; i++) {
 8001924:	d1f7      	bne.n	8001916 <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
        if (can->rxCallback) {
 8001926:	f8d8 407c 	ldr.w	r4, [r8, #124]	; 0x7c
 800192a:	2c00      	cmp	r4, #0
 800192c:	d0e2      	beq.n	80018f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x14>
            can->rxCallback(can, canID, data, dataLen);
 800192e:	4613      	mov	r3, r2
 8001930:	4640      	mov	r0, r8
 8001932:	aa01      	add	r2, sp, #4
 8001934:	47a0      	blx	r4
CAN_RX_FIFO_PENDING(0)
 8001936:	e7dd      	b.n	80018f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x14>
    memcpy((void *) meta->payload, data, dataLen);
 8001938:	a901      	add	r1, sp, #4
 800193a:	f106 0018 	add.w	r0, r6, #24
 800193e:	f003 fda5 	bl	800548c <memcpy>
    meta->lastReceived_ms = xTaskGetTickCountFromISR();
 8001942:	f001 fc15 	bl	8003170 <xTaskGetTickCountFromISR>
 8001946:	6170      	str	r0, [r6, #20]
CAN_RX_FIFO_PENDING(0)
 8001948:	b00a      	add	sp, #40	; 0x28
 800194a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800194e:	bf00      	nop

08001950 <HAL_CAN_RxFifo1MsgPendingCallback>:
CAN_RX_FIFO_PENDING(1)
 8001950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001954:	b08a      	sub	sp, #40	; 0x28
    if (HAL_CAN_GetRxMessage(handle, fifo, &msg, data) != HAL_OK) {
 8001956:	ab01      	add	r3, sp, #4
 8001958:	aa03      	add	r2, sp, #12
 800195a:	2101      	movs	r1, #1
CAN_RX_FIFO_PENDING(1)
 800195c:	4680      	mov	r8, r0
    if (HAL_CAN_GetRxMessage(handle, fifo, &msg, data) != HAL_OK) {
 800195e:	f002 fb19 	bl	8003f94 <HAL_CAN_GetRxMessage>
 8001962:	b110      	cbz	r0, 800196a <HAL_CAN_RxFifo1MsgPendingCallback+0x1a>
CAN_RX_FIFO_PENDING(1)
 8001964:	b00a      	add	sp, #40	; 0x28
 8001966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (size_t i = 0; i < can->rxMetaLen; i++) {
 800196a:	f8d8 7078 	ldr.w	r7, [r8, #120]	; 0x78
    cmr_canRXData(can, msg.StdId, data, msg.DLC);
 800196e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8001972:	9a07      	ldr	r2, [sp, #28]
    for (size_t i = 0; i < can->rxMetaLen; i++) {
 8001974:	b17f      	cbz	r7, 8001996 <HAL_CAN_RxFifo1MsgPendingCallback+0x46>
        cmr_canRXMeta_t *meta = can->rxMeta + i;
 8001976:	f8d8 6074 	ldr.w	r6, [r8, #116]	; 0x74
        if (meta->canID == canID) {
 800197a:	8834      	ldrh	r4, [r6, #0]
 800197c:	428c      	cmp	r4, r1
 800197e:	d013      	beq.n	80019a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x58>
 8001980:	f106 0420 	add.w	r4, r6, #32
 8001984:	e003      	b.n	800198e <HAL_CAN_RxFifo1MsgPendingCallback+0x3e>
 8001986:	f834 5b20 	ldrh.w	r5, [r4], #32
 800198a:	428d      	cmp	r5, r1
 800198c:	d00c      	beq.n	80019a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x58>
    for (size_t i = 0; i < can->rxMetaLen; i++) {
 800198e:	3001      	adds	r0, #1
 8001990:	42b8      	cmp	r0, r7
        cmr_canRXMeta_t *meta = can->rxMeta + i;
 8001992:	4626      	mov	r6, r4
    for (size_t i = 0; i < can->rxMetaLen; i++) {
 8001994:	d1f7      	bne.n	8001986 <HAL_CAN_RxFifo1MsgPendingCallback+0x36>
        if (can->rxCallback) {
 8001996:	f8d8 407c 	ldr.w	r4, [r8, #124]	; 0x7c
 800199a:	2c00      	cmp	r4, #0
 800199c:	d0e2      	beq.n	8001964 <HAL_CAN_RxFifo1MsgPendingCallback+0x14>
            can->rxCallback(can, canID, data, dataLen);
 800199e:	4613      	mov	r3, r2
 80019a0:	4640      	mov	r0, r8
 80019a2:	aa01      	add	r2, sp, #4
 80019a4:	47a0      	blx	r4
CAN_RX_FIFO_PENDING(1)
 80019a6:	e7dd      	b.n	8001964 <HAL_CAN_RxFifo1MsgPendingCallback+0x14>
    memcpy((void *) meta->payload, data, dataLen);
 80019a8:	a901      	add	r1, sp, #4
 80019aa:	f106 0018 	add.w	r0, r6, #24
 80019ae:	f003 fd6d 	bl	800548c <memcpy>
    meta->lastReceived_ms = xTaskGetTickCountFromISR();
 80019b2:	f001 fbdd 	bl	8003170 <xTaskGetTickCountFromISR>
 80019b6:	6170      	str	r0, [r6, #20]
CAN_RX_FIFO_PENDING(1)
 80019b8:	b00a      	add	sp, #40	; 0x28
 80019ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019be:	bf00      	nop

080019c0 <cmr_canInit>:
    cmr_canBitRate_t bitRate,
    cmr_canRXMeta_t *rxMeta, size_t rxMetaLen,
    cmr_canRXCallback_t rxCallback,
    GPIO_TypeDef *rxPort, uint16_t rxPin,
    GPIO_TypeDef *txPort, uint16_t txPin
) {
 80019c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019c4:	b087      	sub	sp, #28
 80019c6:	460d      	mov	r5, r1
 80019c8:	4690      	mov	r8, r2
    *can = (cmr_can_t) {
 80019ca:	2100      	movs	r1, #0
 80019cc:	2280      	movs	r2, #128	; 0x80
) {
 80019ce:	4604      	mov	r4, r0
 80019d0:	461e      	mov	r6, r3
 80019d2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80019d4:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 80019d8:	f8bd a054 	ldrh.w	sl, [sp, #84]	; 0x54
    *can = (cmr_can_t) {
 80019dc:	f003 fd61 	bl	80054a2 <memset>
 80019e0:	2201      	movs	r2, #1
 80019e2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80019e6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80019ea:	9811      	ldr	r0, [sp, #68]	; 0x44
 80019ec:	6766      	str	r6, [r4, #116]	; 0x74
        .rxCallback = rxCallback
    };

    // These numbers assume 48 MHz ABP1 peripheral clock frequency
    // 48 MHz / (6 + 1 + 1 time quanta) / Prescaler = bitRate
    switch (bitRate) {
 80019ee:	4590      	cmp	r8, r2
    *can = (cmr_can_t) {
 80019f0:	6025      	str	r5, [r4, #0]
 80019f2:	67a7      	str	r7, [r4, #120]	; 0x78
 80019f4:	67e0      	str	r0, [r4, #124]	; 0x7c
 80019f6:	60e1      	str	r1, [r4, #12]
 80019f8:	6123      	str	r3, [r4, #16]
 80019fa:	7662      	strb	r2, [r4, #25]
 80019fc:	76e2      	strb	r2, [r4, #27]
    switch (bitRate) {
 80019fe:	d074      	beq.n	8001aea <cmr_canInit+0x12a>
 8001a00:	d370      	bcc.n	8001ae4 <cmr_canInit+0x124>
 8001a02:	f1b8 0f02 	cmp.w	r8, #2
 8001a06:	d014      	beq.n	8001a32 <cmr_canInit+0x72>
        case CMR_CAN_BITRATE_1M:
            can->handle.Init.Prescaler = 6;
            break;
    }

    can->txSem = xSemaphoreCreateCountingStatic(
 8001a08:	2103      	movs	r1, #3
 8001a0a:	4608      	mov	r0, r1
 8001a0c:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 8001a10:	f001 f846 	bl	8002aa0 <xQueueCreateCountingSemaphoreStatic>
    size_t canIdx;
    IRQn_Type irqTX;
    IRQn_Type irqRX0;
    IRQn_Type irqRX1;
    IRQn_Type irqSCE;
    switch ((uintptr_t) instance) {
 8001a14:	4b6c      	ldr	r3, [pc, #432]	; (8001bc8 <cmr_canInit+0x208>)
    can->txSem = xSemaphoreCreateCountingStatic(
 8001a16:	62a0      	str	r0, [r4, #40]	; 0x28
    switch ((uintptr_t) instance) {
 8001a18:	429d      	cmp	r5, r3
 8001a1a:	d071      	beq.n	8001b00 <cmr_canInit+0x140>
 8001a1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a20:	429d      	cmp	r5, r3
 8001a22:	d065      	beq.n	8001af0 <cmr_canInit+0x130>
 8001a24:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001a28:	429d      	cmp	r5, r3
 8001a2a:	d005      	beq.n	8001a38 <cmr_canInit+0x78>
            cmr_panic("Unknown CAN instance!");
 8001a2c:	4867      	ldr	r0, [pc, #412]	; (8001bcc <cmr_canInit+0x20c>)
 8001a2e:	f000 fa55 	bl	8001edc <cmr_panic>
            can->handle.Init.Prescaler = 6;
 8001a32:	2306      	movs	r3, #6
 8001a34:	6063      	str	r3, [r4, #4]
            break;
 8001a36:	e7e7      	b.n	8001a08 <cmr_canInit+0x48>
            irqTX = CAN ## num ## _TX_IRQn; \
            irqRX0 = CAN ## num ## _RX0_IRQn; \
            irqRX1 = CAN ## num ## _RX1_IRQn; \
            irqSCE = CAN ## num ## _SCE_IRQn; \
            break;
CAN_FOREACH(CAN_INTERRUPT_CONFIG)
 8001a38:	2616      	movs	r6, #22
 8001a3a:	2715      	movs	r7, #21
 8001a3c:	f04f 0814 	mov.w	r8, #20
 8001a40:	f04f 0b13 	mov.w	fp, #19
 8001a44:	2000      	movs	r0, #0
#undef CAN_INTERRUPT_CONFIG
        default:
            cmr_panic("Unknown CAN instance!");
    }

    cmr_canInterrupts[canIdx] = (cmr_canInterrupt_t) {
 8001a46:	4b62      	ldr	r3, [pc, #392]	; (8001bd0 <cmr_canInit+0x210>)
        .handle = &can->handle
    };
    HAL_NVIC_SetPriority(irqTX, 5, 0);
 8001a48:	2200      	movs	r2, #0
    cmr_canInterrupts[canIdx] = (cmr_canInterrupt_t) {
 8001a4a:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
    HAL_NVIC_SetPriority(irqTX, 5, 0);
 8001a4e:	2105      	movs	r1, #5
 8001a50:	4658      	mov	r0, fp
 8001a52:	f002 fc77 	bl	8004344 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(irqRX0, 5, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2105      	movs	r1, #5
 8001a5a:	4640      	mov	r0, r8
 8001a5c:	f002 fc72 	bl	8004344 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(irqRX1, 5, 0);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2105      	movs	r1, #5
 8001a64:	4638      	mov	r0, r7
 8001a66:	f002 fc6d 	bl	8004344 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(irqSCE, 5, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2105      	movs	r1, #5
 8001a6e:	4630      	mov	r0, r6
 8001a70:	f002 fc68 	bl	8004344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqTX);
 8001a74:	4658      	mov	r0, fp
 8001a76:	f002 fc9b 	bl	80043b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(irqRX0);
 8001a7a:	4640      	mov	r0, r8
 8001a7c:	f002 fc98 	bl	80043b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(irqRX1);
 8001a80:	4638      	mov	r0, r7
 8001a82:	f002 fc95 	bl	80043b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(irqSCE);
 8001a86:	4630      	mov	r0, r6
 8001a88:	f002 fc92 	bl	80043b0 <HAL_NVIC_EnableIRQ>

    cmr_rccCANClockEnable(instance);
 8001a8c:	4628      	mov	r0, r5
 8001a8e:	f000 fc71 	bl	8002374 <cmr_rccCANClockEnable>
    cmr_rccGPIOClockEnable(rxPort);
 8001a92:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001a94:	f000 fbc0 	bl	8002218 <cmr_rccGPIOClockEnable>
    cmr_rccGPIOClockEnable(txPort);
 8001a98:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001a9a:	f000 fbbd 	bl	8002218 <cmr_rccGPIOClockEnable>
    switch ((uintptr_t) instance) {
 8001a9e:	4b4a      	ldr	r3, [pc, #296]	; (8001bc8 <cmr_canInit+0x208>)

    // Configure CAN RX pin.
    GPIO_InitTypeDef pinConfig = {
 8001aa0:	f8cd 9004 	str.w	r9, [sp, #4]
 8001aa4:	2002      	movs	r0, #2
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	2203      	movs	r2, #3
    switch ((uintptr_t) instance) {
 8001aaa:	429d      	cmp	r5, r3
    GPIO_InitTypeDef pinConfig = {
 8001aac:	9002      	str	r0, [sp, #8]
 8001aae:	9103      	str	r1, [sp, #12]
 8001ab0:	9204      	str	r2, [sp, #16]
    switch ((uintptr_t) instance) {
 8001ab2:	d051      	beq.n	8001b58 <cmr_canInit+0x198>
 8001ab4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ab8:	429d      	cmp	r5, r3
 8001aba:	d029      	beq.n	8001b10 <cmr_canInit+0x150>
 8001abc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001ac0:	429d      	cmp	r5, r3
 8001ac2:	d1b3      	bne.n	8001a2c <cmr_canInit+0x6c>
            switch ((uintptr_t) port) {
 8001ac4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001ac6:	f503 33d0 	add.w	r3, r3, #106496	; 0x1a000
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d067      	beq.n	8001b9e <cmr_canInit+0x1de>
 8001ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d061      	beq.n	8001b9a <cmr_canInit+0x1da>
 8001ad6:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d05d      	beq.n	8001b9a <cmr_canInit+0x1da>
                    cmr_panic("Unknown/unspported GPIO port!");
 8001ade:	483d      	ldr	r0, [pc, #244]	; (8001bd4 <cmr_canInit+0x214>)
 8001ae0:	f000 f9fc 	bl	8001edc <cmr_panic>
            can->handle.Init.Prescaler = 24;
 8001ae4:	2318      	movs	r3, #24
 8001ae6:	6063      	str	r3, [r4, #4]
            break;
 8001ae8:	e78e      	b.n	8001a08 <cmr_canInit+0x48>
            can->handle.Init.Prescaler = 12;
 8001aea:	230c      	movs	r3, #12
 8001aec:	6063      	str	r3, [r4, #4]
            break;
 8001aee:	e78b      	b.n	8001a08 <cmr_canInit+0x48>
CAN_FOREACH(CAN_INTERRUPT_CONFIG)
 8001af0:	264d      	movs	r6, #77	; 0x4d
 8001af2:	274c      	movs	r7, #76	; 0x4c
 8001af4:	f04f 084b 	mov.w	r8, #75	; 0x4b
 8001af8:	f04f 0b4a 	mov.w	fp, #74	; 0x4a
 8001afc:	2002      	movs	r0, #2
 8001afe:	e7a2      	b.n	8001a46 <cmr_canInit+0x86>
 8001b00:	2642      	movs	r6, #66	; 0x42
 8001b02:	2741      	movs	r7, #65	; 0x41
 8001b04:	f04f 0840 	mov.w	r8, #64	; 0x40
 8001b08:	f04f 0b3f 	mov.w	fp, #63	; 0x3f
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	e79a      	b.n	8001a46 <cmr_canInit+0x86>
            return GPIO_AF11_CAN3;
 8001b10:	230b      	movs	r3, #11
        .Mode = GPIO_MODE_AF_PP,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_VERY_HIGH,
        .Alternate = cmr_canGPIOAF(instance, rxPort)
    };
    HAL_GPIO_Init(rxPort, &pinConfig);
 8001b12:	ae01      	add	r6, sp, #4
 8001b14:	4631      	mov	r1, r6
 8001b16:	9812      	ldr	r0, [sp, #72]	; 0x48
    GPIO_InitTypeDef pinConfig = {
 8001b18:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(rxPort, &pinConfig);
 8001b1a:	f002 fd41 	bl	80045a0 <HAL_GPIO_Init>
    switch ((uintptr_t) instance) {
 8001b1e:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <cmr_canInit+0x208>)

    // Configure CAN TX pin.
    pinConfig.Pin = txPin;
 8001b20:	f8cd a004 	str.w	sl, [sp, #4]
    switch ((uintptr_t) instance) {
 8001b24:	429d      	cmp	r5, r3
 8001b26:	d015      	beq.n	8001b54 <cmr_canInit+0x194>
 8001b28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b2c:	429d      	cmp	r5, r3
 8001b2e:	d032      	beq.n	8001b96 <cmr_canInit+0x1d6>
 8001b30:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001b34:	429d      	cmp	r5, r3
 8001b36:	f47f af79 	bne.w	8001a2c <cmr_canInit+0x6c>
            switch ((uintptr_t) port) {
 8001b3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001b3c:	f503 33d0 	add.w	r3, r3, #106496	; 0x1a000
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d035      	beq.n	8001bb0 <cmr_canInit+0x1f0>
 8001b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d003      	beq.n	8001b54 <cmr_canInit+0x194>
 8001b4c:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d1c4      	bne.n	8001ade <cmr_canInit+0x11e>
                    return GPIO_AF9_CAN1;
 8001b54:	2509      	movs	r5, #9
 8001b56:	e008      	b.n	8001b6a <cmr_canInit+0x1aa>
    HAL_GPIO_Init(rxPort, &pinConfig);
 8001b58:	ae01      	add	r6, sp, #4
 8001b5a:	4631      	mov	r1, r6
    GPIO_InitTypeDef pinConfig = {
 8001b5c:	2509      	movs	r5, #9
    HAL_GPIO_Init(rxPort, &pinConfig);
 8001b5e:	9812      	ldr	r0, [sp, #72]	; 0x48
    GPIO_InitTypeDef pinConfig = {
 8001b60:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(rxPort, &pinConfig);
 8001b62:	f002 fd1d 	bl	80045a0 <HAL_GPIO_Init>
    pinConfig.Pin = txPin;
 8001b66:	f8cd a004 	str.w	sl, [sp, #4]
    pinConfig.Alternate = cmr_canGPIOAF(instance, rxPort);
    HAL_GPIO_Init(txPort, &pinConfig);
 8001b6a:	9814      	ldr	r0, [sp, #80]	; 0x50
    pinConfig.Alternate = cmr_canGPIOAF(instance, rxPort);
 8001b6c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(txPort, &pinConfig);
 8001b6e:	4631      	mov	r1, r6
 8001b70:	f002 fd16 	bl	80045a0 <HAL_GPIO_Init>

    if (HAL_CAN_Init(&can->handle) != HAL_OK) {
 8001b74:	4620      	mov	r0, r4
 8001b76:	f002 f869 	bl	8003c4c <HAL_CAN_Init>
 8001b7a:	b9d8      	cbnz	r0, 8001bb4 <cmr_canInit+0x1f4>
        cmr_panic("HAL_CAN_Init() failed!");
    }

    if (HAL_CAN_Start(&can->handle) != HAL_OK) {
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	f002 f983 	bl	8003e88 <HAL_CAN_Start>
 8001b82:	b9e8      	cbnz	r0, 8001bc0 <cmr_canInit+0x200>
        cmr_panic("HAL_CAN_Start() failed!");
    }

    if (HAL_CAN_ActivateNotification(
 8001b84:	4620      	mov	r0, r4
 8001b86:	f648 7113 	movw	r1, #36627	; 0x8f13
 8001b8a:	f002 fa85 	bl	8004098 <HAL_CAN_ActivateNotification>
 8001b8e:	b9a0      	cbnz	r0, 8001bba <cmr_canInit+0x1fa>
            CAN_IT_LAST_ERROR_CODE |
            CAN_IT_ERROR
    )) {
        cmr_panic("HAL_CAN_ActivateNotification() failed!");
    }
}
 8001b90:	b007      	add	sp, #28
 8001b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return GPIO_AF11_CAN3;
 8001b96:	250b      	movs	r5, #11
 8001b98:	e7e7      	b.n	8001b6a <cmr_canInit+0x1aa>
                    return GPIO_AF9_CAN1;
 8001b9a:	2309      	movs	r3, #9
 8001b9c:	e7b9      	b.n	8001b12 <cmr_canInit+0x152>
    HAL_GPIO_Init(rxPort, &pinConfig);
 8001b9e:	ae01      	add	r6, sp, #4
    GPIO_InitTypeDef pinConfig = {
 8001ba0:	2308      	movs	r3, #8
 8001ba2:	4610      	mov	r0, r2
    HAL_GPIO_Init(rxPort, &pinConfig);
 8001ba4:	4631      	mov	r1, r6
    GPIO_InitTypeDef pinConfig = {
 8001ba6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(rxPort, &pinConfig);
 8001ba8:	f002 fcfa 	bl	80045a0 <HAL_GPIO_Init>
    pinConfig.Pin = txPin;
 8001bac:	f8cd a004 	str.w	sl, [sp, #4]
                    return GPIO_AF8_CAN1;
 8001bb0:	2508      	movs	r5, #8
 8001bb2:	e7da      	b.n	8001b6a <cmr_canInit+0x1aa>
        cmr_panic("HAL_CAN_Init() failed!");
 8001bb4:	4808      	ldr	r0, [pc, #32]	; (8001bd8 <cmr_canInit+0x218>)
 8001bb6:	f000 f991 	bl	8001edc <cmr_panic>
        cmr_panic("HAL_CAN_ActivateNotification() failed!");
 8001bba:	4808      	ldr	r0, [pc, #32]	; (8001bdc <cmr_canInit+0x21c>)
 8001bbc:	f000 f98e 	bl	8001edc <cmr_panic>
        cmr_panic("HAL_CAN_Start() failed!");
 8001bc0:	4807      	ldr	r0, [pc, #28]	; (8001be0 <cmr_canInit+0x220>)
 8001bc2:	f000 f98b 	bl	8001edc <cmr_panic>
 8001bc6:	bf00      	nop
 8001bc8:	40006800 	.word	0x40006800
 8001bcc:	08005c14 	.word	0x08005c14
 8001bd0:	20001438 	.word	0x20001438
 8001bd4:	08005c2c 	.word	0x08005c2c
 8001bd8:	08005c4c 	.word	0x08005c4c
 8001bdc:	08005c7c 	.word	0x08005c7c
 8001be0:	08005c64 	.word	0x08005c64

08001be4 <cmr_canFilter>:
 * @param filtersLen The number of filters. Must be less than
 * `CMR_CAN_FILTERBANKS`.
 */
void cmr_canFilter(
    cmr_can_t *can, const cmr_canFilter_t *filters, size_t filtersLen
) {
 8001be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (filtersLen >= CMR_CAN_FILTERBANKS) {
 8001be8:	2a0d      	cmp	r2, #13
) {
 8001bea:	b08b      	sub	sp, #44	; 0x2c
    if (filtersLen >= CMR_CAN_FILTERBANKS) {
 8001bec:	d874      	bhi.n	8001cd8 <cmr_canFilter+0xf4>
 8001bee:	4615      	mov	r5, r2
 8001bf0:	4606      	mov	r6, r0
        cmr_panic("Too many filter banks!");
    }

    CAN_TypeDef *instance = can->handle.Instance;
 8001bf2:	6803      	ldr	r3, [r0, #0]

    for (size_t i = 0; i < filtersLen; i++) {
 8001bf4:	2a00      	cmp	r2, #0
 8001bf6:	d036      	beq.n	8001c66 <cmr_canFilter+0x82>
 8001bf8:	4a39      	ldr	r2, [pc, #228]	; (8001ce0 <cmr_canFilter+0xfc>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d036      	beq.n	8001c6c <cmr_canFilter+0x88>
 8001bfe:	f04f 0b00 	mov.w	fp, #0
 8001c02:	460c      	mov	r4, r1
        // In 16 bit ID list mode, FilterIdHigh, FilterIdLow, FilterMaskIdHigh,
        // and FilterMaskIdLow all serve as a whitelist of left-aligned 11-bit
        // CAN IDs.
        // See RM0430 32.7.4 Fig. 387.
        const uint16_t CMR_CAN_ID_FILTER_SHIFT = 5;
        CAN_FilterTypeDef config = {
 8001c04:	46da      	mov	sl, fp
 8001c06:	466f      	mov	r7, sp
 8001c08:	f04f 0901 	mov.w	r9, #1
 8001c0c:	f04f 080e 	mov.w	r8, #14
            : CAN_FILTERMODE_IDLIST;
 8001c10:	7821      	ldrb	r1, [r4, #0]
            .FilterIdHigh           = filter->ids[0] << CMR_CAN_ID_FILTER_SHIFT,
 8001c12:	8920      	ldrh	r0, [r4, #8]
            .FilterIdLow            = filter->ids[1] << CMR_CAN_ID_FILTER_SHIFT,
            .FilterMaskIdHigh       = filter->ids[2] << CMR_CAN_ID_FILTER_SHIFT,
 8001c14:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
            .FilterIdLow            = filter->ids[1] << CMR_CAN_ID_FILTER_SHIFT,
 8001c18:	f8b4 c00a 	ldrh.w	ip, [r4, #10]
            .FilterMaskIdLow        = filter->ids[3] << CMR_CAN_ID_FILTER_SHIFT,
 8001c1c:	89e2      	ldrh	r2, [r4, #14]
        CAN_FilterTypeDef config = {
 8001c1e:	f8cd b014 	str.w	fp, [sp, #20]
        uint32_t filterMode = filter->isMask
 8001c22:	f081 0101 	eor.w	r1, r1, #1
            .FilterIdHigh           = filter->ids[0] << CMR_CAN_ID_FILTER_SHIFT,
 8001c26:	0140      	lsls	r0, r0, #5
            .FilterMaskIdHigh       = filter->ids[2] << CMR_CAN_ID_FILTER_SHIFT,
 8001c28:	ea4f 134e 	mov.w	r3, lr, lsl #5
            .FilterIdLow            = filter->ids[1] << CMR_CAN_ID_FILTER_SHIFT,
 8001c2c:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
            .FilterMaskIdLow        = filter->ids[3] << CMR_CAN_ID_FILTER_SHIFT,
 8001c30:	0152      	lsls	r2, r2, #5
        CAN_FilterTypeDef config = {
 8001c32:	9106      	str	r1, [sp, #24]
 8001c34:	9000      	str	r0, [sp, #0]
 8001c36:	9302      	str	r3, [sp, #8]
            .FilterScale            = CAN_FILTERSCALE_16BIT,
            .FilterActivation       = ENABLE,
            .SlaveStartFilterBank   = CMR_CAN_FILTERBANKS
        };

        if (HAL_CAN_ConfigFilter(&can->handle, &config) != HAL_OK) {
 8001c38:	4639      	mov	r1, r7
        CAN_FilterTypeDef config = {
 8001c3a:	6863      	ldr	r3, [r4, #4]
 8001c3c:	f8cd a01c 	str.w	sl, [sp, #28]
        if (HAL_CAN_ConfigFilter(&can->handle, &config) != HAL_OK) {
 8001c40:	4630      	mov	r0, r6
        CAN_FilterTypeDef config = {
 8001c42:	f8cd 9020 	str.w	r9, [sp, #32]
 8001c46:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8001c4a:	f8cd c004 	str.w	ip, [sp, #4]
 8001c4e:	9203      	str	r2, [sp, #12]
 8001c50:	9304      	str	r3, [sp, #16]
        if (HAL_CAN_ConfigFilter(&can->handle, &config) != HAL_OK) {
 8001c52:	f002 f87d 	bl	8003d50 <HAL_CAN_ConfigFilter>
 8001c56:	2800      	cmp	r0, #0
 8001c58:	d13b      	bne.n	8001cd2 <cmr_canFilter+0xee>
    for (size_t i = 0; i < filtersLen; i++) {
 8001c5a:	f10b 0b01 	add.w	fp, fp, #1
 8001c5e:	455d      	cmp	r5, fp
 8001c60:	f104 0410 	add.w	r4, r4, #16
 8001c64:	d1d4      	bne.n	8001c10 <cmr_canFilter+0x2c>
            cmr_panic("HAL_CAN_ConfigFilter() failed!");
        }
    }
}
 8001c66:	b00b      	add	sp, #44	; 0x2c
 8001c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (size_t i = 0; i < filtersLen; i++) {
 8001c6c:	f04f 0b0e 	mov.w	fp, #14
 8001c70:	eb01 1a05 	add.w	sl, r1, r5, lsl #4
 8001c74:	460c      	mov	r4, r1
        CAN_FilterTypeDef config = {
 8001c76:	46d9      	mov	r9, fp
 8001c78:	466f      	mov	r7, sp
 8001c7a:	f04f 0800 	mov.w	r8, #0
 8001c7e:	2501      	movs	r5, #1
            : CAN_FILTERMODE_IDLIST;
 8001c80:	7823      	ldrb	r3, [r4, #0]
            .FilterIdHigh           = filter->ids[0] << CMR_CAN_ID_FILTER_SHIFT,
 8001c82:	8921      	ldrh	r1, [r4, #8]
            .FilterIdLow            = filter->ids[1] << CMR_CAN_ID_FILTER_SHIFT,
 8001c84:	8960      	ldrh	r0, [r4, #10]
            .FilterMaskIdHigh       = filter->ids[2] << CMR_CAN_ID_FILTER_SHIFT,
 8001c86:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
            .FilterMaskIdLow        = filter->ids[3] << CMR_CAN_ID_FILTER_SHIFT,
 8001c8a:	89e2      	ldrh	r2, [r4, #14]
        CAN_FilterTypeDef config = {
 8001c8c:	f8cd b014 	str.w	fp, [sp, #20]
        uint32_t filterMode = filter->isMask
 8001c90:	f083 0301 	eor.w	r3, r3, #1
            .FilterIdHigh           = filter->ids[0] << CMR_CAN_ID_FILTER_SHIFT,
 8001c94:	0149      	lsls	r1, r1, #5
            .FilterIdLow            = filter->ids[1] << CMR_CAN_ID_FILTER_SHIFT,
 8001c96:	0140      	lsls	r0, r0, #5
            .FilterMaskIdHigh       = filter->ids[2] << CMR_CAN_ID_FILTER_SHIFT,
 8001c98:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            .FilterMaskIdLow        = filter->ids[3] << CMR_CAN_ID_FILTER_SHIFT,
 8001c9c:	0152      	lsls	r2, r2, #5
        CAN_FilterTypeDef config = {
 8001c9e:	9306      	str	r3, [sp, #24]
 8001ca0:	9100      	str	r1, [sp, #0]
 8001ca2:	6863      	ldr	r3, [r4, #4]
 8001ca4:	9001      	str	r0, [sp, #4]
        if (HAL_CAN_ConfigFilter(&can->handle, &config) != HAL_OK) {
 8001ca6:	4639      	mov	r1, r7
 8001ca8:	4630      	mov	r0, r6
        CAN_FilterTypeDef config = {
 8001caa:	f8cd 801c 	str.w	r8, [sp, #28]
 8001cae:	9508      	str	r5, [sp, #32]
 8001cb0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8001cb4:	f8cd e008 	str.w	lr, [sp, #8]
 8001cb8:	9203      	str	r2, [sp, #12]
 8001cba:	9304      	str	r3, [sp, #16]
        if (HAL_CAN_ConfigFilter(&can->handle, &config) != HAL_OK) {
 8001cbc:	f002 f848 	bl	8003d50 <HAL_CAN_ConfigFilter>
 8001cc0:	b938      	cbnz	r0, 8001cd2 <cmr_canFilter+0xee>
 8001cc2:	3410      	adds	r4, #16
    for (size_t i = 0; i < filtersLen; i++) {
 8001cc4:	4554      	cmp	r4, sl
 8001cc6:	f10b 0b01 	add.w	fp, fp, #1
 8001cca:	d1d9      	bne.n	8001c80 <cmr_canFilter+0x9c>
}
 8001ccc:	b00b      	add	sp, #44	; 0x2c
 8001cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            cmr_panic("HAL_CAN_ConfigFilter() failed!");
 8001cd2:	4804      	ldr	r0, [pc, #16]	; (8001ce4 <cmr_canFilter+0x100>)
 8001cd4:	f000 f902 	bl	8001edc <cmr_panic>
        cmr_panic("Too many filter banks!");
 8001cd8:	4803      	ldr	r0, [pc, #12]	; (8001ce8 <cmr_canFilter+0x104>)
 8001cda:	f000 f8ff 	bl	8001edc <cmr_panic>
 8001cde:	bf00      	nop
 8001ce0:	40006800 	.word	0x40006800
 8001ce4:	08005bf4 	.word	0x08005bf4
 8001ce8:	08005bdc 	.word	0x08005bdc

08001cec <cmr_canTX>:
 */
int cmr_canTX(
    cmr_can_t *can,
    uint16_t id, const void *data, size_t len,
    TickType_t timeout
) {
 8001cec:	b570      	push	{r4, r5, r6, lr}
 8001cee:	b088      	sub	sp, #32
    CAN_TxHeaderTypeDef txHeader = {
 8001cf0:	2400      	movs	r4, #0
 8001cf2:	9102      	str	r1, [sp, #8]
 8001cf4:	9306      	str	r3, [sp, #24]
) {
 8001cf6:	4605      	mov	r5, r0
 8001cf8:	4616      	mov	r6, r2
        .DLC = len,
        .TransmitGlobalTime = DISABLE
    };

    // Attempt to reserve a mailbox.
    BaseType_t result = xSemaphoreTake(can->txSem, timeout);
 8001cfa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001cfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    CAN_TxHeaderTypeDef txHeader = {
 8001cfe:	9403      	str	r4, [sp, #12]
    BaseType_t result = xSemaphoreTake(can->txSem, timeout);
 8001d00:	4623      	mov	r3, r4
 8001d02:	4621      	mov	r1, r4
    CAN_TxHeaderTypeDef txHeader = {
 8001d04:	9404      	str	r4, [sp, #16]
 8001d06:	9405      	str	r4, [sp, #20]
 8001d08:	f88d 401c 	strb.w	r4, [sp, #28]
    BaseType_t result = xSemaphoreTake(can->txSem, timeout);
 8001d0c:	f000 ff28 	bl	8002b60 <xQueueGenericReceive>
    if (result != pdTRUE) {
 8001d10:	2801      	cmp	r0, #1
 8001d12:	d108      	bne.n	8001d26 <cmr_canTX+0x3a>
    }

    // Even though the interface for HAL_CAN_AddTxMessage() does not specify the
    // data as `const`, it does not touch the data. Oh well.
    uint32_t txMailbox;
    HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(
 8001d14:	4632      	mov	r2, r6
 8001d16:	4628      	mov	r0, r5
 8001d18:	ab01      	add	r3, sp, #4
 8001d1a:	a902      	add	r1, sp, #8
 8001d1c:	f002 f8e2 	bl	8003ee4 <HAL_CAN_AddTxMessage>
        &can->handle, &txHeader, (void *) data, &txMailbox
    );
    if (status != HAL_OK) {
 8001d20:	b928      	cbnz	r0, 8001d2e <cmr_canTX+0x42>
        cmr_panic("Semaphore was available, but no mailboxes were found!");
    }

    return 0;
}
 8001d22:	b008      	add	sp, #32
 8001d24:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
 8001d26:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001d2a:	b008      	add	sp, #32
 8001d2c:	bd70      	pop	{r4, r5, r6, pc}
        cmr_panic("Semaphore was available, but no mailboxes were found!");
 8001d2e:	4801      	ldr	r0, [pc, #4]	; (8001d34 <cmr_canTX+0x48>)
 8001d30:	f000 f8d4 	bl	8001edc <cmr_panic>
 8001d34:	08005ca4 	.word	0x08005ca4

08001d38 <DMA1_Stream0_IRQHandler>:
 */
#define DMA_IRQ_HANDLER(ctrl, stream) \
    void DMA_STREAM_NAME(ctrl, stream, _IRQHandler)(void) { \
        HAL_DMA_IRQHandler(cmr_dmaInterrupts[ctrl - 1][stream].handle); \
    }
DMA_STREAM_FOREACH(DMA_IRQ_HANDLER)
 8001d38:	4b01      	ldr	r3, [pc, #4]	; (8001d40 <DMA1_Stream0_IRQHandler+0x8>)
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	f002 bb60 	b.w	8004400 <HAL_DMA_IRQHandler>
 8001d40:	20001444 	.word	0x20001444

08001d44 <DMA1_Stream1_IRQHandler>:
 8001d44:	4b01      	ldr	r3, [pc, #4]	; (8001d4c <DMA1_Stream1_IRQHandler+0x8>)
 8001d46:	6858      	ldr	r0, [r3, #4]
 8001d48:	f002 bb5a 	b.w	8004400 <HAL_DMA_IRQHandler>
 8001d4c:	20001444 	.word	0x20001444

08001d50 <DMA1_Stream2_IRQHandler>:
 8001d50:	4b01      	ldr	r3, [pc, #4]	; (8001d58 <DMA1_Stream2_IRQHandler+0x8>)
 8001d52:	6898      	ldr	r0, [r3, #8]
 8001d54:	f002 bb54 	b.w	8004400 <HAL_DMA_IRQHandler>
 8001d58:	20001444 	.word	0x20001444

08001d5c <DMA1_Stream3_IRQHandler>:
 8001d5c:	4b01      	ldr	r3, [pc, #4]	; (8001d64 <DMA1_Stream3_IRQHandler+0x8>)
 8001d5e:	68d8      	ldr	r0, [r3, #12]
 8001d60:	f002 bb4e 	b.w	8004400 <HAL_DMA_IRQHandler>
 8001d64:	20001444 	.word	0x20001444

08001d68 <DMA1_Stream4_IRQHandler>:
 8001d68:	4b01      	ldr	r3, [pc, #4]	; (8001d70 <DMA1_Stream4_IRQHandler+0x8>)
 8001d6a:	6918      	ldr	r0, [r3, #16]
 8001d6c:	f002 bb48 	b.w	8004400 <HAL_DMA_IRQHandler>
 8001d70:	20001444 	.word	0x20001444

08001d74 <DMA1_Stream5_IRQHandler>:
 8001d74:	4b01      	ldr	r3, [pc, #4]	; (8001d7c <DMA1_Stream5_IRQHandler+0x8>)
 8001d76:	6958      	ldr	r0, [r3, #20]
 8001d78:	f002 bb42 	b.w	8004400 <HAL_DMA_IRQHandler>
 8001d7c:	20001444 	.word	0x20001444

08001d80 <DMA1_Stream6_IRQHandler>:
 8001d80:	4b01      	ldr	r3, [pc, #4]	; (8001d88 <DMA1_Stream6_IRQHandler+0x8>)
 8001d82:	6998      	ldr	r0, [r3, #24]
 8001d84:	f002 bb3c 	b.w	8004400 <HAL_DMA_IRQHandler>
 8001d88:	20001444 	.word	0x20001444

08001d8c <DMA1_Stream7_IRQHandler>:
 8001d8c:	4b01      	ldr	r3, [pc, #4]	; (8001d94 <DMA1_Stream7_IRQHandler+0x8>)
 8001d8e:	69d8      	ldr	r0, [r3, #28]
 8001d90:	f002 bb36 	b.w	8004400 <HAL_DMA_IRQHandler>
 8001d94:	20001444 	.word	0x20001444

08001d98 <DMA2_Stream0_IRQHandler>:
 8001d98:	4b01      	ldr	r3, [pc, #4]	; (8001da0 <DMA2_Stream0_IRQHandler+0x8>)
 8001d9a:	6a18      	ldr	r0, [r3, #32]
 8001d9c:	f002 bb30 	b.w	8004400 <HAL_DMA_IRQHandler>
 8001da0:	20001444 	.word	0x20001444

08001da4 <DMA2_Stream1_IRQHandler>:
 8001da4:	4b01      	ldr	r3, [pc, #4]	; (8001dac <DMA2_Stream1_IRQHandler+0x8>)
 8001da6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001da8:	f002 bb2a 	b.w	8004400 <HAL_DMA_IRQHandler>
 8001dac:	20001444 	.word	0x20001444

08001db0 <DMA2_Stream2_IRQHandler>:
 8001db0:	4b01      	ldr	r3, [pc, #4]	; (8001db8 <DMA2_Stream2_IRQHandler+0x8>)
 8001db2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001db4:	f002 bb24 	b.w	8004400 <HAL_DMA_IRQHandler>
 8001db8:	20001444 	.word	0x20001444

08001dbc <DMA2_Stream3_IRQHandler>:
 8001dbc:	4b01      	ldr	r3, [pc, #4]	; (8001dc4 <DMA2_Stream3_IRQHandler+0x8>)
 8001dbe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001dc0:	f002 bb1e 	b.w	8004400 <HAL_DMA_IRQHandler>
 8001dc4:	20001444 	.word	0x20001444

08001dc8 <DMA2_Stream4_IRQHandler>:
 8001dc8:	4b01      	ldr	r3, [pc, #4]	; (8001dd0 <DMA2_Stream4_IRQHandler+0x8>)
 8001dca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001dcc:	f002 bb18 	b.w	8004400 <HAL_DMA_IRQHandler>
 8001dd0:	20001444 	.word	0x20001444

08001dd4 <DMA2_Stream5_IRQHandler>:
 8001dd4:	4b01      	ldr	r3, [pc, #4]	; (8001ddc <DMA2_Stream5_IRQHandler+0x8>)
 8001dd6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001dd8:	f002 bb12 	b.w	8004400 <HAL_DMA_IRQHandler>
 8001ddc:	20001444 	.word	0x20001444

08001de0 <DMA2_Stream6_IRQHandler>:
 8001de0:	4b01      	ldr	r3, [pc, #4]	; (8001de8 <DMA2_Stream6_IRQHandler+0x8>)
 8001de2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001de4:	f002 bb0c 	b.w	8004400 <HAL_DMA_IRQHandler>
 8001de8:	20001444 	.word	0x20001444

08001dec <DMA2_Stream7_IRQHandler>:
 8001dec:	4b01      	ldr	r3, [pc, #4]	; (8001df4 <DMA2_Stream7_IRQHandler+0x8>)
 8001dee:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001df0:	f002 bb06 	b.w	8004400 <HAL_DMA_IRQHandler>
 8001df4:	20001444 	.word	0x20001444

08001df8 <EXTI0_IRQHandler>:
 */
#define EXTI_IRQHandler(name, pins) \
    void EXTI##name##_IRQHandler(void) { \
        HAL_GPIO_EXTI_IRQHandler(pins); \
    }
EXTI_IRQHandler(0, GPIO_PIN_0)
 8001df8:	2001      	movs	r0, #1
 8001dfa:	f002 bce7 	b.w	80047cc <HAL_GPIO_EXTI_IRQHandler>
 8001dfe:	bf00      	nop

08001e00 <EXTI1_IRQHandler>:
EXTI_IRQHandler(1, GPIO_PIN_1)
 8001e00:	2002      	movs	r0, #2
 8001e02:	f002 bce3 	b.w	80047cc <HAL_GPIO_EXTI_IRQHandler>
 8001e06:	bf00      	nop

08001e08 <EXTI2_IRQHandler>:
EXTI_IRQHandler(2, GPIO_PIN_2)
 8001e08:	2004      	movs	r0, #4
 8001e0a:	f002 bcdf 	b.w	80047cc <HAL_GPIO_EXTI_IRQHandler>
 8001e0e:	bf00      	nop

08001e10 <EXTI3_IRQHandler>:
EXTI_IRQHandler(3, GPIO_PIN_3)
 8001e10:	2008      	movs	r0, #8
 8001e12:	f002 bcdb 	b.w	80047cc <HAL_GPIO_EXTI_IRQHandler>
 8001e16:	bf00      	nop

08001e18 <EXTI4_IRQHandler>:
EXTI_IRQHandler(4, GPIO_PIN_4)
 8001e18:	2010      	movs	r0, #16
 8001e1a:	f002 bcd7 	b.w	80047cc <HAL_GPIO_EXTI_IRQHandler>
 8001e1e:	bf00      	nop

08001e20 <EXTI9_5_IRQHandler>:
EXTI_IRQHandler(
 8001e20:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 8001e24:	f002 bcd2 	b.w	80047cc <HAL_GPIO_EXTI_IRQHandler>

08001e28 <EXTI15_10_IRQHandler>:
    9_5,
    GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_7 | GPIO_PIN_6 | GPIO_PIN_5
)
EXTI_IRQHandler(
 8001e28:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 8001e2c:	f002 bcce 	b.w	80047cc <HAL_GPIO_EXTI_IRQHandler>

08001e30 <cmr_gpioPinInit>:
 * @brief Configures the specified GPIO pin(s).
 *
 * @param pinConfigs The pin configuration(s).
 * @param pinConfigsLen The number of pin configurations.
 */
void cmr_gpioPinInit(const cmr_gpioPinConfig_t *pinConfigs, const size_t pinConfigsLen) {
 8001e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cmr_gpioPinConfigs = pinConfigs;
 8001e34:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8001e74 <cmr_gpioPinInit+0x44>
    cmr_gpioPinConfigsLen = pinConfigsLen;
 8001e38:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8001e78 <cmr_gpioPinInit+0x48>
    cmr_gpioPinConfigs = pinConfigs;
 8001e3c:	f8c9 0000 	str.w	r0, [r9]
    cmr_gpioPinConfigsLen = pinConfigsLen;
 8001e40:	f8c8 1000 	str.w	r1, [r8]

    for (size_t i = 0; i < cmr_gpioPinConfigsLen; i++) {
 8001e44:	b1a1      	cbz	r1, 8001e70 <cmr_gpioPinInit+0x40>
 8001e46:	2400      	movs	r4, #0
 8001e48:	4605      	mov	r5, r0
 8001e4a:	4626      	mov	r6, r4
 8001e4c:	e001      	b.n	8001e52 <cmr_gpioPinInit+0x22>
 8001e4e:	f8d9 5000 	ldr.w	r5, [r9]
        const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[i];
        cmr_rccGPIOClockEnable(pinConfig->port);
 8001e52:	5928      	ldr	r0, [r5, r4]
        const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[i];
 8001e54:	192f      	adds	r7, r5, r4
        cmr_rccGPIOClockEnable(pinConfig->port);
 8001e56:	f000 f9df 	bl	8002218 <cmr_rccGPIOClockEnable>

        // The HAL GPIO driver doesn't actually declare the initialization
        // struct as `const`, but it doesn't modify it either.
        HAL_GPIO_Init(
 8001e5a:	5928      	ldr	r0, [r5, r4]
 8001e5c:	1d39      	adds	r1, r7, #4
 8001e5e:	f002 fb9f 	bl	80045a0 <HAL_GPIO_Init>
    for (size_t i = 0; i < cmr_gpioPinConfigsLen; i++) {
 8001e62:	f8d8 3000 	ldr.w	r3, [r8]
 8001e66:	3601      	adds	r6, #1
 8001e68:	42b3      	cmp	r3, r6
 8001e6a:	f104 0418 	add.w	r4, r4, #24
 8001e6e:	d8ee      	bhi.n	8001e4e <cmr_gpioPinInit+0x1e>
 8001e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e74:	20001484 	.word	0x20001484
 8001e78:	20001488 	.word	0x20001488

08001e7c <cmr_gpioWrite>:
 * @param value The value to write (zero for off; non-zero for on).
 */
void cmr_gpioWrite(size_t pin, int value) {
    configASSERT(pin < cmr_gpioPinConfigsLen);

    const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[pin];
 8001e7c:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <cmr_gpioWrite+0x20>)
 8001e7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	00c0      	lsls	r0, r0, #3
void cmr_gpioWrite(size_t pin, int value) {
 8001e86:	b410      	push	{r4}
    const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[pin];
 8001e88:	181c      	adds	r4, r3, r0
    configASSERT(
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_PP) ||
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_OD)
    );

    HAL_GPIO_WritePin(
 8001e8a:	1c0a      	adds	r2, r1, #0
 8001e8c:	bf18      	it	ne
 8001e8e:	2201      	movne	r2, #1
 8001e90:	88a1      	ldrh	r1, [r4, #4]
 8001e92:	5818      	ldr	r0, [r3, r0]
        pinConfig->port, pinConfig->init.Pin,
        value ? GPIO_PIN_SET : GPIO_PIN_RESET
    );
}
 8001e94:	f85d 4b04 	ldr.w	r4, [sp], #4
    HAL_GPIO_WritePin(
 8001e98:	f002 bc8a 	b.w	80047b0 <HAL_GPIO_WritePin>
 8001e9c:	20001484 	.word	0x20001484

08001ea0 <cmr_gpioToggle>:
 * @param pin The pin to toggle.
 */
void cmr_gpioToggle(size_t pin) {
    configASSERT(pin < cmr_gpioPinConfigsLen);

    const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[pin];
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <cmr_gpioToggle+0x14>)
 8001ea2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	00c0      	lsls	r0, r0, #3
 8001eaa:	181a      	adds	r2, r3, r0
    configASSERT(
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_PP) ||
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_OD)
    );

    HAL_GPIO_TogglePin(pinConfig->port, pinConfig->init.Pin);
 8001eac:	5818      	ldr	r0, [r3, r0]
 8001eae:	8891      	ldrh	r1, [r2, #4]
 8001eb0:	f002 bc82 	b.w	80047b8 <HAL_GPIO_TogglePin>
 8001eb4:	20001484 	.word	0x20001484

08001eb8 <SysTick_Handler>:
extern void xPortSysTickHandler(void);

/**
 * @brief System tick interrupt handler.
 */
void SysTick_Handler(void) {
 8001eb8:	b508      	push	{r3, lr}
    HAL_IncTick();  // Report tick to HAL.
 8001eba:	f001 fc89 	bl	80037d0 <HAL_IncTick>

    if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED) {
 8001ebe:	f001 fbdf 	bl	8003680 <xTaskGetSchedulerState>
 8001ec2:	2801      	cmp	r0, #1
 8001ec4:	d003      	beq.n	8001ece <SysTick_Handler+0x16>
        return;
    }

    xPortSysTickHandler();  // Invoke FreeRTOS tick handler.
}
 8001ec6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();  // Invoke FreeRTOS tick handler.
 8001eca:	f000 bd63 	b.w	8002994 <xPortSysTickHandler>
 8001ece:	bd08      	pop	{r3, pc}

08001ed0 <NMI_Handler>:
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop

08001ed4 <DebugMon_Handler>:
}

/**
 * @brief Debug monitor exception handler.
 */
void DebugMon_Handler(void) {
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop

08001ed8 <cmr_panicSetup>:
 * @brief Default pre-panic setup implementation.
 *
 * Nothing happens by default; this should be overridden if custom behavior is
 * desired.
 */
void cmr_panicSetup(void) {
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop

08001edc <cmr_panic>:
 * @param fmt The formatting string.
 * @param ... Additional arguments for formatting.
 *
 * @return Does not return.
 */
void cmr_panic(const char *fmt, ...) {
 8001edc:	b40f      	push	{r0, r1, r2, r3}
 8001ede:	b508      	push	{r3, lr}
    (void) fmt;

    cmr_panicSetup();
 8001ee0:	f7ff fffa 	bl	8001ed8 <cmr_panicSetup>
 8001ee4:	e7fe      	b.n	8001ee4 <cmr_panic+0x8>
 8001ee6:	bf00      	nop

08001ee8 <cmr_pwmInit>:
 *
 * @param pwmChannel A PWM channel struct to use.
 * @param pwmPinConfig The pin to initialize.
 */
void cmr_pwmInit(cmr_pwm_t *pwmChannel,
                 const cmr_pwmPinConfig_t *pwmPinConfig) {
 8001ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001eec:	460d      	mov	r5, r1
 8001eee:	4604      	mov	r4, r0
 8001ef0:	b095      	sub	sp, #84	; 0x54
    configASSERT(pwmPinConfig->timer != NULL);

    configASSERT(pwmPinConfig->presc > 0 && pwmPinConfig->presc <= UINT16_MAX + 1);
    configASSERT(pwmPinConfig->period_ticks > 0 && pwmPinConfig->period_ticks <= UINT16_MAX + 1);

    cmr_rccGPIOClockEnable(pwmPinConfig->port);
 8001ef2:	6808      	ldr	r0, [r1, #0]
 8001ef4:	f000 f990 	bl	8002218 <cmr_rccGPIOClockEnable>

    *pwmChannel = (cmr_pwm_t) {
        .handle = {
            .Instance = pwmPinConfig->timer,
            .Init = {
                .Prescaler = pwmPinConfig->presc - 1,
 8001ef8:	68ee      	ldr	r6, [r5, #12]
                .CounterMode = TIM_COUNTERMODE_UP,
                .Period = pwmPinConfig->period_ticks - 1,
 8001efa:	692b      	ldr	r3, [r5, #16]
            .Instance = pwmPinConfig->timer,
 8001efc:	f8d5 8014 	ldr.w	r8, [r5, #20]
                .ClockDivision = TIM_CLOCKDIVISION_DIV1,
                .RepetitionCounter = 0,
                .AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE
            }
        },
        .channel = pwmPinConfig->channel
 8001f00:	f8d5 9008 	ldr.w	r9, [r5, #8]
    *pwmChannel = (cmr_pwm_t) {
 8001f04:	2244      	movs	r2, #68	; 0x44
 8001f06:	2100      	movs	r1, #0
 8001f08:	4620      	mov	r0, r4
                .Prescaler = pwmPinConfig->presc - 1,
 8001f0a:	1e77      	subs	r7, r6, #1
                .Period = pwmPinConfig->period_ticks - 1,
 8001f0c:	1e5e      	subs	r6, r3, #1
    *pwmChannel = (cmr_pwm_t) {
 8001f0e:	f003 fac8 	bl	80054a2 <memset>
 8001f12:	2380      	movs	r3, #128	; 0x80
    };

    cmr_rccTIMClockEnable(pwmPinConfig->timer);
 8001f14:	4640      	mov	r0, r8
    *pwmChannel = (cmr_pwm_t) {
 8001f16:	6067      	str	r7, [r4, #4]
 8001f18:	60e6      	str	r6, [r4, #12]
 8001f1a:	f8c4 8000 	str.w	r8, [r4]
 8001f1e:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
 8001f22:	61a3      	str	r3, [r4, #24]
    cmr_rccTIMClockEnable(pwmPinConfig->timer);
 8001f24:	f000 fa6e 	bl	8002404 <cmr_rccTIMClockEnable>

    if (HAL_TIM_Base_Init(&pwmChannel->handle) != HAL_OK) {
 8001f28:	4620      	mov	r0, r4
 8001f2a:	f002 fee9 	bl	8004d00 <HAL_TIM_Base_Init>
 8001f2e:	2800      	cmp	r0, #0
 8001f30:	f040 80af 	bne.w	8002092 <cmr_pwmInit+0x1aa>
 8001f34:	4603      	mov	r3, r0
        cmr_panic("pwmInit HAL_TIM_Base_Init failed!");
        return;
    }

    TIM_ClockConfigTypeDef clockSrcConfig = {
 8001f36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
        .ClockSource = TIM_CLOCKSOURCE_INTERNAL
    };
    if (HAL_TIM_ConfigClockSource(&pwmChannel->handle, &clockSrcConfig) != HAL_OK) {
 8001f3a:	a901      	add	r1, sp, #4
 8001f3c:	4620      	mov	r0, r4
    TIM_ClockConfigTypeDef clockSrcConfig = {
 8001f3e:	9302      	str	r3, [sp, #8]
 8001f40:	9303      	str	r3, [sp, #12]
 8001f42:	9304      	str	r3, [sp, #16]
 8001f44:	9201      	str	r2, [sp, #4]
    if (HAL_TIM_ConfigClockSource(&pwmChannel->handle, &clockSrcConfig) != HAL_OK) {
 8001f46:	f003 f98b 	bl	8005260 <HAL_TIM_ConfigClockSource>
 8001f4a:	2800      	cmp	r0, #0
 8001f4c:	f040 80a7 	bne.w	800209e <cmr_pwmInit+0x1b6>
        cmr_panic("pwmInit HAL_TIM_ConfigClockSource failed!");
        return;
    }

    if (HAL_TIM_PWM_Init(&pwmChannel->handle) != HAL_OK) {
 8001f50:	4620      	mov	r0, r4
 8001f52:	f002 ff79 	bl	8004e48 <HAL_TIM_PWM_Init>
 8001f56:	2800      	cmp	r0, #0
 8001f58:	f040 809e 	bne.w	8002098 <cmr_pwmInit+0x1b0>
        return;
    }

    // Disable fancy master/slave stuff if applicable since we won't use it.
    // Based on Cube-generated code.
    if (IS_TIM_MASTER_INSTANCE(pwmPinConfig->timer)) {
 8001f5c:	696b      	ldr	r3, [r5, #20]
 8001f5e:	4a56      	ldr	r2, [pc, #344]	; (80020b8 <cmr_pwmInit+0x1d0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d01a      	beq.n	8001f9a <cmr_pwmInit+0xb2>
 8001f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f68:	d017      	beq.n	8001f9a <cmr_pwmInit+0xb2>
 8001f6a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d013      	beq.n	8001f9a <cmr_pwmInit+0xb2>
 8001f72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00f      	beq.n	8001f9a <cmr_pwmInit+0xb2>
 8001f7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00b      	beq.n	8001f9a <cmr_pwmInit+0xb2>
 8001f82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d007      	beq.n	8001f9a <cmr_pwmInit+0xb2>
 8001f8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d003      	beq.n	8001f9a <cmr_pwmInit+0xb2>
 8001f92:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d108      	bne.n	8001fac <cmr_pwmInit+0xc4>
        TIM_MasterConfigTypeDef masterConfig = {
 8001f9a:	2300      	movs	r3, #0
            .MasterOutputTrigger = TIM_TRGO_RESET,
            .MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE
        };

        if (HAL_TIMEx_MasterConfigSynchronization(&pwmChannel->handle, &masterConfig) != HAL_OK) {
 8001f9c:	a90c      	add	r1, sp, #48	; 0x30
 8001f9e:	4620      	mov	r0, r4
        TIM_MasterConfigTypeDef masterConfig = {
 8001fa0:	930c      	str	r3, [sp, #48]	; 0x30
 8001fa2:	930d      	str	r3, [sp, #52]	; 0x34
        if (HAL_TIMEx_MasterConfigSynchronization(&pwmChannel->handle, &masterConfig) != HAL_OK) {
 8001fa4:	f003 fa02 	bl	80053ac <HAL_TIMEx_MasterConfigSynchronization>
 8001fa8:	2800      	cmp	r0, #0
 8001faa:	d17e      	bne.n	80020aa <cmr_pwmInit+0x1c2>
    }

    // Begin with 0% duty cycle
    // Do not use cmr_pwmSetDutyCycle() because that would prematurely call
    // HAL_TIM_PWM_Start()
    TIM_OC_InitTypeDef outputCompareConfig = {
 8001fac:	4f43      	ldr	r7, [pc, #268]	; (80020bc <cmr_pwmInit+0x1d4>)
 8001fae:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001fb0:	ae05      	add	r6, sp, #20
 8001fb2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001fb4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8001fb8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
        .OCFastMode = TIM_OCFAST_DISABLE,
        .OCIdleState = TIM_OCIDLESTATE_RESET,
        .OCNIdleState = TIM_OCNIDLESTATE_RESET
    };

    if (HAL_TIM_PWM_ConfigChannel(&pwmChannel->handle, &outputCompareConfig, pwmChannel->channel) != HAL_OK) {
 8001fbc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001fbe:	a905      	add	r1, sp, #20
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	f003 f847 	bl	8005054 <HAL_TIM_PWM_ConfigChannel>
 8001fc6:	2800      	cmp	r0, #0
 8001fc8:	d16c      	bne.n	80020a4 <cmr_pwmInit+0x1bc>
        cmr_panic("pwmInit cmr_pwmSetDutyCycle failed!");
    }

    // Disable fancy break/dead time stuff if applicable since we won't use it.
    // Based on Cube-generated code.
    if (IS_TIM_BREAK_INSTANCE(pwmPinConfig->timer)) {
 8001fca:	696b      	ldr	r3, [r5, #20]
 8001fcc:	4a3a      	ldr	r2, [pc, #232]	; (80020b8 <cmr_pwmInit+0x1d0>)
 8001fce:	4293      	cmp	r3, r2
        TIM_BreakDeadTimeConfigTypeDef breakDeadConfig = {
 8001fd0:	ae0c      	add	r6, sp, #48	; 0x30
    if (IS_TIM_BREAK_INSTANCE(pwmPinConfig->timer)) {
 8001fd2:	d043      	beq.n	800205c <cmr_pwmInit+0x174>
 8001fd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d03f      	beq.n	800205c <cmr_pwmInit+0x174>
    switch ((uintptr_t) timer) {
 8001fdc:	4938      	ldr	r1, [pc, #224]	; (80020c0 <cmr_pwmInit+0x1d8>)
            return;
        }
    }

    GPIO_InitTypeDef pinConfig = {
        .Pin = pwmPinConfig->pin,
 8001fde:	88aa      	ldrh	r2, [r5, #4]
 8001fe0:	920c      	str	r2, [sp, #48]	; 0x30
    GPIO_InitTypeDef pinConfig = {
 8001fe2:	2702      	movs	r7, #2
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	2203      	movs	r2, #3
    switch ((uintptr_t) timer) {
 8001fe8:	428b      	cmp	r3, r1
    GPIO_InitTypeDef pinConfig = {
 8001fea:	970d      	str	r7, [sp, #52]	; 0x34
 8001fec:	900e      	str	r0, [sp, #56]	; 0x38
 8001fee:	920f      	str	r2, [sp, #60]	; 0x3c
    switch ((uintptr_t) timer) {
 8001ff0:	d029      	beq.n	8002046 <cmr_pwmInit+0x15e>
 8001ff2:	d91d      	bls.n	8002030 <cmr_pwmInit+0x148>
 8001ff4:	4933      	ldr	r1, [pc, #204]	; (80020c4 <cmr_pwmInit+0x1dc>)
 8001ff6:	428b      	cmp	r3, r1
 8001ff8:	d00d      	beq.n	8002016 <cmr_pwmInit+0x12e>
 8001ffa:	d93e      	bls.n	800207a <cmr_pwmInit+0x192>
 8001ffc:	4932      	ldr	r1, [pc, #200]	; (80020c8 <cmr_pwmInit+0x1e0>)
 8001ffe:	428b      	cmp	r3, r1
 8002000:	d009      	beq.n	8002016 <cmr_pwmInit+0x12e>
 8002002:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002006:	428b      	cmp	r3, r1
 8002008:	d005      	beq.n	8002016 <cmr_pwmInit+0x12e>
 800200a:	f5a1 6100 	sub.w	r1, r1, #2048	; 0x800
 800200e:	428b      	cmp	r3, r1
 8002010:	d001      	beq.n	8002016 <cmr_pwmInit+0x12e>
    return (uint32_t) -1;
 8002012:	f04f 32ff 	mov.w	r2, #4294967295
        .Mode = GPIO_MODE_AF_PP,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_VERY_HIGH,
        .Alternate = cmr_timerToAltFunc(pwmPinConfig->timer)
    };
    HAL_GPIO_Init(pwmPinConfig->port, &pinConfig);
 8002016:	4631      	mov	r1, r6
 8002018:	6828      	ldr	r0, [r5, #0]
    GPIO_InitTypeDef pinConfig = {
 800201a:	9210      	str	r2, [sp, #64]	; 0x40
    HAL_GPIO_Init(pwmPinConfig->port, &pinConfig);
 800201c:	f002 fac0 	bl	80045a0 <HAL_GPIO_Init>

    if (HAL_TIM_PWM_Start(&pwmChannel->handle, pwmChannel->channel) != HAL_OK) {
 8002020:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002022:	4620      	mov	r0, r4
 8002024:	f002 ffb2 	bl	8004f8c <HAL_TIM_PWM_Start>
 8002028:	bb80      	cbnz	r0, 800208c <cmr_pwmInit+0x1a4>
        cmr_panic("pwmInit HAL_TIM_PWM_Start failed!");
    }
}
 800202a:	b015      	add	sp, #84	; 0x54
 800202c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch ((uintptr_t) timer) {
 8002030:	4a26      	ldr	r2, [pc, #152]	; (80020cc <cmr_pwmInit+0x1e4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d010      	beq.n	8002058 <cmr_pwmInit+0x170>
 8002036:	d908      	bls.n	800204a <cmr_pwmInit+0x162>
 8002038:	4a25      	ldr	r2, [pc, #148]	; (80020d0 <cmr_pwmInit+0x1e8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00c      	beq.n	8002058 <cmr_pwmInit+0x170>
 800203e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8002042:	4293      	cmp	r3, r2
 8002044:	d1e5      	bne.n	8002012 <cmr_pwmInit+0x12a>
            return GPIO_AF9_TIM14;
 8002046:	2209      	movs	r2, #9
 8002048:	e7e5      	b.n	8002016 <cmr_pwmInit+0x12e>
    switch ((uintptr_t) timer) {
 800204a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800204e:	d01b      	beq.n	8002088 <cmr_pwmInit+0x1a0>
 8002050:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8002054:	4293      	cmp	r3, r2
 8002056:	d1dc      	bne.n	8002012 <cmr_pwmInit+0x12a>
            return GPIO_AF2_TIM3;
 8002058:	2202      	movs	r2, #2
 800205a:	e7dc      	b.n	8002016 <cmr_pwmInit+0x12e>
        TIM_BreakDeadTimeConfigTypeDef breakDeadConfig = {
 800205c:	2100      	movs	r1, #0
 800205e:	4630      	mov	r0, r6
 8002060:	2220      	movs	r2, #32
 8002062:	f003 fa1e 	bl	80054a2 <memset>
 8002066:	f44f 5300 	mov.w	r3, #8192	; 0x2000
        if (HAL_TIMEx_ConfigBreakDeadTime(&pwmChannel->handle, &breakDeadConfig) != HAL_OK) {
 800206a:	4631      	mov	r1, r6
 800206c:	4620      	mov	r0, r4
        TIM_BreakDeadTimeConfigTypeDef breakDeadConfig = {
 800206e:	9311      	str	r3, [sp, #68]	; 0x44
        if (HAL_TIMEx_ConfigBreakDeadTime(&pwmChannel->handle, &breakDeadConfig) != HAL_OK) {
 8002070:	f003 f9be 	bl	80053f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002074:	b9e0      	cbnz	r0, 80020b0 <cmr_pwmInit+0x1c8>
 8002076:	696b      	ldr	r3, [r5, #20]
 8002078:	e7b0      	b.n	8001fdc <cmr_pwmInit+0xf4>
    switch ((uintptr_t) timer) {
 800207a:	4a16      	ldr	r2, [pc, #88]	; (80020d4 <cmr_pwmInit+0x1ec>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d0e2      	beq.n	8002046 <cmr_pwmInit+0x15e>
 8002080:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
 8002084:	4293      	cmp	r3, r2
 8002086:	d1c4      	bne.n	8002012 <cmr_pwmInit+0x12a>
            return GPIO_AF1_TIM1;
 8002088:	2201      	movs	r2, #1
 800208a:	e7c4      	b.n	8002016 <cmr_pwmInit+0x12e>
        cmr_panic("pwmInit HAL_TIM_PWM_Start failed!");
 800208c:	4812      	ldr	r0, [pc, #72]	; (80020d8 <cmr_pwmInit+0x1f0>)
 800208e:	f7ff ff25 	bl	8001edc <cmr_panic>
        cmr_panic("pwmInit HAL_TIM_Base_Init failed!");
 8002092:	4812      	ldr	r0, [pc, #72]	; (80020dc <cmr_pwmInit+0x1f4>)
 8002094:	f7ff ff22 	bl	8001edc <cmr_panic>
        cmr_panic("pwmInit HAL_TIM_PWM_Init failed!");
 8002098:	4811      	ldr	r0, [pc, #68]	; (80020e0 <cmr_pwmInit+0x1f8>)
 800209a:	f7ff ff1f 	bl	8001edc <cmr_panic>
        cmr_panic("pwmInit HAL_TIM_ConfigClockSource failed!");
 800209e:	4811      	ldr	r0, [pc, #68]	; (80020e4 <cmr_pwmInit+0x1fc>)
 80020a0:	f7ff ff1c 	bl	8001edc <cmr_panic>
        cmr_panic("pwmInit cmr_pwmSetDutyCycle failed!");
 80020a4:	4810      	ldr	r0, [pc, #64]	; (80020e8 <cmr_pwmInit+0x200>)
 80020a6:	f7ff ff19 	bl	8001edc <cmr_panic>
            cmr_panic("pwmInit HAL_TIMEx_MasterConfigSynchronization failed!");
 80020aa:	4810      	ldr	r0, [pc, #64]	; (80020ec <cmr_pwmInit+0x204>)
 80020ac:	f7ff ff16 	bl	8001edc <cmr_panic>
            cmr_panic("pwmInit HAL_TIMEx_ConfigBreakDeadTime failed!");
 80020b0:	480f      	ldr	r0, [pc, #60]	; (80020f0 <cmr_pwmInit+0x208>)
 80020b2:	f7ff ff13 	bl	8001edc <cmr_panic>
 80020b6:	bf00      	nop
 80020b8:	40010000 	.word	0x40010000
 80020bc:	08005a0c 	.word	0x08005a0c
 80020c0:	40001c00 	.word	0x40001c00
 80020c4:	40010400 	.word	0x40010400
 80020c8:	40014400 	.word	0x40014400
 80020cc:	40000800 	.word	0x40000800
 80020d0:	40000c00 	.word	0x40000c00
 80020d4:	40002000 	.word	0x40002000
 80020d8:	08005ddc 	.word	0x08005ddc
 80020dc:	08005cdc 	.word	0x08005cdc
 80020e0:	08005d2c 	.word	0x08005d2c
 80020e4:	08005d00 	.word	0x08005d00
 80020e8:	08005d88 	.word	0x08005d88
 80020ec:	08005d50 	.word	0x08005d50
 80020f0:	08005dac 	.word	0x08005dac

080020f4 <cmr_pwmSetDutyCycle>:
 * @brief Sets the duty cycle of a PWM channel.
 *
 * @param pwmChannel The PWM channel to set the duty cycle of.
 * @param dutyCycle_pcnt The duty cycle, in percent no greater than 100, to set pwmChannel to.
 */
void cmr_pwmSetDutyCycle(cmr_pwm_t *pwmChannel, uint32_t dutyCycle_pcnt) {
 80020f4:	b538      	push	{r3, r4, r5, lr}
        .OCFastMode = TIM_OCFAST_DISABLE,
        .OCIdleState = TIM_OCIDLESTATE_RESET,
        .OCNIdleState = TIM_OCNIDLESTATE_RESET
    };

    uint32_t period_ticks = pwmChannel->handle.Init.Period + 1;
 80020f6:	68c3      	ldr	r3, [r0, #12]

    // Prevent overflow (should never occur)
    if (UINT32_MAX / period_ticks < dutyCycle_pcnt) {
 80020f8:	f04f 32ff 	mov.w	r2, #4294967295
    uint32_t period_ticks = pwmChannel->handle.Init.Period + 1;
 80020fc:	3301      	adds	r3, #1
    if (UINT32_MAX / period_ticks < dutyCycle_pcnt) {
 80020fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002102:	428a      	cmp	r2, r1
void cmr_pwmSetDutyCycle(cmr_pwm_t *pwmChannel, uint32_t dutyCycle_pcnt) {
 8002104:	4604      	mov	r4, r0
        outputCompareConfig.Pulse = period_ticks / 100 * dutyCycle_pcnt;
 8002106:	4a14      	ldr	r2, [pc, #80]	; (8002158 <cmr_pwmSetDutyCycle+0x64>)
    if (UINT32_MAX / period_ticks < dutyCycle_pcnt) {
 8002108:	d217      	bcs.n	800213a <cmr_pwmSetDutyCycle+0x46>
        outputCompareConfig.Pulse = period_ticks / 100 * dutyCycle_pcnt;
 800210a:	fba2 2303 	umull	r2, r3, r2, r3
 800210e:	095b      	lsrs	r3, r3, #5
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	4d11      	ldr	r5, [pc, #68]	; (800215c <cmr_pwmSetDutyCycle+0x68>)
    } else {
        outputCompareConfig.Pulse = period_ticks * dutyCycle_pcnt / 100;
    }

    if (HAL_TIM_PWM_Stop(&pwmChannel->handle, pwmChannel->channel) != HAL_OK) {
 8002116:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002118:	606b      	str	r3, [r5, #4]
 800211a:	4620      	mov	r0, r4
 800211c:	f002 ff60 	bl	8004fe0 <HAL_TIM_PWM_Stop>
 8002120:	b988      	cbnz	r0, 8002146 <cmr_pwmSetDutyCycle+0x52>
        cmr_panic("pwmSetPeriod HAL_TIM_PWM_Stop failed!");
    }

    if (HAL_TIM_PWM_ConfigChannel(&pwmChannel->handle, &outputCompareConfig, pwmChannel->channel) != HAL_OK) {
 8002122:	4629      	mov	r1, r5
 8002124:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002126:	4620      	mov	r0, r4
 8002128:	f002 ff94 	bl	8005054 <HAL_TIM_PWM_ConfigChannel>
 800212c:	b988      	cbnz	r0, 8002152 <cmr_pwmSetDutyCycle+0x5e>
        cmr_panic("pwmSetDutyCycle cmr_pwmSetDutyCycle failed!");
    }

    if (HAL_TIM_PWM_Start(&pwmChannel->handle, pwmChannel->channel) != HAL_OK) {
 800212e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002130:	4620      	mov	r0, r4
 8002132:	f002 ff2b 	bl	8004f8c <HAL_TIM_PWM_Start>
 8002136:	b948      	cbnz	r0, 800214c <cmr_pwmSetDutyCycle+0x58>
 8002138:	bd38      	pop	{r3, r4, r5, pc}
        outputCompareConfig.Pulse = period_ticks * dutyCycle_pcnt / 100;
 800213a:	fb01 f103 	mul.w	r1, r1, r3
 800213e:	fba2 3101 	umull	r3, r1, r2, r1
 8002142:	094b      	lsrs	r3, r1, #5
 8002144:	e7e6      	b.n	8002114 <cmr_pwmSetDutyCycle+0x20>
        cmr_panic("pwmSetPeriod HAL_TIM_PWM_Stop failed!");
 8002146:	4806      	ldr	r0, [pc, #24]	; (8002160 <cmr_pwmSetDutyCycle+0x6c>)
 8002148:	f7ff fec8 	bl	8001edc <cmr_panic>
        cmr_panic("pwmSetPeriod HAL_TIM_PWM_Start failed!");
 800214c:	4805      	ldr	r0, [pc, #20]	; (8002164 <cmr_pwmSetDutyCycle+0x70>)
 800214e:	f7ff fec5 	bl	8001edc <cmr_panic>
        cmr_panic("pwmSetDutyCycle cmr_pwmSetDutyCycle failed!");
 8002152:	4805      	ldr	r0, [pc, #20]	; (8002168 <cmr_pwmSetDutyCycle+0x74>)
 8002154:	f7ff fec2 	bl	8001edc <cmr_panic>
 8002158:	51eb851f 	.word	0x51eb851f
 800215c:	200003ac 	.word	0x200003ac
 8002160:	08005e00 	.word	0x08005e00
 8002164:	08005e54 	.word	0x08005e54
 8002168:	08005e28 	.word	0x08005e28

0800216c <cmr_rccSystemClockEnable>:
 * @brief Configures the system and peripheral clocks.
 *
 * @note Generated by STM32Cube. Sets System Clock to 96 MHz, with only APB1
 * Peripheral Clocks at 48 MHz (APB1 Timer Clocks are still 96 MHz).
 */
void cmr_rccSystemClockEnable(void)  {
 800216c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800216e:	b095      	sub	sp, #84	; 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002170:	2234      	movs	r2, #52	; 0x34
 8002172:	2100      	movs	r1, #0
 8002174:	a807      	add	r0, sp, #28
 8002176:	f003 f994 	bl	80054a2 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800217a:	2300      	movs	r3, #0

    // Configure the main internal regulator output voltage
    __HAL_RCC_PWR_CLK_ENABLE();
 800217c:	4922      	ldr	r1, [pc, #136]	; (8002208 <cmr_rccSystemClockEnable+0x9c>)
 800217e:	9300      	str	r3, [sp, #0]
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002180:	9303      	str	r3, [sp, #12]
 8002182:	9302      	str	r3, [sp, #8]
 8002184:	9304      	str	r3, [sp, #16]
 8002186:	9305      	str	r3, [sp, #20]
 8002188:	9306      	str	r3, [sp, #24]
    __HAL_RCC_PWR_CLK_ENABLE();
 800218a:	6c08      	ldr	r0, [r1, #64]	; 0x40
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800218c:	4a1f      	ldr	r2, [pc, #124]	; (800220c <cmr_rccSystemClockEnable+0xa0>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800218e:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8002192:	6408      	str	r0, [r1, #64]	; 0x40
 8002194:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002196:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800219a:	9100      	str	r1, [sp, #0]
 800219c:	9900      	ldr	r1, [sp, #0]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800219e:	9301      	str	r3, [sp, #4]
 80021a0:	6813      	ldr	r3, [r2, #0]
 80021a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	6813      	ldr	r3, [r2, #0]
 80021aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000

    // Initializes the CPU, AHB and APB busses clocks
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021ae:	2402      	movs	r4, #2
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021b0:	9301      	str	r3, [sp, #4]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021b2:	2601      	movs	r6, #1
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021b4:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    RCC_OscInitStruct.PLL.PLLM = 25;
 80021bc:	2219      	movs	r2, #25
    RCC_OscInitStruct.PLL.PLLN = 192;
 80021be:	23c0      	movs	r3, #192	; 0xc0
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    RCC_OscInitStruct.PLL.PLLQ = 2;
    RCC_OscInitStruct.PLL.PLLR = 2;

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80021c0:	a807      	add	r0, sp, #28
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021c2:	9f01      	ldr	r7, [sp, #4]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021c4:	9607      	str	r6, [sp, #28]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021c6:	9508      	str	r5, [sp, #32]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c8:	940d      	str	r4, [sp, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021ca:	9411      	str	r4, [sp, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 80021cc:	9412      	str	r4, [sp, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 80021ce:	9413      	str	r4, [sp, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021d0:	910e      	str	r1, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 25;
 80021d2:	920f      	str	r2, [sp, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 192;
 80021d4:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80021d6:	f002 fbd5 	bl	8004984 <HAL_RCC_OscConfig>
 80021da:	b978      	cbnz	r0, 80021fc <cmr_rccSystemClockEnable+0x90>
 80021dc:	4603      	mov	r3, r0
        cmr_panic("HAL_RCC_OscConfig() failed!");
    }

    // Initializes the CPU, AHB and APB busses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80021de:	250f      	movs	r5, #15
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80021e4:	a802      	add	r0, sp, #8
 80021e6:	2103      	movs	r1, #3
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021e8:	9403      	str	r4, [sp, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021ea:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021ec:	9306      	str	r3, [sp, #24]
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80021ee:	9502      	str	r5, [sp, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021f0:	9205      	str	r2, [sp, #20]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80021f2:	f002 fb2d 	bl	8004850 <HAL_RCC_ClockConfig>
 80021f6:	b920      	cbnz	r0, 8002202 <cmr_rccSystemClockEnable+0x96>
        cmr_panic("HAL_RCC_ClockConfig() failed!");
    }
}
 80021f8:	b015      	add	sp, #84	; 0x54
 80021fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cmr_panic("HAL_RCC_OscConfig() failed!");
 80021fc:	4804      	ldr	r0, [pc, #16]	; (8002210 <cmr_rccSystemClockEnable+0xa4>)
 80021fe:	f7ff fe6d 	bl	8001edc <cmr_panic>
        cmr_panic("HAL_RCC_ClockConfig() failed!");
 8002202:	4804      	ldr	r0, [pc, #16]	; (8002214 <cmr_rccSystemClockEnable+0xa8>)
 8002204:	f7ff fe6a 	bl	8001edc <cmr_panic>
 8002208:	40023800 	.word	0x40023800
 800220c:	40007000 	.word	0x40007000
 8002210:	08005e7c 	.word	0x08005e7c
 8002214:	08005e98 	.word	0x08005e98

08002218 <cmr_rccGPIOClockEnable>:
 * @brief Enables the specified GPIO port's clock.
 *
 * @param port The GPIO port.
 */
void cmr_rccGPIOClockEnable(GPIO_TypeDef *port) {
    switch ((uintptr_t) port) {
 8002218:	4b47      	ldr	r3, [pc, #284]	; (8002338 <cmr_rccGPIOClockEnable+0x120>)
 800221a:	4298      	cmp	r0, r3
void cmr_rccGPIOClockEnable(GPIO_TypeDef *port) {
 800221c:	b088      	sub	sp, #32
    switch ((uintptr_t) port) {
 800221e:	d07d      	beq.n	800231c <cmr_rccGPIOClockEnable+0x104>
 8002220:	d918      	bls.n	8002254 <cmr_rccGPIOClockEnable+0x3c>
 8002222:	4b46      	ldr	r3, [pc, #280]	; (800233c <cmr_rccGPIOClockEnable+0x124>)
 8002224:	4298      	cmp	r0, r3
 8002226:	d06b      	beq.n	8002300 <cmr_rccGPIOClockEnable+0xe8>
 8002228:	d94a      	bls.n	80022c0 <cmr_rccGPIOClockEnable+0xa8>
 800222a:	4b45      	ldr	r3, [pc, #276]	; (8002340 <cmr_rccGPIOClockEnable+0x128>)
 800222c:	4298      	cmp	r0, r3
 800222e:	d039      	beq.n	80022a4 <cmr_rccGPIOClockEnable+0x8c>
 8002230:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002234:	4298      	cmp	r0, r3
 8002236:	d125      	bne.n	8002284 <cmr_rccGPIOClockEnable+0x6c>
            break;
        case GPIOG_BASE:
            __HAL_RCC_GPIOG_CLK_ENABLE();
            break;
        case GPIOH_BASE:
            __HAL_RCC_GPIOH_CLK_ENABLE();
 8002238:	4b42      	ldr	r3, [pc, #264]	; (8002344 <cmr_rccGPIOClockEnable+0x12c>)
 800223a:	2200      	movs	r2, #0
 800223c:	9207      	str	r2, [sp, #28]
 800223e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002240:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002244:	631a      	str	r2, [r3, #48]	; 0x30
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224c:	9307      	str	r3, [sp, #28]
 800224e:	9b07      	ldr	r3, [sp, #28]
            break;
    }
}
 8002250:	b008      	add	sp, #32
 8002252:	4770      	bx	lr
    switch ((uintptr_t) port) {
 8002254:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002258:	4298      	cmp	r0, r3
 800225a:	d043      	beq.n	80022e4 <cmr_rccGPIOClockEnable+0xcc>
 800225c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002260:	4298      	cmp	r0, r3
 8002262:	d011      	beq.n	8002288 <cmr_rccGPIOClockEnable+0x70>
 8002264:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002268:	4298      	cmp	r0, r3
 800226a:	d10b      	bne.n	8002284 <cmr_rccGPIOClockEnable+0x6c>
            __HAL_RCC_GPIOA_CLK_ENABLE();
 800226c:	4b35      	ldr	r3, [pc, #212]	; (8002344 <cmr_rccGPIOClockEnable+0x12c>)
 800226e:	2200      	movs	r2, #0
 8002270:	9200      	str	r2, [sp, #0]
 8002272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002274:	f042 0201 	orr.w	r2, r2, #1
 8002278:	631a      	str	r2, [r3, #48]	; 0x30
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	9b00      	ldr	r3, [sp, #0]
}
 8002284:	b008      	add	sp, #32
 8002286:	4770      	bx	lr
            __HAL_RCC_GPIOC_CLK_ENABLE();
 8002288:	4b2e      	ldr	r3, [pc, #184]	; (8002344 <cmr_rccGPIOClockEnable+0x12c>)
 800228a:	2200      	movs	r2, #0
 800228c:	9202      	str	r2, [sp, #8]
 800228e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002290:	f042 0204 	orr.w	r2, r2, #4
 8002294:	631a      	str	r2, [r3, #48]	; 0x30
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	9302      	str	r3, [sp, #8]
 800229e:	9b02      	ldr	r3, [sp, #8]
}
 80022a0:	b008      	add	sp, #32
 80022a2:	4770      	bx	lr
            __HAL_RCC_GPIOG_CLK_ENABLE();
 80022a4:	4b27      	ldr	r3, [pc, #156]	; (8002344 <cmr_rccGPIOClockEnable+0x12c>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	9206      	str	r2, [sp, #24]
 80022aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022b0:	631a      	str	r2, [r3, #48]	; 0x30
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b8:	9306      	str	r3, [sp, #24]
 80022ba:	9b06      	ldr	r3, [sp, #24]
}
 80022bc:	b008      	add	sp, #32
 80022be:	4770      	bx	lr
    switch ((uintptr_t) port) {
 80022c0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80022c4:	4298      	cmp	r0, r3
 80022c6:	d1dd      	bne.n	8002284 <cmr_rccGPIOClockEnable+0x6c>
            __HAL_RCC_GPIOE_CLK_ENABLE();
 80022c8:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <cmr_rccGPIOClockEnable+0x12c>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	9204      	str	r2, [sp, #16]
 80022ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022d0:	f042 0210 	orr.w	r2, r2, #16
 80022d4:	631a      	str	r2, [r3, #48]	; 0x30
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	9304      	str	r3, [sp, #16]
 80022de:	9b04      	ldr	r3, [sp, #16]
}
 80022e0:	b008      	add	sp, #32
 80022e2:	4770      	bx	lr
            __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e4:	4b17      	ldr	r3, [pc, #92]	; (8002344 <cmr_rccGPIOClockEnable+0x12c>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	9201      	str	r2, [sp, #4]
 80022ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ec:	f042 0202 	orr.w	r2, r2, #2
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	9301      	str	r3, [sp, #4]
 80022fa:	9b01      	ldr	r3, [sp, #4]
}
 80022fc:	b008      	add	sp, #32
 80022fe:	4770      	bx	lr
            __HAL_RCC_GPIOF_CLK_ENABLE();
 8002300:	4b10      	ldr	r3, [pc, #64]	; (8002344 <cmr_rccGPIOClockEnable+0x12c>)
 8002302:	2200      	movs	r2, #0
 8002304:	9205      	str	r2, [sp, #20]
 8002306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002308:	f042 0220 	orr.w	r2, r2, #32
 800230c:	631a      	str	r2, [r3, #48]	; 0x30
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	9305      	str	r3, [sp, #20]
 8002316:	9b05      	ldr	r3, [sp, #20]
}
 8002318:	b008      	add	sp, #32
 800231a:	4770      	bx	lr
            __HAL_RCC_GPIOD_CLK_ENABLE();
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <cmr_rccGPIOClockEnable+0x12c>)
 800231e:	2200      	movs	r2, #0
 8002320:	9203      	str	r2, [sp, #12]
 8002322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002324:	f042 0208 	orr.w	r2, r2, #8
 8002328:	631a      	str	r2, [r3, #48]	; 0x30
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	9303      	str	r3, [sp, #12]
 8002332:	9b03      	ldr	r3, [sp, #12]
}
 8002334:	b008      	add	sp, #32
 8002336:	4770      	bx	lr
 8002338:	40020c00 	.word	0x40020c00
 800233c:	40021400 	.word	0x40021400
 8002340:	40021800 	.word	0x40021800
 8002344:	40023800 	.word	0x40023800

08002348 <cmr_rccADCClockEnable>:
 * @brief Enables the specified ADC's clock.
 *
 * @param instance The HAL ADC instance.
 */
void cmr_rccADCClockEnable(ADC_TypeDef *instance) {
    switch ((uintptr_t) instance) {
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <cmr_rccADCClockEnable+0x28>)
 800234a:	4298      	cmp	r0, r3
 800234c:	d10e      	bne.n	800236c <cmr_rccADCClockEnable+0x24>
void cmr_rccADCClockEnable(ADC_TypeDef *instance) {
 800234e:	b082      	sub	sp, #8
        case ADC1_BASE:
            __HAL_RCC_ADC1_CLK_ENABLE();
 8002350:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8002354:	2200      	movs	r2, #0
 8002356:	9201      	str	r2, [sp, #4]
 8002358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800235a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800235e:	645a      	str	r2, [r3, #68]	; 0x44
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	9b01      	ldr	r3, [sp, #4]
            break;
    }
}
 800236a:	b002      	add	sp, #8
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40012000 	.word	0x40012000

08002374 <cmr_rccCANClockEnable>:
 * @brief Enables the specified CAN interface's clock.
 *
 * @param instance The HAL CAN instance.
 */
void cmr_rccCANClockEnable(CAN_TypeDef *instance) {
    switch ((uintptr_t) instance) {
 8002374:	4b21      	ldr	r3, [pc, #132]	; (80023fc <cmr_rccCANClockEnable+0x88>)
 8002376:	4298      	cmp	r0, r3
void cmr_rccCANClockEnable(CAN_TypeDef *instance) {
 8002378:	b084      	sub	sp, #16
    switch ((uintptr_t) instance) {
 800237a:	d026      	beq.n	80023ca <cmr_rccCANClockEnable+0x56>
 800237c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002380:	4298      	cmp	r0, r3
 8002382:	d014      	beq.n	80023ae <cmr_rccCANClockEnable+0x3a>
 8002384:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002388:	4298      	cmp	r0, r3
 800238a:	d001      	beq.n	8002390 <cmr_rccCANClockEnable+0x1c>
            break;
        case CAN3_BASE:
            __HAL_RCC_CAN3_CLK_ENABLE();
            break;
    }
}
 800238c:	b004      	add	sp, #16
 800238e:	4770      	bx	lr
            __HAL_RCC_CAN1_CLK_ENABLE();
 8002390:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8002394:	2200      	movs	r2, #0
 8002396:	9200      	str	r2, [sp, #0]
 8002398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800239a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800239e:	641a      	str	r2, [r3, #64]	; 0x40
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	9b00      	ldr	r3, [sp, #0]
}
 80023aa:	b004      	add	sp, #16
 80023ac:	4770      	bx	lr
            __HAL_RCC_CAN3_CLK_ENABLE();
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <cmr_rccCANClockEnable+0x8c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	9203      	str	r2, [sp, #12]
 80023b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023b6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80023ba:	641a      	str	r2, [r3, #64]	; 0x40
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023c2:	9303      	str	r3, [sp, #12]
 80023c4:	9b03      	ldr	r3, [sp, #12]
}
 80023c6:	b004      	add	sp, #16
 80023c8:	4770      	bx	lr
            __HAL_RCC_CAN2_CLK_ENABLE();
 80023ca:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <cmr_rccCANClockEnable+0x8c>)
 80023cc:	2100      	movs	r1, #0
 80023ce:	9101      	str	r1, [sp, #4]
 80023d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023d2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80023d6:	641a      	str	r2, [r3, #64]	; 0x40
 80023d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023da:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80023de:	9201      	str	r2, [sp, #4]
 80023e0:	9a01      	ldr	r2, [sp, #4]
            __HAL_RCC_CAN1_CLK_ENABLE();    // CAN2 also needs CAN1 clock.    
 80023e2:	9102      	str	r1, [sp, #8]
 80023e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023e6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	9302      	str	r3, [sp, #8]
 80023f4:	9b02      	ldr	r3, [sp, #8]
}
 80023f6:	b004      	add	sp, #16
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40006800 	.word	0x40006800
 8002400:	40023800 	.word	0x40023800

08002404 <cmr_rccTIMClockEnable>:
}
#endif /* HAL_USART_MODULE_ENABLED */

#ifdef HAL_TIM_MODULE_ENABLED
void cmr_rccTIMClockEnable(TIM_TypeDef *instance) {
    switch ((uintptr_t) instance) {
 8002404:	4b78      	ldr	r3, [pc, #480]	; (80025e8 <cmr_rccTIMClockEnable+0x1e4>)
 8002406:	4298      	cmp	r0, r3
void cmr_rccTIMClockEnable(TIM_TypeDef *instance) {
 8002408:	b08e      	sub	sp, #56	; 0x38
    switch ((uintptr_t) instance) {
 800240a:	f000 80d3 	beq.w	80025b4 <cmr_rccTIMClockEnable+0x1b0>
 800240e:	d91d      	bls.n	800244c <cmr_rccTIMClockEnable+0x48>
 8002410:	4b76      	ldr	r3, [pc, #472]	; (80025ec <cmr_rccTIMClockEnable+0x1e8>)
 8002412:	4298      	cmp	r0, r3
 8002414:	d079      	beq.n	800250a <cmr_rccTIMClockEnable+0x106>
 8002416:	d837      	bhi.n	8002488 <cmr_rccTIMClockEnable+0x84>
 8002418:	f5a3 4364 	sub.w	r3, r3, #58368	; 0xe400
 800241c:	4298      	cmp	r0, r3
 800241e:	d04c      	beq.n	80024ba <cmr_rccTIMClockEnable+0xb6>
 8002420:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8002424:	4298      	cmp	r0, r3
 8002426:	f000 80b8 	beq.w	800259a <cmr_rccTIMClockEnable+0x196>
 800242a:	f5a3 4364 	sub.w	r3, r3, #58368	; 0xe400
 800242e:	4298      	cmp	r0, r3
 8002430:	d14f      	bne.n	80024d2 <cmr_rccTIMClockEnable+0xce>
            break;
        case TIM12_BASE:
            __HAL_RCC_TIM12_CLK_ENABLE();
            break;
        case TIM13_BASE:
            __HAL_RCC_TIM13_CLK_ENABLE();
 8002432:	4b6f      	ldr	r3, [pc, #444]	; (80025f0 <cmr_rccTIMClockEnable+0x1ec>)
 8002434:	2200      	movs	r2, #0
 8002436:	920c      	str	r2, [sp, #48]	; 0x30
 8002438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800243a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800243e:	641a      	str	r2, [r3, #64]	; 0x40
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002446:	930c      	str	r3, [sp, #48]	; 0x30
 8002448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            break;
 800244a:	e042      	b.n	80024d2 <cmr_rccTIMClockEnable+0xce>
    switch ((uintptr_t) instance) {
 800244c:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8002450:	4298      	cmp	r0, r3
 8002452:	d07b      	beq.n	800254c <cmr_rccTIMClockEnable+0x148>
 8002454:	d966      	bls.n	8002524 <cmr_rccTIMClockEnable+0x120>
 8002456:	4b67      	ldr	r3, [pc, #412]	; (80025f4 <cmr_rccTIMClockEnable+0x1f0>)
 8002458:	4298      	cmp	r0, r3
 800245a:	d03c      	beq.n	80024d6 <cmr_rccTIMClockEnable+0xd2>
 800245c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002460:	4298      	cmp	r0, r3
 8002462:	f000 808d 	beq.w	8002580 <cmr_rccTIMClockEnable+0x17c>
 8002466:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800246a:	4298      	cmp	r0, r3
 800246c:	d131      	bne.n	80024d2 <cmr_rccTIMClockEnable+0xce>
            __HAL_RCC_TIM5_CLK_ENABLE();
 800246e:	4b60      	ldr	r3, [pc, #384]	; (80025f0 <cmr_rccTIMClockEnable+0x1ec>)
 8002470:	2200      	movs	r2, #0
 8002472:	9204      	str	r2, [sp, #16]
 8002474:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002476:	f042 0208 	orr.w	r2, r2, #8
 800247a:	641a      	str	r2, [r3, #64]	; 0x40
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	9304      	str	r3, [sp, #16]
 8002484:	9b04      	ldr	r3, [sp, #16]
            break;
 8002486:	e024      	b.n	80024d2 <cmr_rccTIMClockEnable+0xce>
    switch ((uintptr_t) instance) {
 8002488:	4b5b      	ldr	r3, [pc, #364]	; (80025f8 <cmr_rccTIMClockEnable+0x1f4>)
 800248a:	4298      	cmp	r0, r3
 800248c:	d030      	beq.n	80024f0 <cmr_rccTIMClockEnable+0xec>
 800248e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002492:	4298      	cmp	r0, r3
 8002494:	f000 809b 	beq.w	80025ce <cmr_rccTIMClockEnable+0x1ca>
 8002498:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800249c:	4298      	cmp	r0, r3
 800249e:	d118      	bne.n	80024d2 <cmr_rccTIMClockEnable+0xce>
            __HAL_RCC_TIM9_CLK_ENABLE();
 80024a0:	4b53      	ldr	r3, [pc, #332]	; (80025f0 <cmr_rccTIMClockEnable+0x1ec>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	9208      	str	r2, [sp, #32]
 80024a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80024ac:	645a      	str	r2, [r3, #68]	; 0x44
 80024ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b4:	9308      	str	r3, [sp, #32]
 80024b6:	9b08      	ldr	r3, [sp, #32]
            break;
 80024b8:	e00b      	b.n	80024d2 <cmr_rccTIMClockEnable+0xce>
        case TIM14_BASE:
            __HAL_RCC_TIM14_CLK_ENABLE();
 80024ba:	4b4d      	ldr	r3, [pc, #308]	; (80025f0 <cmr_rccTIMClockEnable+0x1ec>)
 80024bc:	2200      	movs	r2, #0
 80024be:	920d      	str	r2, [sp, #52]	; 0x34
 80024c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ce:	930d      	str	r3, [sp, #52]	; 0x34
 80024d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            break;
    }
}
 80024d2:	b00e      	add	sp, #56	; 0x38
 80024d4:	4770      	bx	lr
            __HAL_RCC_TIM6_CLK_ENABLE();
 80024d6:	4b46      	ldr	r3, [pc, #280]	; (80025f0 <cmr_rccTIMClockEnable+0x1ec>)
 80024d8:	2200      	movs	r2, #0
 80024da:	9205      	str	r2, [sp, #20]
 80024dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024de:	f042 0210 	orr.w	r2, r2, #16
 80024e2:	641a      	str	r2, [r3, #64]	; 0x40
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	9305      	str	r3, [sp, #20]
 80024ec:	9b05      	ldr	r3, [sp, #20]
            break;
 80024ee:	e7f0      	b.n	80024d2 <cmr_rccTIMClockEnable+0xce>
            __HAL_RCC_TIM10_CLK_ENABLE();
 80024f0:	4b3f      	ldr	r3, [pc, #252]	; (80025f0 <cmr_rccTIMClockEnable+0x1ec>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	9209      	str	r2, [sp, #36]	; 0x24
 80024f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80024fc:	645a      	str	r2, [r3, #68]	; 0x44
 80024fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002504:	9309      	str	r3, [sp, #36]	; 0x24
 8002506:	9b09      	ldr	r3, [sp, #36]	; 0x24
            break;
 8002508:	e7e3      	b.n	80024d2 <cmr_rccTIMClockEnable+0xce>
            __HAL_RCC_TIM8_CLK_ENABLE();
 800250a:	4b39      	ldr	r3, [pc, #228]	; (80025f0 <cmr_rccTIMClockEnable+0x1ec>)
 800250c:	2200      	movs	r2, #0
 800250e:	9207      	str	r2, [sp, #28]
 8002510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002512:	f042 0202 	orr.w	r2, r2, #2
 8002516:	645a      	str	r2, [r3, #68]	; 0x44
 8002518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	9307      	str	r3, [sp, #28]
 8002520:	9b07      	ldr	r3, [sp, #28]
            break;
 8002522:	e7d6      	b.n	80024d2 <cmr_rccTIMClockEnable+0xce>
    switch ((uintptr_t) instance) {
 8002524:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002528:	d01d      	beq.n	8002566 <cmr_rccTIMClockEnable+0x162>
 800252a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800252e:	4298      	cmp	r0, r3
 8002530:	d1cf      	bne.n	80024d2 <cmr_rccTIMClockEnable+0xce>
            __HAL_RCC_TIM3_CLK_ENABLE();
 8002532:	4b2f      	ldr	r3, [pc, #188]	; (80025f0 <cmr_rccTIMClockEnable+0x1ec>)
 8002534:	2200      	movs	r2, #0
 8002536:	9202      	str	r2, [sp, #8]
 8002538:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800253a:	f042 0202 	orr.w	r2, r2, #2
 800253e:	641a      	str	r2, [r3, #64]	; 0x40
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	9302      	str	r3, [sp, #8]
 8002548:	9b02      	ldr	r3, [sp, #8]
            break;
 800254a:	e7c2      	b.n	80024d2 <cmr_rccTIMClockEnable+0xce>
            __HAL_RCC_TIM4_CLK_ENABLE();
 800254c:	4b28      	ldr	r3, [pc, #160]	; (80025f0 <cmr_rccTIMClockEnable+0x1ec>)
 800254e:	2200      	movs	r2, #0
 8002550:	9203      	str	r2, [sp, #12]
 8002552:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002554:	f042 0204 	orr.w	r2, r2, #4
 8002558:	641a      	str	r2, [r3, #64]	; 0x40
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	9303      	str	r3, [sp, #12]
 8002562:	9b03      	ldr	r3, [sp, #12]
            break;
 8002564:	e7b5      	b.n	80024d2 <cmr_rccTIMClockEnable+0xce>
            __HAL_RCC_TIM2_CLK_ENABLE();
 8002566:	4b22      	ldr	r3, [pc, #136]	; (80025f0 <cmr_rccTIMClockEnable+0x1ec>)
 8002568:	2200      	movs	r2, #0
 800256a:	9201      	str	r2, [sp, #4]
 800256c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	641a      	str	r2, [r3, #64]	; 0x40
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	9301      	str	r3, [sp, #4]
 800257c:	9b01      	ldr	r3, [sp, #4]
            break;
 800257e:	e7a8      	b.n	80024d2 <cmr_rccTIMClockEnable+0xce>
            __HAL_RCC_TIM7_CLK_ENABLE();
 8002580:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <cmr_rccTIMClockEnable+0x1ec>)
 8002582:	2200      	movs	r2, #0
 8002584:	9206      	str	r2, [sp, #24]
 8002586:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002588:	f042 0220 	orr.w	r2, r2, #32
 800258c:	641a      	str	r2, [r3, #64]	; 0x40
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f003 0320 	and.w	r3, r3, #32
 8002594:	9306      	str	r3, [sp, #24]
 8002596:	9b06      	ldr	r3, [sp, #24]
            break;
 8002598:	e79b      	b.n	80024d2 <cmr_rccTIMClockEnable+0xce>
            __HAL_RCC_TIM1_CLK_ENABLE();
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <cmr_rccTIMClockEnable+0x1ec>)
 800259c:	2200      	movs	r2, #0
 800259e:	9200      	str	r2, [sp, #0]
 80025a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	645a      	str	r2, [r3, #68]	; 0x44
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	9b00      	ldr	r3, [sp, #0]
            break;
 80025b2:	e78e      	b.n	80024d2 <cmr_rccTIMClockEnable+0xce>
            __HAL_RCC_TIM12_CLK_ENABLE();
 80025b4:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <cmr_rccTIMClockEnable+0x1ec>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80025ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80025ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            break;
 80025cc:	e781      	b.n	80024d2 <cmr_rccTIMClockEnable+0xce>
            __HAL_RCC_TIM11_CLK_ENABLE();
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <cmr_rccTIMClockEnable+0x1ec>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	920a      	str	r2, [sp, #40]	; 0x28
 80025d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025d6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80025da:	645a      	str	r2, [r3, #68]	; 0x44
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e2:	930a      	str	r3, [sp, #40]	; 0x28
 80025e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            break;
 80025e6:	e774      	b.n	80024d2 <cmr_rccTIMClockEnable+0xce>
 80025e8:	40001800 	.word	0x40001800
 80025ec:	40010400 	.word	0x40010400
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40001000 	.word	0x40001000
 80025f8:	40014400 	.word	0x40014400

080025fc <cmr_sensorListInit>:
 * @param sensorsLen The total number of sensors in the array.
 */
void cmr_sensorListInit(
    cmr_sensorList_t *list,
    cmr_sensor_t *sensors, size_t sensorsLen
) {
 80025fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002600:	b083      	sub	sp, #12
 8002602:	9001      	str	r0, [sp, #4]
    for (size_t i = 0; i < sensorsLen; i++) {
 8002604:	b382      	cbz	r2, 8002668 <cmr_sensorListInit+0x6c>
 8002606:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
        readingTolerance = (readingRange / 100) * sensor->outOfRange_pcnt;
 800260a:	f8df e068 	ldr.w	lr, [pc, #104]	; 8002674 <cmr_sensorListInit+0x78>
 800260e:	eb01 0ccc 	add.w	ip, r1, ip, lsl #3
 8002612:	460d      	mov	r5, r1
    if (UINT32_MAX / sensor->outOfRange_pcnt < readingRange) {
 8002614:	f04f 38ff 	mov.w	r8, #4294967295
    sensor->_ = (struct cmr_sensor_private) {
 8002618:	2700      	movs	r7, #0
    const uint32_t readingRange = sensor->readingMax - sensor->readingMin;
 800261a:	f8d5 9008 	ldr.w	r9, [r5, #8]
 800261e:	68ee      	ldr	r6, [r5, #12]
    if (UINT32_MAX / sensor->outOfRange_pcnt < readingRange) {
 8002620:	f8d5 a010 	ldr.w	sl, [r5, #16]
    sensor->_ = (struct cmr_sensor_private) {
 8002624:	622f      	str	r7, [r5, #32]
    const uint32_t readingRange = sensor->readingMax - sensor->readingMin;
 8002626:	eba6 0b09 	sub.w	fp, r6, r9
        readingTolerance = (readingRange / 100) * sensor->outOfRange_pcnt;
 800262a:	fbae 340b 	umull	r3, r4, lr, fp
        readingTolerance = (readingRange * sensor->outOfRange_pcnt) / 100;
 800262e:	fb0a f30b 	mul.w	r3, sl, fp
        readingTolerance = (readingRange / 100) * sensor->outOfRange_pcnt;
 8002632:	0964      	lsrs	r4, r4, #5
        readingTolerance = (readingRange * sensor->outOfRange_pcnt) / 100;
 8002634:	fbae 0303 	umull	r0, r3, lr, r3
        readingTolerance = (readingRange / 100) * sensor->outOfRange_pcnt;
 8002638:	fb0a f404 	mul.w	r4, sl, r4
        readingTolerance = (readingRange * sensor->outOfRange_pcnt) / 100;
 800263c:	095b      	lsrs	r3, r3, #5
    if (UINT32_MAX / sensor->outOfRange_pcnt < readingRange) {
 800263e:	fbb8 fafa 	udiv	sl, r8, sl
 8002642:	45d3      	cmp	fp, sl
 8002644:	bf88      	it	hi
 8002646:	4623      	movhi	r3, r4
    sensor->_ = (struct cmr_sensor_private) {
 8002648:	18f6      	adds	r6, r6, r3
    uint32_t readingLower = sensor->readingMin - readingTolerance;
 800264a:	eba9 0303 	sub.w	r3, r9, r3
    sensor->_ = (struct cmr_sensor_private) {
 800264e:	bf28      	it	cs
 8002650:	f04f 36ff 	movcs.w	r6, #4294967295
 8002654:	4599      	cmp	r9, r3
 8002656:	bf38      	it	cc
 8002658:	2300      	movcc	r3, #0
 800265a:	f885 7024 	strb.w	r7, [r5, #36]	; 0x24
 800265e:	61ae      	str	r6, [r5, #24]
 8002660:	61eb      	str	r3, [r5, #28]
 8002662:	3528      	adds	r5, #40	; 0x28
    for (size_t i = 0; i < sensorsLen; i++) {
 8002664:	45ac      	cmp	ip, r5
 8002666:	d1d8      	bne.n	800261a <cmr_sensorListInit+0x1e>
        cmr_sensorInit(sensors + i);
    }

    list->sensors = sensors;
 8002668:	9b01      	ldr	r3, [sp, #4]
 800266a:	6019      	str	r1, [r3, #0]
    list->sensorsLen = sensorsLen;
 800266c:	605a      	str	r2, [r3, #4]
}
 800266e:	b003      	add	sp, #12
 8002670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002674:	51eb851f 	.word	0x51eb851f

08002678 <cmr_sensorListUpdate>:
/**
 * @brief Updates the given sensor list.
 *
 * @param list The list to update.
 */
void cmr_sensorListUpdate(cmr_sensorList_t *list) {
 8002678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for (size_t i = 0; i < list->sensorsLen; i++) {
 800267c:	6843      	ldr	r3, [r0, #4]
 800267e:	b30b      	cbz	r3, 80026c4 <cmr_sensorListUpdate+0x4c>
 8002680:	2500      	movs	r5, #0
 8002682:	4607      	mov	r7, r0
 8002684:	462e      	mov	r6, r5
        sensor->_.error = CMR_SENSOR_ERR_NONE;
 8002686:	46a9      	mov	r9, r5
        sensor->_.error = CMR_SENSOR_ERR_OUT_OF_RANGE;
 8002688:	f04f 0801 	mov.w	r8, #1
 800268c:	e00f      	b.n	80026ae <cmr_sensorListUpdate+0x36>
    if (reading < sensor->_.readingLower || sensor->_.readingUpper < reading) {
 800268e:	69a3      	ldr	r3, [r4, #24]
 8002690:	4298      	cmp	r0, r3
 8002692:	d814      	bhi.n	80026be <cmr_sensorListUpdate+0x46>
        sensor->_.error = CMR_SENSOR_ERR_NONE;
 8002694:	f884 9024 	strb.w	r9, [r4, #36]	; 0x24
    if (sensor->conv != NULL) {
 8002698:	6863      	ldr	r3, [r4, #4]
    for (size_t i = 0; i < list->sensorsLen; i++) {
 800269a:	3601      	adds	r6, #1
 800269c:	3528      	adds	r5, #40	; 0x28
    if (sensor->conv != NULL) {
 800269e:	b113      	cbz	r3, 80026a6 <cmr_sensorListUpdate+0x2e>
        value = sensor->conv(sensor, reading);
 80026a0:	4601      	mov	r1, r0
 80026a2:	4620      	mov	r0, r4
 80026a4:	4798      	blx	r3
    for (size_t i = 0; i < list->sensorsLen; i++) {
 80026a6:	687b      	ldr	r3, [r7, #4]
    sensor->_.value = value;
 80026a8:	6220      	str	r0, [r4, #32]
    for (size_t i = 0; i < list->sensorsLen; i++) {
 80026aa:	42b3      	cmp	r3, r6
 80026ac:	d90a      	bls.n	80026c4 <cmr_sensorListUpdate+0x4c>
        cmr_sensorUpdate(list->sensors + i);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	195c      	adds	r4, r3, r5
    uint32_t reading = sensor->sample(sensor);
 80026b2:	4620      	mov	r0, r4
 80026b4:	595b      	ldr	r3, [r3, r5]
 80026b6:	4798      	blx	r3
    if (reading < sensor->_.readingLower || sensor->_.readingUpper < reading) {
 80026b8:	69e3      	ldr	r3, [r4, #28]
 80026ba:	4298      	cmp	r0, r3
 80026bc:	d2e7      	bcs.n	800268e <cmr_sensorListUpdate+0x16>
        sensor->_.error = CMR_SENSOR_ERR_OUT_OF_RANGE;
 80026be:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
 80026c2:	e7e9      	b.n	8002698 <cmr_sensorListUpdate+0x20>
 80026c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080026c8 <cmr_sensorListGetValue>:
 * @return The most recent converted value.
 */
int32_t cmr_sensorListGetValue(
    cmr_sensorList_t *list, size_t channel
) {
    return list->sensors[channel]._.value;
 80026c8:	6803      	ldr	r3, [r0, #0]
 80026ca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80026ce:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80026d2:	6a18      	ldr	r0, [r3, #32]
}
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop

080026d8 <cmr_taskInit>:
    cmr_task_t *task,
    const char *name,
    UBaseType_t priority,
    TaskFunction_t func,
    void *arg
) {
 80026d8:	b570      	push	{r4, r5, r6, lr}
 80026da:	b084      	sub	sp, #16
#if (configSUPPORT_STATIC_ALLOCATION)
    task->handle = xTaskCreateStatic(
 80026dc:	1d06      	adds	r6, r0, #4
        func,
        name,
        sizeof(task->stackBuf) / sizeof(task->stackBuf[0]),
        arg,
        priority,
        task->stackBuf,
 80026de:	f100 0560 	add.w	r5, r0, #96	; 0x60
) {
 80026e2:	4604      	mov	r4, r0
    task->handle = xTaskCreateStatic(
 80026e4:	e88d 0064 	stmia.w	sp, {r2, r5, r6}
 80026e8:	4618      	mov	r0, r3
 80026ea:	2280      	movs	r2, #128	; 0x80
 80026ec:	9b08      	ldr	r3, [sp, #32]
 80026ee:	f000 fc85 	bl	8002ffc <xTaskCreateStatic>
 80026f2:	6020      	str	r0, [r4, #0]
#else
#error "At least one of configSUPPORT_{STATIC,DYNAMIC}_ALLOCATION must be 1!"
#endif

    configASSERT(task->handle != NULL);
}
 80026f4:	b004      	add	sp, #16
 80026f6:	bd70      	pop	{r4, r5, r6, pc}

080026f8 <vApplicationGetIdleTaskMemory>:
    static StaticTask_t taskBuf;

    /** @brief The task's stack buffer. */
    static StackType_t stackBuf[configMINIMAL_STACK_SIZE];

    *task = &taskBuf;
 80026f8:	4b04      	ldr	r3, [pc, #16]	; (800270c <vApplicationGetIdleTaskMemory+0x14>)
 80026fa:	6003      	str	r3, [r0, #0]
) {
 80026fc:	b410      	push	{r4}
    *stack = stackBuf;
    *stackLen = sizeof(stackBuf) / sizeof(stackBuf[0]);
 80026fe:	2380      	movs	r3, #128	; 0x80
    *stack = stackBuf;
 8002700:	4c03      	ldr	r4, [pc, #12]	; (8002710 <vApplicationGetIdleTaskMemory+0x18>)
 8002702:	600c      	str	r4, [r1, #0]
    *stackLen = sizeof(stackBuf) / sizeof(stackBuf[0]);
 8002704:	6013      	str	r3, [r2, #0]
}
 8002706:	f85d 4b04 	ldr.w	r4, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	2000168c 	.word	0x2000168c
 8002710:	2000148c 	.word	0x2000148c

08002714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800274c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002718:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800271a:	e003      	b.n	8002724 <LoopCopyDataInit>

0800271c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800271e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002720:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002722:	3104      	adds	r1, #4

08002724 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002724:	480b      	ldr	r0, [pc, #44]	; (8002754 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002726:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002728:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800272a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800272c:	d3f6      	bcc.n	800271c <CopyDataInit>
  ldr  r2, =_sbss
 800272e:	4a0b      	ldr	r2, [pc, #44]	; (800275c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002730:	e002      	b.n	8002738 <LoopFillZerobss>

08002732 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002732:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002734:	f842 3b04 	str.w	r3, [r2], #4

08002738 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002738:	4b09      	ldr	r3, [pc, #36]	; (8002760 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800273a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800273c:	d3f9      	bcc.n	8002732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800273e:	f000 f813 	bl	8002768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002742:	f002 fe7f 	bl	8005444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002746:	f7fe fdc9 	bl	80012dc <main>
  bx  lr    
 800274a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800274c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002750:	08005f68 	.word	0x08005f68
  ldr  r0, =_sdata
 8002754:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002758:	20000440 	.word	0x20000440
  ldr  r2, =_sbss
 800275c:	20000440 	.word	0x20000440
  ldr  r3, = _ebss
 8002760:	20001818 	.word	0x20001818

08002764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002764:	e7fe      	b.n	8002764 <ADC_IRQHandler>
	...

08002768 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002768:	4910      	ldr	r1, [pc, #64]	; (80027ac <SystemInit+0x44>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800276c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002770:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 8002774:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002776:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 800277a:	681a      	ldr	r2, [r3, #0]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800277c:	4c0d      	ldr	r4, [pc, #52]	; (80027b4 <SystemInit+0x4c>)
  RCC->CFGR = 0x00000000;
 800277e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002780:	f042 0201 	orr.w	r2, r2, #1
 8002784:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002786:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800278e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002792:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8002794:	605c      	str	r4, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002796:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002798:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800279c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027a0:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 80027a2:	60d8      	str	r0, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027a4:	608c      	str	r4, [r1, #8]
#endif
}
 80027a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000ed00 	.word	0xe000ed00
 80027b0:	40023800 	.word	0x40023800
 80027b4:	24003010 	.word	0x24003010

080027b8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027b8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027bc:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027c0:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027c2:	6081      	str	r1, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027c4:	e880 000c 	stmia.w	r0, {r2, r3}
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027c8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027ca:	6103      	str	r3, [r0, #16]
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop

080027d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	6103      	str	r3, [r0, #16]
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop

080027d8 <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80027d8:	e890 000c 	ldmia.w	r0, {r2, r3}
{
 80027dc:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027de:	689c      	ldr	r4, [r3, #8]
 80027e0:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027e2:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80027e4:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80027e6:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027e8:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027ea:	6099      	str	r1, [r3, #8]
}
 80027ec:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 80027f0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80027f2:	6002      	str	r2, [r0, #0]
}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop

080027f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027f8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027fa:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027fc:	1c6b      	adds	r3, r5, #1
 80027fe:	d011      	beq.n	8002824 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002800:	f100 0208 	add.w	r2, r0, #8
 8002804:	e000      	b.n	8002808 <vListInsert+0x10>
 8002806:	461a      	mov	r2, r3
 8002808:	6853      	ldr	r3, [r2, #4]
 800280a:	681c      	ldr	r4, [r3, #0]
 800280c:	42a5      	cmp	r5, r4
 800280e:	d2fa      	bcs.n	8002806 <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002810:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8002812:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8002814:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002816:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002818:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800281a:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800281c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800281e:	6004      	str	r4, [r0, #0]
}
 8002820:	bc30      	pop	{r4, r5}
 8002822:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8002824:	6902      	ldr	r2, [r0, #16]
 8002826:	6853      	ldr	r3, [r2, #4]
 8002828:	e7f2      	b.n	8002810 <vListInsert+0x18>
 800282a:	bf00      	nop

0800282c <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800282c:	6843      	ldr	r3, [r0, #4]
 800282e:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002830:	6902      	ldr	r2, [r0, #16]
{
 8002832:	b410      	push	{r4}
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002834:	6099      	str	r1, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002836:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002838:	6854      	ldr	r4, [r2, #4]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800283a:	604b      	str	r3, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 800283c:	6813      	ldr	r3, [r2, #0]
	if( pxList->pxIndex == pxItemToRemove )
 800283e:	42a0      	cmp	r0, r4
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002840:	bf08      	it	eq
 8002842:	6051      	streq	r1, [r2, #4]
	( pxList->uxNumberOfItems )--;
 8002844:	3b01      	subs	r3, #1
	pxItemToRemove->pvContainer = NULL;
 8002846:	2100      	movs	r1, #0
 8002848:	6101      	str	r1, [r0, #16]

	return pxList->uxNumberOfItems;
}
 800284a:	f85d 4b04 	ldr.w	r4, [sp], #4
	( pxList->uxNumberOfItems )--;
 800284e:	6013      	str	r3, [r2, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	4770      	bx	lr

08002854 <prvTaskExitError>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002858:	f383 8811 	msr	BASEPRI, r3
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	e7fe      	b.n	8002864 <prvTaskExitError+0x10>
 8002866:	bf00      	nop

08002868 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002868:	4806      	ldr	r0, [pc, #24]	; (8002884 <prvPortStartFirstTask+0x1c>)
 800286a:	6800      	ldr	r0, [r0, #0]
 800286c:	6800      	ldr	r0, [r0, #0]
 800286e:	f380 8808 	msr	MSP, r0
 8002872:	b662      	cpsie	i
 8002874:	b661      	cpsie	f
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	f3bf 8f6f 	isb	sy
 800287e:	df00      	svc	0
 8002880:	bf00      	nop
 8002882:	0000      	.short	0x0000
 8002884:	e000ed08 	.word	0xe000ed08

08002888 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002888:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002898 <vPortEnableVFP+0x10>
 800288c:	6801      	ldr	r1, [r0, #0]
 800288e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002892:	6001      	str	r1, [r0, #0]
 8002894:	4770      	bx	lr
 8002896:	0000      	.short	0x0000
 8002898:	e000ed88 	.word	0xe000ed88

0800289c <pxPortInitialiseStack>:
{
 800289c:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800289e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80028a2:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80028a6:	4c07      	ldr	r4, [pc, #28]	; (80028c4 <pxPortInitialiseStack+0x28>)
 80028a8:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80028ac:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80028b0:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80028b4:	e900 0022 	stmdb	r0, {r1, r5}
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80028b8:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80028bc:	bc30      	pop	{r4, r5}
 80028be:	3844      	subs	r0, #68	; 0x44
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	08002855 	.word	0x08002855
	...

080028d0 <SVC_Handler>:
	__asm volatile (
 80028d0:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <pxCurrentTCBConst2>)
 80028d2:	6819      	ldr	r1, [r3, #0]
 80028d4:	6808      	ldr	r0, [r1, #0]
 80028d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028da:	f380 8809 	msr	PSP, r0
 80028de:	f3bf 8f6f 	isb	sy
 80028e2:	f04f 0000 	mov.w	r0, #0
 80028e6:	f380 8811 	msr	BASEPRI, r0
 80028ea:	4770      	bx	lr
 80028ec:	f3af 8000 	nop.w

080028f0 <pxCurrentTCBConst2>:
 80028f0:	200016ec 	.word	0x200016ec

080028f4 <vPortEnterCritical>:
 80028f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002904:	4a02      	ldr	r2, [pc, #8]	; (8002910 <vPortEnterCritical+0x1c>)
 8002906:	6813      	ldr	r3, [r2, #0]
 8002908:	3301      	adds	r3, #1
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	200003cc 	.word	0x200003cc

08002914 <vPortExitCritical>:
	uxCriticalNesting--;
 8002914:	4a03      	ldr	r2, [pc, #12]	; (8002924 <vPortExitCritical+0x10>)
 8002916:	6813      	ldr	r3, [r2, #0]
 8002918:	3b01      	subs	r3, #1
 800291a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800291c:	b90b      	cbnz	r3, 8002922 <vPortExitCritical+0xe>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800291e:	f383 8811 	msr	BASEPRI, r3
 8002922:	4770      	bx	lr
 8002924:	200003cc 	.word	0x200003cc
	...

08002930 <PendSV_Handler>:
	__asm volatile
 8002930:	f3ef 8009 	mrs	r0, PSP
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <pxCurrentTCBConst>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	f01e 0f10 	tst.w	lr, #16
 8002940:	bf08      	it	eq
 8002942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800294a:	6010      	str	r0, [r2, #0]
 800294c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002950:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002954:	f380 8811 	msr	BASEPRI, r0
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	f3bf 8f6f 	isb	sy
 8002960:	f000 fd9c 	bl	800349c <vTaskSwitchContext>
 8002964:	f04f 0000 	mov.w	r0, #0
 8002968:	f380 8811 	msr	BASEPRI, r0
 800296c:	bc08      	pop	{r3}
 800296e:	6819      	ldr	r1, [r3, #0]
 8002970:	6808      	ldr	r0, [r1, #0]
 8002972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002976:	f01e 0f10 	tst.w	lr, #16
 800297a:	bf08      	it	eq
 800297c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002980:	f380 8809 	msr	PSP, r0
 8002984:	f3bf 8f6f 	isb	sy
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	f3af 8000 	nop.w

08002990 <pxCurrentTCBConst>:
 8002990:	200016ec 	.word	0x200016ec

08002994 <xPortSysTickHandler>:
{
 8002994:	b508      	push	{r3, lr}
	__asm volatile
 8002996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299a:	f383 8811 	msr	BASEPRI, r3
 800299e:	f3bf 8f6f 	isb	sy
 80029a2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80029a6:	f000 fbeb 	bl	8003180 <xTaskIncrementTick>
 80029aa:	b118      	cbz	r0, 80029b4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80029ac:	4b03      	ldr	r3, [pc, #12]	; (80029bc <xPortSysTickHandler+0x28>)
 80029ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029b2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80029b4:	2300      	movs	r3, #0
 80029b6:	f383 8811 	msr	BASEPRI, r3
 80029ba:	bd08      	pop	{r3, pc}
 80029bc:	e000ed04 	.word	0xe000ed04

080029c0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <vPortSetupTimerInterrupt+0x1c>)
 80029c2:	4907      	ldr	r1, [pc, #28]	; (80029e0 <vPortSetupTimerInterrupt+0x20>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4807      	ldr	r0, [pc, #28]	; (80029e4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80029c8:	4a07      	ldr	r2, [pc, #28]	; (80029e8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80029ca:	fba1 1303 	umull	r1, r3, r1, r3
 80029ce:	099b      	lsrs	r3, r3, #6
 80029d0:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80029d2:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80029d4:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80029d6:	6011      	str	r1, [r2, #0]
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	200003c8 	.word	0x200003c8
 80029e0:	10624dd3 	.word	0x10624dd3
 80029e4:	e000e014 	.word	0xe000e014
 80029e8:	e000e010 	.word	0xe000e010

080029ec <xPortStartScheduler>:
{
 80029ec:	b510      	push	{r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80029ee:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <xPortStartScheduler+0x8c>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80029f0:	4822      	ldr	r0, [pc, #136]	; (8002a7c <xPortStartScheduler+0x90>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80029f2:	781a      	ldrb	r2, [r3, #0]
{
 80029f4:	b082      	sub	sp, #8
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80029f6:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80029fc:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a06:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a0a:	f89d 3003 	ldrb.w	r3, [sp, #3]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a0e:	2207      	movs	r2, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a10:	0619      	lsls	r1, r3, #24
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a12:	6002      	str	r2, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a14:	d50e      	bpl.n	8002a34 <xPortStartScheduler+0x48>
 8002a16:	2206      	movs	r2, #6
 8002a18:	e000      	b.n	8002a1c <xPortStartScheduler+0x30>
 8002a1a:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a1c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a28:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002a2c:	061b      	lsls	r3, r3, #24
 8002a2e:	f102 31ff 	add.w	r1, r2, #4294967295
 8002a32:	d4f2      	bmi.n	8002a1a <xPortStartScheduler+0x2e>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002a34:	9901      	ldr	r1, [sp, #4]
 8002a36:	4c10      	ldr	r4, [pc, #64]	; (8002a78 <xPortStartScheduler+0x8c>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002a38:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <xPortStartScheduler+0x94>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002a3a:	0212      	lsls	r2, r2, #8
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002a3c:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002a3e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002a42:	6002      	str	r2, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002a44:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002a4c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002a54:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002a56:	f7ff ffb3 	bl	80029c0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <xPortStartScheduler+0x98>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8002a60:	f7ff ff12 	bl	8002888 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002a64:	4a08      	ldr	r2, [pc, #32]	; (8002a88 <xPortStartScheduler+0x9c>)
 8002a66:	6813      	ldr	r3, [r2, #0]
 8002a68:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002a6c:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002a6e:	f7ff fefb 	bl	8002868 <prvPortStartFirstTask>
	prvTaskExitError();
 8002a72:	f7ff feef 	bl	8002854 <prvTaskExitError>
 8002a76:	bf00      	nop
 8002a78:	e000e400 	.word	0xe000e400
 8002a7c:	200016e8 	.word	0x200016e8
 8002a80:	e000ed20 	.word	0xe000ed20
 8002a84:	200003cc 	.word	0x200003cc
 8002a88:	e000ef34 	.word	0xe000ef34

08002a8c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8002a8c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002a90:	2b0f      	cmp	r3, #15
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002a92:	bf84      	itt	hi
 8002a94:	4a01      	ldrhi	r2, [pc, #4]	; (8002a9c <vPortValidateInterruptPriority+0x10>)
 8002a96:	5c9b      	ldrbhi	r3, [r3, r2]
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	e000e3f0 	.word	0xe000e3f0

08002aa0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002aa0:	b570      	push	{r4, r5, r6, lr}
 8002aa2:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002aa4:	2348      	movs	r3, #72	; 0x48
 8002aa6:	9301      	str	r3, [sp, #4]
		if( pxNewQueue != NULL )
 8002aa8:	4614      	mov	r4, r2
 8002aaa:	b312      	cbz	r2, 8002af2 <xQueueCreateCountingSemaphoreStatic+0x52>
	pxNewQueue->uxItemSize = uxItemSize;
 8002aac:	2500      	movs	r5, #0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002aae:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002ab0:	63d0      	str	r0, [r2, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ab2:	6415      	str	r5, [r2, #64]	; 0x40
 8002ab4:	460e      	mov	r6, r1
	taskENTER_CRITICAL();
 8002ab6:	f7ff ff1d 	bl	80028f4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002aba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002abc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002abe:	6820      	ldr	r0, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ac0:	63a5      	str	r5, [r4, #56]	; 0x38
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002ac2:	fb03 f302 	mul.w	r3, r3, r2
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002ac6:	1a9a      	subs	r2, r3, r2
 8002ac8:	4402      	add	r2, r0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002aca:	4403      	add	r3, r0
		pxQueue->cRxLock = queueUNLOCKED;
 8002acc:	25ff      	movs	r5, #255	; 0xff
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002ace:	60e2      	str	r2, [r4, #12]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002ad0:	6063      	str	r3, [r4, #4]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ad2:	60a0      	str	r0, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ad4:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ad8:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8002adc:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ae0:	f7ff fe6a 	bl	80027b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ae4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002ae8:	f7ff fe66 	bl	80027b8 <vListInitialise>
	taskEXIT_CRITICAL();
 8002aec:	f7ff ff12 	bl	8002914 <vPortExitCritical>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );

		if( xHandle != NULL )
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002af0:	63a6      	str	r6, [r4, #56]	; 0x38
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
	}
 8002af2:	4620      	mov	r0, r4
 8002af4:	b002      	add	sp, #8
 8002af6:	bd70      	pop	{r4, r5, r6, pc}

08002af8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002af8:	b570      	push	{r4, r5, r6, lr}
 8002afa:	4604      	mov	r4, r0
 8002afc:	460e      	mov	r6, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002afe:	f7ff ffc5 	bl	8002a8c <vPortValidateInterruptPriority>
	__asm volatile
 8002b02:	f3ef 8511 	mrs	r5, BASEPRI
 8002b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0a:	f383 8811 	msr	BASEPRI, r3
 8002b0e:	f3bf 8f6f 	isb	sy
 8002b12:	f3bf 8f4f 	dsb	sy

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b16:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002b18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d20e      	bcs.n	8002b3c <xQueueGiveFromISR+0x44>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b1e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002b22:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b24:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002b26:	63a2      	str	r2, [r4, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	d00b      	beq.n	8002b44 <xQueueGiveFromISR+0x4c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	b25b      	sxtb	r3, r3
 8002b30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002b34:	2001      	movs	r0, #1
	__asm volatile
 8002b36:	f385 8811 	msr	BASEPRI, r5
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 8002b3a:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = errQUEUE_FULL;
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f385 8811 	msr	BASEPRI, r5
}
 8002b42:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f4      	beq.n	8002b34 <xQueueGiveFromISR+0x3c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b4a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002b4e:	f000 fd1b 	bl	8003588 <xTaskRemoveFromEventList>
 8002b52:	2800      	cmp	r0, #0
 8002b54:	d0ee      	beq.n	8002b34 <xQueueGiveFromISR+0x3c>
							if( pxHigherPriorityTaskWoken != NULL )
 8002b56:	2e00      	cmp	r6, #0
 8002b58:	d0ec      	beq.n	8002b34 <xQueueGiveFromISR+0x3c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002b5a:	2001      	movs	r0, #1
 8002b5c:	6030      	str	r0, [r6, #0]
 8002b5e:	e7ea      	b.n	8002b36 <xQueueGiveFromISR+0x3e>

08002b60 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8002b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b64:	4604      	mov	r4, r0
 8002b66:	b085      	sub	sp, #20
 8002b68:	469b      	mov	fp, r3
 8002b6a:	4688      	mov	r8, r1
 8002b6c:	9201      	str	r2, [sp, #4]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b6e:	f7ff fec1 	bl	80028f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b72:	6ba3      	ldr	r3, [r4, #56]	; 0x38

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 8002b74:	4ea3      	ldr	r6, [pc, #652]	; (8002e04 <xQueueGenericReceive+0x2a4>)
BaseType_t xEntryTimeSet = pdFALSE;
 8002b76:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 8002b78:	463d      	mov	r5, r7
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f040 80e1 	bne.w	8002d42 <xQueueGenericReceive+0x1e2>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b80:	9b01      	ldr	r3, [sp, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 816c 	beq.w	8002e60 <xQueueGenericReceive+0x300>
				else if( xEntryTimeSet == pdFALSE )
 8002b88:	2f00      	cmp	r7, #0
 8002b8a:	f000 8165 	beq.w	8002e58 <xQueueGenericReceive+0x2f8>
		taskEXIT_CRITICAL();
 8002b8e:	f7ff fec1 	bl	8002914 <vPortExitCritical>
		vTaskSuspendAll();
 8002b92:	f000 fadf 	bl	8003154 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b96:	f7ff fead 	bl	80028f4 <vPortEnterCritical>
 8002b9a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002b9e:	2bff      	cmp	r3, #255	; 0xff
 8002ba0:	bf08      	it	eq
 8002ba2:	f884 5044 	strbeq.w	r5, [r4, #68]	; 0x44
 8002ba6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002baa:	2bff      	cmp	r3, #255	; 0xff
 8002bac:	bf08      	it	eq
 8002bae:	f884 5045 	strbeq.w	r5, [r4, #69]	; 0x45
 8002bb2:	f7ff feaf 	bl	8002914 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bb6:	a901      	add	r1, sp, #4
 8002bb8:	a802      	add	r0, sp, #8
 8002bba:	f000 fd2b 	bl	8003614 <xTaskCheckForTimeOut>
 8002bbe:	2800      	cmp	r0, #0
 8002bc0:	d15c      	bne.n	8002c7c <xQueueGenericReceive+0x11c>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002bc2:	f7ff fe97 	bl	80028f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002bc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 80dd 	beq.w	8002d88 <xQueueGenericReceive+0x228>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002bce:	f7ff fea1 	bl	8002914 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002bd2:	f7ff fe8f 	bl	80028f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002bd6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002bda:	fa4f fa83 	sxtb.w	sl, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bde:	f1ba 0f00 	cmp.w	sl, #0
 8002be2:	dd1a      	ble.n	8002c1a <xQueueGenericReceive+0xba>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002be4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002be6:	b1c3      	cbz	r3, 8002c1a <xQueueGenericReceive+0xba>
 8002be8:	f104 0924 	add.w	r9, r4, #36	; 0x24
 8002bec:	e007      	b.n	8002bfe <xQueueGenericReceive+0x9e>
 8002bee:	f10a 33ff 	add.w	r3, sl, #4294967295
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	fa4f fa83 	sxtb.w	sl, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bf8:	b17b      	cbz	r3, 8002c1a <xQueueGenericReceive+0xba>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bfc:	b16b      	cbz	r3, 8002c1a <xQueueGenericReceive+0xba>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bfe:	4648      	mov	r0, r9
 8002c00:	f000 fcc2 	bl	8003588 <xTaskRemoveFromEventList>
 8002c04:	2800      	cmp	r0, #0
 8002c06:	d0f2      	beq.n	8002bee <xQueueGenericReceive+0x8e>
						vTaskMissedYield();
 8002c08:	f000 fd34 	bl	8003674 <vTaskMissedYield>
 8002c0c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	fa4f fa83 	sxtb.w	sl, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1ef      	bne.n	8002bfa <xQueueGenericReceive+0x9a>
		pxQueue->cTxLock = queueUNLOCKED;
 8002c1a:	23ff      	movs	r3, #255	; 0xff
 8002c1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002c20:	f7ff fe78 	bl	8002914 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002c24:	f7ff fe66 	bl	80028f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002c28:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002c2c:	fa4f fa83 	sxtb.w	sl, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c30:	f1ba 0f00 	cmp.w	sl, #0
 8002c34:	dd1a      	ble.n	8002c6c <xQueueGenericReceive+0x10c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c36:	6923      	ldr	r3, [r4, #16]
 8002c38:	b1c3      	cbz	r3, 8002c6c <xQueueGenericReceive+0x10c>
 8002c3a:	f104 0910 	add.w	r9, r4, #16
 8002c3e:	e007      	b.n	8002c50 <xQueueGenericReceive+0xf0>
 8002c40:	f10a 33ff 	add.w	r3, sl, #4294967295
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	fa4f fa83 	sxtb.w	sl, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c4a:	b17b      	cbz	r3, 8002c6c <xQueueGenericReceive+0x10c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c4c:	6923      	ldr	r3, [r4, #16]
 8002c4e:	b16b      	cbz	r3, 8002c6c <xQueueGenericReceive+0x10c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c50:	4648      	mov	r0, r9
 8002c52:	f000 fc99 	bl	8003588 <xTaskRemoveFromEventList>
 8002c56:	2800      	cmp	r0, #0
 8002c58:	d0f2      	beq.n	8002c40 <xQueueGenericReceive+0xe0>
					vTaskMissedYield();
 8002c5a:	f000 fd0b 	bl	8003674 <vTaskMissedYield>
 8002c5e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	fa4f fa83 	sxtb.w	sl, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1ef      	bne.n	8002c4c <xQueueGenericReceive+0xec>
		pxQueue->cRxLock = queueUNLOCKED;
 8002c6c:	23ff      	movs	r3, #255	; 0xff
 8002c6e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002c72:	f7ff fe4f 	bl	8002914 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8002c76:	f000 fb27 	bl	80032c8 <xTaskResumeAll>
 8002c7a:	e05b      	b.n	8002d34 <xQueueGenericReceive+0x1d4>
	taskENTER_CRITICAL();
 8002c7c:	f7ff fe3a 	bl	80028f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002c80:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002c84:	fa4f fa83 	sxtb.w	sl, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c88:	f1ba 0f00 	cmp.w	sl, #0
 8002c8c:	dd1a      	ble.n	8002cc4 <xQueueGenericReceive+0x164>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c90:	b1c3      	cbz	r3, 8002cc4 <xQueueGenericReceive+0x164>
 8002c92:	f104 0924 	add.w	r9, r4, #36	; 0x24
 8002c96:	e007      	b.n	8002ca8 <xQueueGenericReceive+0x148>
 8002c98:	f10a 33ff 	add.w	r3, sl, #4294967295
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	fa4f fa83 	sxtb.w	sl, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ca2:	b17b      	cbz	r3, 8002cc4 <xQueueGenericReceive+0x164>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ca4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ca6:	b16b      	cbz	r3, 8002cc4 <xQueueGenericReceive+0x164>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ca8:	4648      	mov	r0, r9
 8002caa:	f000 fc6d 	bl	8003588 <xTaskRemoveFromEventList>
 8002cae:	2800      	cmp	r0, #0
 8002cb0:	d0f2      	beq.n	8002c98 <xQueueGenericReceive+0x138>
						vTaskMissedYield();
 8002cb2:	f000 fcdf 	bl	8003674 <vTaskMissedYield>
 8002cb6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	fa4f fa83 	sxtb.w	sl, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1ef      	bne.n	8002ca4 <xQueueGenericReceive+0x144>
		pxQueue->cTxLock = queueUNLOCKED;
 8002cc4:	23ff      	movs	r3, #255	; 0xff
 8002cc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002cca:	f7ff fe23 	bl	8002914 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002cce:	f7ff fe11 	bl	80028f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002cd2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002cd6:	fa4f fa83 	sxtb.w	sl, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002cda:	f1ba 0f00 	cmp.w	sl, #0
 8002cde:	dd1a      	ble.n	8002d16 <xQueueGenericReceive+0x1b6>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ce0:	6923      	ldr	r3, [r4, #16]
 8002ce2:	b1c3      	cbz	r3, 8002d16 <xQueueGenericReceive+0x1b6>
 8002ce4:	f104 0910 	add.w	r9, r4, #16
 8002ce8:	e007      	b.n	8002cfa <xQueueGenericReceive+0x19a>
 8002cea:	f10a 33ff 	add.w	r3, sl, #4294967295
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	fa4f fa83 	sxtb.w	sl, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002cf4:	b17b      	cbz	r3, 8002d16 <xQueueGenericReceive+0x1b6>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cf6:	6923      	ldr	r3, [r4, #16]
 8002cf8:	b16b      	cbz	r3, 8002d16 <xQueueGenericReceive+0x1b6>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cfa:	4648      	mov	r0, r9
 8002cfc:	f000 fc44 	bl	8003588 <xTaskRemoveFromEventList>
 8002d00:	2800      	cmp	r0, #0
 8002d02:	d0f2      	beq.n	8002cea <xQueueGenericReceive+0x18a>
					vTaskMissedYield();
 8002d04:	f000 fcb6 	bl	8003674 <vTaskMissedYield>
 8002d08:	f10a 33ff 	add.w	r3, sl, #4294967295
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	fa4f fa83 	sxtb.w	sl, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1ef      	bne.n	8002cf6 <xQueueGenericReceive+0x196>
		pxQueue->cRxLock = queueUNLOCKED;
 8002d16:	23ff      	movs	r3, #255	; 0xff
 8002d18:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002d1c:	f7ff fdfa 	bl	8002914 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8002d20:	f000 fad2 	bl	80032c8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8002d24:	f7ff fde6 	bl	80028f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002d28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 8098 	beq.w	8002e60 <xQueueGenericReceive+0x300>
	taskEXIT_CRITICAL();
 8002d30:	f7ff fdf0 	bl	8002914 <vPortExitCritical>
		taskENTER_CRITICAL();
 8002d34:	f7ff fdde 	bl	80028f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d3a:	2701      	movs	r7, #1
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f43f af1f 	beq.w	8002b80 <xQueueGenericReceive+0x20>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d42:	6c22      	ldr	r2, [r4, #64]	; 0x40
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8002d44:	68e5      	ldr	r5, [r4, #12]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d46:	b15a      	cbz	r2, 8002d60 <xQueueGenericReceive+0x200>
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d48:	6860      	ldr	r0, [r4, #4]
 8002d4a:	9300      	str	r3, [sp, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002d4c:	18a9      	adds	r1, r5, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d4e:	4281      	cmp	r1, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002d50:	60e1      	str	r1, [r4, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002d52:	bf24      	itt	cs
 8002d54:	6821      	ldrcs	r1, [r4, #0]
 8002d56:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002d58:	4640      	mov	r0, r8
 8002d5a:	f002 fb97 	bl	800548c <memcpy>
 8002d5e:	9b00      	ldr	r3, [sp, #0]
				if( xJustPeeking == pdFALSE )
 8002d60:	f1bb 0f00 	cmp.w	fp, #0
 8002d64:	f040 808a 	bne.w	8002e7c <xQueueGenericReceive+0x31c>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d68:	6822      	ldr	r2, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d6e:	2a00      	cmp	r2, #0
 8002d70:	f000 80a3 	beq.w	8002eba <xQueueGenericReceive+0x35a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d74:	6923      	ldr	r3, [r4, #16]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f040 8098 	bne.w	8002eac <xQueueGenericReceive+0x34c>
				taskEXIT_CRITICAL();
 8002d7c:	f7ff fdca 	bl	8002914 <vPortExitCritical>
				return pdPASS;
 8002d80:	2001      	movs	r0, #1
}
 8002d82:	b005      	add	sp, #20
 8002d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	taskEXIT_CRITICAL();
 8002d88:	f7ff fdc4 	bl	8002914 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d8c:	6823      	ldr	r3, [r4, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d06c      	beq.n	8002e6c <xQueueGenericReceive+0x30c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d92:	f104 0924 	add.w	r9, r4, #36	; 0x24
 8002d96:	4648      	mov	r0, r9
 8002d98:	9901      	ldr	r1, [sp, #4]
 8002d9a:	f000 fbad 	bl	80034f8 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8002d9e:	f7ff fda9 	bl	80028f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002da2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002da6:	fa4f fa83 	sxtb.w	sl, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002daa:	f1ba 0f00 	cmp.w	sl, #0
 8002dae:	dc06      	bgt.n	8002dbe <xQueueGenericReceive+0x25e>
 8002db0:	e015      	b.n	8002dde <xQueueGenericReceive+0x27e>
 8002db2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	fa4f fa83 	sxtb.w	sl, r3
 8002dbc:	b17b      	cbz	r3, 8002dde <xQueueGenericReceive+0x27e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002dc0:	b16b      	cbz	r3, 8002dde <xQueueGenericReceive+0x27e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dc2:	4648      	mov	r0, r9
 8002dc4:	f000 fbe0 	bl	8003588 <xTaskRemoveFromEventList>
 8002dc8:	2800      	cmp	r0, #0
 8002dca:	d0f2      	beq.n	8002db2 <xQueueGenericReceive+0x252>
						vTaskMissedYield();
 8002dcc:	f000 fc52 	bl	8003674 <vTaskMissedYield>
 8002dd0:	f10a 33ff 	add.w	r3, sl, #4294967295
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	fa4f fa83 	sxtb.w	sl, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1ef      	bne.n	8002dbe <xQueueGenericReceive+0x25e>
		pxQueue->cTxLock = queueUNLOCKED;
 8002dde:	23ff      	movs	r3, #255	; 0xff
 8002de0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002de4:	f7ff fd96 	bl	8002914 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002de8:	f7ff fd84 	bl	80028f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002dec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002df0:	fa4f fa83 	sxtb.w	sl, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002df4:	f1ba 0f00 	cmp.w	sl, #0
 8002df8:	dd1c      	ble.n	8002e34 <xQueueGenericReceive+0x2d4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dfa:	6923      	ldr	r3, [r4, #16]
 8002dfc:	b1d3      	cbz	r3, 8002e34 <xQueueGenericReceive+0x2d4>
 8002dfe:	f104 0910 	add.w	r9, r4, #16
 8002e02:	e009      	b.n	8002e18 <xQueueGenericReceive+0x2b8>
 8002e04:	e000ed04 	.word	0xe000ed04
 8002e08:	f10a 33ff 	add.w	r3, sl, #4294967295
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	fa4f fa83 	sxtb.w	sl, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e12:	b17b      	cbz	r3, 8002e34 <xQueueGenericReceive+0x2d4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e14:	6923      	ldr	r3, [r4, #16]
 8002e16:	b16b      	cbz	r3, 8002e34 <xQueueGenericReceive+0x2d4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e18:	4648      	mov	r0, r9
 8002e1a:	f000 fbb5 	bl	8003588 <xTaskRemoveFromEventList>
 8002e1e:	2800      	cmp	r0, #0
 8002e20:	d0f2      	beq.n	8002e08 <xQueueGenericReceive+0x2a8>
					vTaskMissedYield();
 8002e22:	f000 fc27 	bl	8003674 <vTaskMissedYield>
 8002e26:	f10a 33ff 	add.w	r3, sl, #4294967295
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	fa4f fa83 	sxtb.w	sl, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1ef      	bne.n	8002e14 <xQueueGenericReceive+0x2b4>
		pxQueue->cRxLock = queueUNLOCKED;
 8002e34:	23ff      	movs	r3, #255	; 0xff
 8002e36:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002e3a:	f7ff fd6b 	bl	8002914 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8002e3e:	f000 fa43 	bl	80032c8 <xTaskResumeAll>
 8002e42:	2800      	cmp	r0, #0
 8002e44:	f47f af76 	bne.w	8002d34 <xQueueGenericReceive+0x1d4>
					portYIELD_WITHIN_API();
 8002e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e4c:	6033      	str	r3, [r6, #0]
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	e76d      	b.n	8002d34 <xQueueGenericReceive+0x1d4>
					vTaskSetTimeOutState( &xTimeOut );
 8002e58:	a802      	add	r0, sp, #8
 8002e5a:	f000 fbcf 	bl	80035fc <vTaskSetTimeOutState>
 8002e5e:	e696      	b.n	8002b8e <xQueueGenericReceive+0x2e>
					taskEXIT_CRITICAL();
 8002e60:	f7ff fd58 	bl	8002914 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002e64:	2000      	movs	r0, #0
}
 8002e66:	b005      	add	sp, #20
 8002e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						taskENTER_CRITICAL();
 8002e6c:	f7ff fd42 	bl	80028f4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002e70:	6860      	ldr	r0, [r4, #4]
 8002e72:	f000 fc15 	bl	80036a0 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8002e76:	f7ff fd4d 	bl	8002914 <vPortExitCritical>
 8002e7a:	e78a      	b.n	8002d92 <xQueueGenericReceive+0x232>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8002e7e:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f43f af7b 	beq.w	8002d7c <xQueueGenericReceive+0x21c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e86:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002e8a:	f000 fb7d 	bl	8003588 <xTaskRemoveFromEventList>
 8002e8e:	2800      	cmp	r0, #0
 8002e90:	f43f af74 	beq.w	8002d7c <xQueueGenericReceive+0x21c>
							queueYIELD_IF_USING_PREEMPTION();
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <xQueueGenericReceive+0x364>)
 8002e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002ea4:	f7ff fd36 	bl	8002914 <vPortExitCritical>
				return pdPASS;
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	e76a      	b.n	8002d82 <xQueueGenericReceive+0x222>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002eac:	f104 0010 	add.w	r0, r4, #16
 8002eb0:	f000 fb6a 	bl	8003588 <xTaskRemoveFromEventList>
 8002eb4:	2800      	cmp	r0, #0
 8002eb6:	d1ed      	bne.n	8002e94 <xQueueGenericReceive+0x334>
 8002eb8:	e760      	b.n	8002d7c <xQueueGenericReceive+0x21c>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002eba:	f000 fc3d 	bl	8003738 <pvTaskIncrementMutexHeldCount>
 8002ebe:	6060      	str	r0, [r4, #4]
 8002ec0:	e758      	b.n	8002d74 <xQueueGenericReceive+0x214>
 8002ec2:	bf00      	nop
 8002ec4:	e000ed04 	.word	0xe000ed04

08002ec8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ec8:	4806      	ldr	r0, [pc, #24]	; (8002ee4 <prvIdleTask+0x1c>)
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 8002eca:	4907      	ldr	r1, [pc, #28]	; (8002ee8 <prvIdleTask+0x20>)
 8002ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ed0:	6803      	ldr	r3, [r0, #0]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d800      	bhi.n	8002ed8 <prvIdleTask+0x10>
 8002ed6:	e7fe      	b.n	8002ed6 <prvIdleTask+0xe>
 8002ed8:	600a      	str	r2, [r1, #0]
 8002eda:	f3bf 8f4f 	dsb	sy
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	e7f5      	b.n	8002ed0 <prvIdleTask+0x8>
 8002ee4:	200016f8 	.word	0x200016f8
 8002ee8:	e000ed04 	.word	0xe000ed04

08002eec <prvAddNewTaskToReadyList>:
{
 8002eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ef0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002ef2:	f7ff fcff 	bl	80028f4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002ef6:	4a34      	ldr	r2, [pc, #208]	; (8002fc8 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8002ef8:	4d34      	ldr	r5, [pc, #208]	; (8002fcc <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 8002efa:	6813      	ldr	r3, [r2, #0]
 8002efc:	3301      	adds	r3, #1
 8002efe:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f00:	682b      	ldr	r3, [r5, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d035      	beq.n	8002f72 <prvAddNewTaskToReadyList+0x86>
			if( xSchedulerRunning == pdFALSE )
 8002f06:	4f32      	ldr	r7, [pc, #200]	; (8002fd0 <prvAddNewTaskToReadyList+0xe4>)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	b34b      	cbz	r3, 8002f60 <prvAddNewTaskToReadyList+0x74>
 8002f0c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002f0e:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8002ff0 <prvAddNewTaskToReadyList+0x104>
		uxTaskNumber++;
 8002f12:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8002ff4 <prvAddNewTaskToReadyList+0x108>
		prvAddTaskToReadyList( pxNewTCB );
 8002f16:	4e2f      	ldr	r6, [pc, #188]	; (8002fd4 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8002f18:	f8de 2000 	ldr.w	r2, [lr]
		prvAddTaskToReadyList( pxNewTCB );
 8002f1c:	6831      	ldr	r1, [r6, #0]
 8002f1e:	2301      	movs	r3, #1
 8002f20:	4083      	lsls	r3, r0
 8002f22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f26:	430b      	orrs	r3, r1
		uxTaskNumber++;
 8002f28:	3201      	adds	r2, #1
		prvAddTaskToReadyList( pxNewTCB );
 8002f2a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8002f2e:	1d21      	adds	r1, r4, #4
 8002f30:	6033      	str	r3, [r6, #0]
		uxTaskNumber++;
 8002f32:	f8ce 2000 	str.w	r2, [lr]
		prvAddTaskToReadyList( pxNewTCB );
 8002f36:	f7ff fc4f 	bl	80027d8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002f3a:	f7ff fceb 	bl	8002914 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	b163      	cbz	r3, 8002f5c <prvAddNewTaskToReadyList+0x70>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f42:	682a      	ldr	r2, [r5, #0]
 8002f44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f46:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d207      	bcs.n	8002f5c <prvAddNewTaskToReadyList+0x70>
			taskYIELD_IF_USING_PREEMPTION();
 8002f4c:	4b22      	ldr	r3, [pc, #136]	; (8002fd8 <prvAddNewTaskToReadyList+0xec>)
 8002f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f60:	682b      	ldr	r3, [r5, #0]
 8002f62:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f66:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8002ff0 <prvAddNewTaskToReadyList+0x104>
 8002f6a:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8002f6c:	bf98      	it	ls
 8002f6e:	602c      	strls	r4, [r5, #0]
 8002f70:	e7cf      	b.n	8002f12 <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 8002f72:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f74:	6813      	ldr	r3, [r2, #0]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d004      	beq.n	8002f84 <prvAddNewTaskToReadyList+0x98>
 8002f7a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002f7c:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8002ff0 <prvAddNewTaskToReadyList+0x104>
 8002f80:	4f13      	ldr	r7, [pc, #76]	; (8002fd0 <prvAddNewTaskToReadyList+0xe4>)
 8002f82:	e7c6      	b.n	8002f12 <prvAddNewTaskToReadyList+0x26>
 8002f84:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8002ff0 <prvAddNewTaskToReadyList+0x104>
 8002f88:	4646      	mov	r6, r8
 8002f8a:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f8e:	4630      	mov	r0, r6
 8002f90:	3614      	adds	r6, #20
 8002f92:	f7ff fc11 	bl	80027b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f96:	42be      	cmp	r6, r7
 8002f98:	d1f9      	bne.n	8002f8e <prvAddNewTaskToReadyList+0xa2>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002f9a:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8002ff8 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList2 );
 8002f9e:	4e0f      	ldr	r6, [pc, #60]	; (8002fdc <prvAddNewTaskToReadyList+0xf0>)
 8002fa0:	4f0b      	ldr	r7, [pc, #44]	; (8002fd0 <prvAddNewTaskToReadyList+0xe4>)
	vListInitialise( &xDelayedTaskList1 );
 8002fa2:	4648      	mov	r0, r9
 8002fa4:	f7ff fc08 	bl	80027b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002fa8:	4630      	mov	r0, r6
 8002faa:	f7ff fc05 	bl	80027b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002fae:	480c      	ldr	r0, [pc, #48]	; (8002fe0 <prvAddNewTaskToReadyList+0xf4>)
 8002fb0:	f7ff fc02 	bl	80027b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002fb4:	480b      	ldr	r0, [pc, #44]	; (8002fe4 <prvAddNewTaskToReadyList+0xf8>)
 8002fb6:	f7ff fbff 	bl	80027b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002fba:	4a0b      	ldr	r2, [pc, #44]	; (8002fe8 <prvAddNewTaskToReadyList+0xfc>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <prvAddNewTaskToReadyList+0x100>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8002fbe:	f8c2 9000 	str.w	r9, [r2]
 8002fc2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002fc4:	601e      	str	r6, [r3, #0]
 8002fc6:	e7a4      	b.n	8002f12 <prvAddNewTaskToReadyList+0x26>
 8002fc8:	20001784 	.word	0x20001784
 8002fcc:	200016ec 	.word	0x200016ec
 8002fd0:	200017dc 	.word	0x200017dc
 8002fd4:	20001794 	.word	0x20001794
 8002fd8:	e000ed04 	.word	0xe000ed04
 8002fdc:	200017ac 	.word	0x200017ac
 8002fe0:	200017c8 	.word	0x200017c8
 8002fe4:	200017e0 	.word	0x200017e0
 8002fe8:	200016f0 	.word	0x200016f0
 8002fec:	200016f4 	.word	0x200016f4
 8002ff0:	200016f8 	.word	0x200016f8
 8002ff4:	20001790 	.word	0x20001790
 8002ff8:	20001798 	.word	0x20001798

08002ffc <xTaskCreateStatic>:
	{
 8002ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003000:	9f08      	ldr	r7, [sp, #32]
 8003002:	9c07      	ldr	r4, [sp, #28]
		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003004:	2f00      	cmp	r7, #0
 8003006:	d040      	beq.n	800308a <xTaskCreateStatic+0x8e>
 8003008:	2c00      	cmp	r4, #0
 800300a:	d03b      	beq.n	8003084 <xTaskCreateStatic+0x88>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800300c:	f102 4880 	add.w	r8, r2, #1073741824	; 0x40000000
 8003010:	f108 38ff 	add.w	r8, r8, #4294967295
 8003014:	eb04 0888 	add.w	r8, r4, r8, lsl #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003018:	633c      	str	r4, [r7, #48]	; 0x30
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800301a:	f028 0807 	bic.w	r8, r8, #7
 800301e:	1e4c      	subs	r4, r1, #1
 8003020:	f101 0e1f 	add.w	lr, r1, #31
 8003024:	f107 0533 	add.w	r5, r7, #51	; 0x33
 8003028:	e001      	b.n	800302e <xTaskCreateStatic+0x32>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800302a:	4574      	cmp	r4, lr
 800302c:	d006      	beq.n	800303c <xTaskCreateStatic+0x40>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800302e:	7866      	ldrb	r6, [r4, #1]
 8003030:	f805 6f01 	strb.w	r6, [r5, #1]!
		if( pcName[ x ] == 0x00 )
 8003034:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 8003038:	2e00      	cmp	r6, #0
 800303a:	d1f6      	bne.n	800302a <xTaskCreateStatic+0x2e>
 800303c:	9c06      	ldr	r4, [sp, #24]
 800303e:	2c06      	cmp	r4, #6
 8003040:	bf28      	it	cs
 8003042:	2406      	movcs	r4, #6
 8003044:	461e      	mov	r6, r3
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003046:	2300      	movs	r3, #0
 8003048:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		pxNewTCB->uxMutexesHeld = 0;
 800304c:	65bb      	str	r3, [r7, #88]	; 0x58
 800304e:	4605      	mov	r5, r0
	pxNewTCB->uxPriority = uxPriority;
 8003050:	62fc      	str	r4, [r7, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003052:	657c      	str	r4, [r7, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003054:	1d38      	adds	r0, r7, #4
 8003056:	f7ff fbbb 	bl	80027d0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800305a:	f1c4 0407 	rsb	r4, r4, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800305e:	f107 0018 	add.w	r0, r7, #24
 8003062:	f7ff fbb5 	bl	80027d0 <vListInitialiseItem>
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003066:	4632      	mov	r2, r6
 8003068:	4629      	mov	r1, r5
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800306a:	61bc      	str	r4, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800306c:	613f      	str	r7, [r7, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800306e:	627f      	str	r7, [r7, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003070:	4640      	mov	r0, r8
 8003072:	f7ff fc13 	bl	800289c <pxPortInitialiseStack>
 8003076:	6038      	str	r0, [r7, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8003078:	4638      	mov	r0, r7
 800307a:	f7ff ff37 	bl	8002eec <prvAddNewTaskToReadyList>
 800307e:	4638      	mov	r0, r7
 8003080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReturn = NULL;
 8003084:	4620      	mov	r0, r4
	}
 8003086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReturn = NULL;
 800308a:	4638      	mov	r0, r7
 800308c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003090 <vTaskStartScheduler>:
{
 8003090:	b570      	push	{r4, r5, r6, lr}
 8003092:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003094:	2300      	movs	r3, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003096:	aa03      	add	r2, sp, #12
 8003098:	a902      	add	r1, sp, #8
 800309a:	a801      	add	r0, sp, #4
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800309c:	9301      	str	r3, [sp, #4]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800309e:	9302      	str	r3, [sp, #8]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80030a0:	f7ff fb2a 	bl	80026f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80030a4:	9c01      	ldr	r4, [sp, #4]
 80030a6:	9a02      	ldr	r2, [sp, #8]
		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80030a8:	2c00      	cmp	r4, #0
 80030aa:	d046      	beq.n	800313a <vTaskStartScheduler+0xaa>
 80030ac:	2a00      	cmp	r2, #0
 80030ae:	d044      	beq.n	800313a <vTaskStartScheduler+0xaa>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80030b0:	9d03      	ldr	r5, [sp, #12]
 80030b2:	4b23      	ldr	r3, [pc, #140]	; (8003140 <vTaskStartScheduler+0xb0>)
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80030b4:	6322      	str	r2, [r4, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80030b6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80030ba:	3d01      	subs	r5, #1
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030bc:	4621      	mov	r1, r4
 80030be:	2049      	movs	r0, #73	; 0x49
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80030c0:	eb02 0285 	add.w	r2, r2, r5, lsl #2
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030c4:	f801 0f34 	strb.w	r0, [r1, #52]!
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80030c8:	f022 0507 	bic.w	r5, r2, #7
 80030cc:	f103 001f 	add.w	r0, r3, #31
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030d0:	4298      	cmp	r0, r3
 80030d2:	d005      	beq.n	80030e0 <vTaskStartScheduler+0x50>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030d4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80030d8:	f801 2f01 	strb.w	r2, [r1, #1]!
		if( pcName[ x ] == 0x00 )
 80030dc:	2a00      	cmp	r2, #0
 80030de:	d1f7      	bne.n	80030d0 <vTaskStartScheduler+0x40>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80030e0:	2600      	movs	r6, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030e2:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80030e4:	f884 6053 	strb.w	r6, [r4, #83]	; 0x53
	pxNewTCB->uxPriority = uxPriority;
 80030e8:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80030ea:	6566      	str	r6, [r4, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 80030ec:	65a6      	str	r6, [r4, #88]	; 0x58
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030ee:	f7ff fb6f 	bl	80027d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030f2:	f104 0018 	add.w	r0, r4, #24
 80030f6:	f7ff fb6b 	bl	80027d0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030fa:	2307      	movs	r3, #7
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030fc:	4632      	mov	r2, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030fe:	61a3      	str	r3, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003100:	4910      	ldr	r1, [pc, #64]	; (8003144 <vTaskStartScheduler+0xb4>)
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003102:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003104:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003106:	4628      	mov	r0, r5
 8003108:	f7ff fbc8 	bl	800289c <pxPortInitialiseStack>
 800310c:	6020      	str	r0, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 800310e:	4620      	mov	r0, r4
 8003110:	f7ff feec 	bl	8002eec <prvAddNewTaskToReadyList>
	__asm volatile
 8003114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003118:	f383 8811 	msr	BASEPRI, r3
 800311c:	f3bf 8f6f 	isb	sy
 8003120:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003124:	4808      	ldr	r0, [pc, #32]	; (8003148 <vTaskStartScheduler+0xb8>)
		xSchedulerRunning = pdTRUE;
 8003126:	4a09      	ldr	r2, [pc, #36]	; (800314c <vTaskStartScheduler+0xbc>)
		xTickCount = ( TickType_t ) 0U;
 8003128:	4b09      	ldr	r3, [pc, #36]	; (8003150 <vTaskStartScheduler+0xc0>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800312a:	f04f 34ff 	mov.w	r4, #4294967295
		xSchedulerRunning = pdTRUE;
 800312e:	2101      	movs	r1, #1
		xNextTaskUnblockTime = portMAX_DELAY;
 8003130:	6004      	str	r4, [r0, #0]
		xSchedulerRunning = pdTRUE;
 8003132:	6011      	str	r1, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 8003134:	601e      	str	r6, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003136:	f7ff fc59 	bl	80029ec <xPortStartScheduler>
}
 800313a:	b004      	add	sp, #16
 800313c:	bd70      	pop	{r4, r5, r6, pc}
 800313e:	bf00      	nop
 8003140:	08005ec8 	.word	0x08005ec8
 8003144:	08002ec9 	.word	0x08002ec9
 8003148:	200017c0 	.word	0x200017c0
 800314c:	200017dc 	.word	0x200017dc
 8003150:	200017f4 	.word	0x200017f4

08003154 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003154:	4a02      	ldr	r2, [pc, #8]	; (8003160 <vTaskSuspendAll+0xc>)
 8003156:	6813      	ldr	r3, [r2, #0]
 8003158:	3301      	adds	r3, #1
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	2000178c 	.word	0x2000178c

08003164 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003164:	4b01      	ldr	r3, [pc, #4]	; (800316c <xTaskGetTickCount+0x8>)
 8003166:	6818      	ldr	r0, [r3, #0]
}
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	200017f4 	.word	0x200017f4

08003170 <xTaskGetTickCountFromISR>:
{
 8003170:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003172:	f7ff fc8b 	bl	8002a8c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8003176:	4b01      	ldr	r3, [pc, #4]	; (800317c <xTaskGetTickCountFromISR+0xc>)
 8003178:	6818      	ldr	r0, [r3, #0]
}
 800317a:	bd08      	pop	{r3, pc}
 800317c:	200017f4 	.word	0x200017f4

08003180 <xTaskIncrementTick>:
{
 8003180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003184:	4b45      	ldr	r3, [pc, #276]	; (800329c <xTaskIncrementTick+0x11c>)
 8003186:	681b      	ldr	r3, [r3, #0]
{
 8003188:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800318a:	2b00      	cmp	r3, #0
 800318c:	d14f      	bne.n	800322e <xTaskIncrementTick+0xae>
		const TickType_t xConstTickCount = xTickCount + 1;
 800318e:	4b44      	ldr	r3, [pc, #272]	; (80032a0 <xTaskIncrementTick+0x120>)
 8003190:	681e      	ldr	r6, [r3, #0]
 8003192:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8003194:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8003196:	2e00      	cmp	r6, #0
 8003198:	d057      	beq.n	800324a <xTaskIncrementTick+0xca>
 800319a:	4b42      	ldr	r3, [pc, #264]	; (80032a4 <xTaskIncrementTick+0x124>)
 800319c:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	429e      	cmp	r6, r3
 80031a2:	d369      	bcc.n	8003278 <xTaskIncrementTick+0xf8>
 80031a4:	4d40      	ldr	r5, [pc, #256]	; (80032a8 <xTaskIncrementTick+0x128>)
 80031a6:	f8df 8118 	ldr.w	r8, [pc, #280]	; 80032c0 <xTaskIncrementTick+0x140>
 80031aa:	f8df 9118 	ldr.w	r9, [pc, #280]	; 80032c4 <xTaskIncrementTick+0x144>
					prvAddTaskToReadyList( pxTCB );
 80031ae:	4f3f      	ldr	r7, [pc, #252]	; (80032ac <xTaskIncrementTick+0x12c>)
 80031b0:	2400      	movs	r4, #0
 80031b2:	e029      	b.n	8003208 <xTaskIncrementTick+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031b4:	682b      	ldr	r3, [r5, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031bc:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031c0:	f10b 0a04 	add.w	sl, fp, #4
					if( xConstTickCount < xItemValue )
 80031c4:	4296      	cmp	r6, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031c6:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 80031c8:	d365      	bcc.n	8003296 <xTaskIncrementTick+0x116>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031ca:	f7ff fb2f 	bl	800282c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031ce:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031d2:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031d6:	b10a      	cbz	r2, 80031dc <xTaskIncrementTick+0x5c>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031d8:	f7ff fb28 	bl	800282c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031dc:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2201      	movs	r2, #1
 80031e4:	4082      	lsls	r2, r0
 80031e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80031ea:	431a      	orrs	r2, r3
 80031ec:	4651      	mov	r1, sl
 80031ee:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80031f2:	603a      	str	r2, [r7, #0]
 80031f4:	f7ff faf0 	bl	80027d8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031f8:	f8d9 1000 	ldr.w	r1, [r9]
 80031fc:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8003200:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8003202:	429a      	cmp	r2, r3
 8003204:	bf28      	it	cs
 8003206:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003208:	682b      	ldr	r3, [r5, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1d1      	bne.n	80031b4 <xTaskIncrementTick+0x34>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003210:	9a01      	ldr	r2, [sp, #4]
 8003212:	f04f 33ff 	mov.w	r3, #4294967295
 8003216:	6013      	str	r3, [r2, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003218:	f8d9 3000 	ldr.w	r3, [r9]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003222:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
				xSwitchRequired = pdTRUE;
 8003226:	2b02      	cmp	r3, #2
 8003228:	bf28      	it	cs
 800322a:	2401      	movcs	r4, #1
 800322c:	e004      	b.n	8003238 <xTaskIncrementTick+0xb8>
		++uxPendedTicks;
 800322e:	4a20      	ldr	r2, [pc, #128]	; (80032b0 <xTaskIncrementTick+0x130>)
 8003230:	6813      	ldr	r3, [r2, #0]
 8003232:	3301      	adds	r3, #1
 8003234:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003236:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8003238:	4b1e      	ldr	r3, [pc, #120]	; (80032b4 <xTaskIncrementTick+0x134>)
 800323a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800323c:	2b00      	cmp	r3, #0
 800323e:	bf18      	it	ne
 8003240:	2401      	movne	r4, #1
}
 8003242:	4620      	mov	r0, r4
 8003244:	b003      	add	sp, #12
 8003246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800324a:	4d17      	ldr	r5, [pc, #92]	; (80032a8 <xTaskIncrementTick+0x128>)
 800324c:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <xTaskIncrementTick+0x138>)
 800324e:	6829      	ldr	r1, [r5, #0]
 8003250:	4a1a      	ldr	r2, [pc, #104]	; (80032bc <xTaskIncrementTick+0x13c>)
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	6028      	str	r0, [r5, #0]
 8003256:	6019      	str	r1, [r3, #0]
 8003258:	6813      	ldr	r3, [r2, #0]
 800325a:	3301      	adds	r3, #1
 800325c:	6013      	str	r3, [r2, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800325e:	682b      	ldr	r3, [r5, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	b97b      	cbnz	r3, 8003284 <xTaskIncrementTick+0x104>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003264:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <xTaskIncrementTick+0x124>)
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	461a      	mov	r2, r3
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	4613      	mov	r3, r2
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	429e      	cmp	r6, r3
 8003276:	d295      	bcs.n	80031a4 <xTaskIncrementTick+0x24>
 8003278:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80032c0 <xTaskIncrementTick+0x140>
 800327c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80032c4 <xTaskIncrementTick+0x144>
BaseType_t xSwitchRequired = pdFALSE;
 8003280:	2400      	movs	r4, #0
 8003282:	e7c9      	b.n	8003218 <xTaskIncrementTick+0x98>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003284:	682b      	ldr	r3, [r5, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003286:	4a07      	ldr	r2, [pc, #28]	; (80032a4 <xTaskIncrementTick+0x124>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003288:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800328a:	9201      	str	r2, [sp, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	4613      	mov	r3, r2
 8003294:	e783      	b.n	800319e <xTaskIncrementTick+0x1e>
						xNextTaskUnblockTime = xItemValue;
 8003296:	9b01      	ldr	r3, [sp, #4]
 8003298:	601a      	str	r2, [r3, #0]
						break;
 800329a:	e7bd      	b.n	8003218 <xTaskIncrementTick+0x98>
 800329c:	2000178c 	.word	0x2000178c
 80032a0:	200017f4 	.word	0x200017f4
 80032a4:	200017c0 	.word	0x200017c0
 80032a8:	200016f0 	.word	0x200016f0
 80032ac:	20001794 	.word	0x20001794
 80032b0:	20001788 	.word	0x20001788
 80032b4:	200017f8 	.word	0x200017f8
 80032b8:	200016f4 	.word	0x200016f4
 80032bc:	200017c4 	.word	0x200017c4
 80032c0:	200016f8 	.word	0x200016f8
 80032c4:	200016ec 	.word	0x200016ec

080032c8 <xTaskResumeAll>:
{
 80032c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	taskENTER_CRITICAL();
 80032cc:	f7ff fb12 	bl	80028f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80032d0:	4b38      	ldr	r3, [pc, #224]	; (80033b4 <xTaskResumeAll+0xec>)
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	3a01      	subs	r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d15d      	bne.n	800339a <xTaskResumeAll+0xd2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032de:	4a36      	ldr	r2, [pc, #216]	; (80033b8 <xTaskResumeAll+0xf0>)
 80032e0:	6812      	ldr	r2, [r2, #0]
 80032e2:	2a00      	cmp	r2, #0
 80032e4:	d059      	beq.n	800339a <xTaskResumeAll+0xd2>
 80032e6:	469a      	mov	sl, r3
 80032e8:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80033d4 <xTaskResumeAll+0x10c>
 80032ec:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 80033d8 <xTaskResumeAll+0x110>
					prvAddTaskToReadyList( pxTCB );
 80032f0:	4e32      	ldr	r6, [pc, #200]	; (80033bc <xTaskResumeAll+0xf4>)
 80032f2:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80033dc <xTaskResumeAll+0x114>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032f6:	4f32      	ldr	r7, [pc, #200]	; (80033c0 <xTaskResumeAll+0xf8>)
 80032f8:	e022      	b.n	8003340 <xTaskResumeAll+0x78>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80032fa:	f8db 300c 	ldr.w	r3, [fp, #12]
 80032fe:	f8d3 a00c 	ldr.w	sl, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003302:	f10a 0404 	add.w	r4, sl, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003306:	f10a 0018 	add.w	r0, sl, #24
 800330a:	f7ff fa8f 	bl	800282c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800330e:	4620      	mov	r0, r4
 8003310:	f7ff fa8c 	bl	800282c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003314:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 8003318:	6832      	ldr	r2, [r6, #0]
 800331a:	fa05 f300 	lsl.w	r3, r5, r0
 800331e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003322:	4313      	orrs	r3, r2
 8003324:	4621      	mov	r1, r4
 8003326:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800332a:	6033      	str	r3, [r6, #0]
 800332c:	f7ff fa54 	bl	80027d8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800333a:	bf28      	it	cs
 800333c:	f8c9 5000 	strcs.w	r5, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003340:	f8db 3000 	ldr.w	r3, [fp]
					prvAddTaskToReadyList( pxTCB );
 8003344:	2501      	movs	r5, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1d7      	bne.n	80032fa <xTaskResumeAll+0x32>
				if( pxTCB != NULL )
 800334a:	f1ba 0f00 	cmp.w	sl, #0
 800334e:	d007      	beq.n	8003360 <xTaskResumeAll+0x98>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003350:	4b1c      	ldr	r3, [pc, #112]	; (80033c4 <xTaskResumeAll+0xfc>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	bb32      	cbnz	r2, 80033a6 <xTaskResumeAll+0xde>
		xNextTaskUnblockTime = portMAX_DELAY;
 8003358:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <xTaskResumeAll+0x100>)
 800335a:	f04f 32ff 	mov.w	r2, #4294967295
 800335e:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003360:	4e1a      	ldr	r6, [pc, #104]	; (80033cc <xTaskResumeAll+0x104>)
 8003362:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003364:	b144      	cbz	r4, 8003378 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8003366:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003368:	f7ff ff0a 	bl	8003180 <xTaskIncrementTick>
 800336c:	b108      	cbz	r0, 8003372 <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 800336e:	f8c9 5000 	str.w	r5, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003372:	3c01      	subs	r4, #1
 8003374:	d1f8      	bne.n	8003368 <xTaskResumeAll+0xa0>
						uxPendedTicks = 0;
 8003376:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8003378:	f8d9 3000 	ldr.w	r3, [r9]
 800337c:	b16b      	cbz	r3, 800339a <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
 800337e:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <xTaskResumeAll+0x108>)
 8003380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	f3bf 8f4f 	dsb	sy
 800338a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800338e:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8003390:	f7ff fac0 	bl	8002914 <vPortExitCritical>
}
 8003394:	4620      	mov	r0, r4
 8003396:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 800339a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800339c:	f7ff faba 	bl	8002914 <vPortExitCritical>
}
 80033a0:	4620      	mov	r0, r4
 80033a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80033a6:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80033a8:	4b07      	ldr	r3, [pc, #28]	; (80033c8 <xTaskResumeAll+0x100>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80033aa:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80033ac:	68d2      	ldr	r2, [r2, #12]
 80033ae:	6852      	ldr	r2, [r2, #4]
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	e7d5      	b.n	8003360 <xTaskResumeAll+0x98>
 80033b4:	2000178c 	.word	0x2000178c
 80033b8:	20001784 	.word	0x20001784
 80033bc:	20001794 	.word	0x20001794
 80033c0:	200016ec 	.word	0x200016ec
 80033c4:	200016f0 	.word	0x200016f0
 80033c8:	200017c0 	.word	0x200017c0
 80033cc:	20001788 	.word	0x20001788
 80033d0:	e000ed04 	.word	0xe000ed04
 80033d4:	200017f8 	.word	0x200017f8
 80033d8:	200017c8 	.word	0x200017c8
 80033dc:	200016f8 	.word	0x200016f8

080033e0 <vTaskDelayUntil>:
	++uxSchedulerSuspended;
 80033e0:	4a26      	ldr	r2, [pc, #152]	; (800347c <vTaskDelayUntil+0x9c>)
	{
 80033e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	++uxSchedulerSuspended;
 80033e4:	6813      	ldr	r3, [r2, #0]
			const TickType_t xConstTickCount = xTickCount;
 80033e6:	4d26      	ldr	r5, [pc, #152]	; (8003480 <vTaskDelayUntil+0xa0>)
	++uxSchedulerSuspended;
 80033e8:	3301      	adds	r3, #1
 80033ea:	6013      	str	r3, [r2, #0]
			const TickType_t xConstTickCount = xTickCount;
 80033ec:	682c      	ldr	r4, [r5, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80033ee:	6803      	ldr	r3, [r0, #0]
			if( xConstTickCount < *pxPreviousWakeTime )
 80033f0:	429c      	cmp	r4, r3
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80033f2:	eb03 0601 	add.w	r6, r3, r1
			if( xConstTickCount < *pxPreviousWakeTime )
 80033f6:	d20f      	bcs.n	8003418 <vTaskDelayUntil+0x38>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80033f8:	42b3      	cmp	r3, r6
 80033fa:	d80f      	bhi.n	800341c <vTaskDelayUntil+0x3c>
			*pxPreviousWakeTime = xTimeToWake;
 80033fc:	6006      	str	r6, [r0, #0]
		xAlreadyYielded = xTaskResumeAll();
 80033fe:	f7ff ff63 	bl	80032c8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003402:	2800      	cmp	r0, #0
 8003404:	d132      	bne.n	800346c <vTaskDelayUntil+0x8c>
			portYIELD_WITHIN_API();
 8003406:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <vTaskDelayUntil+0xa4>)
 8003408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	f3bf 8f4f 	dsb	sy
 8003412:	f3bf 8f6f 	isb	sy
	}
 8003416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003418:	42b3      	cmp	r3, r6
 800341a:	d801      	bhi.n	8003420 <vTaskDelayUntil+0x40>
 800341c:	42b4      	cmp	r4, r6
 800341e:	d2ed      	bcs.n	80033fc <vTaskDelayUntil+0x1c>
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003420:	4f19      	ldr	r7, [pc, #100]	; (8003488 <vTaskDelayUntil+0xa8>)
const TickType_t xConstTickCount = xTickCount;
 8003422:	682d      	ldr	r5, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003424:	683b      	ldr	r3, [r7, #0]
			*pxPreviousWakeTime = xTimeToWake;
 8003426:	6006      	str	r6, [r0, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003428:	1d18      	adds	r0, r3, #4
 800342a:	f7ff f9ff 	bl	800282c <uxListRemove>
 800342e:	b940      	cbnz	r0, 8003442 <vTaskDelayUntil+0x62>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	4916      	ldr	r1, [pc, #88]	; (800348c <vTaskDelayUntil+0xac>)
 8003434:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003436:	680b      	ldr	r3, [r1, #0]
 8003438:	2201      	movs	r2, #1
 800343a:	4082      	lsls	r2, r0
 800343c:	ea23 0302 	bic.w	r3, r3, r2
 8003440:	600b      	str	r3, [r1, #0]
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003442:	1b2c      	subs	r4, r5, r4
 8003444:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003446:	683b      	ldr	r3, [r7, #0]

			if( xTimeToWake < xConstTickCount )
 8003448:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800344a:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800344c:	d80f      	bhi.n	800346e <vTaskDelayUntil+0x8e>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800344e:	4b10      	ldr	r3, [pc, #64]	; (8003490 <vTaskDelayUntil+0xb0>)
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	6839      	ldr	r1, [r7, #0]
 8003454:	3104      	adds	r1, #4
 8003456:	f7ff f9cf 	bl	80027f8 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800345a:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <vTaskDelayUntil+0xb4>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 8003460:	bf38      	it	cc
 8003462:	601c      	strcc	r4, [r3, #0]
		xAlreadyYielded = xTaskResumeAll();
 8003464:	f7ff ff30 	bl	80032c8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003468:	2800      	cmp	r0, #0
 800346a:	d0cc      	beq.n	8003406 <vTaskDelayUntil+0x26>
 800346c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800346e:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <vTaskDelayUntil+0xb8>)
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	6839      	ldr	r1, [r7, #0]
 8003474:	3104      	adds	r1, #4
 8003476:	f7ff f9bf 	bl	80027f8 <vListInsert>
 800347a:	e7c0      	b.n	80033fe <vTaskDelayUntil+0x1e>
 800347c:	2000178c 	.word	0x2000178c
 8003480:	200017f4 	.word	0x200017f4
 8003484:	e000ed04 	.word	0xe000ed04
 8003488:	200016ec 	.word	0x200016ec
 800348c:	20001794 	.word	0x20001794
 8003490:	200016f0 	.word	0x200016f0
 8003494:	200017c0 	.word	0x200017c0
 8003498:	200016f4 	.word	0x200016f4

0800349c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800349c:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <vTaskSwitchContext+0x48>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	b9db      	cbnz	r3, 80034da <vTaskSwitchContext+0x3e>
		xYieldPending = pdFALSE;
 80034a2:	4911      	ldr	r1, [pc, #68]	; (80034e8 <vTaskSwitchContext+0x4c>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80034a4:	4a11      	ldr	r2, [pc, #68]	; (80034ec <vTaskSwitchContext+0x50>)
		xYieldPending = pdFALSE;
 80034a6:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80034a8:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80034aa:	fab3 f383 	clz	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	f1c3 031f 	rsb	r3, r3, #31
 80034b4:	4a0e      	ldr	r2, [pc, #56]	; (80034f0 <vTaskSwitchContext+0x54>)
 80034b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	18d0      	adds	r0, r2, r3
 80034be:	3308      	adds	r3, #8
 80034c0:	6841      	ldr	r1, [r0, #4]
 80034c2:	6849      	ldr	r1, [r1, #4]
 80034c4:	6041      	str	r1, [r0, #4]
 80034c6:	4413      	add	r3, r2
 80034c8:	4299      	cmp	r1, r3
 80034ca:	bf08      	it	eq
 80034cc:	6849      	ldreq	r1, [r1, #4]
 80034ce:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <vTaskSwitchContext+0x58>)
 80034d0:	68ca      	ldr	r2, [r1, #12]
 80034d2:	bf08      	it	eq
 80034d4:	6041      	streq	r1, [r0, #4]
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	4770      	bx	lr
		xYieldPending = pdTRUE;
 80034da:	4b03      	ldr	r3, [pc, #12]	; (80034e8 <vTaskSwitchContext+0x4c>)
 80034dc:	2201      	movs	r2, #1
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	2000178c 	.word	0x2000178c
 80034e8:	200017f8 	.word	0x200017f8
 80034ec:	20001794 	.word	0x20001794
 80034f0:	200016f8 	.word	0x200016f8
 80034f4:	200016ec 	.word	0x200016ec

080034f8 <vTaskPlaceOnEventList>:
{
 80034f8:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034fa:	4d1c      	ldr	r5, [pc, #112]	; (800356c <vTaskPlaceOnEventList+0x74>)
 80034fc:	682b      	ldr	r3, [r5, #0]
{
 80034fe:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003500:	f103 0118 	add.w	r1, r3, #24
 8003504:	f7ff f978 	bl	80027f8 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8003508:	4b19      	ldr	r3, [pc, #100]	; (8003570 <vTaskPlaceOnEventList+0x78>)
 800350a:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800350c:	6828      	ldr	r0, [r5, #0]
 800350e:	3004      	adds	r0, #4
 8003510:	f7ff f98c 	bl	800282c <uxListRemove>
 8003514:	b940      	cbnz	r0, 8003528 <vTaskPlaceOnEventList+0x30>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003516:	682b      	ldr	r3, [r5, #0]
 8003518:	4916      	ldr	r1, [pc, #88]	; (8003574 <vTaskPlaceOnEventList+0x7c>)
 800351a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800351c:	680b      	ldr	r3, [r1, #0]
 800351e:	2201      	movs	r2, #1
 8003520:	4082      	lsls	r2, r0
 8003522:	ea23 0302 	bic.w	r3, r3, r2
 8003526:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003528:	1c63      	adds	r3, r4, #1
 800352a:	d018      	beq.n	800355e <vTaskPlaceOnEventList+0x66>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800352c:	4434      	add	r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800352e:	682b      	ldr	r3, [r5, #0]
			if( xTimeToWake < xConstTickCount )
 8003530:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003532:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003534:	d80b      	bhi.n	800354e <vTaskPlaceOnEventList+0x56>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003536:	4b10      	ldr	r3, [pc, #64]	; (8003578 <vTaskPlaceOnEventList+0x80>)
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	6829      	ldr	r1, [r5, #0]
 800353c:	3104      	adds	r1, #4
 800353e:	f7ff f95b 	bl	80027f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003542:	4b0e      	ldr	r3, [pc, #56]	; (800357c <vTaskPlaceOnEventList+0x84>)
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003548:	bf38      	it	cc
 800354a:	601c      	strcc	r4, [r3, #0]
 800354c:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800354e:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <vTaskPlaceOnEventList+0x88>)
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	6829      	ldr	r1, [r5, #0]
}
 8003554:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003558:	3104      	adds	r1, #4
 800355a:	f7ff b94d 	b.w	80027f8 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800355e:	6829      	ldr	r1, [r5, #0]
 8003560:	4808      	ldr	r0, [pc, #32]	; (8003584 <vTaskPlaceOnEventList+0x8c>)
 8003562:	3104      	adds	r1, #4
}
 8003564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003568:	f7ff b936 	b.w	80027d8 <vListInsertEnd>
 800356c:	200016ec 	.word	0x200016ec
 8003570:	200017f4 	.word	0x200017f4
 8003574:	20001794 	.word	0x20001794
 8003578:	200016f0 	.word	0x200016f0
 800357c:	200017c0 	.word	0x200017c0
 8003580:	200016f4 	.word	0x200016f4
 8003584:	200017e0 	.word	0x200017e0

08003588 <xTaskRemoveFromEventList>:
{
 8003588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800358a:	68c3      	ldr	r3, [r0, #12]
 800358c:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800358e:	f104 0518 	add.w	r5, r4, #24
 8003592:	4628      	mov	r0, r5
 8003594:	f7ff f94a 	bl	800282c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003598:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <xTaskRemoveFromEventList+0x5c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	b9eb      	cbnz	r3, 80035da <xTaskRemoveFromEventList+0x52>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800359e:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 80035a0:	4d11      	ldr	r5, [pc, #68]	; (80035e8 <xTaskRemoveFromEventList+0x60>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035a2:	4630      	mov	r0, r6
 80035a4:	f7ff f942 	bl	800282c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80035a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80035aa:	682f      	ldr	r7, [r5, #0]
 80035ac:	480f      	ldr	r0, [pc, #60]	; (80035ec <xTaskRemoveFromEventList+0x64>)
 80035ae:	2301      	movs	r3, #1
 80035b0:	4093      	lsls	r3, r2
 80035b2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80035b6:	433b      	orrs	r3, r7
 80035b8:	4631      	mov	r1, r6
 80035ba:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80035be:	602b      	str	r3, [r5, #0]
 80035c0:	f7ff f90a 	bl	80027d8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035c4:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <xTaskRemoveFromEventList+0x68>)
 80035c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80035ce:	bf83      	ittte	hi
 80035d0:	4b08      	ldrhi	r3, [pc, #32]	; (80035f4 <xTaskRemoveFromEventList+0x6c>)
 80035d2:	2001      	movhi	r0, #1
 80035d4:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80035d6:	2000      	movls	r0, #0
}
 80035d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035da:	4629      	mov	r1, r5
 80035dc:	4806      	ldr	r0, [pc, #24]	; (80035f8 <xTaskRemoveFromEventList+0x70>)
 80035de:	f7ff f8fb 	bl	80027d8 <vListInsertEnd>
 80035e2:	e7ef      	b.n	80035c4 <xTaskRemoveFromEventList+0x3c>
 80035e4:	2000178c 	.word	0x2000178c
 80035e8:	20001794 	.word	0x20001794
 80035ec:	200016f8 	.word	0x200016f8
 80035f0:	200016ec 	.word	0x200016ec
 80035f4:	200017f8 	.word	0x200017f8
 80035f8:	200017c8 	.word	0x200017c8

080035fc <vTaskSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035fc:	4a03      	ldr	r2, [pc, #12]	; (800360c <vTaskSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 80035fe:	4b04      	ldr	r3, [pc, #16]	; (8003610 <vTaskSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003600:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	e880 000c 	stmia.w	r0, {r2, r3}
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	200017c4 	.word	0x200017c4
 8003610:	200017f4 	.word	0x200017f4

08003614 <xTaskCheckForTimeOut>:
{
 8003614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003616:	460d      	mov	r5, r1
 8003618:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800361a:	f7ff f96b 	bl	80028f4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 800361e:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8003620:	4912      	ldr	r1, [pc, #72]	; (800366c <xTaskCheckForTimeOut+0x58>)
			if( *pxTicksToWait == portMAX_DELAY )
 8003622:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8003624:	680a      	ldr	r2, [r1, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003626:	d01b      	beq.n	8003660 <xTaskCheckForTimeOut+0x4c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003628:	4e11      	ldr	r6, [pc, #68]	; (8003670 <xTaskCheckForTimeOut+0x5c>)
 800362a:	6827      	ldr	r7, [r4, #0]
 800362c:	6830      	ldr	r0, [r6, #0]
 800362e:	4287      	cmp	r7, r0
 8003630:	6860      	ldr	r0, [r4, #4]
 8003632:	d001      	beq.n	8003638 <xTaskCheckForTimeOut+0x24>
 8003634:	4282      	cmp	r2, r0
 8003636:	d20e      	bcs.n	8003656 <xTaskCheckForTimeOut+0x42>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003638:	1a17      	subs	r7, r2, r0
 800363a:	42bb      	cmp	r3, r7
 800363c:	d90b      	bls.n	8003656 <xTaskCheckForTimeOut+0x42>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800363e:	1a9b      	subs	r3, r3, r2
 8003640:	4403      	add	r3, r0
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003642:	6830      	ldr	r0, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003644:	680a      	ldr	r2, [r1, #0]
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8003646:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003648:	e884 0005 	stmia.w	r4, {r0, r2}
			xReturn = pdFALSE;
 800364c:	2500      	movs	r5, #0
	taskEXIT_CRITICAL();
 800364e:	f7ff f961 	bl	8002914 <vPortExitCritical>
}
 8003652:	4628      	mov	r0, r5
 8003654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8003656:	2501      	movs	r5, #1
	taskEXIT_CRITICAL();
 8003658:	f7ff f95c 	bl	8002914 <vPortExitCritical>
}
 800365c:	4628      	mov	r0, r5
 800365e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 8003660:	2500      	movs	r5, #0
	taskEXIT_CRITICAL();
 8003662:	f7ff f957 	bl	8002914 <vPortExitCritical>
}
 8003666:	4628      	mov	r0, r5
 8003668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800366a:	bf00      	nop
 800366c:	200017f4 	.word	0x200017f4
 8003670:	200017c4 	.word	0x200017c4

08003674 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003674:	4b01      	ldr	r3, [pc, #4]	; (800367c <vTaskMissedYield+0x8>)
 8003676:	2201      	movs	r2, #1
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	4770      	bx	lr
 800367c:	200017f8 	.word	0x200017f8

08003680 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <xTaskGetSchedulerState+0x18>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	b133      	cbz	r3, 8003694 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003686:	4b05      	ldr	r3, [pc, #20]	; (800369c <xTaskGetSchedulerState+0x1c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800368c:	bf0c      	ite	eq
 800368e:	2002      	moveq	r0, #2
 8003690:	2000      	movne	r0, #0
 8003692:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003694:	2001      	movs	r0, #1
	}
 8003696:	4770      	bx	lr
 8003698:	200017dc 	.word	0x200017dc
 800369c:	2000178c 	.word	0x2000178c

080036a0 <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 80036a0:	2800      	cmp	r0, #0
 80036a2:	d041      	beq.n	8003728 <vTaskPriorityInherit+0x88>
	{
 80036a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80036a6:	4c21      	ldr	r4, [pc, #132]	; (800372c <vTaskPriorityInherit+0x8c>)
 80036a8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80036aa:	6822      	ldr	r2, [r4, #0]
 80036ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d212      	bcs.n	80036d8 <vTaskPriorityInherit+0x38>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80036b2:	6982      	ldr	r2, [r0, #24]
 80036b4:	2a00      	cmp	r2, #0
 80036b6:	db04      	blt.n	80036c2 <vTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036b8:	6822      	ldr	r2, [r4, #0]
 80036ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036bc:	f1c2 0207 	rsb	r2, r2, #7
 80036c0:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80036c2:	4d1b      	ldr	r5, [pc, #108]	; (8003730 <vTaskPriorityInherit+0x90>)
 80036c4:	6942      	ldr	r2, [r0, #20]
 80036c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80036ca:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d003      	beq.n	80036da <vTaskPriorityInherit+0x3a>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d6:	62c3      	str	r3, [r0, #44]	; 0x2c
 80036d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036da:	1d07      	adds	r7, r0, #4
 80036dc:	4606      	mov	r6, r0
 80036de:	4638      	mov	r0, r7
 80036e0:	f7ff f8a4 	bl	800282c <uxListRemove>
 80036e4:	b9f0      	cbnz	r0, 8003724 <vTaskPriorityInherit+0x84>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80036e6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80036e8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80036ec:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80036f0:	b9c2      	cbnz	r2, 8003724 <vTaskPriorityInherit+0x84>
 80036f2:	4a10      	ldr	r2, [pc, #64]	; (8003734 <vTaskPriorityInherit+0x94>)
 80036f4:	2001      	movs	r0, #1
 80036f6:	6811      	ldr	r1, [r2, #0]
 80036f8:	fa00 f303 	lsl.w	r3, r0, r3
 80036fc:	ea21 0303 	bic.w	r3, r1, r3
 8003700:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003702:	6823      	ldr	r3, [r4, #0]
					prvAddTaskToReadyList( pxTCB );
 8003704:	6814      	ldr	r4, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003706:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003708:	62f0      	str	r0, [r6, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800370a:	2301      	movs	r3, #1
 800370c:	4083      	lsls	r3, r0
 800370e:	4323      	orrs	r3, r4
 8003710:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003714:	4639      	mov	r1, r7
 8003716:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800371a:	6013      	str	r3, [r2, #0]
	}
 800371c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
					prvAddTaskToReadyList( pxTCB );
 8003720:	f7ff b85a 	b.w	80027d8 <vListInsertEnd>
 8003724:	4a03      	ldr	r2, [pc, #12]	; (8003734 <vTaskPriorityInherit+0x94>)
 8003726:	e7ec      	b.n	8003702 <vTaskPriorityInherit+0x62>
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	200016ec 	.word	0x200016ec
 8003730:	200016f8 	.word	0x200016f8
 8003734:	20001794 	.word	0x20001794

08003738 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003738:	4b04      	ldr	r3, [pc, #16]	; (800374c <pvTaskIncrementMutexHeldCount+0x14>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	b11a      	cbz	r2, 8003746 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800373e:	6819      	ldr	r1, [r3, #0]
 8003740:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8003742:	3201      	adds	r2, #1
 8003744:	658a      	str	r2, [r1, #88]	; 0x58
		return pxCurrentTCB;
 8003746:	6818      	ldr	r0, [r3, #0]
	}
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	200016ec 	.word	0x200016ec

08003750 <HAL_MspInit>:
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop

08003754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003754:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003756:	4a0e      	ldr	r2, [pc, #56]	; (8003790 <HAL_InitTick+0x3c>)
 8003758:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <HAL_InitTick+0x40>)
 800375a:	7812      	ldrb	r2, [r2, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
{
 800375e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003760:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003764:	fbb0 f0f2 	udiv	r0, r0, r2
 8003768:	fbb3 f0f0 	udiv	r0, r3, r0
 800376c:	f000 fe2e 	bl	80043cc <HAL_SYSTICK_Config>
 8003770:	b908      	cbnz	r0, 8003776 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003772:	2d0f      	cmp	r5, #15
 8003774:	d901      	bls.n	800377a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8003776:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003778:	bd38      	pop	{r3, r4, r5, pc}
 800377a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800377c:	4602      	mov	r2, r0
 800377e:	4629      	mov	r1, r5
 8003780:	f04f 30ff 	mov.w	r0, #4294967295
 8003784:	f000 fdde 	bl	8004344 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003788:	4b03      	ldr	r3, [pc, #12]	; (8003798 <HAL_InitTick+0x44>)
 800378a:	4620      	mov	r0, r4
 800378c:	601d      	str	r5, [r3, #0]
 800378e:	bd38      	pop	{r3, r4, r5, pc}
 8003790:	200003d0 	.word	0x200003d0
 8003794:	200003c8 	.word	0x200003c8
 8003798:	200003d4 	.word	0x200003d4

0800379c <HAL_Init>:
{
 800379c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800379e:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <HAL_Init+0x30>)
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037ae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037b6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037b8:	2003      	movs	r0, #3
 80037ba:	f000 fdb1 	bl	8004320 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80037be:	200f      	movs	r0, #15
 80037c0:	f7ff ffc8 	bl	8003754 <HAL_InitTick>
  HAL_MspInit();
 80037c4:	f7ff ffc4 	bl	8003750 <HAL_MspInit>
}
 80037c8:	2000      	movs	r0, #0
 80037ca:	bd08      	pop	{r3, pc}
 80037cc:	40023c00 	.word	0x40023c00

080037d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80037d0:	4a03      	ldr	r2, [pc, #12]	; (80037e0 <HAL_IncTick+0x10>)
 80037d2:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <HAL_IncTick+0x14>)
 80037d4:	6811      	ldr	r1, [r2, #0]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	440b      	add	r3, r1
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	20001814 	.word	0x20001814
 80037e4:	200003d0 	.word	0x200003d0

080037e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80037e8:	4b01      	ldr	r3, [pc, #4]	; (80037f0 <HAL_GetTick+0x8>)
 80037ea:	6818      	ldr	r0, [r3, #0]
}
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	20001814 	.word	0x20001814

080037f4 <HAL_ADC_MspInit>:
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop

080037f8 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037f8:	2800      	cmp	r0, #0
 80037fa:	f000 80a6 	beq.w	800394a <HAL_ADC_Init+0x152>
{
 80037fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003800:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003802:	4604      	mov	r4, r0
 8003804:	b13d      	cbz	r5, 8003816 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003806:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003808:	06db      	lsls	r3, r3, #27
 800380a:	d50c      	bpl.n	8003826 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800380c:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 800380e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8003810:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8003816:	f7ff ffed 	bl	80037f4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800381a:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800381c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 800381e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003822:	06db      	lsls	r3, r3, #27
 8003824:	d4f2      	bmi.n	800380c <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8003826:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003828:	4949      	ldr	r1, [pc, #292]	; (8003950 <HAL_ADC_Init+0x158>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800382a:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800382c:	4d49      	ldr	r5, [pc, #292]	; (8003954 <HAL_ADC_Init+0x15c>)
    ADC_STATE_CLR_SET(hadc->State,
 800382e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8003832:	f022 0202 	bic.w	r2, r2, #2
 8003836:	f042 0202 	orr.w	r2, r2, #2
 800383a:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800383c:	684a      	ldr	r2, [r1, #4]
 800383e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003842:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003844:	684a      	ldr	r2, [r1, #4]
 8003846:	6860      	ldr	r0, [r4, #4]
 8003848:	4302      	orrs	r2, r0
 800384a:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800384c:	6859      	ldr	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800384e:	6920      	ldr	r0, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003850:	f8d4 e008 	ldr.w	lr, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003854:	68e7      	ldr	r7, [r4, #12]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003856:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003858:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800385c:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800385e:	685e      	ldr	r6, [r3, #4]
 8003860:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
 8003864:	605e      	str	r6, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003866:	685e      	ldr	r6, [r3, #4]
 8003868:	f026 7640 	bic.w	r6, r6, #50331648	; 0x3000000
 800386c:	605e      	str	r6, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800386e:	6858      	ldr	r0, [r3, #4]
 8003870:	ea40 000e 	orr.w	r0, r0, lr
 8003874:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003876:	6898      	ldr	r0, [r3, #8]
 8003878:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 800387c:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800387e:	6899      	ldr	r1, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003880:	42aa      	cmp	r2, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003882:	ea41 0107 	orr.w	r1, r1, r7
 8003886:	6099      	str	r1, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003888:	d048      	beq.n	800391c <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800388a:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800388c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800388e:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8003892:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003894:	6899      	ldr	r1, [r3, #8]
 8003896:	430a      	orrs	r2, r1
 8003898:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800389a:	6899      	ldr	r1, [r3, #8]
 800389c:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80038a0:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	4302      	orrs	r2, r0
 80038a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038a8:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038aa:	7e25      	ldrb	r5, [r4, #24]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80038ac:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038b0:	f021 0102 	bic.w	r1, r1, #2
 80038b4:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 80038bc:	609a      	str	r2, [r3, #8]
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038be:	685a      	ldr	r2, [r3, #4]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80038c0:	2800      	cmp	r0, #0
 80038c2:	d134      	bne.n	800392e <HAL_ADC_Init+0x136>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038c8:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038cc:	69e5      	ldr	r5, [r4, #28]
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038ce:	f894 7030 	ldrb.w	r7, [r4, #48]	; 0x30
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038d2:	6966      	ldr	r6, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038d4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80038dc:	3d01      	subs	r5, #1
 80038de:	ea40 5005 	orr.w	r0, r0, r5, lsl #20
 80038e2:	62d8      	str	r0, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038e4:	6898      	ldr	r0, [r3, #8]
 80038e6:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 80038ea:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038ec:	6899      	ldr	r1, [r3, #8]
 80038ee:	ea41 2147 	orr.w	r1, r1, r7, lsl #9
 80038f2:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038f4:	6899      	ldr	r1, [r3, #8]
 80038f6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80038fa:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038fc:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80038fe:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003900:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8003904:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003906:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003908:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800390a:	f023 0303 	bic.w	r3, r3, #3
 800390e:	f043 0301 	orr.w	r3, r3, #1
 8003912:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8003914:	2300      	movs	r3, #0
 8003916:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800391a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003922:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800392a:	609a      	str	r2, [r3, #8]
 800392c:	e7bc      	b.n	80038a8 <HAL_ADC_Init+0xb0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800392e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003932:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003934:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800393c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	3901      	subs	r1, #1
 8003942:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003946:	605a      	str	r2, [r3, #4]
 8003948:	e7bf      	b.n	80038ca <HAL_ADC_Init+0xd2>
    return HAL_ERROR;
 800394a:	2001      	movs	r0, #1
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40012300 	.word	0x40012300
 8003954:	0f000001 	.word	0x0f000001

08003958 <HAL_ADC_Start>:
{
 8003958:	b410      	push	{r4}
  __HAL_LOCK(hadc);
 800395a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800395e:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8003960:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003962:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8003964:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003966:	d055      	beq.n	8003a14 <HAL_ADC_Start+0xbc>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003968:	6802      	ldr	r2, [r0, #0]
 800396a:	6893      	ldr	r3, [r2, #8]
  __HAL_LOCK(hadc);
 800396c:	2101      	movs	r1, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800396e:	07db      	lsls	r3, r3, #31
  __HAL_LOCK(hadc);
 8003970:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003974:	d414      	bmi.n	80039a0 <HAL_ADC_Start+0x48>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003976:	4b2a      	ldr	r3, [pc, #168]	; (8003a20 <HAL_ADC_Start+0xc8>)
 8003978:	4c2a      	ldr	r4, [pc, #168]	; (8003a24 <HAL_ADC_Start+0xcc>)
 800397a:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 800397c:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800397e:	fba4 4303 	umull	r4, r3, r4, r3
 8003982:	0c9b      	lsrs	r3, r3, #18
 8003984:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __HAL_ADC_ENABLE(hadc);
 8003988:	f041 0101 	orr.w	r1, r1, #1
 800398c:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800398e:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8003990:	9b01      	ldr	r3, [sp, #4]
 8003992:	b12b      	cbz	r3, 80039a0 <HAL_ADC_Start+0x48>
      counter--;
 8003994:	9b01      	ldr	r3, [sp, #4]
 8003996:	3b01      	subs	r3, #1
 8003998:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 800399a:	9b01      	ldr	r3, [sp, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1f9      	bne.n	8003994 <HAL_ADC_Start+0x3c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80039a0:	6893      	ldr	r3, [r2, #8]
 80039a2:	07dc      	lsls	r4, r3, #31
 80039a4:	d531      	bpl.n	8003a0a <HAL_ADC_Start+0xb2>
    ADC_STATE_CLR_SET(hadc->State,
 80039a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80039a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80039ac:	f023 0301 	bic.w	r3, r3, #1
 80039b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b4:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80039b6:	6853      	ldr	r3, [r2, #4]
 80039b8:	0559      	lsls	r1, r3, #21
 80039ba:	d505      	bpl.n	80039c8 <HAL_ADC_Start+0x70>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80039bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80039be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80039c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039c6:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039c8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80039ca:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80039ce:	bf1c      	itt	ne
 80039d0:	6c43      	ldrne	r3, [r0, #68]	; 0x44
 80039d2:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80039d6:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 80039d8:	2400      	movs	r4, #0
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80039da:	f06f 0122 	mvn.w	r1, #34	; 0x22
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80039de:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <HAL_ADC_Start+0xd0>)
    __HAL_UNLOCK(hadc);
 80039e0:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80039e4:	6011      	str	r1, [r2, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	06db      	lsls	r3, r3, #27
 80039ea:	d10b      	bne.n	8003a04 <HAL_ADC_Start+0xac>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80039ec:	6890      	ldr	r0, [r2, #8]
 80039ee:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80039f2:	d10a      	bne.n	8003a0a <HAL_ADC_Start+0xb2>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039f4:	6893      	ldr	r3, [r2, #8]
 80039f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039fa:	6093      	str	r3, [r2, #8]
}
 80039fc:	b003      	add	sp, #12
 80039fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a02:	4770      	bx	lr
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003a04:	4b09      	ldr	r3, [pc, #36]	; (8003a2c <HAL_ADC_Start+0xd4>)
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d0f0      	beq.n	80039ec <HAL_ADC_Start+0x94>
  return HAL_OK;
 8003a0a:	2000      	movs	r0, #0
}
 8003a0c:	b003      	add	sp, #12
 8003a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a12:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8003a14:	2002      	movs	r0, #2
}
 8003a16:	b003      	add	sp, #12
 8003a18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	200003c8 	.word	0x200003c8
 8003a24:	431bde83 	.word	0x431bde83
 8003a28:	40012300 	.word	0x40012300
 8003a2c:	40012000 	.word	0x40012000

08003a30 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003a30:	6803      	ldr	r3, [r0, #0]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	0552      	lsls	r2, r2, #21
 8003a36:	d502      	bpl.n	8003a3e <HAL_ADC_PollForConversion+0xe>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003a38:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003a3a:	05da      	lsls	r2, r3, #23
 8003a3c:	d440      	bmi.n	8003ac0 <HAL_ADC_PollForConversion+0x90>
{
 8003a3e:	b570      	push	{r4, r5, r6, lr}
 8003a40:	460d      	mov	r5, r1
 8003a42:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8003a44:	f7ff fed0 	bl	80037e8 <HAL_GetTick>
 8003a48:	4606      	mov	r6, r0
 8003a4a:	1c6b      	adds	r3, r5, #1
 8003a4c:	6822      	ldr	r2, [r4, #0]
 8003a4e:	d125      	bne.n	8003a9c <HAL_ADC_PollForConversion+0x6c>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a50:	6813      	ldr	r3, [r2, #0]
 8003a52:	0798      	lsls	r0, r3, #30
 8003a54:	d5fc      	bpl.n	8003a50 <HAL_ADC_PollForConversion+0x20>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003a56:	f06f 0312 	mvn.w	r3, #18
 8003a5a:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a62:	6423      	str	r3, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a64:	6893      	ldr	r3, [r2, #8]
 8003a66:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8003a6a:	d115      	bne.n	8003a98 <HAL_ADC_PollForConversion+0x68>
 8003a6c:	7e23      	ldrb	r3, [r4, #24]
 8003a6e:	b99b      	cbnz	r3, 8003a98 <HAL_ADC_PollForConversion+0x68>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a70:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a72:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8003a76:	d10c      	bne.n	8003a92 <HAL_ADC_PollForConversion+0x62>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a7e:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a80:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003a82:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8003a86:	d107      	bne.n	8003a98 <HAL_ADC_PollForConversion+0x68>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	6423      	str	r3, [r4, #64]	; 0x40
}
 8003a90:	bd70      	pop	{r4, r5, r6, pc}
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003a92:	6893      	ldr	r3, [r2, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a94:	055b      	lsls	r3, r3, #21
 8003a96:	d5ef      	bpl.n	8003a78 <HAL_ADC_PollForConversion+0x48>
  return HAL_OK;
 8003a98:	2000      	movs	r0, #0
 8003a9a:	bd70      	pop	{r4, r5, r6, pc}
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a9c:	6813      	ldr	r3, [r2, #0]
 8003a9e:	0799      	lsls	r1, r3, #30
 8003aa0:	d4d9      	bmi.n	8003a56 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003aa2:	b125      	cbz	r5, 8003aae <HAL_ADC_PollForConversion+0x7e>
 8003aa4:	f7ff fea0 	bl	80037e8 <HAL_GetTick>
 8003aa8:	1b80      	subs	r0, r0, r6
 8003aaa:	4285      	cmp	r5, r0
 8003aac:	d2cd      	bcs.n	8003a4a <HAL_ADC_PollForConversion+0x1a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003aae:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8003ab0:	2200      	movs	r2, #0
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ab2:	f043 0304 	orr.w	r3, r3, #4
 8003ab6:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8003ab8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8003abc:	2003      	movs	r0, #3
 8003abe:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ac0:	6c03      	ldr	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8003ac2:	2200      	movs	r2, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ac4:	f043 0320 	orr.w	r3, r3, #32
 8003ac8:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8003aca:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8003ace:	2001      	movs	r0, #1
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop

08003ad4 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8003ad4:	6803      	ldr	r3, [r0, #0]
 8003ad6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop

08003adc <HAL_ADC_ConfigChannel>:
{
 8003adc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8003ade:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003ae2:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8003ae4:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003ae6:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8003ae8:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003aea:	d055      	beq.n	8003b98 <HAL_ADC_ConfigChannel+0xbc>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003aec:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8003aee:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003af0:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8003af2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003af6:	d828      	bhi.n	8003b4a <HAL_ADC_ConfigChannel+0x6e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003af8:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003afa:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003afc:	6922      	ldr	r2, [r4, #16]
 8003afe:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8003b02:	2607      	movs	r6, #7
 8003b04:	40be      	lsls	r6, r7
 8003b06:	ea22 0206 	bic.w	r2, r2, r6
 8003b0a:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b0c:	6922      	ldr	r2, [r4, #16]
 8003b0e:	40bb      	lsls	r3, r7
 8003b10:	4313      	orrs	r3, r2
 8003b12:	6123      	str	r3, [r4, #16]
  if (sConfig->Rank < 7U)
 8003b14:	684b      	ldr	r3, [r1, #4]
 8003b16:	2b06      	cmp	r3, #6
 8003b18:	462e      	mov	r6, r5
 8003b1a:	d82b      	bhi.n	8003b74 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b1c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b20:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003b22:	3b05      	subs	r3, #5
 8003b24:	211f      	movs	r1, #31
 8003b26:	4099      	lsls	r1, r3
 8003b28:	ea22 0201 	bic.w	r2, r2, r1
 8003b2c:	6362      	str	r2, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b2e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003b30:	fa06 f303 	lsl.w	r3, r6, r3
 8003b34:	4313      	orrs	r3, r2
 8003b36:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b38:	4b3e      	ldr	r3, [pc, #248]	; (8003c34 <HAL_ADC_ConfigChannel+0x158>)
 8003b3a:	429c      	cmp	r4, r3
 8003b3c:	d03e      	beq.n	8003bbc <HAL_ADC_ConfigChannel+0xe0>
  __HAL_UNLOCK(hadc);
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003b44:	4618      	mov	r0, r3
}
 8003b46:	b003      	add	sp, #12
 8003b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b4a:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b4c:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b4e:	68e7      	ldr	r7, [r4, #12]
 8003b50:	b2ae      	uxth	r6, r5
 8003b52:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8003b56:	3a1e      	subs	r2, #30
 8003b58:	f04f 0e07 	mov.w	lr, #7
 8003b5c:	fa0e fe02 	lsl.w	lr, lr, r2
 8003b60:	ea27 070e 	bic.w	r7, r7, lr
 8003b64:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b66:	68e7      	ldr	r7, [r4, #12]
 8003b68:	4093      	lsls	r3, r2
 8003b6a:	433b      	orrs	r3, r7
 8003b6c:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8003b6e:	684b      	ldr	r3, [r1, #4]
 8003b70:	2b06      	cmp	r3, #6
 8003b72:	d9d3      	bls.n	8003b1c <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8003b74:	2b0c      	cmp	r3, #12
 8003b76:	d812      	bhi.n	8003b9e <HAL_ADC_ConfigChannel+0xc2>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b7c:	f1a3 0123 	sub.w	r1, r3, #35	; 0x23
 8003b80:	221f      	movs	r2, #31
 8003b82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b84:	408a      	lsls	r2, r1
 8003b86:	ea23 0302 	bic.w	r3, r3, r2
 8003b8a:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b8e:	fa06 f101 	lsl.w	r1, r6, r1
 8003b92:	4319      	orrs	r1, r3
 8003b94:	6321      	str	r1, [r4, #48]	; 0x30
 8003b96:	e7cf      	b.n	8003b38 <HAL_ADC_ConfigChannel+0x5c>
  __HAL_LOCK(hadc);
 8003b98:	2002      	movs	r0, #2
}
 8003b9a:	b003      	add	sp, #12
 8003b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b9e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003ba2:	3a41      	subs	r2, #65	; 0x41
 8003ba4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003ba6:	211f      	movs	r1, #31
 8003ba8:	4091      	lsls	r1, r2
 8003baa:	ea23 0301 	bic.w	r3, r3, r1
 8003bae:	62e3      	str	r3, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003bb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003bb2:	fa06 f102 	lsl.w	r1, r6, r2
 8003bb6:	4319      	orrs	r1, r3
 8003bb8:	62e1      	str	r1, [r4, #44]	; 0x2c
 8003bba:	e7bd      	b.n	8003b38 <HAL_ADC_ConfigChannel+0x5c>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003bbc:	2d12      	cmp	r5, #18
 8003bbe:	d02b      	beq.n	8003c18 <HAL_ADC_ConfigChannel+0x13c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003bc0:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <HAL_ADC_ConfigChannel+0x15c>)
 8003bc2:	429d      	cmp	r5, r3
 8003bc4:	d00b      	beq.n	8003bde <HAL_ADC_ConfigChannel+0x102>
 8003bc6:	2d11      	cmp	r5, #17
 8003bc8:	d1b9      	bne.n	8003b3e <HAL_ADC_ConfigChannel+0x62>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003bca:	4b1c      	ldr	r3, [pc, #112]	; (8003c3c <HAL_ADC_ConfigChannel+0x160>)
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8003bd2:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003bda:	605a      	str	r2, [r3, #4]
 8003bdc:	e7af      	b.n	8003b3e <HAL_ADC_ConfigChannel+0x62>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003bde:	4a17      	ldr	r2, [pc, #92]	; (8003c3c <HAL_ADC_ConfigChannel+0x160>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003be0:	4b17      	ldr	r3, [pc, #92]	; (8003c40 <HAL_ADC_ConfigChannel+0x164>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003be2:	6851      	ldr	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003be4:	4c17      	ldr	r4, [pc, #92]	; (8003c44 <HAL_ADC_ConfigChannel+0x168>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003be6:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 8003bea:	6051      	str	r1, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003bec:	6851      	ldr	r1, [r2, #4]
 8003bee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8003bf2:	6051      	str	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	fba4 2303 	umull	r2, r3, r4, r3
 8003bfa:	0c9b      	lsrs	r3, r3, #18
 8003bfc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003c04:	9b01      	ldr	r3, [sp, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d099      	beq.n	8003b3e <HAL_ADC_ConfigChannel+0x62>
        counter--;
 8003c0a:	9b01      	ldr	r3, [sp, #4]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003c10:	9b01      	ldr	r3, [sp, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f9      	bne.n	8003c0a <HAL_ADC_ConfigChannel+0x12e>
 8003c16:	e792      	b.n	8003b3e <HAL_ADC_ConfigChannel+0x62>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003c18:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 8003c1c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003c20:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c24:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 8003c28:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003c2c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
 8003c30:	e785      	b.n	8003b3e <HAL_ADC_ConfigChannel+0x62>
 8003c32:	bf00      	nop
 8003c34:	40012000 	.word	0x40012000
 8003c38:	10000012 	.word	0x10000012
 8003c3c:	40012300 	.word	0x40012300
 8003c40:	200003c8 	.word	0x200003c8
 8003c44:	431bde83 	.word	0x431bde83

08003c48 <HAL_CAN_MspInit>:
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop

08003c4c <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003c4c:	2800      	cmp	r0, #0
 8003c4e:	d07c      	beq.n	8003d4a <HAL_CAN_Init+0xfe>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003c50:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8003c54:	b570      	push	{r4, r5, r6, lr}
 8003c56:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d073      	beq.n	8003d44 <HAL_CAN_Init+0xf8>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c5c:	6822      	ldr	r2, [r4, #0]
 8003c5e:	6813      	ldr	r3, [r2, #0]
 8003c60:	f023 0302 	bic.w	r3, r3, #2
 8003c64:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c66:	f7ff fdbf 	bl	80037e8 <HAL_GetTick>
 8003c6a:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c6c:	e004      	b.n	8003c78 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c6e:	f7ff fdbb 	bl	80037e8 <HAL_GetTick>
 8003c72:	1b40      	subs	r0, r0, r5
 8003c74:	280a      	cmp	r0, #10
 8003c76:	d85c      	bhi.n	8003d32 <HAL_CAN_Init+0xe6>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c78:	6823      	ldr	r3, [r4, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	0791      	lsls	r1, r2, #30
 8003c7e:	d4f6      	bmi.n	8003c6e <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c88:	f7ff fdae 	bl	80037e8 <HAL_GetTick>
 8003c8c:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c8e:	e004      	b.n	8003c9a <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c90:	f7ff fdaa 	bl	80037e8 <HAL_GetTick>
 8003c94:	1b40      	subs	r0, r0, r5
 8003c96:	280a      	cmp	r0, #10
 8003c98:	d84b      	bhi.n	8003d32 <HAL_CAN_Init+0xe6>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c9a:	6823      	ldr	r3, [r4, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	07d2      	lsls	r2, r2, #31
 8003ca0:	d5f6      	bpl.n	8003c90 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003ca2:	7e22      	ldrb	r2, [r4, #24]
 8003ca4:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	bf0c      	ite	eq
 8003caa:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003cae:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8003cb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003cb4:	7e62      	ldrb	r2, [r4, #25]
 8003cb6:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	bf0c      	ite	eq
 8003cbc:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003cc0:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8003cc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003cc6:	7ea2      	ldrb	r2, [r4, #26]
 8003cc8:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	bf0c      	ite	eq
 8003cce:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003cd2:	f022 0220 	bicne.w	r2, r2, #32
 8003cd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003cd8:	7ee2      	ldrb	r2, [r4, #27]
 8003cda:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	bf0c      	ite	eq
 8003ce0:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ce4:	f042 0210 	orrne.w	r2, r2, #16
 8003ce8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003cea:	7f22      	ldrb	r2, [r4, #28]
 8003cec:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	bf0c      	ite	eq
 8003cf2:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003cf6:	f022 0208 	bicne.w	r2, r2, #8
 8003cfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003cfc:	7f62      	ldrb	r2, [r4, #29]
 8003cfe:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	bf0c      	ite	eq
 8003d04:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d08:	f022 0204 	bicne.w	r2, r2, #4
 8003d0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003d0e:	68a2      	ldr	r2, [r4, #8]
 8003d10:	68e6      	ldr	r6, [r4, #12]
 8003d12:	6925      	ldr	r5, [r4, #16]
 8003d14:	6960      	ldr	r0, [r4, #20]
 8003d16:	6861      	ldr	r1, [r4, #4]
 8003d18:	4332      	orrs	r2, r6
 8003d1a:	432a      	orrs	r2, r5
 8003d1c:	4302      	orrs	r2, r0
 8003d1e:	3901      	subs	r1, #1
 8003d20:	430a      	orrs	r2, r1

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003d22:	2501      	movs	r5, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d24:	2100      	movs	r1, #0
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003d26:	61da      	str	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 8003d28:	4608      	mov	r0, r1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d2a:	6261      	str	r1, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8003d2c:	f884 5020 	strb.w	r5, [r4, #32]
  return HAL_OK;
 8003d30:	bd70      	pop	{r4, r5, r6, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d34:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d3a:	6263      	str	r3, [r4, #36]	; 0x24
      return HAL_ERROR;
 8003d3c:	2001      	movs	r0, #1
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d3e:	f884 2020 	strb.w	r2, [r4, #32]
      return HAL_ERROR;
 8003d42:	bd70      	pop	{r4, r5, r6, pc}
    HAL_CAN_MspInit(hcan);
 8003d44:	f7ff ff80 	bl	8003c48 <HAL_CAN_MspInit>
 8003d48:	e788      	b.n	8003c5c <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop

08003d50 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d50:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8003d54:	3b01      	subs	r3, #1
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d905      	bls.n	8003d66 <HAL_CAN_ConfigFilter+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d5a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d60:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8003d62:	2001      	movs	r0, #1
 8003d64:	4770      	bx	lr
  CAN_TypeDef *can_ip = hcan->Instance;
 8003d66:	6803      	ldr	r3, [r0, #0]
    if (hcan->Instance == CAN3)
 8003d68:	4a45      	ldr	r2, [pc, #276]	; (8003e80 <HAL_CAN_ConfigFilter+0x130>)
 8003d6a:	4293      	cmp	r3, r2
{
 8003d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (hcan->Instance == CAN3)
 8003d70:	d07e      	beq.n	8003e70 <HAL_CAN_ConfigFilter+0x120>
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003d72:	4b44      	ldr	r3, [pc, #272]	; (8003e84 <HAL_CAN_ConfigFilter+0x134>)
 8003d74:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003d78:	f042 0201 	orr.w	r2, r2, #1
 8003d7c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003d80:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003d84:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8003d88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003d8c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003d90:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8003d92:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003d96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003d9a:	6948      	ldr	r0, [r1, #20]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003d9c:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003da0:	69ce      	ldr	r6, [r1, #28]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003da2:	2501      	movs	r5, #1
 8003da4:	f000 021f 	and.w	r2, r0, #31
 8003da8:	fa05 f202 	lsl.w	r2, r5, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003dac:	43d5      	mvns	r5, r2
 8003dae:	402c      	ands	r4, r5
 8003db0:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003db4:	b3b6      	cbz	r6, 8003e24 <HAL_CAN_ConfigFilter+0xd4>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003db6:	2e01      	cmp	r6, #1
 8003db8:	d115      	bne.n	8003de6 <HAL_CAN_ConfigFilter+0x96>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003dba:	f8d3 620c 	ldr.w	r6, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003dbe:	680f      	ldr	r7, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003dc0:	f8b1 c004 	ldrh.w	ip, [r1, #4]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003dc4:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8003dc8:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003dcc:	ea42 0006 	orr.w	r0, r2, r6
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003dd0:	688e      	ldr	r6, [r1, #8]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003dd2:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003dd6:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003dda:	ea4e 4606 	orr.w	r6, lr, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003dde:	f8c4 7240 	str.w	r7, [r4, #576]	; 0x240
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003de2:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003de6:	6988      	ldr	r0, [r1, #24]
 8003de8:	bba0      	cbnz	r0, 8003e54 <HAL_CAN_ConfigFilter+0x104>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003dea:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8003dee:	4028      	ands	r0, r5
 8003df0:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003df4:	6908      	ldr	r0, [r1, #16]
 8003df6:	bba8      	cbnz	r0, 8003e64 <HAL_CAN_ConfigFilter+0x114>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003df8:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8003dfc:	4028      	ands	r0, r5
 8003dfe:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003e02:	6a09      	ldr	r1, [r1, #32]
 8003e04:	2901      	cmp	r1, #1
 8003e06:	d104      	bne.n	8003e12 <HAL_CAN_ConfigFilter+0xc2>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003e08:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e12:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003e16:	f022 0201 	bic.w	r2, r2, #1
 8003e1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 8003e1e:	2000      	movs	r0, #0
 8003e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003e24:	f8d3 720c 	ldr.w	r7, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e28:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e2a:	f8b1 e004 	ldrh.w	lr, [r1, #4]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003e2e:	880c      	ldrh	r4, [r1, #0]
 8003e30:	eb03 08c0 	add.w	r8, r3, r0, lsl #3
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003e34:	ea05 0007 	and.w	r0, r5, r7
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e38:	688f      	ldr	r7, [r1, #8]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003e3a:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003e3e:	6988      	ldr	r0, [r1, #24]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e40:	ea4e 4606 	orr.w	r6, lr, r6, lsl #16
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e44:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e48:	f8c8 6240 	str.w	r6, [r8, #576]	; 0x240
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e4c:	f8c8 4244 	str.w	r4, [r8, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003e50:	2800      	cmp	r0, #0
 8003e52:	d0ca      	beq.n	8003dea <HAL_CAN_ConfigFilter+0x9a>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003e54:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8003e58:	4310      	orrs	r0, r2
 8003e5a:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003e5e:	6908      	ldr	r0, [r1, #16]
 8003e60:	2800      	cmp	r0, #0
 8003e62:	d0c9      	beq.n	8003df8 <HAL_CAN_ConfigFilter+0xa8>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003e64:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8003e68:	4310      	orrs	r0, r2
 8003e6a:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
 8003e6e:	e7c8      	b.n	8003e02 <HAL_CAN_ConfigFilter+0xb2>
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e70:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003e74:	f042 0201 	orr.w	r2, r2, #1
 8003e78:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8003e7c:	e78d      	b.n	8003d9a <HAL_CAN_ConfigFilter+0x4a>
 8003e7e:	bf00      	nop
 8003e80:	40006c00 	.word	0x40006c00
 8003e84:	40006400 	.word	0x40006400

08003e88 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003e88:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003e8a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d005      	beq.n	8003e9e <HAL_CAN_Start+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003e92:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003e94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e98:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8003e9a:	2001      	movs	r0, #1
  }
}
 8003e9c:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e9e:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ea6:	6813      	ldr	r3, [r2, #0]
 8003ea8:	f023 0301 	bic.w	r3, r3, #1
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8003eb0:	f7ff fc9a 	bl	80037e8 <HAL_GetTick>
 8003eb4:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003eb6:	e004      	b.n	8003ec2 <HAL_CAN_Start+0x3a>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003eb8:	f7ff fc96 	bl	80037e8 <HAL_GetTick>
 8003ebc:	1b40      	subs	r0, r0, r5
 8003ebe:	280a      	cmp	r0, #10
 8003ec0:	d807      	bhi.n	8003ed2 <HAL_CAN_Start+0x4a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f013 0301 	ands.w	r3, r3, #1
 8003eca:	d1f5      	bne.n	8003eb8 <HAL_CAN_Start+0x30>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ecc:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 8003ece:	4618      	mov	r0, r3
 8003ed0:	bd38      	pop	{r3, r4, r5, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ed2:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8003ed4:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eda:	6263      	str	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 8003edc:	2001      	movs	r0, #1
        hcan->State = HAL_CAN_STATE_ERROR;
 8003ede:	f884 2020 	strb.w	r2, [r4, #32]
        return HAL_ERROR;
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}

08003ee4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003ee4:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ee6:	f890 4020 	ldrb.w	r4, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003eea:	6805      	ldr	r5, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003eec:	3c01      	subs	r4, #1
 8003eee:	2c01      	cmp	r4, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003ef0:	68ae      	ldr	r6, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8003ef2:	d906      	bls.n	8003f02 <HAL_CAN_AddTxMessage+0x1e>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ef4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003ef6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003efa:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8003efc:	2001      	movs	r0, #1
  }
}
 8003efe:	bcf0      	pop	{r4, r5, r6, r7}
 8003f00:	4770      	bx	lr
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003f02:	f016 5fe0 	tst.w	r6, #469762048	; 0x1c000000
 8003f06:	d02e      	beq.n	8003f66 <HAL_CAN_AddTxMessage+0x82>
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003f08:	f3c6 6601 	ubfx	r6, r6, #24, #2
      if (transmitmailbox > 2U)
 8003f0c:	2e03      	cmp	r6, #3
 8003f0e:	d031      	beq.n	8003f74 <HAL_CAN_AddTxMessage+0x90>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003f10:	2001      	movs	r0, #1
 8003f12:	40b0      	lsls	r0, r6
 8003f14:	6018      	str	r0, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8003f16:	688b      	ldr	r3, [r1, #8]
 8003f18:	bb93      	cbnz	r3, 8003f80 <HAL_CAN_AddTxMessage+0x9c>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f1a:	680c      	ldr	r4, [r1, #0]
 8003f1c:	68c8      	ldr	r0, [r1, #12]
 8003f1e:	f106 0318 	add.w	r3, r6, #24
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	ea40 5044 	orr.w	r0, r0, r4, lsl #21
 8003f28:	50e8      	str	r0, [r5, r3]
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003f2a:	7d08      	ldrb	r0, [r1, #20]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003f2c:	6909      	ldr	r1, [r1, #16]
 8003f2e:	0136      	lsls	r6, r6, #4
 8003f30:	19ab      	adds	r3, r5, r6
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003f32:	2801      	cmp	r0, #1
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003f34:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003f38:	d105      	bne.n	8003f46 <HAL_CAN_AddTxMessage+0x62>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003f3a:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 8003f3e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003f42:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003f46:	4435      	add	r5, r6
 8003f48:	6851      	ldr	r1, [r2, #4]
 8003f4a:	f8c5 118c 	str.w	r1, [r5, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003f4e:	6812      	ldr	r2, [r2, #0]
 8003f50:	f8c5 2188 	str.w	r2, [r5, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003f54:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8003f58:	f042 0201 	orr.w	r2, r2, #1
      return HAL_OK;
 8003f5c:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003f5e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
 8003f62:	bcf0      	pop	{r4, r5, r6, r7}
 8003f64:	4770      	bx	lr
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f66:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f6c:	6243      	str	r3, [r0, #36]	; 0x24
}
 8003f6e:	bcf0      	pop	{r4, r5, r6, r7}
      return HAL_ERROR;
 8003f70:	2001      	movs	r0, #1
}
 8003f72:	4770      	bx	lr
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003f74:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f7a:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	e7be      	b.n	8003efe <HAL_CAN_AddTxMessage+0x1a>
                                                           pHeader->IDE |
 8003f80:	68cf      	ldr	r7, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f82:	684c      	ldr	r4, [r1, #4]
 8003f84:	f106 0018 	add.w	r0, r6, #24
                                                           pHeader->IDE |
 8003f88:	433b      	orrs	r3, r7
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f8a:	0100      	lsls	r0, r0, #4
                                                           pHeader->IDE |
 8003f8c:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f90:	502b      	str	r3, [r5, r0]
 8003f92:	e7ca      	b.n	8003f2a <HAL_CAN_AddTxMessage+0x46>

08003f94 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f98:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f9c:	3c01      	subs	r4, #1
 8003f9e:	2c01      	cmp	r4, #1
 8003fa0:	d906      	bls.n	8003fb0 <HAL_CAN_GetRxMessage+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003fa2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fa8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8003faa:	2001      	movs	r0, #1
  }
}
 8003fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003fb0:	6805      	ldr	r5, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003fb2:	2900      	cmp	r1, #0
 8003fb4:	d05a      	beq.n	800406c <HAL_CAN_GetRxMessage+0xd8>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003fb6:	692c      	ldr	r4, [r5, #16]
 8003fb8:	07a4      	lsls	r4, r4, #30
 8003fba:	d05a      	beq.n	8004072 <HAL_CAN_GetRxMessage+0xde>
 8003fbc:	010c      	lsls	r4, r1, #4
 8003fbe:	192e      	adds	r6, r5, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003fc0:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 8003fc4:	f007 0704 	and.w	r7, r7, #4
 8003fc8:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003fca:	2f00      	cmp	r7, #0
 8003fcc:	d15f      	bne.n	800408e <HAL_CAN_GetRxMessage+0xfa>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003fce:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 8003fd2:	0d7f      	lsrs	r7, r7, #21
 8003fd4:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8003fd6:	f8d6 c1b0 	ldr.w	ip, [r6, #432]	; 0x1b0
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003fda:	f8d6 e1b4 	ldr.w	lr, [r6, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003fde:	f8d6 71b4 	ldr.w	r7, [r6, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003fe2:	f8d6 61b4 	ldr.w	r6, [r6, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003fe6:	4425      	add	r5, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8003fe8:	f3cc 0c40 	ubfx	ip, ip, #1, #1
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003fec:	f8d5 81b8 	ldr.w	r8, [r5, #440]	; 0x1b8
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8003ff0:	f8c2 c00c 	str.w	ip, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003ff4:	f00e 050f 	and.w	r5, lr, #15
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003ff8:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003ffc:	0c36      	lsrs	r6, r6, #16
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003ffe:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004000:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004002:	6156      	str	r6, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004004:	f883 8000 	strb.w	r8, [r3]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004008:	6802      	ldr	r2, [r0, #0]
 800400a:	4422      	add	r2, r4
 800400c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8004010:	0a12      	lsrs	r2, r2, #8
 8004012:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004014:	6802      	ldr	r2, [r0, #0]
 8004016:	4422      	add	r2, r4
 8004018:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800401c:	0c12      	lsrs	r2, r2, #16
 800401e:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004020:	6802      	ldr	r2, [r0, #0]
 8004022:	4422      	add	r2, r4
 8004024:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8004028:	0e12      	lsrs	r2, r2, #24
 800402a:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800402c:	6802      	ldr	r2, [r0, #0]
 800402e:	4422      	add	r2, r4
 8004030:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004034:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004036:	6802      	ldr	r2, [r0, #0]
 8004038:	4422      	add	r2, r4
 800403a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800403e:	0a12      	lsrs	r2, r2, #8
 8004040:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004042:	6802      	ldr	r2, [r0, #0]
 8004044:	4422      	add	r2, r4
 8004046:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800404a:	0c12      	lsrs	r2, r2, #16
 800404c:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800404e:	6802      	ldr	r2, [r0, #0]
 8004050:	4414      	add	r4, r2
 8004052:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8004056:	0e12      	lsrs	r2, r2, #24
 8004058:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800405a:	6802      	ldr	r2, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800405c:	b981      	cbnz	r1, 8004080 <HAL_CAN_GetRxMessage+0xec>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800405e:	68d3      	ldr	r3, [r2, #12]
 8004060:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8004064:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004066:	60d3      	str	r3, [r2, #12]
 8004068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800406c:	68ec      	ldr	r4, [r5, #12]
 800406e:	07a6      	lsls	r6, r4, #30
 8004070:	d1a4      	bne.n	8003fbc <HAL_CAN_GetRxMessage+0x28>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004072:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004074:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004078:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 800407a:	2001      	movs	r0, #1
 800407c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004080:	6913      	ldr	r3, [r2, #16]
 8004082:	f043 0320 	orr.w	r3, r3, #32
 8004086:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 8004088:	2000      	movs	r0, #0
 800408a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800408e:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 8004092:	08ff      	lsrs	r7, r7, #3
 8004094:	6057      	str	r7, [r2, #4]
 8004096:	e79e      	b.n	8003fd6 <HAL_CAN_GetRxMessage+0x42>

08004098 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8004098:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800409c:	3b01      	subs	r3, #1
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d905      	bls.n	80040ae <HAL_CAN_ActivateNotification+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80040a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040a8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80040aa:	2001      	movs	r0, #1
  }
}
 80040ac:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80040ae:	6802      	ldr	r2, [r0, #0]
 80040b0:	6953      	ldr	r3, [r2, #20]
 80040b2:	4319      	orrs	r1, r3
 80040b4:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 80040b6:	2000      	movs	r0, #0
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop

080040bc <HAL_CAN_RxFifo0FullCallback>:
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop

080040c0 <HAL_CAN_RxFifo1FullCallback>:
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop

080040c4 <HAL_CAN_SleepCallback>:
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop

080040c8 <HAL_CAN_WakeUpFromRxMsgCallback>:
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop

080040cc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80040cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80040d0:	6803      	ldr	r3, [r0, #0]
 80040d2:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80040d4:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80040d8:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80040da:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80040de:	f8d3 9010 	ldr.w	r9, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80040e2:	f8d3 a018 	ldr.w	sl, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80040e6:	f014 0501 	ands.w	r5, r4, #1
{
 80040ea:	4606      	mov	r6, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80040ec:	d025      	beq.n	800413a <HAL_CAN_IRQHandler+0x6e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80040ee:	f017 0501 	ands.w	r5, r7, #1
 80040f2:	f040 809f 	bne.w	8004234 <HAL_CAN_IRQHandler+0x168>
 80040f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80040fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80040fe:	05f8      	lsls	r0, r7, #23
 8004100:	d50d      	bpl.n	800411e <HAL_CAN_IRQHandler+0x52>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004102:	6833      	ldr	r3, [r6, #0]
 8004104:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004108:	6098      	str	r0, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800410a:	05bb      	lsls	r3, r7, #22
 800410c:	f100 80ca 	bmi.w	80042a4 <HAL_CAN_IRQHandler+0x1d8>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004110:	0578      	lsls	r0, r7, #21
 8004112:	f100 80da 	bmi.w	80042ca <HAL_CAN_IRQHandler+0x1fe>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004116:	053b      	lsls	r3, r7, #20
 8004118:	f140 80eb 	bpl.w	80042f2 <HAL_CAN_IRQHandler+0x226>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800411c:	460d      	mov	r5, r1
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800411e:	03f8      	lsls	r0, r7, #15
 8004120:	d50b      	bpl.n	800413a <HAL_CAN_IRQHandler+0x6e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004122:	6833      	ldr	r3, [r6, #0]
 8004124:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004128:	03b9      	lsls	r1, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800412a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800412c:	f100 80b6 	bmi.w	800429c <HAL_CAN_IRQHandler+0x1d0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004130:	037a      	lsls	r2, r7, #13
 8004132:	f140 80cc 	bpl.w	80042ce <HAL_CAN_IRQHandler+0x202>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004136:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800413a:	0727      	lsls	r7, r4, #28
 800413c:	d502      	bpl.n	8004144 <HAL_CAN_IRQHandler+0x78>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800413e:	f01b 0f10 	tst.w	fp, #16
 8004142:	d171      	bne.n	8004228 <HAL_CAN_IRQHandler+0x15c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004144:	0760      	lsls	r0, r4, #29
 8004146:	d503      	bpl.n	8004150 <HAL_CAN_IRQHandler+0x84>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004148:	f01b 0f08 	tst.w	fp, #8
 800414c:	f040 8082 	bne.w	8004254 <HAL_CAN_IRQHandler+0x188>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004150:	07a1      	lsls	r1, r4, #30
 8004152:	d504      	bpl.n	800415e <HAL_CAN_IRQHandler+0x92>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004154:	6833      	ldr	r3, [r6, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	079a      	lsls	r2, r3, #30
 800415a:	f040 8090 	bne.w	800427e <HAL_CAN_IRQHandler+0x1b2>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800415e:	0663      	lsls	r3, r4, #25
 8004160:	d502      	bpl.n	8004168 <HAL_CAN_IRQHandler+0x9c>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004162:	f019 0f10 	tst.w	r9, #16
 8004166:	d159      	bne.n	800421c <HAL_CAN_IRQHandler+0x150>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004168:	06a7      	lsls	r7, r4, #26
 800416a:	d503      	bpl.n	8004174 <HAL_CAN_IRQHandler+0xa8>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800416c:	f019 0f08 	tst.w	r9, #8
 8004170:	f040 8089 	bne.w	8004286 <HAL_CAN_IRQHandler+0x1ba>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004174:	06e0      	lsls	r0, r4, #27
 8004176:	d504      	bpl.n	8004182 <HAL_CAN_IRQHandler+0xb6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004178:	6833      	ldr	r3, [r6, #0]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	0799      	lsls	r1, r3, #30
 800417e:	f040 8089 	bne.w	8004294 <HAL_CAN_IRQHandler+0x1c8>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004182:	03a2      	lsls	r2, r4, #14
 8004184:	d502      	bpl.n	800418c <HAL_CAN_IRQHandler+0xc0>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004186:	f018 0f10 	tst.w	r8, #16
 800418a:	d16a      	bne.n	8004262 <HAL_CAN_IRQHandler+0x196>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800418c:	03e3      	lsls	r3, r4, #15
 800418e:	d502      	bpl.n	8004196 <HAL_CAN_IRQHandler+0xca>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004190:	f018 0f08 	tst.w	r8, #8
 8004194:	d16c      	bne.n	8004270 <HAL_CAN_IRQHandler+0x1a4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004196:	0427      	lsls	r7, r4, #16
 8004198:	d505      	bpl.n	80041a6 <HAL_CAN_IRQHandler+0xda>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800419a:	f018 0f04 	tst.w	r8, #4
 800419e:	d10b      	bne.n	80041b8 <HAL_CAN_IRQHandler+0xec>
 80041a0:	6833      	ldr	r3, [r6, #0]
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80041a2:	2204      	movs	r2, #4
 80041a4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80041a6:	b12d      	cbz	r5, 80041b4 <HAL_CAN_IRQHandler+0xe8>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80041a8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80041aa:	431d      	orrs	r5, r3
 80041ac:	6275      	str	r5, [r6, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80041ae:	4630      	mov	r0, r6
 80041b0:	f7fd fb46 	bl	8001840 <HAL_CAN_ErrorCallback>
 80041b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80041b8:	05e0      	lsls	r0, r4, #23
 80041ba:	d504      	bpl.n	80041c6 <HAL_CAN_IRQHandler+0xfa>
 80041bc:	f01a 0f01 	tst.w	sl, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 80041c0:	bf18      	it	ne
 80041c2:	f045 0501 	orrne.w	r5, r5, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80041c6:	05a1      	lsls	r1, r4, #22
 80041c8:	d504      	bpl.n	80041d4 <HAL_CAN_IRQHandler+0x108>
 80041ca:	f01a 0f02 	tst.w	sl, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 80041ce:	bf18      	it	ne
 80041d0:	f045 0502 	orrne.w	r5, r5, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80041d4:	0562      	lsls	r2, r4, #21
 80041d6:	d504      	bpl.n	80041e2 <HAL_CAN_IRQHandler+0x116>
 80041d8:	f01a 0f04 	tst.w	sl, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 80041dc:	bf18      	it	ne
 80041de:	f045 0504 	orrne.w	r5, r5, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80041e2:	0523      	lsls	r3, r4, #20
 80041e4:	d5dc      	bpl.n	80041a0 <HAL_CAN_IRQHandler+0xd4>
 80041e6:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 80041ea:	d0d9      	beq.n	80041a0 <HAL_CAN_IRQHandler+0xd4>
        switch (esrflags & CAN_ESR_LEC)
 80041ec:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 80041f0:	f000 808d 	beq.w	800430e <HAL_CAN_IRQHandler+0x242>
 80041f4:	d970      	bls.n	80042d8 <HAL_CAN_IRQHandler+0x20c>
 80041f6:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 80041fa:	f000 8085 	beq.w	8004308 <HAL_CAN_IRQHandler+0x23c>
 80041fe:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 8004202:	f000 8087 	beq.w	8004314 <HAL_CAN_IRQHandler+0x248>
 8004206:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800420a:	d101      	bne.n	8004210 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_BR;
 800420c:	f045 0540 	orr.w	r5, r5, #64	; 0x40
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004210:	6833      	ldr	r3, [r6, #0]
 8004212:	699a      	ldr	r2, [r3, #24]
 8004214:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004218:	619a      	str	r2, [r3, #24]
 800421a:	e7c2      	b.n	80041a2 <HAL_CAN_IRQHandler+0xd6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800421c:	6833      	ldr	r3, [r6, #0]
 800421e:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004220:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004224:	611a      	str	r2, [r3, #16]
 8004226:	e79f      	b.n	8004168 <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004228:	6833      	ldr	r3, [r6, #0]
 800422a:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800422c:	f445 7500 	orr.w	r5, r5, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004230:	60da      	str	r2, [r3, #12]
 8004232:	e787      	b.n	8004144 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004234:	2201      	movs	r2, #1
 8004236:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004238:	07bb      	lsls	r3, r7, #30
 800423a:	d437      	bmi.n	80042ac <HAL_CAN_IRQHandler+0x1e0>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800423c:	077d      	lsls	r5, r7, #29
 800423e:	d43d      	bmi.n	80042bc <HAL_CAN_IRQHandler+0x1f0>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004240:	f017 0508 	ands.w	r5, r7, #8
 8004244:	d059      	beq.n	80042fa <HAL_CAN_IRQHandler+0x22e>
 8004246:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 800424a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800424e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8004252:	e754      	b.n	80040fe <HAL_CAN_IRQHandler+0x32>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004254:	6833      	ldr	r3, [r6, #0]
 8004256:	2208      	movs	r2, #8
 8004258:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800425a:	4630      	mov	r0, r6
 800425c:	f7ff ff2e 	bl	80040bc <HAL_CAN_RxFifo0FullCallback>
 8004260:	e776      	b.n	8004150 <HAL_CAN_IRQHandler+0x84>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004262:	6833      	ldr	r3, [r6, #0]
 8004264:	2210      	movs	r2, #16
 8004266:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8004268:	4630      	mov	r0, r6
 800426a:	f7ff ff2b 	bl	80040c4 <HAL_CAN_SleepCallback>
 800426e:	e78d      	b.n	800418c <HAL_CAN_IRQHandler+0xc0>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004270:	6833      	ldr	r3, [r6, #0]
 8004272:	2208      	movs	r2, #8
 8004274:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004276:	4630      	mov	r0, r6
 8004278:	f7ff ff26 	bl	80040c8 <HAL_CAN_WakeUpFromRxMsgCallback>
 800427c:	e78b      	b.n	8004196 <HAL_CAN_IRQHandler+0xca>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800427e:	4630      	mov	r0, r6
 8004280:	f7fd fb2e 	bl	80018e0 <HAL_CAN_RxFifo0MsgPendingCallback>
 8004284:	e76b      	b.n	800415e <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004286:	6833      	ldr	r3, [r6, #0]
 8004288:	2208      	movs	r2, #8
 800428a:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 800428c:	4630      	mov	r0, r6
 800428e:	f7ff ff17 	bl	80040c0 <HAL_CAN_RxFifo1FullCallback>
 8004292:	e76f      	b.n	8004174 <HAL_CAN_IRQHandler+0xa8>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004294:	4630      	mov	r0, r6
 8004296:	f7fd fb5b 	bl	8001950 <HAL_CAN_RxFifo1MsgPendingCallback>
 800429a:	e772      	b.n	8004182 <HAL_CAN_IRQHandler+0xb6>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800429c:	4630      	mov	r0, r6
 800429e:	f7fd fa97 	bl	80017d0 <HAL_CAN_TxMailbox2CompleteCallback>
 80042a2:	e74a      	b.n	800413a <HAL_CAN_IRQHandler+0x6e>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80042a4:	4630      	mov	r0, r6
 80042a6:	f7fd fa5b 	bl	8001760 <HAL_CAN_TxMailbox1CompleteCallback>
 80042aa:	e738      	b.n	800411e <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80042ac:	f7fd fa20 	bl	80016f0 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80042b0:	2500      	movs	r5, #0
 80042b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80042b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042ba:	e720      	b.n	80040fe <HAL_CAN_IRQHandler+0x32>
 80042bc:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 80042c0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80042c4:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80042c8:	e719      	b.n	80040fe <HAL_CAN_IRQHandler+0x32>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80042ca:	4615      	mov	r5, r2
 80042cc:	e727      	b.n	800411e <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80042ce:	033b      	lsls	r3, r7, #12
 80042d0:	d50b      	bpl.n	80042ea <HAL_CAN_IRQHandler+0x21e>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80042d2:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
 80042d6:	e730      	b.n	800413a <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 80042d8:	f1ba 0f10 	cmp.w	sl, #16
 80042dc:	d01d      	beq.n	800431a <HAL_CAN_IRQHandler+0x24e>
 80042de:	f1ba 0f20 	cmp.w	sl, #32
 80042e2:	d195      	bne.n	8004210 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_FOR;
 80042e4:	f045 0510 	orr.w	r5, r5, #16
            break;
 80042e8:	e792      	b.n	8004210 <HAL_CAN_IRQHandler+0x144>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80042ea:	4630      	mov	r0, r6
 80042ec:	f7fd fa8c 	bl	8001808 <HAL_CAN_TxMailbox2AbortCallback>
 80042f0:	e723      	b.n	800413a <HAL_CAN_IRQHandler+0x6e>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80042f2:	4630      	mov	r0, r6
 80042f4:	f7fd fa50 	bl	8001798 <HAL_CAN_TxMailbox1AbortCallback>
 80042f8:	e711      	b.n	800411e <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80042fa:	f7fd fa15 	bl	8001728 <HAL_CAN_TxMailbox0AbortCallback>
 80042fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004302:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004306:	e6fa      	b.n	80040fe <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 8004308:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            break;
 800430c:	e780      	b.n	8004210 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_ACK;
 800430e:	f045 0520 	orr.w	r5, r5, #32
            break;
 8004312:	e77d      	b.n	8004210 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004314:	f445 7580 	orr.w	r5, r5, #256	; 0x100
            break;
 8004318:	e77a      	b.n	8004210 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_STF;
 800431a:	f045 0508 	orr.w	r5, r5, #8
            break;
 800431e:	e777      	b.n	8004210 <HAL_CAN_IRQHandler+0x144>

08004320 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004320:	4a07      	ldr	r2, [pc, #28]	; (8004340 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004322:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004324:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8004328:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800432a:	0200      	lsls	r0, r0, #8
 800432c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004330:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8004334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8004338:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800433a:	60d3      	str	r3, [r2, #12]
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	e000ed00 	.word	0xe000ed00

08004344 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004344:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004346:	b470      	push	{r4, r5, r6}
 8004348:	68dc      	ldr	r4, [r3, #12]
 800434a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800434e:	f1c4 0607 	rsb	r6, r4, #7
 8004352:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004354:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004358:	bf28      	it	cs
 800435a:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800435c:	2b06      	cmp	r3, #6
 800435e:	d917      	bls.n	8004390 <HAL_NVIC_SetPriority+0x4c>
 8004360:	3c03      	subs	r4, #3
 8004362:	2501      	movs	r5, #1
 8004364:	40a5      	lsls	r5, r4
 8004366:	3d01      	subs	r5, #1
 8004368:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800436a:	2301      	movs	r3, #1
 800436c:	40b3      	lsls	r3, r6
 800436e:	3b01      	subs	r3, #1
 8004370:	4019      	ands	r1, r3
 8004372:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8004374:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004376:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800437a:	db0c      	blt.n	8004396 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800437c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004380:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004384:	0109      	lsls	r1, r1, #4
 8004386:	b2c9      	uxtb	r1, r1
 8004388:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800438c:	bc70      	pop	{r4, r5, r6}
 800438e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004390:	2200      	movs	r2, #0
 8004392:	4614      	mov	r4, r2
 8004394:	e7e9      	b.n	800436a <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004396:	4b05      	ldr	r3, [pc, #20]	; (80043ac <HAL_NVIC_SetPriority+0x68>)
 8004398:	f000 000f 	and.w	r0, r0, #15
 800439c:	0109      	lsls	r1, r1, #4
 800439e:	4403      	add	r3, r0
 80043a0:	b2c9      	uxtb	r1, r1
 80043a2:	7619      	strb	r1, [r3, #24]
 80043a4:	bc70      	pop	{r4, r5, r6}
 80043a6:	4770      	bx	lr
 80043a8:	e000ed00 	.word	0xe000ed00
 80043ac:	e000ecfc 	.word	0xe000ecfc

080043b0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80043b0:	2800      	cmp	r0, #0
 80043b2:	db07      	blt.n	80043c4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043b4:	f000 011f 	and.w	r1, r0, #31
 80043b8:	2301      	movs	r3, #1
 80043ba:	0940      	lsrs	r0, r0, #5
 80043bc:	4a02      	ldr	r2, [pc, #8]	; (80043c8 <HAL_NVIC_EnableIRQ+0x18>)
 80043be:	408b      	lsls	r3, r1
 80043c0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	e000e100 	.word	0xe000e100

080043cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043cc:	3801      	subs	r0, #1
 80043ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80043d2:	d20e      	bcs.n	80043f2 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043d4:	4b08      	ldr	r3, [pc, #32]	; (80043f8 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043d6:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043d8:	4c08      	ldr	r4, [pc, #32]	; (80043fc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043da:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043dc:	20f0      	movs	r0, #240	; 0xf0
 80043de:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043e2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043e4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043e6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043ea:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80043ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043f0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80043f2:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	e000e010 	.word	0xe000e010
 80043fc:	e000ed00 	.word	0xe000ed00

08004400 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004402:	b083      	sub	sp, #12
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004404:	2300      	movs	r3, #0
  uint32_t timeout = SystemCoreClock / 9600U;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004406:	6d87      	ldr	r7, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 8004408:	9301      	str	r3, [sp, #4]

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800440a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800440c:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800440e:	4962      	ldr	r1, [pc, #392]	; (8004598 <HAL_DMA_IRQHandler+0x198>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004410:	2208      	movs	r2, #8
 8004412:	409a      	lsls	r2, r3
 8004414:	4215      	tst	r5, r2
{
 8004416:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8004418:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800441a:	d003      	beq.n	8004424 <HAL_DMA_IRQHandler+0x24>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800441c:	6801      	ldr	r1, [r0, #0]
 800441e:	6808      	ldr	r0, [r1, #0]
 8004420:	0740      	lsls	r0, r0, #29
 8004422:	d476      	bmi.n	8004512 <HAL_DMA_IRQHandler+0x112>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004424:	2201      	movs	r2, #1
 8004426:	409a      	lsls	r2, r3
 8004428:	4215      	tst	r5, r2
 800442a:	d003      	beq.n	8004434 <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800442c:	6821      	ldr	r1, [r4, #0]
 800442e:	6949      	ldr	r1, [r1, #20]
 8004430:	0608      	lsls	r0, r1, #24
 8004432:	d468      	bmi.n	8004506 <HAL_DMA_IRQHandler+0x106>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004434:	2204      	movs	r2, #4
 8004436:	409a      	lsls	r2, r3
 8004438:	4215      	tst	r5, r2
 800443a:	d003      	beq.n	8004444 <HAL_DMA_IRQHandler+0x44>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800443c:	6821      	ldr	r1, [r4, #0]
 800443e:	6809      	ldr	r1, [r1, #0]
 8004440:	0789      	lsls	r1, r1, #30
 8004442:	d45a      	bmi.n	80044fa <HAL_DMA_IRQHandler+0xfa>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004444:	2210      	movs	r2, #16
 8004446:	409a      	lsls	r2, r3
 8004448:	4215      	tst	r5, r2
 800444a:	d003      	beq.n	8004454 <HAL_DMA_IRQHandler+0x54>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800444c:	6821      	ldr	r1, [r4, #0]
 800444e:	6808      	ldr	r0, [r1, #0]
 8004450:	0700      	lsls	r0, r0, #28
 8004452:	d43f      	bmi.n	80044d4 <HAL_DMA_IRQHandler+0xd4>
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004454:	2220      	movs	r2, #32
 8004456:	409a      	lsls	r2, r3
 8004458:	4215      	tst	r5, r2
 800445a:	d003      	beq.n	8004464 <HAL_DMA_IRQHandler+0x64>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800445c:	6821      	ldr	r1, [r4, #0]
 800445e:	6808      	ldr	r0, [r1, #0]
 8004460:	06c0      	lsls	r0, r0, #27
 8004462:	d425      	bmi.n	80044b0 <HAL_DMA_IRQHandler+0xb0>
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004464:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004466:	b30b      	cbz	r3, 80044ac <HAL_DMA_IRQHandler+0xac>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004468:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800446a:	07da      	lsls	r2, r3, #31
 800446c:	d51a      	bpl.n	80044a4 <HAL_DMA_IRQHandler+0xa4>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800446e:	2305      	movs	r3, #5

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004470:	6821      	ldr	r1, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8004472:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8004476:	680b      	ldr	r3, [r1, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004478:	4a48      	ldr	r2, [pc, #288]	; (800459c <HAL_DMA_IRQHandler+0x19c>)
      __HAL_DMA_DISABLE(hdma);
 800447a:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800447e:	fba2 0206 	umull	r0, r2, r2, r6
      __HAL_DMA_DISABLE(hdma);
 8004482:	600b      	str	r3, [r1, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004484:	0a92      	lsrs	r2, r2, #10
 8004486:	e002      	b.n	800448e <HAL_DMA_IRQHandler+0x8e>
        if (++count > timeout)
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004488:	680b      	ldr	r3, [r1, #0]
 800448a:	07db      	lsls	r3, r3, #31
 800448c:	d504      	bpl.n	8004498 <HAL_DMA_IRQHandler+0x98>
        if (++count > timeout)
 800448e:	9b01      	ldr	r3, [sp, #4]
 8004490:	3301      	adds	r3, #1
 8004492:	429a      	cmp	r2, r3
 8004494:	9301      	str	r3, [sp, #4]
 8004496:	d2f7      	bcs.n	8004488 <HAL_DMA_IRQHandler+0x88>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004498:	2200      	movs	r2, #0

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800449a:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 800449c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80044a0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80044a4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80044a6:	b10b      	cbz	r3, 80044ac <HAL_DMA_IRQHandler+0xac>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044a8:	4620      	mov	r0, r4
 80044aa:	4798      	blx	r3
    }
  }
}
 80044ac:	b003      	add	sp, #12
 80044ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80044b0:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044b2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80044b6:	2a05      	cmp	r2, #5
 80044b8:	d03b      	beq.n	8004532 <HAL_DMA_IRQHandler+0x132>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044ba:	680b      	ldr	r3, [r1, #0]
 80044bc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044c0:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044c2:	d054      	beq.n	800456e <HAL_DMA_IRQHandler+0x16e>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044c4:	0319      	lsls	r1, r3, #12
 80044c6:	d55f      	bpl.n	8004588 <HAL_DMA_IRQHandler+0x188>
        if(hdma->XferCpltCallback != NULL)
 80044c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0ca      	beq.n	8004464 <HAL_DMA_IRQHandler+0x64>
          hdma->XferCpltCallback(hdma);
 80044ce:	4620      	mov	r0, r4
 80044d0:	4798      	blx	r3
 80044d2:	e7c7      	b.n	8004464 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80044d4:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044d6:	680a      	ldr	r2, [r1, #0]
 80044d8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044dc:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044de:	d122      	bne.n	8004526 <HAL_DMA_IRQHandler+0x126>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044e0:	05d2      	lsls	r2, r2, #23
 80044e2:	d403      	bmi.n	80044ec <HAL_DMA_IRQHandler+0xec>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044e4:	680a      	ldr	r2, [r1, #0]
 80044e6:	f022 0208 	bic.w	r2, r2, #8
 80044ea:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80044ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80044ee:	2a00      	cmp	r2, #0
 80044f0:	d0b0      	beq.n	8004454 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 80044f2:	4620      	mov	r0, r4
 80044f4:	4790      	blx	r2
 80044f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80044f8:	e7ac      	b.n	8004454 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80044fa:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80044fc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80044fe:	f042 0204 	orr.w	r2, r2, #4
 8004502:	6562      	str	r2, [r4, #84]	; 0x54
 8004504:	e79e      	b.n	8004444 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004506:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004508:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800450a:	f042 0202 	orr.w	r2, r2, #2
 800450e:	6562      	str	r2, [r4, #84]	; 0x54
 8004510:	e790      	b.n	8004434 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004512:	6808      	ldr	r0, [r1, #0]
 8004514:	f020 0004 	bic.w	r0, r0, #4
 8004518:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800451a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800451c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	6562      	str	r2, [r4, #84]	; 0x54
 8004524:	e77e      	b.n	8004424 <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004526:	0311      	lsls	r1, r2, #12
 8004528:	d5e0      	bpl.n	80044ec <HAL_DMA_IRQHandler+0xec>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800452a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800452c:	2a00      	cmp	r2, #0
 800452e:	d1e0      	bne.n	80044f2 <HAL_DMA_IRQHandler+0xf2>
 8004530:	e790      	b.n	8004454 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004532:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004534:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004536:	f022 0216 	bic.w	r2, r2, #22
 800453a:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800453c:	694a      	ldr	r2, [r1, #20]
 800453e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004542:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004544:	b320      	cbz	r0, 8004590 <HAL_DMA_IRQHandler+0x190>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004546:	680a      	ldr	r2, [r1, #0]
 8004548:	f022 0208 	bic.w	r2, r2, #8
 800454c:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800454e:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 8004550:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8004556:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 8004558:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800455a:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 800455c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8004560:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8004564:	2900      	cmp	r1, #0
 8004566:	d0a1      	beq.n	80044ac <HAL_DMA_IRQHandler+0xac>
          hdma->XferAbortCallback(hdma);
 8004568:	4620      	mov	r0, r4
 800456a:	4788      	blx	r1
 800456c:	e79e      	b.n	80044ac <HAL_DMA_IRQHandler+0xac>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800456e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8004572:	d1a9      	bne.n	80044c8 <HAL_DMA_IRQHandler+0xc8>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004574:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8004576:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004578:	f022 0210 	bic.w	r2, r2, #16
 800457c:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 800457e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8004582:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8004586:	e79f      	b.n	80044c8 <HAL_DMA_IRQHandler+0xc8>
          if(hdma->XferM1CpltCallback != NULL)
 8004588:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800458a:	2b00      	cmp	r3, #0
 800458c:	d19f      	bne.n	80044ce <HAL_DMA_IRQHandler+0xce>
 800458e:	e769      	b.n	8004464 <HAL_DMA_IRQHandler+0x64>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004590:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004592:	2a00      	cmp	r2, #0
 8004594:	d1d7      	bne.n	8004546 <HAL_DMA_IRQHandler+0x146>
 8004596:	e7da      	b.n	800454e <HAL_DMA_IRQHandler+0x14e>
 8004598:	200003c8 	.word	0x200003c8
 800459c:	1b4e81b5 	.word	0x1b4e81b5

080045a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a4:	f8d1 c000 	ldr.w	ip, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045a8:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 80047a8 <HAL_GPIO_Init+0x208>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045ac:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 80047ac <HAL_GPIO_Init+0x20c>
{
 80045b0:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045b2:	2500      	movs	r5, #0
 80045b4:	e003      	b.n	80045be <HAL_GPIO_Init+0x1e>
 80045b6:	3501      	adds	r5, #1
 80045b8:	2d10      	cmp	r5, #16
 80045ba:	f000 8093 	beq.w	80046e4 <HAL_GPIO_Init+0x144>
    ioposition = 0x01U << position;
 80045be:	2301      	movs	r3, #1
 80045c0:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045c2:	ea03 020c 	and.w	r2, r3, ip
    if(iocurrent == ioposition)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d1f5      	bne.n	80045b6 <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045ca:	684e      	ldr	r6, [r1, #4]
 80045cc:	f026 0a10 	bic.w	sl, r6, #16
 80045d0:	f1ba 0f02 	cmp.w	sl, #2
 80045d4:	f000 8089 	beq.w	80046ea <HAL_GPIO_Init+0x14a>
 80045d8:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045dc:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 80045de:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045e2:	fa04 f409 	lsl.w	r4, r4, r9
 80045e6:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045e8:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045ec:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045f0:	fa07 f709 	lsl.w	r7, r7, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045f4:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045f8:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045fc:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8004600:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004602:	f240 8098 	bls.w	8004736 <HAL_GPIO_Init+0x196>
      temp = GPIOx->PUPDR;
 8004606:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004608:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800460a:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800460c:	fa03 f309 	lsl.w	r3, r3, r9
 8004610:	4323      	orrs	r3, r4
      GPIOx->PUPDR = temp;
 8004612:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004614:	00f3      	lsls	r3, r6, #3
 8004616:	d5ce      	bpl.n	80045b6 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004618:	f04f 0900 	mov.w	r9, #0
 800461c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004620:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8004624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004628:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 800462c:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
 8004630:	f025 0303 	bic.w	r3, r5, #3
 8004634:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004638:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 800463c:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8004640:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004642:	f005 0403 	and.w	r4, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004646:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004648:	f8d3 a008 	ldr.w	sl, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800464c:	00a4      	lsls	r4, r4, #2
 800464e:	270f      	movs	r7, #15
 8004650:	40a7      	lsls	r7, r4
 8004652:	ea2a 0a07 	bic.w	sl, sl, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004656:	4f4e      	ldr	r7, [pc, #312]	; (8004790 <HAL_GPIO_Init+0x1f0>)
 8004658:	42b8      	cmp	r0, r7
 800465a:	d01a      	beq.n	8004692 <HAL_GPIO_Init+0xf2>
 800465c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8004660:	42b8      	cmp	r0, r7
 8004662:	d07b      	beq.n	800475c <HAL_GPIO_Init+0x1bc>
 8004664:	4f4b      	ldr	r7, [pc, #300]	; (8004794 <HAL_GPIO_Init+0x1f4>)
 8004666:	42b8      	cmp	r0, r7
 8004668:	d07d      	beq.n	8004766 <HAL_GPIO_Init+0x1c6>
 800466a:	4f4b      	ldr	r7, [pc, #300]	; (8004798 <HAL_GPIO_Init+0x1f8>)
 800466c:	42b8      	cmp	r0, r7
 800466e:	d07f      	beq.n	8004770 <HAL_GPIO_Init+0x1d0>
 8004670:	4f4a      	ldr	r7, [pc, #296]	; (800479c <HAL_GPIO_Init+0x1fc>)
 8004672:	42b8      	cmp	r0, r7
 8004674:	f000 8081 	beq.w	800477a <HAL_GPIO_Init+0x1da>
 8004678:	4f49      	ldr	r7, [pc, #292]	; (80047a0 <HAL_GPIO_Init+0x200>)
 800467a:	42b8      	cmp	r0, r7
 800467c:	f000 8082 	beq.w	8004784 <HAL_GPIO_Init+0x1e4>
 8004680:	4f48      	ldr	r7, [pc, #288]	; (80047a4 <HAL_GPIO_Init+0x204>)
 8004682:	42b8      	cmp	r0, r7
 8004684:	bf0c      	ite	eq
 8004686:	f04f 0906 	moveq.w	r9, #6
 800468a:	f04f 0907 	movne.w	r9, #7
 800468e:	fa09 f904 	lsl.w	r9, r9, r4
 8004692:	ea4a 0709 	orr.w	r7, sl, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004696:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 8004698:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 800469c:	43d4      	mvns	r4, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800469e:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 80046a0:	bf54      	ite	pl
 80046a2:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80046a4:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 80046a6:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 80046aa:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046ae:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 80046b0:	bf54      	ite	pl
 80046b2:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80046b4:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 80046b6:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046ba:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046be:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 80046c0:	bf54      	ite	pl
 80046c2:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80046c4:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 80046c6:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 80046ca:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046ce:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046d0:	f105 0501 	add.w	r5, r5, #1
        temp &= ~((uint32_t)iocurrent);
 80046d4:	bf54      	ite	pl
 80046d6:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80046d8:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046da:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 80046dc:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046e0:	f47f af6d 	bne.w	80045be <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 80046e4:	b003      	add	sp, #12
 80046e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3U];
 80046ea:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 80046ee:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046f2:	f005 0707 	and.w	r7, r5, #7
        temp = GPIOx->AFR[position >> 3U];
 80046f6:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046fa:	00bf      	lsls	r7, r7, #2
 80046fc:	f04f 0b0f 	mov.w	fp, #15
 8004700:	fa0b fb07 	lsl.w	fp, fp, r7
 8004704:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004708:	690c      	ldr	r4, [r1, #16]
 800470a:	40bc      	lsls	r4, r7
 800470c:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8004710:	f8c9 4020 	str.w	r4, [r9, #32]
 8004714:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004718:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 800471a:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800471e:	fa04 f409 	lsl.w	r4, r4, r9
 8004722:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004724:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004728:	ea04 0a0a 	and.w	sl, r4, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800472c:	fa07 f709 	lsl.w	r7, r7, r9
 8004730:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->MODER = temp;
 8004734:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8004736:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004738:	ea07 0a04 	and.w	sl, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800473c:	68cf      	ldr	r7, [r1, #12]
 800473e:	fa07 f709 	lsl.w	r7, r7, r9
 8004742:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8004746:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004748:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800474c:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004750:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004754:	40af      	lsls	r7, r5
 8004756:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 8004758:	6047      	str	r7, [r0, #4]
 800475a:	e754      	b.n	8004606 <HAL_GPIO_Init+0x66>
 800475c:	f04f 0901 	mov.w	r9, #1
 8004760:	fa09 f904 	lsl.w	r9, r9, r4
 8004764:	e795      	b.n	8004692 <HAL_GPIO_Init+0xf2>
 8004766:	f04f 0902 	mov.w	r9, #2
 800476a:	fa09 f904 	lsl.w	r9, r9, r4
 800476e:	e790      	b.n	8004692 <HAL_GPIO_Init+0xf2>
 8004770:	f04f 0903 	mov.w	r9, #3
 8004774:	fa09 f904 	lsl.w	r9, r9, r4
 8004778:	e78b      	b.n	8004692 <HAL_GPIO_Init+0xf2>
 800477a:	f04f 0904 	mov.w	r9, #4
 800477e:	fa09 f904 	lsl.w	r9, r9, r4
 8004782:	e786      	b.n	8004692 <HAL_GPIO_Init+0xf2>
 8004784:	f04f 0905 	mov.w	r9, #5
 8004788:	fa09 f904 	lsl.w	r9, r9, r4
 800478c:	e781      	b.n	8004692 <HAL_GPIO_Init+0xf2>
 800478e:	bf00      	nop
 8004790:	40020000 	.word	0x40020000
 8004794:	40020800 	.word	0x40020800
 8004798:	40020c00 	.word	0x40020c00
 800479c:	40021000 	.word	0x40021000
 80047a0:	40021400 	.word	0x40021400
 80047a4:	40021800 	.word	0x40021800
 80047a8:	40023800 	.word	0x40023800
 80047ac:	40013c00 	.word	0x40013c00

080047b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047b0:	b902      	cbnz	r2, 80047b4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047b2:	0409      	lsls	r1, r1, #16
 80047b4:	6181      	str	r1, [r0, #24]
 80047b6:	4770      	bx	lr

080047b8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80047b8:	6943      	ldr	r3, [r0, #20]
 80047ba:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80047be:	bf08      	it	eq
 80047c0:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80047c2:	6181      	str	r1, [r0, #24]
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop

080047c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop

080047cc <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047cc:	4a04      	ldr	r2, [pc, #16]	; (80047e0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80047ce:	6951      	ldr	r1, [r2, #20]
 80047d0:	4201      	tst	r1, r0
 80047d2:	d100      	bne.n	80047d6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80047d4:	4770      	bx	lr
{
 80047d6:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047d8:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047da:	f7ff fff5 	bl	80047c8 <HAL_GPIO_EXTI_Callback>
 80047de:	bd08      	pop	{r3, pc}
 80047e0:	40013c00 	.word	0x40013c00

080047e4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047e4:	4917      	ldr	r1, [pc, #92]	; (8004844 <HAL_RCC_GetSysClockFreq+0x60>)
{
 80047e6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047e8:	688b      	ldr	r3, [r1, #8]
 80047ea:	f003 030c 	and.w	r3, r3, #12
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d01b      	beq.n	800482a <HAL_RCC_GetSysClockFreq+0x46>
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d117      	bne.n	8004826 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047f6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047f8:	684b      	ldr	r3, [r1, #4]
 80047fa:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047fe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004802:	d114      	bne.n	800482e <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004804:	6849      	ldr	r1, [r1, #4]
 8004806:	4810      	ldr	r0, [pc, #64]	; (8004848 <HAL_RCC_GetSysClockFreq+0x64>)
 8004808:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800480c:	fba1 0100 	umull	r0, r1, r1, r0
 8004810:	f7fc f9be 	bl	8000b90 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004814:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <HAL_RCC_GetSysClockFreq+0x60>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800481c:	3301      	adds	r3, #1
 800481e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004820:	fbb0 f0f3 	udiv	r0, r0, r3
 8004824:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8004826:	4808      	ldr	r0, [pc, #32]	; (8004848 <HAL_RCC_GetSysClockFreq+0x64>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004828:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800482a:	4808      	ldr	r0, [pc, #32]	; (800484c <HAL_RCC_GetSysClockFreq+0x68>)
 800482c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800482e:	684b      	ldr	r3, [r1, #4]
 8004830:	4806      	ldr	r0, [pc, #24]	; (800484c <HAL_RCC_GetSysClockFreq+0x68>)
 8004832:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004836:	fba3 0100 	umull	r0, r1, r3, r0
 800483a:	2300      	movs	r3, #0
 800483c:	f7fc f9a8 	bl	8000b90 <__aeabi_uldivmod>
 8004840:	e7e8      	b.n	8004814 <HAL_RCC_GetSysClockFreq+0x30>
 8004842:	bf00      	nop
 8004844:	40023800 	.word	0x40023800
 8004848:	00f42400 	.word	0x00f42400
 800484c:	017d7840 	.word	0x017d7840

08004850 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004850:	b160      	cbz	r0, 800486c <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004852:	4a48      	ldr	r2, [pc, #288]	; (8004974 <HAL_RCC_ClockConfig+0x124>)
 8004854:	6813      	ldr	r3, [r2, #0]
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	428b      	cmp	r3, r1
 800485c:	d208      	bcs.n	8004870 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485e:	b2cb      	uxtb	r3, r1
 8004860:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004862:	6813      	ldr	r3, [r2, #0]
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	4299      	cmp	r1, r3
 800486a:	d001      	beq.n	8004870 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 800486c:	2001      	movs	r0, #1
}
 800486e:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004870:	6803      	ldr	r3, [r0, #0]
{
 8004872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004876:	079d      	lsls	r5, r3, #30
 8004878:	d514      	bpl.n	80048a4 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800487a:	075c      	lsls	r4, r3, #29
 800487c:	d504      	bpl.n	8004888 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800487e:	4c3e      	ldr	r4, [pc, #248]	; (8004978 <HAL_RCC_ClockConfig+0x128>)
 8004880:	68a2      	ldr	r2, [r4, #8]
 8004882:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8004886:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004888:	071a      	lsls	r2, r3, #28
 800488a:	d504      	bpl.n	8004896 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800488c:	4c3a      	ldr	r4, [pc, #232]	; (8004978 <HAL_RCC_ClockConfig+0x128>)
 800488e:	68a2      	ldr	r2, [r4, #8]
 8004890:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8004894:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004896:	4c38      	ldr	r4, [pc, #224]	; (8004978 <HAL_RCC_ClockConfig+0x128>)
 8004898:	6885      	ldr	r5, [r0, #8]
 800489a:	68a2      	ldr	r2, [r4, #8]
 800489c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80048a0:	432a      	orrs	r2, r5
 80048a2:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048a4:	07df      	lsls	r7, r3, #31
 80048a6:	4604      	mov	r4, r0
 80048a8:	460d      	mov	r5, r1
 80048aa:	d522      	bpl.n	80048f2 <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ac:	6842      	ldr	r2, [r0, #4]
 80048ae:	2a01      	cmp	r2, #1
 80048b0:	d05b      	beq.n	800496a <HAL_RCC_ClockConfig+0x11a>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048b2:	1e93      	subs	r3, r2, #2
 80048b4:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b6:	4b30      	ldr	r3, [pc, #192]	; (8004978 <HAL_RCC_ClockConfig+0x128>)
 80048b8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ba:	d950      	bls.n	800495e <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048bc:	0799      	lsls	r1, r3, #30
 80048be:	d525      	bpl.n	800490c <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048c0:	4e2d      	ldr	r6, [pc, #180]	; (8004978 <HAL_RCC_ClockConfig+0x128>)
 80048c2:	68b3      	ldr	r3, [r6, #8]
 80048c4:	f023 0303 	bic.w	r3, r3, #3
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80048cc:	f7fe ff8c 	bl	80037e8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048d0:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80048d4:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d6:	e005      	b.n	80048e4 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048d8:	f7fe ff86 	bl	80037e8 <HAL_GetTick>
 80048dc:	eba0 0008 	sub.w	r0, r0, r8
 80048e0:	42b8      	cmp	r0, r7
 80048e2:	d83f      	bhi.n	8004964 <HAL_RCC_ClockConfig+0x114>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e4:	68b3      	ldr	r3, [r6, #8]
 80048e6:	6862      	ldr	r2, [r4, #4]
 80048e8:	f003 030c 	and.w	r3, r3, #12
 80048ec:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80048f0:	d1f2      	bne.n	80048d8 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048f2:	4a20      	ldr	r2, [pc, #128]	; (8004974 <HAL_RCC_ClockConfig+0x124>)
 80048f4:	6813      	ldr	r3, [r2, #0]
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	429d      	cmp	r5, r3
 80048fc:	d209      	bcs.n	8004912 <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fe:	b2eb      	uxtb	r3, r5
 8004900:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004902:	6813      	ldr	r3, [r2, #0]
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	429d      	cmp	r5, r3
 800490a:	d002      	beq.n	8004912 <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 800490c:	2001      	movs	r0, #1
 800490e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	075a      	lsls	r2, r3, #29
 8004916:	d506      	bpl.n	8004926 <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004918:	4917      	ldr	r1, [pc, #92]	; (8004978 <HAL_RCC_ClockConfig+0x128>)
 800491a:	68e0      	ldr	r0, [r4, #12]
 800491c:	688a      	ldr	r2, [r1, #8]
 800491e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004922:	4302      	orrs	r2, r0
 8004924:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004926:	071b      	lsls	r3, r3, #28
 8004928:	d507      	bpl.n	800493a <HAL_RCC_ClockConfig+0xea>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800492a:	4a13      	ldr	r2, [pc, #76]	; (8004978 <HAL_RCC_ClockConfig+0x128>)
 800492c:	6921      	ldr	r1, [r4, #16]
 800492e:	6893      	ldr	r3, [r2, #8]
 8004930:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004934:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004938:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800493a:	f7ff ff53 	bl	80047e4 <HAL_RCC_GetSysClockFreq>
 800493e:	4b0e      	ldr	r3, [pc, #56]	; (8004978 <HAL_RCC_ClockConfig+0x128>)
 8004940:	490e      	ldr	r1, [pc, #56]	; (800497c <HAL_RCC_ClockConfig+0x12c>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	4a0e      	ldr	r2, [pc, #56]	; (8004980 <HAL_RCC_ClockConfig+0x130>)
 8004946:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800494a:	5ccb      	ldrb	r3, [r1, r3]
 800494c:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 8004950:	200f      	movs	r0, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004952:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004954:	f7fe fefe 	bl	8003754 <HAL_InitTick>
  return HAL_OK;
 8004958:	2000      	movs	r0, #0
 800495a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800495e:	0198      	lsls	r0, r3, #6
 8004960:	d4ae      	bmi.n	80048c0 <HAL_RCC_ClockConfig+0x70>
 8004962:	e7d3      	b.n	800490c <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8004964:	2003      	movs	r0, #3
}
 8004966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496a:	4b03      	ldr	r3, [pc, #12]	; (8004978 <HAL_RCC_ClockConfig+0x128>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	039e      	lsls	r6, r3, #14
 8004970:	d4a6      	bmi.n	80048c0 <HAL_RCC_ClockConfig+0x70>
 8004972:	e7cb      	b.n	800490c <HAL_RCC_ClockConfig+0xbc>
 8004974:	40023c00 	.word	0x40023c00
 8004978:	40023800 	.word	0x40023800
 800497c:	08005eb8 	.word	0x08005eb8
 8004980:	200003c8 	.word	0x200003c8

08004984 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004988:	6803      	ldr	r3, [r0, #0]
 800498a:	07dd      	lsls	r5, r3, #31
{
 800498c:	b082      	sub	sp, #8
 800498e:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004990:	d52f      	bpl.n	80049f2 <HAL_RCC_OscConfig+0x6e>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004992:	49ac      	ldr	r1, [pc, #688]	; (8004c44 <HAL_RCC_OscConfig+0x2c0>)
 8004994:	688a      	ldr	r2, [r1, #8]
 8004996:	f002 020c 	and.w	r2, r2, #12
 800499a:	2a04      	cmp	r2, #4
 800499c:	f000 80eb 	beq.w	8004b76 <HAL_RCC_OscConfig+0x1f2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049a0:	688a      	ldr	r2, [r1, #8]
 80049a2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049a6:	2a08      	cmp	r2, #8
 80049a8:	f000 80e1 	beq.w	8004b6e <HAL_RCC_OscConfig+0x1ea>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ac:	6863      	ldr	r3, [r4, #4]
 80049ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b2:	f000 815b 	beq.w	8004c6c <HAL_RCC_OscConfig+0x2e8>
 80049b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049ba:	f000 80f4 	beq.w	8004ba6 <HAL_RCC_OscConfig+0x222>
 80049be:	4da1      	ldr	r5, [pc, #644]	; (8004c44 <HAL_RCC_OscConfig+0x2c0>)
 80049c0:	682a      	ldr	r2, [r5, #0]
 80049c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80049c6:	602a      	str	r2, [r5, #0]
 80049c8:	682a      	ldr	r2, [r5, #0]
 80049ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049ce:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f040 80f1 	bne.w	8004bb8 <HAL_RCC_OscConfig+0x234>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d6:	f7fe ff07 	bl	80037e8 <HAL_GetTick>
 80049da:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049dc:	e005      	b.n	80049ea <HAL_RCC_OscConfig+0x66>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049de:	f7fe ff03 	bl	80037e8 <HAL_GetTick>
 80049e2:	1b80      	subs	r0, r0, r6
 80049e4:	2864      	cmp	r0, #100	; 0x64
 80049e6:	f200 8105 	bhi.w	8004bf4 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ea:	682b      	ldr	r3, [r5, #0]
 80049ec:	039b      	lsls	r3, r3, #14
 80049ee:	d4f6      	bmi.n	80049de <HAL_RCC_OscConfig+0x5a>
 80049f0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049f2:	079f      	lsls	r7, r3, #30
 80049f4:	d528      	bpl.n	8004a48 <HAL_RCC_OscConfig+0xc4>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049f6:	4a93      	ldr	r2, [pc, #588]	; (8004c44 <HAL_RCC_OscConfig+0x2c0>)
 80049f8:	6891      	ldr	r1, [r2, #8]
 80049fa:	f011 0f0c 	tst.w	r1, #12
 80049fe:	f000 809b 	beq.w	8004b38 <HAL_RCC_OscConfig+0x1b4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a02:	6891      	ldr	r1, [r2, #8]
 8004a04:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a08:	2908      	cmp	r1, #8
 8004a0a:	f000 8091 	beq.w	8004b30 <HAL_RCC_OscConfig+0x1ac>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a0e:	68e3      	ldr	r3, [r4, #12]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 8110 	beq.w	8004c36 <HAL_RCC_OscConfig+0x2b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a16:	4b8c      	ldr	r3, [pc, #560]	; (8004c48 <HAL_RCC_OscConfig+0x2c4>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a18:	4d8a      	ldr	r5, [pc, #552]	; (8004c44 <HAL_RCC_OscConfig+0x2c0>)
        __HAL_RCC_HSI_ENABLE();
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004a1e:	f7fe fee3 	bl	80037e8 <HAL_GetTick>
 8004a22:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a24:	e005      	b.n	8004a32 <HAL_RCC_OscConfig+0xae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a26:	f7fe fedf 	bl	80037e8 <HAL_GetTick>
 8004a2a:	1b80      	subs	r0, r0, r6
 8004a2c:	2802      	cmp	r0, #2
 8004a2e:	f200 80e1 	bhi.w	8004bf4 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a32:	682b      	ldr	r3, [r5, #0]
 8004a34:	0798      	lsls	r0, r3, #30
 8004a36:	d5f6      	bpl.n	8004a26 <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a38:	682b      	ldr	r3, [r5, #0]
 8004a3a:	6922      	ldr	r2, [r4, #16]
 8004a3c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004a40:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004a44:	602b      	str	r3, [r5, #0]
 8004a46:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a48:	071a      	lsls	r2, r3, #28
 8004a4a:	d45d      	bmi.n	8004b08 <HAL_RCC_OscConfig+0x184>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a4c:	0758      	lsls	r0, r3, #29
 8004a4e:	d53b      	bpl.n	8004ac8 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a50:	4a7c      	ldr	r2, [pc, #496]	; (8004c44 <HAL_RCC_OscConfig+0x2c0>)
 8004a52:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004a54:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8004a58:	f040 8097 	bne.w	8004b8a <HAL_RCC_OscConfig+0x206>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a5c:	9301      	str	r3, [sp, #4]
 8004a5e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a64:	6413      	str	r3, [r2, #64]	; 0x40
 8004a66:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	9301      	str	r3, [sp, #4]
 8004a6e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004a70:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a72:	4d76      	ldr	r5, [pc, #472]	; (8004c4c <HAL_RCC_OscConfig+0x2c8>)
 8004a74:	682b      	ldr	r3, [r5, #0]
 8004a76:	05d9      	lsls	r1, r3, #23
 8004a78:	f140 80ac 	bpl.w	8004bd4 <HAL_RCC_OscConfig+0x250>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a7c:	68a3      	ldr	r3, [r4, #8]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	f000 80fa 	beq.w	8004c78 <HAL_RCC_OscConfig+0x2f4>
 8004a84:	2b05      	cmp	r3, #5
 8004a86:	f000 80b9 	beq.w	8004bfc <HAL_RCC_OscConfig+0x278>
 8004a8a:	4d6e      	ldr	r5, [pc, #440]	; (8004c44 <HAL_RCC_OscConfig+0x2c0>)
 8004a8c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8004a8e:	f022 0201 	bic.w	r2, r2, #1
 8004a92:	672a      	str	r2, [r5, #112]	; 0x70
 8004a94:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8004a96:	f022 0204 	bic.w	r2, r2, #4
 8004a9a:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f040 80b6 	bne.w	8004c0e <HAL_RCC_OscConfig+0x28a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa2:	f7fe fea1 	bl	80037e8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aa6:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004aaa:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aac:	e006      	b.n	8004abc <HAL_RCC_OscConfig+0x138>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aae:	f7fe fe9b 	bl	80037e8 <HAL_GetTick>
 8004ab2:	eba0 0008 	sub.w	r0, r0, r8
 8004ab6:	42b8      	cmp	r0, r7
 8004ab8:	f200 809c 	bhi.w	8004bf4 <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004abc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004abe:	0798      	lsls	r0, r3, #30
 8004ac0:	d4f5      	bmi.n	8004aae <HAL_RCC_OscConfig+0x12a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ac2:	2e00      	cmp	r6, #0
 8004ac4:	f040 80de 	bne.w	8004c84 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ac8:	69a3      	ldr	r3, [r4, #24]
 8004aca:	b1cb      	cbz	r3, 8004b00 <HAL_RCC_OscConfig+0x17c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004acc:	4d5d      	ldr	r5, [pc, #372]	; (8004c44 <HAL_RCC_OscConfig+0x2c0>)
 8004ace:	68aa      	ldr	r2, [r5, #8]
 8004ad0:	f002 020c 	and.w	r2, r2, #12
 8004ad4:	2a08      	cmp	r2, #8
 8004ad6:	d036      	beq.n	8004b46 <HAL_RCC_OscConfig+0x1c2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ad8:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ada:	4b5d      	ldr	r3, [pc, #372]	; (8004c50 <HAL_RCC_OscConfig+0x2cc>)
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ae2:	f000 80d5 	beq.w	8004c90 <HAL_RCC_OscConfig+0x30c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae6:	f7fe fe7f 	bl	80037e8 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aea:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8004aec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aee:	e004      	b.n	8004afa <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004af0:	f7fe fe7a 	bl	80037e8 <HAL_GetTick>
 8004af4:	1b40      	subs	r0, r0, r5
 8004af6:	2802      	cmp	r0, #2
 8004af8:	d87c      	bhi.n	8004bf4 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	019b      	lsls	r3, r3, #6
 8004afe:	d4f7      	bmi.n	8004af0 <HAL_RCC_OscConfig+0x16c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004b00:	2000      	movs	r0, #0
}
 8004b02:	b002      	add	sp, #8
 8004b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b08:	6963      	ldr	r3, [r4, #20]
 8004b0a:	b303      	cbz	r3, 8004b4e <HAL_RCC_OscConfig+0x1ca>
      __HAL_RCC_LSI_ENABLE();
 8004b0c:	4b51      	ldr	r3, [pc, #324]	; (8004c54 <HAL_RCC_OscConfig+0x2d0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b0e:	4d4d      	ldr	r5, [pc, #308]	; (8004c44 <HAL_RCC_OscConfig+0x2c0>)
      __HAL_RCC_LSI_ENABLE();
 8004b10:	2201      	movs	r2, #1
 8004b12:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004b14:	f7fe fe68 	bl	80037e8 <HAL_GetTick>
 8004b18:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b1a:	e004      	b.n	8004b26 <HAL_RCC_OscConfig+0x1a2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b1c:	f7fe fe64 	bl	80037e8 <HAL_GetTick>
 8004b20:	1b80      	subs	r0, r0, r6
 8004b22:	2802      	cmp	r0, #2
 8004b24:	d866      	bhi.n	8004bf4 <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b26:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004b28:	079b      	lsls	r3, r3, #30
 8004b2a:	d5f7      	bpl.n	8004b1c <HAL_RCC_OscConfig+0x198>
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	e78d      	b.n	8004a4c <HAL_RCC_OscConfig+0xc8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b30:	6852      	ldr	r2, [r2, #4]
 8004b32:	0256      	lsls	r6, r2, #9
 8004b34:	f53f af6b 	bmi.w	8004a0e <HAL_RCC_OscConfig+0x8a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b38:	4a42      	ldr	r2, [pc, #264]	; (8004c44 <HAL_RCC_OscConfig+0x2c0>)
 8004b3a:	6812      	ldr	r2, [r2, #0]
 8004b3c:	0795      	lsls	r5, r2, #30
 8004b3e:	d526      	bpl.n	8004b8e <HAL_RCC_OscConfig+0x20a>
 8004b40:	68e2      	ldr	r2, [r4, #12]
 8004b42:	2a01      	cmp	r2, #1
 8004b44:	d023      	beq.n	8004b8e <HAL_RCC_OscConfig+0x20a>
        return HAL_ERROR;
 8004b46:	2001      	movs	r0, #1
}
 8004b48:	b002      	add	sp, #8
 8004b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004b4e:	4a41      	ldr	r2, [pc, #260]	; (8004c54 <HAL_RCC_OscConfig+0x2d0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b50:	4d3c      	ldr	r5, [pc, #240]	; (8004c44 <HAL_RCC_OscConfig+0x2c0>)
      __HAL_RCC_LSI_DISABLE();
 8004b52:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004b54:	f7fe fe48 	bl	80037e8 <HAL_GetTick>
 8004b58:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b5a:	e004      	b.n	8004b66 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b5c:	f7fe fe44 	bl	80037e8 <HAL_GetTick>
 8004b60:	1b80      	subs	r0, r0, r6
 8004b62:	2802      	cmp	r0, #2
 8004b64:	d846      	bhi.n	8004bf4 <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b66:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004b68:	079f      	lsls	r7, r3, #30
 8004b6a:	d4f7      	bmi.n	8004b5c <HAL_RCC_OscConfig+0x1d8>
 8004b6c:	e7de      	b.n	8004b2c <HAL_RCC_OscConfig+0x1a8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b6e:	684a      	ldr	r2, [r1, #4]
 8004b70:	0250      	lsls	r0, r2, #9
 8004b72:	f57f af1b 	bpl.w	80049ac <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b76:	4a33      	ldr	r2, [pc, #204]	; (8004c44 <HAL_RCC_OscConfig+0x2c0>)
 8004b78:	6812      	ldr	r2, [r2, #0]
 8004b7a:	0391      	lsls	r1, r2, #14
 8004b7c:	f57f af39 	bpl.w	80049f2 <HAL_RCC_OscConfig+0x6e>
 8004b80:	6862      	ldr	r2, [r4, #4]
 8004b82:	2a00      	cmp	r2, #0
 8004b84:	f47f af35 	bne.w	80049f2 <HAL_RCC_OscConfig+0x6e>
 8004b88:	e7dd      	b.n	8004b46 <HAL_RCC_OscConfig+0x1c2>
    FlagStatus       pwrclkchanged = RESET;
 8004b8a:	2600      	movs	r6, #0
 8004b8c:	e771      	b.n	8004a72 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b8e:	492d      	ldr	r1, [pc, #180]	; (8004c44 <HAL_RCC_OscConfig+0x2c0>)
 8004b90:	6920      	ldr	r0, [r4, #16]
 8004b92:	680a      	ldr	r2, [r1, #0]
 8004b94:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004b98:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004b9c:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b9e:	071a      	lsls	r2, r3, #28
 8004ba0:	f57f af54 	bpl.w	8004a4c <HAL_RCC_OscConfig+0xc8>
 8004ba4:	e7b0      	b.n	8004b08 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ba6:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <HAL_RCC_OscConfig+0x2c0>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004bb6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004bb8:	f7fe fe16 	bl	80037e8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bbc:	4d21      	ldr	r5, [pc, #132]	; (8004c44 <HAL_RCC_OscConfig+0x2c0>)
        tickstart = HAL_GetTick();
 8004bbe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bc0:	e004      	b.n	8004bcc <HAL_RCC_OscConfig+0x248>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bc2:	f7fe fe11 	bl	80037e8 <HAL_GetTick>
 8004bc6:	1b80      	subs	r0, r0, r6
 8004bc8:	2864      	cmp	r0, #100	; 0x64
 8004bca:	d813      	bhi.n	8004bf4 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bcc:	682b      	ldr	r3, [r5, #0]
 8004bce:	039a      	lsls	r2, r3, #14
 8004bd0:	d5f7      	bpl.n	8004bc2 <HAL_RCC_OscConfig+0x23e>
 8004bd2:	e70d      	b.n	80049f0 <HAL_RCC_OscConfig+0x6c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bd4:	682b      	ldr	r3, [r5, #0]
 8004bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bda:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004bdc:	f7fe fe04 	bl	80037e8 <HAL_GetTick>
 8004be0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be2:	682b      	ldr	r3, [r5, #0]
 8004be4:	05da      	lsls	r2, r3, #23
 8004be6:	f53f af49 	bmi.w	8004a7c <HAL_RCC_OscConfig+0xf8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bea:	f7fe fdfd 	bl	80037e8 <HAL_GetTick>
 8004bee:	1bc0      	subs	r0, r0, r7
 8004bf0:	2802      	cmp	r0, #2
 8004bf2:	d9f6      	bls.n	8004be2 <HAL_RCC_OscConfig+0x25e>
            return HAL_TIMEOUT;
 8004bf4:	2003      	movs	r0, #3
}
 8004bf6:	b002      	add	sp, #8
 8004bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bfc:	4b11      	ldr	r3, [pc, #68]	; (8004c44 <HAL_RCC_OscConfig+0x2c0>)
 8004bfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c00:	f042 0204 	orr.w	r2, r2, #4
 8004c04:	671a      	str	r2, [r3, #112]	; 0x70
 8004c06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c08:	f042 0201 	orr.w	r2, r2, #1
 8004c0c:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004c0e:	f7fe fdeb 	bl	80037e8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c12:	4d0c      	ldr	r5, [pc, #48]	; (8004c44 <HAL_RCC_OscConfig+0x2c0>)
      tickstart = HAL_GetTick();
 8004c14:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c16:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1a:	e005      	b.n	8004c28 <HAL_RCC_OscConfig+0x2a4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c1c:	f7fe fde4 	bl	80037e8 <HAL_GetTick>
 8004c20:	eba0 0008 	sub.w	r0, r0, r8
 8004c24:	42b8      	cmp	r0, r7
 8004c26:	d8e5      	bhi.n	8004bf4 <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c28:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004c2a:	079b      	lsls	r3, r3, #30
 8004c2c:	d5f6      	bpl.n	8004c1c <HAL_RCC_OscConfig+0x298>
    if(pwrclkchanged == SET)
 8004c2e:	2e00      	cmp	r6, #0
 8004c30:	f43f af4a 	beq.w	8004ac8 <HAL_RCC_OscConfig+0x144>
 8004c34:	e026      	b.n	8004c84 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_HSI_DISABLE();
 8004c36:	4a04      	ldr	r2, [pc, #16]	; (8004c48 <HAL_RCC_OscConfig+0x2c4>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c38:	4d02      	ldr	r5, [pc, #8]	; (8004c44 <HAL_RCC_OscConfig+0x2c0>)
        __HAL_RCC_HSI_DISABLE();
 8004c3a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004c3c:	f7fe fdd4 	bl	80037e8 <HAL_GetTick>
 8004c40:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c42:	e00e      	b.n	8004c62 <HAL_RCC_OscConfig+0x2de>
 8004c44:	40023800 	.word	0x40023800
 8004c48:	42470000 	.word	0x42470000
 8004c4c:	40007000 	.word	0x40007000
 8004c50:	42470060 	.word	0x42470060
 8004c54:	42470e80 	.word	0x42470e80
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c58:	f7fe fdc6 	bl	80037e8 <HAL_GetTick>
 8004c5c:	1b80      	subs	r0, r0, r6
 8004c5e:	2802      	cmp	r0, #2
 8004c60:	d8c8      	bhi.n	8004bf4 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c62:	682b      	ldr	r3, [r5, #0]
 8004c64:	0799      	lsls	r1, r3, #30
 8004c66:	d4f7      	bmi.n	8004c58 <HAL_RCC_OscConfig+0x2d4>
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	e6ed      	b.n	8004a48 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c6c:	4a21      	ldr	r2, [pc, #132]	; (8004cf4 <HAL_RCC_OscConfig+0x370>)
 8004c6e:	6813      	ldr	r3, [r2, #0]
 8004c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	e79f      	b.n	8004bb8 <HAL_RCC_OscConfig+0x234>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c78:	4a1e      	ldr	r2, [pc, #120]	; (8004cf4 <HAL_RCC_OscConfig+0x370>)
 8004c7a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004c7c:	f043 0301 	orr.w	r3, r3, #1
 8004c80:	6713      	str	r3, [r2, #112]	; 0x70
 8004c82:	e7c4      	b.n	8004c0e <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c84:	4a1b      	ldr	r2, [pc, #108]	; (8004cf4 <HAL_RCC_OscConfig+0x370>)
 8004c86:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c8e:	e71b      	b.n	8004ac8 <HAL_RCC_OscConfig+0x144>
        tickstart = HAL_GetTick();
 8004c90:	f7fe fdaa 	bl	80037e8 <HAL_GetTick>
 8004c94:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c96:	e004      	b.n	8004ca2 <HAL_RCC_OscConfig+0x31e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c98:	f7fe fda6 	bl	80037e8 <HAL_GetTick>
 8004c9c:	1b80      	subs	r0, r0, r6
 8004c9e:	2802      	cmp	r0, #2
 8004ca0:	d8a8      	bhi.n	8004bf4 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca2:	682b      	ldr	r3, [r5, #0]
 8004ca4:	0199      	lsls	r1, r3, #6
 8004ca6:	d4f7      	bmi.n	8004c98 <HAL_RCC_OscConfig+0x314>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ca8:	69e3      	ldr	r3, [r4, #28]
 8004caa:	f8d4 e020 	ldr.w	lr, [r4, #32]
 8004cae:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8004cb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cb2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004cb4:	6b20      	ldr	r0, [r4, #48]	; 0x30
        __HAL_RCC_PLL_ENABLE();
 8004cb6:	4910      	ldr	r1, [pc, #64]	; (8004cf8 <HAL_RCC_OscConfig+0x374>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb8:	4c0e      	ldr	r4, [pc, #56]	; (8004cf4 <HAL_RCC_OscConfig+0x370>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cba:	ea43 030e 	orr.w	r3, r3, lr
 8004cbe:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 8004cc2:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8004cc6:	0852      	lsrs	r2, r2, #1
 8004cc8:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8004ccc:	3a01      	subs	r2, #1
 8004cce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8004cd2:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cd4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004cd6:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8004cd8:	f7fe fd86 	bl	80037e8 <HAL_GetTick>
 8004cdc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cde:	e004      	b.n	8004cea <HAL_RCC_OscConfig+0x366>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce0:	f7fe fd82 	bl	80037e8 <HAL_GetTick>
 8004ce4:	1b40      	subs	r0, r0, r5
 8004ce6:	2802      	cmp	r0, #2
 8004ce8:	d884      	bhi.n	8004bf4 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	019a      	lsls	r2, r3, #6
 8004cee:	d5f7      	bpl.n	8004ce0 <HAL_RCC_OscConfig+0x35c>
 8004cf0:	e706      	b.n	8004b00 <HAL_RCC_OscConfig+0x17c>
 8004cf2:	bf00      	nop
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	42470060 	.word	0x42470060

08004cfc <HAL_TIM_Base_MspInit>:
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop

08004d00 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d00:	2800      	cmp	r0, #0
 8004d02:	f000 8098 	beq.w	8004e36 <HAL_TIM_Base_Init+0x136>
{
 8004d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d08:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004d0c:	4604      	mov	r4, r0
 8004d0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d066      	beq.n	8004de4 <HAL_TIM_Base_Init+0xe4>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d16:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d18:	4948      	ldr	r1, [pc, #288]	; (8004e3c <HAL_TIM_Base_Init+0x13c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d20:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8004d22:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d24:	d063      	beq.n	8004dee <HAL_TIM_Base_Init+0xee>
 8004d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2a:	d072      	beq.n	8004e12 <HAL_TIM_Base_Init+0x112>
 8004d2c:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8004d30:	428b      	cmp	r3, r1
 8004d32:	d02d      	beq.n	8004d90 <HAL_TIM_Base_Init+0x90>
 8004d34:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d38:	428b      	cmp	r3, r1
 8004d3a:	d029      	beq.n	8004d90 <HAL_TIM_Base_Init+0x90>
 8004d3c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d40:	428b      	cmp	r3, r1
 8004d42:	d025      	beq.n	8004d90 <HAL_TIM_Base_Init+0x90>
 8004d44:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8004d48:	428b      	cmp	r3, r1
 8004d4a:	d021      	beq.n	8004d90 <HAL_TIM_Base_Init+0x90>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d4c:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8004d50:	428b      	cmp	r3, r1
 8004d52:	d039      	beq.n	8004dc8 <HAL_TIM_Base_Init+0xc8>
 8004d54:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d58:	428b      	cmp	r3, r1
 8004d5a:	d035      	beq.n	8004dc8 <HAL_TIM_Base_Init+0xc8>
 8004d5c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d60:	428b      	cmp	r3, r1
 8004d62:	d031      	beq.n	8004dc8 <HAL_TIM_Base_Init+0xc8>
 8004d64:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8004d68:	428b      	cmp	r3, r1
 8004d6a:	d02d      	beq.n	8004dc8 <HAL_TIM_Base_Init+0xc8>
 8004d6c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d70:	428b      	cmp	r3, r1
 8004d72:	d029      	beq.n	8004dc8 <HAL_TIM_Base_Init+0xc8>
 8004d74:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d78:	428b      	cmp	r3, r1
 8004d7a:	d025      	beq.n	8004dc8 <HAL_TIM_Base_Init+0xc8>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d7c:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d7e:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d80:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d86:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004d88:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d8a:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004d8c:	6299      	str	r1, [r3, #40]	; 0x28
 8004d8e:	e015      	b.n	8004dbc <HAL_TIM_Base_Init+0xbc>
    tmpcr1 |= Structure->CounterMode;
 8004d90:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d92:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d94:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d96:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8004d98:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d9a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004d9e:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8004da0:	f422 7240 	bic.w	r2, r2, #768	; 0x300

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004da4:	4926      	ldr	r1, [pc, #152]	; (8004e40 <HAL_TIM_Base_Init+0x140>)
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004da6:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dac:	4302      	orrs	r2, r0
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dae:	428b      	cmp	r3, r1
  TIMx->CR1 = tmpcr1;
 8004db0:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004db2:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004db4:	629d      	str	r5, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004db6:	d101      	bne.n	8004dbc <HAL_TIM_Base_Init+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004db8:	6962      	ldr	r2, [r4, #20]
 8004dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	615a      	str	r2, [r3, #20]
  return HAL_OK;
 8004dc0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004dc2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  return HAL_OK;
 8004dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dc8:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dca:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dcc:	68e5      	ldr	r5, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8004dce:	6861      	ldr	r1, [r4, #4]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dd0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dd4:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dda:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 8004ddc:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dde:	62dd      	str	r5, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004de0:	6299      	str	r1, [r3, #40]	; 0x28
 8004de2:	e7eb      	b.n	8004dbc <HAL_TIM_Base_Init+0xbc>
    htim->Lock = HAL_UNLOCKED;
 8004de4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004de8:	f7ff ff88 	bl	8004cfc <HAL_TIM_Base_MspInit>
 8004dec:	e793      	b.n	8004d16 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= Structure->CounterMode;
 8004dee:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004df0:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004df2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004df4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004df8:	432a      	orrs	r2, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dfa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dfe:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e04:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8004e06:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e08:	68e2      	ldr	r2, [r4, #12]
 8004e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004e0c:	6862      	ldr	r2, [r4, #4]
 8004e0e:	629a      	str	r2, [r3, #40]	; 0x28
 8004e10:	e7d2      	b.n	8004db8 <HAL_TIM_Base_Init+0xb8>
    tmpcr1 |= Structure->CounterMode;
 8004e12:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e14:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e16:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e18:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8004e1a:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004e20:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e22:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e26:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e2c:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8004e2e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e30:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004e32:	629d      	str	r5, [r3, #40]	; 0x28
 8004e34:	e7c2      	b.n	8004dbc <HAL_TIM_Base_Init+0xbc>
    return HAL_ERROR;
 8004e36:	2001      	movs	r0, #1
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40010000 	.word	0x40010000
 8004e40:	40010400 	.word	0x40010400

08004e44 <HAL_TIM_PWM_MspInit>:
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop

08004e48 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	f000 8098 	beq.w	8004f7e <HAL_TIM_PWM_Init+0x136>
{
 8004e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004e50:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004e54:	4604      	mov	r4, r0
 8004e56:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d066      	beq.n	8004f2c <HAL_TIM_PWM_Init+0xe4>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e5e:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e60:	4948      	ldr	r1, [pc, #288]	; (8004f84 <HAL_TIM_PWM_Init+0x13c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004e62:	2202      	movs	r2, #2
 8004e64:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e68:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8004e6a:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e6c:	d063      	beq.n	8004f36 <HAL_TIM_PWM_Init+0xee>
 8004e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e72:	d072      	beq.n	8004f5a <HAL_TIM_PWM_Init+0x112>
 8004e74:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8004e78:	428b      	cmp	r3, r1
 8004e7a:	d02d      	beq.n	8004ed8 <HAL_TIM_PWM_Init+0x90>
 8004e7c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e80:	428b      	cmp	r3, r1
 8004e82:	d029      	beq.n	8004ed8 <HAL_TIM_PWM_Init+0x90>
 8004e84:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e88:	428b      	cmp	r3, r1
 8004e8a:	d025      	beq.n	8004ed8 <HAL_TIM_PWM_Init+0x90>
 8004e8c:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8004e90:	428b      	cmp	r3, r1
 8004e92:	d021      	beq.n	8004ed8 <HAL_TIM_PWM_Init+0x90>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e94:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8004e98:	428b      	cmp	r3, r1
 8004e9a:	d039      	beq.n	8004f10 <HAL_TIM_PWM_Init+0xc8>
 8004e9c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ea0:	428b      	cmp	r3, r1
 8004ea2:	d035      	beq.n	8004f10 <HAL_TIM_PWM_Init+0xc8>
 8004ea4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ea8:	428b      	cmp	r3, r1
 8004eaa:	d031      	beq.n	8004f10 <HAL_TIM_PWM_Init+0xc8>
 8004eac:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8004eb0:	428b      	cmp	r3, r1
 8004eb2:	d02d      	beq.n	8004f10 <HAL_TIM_PWM_Init+0xc8>
 8004eb4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004eb8:	428b      	cmp	r3, r1
 8004eba:	d029      	beq.n	8004f10 <HAL_TIM_PWM_Init+0xc8>
 8004ebc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ec0:	428b      	cmp	r3, r1
 8004ec2:	d025      	beq.n	8004f10 <HAL_TIM_PWM_Init+0xc8>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ec4:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ec6:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8004ec8:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ece:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004ed0:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ed2:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004ed4:	6299      	str	r1, [r3, #40]	; 0x28
 8004ed6:	e015      	b.n	8004f04 <HAL_TIM_PWM_Init+0xbc>
    tmpcr1 |= Structure->CounterMode;
 8004ed8:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eda:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004edc:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ede:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8004ee0:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ee2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004ee6:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ee8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eec:	4926      	ldr	r1, [pc, #152]	; (8004f88 <HAL_TIM_PWM_Init+0x140>)
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eee:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ef4:	4302      	orrs	r2, r0
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ef6:	428b      	cmp	r3, r1
  TIMx->CR1 = tmpcr1;
 8004ef8:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004efa:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004efc:	629d      	str	r5, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004efe:	d101      	bne.n	8004f04 <HAL_TIM_PWM_Init+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8004f00:	6962      	ldr	r2, [r4, #20]
 8004f02:	631a      	str	r2, [r3, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004f04:	2201      	movs	r2, #1
 8004f06:	615a      	str	r2, [r3, #20]
  return HAL_OK;
 8004f08:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004f0a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  return HAL_OK;
 8004f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f10:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f12:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f14:	68e5      	ldr	r5, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8004f16:	6861      	ldr	r1, [r4, #4]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f18:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f1c:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f22:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 8004f24:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f26:	62dd      	str	r5, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f28:	6299      	str	r1, [r3, #40]	; 0x28
 8004f2a:	e7eb      	b.n	8004f04 <HAL_TIM_PWM_Init+0xbc>
    htim->Lock = HAL_UNLOCKED;
 8004f2c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004f30:	f7ff ff88 	bl	8004e44 <HAL_TIM_PWM_MspInit>
 8004f34:	e793      	b.n	8004e5e <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= Structure->CounterMode;
 8004f36:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f38:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f3a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004f40:	432a      	orrs	r2, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f42:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f46:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f4c:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8004f4e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f50:	68e2      	ldr	r2, [r4, #12]
 8004f52:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f54:	6862      	ldr	r2, [r4, #4]
 8004f56:	629a      	str	r2, [r3, #40]	; 0x28
 8004f58:	e7d2      	b.n	8004f00 <HAL_TIM_PWM_Init+0xb8>
    tmpcr1 |= Structure->CounterMode;
 8004f5a:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f5c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f5e:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f60:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8004f62:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f64:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004f68:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f6a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f6e:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f74:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8004f76:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f78:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f7a:	629d      	str	r5, [r3, #40]	; 0x28
 8004f7c:	e7c2      	b.n	8004f04 <HAL_TIM_PWM_Init+0xbc>
    return HAL_ERROR;
 8004f7e:	2001      	movs	r0, #1
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	40010000 	.word	0x40010000
 8004f88:	40010400 	.word	0x40010400

08004f8c <HAL_TIM_PWM_Start>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f8c:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f8e:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f90:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f92:	f001 011f 	and.w	r1, r1, #31
 8004f96:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 8004f9a:	ea20 0001 	bic.w	r0, r0, r1
{
 8004f9e:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8004fa0:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fa2:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fa4:	4c0c      	ldr	r4, [pc, #48]	; (8004fd8 <HAL_TIM_PWM_Start+0x4c>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fa6:	4311      	orrs	r1, r2
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fa8:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004faa:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fac:	d00f      	beq.n	8004fce <HAL_TIM_PWM_Start+0x42>
 8004fae:	4a0b      	ldr	r2, [pc, #44]	; (8004fdc <HAL_TIM_PWM_Start+0x50>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00c      	beq.n	8004fce <HAL_TIM_PWM_Start+0x42>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fba:	2a06      	cmp	r2, #6
 8004fbc:	d003      	beq.n	8004fc6 <HAL_TIM_PWM_Start+0x3a>
    __HAL_TIM_ENABLE(htim);
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	f042 0201 	orr.w	r2, r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]
}
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fcc:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8004fce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fd4:	645a      	str	r2, [r3, #68]	; 0x44
 8004fd6:	e7ed      	b.n	8004fb4 <HAL_TIM_PWM_Start+0x28>
 8004fd8:	40010000 	.word	0x40010000
 8004fdc:	40010400 	.word	0x40010400

08004fe0 <HAL_TIM_PWM_Stop>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004fe0:	6803      	ldr	r3, [r0, #0]
{
 8004fe2:	b430      	push	{r4, r5}
  TIMx->CCER &= ~tmp;
 8004fe4:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fe6:	4c19      	ldr	r4, [pc, #100]	; (800504c <HAL_TIM_PWM_Stop+0x6c>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fe8:	f001 051f 	and.w	r5, r1, #31
 8004fec:	2101      	movs	r1, #1
 8004fee:	40a9      	lsls	r1, r5
  TIMx->CCER &= ~tmp;
 8004ff0:	ea22 0101 	bic.w	r1, r2, r1
 8004ff4:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ff6:	6a1a      	ldr	r2, [r3, #32]
 8004ff8:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ffa:	42a3      	cmp	r3, r4
 8004ffc:	d016      	beq.n	800502c <HAL_TIM_PWM_Stop+0x4c>
 8004ffe:	4a14      	ldr	r2, [pc, #80]	; (8005050 <HAL_TIM_PWM_Stop+0x70>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d013      	beq.n	800502c <HAL_TIM_PWM_Stop+0x4c>
  __HAL_TIM_DISABLE(htim);
 8005004:	6a19      	ldr	r1, [r3, #32]
 8005006:	f241 1211 	movw	r2, #4369	; 0x1111
 800500a:	4211      	tst	r1, r2
 800500c:	d108      	bne.n	8005020 <HAL_TIM_PWM_Stop+0x40>
 800500e:	6a19      	ldr	r1, [r3, #32]
 8005010:	f240 4244 	movw	r2, #1092	; 0x444
 8005014:	4211      	tst	r1, r2
 8005016:	d103      	bne.n	8005020 <HAL_TIM_PWM_Stop+0x40>
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	f022 0201 	bic.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005020:	2301      	movs	r3, #1
 8005022:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005026:	bc30      	pop	{r4, r5}
 8005028:	2000      	movs	r0, #0
 800502a:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 800502c:	6a19      	ldr	r1, [r3, #32]
 800502e:	f241 1211 	movw	r2, #4369	; 0x1111
 8005032:	4211      	tst	r1, r2
 8005034:	d1e6      	bne.n	8005004 <HAL_TIM_PWM_Stop+0x24>
 8005036:	6a19      	ldr	r1, [r3, #32]
 8005038:	f240 4244 	movw	r2, #1092	; 0x444
 800503c:	4211      	tst	r1, r2
 800503e:	d1e1      	bne.n	8005004 <HAL_TIM_PWM_Stop+0x24>
 8005040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005042:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005046:	645a      	str	r2, [r3, #68]	; 0x44
 8005048:	e7dc      	b.n	8005004 <HAL_TIM_PWM_Stop+0x24>
 800504a:	bf00      	nop
 800504c:	40010000 	.word	0x40010000
 8005050:	40010400 	.word	0x40010400

08005054 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8005054:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005058:	2b01      	cmp	r3, #1
 800505a:	d047      	beq.n	80050ec <HAL_TIM_PWM_ConfigChannel+0x98>
{
 800505c:	b5f0      	push	{r4, r5, r6, r7, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 800505e:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8005060:	2401      	movs	r4, #1
 8005062:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005066:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800506a:	2a0c      	cmp	r2, #12
 800506c:	d836      	bhi.n	80050dc <HAL_TIM_PWM_ConfigChannel+0x88>
 800506e:	e8df f002 	tbb	[pc, r2]
 8005072:	356c      	.short	0x356c
 8005074:	35073535 	.word	0x35073535
 8005078:	35983535 	.word	0x35983535
 800507c:	3535      	.short	0x3535
 800507e:	3f          	.byte	0x3f
 800507f:	00          	.byte	0x00
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005080:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005082:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005086:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005088:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800508a:	4e74      	ldr	r6, [pc, #464]	; (800525c <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800508c:	f025 0510 	bic.w	r5, r5, #16
 8005090:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8005092:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005094:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005096:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8005098:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800509c:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050a0:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050a2:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a6:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050aa:	f000 80bb 	beq.w	8005224 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 80050ae:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80050b2:	42b3      	cmp	r3, r6
 80050b4:	f000 80b6 	beq.w	8005224 <HAL_TIM_PWM_ConfigChannel+0x1d0>
  TIMx->CCR2 = OC_Config->Pulse;
 80050b8:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80050ba:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80050bc:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80050be:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80050c0:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050c2:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050c4:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050c6:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80050ca:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050cc:	6999      	ldr	r1, [r3, #24]
 80050ce:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80050d2:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050d4:	699a      	ldr	r2, [r3, #24]
 80050d6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80050da:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80050dc:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80050de:	2201      	movs	r2, #1
 80050e0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80050e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80050e8:	4618      	mov	r0, r3
 80050ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 80050ec:	2002      	movs	r0, #2
 80050ee:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050f0:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050f2:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050f6:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050f8:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050fa:	4e58      	ldr	r6, [pc, #352]	; (800525c <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050fc:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8005100:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8005102:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005104:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005106:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8005108:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800510c:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005110:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005112:	ea42 320e 	orr.w	r2, r2, lr, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005116:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800511a:	d06e      	beq.n	80051fa <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800511c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005120:	42b3      	cmp	r3, r6
 8005122:	d06a      	beq.n	80051fa <HAL_TIM_PWM_ConfigChannel+0x1a6>
  TIMx->CCR4 = OC_Config->Pulse;
 8005124:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005126:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005128:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800512a:	641e      	str	r6, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800512c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800512e:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005130:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005132:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8005136:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005138:	69d9      	ldr	r1, [r3, #28]
 800513a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800513e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005140:	69da      	ldr	r2, [r3, #28]
 8005142:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005146:	61da      	str	r2, [r3, #28]
      break;
 8005148:	e7c8      	b.n	80050dc <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800514a:	6803      	ldr	r3, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 800514c:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005150:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8005152:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005154:	4e41      	ldr	r6, [pc, #260]	; (800525c <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005156:	f025 0501 	bic.w	r5, r5, #1
 800515a:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800515c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800515e:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005160:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8005162:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005166:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800516a:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 800516c:	ea42 020e 	orr.w	r2, r2, lr
  tmpccmrx |= OC_Config->OCMode;
 8005170:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005174:	d065      	beq.n	8005242 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005176:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800517a:	42b3      	cmp	r3, r6
 800517c:	d061      	beq.n	8005242 <HAL_TIM_PWM_ConfigChannel+0x1ee>
  TIMx->CCR1 = OC_Config->Pulse;
 800517e:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005180:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005182:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8005184:	635e      	str	r6, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8005186:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005188:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800518a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800518c:	f044 0408 	orr.w	r4, r4, #8
 8005190:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005192:	6999      	ldr	r1, [r3, #24]
 8005194:	f021 0104 	bic.w	r1, r1, #4
 8005198:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800519a:	699a      	ldr	r2, [r3, #24]
 800519c:	432a      	orrs	r2, r5
 800519e:	619a      	str	r2, [r3, #24]
      break;
 80051a0:	e79c      	b.n	80050dc <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051a2:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051a4:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051a8:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80051aa:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051ac:	4e2b      	ldr	r6, [pc, #172]	; (800525c <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051ae:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 80051b2:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80051b4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80051b6:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80051b8:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 80051ba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051be:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051c2:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051c4:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80051c8:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051cc:	d01b      	beq.n	8005206 <HAL_TIM_PWM_ConfigChannel+0x1b2>
 80051ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80051d2:	42b3      	cmp	r3, r6
 80051d4:	d017      	beq.n	8005206 <HAL_TIM_PWM_ConfigChannel+0x1b2>
  TIMx->CCR3 = OC_Config->Pulse;
 80051d6:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80051d8:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80051da:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80051dc:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80051de:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051e0:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051e2:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051e4:	f044 0408 	orr.w	r4, r4, #8
 80051e8:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051ea:	69d9      	ldr	r1, [r3, #28]
 80051ec:	f021 0104 	bic.w	r1, r1, #4
 80051f0:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051f2:	69da      	ldr	r2, [r3, #28]
 80051f4:	432a      	orrs	r2, r5
 80051f6:	61da      	str	r2, [r3, #28]
      break;
 80051f8:	e770      	b.n	80050dc <HAL_TIM_PWM_ConfigChannel+0x88>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051fa:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051fc:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005200:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8005204:	e78e      	b.n	8005124 <HAL_TIM_PWM_ConfigChannel+0xd0>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005206:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005208:	698f      	ldr	r7, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 800520a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800520e:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005212:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005214:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005218:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 800521a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800521e:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8005222:	e7d8      	b.n	80051d6 <HAL_TIM_PWM_ConfigChannel+0x182>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005224:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005226:	698f      	ldr	r7, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800522c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005230:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005232:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005236:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8005238:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800523c:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 8005240:	e73a      	b.n	80050b8 <HAL_TIM_PWM_ConfigChannel+0x64>
    tmpccer |= OC_Config->OCNPolarity;
 8005242:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8005244:	698f      	ldr	r7, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005246:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 800524a:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 800524c:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800524e:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8005252:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8005254:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005258:	4335      	orrs	r5, r6
 800525a:	e790      	b.n	800517e <HAL_TIM_PWM_ConfigChannel+0x12a>
 800525c:	40010000 	.word	0x40010000

08005260 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005260:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005264:	2b01      	cmp	r3, #1
 8005266:	d031      	beq.n	80052cc <HAL_TIM_ConfigClockSource+0x6c>
  htim->State = HAL_TIM_STATE_BUSY;
 8005268:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 800526a:	6803      	ldr	r3, [r0, #0]
{
 800526c:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 800526e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005272:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8005274:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005276:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800527a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  __HAL_LOCK(htim);
 800527e:	2501      	movs	r5, #1
  switch (sClockSourceConfig->ClockSource)
 8005280:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8005282:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8005286:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8005288:	d03c      	beq.n	8005304 <HAL_TIM_ConfigClockSource+0xa4>
 800528a:	d953      	bls.n	8005334 <HAL_TIM_ConfigClockSource+0xd4>
 800528c:	2c60      	cmp	r4, #96	; 0x60
 800528e:	d070      	beq.n	8005372 <HAL_TIM_ConfigClockSource+0x112>
 8005290:	d91e      	bls.n	80052d0 <HAL_TIM_ConfigClockSource+0x70>
 8005292:	2c70      	cmp	r4, #112	; 0x70
 8005294:	d05d      	beq.n	8005352 <HAL_TIM_ConfigClockSource+0xf2>
 8005296:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 800529a:	d10e      	bne.n	80052ba <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800529c:	688a      	ldr	r2, [r1, #8]
 800529e:	684d      	ldr	r5, [r1, #4]
 80052a0:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80052a2:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052a4:	432a      	orrs	r2, r5
 80052a6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052aa:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052ae:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80052b0:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052b8:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 80052ba:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80052bc:	2201      	movs	r2, #1
 80052be:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80052c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80052c6:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80052c8:	4618      	mov	r0, r3
}
 80052ca:	4770      	bx	lr
  __HAL_LOCK(htim);
 80052cc:	2002      	movs	r0, #2
 80052ce:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80052d0:	2c50      	cmp	r4, #80	; 0x50
 80052d2:	d1f2      	bne.n	80052ba <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 80052d4:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052d6:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052d8:	684c      	ldr	r4, [r1, #4]
 80052da:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052dc:	f026 0601 	bic.w	r6, r6, #1
 80052e0:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052e2:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052e4:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052e8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052ec:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80052f0:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80052f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f4:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80052f6:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80052f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052fc:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8005300:	609a      	str	r2, [r3, #8]
 8005302:	e7da      	b.n	80052ba <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8005304:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005306:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005308:	684c      	ldr	r4, [r1, #4]
 800530a:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800530c:	f026 0601 	bic.w	r6, r6, #1
 8005310:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005312:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005314:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005318:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800531c:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8005320:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8005322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005324:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8005326:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005328:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800532c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8005330:	609a      	str	r2, [r3, #8]
 8005332:	e7c2      	b.n	80052ba <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005334:	2c10      	cmp	r4, #16
 8005336:	d004      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0xe2>
 8005338:	d934      	bls.n	80053a4 <HAL_TIM_ConfigClockSource+0x144>
 800533a:	2c20      	cmp	r4, #32
 800533c:	d001      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0xe2>
 800533e:	2c30      	cmp	r4, #48	; 0x30
 8005340:	d1bb      	bne.n	80052ba <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 8005342:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005344:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8005348:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800534c:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 800534e:	609c      	str	r4, [r3, #8]
 8005350:	e7b3      	b.n	80052ba <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005352:	688a      	ldr	r2, [r1, #8]
 8005354:	684d      	ldr	r5, [r1, #4]
 8005356:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8005358:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800535a:	432a      	orrs	r2, r5
 800535c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005360:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005364:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8005366:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005368:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800536a:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800536e:	609a      	str	r2, [r3, #8]
      break;
 8005370:	e7a3      	b.n	80052ba <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005372:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005374:	684d      	ldr	r5, [r1, #4]
 8005376:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005378:	f024 0410 	bic.w	r4, r4, #16
 800537c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800537e:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8005380:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005382:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005386:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800538a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800538e:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005392:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8005394:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8005396:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005398:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800539c:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80053a0:	609a      	str	r2, [r3, #8]
 80053a2:	e78a      	b.n	80052ba <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80053a4:	2c00      	cmp	r4, #0
 80053a6:	d0cc      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0xe2>
 80053a8:	e787      	b.n	80052ba <HAL_TIM_ConfigClockSource+0x5a>
 80053aa:	bf00      	nop

080053ac <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ac:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80053b0:	2a01      	cmp	r2, #1
 80053b2:	d01a      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0x3e>
{
 80053b4:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b6:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053b8:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80053ba:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
 80053be:	4603      	mov	r3, r0
  tmpcr2 = htim->Instance->CR2;
 80053c0:	6860      	ldr	r0, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053c2:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053c4:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053c6:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~TIM_SMCR_MSM;
 80053c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpcr2 &= ~TIM_CR2_MMS;
 80053cc:	f020 0170 	bic.w	r1, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053d0:	4331      	orrs	r1, r6
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053d2:	432a      	orrs	r2, r5

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053d4:	2601      	movs	r6, #1

  __HAL_UNLOCK(htim);
 80053d6:	2500      	movs	r5, #0
  htim->Instance->CR2 = tmpcr2;
 80053d8:	6061      	str	r1, [r4, #4]

  return HAL_OK;
 80053da:	4628      	mov	r0, r5
  htim->Instance->SMCR = tmpsmcr;
 80053dc:	60a2      	str	r2, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 80053de:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80053e2:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
}
 80053e6:	bc70      	pop	{r4, r5, r6}
 80053e8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80053ea:	2002      	movs	r0, #2
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop

080053f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d021      	beq.n	800543c <HAL_TIMEx_ConfigBreakDeadTime+0x4c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053f8:	68ca      	ldr	r2, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053fa:	684b      	ldr	r3, [r1, #4]
{
 80053fc:	b4f0      	push	{r4, r5, r6, r7}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053fe:	688f      	ldr	r7, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005400:	680e      	ldr	r6, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005402:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005404:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005406:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005408:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800540c:	433a      	orrs	r2, r7
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800540e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005412:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005414:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005418:	4333      	orrs	r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800541a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800541e:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005420:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005424:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005426:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800542a:	6804      	ldr	r4, [r0, #0]

  __HAL_UNLOCK(htim);
 800542c:	2200      	movs	r2, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800542e:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8005430:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8005432:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8005436:	bcf0      	pop	{r4, r5, r6, r7}
 8005438:	4610      	mov	r0, r2
 800543a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800543c:	2302      	movs	r3, #2
}
 800543e:	4618      	mov	r0, r3
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop

08005444 <__libc_init_array>:
 8005444:	b570      	push	{r4, r5, r6, lr}
 8005446:	4e0d      	ldr	r6, [pc, #52]	; (800547c <__libc_init_array+0x38>)
 8005448:	4c0d      	ldr	r4, [pc, #52]	; (8005480 <__libc_init_array+0x3c>)
 800544a:	1ba4      	subs	r4, r4, r6
 800544c:	10a4      	asrs	r4, r4, #2
 800544e:	2500      	movs	r5, #0
 8005450:	42a5      	cmp	r5, r4
 8005452:	d109      	bne.n	8005468 <__libc_init_array+0x24>
 8005454:	4e0b      	ldr	r6, [pc, #44]	; (8005484 <__libc_init_array+0x40>)
 8005456:	4c0c      	ldr	r4, [pc, #48]	; (8005488 <__libc_init_array+0x44>)
 8005458:	f000 fa98 	bl	800598c <_init>
 800545c:	1ba4      	subs	r4, r4, r6
 800545e:	10a4      	asrs	r4, r4, #2
 8005460:	2500      	movs	r5, #0
 8005462:	42a5      	cmp	r5, r4
 8005464:	d105      	bne.n	8005472 <__libc_init_array+0x2e>
 8005466:	bd70      	pop	{r4, r5, r6, pc}
 8005468:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800546c:	4798      	blx	r3
 800546e:	3501      	adds	r5, #1
 8005470:	e7ee      	b.n	8005450 <__libc_init_array+0xc>
 8005472:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005476:	4798      	blx	r3
 8005478:	3501      	adds	r5, #1
 800547a:	e7f2      	b.n	8005462 <__libc_init_array+0x1e>
 800547c:	08005f60 	.word	0x08005f60
 8005480:	08005f60 	.word	0x08005f60
 8005484:	08005f60 	.word	0x08005f60
 8005488:	08005f64 	.word	0x08005f64

0800548c <memcpy>:
 800548c:	b510      	push	{r4, lr}
 800548e:	1e43      	subs	r3, r0, #1
 8005490:	440a      	add	r2, r1
 8005492:	4291      	cmp	r1, r2
 8005494:	d100      	bne.n	8005498 <memcpy+0xc>
 8005496:	bd10      	pop	{r4, pc}
 8005498:	f811 4b01 	ldrb.w	r4, [r1], #1
 800549c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054a0:	e7f7      	b.n	8005492 <memcpy+0x6>

080054a2 <memset>:
 80054a2:	4402      	add	r2, r0
 80054a4:	4603      	mov	r3, r0
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d100      	bne.n	80054ac <memset+0xa>
 80054aa:	4770      	bx	lr
 80054ac:	f803 1b01 	strb.w	r1, [r3], #1
 80054b0:	e7f9      	b.n	80054a6 <memset+0x4>
	...

080054b4 <log>:
 80054b4:	b570      	push	{r4, r5, r6, lr}
 80054b6:	ed2d 8b02 	vpush	{d8}
 80054ba:	b08a      	sub	sp, #40	; 0x28
 80054bc:	ec55 4b10 	vmov	r4, r5, d0
 80054c0:	f000 f87a 	bl	80055b8 <__ieee754_log>
 80054c4:	4b36      	ldr	r3, [pc, #216]	; (80055a0 <log+0xec>)
 80054c6:	eeb0 8a40 	vmov.f32	s16, s0
 80054ca:	eef0 8a60 	vmov.f32	s17, s1
 80054ce:	f993 6000 	ldrsb.w	r6, [r3]
 80054d2:	1c73      	adds	r3, r6, #1
 80054d4:	d05b      	beq.n	800558e <log+0xda>
 80054d6:	4622      	mov	r2, r4
 80054d8:	462b      	mov	r3, r5
 80054da:	4620      	mov	r0, r4
 80054dc:	4629      	mov	r1, r5
 80054de:	f7fb faf1 	bl	8000ac4 <__aeabi_dcmpun>
 80054e2:	2800      	cmp	r0, #0
 80054e4:	d153      	bne.n	800558e <log+0xda>
 80054e6:	2200      	movs	r2, #0
 80054e8:	2300      	movs	r3, #0
 80054ea:	4620      	mov	r0, r4
 80054ec:	4629      	mov	r1, r5
 80054ee:	f7fb fadf 	bl	8000ab0 <__aeabi_dcmpgt>
 80054f2:	2800      	cmp	r0, #0
 80054f4:	d14b      	bne.n	800558e <log+0xda>
 80054f6:	4b2b      	ldr	r3, [pc, #172]	; (80055a4 <log+0xf0>)
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	9008      	str	r0, [sp, #32]
 80054fc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005500:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005504:	b9a6      	cbnz	r6, 8005530 <log+0x7c>
 8005506:	4b28      	ldr	r3, [pc, #160]	; (80055a8 <log+0xf4>)
 8005508:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800550c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005510:	4620      	mov	r0, r4
 8005512:	2200      	movs	r2, #0
 8005514:	2300      	movs	r3, #0
 8005516:	4629      	mov	r1, r5
 8005518:	f7fb faa2 	bl	8000a60 <__aeabi_dcmpeq>
 800551c:	bb40      	cbnz	r0, 8005570 <log+0xbc>
 800551e:	2301      	movs	r3, #1
 8005520:	2e02      	cmp	r6, #2
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	d119      	bne.n	800555a <log+0xa6>
 8005526:	f000 fa2b 	bl	8005980 <__errno>
 800552a:	2321      	movs	r3, #33	; 0x21
 800552c:	6003      	str	r3, [r0, #0]
 800552e:	e019      	b.n	8005564 <log+0xb0>
 8005530:	4b1e      	ldr	r3, [pc, #120]	; (80055ac <log+0xf8>)
 8005532:	2200      	movs	r2, #0
 8005534:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005538:	4620      	mov	r0, r4
 800553a:	2200      	movs	r2, #0
 800553c:	2300      	movs	r3, #0
 800553e:	4629      	mov	r1, r5
 8005540:	f7fb fa8e 	bl	8000a60 <__aeabi_dcmpeq>
 8005544:	2800      	cmp	r0, #0
 8005546:	d0ea      	beq.n	800551e <log+0x6a>
 8005548:	2302      	movs	r3, #2
 800554a:	429e      	cmp	r6, r3
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	d111      	bne.n	8005574 <log+0xc0>
 8005550:	f000 fa16 	bl	8005980 <__errno>
 8005554:	2322      	movs	r3, #34	; 0x22
 8005556:	6003      	str	r3, [r0, #0]
 8005558:	e011      	b.n	800557e <log+0xca>
 800555a:	4668      	mov	r0, sp
 800555c:	f000 fa04 	bl	8005968 <matherr>
 8005560:	2800      	cmp	r0, #0
 8005562:	d0e0      	beq.n	8005526 <log+0x72>
 8005564:	4812      	ldr	r0, [pc, #72]	; (80055b0 <log+0xfc>)
 8005566:	f000 fa03 	bl	8005970 <nan>
 800556a:	ed8d 0b06 	vstr	d0, [sp, #24]
 800556e:	e006      	b.n	800557e <log+0xca>
 8005570:	2302      	movs	r3, #2
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	4668      	mov	r0, sp
 8005576:	f000 f9f7 	bl	8005968 <matherr>
 800557a:	2800      	cmp	r0, #0
 800557c:	d0e8      	beq.n	8005550 <log+0x9c>
 800557e:	9b08      	ldr	r3, [sp, #32]
 8005580:	b11b      	cbz	r3, 800558a <log+0xd6>
 8005582:	f000 f9fd 	bl	8005980 <__errno>
 8005586:	9b08      	ldr	r3, [sp, #32]
 8005588:	6003      	str	r3, [r0, #0]
 800558a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800558e:	eeb0 0a48 	vmov.f32	s0, s16
 8005592:	eef0 0a68 	vmov.f32	s1, s17
 8005596:	b00a      	add	sp, #40	; 0x28
 8005598:	ecbd 8b02 	vpop	{d8}
 800559c:	bd70      	pop	{r4, r5, r6, pc}
 800559e:	bf00      	nop
 80055a0:	200003d8 	.word	0x200003d8
 80055a4:	08005f54 	.word	0x08005f54
 80055a8:	c7efffff 	.word	0xc7efffff
 80055ac:	fff00000 	.word	0xfff00000
 80055b0:	08005f57 	.word	0x08005f57
 80055b4:	00000000 	.word	0x00000000

080055b8 <__ieee754_log>:
 80055b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055bc:	ec51 0b10 	vmov	r0, r1, d0
 80055c0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80055c4:	b087      	sub	sp, #28
 80055c6:	ee10 3a10 	vmov	r3, s0
 80055ca:	460d      	mov	r5, r1
 80055cc:	da27      	bge.n	800561e <__ieee754_log+0x66>
 80055ce:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80055d2:	4313      	orrs	r3, r2
 80055d4:	d10a      	bne.n	80055ec <__ieee754_log+0x34>
 80055d6:	49cc      	ldr	r1, [pc, #816]	; (8005908 <__ieee754_log+0x350>)
 80055d8:	2200      	movs	r2, #0
 80055da:	2300      	movs	r3, #0
 80055dc:	2000      	movs	r0, #0
 80055de:	f7fb f901 	bl	80007e4 <__aeabi_ddiv>
 80055e2:	ec41 0b10 	vmov	d0, r0, r1
 80055e6:	b007      	add	sp, #28
 80055e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ec:	2900      	cmp	r1, #0
 80055ee:	da07      	bge.n	8005600 <__ieee754_log+0x48>
 80055f0:	ee10 2a10 	vmov	r2, s0
 80055f4:	460b      	mov	r3, r1
 80055f6:	f7fa fe17 	bl	8000228 <__aeabi_dsub>
 80055fa:	2200      	movs	r2, #0
 80055fc:	2300      	movs	r3, #0
 80055fe:	e7ee      	b.n	80055de <__ieee754_log+0x26>
 8005600:	4bc2      	ldr	r3, [pc, #776]	; (800590c <__ieee754_log+0x354>)
 8005602:	2200      	movs	r2, #0
 8005604:	f7fa ffc4 	bl	8000590 <__aeabi_dmul>
 8005608:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800560c:	460d      	mov	r5, r1
 800560e:	4ac0      	ldr	r2, [pc, #768]	; (8005910 <__ieee754_log+0x358>)
 8005610:	4295      	cmp	r5, r2
 8005612:	dd06      	ble.n	8005622 <__ieee754_log+0x6a>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	f7fa fe08 	bl	800022c <__adddf3>
 800561c:	e7e1      	b.n	80055e2 <__ieee754_log+0x2a>
 800561e:	2300      	movs	r3, #0
 8005620:	e7f5      	b.n	800560e <__ieee754_log+0x56>
 8005622:	152c      	asrs	r4, r5, #20
 8005624:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005628:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800562c:	441c      	add	r4, r3
 800562e:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8005632:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8005636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800563a:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800563e:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8005642:	ea42 0105 	orr.w	r1, r2, r5
 8005646:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800564a:	2200      	movs	r2, #0
 800564c:	4bb1      	ldr	r3, [pc, #708]	; (8005914 <__ieee754_log+0x35c>)
 800564e:	f7fa fdeb 	bl	8000228 <__aeabi_dsub>
 8005652:	1cab      	adds	r3, r5, #2
 8005654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005658:	2b02      	cmp	r3, #2
 800565a:	4682      	mov	sl, r0
 800565c:	468b      	mov	fp, r1
 800565e:	f04f 0200 	mov.w	r2, #0
 8005662:	dc5b      	bgt.n	800571c <__ieee754_log+0x164>
 8005664:	2300      	movs	r3, #0
 8005666:	f7fb f9fb 	bl	8000a60 <__aeabi_dcmpeq>
 800566a:	b1d0      	cbz	r0, 80056a2 <__ieee754_log+0xea>
 800566c:	2c00      	cmp	r4, #0
 800566e:	f000 8170 	beq.w	8005952 <__ieee754_log+0x39a>
 8005672:	4620      	mov	r0, r4
 8005674:	f7fa ff26 	bl	80004c4 <__aeabi_i2d>
 8005678:	a38f      	add	r3, pc, #572	; (adr r3, 80058b8 <__ieee754_log+0x300>)
 800567a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567e:	4606      	mov	r6, r0
 8005680:	460f      	mov	r7, r1
 8005682:	f7fa ff85 	bl	8000590 <__aeabi_dmul>
 8005686:	a38e      	add	r3, pc, #568	; (adr r3, 80058c0 <__ieee754_log+0x308>)
 8005688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568c:	4604      	mov	r4, r0
 800568e:	460d      	mov	r5, r1
 8005690:	4630      	mov	r0, r6
 8005692:	4639      	mov	r1, r7
 8005694:	f7fa ff7c 	bl	8000590 <__aeabi_dmul>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	4620      	mov	r0, r4
 800569e:	4629      	mov	r1, r5
 80056a0:	e7ba      	b.n	8005618 <__ieee754_log+0x60>
 80056a2:	a389      	add	r3, pc, #548	; (adr r3, 80058c8 <__ieee754_log+0x310>)
 80056a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a8:	4650      	mov	r0, sl
 80056aa:	4659      	mov	r1, fp
 80056ac:	f7fa ff70 	bl	8000590 <__aeabi_dmul>
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	2000      	movs	r0, #0
 80056b6:	4998      	ldr	r1, [pc, #608]	; (8005918 <__ieee754_log+0x360>)
 80056b8:	f7fa fdb6 	bl	8000228 <__aeabi_dsub>
 80056bc:	4652      	mov	r2, sl
 80056be:	4606      	mov	r6, r0
 80056c0:	460f      	mov	r7, r1
 80056c2:	465b      	mov	r3, fp
 80056c4:	4650      	mov	r0, sl
 80056c6:	4659      	mov	r1, fp
 80056c8:	f7fa ff62 	bl	8000590 <__aeabi_dmul>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4630      	mov	r0, r6
 80056d2:	4639      	mov	r1, r7
 80056d4:	f7fa ff5c 	bl	8000590 <__aeabi_dmul>
 80056d8:	4606      	mov	r6, r0
 80056da:	460f      	mov	r7, r1
 80056dc:	b934      	cbnz	r4, 80056ec <__ieee754_log+0x134>
 80056de:	4602      	mov	r2, r0
 80056e0:	460b      	mov	r3, r1
 80056e2:	4650      	mov	r0, sl
 80056e4:	4659      	mov	r1, fp
 80056e6:	f7fa fd9f 	bl	8000228 <__aeabi_dsub>
 80056ea:	e77a      	b.n	80055e2 <__ieee754_log+0x2a>
 80056ec:	4620      	mov	r0, r4
 80056ee:	f7fa fee9 	bl	80004c4 <__aeabi_i2d>
 80056f2:	a371      	add	r3, pc, #452	; (adr r3, 80058b8 <__ieee754_log+0x300>)
 80056f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f8:	4680      	mov	r8, r0
 80056fa:	4689      	mov	r9, r1
 80056fc:	f7fa ff48 	bl	8000590 <__aeabi_dmul>
 8005700:	a36f      	add	r3, pc, #444	; (adr r3, 80058c0 <__ieee754_log+0x308>)
 8005702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005706:	4604      	mov	r4, r0
 8005708:	460d      	mov	r5, r1
 800570a:	4640      	mov	r0, r8
 800570c:	4649      	mov	r1, r9
 800570e:	f7fa ff3f 	bl	8000590 <__aeabi_dmul>
 8005712:	4602      	mov	r2, r0
 8005714:	460b      	mov	r3, r1
 8005716:	4630      	mov	r0, r6
 8005718:	4639      	mov	r1, r7
 800571a:	e0b2      	b.n	8005882 <__ieee754_log+0x2ca>
 800571c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005720:	f7fa fd84 	bl	800022c <__adddf3>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	4650      	mov	r0, sl
 800572a:	4659      	mov	r1, fp
 800572c:	f7fb f85a 	bl	80007e4 <__aeabi_ddiv>
 8005730:	e9cd 0100 	strd	r0, r1, [sp]
 8005734:	4620      	mov	r0, r4
 8005736:	f7fa fec5 	bl	80004c4 <__aeabi_i2d>
 800573a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800573e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005742:	4610      	mov	r0, r2
 8005744:	4619      	mov	r1, r3
 8005746:	f7fa ff23 	bl	8000590 <__aeabi_dmul>
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005752:	f7fa ff1d 	bl	8000590 <__aeabi_dmul>
 8005756:	a35e      	add	r3, pc, #376	; (adr r3, 80058d0 <__ieee754_log+0x318>)
 8005758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575c:	4606      	mov	r6, r0
 800575e:	460f      	mov	r7, r1
 8005760:	f7fa ff16 	bl	8000590 <__aeabi_dmul>
 8005764:	a35c      	add	r3, pc, #368	; (adr r3, 80058d8 <__ieee754_log+0x320>)
 8005766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576a:	f7fa fd5f 	bl	800022c <__adddf3>
 800576e:	4632      	mov	r2, r6
 8005770:	463b      	mov	r3, r7
 8005772:	f7fa ff0d 	bl	8000590 <__aeabi_dmul>
 8005776:	a35a      	add	r3, pc, #360	; (adr r3, 80058e0 <__ieee754_log+0x328>)
 8005778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577c:	f7fa fd56 	bl	800022c <__adddf3>
 8005780:	4632      	mov	r2, r6
 8005782:	463b      	mov	r3, r7
 8005784:	f7fa ff04 	bl	8000590 <__aeabi_dmul>
 8005788:	a357      	add	r3, pc, #348	; (adr r3, 80058e8 <__ieee754_log+0x330>)
 800578a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578e:	f7fa fd4d 	bl	800022c <__adddf3>
 8005792:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005796:	f7fa fefb 	bl	8000590 <__aeabi_dmul>
 800579a:	a355      	add	r3, pc, #340	; (adr r3, 80058f0 <__ieee754_log+0x338>)
 800579c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057a4:	4630      	mov	r0, r6
 80057a6:	4639      	mov	r1, r7
 80057a8:	f7fa fef2 	bl	8000590 <__aeabi_dmul>
 80057ac:	a352      	add	r3, pc, #328	; (adr r3, 80058f8 <__ieee754_log+0x340>)
 80057ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b2:	f7fa fd3b 	bl	800022c <__adddf3>
 80057b6:	4632      	mov	r2, r6
 80057b8:	463b      	mov	r3, r7
 80057ba:	f7fa fee9 	bl	8000590 <__aeabi_dmul>
 80057be:	a350      	add	r3, pc, #320	; (adr r3, 8005900 <__ieee754_log+0x348>)
 80057c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c4:	f7fa fd32 	bl	800022c <__adddf3>
 80057c8:	4632      	mov	r2, r6
 80057ca:	463b      	mov	r3, r7
 80057cc:	f7fa fee0 	bl	8000590 <__aeabi_dmul>
 80057d0:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 80057d4:	4602      	mov	r2, r0
 80057d6:	460b      	mov	r3, r1
 80057d8:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80057dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057e0:	f7fa fd24 	bl	800022c <__adddf3>
 80057e4:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 80057e8:	3551      	adds	r5, #81	; 0x51
 80057ea:	ea45 0508 	orr.w	r5, r5, r8
 80057ee:	2d00      	cmp	r5, #0
 80057f0:	4606      	mov	r6, r0
 80057f2:	460f      	mov	r7, r1
 80057f4:	dd50      	ble.n	8005898 <__ieee754_log+0x2e0>
 80057f6:	2200      	movs	r2, #0
 80057f8:	4b47      	ldr	r3, [pc, #284]	; (8005918 <__ieee754_log+0x360>)
 80057fa:	4650      	mov	r0, sl
 80057fc:	4659      	mov	r1, fp
 80057fe:	f7fa fec7 	bl	8000590 <__aeabi_dmul>
 8005802:	4652      	mov	r2, sl
 8005804:	465b      	mov	r3, fp
 8005806:	f7fa fec3 	bl	8000590 <__aeabi_dmul>
 800580a:	4680      	mov	r8, r0
 800580c:	4689      	mov	r9, r1
 800580e:	b994      	cbnz	r4, 8005836 <__ieee754_log+0x27e>
 8005810:	4602      	mov	r2, r0
 8005812:	460b      	mov	r3, r1
 8005814:	4630      	mov	r0, r6
 8005816:	4639      	mov	r1, r7
 8005818:	f7fa fd08 	bl	800022c <__adddf3>
 800581c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005820:	f7fa feb6 	bl	8000590 <__aeabi_dmul>
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	4640      	mov	r0, r8
 800582a:	4649      	mov	r1, r9
 800582c:	f7fa fcfc 	bl	8000228 <__aeabi_dsub>
 8005830:	4602      	mov	r2, r0
 8005832:	460b      	mov	r3, r1
 8005834:	e755      	b.n	80056e2 <__ieee754_log+0x12a>
 8005836:	a320      	add	r3, pc, #128	; (adr r3, 80058b8 <__ieee754_log+0x300>)
 8005838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005840:	f7fa fea6 	bl	8000590 <__aeabi_dmul>
 8005844:	4642      	mov	r2, r8
 8005846:	464b      	mov	r3, r9
 8005848:	4604      	mov	r4, r0
 800584a:	460d      	mov	r5, r1
 800584c:	4630      	mov	r0, r6
 800584e:	4639      	mov	r1, r7
 8005850:	f7fa fcec 	bl	800022c <__adddf3>
 8005854:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005858:	f7fa fe9a 	bl	8000590 <__aeabi_dmul>
 800585c:	a318      	add	r3, pc, #96	; (adr r3, 80058c0 <__ieee754_log+0x308>)
 800585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005862:	4606      	mov	r6, r0
 8005864:	460f      	mov	r7, r1
 8005866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800586a:	f7fa fe91 	bl	8000590 <__aeabi_dmul>
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	4630      	mov	r0, r6
 8005874:	4639      	mov	r1, r7
 8005876:	f7fa fcd9 	bl	800022c <__adddf3>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	4640      	mov	r0, r8
 8005880:	4649      	mov	r1, r9
 8005882:	f7fa fcd1 	bl	8000228 <__aeabi_dsub>
 8005886:	4652      	mov	r2, sl
 8005888:	465b      	mov	r3, fp
 800588a:	f7fa fccd 	bl	8000228 <__aeabi_dsub>
 800588e:	4602      	mov	r2, r0
 8005890:	460b      	mov	r3, r1
 8005892:	4620      	mov	r0, r4
 8005894:	4629      	mov	r1, r5
 8005896:	e726      	b.n	80056e6 <__ieee754_log+0x12e>
 8005898:	2c00      	cmp	r4, #0
 800589a:	d13f      	bne.n	800591c <__ieee754_log+0x364>
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	4650      	mov	r0, sl
 80058a2:	4659      	mov	r1, fp
 80058a4:	f7fa fcc0 	bl	8000228 <__aeabi_dsub>
 80058a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058ac:	f7fa fe70 	bl	8000590 <__aeabi_dmul>
 80058b0:	e7be      	b.n	8005830 <__ieee754_log+0x278>
 80058b2:	bf00      	nop
 80058b4:	f3af 8000 	nop.w
 80058b8:	fee00000 	.word	0xfee00000
 80058bc:	3fe62e42 	.word	0x3fe62e42
 80058c0:	35793c76 	.word	0x35793c76
 80058c4:	3dea39ef 	.word	0x3dea39ef
 80058c8:	55555555 	.word	0x55555555
 80058cc:	3fd55555 	.word	0x3fd55555
 80058d0:	df3e5244 	.word	0xdf3e5244
 80058d4:	3fc2f112 	.word	0x3fc2f112
 80058d8:	96cb03de 	.word	0x96cb03de
 80058dc:	3fc74664 	.word	0x3fc74664
 80058e0:	94229359 	.word	0x94229359
 80058e4:	3fd24924 	.word	0x3fd24924
 80058e8:	55555593 	.word	0x55555593
 80058ec:	3fe55555 	.word	0x3fe55555
 80058f0:	d078c69f 	.word	0xd078c69f
 80058f4:	3fc39a09 	.word	0x3fc39a09
 80058f8:	1d8e78af 	.word	0x1d8e78af
 80058fc:	3fcc71c5 	.word	0x3fcc71c5
 8005900:	9997fa04 	.word	0x9997fa04
 8005904:	3fd99999 	.word	0x3fd99999
 8005908:	c3500000 	.word	0xc3500000
 800590c:	43500000 	.word	0x43500000
 8005910:	7fefffff 	.word	0x7fefffff
 8005914:	3ff00000 	.word	0x3ff00000
 8005918:	3fe00000 	.word	0x3fe00000
 800591c:	a30e      	add	r3, pc, #56	; (adr r3, 8005958 <__ieee754_log+0x3a0>)
 800591e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005922:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005926:	f7fa fe33 	bl	8000590 <__aeabi_dmul>
 800592a:	4632      	mov	r2, r6
 800592c:	463b      	mov	r3, r7
 800592e:	4604      	mov	r4, r0
 8005930:	460d      	mov	r5, r1
 8005932:	4650      	mov	r0, sl
 8005934:	4659      	mov	r1, fp
 8005936:	f7fa fc77 	bl	8000228 <__aeabi_dsub>
 800593a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800593e:	f7fa fe27 	bl	8000590 <__aeabi_dmul>
 8005942:	a307      	add	r3, pc, #28	; (adr r3, 8005960 <__ieee754_log+0x3a8>)
 8005944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005948:	4606      	mov	r6, r0
 800594a:	460f      	mov	r7, r1
 800594c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005950:	e6dd      	b.n	800570e <__ieee754_log+0x156>
 8005952:	2000      	movs	r0, #0
 8005954:	2100      	movs	r1, #0
 8005956:	e644      	b.n	80055e2 <__ieee754_log+0x2a>
 8005958:	fee00000 	.word	0xfee00000
 800595c:	3fe62e42 	.word	0x3fe62e42
 8005960:	35793c76 	.word	0x35793c76
 8005964:	3dea39ef 	.word	0x3dea39ef

08005968 <matherr>:
 8005968:	2000      	movs	r0, #0
 800596a:	4770      	bx	lr
 800596c:	0000      	movs	r0, r0
	...

08005970 <nan>:
 8005970:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005978 <nan+0x8>
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	00000000 	.word	0x00000000
 800597c:	7ff80000 	.word	0x7ff80000

08005980 <__errno>:
 8005980:	4b01      	ldr	r3, [pc, #4]	; (8005988 <__errno+0x8>)
 8005982:	6818      	ldr	r0, [r3, #0]
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	200003dc 	.word	0x200003dc

0800598c <_init>:
 800598c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598e:	bf00      	nop
 8005990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005992:	bc08      	pop	{r3}
 8005994:	469e      	mov	lr, r3
 8005996:	4770      	bx	lr

08005998 <_fini>:
 8005998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599a:	bf00      	nop
 800599c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800599e:	bc08      	pop	{r3}
 80059a0:	469e      	mov	lr, r3
 80059a2:	4770      	bx	lr
