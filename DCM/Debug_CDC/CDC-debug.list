
CDC-debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f6a0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025998  0801f970  0801f970  00020970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08045308  08045308  00046308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0804530c  0804530c  0004630c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000910  24000000  08045310  00047000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000ed80  24000910  08045c20  00047910  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  2400f690  08045c20  00048690  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00047910  2**0
                  CONTENTS, READONLY
  9 .debug_info   0004603f  00000000  00000000  0004793e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00009487  00000000  00000000  0008d97d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002d28  00000000  00000000  00096e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000022a4  00000000  00000000  00099b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000516d8  00000000  00000000  0009bdd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0005fc02  00000000  00000000  000ed4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001bf43f  00000000  00000000  0014d0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0030c4ed  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000c0f0  00000000  00000000  0030c530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006e  00000000  00000000  00318620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000910 	.word	0x24000910
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801f958 	.word	0x0801f958

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000914 	.word	0x24000914
 800030c:	0801f958 	.word	0x0801f958

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	@ 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <adcInit>:
static cmr_adc_t adc;

/**
 * @brief Initializes the ADC interface.
 */
void adcInit(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af02      	add	r7, sp, #8
    // ADC initialization and channel configuration.
    cmr_adcInit(
 800068e:	230a      	movs	r3, #10
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2302      	movs	r3, #2
 8000694:	4a03      	ldr	r2, [pc, #12]	@ (80006a4 <adcInit+0x1c>)
 8000696:	4904      	ldr	r1, [pc, #16]	@ (80006a8 <adcInit+0x20>)
 8000698:	4804      	ldr	r0, [pc, #16]	@ (80006ac <adcInit+0x24>)
 800069a:	f00b fe0b 	bl	800c2b4 <cmr_adcInit>
        &adc, ADC1,
        adcChannels, sizeof(adcChannels) / sizeof(adcChannels[0]),
        10
    );
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	24000000 	.word	0x24000000
 80006a8:	40022000 	.word	0x40022000
 80006ac:	2400092c 	.word	0x2400092c

080006b0 <adcRead>:

/**
 * @brief Returns the current value of an ADC channel.
 */
uint32_t adcRead(adcChannel_t ch) {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
    return adcChannels[ch].value;
 80006ba:	79fa      	ldrb	r2, [r7, #7]
 80006bc:	4906      	ldr	r1, [pc, #24]	@ (80006d8 <adcRead+0x28>)
 80006be:	4613      	mov	r3, r2
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	4413      	add	r3, r2
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	440b      	add	r3, r1
 80006c8:	3310      	adds	r3, #16
 80006ca:	681b      	ldr	r3, [r3, #0]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	24000000 	.word	0x24000000

080006dc <canTX10Hz>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void canTX10Hz(void *pvParameters) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	ed2d 8b02 	vpush	{d8}
 80006e2:	b096      	sub	sp, #88	@ 0x58
 80006e4:	af02      	add	r7, sp, #8
 80006e6:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    TickType_t lastWakeTime = xTaskGetTickCount();
 80006e8:	f00f ff76 	bl	80105d8 <xTaskGetTickCount>
 80006ec:	4603      	mov	r3, r0
 80006ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
    cmr_canCDCPoseVelocity_t poseVel;

    cmr_canPowerSense_t powerSense;

    while (1) {
        daqWheelSpeedFeedback(&speedFeedback);
 80006f0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006f4:	4618      	mov	r0, r3
 80006f6:	f003 fab9 	bl	8003c6c <daqWheelSpeedFeedback>
        daqWheelTorqueFeedback(&torqueFeedback);
 80006fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 faf4 	bl	8003cec <daqWheelTorqueFeedback>
        daqWheelSpeedSetpoints(&speedSetpoint);
 8000704:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000708:	4618      	mov	r0, r3
 800070a:	f003 fb43 	bl	8003d94 <daqWheelSpeedSetpoints>
        daqWheelTorqueSetpoints(&torqueSetpoint);
 800070e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000712:	4618      	mov	r0, r3
 8000714:	f003 fb7e 	bl	8003e14 <daqWheelTorqueSetpoints>
        daqPosePosition(&posePos);
 8000718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800071c:	4618      	mov	r0, r3
 800071e:	f003 fbc1 	bl	8003ea4 <daqPosePosition>
        daqPoseOrientation(&poseOrient);
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4618      	mov	r0, r3
 8000728:	f003 fc18 	bl	8003f5c <daqPoseOrientation>
        daqPoseVelocity(&poseVel);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4618      	mov	r0, r3
 8000732:	f003 fcab 	bl	800408c <daqPoseVelocity>

        powerSense.packCurrent_dA = getCurrent();
 8000736:	f006 fe63 	bl	8007400 <getCurrent>
 800073a:	4603      	mov	r3, r0
 800073c:	b21b      	sxth	r3, r3
 800073e:	81bb      	strh	r3, [r7, #12]
        powerSense.packVoltage_cV = getVoltage();
 8000740:	f006 fe52 	bl	80073e8 <getVoltage>
 8000744:	4603      	mov	r3, r0
 8000746:	b29b      	uxth	r3, r3
 8000748:	81fb      	strh	r3, [r7, #14]
        //powersense is dead, voltage * HVI current
        powerSense.packPower_W = getPackVoltage() * getPackCurrent();
 800074a:	f002 fba9 	bl	8002ea0 <getPackVoltage>
 800074e:	eeb0 8a40 	vmov.f32	s16, s0
 8000752:	f002 fbe5 	bl	8002f20 <getPackCurrent>
 8000756:	eef0 7a40 	vmov.f32	s15, s0
 800075a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800075e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000762:	ee17 3a90 	vmov	r3, s15
 8000766:	613b      	str	r3, [r7, #16]
//        canTX(CMR_CAN_BUS_DAQ, CMR_CANID_CDC_WHEEL_SPEED_SETPOINT, &speedSetpoint, sizeof(speedSetpoint), canTX10Hz_period_ms);
//        canTX(CMR_CAN_BUS_DAQ, CMR_CANID_CDC_WHEEL_TORQUE_SETPOINT, &torqueSetpoint, sizeof(torqueSetpoint), canTX10Hz_period_ms);
        //canTX(CMR_CAN_BUS_DAQ, CMR_CANID_CDC_POSE_POSITION, &posePos, sizeof(posePos), canTX10Hz_period_ms);

        //TODO: Fix error with padding (manual size 7)
        canTX(CMR_CAN_BUS_DAQ, CMR_CANID_CDC_POSE_ORIENTATION, &poseOrient, sizeof(poseOrient), canTX10Hz_period_ms);
 8000768:	2364      	movs	r3, #100	@ 0x64
 800076a:	f107 021c 	add.w	r2, r7, #28
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	2308      	movs	r3, #8
 8000772:	f240 2192 	movw	r1, #658	@ 0x292
 8000776:	2001      	movs	r0, #1
 8000778:	f000 fd7a 	bl	8001270 <canTX>
        canTX(CMR_CAN_BUS_DAQ, CMR_CANID_CDC_POSE_VELOCITY, &poseVel, sizeof(poseVel), canTX10Hz_period_ms);
 800077c:	2364      	movs	r3, #100	@ 0x64
 800077e:	f107 0214 	add.w	r2, r7, #20
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2306      	movs	r3, #6
 8000786:	f240 21a2 	movw	r1, #674	@ 0x2a2
 800078a:	2001      	movs	r0, #1
 800078c:	f000 fd70 	bl	8001270 <canTX>

        canTX(CMR_CAN_BUS_VEH, CMR_CANID_FRONT_SLIP_RATIOS, &frontSlipRatios, sizeof(frontSlipRatios), canTX10Hz_period_ms);
 8000790:	2364      	movs	r3, #100	@ 0x64
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	2308      	movs	r3, #8
 8000796:	4a27      	ldr	r2, [pc, #156]	@ (8000834 <canTX10Hz+0x158>)
 8000798:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 800079c:	2000      	movs	r0, #0
 800079e:	f000 fd67 	bl	8001270 <canTX>
        canTX(CMR_CAN_BUS_VEH, CMR_CANID_REAR_SLIP_RATIOS, &rearSlipRatios, sizeof(rearSlipRatios), canTX10Hz_period_ms);
 80007a2:	2364      	movs	r3, #100	@ 0x64
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	2308      	movs	r3, #8
 80007a8:	4a23      	ldr	r2, [pc, #140]	@ (8000838 <canTX10Hz+0x15c>)
 80007aa:	f240 71e9 	movw	r1, #2025	@ 0x7e9
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 fd5e 	bl	8001270 <canTX>
        canTX(CMR_CAN_BUS_VEH, CMR_CANID_FRONT_WHL_SETPOINTS, &frontWhlSetpoints, sizeof(frontSlipRatios), canTX10Hz_period_ms);
 80007b4:	2364      	movs	r3, #100	@ 0x64
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	2308      	movs	r3, #8
 80007ba:	4a20      	ldr	r2, [pc, #128]	@ (800083c <canTX10Hz+0x160>)
 80007bc:	f240 71ea 	movw	r1, #2026	@ 0x7ea
 80007c0:	2000      	movs	r0, #0
 80007c2:	f000 fd55 	bl	8001270 <canTX>
        canTX(CMR_CAN_BUS_VEH, CMR_CANID_REAR_WHL_SETPOINTS, &rearWhlSetpoints, sizeof(rearWhlSetpoints), canTX10Hz_period_ms);
 80007c6:	2364      	movs	r3, #100	@ 0x64
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2308      	movs	r3, #8
 80007cc:	4a1c      	ldr	r2, [pc, #112]	@ (8000840 <canTX10Hz+0x164>)
 80007ce:	f240 71eb 	movw	r1, #2027	@ 0x7eb
 80007d2:	2000      	movs	r0, #0
 80007d4:	f000 fd4c 	bl	8001270 <canTX>
        canTX(CMR_CAN_BUS_VEH, CMR_CANID_FRONT_WHL_VELS, &frontWhlVelocities, sizeof(frontWhlVelocities), canTX10Hz_period_ms);
 80007d8:	2364      	movs	r3, #100	@ 0x64
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	2308      	movs	r3, #8
 80007de:	4a19      	ldr	r2, [pc, #100]	@ (8000844 <canTX10Hz+0x168>)
 80007e0:	f240 71ec 	movw	r1, #2028	@ 0x7ec
 80007e4:	2000      	movs	r0, #0
 80007e6:	f000 fd43 	bl	8001270 <canTX>
        canTX(CMR_CAN_BUS_VEH, CMR_CANID_REAR_WHL_VELS, &rearWhlVelocities, sizeof(rearWhlVelocities), canTX10Hz_period_ms);
 80007ea:	2364      	movs	r3, #100	@ 0x64
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	2308      	movs	r3, #8
 80007f0:	4a15      	ldr	r2, [pc, #84]	@ (8000848 <canTX10Hz+0x16c>)
 80007f2:	f240 71ed 	movw	r1, #2029	@ 0x7ed
 80007f6:	2000      	movs	r0, #0
 80007f8:	f000 fd3a 	bl	8001270 <canTX>
        
        //powersense is dead, it's voltage * HVI
        canTX(CMR_CAN_BUS_VEH, CMR_CANID_CDC_POWER_SENSE, &powerSense, sizeof(powerSense), canTX10Hz_period_ms);
 80007fc:	2364      	movs	r3, #100	@ 0x64
 80007fe:	f107 020c 	add.w	r2, r7, #12
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	2308      	movs	r3, #8
 8000806:	f240 3105 	movw	r1, #773	@ 0x305
 800080a:	2000      	movs	r0, #0
 800080c:	f000 fd30 	bl	8001270 <canTX>
        canTX(CMR_CAN_BUS_VEH, CMR_CANID_CDC_COULOMB_COUNTING, &coulombCounting, sizeof(cmr_canCDCKiloCoulombs_t), canTX10Hz_period_ms);
 8000810:	2364      	movs	r3, #100	@ 0x64
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2304      	movs	r3, #4
 8000816:	4a0d      	ldr	r2, [pc, #52]	@ (800084c <canTX10Hz+0x170>)
 8000818:	f240 61e3 	movw	r1, #1763	@ 0x6e3
 800081c:	2000      	movs	r0, #0
 800081e:	f000 fd27 	bl	8001270 <canTX>

        vTaskDelayUntil(&lastWakeTime, canTX10Hz_period_ms);
 8000822:	2264      	movs	r2, #100	@ 0x64
 8000824:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000828:	4611      	mov	r1, r2
 800082a:	4618      	mov	r0, r3
 800082c:	f00f fd5e 	bl	80102ec <vTaskDelayUntil>
        daqWheelSpeedFeedback(&speedFeedback);
 8000830:	bf00      	nop
 8000832:	e75d      	b.n	80006f0 <canTX10Hz+0x14>
 8000834:	24006f04 	.word	0x24006f04
 8000838:	24006f0c 	.word	0x24006f0c
 800083c:	24006f14 	.word	0x24006f14
 8000840:	24006f1c 	.word	0x24006f1c
 8000844:	24006f24 	.word	0x24006f24
 8000848:	24006f2c 	.word	0x24006f2c
 800084c:	24006f58 	.word	0x24006f58

08000850 <canTX100Hz>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void canTX100Hz(void *pvParameters) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	@ 0x28
 8000854:	af02      	add	r7, sp, #8
 8000856:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    volatile cmr_canHeartbeat_t *heartbeatVSM = canVehicleGetPayload(CANRX_VEH_HEARTBEAT_VSM);
 8000858:	2000      	movs	r0, #0
 800085a:	f000 fd31 	bl	80012c0 <canVehicleGetPayload>
 800085e:	61f8      	str	r0, [r7, #28]

    TickType_t lastWakeTime = xTaskGetTickCount();
 8000860:	f00f feba 	bl	80105d8 <xTaskGetTickCount>
 8000864:	4603      	mov	r3, r0
 8000866:	613b      	str	r3, [r7, #16]
    while (1) {
        cmr_canHeartbeat_t heartbeat = {
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	711a      	strb	r2, [r3, #4]
            .state = heartbeatVSM->state
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	b2db      	uxtb	r3, r3
        cmr_canHeartbeat_t heartbeat = {
 8000878:	723b      	strb	r3, [r7, #8]
        };


        updateErrorsWarnings(&heartbeat, lastWakeTime);
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	f107 0308 	add.w	r3, r7, #8
 8000880:	4611      	mov	r1, r2
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fe1e 	bl	80014c4 <updateErrorsWarnings>

        if (heartbeat.error[0] != 0 || heartbeat.error[1] != 0) {
 8000888:	7a7b      	ldrb	r3, [r7, #9]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d102      	bne.n	8000894 <canTX100Hz+0x44>
 800088e:	7abb      	ldrb	r3, [r7, #10]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <canTX100Hz+0x48>
            heartbeat.state = CMR_CAN_ERROR;
 8000894:	2304      	movs	r3, #4
 8000896:	723b      	strb	r3, [r7, #8]
        }

        //CVXGEN
        canTX(CMR_CAN_BUS_VEH, CMR_CANID_CONTROLS_CVXGEN_INFO, &solverInfo, sizeof(solverInfo), canTX100Hz_period_ms);
 8000898:	230a      	movs	r3, #10
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2308      	movs	r3, #8
 800089e:	4a3a      	ldr	r2, [pc, #232]	@ (8000988 <canTX100Hz+0x138>)
 80008a0:	f240 71e6 	movw	r1, #2022	@ 0x7e6
 80008a4:	2000      	movs	r0, #0
 80008a6:	f000 fce3 	bl	8001270 <canTX>
        canTX(CMR_CAN_BUS_VEH, CMR_CANID_CONTROLS_CVXGEN_TORQUES, &solverTorques, sizeof(solverTorques), canTX100Hz_period_ms);
 80008aa:	230a      	movs	r3, #10
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	2308      	movs	r3, #8
 80008b0:	4a36      	ldr	r2, [pc, #216]	@ (800098c <canTX100Hz+0x13c>)
 80008b2:	f44f 61fe 	mov.w	r1, #2032	@ 0x7f0
 80008b6:	2000      	movs	r0, #0
 80008b8:	f000 fcda 	bl	8001270 <canTX>
        canTX(CMR_CAN_BUS_VEH, CMR_CANID_CONTROLS_CVXGEN_CONVERGENCE, &nonConvergenceCounter, sizeof(nonConvergenceCounter), canTX100Hz_period_ms);
 80008bc:	230a      	movs	r3, #10
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	2304      	movs	r3, #4
 80008c2:	4a33      	ldr	r2, [pc, #204]	@ (8000990 <canTX100Hz+0x140>)
 80008c4:	f240 71ee 	movw	r1, #2030	@ 0x7ee
 80008c8:	2000      	movs	r0, #0
 80008ca:	f000 fcd1 	bl	8001270 <canTX>
        
        /**
         * Velocity estimation message
         */
        canTX(CMR_CAN_BUS_DAQ, CMR_CANID_CDC_VELOCITY_ESTIMATION1, &velocity_estimator1, sizeof(velocity_estimator1), canTX100Hz_period_ms);
 80008ce:	230a      	movs	r3, #10
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	2308      	movs	r3, #8
 80008d4:	4a2f      	ldr	r2, [pc, #188]	@ (8000994 <canTX100Hz+0x144>)
 80008d6:	f240 21c2 	movw	r1, #706	@ 0x2c2
 80008da:	2001      	movs	r0, #1
 80008dc:	f000 fcc8 	bl	8001270 <canTX>
		canTX(CMR_CAN_BUS_DAQ, CMR_CANID_CDC_VELOCITY_ESTIMATION2, &velocity_estimator2, sizeof(velocity_estimator2), canTX100Hz_period_ms);
 80008e0:	230a      	movs	r3, #10
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	2308      	movs	r3, #8
 80008e6:	4a2c      	ldr	r2, [pc, #176]	@ (8000998 <canTX100Hz+0x148>)
 80008e8:	f240 21d2 	movw	r1, #722	@ 0x2d2
 80008ec:	2001      	movs	r0, #1
 80008ee:	f000 fcbf 	bl	8001270 <canTX>
        
		// SF
		const cmr_canCDCSafetyFilterStates_t *sfStatesInfo = getSafetyFilterInfo();
 80008f2:	f006 fcdf 	bl	80072b4 <getSafetyFilterInfo>
 80008f6:	4603      	mov	r3, r0
 80008f8:	61bb      	str	r3, [r7, #24]
		cmr_canCDCMotorPower_t *motorPowerInfo = getMotorPowerInfo();
 80008fa:	f006 fce5 	bl	80072c8 <getMotorPowerInfo>
 80008fe:	4603      	mov	r3, r0
 8000900:	617b      	str	r3, [r7, #20]
		motorPowerInfo->motor_power_FL = (HAL_FDCAN_GetTxFifoFreeLevel(&(can[CMR_CAN_BUS_TRAC].handle)) >> 16) & 0xFFFF;
 8000902:	4826      	ldr	r0, [pc, #152]	@ (800099c <canTX100Hz+0x14c>)
 8000904:	f014 ffc0 	bl	8015888 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000908:	4603      	mov	r3, r0
 800090a:	0c1b      	lsrs	r3, r3, #16
 800090c:	b29a      	uxth	r2, r3
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	801a      	strh	r2, [r3, #0]
		motorPowerInfo->motor_power_FR = HAL_FDCAN_GetTxFifoFreeLevel(&(can[CMR_CAN_BUS_TRAC].handle));
 8000912:	4822      	ldr	r0, [pc, #136]	@ (800099c <canTX100Hz+0x14c>)
 8000914:	f014 ffb8 	bl	8015888 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000918:	4603      	mov	r3, r0
 800091a:	b29a      	uxth	r2, r3
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	805a      	strh	r2, [r3, #2]

		motorPowerInfo->motor_power_RL = (HAL_FDCAN_GetTxFifoFreeLevel(&(can[CMR_CAN_BUS_VEH].handle)) >> 16) & 0xFFFF;
 8000920:	481f      	ldr	r0, [pc, #124]	@ (80009a0 <canTX100Hz+0x150>)
 8000922:	f014 ffb1 	bl	8015888 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000926:	4603      	mov	r3, r0
 8000928:	0c1b      	lsrs	r3, r3, #16
 800092a:	b29a      	uxth	r2, r3
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	809a      	strh	r2, [r3, #4]
		motorPowerInfo->motor_power_RR = HAL_FDCAN_GetTxFifoFreeLevel(&(can[CMR_CAN_BUS_VEH].handle));
 8000930:	481b      	ldr	r0, [pc, #108]	@ (80009a0 <canTX100Hz+0x150>)
 8000932:	f014 ffa9 	bl	8015888 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000936:	4603      	mov	r3, r0
 8000938:	b29a      	uxth	r2, r3
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	80da      	strh	r2, [r3, #6]

		canTX(CMR_CAN_BUS_VEH, CMR_CANID_SF_STATE, sfStatesInfo, sizeof(*sfStatesInfo), canTX100Hz_period_ms); //safety filter
 800093e:	230a      	movs	r3, #10
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2308      	movs	r3, #8
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	f240 512d 	movw	r1, #1325	@ 0x52d
 800094a:	2000      	movs	r0, #0
 800094c:	f000 fc90 	bl	8001270 <canTX>
		//canTX(CMR_CAN_BUS_VEH, CMR_CANID_MOTORPOWER_STATE, motorPowerInfo, sizeof(*motorPowerInfo), canTX200Hz_period_ms); //motor power
		canTX(CMR_CAN_BUS_DAQ, CMR_CANID_MOTORPOWER_STATE, motorPowerInfo, sizeof(*motorPowerInfo), canTX100Hz_period_ms); //motor power
 8000950:	230a      	movs	r3, #10
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	2308      	movs	r3, #8
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	f240 512e 	movw	r1, #1326	@ 0x52e
 800095c:	2001      	movs	r0, #1
 800095e:	f000 fc87 	bl	8001270 <canTX>
//                    2,
//                    canTX100Hz_period_ms
//                );

        // Send heartbeat
        canTX(
 8000962:	230a      	movs	r3, #10
 8000964:	f107 0208 	add.w	r2, r7, #8
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	2305      	movs	r3, #5
 800096c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000970:	2000      	movs	r0, #0
 8000972:	f000 fc7d 	bl	8001270 <canTX>
            sizeof(heartbeat),
            canTX100Hz_period_ms
        );
        
        
        vTaskDelayUntil(&lastWakeTime, canTX100Hz_period_ms);
 8000976:	220a      	movs	r2, #10
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	4611      	mov	r1, r2
 800097e:	4618      	mov	r0, r3
 8000980:	f00f fcb4 	bl	80102ec <vTaskDelayUntil>
    while (1) {
 8000984:	e770      	b.n	8000868 <canTX100Hz+0x18>
 8000986:	bf00      	nop
 8000988:	24006f3c 	.word	0x24006f3c
 800098c:	24006f44 	.word	0x24006f44
 8000990:	24006f4c 	.word	0x24006f4c
 8000994:	2400e2f0 	.word	0x2400e2f0
 8000998:	2400e2f8 	.word	0x2400e2f8
 800099c:	24001c10 	.word	0x24001c10
 80009a0:	24001a20 	.word	0x24001a20

080009a4 <canTX200Hz>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void canTX200Hz(void *pvParameters) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b098      	sub	sp, #96	@ 0x60
 80009a8:	af02      	add	r7, sp, #8
 80009aa:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    const cmr_canAMKSetpoints_t *amkSetpointsFL = getAMKSetpoints(MOTOR_FL);
 80009ac:	2002      	movs	r0, #2
 80009ae:	f005 fcd5 	bl	800635c <getAMKSetpoints>
 80009b2:	6578      	str	r0, [r7, #84]	@ 0x54
    const cmr_canAMKSetpoints_t *amkSetpointsFR = getAMKSetpoints(MOTOR_FR);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f005 fcd1 	bl	800635c <getAMKSetpoints>
 80009ba:	6538      	str	r0, [r7, #80]	@ 0x50
    const cmr_canAMKSetpoints_t *amkSetpointsRL = getAMKSetpoints(MOTOR_RL);
 80009bc:	2003      	movs	r0, #3
 80009be:	f005 fccd 	bl	800635c <getAMKSetpoints>
 80009c2:	64f8      	str	r0, [r7, #76]	@ 0x4c
    const cmr_canAMKSetpoints_t *amkSetpointsRR = getAMKSetpoints(MOTOR_RR);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f005 fcc9 	bl	800635c <getAMKSetpoints>
 80009ca:	64b8      	str	r0, [r7, #72]	@ 0x48

    cmr_canCDCPosePosition_t posePos;
    cmr_canCDCPoseOrientation_t poseOrient;
    cmr_canCDCPoseVelocity_t poseVel;

    TickType_t lastWakeTime = xTaskGetTickCount();
 80009cc:	f00f fe04 	bl	80105d8 <xTaskGetTickCount>
 80009d0:	4603      	mov	r3, r0
 80009d2:	60fb      	str	r3, [r7, #12]
    while (1) {
        canTX(CMR_CAN_BUS_TRAC, CMR_CANID_AMK_FL_SETPOINTS, amkSetpointsFL, sizeof(*amkSetpointsFL), canTX200Hz_period_ms);
 80009d4:	2305      	movs	r3, #5
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	2308      	movs	r3, #8
 80009da:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80009dc:	f240 1189 	movw	r1, #393	@ 0x189
 80009e0:	2002      	movs	r0, #2
 80009e2:	f000 fc45 	bl	8001270 <canTX>
        canTX(CMR_CAN_BUS_TRAC, CMR_CANID_AMK_FR_SETPOINTS, amkSetpointsFR, sizeof(*amkSetpointsFR), canTX200Hz_period_ms);
 80009e6:	2305      	movs	r3, #5
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	2308      	movs	r3, #8
 80009ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80009ee:	f44f 71c2 	mov.w	r1, #388	@ 0x184
 80009f2:	2002      	movs	r0, #2
 80009f4:	f000 fc3c 	bl	8001270 <canTX>
        canTX(CMR_CAN_BUS_TRAC, CMR_CANID_AMK_RL_SETPOINTS, amkSetpointsRL, sizeof(*amkSetpointsRL), canTX200Hz_period_ms);
 80009f8:	2305      	movs	r3, #5
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2308      	movs	r3, #8
 80009fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000a00:	f240 1185 	movw	r1, #389	@ 0x185
 8000a04:	2002      	movs	r0, #2
 8000a06:	f000 fc33 	bl	8001270 <canTX>
        canTX(CMR_CAN_BUS_TRAC, CMR_CANID_AMK_RR_SETPOINTS, amkSetpointsRR, sizeof(*amkSetpointsRR), canTX200Hz_period_ms);
 8000a0a:	2305      	movs	r3, #5
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	2308      	movs	r3, #8
 8000a10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000a12:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8000a16:	2002      	movs	r0, #2
 8000a18:	f000 fc2a 	bl	8001270 <canTX>

        daqWheelSpeedFeedback(&speedFeedback);
 8000a1c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a20:	4618      	mov	r0, r3
 8000a22:	f003 f923 	bl	8003c6c <daqWheelSpeedFeedback>
        daqWheelTorqueFeedback(&torqueFeedback);
 8000a26:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f003 f95e 	bl	8003cec <daqWheelTorqueFeedback>
        daqWheelSpeedSetpoints(&speedSetpoint);
 8000a30:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a34:	4618      	mov	r0, r3
 8000a36:	f003 f9ad 	bl	8003d94 <daqWheelSpeedSetpoints>
        daqWheelTorqueSetpoints(&torqueSetpoint);
 8000a3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f003 f9e8 	bl	8003e14 <daqWheelTorqueSetpoints>

        daqPosePosition(&posePos);
 8000a44:	f107 0320 	add.w	r3, r7, #32
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f003 fa2b 	bl	8003ea4 <daqPosePosition>
        //daqPoseOrientation(&poseOrient);
        daqPoseVelocity(&poseVel);
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	4618      	mov	r0, r3
 8000a54:	f003 fb1a 	bl	800408c <daqPoseVelocity>

        // Is data valid? Set it in the orientation/velocity messages
        canTX(CMR_CAN_BUS_DAQ, CMR_CANID_CDC_WHEEL_SPEED_FEEDBACK, &speedFeedback, sizeof(speedFeedback), canTX200Hz_period_ms);
 8000a58:	2305      	movs	r3, #5
 8000a5a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	2308      	movs	r3, #8
 8000a62:	f240 2132 	movw	r1, #562	@ 0x232
 8000a66:	2001      	movs	r0, #1
 8000a68:	f000 fc02 	bl	8001270 <canTX>
        canTX(CMR_CAN_BUS_DAQ, CMR_CANID_CDC_WHEEL_TORQUE_FEEDBACK, &torqueFeedback, sizeof(torqueFeedback), canTX200Hz_period_ms);
 8000a6c:	2305      	movs	r3, #5
 8000a6e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	2308      	movs	r3, #8
 8000a76:	f240 2162 	movw	r1, #610	@ 0x262
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f000 fbf8 	bl	8001270 <canTX>
        canTX(CMR_CAN_BUS_DAQ, CMR_CANID_CDC_WHEEL_SPEED_SETPOINT, &speedSetpoint, sizeof(speedSetpoint), canTX200Hz_period_ms);
 8000a80:	2305      	movs	r3, #5
 8000a82:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	2308      	movs	r3, #8
 8000a8a:	f240 2152 	movw	r1, #594	@ 0x252
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f000 fbee 	bl	8001270 <canTX>
        canTX(CMR_CAN_BUS_DAQ, CMR_CANID_CDC_WHEEL_TORQUE_SETPOINT, &torqueSetpoint, sizeof(torqueSetpoint), canTX200Hz_period_ms);
 8000a94:	2305      	movs	r3, #5
 8000a96:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	2308      	movs	r3, #8
 8000a9e:	f240 2172 	movw	r1, #626	@ 0x272
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f000 fbe4 	bl	8001270 <canTX>
        //TODO: Fix error with padding (manual size 7)
        //canTX(CMR_CAN_BUS_DAQ, CMR_CANID_CDC_POSE_ORIENTATION, &poseOrient, sizeof(poseOrient), canTX200Hz_period_ms);
        //canTX(CMR_CAN_BUS_DAQ, CMR_CANID_CDC_POSE_VELOCITY, &poseVel, sizeof(poseVel), canTX200Hz_period_ms);

        // YRC
        canTX(CMR_CAN_BUS_VEH, CMR_CANID_CONTROLS_PID_IO, &yrcDebug, sizeof(yrcDebug), canTX200Hz_period_ms);
 8000aa8:	2305      	movs	r3, #5
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	2308      	movs	r3, #8
 8000aae:	4a11      	ldr	r2, [pc, #68]	@ (8000af4 <canTX200Hz+0x150>)
 8000ab0:	f240 71e5 	movw	r1, #2021	@ 0x7e5
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f000 fbdb 	bl	8001270 <canTX>

        //Forward HVI Sense to vehic/le CAN. Do not transmit if we haven't received that message lately
        if (cmr_canRXMetaTimeoutError(&canTractiveRXMeta[CANRX_TRAC_HVI_SENSE], xTaskGetTickCountFromISR()) == 0) {
 8000aba:	f00f fd9d 	bl	80105f8 <xTaskGetTickCountFromISR>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480d      	ldr	r0, [pc, #52]	@ (8000af8 <canTX200Hz+0x154>)
 8000ac4:	f00b fc79 	bl	800c3ba <cmr_canRXMetaTimeoutError>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d109      	bne.n	8000ae2 <canTX200Hz+0x13e>
            canTX(
                CMR_CAN_BUS_VEH,
                canTractiveRXMeta[CANRX_TRAC_HVI_SENSE].canID,
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <canTX200Hz+0x158>)
 8000ad0:	f8b3 1100 	ldrh.w	r1, [r3, #256]	@ 0x100
            canTX(
 8000ad4:	2305      	movs	r3, #5
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	2308      	movs	r3, #8
 8000ada:	4a09      	ldr	r2, [pc, #36]	@ (8000b00 <canTX200Hz+0x15c>)
 8000adc:	2000      	movs	r0, #0
 8000ade:	f000 fbc7 	bl	8001270 <canTX>
                sizeof(cmr_canHVIHeartbeat_t),
                canTX200Hz_period_ms
            );
        }

        vTaskDelayUntil(&lastWakeTime, canTX200Hz_period_ms);
 8000ae2:	2205      	movs	r2, #5
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	4611      	mov	r1, r2
 8000aea:	4618      	mov	r0, r3
 8000aec:	f00f fbfe 	bl	80102ec <vTaskDelayUntil>
        canTX(CMR_CAN_BUS_TRAC, CMR_CANID_AMK_FL_SETPOINTS, amkSetpointsFL, sizeof(*amkSetpointsFL), canTX200Hz_period_ms);
 8000af0:	e770      	b.n	80009d4 <canTX200Hz+0x30>
 8000af2:	bf00      	nop
 8000af4:	24006ef8 	.word	0x24006ef8
 8000af8:	24000288 	.word	0x24000288
 8000afc:	24000188 	.word	0x24000188
 8000b00:	240002a0 	.word	0x240002a0

08000b04 <canTX5Hz>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void canTX5Hz(void *pvParameters) {
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b08f      	sub	sp, #60	@ 0x3c
 8000b08:	af02      	add	r7, sp, #8
 8000b0a:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    TickType_t lastWakeTime = xTaskGetTickCount();
 8000b0c:	f00f fd64 	bl	80105d8 <xTaskGetTickCount>
 8000b10:	4603      	mov	r3, r0
 8000b12:	60bb      	str	r3, [r7, #8]

    while (1) {
        
        // Forward AMK messages to vehicle CAN at lower 5Hz rate
        for (size_t i = 0; i <= CANRX_TRAC_INV_RR_ACT2; i++) {
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b18:	e022      	b.n	8000b60 <canTX5Hz+0x5c>
            // Do not transmit if we haven't received that message lately
            if (cmr_canRXMetaTimeoutError(&canTractiveRXMeta[i], xTaskGetTickCountFromISR()) < 0) continue;
 8000b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b1c:	015b      	lsls	r3, r3, #5
 8000b1e:	4a5a      	ldr	r2, [pc, #360]	@ (8000c88 <canTX5Hz+0x184>)
 8000b20:	189c      	adds	r4, r3, r2
 8000b22:	f00f fd69 	bl	80105f8 <xTaskGetTickCountFromISR>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	f00b fc45 	bl	800c3ba <cmr_canRXMetaTimeoutError>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	db10      	blt.n	8000b58 <canTX5Hz+0x54>

            canTX(
                CMR_CAN_BUS_VEH,
                canTractiveRXMeta[i].canID,
 8000b36:	4a54      	ldr	r2, [pc, #336]	@ (8000c88 <canTX5Hz+0x184>)
 8000b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b3a:	015b      	lsls	r3, r3, #5
 8000b3c:	4413      	add	r3, r2
 8000b3e:	8819      	ldrh	r1, [r3, #0]
                (void *) &(canTractiveRXMeta[i].payload),
 8000b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b42:	015b      	lsls	r3, r3, #5
 8000b44:	3318      	adds	r3, #24
 8000b46:	4a50      	ldr	r2, [pc, #320]	@ (8000c88 <canTX5Hz+0x184>)
 8000b48:	441a      	add	r2, r3
            canTX(
 8000b4a:	2364      	movs	r3, #100	@ 0x64
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	2308      	movs	r3, #8
 8000b50:	2000      	movs	r0, #0
 8000b52:	f000 fb8d 	bl	8001270 <canTX>
 8000b56:	e000      	b.n	8000b5a <canTX5Hz+0x56>
            if (cmr_canRXMetaTimeoutError(&canTractiveRXMeta[i], xTaskGetTickCountFromISR()) < 0) continue;
 8000b58:	bf00      	nop
        for (size_t i = 0; i <= CANRX_TRAC_INV_RR_ACT2; i++) {
 8000b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b62:	2b07      	cmp	r3, #7
 8000b64:	d9d9      	bls.n	8000b1a <canTX5Hz+0x16>
                sizeof(cmr_canAMKActualValues1_t),
                canTX5Hz_period_ms
            );
        }

        const cmr_canAMKSetpoints_t *amkSetpointsFL = getAMKSetpoints(MOTOR_FL);
 8000b66:	2002      	movs	r0, #2
 8000b68:	f005 fbf8 	bl	800635c <getAMKSetpoints>
 8000b6c:	6278      	str	r0, [r7, #36]	@ 0x24
        const cmr_canAMKSetpoints_t *amkSetpointsFR = getAMKSetpoints(MOTOR_FR);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f005 fbf4 	bl	800635c <getAMKSetpoints>
 8000b74:	6238      	str	r0, [r7, #32]
        const cmr_canAMKSetpoints_t *amkSetpointsRL = getAMKSetpoints(MOTOR_RL);
 8000b76:	2003      	movs	r0, #3
 8000b78:	f005 fbf0 	bl	800635c <getAMKSetpoints>
 8000b7c:	61f8      	str	r0, [r7, #28]
        const cmr_canAMKSetpoints_t *amkSetpointsRR = getAMKSetpoints(MOTOR_RR);
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f005 fbec 	bl	800635c <getAMKSetpoints>
 8000b84:	61b8      	str	r0, [r7, #24]

        canTX(CMR_CAN_BUS_VEH, CMR_CANID_AMK_FL_SETPOINTS, amkSetpointsFL, sizeof(*amkSetpointsFL), canTX5Hz_period_ms);
 8000b86:	2364      	movs	r3, #100	@ 0x64
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	2308      	movs	r3, #8
 8000b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b8e:	f240 1189 	movw	r1, #393	@ 0x189
 8000b92:	2000      	movs	r0, #0
 8000b94:	f000 fb6c 	bl	8001270 <canTX>
        canTX(CMR_CAN_BUS_VEH, CMR_CANID_AMK_FR_SETPOINTS, amkSetpointsFR, sizeof(*amkSetpointsFR), canTX5Hz_period_ms);
 8000b98:	2364      	movs	r3, #100	@ 0x64
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	2308      	movs	r3, #8
 8000b9e:	6a3a      	ldr	r2, [r7, #32]
 8000ba0:	f44f 71c2 	mov.w	r1, #388	@ 0x184
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f000 fb63 	bl	8001270 <canTX>
        canTX(CMR_CAN_BUS_VEH, CMR_CANID_AMK_RL_SETPOINTS, amkSetpointsRL, sizeof(*amkSetpointsRL), canTX5Hz_period_ms);
 8000baa:	2364      	movs	r3, #100	@ 0x64
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2308      	movs	r3, #8
 8000bb0:	69fa      	ldr	r2, [r7, #28]
 8000bb2:	f240 1185 	movw	r1, #389	@ 0x185
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f000 fb5a 	bl	8001270 <canTX>
        canTX(CMR_CAN_BUS_VEH, CMR_CANID_AMK_RR_SETPOINTS, amkSetpointsRR, sizeof(*amkSetpointsRR), canTX5Hz_period_ms);
 8000bbc:	2364      	movs	r3, #100	@ 0x64
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	2308      	movs	r3, #8
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f000 fb51 	bl	8001270 <canTX>


        // Forward SBG Systems messages to vehicle CAN at lower 5Hz rate
        for (size_t i = 0; i < CANRX_DAQ_LEN; i++) {
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000bd2:	e040      	b.n	8000c56 <canTX5Hz+0x152>

            uint16_t canID = canDaqRXMeta[i].canID;
 8000bd4:	4a2d      	ldr	r2, [pc, #180]	@ (8000c8c <canTX5Hz+0x188>)
 8000bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bd8:	015b      	lsls	r3, r3, #5
 8000bda:	4413      	add	r3, r2
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	827b      	strh	r3, [r7, #18]
            if (canID == CMR_CANID_EMD_MEASUREMENT || i == CANRX_DAQ_MEMORATOR_BROADCAST) {
 8000be0:	8a7b      	ldrh	r3, [r7, #18]
 8000be2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000be6:	d030      	beq.n	8000c4a <canTX5Hz+0x146>
 8000be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bea:	2b0e      	cmp	r3, #14
 8000bec:	d02d      	beq.n	8000c4a <canTX5Hz+0x146>
                continue;
                canID = CMR_CANID_EMD_MEASUREMENT_RETX;
            }

            // Do not transmit if we haven't received that message lately
            if (cmr_canRXMetaTimeoutError(&canDaqRXMeta[i], xTaskGetTickCountFromISR()) < 0) continue;
 8000bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bf0:	015b      	lsls	r3, r3, #5
 8000bf2:	4a26      	ldr	r2, [pc, #152]	@ (8000c8c <canTX5Hz+0x188>)
 8000bf4:	189c      	adds	r4, r3, r2
 8000bf6:	f00f fcff 	bl	80105f8 <xTaskGetTickCountFromISR>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4620      	mov	r0, r4
 8000c00:	f00b fbdb 	bl	800c3ba <cmr_canRXMetaTimeoutError>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db21      	blt.n	8000c4e <canTX5Hz+0x14a>

            // 7 messages in RX stuct are 6 bytes long except position message and EMD message
            size_t message_size = (
                (i == CANRX_DAQ_SBG_POS || (i >= CANRX_DAQ_LOAD_FL && i <= CANRX_DAQ_LOAD_RR) || (i >= CANRX_DAQ_LINPOTS_LEFTS && i <= CANRX_DAQ_LINPOTS_RIGHTS)) ?
                8 : ((i == CANRX_DAQ_SBG_SLIPANGLE) ? 7 : 6)
 8000c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d012      	beq.n	8000c36 <canTX5Hz+0x132>
                (i == CANRX_DAQ_SBG_POS || (i >= CANRX_DAQ_LOAD_FL && i <= CANRX_DAQ_LOAD_RR) || (i >= CANRX_DAQ_LINPOTS_LEFTS && i <= CANRX_DAQ_LINPOTS_RIGHTS)) ?
 8000c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <canTX5Hz+0x118>
 8000c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c18:	2b0a      	cmp	r3, #10
 8000c1a:	d90c      	bls.n	8000c36 <canTX5Hz+0x132>
 8000c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c1e:	2b0b      	cmp	r3, #11
 8000c20:	d902      	bls.n	8000c28 <canTX5Hz+0x124>
 8000c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c24:	2b0d      	cmp	r3, #13
 8000c26:	d906      	bls.n	8000c36 <canTX5Hz+0x132>
                8 : ((i == CANRX_DAQ_SBG_SLIPANGLE) ? 7 : 6)
 8000c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c2a:	2b0b      	cmp	r3, #11
 8000c2c:	d101      	bne.n	8000c32 <canTX5Hz+0x12e>
 8000c2e:	2307      	movs	r3, #7
 8000c30:	e002      	b.n	8000c38 <canTX5Hz+0x134>
 8000c32:	2306      	movs	r3, #6
 8000c34:	e000      	b.n	8000c38 <canTX5Hz+0x134>
 8000c36:	2308      	movs	r3, #8
            size_t message_size = (
 8000c38:	60fb      	str	r3, [r7, #12]
            );

            if (canID == CMR_CANID_EMD_MEASUREMENT) {
 8000c3a:	8a7b      	ldrh	r3, [r7, #18]
 8000c3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c40:	d106      	bne.n	8000c50 <canTX5Hz+0x14c>
                canID = CMR_CANID_EMD_MEASUREMENT_RETX;
 8000c42:	f240 4301 	movw	r3, #1025	@ 0x401
 8000c46:	827b      	strh	r3, [r7, #18]
 8000c48:	e002      	b.n	8000c50 <canTX5Hz+0x14c>
                continue;
 8000c4a:	bf00      	nop
 8000c4c:	e000      	b.n	8000c50 <canTX5Hz+0x14c>
            if (cmr_canRXMetaTimeoutError(&canDaqRXMeta[i], xTaskGetTickCountFromISR()) < 0) continue;
 8000c4e:	bf00      	nop
        for (size_t i = 0; i < CANRX_DAQ_LEN; i++) {
 8000c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c52:	3301      	adds	r3, #1
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c58:	2b0e      	cmp	r3, #14
 8000c5a:	d9bb      	bls.n	8000bd4 <canTX5Hz+0xd0>
//                canTX5Hz_period_ms
//            );
        }

        // Send DRS state and debug data
        const cmr_canCDCDRSStates_t *drsStatesInfo = getDRSInfo();
 8000c5c:	f003 fa32 	bl	80040c4 <getDRSInfo>
 8000c60:	6178      	str	r0, [r7, #20]
        canTX(CMR_CAN_BUS_VEH, CMR_CANID_DRS_STATE, drsStatesInfo, sizeof(*drsStatesInfo), canTX5Hz_period_ms);
 8000c62:	2364      	movs	r3, #100	@ 0x64
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	2304      	movs	r3, #4
 8000c68:	697a      	ldr	r2, [r7, #20]
 8000c6a:	f240 512c 	movw	r1, #1324	@ 0x52c
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f000 fafe 	bl	8001270 <canTX>

        transmitCDC_DIMconfigMessages();
 8000c74:	f000 fb7e 	bl	8001374 <transmitCDC_DIMconfigMessages>

        vTaskDelayUntil(&lastWakeTime, canTX5Hz_period_ms);
 8000c78:	2264      	movs	r2, #100	@ 0x64
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f00f fb33 	bl	80102ec <vTaskDelayUntil>
    while (1) {
 8000c86:	e745      	b.n	8000b14 <canTX5Hz+0x10>
 8000c88:	24000188 	.word	0x24000188
 8000c8c:	240002a8 	.word	0x240002a8

08000c90 <canTX1Hz>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void canTX1Hz(void *pvParameters) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af02      	add	r7, sp, #8
 8000c96:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    TickType_t lastWakeTime = xTaskGetTickCount();
 8000c98:	f00f fc9e 	bl	80105d8 <xTaskGetTickCount>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	613b      	str	r3, [r7, #16]
    while (1) {
        canTX(CMR_CAN_BUS_VEH, CMR_CANID_CDC_RTC_DATA_OUT, &time, sizeof(time), canTX1Hz_period_ms);
 8000ca0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	4a15      	ldr	r2, [pc, #84]	@ (8000d00 <canTX1Hz+0x70>)
 8000caa:	f240 61a2 	movw	r1, #1698	@ 0x6a2
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f000 fade 	bl	8001270 <canTX>
        cmr_canCDCOdometer_t odometer = (cmr_canCDCOdometer_t) {
 8000cb4:	4b13      	ldr	r3, [pc, #76]	@ (8000d04 <canTX1Hz+0x74>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	60fb      	str	r3, [r7, #12]
            .odometer_km = odometer_km
        };
        canTX(CMR_CAN_BUS_VEH, CMR_CANID_CDC_ODOMETER, &odometer, sizeof(odometer), canTX1Hz_period_ms);
 8000cba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cbe:	f107 020c 	add.w	r2, r7, #12
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	f240 61c2 	movw	r1, #1730	@ 0x6c2
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f000 fad0 	bl	8001270 <canTX>
        
        cmr_canCDCControlsStatus_t *controlsStatus = getControlsStatus();
 8000cd0:	f000 ff2e 	bl	8001b30 <getControlsStatus>
 8000cd4:	6178      	str	r0, [r7, #20]

        canTX(CMR_CAN_BUS_VEH, CMR_CANID_CDC_CONTROLS_STATUS, controlsStatus, sizeof(cmr_canCDCControlsStatus_t), canTX1Hz_period_ms);
 8000cd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2302      	movs	r3, #2
 8000cde:	697a      	ldr	r2, [r7, #20]
 8000ce0:	f240 61d2 	movw	r1, #1746	@ 0x6d2
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f000 fac3 	bl	8001270 <canTX>
        // TODO: constantly send current parameters
        vTaskDelayUntil(&lastWakeTime, canTX1Hz_period_ms);
 8000cea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cee:	f107 0310 	add.w	r3, r7, #16
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f00f faf9 	bl	80102ec <vTaskDelayUntil>
    while (1) {
 8000cfa:	bf00      	nop
 8000cfc:	e7d0      	b.n	8000ca0 <canTX1Hz+0x10>
 8000cfe:	bf00      	nop
 8000d00:	24008d38 	.word	0x24008d38
 8000d04:	24008d40 	.word	0x24008d40

08000d08 <canGetPayload>:
    }


}

void *canGetPayload(canRX_t rxMsg) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
    configASSERT(rxMsg < CANRX_LEN);
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	2b08      	cmp	r3, #8
 8000d16:	d904      	bls.n	8000d22 <canGetPayload+0x1a>
 8000d18:	f240 21be 	movw	r1, #702	@ 0x2be
 8000d1c:	4806      	ldr	r0, [pc, #24]	@ (8000d38 <canGetPayload+0x30>)
 8000d1e:	f00d f98c 	bl	800e03a <cmr_panic>

    cmr_canRXMeta_t *rxMeta = &(canRXMeta[rxMsg]);
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	015b      	lsls	r3, r3, #5
 8000d26:	4a05      	ldr	r2, [pc, #20]	@ (8000d3c <canGetPayload+0x34>)
 8000d28:	4413      	add	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]

    return (void *)(&rxMeta->payload);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	3318      	adds	r3, #24
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	0801f970 	.word	0x0801f970
 8000d3c:	24000488 	.word	0x24000488

08000d40 <getReceivedDriver>:
 * 
 * @param canID 
 * @param packet_number 
 * @return driver returns -1 if not found
 */
int getReceivedDriver(uint16_t canID, int *packet_number) {
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	80fb      	strh	r3, [r7, #6]
    // Return quickly so that callback doesn't take a long time
    if (canID < CMR_CANID_DIM_CONFIG0_DRV0 || canID > CMR_CANID_DIM_CONFIG3_DRV3) {
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8000d52:	d304      	bcc.n	8000d5e <getReceivedDriver+0x1e>
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	f240 621b 	movw	r2, #1563	@ 0x61b
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d902      	bls.n	8000d64 <getReceivedDriver+0x24>
        return -1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d62:	e041      	b.n	8000de8 <getReceivedDriver+0xa8>
    }
    // TODO: condense this logic
    if (canID >= CMR_CANID_DIM_CONFIG0_DRV0 && canID <= CMR_CANID_DIM_CONFIG3_DRV0) {
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8000d6a:	d30b      	bcc.n	8000d84 <getReceivedDriver+0x44>
 8000d6c:	88fb      	ldrh	r3, [r7, #6]
 8000d6e:	f240 6203 	movw	r2, #1539	@ 0x603
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d806      	bhi.n	8000d84 <getReceivedDriver+0x44>
        *packet_number = canID - CMR_CANID_DIM_CONFIG0_DRV0;
 8000d76:	88fb      	ldrh	r3, [r7, #6]
 8000d78:	f5a3 62c0 	sub.w	r2, r3, #1536	@ 0x600
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	601a      	str	r2, [r3, #0]
        return 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	e031      	b.n	8000de8 <getReceivedDriver+0xa8>
    }
    if (canID >= CMR_CANID_DIM_CONFIG0_DRV1 && canID <= CMR_CANID_DIM_CONFIG3_DRV1) {
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8000d8a:	d30b      	bcc.n	8000da4 <getReceivedDriver+0x64>
 8000d8c:	88fb      	ldrh	r3, [r7, #6]
 8000d8e:	f240 620b 	movw	r2, #1547	@ 0x60b
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d806      	bhi.n	8000da4 <getReceivedDriver+0x64>
        *packet_number = canID - CMR_CANID_DIM_CONFIG0_DRV1;
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	f5a3 62c1 	sub.w	r2, r3, #1544	@ 0x608
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	601a      	str	r2, [r3, #0]
        return 1;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e021      	b.n	8000de8 <getReceivedDriver+0xa8>
    }
    if (canID >= CMR_CANID_DIM_CONFIG0_DRV2 && canID <= CMR_CANID_DIM_CONFIG3_DRV2) {
 8000da4:	88fb      	ldrh	r3, [r7, #6]
 8000da6:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8000daa:	d30b      	bcc.n	8000dc4 <getReceivedDriver+0x84>
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	f240 6213 	movw	r2, #1555	@ 0x613
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d806      	bhi.n	8000dc4 <getReceivedDriver+0x84>
        *packet_number = canID - CMR_CANID_DIM_CONFIG0_DRV2;
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	f5a3 62c2 	sub.w	r2, r3, #1552	@ 0x610
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	601a      	str	r2, [r3, #0]
        return 2;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	e011      	b.n	8000de8 <getReceivedDriver+0xa8>
    }
    if (canID >= CMR_CANID_DIM_CONFIG0_DRV3 && canID <= CMR_CANID_DIM_CONFIG3_DRV3) {
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	f5b3 6fc3 	cmp.w	r3, #1560	@ 0x618
 8000dca:	d30b      	bcc.n	8000de4 <getReceivedDriver+0xa4>
 8000dcc:	88fb      	ldrh	r3, [r7, #6]
 8000dce:	f240 621b 	movw	r2, #1563	@ 0x61b
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d806      	bhi.n	8000de4 <getReceivedDriver+0xa4>
        *packet_number = canID - CMR_CANID_DIM_CONFIG0_DRV3;
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	f5a3 62c3 	sub.w	r2, r3, #1560	@ 0x618
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	601a      	str	r2, [r3, #0]
        return 3;
 8000de0:	2303      	movs	r3, #3
 8000de2:	e001      	b.n	8000de8 <getReceivedDriver+0xa8>
    }
    // If nothing matches, return -1
    return -1;
 8000de4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <dim_params_callback>:

/** @brief All callback for recieving config msgs from DIM
 */
void dim_params_callback (cmr_can_t *canb_rx, uint16_t canID, const void *data, size_t dataLen) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b090      	sub	sp, #64	@ 0x40
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	607a      	str	r2, [r7, #4]
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	460b      	mov	r3, r1
 8000e02:	817b      	strh	r3, [r7, #10]
    // basic filter for wrong canids
    if(canID < CMR_CANID_DIM_CONFIG0_DRV0 || canID > CMR_CANID_CDC_CONFIG3_DRV3) return;
 8000e04:	897b      	ldrh	r3, [r7, #10]
 8000e06:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8000e0a:	f0c0 80aa 	bcc.w	8000f62 <dim_params_callback+0x16e>
 8000e0e:	897b      	ldrh	r3, [r7, #10]
 8000e10:	f5b3 6fc4 	cmp.w	r3, #1568	@ 0x620
 8000e14:	f080 80a5 	bcs.w	8000f62 <dim_params_callback+0x16e>

    static bool gotten_packet[num_config_packets] = {0};
    static TickType_t lastDriverChangeTime = 0;
    TickType_t currentTime = xTaskGetTickCount();
 8000e18:	f00f fbde 	bl	80105d8 <xTaskGetTickCount>
 8000e1c:	6378      	str	r0, [r7, #52]	@ 0x34

    // exit if not glv or hv-enable
    volatile cmr_canHeartbeat_t *vsm_heartbeat = (cmr_canHeartbeat_t *) canVehicleGetPayload(CANRX_VEH_HEARTBEAT_VSM);
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f000 fa4e 	bl	80012c0 <canVehicleGetPayload>
 8000e24:	6338      	str	r0, [r7, #48]	@ 0x30
    cmr_canVSMState_t vsm_state = vsm_heartbeat->state;
 8000e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    // if (!(vsm_state == CMR_CAN_VSM_STATE_GLV_ON || vsm_state == CMR_CAN_VSM_STATE_HV_EN)) return;

    // calculate what config packet this message is
    int packet_number = (canID - CMR_CANID_DIM_CONFIG0_DRV0) % num_config_packets;
 8000e2e:	897b      	ldrh	r3, [r7, #10]
 8000e30:	f5a3 63c0 	sub.w	r3, r3, #1536	@ 0x600
 8000e34:	425a      	negs	r2, r3
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	f002 0203 	and.w	r2, r2, #3
 8000e3e:	bf58      	it	pl
 8000e40:	4253      	negpl	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]

    // calculate what config packet this message is and the driver
    cmr_driver_profile_t recievedDriver = getReceivedDriver(canID, &packet_number);
 8000e44:	f107 0210 	add.w	r2, r7, #16
 8000e48:	897b      	ldrh	r3, [r7, #10]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff77 	bl	8000d40 <getReceivedDriver>
 8000e52:	4603      	mov	r3, r0
 8000e54:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    if (recievedDriver == -1) return;

    /* Actual logic starts here */
    
    // exit if just changed driver and let DIM stop sending data
    if (currentTime - lastDriverChangeTime < 10000) return;
 8000e58:	4b46      	ldr	r3, [pc, #280]	@ (8000f74 <dim_params_callback+0x180>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d97e      	bls.n	8000f66 <dim_params_callback+0x172>

    // cast the data to the appropriate format
    cmr_canDIMCDCconfig_t *dim_data = (cmr_canDIMCDCconfig_t *) data;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    // cast the data to an array for easy indexing
    uint8_t *dim_data_arr = (uint8_t*) dim_data;
 8000e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e6e:	627b      	str	r3, [r7, #36]	@ 0x24

    // Copy received data to parametersFromDIM - add 1 because sending Driver is encoded in CAN ID
    int current_copy_index = packet_number*sizeof(cmr_canDIMCDCconfig_t) + 1;
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	3301      	adds	r3, #1
 8000e76:	623b      	str	r3, [r7, #32]
    // Deal with Driver (set to index 0)
    parametersFromDIM[0] = recievedDriver;
 8000e78:	4a3f      	ldr	r2, [pc, #252]	@ (8000f78 <dim_params_callback+0x184>)
 8000e7a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000e7e:	7013      	strb	r3, [r2, #0]
    // note, the following only works bc each element is a byte
    int size_to_copy = min( (MAX_MENU_ITEMS - current_copy_index), sizeof(cmr_canDIMCDCconfig_t) );
 8000e80:	6a3b      	ldr	r3, [r7, #32]
 8000e82:	f1c3 0311 	rsb	r3, r3, #17
 8000e86:	61fb      	str	r3, [r7, #28]
 8000e88:	2304      	movs	r3, #4
 8000e8a:	61bb      	str	r3, [r7, #24]
 8000e8c:	69fa      	ldr	r2, [r7, #28]
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	4293      	cmp	r3, r2
 8000e92:	bf28      	it	cs
 8000e94:	4613      	movcs	r3, r2
 8000e96:	617b      	str	r3, [r7, #20]
    memcpy((void *) &(parametersFromDIM[current_copy_index]), dim_data_arr, size_to_copy);
 8000e98:	6a3b      	ldr	r3, [r7, #32]
 8000e9a:	4a37      	ldr	r2, [pc, #220]	@ (8000f78 <dim_params_callback+0x184>)
 8000e9c:	4413      	add	r3, r2
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f01d fb92 	bl	801e5cc <memcpy>
    gotten_packet[packet_number] = true;
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	4a34      	ldr	r2, [pc, #208]	@ (8000f7c <dim_params_callback+0x188>)
 8000eac:	2101      	movs	r1, #1
 8000eae:	54d1      	strb	r1, [r2, r3]

    // check if all config messages have been received
    bool all_packets_recieved = true;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    for(uint8_t i = 0; i < num_config_packets; i++){
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8000ebc:	e011      	b.n	8000ee2 <dim_params_callback+0xee>
        all_packets_recieved &= gotten_packet[i];
 8000ebe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000ec2:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8000ec6:	492d      	ldr	r1, [pc, #180]	@ (8000f7c <dim_params_callback+0x188>)
 8000ec8:	5c8a      	ldrb	r2, [r1, r2]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	bf14      	ite	ne
 8000ed0:	2301      	movne	r3, #1
 8000ed2:	2300      	moveq	r3, #0
 8000ed4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    for(uint8_t i = 0; i < num_config_packets; i++){
 8000ed8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000edc:	3301      	adds	r3, #1
 8000ede:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8000ee2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d9e9      	bls.n	8000ebe <dim_params_callback+0xca>
    }

    // only proceed with the following logic to trigger an FRAM update if all the packets have been received
    if (all_packets_recieved == false) return;
 8000eea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000eee:	f083 0301 	eor.w	r3, r3, #1
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d138      	bne.n	8000f6a <dim_params_callback+0x176>

    // Reset received flags
    for(uint8_t i = 0; i < num_config_packets; i++){
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8000efe:	e009      	b.n	8000f14 <dim_params_callback+0x120>
        gotten_packet[i] = false;
 8000f00:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000f04:	4a1d      	ldr	r2, [pc, #116]	@ (8000f7c <dim_params_callback+0x188>)
 8000f06:	2100      	movs	r1, #0
 8000f08:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i = 0; i < num_config_packets; i++){
 8000f0a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000f0e:	3301      	adds	r3, #1
 8000f10:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8000f14:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d9f1      	bls.n	8000f00 <dim_params_callback+0x10c>
    }


    // If RX Driver is same as current driver, save local copy and ensure all packets are recieved before writing to FRAM
    if (recievedDriver == currentDriver) {
 8000f1c:	4b18      	ldr	r3, [pc, #96]	@ (8000f80 <dim_params_callback+0x18c>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d120      	bne.n	8000f6c <dim_params_callback+0x178>
        framWrite_flag = true;
 8000f2a:	4b16      	ldr	r3, [pc, #88]	@ (8000f84 <dim_params_callback+0x190>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]

        // Update the config_menu_main_array
        for (int i = 0; i < MAX_MENU_ITEMS; i++) {
 8000f30:	2300      	movs	r3, #0
 8000f32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000f34:	e011      	b.n	8000f5a <dim_params_callback+0x166>
            config_menu_main_array[i].value.value = parametersFromDIM[i];
 8000f36:	4a10      	ldr	r2, [pc, #64]	@ (8000f78 <dim_params_callback+0x184>)
 8000f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f3a:	4413      	add	r3, r2
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b2d8      	uxtb	r0, r3
 8000f40:	4911      	ldr	r1, [pc, #68]	@ (8000f88 <dim_params_callback+0x194>)
 8000f42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000f44:	4613      	mov	r3, r2
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	4413      	add	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	3319      	adds	r3, #25
 8000f50:	4602      	mov	r2, r0
 8000f52:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < MAX_MENU_ITEMS; i++) {
 8000f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f56:	3301      	adds	r3, #1
 8000f58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f5c:	2b10      	cmp	r3, #16
 8000f5e:	ddea      	ble.n	8000f36 <dim_params_callback+0x142>
 8000f60:	e004      	b.n	8000f6c <dim_params_callback+0x178>
    if(canID < CMR_CANID_DIM_CONFIG0_DRV0 || canID > CMR_CANID_CDC_CONFIG3_DRV3) return;
 8000f62:	bf00      	nop
 8000f64:	e002      	b.n	8000f6c <dim_params_callback+0x178>
    if (currentTime - lastDriverChangeTime < 10000) return;
 8000f66:	bf00      	nop
 8000f68:	e000      	b.n	8000f6c <dim_params_callback+0x178>
    if (all_packets_recieved == false) return;
 8000f6a:	bf00      	nop
        }

    }
}
 8000f6c:	3740      	adds	r7, #64	@ 0x40
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	24006ee8 	.word	0x24006ee8
 8000f78:	24001a04 	.word	0x24001a04
 8000f7c:	24006eec 	.word	0x24006eec
 8000f80:	24001a15 	.word	0x24001a15
 8000f84:	24001a16 	.word	0x24001a16
 8000f88:	2400062c 	.word	0x2400062c

08000f8c <conditionalCallback>:

void conditionalCallback(cmr_can_t *canb_rx, uint16_t canID, const void *data, size_t dataLen) {
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b08d      	sub	sp, #52	@ 0x34
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	817b      	strh	r3, [r7, #10]
	uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000f9c:	4b41      	ldr	r3, [pc, #260]	@ (80010a4 <conditionalCallback+0x118>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	623b      	str	r3, [r7, #32]

	size_t iface_idx = (canb_rx - can);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4a40      	ldr	r2, [pc, #256]	@ (80010a8 <conditionalCallback+0x11c>)
 8000fa6:	1a9b      	subs	r3, r3, r2
 8000fa8:	10db      	asrs	r3, r3, #3
 8000faa:	4a40      	ldr	r2, [pc, #256]	@ (80010ac <conditionalCallback+0x120>)
 8000fac:	fb02 f303 	mul.w	r3, r2, r3
 8000fb0:	61fb      	str	r3, [r7, #28]
    configASSERT(iface_idx < CMR_CAN_BUS_NUM);
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d904      	bls.n	8000fc2 <conditionalCallback+0x36>
 8000fb8:	f44f 714c 	mov.w	r1, #816	@ 0x330
 8000fbc:	483c      	ldr	r0, [pc, #240]	@ (80010b0 <conditionalCallback+0x124>)
 8000fbe:	f00d f83c 	bl	800e03a <cmr_panic>
 
    // If DIM config message, handle it
    if(CMR_CANID_CDC_CONFIG3_DRV3 >= canID && canID >= CMR_CANID_DIM_CONFIG0_DRV0) {
 8000fc2:	897b      	ldrh	r3, [r7, #10]
 8000fc4:	f5b3 6fc4 	cmp.w	r3, #1568	@ 0x620
 8000fc8:	d209      	bcs.n	8000fde <conditionalCallback+0x52>
 8000fca:	897b      	ldrh	r3, [r7, #10]
 8000fcc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8000fd0:	d305      	bcc.n	8000fde <conditionalCallback+0x52>
        dim_params_callback(canb_rx, canID, data, dataLen);
 8000fd2:	8979      	ldrh	r1, [r7, #10]
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f7ff ff0b 	bl	8000df4 <dim_params_callback>
    }

    if(canID == CMR_CANID_CDC_POWER_UPDATE) {
 8000fde:	897b      	ldrh	r3, [r7, #10]
 8000fe0:	f240 62e2 	movw	r2, #1762	@ 0x6e2
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d106      	bne.n	8000ff6 <conditionalCallback+0x6a>
    	cmr_canCDCPowerLimit_t *limit = (cmr_canCDCPowerLimit_t*) data;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	61bb      	str	r3, [r7, #24]
    	setPowerLimit(limit->powerLimit_kW);
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f006 f973 	bl	80072dc <setPowerLimit>
    }

    // Update the RX Meta array
    cmr_canRXMeta_t *rxMetaArray = NULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t rxMetaArrayLen = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (iface_idx == CMR_CAN_BUS_VEH) {
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d104      	bne.n	800100e <conditionalCallback+0x82>
        rxMetaArray = canVehicleRXMeta;
 8001004:	4b2b      	ldr	r3, [pc, #172]	@ (80010b4 <conditionalCallback+0x128>)
 8001006:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rxMetaArrayLen = CANRX_VEH_LEN;
 8001008:	230b      	movs	r3, #11
 800100a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800100c:	e00e      	b.n	800102c <conditionalCallback+0xa0>
    } else if (iface_idx == CMR_CAN_BUS_DAQ) {
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d104      	bne.n	800101e <conditionalCallback+0x92>
        rxMetaArray = canDaqRXMeta;
 8001014:	4b28      	ldr	r3, [pc, #160]	@ (80010b8 <conditionalCallback+0x12c>)
 8001016:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rxMetaArrayLen = CANRX_DAQ_LEN;
 8001018:	230f      	movs	r3, #15
 800101a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800101c:	e006      	b.n	800102c <conditionalCallback+0xa0>
    } else if (iface_idx == CMR_CAN_BUS_TRAC) {
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d103      	bne.n	800102c <conditionalCallback+0xa0>
        rxMetaArray = canTractiveRXMeta;
 8001024:	4b25      	ldr	r3, [pc, #148]	@ (80010bc <conditionalCallback+0x130>)
 8001026:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rxMetaArrayLen = CANRX_TRAC_LEN;
 8001028:	2309      	movs	r3, #9
 800102a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
    if (rxMetaArray != NULL) {
 800102c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800102e:	2b00      	cmp	r3, #0
 8001030:	d024      	beq.n	800107c <conditionalCallback+0xf0>
        for (uint32_t i = 0; i < rxMetaArrayLen; i++) {
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	@ 0x24
 8001036:	e01d      	b.n	8001074 <conditionalCallback+0xe8>
            if (rxMetaArray[i].canID == canID) {
 8001038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103a:	015b      	lsls	r3, r3, #5
 800103c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800103e:	4413      	add	r3, r2
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	897a      	ldrh	r2, [r7, #10]
 8001044:	429a      	cmp	r2, r3
 8001046:	d112      	bne.n	800106e <conditionalCallback+0xe2>
                memcpy((void *) rxMetaArray[i].payload, data, dataLen);
 8001048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104a:	015b      	lsls	r3, r3, #5
 800104c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800104e:	4413      	add	r3, r2
 8001050:	3318      	adds	r3, #24
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	4618      	mov	r0, r3
 8001058:	f01d fab8 	bl	801e5cc <memcpy>
                rxMetaArray[i].lastReceived_ms = xTaskGetTickCountFromISR();
 800105c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105e:	015b      	lsls	r3, r3, #5
 8001060:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001062:	18d4      	adds	r4, r2, r3
 8001064:	f00f fac8 	bl	80105f8 <xTaskGetTickCountFromISR>
 8001068:	4603      	mov	r3, r0
 800106a:	6163      	str	r3, [r4, #20]
                break;
 800106c:	e006      	b.n	800107c <conditionalCallback+0xf0>
        for (uint32_t i = 0; i < rxMetaArrayLen; i++) {
 800106e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001070:	3301      	adds	r3, #1
 8001072:	627b      	str	r3, [r7, #36]	@ 0x24
 8001074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001078:	429a      	cmp	r2, r3
 800107a:	d3dd      	bcc.n	8001038 <conditionalCallback+0xac>
            }
        }
    }
    uint32_t total_ticks = DWT->CYCCNT - au32_initial_ticks;
 800107c:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <conditionalCallback+0x118>)
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	6a3b      	ldr	r3, [r7, #32]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	617b      	str	r3, [r7, #20]
    uint32_t microsecs = total_ticks*1000000/HAL_RCC_GetHCLKFreq();
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	4a0d      	ldr	r2, [pc, #52]	@ (80010c0 <conditionalCallback+0x134>)
 800108a:	fb02 f403 	mul.w	r4, r2, r3
 800108e:	f017 fef5 	bl	8018e7c <HAL_RCC_GetHCLKFreq>
 8001092:	4603      	mov	r3, r0
 8001094:	fbb4 f3f3 	udiv	r3, r4, r3
 8001098:	613b      	str	r3, [r7, #16]
}
 800109a:	bf00      	nop
 800109c:	3734      	adds	r7, #52	@ 0x34
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd90      	pop	{r4, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e0001000 	.word	0xe0001000
 80010a8:	24001a20 	.word	0x24001a20
 80010ac:	bdef7bdf 	.word	0xbdef7bdf
 80010b0:	0801f9a4 	.word	0x0801f9a4
 80010b4:	24000028 	.word	0x24000028
 80010b8:	240002a8 	.word	0x240002a8
 80010bc:	24000188 	.word	0x24000188
 80010c0:	000f4240 	.word	0x000f4240

080010c4 <canInit>:

/**
 * @brief Initializes the CAN interface.
 */
void canInit(void) {
 80010c4:	b5b0      	push	{r4, r5, r7, lr}
 80010c6:	b0a2      	sub	sp, #136	@ 0x88
 80010c8:	af06      	add	r7, sp, #24
    // Vehicle CAN initialization - CAN1
	cmr_FDcanInit(
 80010ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010ce:	9305      	str	r3, [sp, #20]
 80010d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001200 <canInit+0x13c>)
 80010d2:	9304      	str	r3, [sp, #16]
 80010d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010d8:	9303      	str	r3, [sp, #12]
 80010da:	4b49      	ldr	r3, [pc, #292]	@ (8001200 <canInit+0x13c>)
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	4b49      	ldr	r3, [pc, #292]	@ (8001204 <canInit+0x140>)
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	2300      	movs	r3, #0
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2300      	movs	r3, #0
 80010e8:	2201      	movs	r2, #1
 80010ea:	4947      	ldr	r1, [pc, #284]	@ (8001208 <canInit+0x144>)
 80010ec:	4847      	ldr	r0, [pc, #284]	@ (800120c <canInit+0x148>)
 80010ee:	f00b f9dd 	bl	800c4ac <cmr_FDcanInit>
		GPIOB, GPIO_PIN_12,     // CAN1 RX port/pin.
		GPIOB, GPIO_PIN_13      // CAN1 TX port/pin.
    );

    // Tractive CAN initialization. - CAN3
	cmr_FDcanInit(
 80010f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010f6:	9305      	str	r3, [sp, #20]
 80010f8:	4b45      	ldr	r3, [pc, #276]	@ (8001210 <canInit+0x14c>)
 80010fa:	9304      	str	r3, [sp, #16]
 80010fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001100:	9303      	str	r3, [sp, #12]
 8001102:	4b43      	ldr	r3, [pc, #268]	@ (8001210 <canInit+0x14c>)
 8001104:	9302      	str	r3, [sp, #8]
 8001106:	4b3f      	ldr	r3, [pc, #252]	@ (8001204 <canInit+0x140>)
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	2300      	movs	r3, #0
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2300      	movs	r3, #0
 8001110:	2201      	movs	r2, #1
 8001112:	4940      	ldr	r1, [pc, #256]	@ (8001214 <canInit+0x150>)
 8001114:	4840      	ldr	r0, [pc, #256]	@ (8001218 <canInit+0x154>)
 8001116:	f00b f9c9 	bl	800c4ac <cmr_FDcanInit>
		GPIOD, GPIO_PIN_12,     // CAN3 RX port/pin.
		GPIOD, GPIO_PIN_13      // CAN3 TX port/pin.
	);

    // DAQ CAN init. - CAN2
    cmr_FDcanInit(
 800111a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800111e:	9305      	str	r3, [sp, #20]
 8001120:	4b3e      	ldr	r3, [pc, #248]	@ (800121c <canInit+0x158>)
 8001122:	9304      	str	r3, [sp, #16]
 8001124:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001128:	9303      	str	r3, [sp, #12]
 800112a:	4b3c      	ldr	r3, [pc, #240]	@ (800121c <canInit+0x158>)
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	4b35      	ldr	r3, [pc, #212]	@ (8001204 <canInit+0x140>)
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	2300      	movs	r3, #0
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2300      	movs	r3, #0
 8001138:	2201      	movs	r2, #1
 800113a:	4939      	ldr	r1, [pc, #228]	@ (8001220 <canInit+0x15c>)
 800113c:	4839      	ldr	r0, [pc, #228]	@ (8001224 <canInit+0x160>)
 800113e:	f00b f9b5 	bl	800c4ac <cmr_FDcanInit>
        GPIOA, GPIO_PIN_11,      // CAN2 RX port/pin.
        GPIOA, GPIO_PIN_12       // CAN2 TX port/pin.
    );

    // Vehicle CAN filters.
    const cmr_canFilter_t canVehicleFilters[] = {
 8001142:	4b39      	ldr	r3, [pc, #228]	@ (8001228 <canInit+0x164>)
 8001144:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001148:	461d      	mov	r5, r3
 800114a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800114c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800114e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001152:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                CMR_CANID_VSM_SENSORS
            }
	}
    };

    cmr_canFilter(
 8001156:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800115a:	2202      	movs	r2, #2
 800115c:	4619      	mov	r1, r3
 800115e:	482b      	ldr	r0, [pc, #172]	@ (800120c <canInit+0x148>)
 8001160:	f00b fb06 	bl	800c770 <cmr_canFilter>
        &(can[CMR_CAN_BUS_VEH]), canVehicleFilters, sizeof(canVehicleFilters) / sizeof(canVehicleFilters[0])
    );

    // Tractive CAN filters.
    const cmr_canFilter_t canTractiveFilters[] = {
 8001164:	4b31      	ldr	r3, [pc, #196]	@ (800122c <canInit+0x168>)
 8001166:	f107 0420 	add.w	r4, r7, #32
 800116a:	461d      	mov	r5, r3
 800116c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800116e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001174:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001178:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                CMR_CANID_HEARTBEAT_HVI,
                CMR_CANID_HEARTBEAT_HVI
            }
        }
    };
    cmr_canFilter(
 800117c:	f107 0320 	add.w	r3, r7, #32
 8001180:	2203      	movs	r2, #3
 8001182:	4619      	mov	r1, r3
 8001184:	4827      	ldr	r0, [pc, #156]	@ (8001224 <canInit+0x160>)
 8001186:	f00b faf3 	bl	800c770 <cmr_canFilter>
        &(can[CMR_CAN_BUS_TRAC]), canTractiveFilters, sizeof(canTractiveFilters) / sizeof(canTractiveFilters[0])
    );

    // DAQ CAN filters.
    const cmr_canFilter_t canDaqFilters[] = {
 800118a:	4b29      	ldr	r3, [pc, #164]	@ (8001230 <canInit+0x16c>)
 800118c:	463c      	mov	r4, r7
 800118e:	461d      	mov	r5, r3
 8001190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001194:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001198:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                0x001, 0x001,
                0x001, 0x001
            }
        }
    };
    cmr_canFilter(
 800119c:	463b      	mov	r3, r7
 800119e:	2202      	movs	r2, #2
 80011a0:	4619      	mov	r1, r3
 80011a2:	481d      	ldr	r0, [pc, #116]	@ (8001218 <canInit+0x154>)
 80011a4:	f00b fae4 	bl	800c770 <cmr_canFilter>
        &(can[CMR_CAN_BUS_DAQ]), canDaqFilters, sizeof(canDaqFilters) / sizeof(canDaqFilters[0])
    );

    // Task initialization.

    cmr_taskInit(
 80011a8:	2202      	movs	r2, #2
 80011aa:	2300      	movs	r3, #0
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	4b21      	ldr	r3, [pc, #132]	@ (8001234 <canInit+0x170>)
 80011b0:	4921      	ldr	r1, [pc, #132]	@ (8001238 <canInit+0x174>)
 80011b2:	4822      	ldr	r0, [pc, #136]	@ (800123c <canInit+0x178>)
 80011b4:	f00d fcfa 	bl	800ebac <cmr_taskInit>
        canTX1Hz_priority,
        canTX1Hz,
        NULL
    );

    cmr_taskInit(
 80011b8:	2202      	movs	r2, #2
 80011ba:	2300      	movs	r3, #0
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	4b20      	ldr	r3, [pc, #128]	@ (8001240 <canInit+0x17c>)
 80011c0:	4920      	ldr	r1, [pc, #128]	@ (8001244 <canInit+0x180>)
 80011c2:	4821      	ldr	r0, [pc, #132]	@ (8001248 <canInit+0x184>)
 80011c4:	f00d fcf2 	bl	800ebac <cmr_taskInit>
        "CAN TX 5Hz",
        canTX5Hz_priority,
        canTX5Hz,
        NULL
    );
    cmr_taskInit(
 80011c8:	2203      	movs	r2, #3
 80011ca:	2300      	movs	r3, #0
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	4b1f      	ldr	r3, [pc, #124]	@ (800124c <canInit+0x188>)
 80011d0:	491f      	ldr	r1, [pc, #124]	@ (8001250 <canInit+0x18c>)
 80011d2:	4820      	ldr	r0, [pc, #128]	@ (8001254 <canInit+0x190>)
 80011d4:	f00d fcea 	bl	800ebac <cmr_taskInit>
        "CAN TX 10Hz",
        canTX10Hz_priority,
        canTX10Hz,
        NULL
    );
    cmr_taskInit(
 80011d8:	2205      	movs	r2, #5
 80011da:	2300      	movs	r3, #0
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	4b1e      	ldr	r3, [pc, #120]	@ (8001258 <canInit+0x194>)
 80011e0:	491e      	ldr	r1, [pc, #120]	@ (800125c <canInit+0x198>)
 80011e2:	481f      	ldr	r0, [pc, #124]	@ (8001260 <canInit+0x19c>)
 80011e4:	f00d fce2 	bl	800ebac <cmr_taskInit>
        "CAN TX 100Hz",
        canTX100Hz_priority,
        canTX100Hz,
        NULL
    );
    cmr_taskInit(
 80011e8:	2206      	movs	r2, #6
 80011ea:	2300      	movs	r3, #0
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001264 <canInit+0x1a0>)
 80011f0:	491d      	ldr	r1, [pc, #116]	@ (8001268 <canInit+0x1a4>)
 80011f2:	481e      	ldr	r0, [pc, #120]	@ (800126c <canInit+0x1a8>)
 80011f4:	f00d fcda 	bl	800ebac <cmr_taskInit>
        "CAN TX 200Hz",
        canTX200Hz_priority,
        canTX200Hz,
        NULL
    );
}
 80011f8:	bf00      	nop
 80011fa:	3770      	adds	r7, #112	@ 0x70
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001200:	58020400 	.word	0x58020400
 8001204:	08000f8d 	.word	0x08000f8d
 8001208:	4000a400 	.word	0x4000a400
 800120c:	24001a20 	.word	0x24001a20
 8001210:	58020c00 	.word	0x58020c00
 8001214:	4000d400 	.word	0x4000d400
 8001218:	24001b18 	.word	0x24001b18
 800121c:	58020000 	.word	0x58020000
 8001220:	4000a000 	.word	0x4000a000
 8001224:	24001c10 	.word	0x24001c10
 8001228:	0801fa24 	.word	0x0801fa24
 800122c:	0801fa44 	.word	0x0801fa44
 8001230:	0801fa74 	.word	0x0801fa74
 8001234:	08000c91 	.word	0x08000c91
 8001238:	0801f9e0 	.word	0x0801f9e0
 800123c:	24005e88 	.word	0x24005e88
 8001240:	08000b05 	.word	0x08000b05
 8001244:	0801f9ec 	.word	0x0801f9ec
 8001248:	24004e28 	.word	0x24004e28
 800124c:	080006dd 	.word	0x080006dd
 8001250:	0801f9f8 	.word	0x0801f9f8
 8001254:	24001d08 	.word	0x24001d08
 8001258:	08000851 	.word	0x08000851
 800125c:	0801fa04 	.word	0x0801fa04
 8001260:	24002d68 	.word	0x24002d68
 8001264:	080009a5 	.word	0x080009a5
 8001268:	0801fa14 	.word	0x0801fa14
 800126c:	24003dc8 	.word	0x24003dc8

08001270 <canTX>:
 * @param timeout The timeout, in ticks.
 *
 * @return 0 on success, or a negative error code on timeout.
 */
int ABC = 0;
int canTX(cmr_canBusID_t bus, cmr_canID_t id, const void *data, size_t len, TickType_t timeout) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af02      	add	r7, sp, #8
 8001276:	60ba      	str	r2, [r7, #8]
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	4603      	mov	r3, r0
 800127c:	73fb      	strb	r3, [r7, #15]
 800127e:	460b      	mov	r3, r1
 8001280:	81bb      	strh	r3, [r7, #12]
    configASSERT(bus < CMR_CAN_BUS_NUM);
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d904      	bls.n	8001292 <canTX+0x22>
 8001288:	f240 4107 	movw	r1, #1031	@ 0x407
 800128c:	480a      	ldr	r0, [pc, #40]	@ (80012b8 <canTX+0x48>)
 800128e:	f00c fed4 	bl	800e03a <cmr_panic>
    // RAM parsing
    // int ret = parseData((uint32_t) bus, id, data, len);
    // configASSERT(ret == 0);
    // (void) ret;

    return cmr_canTX(&(can[bus]), id, data, len, timeout);
 8001292:	7bfa      	ldrb	r2, [r7, #15]
 8001294:	4613      	mov	r3, r2
 8001296:	015b      	lsls	r3, r3, #5
 8001298:	1a9b      	subs	r3, r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	4a07      	ldr	r2, [pc, #28]	@ (80012bc <canTX+0x4c>)
 800129e:	1898      	adds	r0, r3, r2
 80012a0:	89b9      	ldrh	r1, [r7, #12]
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68ba      	ldr	r2, [r7, #8]
 80012aa:	f00b f9ad 	bl	800c608 <cmr_canTX>
 80012ae:	4603      	mov	r3, r0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	0801fa94 	.word	0x0801fa94
 80012bc:	24001a20 	.word	0x24001a20

080012c0 <canVehicleGetPayload>:
 *
 * @param msg The desired vehicle CAN message.
 *
 * @return Pointer to desired payload.
 */
volatile void *canVehicleGetPayload(canVehicleRX_t msg) {
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
    return &(canVehicleRXMeta[msg].payload);
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	015b      	lsls	r3, r3, #5
 80012ce:	3318      	adds	r3, #24
 80012d0:	4a03      	ldr	r2, [pc, #12]	@ (80012e0 <canVehicleGetPayload+0x20>)
 80012d2:	4413      	add	r3, r2
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	24000028 	.word	0x24000028

080012e4 <canTractiveGetPayload>:
 *
 * @param msg The desired tractive CAN message.
 *
 * @return Pointer to desired payload.
 */
volatile void *canTractiveGetPayload(canTractiveRX_t msg) {
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
    return &(canTractiveRXMeta[msg].payload);
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	015b      	lsls	r3, r3, #5
 80012f2:	3318      	adds	r3, #24
 80012f4:	4a03      	ldr	r2, [pc, #12]	@ (8001304 <canTractiveGetPayload+0x20>)
 80012f6:	4413      	add	r3, r2
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	24000188 	.word	0x24000188

08001308 <canDAQGetPayload>:
 *
 * @param msg The desired DAQ CAN message.
 *
 * @return Pointer to desired payload.
 */
volatile void *canDAQGetPayload(canDaqRX_t msg) {
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
    return &(canDaqRXMeta[msg].payload);
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	015b      	lsls	r3, r3, #5
 8001316:	3318      	adds	r3, #24
 8001318:	4a03      	ldr	r2, [pc, #12]	@ (8001328 <canDAQGetPayload+0x20>)
 800131a:	4413      	add	r3, r2
}
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	240002a8 	.word	0x240002a8

0800132c <canVehicleGetMeta>:
 *
 * @param msg The desired vehicle CAN message.
 *
 * @return Pointer to desired metadata.
 */
cmr_canRXMeta_t *canVehicleGetMeta(canVehicleRX_t msg) {
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
    return &(canVehicleRXMeta[msg]);
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	015b      	lsls	r3, r3, #5
 800133a:	4a04      	ldr	r2, [pc, #16]	@ (800134c <canVehicleGetMeta+0x20>)
 800133c:	4413      	add	r3, r2
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	24000028 	.word	0x24000028

08001350 <canTractiveGetMeta>:
 *
 * @param msg The desired tractive CAN message.
 *
 * @return Pointer to desired metadata.
 */
cmr_canRXMeta_t *canTractiveGetMeta(canTractiveRX_t msg) {
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
    return &(canTractiveRXMeta[msg]);
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	015b      	lsls	r3, r3, #5
 800135e:	4a04      	ldr	r2, [pc, #16]	@ (8001370 <canTractiveGetMeta+0x20>)
 8001360:	4413      	add	r3, r2
}
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	24000188 	.word	0x24000188

08001374 <transmitCDC_DIMconfigMessages>:
//    int32_t converted = (int32_t) __builtin_bswap32((uint32_t) meas->current);
//    return ((float) converted) / div;
	return 0;
}

static void transmitCDC_DIMconfigMessages(){
 8001374:	b580      	push	{r7, lr}
 8001376:	b092      	sub	sp, #72	@ 0x48
 8001378:	af02      	add	r7, sp, #8
    /* pack struct message for config */
    cmr_canDIMCDCconfig_t config0 = {
        .config_val_1 = config_menu_main_array[1].value.value,
 800137a:	4b50      	ldr	r3, [pc, #320]	@ (80014bc <transmitCDC_DIMconfigMessages+0x148>)
 800137c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001380:	b2db      	uxtb	r3, r3
    cmr_canDIMCDCconfig_t config0 = {
 8001382:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        .config_val_2 = config_menu_main_array[2].value.value,
 8001386:	4b4d      	ldr	r3, [pc, #308]	@ (80014bc <transmitCDC_DIMconfigMessages+0x148>)
 8001388:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800138c:	b2db      	uxtb	r3, r3
    cmr_canDIMCDCconfig_t config0 = {
 800138e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
        .config_val_3 = config_menu_main_array[3].value.value,
 8001392:	4b4a      	ldr	r3, [pc, #296]	@ (80014bc <transmitCDC_DIMconfigMessages+0x148>)
 8001394:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8001398:	b2db      	uxtb	r3, r3
    cmr_canDIMCDCconfig_t config0 = {
 800139a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
        .config_val_4 = config_menu_main_array[4].value.value,
 800139e:	4b47      	ldr	r3, [pc, #284]	@ (80014bc <transmitCDC_DIMconfigMessages+0x148>)
 80013a0:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 80013a4:	b2db      	uxtb	r3, r3
    cmr_canDIMCDCconfig_t config0 = {
 80013a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    };
    cmr_canDIMCDCconfig_t config1 = {
        .config_val_1 = config_menu_main_array[5].value.value,
 80013aa:	4b44      	ldr	r3, [pc, #272]	@ (80014bc <transmitCDC_DIMconfigMessages+0x148>)
 80013ac:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 80013b0:	b2db      	uxtb	r3, r3
    cmr_canDIMCDCconfig_t config1 = {
 80013b2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        .config_val_2 = config_menu_main_array[6].value.value,
 80013b6:	4b41      	ldr	r3, [pc, #260]	@ (80014bc <transmitCDC_DIMconfigMessages+0x148>)
 80013b8:	f893 30f1 	ldrb.w	r3, [r3, #241]	@ 0xf1
 80013bc:	b2db      	uxtb	r3, r3
    cmr_canDIMCDCconfig_t config1 = {
 80013be:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        .config_val_3 = config_menu_main_array[7].value.value,
 80013c2:	4b3e      	ldr	r3, [pc, #248]	@ (80014bc <transmitCDC_DIMconfigMessages+0x148>)
 80013c4:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 80013c8:	b2db      	uxtb	r3, r3
    cmr_canDIMCDCconfig_t config1 = {
 80013ca:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        .config_val_4 = config_menu_main_array[8].value.value,
 80013ce:	4b3b      	ldr	r3, [pc, #236]	@ (80014bc <transmitCDC_DIMconfigMessages+0x148>)
 80013d0:	f893 3139 	ldrb.w	r3, [r3, #313]	@ 0x139
 80013d4:	b2db      	uxtb	r3, r3
    cmr_canDIMCDCconfig_t config1 = {
 80013d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    };
    cmr_canDIMCDCconfig_t config2 = {
        .config_val_1 = config_menu_main_array[9].value.value,
 80013da:	4b38      	ldr	r3, [pc, #224]	@ (80014bc <transmitCDC_DIMconfigMessages+0x148>)
 80013dc:	f893 315d 	ldrb.w	r3, [r3, #349]	@ 0x15d
 80013e0:	b2db      	uxtb	r3, r3
    cmr_canDIMCDCconfig_t config2 = {
 80013e2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        .config_val_2 = config_menu_main_array[10].value.value,
 80013e6:	4b35      	ldr	r3, [pc, #212]	@ (80014bc <transmitCDC_DIMconfigMessages+0x148>)
 80013e8:	f893 3181 	ldrb.w	r3, [r3, #385]	@ 0x181
 80013ec:	b2db      	uxtb	r3, r3
    cmr_canDIMCDCconfig_t config2 = {
 80013ee:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
        .config_val_3 = config_menu_main_array[11].value.value,
 80013f2:	4b32      	ldr	r3, [pc, #200]	@ (80014bc <transmitCDC_DIMconfigMessages+0x148>)
 80013f4:	f893 31a5 	ldrb.w	r3, [r3, #421]	@ 0x1a5
 80013f8:	b2db      	uxtb	r3, r3
    cmr_canDIMCDCconfig_t config2 = {
 80013fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        .config_val_4 = config_menu_main_array[12].value.value,
 80013fe:	4b2f      	ldr	r3, [pc, #188]	@ (80014bc <transmitCDC_DIMconfigMessages+0x148>)
 8001400:	f893 31c9 	ldrb.w	r3, [r3, #457]	@ 0x1c9
 8001404:	b2db      	uxtb	r3, r3
    cmr_canDIMCDCconfig_t config2 = {
 8001406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    };
    cmr_canDIMCDCconfig_t config3 = {
        .config_val_1 = config_menu_main_array[13].value.value,
 800140a:	4b2c      	ldr	r3, [pc, #176]	@ (80014bc <transmitCDC_DIMconfigMessages+0x148>)
 800140c:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 8001410:	b2db      	uxtb	r3, r3
    cmr_canDIMCDCconfig_t config3 = {
 8001412:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        .config_val_2 = config_menu_main_array[14].value.value,
 8001416:	4b29      	ldr	r3, [pc, #164]	@ (80014bc <transmitCDC_DIMconfigMessages+0x148>)
 8001418:	f893 3211 	ldrb.w	r3, [r3, #529]	@ 0x211
 800141c:	b2db      	uxtb	r3, r3
    cmr_canDIMCDCconfig_t config3 = {
 800141e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        .config_val_3 = config_menu_main_array[15].value.value,
 8001422:	4b26      	ldr	r3, [pc, #152]	@ (80014bc <transmitCDC_DIMconfigMessages+0x148>)
 8001424:	f893 3235 	ldrb.w	r3, [r3, #565]	@ 0x235
 8001428:	b2db      	uxtb	r3, r3
    cmr_canDIMCDCconfig_t config3 = {
 800142a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        .config_val_4 = config_menu_main_array[16].value.value,
 800142e:	4b23      	ldr	r3, [pc, #140]	@ (80014bc <transmitCDC_DIMconfigMessages+0x148>)
 8001430:	f893 3259 	ldrb.w	r3, [r3, #601]	@ 0x259
 8001434:	b2db      	uxtb	r3, r3
    cmr_canDIMCDCconfig_t config3 = {
 8001436:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    };

    cmr_canDIMCDCconfig_t config_message_array[num_config_packets] = {
 800143a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001444:	61fb      	str	r3, [r7, #28]
 8001446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001448:	623b      	str	r3, [r7, #32]
    };

    // calculate the correct CAN ID based on the current driver
    uint32_t can_ids_config_driver[num_config_packets];
    // uint8_t requested_driver = config_menu_main_array[DRIVER_PROFILE_INDEX].value.value;
    uint32_t base_driver_canid = CMR_CANID_CDC_CONFIG0_DRV0 + (2 * currentDriver * num_config_packets);
 800144a:	4b1d      	ldr	r3, [pc, #116]	@ (80014c0 <transmitCDC_DIMconfigMessages+0x14c>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 8001456:	637b      	str	r3, [r7, #52]	@ 0x34
    for(int i = 0; i < num_config_packets; i++){
 8001458:	2300      	movs	r3, #0
 800145a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800145c:	e00b      	b.n	8001476 <transmitCDC_DIMconfigMessages+0x102>
        can_ids_config_driver[i] = base_driver_canid + i;
 800145e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001462:	441a      	add	r2, r3
 8001464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	3340      	adds	r3, #64	@ 0x40
 800146a:	443b      	add	r3, r7
 800146c:	f843 2c3c 	str.w	r2, [r3, #-60]
    for(int i = 0; i < num_config_packets; i++){
 8001470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001472:	3301      	adds	r3, #1
 8001474:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001478:	2b03      	cmp	r3, #3
 800147a:	ddf0      	ble.n	800145e <transmitCDC_DIMconfigMessages+0xea>
    }

    /* Transmit new messages to DIM */
    for(int i = 0; i < num_config_packets; i++){
 800147c:	2300      	movs	r3, #0
 800147e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001480:	e014      	b.n	80014ac <transmitCDC_DIMconfigMessages+0x138>
        canTX(
            CMR_CAN_BUS_VEH,
            can_ids_config_driver[i],
 8001482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	3340      	adds	r3, #64	@ 0x40
 8001488:	443b      	add	r3, r7
 800148a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
        canTX(
 800148e:	b299      	uxth	r1, r3
            &config_message_array[i],
 8001490:	f107 0214 	add.w	r2, r7, #20
 8001494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	441a      	add	r2, r3
        canTX(
 800149a:	2364      	movs	r3, #100	@ 0x64
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2304      	movs	r3, #4
 80014a0:	2000      	movs	r0, #0
 80014a2:	f7ff fee5 	bl	8001270 <canTX>
    for(int i = 0; i < num_config_packets; i++){
 80014a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014a8:	3301      	adds	r3, #1
 80014aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80014ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	dde7      	ble.n	8001482 <transmitCDC_DIMconfigMessages+0x10e>
            canTX5Hz_period_ms
        );
    }


}
 80014b2:	bf00      	nop
 80014b4:	bf00      	nop
 80014b6:	3740      	adds	r7, #64	@ 0x40
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	2400062c 	.word	0x2400062c
 80014c0:	24001a15 	.word	0x24001a15

080014c4 <updateErrorsWarnings>:
 * @param heartbeat Pointer to destination heartbeat for error and warning vectors.
 * @param lastWakeTime Current time. Pass in from canTX___Hz task.
 *
 * @return None.
 */
void updateErrorsWarnings(cmr_canHeartbeat_t *heartbeat, TickType_t lastWakeTime) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
    cmr_canError_t errors = CMR_CAN_ERROR_NONE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	81fb      	strh	r3, [r7, #14]
    cmr_canWarn_t warnings = CMR_CAN_WARN_NONE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	81bb      	strh	r3, [r7, #12]

    updateAMKErrors();
 80014d6:	f000 fa19 	bl	800190c <updateAMKErrors>
    updateAMKTimeouts(lastWakeTime);
 80014da:	6838      	ldr	r0, [r7, #0]
 80014dc:	f000 f98c 	bl	80017f8 <updateAMKTimeouts>

    updateErrors(&errors, lastWakeTime);
 80014e0:	f107 030e 	add.w	r3, r7, #14
 80014e4:	6839      	ldr	r1, [r7, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f81c 	bl	8001524 <updateErrors>
    updateWarnings(&warnings, lastWakeTime);
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	6839      	ldr	r1, [r7, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f8d2 	bl	800169c <updateWarnings>

    cmr_sensorListGetFlags(&sensorList, &warnings, &errors);
 80014f8:	f107 020e 	add.w	r2, r7, #14
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	4619      	mov	r1, r3
 8001502:	4807      	ldr	r0, [pc, #28]	@ (8001520 <updateErrorsWarnings+0x5c>)
 8001504:	f00d f943 	bl	800e78e <cmr_sensorListGetFlags>

    memcpy(&(heartbeat->error), &errors, sizeof(heartbeat->error));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3301      	adds	r3, #1
 800150c:	89fa      	ldrh	r2, [r7, #14]
 800150e:	801a      	strh	r2, [r3, #0]
    memcpy(&(heartbeat->warning), &warnings, sizeof(heartbeat->warning));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3303      	adds	r3, #3
 8001514:	89ba      	ldrh	r2, [r7, #12]
 8001516:	801a      	strh	r2, [r3, #0]
}
 8001518:	bf00      	nop
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	2400af4c 	.word	0x2400af4c

08001524 <updateErrors>:
 * @param errors Pointer to error vector to update.
 * @param lastWakeTime Current time.
 *
 * @return None.
 */
static void updateErrors(cmr_canError_t *errors, TickType_t lastWakeTime) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
    if (errors == NULL) {
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 80a3 	beq.w	800167c <updateErrors+0x158>
        return;
    }

    static cmr_canState_t prevStateVSM = CMR_CAN_ERROR;
    volatile cmr_canHeartbeat_t *heartbeatVSM = canVehicleGetPayload(CANRX_VEH_HEARTBEAT_VSM);
 8001536:	2000      	movs	r0, #0
 8001538:	f7ff fec2 	bl	80012c0 <canVehicleGetPayload>
 800153c:	60b8      	str	r0, [r7, #8]

    // Reset AMK timeouts upon transition to HV_EN to prevent immediate timeout error
    if (prevStateVSM == CMR_CAN_GLV_ON && heartbeatVSM->state == CMR_CAN_HV_EN) {
 800153e:	4b51      	ldr	r3, [pc, #324]	@ (8001684 <updateErrors+0x160>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d114      	bne.n	8001570 <updateErrors+0x4c>
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d10f      	bne.n	8001570 <updateErrors+0x4c>
        for (size_t i = 0; i < CANRX_TRAC_LEN; i++) {
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	e009      	b.n	800156a <updateErrors+0x46>
            canTractiveRXMeta[i].lastReceived_ms = lastWakeTime;
 8001556:	4a4c      	ldr	r2, [pc, #304]	@ (8001688 <updateErrors+0x164>)
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	015b      	lsls	r3, r3, #5
 800155c:	4413      	add	r3, r2
 800155e:	3314      	adds	r3, #20
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < CANRX_TRAC_LEN; i++) {
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	3301      	adds	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2b08      	cmp	r3, #8
 800156e:	d9f2      	bls.n	8001556 <updateErrors+0x32>
        }
    }

    // Vehicle CAN timeout errors
    for (size_t i = 0; i < CANRX_VEH_LEN; i++) {
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	e028      	b.n	80015c8 <updateErrors+0xa4>
        if (cmr_canRXMetaTimeoutError(&(canVehicleRXMeta[i]), lastWakeTime) < 0) {
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	015b      	lsls	r3, r3, #5
 800157a:	4a44      	ldr	r2, [pc, #272]	@ (800168c <updateErrors+0x168>)
 800157c:	4413      	add	r3, r2
 800157e:	6839      	ldr	r1, [r7, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f00a ff1a 	bl	800c3ba <cmr_canRXMetaTimeoutError>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	da1a      	bge.n	80015c2 <updateErrors+0x9e>
        	if(i == 0) {
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10b      	bne.n	80015aa <updateErrors+0x86>
        		*errors |= canVehicleRXMeta[i].errorFlag;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	881a      	ldrh	r2, [r3, #0]
 8001596:	493d      	ldr	r1, [pc, #244]	@ (800168c <updateErrors+0x168>)
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	015b      	lsls	r3, r3, #5
 800159c:	440b      	add	r3, r1
 800159e:	3310      	adds	r3, #16
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	801a      	strh	r2, [r3, #0]
        	}
            *errors |= canVehicleRXMeta[i].errorFlag;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	881a      	ldrh	r2, [r3, #0]
 80015ae:	4937      	ldr	r1, [pc, #220]	@ (800168c <updateErrors+0x168>)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	015b      	lsls	r3, r3, #5
 80015b4:	440b      	add	r3, r1
 80015b6:	3310      	adds	r3, #16
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b29a      	uxth	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	801a      	strh	r2, [r3, #0]
    for (size_t i = 0; i < CANRX_VEH_LEN; i++) {
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	3301      	adds	r3, #1
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	2b0a      	cmp	r3, #10
 80015cc:	d9d3      	bls.n	8001576 <updateErrors+0x52>
        }
    }

    // Tractive CAN timeout errors (only occur in HV_EN and RTD when AMK is on)
    if (heartbeatVSM->state == CMR_CAN_HV_EN || heartbeatVSM->state == CMR_CAN_RTD) {
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d004      	beq.n	80015e2 <updateErrors+0xbe>
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d11f      	bne.n	8001622 <updateErrors+0xfe>
        for (size_t i = 0; i < CANRX_TRAC_LEN; i++) {
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	e019      	b.n	800161c <updateErrors+0xf8>
            if (cmr_canRXMetaTimeoutError(&(canTractiveRXMeta[i]), lastWakeTime) < 0) {
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	015b      	lsls	r3, r3, #5
 80015ec:	4a26      	ldr	r2, [pc, #152]	@ (8001688 <updateErrors+0x164>)
 80015ee:	4413      	add	r3, r2
 80015f0:	6839      	ldr	r1, [r7, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f00a fee1 	bl	800c3ba <cmr_canRXMetaTimeoutError>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	da0b      	bge.n	8001616 <updateErrors+0xf2>
                *errors |= canTractiveRXMeta[i].errorFlag;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	881a      	ldrh	r2, [r3, #0]
 8001602:	4921      	ldr	r1, [pc, #132]	@ (8001688 <updateErrors+0x164>)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	015b      	lsls	r3, r3, #5
 8001608:	440b      	add	r3, r1
 800160a:	3310      	adds	r3, #16
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	4313      	orrs	r3, r2
 8001610:	b29a      	uxth	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	801a      	strh	r2, [r3, #0]
        for (size_t i = 0; i < CANRX_TRAC_LEN; i++) {
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3301      	adds	r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b08      	cmp	r3, #8
 8001620:	d9e2      	bls.n	80015e8 <updateErrors+0xc4>
            }
        }
    }

    // ALL inverters either errored or timed out
    if ((amkErrors[MOTOR_FL] || amkTimeouts[MOTOR_FL]) &&
 8001622:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <updateErrors+0x16c>)
 8001624:	789b      	ldrb	r3, [r3, #2]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d103      	bne.n	8001632 <updateErrors+0x10e>
 800162a:	4b1a      	ldr	r3, [pc, #104]	@ (8001694 <updateErrors+0x170>)
 800162c:	789b      	ldrb	r3, [r3, #2]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d01e      	beq.n	8001670 <updateErrors+0x14c>
        (amkErrors[MOTOR_FR] || amkTimeouts[MOTOR_FR]) &&
 8001632:	4b17      	ldr	r3, [pc, #92]	@ (8001690 <updateErrors+0x16c>)
 8001634:	781b      	ldrb	r3, [r3, #0]
    if ((amkErrors[MOTOR_FL] || amkTimeouts[MOTOR_FL]) &&
 8001636:	2b00      	cmp	r3, #0
 8001638:	d103      	bne.n	8001642 <updateErrors+0x11e>
        (amkErrors[MOTOR_FR] || amkTimeouts[MOTOR_FR]) &&
 800163a:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <updateErrors+0x170>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d016      	beq.n	8001670 <updateErrors+0x14c>
        (amkErrors[MOTOR_RL] || amkTimeouts[MOTOR_RL]) &&
 8001642:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <updateErrors+0x16c>)
 8001644:	78db      	ldrb	r3, [r3, #3]
        (amkErrors[MOTOR_FR] || amkTimeouts[MOTOR_FR]) &&
 8001646:	2b00      	cmp	r3, #0
 8001648:	d103      	bne.n	8001652 <updateErrors+0x12e>
        (amkErrors[MOTOR_RL] || amkTimeouts[MOTOR_RL]) &&
 800164a:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <updateErrors+0x170>)
 800164c:	78db      	ldrb	r3, [r3, #3]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00e      	beq.n	8001670 <updateErrors+0x14c>
        (amkErrors[MOTOR_RR] || amkTimeouts[MOTOR_RR])) {
 8001652:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <updateErrors+0x16c>)
 8001654:	785b      	ldrb	r3, [r3, #1]
        (amkErrors[MOTOR_RL] || amkTimeouts[MOTOR_RL]) &&
 8001656:	2b00      	cmp	r3, #0
 8001658:	d103      	bne.n	8001662 <updateErrors+0x13e>
        (amkErrors[MOTOR_RR] || amkTimeouts[MOTOR_RR])) {
 800165a:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <updateErrors+0x170>)
 800165c:	785b      	ldrb	r3, [r3, #1]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d006      	beq.n	8001670 <updateErrors+0x14c>

        *errors |= CMR_CAN_ERROR_CDC_AMK_ALL;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	881a      	ldrh	r2, [r3, #0]
 8001666:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <updateErrors+0x174>)
 8001668:	4313      	orrs	r3, r2
 800166a:	b29a      	uxth	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	801a      	strh	r2, [r3, #0]
    }

    prevStateVSM = heartbeatVSM->state;
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b03      	ldr	r3, [pc, #12]	@ (8001684 <updateErrors+0x160>)
 8001678:	701a      	strb	r2, [r3, #0]
 800167a:	e000      	b.n	800167e <updateErrors+0x15a>
        return;
 800167c:	bf00      	nop
}
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	240005a8 	.word	0x240005a8
 8001688:	24000188 	.word	0x24000188
 800168c:	24000028 	.word	0x24000028
 8001690:	24006ef0 	.word	0x24006ef0
 8001694:	24006ef4 	.word	0x24006ef4
 8001698:	ffff8000 	.word	0xffff8000

0800169c <updateWarnings>:
 * @param warnings Pointer to warning vector to update.
 * @param lastWakeTime Current time.
 *
 * @return None.
 */
static void updateWarnings(cmr_canWarn_t *warnings, TickType_t lastWakeTime) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
    if (warnings == NULL) {
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 8097 	beq.w	80017dc <updateWarnings+0x140>
        return;
    }

    // Vehicle CAN timeout warnings
    for (size_t i = 0; i < CANRX_VEH_LEN; i++) {
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	e019      	b.n	80016e8 <updateWarnings+0x4c>
        if (cmr_canRXMetaTimeoutWarn(&(canVehicleRXMeta[i]), lastWakeTime) < 0) {
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	015b      	lsls	r3, r3, #5
 80016b8:	4a4a      	ldr	r2, [pc, #296]	@ (80017e4 <updateWarnings+0x148>)
 80016ba:	4413      	add	r3, r2
 80016bc:	6839      	ldr	r1, [r7, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f00a fe69 	bl	800c396 <cmr_canRXMetaTimeoutWarn>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	da0b      	bge.n	80016e2 <updateWarnings+0x46>
            *warnings |= canVehicleRXMeta[i].warnFlag;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	881a      	ldrh	r2, [r3, #0]
 80016ce:	4945      	ldr	r1, [pc, #276]	@ (80017e4 <updateWarnings+0x148>)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	015b      	lsls	r3, r3, #5
 80016d4:	440b      	add	r3, r1
 80016d6:	3308      	adds	r3, #8
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	4313      	orrs	r3, r2
 80016dc:	b29a      	uxth	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	801a      	strh	r2, [r3, #0]
    for (size_t i = 0; i < CANRX_VEH_LEN; i++) {
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3301      	adds	r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b0a      	cmp	r3, #10
 80016ec:	d9e2      	bls.n	80016b4 <updateWarnings+0x18>
        }
    }

    // Tractive CAN timeout warnings
    for (size_t i = 0; i < CANRX_TRAC_LEN; i++) {
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	e019      	b.n	8001728 <updateWarnings+0x8c>
        if (cmr_canRXMetaTimeoutWarn(&(canTractiveRXMeta[i]), lastWakeTime) < 0) {
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	015b      	lsls	r3, r3, #5
 80016f8:	4a3b      	ldr	r2, [pc, #236]	@ (80017e8 <updateWarnings+0x14c>)
 80016fa:	4413      	add	r3, r2
 80016fc:	6839      	ldr	r1, [r7, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f00a fe49 	bl	800c396 <cmr_canRXMetaTimeoutWarn>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	da0b      	bge.n	8001722 <updateWarnings+0x86>
            *warnings |= canTractiveRXMeta[i].warnFlag;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	881a      	ldrh	r2, [r3, #0]
 800170e:	4936      	ldr	r1, [pc, #216]	@ (80017e8 <updateWarnings+0x14c>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	015b      	lsls	r3, r3, #5
 8001714:	440b      	add	r3, r1
 8001716:	3308      	adds	r3, #8
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	4313      	orrs	r3, r2
 800171c:	b29a      	uxth	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	801a      	strh	r2, [r3, #0]
    for (size_t i = 0; i < CANRX_TRAC_LEN; i++) {
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	3301      	adds	r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	2b08      	cmp	r3, #8
 800172c:	d9e2      	bls.n	80016f4 <updateWarnings+0x58>
        }
    }

    if (cmr_canRXMetaTimeoutWarn(&(canDaqRXMeta[CANRX_DAQ_MEMORATOR_BROADCAST]), lastWakeTime) < 0) {
 800172e:	6839      	ldr	r1, [r7, #0]
 8001730:	482e      	ldr	r0, [pc, #184]	@ (80017ec <updateWarnings+0x150>)
 8001732:	f00a fe30 	bl	800c396 <cmr_canRXMetaTimeoutWarn>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	da06      	bge.n	800174a <updateWarnings+0xae>
        *warnings |= CMR_CAN_WARN_CDC_MEMORATOR_DAQ_TIMEOUT;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001744:	b29a      	uxth	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	801a      	strh	r2, [r3, #0]
    }

    // Individual inverter errors
    if (amkErrors[MOTOR_FL]) {
 800174a:	4b29      	ldr	r3, [pc, #164]	@ (80017f0 <updateWarnings+0x154>)
 800174c:	789b      	ldrb	r3, [r3, #2]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00d      	beq.n	800176e <updateWarnings+0xd2>
        *warnings |= CMR_CAN_WARN_CDC_AMK_ERROR;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800175a:	b29a      	uxth	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	801a      	strh	r2, [r3, #0]
        *warnings |= CMR_CAN_WARN_CDC_AMK_FL;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	881a      	ldrh	r2, [r3, #0]
 8001764:	4b23      	ldr	r3, [pc, #140]	@ (80017f4 <updateWarnings+0x158>)
 8001766:	4313      	orrs	r3, r2
 8001768:	b29a      	uxth	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	801a      	strh	r2, [r3, #0]
    }
    if (amkErrors[MOTOR_FR]) {
 800176e:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <updateWarnings+0x154>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00d      	beq.n	8001792 <updateWarnings+0xf6>
        *warnings |= CMR_CAN_WARN_CDC_AMK_ERROR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800177e:	b29a      	uxth	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	801a      	strh	r2, [r3, #0]
        *warnings |= CMR_CAN_WARN_CDC_AMK_FR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800178c:	b29a      	uxth	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	801a      	strh	r2, [r3, #0]
    }
    if (amkErrors[MOTOR_RL]) {
 8001792:	4b17      	ldr	r3, [pc, #92]	@ (80017f0 <updateWarnings+0x154>)
 8001794:	78db      	ldrb	r3, [r3, #3]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00d      	beq.n	80017b6 <updateWarnings+0x11a>
        *warnings |= CMR_CAN_WARN_CDC_AMK_ERROR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	801a      	strh	r2, [r3, #0]
        *warnings |= CMR_CAN_WARN_CDC_AMK_RL;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	801a      	strh	r2, [r3, #0]
    }
    if (amkErrors[MOTOR_RR]) {
 80017b6:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <updateWarnings+0x154>)
 80017b8:	785b      	ldrb	r3, [r3, #1]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00f      	beq.n	80017de <updateWarnings+0x142>
        *warnings |= CMR_CAN_WARN_CDC_AMK_ERROR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	801a      	strh	r2, [r3, #0]
        *warnings |= CMR_CAN_WARN_CDC_AMK_RR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	801a      	strh	r2, [r3, #0]
 80017da:	e000      	b.n	80017de <updateWarnings+0x142>
        return;
 80017dc:	bf00      	nop
    }
}
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	24000028 	.word	0x24000028
 80017e8:	24000188 	.word	0x24000188
 80017ec:	24000468 	.word	0x24000468
 80017f0:	24006ef0 	.word	0x24006ef0
 80017f4:	ffff8000 	.word	0xffff8000

080017f8 <updateAMKTimeouts>:
 *
 * @param lastWakeTime Current time.
 *
 * @return None.
 */
static void updateAMKTimeouts(TickType_t lastWakeTime) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08c      	sub	sp, #48	@ 0x30
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
    cmr_canRXMeta_t *amkAct1MetaFL = canTractiveGetMeta(CANRX_TRAC_INV_FL_ACT1);
 8001800:	2000      	movs	r0, #0
 8001802:	f7ff fda5 	bl	8001350 <canTractiveGetMeta>
 8001806:	62b8      	str	r0, [r7, #40]	@ 0x28
    cmr_canRXMeta_t *amkAct2MetaFL = canTractiveGetMeta(CANRX_TRAC_INV_FL_ACT2);
 8001808:	2001      	movs	r0, #1
 800180a:	f7ff fda1 	bl	8001350 <canTractiveGetMeta>
 800180e:	6278      	str	r0, [r7, #36]	@ 0x24
    cmr_canRXMeta_t *amkAct1MetaFR = canTractiveGetMeta(CANRX_TRAC_INV_FR_ACT1);
 8001810:	2002      	movs	r0, #2
 8001812:	f7ff fd9d 	bl	8001350 <canTractiveGetMeta>
 8001816:	6238      	str	r0, [r7, #32]
    cmr_canRXMeta_t *amkAct2MetaFR = canTractiveGetMeta(CANRX_TRAC_INV_FR_ACT2);
 8001818:	2003      	movs	r0, #3
 800181a:	f7ff fd99 	bl	8001350 <canTractiveGetMeta>
 800181e:	61f8      	str	r0, [r7, #28]
    cmr_canRXMeta_t *amkAct1MetaRL = canTractiveGetMeta(CANRX_TRAC_INV_RL_ACT1);
 8001820:	2004      	movs	r0, #4
 8001822:	f7ff fd95 	bl	8001350 <canTractiveGetMeta>
 8001826:	61b8      	str	r0, [r7, #24]
    cmr_canRXMeta_t *amkAct2MetaRL = canTractiveGetMeta(CANRX_TRAC_INV_RL_ACT2);
 8001828:	2005      	movs	r0, #5
 800182a:	f7ff fd91 	bl	8001350 <canTractiveGetMeta>
 800182e:	6178      	str	r0, [r7, #20]
    cmr_canRXMeta_t *amkAct1MetaRR = canTractiveGetMeta(CANRX_TRAC_INV_RR_ACT1);
 8001830:	2006      	movs	r0, #6
 8001832:	f7ff fd8d 	bl	8001350 <canTractiveGetMeta>
 8001836:	6138      	str	r0, [r7, #16]
    cmr_canRXMeta_t *amkAct2MetaRR = canTractiveGetMeta(CANRX_TRAC_INV_RR_ACT2);
 8001838:	2007      	movs	r0, #7
 800183a:	f7ff fd89 	bl	8001350 <canTractiveGetMeta>
 800183e:	60f8      	str	r0, [r7, #12]

    // Clear timeouts
    for (size_t i = 0; i < MOTOR_LEN; i++) {
 8001840:	2300      	movs	r3, #0
 8001842:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001844:	e007      	b.n	8001856 <updateAMKTimeouts+0x5e>
        amkTimeouts[i] = false;
 8001846:	4a30      	ldr	r2, [pc, #192]	@ (8001908 <updateAMKTimeouts+0x110>)
 8001848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800184a:	4413      	add	r3, r2
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < MOTOR_LEN; i++) {
 8001850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001852:	3301      	adds	r3, #1
 8001854:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001858:	2b03      	cmp	r3, #3
 800185a:	d9f4      	bls.n	8001846 <updateAMKTimeouts+0x4e>
    }

    volatile cmr_canHeartbeat_t *heartbeatVSM = canVehicleGetPayload(CANRX_VEH_HEARTBEAT_VSM);
 800185c:	2000      	movs	r0, #0
 800185e:	f7ff fd2f 	bl	80012c0 <canVehicleGetPayload>
 8001862:	60b8      	str	r0, [r7, #8]

    // Set timeouts as needed
    if (heartbeatVSM->state == CMR_CAN_HV_EN || heartbeatVSM->state == CMR_CAN_RTD) {
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d004      	beq.n	8001878 <updateAMKTimeouts+0x80>
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b03      	cmp	r3, #3
 8001876:	d143      	bne.n	8001900 <updateAMKTimeouts+0x108>
        if (cmr_canRXMetaTimeoutError(amkAct1MetaFL, lastWakeTime) < 0 ||
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800187c:	f00a fd9d 	bl	800c3ba <cmr_canRXMetaTimeoutError>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	db06      	blt.n	8001894 <updateAMKTimeouts+0x9c>
            cmr_canRXMetaTimeoutError(amkAct2MetaFL, lastWakeTime) < 0) {
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800188a:	f00a fd96 	bl	800c3ba <cmr_canRXMetaTimeoutError>
 800188e:	4603      	mov	r3, r0
        if (cmr_canRXMetaTimeoutError(amkAct1MetaFL, lastWakeTime) < 0 ||
 8001890:	2b00      	cmp	r3, #0
 8001892:	da02      	bge.n	800189a <updateAMKTimeouts+0xa2>
            amkTimeouts[MOTOR_FL] = true;
 8001894:	4b1c      	ldr	r3, [pc, #112]	@ (8001908 <updateAMKTimeouts+0x110>)
 8001896:	2201      	movs	r2, #1
 8001898:	709a      	strb	r2, [r3, #2]
        }
        if (cmr_canRXMetaTimeoutError(amkAct1MetaFR, lastWakeTime) < 0 ||
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	6a38      	ldr	r0, [r7, #32]
 800189e:	f00a fd8c 	bl	800c3ba <cmr_canRXMetaTimeoutError>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	db06      	blt.n	80018b6 <updateAMKTimeouts+0xbe>
            cmr_canRXMetaTimeoutError(amkAct2MetaFR, lastWakeTime) < 0) {
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	69f8      	ldr	r0, [r7, #28]
 80018ac:	f00a fd85 	bl	800c3ba <cmr_canRXMetaTimeoutError>
 80018b0:	4603      	mov	r3, r0
        if (cmr_canRXMetaTimeoutError(amkAct1MetaFR, lastWakeTime) < 0 ||
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	da02      	bge.n	80018bc <updateAMKTimeouts+0xc4>
            amkTimeouts[MOTOR_FR] = true;
 80018b6:	4b14      	ldr	r3, [pc, #80]	@ (8001908 <updateAMKTimeouts+0x110>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	701a      	strb	r2, [r3, #0]
        }
        if (cmr_canRXMetaTimeoutError(amkAct1MetaRL, lastWakeTime) < 0 ||
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	69b8      	ldr	r0, [r7, #24]
 80018c0:	f00a fd7b 	bl	800c3ba <cmr_canRXMetaTimeoutError>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	db06      	blt.n	80018d8 <updateAMKTimeouts+0xe0>
            cmr_canRXMetaTimeoutError(amkAct2MetaRL, lastWakeTime) < 0) {
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	6978      	ldr	r0, [r7, #20]
 80018ce:	f00a fd74 	bl	800c3ba <cmr_canRXMetaTimeoutError>
 80018d2:	4603      	mov	r3, r0
        if (cmr_canRXMetaTimeoutError(amkAct1MetaRL, lastWakeTime) < 0 ||
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	da02      	bge.n	80018de <updateAMKTimeouts+0xe6>
            amkTimeouts[MOTOR_RL] = true;
 80018d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <updateAMKTimeouts+0x110>)
 80018da:	2201      	movs	r2, #1
 80018dc:	70da      	strb	r2, [r3, #3]
        }
        if (cmr_canRXMetaTimeoutError(amkAct1MetaRR, lastWakeTime) < 0 ||
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	6938      	ldr	r0, [r7, #16]
 80018e2:	f00a fd6a 	bl	800c3ba <cmr_canRXMetaTimeoutError>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	db06      	blt.n	80018fa <updateAMKTimeouts+0x102>
            cmr_canRXMetaTimeoutError(amkAct2MetaRR, lastWakeTime) < 0) {
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f00a fd63 	bl	800c3ba <cmr_canRXMetaTimeoutError>
 80018f4:	4603      	mov	r3, r0
        if (cmr_canRXMetaTimeoutError(amkAct1MetaRR, lastWakeTime) < 0 ||
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	da02      	bge.n	8001900 <updateAMKTimeouts+0x108>
            amkTimeouts[MOTOR_RR] = true;
 80018fa:	4b03      	ldr	r3, [pc, #12]	@ (8001908 <updateAMKTimeouts+0x110>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	705a      	strb	r2, [r3, #1]
        }
    }
}
 8001900:	bf00      	nop
 8001902:	3730      	adds	r7, #48	@ 0x30
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	24006ef4 	.word	0x24006ef4

0800190c <updateAMKErrors>:
/**
 * @brief Updates AMK inverter error status flags.
 *
 * @return None.
 */
static void updateAMKErrors(void) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
    volatile cmr_canAMKActualValues1_t *amkAct1FL = canTractiveGetPayload(CANRX_TRAC_INV_FL_ACT1);
 8001912:	2000      	movs	r0, #0
 8001914:	f7ff fce6 	bl	80012e4 <canTractiveGetPayload>
 8001918:	6138      	str	r0, [r7, #16]
    volatile cmr_canAMKActualValues1_t *amkAct1FR = canTractiveGetPayload(CANRX_TRAC_INV_FR_ACT1);
 800191a:	2002      	movs	r0, #2
 800191c:	f7ff fce2 	bl	80012e4 <canTractiveGetPayload>
 8001920:	60f8      	str	r0, [r7, #12]
    volatile cmr_canAMKActualValues1_t *amkAct1RL = canTractiveGetPayload(CANRX_TRAC_INV_RL_ACT1);
 8001922:	2004      	movs	r0, #4
 8001924:	f7ff fcde 	bl	80012e4 <canTractiveGetPayload>
 8001928:	60b8      	str	r0, [r7, #8]
    volatile cmr_canAMKActualValues1_t *amkAct1RR = canTractiveGetPayload(CANRX_TRAC_INV_RR_ACT1);
 800192a:	2006      	movs	r0, #6
 800192c:	f7ff fcda 	bl	80012e4 <canTractiveGetPayload>
 8001930:	6078      	str	r0, [r7, #4]

    // Clear error statuses
    for (size_t i = 0; i < MOTOR_LEN; i++) {
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	e007      	b.n	8001948 <updateAMKErrors+0x3c>
        amkErrors[i] = false;
 8001938:	4a22      	ldr	r2, [pc, #136]	@ (80019c4 <updateAMKErrors+0xb8>)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	4413      	add	r3, r2
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < MOTOR_LEN; i++) {
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	3301      	adds	r3, #1
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	2b03      	cmp	r3, #3
 800194c:	d9f4      	bls.n	8001938 <updateAMKErrors+0x2c>
    }

    volatile cmr_canHeartbeat_t *heartbeatVSM = canVehicleGetPayload(CANRX_VEH_HEARTBEAT_VSM);
 800194e:	2000      	movs	r0, #0
 8001950:	f7ff fcb6 	bl	80012c0 <canVehicleGetPayload>
 8001954:	6038      	str	r0, [r7, #0]

    // Set error statuses as needed
    if (heartbeatVSM->state == CMR_CAN_HV_EN || heartbeatVSM->state == CMR_CAN_RTD) {
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d004      	beq.n	800196a <updateAMKErrors+0x5e>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b03      	cmp	r3, #3
 8001968:	d127      	bne.n	80019ba <updateAMKErrors+0xae>
        if (amkAct1FL->status_bv & CMR_CAN_AMK_STATUS_ERROR) {
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	b29b      	uxth	r3, r3
 8001970:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <updateAMKErrors+0x72>
            amkErrors[MOTOR_FL] = true;
 8001978:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <updateAMKErrors+0xb8>)
 800197a:	2201      	movs	r2, #1
 800197c:	709a      	strb	r2, [r3, #2]
        }
        if (amkAct1FR->status_bv & CMR_CAN_AMK_STATUS_ERROR) {
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	b29b      	uxth	r3, r3
 8001984:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <updateAMKErrors+0x86>
            amkErrors[MOTOR_FR] = true;
 800198c:	4b0d      	ldr	r3, [pc, #52]	@ (80019c4 <updateAMKErrors+0xb8>)
 800198e:	2201      	movs	r2, #1
 8001990:	701a      	strb	r2, [r3, #0]
        }
        if (amkAct1RL->status_bv & CMR_CAN_AMK_STATUS_ERROR) {
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	b29b      	uxth	r3, r3
 8001998:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800199c:	2b00      	cmp	r3, #0
 800199e:	d002      	beq.n	80019a6 <updateAMKErrors+0x9a>
            amkErrors[MOTOR_RL] = true;
 80019a0:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <updateAMKErrors+0xb8>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	70da      	strb	r2, [r3, #3]
        }
        if (amkAct1RR->status_bv & CMR_CAN_AMK_STATUS_ERROR) {
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <updateAMKErrors+0xae>
            amkErrors[MOTOR_RR] = true;
 80019b4:	4b03      	ldr	r3, [pc, #12]	@ (80019c4 <updateAMKErrors+0xb8>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	705a      	strb	r2, [r3, #1]
        }
    }
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	24006ef0 	.word	0x24006ef0

080019c8 <initYawRateControl>:

// ------------------------------------------------------------------------------------------------
// Function implementations

/** @brief initialize yaw rate control */
static void initYawRateControl() {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
    // read yrc_kp from DIM
    yrc_kp = 0.0f;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <initYawRateControl+0x38>)
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
    getProcessedValue(&yrc_kp, YRC_KP_INDEX, float_1_decimal);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2103      	movs	r1, #3
 80019d8:	4809      	ldr	r0, [pc, #36]	@ (8001a00 <initYawRateControl+0x38>)
 80019da:	f00a fed9 	bl	800c790 <getProcessedValue>
    
    yrc_kp = yrc_kp*100.0f;
 80019de:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <initYawRateControl+0x38>)
 80019e0:	edd3 7a00 	vldr	s15, [r3]
 80019e4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001a04 <initYawRateControl+0x3c>
 80019e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ec:	4b04      	ldr	r3, [pc, #16]	@ (8001a00 <initYawRateControl+0x38>)
 80019ee:	edc3 7a00 	vstr	s15, [r3]
    //yrcDebug = getPidDebug();
    yrcDebug.controls_pid = yrc_kp;
 80019f2:	4b03      	ldr	r3, [pc, #12]	@ (8001a00 <initYawRateControl+0x38>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a04      	ldr	r2, [pc, #16]	@ (8001a08 <initYawRateControl+0x40>)
 80019f8:	6053      	str	r3, [r2, #4]
    //REMOVE const float yrc_ki = 0.0f;

    // disable derivate separation because no significant derivative kick was observed
    // steering angle and the car's yaw seem to have similar timescales
    //REMOVE const bool enable_derivative_separation = false;
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	24006f00 	.word	0x24006f00
 8001a04:	42c80000 	.word	0x42c80000
 8001a08:	24006ef8 	.word	0x24006ef8

08001a0c <initControls>:

/** @brief initialize controls */
void initControls() {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
    initYawRateControl();
 8001a10:	f7ff ffda 	bl	80019c8 <initYawRateControl>
    cvxgen_init(max_iters, max_time);
 8001a14:	4b0d      	ldr	r3, [pc, #52]	@ (8001a4c <initControls+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0d      	ldr	r2, [pc, #52]	@ (8001a50 <initControls+0x44>)
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f001 fd4a 	bl	80034b8 <cvxgen_init>
    nonConvergenceCounter.non_convergence_count = 0;
 8001a24:	4b0b      	ldr	r3, [pc, #44]	@ (8001a54 <initControls+0x48>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
    startTickCount = xTaskGetTickCount();
 8001a2a:	f00e fdd5 	bl	80105d8 <xTaskGetTickCount>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4a09      	ldr	r2, [pc, #36]	@ (8001a58 <initControls+0x4c>)
 8001a32:	6013      	str	r3, [r2, #0]
	launchControlButtonPressed = false;
 8001a34:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <initControls+0x50>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
	launchControlActive = false;
 8001a3a:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <initControls+0x54>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
	coulombCounting.KCoulombs = 0.0f;
 8001a40:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <initControls+0x58>)
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	240005ac 	.word	0x240005ac
 8001a50:	240005b0 	.word	0x240005b0
 8001a54:	24006f4c 	.word	0x24006f4c
 8001a58:	24006f34 	.word	0x24006f34
 8001a5c:	24006f38 	.word	0x24006f38
 8001a60:	24006f39 	.word	0x24006f39
 8001a64:	24006f58 	.word	0x24006f58

08001a68 <setControlsStatus>:

/** @brief update controlsStatus to be displayed on DIM */
void setControlsStatus(cmr_canGear_t gear) {
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
    switch (gear) {
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	2b07      	cmp	r3, #7
 8001a78:	d84a      	bhi.n	8001b10 <setControlsStatus+0xa8>
 8001a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a80 <setControlsStatus+0x18>)
 8001a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a80:	08001aa1 	.word	0x08001aa1
 8001a84:	08001aaf 	.word	0x08001aaf
 8001a88:	08001abd 	.word	0x08001abd
 8001a8c:	08001acb 	.word	0x08001acb
 8001a90:	08001ad9 	.word	0x08001ad9
 8001a94:	08001ae7 	.word	0x08001ae7
 8001a98:	08001af5 	.word	0x08001af5
 8001a9c:	08001b03 	.word	0x08001b03
        case CMR_CAN_GEAR_SLOW:
            controlsStatus.tcOn = (uint8_t)false;
 8001aa0:	4b22      	ldr	r3, [pc, #136]	@ (8001b2c <setControlsStatus+0xc4>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
            controlsStatus.yrcOn = (uint8_t)false;
 8001aa6:	4b21      	ldr	r3, [pc, #132]	@ (8001b2c <setControlsStatus+0xc4>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	705a      	strb	r2, [r3, #1]
            break;
 8001aac:	e037      	b.n	8001b1e <setControlsStatus+0xb6>
        case CMR_CAN_GEAR_FAST:
            controlsStatus.tcOn = (uint8_t)false;
 8001aae:	4b1f      	ldr	r3, [pc, #124]	@ (8001b2c <setControlsStatus+0xc4>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	701a      	strb	r2, [r3, #0]
            controlsStatus.yrcOn = (uint8_t)false;
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b2c <setControlsStatus+0xc4>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	705a      	strb	r2, [r3, #1]
            break;
 8001aba:	e030      	b.n	8001b1e <setControlsStatus+0xb6>
        case CMR_CAN_GEAR_ENDURANCE:
            controlsStatus.tcOn = (uint8_t)false;
 8001abc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b2c <setControlsStatus+0xc4>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
            controlsStatus.yrcOn = (uint8_t)false;
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b2c <setControlsStatus+0xc4>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	705a      	strb	r2, [r3, #1]
            break;
 8001ac8:	e029      	b.n	8001b1e <setControlsStatus+0xb6>
        case CMR_CAN_GEAR_AUTOX:
            controlsStatus.tcOn = (uint8_t)true;
 8001aca:	4b18      	ldr	r3, [pc, #96]	@ (8001b2c <setControlsStatus+0xc4>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	701a      	strb	r2, [r3, #0]
            controlsStatus.yrcOn = (uint8_t)true;
 8001ad0:	4b16      	ldr	r3, [pc, #88]	@ (8001b2c <setControlsStatus+0xc4>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	705a      	strb	r2, [r3, #1]
            break;
 8001ad6:	e022      	b.n	8001b1e <setControlsStatus+0xb6>
        case CMR_CAN_GEAR_SKIDPAD:
            controlsStatus.tcOn = (uint8_t)false;
 8001ad8:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <setControlsStatus+0xc4>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
            controlsStatus.yrcOn = (uint8_t)true;
 8001ade:	4b13      	ldr	r3, [pc, #76]	@ (8001b2c <setControlsStatus+0xc4>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	705a      	strb	r2, [r3, #1]
            break;
 8001ae4:	e01b      	b.n	8001b1e <setControlsStatus+0xb6>
        case CMR_CAN_GEAR_ACCEL:
            controlsStatus.tcOn = (uint8_t)true;
 8001ae6:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <setControlsStatus+0xc4>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	701a      	strb	r2, [r3, #0]
            controlsStatus.yrcOn = (uint8_t)false;            
 8001aec:	4b0f      	ldr	r3, [pc, #60]	@ (8001b2c <setControlsStatus+0xc4>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	705a      	strb	r2, [r3, #1]
            break;
 8001af2:	e014      	b.n	8001b1e <setControlsStatus+0xb6>
        case CMR_CAN_GEAR_TEST:
            controlsStatus.tcOn = (uint8_t)true;
 8001af4:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <setControlsStatus+0xc4>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
            controlsStatus.yrcOn = (uint8_t)true;           
 8001afa:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <setControlsStatus+0xc4>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	705a      	strb	r2, [r3, #1]
            break;
 8001b00:	e00d      	b.n	8001b1e <setControlsStatus+0xb6>
        case CMR_CAN_GEAR_REVERSE:
            controlsStatus.tcOn = (uint8_t)false;
 8001b02:	4b0a      	ldr	r3, [pc, #40]	@ (8001b2c <setControlsStatus+0xc4>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
            controlsStatus.yrcOn = (uint8_t)false;
 8001b08:	4b08      	ldr	r3, [pc, #32]	@ (8001b2c <setControlsStatus+0xc4>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	705a      	strb	r2, [r3, #1]
            break;
 8001b0e:	e006      	b.n	8001b1e <setControlsStatus+0xb6>
        default:
            controlsStatus.tcOn = (uint8_t)false;
 8001b10:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <setControlsStatus+0xc4>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
            controlsStatus.yrcOn = (uint8_t)false;
 8001b16:	4b05      	ldr	r3, [pc, #20]	@ (8001b2c <setControlsStatus+0xc4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	705a      	strb	r2, [r3, #1]
            break;
 8001b1c:	bf00      	nop
    } 
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	24006f54 	.word	0x24006f54

08001b30 <getControlsStatus>:

/** @brief get the a read-only pointer to controlsStatus */
const volatile cmr_canCDCControlsStatus_t *getControlsStatus() {
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
    return (const cmr_canCDCControlsStatus_t*) &controlsStatus;
 8001b34:	4b02      	ldr	r3, [pc, #8]	@ (8001b40 <getControlsStatus+0x10>)
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	24006f54 	.word	0x24006f54
 8001b44:	00000000 	.word	0x00000000

08001b48 <runControls>:
    uint8_t brakePressurePsi_u8, 
    int16_t swAngle_deg,
    int32_t battVoltage_mV,
    int32_t battCurrent_mA,
    bool blank_command
) {
 8001b48:	b5b0      	push	{r4, r5, r7, lr}
 8001b4a:	b090      	sub	sp, #64	@ 0x40
 8001b4c:	af04      	add	r7, sp, #16
 8001b4e:	4604      	mov	r4, r0
 8001b50:	4608      	mov	r0, r1
 8001b52:	4611      	mov	r1, r2
 8001b54:	461a      	mov	r2, r3
 8001b56:	4623      	mov	r3, r4
 8001b58:	71fb      	strb	r3, [r7, #7]
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71bb      	strb	r3, [r7, #6]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	717b      	strb	r3, [r7, #5]
 8001b62:	4613      	mov	r3, r2
 8001b64:	713b      	strb	r3, [r7, #4]
    integrateCurrent();
 8001b66:	f000 f923 	bl	8001db0 <integrateCurrent>
    if (blank_command) {
 8001b6a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d009      	beq.n	8001b86 <runControls+0x3e>
        setTorqueLimsAllProtected(0.0f, 0.0f);
 8001b72:	eddf 0a8d 	vldr	s1, [pc, #564]	@ 8001da8 <runControls+0x260>
 8001b76:	ed9f 0a8c 	vldr	s0, [pc, #560]	@ 8001da8 <runControls+0x260>
 8001b7a:	f004 faab 	bl	80060d4 <setTorqueLimsAllProtected>
        setVelocityInt16All(0);
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f004 fbd0 	bl	8006324 <setVelocityInt16All>
        return;
 8001b84:	e107      	b.n	8001d96 <runControls+0x24e>
    }

    volatile cmr_canAMKActualValues1_t *amkAct1FL = canTractiveGetPayload(CANRX_TRAC_INV_FL_ACT1);
 8001b86:	2000      	movs	r0, #0
 8001b88:	f7ff fbac 	bl	80012e4 <canTractiveGetPayload>
 8001b8c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    volatile cmr_canAMKActualValues1_t *amkAct1FR = canTractiveGetPayload(CANRX_TRAC_INV_FR_ACT1);
 8001b8e:	2002      	movs	r0, #2
 8001b90:	f7ff fba8 	bl	80012e4 <canTractiveGetPayload>
 8001b94:	62b8      	str	r0, [r7, #40]	@ 0x28
    volatile cmr_canAMKActualValues1_t *amkAct1RL = canTractiveGetPayload(CANRX_TRAC_INV_RL_ACT1);
 8001b96:	2004      	movs	r0, #4
 8001b98:	f7ff fba4 	bl	80012e4 <canTractiveGetPayload>
 8001b9c:	6278      	str	r0, [r7, #36]	@ 0x24
    volatile cmr_canAMKActualValues1_t *amkAct1RR = canTractiveGetPayload(CANRX_TRAC_INV_RR_ACT1);
 8001b9e:	2006      	movs	r0, #6
 8001ba0:	f7ff fba0 	bl	80012e4 <canTractiveGetPayload>
 8001ba4:	6238      	str	r0, [r7, #32]

    const int32_t avgMotorSpeed_RPM = (
        + (int32_t)(amkAct1FL->velocity_rpm)
 8001ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ba8:	885b      	ldrh	r3, [r3, #2]
 8001baa:	b21b      	sxth	r3, r3
 8001bac:	461a      	mov	r2, r3
        + (int32_t)(amkAct1FR->velocity_rpm)
 8001bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb0:	885b      	ldrh	r3, [r3, #2]
 8001bb2:	b21b      	sxth	r3, r3
 8001bb4:	4413      	add	r3, r2
        + (int32_t)(amkAct1RL->velocity_rpm)
 8001bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bb8:	8852      	ldrh	r2, [r2, #2]
 8001bba:	b212      	sxth	r2, r2
 8001bbc:	4413      	add	r3, r2
        + (int32_t)(amkAct1RR->velocity_rpm)
 8001bbe:	6a3a      	ldr	r2, [r7, #32]
 8001bc0:	8852      	ldrh	r2, [r2, #2]
 8001bc2:	b212      	sxth	r2, r2
 8001bc4:	4413      	add	r3, r2
    const int32_t avgMotorSpeed_RPM = (
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	da00      	bge.n	8001bcc <runControls+0x84>
 8001bca:	3303      	adds	r3, #3
 8001bcc:	109b      	asrs	r3, r3, #2
 8001bce:	61fb      	str	r3, [r7, #28]
    // Update odometer
    /* Wheel Speed to Vehicle Speed Conversion
    *      (x rotations / 1min) * (16" * PI) *  (2.54*10^-5km/inch)
    *      (1min / 60sec) * (1sec/1000ms) * (5ms period) * (1/13.93 gear ratio)
    *      = x * 7.6378514861 × 10^-9 */
    odometer_km += ((float)avgMotorSpeed_RPM) * 7.6378514861e-9;
 8001bd0:	4b76      	ldr	r3, [pc, #472]	@ (8001dac <runControls+0x264>)
 8001bd2:	edd3 7a00 	vldr	s15, [r3]
 8001bd6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	ee07 3a90 	vmov	s15, r3
 8001be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001be8:	ed9f 5b6d 	vldr	d5, [pc, #436]	@ 8001da0 <runControls+0x258>
 8001bec:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001bf0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001bf4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bf8:	4b6c      	ldr	r3, [pc, #432]	@ (8001dac <runControls+0x264>)
 8001bfa:	edc3 7a00 	vstr	s15, [r3]
    /** @todo check floating point granularity for potential issues with adding small numbers repeatedly to large numbers */

    switch (gear) {
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	2b07      	cmp	r3, #7
 8001c04:	f200 80bc 	bhi.w	8001d80 <runControls+0x238>
 8001c08:	a201      	add	r2, pc, #4	@ (adr r2, 8001c10 <runControls+0xc8>)
 8001c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0e:	bf00      	nop
 8001c10:	08001c31 	.word	0x08001c31
 8001c14:	08001c3b 	.word	0x08001c3b
 8001c18:	08001c45 	.word	0x08001c45
 8001c1c:	08001cc9 	.word	0x08001cc9
 8001c20:	08001cdd 	.word	0x08001cdd
 8001c24:	08001cf1 	.word	0x08001cf1
 8001c28:	08001d3d 	.word	0x08001d3d
 8001c2c:	08001d6d 	.word	0x08001d6d
        case CMR_CAN_GEAR_SLOW: {
            setSlowTorque(throttlePos_u8);
 8001c30:	79bb      	ldrb	r3, [r7, #6]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 f914 	bl	8001e60 <setSlowTorque>
            break;
 8001c38:	e0ad      	b.n	8001d96 <runControls+0x24e>
        }
        case CMR_CAN_GEAR_FAST: {
            setFastTorque(throttlePos_u8);
 8001c3a:	79bb      	ldrb	r3, [r7, #6]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f000 f93d 	bl	8001ebc <setFastTorque>
            break;
 8001c42:	e0a8      	b.n	8001d96 <runControls+0x24e>
        }
        case CMR_CAN_GEAR_ENDURANCE: {
            const bool useCVXGEN = false;
 8001c44:	2300      	movs	r3, #0
 8001c46:	737b      	strb	r3, [r7, #13]
            const bool enableRegen = true;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	733b      	strb	r3, [r7, #12]
            const bool timingTest = false;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	72fb      	strb	r3, [r7, #11]
            const bool assumeNoTurn = true;
 8001c50:	2301      	movs	r3, #1
 8001c52:	72bb      	strb	r3, [r7, #10]
            const bool clampbyside = true; // LOL-TC 
 8001c54:	2301      	movs	r3, #1
 8001c56:	727b      	strb	r3, [r7, #9]
            if(useCVXGEN){
 8001c58:	7b7b      	ldrb	r3, [r7, #13]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d023      	beq.n	8001ca6 <runControls+0x15e>
                if(!setCVXGENSolver(throttlePos_u8, brakePressurePsi_u8, swAngle_deg, enableRegen, timingTest, assumeNoTurn))
 8001c5e:	7b3c      	ldrb	r4, [r7, #12]
 8001c60:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 8001c64:	7939      	ldrb	r1, [r7, #4]
 8001c66:	79b8      	ldrb	r0, [r7, #6]
 8001c68:	7abb      	ldrb	r3, [r7, #10]
 8001c6a:	9301      	str	r3, [sp, #4]
 8001c6c:	7afb      	ldrb	r3, [r7, #11]
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	4623      	mov	r3, r4
 8001c72:	f000 f951 	bl	8001f18 <setCVXGENSolver>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f083 0301 	eor.w	r3, r3, #1
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 8088 	beq.w	8001d94 <runControls+0x24c>
                	setEnduranceTestTorque(avgMotorSpeed_RPM, throttlePos_u8, brakePos_u8,
 8001c84:	f9b7 0040 	ldrsh.w	r0, [r7, #64]	@ 0x40
 8001c88:	797a      	ldrb	r2, [r7, #5]
 8001c8a:	79b9      	ldrb	r1, [r7, #6]
 8001c8c:	7a7b      	ldrb	r3, [r7, #9]
 8001c8e:	9303      	str	r3, [sp, #12]
 8001c90:	793b      	ldrb	r3, [r7, #4]
 8001c92:	9302      	str	r3, [sp, #8]
 8001c94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	69f8      	ldr	r0, [r7, #28]
 8001ca0:	f000 ff2c 	bl	8002afc <setEnduranceTestTorque>
                	               swAngle_deg, battVoltage_mV, battCurrent_mA, brakePressurePsi_u8, clampbyside);
            }else{
                setEnduranceTestTorque(avgMotorSpeed_RPM, throttlePos_u8, brakePos_u8,
               swAngle_deg, battVoltage_mV, battCurrent_mA, brakePressurePsi_u8, clampbyside);
            }
            break;
 8001ca4:	e076      	b.n	8001d94 <runControls+0x24c>
                setEnduranceTestTorque(avgMotorSpeed_RPM, throttlePos_u8, brakePos_u8,
 8001ca6:	f9b7 0040 	ldrsh.w	r0, [r7, #64]	@ 0x40
 8001caa:	797a      	ldrb	r2, [r7, #5]
 8001cac:	79b9      	ldrb	r1, [r7, #6]
 8001cae:	7a7b      	ldrb	r3, [r7, #9]
 8001cb0:	9303      	str	r3, [sp, #12]
 8001cb2:	793b      	ldrb	r3, [r7, #4]
 8001cb4:	9302      	str	r3, [sp, #8]
 8001cb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cb8:	9301      	str	r3, [sp, #4]
 8001cba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	69f8      	ldr	r0, [r7, #28]
 8001cc2:	f000 ff1b 	bl	8002afc <setEnduranceTestTorque>
            break;
 8001cc6:	e065      	b.n	8001d94 <runControls+0x24c>
        case CMR_CAN_GEAR_AUTOX: {
            // const bool assumeNoTurn = true; // TC is not allowed to behave left-right asymmetrically due to the lack of testing
            // const bool ignoreYawRate = false; // TC takes yaw rate into account to prevent the vehicle from stopping unintendedly when turning at low speeds
            // const bool allowRegen = true; // regen-braking is allowed to protect the AC by keeping charge level high
            // const float critical_speed_mps = 5.0f; // using a high value to prevent the vehicle from stopping unintendedly when turning at low speeds
            const bool clampbyside = true; 
 8001cc8:	2301      	movs	r3, #1
 8001cca:	73bb      	strb	r3, [r7, #14]
            setYawRateControl(throttlePos_u8, brakePressurePsi_u8, swAngle_deg, clampbyside);
 8001ccc:	7bbb      	ldrb	r3, [r7, #14]
 8001cce:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 8001cd2:	7939      	ldrb	r1, [r7, #4]
 8001cd4:	79b8      	ldrb	r0, [r7, #6]
 8001cd6:	f000 fd87 	bl	80027e8 <setYawRateControl>
            //setYawRateAndTractionControl(throttlePos_u8, brakePressurePsi_u8, swAngle_deg, assumeNoTurn, ignoreYawRate, allowRegen, critical_speed_mps);
            break;
 8001cda:	e05c      	b.n	8001d96 <runControls+0x24e>
        }
        case CMR_CAN_GEAR_SKIDPAD: {
            const bool clampbyside = false; 
 8001cdc:	2300      	movs	r3, #0
 8001cde:	73fb      	strb	r3, [r7, #15]
            setYawRateControl(throttlePos_u8, brakePressurePsi_u8, swAngle_deg, clampbyside);
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 8001ce6:	7939      	ldrb	r1, [r7, #4]
 8001ce8:	79b8      	ldrb	r0, [r7, #6]
 8001cea:	f000 fd7d 	bl	80027e8 <setYawRateControl>
            break;
 8001cee:	e052      	b.n	8001d96 <runControls+0x24e>
        }
        case CMR_CAN_GEAR_ACCEL: {
            const bool assumeNoTurn = true; // TC is not allowed to behave left-right asymmetrically because it's meaningless in accel
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	76bb      	strb	r3, [r7, #26]
            const bool ignoreYawRate = true;  // TC ignores yaw rate because it's meaningless in accel
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	767b      	strb	r3, [r7, #25]
            const bool allowRegen = false; // regen-braking is not allowed because it's meaningless in accel
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	763b      	strb	r3, [r7, #24]
            const float critical_speed_mps = 0.0f; // using a low value to prevent excessive wheel spin at low speeds
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
            const float leftRightBias_Nm = 0.0f; // YRC is not enabled for accel, so there should be no left-right torque bias
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
            setLaunchControl(throttlePos_u8, brakePressurePsi_u8, swAngle_deg, leftRightBias_Nm, assumeNoTurn, ignoreYawRate, allowRegen, critical_speed_mps);
 8001d08:	79b8      	ldrb	r0, [r7, #6]
 8001d0a:	7939      	ldrb	r1, [r7, #4]
 8001d0c:	f9b7 4040 	ldrsh.w	r4, [r7, #64]	@ 0x40
 8001d10:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d18:	7ebd      	ldrb	r5, [r7, #26]
 8001d1a:	7e7b      	ldrb	r3, [r7, #25]
 8001d1c:	7e3a      	ldrb	r2, [r7, #24]
 8001d1e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001d22:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001d26:	9201      	str	r2, [sp, #4]
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	eeb0 1b46 	vmov.f64	d1, d6
 8001d2e:	462b      	mov	r3, r5
 8001d30:	eeb0 0b47 	vmov.f64	d0, d7
 8001d34:	4622      	mov	r2, r4
 8001d36:	f000 fb4f 	bl	80023d8 <setLaunchControl>
            break;
 8001d3a:	e02c      	b.n	8001d96 <runControls+0x24e>
        }
        case CMR_CAN_GEAR_TEST: {
            const bool clampbyside = false; 
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	76fb      	strb	r3, [r7, #27]
            setYawRateControl(throttlePos_u8, brakePressurePsi_u8, swAngle_deg, clampbyside);
 8001d40:	7efb      	ldrb	r3, [r7, #27]
 8001d42:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 8001d46:	7939      	ldrb	r1, [r7, #4]
 8001d48:	79b8      	ldrb	r0, [r7, #6]
 8001d4a:	f000 fd4d 	bl	80027e8 <setYawRateControl>
            setTorqueLimsUnprotected(MOTOR_FL, 0.0f, 0.0f);
 8001d4e:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8001da8 <runControls+0x260>
 8001d52:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8001da8 <runControls+0x260>
 8001d56:	2002      	movs	r0, #2
 8001d58:	f004 fa44 	bl	80061e4 <setTorqueLimsUnprotected>
            setTorqueLimsUnprotected(MOTOR_FR, 0.0f, 0.0f); 
 8001d5c:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8001da8 <runControls+0x260>
 8001d60:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8001da8 <runControls+0x260>
 8001d64:	2000      	movs	r0, #0
 8001d66:	f004 fa3d 	bl	80061e4 <setTorqueLimsUnprotected>
            // const bool enableRegen = true;
            // const bool timingTest = false;
            // const bool assumeNoTurn = true;
            // if(!setCVXGENSolver(throttlePos_u8, brakePressurePsi_u8, swAngle_deg, enableRegen, timingTest, assumeNoTurn))
            //     setFastTorque(throttlePos_u8);
            break;
 8001d6a:	e014      	b.n	8001d96 <runControls+0x24e>
        }
        case CMR_CAN_GEAR_REVERSE: {
            // for rule-compliance, the car shouldn't reverse
            setTorqueLimsAllProtected(0.0f, 0.0f);
 8001d6c:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8001da8 <runControls+0x260>
 8001d70:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8001da8 <runControls+0x260>
 8001d74:	f004 f9ae 	bl	80060d4 <setTorqueLimsAllProtected>
            setVelocityInt16All(0);
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f004 fad3 	bl	8006324 <setVelocityInt16All>
            break;
 8001d7e:	e00a      	b.n	8001d96 <runControls+0x24e>
        }
        default: {
            setTorqueLimsAllProtected(0.0f, 0.0f);
 8001d80:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001da8 <runControls+0x260>
 8001d84:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001da8 <runControls+0x260>
 8001d88:	f004 f9a4 	bl	80060d4 <setTorqueLimsAllProtected>
            setVelocityInt16All(0);
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f004 fac9 	bl	8006324 <setVelocityInt16All>
            break;
 8001d92:	e000      	b.n	8001d96 <runControls+0x24e>
            break;
 8001d94:	bf00      	nop
        }
    }
}
 8001d96:	3730      	adds	r7, #48	@ 0x30
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d9c:	f3af 8000 	nop.w
 8001da0:	08da8b60 	.word	0x08da8b60
 8001da4:	3e4066f4 	.word	0x3e4066f4
 8001da8:	00000000 	.word	0x00000000
 8001dac:	24008d40 	.word	0x24008d40

08001db0 <integrateCurrent>:

/**
 * @brief updates kC CAN message
 */
void integrateCurrent() {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
    const cmr_canRXMeta_t *timeoutMsg = canVehicleGetMeta(CANRX_HVI_SENSE);
 8001db6:	200a      	movs	r0, #10
 8001db8:	f7ff fab8 	bl	800132c <canVehicleGetMeta>
 8001dbc:	60f8      	str	r0, [r7, #12]
    if(cmr_canRXMetaTimeoutError(timeoutMsg, xTaskGetTickCount()) == (-1))
 8001dbe:	f00e fc0b 	bl	80105d8 <xTaskGetTickCount>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f00a faf7 	bl	800c3ba <cmr_canRXMetaTimeoutError>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001dd2:	d039      	beq.n	8001e48 <integrateCurrent+0x98>
        return;

	if(coulombCounting.KCoulombs == 0.0f){
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e50 <integrateCurrent+0xa0>)
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de2:	d108      	bne.n	8001df6 <integrateCurrent+0x46>
		previousTickCount = xTaskGetTickCount();
 8001de4:	f00e fbf8 	bl	80105d8 <xTaskGetTickCount>
 8001de8:	4603      	mov	r3, r0
 8001dea:	4a1a      	ldr	r2, [pc, #104]	@ (8001e54 <integrateCurrent+0xa4>)
 8001dec:	6013      	str	r3, [r2, #0]
        coulombCounting.KCoulombs = 0.001f;
 8001dee:	4b18      	ldr	r3, [pc, #96]	@ (8001e50 <integrateCurrent+0xa0>)
 8001df0:	4a19      	ldr	r2, [pc, #100]	@ (8001e58 <integrateCurrent+0xa8>)
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	e029      	b.n	8001e4a <integrateCurrent+0x9a>
	}else{
        const float packCurrent_kA = getPackCurrent()*0.001f;
 8001df6:	f001 f893 	bl	8002f20 <getPackCurrent>
 8001dfa:	eef0 7a40 	vmov.f32	s15, s0
 8001dfe:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001e5c <integrateCurrent+0xac>
 8001e02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e06:	edc7 7a02 	vstr	s15, [r7, #8]
        const TickType_t currentTick = xTaskGetTickCount();
 8001e0a:	f00e fbe5 	bl	80105d8 <xTaskGetTickCount>
 8001e0e:	6078      	str	r0, [r7, #4]
        coulombCounting.KCoulombs += ((currentTick-previousTickCount)*0.001f)*packCurrent_kA;
 8001e10:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <integrateCurrent+0xa0>)
 8001e12:	ed93 7a00 	vldr	s14, [r3]
 8001e16:	4b0f      	ldr	r3, [pc, #60]	@ (8001e54 <integrateCurrent+0xa4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	ee07 3a90 	vmov	s15, r3
 8001e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e26:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8001e5c <integrateCurrent+0xac>
 8001e2a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001e2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e3a:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <integrateCurrent+0xa0>)
 8001e3c:	edc3 7a00 	vstr	s15, [r3]
        previousTickCount = currentTick;
 8001e40:	4a04      	ldr	r2, [pc, #16]	@ (8001e54 <integrateCurrent+0xa4>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e000      	b.n	8001e4a <integrateCurrent+0x9a>
        return;
 8001e48:	bf00      	nop
    }
}
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	24006f58 	.word	0x24006f58
 8001e54:	24006f5c 	.word	0x24006f5c
 8001e58:	3a83126f 	.word	0x3a83126f
 8001e5c:	3a83126f 	.word	0x3a83126f

08001e60 <setSlowTorque>:
 *
 * @param throttlePos_u8 Throttle position, 0-255.
 */
void setSlowTorque (
    uint8_t throttlePos_u8
) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
    const float reqTorque = maxSlowTorque_Nm * (float)(throttlePos_u8) / (float)(UINT8_MAX);
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	ee07 3a90 	vmov	s15, r3
 8001e70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e74:	4b0d      	ldr	r3, [pc, #52]	@ (8001eac <setSlowTorque+0x4c>)
 8001e76:	edd3 7a00 	vldr	s15, [r3]
 8001e7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e7e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001eb0 <setSlowTorque+0x50>
 8001e82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e86:	edc7 7a03 	vstr	s15, [r7, #12]
     setTorqueLimsAllProtected(reqTorque, 0.0f);
 8001e8a:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8001eb4 <setSlowTorque+0x54>
 8001e8e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001e92:	f004 f91f 	bl	80060d4 <setTorqueLimsAllProtected>
//    motorLocation_t active_motor = MOTOR_FR;
//    for(int i = 0; i < MOTOR_LEN; i++) {
//    	setTorqueLimsUnprotected(i, reqTorque, 0.0f);
//    }
//
    setVelocityInt16All(maxSlowSpeed_rpm);
 8001e96:	4b08      	ldr	r3, [pc, #32]	@ (8001eb8 <setSlowTorque+0x58>)
 8001e98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f004 fa41 	bl	8006324 <setVelocityInt16All>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	08022024 	.word	0x08022024
 8001eb0:	437f0000 	.word	0x437f0000
 8001eb4:	00000000 	.word	0x00000000
 8001eb8:	08022028 	.word	0x08022028

08001ebc <setFastTorque>:
 *
 * @param throttlePos_u8 Throttle position, 0-255.
 */
void setFastTorque (
    uint8_t throttlePos_u8
) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]
    const float reqTorque = maxFastTorque_Nm * (float)(throttlePos_u8) / (float)(UINT8_MAX);
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	ee07 3a90 	vmov	s15, r3
 8001ecc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ed0:	4b0d      	ldr	r3, [pc, #52]	@ (8001f08 <setFastTorque+0x4c>)
 8001ed2:	edd3 7a00 	vldr	s15, [r3]
 8001ed6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eda:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001f0c <setFastTorque+0x50>
 8001ede:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ee2:	edc7 7a03 	vstr	s15, [r7, #12]
    setTorqueLimsAllProtected(reqTorque, 0.0f);
 8001ee6:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8001f10 <setFastTorque+0x54>
 8001eea:	ed97 0a03 	vldr	s0, [r7, #12]
 8001eee:	f004 f8f1 	bl	80060d4 <setTorqueLimsAllProtected>
//    setTorqueLimsUnprotected(MOTOR_FL, reqTorque, 0.0f);
//    setTorqueLimsUnprotected(MOTOR_FR, reqTorque, 0.0f);
//    setTorqueLimsUnprotected(MOTOR_RR, reqTorque, 0.0f);
//    setTorqueLimsUnprotected(MOTOR_RL, reqTorque, 0.0f);
    setVelocityInt16All(maxFastSpeed_rpm);
 8001ef2:	4b08      	ldr	r3, [pc, #32]	@ (8001f14 <setFastTorque+0x58>)
 8001ef4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f004 fa13 	bl	8006324 <setVelocityInt16All>
}
 8001efe:	bf00      	nop
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	0802202c 	.word	0x0802202c
 8001f0c:	437f0000 	.word	0x437f0000
 8001f10:	00000000 	.word	0x00000000
 8001f14:	08022030 	.word	0x08022030

08001f18 <setCVXGENSolver>:
    uint8_t brakePressurePsi_u8,
    int16_t swAngle_deg, 
    bool enable_Regen,
    bool timing_Test,
    bool assumeNoTurn
) {
 8001f18:	b590      	push	{r4, r7, lr}
 8001f1a:	b0a9      	sub	sp, #164	@ 0xa4
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4604      	mov	r4, r0
 8001f20:	4608      	mov	r0, r1
 8001f22:	4611      	mov	r1, r2
 8001f24:	461a      	mov	r2, r3
 8001f26:	4623      	mov	r3, r4
 8001f28:	73fb      	strb	r3, [r7, #15]
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	73bb      	strb	r3, [r7, #14]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	81bb      	strh	r3, [r7, #12]
 8001f32:	4613      	mov	r3, r2
 8001f34:	72fb      	strb	r3, [r7, #11]

    if (brakePressurePsi_u8 >= braking_threshold_psi) { // breaking
 8001f36:	7bbb      	ldrb	r3, [r7, #14]
 8001f38:	ee07 3a90 	vmov	s15, r3
 8001f3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f40:	4bc8      	ldr	r3, [pc, #800]	@ (8002264 <setCVXGENSolver+0x34c>)
 8001f42:	edd3 7a00 	vldr	s15, [r3]
 8001f46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4e:	db09      	blt.n	8001f64 <setCVXGENSolver+0x4c>
        setTorqueLimsAllProtected(0.0f, 0.0f);
 8001f50:	eddf 0acc 	vldr	s1, [pc, #816]	@ 8002284 <setCVXGENSolver+0x36c>
 8001f54:	ed9f 0acb 	vldr	s0, [pc, #812]	@ 8002284 <setCVXGENSolver+0x36c>
 8001f58:	f004 f8bc 	bl	80060d4 <setTorqueLimsAllProtected>
        setVelocityInt16All(0);
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f004 f9e1 	bl	8006324 <setVelocityInt16All>
        return; // skip the rest of YRC
 8001f62:	e1d9      	b.n	8002318 <setCVXGENSolver+0x400>
    }
    
    float torque_min_Nm = 0.0f;
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if(enable_Regen){
 8001f6c:	7afb      	ldrb	r3, [r7, #11]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d011      	beq.n	8001f96 <setCVXGENSolver+0x7e>
    	torque_min_Nm = getRegenTorqueReq(&throttlePos_u8, braking_threshold_psi);
 8001f72:	4bbc      	ldr	r3, [pc, #752]	@ (8002264 <setCVXGENSolver+0x34c>)
 8001f74:	edd3 7a00 	vldr	s15, [r3]
 8001f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f7c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001f80:	793b      	ldrb	r3, [r7, #4]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	f107 030f 	add.w	r3, r7, #15
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f001 f8c4 	bl	8003118 <getRegenTorqueReq>
 8001f90:	ed87 0a27 	vstr	s0, [r7, #156]	@ 0x9c
 8001f94:	e003      	b.n	8001f9e <setCVXGENSolver+0x86>
    }else{
    	torque_min_Nm = 0.0f;
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    }

    // get requested torque from four tires
    const float throttle_torque_req_Nm = maxFastTorque_Nm * ((float)(throttlePos_u8) / (float)(UINT8_MAX));
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
 8001fa0:	ee07 3a90 	vmov	s15, r3
 8001fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fa8:	eddf 6aaf 	vldr	s13, [pc, #700]	@ 8002268 <setCVXGENSolver+0x350>
 8001fac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001fb0:	4bae      	ldr	r3, [pc, #696]	@ (800226c <setCVXGENSolver+0x354>)
 8001fb2:	edd3 7a00 	vldr	s15, [r3]
 8001fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fba:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
    const float T_REQ_Nm = throttle_torque_req_Nm * 4.0f;
 8001fbe:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8001fc2:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fca:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    const float bias_Nm = getYawRateControlLeftRightBias(swAngle_deg);
 8001fce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 fb62 	bl	800269c <getYawRateControlLeftRightBias>
 8001fd8:	ed87 0a24 	vstr	s0, [r7, #144]	@ 0x90
    const float left_torques_Nm = throttle_torque_req_Nm - bias_Nm;
 8001fdc:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8001fe0:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001fe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fe8:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    const float right_torques_Nm = throttle_torque_req_Nm + bias_Nm;
 8001fec:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8001ff0:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff8:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

    const float steering_angle_rad = (swAngleDegToSteeringAngleRad(swAngle_deg));
 8001ffc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002000:	4618      	mov	r0, r3
 8002002:	f000 ffdd 	bl	8002fc0 <swAngleDegToSteeringAngleRad>
 8002006:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
    //const float steering_angle_deg = steering_angle_rad * 180.0f / PI;
    
    cmr_torqueDistributionNm_t torques_Req_Nm = {.fl = left_torques_Nm, .fr = right_torques_Nm
 800200a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800200e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002010:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002014:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002016:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800201a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800201c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002020:	633b      	str	r3, [r7, #48]	@ 0x30
                                                , .rl = left_torques_Nm, .rr = right_torques_Nm};

    const float M_REQ_Nm = Mz_calc(&torques_Req_Nm, steering_angle_rad);
 8002022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002026:	ed97 0a21 	vldr	s0, [r7, #132]	@ 0x84
 800202a:	4618      	mov	r0, r3
 800202c:	f000 feac 	bl	8002d88 <Mz_calc>
 8002030:	ed87 0a20 	vstr	s0, [r7, #128]	@ 0x80

    // Default to previous YRC determined torques
    cmr_torqueDistributionNm_t result_torques_Nm = {.fl = left_torques_Nm, .fr = right_torques_Nm
 8002034:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800203e:	61bb      	str	r3, [r7, #24]
 8002040:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800204a:	623b      	str	r3, [r7, #32]
            , .rl = left_torques_Nm, .rr = right_torques_Nm};

    torques_Req_Nm.fl = (getKappaFxGlobalMax(MOTOR_FL, throttlePos_u8, assumeNoTurn).Fx)*EFFECTIVE_WHEEL_RAD_M;
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	f897 20b4 	ldrb.w	r2, [r7, #180]	@ 0xb4
 8002052:	4619      	mov	r1, r3
 8002054:	2002      	movs	r0, #2
 8002056:	f003 fcbd 	bl	80059d4 <getKappaFxGlobalMax>
 800205a:	eeb0 7a40 	vmov.f32	s14, s0
 800205e:	eef0 7a60 	vmov.f32	s15, s1
 8002062:	ed87 7a0d 	vstr	s14, [r7, #52]	@ 0x34
 8002066:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 800206a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800206e:	4b80      	ldr	r3, [pc, #512]	@ (8002270 <setCVXGENSolver+0x358>)
 8002070:	edd3 7a00 	vldr	s15, [r3]
 8002074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002078:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    torques_Req_Nm.fr = (getKappaFxGlobalMax(MOTOR_FR, throttlePos_u8, assumeNoTurn).Fx)*EFFECTIVE_WHEEL_RAD_M;
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	f897 20b4 	ldrb.w	r2, [r7, #180]	@ 0xb4
 8002082:	4619      	mov	r1, r3
 8002084:	2000      	movs	r0, #0
 8002086:	f003 fca5 	bl	80059d4 <getKappaFxGlobalMax>
 800208a:	eeb0 7a40 	vmov.f32	s14, s0
 800208e:	eef0 7a60 	vmov.f32	s15, s1
 8002092:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 8002096:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 800209a:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800209e:	4b74      	ldr	r3, [pc, #464]	@ (8002270 <setCVXGENSolver+0x358>)
 80020a0:	edd3 7a00 	vldr	s15, [r3]
 80020a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    torques_Req_Nm.rl = (getKappaFxGlobalMax(MOTOR_RL, throttlePos_u8, assumeNoTurn).Fx)*EFFECTIVE_WHEEL_RAD_M;
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	f897 20b4 	ldrb.w	r2, [r7, #180]	@ 0xb4
 80020b2:	4619      	mov	r1, r3
 80020b4:	2003      	movs	r0, #3
 80020b6:	f003 fc8d 	bl	80059d4 <getKappaFxGlobalMax>
 80020ba:	eeb0 7a40 	vmov.f32	s14, s0
 80020be:	eef0 7a60 	vmov.f32	s15, s1
 80020c2:	ed87 7a11 	vstr	s14, [r7, #68]	@ 0x44
 80020c6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 80020ca:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80020ce:	4b68      	ldr	r3, [pc, #416]	@ (8002270 <setCVXGENSolver+0x358>)
 80020d0:	edd3 7a00 	vldr	s15, [r3]
 80020d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    torques_Req_Nm.rr = (getKappaFxGlobalMax(MOTOR_RR, throttlePos_u8, assumeNoTurn).Fx)*EFFECTIVE_WHEEL_RAD_M;
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	f897 20b4 	ldrb.w	r2, [r7, #180]	@ 0xb4
 80020e2:	4619      	mov	r1, r3
 80020e4:	2001      	movs	r0, #1
 80020e6:	f003 fc75 	bl	80059d4 <getKappaFxGlobalMax>
 80020ea:	eeb0 7a40 	vmov.f32	s14, s0
 80020ee:	eef0 7a60 	vmov.f32	s15, s1
 80020f2:	ed87 7a13 	vstr	s14, [r7, #76]	@ 0x4c
 80020f6:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 80020fa:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80020fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002270 <setCVXGENSolver+0x358>)
 8002100:	edd3 7a00 	vldr	s15, [r3]
 8002104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002108:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    
    const bool converged = load_data(steering_angle_rad, T_REQ_Nm, M_REQ_Nm, torque_min_Nm,
 800210c:	f107 0214 	add.w	r2, r7, #20
 8002110:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002114:	4611      	mov	r1, r2
 8002116:	4618      	mov	r0, r3
 8002118:	edd7 1a27 	vldr	s3, [r7, #156]	@ 0x9c
 800211c:	ed97 1a20 	vldr	s2, [r7, #128]	@ 0x80
 8002120:	edd7 0a25 	vldr	s1, [r7, #148]	@ 0x94
 8002124:	ed97 0a21 	vldr	s0, [r7, #132]	@ 0x84
 8002128:	f001 f9e6 	bl	80034f8 <load_data>
 800212c:	4603      	mov	r3, r0
 800212e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            &torques_Req_Nm, &result_torques_Nm);

    //CAN message
    if(!converged)
 8002132:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002136:	f083 0301 	eor.w	r3, r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d004      	beq.n	800214a <setCVXGENSolver+0x232>
        nonConvergenceCounter.non_convergence_count += 1;
 8002140:	4b4c      	ldr	r3, [pc, #304]	@ (8002274 <setCVXGENSolver+0x35c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	3301      	adds	r3, #1
 8002146:	4a4b      	ldr	r2, [pc, #300]	@ (8002274 <setCVXGENSolver+0x35c>)
 8002148:	6013      	str	r3, [r2, #0]

    solverTorques.frontLeft_Nm = (int16_t)result_torques_Nm.fl;
 800214a:	edd7 7a05 	vldr	s15, [r7, #20]
 800214e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002152:	ee17 3a90 	vmov	r3, s15
 8002156:	b21a      	sxth	r2, r3
 8002158:	4b47      	ldr	r3, [pc, #284]	@ (8002278 <setCVXGENSolver+0x360>)
 800215a:	801a      	strh	r2, [r3, #0]
    solverTorques.frontRight_Nm = (int16_t)result_torques_Nm.fr;
 800215c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002164:	ee17 3a90 	vmov	r3, s15
 8002168:	b21a      	sxth	r2, r3
 800216a:	4b43      	ldr	r3, [pc, #268]	@ (8002278 <setCVXGENSolver+0x360>)
 800216c:	805a      	strh	r2, [r3, #2]
    solverTorques.rearLeft_Nm = (int16_t)result_torques_Nm.rl;
 800216e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002172:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002176:	ee17 3a90 	vmov	r3, s15
 800217a:	b21a      	sxth	r2, r3
 800217c:	4b3e      	ldr	r3, [pc, #248]	@ (8002278 <setCVXGENSolver+0x360>)
 800217e:	809a      	strh	r2, [r3, #4]
    solverTorques.rearRight_Nm = (int16_t)result_torques_Nm.rr;
 8002180:	edd7 7a08 	vldr	s15, [r7, #32]
 8002184:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002188:	ee17 3a90 	vmov	r3, s15
 800218c:	b21a      	sxth	r2, r3
 800218e:	4b3a      	ldr	r3, [pc, #232]	@ (8002278 <setCVXGENSolver+0x360>)
 8002190:	80da      	strh	r2, [r3, #6]

    solverInfo.moment_req_Nm = M_REQ_Nm;
 8002192:	4a3a      	ldr	r2, [pc, #232]	@ (800227c <setCVXGENSolver+0x364>)
 8002194:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002198:	6013      	str	r3, [r2, #0]
    solverInfo.lin_accel_Nm = T_REQ_Nm;
 800219a:	4a38      	ldr	r2, [pc, #224]	@ (800227c <setCVXGENSolver+0x364>)
 800219c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80021a0:	6053      	str	r3, [r2, #4]

    const float battVoltage_mV =  getPackVoltage();
 80021a2:	f000 fe7d 	bl	8002ea0 <getPackVoltage>
 80021a6:	ed87 0a1e 	vstr	s0, [r7, #120]	@ 0x78
    const float battCurrent_mA = getPackCurrent();
 80021aa:	f000 feb9 	bl	8002f20 <getPackCurrent>
 80021ae:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74

    if(!timing_Test) {
 80021b2:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 80021b6:	f083 0301 	eor.w	r3, r3, #1
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 8085 	beq.w	80022cc <setCVXGENSolver+0x3b4>
    	if(!converged){
 80021c2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80021c6:	f083 0301 	eor.w	r3, r3, #1
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <setCVXGENSolver+0x2bc>
    		return false;
 80021d0:	2300      	movs	r3, #0
 80021d2:	e0a1      	b.n	8002318 <setCVXGENSolver+0x400>
//    		setEnduranceTestTorque(avgMotorSpeed_RPM, throttlePos_u8, brakePos_u8,
//    		               swAngle_deg, battVoltage_mV, battCurrent_mA, brakePressurePsi_u8);
    	}else{
            // set velocities
            float FL_vel = (result_torques_Nm.fl > 0.0f) ? maxFastSpeed_rpm : 0.0f;
 80021d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80021d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e0:	dd07      	ble.n	80021f2 <setCVXGENSolver+0x2da>
 80021e2:	4b27      	ldr	r3, [pc, #156]	@ (8002280 <setCVXGENSolver+0x368>)
 80021e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e8:	ee07 3a90 	vmov	s15, r3
 80021ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021f0:	e001      	b.n	80021f6 <setCVXGENSolver+0x2de>
 80021f2:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8002284 <setCVXGENSolver+0x36c>
 80021f6:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
            float FR_vel = (result_torques_Nm.fr > 0.0f) ? maxFastSpeed_rpm : 0.0f;
 80021fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80021fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002206:	dd07      	ble.n	8002218 <setCVXGENSolver+0x300>
 8002208:	4b1d      	ldr	r3, [pc, #116]	@ (8002280 <setCVXGENSolver+0x368>)
 800220a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800220e:	ee07 3a90 	vmov	s15, r3
 8002212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002216:	e001      	b.n	800221c <setCVXGENSolver+0x304>
 8002218:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8002284 <setCVXGENSolver+0x36c>
 800221c:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
            float RL_vel = (result_torques_Nm.rl > 0.0f) ? maxFastSpeed_rpm : 0.0f;
 8002220:	edd7 7a07 	vldr	s15, [r7, #28]
 8002224:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222c:	dd07      	ble.n	800223e <setCVXGENSolver+0x326>
 800222e:	4b14      	ldr	r3, [pc, #80]	@ (8002280 <setCVXGENSolver+0x368>)
 8002230:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002234:	ee07 3a90 	vmov	s15, r3
 8002238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800223c:	e001      	b.n	8002242 <setCVXGENSolver+0x32a>
 800223e:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8002284 <setCVXGENSolver+0x36c>
 8002242:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
            float RR_vel = (result_torques_Nm.rr > 0.0f) ? maxFastSpeed_rpm : 0.0f;
 8002246:	edd7 7a08 	vldr	s15, [r7, #32]
 800224a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800224e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002252:	dd19      	ble.n	8002288 <setCVXGENSolver+0x370>
 8002254:	4b0a      	ldr	r3, [pc, #40]	@ (8002280 <setCVXGENSolver+0x368>)
 8002256:	f9b3 3000 	ldrsh.w	r3, [r3]
 800225a:	ee07 3a90 	vmov	s15, r3
 800225e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002262:	e013      	b.n	800228c <setCVXGENSolver+0x374>
 8002264:	08044f50 	.word	0x08044f50
 8002268:	437f0000 	.word	0x437f0000
 800226c:	0802202c 	.word	0x0802202c
 8002270:	08022040 	.word	0x08022040
 8002274:	24006f4c 	.word	0x24006f4c
 8002278:	24006f44 	.word	0x24006f44
 800227c:	24006f3c 	.word	0x24006f3c
 8002280:	08022030 	.word	0x08022030
 8002284:	00000000 	.word	0x00000000
 8002288:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 8002284 <setCVXGENSolver+0x36c>
 800228c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

            setVelocityFloat(MOTOR_FL, FL_vel); // Converts rad/s to rpm
 8002290:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 8002294:	2002      	movs	r0, #2
 8002296:	f004 f819 	bl	80062cc <setVelocityFloat>
            setVelocityFloat(MOTOR_FR, FR_vel);
 800229a:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 800229e:	2000      	movs	r0, #0
 80022a0:	f004 f814 	bl	80062cc <setVelocityFloat>
            setVelocityFloat(MOTOR_RL, RL_vel);
 80022a4:	ed97 0a16 	vldr	s0, [r7, #88]	@ 0x58
 80022a8:	2003      	movs	r0, #3
 80022aa:	f004 f80f 	bl	80062cc <setVelocityFloat>
            setVelocityFloat(MOTOR_RR, RR_vel);
 80022ae:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 80022b2:	2001      	movs	r0, #1
 80022b4:	f004 f80a 	bl	80062cc <setVelocityFloat>

            //set torques
            setTorqueLimsProtected(&result_torques_Nm, &result_torques_Nm);
 80022b8:	f107 0214 	add.w	r2, r7, #20
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	4611      	mov	r1, r2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f004 fdd0 	bl	8006e68 <setTorqueLimsProtected>
            return true;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e025      	b.n	8002318 <setCVXGENSolver+0x400>
    	}

    } else {
        float FL_vel = 0.0f;
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	673b      	str	r3, [r7, #112]	@ 0x70
        float FR_vel = 0.0f;
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
        float RL_vel = 0.0f;
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	66bb      	str	r3, [r7, #104]	@ 0x68
        float RR_vel = 0.0f;
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	667b      	str	r3, [r7, #100]	@ 0x64

        setVelocityFloat(MOTOR_FL, FL_vel); // Converts rad/s to rpm
 80022e4:	ed97 0a1c 	vldr	s0, [r7, #112]	@ 0x70
 80022e8:	2002      	movs	r0, #2
 80022ea:	f003 ffef 	bl	80062cc <setVelocityFloat>
        setVelocityFloat(MOTOR_FR, FR_vel);
 80022ee:	ed97 0a1b 	vldr	s0, [r7, #108]	@ 0x6c
 80022f2:	2000      	movs	r0, #0
 80022f4:	f003 ffea 	bl	80062cc <setVelocityFloat>
        setVelocityFloat(MOTOR_RL, RL_vel);
 80022f8:	ed97 0a1a 	vldr	s0, [r7, #104]	@ 0x68
 80022fc:	2003      	movs	r0, #3
 80022fe:	f003 ffe5 	bl	80062cc <setVelocityFloat>
        setVelocityFloat(MOTOR_RR, RR_vel);
 8002302:	ed97 0a19 	vldr	s0, [r7, #100]	@ 0x64
 8002306:	2001      	movs	r0, #1
 8002308:	f003 ffe0 	bl	80062cc <setVelocityFloat>

        //set torques
        setTorqueLimsAllProtected(0.0f, 0.0f);
 800230c:	ed5f 0a23 	vldr	s1, [pc, #-140]	@ 8002284 <setCVXGENSolver+0x36c>
 8002310:	ed1f 0a24 	vldr	s0, [pc, #-144]	@ 8002284 <setCVXGENSolver+0x36c>
 8002314:	f003 fede 	bl	80060d4 <setTorqueLimsAllProtected>
    	//setFastTorque(throttlePos_u8);
    }
    
    
    //TODO still need to update wheelspeeds, make sure all other CAN messages are sent.
}
 8002318:	4618      	mov	r0, r3
 800231a:	37a4      	adds	r7, #164	@ 0xa4
 800231c:	46bd      	mov	sp, r7
 800231e:	bd90      	pop	{r4, r7, pc}

08002320 <getFFScheduleVelocity>:
*
* @param t_sec elapsed accel time (sec)
*
* @return the target vehicle velocity (m/s)
*/
static float getFFScheduleVelocity(float t_sec) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b088      	sub	sp, #32
 8002324:	af00      	add	r7, sp, #0
 8002326:	ed87 0a01 	vstr	s0, [r7, #4]

   float tMax = 6.4f; // limit time for safety reasons
 800232a:	4b28      	ldr	r3, [pc, #160]	@ (80023cc <getFFScheduleVelocity+0xac>)
 800232c:	61bb      	str	r3, [r7, #24]
   float scheduleVelocity_mps = 0.0f;
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	61fb      	str	r3, [r7, #28]

   if (t_sec < 0.0f) {
 8002334:	edd7 7a01 	vldr	s15, [r7, #4]
 8002338:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800233c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002340:	d503      	bpl.n	800234a <getFFScheduleVelocity+0x2a>
       scheduleVelocity_mps = 0.0f;
 8002342:	f04f 0300 	mov.w	r3, #0
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	e038      	b.n	80023bc <getFFScheduleVelocity+0x9c>
   } else if(t_sec < tMax) {
 800234a:	ed97 7a01 	vldr	s14, [r7, #4]
 800234e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002352:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800235a:	d52c      	bpl.n	80023b6 <getFFScheduleVelocity+0x96>
//	uint8_t pedal_regen_strength = 0; This line times out mysteriously
    float pedal_regen_strength = 0;
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
   	getProcessedValue(&pedal_regen_strength, YRC_KP_INDEX, float_1_decimal);
 8002362:	f107 0310 	add.w	r3, r7, #16
 8002366:	2200      	movs	r2, #0
 8002368:	2103      	movs	r1, #3
 800236a:	4618      	mov	r0, r3
 800236c:	f00a fa10 	bl	800c790 <getProcessedValue>

   	float scheduleVelocity_mps2 = ((float) pedal_regen_strength) * 0.8f + 6.f;
 8002370:	edd7 7a04 	vldr	s15, [r7, #16]
 8002374:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80023d0 <getFFScheduleVelocity+0xb0>
 8002378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800237c:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8002380:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002384:	edc7 7a05 	vstr	s15, [r7, #20]
   	float startingVel_mps = 0.0;
 8002388:	f04f 0300 	mov.w	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
   	getProcessedValue(&startingVel_mps, K_LIN_INDEX, float_1_decimal);
 800238e:	f107 030c 	add.w	r3, r7, #12
 8002392:	2200      	movs	r2, #0
 8002394:	2109      	movs	r1, #9
 8002396:	4618      	mov	r0, r3
 8002398:	f00a f9fa 	bl	800c790 <getProcessedValue>
       scheduleVelocity_mps = (scheduleVelocity_mps2 * t_sec) + (startingVel_mps);
 800239c:	ed97 7a05 	vldr	s14, [r7, #20]
 80023a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80023a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80023ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b0:	edc7 7a07 	vstr	s15, [r7, #28]
 80023b4:	e002      	b.n	80023bc <getFFScheduleVelocity+0x9c>
           // 2023 Michigan EV fastest accel - 3.645s -> 11.29m/s^2 linear accel
           // 2023 Michigan EV CMR's accel -> memorator data -> 8.63m/s^2 before
   } else {
       scheduleVelocity_mps = 0.0f;
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	61fb      	str	r3, [r7, #28]
   }

   return scheduleVelocity_mps;
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	ee07 3a90 	vmov	s15, r3
}
 80023c2:	eeb0 0a67 	vmov.f32	s0, s15
 80023c6:	3720      	adds	r7, #32
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40cccccd 	.word	0x40cccccd
 80023d0:	3f4ccccd 	.word	0x3f4ccccd
 80023d4:	00000000 	.word	0x00000000

080023d8 <setLaunchControl>:
	float leftRightBias_Nm, /** IGNORED UNLESS traction_control_mode (defined in the function) is TC_MODE_TORQUE */
	bool assumeNoTurn,
	bool ignoreYawRate,
	bool allowRegen,
	float critical_speed_mps
){
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b09d      	sub	sp, #116	@ 0x74
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4604      	mov	r4, r0
 80023e0:	4608      	mov	r0, r1
 80023e2:	4611      	mov	r1, r2
 80023e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80023e8:	461a      	mov	r2, r3
 80023ea:	edc7 0a00 	vstr	s1, [r7]
 80023ee:	4623      	mov	r3, r4
 80023f0:	73fb      	strb	r3, [r7, #15]
 80023f2:	4603      	mov	r3, r0
 80023f4:	73bb      	strb	r3, [r7, #14]
 80023f6:	460b      	mov	r3, r1
 80023f8:	81bb      	strh	r3, [r7, #12]
 80023fa:	4613      	mov	r3, r2
 80023fc:	71fb      	strb	r3, [r7, #7]
	static const float launch_control_speed_threshold_mps = 0.05f;
	//launch control
	float test = 0.0f;
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	637b      	str	r3, [r7, #52]	@ 0x34
   	getProcessedValue(&test, YRC_KP_INDEX, float_1_decimal);
 8002404:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002408:	2200      	movs	r2, #0
 800240a:	2103      	movs	r1, #3
 800240c:	4618      	mov	r0, r3
 800240e:	f00a f9bf 	bl	800c790 <getProcessedValue>
	bool inhibit_throttle = false;
 8002412:	2300      	movs	r3, #0
 8002414:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	const float nonnegative_odometer_velocity_mps = motorSpeedToWheelLinearSpeed_mps(getTotalMotorSpeed_radps() * 0.25f);
 8002418:	f004 f870 	bl	80064fc <getTotalMotorSpeed_radps>
 800241c:	eef0 7a40 	vmov.f32	s15, s0
 8002420:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8002424:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002428:	eeb0 0a67 	vmov.f32	s0, s15
 800242c:	f004 f820 	bl	8006470 <motorSpeedToWheelLinearSpeed_mps>
 8002430:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
	if (nonnegative_odometer_velocity_mps < launch_control_speed_threshold_mps) { // odometer velocity is below the launch control threshold
 8002434:	4b8c      	ldr	r3, [pc, #560]	@ (8002668 <setLaunchControl+0x290>)
 8002436:	edd3 7a00 	vldr	s15, [r3]
 800243a:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 800243e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002446:	d532      	bpl.n	80024ae <setLaunchControl+0xd6>
		const bool action1_button_pressed = (((volatile cmr_canDIMActions_t *)(canVehicleGetPayload(CANRX_VEH_DIM_ACTION_BUTTON)))->buttons) & BUTTON_ACT;
 8002448:	2005      	movs	r0, #5
 800244a:	f7fe ff39 	bl	80012c0 <canVehicleGetPayload>
 800244e:	4603      	mov	r3, r0
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	b2db      	uxtb	r3, r3
 8002454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002458:	2b00      	cmp	r3, #0
 800245a:	bf14      	ite	ne
 800245c:	2301      	movne	r3, #1
 800245e:	2300      	moveq	r3, #0
 8002460:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		inhibit_throttle = action1_button_pressed; // inhibit throttle if action1 is pressed
 8002464:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002468:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		if (inhibit_throttle) {
 800246c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <setLaunchControl+0xa2>
			launchControlButtonPressed = true;
 8002474:	4b7d      	ldr	r3, [pc, #500]	@ (800266c <setLaunchControl+0x294>)
 8002476:	2201      	movs	r2, #1
 8002478:	701a      	strb	r2, [r3, #0]
		}

		if(launchControlButtonPressed & !inhibit_throttle) {
 800247a:	4b7c      	ldr	r3, [pc, #496]	@ (800266c <setLaunchControl+0x294>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002484:	f083 0301 	eor.w	r3, r3, #1
 8002488:	b2db      	uxtb	r3, r3
 800248a:	4013      	ands	r3, r2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00e      	beq.n	80024ae <setLaunchControl+0xd6>

			if(!launchControlActive)
 8002490:	4b77      	ldr	r3, [pc, #476]	@ (8002670 <setLaunchControl+0x298>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	f083 0301 	eor.w	r3, r3, #1
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d007      	beq.n	80024ae <setLaunchControl+0xd6>
			{
				startTickCount = xTaskGetTickCount();
 800249e:	f00e f89b 	bl	80105d8 <xTaskGetTickCount>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4a73      	ldr	r2, [pc, #460]	@ (8002674 <setLaunchControl+0x29c>)
 80024a6:	6013      	str	r3, [r2, #0]
				launchControlActive = true;
 80024a8:	4b71      	ldr	r3, [pc, #452]	@ (8002670 <setLaunchControl+0x298>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	701a      	strb	r2, [r3, #0]
//	                startTickCount = xTaskGetTickCount();
//	            launchControlActive = true;
//	        }else
//	            launchControlActive = (startTickCount != 0) ? false: true;
//	     }
	cmr_torqueDistributionNm_t neg_torques_Nm = {.fl = 0.0f, .fr = 0.0f, .rl = 0.0f, .rr = 0.0f};
 80024ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	60da      	str	r2, [r3, #12]
	 if (brakePressurePsi_u8 < braking_threshold_psi && throttlePos_u8 > 0 && !inhibit_throttle && launchControlActive) { // not braking and throttle is not neutral or inhibited
 80024bc:	7bbb      	ldrb	r3, [r7, #14]
 80024be:	ee07 3a90 	vmov	s15, r3
 80024c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024c6:	4b6c      	ldr	r3, [pc, #432]	@ (8002678 <setLaunchControl+0x2a0>)
 80024c8:	edd3 7a00 	vldr	s15, [r3]
 80024cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d4:	f140 80b8 	bpl.w	8002648 <setLaunchControl+0x270>
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 80b4 	beq.w	8002648 <setLaunchControl+0x270>
 80024e0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80024e4:	f083 0301 	eor.w	r3, r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 80ac 	beq.w	8002648 <setLaunchControl+0x270>
 80024f0:	4b5f      	ldr	r3, [pc, #380]	@ (8002670 <setLaunchControl+0x298>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 80a7 	beq.w	8002648 <setLaunchControl+0x270>
	         TickType_t tick = xTaskGetTickCount();
 80024fa:	f00e f86d 	bl	80105d8 <xTaskGetTickCount>
 80024fe:	6638      	str	r0, [r7, #96]	@ 0x60
	         float seconds = (float)(tick - startTickCount) * (0.001f); //convert Tick Count to Seconds
 8002500:	4b5c      	ldr	r3, [pc, #368]	@ (8002674 <setLaunchControl+0x29c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	ee07 3a90 	vmov	s15, r3
 800250c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002510:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 800267c <setLaunchControl+0x2a4>
 8002514:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002518:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c


	         //debugging
	         if (seconds > 0.5) {
 800251c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002520:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252c:	dd02      	ble.n	8002534 <setLaunchControl+0x15c>
	         	uint8_t x = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	         }

	         float scheduledBodyVel_mps = getFFScheduleVelocity(seconds);
 8002534:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 8002538:	f7ff fef2 	bl	8002320 <getFFScheduleVelocity>
 800253c:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54

	         float rearWhlVelocity_RL_mps = motorSpeedToWheelLinearSpeed_mps(getMotorSpeed_radps(MOTOR_RL));
 8002540:	2003      	movs	r0, #3
 8002542:	f003 ffc1 	bl	80064c8 <getMotorSpeed_radps>
 8002546:	eef0 7a40 	vmov.f32	s15, s0
 800254a:	eeb0 0a67 	vmov.f32	s0, s15
 800254e:	f003 ff8f 	bl	8006470 <motorSpeedToWheelLinearSpeed_mps>
 8002552:	ed87 0a14 	vstr	s0, [r7, #80]	@ 0x50
	         float rearWhlVelocity_RR_mps = motorSpeedToWheelLinearSpeed_mps(getMotorSpeed_radps(MOTOR_RR));
 8002556:	2001      	movs	r0, #1
 8002558:	f003 ffb6 	bl	80064c8 <getMotorSpeed_radps>
 800255c:	eef0 7a40 	vmov.f32	s15, s0
 8002560:	eeb0 0a67 	vmov.f32	s0, s15
 8002564:	f003 ff84 	bl	8006470 <motorSpeedToWheelLinearSpeed_mps>
 8002568:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
//			setVelocityFloat(MOTOR_FL, frontWhlSetpoints.omega_FL * GEAR_RATIO * 60.0f / (2.0f * M_PI)); // Converts rad/s to rpm
//			setVelocityFloat(MOTOR_FR, frontWhlSetpoints.omega_FR * GEAR_RATIO * 60.0f / (2.0f * M_PI));
//			setVelocityFloat(MOTOR_RL, rearWhlSetpoints.omega_RL * GEAR_RATIO * 60.0f / (2.0f * M_PI));
//			setVelocityFloat(MOTOR_RR, rearWhlSetpoints.omega_RR * GEAR_RATIO * 60.0f / (2.0f * M_PI));

	        float wheelVelocityRPM = maxFastSpeed_rpm;//GEAR_RATIO * 60.0f * scheduledBodyVel_mps / (2 * M_PI * EFFECTIVE_WHEEL_RAD_M);
 800256c:	4b44      	ldr	r3, [pc, #272]	@ (8002680 <setLaunchControl+0x2a8>)
 800256e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002572:	ee07 3a90 	vmov	s15, r3
 8002576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800257a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	        float rearWhlAvgVelocity_mps = (rearWhlVelocity_RL_mps + rearWhlVelocity_RR_mps) / 2.0f;
 800257e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002582:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002586:	ee37 7a27 	vadd.f32	s14, s14, s15
 800258a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800258e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002592:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	        float frontWhlTargetVelocity_mps = rearWhlAvgVelocity_mps * 1.3f;
 8002596:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800259a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8002684 <setLaunchControl+0x2ac>
 800259e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025a2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	        float frontWheelVelocityRPM = GEAR_RATIO * 60.0f * frontWhlTargetVelocity_mps / (2 * M_PI * EFFECTIVE_WHEEL_RAD_M);
 80025a6:	4b38      	ldr	r3, [pc, #224]	@ (8002688 <setLaunchControl+0x2b0>)
 80025a8:	edd3 7a00 	vldr	s15, [r3]
 80025ac:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800268c <setLaunchControl+0x2b4>
 80025b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025b4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80025b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025bc:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80025c0:	4b33      	ldr	r3, [pc, #204]	@ (8002690 <setLaunchControl+0x2b8>)
 80025c2:	edd3 7a00 	vldr	s15, [r3]
 80025c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025ca:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8002660 <setLaunchControl+0x288>
 80025ce:	ee27 6b06 	vmul.f64	d6, d7, d6
 80025d2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80025d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80025da:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

			setVelocityFloat(MOTOR_FL, frontWheelVelocityRPM); // Converts rad/s to rpm
 80025de:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80025e2:	2002      	movs	r0, #2
 80025e4:	f003 fe72 	bl	80062cc <setVelocityFloat>
			setVelocityFloat(MOTOR_FR, frontWheelVelocityRPM);
 80025e8:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80025ec:	2000      	movs	r0, #0
 80025ee:	f003 fe6d 	bl	80062cc <setVelocityFloat>
			setVelocityFloat(MOTOR_RL, wheelVelocityRPM);
 80025f2:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 80025f6:	2003      	movs	r0, #3
 80025f8:	f003 fe68 	bl	80062cc <setVelocityFloat>
			setVelocityFloat(MOTOR_RR, wheelVelocityRPM);
 80025fc:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 8002600:	2001      	movs	r0, #1
 8002602:	f003 fe63 	bl	80062cc <setVelocityFloat>

			const float reqTorque = maxFastTorque_Nm * (float)(throttlePos_u8) / (float)(UINT8_MAX);
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	ee07 3a90 	vmov	s15, r3
 800260c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002610:	4b20      	ldr	r3, [pc, #128]	@ (8002694 <setLaunchControl+0x2bc>)
 8002612:	edd3 7a00 	vldr	s15, [r3]
 8002616:	ee27 7a27 	vmul.f32	s14, s14, s15
 800261a:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8002698 <setLaunchControl+0x2c0>
 800261e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002622:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
			cmr_torqueDistributionNm_t pos_torques_Nm = {.fl = reqTorque, .fr = reqTorque, .rl = reqTorque, .rr = reqTorque};
 8002626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002634:	623b      	str	r3, [r7, #32]

			setTorqueLimsProtected(&pos_torques_Nm, &neg_torques_Nm);
 8002636:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800263a:	f107 0314 	add.w	r3, r7, #20
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f004 fc11 	bl	8006e68 <setTorqueLimsProtected>
 8002646:	e008      	b.n	800265a <setLaunchControl+0x282>
//			setTorqueLimsUnprotected(MOTOR_RL, reqTorque, 0);
//			setTorqueLimsUnprotected(MOTOR_RR, reqTorque, 0);
			return;

	  }else{
		 setTorqueLimsProtected(&neg_torques_Nm, &neg_torques_Nm);
 8002648:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800264c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002650:	4611      	mov	r1, r2
 8002652:	4618      	mov	r0, r3
 8002654:	f004 fc08 	bl	8006e68 <setTorqueLimsProtected>
		 return;
 8002658:	bf00      	nop
	  }

}
 800265a:	3774      	adds	r7, #116	@ 0x74
 800265c:	46bd      	mov	sp, r7
 800265e:	bd90      	pop	{r4, r7, pc}
 8002660:	54442d18 	.word	0x54442d18
 8002664:	401921fb 	.word	0x401921fb
 8002668:	08022010 	.word	0x08022010
 800266c:	24006f38 	.word	0x24006f38
 8002670:	24006f39 	.word	0x24006f39
 8002674:	24006f34 	.word	0x24006f34
 8002678:	08044f50 	.word	0x08044f50
 800267c:	3a83126f 	.word	0x3a83126f
 8002680:	08022030 	.word	0x08022030
 8002684:	3fa66666 	.word	0x3fa66666
 8002688:	0802203c 	.word	0x0802203c
 800268c:	42700000 	.word	0x42700000
 8002690:	08022040 	.word	0x08022040
 8002694:	0802202c 	.word	0x0802202c
 8002698:	437f0000 	.word	0x437f0000

0800269c <getYawRateControlLeftRightBias>:

/**
 * @brief Calculate the control action (left-right torque bias) of the yaw rate controller
 * @param swAngle_deg Steering wheel angle
 */
static float getYawRateControlLeftRightBias(int16_t swAngle_deg) {
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	@ 0x28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	80fb      	strh	r3, [r7, #6]
     *  @note Increasing this value decreases yaw rate setpoint, especially when linear velocity is high
     */
    static const float natural_understeer_gradient = 0.011465f; //rad/g

    // get sensor data
    const volatile cmr_canSBGBodyVelocity_t *body_vels = canDAQGetPayload(CANRX_DAQ_SBG_BODY_VEL);
 80026a6:	2006      	movs	r0, #6
 80026a8:	f7fe fe2e 	bl	8001308 <canDAQGetPayload>
 80026ac:	6278      	str	r0, [r7, #36]	@ 0x24
    const volatile cmr_canSBGIMUGyro_t *body_gyro = canDAQGetPayload(CANRX_DAQ_SBG_IMU_GYRO);
 80026ae:	2005      	movs	r0, #5
 80026b0:	f7fe fe2a 	bl	8001308 <canDAQGetPayload>
 80026b4:	6238      	str	r0, [r7, #32]
    const float forward_velocity_nonnegative_mps = fmaxf(((float)(body_vels->velocity_forward)) * 1e-2f, 0.0f); // velocity_forward is in (m/s times 100)
 80026b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	b21b      	sxth	r3, r3
 80026bc:	ee07 3a90 	vmov	s15, r3
 80026c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026c4:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80027c0 <getYawRateControlLeftRightBias+0x124>
 80026c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026cc:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 80027c4 <getYawRateControlLeftRightBias+0x128>
 80026d0:	eeb0 0a67 	vmov.f32	s0, s15
 80026d4:	f01c f9f0 	bl	801eab8 <fmaxf>
 80026d8:	ed87 0a07 	vstr	s0, [r7, #28]
    const float yaw_rate_radps_sae = ((float)(body_gyro->gyro_z_rads)) * 1e-3f; // gyro_z_rads is in (rad/s times 1000)
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	889b      	ldrh	r3, [r3, #4]
 80026e0:	b21b      	sxth	r3, r3
 80026e2:	ee07 3a90 	vmov	s15, r3
 80026e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ea:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80027c8 <getYawRateControlLeftRightBias+0x12c>
 80026ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026f2:	edc7 7a06 	vstr	s15, [r7, #24]

    const float steering_angle_rad = swAngleDegToSteeringAngleRad(swAngle_deg);
 80026f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fc60 	bl	8002fc0 <swAngleDegToSteeringAngleRad>
 8002700:	ed87 0a05 	vstr	s0, [r7, #20]
    const float distance_between_axles_m = chassis_a + chassis_b;
 8002704:	4b31      	ldr	r3, [pc, #196]	@ (80027cc <getYawRateControlLeftRightBias+0x130>)
 8002706:	ed93 7a00 	vldr	s14, [r3]
 800270a:	4b31      	ldr	r3, [pc, #196]	@ (80027d0 <getYawRateControlLeftRightBias+0x134>)
 800270c:	edd3 7a00 	vldr	s15, [r3]
 8002710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002714:	edc7 7a04 	vstr	s15, [r7, #16]
    const float yaw_rate_setpoint_radps = steering_angle_rad * forward_velocity_nonnegative_mps /
 8002718:	ed97 7a05 	vldr	s14, [r7, #20]
 800271c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002720:	ee67 6a27 	vmul.f32	s13, s14, s15
        (distance_between_axles_m + forward_velocity_nonnegative_mps * forward_velocity_nonnegative_mps * natural_understeer_gradient);
 8002724:	edd7 7a07 	vldr	s15, [r7, #28]
 8002728:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800272c:	4b29      	ldr	r3, [pc, #164]	@ (80027d4 <getYawRateControlLeftRightBias+0x138>)
 800272e:	edd3 7a00 	vldr	s15, [r3]
 8002732:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002736:	edd7 7a04 	vldr	s15, [r7, #16]
 800273a:	ee37 7a27 	vadd.f32	s14, s14, s15
    const float yaw_rate_setpoint_radps = steering_angle_rad * forward_velocity_nonnegative_mps /
 800273e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002742:	edc7 7a03 	vstr	s15, [r7, #12]
    yrcDebug.controls_target_yaw_rate = yaw_rate_setpoint_radps;
 8002746:	edd7 7a03 	vldr	s15, [r7, #12]
 800274a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800274e:	ee17 3a90 	vmov	r3, s15
 8002752:	b21a      	sxth	r2, r3
 8002754:	4b20      	ldr	r3, [pc, #128]	@ (80027d8 <getYawRateControlLeftRightBias+0x13c>)
 8002756:	805a      	strh	r2, [r3, #2]
    yrcDebug.controls_current_yaw_rate = yaw_rate_radps_sae;
 8002758:	edd7 7a06 	vldr	s15, [r7, #24]
 800275c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002760:	ee17 3a90 	vmov	r3, s15
 8002764:	b21a      	sxth	r2, r3
 8002766:	4b1c      	ldr	r3, [pc, #112]	@ (80027d8 <getYawRateControlLeftRightBias+0x13c>)
 8002768:	801a      	strh	r2, [r3, #0]
    if (!canTrustSBGVelocity(trust_sbg_vels_when_invalid)) {
 800276a:	4b1c      	ldr	r3, [pc, #112]	@ (80027dc <getYawRateControlLeftRightBias+0x140>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f000 fc52 	bl	8003018 <canTrustSBGVelocity>
 8002774:	4603      	mov	r3, r0
 8002776:	f083 0301 	eor.w	r3, r3, #1
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <getYawRateControlLeftRightBias+0xf0>
        yrcDebug.controls_pid = -1.0f; // SBG velocity can't be trusted
 8002780:	4b15      	ldr	r3, [pc, #84]	@ (80027d8 <getYawRateControlLeftRightBias+0x13c>)
 8002782:	4a17      	ldr	r2, [pc, #92]	@ (80027e0 <getYawRateControlLeftRightBias+0x144>)
 8002784:	605a      	str	r2, [r3, #4]
        return 0.0f;
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	e011      	b.n	80027b0 <getYawRateControlLeftRightBias+0x114>
    }
    yrcDebug.controls_pid = yrc_kp;
 800278c:	4b15      	ldr	r3, [pc, #84]	@ (80027e4 <getYawRateControlLeftRightBias+0x148>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a11      	ldr	r2, [pc, #68]	@ (80027d8 <getYawRateControlLeftRightBias+0x13c>)
 8002792:	6053      	str	r3, [r2, #4]
    const float left_right_bias = yrc_kp * (yaw_rate_radps_sae - yaw_rate_setpoint_radps);
 8002794:	ed97 7a06 	vldr	s14, [r7, #24]
 8002798:	edd7 7a03 	vldr	s15, [r7, #12]
 800279c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027a0:	4b10      	ldr	r3, [pc, #64]	@ (80027e4 <getYawRateControlLeftRightBias+0x148>)
 80027a2:	edd3 7a00 	vldr	s15, [r3]
 80027a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027aa:	edc7 7a02 	vstr	s15, [r7, #8]

    return left_right_bias;
 80027ae:	68bb      	ldr	r3, [r7, #8]
}
 80027b0:	ee07 3a90 	vmov	s15, r3
 80027b4:	eeb0 0a67 	vmov.f32	s0, s15
 80027b8:	3728      	adds	r7, #40	@ 0x28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	3c23d70a 	.word	0x3c23d70a
 80027c4:	00000000 	.word	0x00000000
 80027c8:	3a83126f 	.word	0x3a83126f
 80027cc:	08022034 	.word	0x08022034
 80027d0:	08022038 	.word	0x08022038
 80027d4:	08022014 	.word	0x08022014
 80027d8:	24006ef8 	.word	0x24006ef8
 80027dc:	08022018 	.word	0x08022018
 80027e0:	bf800000 	.word	0xbf800000
 80027e4:	24006f00 	.word	0x24006f00

080027e8 <setYawRateControl>:
void setYawRateControl (
    uint8_t throttlePos_u8,
    uint8_t brakePressurePsi_u8,
    int16_t swAngle_deg,
    bool clampbyside
) {
 80027e8:	b590      	push	{r4, r7, lr}
 80027ea:	b095      	sub	sp, #84	@ 0x54
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4604      	mov	r4, r0
 80027f0:	4608      	mov	r0, r1
 80027f2:	4611      	mov	r1, r2
 80027f4:	461a      	mov	r2, r3
 80027f6:	4623      	mov	r3, r4
 80027f8:	71fb      	strb	r3, [r7, #7]
 80027fa:	4603      	mov	r3, r0
 80027fc:	71bb      	strb	r3, [r7, #6]
 80027fe:	460b      	mov	r3, r1
 8002800:	80bb      	strh	r3, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	70fb      	strb	r3, [r7, #3]
    if (brakePressurePsi_u8 >= braking_threshold_psi) { // breaking
 8002806:	79bb      	ldrb	r3, [r7, #6]
 8002808:	ee07 3a90 	vmov	s15, r3
 800280c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002810:	4baf      	ldr	r3, [pc, #700]	@ (8002ad0 <setYawRateControl+0x2e8>)
 8002812:	edd3 7a00 	vldr	s15, [r3]
 8002816:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800281a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281e:	db09      	blt.n	8002834 <setYawRateControl+0x4c>
        setTorqueLimsAllProtected(0.0f, 0.0f);
 8002820:	eddf 0aac 	vldr	s1, [pc, #688]	@ 8002ad4 <setYawRateControl+0x2ec>
 8002824:	ed9f 0aab 	vldr	s0, [pc, #684]	@ 8002ad4 <setYawRateControl+0x2ec>
 8002828:	f003 fc54 	bl	80060d4 <setTorqueLimsAllProtected>
        setVelocityInt16All(0);
 800282c:	2000      	movs	r0, #0
 800282e:	f003 fd79 	bl	8006324 <setVelocityInt16All>
 8002832:	e13f      	b.n	8002ab4 <setYawRateControl+0x2cc>
        return; // skip the rest of YRC
    }

    // get requested torque from throttle
    const float throttle_pos_torque_Nm = maxFastTorque_Nm * (float)(throttlePos_u8) / (float)(UINT8_MAX);
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	ee07 3a90 	vmov	s15, r3
 800283a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800283e:	4ba6      	ldr	r3, [pc, #664]	@ (8002ad8 <setYawRateControl+0x2f0>)
 8002840:	edd3 7a00 	vldr	s15, [r3]
 8002844:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002848:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 8002adc <setYawRateControl+0x2f4>
 800284c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002850:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

    // calculate left-right torque bias, positive values increase torque output on the right side and decreases that on the left side
    float left_right_torque_bias_Nm = getYawRateControlLeftRightBias(swAngle_deg) * 0.5f; // halved because the bias will be applied to two wheels per side
 8002854:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff1f 	bl	800269c <getYawRateControlLeftRightBias>
 800285e:	eef0 7a40 	vmov.f32	s15, s0
 8002862:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002866:	ee67 7a87 	vmul.f32	s15, s15, s14
 800286a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    left_right_torque_bias_Nm = fminf(left_right_torque_bias_Nm, throttle_pos_torque_Nm); // ensures left_right_torque_bias_Nm <= throttle_pos_torque_Nm
 800286e:	edd7 0a13 	vldr	s1, [r7, #76]	@ 0x4c
 8002872:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 8002876:	f01c f93c 	bl	801eaf2 <fminf>
 800287a:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    left_right_torque_bias_Nm = fmaxf(left_right_torque_bias_Nm, -throttle_pos_torque_Nm); // ensures left_right_torque_bias_Nm >= -throttle_pos_torque_Nm
 800287e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002882:	eef1 7a67 	vneg.f32	s15, s15
 8002886:	eef0 0a67 	vmov.f32	s1, s15
 800288a:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 800288e:	f01c f913 	bl	801eab8 <fmaxf>
 8002892:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48

    const cmr_torqueDistributionNm_t pos_torques_Nm = {
        // if bias is negative, more torque will be applied to left wheels, turning right
        .fl = throttle_pos_torque_Nm - left_right_torque_bias_Nm,
 8002896:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800289a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800289e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const cmr_torqueDistributionNm_t pos_torques_Nm = {
 80028a2:	edc7 7a03 	vstr	s15, [r7, #12]
        .rl = throttle_pos_torque_Nm - left_right_torque_bias_Nm,
        // if bias is positive, more torque will be applied to right wheels, turning left
        .fr = throttle_pos_torque_Nm + left_right_torque_bias_Nm,
 80028a6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80028aa:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80028ae:	ee77 7a27 	vadd.f32	s15, s14, s15
    const cmr_torqueDistributionNm_t pos_torques_Nm = {
 80028b2:	edc7 7a04 	vstr	s15, [r7, #16]
        .rl = throttle_pos_torque_Nm - left_right_torque_bias_Nm,
 80028b6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80028ba:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80028be:	ee77 7a67 	vsub.f32	s15, s14, s15
    const cmr_torqueDistributionNm_t pos_torques_Nm = {
 80028c2:	edc7 7a05 	vstr	s15, [r7, #20]
        .rr = throttle_pos_torque_Nm + left_right_torque_bias_Nm
 80028c6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80028ca:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80028ce:	ee77 7a27 	vadd.f32	s15, s14, s15
    const cmr_torqueDistributionNm_t pos_torques_Nm = {
 80028d2:	edc7 7a06 	vstr	s15, [r7, #24]
    };

    setTorqueLimsProtected(&pos_torques_Nm, NULL); // set torque limits according to the biased distribution
 80028d6:	f107 030c 	add.w	r3, r7, #12
 80028da:	2100      	movs	r1, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f004 fac3 	bl	8006e68 <setTorqueLimsProtected>
    // setVelocityInt16All(maxFastSpeed_rpm); // set wheel speed setpoints to maximum


    if (!clampbyside){ // clamp only front wheels to rear wheel average
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	f083 0301 	eor.w	r3, r3, #1
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d063      	beq.n	80029b6 <setYawRateControl+0x1ce>

        float rearWhlVelocity_RL_mps = motorSpeedToWheelLinearSpeed_mps(getMotorSpeed_radps(MOTOR_RL));
 80028ee:	2003      	movs	r0, #3
 80028f0:	f003 fdea 	bl	80064c8 <getMotorSpeed_radps>
 80028f4:	eef0 7a40 	vmov.f32	s15, s0
 80028f8:	eeb0 0a67 	vmov.f32	s0, s15
 80028fc:	f003 fdb8 	bl	8006470 <motorSpeedToWheelLinearSpeed_mps>
 8002900:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
        float rearWhlVelocity_RR_mps = motorSpeedToWheelLinearSpeed_mps(getMotorSpeed_radps(MOTOR_RR));
 8002904:	2001      	movs	r0, #1
 8002906:	f003 fddf 	bl	80064c8 <getMotorSpeed_radps>
 800290a:	eef0 7a40 	vmov.f32	s15, s0
 800290e:	eeb0 0a67 	vmov.f32	s0, s15
 8002912:	f003 fdad 	bl	8006470 <motorSpeedToWheelLinearSpeed_mps>
 8002916:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

        float wheelVelocityRPM = maxFastSpeed_rpm;//GEAR_RATIO * 60.0f * scheduledBodyVel_mps / (2 * M_PI * EFFECTIVE_WHEEL_RAD_M);
 800291a:	4b71      	ldr	r3, [pc, #452]	@ (8002ae0 <setYawRateControl+0x2f8>)
 800291c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002920:	ee07 3a90 	vmov	s15, r3
 8002924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002928:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        float rearWhlAvgVelocity_mps = (rearWhlVelocity_RL_mps + rearWhlVelocity_RR_mps) / 2.0f;
 800292c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002930:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002934:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002938:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800293c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002940:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        float frontWhlTargetVelocity_mps = rearWhlAvgVelocity_mps + 0.1f;
 8002944:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002948:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8002ae4 <setYawRateControl+0x2fc>
 800294c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002950:	edc7 7a08 	vstr	s15, [r7, #32]
        float frontWheelVelocityRPM = GEAR_RATIO * 60.0f * frontWhlTargetVelocity_mps / (2 * M_PI * EFFECTIVE_WHEEL_RAD_M);
 8002954:	4b64      	ldr	r3, [pc, #400]	@ (8002ae8 <setYawRateControl+0x300>)
 8002956:	edd3 7a00 	vldr	s15, [r3]
 800295a:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8002aec <setYawRateControl+0x304>
 800295e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002962:	edd7 7a08 	vldr	s15, [r7, #32]
 8002966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800296a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800296e:	4b60      	ldr	r3, [pc, #384]	@ (8002af0 <setYawRateControl+0x308>)
 8002970:	edd3 7a00 	vldr	s15, [r3]
 8002974:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002978:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8002ac0 <setYawRateControl+0x2d8>
 800297c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002980:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002984:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002988:	edc7 7a07 	vstr	s15, [r7, #28]

        setVelocityFloat(MOTOR_FL, wheelVelocityRPM); // Converts rad/s to rpm
 800298c:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8002990:	2002      	movs	r0, #2
 8002992:	f003 fc9b 	bl	80062cc <setVelocityFloat>
        setVelocityFloat(MOTOR_FR, wheelVelocityRPM);
 8002996:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 800299a:	2000      	movs	r0, #0
 800299c:	f003 fc96 	bl	80062cc <setVelocityFloat>
        setVelocityFloat(MOTOR_RL, wheelVelocityRPM);
 80029a0:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 80029a4:	2003      	movs	r0, #3
 80029a6:	f003 fc91 	bl	80062cc <setVelocityFloat>
        setVelocityFloat(MOTOR_RR, wheelVelocityRPM);
 80029aa:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 80029ae:	2001      	movs	r0, #1
 80029b0:	f003 fc8c 	bl	80062cc <setVelocityFloat>
 80029b4:	e07e      	b.n	8002ab4 <setYawRateControl+0x2cc>

    } else { // clamp front left to rear left and front right to rear right

        float rearWhlVelocity_RL_RPM = getMotorSpeed_radps(MOTOR_RL) / (2 * M_PI) * 60;
 80029b6:	2003      	movs	r0, #3
 80029b8:	f003 fd86 	bl	80064c8 <getMotorSpeed_radps>
 80029bc:	eef0 7a40 	vmov.f32	s15, s0
 80029c0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80029c4:	ed9f 5b3e 	vldr	d5, [pc, #248]	@ 8002ac0 <setYawRateControl+0x2d8>
 80029c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80029cc:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8002ac8 <setYawRateControl+0x2e0>
 80029d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80029d4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80029d8:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        float rearWhlVelocity_RR_RPM = getMotorSpeed_radps(MOTOR_RR) / (2 * M_PI) * 60;
 80029dc:	2001      	movs	r0, #1
 80029de:	f003 fd73 	bl	80064c8 <getMotorSpeed_radps>
 80029e2:	eef0 7a40 	vmov.f32	s15, s0
 80029e6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80029ea:	ed9f 5b35 	vldr	d5, [pc, #212]	@ 8002ac0 <setYawRateControl+0x2d8>
 80029ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80029f2:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 8002ac8 <setYawRateControl+0x2e0>
 80029f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80029fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80029fe:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

        float wheelVelocityRPM = maxFastSpeed_rpm;//GEAR_RATIO * 60.0f * scheduledBodyVel_mps / (2 * M_PI * EFFECTIVE_WHEEL_RAD_M);
 8002a02:	4b37      	ldr	r3, [pc, #220]	@ (8002ae0 <setYawRateControl+0x2f8>)
 8002a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a08:	ee07 3a90 	vmov	s15, r3
 8002a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a10:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        // float rearWhlAvgVelocity_mps = (rearWhlVelocity_RL_mps + rearWhlVelocity_RR_mps) / 2.0f;
        // float frontWhlTargetVelocity_mps = rearWhlAvgVelocity_mps + 0.1f;
        // float frontWheelVelocityRPM = GEAR_RATIO * 60.0f * frontWhlTargetVelocity_mps / (2 * M_PI * EFFECTIVE_WHEEL_RAD_M);
        
        float clamped_FL_RPM = fminf(rearWhlVelocity_RL_RPM*1.12f     , (rearWhlVelocity_RR_RPM)*1.12f+3000) + 0.1f;
 8002a14:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002a18:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8002af4 <setYawRateControl+0x30c>
 8002a1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a20:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002a24:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002af4 <setYawRateControl+0x30c>
 8002a28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a2c:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8002af8 <setYawRateControl+0x310>
 8002a30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a34:	eef0 0a67 	vmov.f32	s1, s15
 8002a38:	eeb0 0a47 	vmov.f32	s0, s14
 8002a3c:	f01c f859 	bl	801eaf2 <fminf>
 8002a40:	eef0 7a40 	vmov.f32	s15, s0
 8002a44:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002ae4 <setYawRateControl+0x2fc>
 8002a48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a4c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        float clamped_FR_RPM = fminf((rearWhlVelocity_RL_RPM*1.12f)+3000, rearWhlVelocity_RR_RPM*1.12f) + 0.1f;//why? slip ratio vibes
 8002a50:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002a54:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002af4 <setYawRateControl+0x30c>
 8002a58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a5c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002af8 <setYawRateControl+0x310>
 8002a60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002a64:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002a68:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8002af4 <setYawRateControl+0x30c>
 8002a6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a70:	eef0 0a67 	vmov.f32	s1, s15
 8002a74:	eeb0 0a47 	vmov.f32	s0, s14
 8002a78:	f01c f83b 	bl	801eaf2 <fminf>
 8002a7c:	eef0 7a40 	vmov.f32	s15, s0
 8002a80:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002ae4 <setYawRateControl+0x2fc>
 8002a84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a88:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

        setVelocityFloat(MOTOR_FL, clamped_FL_RPM); // Converts rad/s to rpm
 8002a8c:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 8002a90:	2002      	movs	r0, #2
 8002a92:	f003 fc1b 	bl	80062cc <setVelocityFloat>
        setVelocityFloat(MOTOR_FR, clamped_FR_RPM);
 8002a96:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f003 fc16 	bl	80062cc <setVelocityFloat>
        setVelocityFloat(MOTOR_RL, wheelVelocityRPM);
 8002aa0:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8002aa4:	2003      	movs	r0, #3
 8002aa6:	f003 fc11 	bl	80062cc <setVelocityFloat>
        setVelocityFloat(MOTOR_RR, wheelVelocityRPM);
 8002aaa:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8002aae:	2001      	movs	r0, #1
 8002ab0:	f003 fc0c 	bl	80062cc <setVelocityFloat>
    }
}
 8002ab4:	3754      	adds	r7, #84	@ 0x54
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd90      	pop	{r4, r7, pc}
 8002aba:	bf00      	nop
 8002abc:	f3af 8000 	nop.w
 8002ac0:	54442d18 	.word	0x54442d18
 8002ac4:	401921fb 	.word	0x401921fb
 8002ac8:	00000000 	.word	0x00000000
 8002acc:	404e0000 	.word	0x404e0000
 8002ad0:	08044f50 	.word	0x08044f50
 8002ad4:	00000000 	.word	0x00000000
 8002ad8:	0802202c 	.word	0x0802202c
 8002adc:	437f0000 	.word	0x437f0000
 8002ae0:	08022030 	.word	0x08022030
 8002ae4:	3dcccccd 	.word	0x3dcccccd
 8002ae8:	0802203c 	.word	0x0802203c
 8002aec:	42700000 	.word	0x42700000
 8002af0:	08022040 	.word	0x08022040
 8002af4:	3f8f5c29 	.word	0x3f8f5c29
 8002af8:	453b8000 	.word	0x453b8000

08002afc <setEnduranceTestTorque>:
    int16_t swAngle_deg,
    int32_t battVoltage_mV,
    int32_t battCurrent_mA,
    uint8_t brakePressurePsi_u8,
    bool clampbyside
) {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b092      	sub	sp, #72	@ 0x48
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	4608      	mov	r0, r1
 8002b06:	4611      	mov	r1, r2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	72fb      	strb	r3, [r7, #11]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	72bb      	strb	r3, [r7, #10]
 8002b12:	4613      	mov	r3, r2
 8002b14:	813b      	strh	r3, [r7, #8]
     // if braking
    if (setRegen(&throttlePos_u8, brakePressurePsi_u8, avgMotorSpeed_RPM)){
 8002b16:	f897 1058 	ldrb.w	r1, [r7, #88]	@ 0x58
 8002b1a:	f107 030b 	add.w	r3, r7, #11
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 faaf 	bl	8003084 <setRegen>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f040 8119 	bne.w	8002d60 <setEnduranceTestTorque+0x264>
        return;
    }

    // Requested torque that may be positive or negative
    float reqTorque = maxFastTorque_Nm * ((float)throttlePos_u8) / ((float)UINT8_MAX);
 8002b2e:	7afb      	ldrb	r3, [r7, #11]
 8002b30:	ee07 3a90 	vmov	s15, r3
 8002b34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b38:	4b8b      	ldr	r3, [pc, #556]	@ (8002d68 <setEnduranceTestTorque+0x26c>)
 8002b3a:	edd3 7a00 	vldr	s15, [r3]
 8002b3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b42:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 8002d6c <setEnduranceTestTorque+0x270>
 8002b46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b4a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    const float recuperative_limit = getMotorRegenerativeCapacity(avgMotorSpeed_RPM);
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f003 fde0 	bl	8006714 <getMotorRegenerativeCapacity>
 8002b54:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40

    // Accelerative torque requested
    if (reqTorque >= 0) {
 8002b58:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002b5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b64:	f2c0 80df 	blt.w	8002d26 <setEnduranceTestTorque+0x22a>
        // apply power limit. Simply scale power down linearly in the last 5kW of power
        uint8_t power_limit_kW = 150; // uint8, must be between 0 and 255, inclusive
 8002b68:	2396      	movs	r3, #150	@ 0x96
 8002b6a:	74fb      	strb	r3, [r7, #19]
        const bool ret_val = getProcessedValue(&power_limit_kW, POWER_LIM_INDEX, unsigned_integer);
 8002b6c:	f107 0313 	add.w	r3, r7, #19
 8002b70:	2204      	movs	r2, #4
 8002b72:	2101      	movs	r1, #1
 8002b74:	4618      	mov	r0, r3
 8002b76:	f009 fe0b 	bl	800c790 <getProcessedValue>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        (void)ret_val; // placate compiler
        if (power_limit_kW == 0) {
 8002b80:	7cfb      	ldrb	r3, [r7, #19]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <setEnduranceTestTorque+0x8e>
            power_limit_kW = 1; // lower-bound the power limit by 1kW to avoid divide-by-zero
 8002b86:	2301      	movs	r3, #1
 8002b88:	74fb      	strb	r3, [r7, #19]
        }

        const float power_limit_W = ((float)power_limit_kW) * 1e3f;
 8002b8a:	7cfb      	ldrb	r3, [r7, #19]
 8002b8c:	ee07 3a90 	vmov	s15, r3
 8002b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b94:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8002d70 <setEnduranceTestTorque+0x274>
 8002b98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b9c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        float power_limit_start_derate_W = power_limit_W - 5000.0f;
 8002ba0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002ba4:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8002d74 <setEnduranceTestTorque+0x278>
 8002ba8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bac:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        power_limit_start_derate_W = fmaxf(power_limit_start_derate_W, 0.0f); // clamp to zero in case of negative value due to lower than 10kw limit
 8002bb0:	eddf 0a71 	vldr	s1, [pc, #452]	@ 8002d78 <setEnduranceTestTorque+0x27c>
 8002bb4:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8002bb8:	f01b ff7e 	bl	801eab8 <fmaxf>
 8002bbc:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34

        volatile cmr_canHVIHeartbeat_t *HVISense = canTractiveGetPayload(CANRX_TRAC_HVI_SENSE);
 8002bc0:	2008      	movs	r0, #8
 8002bc2:	f7fe fb8f 	bl	80012e4 <canTractiveGetPayload>
 8002bc6:	6338      	str	r0, [r7, #48]	@ 0x30
        const float hv_voltage_V = ((float)(HVISense->packVoltage_cV)) * 1e-2f; // convert to volts
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bca:	885b      	ldrh	r3, [r3, #2]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	ee07 3a90 	vmov	s15, r3
 8002bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd6:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8002d7c <setEnduranceTestTorque+0x280>
 8002bda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bde:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

        volatile cmr_canVSMSensors_t *vsmSensor = canVehicleGetPayload(CANRX_VEH_VSM_SENSORS);
 8002be2:	2008      	movs	r0, #8
 8002be4:	f7fe fb6c 	bl	80012c0 <canVehicleGetPayload>
 8002be8:	62b8      	str	r0, [r7, #40]	@ 0x28
        const float currentA = ((float)(vsmSensor->hallEffect_cA)) * 1e-2f; // convert to amps
 8002bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bec:	885b      	ldrh	r3, [r3, #2]
 8002bee:	b21b      	sxth	r3, r3
 8002bf0:	ee07 3a90 	vmov	s15, r3
 8002bf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bf8:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8002d7c <setEnduranceTestTorque+0x280>
 8002bfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c00:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        // apply power limit.
        const float power_consumed_W = hv_voltage_V * currentA;
 8002c04:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002c08:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c10:	edc7 7a08 	vstr	s15, [r7, #32]

        if (power_consumed_W > power_limit_start_derate_W) {
 8002c14:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c18:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002c1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c24:	dd2b      	ble.n	8002c7e <setEnduranceTestTorque+0x182>
            float power_derate_multiplier = (power_consumed_W - power_limit_start_derate_W) / (power_limit_W - power_limit_start_derate_W);
 8002c26:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c2a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002c2e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002c32:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002c36:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002c3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c42:	edc7 7a07 	vstr	s15, [r7, #28]
            // backup in case of hysterisis in the AC or latency in the system
            power_derate_multiplier = fminf(power_derate_multiplier, 1.0f);
 8002c46:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002c4a:	ed97 0a07 	vldr	s0, [r7, #28]
 8002c4e:	f01b ff50 	bl	801eaf2 <fminf>
 8002c52:	ed87 0a07 	vstr	s0, [r7, #28]
            power_derate_multiplier = fmaxf(power_derate_multiplier, 0.0f);
 8002c56:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8002d78 <setEnduranceTestTorque+0x27c>
 8002c5a:	ed97 0a07 	vldr	s0, [r7, #28]
 8002c5e:	f01b ff2b 	bl	801eab8 <fmaxf>
 8002c62:	ed87 0a07 	vstr	s0, [r7, #28]
            reqTorque *= 1.0f - power_derate_multiplier;
 8002c66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c6a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c72:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c7a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        }

        reqTorque = fminf(reqTorque, maxFastTorque_Nm);
 8002c7e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d68 <setEnduranceTestTorque+0x26c>)
 8002c80:	edd3 7a00 	vldr	s15, [r3]
 8002c84:	eef0 0a67 	vmov.f32	s1, s15
 8002c88:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8002c8c:	f01b ff31 	bl	801eaf2 <fminf>
 8002c90:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
        reqTorque = fmaxf(reqTorque, 0.0f);
 8002c94:	eddf 0a38 	vldr	s1, [pc, #224]	@ 8002d78 <setEnduranceTestTorque+0x27c>
 8002c98:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8002c9c:	f01b ff0c 	bl	801eab8 <fmaxf>
 8002ca0:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44

        // Adjust throttle so that traction control commands reqTorque (after power limit calc) to the motors
        uint8_t adjustedThrottlePos_u8 = (uint8_t)(fminf(fmaxf((reqTorque * ((float)UINT8_MAX) / maxFastTorque_Nm), 0.0f), (float)UINT8_MAX));
 8002ca4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002ca8:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8002d6c <setEnduranceTestTorque+0x270>
 8002cac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d68 <setEnduranceTestTorque+0x26c>)
 8002cb2:	edd3 7a00 	vldr	s15, [r3]
 8002cb6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002cba:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8002d78 <setEnduranceTestTorque+0x27c>
 8002cbe:	eeb0 0a66 	vmov.f32	s0, s13
 8002cc2:	f01b fef9 	bl	801eab8 <fmaxf>
 8002cc6:	eef0 7a40 	vmov.f32	s15, s0
 8002cca:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8002d6c <setEnduranceTestTorque+0x270>
 8002cce:	eeb0 0a67 	vmov.f32	s0, s15
 8002cd2:	f01b ff0e 	bl	801eaf2 <fminf>
 8002cd6:	eef0 7a40 	vmov.f32	s15, s0
 8002cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cde:	edc7 7a01 	vstr	s15, [r7, #4]
 8002ce2:	793b      	ldrb	r3, [r7, #4]
 8002ce4:	76fb      	strb	r3, [r7, #27]
        const bool assumeNoTurn = true; // TC is not allowed to behave left-right asymmetrically due to the lack of testing
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	76bb      	strb	r3, [r7, #26]
        const bool ignoreYawRate = false; // TC takes yaw rate into account to prevent the vehicle from stopping unintendedly when turning at low speeds
 8002cea:	2300      	movs	r3, #0
 8002cec:	767b      	strb	r3, [r7, #25]
        const bool allowRegen = true; // regen-braking is allowed to protect the AC by keeping charge level high
 8002cee:	2301      	movs	r3, #1
 8002cf0:	763b      	strb	r3, [r7, #24]
        const float critical_speed_mps = 5.0f; // using a high value to prevent the vehicle from stopping unintendedly when turning at low speeds
 8002cf2:	4b23      	ldr	r3, [pc, #140]	@ (8002d80 <setEnduranceTestTorque+0x284>)
 8002cf4:	617b      	str	r3, [r7, #20]
        if (brakePressurePsi_u8 < braking_threshold_psi)
 8002cf6:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8002cfa:	ee07 3a90 	vmov	s15, r3
 8002cfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d02:	4b20      	ldr	r3, [pc, #128]	@ (8002d84 <setEnduranceTestTorque+0x288>)
 8002d04:	edd3 7a00 	vldr	s15, [r3]
 8002d08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d10:	d527      	bpl.n	8002d62 <setEnduranceTestTorque+0x266>
        	// setFastTorque(adjustedThrottlePos_u8);
            setYawRateControl(throttlePos_u8, brakePressurePsi_u8, swAngle_deg, clampbyside);
 8002d12:	7af8      	ldrb	r0, [r7, #11]
 8002d14:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8002d18:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002d1c:	f897 1058 	ldrb.w	r1, [r7, #88]	@ 0x58
 8002d20:	f7ff fd62 	bl	80027e8 <setYawRateControl>
 8002d24:	e01d      	b.n	8002d62 <setEnduranceTestTorque+0x266>
        //setYawRateAndTractionControl(adjustedThrottlePos_u8, brakePressurePsi_u8, swAngle_deg, assumeNoTurn, ignoreYawRate, allowRegen, critical_speed_mps);
    }
    // Requested recuperation that is less than the maximum-power regen point possible
    else if (reqTorque > recuperative_limit) {
 8002d26:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002d2a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002d2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d36:	dd09      	ble.n	8002d4c <setEnduranceTestTorque+0x250>
        setTorqueLimsAllProtected(0.0f, reqTorque);
 8002d38:	edd7 0a11 	vldr	s1, [r7, #68]	@ 0x44
 8002d3c:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8002d78 <setEnduranceTestTorque+0x27c>
 8002d40:	f003 f9c8 	bl	80060d4 <setTorqueLimsAllProtected>
        setVelocityInt16All(0);
 8002d44:	2000      	movs	r0, #0
 8002d46:	f003 faed 	bl	8006324 <setVelocityInt16All>
 8002d4a:	e00a      	b.n	8002d62 <setEnduranceTestTorque+0x266>
    } 
    // Requested recuperation is even more negative than the limit
    else {
        setTorqueLimsAllProtected(0.0f, recuperative_limit);
 8002d4c:	edd7 0a10 	vldr	s1, [r7, #64]	@ 0x40
 8002d50:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8002d78 <setEnduranceTestTorque+0x27c>
 8002d54:	f003 f9be 	bl	80060d4 <setTorqueLimsAllProtected>
        setVelocityInt16All(0);
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f003 fae3 	bl	8006324 <setVelocityInt16All>
 8002d5e:	e000      	b.n	8002d62 <setEnduranceTestTorque+0x266>
        return;
 8002d60:	bf00      	nop
    }
}
 8002d62:	3748      	adds	r7, #72	@ 0x48
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	0802202c 	.word	0x0802202c
 8002d6c:	437f0000 	.word	0x437f0000
 8002d70:	447a0000 	.word	0x447a0000
 8002d74:	459c4000 	.word	0x459c4000
 8002d78:	00000000 	.word	0x00000000
 8002d7c:	3c23d70a 	.word	0x3c23d70a
 8002d80:	40a00000 	.word	0x40a00000
 8002d84:	08044f50 	.word	0x08044f50

08002d88 <Mz_calc>:
 * @brief returns requested moment Nm given torques and steering_angle_deg
 * @param torque_req four torques 
 * @param steering_angle_deg steering anlge
*/
float Mz_calc(cmr_torqueDistributionNm_t *torque_req, float steering_angle_deg)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	ed87 0a00 	vstr	s0, [r7]
    //TODO degrees or radians?? I think should be radians
	float sangle = sin(steering_angle_deg);
 8002d94:	edd7 7a00 	vldr	s15, [r7]
 8002d98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d9c:	eeb0 0b47 	vmov.f64	d0, d7
 8002da0:	f01b fdaa 	bl	801e8f8 <sin>
 8002da4:	eeb0 7b40 	vmov.f64	d7, d0
 8002da8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002dac:	edc7 7a03 	vstr	s15, [r7, #12]
	float cangle = cos(steering_angle_deg);
 8002db0:	edd7 7a00 	vldr	s15, [r7]
 8002db4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002db8:	eeb0 0b47 	vmov.f64	d0, d7
 8002dbc:	f01b fd48 	bl	801e850 <cos>
 8002dc0:	eeb0 7b40 	vmov.f64	d7, d0
 8002dc4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002dc8:	edc7 7a02 	vstr	s15, [r7, #8]

    //calculates Mz Nm from four torques
	return (GEAR_RATIO / EFFECTIVE_WHEEL_RAD_M) 
 8002dcc:	4b31      	ldr	r3, [pc, #196]	@ (8002e94 <Mz_calc+0x10c>)
 8002dce:	edd3 6a00 	vldr	s13, [r3]
 8002dd2:	4b31      	ldr	r3, [pc, #196]	@ (8002e98 <Mz_calc+0x110>)
 8002dd4:	edd3 7a00 	vldr	s15, [r3]
 8002dd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            * (torque_req->fl * chassis_a * sangle 
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	edd3 7a00 	vldr	s15, [r3]
 8002de2:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8002e9c <Mz_calc+0x114>
 8002de6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002dea:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dee:	ee66 6aa7 	vmul.f32	s13, s13, s15
            + torque_req->fl * (chassis_w_f * 0.5f)  * cangle 
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	ed93 6a00 	vldr	s12, [r3]
 8002df8:	eef6 5a04 	vmov.f32	s11, #100	@ 0x3f200000  0.625
 8002dfc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8002e00:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002e04:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002e08:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e0c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e10:	ee76 6aa7 	vadd.f32	s13, s13, s15
            + torque_req->fr * chassis_b * sangle 
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e1a:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 8002e9c <Mz_calc+0x114>
 8002e1e:	ee27 6a86 	vmul.f32	s12, s15, s12
 8002e22:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e26:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e2a:	ee76 6aa7 	vadd.f32	s13, s13, s15
            - torque_req->fr * (chassis_w_f * 0.5f) * cangle
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	ed93 6a01 	vldr	s12, [r3, #4]
 8002e34:	eef6 5a04 	vmov.f32	s11, #100	@ 0x3f200000  0.625
 8002e38:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8002e3c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002e40:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002e44:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e48:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e4c:	ee76 6ae7 	vsub.f32	s13, s13, s15
            + torque_req->rl * (chassis_w_r * 0.5f) 
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	ed93 6a02 	vldr	s12, [r3, #8]
 8002e56:	eef6 5a04 	vmov.f32	s11, #100	@ 0x3f200000  0.625
 8002e5a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8002e5e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002e62:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e66:	ee76 6aa7 	vadd.f32	s13, s13, s15
            - torque_req->rr * (chassis_w_r * 0.5f));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	ed93 6a03 	vldr	s12, [r3, #12]
 8002e70:	eef6 5a04 	vmov.f32	s11, #100	@ 0x3f200000  0.625
 8002e74:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8002e78:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002e7c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e80:	ee76 7ae7 	vsub.f32	s15, s13, s15
            * (torque_req->fl * chassis_a * sangle 
 8002e84:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002e88:	eeb0 0a67 	vmov.f32	s0, s15
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	0802203c 	.word	0x0802203c
 8002e98:	08022040 	.word	0x08022040
 8002e9c:	3f466666 	.word	0x3f466666

08002ea0 <getPackVoltage>:

/** @brief returns the pack voltage */
float getPackVoltage() {
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
    volatile cmr_canHVCPackVoltage_t *voltages = canVehicleGetPayload(CANRX_VEH_VOLTAGE_HVC);
 8002ea6:	2003      	movs	r0, #3
 8002ea8:	f7fe fa0a 	bl	80012c0 <canVehicleGetPayload>
 8002eac:	6138      	str	r0, [r7, #16]
    const float batt_voltage_V = ((float)(voltages->battVoltage_mV)) * 1e-3f; // convert to volts
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	ee07 3a90 	vmov	s15, r3
 8002eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eba:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8002f14 <getPackVoltage+0x74>
 8002ebe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ec2:	edc7 7a03 	vstr	s15, [r7, #12]

    volatile cmr_canHVIHeartbeat_t *HVISense = canVehicleGetPayload(CANRX_TRAC_HVI_SENSE);
 8002ec6:	2008      	movs	r0, #8
 8002ec8:	f7fe f9fa 	bl	80012c0 <canVehicleGetPayload>
 8002ecc:	60b8      	str	r0, [r7, #8]
    const float hv_voltage_V = ((float)(HVISense->packVoltage_cV)) * 1e-2f; // convert to volts
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	885b      	ldrh	r3, [r3, #2]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	ee07 3a90 	vmov	s15, r3
 8002ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002edc:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002f18 <getPackVoltage+0x78>
 8002ee0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ee4:	edc7 7a01 	vstr	s15, [r7, #4]

    // If HVI Sense hasn't timed out, use it. Otherwise, use batt voltage
    float measured_voltage_V = batt_voltage_V;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	617b      	str	r3, [r7, #20]
    if (cmr_canRXMetaTimeoutError(&canTractiveRXMeta[CANRX_TRAC_HVI_SENSE], xTaskGetTickCount()) == 0) {
 8002eec:	f00d fb74 	bl	80105d8 <xTaskGetTickCount>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4809      	ldr	r0, [pc, #36]	@ (8002f1c <getPackVoltage+0x7c>)
 8002ef6:	f009 fa60 	bl	800c3ba <cmr_canRXMetaTimeoutError>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <getPackVoltage+0x64>
        measured_voltage_V = hv_voltage_V;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	617b      	str	r3, [r7, #20]
    }

    return measured_voltage_V;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	ee07 3a90 	vmov	s15, r3
}
 8002f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	3a83126f 	.word	0x3a83126f
 8002f18:	3c23d70a 	.word	0x3c23d70a
 8002f1c:	24000288 	.word	0x24000288

08002f20 <getPackCurrent>:

/** @brief returns the pack current */
float getPackCurrent() {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
//    volatile cmr_canVSMSensors_t *vsmSensor = canVehicleGetPayload(CANRX_VEH_VSM_SENSORS);
//    return ((float)(vsmSensor->hallEffect_cA)) * 1e-2f; // convert to amps
	volatile cmr_canHVIHeartbeat_t *HVISense = canVehicleGetPayload(CANRX_HVI_SENSE);
 8002f26:	200a      	movs	r0, #10
 8002f28:	f7fe f9ca 	bl	80012c0 <canVehicleGetPayload>
 8002f2c:	6078      	str	r0, [r7, #4]
	return ((float)(HVISense->packCurrent_dA)) * 1e-1f; // convert to amps
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	b21b      	sxth	r3, r3
 8002f34:	ee07 3a90 	vmov	s15, r3
 8002f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f3c:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8002f50 <getPackCurrent+0x30>
 8002f40:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002f44:	eeb0 0a67 	vmov.f32	s0, s15
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	3dcccccd 	.word	0x3dcccccd

08002f54 <getMaxCellVoltage>:
    const int32_t pack_power_mW = ((int32_t)(HVISense->packCurrent_dA)) * ((int32_t)(HVISense->packVoltage_cV));
    return ((float)pack_power_mW) * 1e-3f; // convert to watts
}

/** @brief returns the voltage of the cell that has the highest voltage */
float getMaxCellVoltage() {
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
    volatile cmr_canHVCPackMinMaxCellVolages_t *minMaxCellVoltages = canVehicleGetPayload(CANRX_VEH_PACK_CELL_VOLTAGE);
 8002f5a:	2006      	movs	r0, #6
 8002f5c:	f7fe f9b0 	bl	80012c0 <canVehicleGetPayload>
 8002f60:	6078      	str	r0, [r7, #4]
    return minMaxCellVoltages->maxCellVoltage_mV * 1e-3f; // convert to volts
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	885b      	ldrh	r3, [r3, #2]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	ee07 3a90 	vmov	s15, r3
 8002f6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f70:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8002f84 <getMaxCellVoltage+0x30>
 8002f74:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002f78:	eeb0 0a67 	vmov.f32	s0, s15
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	3a83126f 	.word	0x3a83126f

08002f88 <getMinCellVoltage>:

/** @brief returns the voltage of the cell that has the lowest voltage */
float getMinCellVoltage() {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
    volatile cmr_canHVCPackMinMaxCellVolages_t *minMaxCellVoltages = canVehicleGetPayload(CANRX_VEH_PACK_CELL_VOLTAGE);
 8002f8e:	2006      	movs	r0, #6
 8002f90:	f7fe f996 	bl	80012c0 <canVehicleGetPayload>
 8002f94:	6078      	str	r0, [r7, #4]
    return minMaxCellVoltages->minCellVoltage_mV * 1e-3f; // convert to volts
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	ee07 3a90 	vmov	s15, r3
 8002fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fa4:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8002fb8 <getMinCellVoltage+0x30>
 8002fa8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002fac:	eeb0 0a67 	vmov.f32	s0, s15
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	3a83126f 	.word	0x3a83126f
 8002fbc:	00000000 	.word	0x00000000

08002fc0 <swAngleDegToSteeringAngleRad>:

/**
 * @brief Convert steering wheel angle to steering angle (the orientation of the front wheels)
 */
float swAngleDegToSteeringAngleRad(int16_t swAngle_deg) {
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	80fb      	strh	r3, [r7, #6]
    const float steering_angle_deg = ((float)swAngle_deg); // convert steering wheel angle into steering angle SIKE BITCHED ALREADY GOT STEERING ANGLE
 8002fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fce:	ee07 3a90 	vmov	s15, r3
 8002fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fd6:	edc7 7a03 	vstr	s15, [r7, #12]
    return steering_angle_deg * M_PI / 180.0f; // convert to rads
 8002fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002fe2:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8003008 <swAngleDegToSteeringAngleRad+0x48>
 8002fe6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002fea:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 8003010 <swAngleDegToSteeringAngleRad+0x50>
 8002fee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002ff2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8002ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	f3af 8000 	nop.w
 8003008:	54442d18 	.word	0x54442d18
 800300c:	400921fb 	.word	0x400921fb
 8003010:	00000000 	.word	0x00000000
 8003014:	40668000 	.word	0x40668000

08003018 <canTrustSBGVelocity>:
/**
 * @brief Determine whether or not the SBG sensor's velocity readings could be trusted
 * 
 * @param ignore_valid_bit Whether or not to ignore the sensor's reported validity of its velocity readings
 */
bool canTrustSBGVelocity(bool ignore_valid_bit) {
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	71fb      	strb	r3, [r7, #7]
    const volatile cmr_canSBGStatus3_t *sbg_status = canDAQGetPayload(CANRX_DAQ_SBG_STATUS_3);
 8003022:	2000      	movs	r0, #0
 8003024:	f7fe f970 	bl	8001308 <canDAQGetPayload>
 8003028:	6178      	str	r0, [r7, #20]
    const uint32_t sbg_soln_status = sbg_status->solution_status;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	613b      	str	r3, [r7, #16]
    const uint32_t sbg_vel_valid = sbg_soln_status & CMR_CAN_SBG_SOL_VELOCITY_VALID;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003036:	60fb      	str	r3, [r7, #12]
    const bool sbg_timeout = cmr_canRXMetaTimeoutError(&canDaqRXMeta[CANRX_DAQ_SBG_STATUS_3], xTaskGetTickCount()) != 0;
 8003038:	f00d face 	bl	80105d8 <xTaskGetTickCount>
 800303c:	4603      	mov	r3, r0
 800303e:	4619      	mov	r1, r3
 8003040:	480f      	ldr	r0, [pc, #60]	@ (8003080 <canTrustSBGVelocity+0x68>)
 8003042:	f009 f9ba 	bl	800c3ba <cmr_canRXMetaTimeoutError>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	bf14      	ite	ne
 800304c:	2301      	movne	r3, #1
 800304e:	2300      	moveq	r3, #0
 8003050:	72fb      	strb	r3, [r7, #11]

    return !sbg_timeout && (sbg_vel_valid || ignore_valid_bit);
 8003052:	7afb      	ldrb	r3, [r7, #11]
 8003054:	f083 0301 	eor.w	r3, r3, #1
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d007      	beq.n	800306e <canTrustSBGVelocity+0x56>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d102      	bne.n	800306a <canTrustSBGVelocity+0x52>
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <canTrustSBGVelocity+0x56>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <canTrustSBGVelocity+0x58>
 800306e:	2300      	movs	r3, #0
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	b2db      	uxtb	r3, r3
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	240002a8 	.word	0x240002a8

08003084 <setRegen>:

// returns if regen was activated. Updates throttlePos_u8 in paddle regen
bool setRegen(uint8_t *throttlePos_u8, uint8_t brakePressurePsi_u8, int32_t avgMotorSpeed_RPM){
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af02      	add	r7, sp, #8
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	460b      	mov	r3, r1
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	72fb      	strb	r3, [r7, #11]
    // get the regen type
    uint8_t pedal_regen_strength = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	75fb      	strb	r3, [r7, #23]
    //bool retval1 = getProcessedValue(&pedal_regen_strength, PEDAL_REGEN_STRENGTH_INDEX, unsigned_integer);

    uint8_t paddle_regen_strength = 100;//0;
 8003096:	2364      	movs	r3, #100	@ 0x64
 8003098:	75bb      	strb	r3, [r7, #22]
//
//    if (!retval1 || !retval2) {
//        return false;
//    }

    uint8_t leftPaddle = ((volatile cmr_canDIMActions_t *) canVehicleGetPayload(CANRX_VEH_DIM_ACTION_BUTTON))->paddleLeft;
 800309a:	2005      	movs	r0, #5
 800309c:	f7fe f910 	bl	80012c0 <canVehicleGetPayload>
 80030a0:	4603      	mov	r3, r0
 80030a2:	791b      	ldrb	r3, [r3, #4]
 80030a4:	757b      	strb	r3, [r7, #21]
    uint8_t rightPaddle = ((volatile cmr_canDIMActions_t *) canVehicleGetPayload(CANRX_VEH_DIM_ACTION_BUTTON))->paddleRight;
 80030a6:	2005      	movs	r0, #5
 80030a8:	f7fe f90a 	bl	80012c0 <canVehicleGetPayload>
 80030ac:	4603      	mov	r3, r0
 80030ae:	795b      	ldrb	r3, [r3, #5]
 80030b0:	753b      	strb	r3, [r7, #20]
    uint8_t paddle_pressure = max(leftPaddle, rightPaddle);
 80030b2:	7d7b      	ldrb	r3, [r7, #21]
 80030b4:	74fb      	strb	r3, [r7, #19]
 80030b6:	7d3b      	ldrb	r3, [r7, #20]
 80030b8:	74bb      	strb	r3, [r7, #18]
 80030ba:	7cba      	ldrb	r2, [r7, #18]
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	4293      	cmp	r3, r2
 80030c0:	bf38      	it	cc
 80030c2:	4613      	movcc	r3, r2
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	747b      	strb	r3, [r7, #17]

    if (pedal_regen_strength > 0 && brakePressurePsi_u8 >= brake_pressure_start) {
 80030c8:	7dfb      	ldrb	r3, [r7, #23]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00c      	beq.n	80030e8 <setRegen+0x64>
 80030ce:	2232      	movs	r2, #50	@ 0x32
 80030d0:	7afb      	ldrb	r3, [r7, #11]
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d308      	bcc.n	80030e8 <setRegen+0x64>
        return setParallelRegen(throttlePos_u8, brakePressurePsi_u8, avgMotorSpeed_RPM);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	7af9      	ldrb	r1, [r7, #11]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 f946 	bl	8003370 <setParallelRegen>
 80030e4:	4603      	mov	r3, r0
 80030e6:	e012      	b.n	800310e <setRegen+0x8a>
    } else if (paddle_regen_strength > 0 && paddle_pressure >= paddle_pressure_start) {
 80030e8:	7dbb      	ldrb	r3, [r7, #22]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00e      	beq.n	800310c <setRegen+0x88>
 80030ee:	221e      	movs	r2, #30
 80030f0:	7c7b      	ldrb	r3, [r7, #17]
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d30a      	bcc.n	800310c <setRegen+0x88>
        return setPaddleRegen(throttlePos_u8, brakePressurePsi_u8, avgMotorSpeed_RPM, paddle_pressure, paddle_regen_strength);
 80030f6:	7c7a      	ldrb	r2, [r7, #17]
 80030f8:	7af9      	ldrb	r1, [r7, #11]
 80030fa:	7dbb      	ldrb	r3, [r7, #22]
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	4613      	mov	r3, r2
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f8b6 	bl	8003274 <setPaddleRegen>
 8003108:	4603      	mov	r3, r0
 800310a:	e000      	b.n	800310e <setRegen+0x8a>
    }
    return false;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <getRegenTorqueReq>:

/**
 * @brief returns a negative torque limit in Nm after paddle regen request,
 *        or changes value of requested throttle
*/
float getRegenTorqueReq(uint8_t *throttlePos_u8, uint8_t brakePressurePsi_u8){
 8003118:	b580      	push	{r7, lr}
 800311a:	b08c      	sub	sp, #48	@ 0x30
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	460b      	mov	r3, r1
 8003122:	72fb      	strb	r3, [r7, #11]
    // get the regen type
    uint8_t pedal_regen_strength = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	74fb      	strb	r3, [r7, #19]
    bool retval1 = getProcessedValue(&pedal_regen_strength, PEDAL_REGEN_STRENGTH_INDEX, unsigned_integer);
 8003128:	f107 0313 	add.w	r3, r7, #19
 800312c:	2204      	movs	r2, #4
 800312e:	2106      	movs	r1, #6
 8003130:	4618      	mov	r0, r3
 8003132:	f009 fb2d 	bl	800c790 <getProcessedValue>
 8003136:	4603      	mov	r3, r0
 8003138:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    uint8_t paddle_regen_strength = 100;//0;
 800313c:	2364      	movs	r3, #100	@ 0x64
 800313e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

//    if (!retval1 || !retval2) {
//        return 0.0f;
//    }

    uint8_t leftPaddle = ((volatile cmr_canDIMActions_t *) canVehicleGetPayload(CANRX_VEH_DIM_ACTION_BUTTON))->paddleLeft;
 8003142:	2005      	movs	r0, #5
 8003144:	f7fe f8bc 	bl	80012c0 <canVehicleGetPayload>
 8003148:	4603      	mov	r3, r0
 800314a:	791b      	ldrb	r3, [r3, #4]
 800314c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t rightPaddle = ((volatile cmr_canDIMActions_t *) canVehicleGetPayload(CANRX_VEH_DIM_ACTION_BUTTON))->paddleRight;
 8003150:	2005      	movs	r0, #5
 8003152:	f7fe f8b5 	bl	80012c0 <canVehicleGetPayload>
 8003156:	4603      	mov	r3, r0
 8003158:	795b      	ldrb	r3, [r3, #5]
 800315a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    uint8_t paddle_pressure = max(leftPaddle, rightPaddle);
 800315e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003166:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800316a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800316e:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8003172:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003176:	4293      	cmp	r3, r2
 8003178:	bf38      	it	cc
 800317a:	4613      	movcc	r3, r2
 800317c:	b2db      	uxtb	r3, r3
 800317e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

    if (paddle_regen_strength > 0 && paddle_pressure >= paddle_pressure_start) {
 8003182:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003186:	2b00      	cmp	r3, #0
 8003188:	d066      	beq.n	8003258 <getRegenTorqueReq+0x140>
 800318a:	221e      	movs	r2, #30
 800318c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003190:	4293      	cmp	r3, r2
 8003192:	d361      	bcc.n	8003258 <getRegenTorqueReq+0x140>

        float paddle_request = ((float)(paddle_pressure - paddle_pressure_start)) * (((float) paddle_regen_strength) / (100.0f));
 8003194:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003198:	221e      	movs	r2, #30
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	ee07 3a90 	vmov	s15, r3
 80031a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031a4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80031a8:	ee07 3a90 	vmov	s15, r3
 80031ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031b0:	ed9f 6a2d 	vldr	s12, [pc, #180]	@ 8003268 <getRegenTorqueReq+0x150>
 80031b4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031bc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        float pedal_request = ((float)(*throttlePos_u8)) - paddle_request;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	ee07 3a90 	vmov	s15, r3
 80031c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031cc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80031d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031d4:	edc7 7a08 	vstr	s15, [r7, #32]
    
        if (pedal_request >= 0.0f) {
 80031d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80031dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e4:	db0c      	blt.n	8003200 <getRegenTorqueReq+0xe8>
            *throttlePos_u8 = (uint8_t) pedal_request;
 80031e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80031ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031ee:	edc7 7a01 	vstr	s15, [r7, #4]
 80031f2:	793b      	ldrb	r3, [r7, #4]
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	701a      	strb	r2, [r3, #0]
            return 0.0; 
 80031fa:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 800326c <getRegenTorqueReq+0x154>
 80031fe:	e02d      	b.n	800325c <getRegenTorqueReq+0x144>
        }

        // Regen due to paddles
        *throttlePos_u8 = 0;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	701a      	strb	r2, [r3, #0]

        float reqTorque = maxFastTorque_Nm * pedal_request / ((float)(UINT8_MAX));
 8003206:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 800320a:	edd7 7a08 	vldr	s15, [r7, #32]
 800320e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003212:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8003270 <getRegenTorqueReq+0x158>
 8003216:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800321a:	edc7 7a07 	vstr	s15, [r7, #28]
        float avgMotorSpeed_RPM = getTotalMotorSpeed_rpm()* 0.25f;
 800321e:	f003 f99b 	bl	8006558 <getTotalMotorSpeed_rpm>
 8003222:	eef0 7a40 	vmov.f32	s15, s0
 8003226:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800322a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800322e:	edc7 7a06 	vstr	s15, [r7, #24]
        float recuperative_limit = getMotorRegenerativeCapacity(avgMotorSpeed_RPM);
 8003232:	edd7 7a06 	vldr	s15, [r7, #24]
 8003236:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800323a:	ee17 0a90 	vmov	r0, s15
 800323e:	f003 fa69 	bl	8006714 <getMotorRegenerativeCapacity>
 8003242:	ed87 0a05 	vstr	s0, [r7, #20]
        return fmaxf(reqTorque, recuperative_limit);
 8003246:	edd7 0a05 	vldr	s1, [r7, #20]
 800324a:	ed97 0a07 	vldr	s0, [r7, #28]
 800324e:	f01b fc33 	bl	801eab8 <fmaxf>
 8003252:	eef0 7a40 	vmov.f32	s15, s0
 8003256:	e001      	b.n	800325c <getRegenTorqueReq+0x144>
    }
    return 0.0f;
 8003258:	eddf 7a04 	vldr	s15, [pc, #16]	@ 800326c <getRegenTorqueReq+0x154>
}
 800325c:	eeb0 0a67 	vmov.f32	s0, s15
 8003260:	3730      	adds	r7, #48	@ 0x30
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	42c80000 	.word	0x42c80000
 800326c:	00000000 	.word	0x00000000
 8003270:	437f0000 	.word	0x437f0000

08003274 <setPaddleRegen>:

bool setPaddleRegen(uint8_t *throttlePos_u8, uint8_t brakePressurePsi_u8, int32_t avgMotorSpeed_RPM, uint8_t paddle_pressure, uint8_t paddle_regen_strength) {
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	461a      	mov	r2, r3
 8003280:	460b      	mov	r3, r1
 8003282:	72fb      	strb	r3, [r7, #11]
 8003284:	4613      	mov	r3, r2
 8003286:	72bb      	strb	r3, [r7, #10]
    if (paddle_pressure < paddle_pressure_start) return false;
 8003288:	221e      	movs	r2, #30
 800328a:	7abb      	ldrb	r3, [r7, #10]
 800328c:	4293      	cmp	r3, r2
 800328e:	d201      	bcs.n	8003294 <setPaddleRegen+0x20>
 8003290:	2300      	movs	r3, #0
 8003292:	e061      	b.n	8003358 <setPaddleRegen+0xe4>

    float paddle_request = ((float)(paddle_pressure - paddle_pressure_start)) * (((float) paddle_regen_strength) / (100.0f));
 8003294:	7abb      	ldrb	r3, [r7, #10]
 8003296:	221e      	movs	r2, #30
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	ee07 3a90 	vmov	s15, r3
 800329e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80032a6:	ee07 3a90 	vmov	s15, r3
 80032aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ae:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8003360 <setPaddleRegen+0xec>
 80032b2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ba:	edc7 7a07 	vstr	s15, [r7, #28]
    float pedal_request = ((float)(*throttlePos_u8)) - paddle_request;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	ee07 3a90 	vmov	s15, r3
 80032c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80032ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032d2:	edc7 7a06 	vstr	s15, [r7, #24]
    
    if (pedal_request >= 0.0f) {
 80032d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80032da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e2:	db0b      	blt.n	80032fc <setPaddleRegen+0x88>
        *throttlePos_u8 = (uint8_t) pedal_request;
 80032e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80032e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032ec:	edc7 7a00 	vstr	s15, [r7]
 80032f0:	783b      	ldrb	r3, [r7, #0]
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	701a      	strb	r2, [r3, #0]
        return false; 
 80032f8:	2300      	movs	r3, #0
 80032fa:	e02d      	b.n	8003358 <setPaddleRegen+0xe4>
    }

    // Regen due to paddles
    *throttlePos_u8 = 0;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	701a      	strb	r2, [r3, #0]

    float reqTorque = maxFastTorque_Nm * pedal_request / ((float)(UINT8_MAX));
 8003302:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 8003306:	edd7 7a06 	vldr	s15, [r7, #24]
 800330a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800330e:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8003364 <setPaddleRegen+0xf0>
 8003312:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003316:	edc7 7a05 	vstr	s15, [r7, #20]
    float recuperative_limit = -21.0f;//getMotorRegenerativeCapacity(avgMotorSpeed_RPM);
 800331a:	4b13      	ldr	r3, [pc, #76]	@ (8003368 <setPaddleRegen+0xf4>)
 800331c:	613b      	str	r3, [r7, #16]
    
    // Requested recuperation that is less than the maximum-power regen point possible
    if (reqTorque > recuperative_limit) {
 800331e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003322:	edd7 7a04 	vldr	s15, [r7, #16]
 8003326:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800332a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332e:	dd09      	ble.n	8003344 <setPaddleRegen+0xd0>
        setTorqueLimsAllProtected(0.0f, reqTorque);
 8003330:	edd7 0a05 	vldr	s1, [r7, #20]
 8003334:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 800336c <setPaddleRegen+0xf8>
 8003338:	f002 fecc 	bl	80060d4 <setTorqueLimsAllProtected>
        setVelocityInt16All(0);
 800333c:	2000      	movs	r0, #0
 800333e:	f002 fff1 	bl	8006324 <setVelocityInt16All>
 8003342:	e008      	b.n	8003356 <setPaddleRegen+0xe2>
    } 
    // Requested recuperation is even more negative than the limit
    else {
        setTorqueLimsAllProtected(0.0f, recuperative_limit);
 8003344:	edd7 0a04 	vldr	s1, [r7, #16]
 8003348:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800336c <setPaddleRegen+0xf8>
 800334c:	f002 fec2 	bl	80060d4 <setTorqueLimsAllProtected>
        setVelocityInt16All(0);
 8003350:	2000      	movs	r0, #0
 8003352:	f002 ffe7 	bl	8006324 <setVelocityInt16All>
    }
    return true;
 8003356:	2301      	movs	r3, #1
}
 8003358:	4618      	mov	r0, r3
 800335a:	3720      	adds	r7, #32
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	42c80000 	.word	0x42c80000
 8003364:	437f0000 	.word	0x437f0000
 8003368:	c1a80000 	.word	0xc1a80000
 800336c:	00000000 	.word	0x00000000

08003370 <setParallelRegen>:

bool setParallelRegen(uint8_t throttlePos_u8, uint8_t brakePressurePsi_u8, int32_t avgMotorSpeed_RPM) {
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	603a      	str	r2, [r7, #0]
 800337a:	71fb      	strb	r3, [r7, #7]
 800337c:	460b      	mov	r3, r1
 800337e:	71bb      	strb	r3, [r7, #6]
    
    // return if regen is not needed
    if (brakePressurePsi_u8 < brake_pressure_start) return false;
 8003380:	2232      	movs	r2, #50	@ 0x32
 8003382:	79bb      	ldrb	r3, [r7, #6]
 8003384:	4293      	cmp	r3, r2
 8003386:	d201      	bcs.n	800338c <setParallelRegen+0x1c>
 8003388:	2300      	movs	r3, #0
 800338a:	e088      	b.n	800349e <setParallelRegen+0x12e>

    bool ret_val = true;
 800338c:	2301      	movs	r3, #1
 800338e:	76fb      	strb	r3, [r7, #27]

    uint8_t regen_force_multiplier_int8 = 80;//0;
 8003390:	2350      	movs	r3, #80	@ 0x50
 8003392:	73fb      	strb	r3, [r7, #15]
    ret_val &= getProcessedValue(&regen_force_multiplier_int8, PEDAL_REGEN_STRENGTH_INDEX, unsigned_integer); 
 8003394:	f107 030f 	add.w	r3, r7, #15
 8003398:	2204      	movs	r2, #4
 800339a:	2106      	movs	r1, #6
 800339c:	4618      	mov	r0, r3
 800339e:	f009 f9f7 	bl	800c790 <getProcessedValue>
 80033a2:	4603      	mov	r3, r0
 80033a4:	461a      	mov	r2, r3
 80033a6:	7efb      	ldrb	r3, [r7, #27]
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	bf14      	ite	ne
 80033ae:	2301      	movne	r3, #1
 80033b0:	2300      	moveq	r3, #0
 80033b2:	76fb      	strb	r3, [r7, #27]

    // regen button unused due to endurance tuning throwing off drivers
    // uint8_t dim_regen_buttons = !((volatile cmr_canDIMActions_t *) canVehicleGetPayload(CANRX_VEH_DIM_ACTION_BUTTON))->regenPercent;

    // process the max regen force requested:
    float regen_force_multiplier_f = (float)regen_force_multiplier_int8 / 100.0f;
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	ee07 3a90 	vmov	s15, r3
 80033ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033be:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 80034a8 <setParallelRegen+0x138>
 80033c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033c6:	edc7 7a05 	vstr	s15, [r7, #20]

    // process regen button max force:
    // float dim_regen_buttons_f = (float)dim_regen_buttons / 100.0f;

    if(ret_val == false) return false;
 80033ca:	7efb      	ldrb	r3, [r7, #27]
 80033cc:	f083 0301 	eor.w	r3, r3, #1
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <setParallelRegen+0x6a>
 80033d6:	2300      	movs	r3, #0
 80033d8:	e061      	b.n	800349e <setParallelRegen+0x12e>
    if (regen_force_multiplier_int8 == 0) return false;
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <setParallelRegen+0x74>
 80033e0:	2300      	movs	r3, #0
 80033e2:	e05c      	b.n	800349e <setParallelRegen+0x12e>

    // ******* END DIM CONFIG SETTINGS *********


    // get regen limit
    float recuperative_limit = getMotorRegenerativeCapacity(avgMotorSpeed_RPM);
 80033e4:	6838      	ldr	r0, [r7, #0]
 80033e6:	f003 f995 	bl	8006714 <getMotorRegenerativeCapacity>
 80033ea:	ed87 0a04 	vstr	s0, [r7, #16]
    // this will overflow as brake pressure exceeds max regen pressure, that's why there is a clamp below
    float regenTorque = maxFastTorque_Nm * regen_force_multiplier_f * ((float)brakePressurePsi_u8 - (float)brake_pressure_start);
 80033ee:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 80033f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80033f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033fa:	79bb      	ldrb	r3, [r7, #6]
 80033fc:	ee07 3a90 	vmov	s15, r3
 8003400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003404:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80034ac <setParallelRegen+0x13c>
 8003408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800340c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003414:	edc7 7a07 	vstr	s15, [r7, #28]

    if (regenTorque > maxFastTorque_Nm) {
 8003418:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 800341c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003420:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003428:	dd01      	ble.n	800342e <setParallelRegen+0xbe>
        regenTorque = maxFastTorque_Nm;
 800342a:	4b21      	ldr	r3, [pc, #132]	@ (80034b0 <setParallelRegen+0x140>)
 800342c:	61fb      	str	r3, [r7, #28]
    }

    // cap max regen force
    if (regenTorque > regen_force_multiplier_f * maxFastTorque_Nm) {
 800342e:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 8003432:	edd7 7a05 	vldr	s15, [r7, #20]
 8003436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800343a:	ed97 7a07 	vldr	s14, [r7, #28]
 800343e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003446:	dd07      	ble.n	8003458 <setParallelRegen+0xe8>
        regenTorque = regen_force_multiplier_f * maxFastTorque_Nm;
 8003448:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 800344c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003454:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    

    // we want negative torque
    regenTorque = regenTorque * -1.00f ;
 8003458:	edd7 7a07 	vldr	s15, [r7, #28]
 800345c:	eef1 7a67 	vneg.f32	s15, s15
 8003460:	edc7 7a07 	vstr	s15, [r7, #28]

    if (regenTorque > recuperative_limit) {
 8003464:	ed97 7a07 	vldr	s14, [r7, #28]
 8003468:	edd7 7a04 	vldr	s15, [r7, #16]
 800346c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003474:	dd09      	ble.n	800348a <setParallelRegen+0x11a>
        setTorqueLimsAllProtected(0.0f, regenTorque);
 8003476:	edd7 0a07 	vldr	s1, [r7, #28]
 800347a:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 80034b4 <setParallelRegen+0x144>
 800347e:	f002 fe29 	bl	80060d4 <setTorqueLimsAllProtected>
        setVelocityInt16All(0);
 8003482:	2000      	movs	r0, #0
 8003484:	f002 ff4e 	bl	8006324 <setVelocityInt16All>
 8003488:	e008      	b.n	800349c <setParallelRegen+0x12c>
    }

    // Requested recuperation is even more negative than the limit
    else {
        setTorqueLimsAllProtected(0.0f, recuperative_limit);
 800348a:	edd7 0a04 	vldr	s1, [r7, #16]
 800348e:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 80034b4 <setParallelRegen+0x144>
 8003492:	f002 fe1f 	bl	80060d4 <setTorqueLimsAllProtected>
        setVelocityInt16All(0);
 8003496:	2000      	movs	r0, #0
 8003498:	f002 ff44 	bl	8006324 <setVelocityInt16All>
    }
    return true;
 800349c:	2301      	movs	r3, #1
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3720      	adds	r7, #32
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	42c80000 	.word	0x42c80000
 80034ac:	00000032 	.word	0x00000032
 80034b0:	41a80000 	.word	0x41a80000
 80034b4:	00000000 	.word	0x00000000

080034b8 <cvxgen_init>:
Params params;
Workspace work;
Settings cvxgen_settings;


void cvxgen_init(int max_iters, unsigned int max_time_ms) {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
	set_defaults();
 80034c2:	f007 fdad 	bl	800b020 <set_defaults>
	setup_indexing();
 80034c6:	f007 fe13 	bl	800b0f0 <setup_indexing>
	cvxgen_settings.max_iters = max_iters;
 80034ca:	4a09      	ldr	r2, [pc, #36]	@ (80034f0 <cvxgen_init+0x38>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6113      	str	r3, [r2, #16]

	unsigned int max_time = HAL_RCC_GetHCLKFreq() * max_time_ms / 1000;
 80034d0:	f015 fcd4 	bl	8018e7c <HAL_RCC_GetHCLKFreq>
 80034d4:	4602      	mov	r2, r0
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	fb02 f303 	mul.w	r3, r2, r3
 80034dc:	4a05      	ldr	r2, [pc, #20]	@ (80034f4 <cvxgen_init+0x3c>)
 80034de:	fba2 2303 	umull	r2, r3, r2, r3
 80034e2:	099b      	lsrs	r3, r3, #6
 80034e4:	60fb      	str	r3, [r7, #12]

}
 80034e6:	bf00      	nop
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	24007a40 	.word	0x24007a40
 80034f4:	10624dd3 	.word	0x10624dd3

080034f8 <load_data>:
	float T_REQ_Nm,
	float M_REQ_Nm,
	float regen_torque_Nm,
	cmr_torqueDistributionNm_t * torque_max_Nm,
	cmr_torqueDistributionNm_t *result_torques_Nm
	) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08a      	sub	sp, #40	@ 0x28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	ed87 0a05 	vstr	s0, [r7, #20]
 8003502:	edc7 0a04 	vstr	s1, [r7, #16]
 8003506:	ed87 1a03 	vstr	s2, [r7, #12]
 800350a:	edc7 1a02 	vstr	s3, [r7, #8]
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  
	//mostly copied sweep code here
	double cos_swangle = cos(steering_angle_rad);
 8003512:	edd7 7a05 	vldr	s15, [r7, #20]
 8003516:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800351a:	eeb0 0b47 	vmov.f64	d0, d7
 800351e:	f01b f997 	bl	801e850 <cos>
 8003522:	ed87 0b08 	vstr	d0, [r7, #32]
	double sin_swangle = sin(steering_angle_rad);
 8003526:	edd7 7a05 	vldr	s15, [r7, #20]
 800352a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800352e:	eeb0 0b47 	vmov.f64	d0, d7
 8003532:	f01b f9e1 	bl	801e8f8 <sin>
 8003536:	ed87 0b06 	vstr	d0, [r7, #24]

	params.Q[0] = 2*K_LIN + 2*K_TIE + 3519.8941669047*K_YAW*cos_swangle*cos_swangle + 8393.5937826189*K_YAW*cos_swangle*sin_swangle + 5003.87321656127*K_YAW*sin_swangle*sin_swangle;
 800353a:	ed97 7b08 	vldr	d7, [r7, #32]
 800353e:	ed9f 6be8 	vldr	d6, [pc, #928]	@ 80038e0 <load_data+0x3e8>
 8003542:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003546:	ed97 7b08 	vldr	d7, [r7, #32]
 800354a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800354e:	ed9f 6be6 	vldr	d6, [pc, #920]	@ 80038e8 <load_data+0x3f0>
 8003552:	ee37 6b06 	vadd.f64	d6, d7, d6
 8003556:	ed97 7b08 	vldr	d7, [r7, #32]
 800355a:	ed9f 5be5 	vldr	d5, [pc, #916]	@ 80038f0 <load_data+0x3f8>
 800355e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003562:	ed97 7b06 	vldr	d7, [r7, #24]
 8003566:	ee25 7b07 	vmul.f64	d7, d5, d7
 800356a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800356e:	ed97 7b06 	vldr	d7, [r7, #24]
 8003572:	ed9f 5be1 	vldr	d5, [pc, #900]	@ 80038f8 <load_data+0x400>
 8003576:	ee27 5b05 	vmul.f64	d5, d7, d5
 800357a:	ed97 7b06 	vldr	d7, [r7, #24]
 800357e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003582:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003586:	4bee      	ldr	r3, [pc, #952]	@ (8003940 <load_data+0x448>)
 8003588:	ed83 7b00 	vstr	d7, [r3]
	params.Q[4] = 2*K_LIN - 3519.8941669047*K_YAW*cos_swangle*cos_swangle + 5003.87321656127*K_YAW*sin_swangle*sin_swangle;
 800358c:	ed97 7b08 	vldr	d7, [r7, #32]
 8003590:	ed9f 6bd3 	vldr	d6, [pc, #844]	@ 80038e0 <load_data+0x3e8>
 8003594:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003598:	ed97 7b08 	vldr	d7, [r7, #32]
 800359c:	ee26 7b07 	vmul.f64	d7, d6, d7
 80035a0:	ed9f 6bd7 	vldr	d6, [pc, #860]	@ 8003900 <load_data+0x408>
 80035a4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80035a8:	ed97 7b06 	vldr	d7, [r7, #24]
 80035ac:	ed9f 5bd2 	vldr	d5, [pc, #840]	@ 80038f8 <load_data+0x400>
 80035b0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80035b4:	ed97 7b06 	vldr	d7, [r7, #24]
 80035b8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80035bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80035c0:	4bdf      	ldr	r3, [pc, #892]	@ (8003940 <load_data+0x448>)
 80035c2:	ed83 7b08 	vstr	d7, [r3, #32]
	params.Q[5] = 2*K_LIN + 2*K_TIE + 3519.8941669047*K_YAW*cos_swangle*cos_swangle - 8393.5937826189*K_YAW*cos_swangle*sin_swangle + 5003.87321656127*K_YAW*sin_swangle*sin_swangle;
 80035c6:	ed97 7b08 	vldr	d7, [r7, #32]
 80035ca:	ed9f 6bc5 	vldr	d6, [pc, #788]	@ 80038e0 <load_data+0x3e8>
 80035ce:	ee27 6b06 	vmul.f64	d6, d7, d6
 80035d2:	ed97 7b08 	vldr	d7, [r7, #32]
 80035d6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80035da:	ed9f 6bc3 	vldr	d6, [pc, #780]	@ 80038e8 <load_data+0x3f0>
 80035de:	ee37 6b06 	vadd.f64	d6, d7, d6
 80035e2:	ed97 7b08 	vldr	d7, [r7, #32]
 80035e6:	ed9f 5bc2 	vldr	d5, [pc, #776]	@ 80038f0 <load_data+0x3f8>
 80035ea:	ee27 5b05 	vmul.f64	d5, d7, d5
 80035ee:	ed97 7b06 	vldr	d7, [r7, #24]
 80035f2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80035f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80035fa:	ed97 7b06 	vldr	d7, [r7, #24]
 80035fe:	ed9f 5bbe 	vldr	d5, [pc, #760]	@ 80038f8 <load_data+0x400>
 8003602:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003606:	ed97 7b06 	vldr	d7, [r7, #24]
 800360a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800360e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003612:	4bcb      	ldr	r3, [pc, #812]	@ (8003940 <load_data+0x448>)
 8003614:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
	params.Q[8] = 2*K_LIN + 3519.8941669047*K_YAW*cos_swangle + 4196.79689130945*K_YAW*sin_swangle;
 8003618:	ed97 7b08 	vldr	d7, [r7, #32]
 800361c:	ed9f 6bb0 	vldr	d6, [pc, #704]	@ 80038e0 <load_data+0x3e8>
 8003620:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003624:	ed9f 6bb6 	vldr	d6, [pc, #728]	@ 8003900 <load_data+0x408>
 8003628:	ee37 6b06 	vadd.f64	d6, d7, d6
 800362c:	ed97 7b06 	vldr	d7, [r7, #24]
 8003630:	ed9f 5bb5 	vldr	d5, [pc, #724]	@ 8003908 <load_data+0x410>
 8003634:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003638:	ee36 7b07 	vadd.f64	d7, d6, d7
 800363c:	4bc0      	ldr	r3, [pc, #768]	@ (8003940 <load_data+0x448>)
 800363e:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
	params.Q[9] = 2*K_LIN - 3519.8941669047*K_YAW*cos_swangle + 4196.79689130945*K_YAW*sin_swangle;
 8003642:	ed97 7b08 	vldr	d7, [r7, #32]
 8003646:	ed9f 6ba6 	vldr	d6, [pc, #664]	@ 80038e0 <load_data+0x3e8>
 800364a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800364e:	ed9f 6bac 	vldr	d6, [pc, #688]	@ 8003900 <load_data+0x408>
 8003652:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003656:	ed97 7b06 	vldr	d7, [r7, #24]
 800365a:	ed9f 5bab 	vldr	d5, [pc, #684]	@ 8003908 <load_data+0x410>
 800365e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003662:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003666:	4bb6      	ldr	r3, [pc, #728]	@ (8003940 <load_data+0x448>)
 8003668:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
	params.Q[10] = 2*K_LIN + 2*K_TIE + 3519.8941669047*K_YAW;
 800366c:	49b4      	ldr	r1, [pc, #720]	@ (8003940 <load_data+0x448>)
 800366e:	a3a8      	add	r3, pc, #672	@ (adr r3, 8003910 <load_data+0x418>)
 8003670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003674:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	params.Q[12] = 2*K_LIN - 3519.8941669047*K_YAW*cos_swangle - 4196.79689130945*K_YAW*sin_swangle;     
 8003678:	ed97 7b08 	vldr	d7, [r7, #32]
 800367c:	ed9f 6b98 	vldr	d6, [pc, #608]	@ 80038e0 <load_data+0x3e8>
 8003680:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003684:	ed9f 6b9e 	vldr	d6, [pc, #632]	@ 8003900 <load_data+0x408>
 8003688:	ee36 6b47 	vsub.f64	d6, d6, d7
 800368c:	ed97 7b06 	vldr	d7, [r7, #24]
 8003690:	ed9f 5b9d 	vldr	d5, [pc, #628]	@ 8003908 <load_data+0x410>
 8003694:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003698:	ee36 7b47 	vsub.f64	d7, d6, d7
 800369c:	4ba8      	ldr	r3, [pc, #672]	@ (8003940 <load_data+0x448>)
 800369e:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
	params.Q[13] = 2*K_LIN + 3519.8941669047*K_YAW*cos_swangle - 4196.79689130945*K_YAW*sin_swangle;     
 80036a2:	ed97 7b08 	vldr	d7, [r7, #32]
 80036a6:	ed9f 6b8e 	vldr	d6, [pc, #568]	@ 80038e0 <load_data+0x3e8>
 80036aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80036ae:	ed9f 6b94 	vldr	d6, [pc, #592]	@ 8003900 <load_data+0x408>
 80036b2:	ee37 6b06 	vadd.f64	d6, d7, d6
 80036b6:	ed97 7b06 	vldr	d7, [r7, #24]
 80036ba:	ed9f 5b93 	vldr	d5, [pc, #588]	@ 8003908 <load_data+0x410>
 80036be:	ee27 7b05 	vmul.f64	d7, d7, d5
 80036c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80036c6:	4b9e      	ldr	r3, [pc, #632]	@ (8003940 <load_data+0x448>)
 80036c8:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
	params.Q[14] = 2*K_LIN - 3519.8941669047*K_YAW;
 80036cc:	499c      	ldr	r1, [pc, #624]	@ (8003940 <load_data+0x448>)
 80036ce:	a392      	add	r3, pc, #584	@ (adr r3, 8003918 <load_data+0x420>)
 80036d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d4:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	params.Q[15] = 2*K_LIN + 2*K_TIE + 3519.8941669047*K_YAW;
 80036d8:	4999      	ldr	r1, [pc, #612]	@ (8003940 <load_data+0x448>)
 80036da:	a38d      	add	r3, pc, #564	@ (adr r3, 8003910 <load_data+0x418>)
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	// Mirrors 4
	params.Q[1] = 2*K_LIN - 3519.8941669047*K_YAW*cos_swangle*cos_swangle + 5003.87321656127*K_YAW*sin_swangle*sin_swangle;
 80036e4:	ed97 7b08 	vldr	d7, [r7, #32]
 80036e8:	ed9f 6b7d 	vldr	d6, [pc, #500]	@ 80038e0 <load_data+0x3e8>
 80036ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 80036f0:	ed97 7b08 	vldr	d7, [r7, #32]
 80036f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80036f8:	ed9f 6b81 	vldr	d6, [pc, #516]	@ 8003900 <load_data+0x408>
 80036fc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003700:	ed97 7b06 	vldr	d7, [r7, #24]
 8003704:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 80038f8 <load_data+0x400>
 8003708:	ee27 5b05 	vmul.f64	d5, d7, d5
 800370c:	ed97 7b06 	vldr	d7, [r7, #24]
 8003710:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003714:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003718:	4b89      	ldr	r3, [pc, #548]	@ (8003940 <load_data+0x448>)
 800371a:	ed83 7b02 	vstr	d7, [r3, #8]
	// Mirrors 8
	params.Q[2] = 2*K_LIN + 3519.8941669047*K_YAW*cos_swangle + 4196.79689130945*K_YAW*sin_swangle;      
 800371e:	ed97 7b08 	vldr	d7, [r7, #32]
 8003722:	ed9f 6b6f 	vldr	d6, [pc, #444]	@ 80038e0 <load_data+0x3e8>
 8003726:	ee27 7b06 	vmul.f64	d7, d7, d6
 800372a:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 8003900 <load_data+0x408>
 800372e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8003732:	ed97 7b06 	vldr	d7, [r7, #24]
 8003736:	ed9f 5b74 	vldr	d5, [pc, #464]	@ 8003908 <load_data+0x410>
 800373a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800373e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003742:	4b7f      	ldr	r3, [pc, #508]	@ (8003940 <load_data+0x448>)
 8003744:	ed83 7b04 	vstr	d7, [r3, #16]
	// Mirrors 12
	params.Q[3] = 2*K_LIN - 3519.8941669047*K_YAW*cos_swangle - 4196.79689130945*K_YAW*sin_swangle;
 8003748:	ed97 7b08 	vldr	d7, [r7, #32]
 800374c:	ed9f 6b64 	vldr	d6, [pc, #400]	@ 80038e0 <load_data+0x3e8>
 8003750:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003754:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8003900 <load_data+0x408>
 8003758:	ee36 6b47 	vsub.f64	d6, d6, d7
 800375c:	ed97 7b06 	vldr	d7, [r7, #24]
 8003760:	ed9f 5b69 	vldr	d5, [pc, #420]	@ 8003908 <load_data+0x410>
 8003764:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003768:	ee36 7b47 	vsub.f64	d7, d6, d7
 800376c:	4b74      	ldr	r3, [pc, #464]	@ (8003940 <load_data+0x448>)
 800376e:	ed83 7b06 	vstr	d7, [r3, #24]
	// Mirrors 9
	params.Q[6] = 2*K_LIN - 3519.8941669047*K_YAW*cos_swangle + 4196.79689130945*K_YAW*sin_swangle;
 8003772:	ed97 7b08 	vldr	d7, [r7, #32]
 8003776:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 80038e0 <load_data+0x3e8>
 800377a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800377e:	ed9f 6b60 	vldr	d6, [pc, #384]	@ 8003900 <load_data+0x408>
 8003782:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003786:	ed97 7b06 	vldr	d7, [r7, #24]
 800378a:	ed9f 5b5f 	vldr	d5, [pc, #380]	@ 8003908 <load_data+0x410>
 800378e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003792:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003796:	4b6a      	ldr	r3, [pc, #424]	@ (8003940 <load_data+0x448>)
 8003798:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
	// Mirrors 13
	params.Q[7] = 2*K_LIN + 3519.8941669047*K_YAW*cos_swangle - 4196.79689130945*K_YAW*sin_swangle;
 800379c:	ed97 7b08 	vldr	d7, [r7, #32]
 80037a0:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 80038e0 <load_data+0x3e8>
 80037a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80037a8:	ed9f 6b55 	vldr	d6, [pc, #340]	@ 8003900 <load_data+0x408>
 80037ac:	ee37 6b06 	vadd.f64	d6, d7, d6
 80037b0:	ed97 7b06 	vldr	d7, [r7, #24]
 80037b4:	ed9f 5b54 	vldr	d5, [pc, #336]	@ 8003908 <load_data+0x410>
 80037b8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80037bc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80037c0:	4b5f      	ldr	r3, [pc, #380]	@ (8003940 <load_data+0x448>)
 80037c2:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
	// Mirrors 14
	params.Q[11] = 2*K_LIN - 3519.8941669047*K_YAW;
 80037c6:	495e      	ldr	r1, [pc, #376]	@ (8003940 <load_data+0x448>)
 80037c8:	a353      	add	r3, pc, #332	@ (adr r3, 8003918 <load_data+0x420>)
 80037ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ce:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	params.q[0] = -2 * T_REQ_Nm * K_LIN - 83.9034464954176 * cos_swangle * K_YAW * M_REQ_Nm - 100.038724667613 * K_YAW * M_REQ_Nm * sin_swangle;
 80037d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80037d6:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80037da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037de:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8003944 <load_data+0x44c>
 80037e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037e6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80037ea:	ed97 7b08 	vldr	d7, [r7, #32]
 80037ee:	ed9f 5b4c 	vldr	d5, [pc, #304]	@ 8003920 <load_data+0x428>
 80037f2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80037f6:	ed9f 5b4c 	vldr	d5, [pc, #304]	@ 8003928 <load_data+0x430>
 80037fa:	ee27 5b05 	vmul.f64	d5, d7, d5
 80037fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8003802:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003806:	ee25 7b07 	vmul.f64	d7, d5, d7
 800380a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800380e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003812:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003816:	ed9f 5b46 	vldr	d5, [pc, #280]	@ 8003930 <load_data+0x438>
 800381a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800381e:	ed97 7b06 	vldr	d7, [r7, #24]
 8003822:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003826:	ee36 7b47 	vsub.f64	d7, d6, d7
 800382a:	4b45      	ldr	r3, [pc, #276]	@ (8003940 <load_data+0x448>)
 800382c:	ed83 7b20 	vstr	d7, [r3, #128]	@ 0x80
	params.q[1] = -2 * T_REQ_Nm * K_LIN + 83.9034464954176 * cos_swangle * K_YAW * M_REQ_Nm - 100.038724667613 * K_YAW * M_REQ_Nm * sin_swangle;
 8003830:	edd7 7a04 	vldr	s15, [r7, #16]
 8003834:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003838:	ee67 7a87 	vmul.f32	s15, s15, s14
 800383c:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8003944 <load_data+0x44c>
 8003840:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003844:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003848:	ed97 7b08 	vldr	d7, [r7, #32]
 800384c:	ed9f 5b34 	vldr	d5, [pc, #208]	@ 8003920 <load_data+0x428>
 8003850:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003854:	ed9f 5b34 	vldr	d5, [pc, #208]	@ 8003928 <load_data+0x430>
 8003858:	ee27 5b05 	vmul.f64	d5, d7, d5
 800385c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003860:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003864:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003868:	ee36 6b07 	vadd.f64	d6, d6, d7
 800386c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003870:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003874:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8003930 <load_data+0x438>
 8003878:	ee27 5b05 	vmul.f64	d5, d7, d5
 800387c:	ed97 7b06 	vldr	d7, [r7, #24]
 8003880:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003884:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003888:	4b2d      	ldr	r3, [pc, #180]	@ (8003940 <load_data+0x448>)
 800388a:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
	params.q[2] = -2 * T_REQ_Nm * K_LIN - 83.9034464954176 * K_YAW * M_REQ_Nm;
 800388e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003892:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800389a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003944 <load_data+0x44c>
 800389e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038a2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80038a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80038aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038ae:	ed9f 5b22 	vldr	d5, [pc, #136]	@ 8003938 <load_data+0x440>
 80038b2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80038b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80038ba:	4b21      	ldr	r3, [pc, #132]	@ (8003940 <load_data+0x448>)
 80038bc:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
	params.q[3] = -2 * T_REQ_Nm * K_LIN + 83.9034464954176 * K_YAW * M_REQ_Nm;
 80038c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80038c4:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80038c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038cc:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003944 <load_data+0x44c>
 80038d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038d4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80038d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80038dc:	e034      	b.n	8003948 <load_data+0x450>
 80038de:	bf00      	nop
 80038e0:	87f2468c 	.word	0x87f2468c
 80038e4:	40807fdf 	.word	0x40807fdf
 80038e8:	20000000 	.word	0x20000000
 80038ec:	40640083 	.word	0x40640083
 80038f0:	0e65ca45 	.word	0x0e65ca45
 80038f4:	4093ac28 	.word	0x4093ac28
 80038f8:	e9c82269 	.word	0xe9c82269
 80038fc:	408774a5 	.word	0x408774a5
 8003900:	00000000 	.word	0x00000000
 8003904:	40640000 	.word	0x40640000
 8003908:	0e65ca45 	.word	0x0e65ca45
 800390c:	4083ac28 	.word	0x4083ac28
 8003910:	4ff2468c 	.word	0x4ff2468c
 8003914:	40858000 	.word	0x40858000
 8003918:	0fe48d18 	.word	0x0fe48d18
 800391c:	c076ffbf 	.word	0xc076ffbf
 8003920:	113fe048 	.word	0x113fe048
 8003924:	4054f9d2 	.word	0x4054f9d2
 8003928:	40000000 	.word	0x40000000
 800392c:	3fc33333 	.word	0x3fc33333
 8003930:	6fa4443f 	.word	0x6fa4443f
 8003934:	402e02f9 	.word	0x402e02f9
 8003938:	f247b531 	.word	0xf247b531
 800393c:	40292bc8 	.word	0x40292bc8
 8003940:	24006f68 	.word	0x24006f68
 8003944:	42a00000 	.word	0x42a00000
 8003948:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800394c:	ed9f 5b82 	vldr	d5, [pc, #520]	@ 8003b58 <load_data+0x660>
 8003950:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003954:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003958:	4b81      	ldr	r3, [pc, #516]	@ (8003b60 <load_data+0x668>)
 800395a:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98

	params.tau_max[0] = torque_max_Nm->fl; // or tractive torque limit
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	edd3 7a00 	vldr	s15, [r3]
 8003964:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003968:	4b7d      	ldr	r3, [pc, #500]	@ (8003b60 <load_data+0x668>)
 800396a:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
	params.tau_max[1] = torque_max_Nm->fr;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	edd3 7a01 	vldr	s15, [r3, #4]
 8003974:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003978:	4b79      	ldr	r3, [pc, #484]	@ (8003b60 <load_data+0x668>)
 800397a:	ed83 7b2a 	vstr	d7, [r3, #168]	@ 0xa8
	params.tau_max[2] = torque_max_Nm->rl;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	edd3 7a02 	vldr	s15, [r3, #8]
 8003984:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003988:	4b75      	ldr	r3, [pc, #468]	@ (8003b60 <load_data+0x668>)
 800398a:	ed83 7b2c 	vstr	d7, [r3, #176]	@ 0xb0
	params.tau_max[3] = torque_max_Nm->rr;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	edd3 7a03 	vldr	s15, [r3, #12]
 8003994:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003998:	4b71      	ldr	r3, [pc, #452]	@ (8003b60 <load_data+0x668>)
 800399a:	ed83 7b2e 	vstr	d7, [r3, #184]	@ 0xb8

	params.tau_min[0] = fmaxf(-torque_max_Nm->fl, regen_torque_Nm);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	edd3 7a00 	vldr	s15, [r3]
 80039a4:	eef1 7a67 	vneg.f32	s15, s15
 80039a8:	eef0 0a67 	vmov.f32	s1, s15
 80039ac:	ed97 0a02 	vldr	s0, [r7, #8]
 80039b0:	f01b f882 	bl	801eab8 <fmaxf>
 80039b4:	eef0 7a40 	vmov.f32	s15, s0
 80039b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039bc:	4b68      	ldr	r3, [pc, #416]	@ (8003b60 <load_data+0x668>)
 80039be:	ed83 7b30 	vstr	d7, [r3, #192]	@ 0xc0
	params.tau_min[1] = fmaxf(-torque_max_Nm->fr, regen_torque_Nm);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80039c8:	eef1 7a67 	vneg.f32	s15, s15
 80039cc:	eef0 0a67 	vmov.f32	s1, s15
 80039d0:	ed97 0a02 	vldr	s0, [r7, #8]
 80039d4:	f01b f870 	bl	801eab8 <fmaxf>
 80039d8:	eef0 7a40 	vmov.f32	s15, s0
 80039dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039e0:	4b5f      	ldr	r3, [pc, #380]	@ (8003b60 <load_data+0x668>)
 80039e2:	ed83 7b32 	vstr	d7, [r3, #200]	@ 0xc8
	params.tau_min[2] = fmaxf(-torque_max_Nm->rl, regen_torque_Nm);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80039ec:	eef1 7a67 	vneg.f32	s15, s15
 80039f0:	eef0 0a67 	vmov.f32	s1, s15
 80039f4:	ed97 0a02 	vldr	s0, [r7, #8]
 80039f8:	f01b f85e 	bl	801eab8 <fmaxf>
 80039fc:	eef0 7a40 	vmov.f32	s15, s0
 8003a00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a04:	4b56      	ldr	r3, [pc, #344]	@ (8003b60 <load_data+0x668>)
 8003a06:	ed83 7b34 	vstr	d7, [r3, #208]	@ 0xd0
	params.tau_min[3] = fmaxf(-torque_max_Nm->rr, regen_torque_Nm);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a10:	eef1 7a67 	vneg.f32	s15, s15
 8003a14:	eef0 0a67 	vmov.f32	s1, s15
 8003a18:	ed97 0a02 	vldr	s0, [r7, #8]
 8003a1c:	f01b f84c 	bl	801eab8 <fmaxf>
 8003a20:	eef0 7a40 	vmov.f32	s15, s0
 8003a24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a28:	4b4d      	ldr	r3, [pc, #308]	@ (8003b60 <load_data+0x668>)
 8003a2a:	ed83 7b36 	vstr	d7, [r3, #216]	@ 0xd8

	params.a[0] = getMotorSpeed_rpm(MOTOR_FL)/GEAR_RATIO; // angular velocity of wheel in rads/s
 8003a2e:	2002      	movs	r0, #2
 8003a30:	f002 fd3a 	bl	80064a8 <getMotorSpeed_rpm>
 8003a34:	4603      	mov	r3, r0
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a3e:	4b49      	ldr	r3, [pc, #292]	@ (8003b64 <load_data+0x66c>)
 8003a40:	ed93 7a00 	vldr	s14, [r3]
 8003a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a4c:	4b44      	ldr	r3, [pc, #272]	@ (8003b60 <load_data+0x668>)
 8003a4e:	ed83 7b38 	vstr	d7, [r3, #224]	@ 0xe0
	params.a[1] = getMotorSpeed_rpm(MOTOR_FR)/GEAR_RATIO;
 8003a52:	2000      	movs	r0, #0
 8003a54:	f002 fd28 	bl	80064a8 <getMotorSpeed_rpm>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	ee07 3a90 	vmov	s15, r3
 8003a5e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a62:	4b40      	ldr	r3, [pc, #256]	@ (8003b64 <load_data+0x66c>)
 8003a64:	ed93 7a00 	vldr	s14, [r3]
 8003a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a70:	4b3b      	ldr	r3, [pc, #236]	@ (8003b60 <load_data+0x668>)
 8003a72:	ed83 7b3a 	vstr	d7, [r3, #232]	@ 0xe8
	params.a[2] = getMotorSpeed_rpm(MOTOR_RL)/GEAR_RATIO;
 8003a76:	2003      	movs	r0, #3
 8003a78:	f002 fd16 	bl	80064a8 <getMotorSpeed_rpm>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a86:	4b37      	ldr	r3, [pc, #220]	@ (8003b64 <load_data+0x66c>)
 8003a88:	ed93 7a00 	vldr	s14, [r3]
 8003a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a94:	4b32      	ldr	r3, [pc, #200]	@ (8003b60 <load_data+0x668>)
 8003a96:	ed83 7b3c 	vstr	d7, [r3, #240]	@ 0xf0
	params.a[3] = getMotorSpeed_rpm(MOTOR_RR)/GEAR_RATIO;
 8003a9a:	2001      	movs	r0, #1
 8003a9c:	f002 fd04 	bl	80064a8 <getMotorSpeed_rpm>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003aaa:	4b2e      	ldr	r3, [pc, #184]	@ (8003b64 <load_data+0x66c>)
 8003aac:	ed93 7a00 	vldr	s14, [r3]
 8003ab0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ab4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ab8:	4b29      	ldr	r3, [pc, #164]	@ (8003b60 <load_data+0x668>)
 8003aba:	ed83 7b3e 	vstr	d7, [r3, #248]	@ 0xf8

	params.b[0] = power_upper_limit_W; // Power limit kWh
 8003abe:	4b2a      	ldr	r3, [pc, #168]	@ (8003b68 <load_data+0x670>)
 8003ac0:	edd3 7a00 	vldr	s15, [r3]
 8003ac4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ac8:	4b25      	ldr	r3, [pc, #148]	@ (8003b60 <load_data+0x668>)
 8003aca:	ed83 7b40 	vstr	d7, [r3, #256]	@ 0x100

    cvxgen_solve();
 8003ace:	f008 f943 	bl	800bd58 <cvxgen_solve>

    if(work.converged) {
 8003ad2:	4b26      	ldr	r3, [pc, #152]	@ (8003b6c <load_data+0x674>)
 8003ad4:	f8d3 39cc 	ldr.w	r3, [r3, #2508]	@ 0x9cc
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d028      	beq.n	8003b2e <load_data+0x636>
		result_torques_Nm->fl = vars.tau[0];
 8003adc:	4b24      	ldr	r3, [pc, #144]	@ (8003b70 <load_data+0x678>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	ed93 7b00 	vldr	d7, [r3]
 8003ae4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	edc3 7a00 	vstr	s15, [r3]
		result_torques_Nm->fr = vars.tau[1];
 8003aee:	4b20      	ldr	r3, [pc, #128]	@ (8003b70 <load_data+0x678>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3308      	adds	r3, #8
 8003af4:	ed93 7b00 	vldr	d7, [r3]
 8003af8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	edc3 7a01 	vstr	s15, [r3, #4]
		result_torques_Nm->rl = vars.tau[2];
 8003b02:	4b1b      	ldr	r3, [pc, #108]	@ (8003b70 <load_data+0x678>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3310      	adds	r3, #16
 8003b08:	ed93 7b00 	vldr	d7, [r3]
 8003b0c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	edc3 7a02 	vstr	s15, [r3, #8]
		result_torques_Nm->rr = vars.tau[3];
 8003b16:	4b16      	ldr	r3, [pc, #88]	@ (8003b70 <load_data+0x678>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3318      	adds	r3, #24
 8003b1c:	ed93 7b00 	vldr	d7, [r3]
 8003b20:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	edc3 7a03 	vstr	s15, [r3, #12]
		return true;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e010      	b.n	8003b50 <load_data+0x658>
    }else{ // added for testing purposes
		result_torques_Nm->fl = 0.0f;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
		result_torques_Nm->fr = 0.0f;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	605a      	str	r2, [r3, #4]
		result_torques_Nm->rl = 0.0f;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	609a      	str	r2, [r3, #8]
		result_torques_Nm->rr = 0.0f;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	60da      	str	r2, [r3, #12]
		return false;
 8003b4e:	2300      	movs	r3, #0
//	result_torques_Nm->fl = 0.0f;
//	result_torques_Nm->fr = 0.0f;
//	result_torques_Nm->rl = 0.0f;
//	result_torques_Nm->rr = 0.0f;

}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3728      	adds	r7, #40	@ 0x28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	f247b531 	.word	0xf247b531
 8003b5c:	40292bc8 	.word	0x40292bc8
 8003b60:	24006f68 	.word	0x24006f68
 8003b64:	0802203c 	.word	0x0802203c
 8003b68:	240005bc 	.word	0x240005bc
 8003b6c:	24007070 	.word	0x24007070
 8003b70:	24006f60 	.word	0x24006f60

08003b74 <motorRPMtoWheelRPM10>:

const float GEAR_RATIO = 13.93; //updated for 24e
const float EFFECTIVE_WHEEL_DIA_M = 0.43; /** @brief effective wheel diameter */
const float EFFECTIVE_WHEEL_RAD_M = EFFECTIVE_WHEEL_DIA_M * 0.5f; /** @brief effective wheel radius */

int32_t motorRPMtoWheelRPM10(int16_t rpm) {
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	80fb      	strh	r3, [r7, #6]
    return (((int32_t) rpm) * 10 * GEAR_RATIO_BOT / (GEAR_RATIO_TOP + GEAR_RATIO_BOT));
 8003b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b82:	f240 226d 	movw	r2, #621	@ 0x26d
 8003b86:	fb03 f202 	mul.w	r2, r3, r2
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	4619      	mov	r1, r3
 8003b94:	f242 2250 	movw	r2, #8784	@ 0x2250
 8003b98:	f240 236d 	movw	r3, #621	@ 0x26d
 8003b9c:	4413      	add	r3, r2
 8003b9e:	fb91 f3f3 	sdiv	r3, r1, r3
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <motorCurrentToTorque10>:

float motorCurrentToTorque10(int16_t current) {
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	80fb      	strh	r3, [r7, #6]
    static const float UNIT_TO_NM = 0.001701171875;

    return ((float) current) * 10 * GEAR_RATIO * UNIT_TO_NM;
 8003bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bbe:	ee07 3a90 	vmov	s15, r3
 8003bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bc6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003bca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bce:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8003bf0 <motorCurrentToTorque10+0x40>
 8003bd2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003bd6:	4b07      	ldr	r3, [pc, #28]	@ (8003bf4 <motorCurrentToTorque10+0x44>)
 8003bd8:	edd3 7a00 	vldr	s15, [r3]
 8003bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8003be0:	eeb0 0a67 	vmov.f32	s0, s15
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	415ee148 	.word	0x415ee148
 8003bf4:	08022044 	.word	0x08022044

08003bf8 <motorSetpointPercentToTorque10>:

float motorSetpointPercentToTorque10(int16_t sp) {
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	80fb      	strh	r3, [r7, #6]
    static const float PCT10_TO_NM10 = 0.098;

    return ((float) sp) * PCT10_TO_NM10 * GEAR_RATIO; 
 8003c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c0e:	4b08      	ldr	r3, [pc, #32]	@ (8003c30 <motorSetpointPercentToTorque10+0x38>)
 8003c10:	edd3 7a00 	vldr	s15, [r3]
 8003c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c18:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8003c34 <motorSetpointPercentToTorque10+0x3c>
 8003c1c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003c20:	eeb0 0a67 	vmov.f32	s0, s15
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	08022048 	.word	0x08022048
 8003c34:	415ee148 	.word	0x415ee148

08003c38 <getMotorTorqueRequest>:

int16_t getMotorTorqueRequest(motorLocation_t motor) {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	71fb      	strb	r3, [r7, #7]
    const cmr_canAMKSetpoints_t *sp = getAMKSetpoints(motor);
 8003c42:	79fb      	ldrb	r3, [r7, #7]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f002 fb89 	bl	800635c <getAMKSetpoints>
 8003c4a:	60f8      	str	r0, [r7, #12]

    return (sp->torqueLimPos_dpcnt > 0) ? sp->torqueLimPos_dpcnt : sp->torqueLimNeg_dpcnt;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	dd03      	ble.n	8003c5e <getMotorTorqueRequest+0x26>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003c5c:	e002      	b.n	8003c64 <getMotorTorqueRequest+0x2c>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <daqWheelSpeedFeedback>:

void daqWheelSpeedFeedback(cmr_canCDCWheelVelocity_t *speedFeedback) {
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]

    volatile cmr_canAMKActualValues1_t *amkAct1FL = canTractiveGetPayload(CANRX_TRAC_INV_FL_ACT1);
 8003c74:	2000      	movs	r0, #0
 8003c76:	f7fd fb35 	bl	80012e4 <canTractiveGetPayload>
 8003c7a:	6178      	str	r0, [r7, #20]
    volatile cmr_canAMKActualValues1_t *amkAct1FR = canTractiveGetPayload(CANRX_TRAC_INV_FR_ACT1);
 8003c7c:	2002      	movs	r0, #2
 8003c7e:	f7fd fb31 	bl	80012e4 <canTractiveGetPayload>
 8003c82:	6138      	str	r0, [r7, #16]
    volatile cmr_canAMKActualValues1_t *amkAct1RL = canTractiveGetPayload(CANRX_TRAC_INV_RL_ACT1);
 8003c84:	2004      	movs	r0, #4
 8003c86:	f7fd fb2d 	bl	80012e4 <canTractiveGetPayload>
 8003c8a:	60f8      	str	r0, [r7, #12]
    volatile cmr_canAMKActualValues1_t *amkAct1RR = canTractiveGetPayload(CANRX_TRAC_INV_RR_ACT1);
 8003c8c:	2006      	movs	r0, #6
 8003c8e:	f7fd fb29 	bl	80012e4 <canTractiveGetPayload>
 8003c92:	60b8      	str	r0, [r7, #8]

    speedFeedback->frontLeft_rpm =  (int16_t) motorRPMtoWheelRPM10(amkAct1FL->velocity_rpm);
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	885b      	ldrh	r3, [r3, #2]
 8003c98:	b21b      	sxth	r3, r3
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff ff6a 	bl	8003b74 <motorRPMtoWheelRPM10>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	b21a      	sxth	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	801a      	strh	r2, [r3, #0]
    speedFeedback->frontRight_rpm = (int16_t) motorRPMtoWheelRPM10(amkAct1FR->velocity_rpm);
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	885b      	ldrh	r3, [r3, #2]
 8003cac:	b21b      	sxth	r3, r3
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff ff60 	bl	8003b74 <motorRPMtoWheelRPM10>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	b21a      	sxth	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	805a      	strh	r2, [r3, #2]
    speedFeedback->rearLeft_rpm =   (int16_t) motorRPMtoWheelRPM10(amkAct1RL->velocity_rpm);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	885b      	ldrh	r3, [r3, #2]
 8003cc0:	b21b      	sxth	r3, r3
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff ff56 	bl	8003b74 <motorRPMtoWheelRPM10>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	b21a      	sxth	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	809a      	strh	r2, [r3, #4]
    speedFeedback->rearRight_rpm =  (int16_t) motorRPMtoWheelRPM10(amkAct1RR->velocity_rpm);
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	885b      	ldrh	r3, [r3, #2]
 8003cd4:	b21b      	sxth	r3, r3
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff ff4c 	bl	8003b74 <motorRPMtoWheelRPM10>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	b21a      	sxth	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	80da      	strh	r2, [r3, #6]
}
 8003ce4:	bf00      	nop
 8003ce6:	3718      	adds	r7, #24
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <daqWheelTorqueFeedback>:

void daqWheelTorqueFeedback(cmr_canCDCWheelTorque_t *torqueFeedback) {
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
    volatile cmr_canAMKActualValues1_t *amkAct1FL = canTractiveGetPayload(CANRX_TRAC_INV_FL_ACT1);
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	f7fd faf5 	bl	80012e4 <canTractiveGetPayload>
 8003cfa:	6178      	str	r0, [r7, #20]
    volatile cmr_canAMKActualValues1_t *amkAct1FR = canTractiveGetPayload(CANRX_TRAC_INV_FR_ACT1);
 8003cfc:	2002      	movs	r0, #2
 8003cfe:	f7fd faf1 	bl	80012e4 <canTractiveGetPayload>
 8003d02:	6138      	str	r0, [r7, #16]
    volatile cmr_canAMKActualValues1_t *amkAct1RL = canTractiveGetPayload(CANRX_TRAC_INV_RL_ACT1);
 8003d04:	2004      	movs	r0, #4
 8003d06:	f7fd faed 	bl	80012e4 <canTractiveGetPayload>
 8003d0a:	60f8      	str	r0, [r7, #12]
    volatile cmr_canAMKActualValues1_t *amkAct1RR = canTractiveGetPayload(CANRX_TRAC_INV_RR_ACT1);
 8003d0c:	2006      	movs	r0, #6
 8003d0e:	f7fd fae9 	bl	80012e4 <canTractiveGetPayload>
 8003d12:	60b8      	str	r0, [r7, #8]

    torqueFeedback->frontLeft_Nm =  (int16_t) motorCurrentToTorque10(amkAct1FL->torqueCurrent_raw);
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	889b      	ldrh	r3, [r3, #4]
 8003d18:	b21b      	sxth	r3, r3
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff ff48 	bl	8003bb0 <motorCurrentToTorque10>
 8003d20:	eef0 7a40 	vmov.f32	s15, s0
 8003d24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d28:	ee17 3a90 	vmov	r3, s15
 8003d2c:	b21a      	sxth	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	801a      	strh	r2, [r3, #0]
    torqueFeedback->frontRight_Nm = (int16_t) motorCurrentToTorque10(amkAct1FR->torqueCurrent_raw);
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	889b      	ldrh	r3, [r3, #4]
 8003d36:	b21b      	sxth	r3, r3
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff ff39 	bl	8003bb0 <motorCurrentToTorque10>
 8003d3e:	eef0 7a40 	vmov.f32	s15, s0
 8003d42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d46:	ee17 3a90 	vmov	r3, s15
 8003d4a:	b21a      	sxth	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	805a      	strh	r2, [r3, #2]
    torqueFeedback->rearLeft_Nm =   (int16_t) motorCurrentToTorque10(amkAct1RL->torqueCurrent_raw);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	889b      	ldrh	r3, [r3, #4]
 8003d54:	b21b      	sxth	r3, r3
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff ff2a 	bl	8003bb0 <motorCurrentToTorque10>
 8003d5c:	eef0 7a40 	vmov.f32	s15, s0
 8003d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d64:	ee17 3a90 	vmov	r3, s15
 8003d68:	b21a      	sxth	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	809a      	strh	r2, [r3, #4]
    torqueFeedback->rearRight_Nm =  (int16_t) motorCurrentToTorque10(amkAct1RR->torqueCurrent_raw);
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	889b      	ldrh	r3, [r3, #4]
 8003d72:	b21b      	sxth	r3, r3
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff ff1b 	bl	8003bb0 <motorCurrentToTorque10>
 8003d7a:	eef0 7a40 	vmov.f32	s15, s0
 8003d7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d82:	ee17 3a90 	vmov	r3, s15
 8003d86:	b21a      	sxth	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	80da      	strh	r2, [r3, #6]
}
 8003d8c:	bf00      	nop
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <daqWheelSpeedSetpoints>:

void daqWheelSpeedSetpoints(cmr_canCDCWheelVelocity_t *speedSetpoint) {
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
    const cmr_canAMKSetpoints_t *amkSetpoint1FL = getAMKSetpoints(MOTOR_FL);
 8003d9c:	2002      	movs	r0, #2
 8003d9e:	f002 fadd 	bl	800635c <getAMKSetpoints>
 8003da2:	6178      	str	r0, [r7, #20]
    const cmr_canAMKSetpoints_t *amkSetpoint1FR = getAMKSetpoints(MOTOR_FR);
 8003da4:	2000      	movs	r0, #0
 8003da6:	f002 fad9 	bl	800635c <getAMKSetpoints>
 8003daa:	6138      	str	r0, [r7, #16]
    const cmr_canAMKSetpoints_t *amkSetpoint1RL = getAMKSetpoints(MOTOR_RL);
 8003dac:	2003      	movs	r0, #3
 8003dae:	f002 fad5 	bl	800635c <getAMKSetpoints>
 8003db2:	60f8      	str	r0, [r7, #12]
    const cmr_canAMKSetpoints_t *amkSetpoint1RR = getAMKSetpoints(MOTOR_RR);
 8003db4:	2001      	movs	r0, #1
 8003db6:	f002 fad1 	bl	800635c <getAMKSetpoints>
 8003dba:	60b8      	str	r0, [r7, #8]

    speedSetpoint->frontLeft_rpm =  (int16_t) motorRPMtoWheelRPM10(amkSetpoint1FL->velocity_rpm);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff fed6 	bl	8003b74 <motorRPMtoWheelRPM10>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	b21a      	sxth	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	801a      	strh	r2, [r3, #0]
    speedSetpoint->frontRight_rpm = (int16_t) motorRPMtoWheelRPM10(amkSetpoint1FR->velocity_rpm);
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff fecc 	bl	8003b74 <motorRPMtoWheelRPM10>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	b21a      	sxth	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	805a      	strh	r2, [r3, #2]
    speedSetpoint->rearLeft_rpm =   (int16_t) motorRPMtoWheelRPM10(amkSetpoint1RL->velocity_rpm);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff fec2 	bl	8003b74 <motorRPMtoWheelRPM10>
 8003df0:	4603      	mov	r3, r0
 8003df2:	b21a      	sxth	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	809a      	strh	r2, [r3, #4]
    speedSetpoint->rearRight_rpm =  (int16_t) motorRPMtoWheelRPM10(amkSetpoint1RR->velocity_rpm);
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff feb8 	bl	8003b74 <motorRPMtoWheelRPM10>
 8003e04:	4603      	mov	r3, r0
 8003e06:	b21a      	sxth	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	80da      	strh	r2, [r3, #6]
}
 8003e0c:	bf00      	nop
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <daqWheelTorqueSetpoints>:

void daqWheelTorqueSetpoints(cmr_canCDCWheelTorque_t *torqueSetpoint) {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
    torqueSetpoint->frontLeft_Nm =  (int16_t) motorSetpointPercentToTorque10(getMotorTorqueRequest(MOTOR_FL));
 8003e1c:	2002      	movs	r0, #2
 8003e1e:	f7ff ff0b 	bl	8003c38 <getMotorTorqueRequest>
 8003e22:	4603      	mov	r3, r0
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff fee7 	bl	8003bf8 <motorSetpointPercentToTorque10>
 8003e2a:	eef0 7a40 	vmov.f32	s15, s0
 8003e2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e32:	ee17 3a90 	vmov	r3, s15
 8003e36:	b21a      	sxth	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	801a      	strh	r2, [r3, #0]
    torqueSetpoint->frontRight_Nm = (int16_t) motorSetpointPercentToTorque10(getMotorTorqueRequest(MOTOR_FR));
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	f7ff fefb 	bl	8003c38 <getMotorTorqueRequest>
 8003e42:	4603      	mov	r3, r0
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff fed7 	bl	8003bf8 <motorSetpointPercentToTorque10>
 8003e4a:	eef0 7a40 	vmov.f32	s15, s0
 8003e4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e52:	ee17 3a90 	vmov	r3, s15
 8003e56:	b21a      	sxth	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	805a      	strh	r2, [r3, #2]
    torqueSetpoint->rearLeft_Nm =   (int16_t) motorSetpointPercentToTorque10(getMotorTorqueRequest(MOTOR_RL));
 8003e5c:	2003      	movs	r0, #3
 8003e5e:	f7ff feeb 	bl	8003c38 <getMotorTorqueRequest>
 8003e62:	4603      	mov	r3, r0
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff fec7 	bl	8003bf8 <motorSetpointPercentToTorque10>
 8003e6a:	eef0 7a40 	vmov.f32	s15, s0
 8003e6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e72:	ee17 3a90 	vmov	r3, s15
 8003e76:	b21a      	sxth	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	809a      	strh	r2, [r3, #4]
    torqueSetpoint->rearRight_Nm =  (int16_t) motorSetpointPercentToTorque10(getMotorTorqueRequest(MOTOR_RR));
 8003e7c:	2001      	movs	r0, #1
 8003e7e:	f7ff fedb 	bl	8003c38 <getMotorTorqueRequest>
 8003e82:	4603      	mov	r3, r0
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff feb7 	bl	8003bf8 <motorSetpointPercentToTorque10>
 8003e8a:	eef0 7a40 	vmov.f32	s15, s0
 8003e8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e92:	ee17 3a90 	vmov	r3, s15
 8003e96:	b21a      	sxth	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	80da      	strh	r2, [r3, #6]
}
 8003e9c:	bf00      	nop
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <daqPosePosition>:

void daqPosePosition(cmr_canCDCPosePosition_t *posePos) {
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
    volatile cmr_canSBGEKFPosition_t *sbgPos = canDAQGetPayload(CANRX_DAQ_SBG_POS);
 8003eac:	2001      	movs	r0, #1
 8003eae:	f7fd fa2b 	bl	8001308 <canDAQGetPayload>
 8003eb2:	60f8      	str	r0, [r7, #12]

    posePos->latitude_deg = ((float) sbgPos->latitude) / 10000000;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	ee07 3a90 	vmov	s15, r3
 8003ebc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ec0:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8003ef0 <daqPosePosition+0x4c>
 8003ec4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	edc3 7a00 	vstr	s15, [r3]
    posePos->longitude_deg = ((float) sbgPos->longitude) / 10000000;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eda:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8003ef0 <daqPosePosition+0x4c>
 8003ede:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8003ee8:	bf00      	nop
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	4b189680 	.word	0x4b189680

08003ef4 <daqPoseOrientationRadToDeg>:

float daqPoseOrientationRadToDeg(int16_t rad) {
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	80fb      	strh	r3, [r7, #6]
    // 360 / (2*pi) / 10^4
    static const float RAD104_TO_DEG = 0.005729577;

    return ((float) rad) * RAD104_TO_DEG;
 8003efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f02:	ee07 3a90 	vmov	s15, r3
 8003f06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f0a:	4b06      	ldr	r3, [pc, #24]	@ (8003f24 <daqPoseOrientationRadToDeg+0x30>)
 8003f0c:	edd3 7a00 	vldr	s15, [r3]
 8003f10:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8003f14:	eeb0 0a67 	vmov.f32	s0, s15
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	0802204c 	.word	0x0802204c

08003f28 <daqPoseOrientationRad>:

float daqPoseOrientationRad(int16_t rad) {
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	80fb      	strh	r3, [r7, #6]
    // 360 / (2*pi) / 10^4
    static const float RAD_TO_DEG = 57.29577;

    return ((float) rad) * RAD_TO_DEG;
 8003f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f36:	ee07 3a90 	vmov	s15, r3
 8003f3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f3e:	4b06      	ldr	r3, [pc, #24]	@ (8003f58 <daqPoseOrientationRad+0x30>)
 8003f40:	edd3 7a00 	vldr	s15, [r3]
 8003f44:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8003f48:	eeb0 0a67 	vmov.f32	s0, s15
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	08022050 	.word	0x08022050

08003f5c <daqPoseOrientation>:

void daqPoseOrientation(cmr_canCDCPoseOrientation_t *poseOrient) {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	@ 0x28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
    volatile cmr_canSBGEKFOrient_t *sbgOrient = canDAQGetPayload(CANRX_DAQ_SBG_ORIENT);
 8003f64:	2003      	movs	r0, #3
 8003f66:	f7fd f9cf 	bl	8001308 <canDAQGetPayload>
 8003f6a:	6278      	str	r0, [r7, #36]	@ 0x24

    poseOrient->roll_deg = (int16_t) (daqPoseOrientationRadToDeg(sbgOrient->roll) * 10);
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	b21b      	sxth	r3, r3
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff ffbe 	bl	8003ef4 <daqPoseOrientationRadToDeg>
 8003f78:	eef0 7a40 	vmov.f32	s15, s0
 8003f7c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003f80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f88:	ee17 3a90 	vmov	r3, s15
 8003f8c:	b21a      	sxth	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	801a      	strh	r2, [r3, #0]
    poseOrient->pitch_deg = (int16_t) (daqPoseOrientationRadToDeg(sbgOrient->pitch) * 10);
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	885b      	ldrh	r3, [r3, #2]
 8003f96:	b21b      	sxth	r3, r3
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff ffab 	bl	8003ef4 <daqPoseOrientationRadToDeg>
 8003f9e:	eef0 7a40 	vmov.f32	s15, s0
 8003fa2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003fa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003faa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fae:	ee17 3a90 	vmov	r3, s15
 8003fb2:	b21a      	sxth	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	805a      	strh	r2, [r3, #2]
    poseOrient->yaw_deg = (int16_t) (daqPoseOrientationRadToDeg(sbgOrient->yaw) * 10);
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fba:	889b      	ldrh	r3, [r3, #4]
 8003fbc:	b21b      	sxth	r3, r3
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff ff98 	bl	8003ef4 <daqPoseOrientationRadToDeg>
 8003fc4:	eef0 7a40 	vmov.f32	s15, s0
 8003fc8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fd4:	ee17 3a90 	vmov	r3, s15
 8003fd8:	b21a      	sxth	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	809a      	strh	r2, [r3, #4]

    volatile cmr_canSBGEKFVelocity_t *sbgVel = canDAQGetPayload(CANRX_DAQ_SBG_VEL);
 8003fde:	2002      	movs	r0, #2
 8003fe0:	f7fd f992 	bl	8001308 <canDAQGetPayload>
 8003fe4:	6238      	str	r0, [r7, #32]
    // Perform transformations on car's velocity by using complex numbers as
    // a stand-in for a 2D vector. In the NED (North-East-Down) coordinate
    // frame, real->north, imag->east. Then in the car reference frame,
    // forward->real, right->imag.
    float vel_n_ned = ((float) sbgVel->velocity_n) / 100;
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	b21b      	sxth	r3, r3
 8003fec:	ee07 3a90 	vmov	s15, r3
 8003ff0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ff4:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8004084 <daqPoseOrientation+0x128>
 8003ff8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ffc:	edc7 7a07 	vstr	s15, [r7, #28]
    float vel_e_ned = ((float) sbgVel->velocity_e) / 100;
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	885b      	ldrh	r3, [r3, #2]
 8004004:	b21b      	sxth	r3, r3
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800400e:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8004084 <daqPoseOrientation+0x128>
 8004012:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004016:	edc7 7a06 	vstr	s15, [r7, #24]
    float complex velocity_ned = vel_n_ned + vel_e_ned * I;
 800401a:	edd7 7a06 	vldr	s15, [r7, #24]
 800401e:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8004088 <daqPoseOrientation+0x12c>
 8004022:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004026:	ed97 7a07 	vldr	s14, [r7, #28]
 800402a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800402e:	ed87 7a04 	vstr	s14, [r7, #16]
 8004032:	edc7 7a05 	vstr	s15, [r7, #20]
    float slip_ang = cargf(velocity_ned);
 8004036:	ed97 7a04 	vldr	s14, [r7, #16]
 800403a:	edd7 7a05 	vldr	s15, [r7, #20]
 800403e:	eeb0 0a47 	vmov.f32	s0, s14
 8004042:	eef0 0a67 	vmov.f32	s1, s15
 8004046:	f01a faf5 	bl	801e634 <cargf>
 800404a:	ed87 0a03 	vstr	s0, [r7, #12]

    poseOrient->velocity_deg = (int16_t) (daqPoseOrientationRad(slip_ang) * 10);
 800404e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004052:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004056:	ee17 3a90 	vmov	r3, s15
 800405a:	b21b      	sxth	r3, r3
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff ff63 	bl	8003f28 <daqPoseOrientationRad>
 8004062:	eef0 7a40 	vmov.f32	s15, s0
 8004066:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800406a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800406e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004072:	ee17 3a90 	vmov	r3, s15
 8004076:	b21a      	sxth	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	80da      	strh	r2, [r3, #6]
}
 800407c:	bf00      	nop
 800407e:	3728      	adds	r7, #40	@ 0x28
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	42c80000 	.word	0x42c80000
 8004088:	00000000 	.word	0x00000000

0800408c <daqPoseVelocity>:

void daqPoseVelocity(cmr_canCDCPoseVelocity_t *poseVel) {
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
    volatile cmr_canSBGBodyVelocity_t *sbgBodyVel = canDAQGetPayload(CANRX_DAQ_SBG_BODY_VEL);
 8004094:	2006      	movs	r0, #6
 8004096:	f7fd f937 	bl	8001308 <canDAQGetPayload>
 800409a:	60f8      	str	r0, [r7, #12]

    poseVel->longitudinalVel_mps = sbgBodyVel->velocity_forward;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	b21a      	sxth	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	801a      	strh	r2, [r3, #0]
    poseVel->lateralVel_mps = sbgBodyVel->velocity_right;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	885b      	ldrh	r3, [r3, #2]
 80040aa:	b21a      	sxth	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	805a      	strh	r2, [r3, #2]
    poseVel->verticalVel_mps = sbgBodyVel->velocity_down;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	889b      	ldrh	r3, [r3, #4]
 80040b4:	b21a      	sxth	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	809a      	strh	r2, [r3, #4]
}
 80040ba:	bf00      	nop
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <getDRSInfo>:
/**
 * @brief Get a read-only pointer to the DRS state and debug values.
 * 
 * @return Const pointer to the current DRS state and debug values.
 */
const cmr_canCDCDRSStates_t *getDRSInfo() {
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
    return (const cmr_canCDCDRSStates_t*) &drs_state;
 80040c8:	4b02      	ldr	r3, [pc, #8]	@ (80040d4 <getDRSInfo+0x10>)
} 
 80040ca:	4618      	mov	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	24007a8c 	.word	0x24007a8c

080040d8 <runDrsControls>:
void runDrsControls(
    cmr_canGear_t gear,
    cmr_canDrsMode_t drsMode,
    uint8_t throttlePos_u8,
    uint8_t brakePressurePsi_u8, 
    int16_t swAngle_deg) {
 80040d8:	b590      	push	{r4, r7, lr}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4604      	mov	r4, r0
 80040e0:	4608      	mov	r0, r1
 80040e2:	4611      	mov	r1, r2
 80040e4:	461a      	mov	r2, r3
 80040e6:	4623      	mov	r3, r4
 80040e8:	71fb      	strb	r3, [r7, #7]
 80040ea:	4603      	mov	r3, r0
 80040ec:	71bb      	strb	r3, [r7, #6]
 80040ee:	460b      	mov	r3, r1
 80040f0:	717b      	strb	r3, [r7, #5]
 80040f2:	4613      	mov	r3, r2
 80040f4:	713b      	strb	r3, [r7, #4]

    bool drs_button_pressed = (((volatile cmr_canDIMActions_t *)canVehicleGetPayload(CANRX_VEH_DIM_ACTION_BUTTON))->buttons) & BUTTON_ACT;
 80040f6:	2005      	movs	r0, #5
 80040f8:	f7fd f8e2 	bl	80012c0 <canVehicleGetPayload>
 80040fc:	4603      	mov	r3, r0
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	bf14      	ite	ne
 800410a:	2301      	movne	r3, #1
 800410c:	2300      	moveq	r3, #0
 800410e:	73fb      	strb	r3, [r7, #15]

    static cmr_canDrsMode_t prevDrsMode = CMR_CAN_DRSM_UNKNOWN;
    if (drsMode != prevDrsMode) {
 8004110:	4b46      	ldr	r3, [pc, #280]	@ (800422c <runDrsControls+0x154>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	79ba      	ldrb	r2, [r7, #6]
 8004116:	429a      	cmp	r2, r3
 8004118:	d005      	beq.n	8004126 <runDrsControls+0x4e>
        drs_state.state = CMR_CAN_DRS_STATE_CLOSED;
 800411a:	4b45      	ldr	r3, [pc, #276]	@ (8004230 <runDrsControls+0x158>)
 800411c:	2200      	movs	r2, #0
 800411e:	701a      	strb	r2, [r3, #0]
        setDrsPosition(DRS_CLOSED_DUTY_CYCLE);
 8004120:	2000      	movs	r0, #0
 8004122:	f003 f9e1 	bl	80074e8 <setDrsPosition>
    }
    prevDrsMode = drsMode;
 8004126:	4a41      	ldr	r2, [pc, #260]	@ (800422c <runDrsControls+0x154>)
 8004128:	79bb      	ldrb	r3, [r7, #6]
 800412a:	7013      	strb	r3, [r2, #0]

    switch (drsMode) {
 800412c:	79bb      	ldrb	r3, [r7, #6]
 800412e:	2b05      	cmp	r3, #5
 8004130:	d86d      	bhi.n	800420e <runDrsControls+0x136>
 8004132:	a201      	add	r2, pc, #4	@ (adr r2, 8004138 <runDrsControls+0x60>)
 8004134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004138:	08004151 	.word	0x08004151
 800413c:	0800416b 	.word	0x0800416b
 8004140:	0800415d 	.word	0x0800415d
 8004144:	08004179 	.word	0x08004179
 8004148:	080041b1 	.word	0x080041b1
 800414c:	080041d3 	.word	0x080041d3
        case CMR_CAN_DRSM_QUIET:
            drs_state.state = CMR_CAN_DRS_STATE_CLOSED;
 8004150:	4b37      	ldr	r3, [pc, #220]	@ (8004230 <runDrsControls+0x158>)
 8004152:	2200      	movs	r2, #0
 8004154:	701a      	strb	r2, [r3, #0]
            setServoQuiet();
 8004156:	f003 f9b7 	bl	80074c8 <setServoQuiet>
            break;
 800415a:	e060      	b.n	800421e <runDrsControls+0x146>
        case CMR_CAN_DRSM_OPEN:
            drs_state.state = CMR_CAN_DRS_STATE_OPEN;
 800415c:	4b34      	ldr	r3, [pc, #208]	@ (8004230 <runDrsControls+0x158>)
 800415e:	2201      	movs	r2, #1
 8004160:	701a      	strb	r2, [r3, #0]
            setDrsPosition(DRS_OPEN_DUTY_CYCLE);
 8004162:	2008      	movs	r0, #8
 8004164:	f003 f9c0 	bl	80074e8 <setDrsPosition>
            break;
 8004168:	e059      	b.n	800421e <runDrsControls+0x146>

        case CMR_CAN_DRSM_CLOSED:
            drs_state.state = CMR_CAN_DRS_STATE_CLOSED;
 800416a:	4b31      	ldr	r3, [pc, #196]	@ (8004230 <runDrsControls+0x158>)
 800416c:	2200      	movs	r2, #0
 800416e:	701a      	strb	r2, [r3, #0]
            setDrsPosition(DRS_CLOSED_DUTY_CYCLE);
 8004170:	2000      	movs	r0, #0
 8004172:	f003 f9b9 	bl	80074e8 <setDrsPosition>
            break;
 8004176:	e052      	b.n	800421e <runDrsControls+0x146>

        case CMR_CAN_DRSM_TOGGLE:
            if (prev_button_pressed && 
 8004178:	4b2e      	ldr	r3, [pc, #184]	@ (8004234 <runDrsControls+0x15c>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d04d      	beq.n	800421c <runDrsControls+0x144>
                !drs_button_pressed) {
 8004180:	7bfb      	ldrb	r3, [r7, #15]
 8004182:	f083 0301 	eor.w	r3, r3, #1
 8004186:	b2db      	uxtb	r3, r3
            if (prev_button_pressed && 
 8004188:	2b00      	cmp	r3, #0
 800418a:	d047      	beq.n	800421c <runDrsControls+0x144>
                if (drs_state.state == CMR_CAN_DRS_STATE_CLOSED) {
 800418c:	4b28      	ldr	r3, [pc, #160]	@ (8004230 <runDrsControls+0x158>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d106      	bne.n	80041a2 <runDrsControls+0xca>
                    drs_state.state = CMR_CAN_DRS_STATE_OPEN;
 8004194:	4b26      	ldr	r3, [pc, #152]	@ (8004230 <runDrsControls+0x158>)
 8004196:	2201      	movs	r2, #1
 8004198:	701a      	strb	r2, [r3, #0]
                    setDrsPosition(DRS_OPEN_DUTY_CYCLE);
 800419a:	2008      	movs	r0, #8
 800419c:	f003 f9a4 	bl	80074e8 <setDrsPosition>
                } else {
                    drs_state.state = CMR_CAN_DRS_STATE_CLOSED;
                    setDrsPosition(DRS_CLOSED_DUTY_CYCLE);
                }
            }
            break;
 80041a0:	e03c      	b.n	800421c <runDrsControls+0x144>
                    drs_state.state = CMR_CAN_DRS_STATE_CLOSED;
 80041a2:	4b23      	ldr	r3, [pc, #140]	@ (8004230 <runDrsControls+0x158>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	701a      	strb	r2, [r3, #0]
                    setDrsPosition(DRS_CLOSED_DUTY_CYCLE);
 80041a8:	2000      	movs	r0, #0
 80041aa:	f003 f99d 	bl	80074e8 <setDrsPosition>
            break;
 80041ae:	e035      	b.n	800421c <runDrsControls+0x144>

        case CMR_CAN_DRSM_HOLD:
            if (drs_button_pressed) {
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d006      	beq.n	80041c4 <runDrsControls+0xec>
                drs_state.state = CMR_CAN_DRS_STATE_OPEN;
 80041b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004230 <runDrsControls+0x158>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	701a      	strb	r2, [r3, #0]
                setDrsPosition(DRS_OPEN_DUTY_CYCLE);
 80041bc:	2008      	movs	r0, #8
 80041be:	f003 f993 	bl	80074e8 <setDrsPosition>
            } else { 
                drs_state.state = CMR_CAN_DRS_STATE_CLOSED;
                setDrsPosition(DRS_CLOSED_DUTY_CYCLE);
            }
            break;
 80041c2:	e02c      	b.n	800421e <runDrsControls+0x146>
                drs_state.state = CMR_CAN_DRS_STATE_CLOSED;
 80041c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004230 <runDrsControls+0x158>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	701a      	strb	r2, [r3, #0]
                setDrsPosition(DRS_CLOSED_DUTY_CYCLE);
 80041ca:	2000      	movs	r0, #0
 80041cc:	f003 f98c 	bl	80074e8 <setDrsPosition>
            break;
 80041d0:	e025      	b.n	800421e <runDrsControls+0x146>

        case CMR_CAN_DRSM_AUTO:
            switch (gear) {
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d009      	beq.n	80041ec <runDrsControls+0x114>
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d10f      	bne.n	80041fc <runDrsControls+0x124>
                case CMR_CAN_GEAR_FAST:
                    setAutoDrs(throttlePos_u8,
 80041dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80041e0:	7939      	ldrb	r1, [r7, #4]
 80041e2:	797b      	ldrb	r3, [r7, #5]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 f827 	bl	8004238 <setAutoDrs>
                               brakePressurePsi_u8,
                               swAngle_deg);
                    break;
 80041ea:	e00f      	b.n	800420c <runDrsControls+0x134>
                case CMR_CAN_GEAR_SLOW:
                    setAutoDrs(throttlePos_u8,
 80041ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80041f0:	7939      	ldrb	r1, [r7, #4]
 80041f2:	797b      	ldrb	r3, [r7, #5]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 f81f 	bl	8004238 <setAutoDrs>
                               brakePressurePsi_u8,
                               swAngle_deg);
                    break;
 80041fa:	e007      	b.n	800420c <runDrsControls+0x134>
                default:
                    setAutoDrs(throttlePos_u8,
 80041fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004200:	7939      	ldrb	r1, [r7, #4]
 8004202:	797b      	ldrb	r3, [r7, #5]
 8004204:	4618      	mov	r0, r3
 8004206:	f000 f817 	bl	8004238 <setAutoDrs>
                               brakePressurePsi_u8,
                               swAngle_deg);
                    break;
 800420a:	bf00      	nop
            }
            break;
 800420c:	e007      	b.n	800421e <runDrsControls+0x146>
        default: 
            drs_state.state = CMR_CAN_DRS_STATE_CLOSED;
 800420e:	4b08      	ldr	r3, [pc, #32]	@ (8004230 <runDrsControls+0x158>)
 8004210:	2200      	movs	r2, #0
 8004212:	701a      	strb	r2, [r3, #0]
            setDrsPosition(DRS_CLOSED_DUTY_CYCLE);
 8004214:	2000      	movs	r0, #0
 8004216:	f003 f967 	bl	80074e8 <setDrsPosition>
            break;
 800421a:	e000      	b.n	800421e <runDrsControls+0x146>
            break;
 800421c:	bf00      	nop
    }

    prev_button_pressed = drs_button_pressed;
 800421e:	4a05      	ldr	r2, [pc, #20]	@ (8004234 <runDrsControls+0x15c>)
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	7013      	strb	r3, [r2, #0]

}
 8004224:	bf00      	nop
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	bd90      	pop	{r4, r7, pc}
 800422c:	240005b4 	.word	0x240005b4
 8004230:	24007a8c 	.word	0x24007a8c
 8004234:	24007a90 	.word	0x24007a90

08004238 <setAutoDrs>:

static void setAutoDrs(uint8_t throttle_pos,
                    uint8_t brake_psi, 
                    int16_t swAngle_deg) {
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	4603      	mov	r3, r0
 8004240:	71fb      	strb	r3, [r7, #7]
 8004242:	460b      	mov	r3, r1
 8004244:	71bb      	strb	r3, [r7, #6]
 8004246:	4613      	mov	r3, r2
 8004248:	80bb      	strh	r3, [r7, #4]

    uint8_t swangle_threshold = SWANGLE_THRESHOLD;
 800424a:	230a      	movs	r3, #10
 800424c:	72bb      	strb	r3, [r7, #10]
    uint8_t throttle_threshold = THROTTLE_THRESHOLD;
 800424e:	230a      	movs	r3, #10
 8004250:	727b      	strb	r3, [r7, #9]
    uint8_t brake_threshold = BRAKE_THRESHOLD; 
 8004252:	2323      	movs	r3, #35	@ 0x23
 8004254:	73fb      	strb	r3, [r7, #15]
    getProcessedValue(&swangle_threshold, DRS_SWANGLE_THRESH_INDEX, unsigned_integer);
 8004256:	f107 030a 	add.w	r3, r7, #10
 800425a:	2204      	movs	r2, #4
 800425c:	210e      	movs	r1, #14
 800425e:	4618      	mov	r0, r3
 8004260:	f008 fa96 	bl	800c790 <getProcessedValue>
    getProcessedValue(&throttle_threshold, DRS_THROTTLE_THRESH_INDEX, unsigned_integer);
 8004264:	f107 0309 	add.w	r3, r7, #9
 8004268:	2204      	movs	r2, #4
 800426a:	210d      	movs	r1, #13
 800426c:	4618      	mov	r0, r3
 800426e:	f008 fa8f 	bl	800c790 <getProcessedValue>
    //getProcessedValue(&brake_threshold, DRS_BRAKE_THRESH_INDEX, unsigned_integer);
    uint8_t swangle = (uint8_t) abs(swAngle_deg);
 8004272:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	bfb8      	it	lt
 800427a:	425b      	neglt	r3, r3
 800427c:	b29b      	uxth	r3, r3
 800427e:	73bb      	strb	r3, [r7, #14]

    bool swangle_high = (swangle > swangle_threshold + SWANGLE_MARGIN) ||
 8004280:	7bba      	ldrb	r2, [r7, #14]
 8004282:	7abb      	ldrb	r3, [r7, #10]
 8004284:	3305      	adds	r3, #5
 8004286:	429a      	cmp	r2, r3
 8004288:	dc08      	bgt.n	800429c <setAutoDrs+0x64>
                        (prev_swangle_high && swangle > swangle_threshold - SWANGLE_MARGIN);
 800428a:	4b2b      	ldr	r3, [pc, #172]	@ (8004338 <setAutoDrs+0x100>)
 800428c:	781b      	ldrb	r3, [r3, #0]
    bool swangle_high = (swangle > swangle_threshold + SWANGLE_MARGIN) ||
 800428e:	2b00      	cmp	r3, #0
 8004290:	d006      	beq.n	80042a0 <setAutoDrs+0x68>
                        (prev_swangle_high && swangle > swangle_threshold - SWANGLE_MARGIN);
 8004292:	7abb      	ldrb	r3, [r7, #10]
 8004294:	1f1a      	subs	r2, r3, #4
 8004296:	7bbb      	ldrb	r3, [r7, #14]
 8004298:	429a      	cmp	r2, r3
 800429a:	dc01      	bgt.n	80042a0 <setAutoDrs+0x68>
    bool swangle_high = (swangle > swangle_threshold + SWANGLE_MARGIN) ||
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <setAutoDrs+0x6a>
 80042a0:	2300      	movs	r3, #0
 80042a2:	737b      	strb	r3, [r7, #13]
 80042a4:	7b7b      	ldrb	r3, [r7, #13]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	737b      	strb	r3, [r7, #13]
    bool throttle_high = (throttle_pos > throttle_threshold + THROTTLE_MARGIN) ||
 80042ac:	79fa      	ldrb	r2, [r7, #7]
 80042ae:	7a7b      	ldrb	r3, [r7, #9]
 80042b0:	3305      	adds	r3, #5
 80042b2:	429a      	cmp	r2, r3
 80042b4:	dc08      	bgt.n	80042c8 <setAutoDrs+0x90>
                         (prev_throttle_high && throttle_pos > throttle_threshold - THROTTLE_MARGIN);
 80042b6:	4b21      	ldr	r3, [pc, #132]	@ (800433c <setAutoDrs+0x104>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
    bool throttle_high = (throttle_pos > throttle_threshold + THROTTLE_MARGIN) ||
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d006      	beq.n	80042cc <setAutoDrs+0x94>
                         (prev_throttle_high && throttle_pos > throttle_threshold - THROTTLE_MARGIN);
 80042be:	7a7b      	ldrb	r3, [r7, #9]
 80042c0:	1f1a      	subs	r2, r3, #4
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	dc01      	bgt.n	80042cc <setAutoDrs+0x94>
    bool throttle_high = (throttle_pos > throttle_threshold + THROTTLE_MARGIN) ||
 80042c8:	2301      	movs	r3, #1
 80042ca:	e000      	b.n	80042ce <setAutoDrs+0x96>
 80042cc:	2300      	movs	r3, #0
 80042ce:	733b      	strb	r3, [r7, #12]
 80042d0:	7b3b      	ldrb	r3, [r7, #12]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	733b      	strb	r3, [r7, #12]
    bool brake_high = false;
 80042d8:	2300      	movs	r3, #0
 80042da:	72fb      	strb	r3, [r7, #11]
    
    if (swangle_high) {
 80042dc:	7b7b      	ldrb	r3, [r7, #13]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d006      	beq.n	80042f0 <setAutoDrs+0xb8>
        drs_state.state = CMR_CAN_DRS_STATE_CLOSED;
 80042e2:	4b17      	ldr	r3, [pc, #92]	@ (8004340 <setAutoDrs+0x108>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	701a      	strb	r2, [r3, #0]
        setDrsPosition(DRS_CLOSED_DUTY_CYCLE);
 80042e8:	2000      	movs	r0, #0
 80042ea:	f003 f8fd 	bl	80074e8 <setDrsPosition>
 80042ee:	e015      	b.n	800431c <setAutoDrs+0xe4>
    } else {
        if (!throttle_high || brake_high) {
 80042f0:	7b3b      	ldrb	r3, [r7, #12]
 80042f2:	f083 0301 	eor.w	r3, r3, #1
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d102      	bne.n	8004302 <setAutoDrs+0xca>
 80042fc:	7afb      	ldrb	r3, [r7, #11]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d006      	beq.n	8004310 <setAutoDrs+0xd8>
            drs_state.state = CMR_CAN_DRS_STATE_CLOSED;
 8004302:	4b0f      	ldr	r3, [pc, #60]	@ (8004340 <setAutoDrs+0x108>)
 8004304:	2200      	movs	r2, #0
 8004306:	701a      	strb	r2, [r3, #0]
            setDrsPosition(DRS_CLOSED_DUTY_CYCLE);
 8004308:	2000      	movs	r0, #0
 800430a:	f003 f8ed 	bl	80074e8 <setDrsPosition>
 800430e:	e005      	b.n	800431c <setAutoDrs+0xe4>
        } else {
            drs_state.state = CMR_CAN_DRS_STATE_OPEN;
 8004310:	4b0b      	ldr	r3, [pc, #44]	@ (8004340 <setAutoDrs+0x108>)
 8004312:	2201      	movs	r2, #1
 8004314:	701a      	strb	r2, [r3, #0]
            setDrsPosition(DRS_OPEN_DUTY_CYCLE);
 8004316:	2008      	movs	r0, #8
 8004318:	f003 f8e6 	bl	80074e8 <setDrsPosition>
        }
    }

    prev_swangle_high = swangle_high;
 800431c:	4a06      	ldr	r2, [pc, #24]	@ (8004338 <setAutoDrs+0x100>)
 800431e:	7b7b      	ldrb	r3, [r7, #13]
 8004320:	7013      	strb	r3, [r2, #0]
    prev_throttle_high = throttle_high;
 8004322:	4a06      	ldr	r2, [pc, #24]	@ (800433c <setAutoDrs+0x104>)
 8004324:	7b3b      	ldrb	r3, [r7, #12]
 8004326:	7013      	strb	r3, [r2, #0]
    prev_brake_high = brake_high;
 8004328:	4a06      	ldr	r2, [pc, #24]	@ (8004344 <setAutoDrs+0x10c>)
 800432a:	7afb      	ldrb	r3, [r7, #11]
 800432c:	7013      	strb	r3, [r2, #0]
}
 800432e:	bf00      	nop
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	24007a88 	.word	0x24007a88
 800433c:	24007a89 	.word	0x24007a89
 8004340:	24007a8c 	.word	0x24007a8c
 8004344:	24007a8a 	.word	0x24007a8a

08004348 <fansOn>:
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */

void fansOn() {
 8004348:	b580      	push	{r7, lr}
 800434a:	b08c      	sub	sp, #48	@ 0x30
 800434c:	af00      	add	r7, sp, #0
    // if accumtemp < 56 remain at low speed
    // if accumtemp > 58 remain at high speed
    // linear in between

    // Get motor temperatures for each inverter.
    cmr_canAMKActualValues2_t *inv1_temps = (cmr_canAMKActualValues2_t *) canGetPayload(CANRX_INV1_STATUS);
 800434e:	2005      	movs	r0, #5
 8004350:	f7fc fcda 	bl	8000d08 <canGetPayload>
 8004354:	62f8      	str	r0, [r7, #44]	@ 0x2c
    int16_t inv1MotorTemp_dC = inv1_temps->motorTemp_dC;
 8004356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    cmr_canAMKActualValues2_t *inv2_temps = (cmr_canAMKActualValues2_t *) canGetPayload(CANRX_INV2_STATUS);
 800435c:	2006      	movs	r0, #6
 800435e:	f7fc fcd3 	bl	8000d08 <canGetPayload>
 8004362:	6278      	str	r0, [r7, #36]	@ 0x24
    int16_t inv2MotorTemp_dC = inv2_temps->motorTemp_dC;
 8004364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004366:	881b      	ldrh	r3, [r3, #0]
 8004368:	847b      	strh	r3, [r7, #34]	@ 0x22
    cmr_canAMKActualValues2_t *inv3_temps = (cmr_canAMKActualValues2_t *) canGetPayload(CANRX_INV3_STATUS);
 800436a:	2007      	movs	r0, #7
 800436c:	f7fc fccc 	bl	8000d08 <canGetPayload>
 8004370:	61f8      	str	r0, [r7, #28]
    int16_t inv3MotorTemp_dC = inv3_temps->motorTemp_dC;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	837b      	strh	r3, [r7, #26]
    cmr_canAMKActualValues2_t *inv4_temps = (cmr_canAMKActualValues2_t *) canGetPayload(CANRX_INV4_STATUS);
 8004378:	2008      	movs	r0, #8
 800437a:	f7fc fcc5 	bl	8000d08 <canGetPayload>
 800437e:	6178      	str	r0, [r7, #20]
    int16_t inv4MotorTemp_dC = inv4_temps->motorTemp_dC;\
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	827b      	strh	r3, [r7, #18]

    int16_t motor_temp_avg = (inv1MotorTemp_dC + inv2MotorTemp_dC + inv3MotorTemp_dC + inv4MotorTemp_dC) / 4;
 8004386:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 800438a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800438e:	441a      	add	r2, r3
 8004390:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004394:	441a      	add	r2, r3
 8004396:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800439a:	4413      	add	r3, r2
 800439c:	2b00      	cmp	r3, #0
 800439e:	da00      	bge.n	80043a2 <fansOn+0x5a>
 80043a0:	3303      	adds	r3, #3
 80043a2:	109b      	asrs	r3, r3, #2
 80043a4:	823b      	strh	r3, [r7, #16]

    if (motor_temp_avg < FAN_MOTOR_TEMP_LOW_dC)
 80043a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80043aa:	f240 2211 	movw	r2, #529	@ 0x211
 80043ae:	4293      	cmp	r3, r2
 80043b0:	dc03      	bgt.n	80043ba <fansOn+0x72>
        fan_1_State = FAN_MOTOR_STATE_LOW;
 80043b2:	4b4a      	ldr	r3, [pc, #296]	@ (80044dc <fansOn+0x194>)
 80043b4:	221e      	movs	r2, #30
 80043b6:	801a      	strh	r2, [r3, #0]
 80043b8:	e01a      	b.n	80043f0 <fansOn+0xa8>
    else if (motor_temp_avg > FAN_MOTOR_TEMP_HIGH_dC)
 80043ba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80043be:	f5b3 7f11 	cmp.w	r3, #580	@ 0x244
 80043c2:	dd03      	ble.n	80043cc <fansOn+0x84>
        fan_1_State = FAN_MOTOR_STATE_HIGH;
 80043c4:	4b45      	ldr	r3, [pc, #276]	@ (80044dc <fansOn+0x194>)
 80043c6:	2264      	movs	r2, #100	@ 0x64
 80043c8:	801a      	strh	r2, [r3, #0]
 80043ca:	e011      	b.n	80043f0 <fansOn+0xa8>
    else {
        fan_1_State = (FAN_MOTOR_STATE_HIGH - FAN_MOTOR_STATE_LOW) * (motor_temp_avg - FAN_MOTOR_TEMP_LOW_dC) / (FAN_MOTOR_TEMP_HIGH_dC - FAN_MOTOR_TEMP_LOW_dC) + FAN_MOTOR_STATE_LOW;
 80043cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80043d0:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 80043d4:	2246      	movs	r2, #70	@ 0x46
 80043d6:	fb02 f303 	mul.w	r3, r2, r3
 80043da:	4a41      	ldr	r2, [pc, #260]	@ (80044e0 <fansOn+0x198>)
 80043dc:	fb82 1203 	smull	r1, r2, r2, r3
 80043e0:	1112      	asrs	r2, r2, #4
 80043e2:	17db      	asrs	r3, r3, #31
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	331e      	adds	r3, #30
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	4b3b      	ldr	r3, [pc, #236]	@ (80044dc <fansOn+0x194>)
 80043ee:	801a      	strh	r2, [r3, #0]
    }
    fan_1_State = (fan_1_State > 100) ? 100 : fan_1_State;
 80043f0:	4b3a      	ldr	r3, [pc, #232]	@ (80044dc <fansOn+0x194>)
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	2b64      	cmp	r3, #100	@ 0x64
 80043f6:	bf28      	it	cs
 80043f8:	2364      	movcs	r3, #100	@ 0x64
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	4b37      	ldr	r3, [pc, #220]	@ (80044dc <fansOn+0x194>)
 80043fe:	801a      	strh	r2, [r3, #0]

    // Get igbt temperatures for each inverter.
    int16_t inv1IgbtTemp_dC = inv1_temps->igbtTemp_dC;
 8004400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004402:	88db      	ldrh	r3, [r3, #6]
 8004404:	81fb      	strh	r3, [r7, #14]
    int16_t inv2IgbtTemp_dC = inv2_temps->igbtTemp_dC;
 8004406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004408:	88db      	ldrh	r3, [r3, #6]
 800440a:	81bb      	strh	r3, [r7, #12]
    int16_t inv3IgbtTemp_dC = inv3_temps->igbtTemp_dC;
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	88db      	ldrh	r3, [r3, #6]
 8004410:	817b      	strh	r3, [r7, #10]
    int16_t inv4IgbtTemp_dC = inv4_temps->igbtTemp_dC;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	88db      	ldrh	r3, [r3, #6]
 8004416:	813b      	strh	r3, [r7, #8]

    // Use average igbt temperature
    int16_t inverter_temp = (inv1IgbtTemp_dC + inv2IgbtTemp_dC + inv3IgbtTemp_dC + inv4IgbtTemp_dC) / 4;
 8004418:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800441c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004420:	441a      	add	r2, r3
 8004422:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004426:	441a      	add	r2, r3
 8004428:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800442c:	4413      	add	r3, r2
 800442e:	2b00      	cmp	r3, #0
 8004430:	da00      	bge.n	8004434 <fansOn+0xec>
 8004432:	3303      	adds	r3, #3
 8004434:	109b      	asrs	r3, r3, #2
 8004436:	80fb      	strh	r3, [r7, #6]
    // if inverter_temp < 56 remain at low speed
    // if inverter_temp > 58 remain at high speed
    // linear in between                

    if (inverter_temp < FAN_INVERTER_TEMP_LOW_dC) 
 8004438:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800443c:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 8004440:	da03      	bge.n	800444a <fansOn+0x102>
        fan_2_State = FAN_INVERTER_STATE_LOW;
 8004442:	4b28      	ldr	r3, [pc, #160]	@ (80044e4 <fansOn+0x19c>)
 8004444:	221e      	movs	r2, #30
 8004446:	801a      	strh	r2, [r3, #0]
 8004448:	e01a      	b.n	8004480 <fansOn+0x138>
    else if (inverter_temp > FAN_INVERTER_TEMP_HIGH_dC)
 800444a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800444e:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8004452:	dd03      	ble.n	800445c <fansOn+0x114>
        fan_2_State = FAN_INVERTER_STATE_HIGH;
 8004454:	4b23      	ldr	r3, [pc, #140]	@ (80044e4 <fansOn+0x19c>)
 8004456:	2264      	movs	r2, #100	@ 0x64
 8004458:	801a      	strh	r2, [r3, #0]
 800445a:	e011      	b.n	8004480 <fansOn+0x138>
    else {
        fan_2_State = (FAN_INVERTER_STATE_HIGH - FAN_INVERTER_STATE_LOW) * (inverter_temp - FAN_INVERTER_TEMP_LOW_dC) / (FAN_INVERTER_TEMP_HIGH_dC - FAN_INVERTER_TEMP_LOW_dC) + FAN_INVERTER_STATE_LOW;
 800445c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004460:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004464:	2246      	movs	r2, #70	@ 0x46
 8004466:	fb02 f303 	mul.w	r3, r2, r3
 800446a:	4a1f      	ldr	r2, [pc, #124]	@ (80044e8 <fansOn+0x1a0>)
 800446c:	fb82 1203 	smull	r1, r2, r2, r3
 8004470:	1112      	asrs	r2, r2, #4
 8004472:	17db      	asrs	r3, r3, #31
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	b29b      	uxth	r3, r3
 8004478:	331e      	adds	r3, #30
 800447a:	b29a      	uxth	r2, r3
 800447c:	4b19      	ldr	r3, [pc, #100]	@ (80044e4 <fansOn+0x19c>)
 800447e:	801a      	strh	r2, [r3, #0]
    }
    fan_2_State = (fan_2_State > 100) ? 100 : fan_2_State;
 8004480:	4b18      	ldr	r3, [pc, #96]	@ (80044e4 <fansOn+0x19c>)
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	2b64      	cmp	r3, #100	@ 0x64
 8004486:	bf28      	it	cs
 8004488:	2364      	movcs	r3, #100	@ 0x64
 800448a:	b29a      	uxth	r2, r3
 800448c:	4b15      	ldr	r3, [pc, #84]	@ (80044e4 <fansOn+0x19c>)
 800448e:	801a      	strh	r2, [r3, #0]

    // duty cycle is inverted because of MOSFETS
    cmr_pwmSetDutyCycle(&fan_1_PWM, (uint32_t) 100-fan_1_State);
 8004490:	4b12      	ldr	r3, [pc, #72]	@ (80044dc <fansOn+0x194>)
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8004498:	4619      	mov	r1, r3
 800449a:	4814      	ldr	r0, [pc, #80]	@ (80044ec <fansOn+0x1a4>)
 800449c:	f009 ff54 	bl	800e348 <cmr_pwmSetDutyCycle>
    cmr_pwmSetDutyCycle(&fan_2_PWM, (uint32_t) 100-fan_2_State);
 80044a0:	4b10      	ldr	r3, [pc, #64]	@ (80044e4 <fansOn+0x19c>)
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80044a8:	4619      	mov	r1, r3
 80044aa:	4811      	ldr	r0, [pc, #68]	@ (80044f0 <fansOn+0x1a8>)
 80044ac:	f009 ff4c 	bl	800e348 <cmr_pwmSetDutyCycle>
    
    if (fan_1_State >= 50 || fan_2_State >= 50) {
 80044b0:	4b0a      	ldr	r3, [pc, #40]	@ (80044dc <fansOn+0x194>)
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	2b31      	cmp	r3, #49	@ 0x31
 80044b6:	d803      	bhi.n	80044c0 <fansOn+0x178>
 80044b8:	4b0a      	ldr	r3, [pc, #40]	@ (80044e4 <fansOn+0x19c>)
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	2b31      	cmp	r3, #49	@ 0x31
 80044be:	d904      	bls.n	80044ca <fansOn+0x182>
        cmr_gpioWrite(GPIO_FAN_ON, 1);
 80044c0:	2101      	movs	r1, #1
 80044c2:	2003      	movs	r0, #3
 80044c4:	f008 fbd6 	bl	800cc74 <cmr_gpioWrite>
 80044c8:	e004      	b.n	80044d4 <fansOn+0x18c>
    } else {
        cmr_gpioWrite(GPIO_FAN_ON, 0);
 80044ca:	2100      	movs	r1, #0
 80044cc:	2003      	movs	r0, #3
 80044ce:	f008 fbd1 	bl	800cc74 <cmr_gpioWrite>
    }
}
 80044d2:	bf00      	nop
 80044d4:	bf00      	nop
 80044d6:	3730      	adds	r7, #48	@ 0x30
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	24001a18 	.word	0x24001a18
 80044e0:	51eb851f 	.word	0x51eb851f
 80044e4:	24001a1a 	.word	0x24001a1a
 80044e8:	66666667 	.word	0x66666667
 80044ec:	24007a94 	.word	0x24007a94
 80044f0:	24007ae4 	.word	0x24007ae4

080044f4 <fansOff>:

void fansOff() {
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
    fan_1_State = 0;
 80044f8:	4b09      	ldr	r3, [pc, #36]	@ (8004520 <fansOff+0x2c>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	801a      	strh	r2, [r3, #0]
    fan_2_State = 0;
 80044fe:	4b09      	ldr	r3, [pc, #36]	@ (8004524 <fansOff+0x30>)
 8004500:	2200      	movs	r2, #0
 8004502:	801a      	strh	r2, [r3, #0]
    // duty cycle is inverted because of MOSFETS
    // should be off until RTD
    cmr_pwmSetDutyCycle(&fan_1_PWM, 100-0);
 8004504:	2164      	movs	r1, #100	@ 0x64
 8004506:	4808      	ldr	r0, [pc, #32]	@ (8004528 <fansOff+0x34>)
 8004508:	f009 ff1e 	bl	800e348 <cmr_pwmSetDutyCycle>
    cmr_pwmSetDutyCycle(&fan_2_PWM, 100-0);
 800450c:	2164      	movs	r1, #100	@ 0x64
 800450e:	4807      	ldr	r0, [pc, #28]	@ (800452c <fansOff+0x38>)
 8004510:	f009 ff1a 	bl	800e348 <cmr_pwmSetDutyCycle>
    cmr_gpioWrite(GPIO_FAN_ON, 0);
 8004514:	2100      	movs	r1, #0
 8004516:	2003      	movs	r0, #3
 8004518:	f008 fbac 	bl	800cc74 <cmr_gpioWrite>
}
 800451c:	bf00      	nop
 800451e:	bd80      	pop	{r7, pc}
 8004520:	24001a18 	.word	0x24001a18
 8004524:	24001a1a 	.word	0x24001a1a
 8004528:	24007a94 	.word	0x24007a94
 800452c:	24007ae4 	.word	0x24007ae4

08004530 <gpioInit>:
};

/**
 * @brief Initializes the GPIO interface.
 */
void gpioInit(void) {
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
    cmr_gpioPinInit(
 8004534:	2108      	movs	r1, #8
 8004536:	4802      	ldr	r0, [pc, #8]	@ (8004540 <gpioInit+0x10>)
 8004538:	f008 fb66 	bl	800cc08 <cmr_gpioPinInit>
        gpioPinConfigs, sizeof(gpioPinConfigs) / sizeof(gpioPinConfigs[0])
    );
}
 800453c:	bf00      	nop
 800453e:	bd80      	pop	{r7, pc}
 8004540:	08022054 	.word	0x08022054

08004544 <i2cInit>:
/**********
 * COMMON *
 **********/

/** @brief Initializes I2C stuff for the CDC */
void i2cInit() {
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af04      	add	r7, sp, #16
    cmr_i2cInit(
 800454a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800454e:	9303      	str	r3, [sp, #12]
 8004550:	4b0c      	ldr	r3, [pc, #48]	@ (8004584 <i2cInit+0x40>)
 8004552:	9302      	str	r3, [sp, #8]
 8004554:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004558:	9301      	str	r3, [sp, #4]
 800455a:	4b0a      	ldr	r3, [pc, #40]	@ (8004584 <i2cInit+0x40>)
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	2300      	movs	r3, #0
 8004560:	2200      	movs	r2, #0
 8004562:	4909      	ldr	r1, [pc, #36]	@ (8004588 <i2cInit+0x44>)
 8004564:	4809      	ldr	r0, [pc, #36]	@ (800458c <i2cInit+0x48>)
 8004566:	f009 fce3 	bl	800df30 <cmr_i2cInit>
        0, 0, /* Clock Speed and own address */
        GPIOF, GPIO_PIN_14,         /* Clock Port/Pin */
        GPIOF, GPIO_PIN_15          /* Data Port/Pin */
    );

    cmr_taskInit(
 800456a:	2300      	movs	r3, #0
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	4b08      	ldr	r3, [pc, #32]	@ (8004590 <i2cInit+0x4c>)
 8004570:	2201      	movs	r2, #1
 8004572:	4908      	ldr	r1, [pc, #32]	@ (8004594 <i2cInit+0x50>)
 8004574:	4808      	ldr	r0, [pc, #32]	@ (8004598 <i2cInit+0x54>)
 8004576:	f00a fb19 	bl	800ebac <cmr_taskInit>
        1, /* TODO: magic number */
		framUpdate,
        NULL
    );

    framInit();
 800457a:	f000 f907 	bl	800478c <framInit>
}
 800457e:	bf00      	nop
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	58021400 	.word	0x58021400
 8004588:	58001c00 	.word	0x58001c00
 800458c:	24007b34 	.word	0x24007b34
 8004590:	080048f5 	.word	0x080048f5
 8004594:	0801facc 	.word	0x0801facc
 8004598:	24007cd8 	.word	0x24007cd8

0800459c <framRead>:
/** @brief Read data from FRAM
 *  @param variable The enum corresponding to the variable name
 *  @param data Pointer to where data should be written to (same size as dataLength)
 */
int framRead(framVariable_t variable, uint8_t *data)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08a      	sub	sp, #40	@ 0x28
 80045a0:	af04      	add	r7, sp, #16
 80045a2:	4603      	mov	r3, r0
 80045a4:	6039      	str	r1, [r7, #0]
 80045a6:	71fb      	strb	r3, [r7, #7]
    if (variable >= num_values_driver_enum + 1 || data == NULL)
 80045a8:	79fb      	ldrb	r3, [r7, #7]
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d802      	bhi.n	80045b4 <framRead+0x18>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d102      	bne.n	80045ba <framRead+0x1e>
    {
        return -1;
 80045b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045b8:	e023      	b.n	8004602 <framRead+0x66>
    }

    uint16_t startAddress = framVarsConfig[variable].startAddress;
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	4a13      	ldr	r2, [pc, #76]	@ (800460c <framRead+0x70>)
 80045be:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80045c2:	82fb      	strh	r3, [r7, #22]
    size_t dataLength = framVarsConfig[variable].dataLength;
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	4a11      	ldr	r2, [pc, #68]	@ (800460c <framRead+0x70>)
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	885b      	ldrh	r3, [r3, #2]
 80045ce:	613b      	str	r3, [r7, #16]
    int ret = 0;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]

    taskENTER_CRITICAL();
 80045d4:	f00c fd3e 	bl	8011054 <vPortEnterCritical>
    ret |= cmr_i2cMemRX(&i2c, framAddress, startAddress, 2, data, dataLength, HAL_MAX_DELAY);
 80045d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004610 <framRead+0x74>)
 80045da:	8819      	ldrh	r1, [r3, #0]
 80045dc:	8afa      	ldrh	r2, [r7, #22]
 80045de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045e2:	9302      	str	r3, [sp, #8]
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	9301      	str	r3, [sp, #4]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	2302      	movs	r3, #2
 80045ee:	4809      	ldr	r0, [pc, #36]	@ (8004614 <framRead+0x78>)
 80045f0:	f009 fc71 	bl	800ded6 <cmr_i2cMemRX>
 80045f4:	4602      	mov	r2, r0
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]
    taskEXIT_CRITICAL();
 80045fc:	f00c fd54 	bl	80110a8 <vPortExitCritical>

    return ret;
 8004600:	68fb      	ldr	r3, [r7, #12]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	24008d44 	.word	0x24008d44
 8004610:	240005b6 	.word	0x240005b6
 8004614:	24007b34 	.word	0x24007b34

08004618 <framWrite>:

/** @brief Write data to FRAM */
int framWrite(framVariable_t variable, uint8_t *data)
{
 8004618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800461c:	b091      	sub	sp, #68	@ 0x44
 800461e:	af02      	add	r7, sp, #8
 8004620:	4603      	mov	r3, r0
 8004622:	6039      	str	r1, [r7, #0]
 8004624:	71fb      	strb	r3, [r7, #7]
    if (variable >= num_values_driver_enum + 1)
 8004626:	79fb      	ldrb	r3, [r7, #7]
 8004628:	2b04      	cmp	r3, #4
 800462a:	d902      	bls.n	8004632 <framWrite+0x1a>
    {
        return -1;
 800462c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004630:	e0a1      	b.n	8004776 <framWrite+0x15e>
    }

    int retv_total = 0;
 8004632:	2300      	movs	r3, #0
 8004634:	637b      	str	r3, [r7, #52]	@ 0x34

    if (variable == FRAM_ODOMETER_CONFIG_ADDRESS) {
 8004636:	79fb      	ldrb	r3, [r7, #7]
 8004638:	2b04      	cmp	r3, #4
 800463a:	d138      	bne.n	80046ae <framWrite+0x96>
        for (int i = 0; i < framVarsConfig[variable].dataLength; i++) {
 800463c:	2300      	movs	r3, #0
 800463e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004640:	e02a      	b.n	8004698 <framWrite+0x80>
            uint16_t address = framVarsConfig[variable].startAddress + i;
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	4a4e      	ldr	r2, [pc, #312]	@ (8004780 <framWrite+0x168>)
 8004646:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 800464a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464c:	b29b      	uxth	r3, r3
 800464e:	4413      	add	r3, r2
 8004650:	82fb      	strh	r3, [r7, #22]
            uint8_t command[3] = {
 8004652:	8afb      	ldrh	r3, [r7, #22]
 8004654:	0a1b      	lsrs	r3, r3, #8
 8004656:	b29b      	uxth	r3, r3
 8004658:	b2db      	uxtb	r3, r3
 800465a:	733b      	strb	r3, [r7, #12]
 800465c:	8afb      	ldrh	r3, [r7, #22]
 800465e:	b2db      	uxtb	r3, r3
 8004660:	737b      	strb	r3, [r7, #13]
                // First send upper 8 bits of address
                (address >> 8) & 0xFF,
                // Then send lower 8 bits of address
                address & 0xFF,
                // Followed by data
                data[i]
 8004662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	4413      	add	r3, r2
 8004668:	781b      	ldrb	r3, [r3, #0]
            uint8_t command[3] = {
 800466a:	73bb      	strb	r3, [r7, #14]
            };
            taskENTER_CRITICAL();
 800466c:	f00c fcf2 	bl	8011054 <vPortEnterCritical>
            int ret = cmr_i2cTX(&i2c, framAddress, command,
 8004670:	4b44      	ldr	r3, [pc, #272]	@ (8004784 <framWrite+0x16c>)
 8004672:	8819      	ldrh	r1, [r3, #0]
 8004674:	f107 020c 	add.w	r2, r7, #12
 8004678:	2301      	movs	r3, #1
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	2303      	movs	r3, #3
 800467e:	4842      	ldr	r0, [pc, #264]	@ (8004788 <framWrite+0x170>)
 8004680:	f009 fc09 	bl	800de96 <cmr_i2cTX>
 8004684:	6138      	str	r0, [r7, #16]
                                3, 1);
            taskEXIT_CRITICAL();
 8004686:	f00c fd0f 	bl	80110a8 <vPortExitCritical>
            retv_total |= ret;
 800468a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	637b      	str	r3, [r7, #52]	@ 0x34
        for (int i = 0; i < framVarsConfig[variable].dataLength; i++) {
 8004692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004694:	3301      	adds	r3, #1
 8004696:	633b      	str	r3, [r7, #48]	@ 0x30
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	4a39      	ldr	r2, [pc, #228]	@ (8004780 <framWrite+0x168>)
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	885b      	ldrh	r3, [r3, #2]
 80046a2:	461a      	mov	r2, r3
 80046a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a6:	4293      	cmp	r3, r2
 80046a8:	dbcb      	blt.n	8004642 <framWrite+0x2a>
        }
        return retv_total;
 80046aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ac:	e063      	b.n	8004776 <framWrite+0x15e>
    }


    for (int i = 0; i < 17; i++){
 80046ae:	2300      	movs	r3, #0
 80046b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046b2:	e05c      	b.n	800476e <framWrite+0x156>
 80046b4:	466b      	mov	r3, sp
 80046b6:	461e      	mov	r6, r3
        // Add 2 to data length for starting address
        const size_t commandLength = framVarsConfig[variable].dataLength + 2;
 80046b8:	79fb      	ldrb	r3, [r7, #7]
 80046ba:	4a31      	ldr	r2, [pc, #196]	@ (8004780 <framWrite+0x168>)
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	885b      	ldrh	r3, [r3, #2]
 80046c2:	3302      	adds	r3, #2
 80046c4:	62bb      	str	r3, [r7, #40]	@ 0x28
        uint8_t command[commandLength];
 80046c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c8:	3b01      	subs	r3, #1
 80046ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80046cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ce:	2200      	movs	r2, #0
 80046d0:	461c      	mov	r4, r3
 80046d2:	4615      	mov	r5, r2
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	00eb      	lsls	r3, r5, #3
 80046de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046e2:	00e2      	lsls	r2, r4, #3
 80046e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e6:	2200      	movs	r2, #0
 80046e8:	4698      	mov	r8, r3
 80046ea:	4691      	mov	r9, r2
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004702:	3307      	adds	r3, #7
 8004704:	08db      	lsrs	r3, r3, #3
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	ebad 0d03 	sub.w	sp, sp, r3
 800470c:	ab02      	add	r3, sp, #8
 800470e:	3300      	adds	r3, #0
 8004710:	623b      	str	r3, [r7, #32]

        uint16_t address = framVarsConfig[variable].startAddress + i;
 8004712:	79fb      	ldrb	r3, [r7, #7]
 8004714:	4a1a      	ldr	r2, [pc, #104]	@ (8004780 <framWrite+0x168>)
 8004716:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 800471a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800471c:	b29b      	uxth	r3, r3
 800471e:	4413      	add	r3, r2
 8004720:	83fb      	strh	r3, [r7, #30]
        // First send upper 8 bits of address
        command[0] = (address >> 8) & 0xFF;
 8004722:	8bfb      	ldrh	r3, [r7, #30]
 8004724:	0a1b      	lsrs	r3, r3, #8
 8004726:	b29b      	uxth	r3, r3
 8004728:	b2da      	uxtb	r2, r3
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	701a      	strb	r2, [r3, #0]
        // Then send lower 8 bits of address
        command[1] = address & 0xFF;
 800472e:	8bfb      	ldrh	r3, [r7, #30]
 8004730:	b2da      	uxtb	r2, r3
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	705a      	strb	r2, [r3, #1]
        command[2] = data[i];
 8004736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	4413      	add	r3, r2
 800473c:	781a      	ldrb	r2, [r3, #0]
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	709a      	strb	r2, [r3, #2]


        // Send the command
        taskENTER_CRITICAL();
 8004742:	f00c fc87 	bl	8011054 <vPortEnterCritical>
        int ret = cmr_i2cTX(&i2c, framAddress, command,
 8004746:	4b0f      	ldr	r3, [pc, #60]	@ (8004784 <framWrite+0x16c>)
 8004748:	8819      	ldrh	r1, [r3, #0]
 800474a:	2301      	movs	r3, #1
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	2303      	movs	r3, #3
 8004750:	6a3a      	ldr	r2, [r7, #32]
 8004752:	480d      	ldr	r0, [pc, #52]	@ (8004788 <framWrite+0x170>)
 8004754:	f009 fb9f 	bl	800de96 <cmr_i2cTX>
 8004758:	61b8      	str	r0, [r7, #24]
                            3, 1);
        taskEXIT_CRITICAL();
 800475a:	f00c fca5 	bl	80110a8 <vPortExitCritical>
        retv_total = ret | retv_total;
 800475e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	4313      	orrs	r3, r2
 8004764:	637b      	str	r3, [r7, #52]	@ 0x34
 8004766:	46b5      	mov	sp, r6
    for (int i = 0; i < 17; i++){
 8004768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800476a:	3301      	adds	r3, #1
 800476c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800476e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004770:	2b10      	cmp	r3, #16
 8004772:	dd9f      	ble.n	80046b4 <framWrite+0x9c>

    }
    return retv_total;
 8004774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004776:	4618      	mov	r0, r3
 8004778:	373c      	adds	r7, #60	@ 0x3c
 800477a:	46bd      	mov	sp, r7
 800477c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004780:	24008d44 	.word	0x24008d44
 8004784:	240005b6 	.word	0x240005b6
 8004788:	24007b34 	.word	0x24007b34

0800478c <framInit>:

/* NOTE: i2cInit() must also be called */
static void framInit()
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b08c      	sub	sp, #48	@ 0x30
 8004790:	af00      	add	r7, sp, #0
	// TODO: add call to set fram write protect
    // Set Addresses in FRAM Space
    for (framVariable_t i = 0; i < num_values_driver_enum; i++)
 8004792:	2300      	movs	r3, #0
 8004794:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004798:	e020      	b.n	80047dc <framInit+0x50>
    {
        int16_t startAddress = i * SIZE_PER_DRIVER;
 800479a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800479e:	b29b      	uxth	r3, r3
 80047a0:	461a      	mov	r2, r3
 80047a2:	0112      	lsls	r2, r2, #4
 80047a4:	4413      	add	r3, r2
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	827b      	strh	r3, [r7, #18]
        if (startAddress < 0)
 80047aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	da02      	bge.n	80047b8 <framInit+0x2c>
        {
            cmr_panic("Trying to use too much FRAM space");
 80047b2:	484a      	ldr	r0, [pc, #296]	@ (80048dc <framInit+0x150>)
 80047b4:	f009 fc41 	bl	800e03a <cmr_panic>
        }
        framVarsConfig[i].startAddress = startAddress;
 80047b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80047bc:	8a79      	ldrh	r1, [r7, #18]
 80047be:	4a48      	ldr	r2, [pc, #288]	@ (80048e0 <framInit+0x154>)
 80047c0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
        framVarsConfig[i].dataLength = SIZE_PER_DRIVER;
 80047c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80047c8:	4a45      	ldr	r2, [pc, #276]	@ (80048e0 <framInit+0x154>)
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	2211      	movs	r2, #17
 80047d0:	805a      	strh	r2, [r3, #2]
    for (framVariable_t i = 0; i < num_values_driver_enum; i++)
 80047d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80047d6:	3301      	adds	r3, #1
 80047d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80047dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d9da      	bls.n	800479a <framInit+0xe>
    }
    framVarsConfig[FRAM_ODOMETER_CONFIG_ADDRESS].startAddress = FRAM_ODOMETER_CONFIG_ADDRESS * SIZE_PER_DRIVER;
 80047e4:	4b3e      	ldr	r3, [pc, #248]	@ (80048e0 <framInit+0x154>)
 80047e6:	2244      	movs	r2, #68	@ 0x44
 80047e8:	821a      	strh	r2, [r3, #16]
    framVarsConfig[FRAM_ODOMETER_CONFIG_ADDRESS].dataLength = sizeof(float);    // storing odometer in km as a float
 80047ea:	4b3d      	ldr	r3, [pc, #244]	@ (80048e0 <framInit+0x154>)
 80047ec:	2204      	movs	r2, #4
 80047ee:	825a      	strh	r2, [r3, #18]

    // Enable Write Protection
    //    cmr_gpioWrite(GPIO_FRAM_WP, 1);

// 	  Read the driver's default values into the main_menu array
    int retv = framRead(Default, currentParameters);
 80047f0:	493c      	ldr	r1, [pc, #240]	@ (80048e4 <framInit+0x158>)
 80047f2:	2000      	movs	r0, #0
 80047f4:	f7ff fed2 	bl	800459c <framRead>
 80047f8:	61f8      	str	r0, [r7, #28]
	// flush the currentParams into the main_menu_array
    for (int i = 0; i < MAX_MENU_ITEMS; i++){
 80047fa:	2300      	movs	r3, #0
 80047fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047fe:	e011      	b.n	8004824 <framInit+0x98>
		config_menu_main_array[i].value.value = currentParameters[i];
 8004800:	4a38      	ldr	r2, [pc, #224]	@ (80048e4 <framInit+0x158>)
 8004802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004804:	4413      	add	r3, r2
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	b2d8      	uxtb	r0, r3
 800480a:	4937      	ldr	r1, [pc, #220]	@ (80048e8 <framInit+0x15c>)
 800480c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800480e:	4613      	mov	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	4413      	add	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	440b      	add	r3, r1
 8004818:	3319      	adds	r3, #25
 800481a:	4602      	mov	r2, r0
 800481c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAX_MENU_ITEMS; i++){
 800481e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004820:	3301      	adds	r3, #1
 8004822:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004826:	2b10      	cmp	r3, #16
 8004828:	ddea      	ble.n	8004800 <framInit+0x74>
	}

    // Read odometer
    retv = framRead(FRAM_ODOMETER_CONFIG_ADDRESS, (uint8_t *)&odometer_km);
 800482a:	4930      	ldr	r1, [pc, #192]	@ (80048ec <framInit+0x160>)
 800482c:	2004      	movs	r0, #4
 800482e:	f7ff feb5 	bl	800459c <framRead>
 8004832:	61f8      	str	r0, [r7, #28]

    //Use the below to flash FRAM default params the first time the CDC is setup
     for (int i = 0; i < MAX_MENU_ITEMS; i++) {
 8004834:	2300      	movs	r3, #0
 8004836:	627b      	str	r3, [r7, #36]	@ 0x24
 8004838:	e011      	b.n	800485e <framInit+0xd2>
     	currentParameters[i] = config_menu_main_array[i].value.value;
 800483a:	492b      	ldr	r1, [pc, #172]	@ (80048e8 <framInit+0x15c>)
 800483c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800483e:	4613      	mov	r3, r2
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	4413      	add	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	440b      	add	r3, r1
 8004848:	3319      	adds	r3, #25
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	b2d9      	uxtb	r1, r3
 800484e:	4a25      	ldr	r2, [pc, #148]	@ (80048e4 <framInit+0x158>)
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004852:	4413      	add	r3, r2
 8004854:	460a      	mov	r2, r1
 8004856:	701a      	strb	r2, [r3, #0]
     for (int i = 0; i < MAX_MENU_ITEMS; i++) {
 8004858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485a:	3301      	adds	r3, #1
 800485c:	627b      	str	r3, [r7, #36]	@ 0x24
 800485e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004860:	2b10      	cmp	r3, #16
 8004862:	ddea      	ble.n	800483a <framInit+0xae>
     }
     for (framVariable_t var = Default; var < num_values_driver_enum; var++)
 8004864:	2300      	movs	r3, #0
 8004866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800486a:	e02b      	b.n	80048c4 <framInit+0x138>
     {
         uint8_t arr[MAX_MENU_ITEMS] = {0};
 800486c:	2300      	movs	r3, #0
 800486e:	603b      	str	r3, [r7, #0]
 8004870:	1d3b      	adds	r3, r7, #4
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	605a      	str	r2, [r3, #4]
 8004878:	609a      	str	r2, [r3, #8]
 800487a:	731a      	strb	r2, [r3, #12]
         currentParameters[0] = var;
 800487c:	4a19      	ldr	r2, [pc, #100]	@ (80048e4 <framInit+0x158>)
 800487e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004882:	7013      	strb	r3, [r2, #0]
         int retv5 = framWrite(var, currentParameters);
 8004884:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004888:	4916      	ldr	r1, [pc, #88]	@ (80048e4 <framInit+0x158>)
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff fec4 	bl	8004618 <framWrite>
 8004890:	61b8      	str	r0, [r7, #24]
         int retv6 = framRead(var, arr);
 8004892:	463a      	mov	r2, r7
 8004894:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004898:	4611      	mov	r1, r2
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff fe7e 	bl	800459c <framRead>
 80048a0:	6178      	str	r0, [r7, #20]
         if (memcmp(arr, currentParameters, MAX_MENU_ITEMS) != 0)
 80048a2:	463b      	mov	r3, r7
 80048a4:	2211      	movs	r2, #17
 80048a6:	490f      	ldr	r1, [pc, #60]	@ (80048e4 <framInit+0x158>)
 80048a8:	4618      	mov	r0, r3
 80048aa:	f019 fe4d 	bl	801e548 <memcmp>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <framInit+0x12e>
         {
             cmr_panic("FRAM init failed");
 80048b4:	480e      	ldr	r0, [pc, #56]	@ (80048f0 <framInit+0x164>)
 80048b6:	f009 fbc0 	bl	800e03a <cmr_panic>
     for (framVariable_t var = Default; var < num_values_driver_enum; var++)
 80048ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048be:	3301      	adds	r3, #1
 80048c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d9cf      	bls.n	800486c <framInit+0xe0>
         }
     }
     odometer_km = 0.0f;
 80048cc:	4b07      	ldr	r3, [pc, #28]	@ (80048ec <framInit+0x160>)
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]
}
 80048d4:	bf00      	nop
 80048d6:	3730      	adds	r7, #48	@ 0x30
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	0801fad8 	.word	0x0801fad8
 80048e0:	24008d44 	.word	0x24008d44
 80048e4:	24008d58 	.word	0x24008d58
 80048e8:	2400062c 	.word	0x2400062c
 80048ec:	24008d40 	.word	0x24008d40
 80048f0:	0801fafc 	.word	0x0801fafc

080048f4 <framUpdate>:
 *******/

/* i2cInit() must also be called */
static void rtcInit(void) {}

static void framUpdate(void *pvParameters) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08e      	sub	sp, #56	@ 0x38
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
    /* The FRAM Logic is handled below here, keeps i2c functionality together in the
     * same task.
     */
	(void) pvParameters; // Placate compiler.

	TickType_t lastWakeTime = xTaskGetTickCount();
 80048fc:	f00b fe6c 	bl	80105d8 <xTaskGetTickCount>
 8004900:	4603      	mov	r3, r0
 8004902:	627b      	str	r3, [r7, #36]	@ 0x24
    while (1) {
		if(framWrite_flag) {
 8004904:	4b40      	ldr	r3, [pc, #256]	@ (8004a08 <framUpdate+0x114>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d03f      	beq.n	800498e <framUpdate+0x9a>
			// FramWrite new driver data
			int retv = framWrite(currentDriver, parametersFromDIM);
 800490e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a0c <framUpdate+0x118>)
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	b2db      	uxtb	r3, r3
 8004914:	493e      	ldr	r1, [pc, #248]	@ (8004a10 <framUpdate+0x11c>)
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff fe7e 	bl	8004618 <framWrite>
 800491c:	6338      	str	r0, [r7, #48]	@ 0x30
			if (retv != 0) cmr_panic("Fram failed");
 800491e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <framUpdate+0x36>
 8004924:	483b      	ldr	r0, [pc, #236]	@ (8004a14 <framUpdate+0x120>)
 8004926:	f009 fb88 	bl	800e03a <cmr_panic>

			// give the hal enough time to flush i2c data
			TickType_t lastWakeTime = xTaskGetTickCount();
 800492a:	f00b fe55 	bl	80105d8 <xTaskGetTickCount>
 800492e:	4603      	mov	r3, r0
 8004930:	623b      	str	r3, [r7, #32]
			vTaskDelayUntil(&lastWakeTime, 50);
 8004932:	f107 0320 	add.w	r3, r7, #32
 8004936:	2132      	movs	r1, #50	@ 0x32
 8004938:	4618      	mov	r0, r3
 800493a:	f00b fcd7 	bl	80102ec <vTaskDelayUntil>

			uint8_t temp_arr[MAX_MENU_ITEMS] = {0};
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	f107 0310 	add.w	r3, r7, #16
 8004946:	2200      	movs	r2, #0
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	605a      	str	r2, [r3, #4]
 800494c:	609a      	str	r2, [r3, #8]
 800494e:	731a      	strb	r2, [r3, #12]
			framRead(currentDriver, temp_arr);
 8004950:	4b2e      	ldr	r3, [pc, #184]	@ (8004a0c <framUpdate+0x118>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	b2db      	uxtb	r3, r3
 8004956:	f107 020c 	add.w	r2, r7, #12
 800495a:	4611      	mov	r1, r2
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff fe1d 	bl	800459c <framRead>

			// Read to currentParameters to ensure Fram is updated
			framRead(currentDriver, currentParameters);
 8004962:	4b2a      	ldr	r3, [pc, #168]	@ (8004a0c <framUpdate+0x118>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	b2db      	uxtb	r3, r3
 8004968:	492b      	ldr	r1, [pc, #172]	@ (8004a18 <framUpdate+0x124>)
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff fe16 	bl	800459c <framRead>

			if (memcmp(parametersFromDIM, currentParameters, MAX_MENU_ITEMS) == 0){
 8004970:	2211      	movs	r2, #17
 8004972:	4929      	ldr	r1, [pc, #164]	@ (8004a18 <framUpdate+0x124>)
 8004974:	4826      	ldr	r0, [pc, #152]	@ (8004a10 <framUpdate+0x11c>)
 8004976:	f019 fde7 	bl	801e548 <memcmp>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d103      	bne.n	8004988 <framUpdate+0x94>
				// reset the flag
				framWrite_flag = false;
 8004980:	4b21      	ldr	r3, [pc, #132]	@ (8004a08 <framUpdate+0x114>)
 8004982:	2200      	movs	r2, #0
 8004984:	701a      	strb	r2, [r3, #0]
 8004986:	e002      	b.n	800498e <framUpdate+0x9a>
			} else {
				cmr_panic("Fram read and write disagreed");
 8004988:	4824      	ldr	r0, [pc, #144]	@ (8004a1c <framUpdate+0x128>)
 800498a:	f009 fb56 	bl	800e03a <cmr_panic>
			}

		}

		volatile cmr_canDIMRequest_t *dimRequest = (volatile cmr_canDIMRequest_t *) canVehicleGetPayload(CANRX_VEH_REQUEST_DIM);
 800498e:	2002      	movs	r0, #2
 8004990:	f7fc fc96 	bl	80012c0 <canVehicleGetPayload>
 8004994:	62f8      	str	r0, [r7, #44]	@ 0x2c
		cmr_driver_profile_t fram_requested_driver = dimRequest->requestedDriver;
 8004996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004998:	78db      	ldrb	r3, [r3, #3]
 800499a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

		// new driver has been requested
		if(currentDriver != fram_requested_driver){
 800499e:	4b1b      	ldr	r3, [pc, #108]	@ (8004a0c <framUpdate+0x118>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d021      	beq.n	80049f0 <framUpdate+0xfc>
			// Read the current driver's parameters
			framRead(fram_requested_driver, currentParameters);
 80049ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80049b0:	4919      	ldr	r1, [pc, #100]	@ (8004a18 <framUpdate+0x124>)
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff fdf2 	bl	800459c <framRead>

			// Update the config_menu_main_array
			for (int i = 0; i < MAX_MENU_ITEMS; i++) {
 80049b8:	2300      	movs	r3, #0
 80049ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80049bc:	e011      	b.n	80049e2 <framUpdate+0xee>
				config_menu_main_array[i].value.value = currentParameters[i];
 80049be:	4a16      	ldr	r2, [pc, #88]	@ (8004a18 <framUpdate+0x124>)
 80049c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c2:	4413      	add	r3, r2
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	b2d8      	uxtb	r0, r3
 80049c8:	4915      	ldr	r1, [pc, #84]	@ (8004a20 <framUpdate+0x12c>)
 80049ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049cc:	4613      	mov	r3, r2
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	4413      	add	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	440b      	add	r3, r1
 80049d6:	3319      	adds	r3, #25
 80049d8:	4602      	mov	r2, r0
 80049da:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < MAX_MENU_ITEMS; i++) {
 80049dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049de:	3301      	adds	r3, #1
 80049e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80049e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e4:	2b10      	cmp	r3, #16
 80049e6:	ddea      	ble.n	80049be <framUpdate+0xca>
			}

			// Switch drivers
			currentDriver = fram_requested_driver;
 80049e8:	4a08      	ldr	r2, [pc, #32]	@ (8004a0c <framUpdate+0x118>)
 80049ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80049ee:	7013      	strb	r3, [r2, #0]
		}

		// Write odometer
		framWrite(FRAM_ODOMETER_CONFIG_ADDRESS, (uint8_t *)&odometer_km);
 80049f0:	490c      	ldr	r1, [pc, #48]	@ (8004a24 <framUpdate+0x130>)
 80049f2:	2004      	movs	r0, #4
 80049f4:	f7ff fe10 	bl	8004618 <framWrite>
		vTaskDelayUntil(&lastWakeTime, i2cTaskUpdatePeriod_ms);
 80049f8:	220a      	movs	r2, #10
 80049fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049fe:	4611      	mov	r1, r2
 8004a00:	4618      	mov	r0, r3
 8004a02:	f00b fc73 	bl	80102ec <vTaskDelayUntil>
    while (1) {
 8004a06:	e77d      	b.n	8004904 <framUpdate+0x10>
 8004a08:	24001a16 	.word	0x24001a16
 8004a0c:	24001a15 	.word	0x24001a15
 8004a10:	24001a04 	.word	0x24001a04
 8004a14:	0801fb10 	.word	0x0801fb10
 8004a18:	24008d58 	.word	0x24008d58
 8004a1c:	0801fb1c 	.word	0x0801fb1c
 8004a20:	2400062c 	.word	0x2400062c
 8004a24:	24008d40 	.word	0x24008d40

08004a28 <getLoadIndex>:
static const bool useLoadCells = false;    // change this value to switch between loadcells and linpots

/**
 * @brief Returns the index of a load cell
 */
canDaqRX_t getLoadIndex(motorLocation_t motor) {
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	71fb      	strb	r3, [r7, #7]
	switch (motor) {
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d813      	bhi.n	8004a60 <getLoadIndex+0x38>
 8004a38:	a201      	add	r2, pc, #4	@ (adr r2, 8004a40 <getLoadIndex+0x18>)
 8004a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3e:	bf00      	nop
 8004a40:	08004a55 	.word	0x08004a55
 8004a44:	08004a5d 	.word	0x08004a5d
 8004a48:	08004a51 	.word	0x08004a51
 8004a4c:	08004a59 	.word	0x08004a59
		case MOTOR_FL:
			return CANRX_DAQ_LOAD_FL;
 8004a50:	2307      	movs	r3, #7
 8004a52:	e007      	b.n	8004a64 <getLoadIndex+0x3c>
		case MOTOR_FR:
			return CANRX_DAQ_LOAD_FR;
 8004a54:	2308      	movs	r3, #8
 8004a56:	e005      	b.n	8004a64 <getLoadIndex+0x3c>
		case MOTOR_RL:
			return CANRX_DAQ_LOAD_RL;
 8004a58:	2309      	movs	r3, #9
 8004a5a:	e003      	b.n	8004a64 <getLoadIndex+0x3c>
		case MOTOR_RR:
			return CANRX_DAQ_LOAD_RR;
 8004a5c:	230a      	movs	r3, #10
 8004a5e:	e001      	b.n	8004a64 <getLoadIndex+0x3c>
		default:
			break;
 8004a60:	bf00      	nop
	}
	return CANRX_DAQ_LOAD_FL; // Default to FL
 8004a62:	2307      	movs	r3, #7
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <getKappaScaleFactor>:
}

/**
 * @brief Return the horizontal (kappa) scale factor set by DIM
 */
static float getKappaScaleFactor() {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
    float xScaleFactor = 1.0f;
 8004a76:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004a7a:	603b      	str	r3, [r7, #0]
    const bool retVal = getProcessedValue(&xScaleFactor, TC_LUT_Y_SCALE_INDEX, float_2_decimal);
 8004a7c:	463b      	mov	r3, r7
 8004a7e:	2201      	movs	r2, #1
 8004a80:	2104      	movs	r1, #4
 8004a82:	4618      	mov	r0, r3
 8004a84:	f007 fe84 	bl	800c790 <getProcessedValue>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	71fb      	strb	r3, [r7, #7]
    if (retVal) {
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <getKappaScaleFactor+0x26>
        return 0.85f;//xScaleFactor;
 8004a92:	4b05      	ldr	r3, [pc, #20]	@ (8004aa8 <getKappaScaleFactor+0x38>)
 8004a94:	e001      	b.n	8004a9a <getKappaScaleFactor+0x2a>
    }
    return 1.0f;
 8004a96:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	3f59999a 	.word	0x3f59999a

08004aac <getFzScaleFactor>:

/**
 * @brief Return the vertical (Fz) scale factor set by DIM
 */
static float getFzScaleFactor() {
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
    float yScaleFactor = 1.0f;
 8004ab2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004ab6:	603b      	str	r3, [r7, #0]
    const bool retVal = getProcessedValue(&yScaleFactor, TC_LUT_X_SCALE_INDEX, float_2_decimal);
 8004ab8:	463b      	mov	r3, r7
 8004aba:	2201      	movs	r2, #1
 8004abc:	2105      	movs	r1, #5
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f007 fe66 	bl	800c790 <getProcessedValue>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	71fb      	strb	r3, [r7, #7]
    if (retVal) {
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <getFzScaleFactor+0x26>
        return yScaleFactor;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	e001      	b.n	8004ad6 <getFzScaleFactor+0x2a>
    }
    return 1.0f;
 8004ad2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 8004ad6:	ee07 3a90 	vmov	s15, r3
 8004ada:	eeb0 0a67 	vmov.f32	s0, s15
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <getLinpotDownforce>:
        return activateParallelRegen;
    }
    return false;
}

static float getLinpotDownforce(canDaqRX_t leftRight, bool fronts, float springConstant, float pushrodAngle) {
 8004ae4:	b590      	push	{r4, r7, lr}
 8004ae6:	b08b      	sub	sp, #44	@ 0x2c
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	4603      	mov	r3, r0
 8004aec:	460a      	mov	r2, r1
 8004aee:	ed87 0a02 	vstr	s0, [r7, #8]
 8004af2:	edc7 0a01 	vstr	s1, [r7, #4]
 8004af6:	73fb      	strb	r3, [r7, #15]
 8004af8:	4613      	mov	r3, r2
 8004afa:	73bb      	strb	r3, [r7, #14]
    float downforce_N = carWeight_N / 4.0f;
 8004afc:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8004bb8 <getLinpotDownforce+0xd4>
 8004b00:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8004b04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b08:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    if (cmr_canRXMetaTimeoutWarn(&canDaqRXMeta[leftRight],  xTaskGetTickCount()) == 0) {
 8004b0c:	7bfb      	ldrb	r3, [r7, #15]
 8004b0e:	015b      	lsls	r3, r3, #5
 8004b10:	4a2a      	ldr	r2, [pc, #168]	@ (8004bbc <getLinpotDownforce+0xd8>)
 8004b12:	189c      	adds	r4, r3, r2
 8004b14:	f00b fd60 	bl	80105d8 <xTaskGetTickCount>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	f007 fc3a 	bl	800c396 <cmr_canRXMetaTimeoutWarn>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d13f      	bne.n	8004ba8 <getLinpotDownforce+0xc4>
        volatile cmr_canDAQLinpot_t *linpotPayload = (volatile cmr_canDAQLinpot_t*) canDAQGetPayload(leftRight);
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fc fbec 	bl	8001308 <canDAQGetPayload>
 8004b30:	61f8      	str	r0, [r7, #28]
        const float springNominalLength_mm = 225.0f;
 8004b32:	4b23      	ldr	r3, [pc, #140]	@ (8004bc0 <getLinpotDownforce+0xdc>)
 8004b34:	61bb      	str	r3, [r7, #24]
        float linpot_mm = 0.0f;
 8004b36:	f04f 0300 	mov.w	r3, #0
 8004b3a:	623b      	str	r3, [r7, #32]
        if (fronts) {
 8004b3c:	7bbb      	ldrb	r3, [r7, #14]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00d      	beq.n	8004b5e <getLinpotDownforce+0x7a>
            linpot_mm = springNominalLength_mm - ((float) linpotPayload->linpot_front_mm);
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	ee07 3a90 	vmov	s15, r3
 8004b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b50:	ed97 7a06 	vldr	s14, [r7, #24]
 8004b54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b58:	edc7 7a08 	vstr	s15, [r7, #32]
 8004b5c:	e00c      	b.n	8004b78 <getLinpotDownforce+0x94>
        } else {
            linpot_mm = springNominalLength_mm - ((float) linpotPayload->linpot_rear_mm);
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	889b      	ldrh	r3, [r3, #4]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	ee07 3a90 	vmov	s15, r3
 8004b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6c:	ed97 7a06 	vldr	s14, [r7, #24]
 8004b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b74:	edc7 7a08 	vstr	s15, [r7, #32]
        }
        float springForce_N = springConstant * linpot_mm; // TODO: check units
 8004b78:	ed97 7a02 	vldr	s14, [r7, #8]
 8004b7c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b84:	edc7 7a05 	vstr	s15, [r7, #20]
        downforce_N = springForce_N * cosf(pushrodAngle) / 4.0f;
 8004b88:	ed97 0a01 	vldr	s0, [r7, #4]
 8004b8c:	f019 fd98 	bl	801e6c0 <cosf>
 8004b90:	eeb0 7a40 	vmov.f32	s14, s0
 8004b94:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b9c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8004ba0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ba4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }
    return downforce_N;
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004baa:	ee07 3a90 	vmov	s15, r3
}
 8004bae:	eeb0 0a67 	vmov.f32	s0, s15
 8004bb2:	372c      	adds	r7, #44	@ 0x2c
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd90      	pop	{r4, r7, pc}
 8004bb8:	453e119a 	.word	0x453e119a
 8004bbc:	240002a8 	.word	0x240002a8
 8004bc0:	43610000 	.word	0x43610000

08004bc4 <get_fake_downforce>:

float get_fake_downforce(motorLocation_t motor) {
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	71fb      	strb	r3, [r7, #7]
    return (carWeight_N + driver_weight_N) / 4.0f;
 8004bce:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8004bf4 <get_fake_downforce+0x30>
 8004bd2:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8004bf8 <get_fake_downforce+0x34>
 8004bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bda:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8004bde:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004be2:	eef0 7a66 	vmov.f32	s15, s13
}
 8004be6:	eeb0 0a67 	vmov.f32	s0, s15
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	453e119a 	.word	0x453e119a
 8004bf8:	442baccd 	.word	0x442baccd

08004bfc <getDownforce>:

/**
 * @brief Return downforce given motor location
 */
static float getDownforce(motorLocation_t motor) {
 8004bfc:	b590      	push	{r4, r7, lr}
 8004bfe:	b08b      	sub	sp, #44	@ 0x2c
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	4603      	mov	r3, r0
 8004c04:	71fb      	strb	r3, [r7, #7]

    if(!use_true_downforce)
 8004c06:	4b51      	ldr	r3, [pc, #324]	@ (8004d4c <getDownforce+0x150>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	f083 0301 	eor.w	r3, r3, #1
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d006      	beq.n	8004c24 <getDownforce+0x28>
        return get_fake_downforce(motor);
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff ffd3 	bl	8004bc4 <get_fake_downforce>
 8004c1e:	eef0 7a40 	vmov.f32	s15, s0
 8004c22:	e08e      	b.n	8004d42 <getDownforce+0x146>

    float downforce_N = carWeight_N / 4.0f;
 8004c24:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8004d50 <getDownforce+0x154>
 8004c28:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8004c2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c30:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    if (useLoadCells) {
 8004c34:	2300      	movs	r3, #0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d022      	beq.n	8004c80 <getDownforce+0x84>
        const canDaqRX_t loadIndex = getLoadIndex(motor);
 8004c3a:	79fb      	ldrb	r3, [r7, #7]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff fef3 	bl	8004a28 <getLoadIndex>
 8004c42:	4603      	mov	r3, r0
 8004c44:	74fb      	strb	r3, [r7, #19]
        // If we have valid loadcell data, use loadcell as downforce
        if (cmr_canRXMetaTimeoutWarn(&canDaqRXMeta[loadIndex],  xTaskGetTickCount()) == 0) {
 8004c46:	7cfb      	ldrb	r3, [r7, #19]
 8004c48:	015b      	lsls	r3, r3, #5
 8004c4a:	4a42      	ldr	r2, [pc, #264]	@ (8004d54 <getDownforce+0x158>)
 8004c4c:	189c      	adds	r4, r3, r2
 8004c4e:	f00b fcc3 	bl	80105d8 <xTaskGetTickCount>
 8004c52:	4603      	mov	r3, r0
 8004c54:	4619      	mov	r1, r3
 8004c56:	4620      	mov	r0, r4
 8004c58:	f007 fb9d 	bl	800c396 <cmr_canRXMetaTimeoutWarn>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d14d      	bne.n	8004cfe <getDownforce+0x102>
            volatile cmr_canIZZELoadCell_t *downforcePayload = (volatile cmr_canIZZELoadCell_t*) canDAQGetPayload(loadIndex);
 8004c62:	7cfb      	ldrb	r3, [r7, #19]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fc fb4f 	bl	8001308 <canDAQGetPayload>
 8004c6a:	60f8      	str	r0, [r7, #12]
            downforce_N = downforcePayload->force_output_N;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	885b      	ldrh	r3, [r3, #2]
 8004c70:	b21b      	sxth	r3, r3
 8004c72:	ee07 3a90 	vmov	s15, r3
 8004c76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c7a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8004c7e:	e03e      	b.n	8004cfe <getDownforce+0x102>
        }
    } else {
        const float frontAngle_rad = ((float) M_PI) / 4;
 8004c80:	4b35      	ldr	r3, [pc, #212]	@ (8004d58 <getDownforce+0x15c>)
 8004c82:	623b      	str	r3, [r7, #32]
        const float rearAngle_rad = 0.9f;
 8004c84:	4b35      	ldr	r3, [pc, #212]	@ (8004d5c <getDownforce+0x160>)
 8004c86:	61fb      	str	r3, [r7, #28]
        const float frontSpringConstant = 225;
 8004c88:	4b35      	ldr	r3, [pc, #212]	@ (8004d60 <getDownforce+0x164>)
 8004c8a:	61bb      	str	r3, [r7, #24]
        const float rearSpringConstant = 300;
 8004c8c:	4b35      	ldr	r3, [pc, #212]	@ (8004d64 <getDownforce+0x168>)
 8004c8e:	617b      	str	r3, [r7, #20]
        if (motor == MOTOR_FL) {
 8004c90:	79fb      	ldrb	r3, [r7, #7]
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d10a      	bne.n	8004cac <getDownforce+0xb0>
            downforce_N = getLinpotDownforce(CANRX_DAQ_LINPOTS_LEFTS, true, frontSpringConstant, frontAngle_rad);
 8004c96:	edd7 0a08 	vldr	s1, [r7, #32]
 8004c9a:	ed97 0a06 	vldr	s0, [r7, #24]
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	200c      	movs	r0, #12
 8004ca2:	f7ff ff1f 	bl	8004ae4 <getLinpotDownforce>
 8004ca6:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8004caa:	e028      	b.n	8004cfe <getDownforce+0x102>
        } else if (motor == MOTOR_FR) {
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10a      	bne.n	8004cc8 <getDownforce+0xcc>
            downforce_N = getLinpotDownforce(CANRX_DAQ_LINPOTS_RIGHTS, true, frontSpringConstant, frontAngle_rad);
 8004cb2:	edd7 0a08 	vldr	s1, [r7, #32]
 8004cb6:	ed97 0a06 	vldr	s0, [r7, #24]
 8004cba:	2101      	movs	r1, #1
 8004cbc:	200d      	movs	r0, #13
 8004cbe:	f7ff ff11 	bl	8004ae4 <getLinpotDownforce>
 8004cc2:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8004cc6:	e01a      	b.n	8004cfe <getDownforce+0x102>
        } else if (motor == MOTOR_RL) {
 8004cc8:	79fb      	ldrb	r3, [r7, #7]
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d10a      	bne.n	8004ce4 <getDownforce+0xe8>
            downforce_N = getLinpotDownforce(CANRX_DAQ_LINPOTS_LEFTS, false, rearSpringConstant, rearAngle_rad);
 8004cce:	edd7 0a07 	vldr	s1, [r7, #28]
 8004cd2:	ed97 0a05 	vldr	s0, [r7, #20]
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	200c      	movs	r0, #12
 8004cda:	f7ff ff03 	bl	8004ae4 <getLinpotDownforce>
 8004cde:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8004ce2:	e00c      	b.n	8004cfe <getDownforce+0x102>
        } else if (motor == MOTOR_RR) {
 8004ce4:	79fb      	ldrb	r3, [r7, #7]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d109      	bne.n	8004cfe <getDownforce+0x102>
            downforce_N = getLinpotDownforce(CANRX_DAQ_LINPOTS_RIGHTS, false, rearSpringConstant, rearAngle_rad);
 8004cea:	edd7 0a07 	vldr	s1, [r7, #28]
 8004cee:	ed97 0a05 	vldr	s0, [r7, #20]
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	200d      	movs	r0, #13
 8004cf6:	f7ff fef5 	bl	8004ae4 <getLinpotDownforce>
 8004cfa:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        }
    }

    // Multiply by the scale factor
    downforce_N = downforce_N * getFzScaleFactor();
 8004cfe:	f7ff fed5 	bl	8004aac <getFzScaleFactor>
 8004d02:	eeb0 7a40 	vmov.f32	s14, s0
 8004d06:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004d0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d0e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Clamp the downforce to be valid for LUT
    if (downforce_N > maxDownforce_N) {
 8004d12:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8004d68 <getDownforce+0x16c>
 8004d16:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004d1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d22:	dd01      	ble.n	8004d28 <getDownforce+0x12c>
        downforce_N = maxDownforce_N;
 8004d24:	4b11      	ldr	r3, [pc, #68]	@ (8004d6c <getDownforce+0x170>)
 8004d26:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    if (downforce_N < minDownforce_N) {
 8004d28:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8004d70 <getDownforce+0x174>
 8004d2c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d38:	d501      	bpl.n	8004d3e <getDownforce+0x142>
        downforce_N = minDownforce_N;
 8004d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004d74 <getDownforce+0x178>)
 8004d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return downforce_N;
 8004d3e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
}
 8004d42:	eeb0 0a67 	vmov.f32	s0, s15
 8004d46:	372c      	adds	r7, #44	@ 0x2c
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd90      	pop	{r4, r7, pc}
 8004d4c:	24006f50 	.word	0x24006f50
 8004d50:	453e119a 	.word	0x453e119a
 8004d54:	240002a8 	.word	0x240002a8
 8004d58:	3f490fdb 	.word	0x3f490fdb
 8004d5c:	3f666666 	.word	0x3f666666
 8004d60:	43610000 	.word	0x43610000
 8004d64:	43960000 	.word	0x43960000
 8004d68:	44a18ef6 	.word	0x44a18ef6
 8004d6c:	44a18ef6 	.word	0x44a18ef6
 8004d70:	43180e15 	.word	0x43180e15
 8004d74:	43180e15 	.word	0x43180e15

08004d78 <getSlipangle>:

/**
 * @brief Return slipangle collected from SBG
 */ 
static float getSlipangle() {
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
    float slipangle_deg = 0.0f;
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	60fb      	str	r3, [r7, #12]

    // Get slip angle from DAQ
    if (cmr_canRXMetaTimeoutWarn(&canDaqRXMeta[CANRX_DAQ_SBG_SLIPANGLE],  xTaskGetTickCount()) == 0) {
 8004d84:	f00b fc28 	bl	80105d8 <xTaskGetTickCount>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4827      	ldr	r0, [pc, #156]	@ (8004e2c <getSlipangle+0xb4>)
 8004d8e:	f007 fb02 	bl	800c396 <cmr_canRXMetaTimeoutWarn>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d11c      	bne.n	8004dd2 <getSlipangle+0x5a>
        volatile cmr_canSBGAutomotive_t *sbg_automotive = (volatile cmr_canSBGAutomotive_t*) canDAQGetPayload(CANRX_DAQ_SBG_SLIPANGLE);
 8004d98:	200b      	movs	r0, #11
 8004d9a:	f7fc fab5 	bl	8001308 <canDAQGetPayload>
 8004d9e:	60b8      	str	r0, [r7, #8]
        const float slip_angle_rad = ((float) sbg_automotive->angle_slip_rad) * 1e-4f;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	885b      	ldrh	r3, [r3, #2]
 8004da4:	b21b      	sxth	r3, r3
 8004da6:	ee07 3a90 	vmov	s15, r3
 8004daa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dae:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8004e30 <getSlipangle+0xb8>
 8004db2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004db6:	edc7 7a01 	vstr	s15, [r7, #4]
        slipangle_deg = slip_angle_rad * 180.0f / ((float) M_PI);
 8004dba:	edd7 7a01 	vldr	s15, [r7, #4]
 8004dbe:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004e34 <getSlipangle+0xbc>
 8004dc2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004dc6:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8004e38 <getSlipangle+0xc0>
 8004dca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004dce:	edc7 7a03 	vstr	s15, [r7, #12]
    } 

    // Clamp slipangle to be valid for LUT
    if (slipangle_deg < 0) {
 8004dd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dde:	d505      	bpl.n	8004dec <getSlipangle+0x74>
        slipangle_deg = -slipangle_deg;
 8004de0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004de4:	eef1 7a67 	vneg.f32	s15, s15
 8004de8:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    if (slipangle_deg < minSlipangle_deg) {
 8004dec:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8004e3c <getSlipangle+0xc4>
 8004df0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004df4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dfc:	d502      	bpl.n	8004e04 <getSlipangle+0x8c>
        slipangle_deg = minSlipangle_deg;
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	60fb      	str	r3, [r7, #12]
    }
    if (slipangle_deg > maxSlipangle_deg) {
 8004e04:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8004e08:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e14:	dd01      	ble.n	8004e1a <getSlipangle+0xa2>
        slipangle_deg = maxSlipangle_deg;
 8004e16:	4b0a      	ldr	r3, [pc, #40]	@ (8004e40 <getSlipangle+0xc8>)
 8004e18:	60fb      	str	r3, [r7, #12]
    }

    return slipangle_deg;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	ee07 3a90 	vmov	s15, r3
}
 8004e20:	eeb0 0a67 	vmov.f32	s0, s15
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	24000408 	.word	0x24000408
 8004e30:	38d1b717 	.word	0x38d1b717
 8004e34:	43340000 	.word	0x43340000
 8004e38:	40490fdb 	.word	0x40490fdb
 8004e3c:	00000000 	.word	0x00000000
 8004e40:	41a00000 	.word	0x41a00000

08004e44 <interpKappa>:
    float target_Fx,
    float downforce_N,
    float minDownforce_N,
    float downforceSpacing_N,
    float LUT_Fx_spacing_N
) {
 8004e44:	b480      	push	{r7}
 8004e46:	b0a5      	sub	sp, #148	@ 0x94
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004e4c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004e4e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e50:	623b      	str	r3, [r7, #32]
 8004e52:	ed87 0a07 	vstr	s0, [r7, #28]
 8004e56:	edc7 0a06 	vstr	s1, [r7, #24]
 8004e5a:	ed87 1a05 	vstr	s2, [r7, #20]
 8004e5e:	edc7 1a04 	vstr	s3, [r7, #16]
 8004e62:	ed87 2a03 	vstr	s4, [r7, #12]
    // Determine the start and end indices in LUT for given Fz
    uint32_t lut_start_idx = 0;
 8004e66:	2300      	movs	r3, #0
 8004e68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint32_t lut_end_idx = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (slipangle_ind == 0) {
 8004e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d123      	bne.n	8004ec0 <interpKappa+0x7c>
        if (Fz_ind == 0)
 8004e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d103      	bne.n	8004e86 <interpKappa+0x42>
        {
            lut_start_idx = 0;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004e84:	e00e      	b.n	8004ea4 <interpKappa+0x60>
        } else
        {
            lut_start_idx = LUT_idx[slipangle_ind][Fz_ind-1]+1;
 8004e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e88:	1e59      	subs	r1, r3, #1
 8004e8a:	4842      	ldr	r0, [pc, #264]	@ (8004f94 <interpKappa+0x150>)
 8004e8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e8e:	4613      	mov	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	4413      	add	r3, r2
 8004e98:	440b      	add	r3, r1
 8004e9a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        }
        lut_end_idx = LUT_idx[slipangle_ind][Fz_ind];
 8004ea4:	493b      	ldr	r1, [pc, #236]	@ (8004f94 <interpKappa+0x150>)
 8004ea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004eba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ebe:	e02b      	b.n	8004f18 <interpKappa+0xd4>
    } else
    {
        if (Fz_ind == 0)
 8004ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10c      	bne.n	8004ee0 <interpKappa+0x9c>
        {
            lut_start_idx = LUT_idx[slipangle_ind-1][LUT_IDX_N_COLS_FZ-1]+1;
 8004ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	4a32      	ldr	r2, [pc, #200]	@ (8004f94 <interpKappa+0x150>)
 8004ecc:	21a4      	movs	r1, #164	@ 0xa4
 8004ece:	fb01 f303 	mul.w	r3, r1, r3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	33a0      	adds	r3, #160	@ 0xa0
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004ede:	e00e      	b.n	8004efe <interpKappa+0xba>
        } else
        {
            lut_start_idx = LUT_idx[slipangle_ind][Fz_ind-1]+1;
 8004ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee2:	1e59      	subs	r1, r3, #1
 8004ee4:	482b      	ldr	r0, [pc, #172]	@ (8004f94 <interpKappa+0x150>)
 8004ee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ee8:	4613      	mov	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	4413      	add	r3, r2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        }
        lut_end_idx = LUT_idx[slipangle_ind][Fz_ind];
 8004efe:	4925      	ldr	r1, [pc, #148]	@ (8004f94 <interpKappa+0x150>)
 8004f00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f02:	4613      	mov	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	4413      	add	r3, r2
 8004f0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f0e:	4413      	add	r3, r2
 8004f10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    }

    uint32_t lut_start_idx_upp = 0;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint32_t lut_end_idx_upp = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (slipangle_ind == 0) {
 8004f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d123      	bne.n	8004f72 <interpKappa+0x12e>
        if (Fz_ind_upp == 0)
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d103      	bne.n	8004f38 <interpKappa+0xf4>
        {
            lut_start_idx_upp = 0;
 8004f30:	2300      	movs	r3, #0
 8004f32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f36:	e00e      	b.n	8004f56 <interpKappa+0x112>
        } else
        {
            lut_start_idx_upp = LUT_idx[slipangle_ind][Fz_ind_upp-1]+1;
 8004f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3a:	1e59      	subs	r1, r3, #1
 8004f3c:	4815      	ldr	r0, [pc, #84]	@ (8004f94 <interpKappa+0x150>)
 8004f3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f40:	4613      	mov	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	4413      	add	r3, r2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004f50:	3301      	adds	r3, #1
 8004f52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        }
        lut_end_idx_upp = LUT_idx[slipangle_ind][Fz_ind_upp];
 8004f56:	490f      	ldr	r1, [pc, #60]	@ (8004f94 <interpKappa+0x150>)
 8004f58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	4413      	add	r3, r2
 8004f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f66:	4413      	add	r3, r2
 8004f68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f70:	e02e      	b.n	8004fd0 <interpKappa+0x18c>
    } else
    {
        if (Fz_ind_upp == 0)
 8004f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10f      	bne.n	8004f98 <interpKappa+0x154>
        {
            lut_start_idx_upp = LUT_idx[slipangle_ind-1][LUT_IDX_N_COLS_FZ-1]+1;
 8004f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	4a05      	ldr	r2, [pc, #20]	@ (8004f94 <interpKappa+0x150>)
 8004f7e:	21a4      	movs	r1, #164	@ 0xa4
 8004f80:	fb01 f303 	mul.w	r3, r1, r3
 8004f84:	4413      	add	r3, r2
 8004f86:	33a0      	adds	r3, #160	@ 0xa0
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f90:	e011      	b.n	8004fb6 <interpKappa+0x172>
 8004f92:	bf00      	nop
 8004f94:	080441d0 	.word	0x080441d0
        } else
        {
            lut_start_idx_upp = LUT_idx[slipangle_ind][Fz_ind_upp-1]+1;
 8004f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9a:	1e59      	subs	r1, r3, #1
 8004f9c:	48e0      	ldr	r0, [pc, #896]	@ (8005320 <interpKappa+0x4dc>)
 8004f9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	4413      	add	r3, r2
 8004faa:	440b      	add	r3, r1
 8004fac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        }
        lut_end_idx_upp = LUT_idx[slipangle_ind][Fz_ind_upp];
 8004fb6:	49da      	ldr	r1, [pc, #872]	@ (8005320 <interpKappa+0x4dc>)
 8004fb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fba:	4613      	mov	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	4413      	add	r3, r2
 8004fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004fcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    }

    // Interpolate for the kappas associated with the target_Fx
    const uint32_t lut_idx_add = (uint32_t) (target_Fx / LUT_Fx_spacing_N);
 8004fd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fd4:	ed97 7a03 	vldr	s14, [r7, #12]
 8004fd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fe0:	ee17 3a90 	vmov	r3, s15
 8004fe4:	65fb      	str	r3, [r7, #92]	@ 0x5c

    uint32_t lut_idx_i1 = lut_start_idx + lut_idx_add;
 8004fe6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8004fea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fec:	4413      	add	r3, r2
 8004fee:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t lut_idx_i2 = lut_start_idx + lut_idx_add + 1;
 8004ff0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8004ff4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ff6:	4413      	add	r3, r2
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	67bb      	str	r3, [r7, #120]	@ 0x78
    float Fx_i1 = ((float)(lut_idx_add * LUT_Fx_spacing_N));
 8004ffc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005006:	ed97 7a03 	vldr	s14, [r7, #12]
 800500a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800500e:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    float Fx_i2 = ((float)((lut_idx_add + 1) * LUT_Fx_spacing_N));
 8005012:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005014:	3301      	adds	r3, #1
 8005016:	ee07 3a90 	vmov	s15, r3
 800501a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005026:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    if (lut_idx_i1 >= lut_end_idx) {
 800502a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800502c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005030:	429a      	cmp	r2, r3
 8005032:	d311      	bcc.n	8005058 <interpKappa+0x214>
        lut_idx_i1 = lut_end_idx;
 8005034:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005038:	67fb      	str	r3, [r7, #124]	@ 0x7c
        Fx_i1 = ((float)(lut_end_idx - lut_start_idx)) * ((float)(LUT_Fx_spacing_N));
 800503a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800503e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	ee07 3a90 	vmov	s15, r3
 8005048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504c:	ed97 7a03 	vldr	s14, [r7, #12]
 8005050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005054:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    }
    if (lut_idx_i2 >= lut_end_idx) {
 8005058:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800505a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800505e:	429a      	cmp	r2, r3
 8005060:	d311      	bcc.n	8005086 <interpKappa+0x242>
        lut_idx_i2 = lut_end_idx;
 8005062:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005066:	67bb      	str	r3, [r7, #120]	@ 0x78
        Fx_i2 = ((float)(lut_end_idx - lut_start_idx)) * ((float)(LUT_Fx_spacing_N));
 8005068:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800506c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507a:	ed97 7a03 	vldr	s14, [r7, #12]
 800507e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005082:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    }
    const float kappa = ((float)(LUT[lut_idx_i1])) + ((float)(LUT[lut_idx_i2] - LUT[lut_idx_i1])) * (target_Fx - (0.0f + ((float) lut_idx_add) * LUT_Fx_spacing_N)) / LUT_Fx_spacing_N;
 8005086:	4aa7      	ldr	r2, [pc, #668]	@ (8005324 <interpKappa+0x4e0>)
 8005088:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800508a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005096:	4aa3      	ldr	r2, [pc, #652]	@ (8005324 <interpKappa+0x4e0>)
 8005098:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800509a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800509e:	4619      	mov	r1, r3
 80050a0:	4aa0      	ldr	r2, [pc, #640]	@ (8005324 <interpKappa+0x4e0>)
 80050a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80050a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050a8:	1acb      	subs	r3, r1, r3
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80050b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050b4:	ee07 3a90 	vmov	s15, r3
 80050b8:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80050bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80050c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80050c4:	ed9f 6a98 	vldr	s12, [pc, #608]	@ 8005328 <interpKappa+0x4e4>
 80050c8:	ee77 7a86 	vadd.f32	s15, s15, s12
 80050cc:	ed97 6a07 	vldr	s12, [r7, #28]
 80050d0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80050d4:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80050d8:	edd7 6a03 	vldr	s13, [r7, #12]
 80050dc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80050e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050e4:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    const float Fx = Fx_i1 + (Fx_i2 - Fx_i1) * (target_Fx - (0.0f + ((float) lut_idx_add) * LUT_Fx_spacing_N)) / LUT_Fx_spacing_N;
 80050e8:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80050ec:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80050f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80050f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8005102:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005106:	eddf 6a88 	vldr	s13, [pc, #544]	@ 8005328 <interpKappa+0x4e4>
 800510a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800510e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005112:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005116:	ee67 6a27 	vmul.f32	s13, s14, s15
 800511a:	ed97 7a03 	vldr	s14, [r7, #12]
 800511e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005122:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8005126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800512a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    uint32_t lut_idx_upp_i1 = lut_start_idx_upp + lut_idx_add;
 800512e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005132:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005134:	4413      	add	r3, r2
 8005136:	66fb      	str	r3, [r7, #108]	@ 0x6c
    uint32_t lut_idx_upp_i2 = lut_start_idx_upp + lut_idx_add + 1;
 8005138:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800513c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800513e:	4413      	add	r3, r2
 8005140:	3301      	adds	r3, #1
 8005142:	66bb      	str	r3, [r7, #104]	@ 0x68
    float Fx_upp_i1 = ((float)(lut_idx_add)) * LUT_Fx_spacing_N;
 8005144:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005156:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	float Fx_upp_i2 = ((float)(lut_idx_add + 1)) * LUT_Fx_spacing_N;
 800515a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800515c:	3301      	adds	r3, #1
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005166:	ed97 7a03 	vldr	s14, [r7, #12]
 800516a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800516e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
        if (lut_idx_upp_i1 >= lut_end_idx_upp) {
 8005172:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005174:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005178:	429a      	cmp	r2, r3
 800517a:	d311      	bcc.n	80051a0 <interpKappa+0x35c>
        lut_idx_upp_i1 = lut_end_idx_upp;
 800517c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005180:	66fb      	str	r3, [r7, #108]	@ 0x6c
        Fx_upp_i1 = ((float)(lut_end_idx_upp - lut_start_idx_upp)) * LUT_Fx_spacing_N;
 8005182:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005186:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	ee07 3a90 	vmov	s15, r3
 8005190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005194:	ed97 7a03 	vldr	s14, [r7, #12]
 8005198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800519c:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    }
    if (lut_idx_upp_i2 >= lut_end_idx_upp) {
 80051a0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80051a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d311      	bcc.n	80051ce <interpKappa+0x38a>
        lut_idx_upp_i2 = lut_end_idx_upp;
 80051aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80051ae:	66bb      	str	r3, [r7, #104]	@ 0x68
        Fx_upp_i2 = ((float)(lut_end_idx_upp - lut_start_idx_upp)) * LUT_Fx_spacing_N;
 80051b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80051b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	ee07 3a90 	vmov	s15, r3
 80051be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80051c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ca:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    }
    const float kappa_upp = ((float)(LUT[lut_idx_upp_i1])) + ((float)(LUT[lut_idx_upp_i2] - LUT[lut_idx_upp_i1])) * (target_Fx - (0.0f + ((float) lut_idx_add) * LUT_Fx_spacing_N)) / LUT_Fx_spacing_N;
 80051ce:	4a55      	ldr	r2, [pc, #340]	@ (8005324 <interpKappa+0x4e0>)
 80051d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051d6:	ee07 3a90 	vmov	s15, r3
 80051da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051de:	4a51      	ldr	r2, [pc, #324]	@ (8005324 <interpKappa+0x4e0>)
 80051e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051e6:	4619      	mov	r1, r3
 80051e8:	4a4e      	ldr	r2, [pc, #312]	@ (8005324 <interpKappa+0x4e0>)
 80051ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051f0:	1acb      	subs	r3, r1, r3
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80051fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051fc:	ee07 3a90 	vmov	s15, r3
 8005200:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8005204:	edd7 7a03 	vldr	s15, [r7, #12]
 8005208:	ee66 7a27 	vmul.f32	s15, s12, s15
 800520c:	ed9f 6a46 	vldr	s12, [pc, #280]	@ 8005328 <interpKappa+0x4e4>
 8005210:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005214:	ed97 6a07 	vldr	s12, [r7, #28]
 8005218:	ee76 7a67 	vsub.f32	s15, s12, s15
 800521c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8005220:	edd7 6a03 	vldr	s13, [r7, #12]
 8005224:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800522c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    const float Fx_upp = Fx_upp_i1 + (Fx_upp_i2 - Fx_upp_i1) * (target_Fx - (0 + ((float) lut_idx_add) * LUT_Fx_spacing_N)) / LUT_Fx_spacing_N;
 8005230:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8005234:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8005238:	ee37 7a67 	vsub.f32	s14, s14, s15
 800523c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005246:	edd7 7a03 	vldr	s15, [r7, #12]
 800524a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800524e:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8005328 <interpKappa+0x4e4>
 8005252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005256:	edd7 6a07 	vldr	s13, [r7, #28]
 800525a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800525e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005262:	ed97 7a03 	vldr	s14, [r7, #12]
 8005266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800526a:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800526e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005272:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

    // Interpolate kappa along Fz dimension
    const float kappa_interped = kappa + (kappa_upp - kappa) * ((downforce_N - (minDownforce_N + ((float) Fz_ind) * downforceSpacing_N)) / downforceSpacing_N);
 8005276:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800527a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800527e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005284:	ee07 3a90 	vmov	s15, r3
 8005288:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800528c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005290:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005294:	edd7 7a05 	vldr	s15, [r7, #20]
 8005298:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800529c:	edd7 6a06 	vldr	s13, [r7, #24]
 80052a0:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80052a4:	edd7 6a04 	vldr	s13, [r7, #16]
 80052a8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80052ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b0:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80052b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052b8:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    const float Fx_achieved = Fx + (Fx_upp - Fx) * ((downforce_N - (minDownforce_N + ((float) Fz_ind) * downforceSpacing_N)) / downforceSpacing_N);
 80052bc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80052c0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80052c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ca:	ee07 3a90 	vmov	s15, r3
 80052ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80052d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80052da:	edd7 7a05 	vldr	s15, [r7, #20]
 80052de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052e2:	edd7 6a06 	vldr	s13, [r7, #24]
 80052e6:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80052ea:	edd7 6a04 	vldr	s13, [r7, #16]
 80052ee:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80052f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052f6:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80052fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052fe:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    const kappaAndFx result = {
 8005302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005304:	637b      	str	r3, [r7, #52]	@ 0x34
 8005306:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005308:	63bb      	str	r3, [r7, #56]	@ 0x38
        .kappa = kappa_interped,
        .Fx = Fx_achieved
    };
    return result;
 800530a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800530e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8005312:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005316:	e883 0003 	stmia.w	r3, {r0, r1}
 800531a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800531c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800531e:	e005      	b.n	800532c <interpKappa+0x4e8>
 8005320:	080441d0 	.word	0x080441d0
 8005324:	08022114 	.word	0x08022114
 8005328:	00000000 	.word	0x00000000
 800532c:	ee07 2a10 	vmov	s14, r2
 8005330:	ee07 3a90 	vmov	s15, r3
}
 8005334:	eeb0 0a47 	vmov.f32	s0, s14
 8005338:	eef0 0a67 	vmov.f32	s1, s15
 800533c:	3794      	adds	r7, #148	@ 0x94
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop

08005348 <getKappaByFxDownforceSlipangle>:
    float downforce_N,
    float slipangle_deg,
    uint8_t throttlePos_u8,
    float target_Fx,
    bool assumeNoTurn
) {
 8005348:	b580      	push	{r7, lr}
 800534a:	ed2d 8b02 	vpush	{d8}
 800534e:	b092      	sub	sp, #72	@ 0x48
 8005350:	af00      	add	r7, sp, #0
 8005352:	ed87 0a03 	vstr	s0, [r7, #12]
 8005356:	edc7 0a02 	vstr	s1, [r7, #8]
 800535a:	4603      	mov	r3, r0
 800535c:	ed87 1a00 	vstr	s2, [r7]
 8005360:	460a      	mov	r2, r1
 8005362:	71fb      	strb	r3, [r7, #7]
 8005364:	4613      	mov	r3, r2
 8005366:	71bb      	strb	r3, [r7, #6]
    // const float downforce_N = getDownforce(motor);
    // const float slipangle_deg = getSlipangle();
    
    if (assumeNoTurn) {
 8005368:	79bb      	ldrb	r3, [r7, #6]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <getKappaByFxDownforceSlipangle+0x2c>
        slipangle_deg = 0;
 800536e:	f04f 0300 	mov.w	r3, #0
 8005372:	60bb      	str	r3, [r7, #8]
    }
    
    uint32_t Fz_ind = (downforce_N - minDownforce_N) / downforceSpacing_N;
 8005374:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80054ec <getKappaByFxDownforceSlipangle+0x1a4>
 8005378:	edd7 7a03 	vldr	s15, [r7, #12]
 800537c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005380:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 8005384:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005388:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800538c:	ee17 3a90 	vmov	r3, s15
 8005390:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t Fz_ind_upp = Fz_ind + 1;
 8005392:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005394:	3301      	adds	r3, #1
 8005396:	643b      	str	r3, [r7, #64]	@ 0x40

    if (Fz_ind >= LUT_IDX_N_COLS_FZ) {
 8005398:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800539a:	2b28      	cmp	r3, #40	@ 0x28
 800539c:	d901      	bls.n	80053a2 <getKappaByFxDownforceSlipangle+0x5a>
        Fz_ind = LUT_IDX_N_COLS_FZ - 1;
 800539e:	2328      	movs	r3, #40	@ 0x28
 80053a0:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if (Fz_ind_upp >= LUT_IDX_N_COLS_FZ) {
 80053a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053a4:	2b28      	cmp	r3, #40	@ 0x28
 80053a6:	d901      	bls.n	80053ac <getKappaByFxDownforceSlipangle+0x64>
        Fz_ind_upp = LUT_IDX_N_COLS_FZ - 1;
 80053a8:	2328      	movs	r3, #40	@ 0x28
 80053aa:	643b      	str	r3, [r7, #64]	@ 0x40
    }
    
    uint32_t slipangle_ind = (slipangle_deg - minSlipangle_deg) / slipangleSpacing_deg;
 80053ac:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 80054f0 <getKappaByFxDownforceSlipangle+0x1a8>
 80053b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80053b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80053b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053c4:	ee17 3a90 	vmov	r3, s15
 80053c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint32_t slipangle_ind_upp = slipangle_ind + 1;
 80053ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053cc:	3301      	adds	r3, #1
 80053ce:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (slipangle_ind >= LUT_IDX_N_ROWS_SLIPANGLE) {
 80053d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053d2:	2b14      	cmp	r3, #20
 80053d4:	d901      	bls.n	80053da <getKappaByFxDownforceSlipangle+0x92>
        slipangle_ind = LUT_IDX_N_ROWS_SLIPANGLE - 1;
 80053d6:	2314      	movs	r3, #20
 80053d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
    if (slipangle_ind_upp >= LUT_IDX_N_ROWS_SLIPANGLE) {
 80053da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053dc:	2b14      	cmp	r3, #20
 80053de:	d901      	bls.n	80053e4 <getKappaByFxDownforceSlipangle+0x9c>
        slipangle_ind_upp = LUT_IDX_N_ROWS_SLIPANGLE - 1;
 80053e0:	2314      	movs	r3, #20
 80053e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    // Get interpolated kappa at the lower slip angle
    // NOTE: due to the nature of max Fx decreasing as slip angle increases, we need to interp on the upper Fx first for this Fx correction to work
	const kappaAndFx kappa_and_Fx_interped_upp = interpKappa(slipangle_ind_upp, Fz_ind, Fz_ind_upp, throttlePos_u8, target_Fx, downforce_N, minDownforce_N, downforceSpacing_N, LUT_Fx_spacing_N);
 80053e4:	79fb      	ldrb	r3, [r7, #7]
 80053e6:	eddf 7a41 	vldr	s15, [pc, #260]	@ 80054ec <getKappaByFxDownforceSlipangle+0x1a4>
 80053ea:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80053ee:	eef3 6a03 	vmov.f32	s13, #51	@ 0x41980000  19.0
 80053f2:	eeb0 2a66 	vmov.f32	s4, s13
 80053f6:	eef0 1a47 	vmov.f32	s3, s14
 80053fa:	eeb0 1a67 	vmov.f32	s2, s15
 80053fe:	edd7 0a03 	vldr	s1, [r7, #12]
 8005402:	ed97 0a00 	vldr	s0, [r7]
 8005406:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005408:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800540a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800540c:	f7ff fd1a 	bl	8004e44 <interpKappa>
 8005410:	eeb0 7a40 	vmov.f32	s14, s0
 8005414:	eef0 7a60 	vmov.f32	s15, s1
 8005418:	ed87 7a07 	vstr	s14, [r7, #28]
 800541c:	edc7 7a08 	vstr	s15, [r7, #32]
	const float kappa_interped_upp = kappa_and_Fx_interped_upp.kappa;
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	637b      	str	r3, [r7, #52]	@ 0x34
	const float Fx_achieved = kappa_and_Fx_interped_upp.Fx;
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	633b      	str	r3, [r7, #48]	@ 0x30
	const float new_target_Fx = target_Fx - (Fx_achieved - target_Fx);
 8005428:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800542c:	edd7 7a00 	vldr	s15, [r7]
 8005430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005434:	ed97 7a00 	vldr	s14, [r7]
 8005438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800543c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	const kappaAndFx kappa_and_Fx_interped = interpKappa(slipangle_ind, Fz_ind, Fz_ind_upp, throttlePos_u8, new_target_Fx, downforce_N, minDownforce_N, downforceSpacing_N, LUT_Fx_spacing_N);
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 80054ec <getKappaByFxDownforceSlipangle+0x1a4>
 8005446:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800544a:	eef3 6a03 	vmov.f32	s13, #51	@ 0x41980000  19.0
 800544e:	eeb0 2a66 	vmov.f32	s4, s13
 8005452:	eef0 1a47 	vmov.f32	s3, s14
 8005456:	eeb0 1a67 	vmov.f32	s2, s15
 800545a:	edd7 0a03 	vldr	s1, [r7, #12]
 800545e:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8005462:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005464:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005466:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005468:	f7ff fcec 	bl	8004e44 <interpKappa>
 800546c:	eeb0 7a40 	vmov.f32	s14, s0
 8005470:	eef0 7a60 	vmov.f32	s15, s1
 8005474:	ed87 7a05 	vstr	s14, [r7, #20]
 8005478:	edc7 7a06 	vstr	s15, [r7, #24]
	const float kappa_interped = kappa_and_Fx_interped.kappa;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Interpolate kappa along slip angle dimension
    const float kappa_result = kappa_interped + (kappa_interped_upp - kappa_interped) * (slipangle_deg - (minSlipangle_deg + ((float) slipangle_ind) * slipangleSpacing_deg)) / slipangleSpacing_deg;
 8005480:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8005484:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005488:	ee37 7a67 	vsub.f32	s14, s14, s15
 800548c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800549a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800549e:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80054f0 <getKappaByFxDownforceSlipangle+0x1a8>
 80054a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054a6:	edd7 6a02 	vldr	s13, [r7, #8]
 80054aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80054ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054ba:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80054be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054c2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return kappa_result * LUT_granularity * getKappaScaleFactor();
 80054c6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80054f4 <getKappaByFxDownforceSlipangle+0x1ac>
 80054ca:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80054ce:	ee27 8a27 	vmul.f32	s16, s14, s15
 80054d2:	f7ff facd 	bl	8004a70 <getKappaScaleFactor>
 80054d6:	eef0 7a40 	vmov.f32	s15, s0
 80054da:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 80054de:	eeb0 0a67 	vmov.f32	s0, s15
 80054e2:	3748      	adds	r7, #72	@ 0x48
 80054e4:	46bd      	mov	sp, r7
 80054e6:	ecbd 8b02 	vpop	{d8}
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	43180e15 	.word	0x43180e15
 80054f0:	00000000 	.word	0x00000000
 80054f4:	37753b71 	.word	0x37753b71

080054f8 <interpKappaIntuitive>:
    float target_Fx,
    float downforce_N,
    float minDownforce_N,
    float downforceSpacing_N,
    float LUT_Fx_spacing_N
) {
 80054f8:	b480      	push	{r7}
 80054fa:	b0a3      	sub	sp, #140	@ 0x8c
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6278      	str	r0, [r7, #36]	@ 0x24
 8005500:	6239      	str	r1, [r7, #32]
 8005502:	61fa      	str	r2, [r7, #28]
 8005504:	ed87 0a06 	vstr	s0, [r7, #24]
 8005508:	edc7 0a05 	vstr	s1, [r7, #20]
 800550c:	ed87 1a04 	vstr	s2, [r7, #16]
 8005510:	edc7 1a03 	vstr	s3, [r7, #12]
 8005514:	ed87 2a02 	vstr	s4, [r7, #8]
    // Determine the start and end indices in LUT for given slipangle_ind and Fz_ind
    uint32_t lut_start_idx = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint32_t lut_end_idx = 0;
 800551e:	2300      	movs	r3, #0
 8005520:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (slipangle_ind == 0) { 
 8005524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005526:	2b00      	cmp	r3, #0
 8005528:	d123      	bne.n	8005572 <interpKappaIntuitive+0x7a>
        if (Fz_ind == 0)
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d103      	bne.n	8005538 <interpKappaIntuitive+0x40>
        {
            // if both slipangle_ind and Fz_ind are 0, then start idx is 0
            lut_start_idx = 0;
 8005530:	2300      	movs	r3, #0
 8005532:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005536:	e00e      	b.n	8005556 <interpKappaIntuitive+0x5e>
        } else
        {
            // if Fz_ind != 0 , then the start index is located at +1 of the previous index's value
            lut_start_idx = LUT_idx[slipangle_ind][Fz_ind-1]+1;
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	1e59      	subs	r1, r3, #1
 800553c:	483e      	ldr	r0, [pc, #248]	@ (8005638 <interpKappaIntuitive+0x140>)
 800553e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	4413      	add	r3, r2
 800554a:	440b      	add	r3, r1
 800554c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005550:	3301      	adds	r3, #1
 8005552:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        }
        // the end idx is located at the slipangle_ind and Fz_ind
        lut_end_idx = LUT_idx[slipangle_ind][Fz_ind];
 8005556:	4938      	ldr	r1, [pc, #224]	@ (8005638 <interpKappaIntuitive+0x140>)
 8005558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800555a:	4613      	mov	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	4413      	add	r3, r2
 8005564:	6a3a      	ldr	r2, [r7, #32]
 8005566:	4413      	add	r3, r2
 8005568:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800556c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005570:	e02b      	b.n	80055ca <interpKappaIntuitive+0xd2>
    } else 
    {
        if (Fz_ind == 0)
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10c      	bne.n	8005592 <interpKappaIntuitive+0x9a>
        {
            // if slipangle_ind != 0 but Fz_ind = 0, then the start idx is located at +1 of largest Fz_ind of the previous row
            lut_start_idx = LUT_idx[slipangle_ind-1][LUT_IDX_N_COLS_FZ-1]+1;
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557a:	3b01      	subs	r3, #1
 800557c:	4a2e      	ldr	r2, [pc, #184]	@ (8005638 <interpKappaIntuitive+0x140>)
 800557e:	21a4      	movs	r1, #164	@ 0xa4
 8005580:	fb01 f303 	mul.w	r3, r1, r3
 8005584:	4413      	add	r3, r2
 8005586:	33a0      	adds	r3, #160	@ 0xa0
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3301      	adds	r3, #1
 800558c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005590:	e00e      	b.n	80055b0 <interpKappaIntuitive+0xb8>
        } else
        {
            // if Fz_ind != 0 , then the start index is located at +1 of the previous index's value
            lut_start_idx = LUT_idx[slipangle_ind][Fz_ind-1]+1;
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	1e59      	subs	r1, r3, #1
 8005596:	4828      	ldr	r0, [pc, #160]	@ (8005638 <interpKappaIntuitive+0x140>)
 8005598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	4413      	add	r3, r2
 80055a4:	440b      	add	r3, r1
 80055a6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80055aa:	3301      	adds	r3, #1
 80055ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        }
        // the end idx is located at the slipangle_ind and Fz_ind
        lut_end_idx = LUT_idx[slipangle_ind][Fz_ind];
 80055b0:	4921      	ldr	r1, [pc, #132]	@ (8005638 <interpKappaIntuitive+0x140>)
 80055b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055b4:	4613      	mov	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	4413      	add	r3, r2
 80055be:	6a3a      	ldr	r2, [r7, #32]
 80055c0:	4413      	add	r3, r2
 80055c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80055c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    }
    
    // Determine the start and end indices in LUT for given slipangle_ind and Fz_ind_upp
    uint32_t lut_start_idx_upp = 0;
 80055ca:	2300      	movs	r3, #0
 80055cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t lut_end_idx_upp = 0;
 80055ce:	2300      	movs	r3, #0
 80055d0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (slipangle_ind == 0) {
 80055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d120      	bne.n	800561a <interpKappaIntuitive+0x122>
        if (Fz_ind_upp == 0)
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d102      	bne.n	80055e4 <interpKappaIntuitive+0xec>
        {
            // if both slipangle_ind and Fz_ind are 0, then start idx is 0
            lut_start_idx_upp = 0;
 80055de:	2300      	movs	r3, #0
 80055e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80055e2:	e00d      	b.n	8005600 <interpKappaIntuitive+0x108>
        } else
        {
            // if Fz_ind != 0 , then the start index is located at +1 of the previous index's value
            lut_start_idx_upp = LUT_idx[slipangle_ind][Fz_ind_upp-1]+1;
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	1e59      	subs	r1, r3, #1
 80055e8:	4813      	ldr	r0, [pc, #76]	@ (8005638 <interpKappaIntuitive+0x140>)
 80055ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ec:	4613      	mov	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	4413      	add	r3, r2
 80055f6:	440b      	add	r3, r1
 80055f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80055fc:	3301      	adds	r3, #1
 80055fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
        }
        // the end idx is located at the slipangle_ind and Fz_ind
        lut_end_idx_upp = LUT_idx[slipangle_ind][Fz_ind_upp];
 8005600:	490d      	ldr	r1, [pc, #52]	@ (8005638 <interpKappaIntuitive+0x140>)
 8005602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005604:	4613      	mov	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	4413      	add	r3, r2
 800560e:	69fa      	ldr	r2, [r7, #28]
 8005610:	4413      	add	r3, r2
 8005612:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005616:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005618:	e02a      	b.n	8005670 <interpKappaIntuitive+0x178>
    } else 
    {
        if (Fz_ind_upp == 0)
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10d      	bne.n	800563c <interpKappaIntuitive+0x144>
        {
            // if slipangle_ind != 0 but Fz_ind = 0, then the start idx is located at +1 of largest Fz_ind of the previous row
            lut_start_idx_upp = LUT_idx[slipangle_ind-1][LUT_IDX_N_COLS_FZ-1]+1;
 8005620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005622:	3b01      	subs	r3, #1
 8005624:	4a04      	ldr	r2, [pc, #16]	@ (8005638 <interpKappaIntuitive+0x140>)
 8005626:	21a4      	movs	r1, #164	@ 0xa4
 8005628:	fb01 f303 	mul.w	r3, r1, r3
 800562c:	4413      	add	r3, r2
 800562e:	33a0      	adds	r3, #160	@ 0xa0
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3301      	adds	r3, #1
 8005634:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005636:	e00f      	b.n	8005658 <interpKappaIntuitive+0x160>
 8005638:	080441d0 	.word	0x080441d0
        } else
        {
            // if Fz_ind != 0 , then the start index is located at +1 of the previous index's value
            lut_start_idx_upp = LUT_idx[slipangle_ind][Fz_ind_upp-1]+1;
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	1e59      	subs	r1, r3, #1
 8005640:	48da      	ldr	r0, [pc, #872]	@ (80059ac <interpKappaIntuitive+0x4b4>)
 8005642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005644:	4613      	mov	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4413      	add	r3, r2
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	4413      	add	r3, r2
 800564e:	440b      	add	r3, r1
 8005650:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005654:	3301      	adds	r3, #1
 8005656:	67fb      	str	r3, [r7, #124]	@ 0x7c
        }
        // the end idx is located at the slipangle_ind and Fz_ind
        lut_end_idx_upp = LUT_idx[slipangle_ind][Fz_ind_upp];
 8005658:	49d4      	ldr	r1, [pc, #848]	@ (80059ac <interpKappaIntuitive+0x4b4>)
 800565a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800565c:	4613      	mov	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	4413      	add	r3, r2
 8005666:	69fa      	ldr	r2, [r7, #28]
 8005668:	4413      	add	r3, r2
 800566a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800566e:	67bb      	str	r3, [r7, #120]	@ 0x78
    }

    // Compute the idx add needs to locate the target_Fx for it's associated kappa
    const uint32_t lut_idx_add = (uint32_t) (target_Fx / LUT_Fx_spacing_N);
 8005670:	edd7 6a06 	vldr	s13, [r7, #24]
 8005674:	ed97 7a02 	vldr	s14, [r7, #8]
 8005678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800567c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005680:	ee17 3a90 	vmov	r3, s15
 8005684:	657b      	str	r3, [r7, #84]	@ 0x54

    // Interpolate for the kappas associated with the target_Fx for Fz_ind
    uint32_t lut_idx_i1 = lut_start_idx + lut_idx_add;
 8005686:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800568a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800568c:	4413      	add	r3, r2
 800568e:	677b      	str	r3, [r7, #116]	@ 0x74
    uint32_t lut_idx_i2 = lut_start_idx + lut_idx_add + 1;
 8005690:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005696:	4413      	add	r3, r2
 8005698:	3301      	adds	r3, #1
 800569a:	673b      	str	r3, [r7, #112]	@ 0x70
    float Fx_i1 = ((float)(lut_idx_add * LUT_Fx_spacing_N));
 800569c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800569e:	ee07 3a90 	vmov	s15, r3
 80056a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80056aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ae:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    float Fx_i2 = ((float)((lut_idx_add + 1) * LUT_Fx_spacing_N));
 80056b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056b4:	3301      	adds	r3, #1
 80056b6:	ee07 3a90 	vmov	s15, r3
 80056ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056be:	ed97 7a02 	vldr	s14, [r7, #8]
 80056c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c6:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    if (lut_idx_i1 >= lut_end_idx) {
 80056ca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80056cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d311      	bcc.n	80056f8 <interpKappaIntuitive+0x200>
        lut_idx_i1 = lut_end_idx;
 80056d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80056d8:	677b      	str	r3, [r7, #116]	@ 0x74
        Fx_i1 = ((float)(lut_end_idx - lut_start_idx)) * ((float)(LUT_Fx_spacing_N));
 80056da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	ee07 3a90 	vmov	s15, r3
 80056e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80056f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056f4:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    }
    if (lut_idx_i2 >= lut_end_idx) {
 80056f8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80056fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80056fe:	429a      	cmp	r2, r3
 8005700:	d311      	bcc.n	8005726 <interpKappaIntuitive+0x22e>
        lut_idx_i2 = lut_end_idx;
 8005702:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005706:	673b      	str	r3, [r7, #112]	@ 0x70
        Fx_i2 = ((float)(lut_end_idx - lut_start_idx)) * ((float)(LUT_Fx_spacing_N));
 8005708:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800570c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	ee07 3a90 	vmov	s15, r3
 8005716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800571a:	ed97 7a02 	vldr	s14, [r7, #8]
 800571e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005722:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    }
    float kappa = ((float)(LUT[lut_idx_i1])) + ((float)(LUT[lut_idx_i2] - LUT[lut_idx_i1])) * (target_Fx - (0.0f + ((float) lut_idx_add) * LUT_Fx_spacing_N)) / LUT_Fx_spacing_N;
 8005726:	4aa2      	ldr	r2, [pc, #648]	@ (80059b0 <interpKappaIntuitive+0x4b8>)
 8005728:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800572a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800572e:	ee07 3a90 	vmov	s15, r3
 8005732:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005736:	4a9e      	ldr	r2, [pc, #632]	@ (80059b0 <interpKappaIntuitive+0x4b8>)
 8005738:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800573a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800573e:	4619      	mov	r1, r3
 8005740:	4a9b      	ldr	r2, [pc, #620]	@ (80059b0 <interpKappaIntuitive+0x4b8>)
 8005742:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005744:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005748:	1acb      	subs	r3, r1, r3
 800574a:	ee07 3a90 	vmov	s15, r3
 800574e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005754:	ee07 3a90 	vmov	s15, r3
 8005758:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800575c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005760:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005764:	ed9f 6a93 	vldr	s12, [pc, #588]	@ 80059b4 <interpKappaIntuitive+0x4bc>
 8005768:	ee77 7a86 	vadd.f32	s15, s15, s12
 800576c:	ed97 6a06 	vldr	s12, [r7, #24]
 8005770:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005774:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8005778:	edd7 6a02 	vldr	s13, [r7, #8]
 800577c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005784:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    float Fx = Fx_i1 + (Fx_i2 - Fx_i1) * (target_Fx - (0.0f + ((float) lut_idx_add) * LUT_Fx_spacing_N)) / LUT_Fx_spacing_N;
 8005788:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 800578c:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8005790:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005796:	ee07 3a90 	vmov	s15, r3
 800579a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800579e:	edd7 7a02 	vldr	s15, [r7, #8]
 80057a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057a6:	eddf 6a83 	vldr	s13, [pc, #524]	@ 80059b4 <interpKappaIntuitive+0x4bc>
 80057aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ae:	edd7 6a06 	vldr	s13, [r7, #24]
 80057b2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80057b6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80057ba:	ed97 7a02 	vldr	s14, [r7, #8]
 80057be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057c2:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80057c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057ca:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

    // Interpolate for the kappas associated with the target_Fx for Fz_ind_upp
    uint32_t lut_idx_upp_i1 = lut_start_idx_upp + lut_idx_add;
 80057ce:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80057d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057d2:	4413      	add	r3, r2
 80057d4:	667b      	str	r3, [r7, #100]	@ 0x64
    uint32_t lut_idx_upp_i2 = lut_start_idx_upp + lut_idx_add + 1;
 80057d6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80057d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057da:	4413      	add	r3, r2
 80057dc:	3301      	adds	r3, #1
 80057de:	663b      	str	r3, [r7, #96]	@ 0x60
    float Fx_upp_i1 = ((float)(lut_idx_add)) * LUT_Fx_spacing_N;
 80057e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80057ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f2:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	float Fx_upp_i2 = ((float)(lut_idx_add + 1)) * LUT_Fx_spacing_N;
 80057f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057f8:	3301      	adds	r3, #1
 80057fa:	ee07 3a90 	vmov	s15, r3
 80057fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005802:	ed97 7a02 	vldr	s14, [r7, #8]
 8005806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800580a:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
        if (lut_idx_upp_i1 >= lut_end_idx_upp) {
 800580e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005810:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005812:	429a      	cmp	r2, r3
 8005814:	d30e      	bcc.n	8005834 <interpKappaIntuitive+0x33c>
        lut_idx_upp_i1 = lut_end_idx_upp;
 8005816:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005818:	667b      	str	r3, [r7, #100]	@ 0x64
        Fx_upp_i1 = ((float)(lut_end_idx_upp - lut_start_idx_upp)) * LUT_Fx_spacing_N;
 800581a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800581c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	ee07 3a90 	vmov	s15, r3
 8005824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005828:	ed97 7a02 	vldr	s14, [r7, #8]
 800582c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005830:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    }
    if (lut_idx_upp_i2 >= lut_end_idx_upp) {
 8005834:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005836:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005838:	429a      	cmp	r2, r3
 800583a:	d30e      	bcc.n	800585a <interpKappaIntuitive+0x362>
        lut_idx_upp_i2 = lut_end_idx_upp;
 800583c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800583e:	663b      	str	r3, [r7, #96]	@ 0x60
        Fx_upp_i2 = ((float)(lut_end_idx_upp - lut_start_idx_upp)) * LUT_Fx_spacing_N;
 8005840:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005842:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005856:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    }
    const float kappa_upp = ((float)(LUT[lut_idx_upp_i1])) + ((float)(LUT[lut_idx_upp_i2] - LUT[lut_idx_upp_i1])) * (target_Fx - (0.0f + ((float) lut_idx_add) * LUT_Fx_spacing_N)) / LUT_Fx_spacing_N;
 800585a:	4a55      	ldr	r2, [pc, #340]	@ (80059b0 <interpKappaIntuitive+0x4b8>)
 800585c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800585e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005862:	ee07 3a90 	vmov	s15, r3
 8005866:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800586a:	4a51      	ldr	r2, [pc, #324]	@ (80059b0 <interpKappaIntuitive+0x4b8>)
 800586c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800586e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005872:	4619      	mov	r1, r3
 8005874:	4a4e      	ldr	r2, [pc, #312]	@ (80059b0 <interpKappaIntuitive+0x4b8>)
 8005876:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800587c:	1acb      	subs	r3, r1, r3
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005888:	ee07 3a90 	vmov	s15, r3
 800588c:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8005890:	edd7 7a02 	vldr	s15, [r7, #8]
 8005894:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005898:	ed9f 6a46 	vldr	s12, [pc, #280]	@ 80059b4 <interpKappaIntuitive+0x4bc>
 800589c:	ee77 7a86 	vadd.f32	s15, s15, s12
 80058a0:	ed97 6a06 	vldr	s12, [r7, #24]
 80058a4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80058a8:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80058ac:	edd7 6a02 	vldr	s13, [r7, #8]
 80058b0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80058b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058b8:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    const float Fx_upp = Fx_upp_i1 + (Fx_upp_i2 - Fx_upp_i1) * (target_Fx - (0 + ((float) lut_idx_add) * LUT_Fx_spacing_N)) / LUT_Fx_spacing_N;
 80058bc:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80058c0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80058c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80058c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058ca:	ee07 3a90 	vmov	s15, r3
 80058ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80058d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058da:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80059b4 <interpKappaIntuitive+0x4bc>
 80058de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e2:	edd7 6a06 	vldr	s13, [r7, #24]
 80058e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80058ea:	ee67 6a27 	vmul.f32	s13, s14, s15
 80058ee:	ed97 7a02 	vldr	s14, [r7, #8]
 80058f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058f6:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80058fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058fe:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

    // Interpolate kappa along Fz dimension
    const float kappa_interped = kappa + (kappa_upp - kappa) * ((downforce_N - (minDownforce_N + ((float) Fz_ind) * downforceSpacing_N)) / downforceSpacing_N);
 8005902:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8005906:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800590a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	ee07 3a90 	vmov	s15, r3
 8005914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005918:	edd7 7a03 	vldr	s15, [r7, #12]
 800591c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005920:	edd7 7a04 	vldr	s15, [r7, #16]
 8005924:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005928:	edd7 6a05 	vldr	s13, [r7, #20]
 800592c:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8005930:	edd7 6a03 	vldr	s13, [r7, #12]
 8005934:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8005940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005944:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    const float Fx_achieved = Fx + (Fx_upp - Fx) * ((downforce_N - (minDownforce_N + ((float) Fz_ind) * downforceSpacing_N)) / downforceSpacing_N);
 8005948:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800594c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8005950:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	ee07 3a90 	vmov	s15, r3
 800595a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800595e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005962:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005966:	edd7 7a04 	vldr	s15, [r7, #16]
 800596a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800596e:	edd7 6a05 	vldr	s13, [r7, #20]
 8005972:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8005976:	edd7 6a03 	vldr	s13, [r7, #12]
 800597a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800597e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005982:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8005986:	ee77 7a27 	vadd.f32	s15, s14, s15
 800598a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    
    // Package the resulting kappa and the Fx associated with the Kappa
    const kappaAndFx result = {
 800598e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005990:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005994:	633b      	str	r3, [r7, #48]	@ 0x30
        .kappa = kappa_interped,
        .Fx = Fx_achieved
    };
    return result;
 8005996:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800599a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800599e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80059a2:	e883 0003 	stmia.w	r3, {r0, r1}
 80059a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059aa:	e005      	b.n	80059b8 <interpKappaIntuitive+0x4c0>
 80059ac:	080441d0 	.word	0x080441d0
 80059b0:	08022114 	.word	0x08022114
 80059b4:	00000000 	.word	0x00000000
 80059b8:	ee07 2a10 	vmov	s14, r2
 80059bc:	ee07 3a90 	vmov	s15, r3
}
 80059c0:	eeb0 0a47 	vmov.f32	s0, s14
 80059c4:	eef0 0a67 	vmov.f32	s1, s15
 80059c8:	378c      	adds	r7, #140	@ 0x8c
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop

080059d4 <getKappaFxGlobalMax>:
*/
kappaAndFx getKappaFxGlobalMax (
    motorLocation_t motor,
    uint8_t throttlePos_u8,
    bool assumeNoTurn
) {
 80059d4:	b580      	push	{r7, lr}
 80059d6:	ed2d 8b02 	vpush	{d8}
 80059da:	b09a      	sub	sp, #104	@ 0x68
 80059dc:	af00      	add	r7, sp, #0
 80059de:	4603      	mov	r3, r0
 80059e0:	73fb      	strb	r3, [r7, #15]
 80059e2:	460b      	mov	r3, r1
 80059e4:	73bb      	strb	r3, [r7, #14]
 80059e6:	4613      	mov	r3, r2
 80059e8:	737b      	strb	r3, [r7, #13]
    configASSERT(motor < MOTOR_LEN);
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
 80059ec:	2b03      	cmp	r3, #3
 80059ee:	d904      	bls.n	80059fa <getKappaFxGlobalMax+0x26>
 80059f0:	f240 21a6 	movw	r1, #678	@ 0x2a6
 80059f4:	48aa      	ldr	r0, [pc, #680]	@ (8005ca0 <getKappaFxGlobalMax+0x2cc>)
 80059f6:	f008 fb20 	bl	800e03a <cmr_panic>

    float downforce_N = 0.0f;
 80059fa:	f04f 0300 	mov.w	r3, #0
 80059fe:	667b      	str	r3, [r7, #100]	@ 0x64
    if (assumeNoTurn) {
 8005a00:	7b7b      	ldrb	r3, [r7, #13]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d038      	beq.n	8005a78 <getKappaFxGlobalMax+0xa4>
        switch (motor) {
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
 8005a08:	2b03      	cmp	r3, #3
 8005a0a:	d831      	bhi.n	8005a70 <getKappaFxGlobalMax+0x9c>
 8005a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a14 <getKappaFxGlobalMax+0x40>)
 8005a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a12:	bf00      	nop
 8005a14:	08005a25 	.word	0x08005a25
 8005a18:	08005a4b 	.word	0x08005a4b
 8005a1c:	08005a25 	.word	0x08005a25
 8005a20:	08005a4b 	.word	0x08005a4b
            case MOTOR_FL:
            case MOTOR_FR:
                // take the average of the downforce on front wheels
                downforce_N = (getDownforce(MOTOR_FL) + getDownforce(MOTOR_FR)) * 0.5f;
 8005a24:	2002      	movs	r0, #2
 8005a26:	f7ff f8e9 	bl	8004bfc <getDownforce>
 8005a2a:	eeb0 8a40 	vmov.f32	s16, s0
 8005a2e:	2000      	movs	r0, #0
 8005a30:	f7ff f8e4 	bl	8004bfc <getDownforce>
 8005a34:	eef0 7a40 	vmov.f32	s15, s0
 8005a38:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005a3c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a44:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
                break;
 8005a48:	e01c      	b.n	8005a84 <getKappaFxGlobalMax+0xb0>

            case MOTOR_RL:
            case MOTOR_RR:
                // take the average of the downforce on rear wheels
                downforce_N = (getDownforce(MOTOR_RL) + getDownforce(MOTOR_RR)) * 0.5f;
 8005a4a:	2003      	movs	r0, #3
 8005a4c:	f7ff f8d6 	bl	8004bfc <getDownforce>
 8005a50:	eeb0 8a40 	vmov.f32	s16, s0
 8005a54:	2001      	movs	r0, #1
 8005a56:	f7ff f8d1 	bl	8004bfc <getDownforce>
 8005a5a:	eef0 7a40 	vmov.f32	s15, s0
 8005a5e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005a62:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005a66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a6a:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
                break;
 8005a6e:	e009      	b.n	8005a84 <getKappaFxGlobalMax+0xb0>

            default:
                downforce_N = 0.0f;
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	667b      	str	r3, [r7, #100]	@ 0x64
                break;
 8005a76:	e005      	b.n	8005a84 <getKappaFxGlobalMax+0xb0>
        }
    } else {
        downforce_N = getDownforce(motor);
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff f8be 	bl	8004bfc <getDownforce>
 8005a80:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
    }

    const float slipangle_deg = assumeNoTurn ? 0.0f : getSlipangle();
 8005a84:	7b7b      	ldrb	r3, [r7, #13]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d104      	bne.n	8005a94 <getKappaFxGlobalMax+0xc0>
 8005a8a:	f7ff f975 	bl	8004d78 <getSlipangle>
 8005a8e:	eef0 7a40 	vmov.f32	s15, s0
 8005a92:	e001      	b.n	8005a98 <getKappaFxGlobalMax+0xc4>
 8005a94:	eddf 7a83 	vldr	s15, [pc, #524]	@ 8005ca4 <getKappaFxGlobalMax+0x2d0>
 8005a98:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

    // Get the Fx requested associated with throttlePos_u8
    const float target_Fx = LUT_max_fx * ((float) throttlePos_u8) / ((float) UINT8_MAX);
 8005a9c:	7bbb      	ldrb	r3, [r7, #14]
 8005a9e:	ee07 3a90 	vmov	s15, r3
 8005aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa6:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8005ca8 <getKappaFxGlobalMax+0x2d4>
 8005aaa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005aae:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005cac <getKappaFxGlobalMax+0x2d8>
 8005ab2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ab6:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    
    // Covert the downforce to indexes for the LUT
    uint32_t Fz_ind = (downforce_N - minDownforce_N) / downforceSpacing_N;
 8005aba:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8005cb0 <getKappaFxGlobalMax+0x2dc>
 8005abe:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8005ac2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005ac6:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 8005aca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ad2:	ee17 3a90 	vmov	r3, s15
 8005ad6:	663b      	str	r3, [r7, #96]	@ 0x60
    uint32_t Fz_ind_upp = Fz_ind + 1;
 8005ad8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ada:	3301      	adds	r3, #1
 8005adc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    // Ensure the Fz indices are within bounds
    if (Fz_ind >= LUT_IDX_N_COLS_FZ) {
 8005ade:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ae0:	2b28      	cmp	r3, #40	@ 0x28
 8005ae2:	d901      	bls.n	8005ae8 <getKappaFxGlobalMax+0x114>
        Fz_ind = LUT_IDX_N_COLS_FZ - 1;
 8005ae4:	2328      	movs	r3, #40	@ 0x28
 8005ae6:	663b      	str	r3, [r7, #96]	@ 0x60
    }
    if (Fz_ind_upp >= LUT_IDX_N_COLS_FZ) {
 8005ae8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005aea:	2b28      	cmp	r3, #40	@ 0x28
 8005aec:	d901      	bls.n	8005af2 <getKappaFxGlobalMax+0x11e>
        Fz_ind_upp = LUT_IDX_N_COLS_FZ - 1;
 8005aee:	2328      	movs	r3, #40	@ 0x28
 8005af0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }

    // Convert slip angle to indexes for the lUT
    uint32_t slipangle_ind = (slipangle_deg - minSlipangle_deg) / slipangleSpacing_deg;
 8005af2:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8005ca4 <getKappaFxGlobalMax+0x2d0>
 8005af6:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8005afa:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b0a:	ee17 3a90 	vmov	r3, s15
 8005b0e:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint32_t slipangle_ind_upp = slipangle_ind + 1;
 8005b10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b12:	3301      	adds	r3, #1
 8005b14:	657b      	str	r3, [r7, #84]	@ 0x54

    // Ensure the slip angle indices are within bounds
    if (slipangle_ind >= LUT_IDX_N_ROWS_SLIPANGLE) {
 8005b16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b18:	2b14      	cmp	r3, #20
 8005b1a:	d901      	bls.n	8005b20 <getKappaFxGlobalMax+0x14c>
        slipangle_ind = LUT_IDX_N_ROWS_SLIPANGLE - 1;
 8005b1c:	2314      	movs	r3, #20
 8005b1e:	65bb      	str	r3, [r7, #88]	@ 0x58
    }
    if (slipangle_ind_upp >= LUT_IDX_N_ROWS_SLIPANGLE) {
 8005b20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b22:	2b14      	cmp	r3, #20
 8005b24:	d901      	bls.n	8005b2a <getKappaFxGlobalMax+0x156>
        slipangle_ind_upp = LUT_IDX_N_ROWS_SLIPANGLE - 1;
 8005b26:	2314      	movs	r3, #20
 8005b28:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    // Get interpolated kappa at the two slip angles
    // NOTE: due to the nature of max Fx decreasing as slip angle increases, we need to interp on the upper slip angle first for this Fx correction to work
	const kappaAndFx kappa_and_Fx_interped_upp = interpKappaIntuitive(slipangle_ind_upp, Fz_ind, Fz_ind_upp, target_Fx, downforce_N, minDownforce_N, downforceSpacing_N, LUT_Fx_spacing_N);
 8005b2a:	eddf 7a61 	vldr	s15, [pc, #388]	@ 8005cb0 <getKappaFxGlobalMax+0x2dc>
 8005b2e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8005b32:	eef3 6a03 	vmov.f32	s13, #51	@ 0x41980000  19.0
 8005b36:	eeb0 2a66 	vmov.f32	s4, s13
 8005b3a:	eef0 1a47 	vmov.f32	s3, s14
 8005b3e:	eeb0 1a67 	vmov.f32	s2, s15
 8005b42:	edd7 0a19 	vldr	s1, [r7, #100]	@ 0x64
 8005b46:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8005b4a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005b4c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005b4e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005b50:	f7ff fcd2 	bl	80054f8 <interpKappaIntuitive>
 8005b54:	eeb0 7a40 	vmov.f32	s14, s0
 8005b58:	eef0 7a60 	vmov.f32	s15, s1
 8005b5c:	ed87 7a08 	vstr	s14, [r7, #32]
 8005b60:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	const float kappa_interped_upp = kappa_and_Fx_interped_upp.kappa;
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	64bb      	str	r3, [r7, #72]	@ 0x48
	const float Fx_achieved = kappa_and_Fx_interped_upp.Fx; // This Fx comes from a higher slipangle condition 
 8005b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6a:	647b      	str	r3, [r7, #68]	@ 0x44
	const float new_target_Fx = target_Fx - (Fx_achieved - target_Fx);
 8005b6c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8005b70:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8005b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b78:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8005b7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b80:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	const kappaAndFx kappa_and_Fx_interped = interpKappaIntuitive(slipangle_ind, Fz_ind, Fz_ind_upp, new_target_Fx, downforce_N, minDownforce_N, downforceSpacing_N, LUT_Fx_spacing_N);
 8005b84:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8005cb0 <getKappaFxGlobalMax+0x2dc>
 8005b88:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8005b8c:	eef3 6a03 	vmov.f32	s13, #51	@ 0x41980000  19.0
 8005b90:	eeb0 2a66 	vmov.f32	s4, s13
 8005b94:	eef0 1a47 	vmov.f32	s3, s14
 8005b98:	eeb0 1a67 	vmov.f32	s2, s15
 8005b9c:	edd7 0a19 	vldr	s1, [r7, #100]	@ 0x64
 8005ba0:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8005ba4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005ba6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005ba8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005baa:	f7ff fca5 	bl	80054f8 <interpKappaIntuitive>
 8005bae:	eeb0 7a40 	vmov.f32	s14, s0
 8005bb2:	eef0 7a60 	vmov.f32	s15, s1
 8005bb6:	ed87 7a06 	vstr	s14, [r7, #24]
 8005bba:	edc7 7a07 	vstr	s15, [r7, #28]
	const float kappa_interped = kappa_and_Fx_interped.kappa;
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    const float Fx_interped = kappa_and_Fx_interped.Fx;
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Interpolate kappa between the slip angles
    const float kappa_result = kappa_interped + (kappa_interped_upp - kappa_interped) * (slipangle_deg - (minSlipangle_deg + ((float) slipangle_ind) * slipangleSpacing_deg)) / slipangleSpacing_deg;
 8005bc6:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8005bca:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005bce:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005bd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005bd4:	ee07 3a90 	vmov	s15, r3
 8005bd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005be0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005be4:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8005ca4 <getKappaFxGlobalMax+0x2d0>
 8005be8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bec:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8005bf0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005bf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bf8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c00:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8005c04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c08:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    const float Fx_result = Fx_achieved + (Fx_interped - Fx_achieved) * (slipangle_deg - (minSlipangle_deg + ((float) slipangle_ind) * slipangleSpacing_deg)) / slipangleSpacing_deg; 
 8005c0c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8005c10:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005c14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c1a:	ee07 3a90 	vmov	s15, r3
 8005c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005c2a:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8005ca4 <getKappaFxGlobalMax+0x2d0>
 8005c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c32:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8005c36:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005c3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c46:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8005c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c4e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    const kappaAndFx result = {
        .kappa = kappa_result * LUT_granularity * getKappaScaleFactor(),
 8005c52:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8005cb4 <getKappaFxGlobalMax+0x2e0>
 8005c56:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005c5a:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005c5e:	f7fe ff07 	bl	8004a70 <getKappaScaleFactor>
 8005c62:	eef0 7a40 	vmov.f32	s15, s0
 8005c66:	ee68 7a27 	vmul.f32	s15, s16, s15
    const kappaAndFx result = {
 8005c6a:	edc7 7a04 	vstr	s15, [r7, #16]
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c70:	617b      	str	r3, [r7, #20]
        .Fx = Fx_result
    };
    return result; /** @todo check value that gets returned */
 8005c72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005c76:	f107 0210 	add.w	r2, r7, #16
 8005c7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8005c82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c86:	ee07 2a10 	vmov	s14, r2
 8005c8a:	ee07 3a90 	vmov	s15, r3
}
 8005c8e:	eeb0 0a47 	vmov.f32	s0, s14
 8005c92:	eef0 0a67 	vmov.f32	s1, s15
 8005c96:	3768      	adds	r7, #104	@ 0x68
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	ecbd 8b02 	vpop	{d8}
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	0801fb3c 	.word	0x0801fb3c
 8005ca4:	00000000 	.word	0x00000000
 8005ca8:	45452000 	.word	0x45452000
 8005cac:	437f0000 	.word	0x437f0000
 8005cb0:	43180e15 	.word	0x43180e15
 8005cb4:	37753b71 	.word	0x37753b71

08005cb8 <statusLED>:
 *
 * @param pvParameters Ignored.
 *
  * @return Does not return.
 */
static void statusLED(void *pvParameters) {
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  (void)pvParameters;

  cmr_gpioWrite(GPIO_LED_STATUS, 0);
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	2000      	movs	r0, #0
 8005cc4:	f006 ffd6 	bl	800cc74 <cmr_gpioWrite>

  TickType_t lastWakeTime = xTaskGetTickCount();
 8005cc8:	f00a fc86 	bl	80105d8 <xTaskGetTickCount>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	60fb      	str	r3, [r7, #12]
  while (1) {
    cmr_gpioToggle(GPIO_LED_STATUS);
 8005cd0:	2000      	movs	r0, #0
 8005cd2:	f007 f80d 	bl	800ccf0 <cmr_gpioToggle>

    vTaskDelayUntil(&lastWakeTime, statusLED_period_ms);
 8005cd6:	22fa      	movs	r2, #250	@ 0xfa
 8005cd8:	f107 030c 	add.w	r3, r7, #12
 8005cdc:	4611      	mov	r1, r2
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f00a fb04 	bl	80102ec <vTaskDelayUntil>
    cmr_gpioToggle(GPIO_LED_STATUS);
 8005ce4:	bf00      	nop
 8005ce6:	e7f3      	b.n	8005cd0 <statusLED+0x18>

08005ce8 <main>:
 *
 * Device configuration and task initialization should be performed here.
 *
 * @return Does not return.
 */
int main(void) {
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af02      	add	r7, sp, #8

   	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005cee:	4b1c      	ldr	r3, [pc, #112]	@ (8005d60 <main+0x78>)
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	4a1b      	ldr	r2, [pc, #108]	@ (8005d60 <main+0x78>)
 8005cf4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cf8:	60d3      	str	r3, [r2, #12]
  DWT->LAR = 0xC5ACCE55;
 8005cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8005d64 <main+0x7c>)
 8005cfc:	4a1a      	ldr	r2, [pc, #104]	@ (8005d68 <main+0x80>)
 8005cfe:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
  DWT->CYCCNT = 0;
 8005d02:	4b18      	ldr	r3, [pc, #96]	@ (8005d64 <main+0x7c>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005d08:	4b16      	ldr	r3, [pc, #88]	@ (8005d64 <main+0x7c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a15      	ldr	r2, [pc, #84]	@ (8005d64 <main+0x7c>)
 8005d0e:	f043 0301 	orr.w	r3, r3, #1
 8005d12:	6013      	str	r3, [r2, #0]
    // System initialization.
    HAL_Init();
 8005d14:	f00b fa9e 	bl	8011254 <HAL_Init>
    cmr_rccSystemClockEnable();
 8005d18:	f008 fb86 	bl	800e428 <cmr_rccSystemClockEnable>

    // time_OSQPControls(0, 0, 0, 0, 0, 0, true, true, false, 0);

    // Peripheral configuration.

    gpioInit();
 8005d1c:	f7fe fc08 	bl	8004530 <gpioInit>
    i2cInit();
 8005d20:	f7fe fc10 	bl	8004544 <i2cInit>
    MCP3202_init();
 8005d24:	f001 fc3a 	bl	800759c <MCP3202_init>
    canInit();
 8005d28:	f7fb f9cc 	bl	80010c4 <canInit>
    adcInit();
 8005d2c:	f7fa fcac 	bl	8000688 <adcInit>
    servoInit();
 8005d30:	f001 fc04 	bl	800753c <servoInit>
    motorsInit();
 8005d34:	f000 f9b8 	bl	80060a8 <motorsInit>
    sensorsInit();
 8005d38:	f001 fb84 	bl	8007444 <sensorsInit>
    veInit();
 8005d3c:	f001 ff82 	bl	8007c44 <veInit>
    stateInit();
 8005d40:	f001 fcda 	bl	80076f8 <stateInit>

    cmr_taskInit(&statusLED_task, "statusLED", statusLED_priority, statusLED,
 8005d44:	2202      	movs	r2, #2
 8005d46:	2300      	movs	r3, #0
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	4b08      	ldr	r3, [pc, #32]	@ (8005d6c <main+0x84>)
 8005d4c:	4908      	ldr	r1, [pc, #32]	@ (8005d70 <main+0x88>)
 8005d4e:	4809      	ldr	r0, [pc, #36]	@ (8005d74 <main+0x8c>)
 8005d50:	f008 ff2c 	bl	800ebac <cmr_taskInit>
                NULL);

    vTaskStartScheduler();
 8005d54:	f00a fb3c 	bl	80103d0 <vTaskStartScheduler>
    cmr_panic("vTaskStartScheduler returned!");
 8005d58:	4807      	ldr	r0, [pc, #28]	@ (8005d78 <main+0x90>)
 8005d5a:	f008 f96e 	bl	800e03a <cmr_panic>
 8005d5e:	bf00      	nop
 8005d60:	e000edf0 	.word	0xe000edf0
 8005d64:	e0001000 	.word	0xe0001000
 8005d68:	c5acce55 	.word	0xc5acce55
 8005d6c:	08005cb9 	.word	0x08005cb9
 8005d70:	0801fb70 	.word	0x0801fb70
 8005d74:	24008d6c 	.word	0x24008d6c
 8005d78:	0801fb7c 	.word	0x0801fb7c

08005d7c <mcCtrlOff>:
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */

void mcCtrlOff() {
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	af00      	add	r7, sp, #0
    cmr_gpioWrite(GPIO_MTR_CTRL_ENABLE, 0);
 8005d80:	2100      	movs	r1, #0
 8005d82:	2006      	movs	r0, #6
 8005d84:	f006 ff76 	bl	800cc74 <cmr_gpioWrite>
    cmr_gpioWrite(GPIO_MC_EFUSE_AUTO, 0);
 8005d88:	2100      	movs	r1, #0
 8005d8a:	2007      	movs	r0, #7
 8005d8c:	f006 ff72 	bl	800cc74 <cmr_gpioWrite>
}
 8005d90:	bf00      	nop
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <mcCtrlOn>:

void mcCtrlOn() {
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
    cmr_gpioWrite(GPIO_MTR_CTRL_ENABLE, 1);
 8005d98:	2101      	movs	r1, #1
 8005d9a:	2006      	movs	r0, #6
 8005d9c:	f006 ff6a 	bl	800cc74 <cmr_gpioWrite>
    cmr_gpioWrite(GPIO_MC_EFUSE_AUTO, 1);
 8005da0:	2101      	movs	r1, #1
 8005da2:	2007      	movs	r0, #7
 8005da4:	f006 ff66 	bl	800cc74 <cmr_gpioWrite>
}
 8005da8:	bf00      	nop
 8005daa:	bd80      	pop	{r7, pc}

08005dac <motorsCommand>:
 *
 * @return Does not return.
 */
static void motorsCommand (
    void *pvParameters
) {
 8005dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dae:	b09b      	sub	sp, #108	@ 0x6c
 8005db0:	af04      	add	r7, sp, #16
 8005db2:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    /** @brief DRS Mode */
    cmr_canDrsMode_t drsMode = CMR_CAN_DRSM_CLOSED;
 8005db4:	2301      	movs	r3, #1
 8005db6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    // initialize filters
    initRetroactiveLimitFilters();
 8005dba:	f000 ff71 	bl	8006ca0 <initRetroactiveLimitFilters>

    cmr_canState_t prevState = CMR_CAN_GLV_ON;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
     *         on transition to RTD. Without this, the inverter may have
     *         non-zero torque/speed in the same message used to enable it,
     *         which would cause the inverter to refuse to enable.  */
    static TickType_t lastHvenTime = 0;

    TickType_t lastWakeTime = xTaskGetTickCount();
 8005dc4:	f00a fc08 	bl	80105d8 <xTaskGetTickCount>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	60bb      	str	r3, [r7, #8]
    while (1) {
        volatile cmr_canHeartbeat_t      *heartbeatVSM = canVehicleGetPayload(CANRX_VEH_HEARTBEAT_VSM);
 8005dcc:	2000      	movs	r0, #0
 8005dce:	f7fb fa77 	bl	80012c0 <canVehicleGetPayload>
 8005dd2:	63b8      	str	r0, [r7, #56]	@ 0x38
        volatile cmr_canDIMRequest_t     *reqDIM       = canVehicleGetPayload(CANRX_VEH_REQUEST_DIM);
 8005dd4:	2002      	movs	r0, #2
 8005dd6:	f7fb fa73 	bl	80012c0 <canVehicleGetPayload>
 8005dda:	6378      	str	r0, [r7, #52]	@ 0x34
        volatile cmr_canFSMData_t        *dataFSM      = canVehicleGetPayload(CANRX_VEH_DATA_FSM);
 8005ddc:	2001      	movs	r0, #1
 8005dde:	f7fb fa6f 	bl	80012c0 <canVehicleGetPayload>
 8005de2:	6338      	str	r0, [r7, #48]	@ 0x30
        volatile cmr_canHVCPackVoltage_t *voltageHVC   = canVehicleGetPayload(CANRX_VEH_VOLTAGE_HVC);
 8005de4:	2003      	movs	r0, #3
 8005de6:	f7fb fa6b 	bl	80012c0 <canVehicleGetPayload>
 8005dea:	62f8      	str	r0, [r7, #44]	@ 0x2c
        volatile cmr_canHVCPackCurrent_t *currentHVC   = canVehicleGetPayload(CANRX_VEH_CURRENT_HVC);
 8005dec:	2004      	movs	r0, #4
 8005dee:	f7fb fa67 	bl	80012c0 <canVehicleGetPayload>
 8005df2:	62b8      	str	r0, [r7, #40]	@ 0x28
        volatile cmr_canVSMStatus_t      *vsm          = canVehicleGetPayload(CANRX_VEH_HEARTBEAT_VSM);
 8005df4:	2000      	movs	r0, #0
 8005df6:	f7fb fa63 	bl	80012c0 <canVehicleGetPayload>
 8005dfa:	6278      	str	r0, [r7, #36]	@ 0x24

        uint32_t throttle;

        //transmit Coulombs using HVI sense
        integrateCurrent();
 8005dfc:	f7fb ffd8 	bl	8001db0 <integrateCurrent>
//			(void *) pedal_messages,
//			8,
//			5
//		);
//         update DRS mode
        drsMode = reqDIM->requestedDrsMode;
 8005e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e02:	789b      	ldrb	r3, [r3, #2]
 8005e04:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        runDrsControls(reqDIM->requestedGear,
 8005e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e0a:	785b      	ldrb	r3, [r3, #1]
 8005e0c:	b2d8      	uxtb	r0, r3
                        drsMode,
                        dataFSM    -> throttlePosition,
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e10:	785b      	ldrb	r3, [r3, #1]
 8005e12:	b2da      	uxtb	r2, r3
                        dataFSM    -> brakePressureFront_PSI,
 8005e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e16:	789b      	ldrb	r3, [r3, #2]
 8005e18:	b2dc      	uxtb	r4, r3
                        dataFSM    -> steeringWheelAngle_deg);
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1c:	889b      	ldrh	r3, [r3, #4]
 8005e1e:	b21b      	sxth	r3, r3
        runDrsControls(reqDIM->requestedGear,
 8005e20:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	4623      	mov	r3, r4
 8005e28:	f7fe f956 	bl	80040d8 <runDrsControls>
                              
        switch (heartbeatVSM->state) {
 8005e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b03      	cmp	r3, #3
 8005e34:	d008      	beq.n	8005e48 <motorsCommand+0x9c>
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	f300 80ec 	bgt.w	8006014 <motorsCommand+0x268>
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	f000 80b4 	beq.w	8005faa <motorsCommand+0x1fe>
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d07e      	beq.n	8005f44 <motorsCommand+0x198>
 8005e46:	e0e5      	b.n	8006014 <motorsCommand+0x268>
            // Drive the vehicle in RTD
            case CMR_CAN_RTD: {
            	mcCtrlOn();
 8005e48:	f7ff ffa4 	bl	8005d94 <mcCtrlOn>
            	fansOn();
 8005e4c:	f7fe fa7c 	bl	8004348 <fansOn>
            	pumpsOn();
 8005e50:	f000 fcee 	bl	8006830 <pumpsOn>
                for (size_t i = 0; i < MOTOR_LEN; i++) {
 8005e54:	2300      	movs	r3, #0
 8005e56:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e58:	e008      	b.n	8005e6c <motorsCommand+0xc0>
                    motorSetpoints[i].control_bv = CMR_CAN_AMK_CTRL_HV_EN  |
 8005e5a:	4a8e      	ldr	r2, [pc, #568]	@ (8006094 <motorsCommand+0x2e8>)
 8005e5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e5e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8005e62:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
                for (size_t i = 0; i < MOTOR_LEN; i++) {
 8005e66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e68:	3301      	adds	r3, #1
 8005e6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	d9f3      	bls.n	8005e5a <motorsCommand+0xae>
                }


                // Blip (100ms) control message to zero torque/speed after transitioning
                // from HV_EN to RTD to make sure inverters receive clean enable
                const bool blank_command = (lastHvenTime + 100 > xTaskGetTickCount());
 8005e72:	4b89      	ldr	r3, [pc, #548]	@ (8006098 <motorsCommand+0x2ec>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f103 0464 	add.w	r4, r3, #100	@ 0x64
 8005e7a:	f00a fbad 	bl	80105d8 <xTaskGetTickCount>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	429c      	cmp	r4, r3
 8005e82:	bf8c      	ite	hi
 8005e84:	2301      	movhi	r3, #1
 8005e86:	2300      	movls	r3, #0
 8005e88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                if (blank_command) {
 8005e8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d01a      	beq.n	8005eca <motorsCommand+0x11e>
					for (size_t i = 0; i < MOTOR_LEN; i++) {
 8005e94:	2300      	movs	r3, #0
 8005e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e98:	e014      	b.n	8005ec4 <motorsCommand+0x118>
						motorSetpoints[i].velocity_rpm = 0;
 8005e9a:	4a7e      	ldr	r2, [pc, #504]	@ (8006094 <motorsCommand+0x2e8>)
 8005e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	4413      	add	r3, r2
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	805a      	strh	r2, [r3, #2]
						motorSetpoints[i].torqueLimPos_dpcnt = 0;
 8005ea6:	4a7b      	ldr	r2, [pc, #492]	@ (8006094 <motorsCommand+0x2e8>)
 8005ea8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	4413      	add	r3, r2
 8005eae:	2200      	movs	r2, #0
 8005eb0:	809a      	strh	r2, [r3, #4]
						motorSetpoints[i].torqueLimNeg_dpcnt = 0;
 8005eb2:	4a78      	ldr	r2, [pc, #480]	@ (8006094 <motorsCommand+0x2e8>)
 8005eb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	4413      	add	r3, r2
 8005eba:	2200      	movs	r2, #0
 8005ebc:	80da      	strh	r2, [r3, #6]
					for (size_t i = 0; i < MOTOR_LEN; i++) {
 8005ebe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ec4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ec6:	2b03      	cmp	r3, #3
 8005ec8:	d9e7      	bls.n	8005e9a <motorsCommand+0xee>
//                    motorSetpoints[i].velocity_rpm = 300;
//                    motorSetpoints[i].torqueLimPos_dpcnt = 40;
//                    motorSetpoints[i].torqueLimNeg_dpcnt = -40;
//                }

                uint32_t au32_initial_ticks = DWT->CYCCNT;
 8005eca:	4b74      	ldr	r3, [pc, #464]	@ (800609c <motorsCommand+0x2f0>)
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	61fb      	str	r3, [r7, #28]

                TickType_t startTime = xTaskGetTickCount();
 8005ed0:	f00a fb82 	bl	80105d8 <xTaskGetTickCount>
 8005ed4:	61b8      	str	r0, [r7, #24]
                //taskENTER_CRITICAL(); /** @todo verify if this critical region is necessary */

                runControls(gear,
 8005ed6:	4b72      	ldr	r3, [pc, #456]	@ (80060a0 <motorsCommand+0x2f4>)
 8005ed8:	781c      	ldrb	r4, [r3, #0]
                		    dataFSM    -> torqueRequested,
 8005eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	b2dd      	uxtb	r5, r3
                            dataFSM    -> brakePedalPosition,
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee2:	78db      	ldrb	r3, [r3, #3]
 8005ee4:	b2de      	uxtb	r6, r3
                            dataFSM    -> brakePressureFront_PSI,
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee8:	789b      	ldrb	r3, [r3, #2]
 8005eea:	fa5f fc83 	uxtb.w	ip, r3
                            dataFSM    -> steeringWheelAngle_deg,
 8005eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef0:	889b      	ldrh	r3, [r3, #4]
 8005ef2:	b21b      	sxth	r3, r3
                            voltageHVC -> hvVoltage_mV,
 8005ef4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ef6:	6852      	ldr	r2, [r2, #4]
                            currentHVC -> instantCurrent_mA,
 8005ef8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005efa:	6809      	ldr	r1, [r1, #0]
                runControls(gear,
 8005efc:	f897 0023 	ldrb.w	r0, [r7, #35]	@ 0x23
 8005f00:	9003      	str	r0, [sp, #12]
 8005f02:	9102      	str	r1, [sp, #8]
 8005f04:	9201      	str	r2, [sp, #4]
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	4663      	mov	r3, ip
 8005f0a:	4632      	mov	r2, r6
 8005f0c:	4629      	mov	r1, r5
 8005f0e:	4620      	mov	r0, r4
 8005f10:	f7fb fe1a 	bl	8001b48 <runControls>
                            blank_command);
                //taskEXIT_CRITICAL();

                TickType_t endTime = xTaskGetTickCount();
 8005f14:	f00a fb60 	bl	80105d8 <xTaskGetTickCount>
 8005f18:	6178      	str	r0, [r7, #20]

                uint32_t total_ticks = DWT->CYCCNT - au32_initial_ticks;
 8005f1a:	4b60      	ldr	r3, [pc, #384]	@ (800609c <motorsCommand+0x2f0>)
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	613b      	str	r3, [r7, #16]
                uint32_t microsecs = total_ticks*1000000/HAL_RCC_GetHCLKFreq();
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	4a5f      	ldr	r2, [pc, #380]	@ (80060a4 <motorsCommand+0x2f8>)
 8005f28:	fb02 f403 	mul.w	r4, r2, r3
 8005f2c:	f012 ffa6 	bl	8018e7c <HAL_RCC_GetHCLKFreq>
 8005f30:	4603      	mov	r3, r0
 8005f32:	fbb4 f3f3 	udiv	r3, r4, r3
 8005f36:	60fb      	str	r3, [r7, #12]
                // Throttle pos is used instead of torque requested bc torque
                // requested is always 0 unless in RTD (this allows drivers to
                // test DRS implementation without being in RTD)
                
                // set status so DIM can see
                setControlsStatus(gear);
 8005f38:	4b59      	ldr	r3, [pc, #356]	@ (80060a0 <motorsCommand+0x2f4>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fb fd93 	bl	8001a68 <setControlsStatus>

                break;
 8005f42:	e088      	b.n	8006056 <motorsCommand+0x2aa>
            }

            // Reset errors in HV_EN
            case CMR_CAN_HV_EN: {
            	mcCtrlOn();
 8005f44:	f7ff ff26 	bl	8005d94 <mcCtrlOn>
            	fansOn();
 8005f48:	f7fe f9fe 	bl	8004348 <fansOn>
            	pumpsOn();
 8005f4c:	f000 fc70 	bl	8006830 <pumpsOn>
                for (size_t i = 0; i < MOTOR_LEN; i++) {
 8005f50:	2300      	movs	r3, #0
 8005f52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f54:	e01a      	b.n	8005f8c <motorsCommand+0x1e0>
                    motorSetpoints[i].control_bv         = CMR_CAN_AMK_CTRL_HV_EN |
 8005f56:	4a4f      	ldr	r2, [pc, #316]	@ (8006094 <motorsCommand+0x2e8>)
 8005f58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f5a:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 8005f5e:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
                                                           CMR_CAN_AMK_CTRL_ERR_RESET;
                    motorSetpoints[i].velocity_rpm       = 0;
 8005f62:	4a4c      	ldr	r2, [pc, #304]	@ (8006094 <motorsCommand+0x2e8>)
 8005f64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	4413      	add	r3, r2
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	805a      	strh	r2, [r3, #2]
                    motorSetpoints[i].torqueLimPos_dpcnt = 0;
 8005f6e:	4a49      	ldr	r2, [pc, #292]	@ (8006094 <motorsCommand+0x2e8>)
 8005f70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	4413      	add	r3, r2
 8005f76:	2200      	movs	r2, #0
 8005f78:	809a      	strh	r2, [r3, #4]
                    motorSetpoints[i].torqueLimNeg_dpcnt = 0;
 8005f7a:	4a46      	ldr	r2, [pc, #280]	@ (8006094 <motorsCommand+0x2e8>)
 8005f7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	4413      	add	r3, r2
 8005f82:	2200      	movs	r2, #0
 8005f84:	80da      	strh	r2, [r3, #6]
                for (size_t i = 0; i < MOTOR_LEN; i++) {
 8005f86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f88:	3301      	adds	r3, #1
 8005f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d9e1      	bls.n	8005f56 <motorsCommand+0x1aa>
                }

                // set status so DIM can see
                setControlsStatus(reqDIM->requestedGear);
 8005f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f94:	785b      	ldrb	r3, [r3, #1]
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fb fd65 	bl	8001a68 <setControlsStatus>
                // Store last timestamp
                lastHvenTime = xTaskGetTickCount();
 8005f9e:	f00a fb1b 	bl	80105d8 <xTaskGetTickCount>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	4a3c      	ldr	r2, [pc, #240]	@ (8006098 <motorsCommand+0x2ec>)
 8005fa6:	6013      	str	r3, [r2, #0]
                break;
 8005fa8:	e055      	b.n	8006056 <motorsCommand+0x2aa>
            }

            // Also reset errors in GLV_ON
            case CMR_CAN_GLV_ON: {
            	mcCtrlOff();
 8005faa:	f7ff fee7 	bl	8005d7c <mcCtrlOff>
                

                if (vsm->internalState == CMR_CAN_VSM_STATE_INVERTER_EN) {
 8005fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b06      	cmp	r3, #6
 8005fb6:	d101      	bne.n	8005fbc <motorsCommand+0x210>
                    mcCtrlOn();
 8005fb8:	f7ff feec 	bl	8005d94 <mcCtrlOn>
                }
                
            	fansOff();
 8005fbc:	f7fe fa9a 	bl	80044f4 <fansOff>
            	pumpsOff();
 8005fc0:	f000 fd0e 	bl	80069e0 <pumpsOff>
                for (size_t i = 0; i < MOTOR_LEN; i++) {
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fc8:	e01a      	b.n	8006000 <motorsCommand+0x254>
                    motorSetpoints[i].control_bv         = CMR_CAN_AMK_CTRL_ERR_RESET;
 8005fca:	4a32      	ldr	r2, [pc, #200]	@ (8006094 <motorsCommand+0x2e8>)
 8005fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005fd2:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
                    motorSetpoints[i].velocity_rpm       = 0;
 8005fd6:	4a2f      	ldr	r2, [pc, #188]	@ (8006094 <motorsCommand+0x2e8>)
 8005fd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	4413      	add	r3, r2
 8005fde:	2200      	movs	r2, #0
 8005fe0:	805a      	strh	r2, [r3, #2]
                    motorSetpoints[i].torqueLimPos_dpcnt = 0;
 8005fe2:	4a2c      	ldr	r2, [pc, #176]	@ (8006094 <motorsCommand+0x2e8>)
 8005fe4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	4413      	add	r3, r2
 8005fea:	2200      	movs	r2, #0
 8005fec:	809a      	strh	r2, [r3, #4]
                    motorSetpoints[i].torqueLimNeg_dpcnt = 0;
 8005fee:	4a29      	ldr	r2, [pc, #164]	@ (8006094 <motorsCommand+0x2e8>)
 8005ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	4413      	add	r3, r2
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	80da      	strh	r2, [r3, #6]
                for (size_t i = 0; i < MOTOR_LEN; i++) {
 8005ffa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006000:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006002:	2b03      	cmp	r3, #3
 8006004:	d9e1      	bls.n	8005fca <motorsCommand+0x21e>
                }
                // set status so DIM can see
                setControlsStatus(reqDIM->requestedGear);
 8006006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006008:	785b      	ldrb	r3, [r3, #1]
 800600a:	b2db      	uxtb	r3, r3
 800600c:	4618      	mov	r0, r3
 800600e:	f7fb fd2b 	bl	8001a68 <setControlsStatus>
                break;
 8006012:	e020      	b.n	8006056 <motorsCommand+0x2aa>
            }

            // In all other states, disable inverters and do not reset errors
            default: {
                for (size_t i = 0; i < MOTOR_LEN; i++) {
 8006014:	2300      	movs	r3, #0
 8006016:	643b      	str	r3, [r7, #64]	@ 0x40
 8006018:	e019      	b.n	800604e <motorsCommand+0x2a2>
                    motorSetpoints[i].control_bv         = 0;
 800601a:	4a1e      	ldr	r2, [pc, #120]	@ (8006094 <motorsCommand+0x2e8>)
 800601c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800601e:	2100      	movs	r1, #0
 8006020:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
                    motorSetpoints[i].velocity_rpm       = 0;
 8006024:	4a1b      	ldr	r2, [pc, #108]	@ (8006094 <motorsCommand+0x2e8>)
 8006026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	4413      	add	r3, r2
 800602c:	2200      	movs	r2, #0
 800602e:	805a      	strh	r2, [r3, #2]
                    motorSetpoints[i].torqueLimPos_dpcnt = 0;
 8006030:	4a18      	ldr	r2, [pc, #96]	@ (8006094 <motorsCommand+0x2e8>)
 8006032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	4413      	add	r3, r2
 8006038:	2200      	movs	r2, #0
 800603a:	809a      	strh	r2, [r3, #4]
                    motorSetpoints[i].torqueLimNeg_dpcnt = 0;
 800603c:	4a15      	ldr	r2, [pc, #84]	@ (8006094 <motorsCommand+0x2e8>)
 800603e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	4413      	add	r3, r2
 8006044:	2200      	movs	r2, #0
 8006046:	80da      	strh	r2, [r3, #6]
                for (size_t i = 0; i < MOTOR_LEN; i++) {
 8006048:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800604a:	3301      	adds	r3, #1
 800604c:	643b      	str	r3, [r7, #64]	@ 0x40
 800604e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006050:	2b03      	cmp	r3, #3
 8006052:	d9e2      	bls.n	800601a <motorsCommand+0x26e>
                }
                break;
 8006054:	bf00      	nop
            }
        }

        // Update gear in transition from HV_EN to RTD
        if (prevState == CMR_CAN_HV_EN && heartbeatVSM->state == CMR_CAN_RTD) {
 8006056:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800605a:	2b02      	cmp	r3, #2
 800605c:	d10d      	bne.n	800607a <motorsCommand+0x2ce>
 800605e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b03      	cmp	r3, #3
 8006066:	d108      	bne.n	800607a <motorsCommand+0x2ce>
            gear = reqDIM->requestedGear;
 8006068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800606a:	785b      	ldrb	r3, [r3, #1]
 800606c:	b2da      	uxtb	r2, r3
 800606e:	4b0c      	ldr	r3, [pc, #48]	@ (80060a0 <motorsCommand+0x2f4>)
 8006070:	701a      	strb	r2, [r3, #0]
            resetRetroactiveLimitFilters();
 8006072:	f000 fe33 	bl	8006cdc <resetRetroactiveLimitFilters>
            initControls();
 8006076:	f7fb fcc9 	bl	8001a0c <initControls>
        }

        prevState = heartbeatVSM->state;
 800607a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        vTaskDelayUntil(&lastWakeTime, motorsCommand_period_ms);
 8006082:	2205      	movs	r2, #5
 8006084:	f107 0308 	add.w	r3, r7, #8
 8006088:	4611      	mov	r1, r2
 800608a:	4618      	mov	r0, r3
 800608c:	f00a f92e 	bl	80102ec <vTaskDelayUntil>
    while (1) {
 8006090:	e69c      	b.n	8005dcc <motorsCommand+0x20>
 8006092:	bf00      	nop
 8006094:	2400ae2c 	.word	0x2400ae2c
 8006098:	2400ae4c 	.word	0x2400ae4c
 800609c:	e0001000 	.word	0xe0001000
 80060a0:	240005b8 	.word	0x240005b8
 80060a4:	000f4240 	.word	0x000f4240

080060a8 <motorsInit>:
/**
 * @brief Initializes motor interface.
 */
void motorsInit (
    void
) {
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af02      	add	r7, sp, #8
    initControls();
 80060ae:	f7fb fcad 	bl	8001a0c <initControls>

    // Task creation.
    cmr_taskInit(
 80060b2:	2207      	movs	r2, #7
 80060b4:	2300      	movs	r3, #0
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	4b03      	ldr	r3, [pc, #12]	@ (80060c8 <motorsInit+0x20>)
 80060ba:	4904      	ldr	r1, [pc, #16]	@ (80060cc <motorsInit+0x24>)
 80060bc:	4804      	ldr	r0, [pc, #16]	@ (80060d0 <motorsInit+0x28>)
 80060be:	f008 fd75 	bl	800ebac <cmr_taskInit>
        "motorsCommand",
        motorsCommand_priority,
        motorsCommand,
        NULL
    );
}
 80060c2:	bf00      	nop
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	08005dad 	.word	0x08005dad
 80060cc:	0801fb9c 	.word	0x0801fb9c
 80060d0:	24009dcc 	.word	0x24009dcc

080060d4 <setTorqueLimsAllProtected>:
 * @param torqueLimNeg_Nm Desired negative torque limit.
 */
void setTorqueLimsAllProtected (
    float torqueLimPos_Nm, 
    float torqueLimNeg_Nm
) {
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	ed87 0a01 	vstr	s0, [r7, #4]
 80060de:	edc7 0a00 	vstr	s1, [r7]
    setTorqueLimsAllDistProtected(torqueLimPos_Nm, torqueLimNeg_Nm, NULL, NULL);
 80060e2:	2100      	movs	r1, #0
 80060e4:	2000      	movs	r0, #0
 80060e6:	edd7 0a00 	vldr	s1, [r7]
 80060ea:	ed97 0a01 	vldr	s0, [r7, #4]
 80060ee:	f000 f804 	bl	80060fa <setTorqueLimsAllDistProtected>
}
 80060f2:	bf00      	nop
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <setTorqueLimsAllDistProtected>:
void setTorqueLimsAllDistProtected (
    float torqueLimPos_Nm,
    float torqueLimNeg_Nm,
    const cmr_loadDistribution_t *distPos,
    const cmr_loadDistribution_t *distNeg
) {
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b08c      	sub	sp, #48	@ 0x30
 80060fe:	af00      	add	r7, sp, #0
 8006100:	ed87 0a03 	vstr	s0, [r7, #12]
 8006104:	edc7 0a02 	vstr	s1, [r7, #8]
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	6039      	str	r1, [r7, #0]
    const cmr_torqueDistributionNm_t torquesPos_Nm = {
        .fl = getLoadByIndex(distPos, MOTOR_FL) * torqueLimPos_Nm,
 800610c:	2102      	movs	r1, #2
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fa94 	bl	800663c <getLoadByIndex>
 8006114:	eeb0 7a40 	vmov.f32	s14, s0
 8006118:	edd7 7a03 	vldr	s15, [r7, #12]
 800611c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const cmr_torqueDistributionNm_t torquesPos_Nm = {
 8006120:	edc7 7a08 	vstr	s15, [r7, #32]
        .fr = getLoadByIndex(distPos, MOTOR_FR) * torqueLimPos_Nm,
 8006124:	2100      	movs	r1, #0
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fa88 	bl	800663c <getLoadByIndex>
 800612c:	eeb0 7a40 	vmov.f32	s14, s0
 8006130:	edd7 7a03 	vldr	s15, [r7, #12]
 8006134:	ee67 7a27 	vmul.f32	s15, s14, s15
    const cmr_torqueDistributionNm_t torquesPos_Nm = {
 8006138:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        .rl = getLoadByIndex(distPos, MOTOR_RL) * torqueLimPos_Nm,
 800613c:	2103      	movs	r1, #3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fa7c 	bl	800663c <getLoadByIndex>
 8006144:	eeb0 7a40 	vmov.f32	s14, s0
 8006148:	edd7 7a03 	vldr	s15, [r7, #12]
 800614c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const cmr_torqueDistributionNm_t torquesPos_Nm = {
 8006150:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        .rr = getLoadByIndex(distPos, MOTOR_RR) * torqueLimPos_Nm
 8006154:	2101      	movs	r1, #1
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fa70 	bl	800663c <getLoadByIndex>
 800615c:	eeb0 7a40 	vmov.f32	s14, s0
 8006160:	edd7 7a03 	vldr	s15, [r7, #12]
 8006164:	ee67 7a27 	vmul.f32	s15, s14, s15
    const cmr_torqueDistributionNm_t torquesPos_Nm = {
 8006168:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    };
    const cmr_torqueDistributionNm_t torquesNeg_Nm = {
        .fl = getLoadByIndex(distNeg, MOTOR_FL) * torqueLimNeg_Nm,
 800616c:	2102      	movs	r1, #2
 800616e:	6838      	ldr	r0, [r7, #0]
 8006170:	f000 fa64 	bl	800663c <getLoadByIndex>
 8006174:	eeb0 7a40 	vmov.f32	s14, s0
 8006178:	edd7 7a02 	vldr	s15, [r7, #8]
 800617c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const cmr_torqueDistributionNm_t torquesNeg_Nm = {
 8006180:	edc7 7a04 	vstr	s15, [r7, #16]
        .fr = getLoadByIndex(distNeg, MOTOR_FR) * torqueLimNeg_Nm,
 8006184:	2100      	movs	r1, #0
 8006186:	6838      	ldr	r0, [r7, #0]
 8006188:	f000 fa58 	bl	800663c <getLoadByIndex>
 800618c:	eeb0 7a40 	vmov.f32	s14, s0
 8006190:	edd7 7a02 	vldr	s15, [r7, #8]
 8006194:	ee67 7a27 	vmul.f32	s15, s14, s15
    const cmr_torqueDistributionNm_t torquesNeg_Nm = {
 8006198:	edc7 7a05 	vstr	s15, [r7, #20]
        .rl = getLoadByIndex(distNeg, MOTOR_RL) * torqueLimNeg_Nm,
 800619c:	2103      	movs	r1, #3
 800619e:	6838      	ldr	r0, [r7, #0]
 80061a0:	f000 fa4c 	bl	800663c <getLoadByIndex>
 80061a4:	eeb0 7a40 	vmov.f32	s14, s0
 80061a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80061ac:	ee67 7a27 	vmul.f32	s15, s14, s15
    const cmr_torqueDistributionNm_t torquesNeg_Nm = {
 80061b0:	edc7 7a06 	vstr	s15, [r7, #24]
        .rr = getLoadByIndex(distNeg, MOTOR_RR) * torqueLimNeg_Nm
 80061b4:	2101      	movs	r1, #1
 80061b6:	6838      	ldr	r0, [r7, #0]
 80061b8:	f000 fa40 	bl	800663c <getLoadByIndex>
 80061bc:	eeb0 7a40 	vmov.f32	s14, s0
 80061c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80061c4:	ee67 7a27 	vmul.f32	s15, s14, s15
    const cmr_torqueDistributionNm_t torquesNeg_Nm = {
 80061c8:	edc7 7a07 	vstr	s15, [r7, #28]
    };
    setTorqueLimsProtected(&torquesPos_Nm, &torquesNeg_Nm);
 80061cc:	f107 0210 	add.w	r2, r7, #16
 80061d0:	f107 0320 	add.w	r3, r7, #32
 80061d4:	4611      	mov	r1, r2
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fe46 	bl	8006e68 <setTorqueLimsProtected>
}
 80061dc:	bf00      	nop
 80061de:	3730      	adds	r7, #48	@ 0x30
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <setTorqueLimsUnprotected>:
 */
void setTorqueLimsUnprotected (
    motorLocation_t motor, 
    float torqueLimPos_Nm, 
    float torqueLimNeg_Nm
) {
 80061e4:	b590      	push	{r4, r7, lr}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	4603      	mov	r3, r0
 80061ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80061f0:	edc7 0a01 	vstr	s1, [r7, #4]
 80061f4:	73fb      	strb	r3, [r7, #15]
    if (motor >= MOTOR_LEN) {
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
 80061f8:	2b03      	cmp	r3, #3
 80061fa:	d828      	bhi.n	800624e <setTorqueLimsUnprotected+0x6a>
        return;
    }

    /** Check feasibility with field weakening (page 38 manual) */

    torqueLimPos_Nm = fmaxf(torqueLimPos_Nm, 0.0f); // ensures torqueLimPos_Nm >= 0
 80061fc:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8006258 <setTorqueLimsUnprotected+0x74>
 8006200:	ed97 0a02 	vldr	s0, [r7, #8]
 8006204:	f018 fc58 	bl	801eab8 <fmaxf>
 8006208:	ed87 0a02 	vstr	s0, [r7, #8]
    torqueLimNeg_Nm = fminf(torqueLimNeg_Nm, 0.0f); // ensures torqueLimNeg_Nm <= 0
 800620c:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8006258 <setTorqueLimsUnprotected+0x74>
 8006210:	ed97 0a01 	vldr	s0, [r7, #4]
 8006214:	f018 fc6d 	bl	801eaf2 <fminf>
 8006218:	ed87 0a01 	vstr	s0, [r7, #4]

    motorSetpoints[motor].torqueLimPos_dpcnt = convertNmToAMKTorque(torqueLimPos_Nm); 
 800621c:	7bfc      	ldrb	r4, [r7, #15]
 800621e:	ed97 0a02 	vldr	s0, [r7, #8]
 8006222:	f000 f8b1 	bl	8006388 <convertNmToAMKTorque>
 8006226:	4603      	mov	r3, r0
 8006228:	4619      	mov	r1, r3
 800622a:	4a0c      	ldr	r2, [pc, #48]	@ (800625c <setTorqueLimsUnprotected+0x78>)
 800622c:	00e3      	lsls	r3, r4, #3
 800622e:	4413      	add	r3, r2
 8006230:	460a      	mov	r2, r1
 8006232:	809a      	strh	r2, [r3, #4]
    motorSetpoints[motor].torqueLimNeg_dpcnt = convertNmToAMKTorque(torqueLimNeg_Nm);
 8006234:	7bfc      	ldrb	r4, [r7, #15]
 8006236:	ed97 0a01 	vldr	s0, [r7, #4]
 800623a:	f000 f8a5 	bl	8006388 <convertNmToAMKTorque>
 800623e:	4603      	mov	r3, r0
 8006240:	4619      	mov	r1, r3
 8006242:	4a06      	ldr	r2, [pc, #24]	@ (800625c <setTorqueLimsUnprotected+0x78>)
 8006244:	00e3      	lsls	r3, r4, #3
 8006246:	4413      	add	r3, r2
 8006248:	460a      	mov	r2, r1
 800624a:	80da      	strh	r2, [r3, #6]
 800624c:	e000      	b.n	8006250 <setTorqueLimsUnprotected+0x6c>
        return;
 800624e:	bf00      	nop
}
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	bd90      	pop	{r4, r7, pc}
 8006256:	bf00      	nop
 8006258:	00000000 	.word	0x00000000
 800625c:	2400ae2c 	.word	0x2400ae2c

08006260 <setVelocityInt16>:
 * @param velocity_rpm Desired velocity.
 */
void setVelocityInt16 (
    motorLocation_t motor,
    int16_t velocity_rpm
) {
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	4603      	mov	r3, r0
 8006268:	460a      	mov	r2, r1
 800626a:	71fb      	strb	r3, [r7, #7]
 800626c:	4613      	mov	r3, r2
 800626e:	80bb      	strh	r3, [r7, #4]
    if (motor >= MOTOR_LEN) {
 8006270:	79fb      	ldrb	r3, [r7, #7]
 8006272:	2b03      	cmp	r3, #3
 8006274:	d81f      	bhi.n	80062b6 <setVelocityInt16+0x56>
        return;
    }

    if (velocity_rpm > maxSpeed_rpm) {
 8006276:	4b13      	ldr	r3, [pc, #76]	@ (80062c4 <setVelocityInt16+0x64>)
 8006278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800627c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006280:	429a      	cmp	r2, r3
 8006282:	dd02      	ble.n	800628a <setVelocityInt16+0x2a>
        velocity_rpm = maxSpeed_rpm;
 8006284:	4b0f      	ldr	r3, [pc, #60]	@ (80062c4 <setVelocityInt16+0x64>)
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	80bb      	strh	r3, [r7, #4]
    }

    if (velocity_rpm < -maxSpeed_rpm) {
 800628a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800628e:	4b0d      	ldr	r3, [pc, #52]	@ (80062c4 <setVelocityInt16+0x64>)
 8006290:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006294:	425b      	negs	r3, r3
 8006296:	429a      	cmp	r2, r3
 8006298:	da06      	bge.n	80062a8 <setVelocityInt16+0x48>
        velocity_rpm = -maxSpeed_rpm;
 800629a:	4b0a      	ldr	r3, [pc, #40]	@ (80062c4 <setVelocityInt16+0x64>)
 800629c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	425b      	negs	r3, r3
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	80bb      	strh	r3, [r7, #4]
    }

    motorSetpoints[motor].velocity_rpm = velocity_rpm;
 80062a8:	79fb      	ldrb	r3, [r7, #7]
 80062aa:	4a07      	ldr	r2, [pc, #28]	@ (80062c8 <setVelocityInt16+0x68>)
 80062ac:	00db      	lsls	r3, r3, #3
 80062ae:	4413      	add	r3, r2
 80062b0:	88ba      	ldrh	r2, [r7, #4]
 80062b2:	805a      	strh	r2, [r3, #2]
 80062b4:	e000      	b.n	80062b8 <setVelocityInt16+0x58>
        return;
 80062b6:	bf00      	nop
}
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	08022020 	.word	0x08022020
 80062c8:	2400ae2c 	.word	0x2400ae2c

080062cc <setVelocityFloat>:
 * @param velocity_rpm Desired velocity.
 */
void setVelocityFloat (
    motorLocation_t motor,
    float velocity_rpm
) {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	4603      	mov	r3, r0
 80062d4:	ed87 0a00 	vstr	s0, [r7]
 80062d8:	71fb      	strb	r3, [r7, #7]
    velocity_rpm = fminf(velocity_rpm, (float)INT16_MAX);
 80062da:	eddf 0a10 	vldr	s1, [pc, #64]	@ 800631c <setVelocityFloat+0x50>
 80062de:	ed97 0a00 	vldr	s0, [r7]
 80062e2:	f018 fc06 	bl	801eaf2 <fminf>
 80062e6:	ed87 0a00 	vstr	s0, [r7]
    velocity_rpm = fmaxf(velocity_rpm, (float)INT16_MIN);
 80062ea:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8006320 <setVelocityFloat+0x54>
 80062ee:	ed97 0a00 	vldr	s0, [r7]
 80062f2:	f018 fbe1 	bl	801eab8 <fmaxf>
 80062f6:	ed87 0a00 	vstr	s0, [r7]
    setVelocityInt16(motor, (int16_t)velocity_rpm);
 80062fa:	edd7 7a00 	vldr	s15, [r7]
 80062fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006302:	ee17 3a90 	vmov	r3, s15
 8006306:	b21a      	sxth	r2, r3
 8006308:	79fb      	ldrb	r3, [r7, #7]
 800630a:	4611      	mov	r1, r2
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff ffa7 	bl	8006260 <setVelocityInt16>
}
 8006312:	bf00      	nop
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	46fffe00 	.word	0x46fffe00
 8006320:	c7000000 	.word	0xc7000000

08006324 <setVelocityInt16All>:
 * @param motor Which motor to set velocity for.
 * @param velocity_rpm Desired velocity.
 */
void setVelocityInt16All (
    int16_t velocity_rpm
) {
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	4603      	mov	r3, r0
 800632c:	80fb      	strh	r3, [r7, #6]
    for (size_t motor = 0; motor < MOTOR_LEN; motor++) {
 800632e:	2300      	movs	r3, #0
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	e00a      	b.n	800634a <setVelocityInt16All+0x26>
        setVelocityInt16(motor, velocity_rpm);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	b2db      	uxtb	r3, r3
 8006338:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800633c:	4611      	mov	r1, r2
 800633e:	4618      	mov	r0, r3
 8006340:	f7ff ff8e 	bl	8006260 <setVelocityInt16>
    for (size_t motor = 0; motor < MOTOR_LEN; motor++) {
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3301      	adds	r3, #1
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2b03      	cmp	r3, #3
 800634e:	d9f1      	bls.n	8006334 <setVelocityInt16All+0x10>
    }
}
 8006350:	bf00      	nop
 8006352:	bf00      	nop
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
	...

0800635c <getAMKSetpoints>:
 *
 * @param motor Which motor to get setpoints for.
 *
 * @return Read-only pointer to requested setpoints.
 */
const cmr_canAMKSetpoints_t *getAMKSetpoints(motorLocation_t motor) {
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	4603      	mov	r3, r0
 8006364:	71fb      	strb	r3, [r7, #7]
    if (motor >= MOTOR_LEN) {
 8006366:	79fb      	ldrb	r3, [r7, #7]
 8006368:	2b03      	cmp	r3, #3
 800636a:	d901      	bls.n	8006370 <getAMKSetpoints+0x14>
        return NULL;
 800636c:	2300      	movs	r3, #0
 800636e:	e003      	b.n	8006378 <getAMKSetpoints+0x1c>
    }

    return (const cmr_canAMKSetpoints_t *) &(motorSetpoints[motor]);
 8006370:	79fb      	ldrb	r3, [r7, #7]
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	4a03      	ldr	r2, [pc, #12]	@ (8006384 <getAMKSetpoints+0x28>)
 8006376:	4413      	add	r3, r2
}
 8006378:	4618      	mov	r0, r3
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	2400ae2c 	.word	0x2400ae2c

08006388 <convertNmToAMKTorque>:
 *
 * @param torque_Nm Torque as a floating point value.
 *
 * @return Torque in AMK format.
 */
int16_t convertNmToAMKTorque (float torque_Nm) {
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	ed87 0a01 	vstr	s0, [r7, #4]
    // clamp torque to the motor's output range
    torque_Nm = fminf(maxTorque_Nm, torque_Nm);
 8006392:	4b13      	ldr	r3, [pc, #76]	@ (80063e0 <convertNmToAMKTorque+0x58>)
 8006394:	edd3 7a00 	vldr	s15, [r3]
 8006398:	eef0 0a67 	vmov.f32	s1, s15
 800639c:	ed97 0a01 	vldr	s0, [r7, #4]
 80063a0:	f018 fba7 	bl	801eaf2 <fminf>
 80063a4:	ed87 0a01 	vstr	s0, [r7, #4]
    torque_Nm = fmaxf(-maxTorque_Nm, torque_Nm);
 80063a8:	4b0d      	ldr	r3, [pc, #52]	@ (80063e0 <convertNmToAMKTorque+0x58>)
 80063aa:	edd3 7a00 	vldr	s15, [r3]
 80063ae:	eef1 7a67 	vneg.f32	s15, s15
 80063b2:	eef0 0a67 	vmov.f32	s1, s15
 80063b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80063ba:	f018 fb7d 	bl	801eab8 <fmaxf>
 80063be:	ed87 0a01 	vstr	s0, [r7, #4]

    return (int16_t) (torque_Nm / torqueIncrement_Nm);
 80063c2:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80063e4 <convertNmToAMKTorque+0x5c>
 80063c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80063ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063d2:	ee17 3a90 	vmov	r3, s15
 80063d6:	b21b      	sxth	r3, r3
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	0802201c 	.word	0x0802201c
 80063e4:	3c20902e 	.word	0x3c20902e

080063e8 <getMotorActualValues1>:
/**
 * @brief Retrieve actual values 1 for inverter
 *
 * @param motor Which motor to retrieve value for.
 */
volatile cmr_canAMKActualValues1_t *getMotorActualValues1(motorLocation_t motor) {
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	4603      	mov	r3, r0
 80063f0:	71fb      	strb	r3, [r7, #7]
    switch (motor) {
 80063f2:	79fb      	ldrb	r3, [r7, #7]
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d81f      	bhi.n	8006438 <getMotorActualValues1+0x50>
 80063f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006400 <getMotorActualValues1+0x18>)
 80063fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fe:	bf00      	nop
 8006400:	0800641b 	.word	0x0800641b
 8006404:	0800642f 	.word	0x0800642f
 8006408:	08006411 	.word	0x08006411
 800640c:	08006425 	.word	0x08006425
        case MOTOR_FL:
            return canTractiveGetPayload(CANRX_TRAC_INV_FL_ACT1);
 8006410:	2000      	movs	r0, #0
 8006412:	f7fa ff67 	bl	80012e4 <canTractiveGetPayload>
 8006416:	4603      	mov	r3, r0
 8006418:	e00f      	b.n	800643a <getMotorActualValues1+0x52>
        case MOTOR_FR:
            return canTractiveGetPayload(CANRX_TRAC_INV_FR_ACT1);
 800641a:	2002      	movs	r0, #2
 800641c:	f7fa ff62 	bl	80012e4 <canTractiveGetPayload>
 8006420:	4603      	mov	r3, r0
 8006422:	e00a      	b.n	800643a <getMotorActualValues1+0x52>
        case MOTOR_RL:
            return canTractiveGetPayload(CANRX_TRAC_INV_RL_ACT1);
 8006424:	2004      	movs	r0, #4
 8006426:	f7fa ff5d 	bl	80012e4 <canTractiveGetPayload>
 800642a:	4603      	mov	r3, r0
 800642c:	e005      	b.n	800643a <getMotorActualValues1+0x52>
        case MOTOR_RR:
            return canTractiveGetPayload(CANRX_TRAC_INV_RR_ACT1);
 800642e:	2006      	movs	r0, #6
 8006430:	f7fa ff58 	bl	80012e4 <canTractiveGetPayload>
 8006434:	4603      	mov	r3, r0
 8006436:	e000      	b.n	800643a <getMotorActualValues1+0x52>
        default:
            return NULL;
 8006438:	2300      	movs	r3, #0
    }
}
 800643a:	4618      	mov	r0, r3
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop

08006444 <rpmToRadps>:
            return false;
    }
}

/** @brief Convert rpm to rad/s*/
float rpmToRadps(float rpm) {
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	ed87 0a01 	vstr	s0, [r7, #4]
    static const float radps_per_rpm = 2.0f * M_PI / 60.0f;
    return rpm * radps_per_rpm;
 800644e:	4b07      	ldr	r3, [pc, #28]	@ (800646c <rpmToRadps+0x28>)
 8006450:	ed93 7a00 	vldr	s14, [r3]
 8006454:	edd7 7a01 	vldr	s15, [r7, #4]
 8006458:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800645c:	eeb0 0a67 	vmov.f32	s0, s15
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	08044f44 	.word	0x08044f44

08006470 <motorSpeedToWheelLinearSpeed_mps>:

/** @brief Convert motor speed (in rad/s) to wheel linear speed (in m/s) */
float motorSpeedToWheelLinearSpeed_mps(float motor_speed_radps) {
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	ed87 0a01 	vstr	s0, [r7, #4]
    return motor_speed_radps / GEAR_RATIO * EFFECTIVE_WHEEL_RAD_M;
 800647a:	4b09      	ldr	r3, [pc, #36]	@ (80064a0 <motorSpeedToWheelLinearSpeed_mps+0x30>)
 800647c:	edd3 7a00 	vldr	s15, [r3]
 8006480:	edd7 6a01 	vldr	s13, [r7, #4]
 8006484:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006488:	4b06      	ldr	r3, [pc, #24]	@ (80064a4 <motorSpeedToWheelLinearSpeed_mps+0x34>)
 800648a:	edd3 7a00 	vldr	s15, [r3]
 800648e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8006492:	eeb0 0a67 	vmov.f32	s0, s15
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	0802203c 	.word	0x0802203c
 80064a4:	08022040 	.word	0x08022040

080064a8 <getMotorSpeed_rpm>:
/**
 * @brief Retrieve RPM for motor.
 *
 * @param motor Which motor to retrieve value for.
 */
int16_t getMotorSpeed_rpm(motorLocation_t motor) {
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	4603      	mov	r3, r0
 80064b0:	71fb      	strb	r3, [r7, #7]
    return getMotorActualValues1(motor)->velocity_rpm;
 80064b2:	79fb      	ldrb	r3, [r7, #7]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff ff97 	bl	80063e8 <getMotorActualValues1>
 80064ba:	4603      	mov	r3, r0
 80064bc:	885b      	ldrh	r3, [r3, #2]
 80064be:	b21b      	sxth	r3, r3
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <getMotorSpeed_radps>:
/**
 * @brief Retrieve speed in rad/s for motor.
 *
 * @param motor Which motor to retrieve value for.
 */
float getMotorSpeed_radps(motorLocation_t motor) {
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4603      	mov	r3, r0
 80064d0:	71fb      	strb	r3, [r7, #7]
    return rpmToRadps((float)(getMotorSpeed_rpm(motor)));
 80064d2:	79fb      	ldrb	r3, [r7, #7]
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff ffe7 	bl	80064a8 <getMotorSpeed_rpm>
 80064da:	4603      	mov	r3, r0
 80064dc:	ee07 3a90 	vmov	s15, r3
 80064e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064e4:	eeb0 0a67 	vmov.f32	s0, s15
 80064e8:	f7ff ffac 	bl	8006444 <rpmToRadps>
 80064ec:	eef0 7a40 	vmov.f32	s15, s0
}
 80064f0:	eeb0 0a67 	vmov.f32	s0, s15
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
	...

080064fc <getTotalMotorSpeed_radps>:

/** @brief Returns the sum of motor speeds in rad/s, ignoring negative speeds */
float getTotalMotorSpeed_radps() {
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
    float total_speed_radps = 0.0f;
 8006502:	f04f 0300 	mov.w	r3, #0
 8006506:	607b      	str	r3, [r7, #4]
    for (size_t motor = 0; motor < MOTOR_LEN; motor++){
 8006508:	2300      	movs	r3, #0
 800650a:	603b      	str	r3, [r7, #0]
 800650c:	e017      	b.n	800653e <getTotalMotorSpeed_radps+0x42>
        total_speed_radps += fmaxf(getMotorSpeed_radps(motor), 0.0f); // ignore negative motor speeds
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	b2db      	uxtb	r3, r3
 8006512:	4618      	mov	r0, r3
 8006514:	f7ff ffd8 	bl	80064c8 <getMotorSpeed_radps>
 8006518:	eef0 7a40 	vmov.f32	s15, s0
 800651c:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8006554 <getTotalMotorSpeed_radps+0x58>
 8006520:	eeb0 0a67 	vmov.f32	s0, s15
 8006524:	f018 fac8 	bl	801eab8 <fmaxf>
 8006528:	eeb0 7a40 	vmov.f32	s14, s0
 800652c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006530:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006534:	edc7 7a01 	vstr	s15, [r7, #4]
    for (size_t motor = 0; motor < MOTOR_LEN; motor++){
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	3301      	adds	r3, #1
 800653c:	603b      	str	r3, [r7, #0]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	2b03      	cmp	r3, #3
 8006542:	d9e4      	bls.n	800650e <getTotalMotorSpeed_radps+0x12>
    }
    return total_speed_radps;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	ee07 3a90 	vmov	s15, r3
}
 800654a:	eeb0 0a67 	vmov.f32	s0, s15
 800654e:	3708      	adds	r7, #8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	00000000 	.word	0x00000000

08006558 <getTotalMotorSpeed_rpm>:

/** @brief Returns the sum of motor speeds in rpm, ignoring negative speeds */
float getTotalMotorSpeed_rpm() {
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
    float total_speed_rpm = 0.0f;
 800655e:	f04f 0300 	mov.w	r3, #0
 8006562:	607b      	str	r3, [r7, #4]
    for (size_t motor = 0; motor < MOTOR_LEN; motor++){
 8006564:	2300      	movs	r3, #0
 8006566:	603b      	str	r3, [r7, #0]
 8006568:	e01a      	b.n	80065a0 <getTotalMotorSpeed_rpm+0x48>
        total_speed_rpm += fmaxf(getMotorSpeed_rpm(motor), 0.0f); // ignore negative motor speeds
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	4618      	mov	r0, r3
 8006570:	f7ff ff9a 	bl	80064a8 <getMotorSpeed_rpm>
 8006574:	4603      	mov	r3, r0
 8006576:	ee07 3a90 	vmov	s15, r3
 800657a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800657e:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 80065b8 <getTotalMotorSpeed_rpm+0x60>
 8006582:	eeb0 0a67 	vmov.f32	s0, s15
 8006586:	f018 fa97 	bl	801eab8 <fmaxf>
 800658a:	eeb0 7a40 	vmov.f32	s14, s0
 800658e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006592:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006596:	edc7 7a01 	vstr	s15, [r7, #4]
    for (size_t motor = 0; motor < MOTOR_LEN; motor++){
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	3301      	adds	r3, #1
 800659e:	603b      	str	r3, [r7, #0]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d9e1      	bls.n	800656a <getTotalMotorSpeed_rpm+0x12>
    }
    return total_speed_rpm;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	ee07 3a90 	vmov	s15, r3
}
 80065ac:	eeb0 0a67 	vmov.f32	s0, s15
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	00000000 	.word	0x00000000

080065bc <getMotorPower>:
 * @bug This is incorrect because the output voltage of the inverters, that is the voltage across the motors, is not the AC voltage
 * 
 * @param motor the ID of the motor
 * @param pack_voltage_V the pack voltage
 */
float getMotorPower(motorLocation_t motor, float pack_voltage_V) {
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	4603      	mov	r3, r0
 80065c4:	ed87 0a00 	vstr	s0, [r7]
 80065c8:	71fb      	strb	r3, [r7, #7]
    static const float RAW_CURRENT_TO_A = 0.00654297f; 

    const float torque_current_A = (float)(getMotorActualValues1(motor)->torqueCurrent_raw) * RAW_CURRENT_TO_A;
 80065ca:	79fb      	ldrb	r3, [r7, #7]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7ff ff0b 	bl	80063e8 <getMotorActualValues1>
 80065d2:	4603      	mov	r3, r0
 80065d4:	889b      	ldrh	r3, [r3, #4]
 80065d6:	b21b      	sxth	r3, r3
 80065d8:	ee07 3a90 	vmov	s15, r3
 80065dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065e0:	4b15      	ldr	r3, [pc, #84]	@ (8006638 <getMotorPower+0x7c>)
 80065e2:	edd3 7a00 	vldr	s15, [r3]
 80065e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ea:	edc7 7a05 	vstr	s15, [r7, #20]
    const float magnetization_current_A = (float)(getMotorActualValues1(motor)->magCurrent_raw) * RAW_CURRENT_TO_A;
 80065ee:	79fb      	ldrb	r3, [r7, #7]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7ff fef9 	bl	80063e8 <getMotorActualValues1>
 80065f6:	4603      	mov	r3, r0
 80065f8:	88db      	ldrh	r3, [r3, #6]
 80065fa:	b21b      	sxth	r3, r3
 80065fc:	ee07 3a90 	vmov	s15, r3
 8006600:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006604:	4b0c      	ldr	r3, [pc, #48]	@ (8006638 <getMotorPower+0x7c>)
 8006606:	edd3 7a00 	vldr	s15, [r3]
 800660a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800660e:	edc7 7a04 	vstr	s15, [r7, #16]

    const float currentMagnitude_A = hypotf(torque_current_A, magnetization_current_A);
 8006612:	edd7 0a04 	vldr	s1, [r7, #16]
 8006616:	ed97 0a05 	vldr	s0, [r7, #20]
 800661a:	f017 ffe5 	bl	801e5e8 <hypotf>
 800661e:	ed87 0a03 	vstr	s0, [r7, #12]
    return currentMagnitude_A * pack_voltage_V;
 8006622:	ed97 7a03 	vldr	s14, [r7, #12]
 8006626:	edd7 7a00 	vldr	s15, [r7]
 800662a:	ee67 7a27 	vmul.f32	s15, s14, s15
    /** @bug This is incorrect because the output voltage of the inverters, that is the voltage across the motors, is not the AC voltage */
}
 800662e:	eeb0 0a67 	vmov.f32	s0, s15
 8006632:	3718      	adds	r7, #24
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	08044f48 	.word	0x08044f48

0800663c <getLoadByIndex>:

/** @brief Get a motor load from cmr_loadDistribution_t */
float getLoadByIndex(const cmr_loadDistribution_t *loads, size_t motor) {
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
    if (loads == NULL) {
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d102      	bne.n	8006652 <getLoadByIndex+0x16>
        return 1.0f;
 800664c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006650:	e027      	b.n	80066a2 <getLoadByIndex+0x66>
    }
    float load = 0.0f;
 8006652:	f04f 0300 	mov.w	r3, #0
 8006656:	60fb      	str	r3, [r7, #12]
    switch (motor) {
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	2b03      	cmp	r3, #3
 800665c:	d816      	bhi.n	800668c <getLoadByIndex+0x50>
 800665e:	a201      	add	r2, pc, #4	@ (adr r2, 8006664 <getLoadByIndex+0x28>)
 8006660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006664:	0800667b 	.word	0x0800667b
 8006668:	08006687 	.word	0x08006687
 800666c:	08006675 	.word	0x08006675
 8006670:	08006681 	.word	0x08006681
        case MOTOR_FL:
            load = loads->fl;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	60fb      	str	r3, [r7, #12]
        case MOTOR_FR:
            load = loads->fr;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	60fb      	str	r3, [r7, #12]
        case MOTOR_RL:
            load = loads->rl;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	60fb      	str	r3, [r7, #12]
        case MOTOR_RR:
            load = loads->rr;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	60fb      	str	r3, [r7, #12]
        default:
            load = 0.0f;
 800668c:	f04f 0300 	mov.w	r3, #0
 8006690:	60fb      	str	r3, [r7, #12]
    }
    return fmaxf(load, 0.0f);
 8006692:	eddf 0a06 	vldr	s1, [pc, #24]	@ 80066ac <getLoadByIndex+0x70>
 8006696:	ed97 0a03 	vldr	s0, [r7, #12]
 800669a:	f018 fa0d 	bl	801eab8 <fmaxf>
 800669e:	eef0 7a40 	vmov.f32	s15, s0
}
 80066a2:	eeb0 0a67 	vmov.f32	s0, s15
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	00000000 	.word	0x00000000

080066b0 <getTorqueNmByIndex>:

/** @brief Get a torque from cmr_torqueDistributionNm_t */
float getTorqueNmByIndex(const cmr_torqueDistributionNm_t *torques_Nm, size_t motor) {
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
    if (torques_Nm == NULL) {
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d102      	bne.n	80066c6 <getTorqueNmByIndex+0x16>
        return 0.0f;
 80066c0:	f04f 0300 	mov.w	r3, #0
 80066c4:	e01c      	b.n	8006700 <getTorqueNmByIndex+0x50>
    }
    switch (motor) {
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b03      	cmp	r3, #3
 80066ca:	d817      	bhi.n	80066fc <getTorqueNmByIndex+0x4c>
 80066cc:	a201      	add	r2, pc, #4	@ (adr r2, 80066d4 <getTorqueNmByIndex+0x24>)
 80066ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d2:	bf00      	nop
 80066d4:	080066eb 	.word	0x080066eb
 80066d8:	080066f7 	.word	0x080066f7
 80066dc:	080066e5 	.word	0x080066e5
 80066e0:	080066f1 	.word	0x080066f1
        case MOTOR_FL:
            return torques_Nm->fl;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	e00a      	b.n	8006700 <getTorqueNmByIndex+0x50>
        case MOTOR_FR:
            return torques_Nm->fr;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	e007      	b.n	8006700 <getTorqueNmByIndex+0x50>
        case MOTOR_RL:
            return torques_Nm->rl;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	e004      	b.n	8006700 <getTorqueNmByIndex+0x50>
        case MOTOR_RR:
            return torques_Nm->rr;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	e001      	b.n	8006700 <getTorqueNmByIndex+0x50>
        default:
            return 0.0f;
 80066fc:	f04f 0300 	mov.w	r3, #0
    }
}
 8006700:	ee07 3a90 	vmov	s15, r3
 8006704:	eeb0 0a67 	vmov.f32	s0, s15
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop

08006714 <getMotorRegenerativeCapacity>:
/**
 * @brief Given a motor RPM, return the maximum-power regenerative torque possible
 *
 * @param motor Which motor to retrieve value for.
 */
float getMotorRegenerativeCapacity(int32_t rpm) {
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
    static const float RPM_TO_LOWER_LIMIT = -0.02621878;

    float limit = rpm * RPM_TO_LOWER_LIMIT;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	ee07 3a90 	vmov	s15, r3
 8006722:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006726:	4b15      	ldr	r3, [pc, #84]	@ (800677c <getMotorRegenerativeCapacity+0x68>)
 8006728:	edd3 7a00 	vldr	s15, [r3]
 800672c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006730:	edc7 7a03 	vstr	s15, [r7, #12]
    if (limit < -maxTorque_Nm) {
 8006734:	4b12      	ldr	r3, [pc, #72]	@ (8006780 <getMotorRegenerativeCapacity+0x6c>)
 8006736:	edd3 7a00 	vldr	s15, [r3]
 800673a:	eef1 7a67 	vneg.f32	s15, s15
 800673e:	ed97 7a03 	vldr	s14, [r7, #12]
 8006742:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800674a:	d506      	bpl.n	800675a <getMotorRegenerativeCapacity+0x46>
        limit = -maxTorque_Nm;
 800674c:	4b0c      	ldr	r3, [pc, #48]	@ (8006780 <getMotorRegenerativeCapacity+0x6c>)
 800674e:	edd3 7a00 	vldr	s15, [r3]
 8006752:	eef1 7a67 	vneg.f32	s15, s15
 8006756:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    if (overVoltProtection()) {
 800675a:	f000 f813 	bl	8006784 <overVoltProtection>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <getMotorRegenerativeCapacity+0x54>
        return limit;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	e001      	b.n	800676c <getMotorRegenerativeCapacity+0x58>
    }

    return 0.0f;
 8006768:	f04f 0300 	mov.w	r3, #0
}
 800676c:	ee07 3a90 	vmov	s15, r3
 8006770:	eeb0 0a67 	vmov.f32	s0, s15
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	08044f4c 	.word	0x08044f4c
 8006780:	0802201c 	.word	0x0802201c

08006784 <overVoltProtection>:
/**
 * @brief returns true if AC voltage is under ~590
 * 
 * Need to test
 */
bool overVoltProtection() {
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af00      	add	r7, sp, #0
    // TODO: Use closed loop control to determine upper voltage
    const int32_t upperVoltageLimit_V = 570;
 800678a:	f240 233a 	movw	r3, #570	@ 0x23a
 800678e:	613b      	str	r3, [r7, #16]

    volatile cmr_canHVCPackVoltage_t *HVCPackVoltage = canVehicleGetPayload(CANRX_VEH_VOLTAGE_HVC);
 8006790:	2003      	movs	r0, #3
 8006792:	f7fa fd95 	bl	80012c0 <canVehicleGetPayload>
 8006796:	60f8      	str	r0, [r7, #12]
    float battVoltage_V = ((float) HVCPackVoltage->battVoltage_mV) / 1000.f;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	ee07 3a90 	vmov	s15, r3
 80067a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067a4:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8006824 <overVoltProtection+0xa0>
 80067a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067ac:	edc7 7a02 	vstr	s15, [r7, #8]

    int32_t voltage_V = battVoltage_V;
 80067b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80067b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067b8:	ee17 3a90 	vmov	r3, s15
 80067bc:	617b      	str	r3, [r7, #20]

    // If HVI Sense has timed out, use batt voltage
    if (cmr_canRXMetaTimeoutError(&canTractiveRXMeta[CANRX_TRAC_HVI_SENSE], xTaskGetTickCount()) == 0) {
 80067be:	f009 ff0b 	bl	80105d8 <xTaskGetTickCount>
 80067c2:	4603      	mov	r3, r0
 80067c4:	4619      	mov	r1, r3
 80067c6:	4818      	ldr	r0, [pc, #96]	@ (8006828 <overVoltProtection+0xa4>)
 80067c8:	f005 fdf7 	bl	800c3ba <cmr_canRXMetaTimeoutError>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d11d      	bne.n	800680e <overVoltProtection+0x8a>
        // Otherwise, use HV Voltage
        volatile cmr_canHVIHeartbeat_t *HVISense = canTractiveGetPayload(CANRX_TRAC_HVI_SENSE);
 80067d2:	2008      	movs	r0, #8
 80067d4:	f7fa fd86 	bl	80012e4 <canTractiveGetPayload>
 80067d8:	6078      	str	r0, [r7, #4]
        float hvVoltage_V = ((float) HVISense->packVoltage_cV) / 100.f;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	885b      	ldrh	r3, [r3, #2]
 80067de:	b29b      	uxth	r3, r3
 80067e0:	ee07 3a90 	vmov	s15, r3
 80067e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80067e8:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800682c <overVoltProtection+0xa8>
 80067ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067f0:	edc7 7a00 	vstr	s15, [r7]
        voltage_V = (int32_t) fmaxf(battVoltage_V, hvVoltage_V);
 80067f4:	edd7 0a00 	vldr	s1, [r7]
 80067f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80067fc:	f018 f95c 	bl	801eab8 <fmaxf>
 8006800:	eef0 7a40 	vmov.f32	s15, s0
 8006804:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006808:	ee17 3a90 	vmov	r3, s15
 800680c:	617b      	str	r3, [r7, #20]
    }

    // Returns false voltage is above threshold 
    if (voltage_V >= upperVoltageLimit_V) {
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	429a      	cmp	r2, r3
 8006814:	db01      	blt.n	800681a <overVoltProtection+0x96>
        return false;
 8006816:	2300      	movs	r3, #0
 8006818:	e000      	b.n	800681c <overVoltProtection+0x98>
    }
    return true;
 800681a:	2301      	movs	r3, #1
 800681c:	4618      	mov	r0, r3
 800681e:	3718      	adds	r7, #24
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	447a0000 	.word	0x447a0000
 8006828:	24000288 	.word	0x24000288
 800682c:	42c80000 	.word	0x42c80000

08006830 <pumpsOn>:
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */

void pumpsOn() {
 8006830:	b580      	push	{r7, lr}
 8006832:	b08c      	sub	sp, #48	@ 0x30
 8006834:	af00      	add	r7, sp, #0
    // if accumtemp < 56 remain at low speed
    // if accumtemp > 58 remain at high speed
    // linear in between

    // Get igbt temperatures for each inverter.
    cmr_canAMKActualValues2_t *inv1_temps = (cmr_canAMKActualValues2_t *) canGetPayload(CANRX_INV1_STATUS);
 8006836:	2005      	movs	r0, #5
 8006838:	f7fa fa66 	bl	8000d08 <canGetPayload>
 800683c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    int16_t inv1MotorTemp_dC = inv1_temps->motorTemp_dC;
 800683e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006840:	881b      	ldrh	r3, [r3, #0]
 8006842:	857b      	strh	r3, [r7, #42]	@ 0x2a
    cmr_canAMKActualValues2_t *inv2_temps = (cmr_canAMKActualValues2_t *) canGetPayload(CANRX_INV2_STATUS);
 8006844:	2006      	movs	r0, #6
 8006846:	f7fa fa5f 	bl	8000d08 <canGetPayload>
 800684a:	6278      	str	r0, [r7, #36]	@ 0x24
    int16_t inv2MotorTemp_dC = inv2_temps->motorTemp_dC;
 800684c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	847b      	strh	r3, [r7, #34]	@ 0x22
    cmr_canAMKActualValues2_t *inv3_temps = (cmr_canAMKActualValues2_t *) canGetPayload(CANRX_INV3_STATUS);
 8006852:	2007      	movs	r0, #7
 8006854:	f7fa fa58 	bl	8000d08 <canGetPayload>
 8006858:	61f8      	str	r0, [r7, #28]
    int16_t inv3MotorTemp_dC = inv3_temps->motorTemp_dC;
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	837b      	strh	r3, [r7, #26]
    cmr_canAMKActualValues2_t *inv4_temps = (cmr_canAMKActualValues2_t *) canGetPayload(CANRX_INV4_STATUS);
 8006860:	2008      	movs	r0, #8
 8006862:	f7fa fa51 	bl	8000d08 <canGetPayload>
 8006866:	6178      	str	r0, [r7, #20]
    int16_t inv4MotorTemp_dC = inv4_temps->motorTemp_dC;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	827b      	strh	r3, [r7, #18]

    int16_t motor_temp_avg = (inv1MotorTemp_dC + inv2MotorTemp_dC + inv3MotorTemp_dC + inv4MotorTemp_dC) / 4;
 800686e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8006872:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8006876:	441a      	add	r2, r3
 8006878:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800687c:	441a      	add	r2, r3
 800687e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006882:	4413      	add	r3, r2
 8006884:	2b00      	cmp	r3, #0
 8006886:	da00      	bge.n	800688a <pumpsOn+0x5a>
 8006888:	3303      	adds	r3, #3
 800688a:	109b      	asrs	r3, r3, #2
 800688c:	823b      	strh	r3, [r7, #16]

    if (motor_temp_avg < PUMP_MOTOR_TEMP_LOW_dC)
 800688e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006892:	f240 2211 	movw	r2, #529	@ 0x211
 8006896:	4293      	cmp	r3, r2
 8006898:	dc03      	bgt.n	80068a2 <pumpsOn+0x72>
        pump_1_State = PUMP_MOTOR_STATE_LOW;
 800689a:	4b4b      	ldr	r3, [pc, #300]	@ (80069c8 <pumpsOn+0x198>)
 800689c:	221e      	movs	r2, #30
 800689e:	801a      	strh	r2, [r3, #0]
 80068a0:	e01b      	b.n	80068da <pumpsOn+0xaa>
    else if (motor_temp_avg > PUMP_MOTOR_TEMP_HIGH_dC)
 80068a2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80068a6:	f5b3 7f0c 	cmp.w	r3, #560	@ 0x230
 80068aa:	dd03      	ble.n	80068b4 <pumpsOn+0x84>
        pump_1_State = PUMP_MOTOR_STATE_HIGH;
 80068ac:	4b46      	ldr	r3, [pc, #280]	@ (80069c8 <pumpsOn+0x198>)
 80068ae:	2264      	movs	r2, #100	@ 0x64
 80068b0:	801a      	strh	r2, [r3, #0]
 80068b2:	e012      	b.n	80068da <pumpsOn+0xaa>
    else {
        pump_1_State = ((PUMP_MOTOR_STATE_HIGH - PUMP_MOTOR_STATE_LOW) * (motor_temp_avg - PUMP_MOTOR_TEMP_LOW_dC)) / (PUMP_MOTOR_TEMP_HIGH_dC - PUMP_MOTOR_TEMP_LOW_dC) + PUMP_MOTOR_STATE_LOW;
 80068b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80068b8:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 80068bc:	2246      	movs	r2, #70	@ 0x46
 80068be:	fb02 f303 	mul.w	r3, r2, r3
 80068c2:	4a42      	ldr	r2, [pc, #264]	@ (80069cc <pumpsOn+0x19c>)
 80068c4:	fb82 1203 	smull	r1, r2, r2, r3
 80068c8:	441a      	add	r2, r3
 80068ca:	1112      	asrs	r2, r2, #4
 80068cc:	17db      	asrs	r3, r3, #31
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	331e      	adds	r3, #30
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	4b3c      	ldr	r3, [pc, #240]	@ (80069c8 <pumpsOn+0x198>)
 80068d8:	801a      	strh	r2, [r3, #0]
    }
    pump_1_State = (pump_1_State < 100) ? pump_1_State : 100;
 80068da:	4b3b      	ldr	r3, [pc, #236]	@ (80069c8 <pumpsOn+0x198>)
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	2b64      	cmp	r3, #100	@ 0x64
 80068e0:	bf28      	it	cs
 80068e2:	2364      	movcs	r3, #100	@ 0x64
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	4b38      	ldr	r3, [pc, #224]	@ (80069c8 <pumpsOn+0x198>)
 80068e8:	801a      	strh	r2, [r3, #0]

    // Get igbt temperatures for each inverter.
    int16_t inv1IgbtTemp_dC = inv1_temps->igbtTemp_dC;
 80068ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ec:	88db      	ldrh	r3, [r3, #6]
 80068ee:	81fb      	strh	r3, [r7, #14]
    int16_t inv2IgbtTemp_dC = inv2_temps->igbtTemp_dC;
 80068f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f2:	88db      	ldrh	r3, [r3, #6]
 80068f4:	81bb      	strh	r3, [r7, #12]
    int16_t inv3IgbtTemp_dC = inv3_temps->igbtTemp_dC;
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	88db      	ldrh	r3, [r3, #6]
 80068fa:	817b      	strh	r3, [r7, #10]
    int16_t inv4IgbtTemp_dC = inv4_temps->igbtTemp_dC;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	88db      	ldrh	r3, [r3, #6]
 8006900:	813b      	strh	r3, [r7, #8]

    // Use average igbt temperature - derates at 50C
    int16_t inverter_temp = (inv1IgbtTemp_dC + inv2IgbtTemp_dC + inv3IgbtTemp_dC + inv4IgbtTemp_dC) / 4;
 8006902:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006906:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800690a:	441a      	add	r2, r3
 800690c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006910:	441a      	add	r2, r3
 8006912:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006916:	4413      	add	r3, r2
 8006918:	2b00      	cmp	r3, #0
 800691a:	da00      	bge.n	800691e <pumpsOn+0xee>
 800691c:	3303      	adds	r3, #3
 800691e:	109b      	asrs	r3, r3, #2
 8006920:	80fb      	strh	r3, [r7, #6]
    // if inverter_temp < 44 remain at low speed
    // if inverter_temp > 48 remain at high speed
    // linear in between                

    if (inverter_temp < PUMP_INVERTER_TEMP_LOW_dC)
 8006922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006926:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 800692a:	da03      	bge.n	8006934 <pumpsOn+0x104>
        pump_2_State = PUMP_INVERTER_STATE_LOW;
 800692c:	4b28      	ldr	r3, [pc, #160]	@ (80069d0 <pumpsOn+0x1a0>)
 800692e:	221e      	movs	r2, #30
 8006930:	801a      	strh	r2, [r3, #0]
 8006932:	e01a      	b.n	800696a <pumpsOn+0x13a>
    else if (inverter_temp > PUMP_INVERTER_TEMP_HIGH_dC)
 8006934:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006938:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 800693c:	dd03      	ble.n	8006946 <pumpsOn+0x116>
        pump_2_State = PUMP_INVERTER_STATE_HIGH;
 800693e:	4b24      	ldr	r3, [pc, #144]	@ (80069d0 <pumpsOn+0x1a0>)
 8006940:	2264      	movs	r2, #100	@ 0x64
 8006942:	801a      	strh	r2, [r3, #0]
 8006944:	e011      	b.n	800696a <pumpsOn+0x13a>
    else {
        pump_2_State = ((PUMP_INVERTER_STATE_HIGH - PUMP_INVERTER_STATE_LOW) * (inverter_temp - PUMP_INVERTER_TEMP_LOW_dC) / (PUMP_INVERTER_TEMP_HIGH_dC - PUMP_INVERTER_TEMP_LOW_dC)) + PUMP_INVERTER_STATE_LOW;
 8006946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800694a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800694e:	2246      	movs	r2, #70	@ 0x46
 8006950:	fb02 f303 	mul.w	r3, r2, r3
 8006954:	4a1f      	ldr	r2, [pc, #124]	@ (80069d4 <pumpsOn+0x1a4>)
 8006956:	fb82 1203 	smull	r1, r2, r2, r3
 800695a:	1112      	asrs	r2, r2, #4
 800695c:	17db      	asrs	r3, r3, #31
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	b29b      	uxth	r3, r3
 8006962:	331e      	adds	r3, #30
 8006964:	b29a      	uxth	r2, r3
 8006966:	4b1a      	ldr	r3, [pc, #104]	@ (80069d0 <pumpsOn+0x1a0>)
 8006968:	801a      	strh	r2, [r3, #0]
    }
    pump_2_State = (pump_2_State < 100) ? pump_2_State : 100;
 800696a:	4b19      	ldr	r3, [pc, #100]	@ (80069d0 <pumpsOn+0x1a0>)
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	2b64      	cmp	r3, #100	@ 0x64
 8006970:	bf28      	it	cs
 8006972:	2364      	movcs	r3, #100	@ 0x64
 8006974:	b29a      	uxth	r2, r3
 8006976:	4b16      	ldr	r3, [pc, #88]	@ (80069d0 <pumpsOn+0x1a0>)
 8006978:	801a      	strh	r2, [r3, #0]

    // duty cycle is inverted because of MOSFETS
    cmr_pwmSetDutyCycle(&pump_1_PWM, (uint32_t) 100-pump_1_State);
 800697a:	4b13      	ldr	r3, [pc, #76]	@ (80069c8 <pumpsOn+0x198>)
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8006982:	4619      	mov	r1, r3
 8006984:	4814      	ldr	r0, [pc, #80]	@ (80069d8 <pumpsOn+0x1a8>)
 8006986:	f007 fcdf 	bl	800e348 <cmr_pwmSetDutyCycle>
    cmr_pwmSetDutyCycle(&pump_2_PWM, (uint32_t) 100-pump_2_State);
 800698a:	4b11      	ldr	r3, [pc, #68]	@ (80069d0 <pumpsOn+0x1a0>)
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8006992:	4619      	mov	r1, r3
 8006994:	4811      	ldr	r0, [pc, #68]	@ (80069dc <pumpsOn+0x1ac>)
 8006996:	f007 fcd7 	bl	800e348 <cmr_pwmSetDutyCycle>
    
    if (pump_1_State >= 50 || pump_2_State >= 50) {
 800699a:	4b0b      	ldr	r3, [pc, #44]	@ (80069c8 <pumpsOn+0x198>)
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	2b31      	cmp	r3, #49	@ 0x31
 80069a0:	d803      	bhi.n	80069aa <pumpsOn+0x17a>
 80069a2:	4b0b      	ldr	r3, [pc, #44]	@ (80069d0 <pumpsOn+0x1a0>)
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	2b31      	cmp	r3, #49	@ 0x31
 80069a8:	d904      	bls.n	80069b4 <pumpsOn+0x184>
        cmr_gpioWrite(GPIO_PUMP_ON, 1);
 80069aa:	2101      	movs	r1, #1
 80069ac:	2004      	movs	r0, #4
 80069ae:	f006 f961 	bl	800cc74 <cmr_gpioWrite>
 80069b2:	e004      	b.n	80069be <pumpsOn+0x18e>
    } else {
        cmr_gpioWrite(GPIO_PUMP_ON, 0);
 80069b4:	2100      	movs	r1, #0
 80069b6:	2004      	movs	r0, #4
 80069b8:	f006 f95c 	bl	800cc74 <cmr_gpioWrite>
    }
}
 80069bc:	bf00      	nop
 80069be:	bf00      	nop
 80069c0:	3730      	adds	r7, #48	@ 0x30
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	24001a1c 	.word	0x24001a1c
 80069cc:	88888889 	.word	0x88888889
 80069d0:	24001a1e 	.word	0x24001a1e
 80069d4:	66666667 	.word	0x66666667
 80069d8:	2400ae50 	.word	0x2400ae50
 80069dc:	2400aea0 	.word	0x2400aea0

080069e0 <pumpsOff>:

void pumpsOff() {
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
    pump_1_State = 0;
 80069e4:	4b0d      	ldr	r3, [pc, #52]	@ (8006a1c <pumpsOff+0x3c>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	801a      	strh	r2, [r3, #0]
    pump_2_State = 0;
 80069ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006a20 <pumpsOff+0x40>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	801a      	strh	r2, [r3, #0]
    // duty cycle is inverted because of MOSFETS
    // we want them to be off when without AC
    cmr_pwmSetDutyCycle(&pump_1_PWM, 100-pump_1_State);
 80069f0:	4b0a      	ldr	r3, [pc, #40]	@ (8006a1c <pumpsOff+0x3c>)
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80069f8:	4619      	mov	r1, r3
 80069fa:	480a      	ldr	r0, [pc, #40]	@ (8006a24 <pumpsOff+0x44>)
 80069fc:	f007 fca4 	bl	800e348 <cmr_pwmSetDutyCycle>
    cmr_pwmSetDutyCycle(&pump_2_PWM, 100-pump_2_State);
 8006a00:	4b07      	ldr	r3, [pc, #28]	@ (8006a20 <pumpsOff+0x40>)
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8006a08:	4619      	mov	r1, r3
 8006a0a:	4807      	ldr	r0, [pc, #28]	@ (8006a28 <pumpsOff+0x48>)
 8006a0c:	f007 fc9c 	bl	800e348 <cmr_pwmSetDutyCycle>
    cmr_gpioWrite(GPIO_PUMP_ON, 0);
 8006a10:	2100      	movs	r1, #0
 8006a12:	2004      	movs	r0, #4
 8006a14:	f006 f92e 	bl	800cc74 <cmr_gpioWrite>
}
 8006a18:	bf00      	nop
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	24001a1c 	.word	0x24001a1c
 8006a20:	24001a1e 	.word	0x24001a1e
 8006a24:	2400ae50 	.word	0x2400ae50
 8006a28:	2400aea0 	.word	0x2400aea0

08006a2c <getQuadraticFalloffFactor>:
 * @param normalized_violation violation divided by safety margin, MUST BE NON-NEGATIVE
 * @return falloff factor, between 0 and 1 (inclusive)
 */
static float getQuadraticFalloffFactor (
    float normalized_violation
) {
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	ed87 0a01 	vstr	s0, [r7, #4]
    normalized_violation = fmaxf(normalized_violation, 0.0f); // ensures normalized_violation >= 0, handles INF and NAN
 8006a36:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8006a78 <getQuadraticFalloffFactor+0x4c>
 8006a3a:	ed97 0a01 	vldr	s0, [r7, #4]
 8006a3e:	f018 f83b 	bl	801eab8 <fmaxf>
 8006a42:	ed87 0a01 	vstr	s0, [r7, #4]
    const float normalized_violation_squared = normalized_violation * normalized_violation; // quadratic falloff
 8006a46:	edd7 7a01 	vldr	s15, [r7, #4]
 8006a4a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006a4e:	edc7 7a03 	vstr	s15, [r7, #12]
    return fmaxf(1.0f - normalized_violation_squared, 0.0f);
 8006a52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a56:	edd7 7a03 	vldr	s15, [r7, #12]
 8006a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a5e:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8006a78 <getQuadraticFalloffFactor+0x4c>
 8006a62:	eeb0 0a67 	vmov.f32	s0, s15
 8006a66:	f018 f827 	bl	801eab8 <fmaxf>
 8006a6a:	eef0 7a40 	vmov.f32	s15, s0
}
 8006a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	00000000 	.word	0x00000000

08006a7c <getFalloffFactorByUpperLimit>:
 */
static float getFalloffFactorByUpperLimit (
    float measured_value,
    float hard_upper_limit,
    float safety_margin
) {
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b088      	sub	sp, #32
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	ed87 0a03 	vstr	s0, [r7, #12]
 8006a86:	edc7 0a02 	vstr	s1, [r7, #8]
 8006a8a:	ed87 1a01 	vstr	s2, [r7, #4]
    safety_margin = fmaxf(safety_margin, 0.0f); // ensures safety_margin >= 0; note that safety_margin should be > 0
 8006a8e:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8006af0 <getFalloffFactorByUpperLimit+0x74>
 8006a92:	ed97 0a01 	vldr	s0, [r7, #4]
 8006a96:	f018 f80f 	bl	801eab8 <fmaxf>
 8006a9a:	ed87 0a01 	vstr	s0, [r7, #4]
    const float soft_upper_limit = hard_upper_limit - safety_margin;
 8006a9e:	ed97 7a02 	vldr	s14, [r7, #8]
 8006aa2:	edd7 7a01 	vldr	s15, [r7, #4]
 8006aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006aaa:	edc7 7a07 	vstr	s15, [r7, #28]
    const float violation = fmaxf(measured_value - soft_upper_limit, 0.0f); // ensures violation >= 0
 8006aae:	ed97 7a03 	vldr	s14, [r7, #12]
 8006ab2:	edd7 7a07 	vldr	s15, [r7, #28]
 8006ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006aba:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8006af0 <getFalloffFactorByUpperLimit+0x74>
 8006abe:	eeb0 0a67 	vmov.f32	s0, s15
 8006ac2:	f017 fff9 	bl	801eab8 <fmaxf>
 8006ac6:	ed87 0a06 	vstr	s0, [r7, #24]
    const float normalized_violation = violation / safety_margin; // INF or NAN if safety_margin == 0
 8006aca:	edd7 6a06 	vldr	s13, [r7, #24]
 8006ace:	ed97 7a01 	vldr	s14, [r7, #4]
 8006ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ad6:	edc7 7a05 	vstr	s15, [r7, #20]
    return getQuadraticFalloffFactor(normalized_violation);
 8006ada:	ed97 0a05 	vldr	s0, [r7, #20]
 8006ade:	f7ff ffa5 	bl	8006a2c <getQuadraticFalloffFactor>
 8006ae2:	eef0 7a40 	vmov.f32	s15, s0
}
 8006ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8006aea:	3720      	adds	r7, #32
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	00000000 	.word	0x00000000

08006af4 <getFalloffFactorByLowerLimit>:
 */
static float getFalloffFactorByLowerLimit (
    float measured_value,
    float hard_lower_limit,
    float safety_margin
) {
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b088      	sub	sp, #32
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	ed87 0a03 	vstr	s0, [r7, #12]
 8006afe:	edc7 0a02 	vstr	s1, [r7, #8]
 8006b02:	ed87 1a01 	vstr	s2, [r7, #4]
    safety_margin = fmaxf(safety_margin, 0.0f); // ensures safety_margin >= 0; note that safety_margin should be > 0
 8006b06:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8006b68 <getFalloffFactorByLowerLimit+0x74>
 8006b0a:	ed97 0a01 	vldr	s0, [r7, #4]
 8006b0e:	f017 ffd3 	bl	801eab8 <fmaxf>
 8006b12:	ed87 0a01 	vstr	s0, [r7, #4]
    const float soft_lower_limit = hard_lower_limit + safety_margin;
 8006b16:	ed97 7a02 	vldr	s14, [r7, #8]
 8006b1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8006b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b22:	edc7 7a07 	vstr	s15, [r7, #28]
    const float violation = fmaxf(soft_lower_limit - measured_value, 0.0f); // ensures violation >= 0
 8006b26:	ed97 7a07 	vldr	s14, [r7, #28]
 8006b2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b32:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8006b68 <getFalloffFactorByLowerLimit+0x74>
 8006b36:	eeb0 0a67 	vmov.f32	s0, s15
 8006b3a:	f017 ffbd 	bl	801eab8 <fmaxf>
 8006b3e:	ed87 0a06 	vstr	s0, [r7, #24]
    const float normalized_violation = violation / safety_margin; // INF or NAN if safety_margin == 0
 8006b42:	edd7 6a06 	vldr	s13, [r7, #24]
 8006b46:	ed97 7a01 	vldr	s14, [r7, #4]
 8006b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b4e:	edc7 7a05 	vstr	s15, [r7, #20]
    return getQuadraticFalloffFactor(normalized_violation);
 8006b52:	ed97 0a05 	vldr	s0, [r7, #20]
 8006b56:	f7ff ff69 	bl	8006a2c <getQuadraticFalloffFactor>
 8006b5a:	eef0 7a40 	vmov.f32	s15, s0
}
 8006b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8006b62:	3720      	adds	r7, #32
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	00000000 	.word	0x00000000

08006b6c <getPackPowerFalloffFactor>:
 *
 * @param measured_pack_power_W the measured power of the pack
 */
static float getPackPowerFalloffFactor (
    float measured_pack_power_W
) {
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	ed87 0a01 	vstr	s0, [r7, #4]
    return getFalloffFactorByUpperLimit(measured_pack_power_W, power_upper_limit_W, power_safety_margin_W);
 8006b76:	4b0a      	ldr	r3, [pc, #40]	@ (8006ba0 <getPackPowerFalloffFactor+0x34>)
 8006b78:	edd3 7a00 	vldr	s15, [r3]
 8006b7c:	4b09      	ldr	r3, [pc, #36]	@ (8006ba4 <getPackPowerFalloffFactor+0x38>)
 8006b7e:	ed93 7a00 	vldr	s14, [r3]
 8006b82:	eeb0 1a47 	vmov.f32	s2, s14
 8006b86:	eef0 0a67 	vmov.f32	s1, s15
 8006b8a:	ed97 0a01 	vldr	s0, [r7, #4]
 8006b8e:	f7ff ff75 	bl	8006a7c <getFalloffFactorByUpperLimit>
 8006b92:	eef0 7a40 	vmov.f32	s15, s0
}
 8006b96:	eeb0 0a67 	vmov.f32	s0, s15
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	240005bc 	.word	0x240005bc
 8006ba4:	240005c0 	.word	0x240005c0

08006ba8 <getPackVoltageRiseFalloffFactor>:
 *
 * @param measured_pack_voltage_V the measured voltage of the pack
 */
static float getPackVoltageRiseFalloffFactor (
    float measured_pack_voltage_V
) {
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	ed87 0a01 	vstr	s0, [r7, #4]
    return getFalloffFactorByUpperLimit(measured_pack_voltage_V, pack_voltage_upper_limit_V, pack_voltage_safety_margin_V);
 8006bb2:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8006bd8 <getPackVoltageRiseFalloffFactor+0x30>
 8006bb6:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8006bba:	eeb0 1a47 	vmov.f32	s2, s14
 8006bbe:	eef0 0a67 	vmov.f32	s1, s15
 8006bc2:	ed97 0a01 	vldr	s0, [r7, #4]
 8006bc6:	f7ff ff59 	bl	8006a7c <getFalloffFactorByUpperLimit>
 8006bca:	eef0 7a40 	vmov.f32	s15, s0
}
 8006bce:	eeb0 0a67 	vmov.f32	s0, s15
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	44138000 	.word	0x44138000

08006bdc <getCellVoltageRiseFalloffFactor>:
 *
 * @param measured_max_cell_voltage_V the measured voltage of cell with the highest voltage
 */
static float getCellVoltageRiseFalloffFactor (
    float measured_max_cell_voltage_V
) {
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	ed87 0a01 	vstr	s0, [r7, #4]
    return getFalloffFactorByUpperLimit(measured_max_cell_voltage_V, cell_voltage_upper_limit_V, cell_voltage_safety_margin_V);
 8006be6:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8006c0c <getCellVoltageRiseFalloffFactor+0x30>
 8006bea:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8006c10 <getCellVoltageRiseFalloffFactor+0x34>
 8006bee:	eeb0 1a47 	vmov.f32	s2, s14
 8006bf2:	eef0 0a67 	vmov.f32	s1, s15
 8006bf6:	ed97 0a01 	vldr	s0, [r7, #4]
 8006bfa:	f7ff ff3f 	bl	8006a7c <getFalloffFactorByUpperLimit>
 8006bfe:	eef0 7a40 	vmov.f32	s15, s0
}
 8006c02:	eeb0 0a67 	vmov.f32	s0, s15
 8006c06:	3708      	adds	r7, #8
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	408b3333 	.word	0x408b3333
 8006c10:	3e4ccccd 	.word	0x3e4ccccd

08006c14 <getCellVoltageDropFalloffFactor>:
 *
 * @param measured_min_cell_voltage_V the measured voltage of the cell with the lowest voltage
 */
static float getCellVoltageDropFalloffFactor (
    float measured_min_cell_voltage_V
) {
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	ed87 0a01 	vstr	s0, [r7, #4]
    return getFalloffFactorByLowerLimit(measured_min_cell_voltage_V, cell_voltage_lower_limit_V, cell_voltage_safety_margin_V);
 8006c1e:	eef0 7a04 	vmov.f32	s15, #4	@ 0x40200000  2.5
 8006c22:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8006c44 <getCellVoltageDropFalloffFactor+0x30>
 8006c26:	eeb0 1a47 	vmov.f32	s2, s14
 8006c2a:	eef0 0a67 	vmov.f32	s1, s15
 8006c2e:	ed97 0a01 	vldr	s0, [r7, #4]
 8006c32:	f7ff ff5f 	bl	8006af4 <getFalloffFactorByLowerLimit>
 8006c36:	eef0 7a40 	vmov.f32	s15, s0
}
 8006c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	3e4ccccd 	.word	0x3e4ccccd

08006c48 <getTemperatureFalloffFactor>:

/**
 * @brief Calculates the falloff factor by cell temperature
 * @warning This is CRITICAL for rule-compliance, as it imposes the upper limit on cell temperature
 */
static float getTemperatureFalloffFactor() {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
    volatile cmr_canHVCPackMinMaxCellTemps_t *cellTemps = canVehicleGetPayload(CANRX_VEH_PACK_CELL_TEMP);
 8006c4e:	2007      	movs	r0, #7
 8006c50:	f7fa fb36 	bl	80012c0 <canVehicleGetPayload>
 8006c54:	6078      	str	r0, [r7, #4]
    const float maxCellTemp_C = ((float)(cellTemps->maxCellTemp_dC)) * 1e-1f;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	885b      	ldrh	r3, [r3, #2]
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	ee07 3a90 	vmov	s15, r3
 8006c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c64:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8006c98 <getTemperatureFalloffFactor+0x50>
 8006c68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c6c:	edc7 7a00 	vstr	s15, [r7]
    return getFalloffFactorByUpperLimit(maxCellTemp_C, temperature_upper_limit_C, temperature_safety_margin_C);
 8006c70:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8006c9c <getTemperatureFalloffFactor+0x54>
 8006c74:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8006c78:	eeb0 1a47 	vmov.f32	s2, s14
 8006c7c:	eef0 0a67 	vmov.f32	s1, s15
 8006c80:	ed97 0a00 	vldr	s0, [r7]
 8006c84:	f7ff fefa 	bl	8006a7c <getFalloffFactorByUpperLimit>
 8006c88:	eef0 7a40 	vmov.f32	s15, s0
}
 8006c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	3dcccccd 	.word	0x3dcccccd
 8006c9c:	426c0000 	.word	0x426c0000

08006ca0 <initRetroactiveLimitFilters>:
// ------------------------------------------------------------------------------------------------
// Public functions


/** @brief Initialize FIR filters for retroactive limiting */
void initRetroactiveLimitFilters() {
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	af00      	add	r7, sp, #0
    cmr_fir_filter_init (
 8006ca4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006ca8:	2306      	movs	r3, #6
 8006caa:	4a07      	ldr	r2, [pc, #28]	@ (8006cc8 <initRetroactiveLimitFilters+0x28>)
 8006cac:	4907      	ldr	r1, [pc, #28]	@ (8006ccc <initRetroactiveLimitFilters+0x2c>)
 8006cae:	4808      	ldr	r0, [pc, #32]	@ (8006cd0 <initRetroactiveLimitFilters+0x30>)
 8006cb0:	f005 feb8 	bl	800ca24 <cmr_fir_filter_init>
        torque_multiplier_filter_coefficients,
        TORQUE_MULTIPLIER_FILTER_LEN,
        1.0f
    );

    cmr_fir_filter_init (
 8006cb4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006cb8:	2306      	movs	r3, #6
 8006cba:	4a03      	ldr	r2, [pc, #12]	@ (8006cc8 <initRetroactiveLimitFilters+0x28>)
 8006cbc:	4905      	ldr	r1, [pc, #20]	@ (8006cd4 <initRetroactiveLimitFilters+0x34>)
 8006cbe:	4806      	ldr	r0, [pc, #24]	@ (8006cd8 <initRetroactiveLimitFilters+0x38>)
 8006cc0:	f005 feb0 	bl	800ca24 <cmr_fir_filter_init>
        regen_torque_multiplier_filter_buf,
        torque_multiplier_filter_coefficients,
        TORQUE_MULTIPLIER_FILTER_LEN,
        1.0f
    );
}
 8006cc4:	bf00      	nop
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	08044f54 	.word	0x08044f54
 8006ccc:	2400aef0 	.word	0x2400aef0
 8006cd0:	2400af20 	.word	0x2400af20
 8006cd4:	2400af08 	.word	0x2400af08
 8006cd8:	2400af2c 	.word	0x2400af2c

08006cdc <resetRetroactiveLimitFilters>:

/** @brief Reset FIR filters for retroactive limiting */
void resetRetroactiveLimitFilters() {
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	af00      	add	r7, sp, #0
    cmr_fir_filter_reset(&accel_torque_multiplier_filter_state, 1.0f);
 8006ce0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006ce4:	4804      	ldr	r0, [pc, #16]	@ (8006cf8 <resetRetroactiveLimitFilters+0x1c>)
 8006ce6:	f005 fed3 	bl	800ca90 <cmr_fir_filter_reset>
    cmr_fir_filter_reset(&regen_torque_multiplier_filter_state, 1.0f);
 8006cea:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006cee:	4803      	ldr	r0, [pc, #12]	@ (8006cfc <resetRetroactiveLimitFilters+0x20>)
 8006cf0:	f005 fece 	bl	800ca90 <cmr_fir_filter_reset>
}
 8006cf4:	bf00      	nop
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	2400af20 	.word	0x2400af20
 8006cfc:	2400af2c 	.word	0x2400af2c

08006d00 <getPreemptiveTorqueLimits>:
 * @brief Calculates torque upper- and lower-limits for preemptive limiting.
 *
 * @return The torque upper- and lower-limits for a motor, which applies to every motor.
 */
cmr_torque_limit_t getPreemptiveTorqueLimits
() {
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b08a      	sub	sp, #40	@ 0x28
 8006d04:	af00      	add	r7, sp, #0
    const float max_power_W = power_upper_limit_W - power_safety_margin_W;
 8006d06:	4b34      	ldr	r3, [pc, #208]	@ (8006dd8 <getPreemptiveTorqueLimits+0xd8>)
 8006d08:	ed93 7a00 	vldr	s14, [r3]
 8006d0c:	4b33      	ldr	r3, [pc, #204]	@ (8006ddc <getPreemptiveTorqueLimits+0xdc>)
 8006d0e:	edd3 7a00 	vldr	s15, [r3]
 8006d12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d16:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    const float measured_total_motor_speed = getTotalMotorSpeed_radps() + wheel_speed_sum_offset;
 8006d1a:	f7ff fbef 	bl	80064fc <getTotalMotorSpeed_radps>
 8006d1e:	eef0 7a40 	vmov.f32	s15, s0
 8006d22:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8006de0 <getPreemptiveTorqueLimits+0xe0>
 8006d26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d2a:	edc7 7a08 	vstr	s15, [r7, #32]
//    const float min_voltage_drop_V = getMinVoltageDrop(max_cell_voltage_V, pack_current_A);
//    const float max_power_W = getMaxPowerFromVoltageDrop(max_voltage_drop_V, pack_voltage_V);
//    const float min_power_W = getMinPowerFromVoltageDrop(min_voltage_drop_V, pack_voltage_V);

    cmr_torque_limit_t torque_limits;
    const float efficiency = inverter_efficiency * motor_efficiency * efficiency_multiplier;
 8006d2e:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8006de4 <getPreemptiveTorqueLimits+0xe4>
 8006d32:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8006de8 <getPreemptiveTorqueLimits+0xe8>
 8006d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d3a:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8006dec <getPreemptiveTorqueLimits+0xec>
 8006d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d42:	edc7 7a07 	vstr	s15, [r7, #28]
    torque_limits.max_torque = max_power_W * efficiency / measured_total_motor_speed;
 8006d46:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8006d4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8006d4e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006d52:	ed97 7a08 	vldr	s14, [r7, #32]
 8006d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d5a:	edc7 7a03 	vstr	s15, [r7, #12]
    torque_limits.min_torque = -maxTorque_Nm;
 8006d5e:	4b24      	ldr	r3, [pc, #144]	@ (8006df0 <getPreemptiveTorqueLimits+0xf0>)
 8006d60:	edd3 7a00 	vldr	s15, [r3]
 8006d64:	eef1 7a67 	vneg.f32	s15, s15
 8006d68:	edc7 7a04 	vstr	s15, [r7, #16]

    // bound preemptive limits by the motor's output range
    torque_limits.max_torque = fminf(torque_limits.max_torque, maxTorque_Nm);
 8006d6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d70:	4b1f      	ldr	r3, [pc, #124]	@ (8006df0 <getPreemptiveTorqueLimits+0xf0>)
 8006d72:	ed93 7a00 	vldr	s14, [r3]
 8006d76:	eef0 0a47 	vmov.f32	s1, s14
 8006d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8006d7e:	f017 feb8 	bl	801eaf2 <fminf>
 8006d82:	eef0 7a40 	vmov.f32	s15, s0
 8006d86:	edc7 7a03 	vstr	s15, [r7, #12]
    torque_limits.min_torque = fmaxf(torque_limits.min_torque, -maxTorque_Nm);
 8006d8a:	ed97 7a04 	vldr	s14, [r7, #16]
 8006d8e:	4b18      	ldr	r3, [pc, #96]	@ (8006df0 <getPreemptiveTorqueLimits+0xf0>)
 8006d90:	edd3 7a00 	vldr	s15, [r3]
 8006d94:	eef1 7a67 	vneg.f32	s15, s15
 8006d98:	eef0 0a67 	vmov.f32	s1, s15
 8006d9c:	eeb0 0a47 	vmov.f32	s0, s14
 8006da0:	f017 fe8a 	bl	801eab8 <fmaxf>
 8006da4:	eef0 7a40 	vmov.f32	s15, s0
 8006da8:	edc7 7a04 	vstr	s15, [r7, #16]

    return torque_limits;
 8006dac:	f107 0314 	add.w	r3, r7, #20
 8006db0:	f107 020c 	add.w	r2, r7, #12
 8006db4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006db8:	e883 0003 	stmia.w	r3, {r0, r1}
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	ee07 2a10 	vmov	s14, r2
 8006dc4:	ee07 3a90 	vmov	s15, r3
}
 8006dc8:	eeb0 0a47 	vmov.f32	s0, s14
 8006dcc:	eef0 0a67 	vmov.f32	s1, s15
 8006dd0:	3728      	adds	r7, #40	@ 0x28
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	240005bc 	.word	0x240005bc
 8006ddc:	240005c0 	.word	0x240005c0
 8006de0:	00000000 	.word	0x00000000
 8006de4:	3f7ae148 	.word	0x3f7ae148
 8006de8:	3f689a02 	.word	0x3f689a02
 8006dec:	3f666666 	.word	0x3f666666
 8006df0:	0802201c 	.word	0x0802201c

08006df4 <throttleNeutral>:

/** @brief Returns whether or not the throttle is considered to be inactive */
static bool throttleNeutral() {
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
    volatile cmr_canFSMData_t *dataFSM = canVehicleGetPayload(CANRX_VEH_DATA_FSM);
 8006dfa:	2001      	movs	r0, #1
 8006dfc:	f7fa fa60 	bl	80012c0 <canVehicleGetPayload>
 8006e00:	6078      	str	r0, [r7, #4]
    // Using torqueRequested instead of throttlePosition because FSM performs some checks
    return dataFSM->torqueRequested == 0;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	bf0c      	ite	eq
 8006e0c:	2301      	moveq	r3, #1
 8006e0e:	2300      	movne	r3, #0
 8006e10:	b2db      	uxtb	r3, r3
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
	...

08006e1c <mechanicalBrakesEngaged>:

/** @brief Returns whether or not the brakes is considered to be active */
static bool mechanicalBrakesEngaged() {
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
    volatile cmr_canVSMSensors_t *vsmSensor = canVehicleGetPayload(CANRX_VEH_VSM_SENSORS);
 8006e22:	2008      	movs	r0, #8
 8006e24:	f7fa fa4c 	bl	80012c0 <canVehicleGetPayload>
 8006e28:	6078      	str	r0, [r7, #4]
    // volatile cmr_canFSMData_t *dataFSM = canVehicleGetPayload(CANRX_VEH_DATA_FSM);

    const float brakepsi = (float)(vsmSensor->brakePressureRear_PSI);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	ee07 3a90 	vmov	s15, r3
 8006e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e38:	edc7 7a00 	vstr	s15, [r7]
    return brakepsi >= braking_threshold_psi + braking_threshold_offset_psi;
 8006e3c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8006e64 <mechanicalBrakesEngaged+0x48>
 8006e40:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8006e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e48:	ed97 7a00 	vldr	s14, [r7]
 8006e4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e54:	bfac      	ite	ge
 8006e56:	2301      	movge	r3, #1
 8006e58:	2300      	movlt	r3, #0
 8006e5a:	b2db      	uxtb	r3, r3
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	42200000 	.word	0x42200000

08006e68 <setTorqueLimsProtected>:
 * @note The SF may decide to send any torque within the limits specified by torqueLimPosDist_Nm and torqueLimNegDist_Nm.
 */
void setTorqueLimsProtected (
    const cmr_torqueDistributionNm_t *torquesPos_Nm,
    const cmr_torqueDistributionNm_t *torquesNeg_Nm
) {
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b0a0      	sub	sp, #128	@ 0x80
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
     */
    static const bool apply_preemptive_limits = true;

    // ********* Time Keeping *********

    const TickType_t current_time = xTaskGetTickCount();
 8006e72:	f009 fbb1 	bl	80105d8 <xTaskGetTickCount>
 8006e76:	66b8      	str	r0, [r7, #104]	@ 0x68
    static TickType_t last_power_non_violation_time = 0; // for measuring limit violation durations

    // ********* Preemptive Limiting *********

    const float pack_voltage_V = getPackVoltage();
 8006e78:	f7fc f812 	bl	8002ea0 <getPackVoltage>
 8006e7c:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
    const float pack_current_A = getPackCurrent();
 8006e80:	f7fc f84e 	bl	8002f20 <getPackCurrent>
 8006e84:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
    const float pack_power_W = pack_voltage_V * pack_current_A;
 8006e88:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8006e8c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8006e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e94:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

    const float max_cell_voltage_V = getMaxCellVoltage();
 8006e98:	f7fc f85c 	bl	8002f54 <getMaxCellVoltage>
 8006e9c:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
    const float min_cell_voltage_V = getMinCellVoltage();
 8006ea0:	f7fc f872 	bl	8002f88 <getMinCellVoltage>
 8006ea4:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54
    cmr_torque_limit_t preemptive_torque_limits = getPreemptiveTorqueLimits();
 8006ea8:	f7ff ff2a 	bl	8006d00 <getPreemptiveTorqueLimits>
 8006eac:	eeb0 7a40 	vmov.f32	s14, s0
 8006eb0:	eef0 7a60 	vmov.f32	s15, s1
 8006eb4:	ed87 7a02 	vstr	s14, [r7, #8]
 8006eb8:	edc7 7a03 	vstr	s15, [r7, #12]

    // ********* Retroactive Limiting *********

    // limit power
    const float falloff_factor_by_pack_power = getPackPowerFalloffFactor(pack_power_W);
 8006ebc:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 8006ec0:	f7ff fe54 	bl	8006b6c <getPackPowerFalloffFactor>
 8006ec4:	ed87 0a14 	vstr	s0, [r7, #80]	@ 0x50
    if (falloff_factor_by_pack_power == 0.0f) { // measured power over hard limit
 8006ec8:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8006ecc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed4:	d135      	bne.n	8006f42 <setTorqueLimsProtected+0xda>
        const float power_limit_violation_W = pack_current_A * pack_voltage_V - power_upper_limit_W;
 8006ed6:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8006eda:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8006ede:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ee2:	4b63      	ldr	r3, [pc, #396]	@ (8007070 <setTorqueLimsProtected+0x208>)
 8006ee4:	edd3 7a00 	vldr	s15, [r3]
 8006ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006eec:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
        sf_state.power_limit_max_violation_W = fmaxf(sf_state.power_limit_max_violation_W, power_limit_violation_W);
 8006ef0:	4b60      	ldr	r3, [pc, #384]	@ (8007074 <setTorqueLimsProtected+0x20c>)
 8006ef2:	edd3 7a00 	vldr	s15, [r3]
 8006ef6:	eef0 0a67 	vmov.f32	s1, s15
 8006efa:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8006efe:	f017 fddb 	bl	801eab8 <fmaxf>
 8006f02:	eef0 7a40 	vmov.f32	s15, s0
 8006f06:	4b5b      	ldr	r3, [pc, #364]	@ (8007074 <setTorqueLimsProtected+0x20c>)
 8006f08:	edc3 7a00 	vstr	s15, [r3]

        // update the duration of the longest power hard limit violation
        if (last_power_non_violation_time != 0 && current_time >= last_power_non_violation_time) { // last_power_non_violation_time is valid
 8006f0c:	4b5a      	ldr	r3, [pc, #360]	@ (8007078 <setTorqueLimsProtected+0x210>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d019      	beq.n	8006f48 <setTorqueLimsProtected+0xe0>
 8006f14:	4b58      	ldr	r3, [pc, #352]	@ (8007078 <setTorqueLimsProtected+0x210>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d314      	bcc.n	8006f48 <setTorqueLimsProtected+0xe0>
            TickType_t power_violation_duration = current_time - last_power_non_violation_time;
 8006f1e:	4b56      	ldr	r3, [pc, #344]	@ (8007078 <setTorqueLimsProtected+0x210>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	64bb      	str	r3, [r7, #72]	@ 0x48
            sf_state.longest_power_violation_ms = (uint8_t)min(power_violation_duration, 255); // fit into uint8_t
 8006f28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f2c:	23ff      	movs	r3, #255	@ 0xff
 8006f2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f34:	4293      	cmp	r3, r2
 8006f36:	bf28      	it	cs
 8006f38:	4613      	movcs	r3, r2
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	4b4d      	ldr	r3, [pc, #308]	@ (8007074 <setTorqueLimsProtected+0x20c>)
 8006f3e:	711a      	strb	r2, [r3, #4]
 8006f40:	e002      	b.n	8006f48 <setTorqueLimsProtected+0xe0>
        }
    }
    else { // measured power not over hard limit
        last_power_non_violation_time = current_time;
 8006f42:	4a4d      	ldr	r2, [pc, #308]	@ (8007078 <setTorqueLimsProtected+0x210>)
 8006f44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f46:	6013      	str	r3, [r2, #0]
    }

    // limit pack voltage
    const float falloff_factor_by_pack_voltage_rise = getPackVoltageRiseFalloffFactor(pack_voltage_V);
 8006f48:	ed97 0a19 	vldr	s0, [r7, #100]	@ 0x64
 8006f4c:	f7ff fe2c 	bl	8006ba8 <getPackVoltageRiseFalloffFactor>
 8006f50:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

    // limit cell voltage
    const float falloff_factor_by_cell_voltage_rise = getCellVoltageRiseFalloffFactor(max_cell_voltage_V);
 8006f54:	ed97 0a16 	vldr	s0, [r7, #88]	@ 0x58
 8006f58:	f7ff fe40 	bl	8006bdc <getCellVoltageRiseFalloffFactor>
 8006f5c:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
    const float falloff_factor_by_cell_voltage_drop = getCellVoltageDropFalloffFactor(min_cell_voltage_V);
 8006f60:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8006f64:	f7ff fe56 	bl	8006c14 <getCellVoltageDropFalloffFactor>
 8006f68:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34

    // limit temperature
    const float falloff_factor_by_temperature = getTemperatureFalloffFactor();
 8006f6c:	f7ff fe6c 	bl	8006c48 <getTemperatureFalloffFactor>
 8006f70:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30

    // compute torque multipliers
    const float accel_torque_multiplier = falloff_factor_by_pack_power * falloff_factor_by_cell_voltage_drop ;// falloff_factor_by_temperature;
 8006f74:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8006f78:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8006f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f80:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    const float regen_torque_multiplier = falloff_factor_by_cell_voltage_rise;// * falloff_factor_by_temperature;
 8006f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f86:	62bb      	str	r3, [r7, #40]	@ 0x28

    float filtered_accel_torque_multiplier = accel_torque_multiplier;
 8006f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    filtered_accel_torque_multiplier = cmr_fir_filter_update(&accel_torque_multiplier_filter_state, accel_torque_multiplier);
 8006f8c:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8006f90:	483a      	ldr	r0, [pc, #232]	@ (800707c <setTorqueLimsProtected+0x214>)
 8006f92:	f005 fdad 	bl	800caf0 <cmr_fir_filter_update>
 8006f96:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    filtered_accel_torque_multiplier = fmaxf(filtered_accel_torque_multiplier, 0.0f); // ensures filtered_accel_torque_multiplier >= 0
 8006f9a:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 800708c <setTorqueLimsProtected+0x224>
 8006f9e:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8006fa2:	f017 fd89 	bl	801eab8 <fmaxf>
 8006fa6:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
//    if(accel_torque_multiplier == 1.0f){
//    	filtered_accel_torque_multiplier = 1.0f;
//    }
    filtered_accel_torque_multiplier = fminf(filtered_accel_torque_multiplier, 1.0f); // ensures filtered_accel_torque_multiplier <= 1
 8006faa:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8006fae:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8006fb2:	f017 fd9e 	bl	801eaf2 <fminf>
 8006fb6:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

    float filtered_regen_torque_multiplier = regen_torque_multiplier;
 8006fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fbc:	623b      	str	r3, [r7, #32]
    filtered_regen_torque_multiplier = cmr_fir_filter_update(&regen_torque_multiplier_filter_state, regen_torque_multiplier);
 8006fbe:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8006fc2:	482f      	ldr	r0, [pc, #188]	@ (8007080 <setTorqueLimsProtected+0x218>)
 8006fc4:	f005 fd94 	bl	800caf0 <cmr_fir_filter_update>
 8006fc8:	ed87 0a08 	vstr	s0, [r7, #32]
    filtered_regen_torque_multiplier = fmaxf(filtered_regen_torque_multiplier, 0.0f); // ensures filtered_regen_torque_multiplier >= 0
 8006fcc:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 800708c <setTorqueLimsProtected+0x224>
 8006fd0:	ed97 0a08 	vldr	s0, [r7, #32]
 8006fd4:	f017 fd70 	bl	801eab8 <fmaxf>
 8006fd8:	ed87 0a08 	vstr	s0, [r7, #32]

//   if(regen_torque_multiplier == 1.0f){
//    	filte red_regen_torque_multiplier = 1.0f;
//    }
    filtered_regen_torque_multiplier = fminf(filtered_regen_torque_multiplier, 1.0f); // ensures filtered_regen_torque_multiplier <= 1
 8006fdc:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8006fe0:	ed97 0a08 	vldr	s0, [r7, #32]
 8006fe4:	f017 fd85 	bl	801eaf2 <fminf>
 8006fe8:	ed87 0a08 	vstr	s0, [r7, #32]

    // apply limits
    float all_wheels_final_max_torque = maxTorque_Nm;
 8006fec:	4b25      	ldr	r3, [pc, #148]	@ (8007084 <setTorqueLimsProtected+0x21c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    float all_wheels_final_min_torque = -maxTorque_Nm;
 8006ff2:	4b24      	ldr	r3, [pc, #144]	@ (8007084 <setTorqueLimsProtected+0x21c>)
 8006ff4:	edd3 7a00 	vldr	s15, [r3]
 8006ff8:	eef1 7a67 	vneg.f32	s15, s15
 8006ffc:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78

    if (apply_preemptive_limits) {
 8007000:	4b21      	ldr	r3, [pc, #132]	@ (8007088 <setTorqueLimsProtected+0x220>)
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d013      	beq.n	8007030 <setTorqueLimsProtected+0x1c8>
        all_wheels_final_max_torque = fminf(all_wheels_final_max_torque, preemptive_torque_limits.max_torque);
 8007008:	edd7 7a02 	vldr	s15, [r7, #8]
 800700c:	eef0 0a67 	vmov.f32	s1, s15
 8007010:	ed97 0a1f 	vldr	s0, [r7, #124]	@ 0x7c
 8007014:	f017 fd6d 	bl	801eaf2 <fminf>
 8007018:	ed87 0a1f 	vstr	s0, [r7, #124]	@ 0x7c
        all_wheels_final_min_torque = fmaxf(all_wheels_final_min_torque, preemptive_torque_limits.min_torque);
 800701c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007020:	eef0 0a67 	vmov.f32	s1, s15
 8007024:	ed97 0a1e 	vldr	s0, [r7, #120]	@ 0x78
 8007028:	f017 fd46 	bl	801eab8 <fmaxf>
 800702c:	ed87 0a1e 	vstr	s0, [r7, #120]	@ 0x78
    }

    all_wheels_final_max_torque *= filtered_accel_torque_multiplier;
 8007030:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8007034:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8007038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800703c:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
    all_wheels_final_min_torque *= filtered_regen_torque_multiplier;
 8007040:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8007044:	edd7 7a08 	vldr	s15, [r7, #32]
 8007048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800704c:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78

    // set positive torque to 0 if either throttle is neutral or mechanical breaks are engaged
    if (throttleNeutral() || mechanicalBrakesEngaged()) {
 8007050:	f7ff fed0 	bl	8006df4 <throttleNeutral>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d104      	bne.n	8007064 <setTorqueLimsProtected+0x1fc>
 800705a:	f7ff fedf 	bl	8006e1c <mechanicalBrakesEngaged>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d002      	beq.n	800706a <setTorqueLimsProtected+0x202>
        all_wheels_final_max_torque = 0.0f;
 8007064:	f04f 0300 	mov.w	r3, #0
 8007068:	67fb      	str	r3, [r7, #124]	@ 0x7c
    //    all_wheels_final_min_torque = 0.0f;
    //}

    // ********* Applying Limits *********

    for (size_t motor = 0; motor < MOTOR_LEN; motor++) {
 800706a:	2300      	movs	r3, #0
 800706c:	677b      	str	r3, [r7, #116]	@ 0x74
 800706e:	e0e2      	b.n	8007236 <setTorqueLimsProtected+0x3ce>
 8007070:	240005bc 	.word	0x240005bc
 8007074:	2400af38 	.word	0x2400af38
 8007078:	2400af48 	.word	0x2400af48
 800707c:	2400af20 	.word	0x2400af20
 8007080:	2400af2c 	.word	0x2400af2c
 8007084:	0802201c 	.word	0x0802201c
 8007088:	08044f6c 	.word	0x08044f6c
 800708c:	00000000 	.word	0x00000000
         * This is likely due to differences in friction, as no issues that can cause this are found yet.
        */

        // ********* Handle Requested Torque *********

        const float requested_max_torque = fmaxf(getTorqueNmByIndex(torquesPos_Nm, motor), 0.0f); // ensures requested_max_torque >= 0
 8007090:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7ff fb0c 	bl	80066b0 <getTorqueNmByIndex>
 8007098:	eef0 7a40 	vmov.f32	s15, s0
 800709c:	ed5f 0a05 	vldr	s1, [pc, #-20]	@ 800708c <setTorqueLimsProtected+0x224>
 80070a0:	eeb0 0a67 	vmov.f32	s0, s15
 80070a4:	f017 fd08 	bl	801eab8 <fmaxf>
 80070a8:	ed87 0a07 	vstr	s0, [r7, #28]
        const float requested_min_torque = fminf(getTorqueNmByIndex(torquesNeg_Nm, motor), 0.0f); // ensures requested_min_torque <= 0
 80070ac:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80070ae:	6838      	ldr	r0, [r7, #0]
 80070b0:	f7ff fafe 	bl	80066b0 <getTorqueNmByIndex>
 80070b4:	eef0 7a40 	vmov.f32	s15, s0
 80070b8:	ed5f 0a0c 	vldr	s1, [pc, #-48]	@ 800708c <setTorqueLimsProtected+0x224>
 80070bc:	eeb0 0a67 	vmov.f32	s0, s15
 80070c0:	f017 fd17 	bl	801eaf2 <fminf>
 80070c4:	ed87 0a06 	vstr	s0, [r7, #24]

        float final_max_torque = fminf(all_wheels_final_max_torque, requested_max_torque);
 80070c8:	edd7 0a07 	vldr	s1, [r7, #28]
 80070cc:	ed97 0a1f 	vldr	s0, [r7, #124]	@ 0x7c
 80070d0:	f017 fd0f 	bl	801eaf2 <fminf>
 80070d4:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
        float final_min_torque = fmaxf(all_wheels_final_min_torque, requested_min_torque);
 80070d8:	edd7 0a06 	vldr	s1, [r7, #24]
 80070dc:	ed97 0a1e 	vldr	s0, [r7, #120]	@ 0x78
 80070e0:	f017 fcea 	bl	801eab8 <fmaxf>
 80070e4:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c

        // ********* Prevent Reverse *********

        const float omega = getMotorSpeed_radps(motor);
 80070e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7ff f9eb 	bl	80064c8 <getMotorSpeed_radps>
 80070f2:	ed87 0a05 	vstr	s0, [r7, #20]

        // overrides final max and min torque if omega is negative
        if (omega < 0.0f) {
 80070f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80070fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007102:	d513      	bpl.n	800712c <setTorqueLimsProtected+0x2c4>
            // in regen because omega is negative, so re-calculate max torque based on regen_torque_multiplier
            final_max_torque = fminf(requested_max_torque, maxTorque_Nm) * regen_torque_multiplier;
 8007104:	4b64      	ldr	r3, [pc, #400]	@ (8007298 <setTorqueLimsProtected+0x430>)
 8007106:	edd3 7a00 	vldr	s15, [r3]
 800710a:	eef0 0a67 	vmov.f32	s1, s15
 800710e:	ed97 0a07 	vldr	s0, [r7, #28]
 8007112:	f017 fcee 	bl	801eaf2 <fminf>
 8007116:	eeb0 7a40 	vmov.f32	s14, s0
 800711a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800711e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007122:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
            final_min_torque = 0.0f; // if wheel speed is negative, min torque limit is 0 because we don't want wheel speed to become more negative
 8007126:	f04f 0300 	mov.w	r3, #0
 800712a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }

        // ********* Last-Line-of-Defense Safety Checks *********

        final_max_torque = fmaxf(final_max_torque, 0.0f); // ensures final_max_torque >= 0
 800712c:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 800729c <setTorqueLimsProtected+0x434>
 8007130:	ed97 0a1c 	vldr	s0, [r7, #112]	@ 0x70
 8007134:	f017 fcc0 	bl	801eab8 <fmaxf>
 8007138:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
        final_max_torque = fminf(final_max_torque, maxTorque_Nm); // ensure final_max_torque <= 21Nm
 800713c:	4b56      	ldr	r3, [pc, #344]	@ (8007298 <setTorqueLimsProtected+0x430>)
 800713e:	edd3 7a00 	vldr	s15, [r3]
 8007142:	eef0 0a67 	vmov.f32	s1, s15
 8007146:	ed97 0a1c 	vldr	s0, [r7, #112]	@ 0x70
 800714a:	f017 fcd2 	bl	801eaf2 <fminf>
 800714e:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
        final_min_torque = fminf(final_min_torque, 0.0f); // ensures final_min_torque <= 0
 8007152:	eddf 0a52 	vldr	s1, [pc, #328]	@ 800729c <setTorqueLimsProtected+0x434>
 8007156:	ed97 0a1b 	vldr	s0, [r7, #108]	@ 0x6c
 800715a:	f017 fcca 	bl	801eaf2 <fminf>
 800715e:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
        final_min_torque = fmaxf(final_min_torque, -maxTorque_Nm); // ensure final_min_torque >= -21Nm
 8007162:	4b4d      	ldr	r3, [pc, #308]	@ (8007298 <setTorqueLimsProtected+0x430>)
 8007164:	edd3 7a00 	vldr	s15, [r3]
 8007168:	eef1 7a67 	vneg.f32	s15, s15
 800716c:	eef0 0a67 	vmov.f32	s1, s15
 8007170:	ed97 0a1b 	vldr	s0, [r7, #108]	@ 0x6c
 8007174:	f017 fca0 	bl	801eab8 <fmaxf>
 8007178:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c

        if (pack_power_W > power_upper_limit_W) {
 800717c:	4b48      	ldr	r3, [pc, #288]	@ (80072a0 <setTorqueLimsProtected+0x438>)
 800717e:	edd3 7a00 	vldr	s15, [r3]
 8007182:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8007186:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800718a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800718e:	dd02      	ble.n	8007196 <setTorqueLimsProtected+0x32e>
            final_max_torque = 0.0f; // redundant with retroactive limiting, but keep for extra safety
 8007190:	f04f 0300 	mov.w	r3, #0
 8007194:	673b      	str	r3, [r7, #112]	@ 0x70
        }

        if (pack_current_A > 0.0f || final_max_torque > 0.0f) { // discharging
 8007196:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800719a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800719e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a2:	dc06      	bgt.n	80071b2 <setTorqueLimsProtected+0x34a>
 80071a4:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80071a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b0:	dd11      	ble.n	80071d6 <setTorqueLimsProtected+0x36e>
            if (pack_voltage_V < pack_voltage_lower_limit_V) {
 80071b2:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80072a4 <setTorqueLimsProtected+0x43c>
 80071b6:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80071ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071c2:	d508      	bpl.n	80071d6 <setTorqueLimsProtected+0x36e>
                sf_state.under_voltage_count++;
 80071c4:	4b38      	ldr	r3, [pc, #224]	@ (80072a8 <setTorqueLimsProtected+0x440>)
 80071c6:	799b      	ldrb	r3, [r3, #6]
 80071c8:	3301      	adds	r3, #1
 80071ca:	b2da      	uxtb	r2, r3
 80071cc:	4b36      	ldr	r3, [pc, #216]	@ (80072a8 <setTorqueLimsProtected+0x440>)
 80071ce:	719a      	strb	r2, [r3, #6]
                final_max_torque = 0.0f; // redundant with retroactive limiting, but keep for extra safety
 80071d0:	f04f 0300 	mov.w	r3, #0
 80071d4:	673b      	str	r3, [r7, #112]	@ 0x70
            }
        }

        if (pack_current_A < 0.0f || final_min_torque < 0.0f) { // chargine
 80071d6:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80071da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e2:	d406      	bmi.n	80071f2 <setTorqueLimsProtected+0x38a>
 80071e4:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80071e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071f0:	d511      	bpl.n	8007216 <setTorqueLimsProtected+0x3ae>
            if (pack_voltage_V > pack_voltage_upper_limit_V) {
 80071f2:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80072ac <setTorqueLimsProtected+0x444>
 80071f6:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80071fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007202:	dd08      	ble.n	8007216 <setTorqueLimsProtected+0x3ae>
                sf_state.over_voltage_count++;
 8007204:	4b28      	ldr	r3, [pc, #160]	@ (80072a8 <setTorqueLimsProtected+0x440>)
 8007206:	795b      	ldrb	r3, [r3, #5]
 8007208:	3301      	adds	r3, #1
 800720a:	b2da      	uxtb	r2, r3
 800720c:	4b26      	ldr	r3, [pc, #152]	@ (80072a8 <setTorqueLimsProtected+0x440>)
 800720e:	715a      	strb	r2, [r3, #5]
                final_min_torque = 0.0f; // redundant with retroactive limiting, but keep for extra safety
 8007210:	f04f 0300 	mov.w	r3, #0
 8007214:	66fb      	str	r3, [r7, #108]	@ 0x6c
            }
        }

        volatile cmr_canHVCPackMinMaxCellTemps_t *cellTemps = canVehicleGetPayload(CANRX_VEH_PACK_CELL_TEMP);
 8007216:	2007      	movs	r0, #7
 8007218:	f7fa f852 	bl	80012c0 <canVehicleGetPayload>
 800721c:	6138      	str	r0, [r7, #16]
//        if (maxCellTemp_C > temperature_upper_limit_C) {
//            sf_state.over_temp_count++;
//            final_max_torque = 0.0f; // redundant with retroactive limiting, but keep for extra safety
//        }

        setTorqueLimsUnprotected(motor, final_max_torque, final_min_torque); // apply torque limits
 800721e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007220:	b2db      	uxtb	r3, r3
 8007222:	edd7 0a1b 	vldr	s1, [r7, #108]	@ 0x6c
 8007226:	ed97 0a1c 	vldr	s0, [r7, #112]	@ 0x70
 800722a:	4618      	mov	r0, r3
 800722c:	f7fe ffda 	bl	80061e4 <setTorqueLimsUnprotected>
    for (size_t motor = 0; motor < MOTOR_LEN; motor++) {
 8007230:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007232:	3301      	adds	r3, #1
 8007234:	677b      	str	r3, [r7, #116]	@ 0x74
 8007236:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007238:	2b03      	cmp	r3, #3
 800723a:	f67f af29 	bls.w	8007090 <setTorqueLimsProtected+0x228>
    }

    // send motor powers over CAN for debugging
    motorPower_state.motor_power_FL = falloff_factor_by_cell_voltage_rise;//getMotorPower(MOTOR_FL, pack_voltage_V);
 800723e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8007242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007246:	ee17 3a90 	vmov	r3, s15
 800724a:	b29a      	uxth	r2, r3
 800724c:	4b18      	ldr	r3, [pc, #96]	@ (80072b0 <setTorqueLimsProtected+0x448>)
 800724e:	801a      	strh	r2, [r3, #0]
    motorPower_state.motor_power_FR = falloff_factor_by_cell_voltage_drop;//getMotorPower(MOTOR_FR, pack_voltage_V);
 8007250:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8007254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007258:	ee17 3a90 	vmov	r3, s15
 800725c:	b29a      	uxth	r2, r3
 800725e:	4b14      	ldr	r3, [pc, #80]	@ (80072b0 <setTorqueLimsProtected+0x448>)
 8007260:	805a      	strh	r2, [r3, #2]
    motorPower_state.motor_power_RL = falloff_factor_by_temperature; //getMotorPower(MOTOR_RL, pack_voltage_V);
 8007262:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8007266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800726a:	ee17 3a90 	vmov	r3, s15
 800726e:	b29a      	uxth	r2, r3
 8007270:	4b0f      	ldr	r3, [pc, #60]	@ (80072b0 <setTorqueLimsProtected+0x448>)
 8007272:	809a      	strh	r2, [r3, #4]
    motorPower_state.motor_power_RR = falloff_factor_by_pack_power; getMotorPower(MOTOR_RR, pack_voltage_V);
 8007274:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8007278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800727c:	ee17 3a90 	vmov	r3, s15
 8007280:	b29a      	uxth	r2, r3
 8007282:	4b0b      	ldr	r3, [pc, #44]	@ (80072b0 <setTorqueLimsProtected+0x448>)
 8007284:	80da      	strh	r2, [r3, #6]
 8007286:	ed97 0a19 	vldr	s0, [r7, #100]	@ 0x64
 800728a:	2001      	movs	r0, #1
 800728c:	f7ff f996 	bl	80065bc <getMotorPower>
}
 8007290:	bf00      	nop
 8007292:	3780      	adds	r7, #128	@ 0x80
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	0802201c 	.word	0x0802201c
 800729c:	00000000 	.word	0x00000000
 80072a0:	240005bc 	.word	0x240005bc
 80072a4:	43aa0000 	.word	0x43aa0000
 80072a8:	2400af38 	.word	0x2400af38
 80072ac:	44138000 	.word	0x44138000
 80072b0:	2400af40 	.word	0x2400af40

080072b4 <getSafetyFilterInfo>:

const cmr_canCDCSafetyFilterStates_t *getSafetyFilterInfo(){
 80072b4:	b480      	push	{r7}
 80072b6:	af00      	add	r7, sp, #0
    return (const cmr_canCDCSafetyFilterStates_t*) &sf_state;
 80072b8:	4b02      	ldr	r3, [pc, #8]	@ (80072c4 <getSafetyFilterInfo+0x10>)
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	2400af38 	.word	0x2400af38

080072c8 <getMotorPowerInfo>:

const cmr_canCDCMotorPower_t *getMotorPowerInfo(){
 80072c8:	b480      	push	{r7}
 80072ca:	af00      	add	r7, sp, #0
    return (const cmr_canCDCMotorPower_t*) &motorPower_state;
 80072cc:	4b02      	ldr	r3, [pc, #8]	@ (80072d8 <getMotorPowerInfo+0x10>)
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	2400af40 	.word	0x2400af40

080072dc <setPowerLimit>:

void setPowerLimit(uint8_t limit) {
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	4603      	mov	r3, r0
 80072e4:	71fb      	strb	r3, [r7, #7]
	power_upper_limit_W = limit*1000.0f;
 80072e6:	79fb      	ldrb	r3, [r7, #7]
 80072e8:	ee07 3a90 	vmov	s15, r3
 80072ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072f0:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8007320 <setPowerLimit+0x44>
 80072f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80072f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007324 <setPowerLimit+0x48>)
 80072fa:	edc3 7a00 	vstr	s15, [r3]
	power_safety_margin_W = power_upper_limit_W*0.17f;
 80072fe:	4b09      	ldr	r3, [pc, #36]	@ (8007324 <setPowerLimit+0x48>)
 8007300:	edd3 7a00 	vldr	s15, [r3]
 8007304:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8007328 <setPowerLimit+0x4c>
 8007308:	ee67 7a87 	vmul.f32	s15, s15, s14
 800730c:	4b07      	ldr	r3, [pc, #28]	@ (800732c <setPowerLimit+0x50>)
 800730e:	edc3 7a00 	vstr	s15, [r3]
}
 8007312:	bf00      	nop
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	447a0000 	.word	0x447a0000
 8007324:	240005bc 	.word	0x240005bc
 8007328:	3e2e147b 	.word	0x3e2e147b
 800732c:	240005c0 	.word	0x240005c0

08007330 <sampleADCSensor>:
 *
 * @param sensor The ADC sensor to sample.
 *
 * @return The latest sampled value from the ADC.
 */
static uint32_t sampleADCSensor(const cmr_sensor_t *sensor) {
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
    sensorChannel_t sensorChannel = sensor - sensors;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a0c      	ldr	r2, [pc, #48]	@ (800736c <sampleADCSensor+0x3c>)
 800733c:	1a9b      	subs	r3, r3, r2
 800733e:	10db      	asrs	r3, r3, #3
 8007340:	4a0b      	ldr	r2, [pc, #44]	@ (8007370 <sampleADCSensor+0x40>)
 8007342:	fb02 f303 	mul.w	r3, r2, r3
 8007346:	73fb      	strb	r3, [r7, #15]
    configASSERT(sensorChannel < SENSOR_CH_LEN);
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d903      	bls.n	8007356 <sampleADCSensor+0x26>
 800734e:	212d      	movs	r1, #45	@ 0x2d
 8007350:	4808      	ldr	r0, [pc, #32]	@ (8007374 <sampleADCSensor+0x44>)
 8007352:	f006 fe72 	bl	800e03a <cmr_panic>
    return adcRead(sensorsADCChannels[sensorChannel]);
 8007356:	7bfb      	ldrb	r3, [r7, #15]
 8007358:	4a07      	ldr	r2, [pc, #28]	@ (8007378 <sampleADCSensor+0x48>)
 800735a:	5cd3      	ldrb	r3, [r2, r3]
 800735c:	4618      	mov	r0, r3
 800735e:	f7f9 f9a7 	bl	80006b0 <adcRead>
 8007362:	4603      	mov	r3, r0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	240005c4 	.word	0x240005c4
 8007370:	cccccccd 	.word	0xcccccccd
 8007374:	0801fbac 	.word	0x0801fbac
 8007378:	08044f70 	.word	0x08044f70

0800737c <adcToBusVoltage_cV>:
 *
 * @param reading The ADC value to convert.
 *
 * @return Voltage in mV.
 */
static int32_t adcToBusVoltage_cV(const cmr_sensor_t *sensor, uint32_t reading) {
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
    (void) sensor;  // Placate compiler.
//    float voltage = 0.01163 * reading - 78.4429;
    return (int32_t) (reading); //* 100.0f);
 8007386:	683b      	ldr	r3, [r7, #0]
}
 8007388:	4618      	mov	r0, r3
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	0000      	movs	r0, r0
	...

08007398 <adcToAvgBusCurrent_cA>:
 *
 * @param reading The ADC value to convert.
 *
 * @return Current in mA.
 */
static int32_t adcToAvgBusCurrent_cA(const cmr_sensor_t *sensor, uint32_t reading) {
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
	float current = 0.006965525 * reading - 145.88875;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	ee07 3a90 	vmov	s15, r3
 80073a8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80073ac:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 80073d8 <adcToAvgBusCurrent_cA+0x40>
 80073b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80073b4:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 80073e0 <adcToAvgBusCurrent_cA+0x48>
 80073b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80073bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80073c0:	edc7 7a03 	vstr	s15, [r7, #12]

    return (int32_t) (reading); //* 100.0f);
 80073c4:	683b      	ldr	r3, [r7, #0]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	f3af 8000 	nop.w
 80073d8:	e13107e0 	.word	0xe13107e0
 80073dc:	3f7c87e1 	.word	0x3f7c87e1
 80073e0:	a3d70a3d 	.word	0xa3d70a3d
 80073e4:	40623c70 	.word	0x40623c70

080073e8 <getVoltage>:
        .outOfRange_pcnt = 10,
        .warnFlag = CMR_CAN_WARN_BUS_CURRENT
    }
};

int32_t getVoltage(void) {
 80073e8:	b580      	push	{r7, lr}
 80073ea:	af00      	add	r7, sp, #0
	return cmr_sensorListGetValue(&sensorList, SENSOR_CH_VOLTAGE_CV);
 80073ec:	2100      	movs	r1, #0
 80073ee:	4803      	ldr	r0, [pc, #12]	@ (80073fc <getVoltage+0x14>)
 80073f0:	f007 fa23 	bl	800e83a <cmr_sensorListGetValue>
 80073f4:	4603      	mov	r3, r0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	2400af4c 	.word	0x2400af4c

08007400 <getCurrent>:

int32_t getCurrent(void) {
 8007400:	b580      	push	{r7, lr}
 8007402:	af00      	add	r7, sp, #0
	return cmr_sensorListGetValue(&sensorList, SENSOR_CH_AVG_CURRENT_DA);
 8007404:	2101      	movs	r1, #1
 8007406:	4803      	ldr	r0, [pc, #12]	@ (8007414 <getCurrent+0x14>)
 8007408:	f007 fa17 	bl	800e83a <cmr_sensorListGetValue>
 800740c:	4603      	mov	r3, r0
}
 800740e:	4618      	mov	r0, r3
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	2400af4c 	.word	0x2400af4c

08007418 <sensorsUpdate>:
 *
 * @param pvParameters Ignored.
 *
 * @return Does not return.
 */
static void sensorsUpdate(void *pvParameters) {
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.

    TickType_t lastWakeTime = xTaskGetTickCount();
 8007420:	f009 f8da 	bl	80105d8 <xTaskGetTickCount>
 8007424:	4603      	mov	r3, r0
 8007426:	60fb      	str	r3, [r7, #12]
    while (1) {
        cmr_sensorListUpdate(&sensorList);
 8007428:	4805      	ldr	r0, [pc, #20]	@ (8007440 <sensorsUpdate+0x28>)
 800742a:	f007 f991 	bl	800e750 <cmr_sensorListUpdate>

        vTaskDelayUntil (&lastWakeTime, sensorsUpdate_period_ms);
 800742e:	220a      	movs	r2, #10
 8007430:	f107 030c 	add.w	r3, r7, #12
 8007434:	4611      	mov	r1, r2
 8007436:	4618      	mov	r0, r3
 8007438:	f008 ff58 	bl	80102ec <vTaskDelayUntil>
        cmr_sensorListUpdate(&sensorList);
 800743c:	bf00      	nop
 800743e:	e7f3      	b.n	8007428 <sensorsUpdate+0x10>
 8007440:	2400af4c 	.word	0x2400af4c

08007444 <sensorsInit>:
}

/**
 * @brief Initializes the sensor interface.
 */
void sensorsInit(void) {
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af02      	add	r7, sp, #8
    cmr_sensorListInit(
 800744a:	2202      	movs	r2, #2
 800744c:	4907      	ldr	r1, [pc, #28]	@ (800746c <sensorsInit+0x28>)
 800744e:	4808      	ldr	r0, [pc, #32]	@ (8007470 <sensorsInit+0x2c>)
 8007450:	f007 f959 	bl	800e706 <cmr_sensorListInit>
        &sensorList,
        sensors, sizeof(sensors) / sizeof(sensors[0])
    );

    // Task creation.
    cmr_taskInit(
 8007454:	2205      	movs	r2, #5
 8007456:	2300      	movs	r3, #0
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	4b06      	ldr	r3, [pc, #24]	@ (8007474 <sensorsInit+0x30>)
 800745c:	4906      	ldr	r1, [pc, #24]	@ (8007478 <sensorsInit+0x34>)
 800745e:	4807      	ldr	r0, [pc, #28]	@ (800747c <sensorsInit+0x38>)
 8007460:	f007 fba4 	bl	800ebac <cmr_taskInit>
        "sensor update",
        sensorsUpdate_priority,
        sensorsUpdate,
        NULL
    );
}
 8007464:	bf00      	nop
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	240005c4 	.word	0x240005c4
 8007470:	2400af4c 	.word	0x2400af4c
 8007474:	08007419 	.word	0x08007419
 8007478:	0801fbf0 	.word	0x0801fbf0
 800747c:	2400af54 	.word	0x2400af54

08007480 <dutyCycleToLeftDutyCycle>:
static cmr_pwm_t servo_right_PWM;

extern cmr_canCDCDRSStates_t drs_state;


static uint32_t dutyCycleToLeftDutyCycle (uint32_t duty_cycle) {
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
    return (duty_cycle == 0) ? DRS_MAX_DUTY_CYCLE: DRS_MAX_DUTY_CYCLE - duty_cycle;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <dutyCycleToLeftDutyCycle+0x16>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f1c3 0360 	rsb	r3, r3, #96	@ 0x60
 8007494:	e000      	b.n	8007498 <dutyCycleToLeftDutyCycle+0x18>
 8007496:	2360      	movs	r3, #96	@ 0x60
}
 8007498:	4618      	mov	r0, r3
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <dutyCycleToRightDutyCycle>:

static uint32_t dutyCycleToRightDutyCycle (uint32_t duty_cycle) {
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
    // Help with servo alignment in housing

	return (duty_cycle == 0) ? DRS_MIN_DUTY_CYCLE - 3 : DRS_MIN_DUTY_CYCLE + duty_cycle - 4;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <dutyCycleToRightDutyCycle+0x14>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	3354      	adds	r3, #84	@ 0x54
 80074b6:	e000      	b.n	80074ba <dutyCycleToRightDutyCycle+0x16>
 80074b8:	2355      	movs	r3, #85	@ 0x55
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
	...

080074c8 <setServoQuiet>:

void setServoQuiet() {
 80074c8:	b580      	push	{r7, lr}
 80074ca:	af00      	add	r7, sp, #0
	cmr_pwmSetDutyCycle(&servo_right_PWM, 0);
 80074cc:	2100      	movs	r1, #0
 80074ce:	4804      	ldr	r0, [pc, #16]	@ (80074e0 <setServoQuiet+0x18>)
 80074d0:	f006 ff3a 	bl	800e348 <cmr_pwmSetDutyCycle>
	cmr_pwmSetDutyCycle(&servo_left_PWM, 0);
 80074d4:	2100      	movs	r1, #0
 80074d6:	4803      	ldr	r0, [pc, #12]	@ (80074e4 <setServoQuiet+0x1c>)
 80074d8:	f006 ff36 	bl	800e348 <cmr_pwmSetDutyCycle>
}
 80074dc:	bf00      	nop
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	2400c004 	.word	0x2400c004
 80074e4:	2400bfb4 	.word	0x2400bfb4

080074e8 <setDrsPosition>:

void setDrsPosition(uint32_t duty_cycle) {
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
    uint32_t right_duty_cycle = dutyCycleToRightDutyCycle(duty_cycle);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f7ff ffd7 	bl	80074a4 <dutyCycleToRightDutyCycle>
 80074f6:	60f8      	str	r0, [r7, #12]
    uint32_t left_duty_cycle = dutyCycleToLeftDutyCycle(duty_cycle);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f7ff ffc1 	bl	8007480 <dutyCycleToLeftDutyCycle>
 80074fe:	60b8      	str	r0, [r7, #8]
    drs_state.angle = (uint8_t) duty_cycle;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	b2da      	uxtb	r2, r3
 8007504:	4b0a      	ldr	r3, [pc, #40]	@ (8007530 <setDrsPosition+0x48>)
 8007506:	705a      	strb	r2, [r3, #1]
    drs_state.pwm_left = (uint8_t) left_duty_cycle;
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	b2da      	uxtb	r2, r3
 800750c:	4b08      	ldr	r3, [pc, #32]	@ (8007530 <setDrsPosition+0x48>)
 800750e:	709a      	strb	r2, [r3, #2]
    drs_state.pwm_right = (uint8_t) right_duty_cycle;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	b2da      	uxtb	r2, r3
 8007514:	4b06      	ldr	r3, [pc, #24]	@ (8007530 <setDrsPosition+0x48>)
 8007516:	70da      	strb	r2, [r3, #3]
    cmr_pwmSetDutyCycle(&servo_right_PWM, right_duty_cycle);
 8007518:	68f9      	ldr	r1, [r7, #12]
 800751a:	4806      	ldr	r0, [pc, #24]	@ (8007534 <setDrsPosition+0x4c>)
 800751c:	f006 ff14 	bl	800e348 <cmr_pwmSetDutyCycle>
    cmr_pwmSetDutyCycle(&servo_left_PWM, left_duty_cycle);
 8007520:	68b9      	ldr	r1, [r7, #8]
 8007522:	4805      	ldr	r0, [pc, #20]	@ (8007538 <setDrsPosition+0x50>)
 8007524:	f006 ff10 	bl	800e348 <cmr_pwmSetDutyCycle>
}
 8007528:	bf00      	nop
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	24007a8c 	.word	0x24007a8c
 8007534:	2400c004 	.word	0x2400c004
 8007538:	2400bfb4 	.word	0x2400bfb4

0800753c <servoInit>:
/**
 * @brief Task for initialising the servos.
 *
 * @return Does not return.
 */
void servoInit() {
 800753c:	b5b0      	push	{r4, r5, r7, lr}
 800753e:	b08c      	sub	sp, #48	@ 0x30
 8007540:	af00      	add	r7, sp, #0
    const cmr_pwmPinConfig_t pwmPinConfigLeft = { // GPIO A0
 8007542:	4b12      	ldr	r3, [pc, #72]	@ (800758c <servoInit+0x50>)
 8007544:	f107 0418 	add.w	r4, r7, #24
 8007548:	461d      	mov	r5, r3
 800754a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800754c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800754e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007552:	e884 0003 	stmia.w	r4, {r0, r1}
        .channel = TIM_CHANNEL_1,
        .presc = 107,
        .period_ticks = 1000,
        .timer = TIM2
    };
    const cmr_pwmPinConfig_t pwmPinConfigRight = { // GPIO A1
 8007556:	4b0e      	ldr	r3, [pc, #56]	@ (8007590 <servoInit+0x54>)
 8007558:	463c      	mov	r4, r7
 800755a:	461d      	mov	r5, r3
 800755c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800755e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007560:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007564:	e884 0003 	stmia.w	r4, {r0, r1}
        .presc = 107,
        .period_ticks = 1000,
        .timer = TIM2
    };

    cmr_pwmInit(&servo_left_PWM, &pwmPinConfigLeft);
 8007568:	f107 0318 	add.w	r3, r7, #24
 800756c:	4619      	mov	r1, r3
 800756e:	4809      	ldr	r0, [pc, #36]	@ (8007594 <servoInit+0x58>)
 8007570:	f006 fd76 	bl	800e060 <cmr_pwmInit>
    cmr_pwmInit(&servo_right_PWM, &pwmPinConfigRight);
 8007574:	463b      	mov	r3, r7
 8007576:	4619      	mov	r1, r3
 8007578:	4807      	ldr	r0, [pc, #28]	@ (8007598 <servoInit+0x5c>)
 800757a:	f006 fd71 	bl	800e060 <cmr_pwmInit>
    setDrsPosition(DRS_CLOSED_DUTY_CYCLE);
 800757e:	2000      	movs	r0, #0
 8007580:	f7ff ffb2 	bl	80074e8 <setDrsPosition>
}
 8007584:	bf00      	nop
 8007586:	3730      	adds	r7, #48	@ 0x30
 8007588:	46bd      	mov	sp, r7
 800758a:	bdb0      	pop	{r4, r5, r7, pc}
 800758c:	0801fc00 	.word	0x0801fc00
 8007590:	0801fc18 	.word	0x0801fc18
 8007594:	2400bfb4 	.word	0x2400bfb4
 8007598:	2400c004 	.word	0x2400c004

0800759c <MCP3202_init>:
    ADS7038_write(0x07, 0b00000000);
    ADS7038_read(0x07);

}

uint16_t MCP3202_init() {
 800759c:	b580      	push	{r7, lr}
 800759e:	b09a      	sub	sp, #104	@ 0x68
 80075a0:	af04      	add	r7, sp, #16

	SPI_InitTypeDef MCP3202SpiInit = {0};
 80075a2:	463b      	mov	r3, r7
 80075a4:	2258      	movs	r2, #88	@ 0x58
 80075a6:	2100      	movs	r1, #0
 80075a8:	4618      	mov	r0, r3
 80075aa:	f016 ffdd 	bl	801e568 <memset>
	MCP3202SpiInit.Mode = SPI_MODE_MASTER;
 80075ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80075b2:	603b      	str	r3, [r7, #0]
	MCP3202SpiInit.Direction = SPI_DIRECTION_2LINES;
 80075b4:	2300      	movs	r3, #0
 80075b6:	607b      	str	r3, [r7, #4]
	MCP3202SpiInit.DataSize = SPI_DATASIZE_8BIT;
 80075b8:	2307      	movs	r3, #7
 80075ba:	60bb      	str	r3, [r7, #8]
	MCP3202SpiInit.CLKPolarity = SPI_POLARITY_HIGH;
 80075bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80075c0:	60fb      	str	r3, [r7, #12]
	MCP3202SpiInit.CLKPhase = SPI_PHASE_2EDGE;
 80075c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80075c6:	613b      	str	r3, [r7, #16]
	MCP3202SpiInit.NSS = SPI_NSS_SOFT;
 80075c8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80075cc:	617b      	str	r3, [r7, #20]
	MCP3202SpiInit.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80075ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80075d2:	61bb      	str	r3, [r7, #24]
	MCP3202SpiInit.FirstBit = SPI_FIRSTBIT_MSB;
 80075d4:	2300      	movs	r3, #0
 80075d6:	61fb      	str	r3, [r7, #28]
	MCP3202SpiInit.TIMode = SPI_TIMODE_DISABLE;
 80075d8:	2300      	movs	r3, #0
 80075da:	623b      	str	r3, [r7, #32]
	MCP3202SpiInit.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075dc:	2300      	movs	r3, #0
 80075de:	627b      	str	r3, [r7, #36]	@ 0x24
	MCP3202SpiInit.CRCPolynomial = 0x0;
 80075e0:	2300      	movs	r3, #0
 80075e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	MCP3202SpiInit.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80075e4:	2300      	movs	r3, #0
 80075e6:	633b      	str	r3, [r7, #48]	@ 0x30
	MCP3202SpiInit.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80075e8:	2300      	movs	r3, #0
 80075ea:	637b      	str	r3, [r7, #52]	@ 0x34
	MCP3202SpiInit.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80075ec:	2300      	movs	r3, #0
 80075ee:	63bb      	str	r3, [r7, #56]	@ 0x38
	MCP3202SpiInit.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80075f0:	2300      	movs	r3, #0
 80075f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	MCP3202SpiInit.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80075f4:	2300      	movs	r3, #0
 80075f6:	643b      	str	r3, [r7, #64]	@ 0x40
	MCP3202SpiInit.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80075f8:	2300      	movs	r3, #0
 80075fa:	647b      	str	r3, [r7, #68]	@ 0x44
	MCP3202SpiInit.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80075fc:	2300      	movs	r3, #0
 80075fe:	64bb      	str	r3, [r7, #72]	@ 0x48
	MCP3202SpiInit.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007600:	2300      	movs	r3, #0
 8007602:	64fb      	str	r3, [r7, #76]	@ 0x4c
	MCP3202SpiInit.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007604:	2300      	movs	r3, #0
 8007606:	653b      	str	r3, [r7, #80]	@ 0x50
	MCP3202SpiInit.IOSwap = SPI_IO_SWAP_DISABLE;
 8007608:	2300      	movs	r3, #0
 800760a:	657b      	str	r3, [r7, #84]	@ 0x54

    cmr_spiInit(
 800760c:	463a      	mov	r2, r7
 800760e:	2300      	movs	r3, #0
 8007610:	9303      	str	r3, [sp, #12]
 8007612:	4b08      	ldr	r3, [pc, #32]	@ (8007634 <MCP3202_init+0x98>)
 8007614:	9302      	str	r3, [sp, #8]
 8007616:	2300      	movs	r3, #0
 8007618:	9301      	str	r3, [sp, #4]
 800761a:	4b07      	ldr	r3, [pc, #28]	@ (8007638 <MCP3202_init+0x9c>)
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	4b07      	ldr	r3, [pc, #28]	@ (800763c <MCP3202_init+0xa0>)
 8007620:	4907      	ldr	r1, [pc, #28]	@ (8007640 <MCP3202_init+0xa4>)
 8007622:	4808      	ldr	r0, [pc, #32]	@ (8007644 <MCP3202_init+0xa8>)
 8007624:	f007 f91e 	bl	800e864 <cmr_spiInit>
        &MCP3202Spi, SPI4, &MCP3202SpiInit, &MCP3202SpiPins,
        DMA2_Stream2, 0,
        DMA2_Stream3, 0
    );
}
 8007628:	bf00      	nop
 800762a:	4618      	mov	r0, r3
 800762c:	3758      	adds	r7, #88	@ 0x58
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	40020458 	.word	0x40020458
 8007638:	40020440 	.word	0x40020440
 800763c:	08044f74 	.word	0x08044f74
 8007640:	40013400 	.word	0x40013400
 8007644:	2400c054 	.word	0x2400c054

08007648 <getNextState>:
static void stateUpdate(void *pvParameters);

// ------------------------------------------------------------------------------------------------
// Functions

static PTCState_t getNextState() { 
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0

	cmr_canVSMStatus_t *status = (cmr_canVSMStatus_t *)(canGetPayload(CANRX_VSM_STATUS));
 800764e:	2001      	movs	r0, #1
 8007650:	f7f9 fb5a 	bl	8000d08 <canGetPayload>
 8007654:	6038      	str	r0, [r7, #0]
    PTCState_t nextState = PTC_OFF;
 8007656:	2300      	movs	r3, #0
 8007658:	71fb      	strb	r3, [r7, #7]

    switch(ptcStatus) {
 800765a:	4b08      	ldr	r3, [pc, #32]	@ (800767c <getNextState+0x34>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d004      	beq.n	800766c <getNextState+0x24>
 8007662:	2b01      	cmp	r3, #1
 8007664:	d105      	bne.n	8007672 <getNextState+0x2a>
        case PTC_ON: { 
            if (!(status->internalState == CMR_CAN_VSM_STATE_HV_EN || CMR_CAN_VSM_STATE_RTD)) {
                nextState = PTC_OFF;
            }
            else {
                nextState = PTC_ON;
 8007666:	2301      	movs	r3, #1
 8007668:	71fb      	strb	r3, [r7, #7]
            }
            break;
 800766a:	e002      	b.n	8007672 <getNextState+0x2a>
        }

        case PTC_OFF: {
            if (status->internalState == CMR_CAN_VSM_STATE_HV_EN || CMR_CAN_VSM_STATE_RTD) {
                nextState = PTC_ON;
 800766c:	2301      	movs	r3, #1
 800766e:	71fb      	strb	r3, [r7, #7]
            }
            else {
                nextState = PTC_OFF;
            }
            break;
 8007670:	bf00      	nop
        }
    }
    return nextState;
 8007672:	79fb      	ldrb	r3, [r7, #7]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	2400c220 	.word	0x2400c220

08007680 <setStateOutputs>:

 PTCState_t getPTCStatus() {
	return ptcStatus;
}

static void setStateOutputs(){
 8007680:	b580      	push	{r7, lr}
 8007682:	af00      	add	r7, sp, #0
    switch (ptcStatus)
 8007684:	4b0a      	ldr	r3, [pc, #40]	@ (80076b0 <setStateOutputs+0x30>)
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d009      	beq.n	80076a0 <setStateOutputs+0x20>
 800768c:	2b01      	cmp	r3, #1
 800768e:	d10d      	bne.n	80076ac <setStateOutputs+0x2c>
    {
    case PTC_ON:
        pumpsOn();
 8007690:	f7ff f8ce 	bl	8006830 <pumpsOn>
        fansOn();
 8007694:	f7fc fe58 	bl	8004348 <fansOn>
        mcCtrlOn();
 8007698:	f7fe fb7c 	bl	8005d94 <mcCtrlOn>
        break;
 800769c:	bf00      	nop
    case PTC_OFF:
        mcCtrlOff();
        fansOff();
        pumpsOff();
    }
}
 800769e:	e005      	b.n	80076ac <setStateOutputs+0x2c>
        mcCtrlOff();
 80076a0:	f7fe fb6c 	bl	8005d7c <mcCtrlOff>
        fansOff();
 80076a4:	f7fc ff26 	bl	80044f4 <fansOff>
        pumpsOff();
 80076a8:	f7ff f99a 	bl	80069e0 <pumpsOff>
}
 80076ac:	bf00      	nop
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	2400c220 	.word	0x2400c220

080076b4 <stateUpdate>:

static void stateUpdate(void *pvParameters){
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
    (void) pvParameters;    // Placate compiler.
    ptcStatus = PTC_OFF;
 80076bc:	4b0c      	ldr	r3, [pc, #48]	@ (80076f0 <stateUpdate+0x3c>)
 80076be:	2200      	movs	r2, #0
 80076c0:	701a      	strb	r2, [r3, #0]

    TickType_t lastWakeTime_ms = xTaskGetTickCount();
 80076c2:	f008 ff89 	bl	80105d8 <xTaskGetTickCount>
 80076c6:	4603      	mov	r3, r0
 80076c8:	60fb      	str	r3, [r7, #12]
    
    while (1) {
        ptcStatus = getNextState();
 80076ca:	f7ff ffbd 	bl	8007648 <getNextState>
 80076ce:	4603      	mov	r3, r0
 80076d0:	461a      	mov	r2, r3
 80076d2:	4b07      	ldr	r3, [pc, #28]	@ (80076f0 <stateUpdate+0x3c>)
 80076d4:	701a      	strb	r2, [r3, #0]
        setStateOutputs();
 80076d6:	f7ff ffd3 	bl	8007680 <setStateOutputs>

        vTaskDelayUntil(&lastWakeTime_ms, stateUpdate_period_ms);
 80076da:	4b06      	ldr	r3, [pc, #24]	@ (80076f4 <stateUpdate+0x40>)
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	f107 030c 	add.w	r3, r7, #12
 80076e2:	4611      	mov	r1, r2
 80076e4:	4618      	mov	r0, r3
 80076e6:	f008 fe01 	bl	80102ec <vTaskDelayUntil>
        ptcStatus = getNextState();
 80076ea:	bf00      	nop
 80076ec:	e7ed      	b.n	80076ca <stateUpdate+0x16>
 80076ee:	bf00      	nop
 80076f0:	2400c220 	.word	0x2400c220
 80076f4:	24000614 	.word	0x24000614

080076f8 <stateInit>:
    }
}

void stateInit() {
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af02      	add	r7, sp, #8
	cmr_taskInit(
 80076fe:	2203      	movs	r2, #3
 8007700:	2300      	movs	r3, #0
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	4b03      	ldr	r3, [pc, #12]	@ (8007714 <stateInit+0x1c>)
 8007706:	4904      	ldr	r1, [pc, #16]	@ (8007718 <stateInit+0x20>)
 8007708:	4804      	ldr	r0, [pc, #16]	@ (800771c <stateInit+0x24>)
 800770a:	f007 fa4f 	bl	800ebac <cmr_taskInit>
	    "stateUpdate",
		stateUpdate_priority,
	    stateUpdate,
	    NULL
	);
}
 800770e:	bf00      	nop
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	080076b5 	.word	0x080076b5
 8007718:	0801fc30 	.word	0x0801fc30
 800771c:	2400c224 	.word	0x2400c224

08007720 <rpm_to_mps>:
/**
 * @brief Clamps val to [lo, hi]
 */
#define fclamp(val, lo, hi) ( fmin(fmax(val, lo), hi) )

static float rpm_to_mps(float rpm) {
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	ed87 0a01 	vstr	s0, [r7, #4]
    return rpm / 60 * 2 * PI * 0.239;
 800772a:	ed97 7a01 	vldr	s14, [r7, #4]
 800772e:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8007770 <rpm_to_mps+0x50>
 8007732:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007736:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800773a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800773e:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8007760 <rpm_to_mps+0x40>
 8007742:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007746:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8007768 <rpm_to_mps+0x48>
 800774a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800774e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8007752:	eeb0 0a67 	vmov.f32	s0, s15
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	54442d18 	.word	0x54442d18
 8007764:	400921fb 	.word	0x400921fb
 8007768:	4fdf3b64 	.word	0x4fdf3b64
 800776c:	3fce978d 	.word	0x3fce978d
 8007770:	42700000 	.word	0x42700000

08007774 <wheelspeed_to_body_velocity>:
 * @brief Estimate body velocity from wheelspeed and kappa
 * @param wheelspeed: wheelspeed in m / s
 * @param kappa: slip ratio (starting from 0)
 * @returns estimated body velocity
 */
static float wheelspeed_to_body_velocity(float wheelspeed, float kappa) {
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	ed87 0a01 	vstr	s0, [r7, #4]
 800777e:	edc7 0a00 	vstr	s1, [r7]
    return wheelspeed / (1 + kappa);
 8007782:	edd7 7a00 	vldr	s15, [r7]
 8007786:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800778a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800778e:	ed97 7a01 	vldr	s14, [r7, #4]
 8007792:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007796:	eef0 7a66 	vmov.f32	s15, s13
}
 800779a:	eeb0 0a67 	vmov.f32	s0, s15
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <get_load_transfer>:

/**
 * @brief Finds weight transfer from front to back
 * Unit: N
 */
float get_load_transfer(float acceleration, float aero_lift, float aero_drag) {
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80077b2:	edc7 0a02 	vstr	s1, [r7, #8]
 80077b6:	ed87 1a01 	vstr	s2, [r7, #4]
    // This is currently crude
    return (acceleration * car_mass + aero_drag) * cg_height / wheelbase;
 80077ba:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80077f0 <get_load_transfer+0x48>
 80077be:	edd7 7a03 	vldr	s15, [r7, #12]
 80077c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80077ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077ce:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80077f4 <get_load_transfer+0x4c>
 80077d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80077d6:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80077f8 <get_load_transfer+0x50>
 80077da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80077de:	eef0 7a66 	vmov.f32	s15, s13
}
 80077e2:	eeb0 0a67 	vmov.f32	s0, s15
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	43b90000 	.word	0x43b90000
 80077f4:	3e99999a 	.word	0x3e99999a
 80077f8:	3fc66666 	.word	0x3fc66666

080077fc <make_at_least_zero>:

void make_at_least_zero(float *val) {
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
    *val = fmaxf(*val, 0.0f);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	edd3 7a00 	vldr	s15, [r3]
 800780a:	eddf 0a07 	vldr	s1, [pc, #28]	@ 8007828 <make_at_least_zero+0x2c>
 800780e:	eeb0 0a67 	vmov.f32	s0, s15
 8007812:	f017 f951 	bl	801eab8 <fmaxf>
 8007816:	eef0 7a40 	vmov.f32	s15, s0
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	edc3 7a00 	vstr	s15, [r3]
}
 8007820:	bf00      	nop
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	00000000 	.word	0x00000000

0800782c <merge_predicted_body_velocities>:

float merge_predicted_body_velocities(float FL, float FR, float RL, float RR) {
 800782c:	b580      	push	{r7, lr}
 800782e:	ed2d 8b02 	vpush	{d8}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	ed87 0a03 	vstr	s0, [r7, #12]
 800783a:	edc7 0a02 	vstr	s1, [r7, #8]
 800783e:	ed87 1a01 	vstr	s2, [r7, #4]
 8007842:	edc7 1a00 	vstr	s3, [r7]
    return fminf(fmaxf(FL, FR), fmaxf(RL, RR));
 8007846:	edd7 0a02 	vldr	s1, [r7, #8]
 800784a:	ed97 0a03 	vldr	s0, [r7, #12]
 800784e:	f017 f933 	bl	801eab8 <fmaxf>
 8007852:	eeb0 8a40 	vmov.f32	s16, s0
 8007856:	edd7 0a00 	vldr	s1, [r7]
 800785a:	ed97 0a01 	vldr	s0, [r7, #4]
 800785e:	f017 f92b 	bl	801eab8 <fmaxf>
 8007862:	eef0 7a40 	vmov.f32	s15, s0
 8007866:	eef0 0a67 	vmov.f32	s1, s15
 800786a:	eeb0 0a48 	vmov.f32	s0, s16
 800786e:	f017 f940 	bl	801eaf2 <fminf>
 8007872:	eef0 7a40 	vmov.f32	s15, s0
}
 8007876:	eeb0 0a67 	vmov.f32	s0, s15
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	ecbd 8b02 	vpop	{d8}
 8007882:	bd80      	pop	{r7, pc}

08007884 <ve_routine>:
    float guessed_traction_FR = getFxByKappaDownforceSlipangle(downforce_FR, 0.0f, 0);
    float guessed_traction_RL = getFxByKappaDownforceSlipangle(downforce_RL, 0.0f, 0);
    float guessed_traction_RR = getFxByKappaDownforceSlipangle(downforce_RR, 0.0f, 0);
}

void ve_routine(void *pvParameters) {
 8007884:	b580      	push	{r7, lr}
 8007886:	ed2d 8b04 	vpush	{d8-d9}
 800788a:	b0a4      	sub	sp, #144	@ 0x90
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
    
    static TickType_t last_it = 0;
    
    while(true) {
        
        const volatile cmr_canDIMActions_t *actions = canVehicleGetPayload(CANRX_VEH_DIM_ACTION_BUTTON);
 8007890:	2005      	movs	r0, #5
 8007892:	f7f9 fd15 	bl	80012c0 <canVehicleGetPayload>
 8007896:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
        const volatile bool reset = (actions->buttons) & BUTTON_SCRN;
 800789a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	f003 0310 	and.w	r3, r3, #16
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	bf14      	ite	ne
 80078aa:	2301      	movne	r3, #1
 80078ac:	2300      	moveq	r3, #0
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if(reset) veReset();
 80078b4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <ve_routine+0x3e>
 80078be:	f000 f9d7 	bl	8007c70 <veReset>

        const volatile cmr_canSBGIMUAcceleration_t *cur_accel = canDAQGetPayload(CANRX_DAQ_SBG_IMU_ACCEL);
 80078c2:	2004      	movs	r0, #4
 80078c4:	f7f9 fd20 	bl	8001308 <canDAQGetPayload>
 80078c8:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
        cur_forward_accel = cur_accel->accel_x_mps2;
 80078cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	b21b      	sxth	r3, r3
 80078d4:	ee07 3a90 	vmov	s15, r3
 80078d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078dc:	4bce      	ldr	r3, [pc, #824]	@ (8007c18 <ve_routine+0x394>)
 80078de:	edc3 7a00 	vstr	s15, [r3]
        float inertial_force = cur_forward_accel * car_mass;
 80078e2:	4bcd      	ldr	r3, [pc, #820]	@ (8007c18 <ve_routine+0x394>)
 80078e4:	edd3 7a00 	vldr	s15, [r3]
 80078e8:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 8007c1c <ve_routine+0x398>
 80078ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80078f0:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84

        float guessed_vel = prev_forward_velocity;
 80078f4:	4bca      	ldr	r3, [pc, #808]	@ (8007c20 <ve_routine+0x39c>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        float aero_lift = aero_lift_coe * guessed_vel * guessed_vel;
 80078fc:	ed9f 7ac9 	vldr	s14, [pc, #804]	@ 8007c24 <ve_routine+0x3a0>
 8007900:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8007904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007908:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800790c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007910:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
        float aero_drag = aero_drag_coe * guessed_vel * guessed_vel;
 8007914:	ed9f 7ac4 	vldr	s14, [pc, #784]	@ 8007c28 <ve_routine+0x3a4>
 8007918:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800791c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007920:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8007924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007928:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         * 
         * ma = Fnet = Fx - Fdrag - Frolling
         * 
         * Currenly ignoring Frolling
         */
        float tractive_force = inertial_force + aero_drag;
 800792c:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8007930:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8007934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007938:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

        float load_transfer = get_load_transfer(cur_forward_accel, aero_lift, aero_drag);
 800793c:	4bb6      	ldr	r3, [pc, #728]	@ (8007c18 <ve_routine+0x394>)
 800793e:	edd3 7a00 	vldr	s15, [r3]
 8007942:	ed97 1a1e 	vldr	s2, [r7, #120]	@ 0x78
 8007946:	edd7 0a1f 	vldr	s1, [r7, #124]	@ 0x7c
 800794a:	eeb0 0a67 	vmov.f32	s0, s15
 800794e:	f7ff ff2b 	bl	80077a8 <get_load_transfer>
 8007952:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
        float downforce = car_weight + aero_lift;
 8007956:	ed9f 7ab5 	vldr	s14, [pc, #724]	@ 8007c2c <ve_routine+0x3a8>
 800795a:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800795e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007962:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c

        float downforce_FL = (downforce * 0.5 - load_transfer) * 0.5;
 8007966:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800796a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800796e:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8007972:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007976:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800797a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800797e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007982:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8007986:	ee27 7b06 	vmul.f64	d7, d7, d6
 800798a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800798e:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
        float downforce_FR = downforce_FL;
 8007992:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007994:	667b      	str	r3, [r7, #100]	@ 0x64
        float downforce_RL = (downforce * 0.5 + load_transfer) * 0.5;
 8007996:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800799a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800799e:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 80079a2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80079a6:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80079aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80079ae:	ee36 7b07 	vadd.f64	d7, d6, d7
 80079b2:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 80079b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80079ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80079be:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
        float downforce_RR = downforce_RL;
 80079c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079c4:	65fb      	str	r3, [r7, #92]	@ 0x5c

        cmr_canCDCWheelVelocity_t speedFeedback;
        daqWheelSpeedFeedback(&speedFeedback);
 80079c6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fc f94e 	bl	8003c6c <daqWheelSpeedFeedback>

        float wheelspeed_FL = rpm_to_mps(speedFeedback.frontLeft_rpm);
 80079d0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 80079d4:	ee07 3a90 	vmov	s15, r3
 80079d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079dc:	eeb0 0a67 	vmov.f32	s0, s15
 80079e0:	f7ff fe9e 	bl	8007720 <rpm_to_mps>
 80079e4:	eef0 7a40 	vmov.f32	s15, s0
 80079e8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        float wheelspeed_FR = rpm_to_mps(speedFeedback.frontRight_rpm);
 80079ec:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 80079f0:	ee07 3a90 	vmov	s15, r3
 80079f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079f8:	eeb0 0a67 	vmov.f32	s0, s15
 80079fc:	f7ff fe90 	bl	8007720 <rpm_to_mps>
 8007a00:	eef0 7a40 	vmov.f32	s15, s0
 8007a04:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        float wheelspeed_RL = rpm_to_mps(speedFeedback.rearLeft_rpm);
 8007a08:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8007a0c:	ee07 3a90 	vmov	s15, r3
 8007a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a14:	eeb0 0a67 	vmov.f32	s0, s15
 8007a18:	f7ff fe82 	bl	8007720 <rpm_to_mps>
 8007a1c:	eef0 7a40 	vmov.f32	s15, s0
 8007a20:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        float wheelspeed_RR = rpm_to_mps(speedFeedback.rearRight_rpm);
 8007a24:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8007a28:	ee07 3a90 	vmov	s15, r3
 8007a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a30:	eeb0 0a67 	vmov.f32	s0, s15
 8007a34:	f7ff fe74 	bl	8007720 <rpm_to_mps>
 8007a38:	eef0 7a40 	vmov.f32	s15, s0
 8007a3c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        make_at_least_zero(&wheelspeed_FL);
 8007a40:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7ff fed9 	bl	80077fc <make_at_least_zero>
        make_at_least_zero(&wheelspeed_FR);
 8007a4a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7ff fed4 	bl	80077fc <make_at_least_zero>
        make_at_least_zero(&wheelspeed_RL);
 8007a54:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7ff fecf 	bl	80077fc <make_at_least_zero>
        make_at_least_zero(&wheelspeed_RR);
 8007a5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7ff feca 	bl	80077fc <make_at_least_zero>

        float front_percentage = (downforce_FL + downforce_FR) / downforce;
 8007a68:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8007a6c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8007a70:	ee77 6a27 	vadd.f32	s13, s14, s15
 8007a74:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8007a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a7c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
        float tractive_force_FL = tractive_force * front_percentage;
 8007a80:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8007a84:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8007a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a8c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
        float tractive_force_FR = tractive_force_FL;
 8007a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a92:	653b      	str	r3, [r7, #80]	@ 0x50
        float tractive_force_RL = tractive_force * (1 - front_percentage);
 8007a94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a98:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8007a9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007aa0:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8007aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aa8:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
        float tractive_force_RR = tractive_force_RL;
 8007aac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aae:	64bb      	str	r3, [r7, #72]	@ 0x48

        float kappa_FL = getKappaByFxDownforceSlipangle(downforce_FL, 0.0f, 0, tractive_force_FL, ASSUME_NO_TURN);
 8007ab0:	2101      	movs	r1, #1
 8007ab2:	ed97 1a15 	vldr	s2, [r7, #84]	@ 0x54
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	eddf 0a5d 	vldr	s1, [pc, #372]	@ 8007c30 <ve_routine+0x3ac>
 8007abc:	ed97 0a1a 	vldr	s0, [r7, #104]	@ 0x68
 8007ac0:	f7fd fc42 	bl	8005348 <getKappaByFxDownforceSlipangle>
 8007ac4:	eef0 7a40 	vmov.f32	s15, s0
 8007ac8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        float kappa_FR = getKappaByFxDownforceSlipangle(downforce_FR, 0.0f, 0, tractive_force_FR, ASSUME_NO_TURN);
 8007acc:	2101      	movs	r1, #1
 8007ace:	ed97 1a14 	vldr	s2, [r7, #80]	@ 0x50
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	eddf 0a56 	vldr	s1, [pc, #344]	@ 8007c30 <ve_routine+0x3ac>
 8007ad8:	ed97 0a19 	vldr	s0, [r7, #100]	@ 0x64
 8007adc:	f7fd fc34 	bl	8005348 <getKappaByFxDownforceSlipangle>
 8007ae0:	eef0 7a40 	vmov.f32	s15, s0
 8007ae4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        float kappa_RL = getKappaByFxDownforceSlipangle(downforce_RL, 0.0f, 0, tractive_force_RL, ASSUME_NO_TURN);
 8007ae8:	2101      	movs	r1, #1
 8007aea:	ed97 1a13 	vldr	s2, [r7, #76]	@ 0x4c
 8007aee:	2000      	movs	r0, #0
 8007af0:	eddf 0a4f 	vldr	s1, [pc, #316]	@ 8007c30 <ve_routine+0x3ac>
 8007af4:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 8007af8:	f7fd fc26 	bl	8005348 <getKappaByFxDownforceSlipangle>
 8007afc:	eef0 7a40 	vmov.f32	s15, s0
 8007b00:	edc7 7a08 	vstr	s15, [r7, #32]
        float kappa_RR = getKappaByFxDownforceSlipangle(downforce_RR, 0.0f, 0, tractive_force_RR, ASSUME_NO_TURN);
 8007b04:	2101      	movs	r1, #1
 8007b06:	ed97 1a12 	vldr	s2, [r7, #72]	@ 0x48
 8007b0a:	2000      	movs	r0, #0
 8007b0c:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8007c30 <ve_routine+0x3ac>
 8007b10:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 8007b14:	f7fd fc18 	bl	8005348 <getKappaByFxDownforceSlipangle>
 8007b18:	eef0 7a40 	vmov.f32	s15, s0
 8007b1c:	edc7 7a07 	vstr	s15, [r7, #28]
        make_at_least_zero(&kappa_FL);
 8007b20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7ff fe69 	bl	80077fc <make_at_least_zero>
        make_at_least_zero(&kappa_FR);
 8007b2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7ff fe64 	bl	80077fc <make_at_least_zero>
        make_at_least_zero(&kappa_RL);
 8007b34:	f107 0320 	add.w	r3, r7, #32
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7ff fe5f 	bl	80077fc <make_at_least_zero>
        make_at_least_zero(&kappa_RR);
 8007b3e:	f107 031c 	add.w	r3, r7, #28
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7ff fe5a 	bl	80077fc <make_at_least_zero>

        float estimated_velocity = merge_predicted_body_velocities(
 8007b48:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8007b4c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8007b50:	eef0 0a47 	vmov.f32	s1, s14
 8007b54:	eeb0 0a67 	vmov.f32	s0, s15
 8007b58:	f7ff fe0c 	bl	8007774 <wheelspeed_to_body_velocity>
 8007b5c:	eeb0 8a40 	vmov.f32	s16, s0
 8007b60:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8007b64:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8007b68:	eef0 0a47 	vmov.f32	s1, s14
 8007b6c:	eeb0 0a67 	vmov.f32	s0, s15
 8007b70:	f7ff fe00 	bl	8007774 <wheelspeed_to_body_velocity>
 8007b74:	eef0 8a40 	vmov.f32	s17, s0
 8007b78:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8007b7c:	ed97 7a08 	vldr	s14, [r7, #32]
 8007b80:	eef0 0a47 	vmov.f32	s1, s14
 8007b84:	eeb0 0a67 	vmov.f32	s0, s15
 8007b88:	f7ff fdf4 	bl	8007774 <wheelspeed_to_body_velocity>
 8007b8c:	eeb0 9a40 	vmov.f32	s18, s0
 8007b90:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8007b94:	ed97 7a07 	vldr	s14, [r7, #28]
 8007b98:	eef0 0a47 	vmov.f32	s1, s14
 8007b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8007ba0:	f7ff fde8 	bl	8007774 <wheelspeed_to_body_velocity>
 8007ba4:	eef0 7a40 	vmov.f32	s15, s0
 8007ba8:	eef0 1a67 	vmov.f32	s3, s15
 8007bac:	eeb0 1a49 	vmov.f32	s2, s18
 8007bb0:	eef0 0a68 	vmov.f32	s1, s17
 8007bb4:	eeb0 0a48 	vmov.f32	s0, s16
 8007bb8:	f7ff fe38 	bl	800782c <merge_predicted_body_velocities>
 8007bbc:	eef0 7a40 	vmov.f32	s15, s0
 8007bc0:	edc7 7a06 	vstr	s15, [r7, #24]
            wheelspeed_to_body_velocity(wheelspeed_FL, kappa_FL),
            wheelspeed_to_body_velocity(wheelspeed_FR, kappa_FR),
            wheelspeed_to_body_velocity(wheelspeed_RL, kappa_RL),
            wheelspeed_to_body_velocity(wheelspeed_RR, kappa_RR)
        );
        make_at_least_zero(&estimated_velocity);
 8007bc4:	f107 0318 	add.w	r3, r7, #24
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7ff fe17 	bl	80077fc <make_at_least_zero>

        cmr_canCDCVelocityEstimation1_t temp1 = {
 8007bce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007bd2:	613b      	str	r3, [r7, #16]
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	617b      	str	r3, [r7, #20]
            .guessed_vel = guessed_vel,
            .estimated_velocity = estimated_velocity
        };
        cmr_canCDCVelocityEstimation2_t temp2 = {
 8007bd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bda:	60bb      	str	r3, [r7, #8]
 8007bdc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007bde:	60fb      	str	r3, [r7, #12]
            .aero_drag = aero_drag,
            .aero_lift = aero_lift
        };

        velocity_estimator1 = temp1;
 8007be0:	4b14      	ldr	r3, [pc, #80]	@ (8007c34 <ve_routine+0x3b0>)
 8007be2:	461a      	mov	r2, r3
 8007be4:	f107 0310 	add.w	r3, r7, #16
 8007be8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007bec:	e882 0003 	stmia.w	r2, {r0, r1}
        velocity_estimator2 = temp2;
 8007bf0:	4b11      	ldr	r3, [pc, #68]	@ (8007c38 <ve_routine+0x3b4>)
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f107 0308 	add.w	r3, r7, #8
 8007bf8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007bfc:	e882 0003 	stmia.w	r2, {r0, r1}

        prev_forward_velocity = estimated_velocity;
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	4a07      	ldr	r2, [pc, #28]	@ (8007c20 <ve_routine+0x39c>)
 8007c04:	6013      	str	r3, [r2, #0]
        cur_forward_velocity = estimated_velocity;
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	4a0c      	ldr	r2, [pc, #48]	@ (8007c3c <ve_routine+0x3b8>)
 8007c0a:	6013      	str	r3, [r2, #0]

        vTaskDelayUntil(&last_it, ve_period_ms);
 8007c0c:	2305      	movs	r3, #5
 8007c0e:	4619      	mov	r1, r3
 8007c10:	480b      	ldr	r0, [pc, #44]	@ (8007c40 <ve_routine+0x3bc>)
 8007c12:	f008 fb6b 	bl	80102ec <vTaskDelayUntil>
    while(true) {
 8007c16:	e63b      	b.n	8007890 <ve_routine+0xc>
 8007c18:	2400e2ec 	.word	0x2400e2ec
 8007c1c:	43b90000 	.word	0x43b90000
 8007c20:	2400e2e4 	.word	0x2400e2e4
 8007c24:	3f4e7fd4 	.word	0x3f4e7fd4
 8007c28:	3e8deedd 	.word	0x3e8deedd
 8007c2c:	4562db33 	.word	0x4562db33
 8007c30:	00000000 	.word	0x00000000
 8007c34:	2400e2f0 	.word	0x2400e2f0
 8007c38:	2400e2f8 	.word	0x2400e2f8
 8007c3c:	2400e2e8 	.word	0x2400e2e8
 8007c40:	2400e300 	.word	0x2400e300

08007c44 <veInit>:
    }
}

void veInit() {
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af02      	add	r7, sp, #8
    veReset();
 8007c4a:	f000 f811 	bl	8007c70 <veReset>
    cmr_taskInit(
 8007c4e:	2207      	movs	r2, #7
 8007c50:	2300      	movs	r3, #0
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	4b03      	ldr	r3, [pc, #12]	@ (8007c64 <veInit+0x20>)
 8007c56:	4904      	ldr	r1, [pc, #16]	@ (8007c68 <veInit+0x24>)
 8007c58:	4804      	ldr	r0, [pc, #16]	@ (8007c6c <veInit+0x28>)
 8007c5a:	f006 ffa7 	bl	800ebac <cmr_taskInit>
        "motorsCommand",
        ve_priority,
        ve_routine,
        NULL
    );
}
 8007c5e:	bf00      	nop
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	08007885 	.word	0x08007885
 8007c68:	0801fc3c 	.word	0x0801fc3c
 8007c6c:	2400d284 	.word	0x2400d284

08007c70 <veReset>:

void veReset() {
 8007c70:	b480      	push	{r7}
 8007c72:	af00      	add	r7, sp, #0
    velocity_estimator1.guessed_vel = 0;
 8007c74:	4b0a      	ldr	r3, [pc, #40]	@ (8007ca0 <veReset+0x30>)
 8007c76:	f04f 0200 	mov.w	r2, #0
 8007c7a:	601a      	str	r2, [r3, #0]
    velocity_estimator1.estimated_velocity = 0;
 8007c7c:	4b08      	ldr	r3, [pc, #32]	@ (8007ca0 <veReset+0x30>)
 8007c7e:	f04f 0200 	mov.w	r2, #0
 8007c82:	605a      	str	r2, [r3, #4]
    velocity_estimator2.aero_drag = 0;
 8007c84:	4b07      	ldr	r3, [pc, #28]	@ (8007ca4 <veReset+0x34>)
 8007c86:	f04f 0200 	mov.w	r2, #0
 8007c8a:	601a      	str	r2, [r3, #0]
    velocity_estimator2.aero_lift = 0;
 8007c8c:	4b05      	ldr	r3, [pc, #20]	@ (8007ca4 <veReset+0x34>)
 8007c8e:	f04f 0200 	mov.w	r2, #0
 8007c92:	605a      	str	r2, [r3, #4]
}
 8007c94:	bf00      	nop
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	2400e2f0 	.word	0x2400e2f0
 8007ca4:	2400e2f8 	.word	0x2400e2f8

08007ca8 <ldl_solve>:

/* Filename: ldl.c. */
/* Description: Basic test harness for solver.c. */
#include "solver.h"
/* Be sure to place ldl_solve first, so storage schemes are defined by it. */
void ldl_solve(double *target, double *var) {
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  /* Find var = (L*diag(work.d)*L') \ target, then unpermute. */
  /* Answer goes into var. */
  /* Forward substitution. */
  /* Include permutation as we retrieve from target. Use v so we can unpermute */
  /* later. */
  work.v[0] = target[4];
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007cb8:	49c8      	ldr	r1, [pc, #800]	@ (8007fdc <ldl_solve+0x334>)
 8007cba:	f501 6104 	add.w	r1, r1, #2112	@ 0x840
 8007cbe:	e9c1 2300 	strd	r2, r3, [r1]
  work.v[1] = target[5];
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8007cc8:	49c4      	ldr	r1, [pc, #784]	@ (8007fdc <ldl_solve+0x334>)
 8007cca:	f501 6105 	add.w	r1, r1, #2128	@ 0x850
 8007cce:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.v[2] = target[6];
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007cd8:	49c0      	ldr	r1, [pc, #768]	@ (8007fdc <ldl_solve+0x334>)
 8007cda:	f501 6105 	add.w	r1, r1, #2128	@ 0x850
 8007cde:	e9c1 2300 	strd	r2, r3, [r1]
  work.v[3] = target[7];
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007ce8:	49bc      	ldr	r1, [pc, #752]	@ (8007fdc <ldl_solve+0x334>)
 8007cea:	f501 6106 	add.w	r1, r1, #2144	@ 0x860
 8007cee:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.v[4] = target[8];
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007cf8:	49b8      	ldr	r1, [pc, #736]	@ (8007fdc <ldl_solve+0x334>)
 8007cfa:	f501 6106 	add.w	r1, r1, #2144	@ 0x860
 8007cfe:	e9c1 2300 	strd	r2, r3, [r1]
  work.v[5] = target[9];
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8007d08:	49b4      	ldr	r1, [pc, #720]	@ (8007fdc <ldl_solve+0x334>)
 8007d0a:	f501 6107 	add.w	r1, r1, #2160	@ 0x870
 8007d0e:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.v[6] = target[10];
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8007d18:	49b0      	ldr	r1, [pc, #704]	@ (8007fdc <ldl_solve+0x334>)
 8007d1a:	f501 6107 	add.w	r1, r1, #2160	@ 0x870
 8007d1e:	e9c1 2300 	strd	r2, r3, [r1]
  work.v[7] = target[11];
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8007d28:	49ac      	ldr	r1, [pc, #688]	@ (8007fdc <ldl_solve+0x334>)
 8007d2a:	f501 6108 	add.w	r1, r1, #2176	@ 0x880
 8007d2e:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.v[8] = target[12];
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8007d38:	49a8      	ldr	r1, [pc, #672]	@ (8007fdc <ldl_solve+0x334>)
 8007d3a:	f501 6108 	add.w	r1, r1, #2176	@ 0x880
 8007d3e:	e9c1 2300 	strd	r2, r3, [r1]
  work.v[9] = target[13]-work.L[0]*work.v[0];
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	3368      	adds	r3, #104	@ 0x68
 8007d46:	ed93 6b00 	vldr	d6, [r3]
 8007d4a:	4ba4      	ldr	r3, [pc, #656]	@ (8007fdc <ldl_solve+0x334>)
 8007d4c:	f503 63d8 	add.w	r3, r3, #1728	@ 0x6c0
 8007d50:	ed13 5b02 	vldr	d5, [r3, #-8]
 8007d54:	4ba1      	ldr	r3, [pc, #644]	@ (8007fdc <ldl_solve+0x334>)
 8007d56:	f503 6304 	add.w	r3, r3, #2112	@ 0x840
 8007d5a:	ed93 7b00 	vldr	d7, [r3]
 8007d5e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007d62:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007d66:	4b9d      	ldr	r3, [pc, #628]	@ (8007fdc <ldl_solve+0x334>)
 8007d68:	f503 6309 	add.w	r3, r3, #2192	@ 0x890
 8007d6c:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[10] = target[14]-work.L[1]*work.v[1];
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3370      	adds	r3, #112	@ 0x70
 8007d74:	ed93 6b00 	vldr	d6, [r3]
 8007d78:	4b98      	ldr	r3, [pc, #608]	@ (8007fdc <ldl_solve+0x334>)
 8007d7a:	f503 63d8 	add.w	r3, r3, #1728	@ 0x6c0
 8007d7e:	ed93 5b00 	vldr	d5, [r3]
 8007d82:	4b96      	ldr	r3, [pc, #600]	@ (8007fdc <ldl_solve+0x334>)
 8007d84:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 8007d88:	ed13 7b02 	vldr	d7, [r3, #-8]
 8007d8c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007d90:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007d94:	4b91      	ldr	r3, [pc, #580]	@ (8007fdc <ldl_solve+0x334>)
 8007d96:	f503 6309 	add.w	r3, r3, #2192	@ 0x890
 8007d9a:	ed83 7b00 	vstr	d7, [r3]
  work.v[11] = target[15]-work.L[2]*work.v[2];
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	3378      	adds	r3, #120	@ 0x78
 8007da2:	ed93 6b00 	vldr	d6, [r3]
 8007da6:	4b8d      	ldr	r3, [pc, #564]	@ (8007fdc <ldl_solve+0x334>)
 8007da8:	f503 63da 	add.w	r3, r3, #1744	@ 0x6d0
 8007dac:	ed13 5b02 	vldr	d5, [r3, #-8]
 8007db0:	4b8a      	ldr	r3, [pc, #552]	@ (8007fdc <ldl_solve+0x334>)
 8007db2:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 8007db6:	ed93 7b00 	vldr	d7, [r3]
 8007dba:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007dbe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007dc2:	4b86      	ldr	r3, [pc, #536]	@ (8007fdc <ldl_solve+0x334>)
 8007dc4:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8007dc8:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[12] = target[16]-work.L[3]*work.v[3];
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	3380      	adds	r3, #128	@ 0x80
 8007dd0:	ed93 6b00 	vldr	d6, [r3]
 8007dd4:	4b81      	ldr	r3, [pc, #516]	@ (8007fdc <ldl_solve+0x334>)
 8007dd6:	f503 63da 	add.w	r3, r3, #1744	@ 0x6d0
 8007dda:	ed93 5b00 	vldr	d5, [r3]
 8007dde:	4b7f      	ldr	r3, [pc, #508]	@ (8007fdc <ldl_solve+0x334>)
 8007de0:	f503 6306 	add.w	r3, r3, #2144	@ 0x860
 8007de4:	ed13 7b02 	vldr	d7, [r3, #-8]
 8007de8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007dec:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007df0:	4b7a      	ldr	r3, [pc, #488]	@ (8007fdc <ldl_solve+0x334>)
 8007df2:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8007df6:	ed83 7b00 	vstr	d7, [r3]
  work.v[13] = target[17]-work.L[4]*work.v[4];
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	3388      	adds	r3, #136	@ 0x88
 8007dfe:	ed93 6b00 	vldr	d6, [r3]
 8007e02:	4b76      	ldr	r3, [pc, #472]	@ (8007fdc <ldl_solve+0x334>)
 8007e04:	f503 63dc 	add.w	r3, r3, #1760	@ 0x6e0
 8007e08:	ed13 5b02 	vldr	d5, [r3, #-8]
 8007e0c:	4b73      	ldr	r3, [pc, #460]	@ (8007fdc <ldl_solve+0x334>)
 8007e0e:	f503 6306 	add.w	r3, r3, #2144	@ 0x860
 8007e12:	ed93 7b00 	vldr	d7, [r3]
 8007e16:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007e1a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007e1e:	4b6f      	ldr	r3, [pc, #444]	@ (8007fdc <ldl_solve+0x334>)
 8007e20:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 8007e24:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[14] = target[0]-work.L[5]*work.v[9]-work.L[6]*work.v[13];
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	ed93 6b00 	vldr	d6, [r3]
 8007e2e:	4b6b      	ldr	r3, [pc, #428]	@ (8007fdc <ldl_solve+0x334>)
 8007e30:	f503 63dc 	add.w	r3, r3, #1760	@ 0x6e0
 8007e34:	ed93 5b00 	vldr	d5, [r3]
 8007e38:	4b68      	ldr	r3, [pc, #416]	@ (8007fdc <ldl_solve+0x334>)
 8007e3a:	f503 6309 	add.w	r3, r3, #2192	@ 0x890
 8007e3e:	ed13 7b02 	vldr	d7, [r3, #-8]
 8007e42:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007e46:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007e4a:	4b64      	ldr	r3, [pc, #400]	@ (8007fdc <ldl_solve+0x334>)
 8007e4c:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 8007e50:	ed13 5b02 	vldr	d5, [r3, #-8]
 8007e54:	4b61      	ldr	r3, [pc, #388]	@ (8007fdc <ldl_solve+0x334>)
 8007e56:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 8007e5a:	ed13 7b02 	vldr	d7, [r3, #-8]
 8007e5e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007e62:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007e66:	4b5d      	ldr	r3, [pc, #372]	@ (8007fdc <ldl_solve+0x334>)
 8007e68:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 8007e6c:	ed83 7b00 	vstr	d7, [r3]
  work.v[15] = target[18]-work.L[7]*work.v[5];
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	3390      	adds	r3, #144	@ 0x90
 8007e74:	ed93 6b00 	vldr	d6, [r3]
 8007e78:	4b58      	ldr	r3, [pc, #352]	@ (8007fdc <ldl_solve+0x334>)
 8007e7a:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 8007e7e:	ed93 5b00 	vldr	d5, [r3]
 8007e82:	4b56      	ldr	r3, [pc, #344]	@ (8007fdc <ldl_solve+0x334>)
 8007e84:	f503 6307 	add.w	r3, r3, #2160	@ 0x870
 8007e88:	ed13 7b02 	vldr	d7, [r3, #-8]
 8007e8c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007e90:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007e94:	4b51      	ldr	r3, [pc, #324]	@ (8007fdc <ldl_solve+0x334>)
 8007e96:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8007e9a:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[16] = target[1]-work.L[8]*work.v[10]-work.L[9]*work.v[14]-work.L[10]*work.v[15];
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	3308      	adds	r3, #8
 8007ea2:	ed93 6b00 	vldr	d6, [r3]
 8007ea6:	4b4d      	ldr	r3, [pc, #308]	@ (8007fdc <ldl_solve+0x334>)
 8007ea8:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8007eac:	ed13 5b02 	vldr	d5, [r3, #-8]
 8007eb0:	4b4a      	ldr	r3, [pc, #296]	@ (8007fdc <ldl_solve+0x334>)
 8007eb2:	f503 6309 	add.w	r3, r3, #2192	@ 0x890
 8007eb6:	ed93 7b00 	vldr	d7, [r3]
 8007eba:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007ebe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007ec2:	4b46      	ldr	r3, [pc, #280]	@ (8007fdc <ldl_solve+0x334>)
 8007ec4:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8007ec8:	ed93 5b00 	vldr	d5, [r3]
 8007ecc:	4b43      	ldr	r3, [pc, #268]	@ (8007fdc <ldl_solve+0x334>)
 8007ece:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 8007ed2:	ed93 7b00 	vldr	d7, [r3]
 8007ed6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007eda:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007ede:	4b3f      	ldr	r3, [pc, #252]	@ (8007fdc <ldl_solve+0x334>)
 8007ee0:	f503 63e2 	add.w	r3, r3, #1808	@ 0x710
 8007ee4:	ed13 5b02 	vldr	d5, [r3, #-8]
 8007ee8:	4b3c      	ldr	r3, [pc, #240]	@ (8007fdc <ldl_solve+0x334>)
 8007eea:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8007eee:	ed13 7b02 	vldr	d7, [r3, #-8]
 8007ef2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007ef6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007efa:	4b38      	ldr	r3, [pc, #224]	@ (8007fdc <ldl_solve+0x334>)
 8007efc:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8007f00:	ed83 7b00 	vstr	d7, [r3]
  work.v[17] = target[19]-work.L[11]*work.v[6];
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	3398      	adds	r3, #152	@ 0x98
 8007f08:	ed93 6b00 	vldr	d6, [r3]
 8007f0c:	4b33      	ldr	r3, [pc, #204]	@ (8007fdc <ldl_solve+0x334>)
 8007f0e:	f503 63e2 	add.w	r3, r3, #1808	@ 0x710
 8007f12:	ed93 5b00 	vldr	d5, [r3]
 8007f16:	4b31      	ldr	r3, [pc, #196]	@ (8007fdc <ldl_solve+0x334>)
 8007f18:	f503 6307 	add.w	r3, r3, #2160	@ 0x870
 8007f1c:	ed93 7b00 	vldr	d7, [r3]
 8007f20:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007f24:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007f28:	4b2c      	ldr	r3, [pc, #176]	@ (8007fdc <ldl_solve+0x334>)
 8007f2a:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 8007f2e:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[18] = target[2]-work.L[12]*work.v[11]-work.L[13]*work.v[14]-work.L[14]*work.v[16]-work.L[15]*work.v[17];
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	3310      	adds	r3, #16
 8007f36:	ed93 6b00 	vldr	d6, [r3]
 8007f3a:	4b28      	ldr	r3, [pc, #160]	@ (8007fdc <ldl_solve+0x334>)
 8007f3c:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 8007f40:	ed13 5b02 	vldr	d5, [r3, #-8]
 8007f44:	4b25      	ldr	r3, [pc, #148]	@ (8007fdc <ldl_solve+0x334>)
 8007f46:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8007f4a:	ed13 7b02 	vldr	d7, [r3, #-8]
 8007f4e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007f52:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007f56:	4b21      	ldr	r3, [pc, #132]	@ (8007fdc <ldl_solve+0x334>)
 8007f58:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 8007f5c:	ed93 5b00 	vldr	d5, [r3]
 8007f60:	4b1e      	ldr	r3, [pc, #120]	@ (8007fdc <ldl_solve+0x334>)
 8007f62:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 8007f66:	ed93 7b00 	vldr	d7, [r3]
 8007f6a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007f6e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007f72:	4b1a      	ldr	r3, [pc, #104]	@ (8007fdc <ldl_solve+0x334>)
 8007f74:	f503 63e6 	add.w	r3, r3, #1840	@ 0x730
 8007f78:	ed13 5b02 	vldr	d5, [r3, #-8]
 8007f7c:	4b17      	ldr	r3, [pc, #92]	@ (8007fdc <ldl_solve+0x334>)
 8007f7e:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8007f82:	ed93 7b00 	vldr	d7, [r3]
 8007f86:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007f8a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007f8e:	4b13      	ldr	r3, [pc, #76]	@ (8007fdc <ldl_solve+0x334>)
 8007f90:	f503 63e6 	add.w	r3, r3, #1840	@ 0x730
 8007f94:	ed93 5b00 	vldr	d5, [r3]
 8007f98:	4b10      	ldr	r3, [pc, #64]	@ (8007fdc <ldl_solve+0x334>)
 8007f9a:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 8007f9e:	ed13 7b02 	vldr	d7, [r3, #-8]
 8007fa2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007fa6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007faa:	4b0c      	ldr	r3, [pc, #48]	@ (8007fdc <ldl_solve+0x334>)
 8007fac:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 8007fb0:	ed83 7b00 	vstr	d7, [r3]
  work.v[19] = target[20]-work.L[16]*work.v[7];
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	33a0      	adds	r3, #160	@ 0xa0
 8007fb8:	ed93 6b00 	vldr	d6, [r3]
 8007fbc:	4b07      	ldr	r3, [pc, #28]	@ (8007fdc <ldl_solve+0x334>)
 8007fbe:	f503 63e8 	add.w	r3, r3, #1856	@ 0x740
 8007fc2:	ed13 5b02 	vldr	d5, [r3, #-8]
 8007fc6:	4b05      	ldr	r3, [pc, #20]	@ (8007fdc <ldl_solve+0x334>)
 8007fc8:	f503 6308 	add.w	r3, r3, #2176	@ 0x880
 8007fcc:	ed13 7b02 	vldr	d7, [r3, #-8]
 8007fd0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007fd4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007fd8:	e002      	b.n	8007fe0 <ldl_solve+0x338>
 8007fda:	bf00      	nop
 8007fdc:	24007070 	.word	0x24007070
 8007fe0:	4b52      	ldr	r3, [pc, #328]	@ (800812c <ldl_solve+0x484>)
 8007fe2:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 8007fe6:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[20] = target[3]-work.L[17]*work.v[12]-work.L[18]*work.v[14]-work.L[19]*work.v[16]-work.L[20]*work.v[18]-work.L[21]*work.v[19];
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	3318      	adds	r3, #24
 8007fee:	ed93 6b00 	vldr	d6, [r3]
 8007ff2:	4b4e      	ldr	r3, [pc, #312]	@ (800812c <ldl_solve+0x484>)
 8007ff4:	f503 63e8 	add.w	r3, r3, #1856	@ 0x740
 8007ff8:	ed93 5b00 	vldr	d5, [r3]
 8007ffc:	4b4b      	ldr	r3, [pc, #300]	@ (800812c <ldl_solve+0x484>)
 8007ffe:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8008002:	ed93 7b00 	vldr	d7, [r3]
 8008006:	ee25 7b07 	vmul.f64	d7, d5, d7
 800800a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800800e:	4b47      	ldr	r3, [pc, #284]	@ (800812c <ldl_solve+0x484>)
 8008010:	f503 63ea 	add.w	r3, r3, #1872	@ 0x750
 8008014:	ed13 5b02 	vldr	d5, [r3, #-8]
 8008018:	4b44      	ldr	r3, [pc, #272]	@ (800812c <ldl_solve+0x484>)
 800801a:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 800801e:	ed93 7b00 	vldr	d7, [r3]
 8008022:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008026:	ee36 6b47 	vsub.f64	d6, d6, d7
 800802a:	4b40      	ldr	r3, [pc, #256]	@ (800812c <ldl_solve+0x484>)
 800802c:	f503 63ea 	add.w	r3, r3, #1872	@ 0x750
 8008030:	ed93 5b00 	vldr	d5, [r3]
 8008034:	4b3d      	ldr	r3, [pc, #244]	@ (800812c <ldl_solve+0x484>)
 8008036:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 800803a:	ed93 7b00 	vldr	d7, [r3]
 800803e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008042:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008046:	4b39      	ldr	r3, [pc, #228]	@ (800812c <ldl_solve+0x484>)
 8008048:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 800804c:	ed13 5b02 	vldr	d5, [r3, #-8]
 8008050:	4b36      	ldr	r3, [pc, #216]	@ (800812c <ldl_solve+0x484>)
 8008052:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 8008056:	ed93 7b00 	vldr	d7, [r3]
 800805a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800805e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008062:	4b32      	ldr	r3, [pc, #200]	@ (800812c <ldl_solve+0x484>)
 8008064:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 8008068:	ed93 5b00 	vldr	d5, [r3]
 800806c:	4b2f      	ldr	r3, [pc, #188]	@ (800812c <ldl_solve+0x484>)
 800806e:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 8008072:	ed13 7b02 	vldr	d7, [r3, #-8]
 8008076:	ee25 7b07 	vmul.f64	d7, d5, d7
 800807a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800807e:	4b2b      	ldr	r3, [pc, #172]	@ (800812c <ldl_solve+0x484>)
 8008080:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 8008084:	ed83 7b00 	vstr	d7, [r3]
  work.v[21] = target[21]-work.L[22]*work.v[8]-work.L[23]*work.v[14]-work.L[24]*work.v[16]-work.L[25]*work.v[18]-work.L[26]*work.v[20];
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	33a8      	adds	r3, #168	@ 0xa8
 800808c:	ed93 6b00 	vldr	d6, [r3]
 8008090:	4b26      	ldr	r3, [pc, #152]	@ (800812c <ldl_solve+0x484>)
 8008092:	f503 63ee 	add.w	r3, r3, #1904	@ 0x770
 8008096:	ed13 5b02 	vldr	d5, [r3, #-8]
 800809a:	4b24      	ldr	r3, [pc, #144]	@ (800812c <ldl_solve+0x484>)
 800809c:	f503 6308 	add.w	r3, r3, #2176	@ 0x880
 80080a0:	ed93 7b00 	vldr	d7, [r3]
 80080a4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80080a8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80080ac:	4b1f      	ldr	r3, [pc, #124]	@ (800812c <ldl_solve+0x484>)
 80080ae:	f503 63ee 	add.w	r3, r3, #1904	@ 0x770
 80080b2:	ed93 5b00 	vldr	d5, [r3]
 80080b6:	4b1d      	ldr	r3, [pc, #116]	@ (800812c <ldl_solve+0x484>)
 80080b8:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 80080bc:	ed93 7b00 	vldr	d7, [r3]
 80080c0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80080c4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80080c8:	4b18      	ldr	r3, [pc, #96]	@ (800812c <ldl_solve+0x484>)
 80080ca:	f503 63f0 	add.w	r3, r3, #1920	@ 0x780
 80080ce:	ed13 5b02 	vldr	d5, [r3, #-8]
 80080d2:	4b16      	ldr	r3, [pc, #88]	@ (800812c <ldl_solve+0x484>)
 80080d4:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 80080d8:	ed93 7b00 	vldr	d7, [r3]
 80080dc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80080e0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80080e4:	4b11      	ldr	r3, [pc, #68]	@ (800812c <ldl_solve+0x484>)
 80080e6:	f503 63f0 	add.w	r3, r3, #1920	@ 0x780
 80080ea:	ed93 5b00 	vldr	d5, [r3]
 80080ee:	4b0f      	ldr	r3, [pc, #60]	@ (800812c <ldl_solve+0x484>)
 80080f0:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 80080f4:	ed93 7b00 	vldr	d7, [r3]
 80080f8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80080fc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008100:	4b0a      	ldr	r3, [pc, #40]	@ (800812c <ldl_solve+0x484>)
 8008102:	f503 63f2 	add.w	r3, r3, #1936	@ 0x790
 8008106:	ed13 5b02 	vldr	d5, [r3, #-8]
 800810a:	4b08      	ldr	r3, [pc, #32]	@ (800812c <ldl_solve+0x484>)
 800810c:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 8008110:	ed93 7b00 	vldr	d7, [r3]
 8008114:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008118:	ee36 7b47 	vsub.f64	d7, d6, d7
 800811c:	4b03      	ldr	r3, [pc, #12]	@ (800812c <ldl_solve+0x484>)
 800811e:	f503 630f 	add.w	r3, r3, #2288	@ 0x8f0
 8008122:	ed03 7b02 	vstr	d7, [r3, #-8]
  /* Diagonal scaling. Assume correctness of work.d_inv. */
  for (i = 0; i < 22; i++)
 8008126:	2300      	movs	r3, #0
 8008128:	60fb      	str	r3, [r7, #12]
 800812a:	e01e      	b.n	800816a <ldl_solve+0x4c2>
 800812c:	24007070 	.word	0x24007070
    work.v[i] *= work.d_inv[i];
 8008130:	4ad7      	ldr	r2, [pc, #860]	@ (8008490 <ldl_solve+0x7e8>)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8008138:	00db      	lsls	r3, r3, #3
 800813a:	4413      	add	r3, r2
 800813c:	ed93 6b00 	vldr	d6, [r3]
 8008140:	4ad3      	ldr	r2, [pc, #844]	@ (8008490 <ldl_solve+0x7e8>)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8008148:	00db      	lsls	r3, r3, #3
 800814a:	4413      	add	r3, r2
 800814c:	ed93 7b00 	vldr	d7, [r3]
 8008150:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008154:	4ace      	ldr	r2, [pc, #824]	@ (8008490 <ldl_solve+0x7e8>)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800815c:	00db      	lsls	r3, r3, #3
 800815e:	4413      	add	r3, r2
 8008160:	ed83 7b00 	vstr	d7, [r3]
  for (i = 0; i < 22; i++)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	3301      	adds	r3, #1
 8008168:	60fb      	str	r3, [r7, #12]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2b15      	cmp	r3, #21
 800816e:	dddf      	ble.n	8008130 <ldl_solve+0x488>
  /* Back substitution */
  work.v[20] -= work.L[26]*work.v[21];
 8008170:	4bc7      	ldr	r3, [pc, #796]	@ (8008490 <ldl_solve+0x7e8>)
 8008172:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 8008176:	ed93 6b00 	vldr	d6, [r3]
 800817a:	4bc5      	ldr	r3, [pc, #788]	@ (8008490 <ldl_solve+0x7e8>)
 800817c:	f503 63f2 	add.w	r3, r3, #1936	@ 0x790
 8008180:	ed13 5b02 	vldr	d5, [r3, #-8]
 8008184:	4bc2      	ldr	r3, [pc, #776]	@ (8008490 <ldl_solve+0x7e8>)
 8008186:	f503 630f 	add.w	r3, r3, #2288	@ 0x8f0
 800818a:	ed13 7b02 	vldr	d7, [r3, #-8]
 800818e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008192:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008196:	4bbe      	ldr	r3, [pc, #760]	@ (8008490 <ldl_solve+0x7e8>)
 8008198:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 800819c:	ed83 7b00 	vstr	d7, [r3]
  work.v[19] -= work.L[21]*work.v[20];
 80081a0:	4bbb      	ldr	r3, [pc, #748]	@ (8008490 <ldl_solve+0x7e8>)
 80081a2:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 80081a6:	ed13 6b02 	vldr	d6, [r3, #-8]
 80081aa:	4bb9      	ldr	r3, [pc, #740]	@ (8008490 <ldl_solve+0x7e8>)
 80081ac:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 80081b0:	ed93 5b00 	vldr	d5, [r3]
 80081b4:	4bb6      	ldr	r3, [pc, #728]	@ (8008490 <ldl_solve+0x7e8>)
 80081b6:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 80081ba:	ed93 7b00 	vldr	d7, [r3]
 80081be:	ee25 7b07 	vmul.f64	d7, d5, d7
 80081c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80081c6:	4bb2      	ldr	r3, [pc, #712]	@ (8008490 <ldl_solve+0x7e8>)
 80081c8:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 80081cc:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[18] -= work.L[20]*work.v[20]+work.L[25]*work.v[21];
 80081d0:	4baf      	ldr	r3, [pc, #700]	@ (8008490 <ldl_solve+0x7e8>)
 80081d2:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 80081d6:	ed93 6b00 	vldr	d6, [r3]
 80081da:	4bad      	ldr	r3, [pc, #692]	@ (8008490 <ldl_solve+0x7e8>)
 80081dc:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 80081e0:	ed13 5b02 	vldr	d5, [r3, #-8]
 80081e4:	4baa      	ldr	r3, [pc, #680]	@ (8008490 <ldl_solve+0x7e8>)
 80081e6:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 80081ea:	ed93 7b00 	vldr	d7, [r3]
 80081ee:	ee25 5b07 	vmul.f64	d5, d5, d7
 80081f2:	4ba7      	ldr	r3, [pc, #668]	@ (8008490 <ldl_solve+0x7e8>)
 80081f4:	f503 63f0 	add.w	r3, r3, #1920	@ 0x780
 80081f8:	ed93 4b00 	vldr	d4, [r3]
 80081fc:	4ba4      	ldr	r3, [pc, #656]	@ (8008490 <ldl_solve+0x7e8>)
 80081fe:	f503 630f 	add.w	r3, r3, #2288	@ 0x8f0
 8008202:	ed13 7b02 	vldr	d7, [r3, #-8]
 8008206:	ee24 7b07 	vmul.f64	d7, d4, d7
 800820a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800820e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008212:	4b9f      	ldr	r3, [pc, #636]	@ (8008490 <ldl_solve+0x7e8>)
 8008214:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 8008218:	ed83 7b00 	vstr	d7, [r3]
  work.v[17] -= work.L[15]*work.v[18];
 800821c:	4b9c      	ldr	r3, [pc, #624]	@ (8008490 <ldl_solve+0x7e8>)
 800821e:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 8008222:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008226:	4b9a      	ldr	r3, [pc, #616]	@ (8008490 <ldl_solve+0x7e8>)
 8008228:	f503 63e6 	add.w	r3, r3, #1840	@ 0x730
 800822c:	ed93 5b00 	vldr	d5, [r3]
 8008230:	4b97      	ldr	r3, [pc, #604]	@ (8008490 <ldl_solve+0x7e8>)
 8008232:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 8008236:	ed93 7b00 	vldr	d7, [r3]
 800823a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800823e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008242:	4b93      	ldr	r3, [pc, #588]	@ (8008490 <ldl_solve+0x7e8>)
 8008244:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 8008248:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[16] -= work.L[14]*work.v[18]+work.L[19]*work.v[20]+work.L[24]*work.v[21];
 800824c:	4b90      	ldr	r3, [pc, #576]	@ (8008490 <ldl_solve+0x7e8>)
 800824e:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8008252:	ed93 6b00 	vldr	d6, [r3]
 8008256:	4b8e      	ldr	r3, [pc, #568]	@ (8008490 <ldl_solve+0x7e8>)
 8008258:	f503 63e6 	add.w	r3, r3, #1840	@ 0x730
 800825c:	ed13 5b02 	vldr	d5, [r3, #-8]
 8008260:	4b8b      	ldr	r3, [pc, #556]	@ (8008490 <ldl_solve+0x7e8>)
 8008262:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 8008266:	ed93 7b00 	vldr	d7, [r3]
 800826a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800826e:	4b88      	ldr	r3, [pc, #544]	@ (8008490 <ldl_solve+0x7e8>)
 8008270:	f503 63ea 	add.w	r3, r3, #1872	@ 0x750
 8008274:	ed93 4b00 	vldr	d4, [r3]
 8008278:	4b85      	ldr	r3, [pc, #532]	@ (8008490 <ldl_solve+0x7e8>)
 800827a:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 800827e:	ed93 7b00 	vldr	d7, [r3]
 8008282:	ee24 7b07 	vmul.f64	d7, d4, d7
 8008286:	ee35 5b07 	vadd.f64	d5, d5, d7
 800828a:	4b81      	ldr	r3, [pc, #516]	@ (8008490 <ldl_solve+0x7e8>)
 800828c:	f503 63f0 	add.w	r3, r3, #1920	@ 0x780
 8008290:	ed13 4b02 	vldr	d4, [r3, #-8]
 8008294:	4b7e      	ldr	r3, [pc, #504]	@ (8008490 <ldl_solve+0x7e8>)
 8008296:	f503 630f 	add.w	r3, r3, #2288	@ 0x8f0
 800829a:	ed13 7b02 	vldr	d7, [r3, #-8]
 800829e:	ee24 7b07 	vmul.f64	d7, d4, d7
 80082a2:	ee35 7b07 	vadd.f64	d7, d5, d7
 80082a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80082aa:	4b79      	ldr	r3, [pc, #484]	@ (8008490 <ldl_solve+0x7e8>)
 80082ac:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 80082b0:	ed83 7b00 	vstr	d7, [r3]
  work.v[15] -= work.L[10]*work.v[16];
 80082b4:	4b76      	ldr	r3, [pc, #472]	@ (8008490 <ldl_solve+0x7e8>)
 80082b6:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 80082ba:	ed13 6b02 	vldr	d6, [r3, #-8]
 80082be:	4b74      	ldr	r3, [pc, #464]	@ (8008490 <ldl_solve+0x7e8>)
 80082c0:	f503 63e2 	add.w	r3, r3, #1808	@ 0x710
 80082c4:	ed13 5b02 	vldr	d5, [r3, #-8]
 80082c8:	4b71      	ldr	r3, [pc, #452]	@ (8008490 <ldl_solve+0x7e8>)
 80082ca:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 80082ce:	ed93 7b00 	vldr	d7, [r3]
 80082d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80082d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80082da:	4b6d      	ldr	r3, [pc, #436]	@ (8008490 <ldl_solve+0x7e8>)
 80082dc:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 80082e0:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[14] -= work.L[9]*work.v[16]+work.L[13]*work.v[18]+work.L[18]*work.v[20]+work.L[23]*work.v[21];
 80082e4:	4b6a      	ldr	r3, [pc, #424]	@ (8008490 <ldl_solve+0x7e8>)
 80082e6:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 80082ea:	ed93 6b00 	vldr	d6, [r3]
 80082ee:	4b68      	ldr	r3, [pc, #416]	@ (8008490 <ldl_solve+0x7e8>)
 80082f0:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 80082f4:	ed93 5b00 	vldr	d5, [r3]
 80082f8:	4b65      	ldr	r3, [pc, #404]	@ (8008490 <ldl_solve+0x7e8>)
 80082fa:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 80082fe:	ed93 7b00 	vldr	d7, [r3]
 8008302:	ee25 5b07 	vmul.f64	d5, d5, d7
 8008306:	4b62      	ldr	r3, [pc, #392]	@ (8008490 <ldl_solve+0x7e8>)
 8008308:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 800830c:	ed93 4b00 	vldr	d4, [r3]
 8008310:	4b5f      	ldr	r3, [pc, #380]	@ (8008490 <ldl_solve+0x7e8>)
 8008312:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 8008316:	ed93 7b00 	vldr	d7, [r3]
 800831a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800831e:	ee35 5b07 	vadd.f64	d5, d5, d7
 8008322:	4b5b      	ldr	r3, [pc, #364]	@ (8008490 <ldl_solve+0x7e8>)
 8008324:	f503 63ea 	add.w	r3, r3, #1872	@ 0x750
 8008328:	ed13 4b02 	vldr	d4, [r3, #-8]
 800832c:	4b58      	ldr	r3, [pc, #352]	@ (8008490 <ldl_solve+0x7e8>)
 800832e:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 8008332:	ed93 7b00 	vldr	d7, [r3]
 8008336:	ee24 7b07 	vmul.f64	d7, d4, d7
 800833a:	ee35 5b07 	vadd.f64	d5, d5, d7
 800833e:	4b54      	ldr	r3, [pc, #336]	@ (8008490 <ldl_solve+0x7e8>)
 8008340:	f503 63ee 	add.w	r3, r3, #1904	@ 0x770
 8008344:	ed93 4b00 	vldr	d4, [r3]
 8008348:	4b51      	ldr	r3, [pc, #324]	@ (8008490 <ldl_solve+0x7e8>)
 800834a:	f503 630f 	add.w	r3, r3, #2288	@ 0x8f0
 800834e:	ed13 7b02 	vldr	d7, [r3, #-8]
 8008352:	ee24 7b07 	vmul.f64	d7, d4, d7
 8008356:	ee35 7b07 	vadd.f64	d7, d5, d7
 800835a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800835e:	4b4c      	ldr	r3, [pc, #304]	@ (8008490 <ldl_solve+0x7e8>)
 8008360:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 8008364:	ed83 7b00 	vstr	d7, [r3]
  work.v[13] -= work.L[6]*work.v[14];
 8008368:	4b49      	ldr	r3, [pc, #292]	@ (8008490 <ldl_solve+0x7e8>)
 800836a:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 800836e:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008372:	4b47      	ldr	r3, [pc, #284]	@ (8008490 <ldl_solve+0x7e8>)
 8008374:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 8008378:	ed13 5b02 	vldr	d5, [r3, #-8]
 800837c:	4b44      	ldr	r3, [pc, #272]	@ (8008490 <ldl_solve+0x7e8>)
 800837e:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 8008382:	ed93 7b00 	vldr	d7, [r3]
 8008386:	ee25 7b07 	vmul.f64	d7, d5, d7
 800838a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800838e:	4b40      	ldr	r3, [pc, #256]	@ (8008490 <ldl_solve+0x7e8>)
 8008390:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 8008394:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[12] -= work.L[17]*work.v[20];
 8008398:	4b3d      	ldr	r3, [pc, #244]	@ (8008490 <ldl_solve+0x7e8>)
 800839a:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 800839e:	ed93 6b00 	vldr	d6, [r3]
 80083a2:	4b3b      	ldr	r3, [pc, #236]	@ (8008490 <ldl_solve+0x7e8>)
 80083a4:	f503 63e8 	add.w	r3, r3, #1856	@ 0x740
 80083a8:	ed93 5b00 	vldr	d5, [r3]
 80083ac:	4b38      	ldr	r3, [pc, #224]	@ (8008490 <ldl_solve+0x7e8>)
 80083ae:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 80083b2:	ed93 7b00 	vldr	d7, [r3]
 80083b6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80083ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80083be:	4b34      	ldr	r3, [pc, #208]	@ (8008490 <ldl_solve+0x7e8>)
 80083c0:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 80083c4:	ed83 7b00 	vstr	d7, [r3]
  work.v[11] -= work.L[12]*work.v[18];
 80083c8:	4b31      	ldr	r3, [pc, #196]	@ (8008490 <ldl_solve+0x7e8>)
 80083ca:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 80083ce:	ed13 6b02 	vldr	d6, [r3, #-8]
 80083d2:	4b2f      	ldr	r3, [pc, #188]	@ (8008490 <ldl_solve+0x7e8>)
 80083d4:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 80083d8:	ed13 5b02 	vldr	d5, [r3, #-8]
 80083dc:	4b2c      	ldr	r3, [pc, #176]	@ (8008490 <ldl_solve+0x7e8>)
 80083de:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 80083e2:	ed93 7b00 	vldr	d7, [r3]
 80083e6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80083ea:	ee36 7b47 	vsub.f64	d7, d6, d7
 80083ee:	4b28      	ldr	r3, [pc, #160]	@ (8008490 <ldl_solve+0x7e8>)
 80083f0:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 80083f4:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[10] -= work.L[8]*work.v[16];
 80083f8:	4b25      	ldr	r3, [pc, #148]	@ (8008490 <ldl_solve+0x7e8>)
 80083fa:	f503 6309 	add.w	r3, r3, #2192	@ 0x890
 80083fe:	ed93 6b00 	vldr	d6, [r3]
 8008402:	4b23      	ldr	r3, [pc, #140]	@ (8008490 <ldl_solve+0x7e8>)
 8008404:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8008408:	ed13 5b02 	vldr	d5, [r3, #-8]
 800840c:	4b20      	ldr	r3, [pc, #128]	@ (8008490 <ldl_solve+0x7e8>)
 800840e:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8008412:	ed93 7b00 	vldr	d7, [r3]
 8008416:	ee25 7b07 	vmul.f64	d7, d5, d7
 800841a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800841e:	4b1c      	ldr	r3, [pc, #112]	@ (8008490 <ldl_solve+0x7e8>)
 8008420:	f503 6309 	add.w	r3, r3, #2192	@ 0x890
 8008424:	ed83 7b00 	vstr	d7, [r3]
  work.v[9] -= work.L[5]*work.v[14];
 8008428:	4b19      	ldr	r3, [pc, #100]	@ (8008490 <ldl_solve+0x7e8>)
 800842a:	f503 6309 	add.w	r3, r3, #2192	@ 0x890
 800842e:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008432:	4b17      	ldr	r3, [pc, #92]	@ (8008490 <ldl_solve+0x7e8>)
 8008434:	f503 63dc 	add.w	r3, r3, #1760	@ 0x6e0
 8008438:	ed93 5b00 	vldr	d5, [r3]
 800843c:	4b14      	ldr	r3, [pc, #80]	@ (8008490 <ldl_solve+0x7e8>)
 800843e:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 8008442:	ed93 7b00 	vldr	d7, [r3]
 8008446:	ee25 7b07 	vmul.f64	d7, d5, d7
 800844a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800844e:	4b10      	ldr	r3, [pc, #64]	@ (8008490 <ldl_solve+0x7e8>)
 8008450:	f503 6309 	add.w	r3, r3, #2192	@ 0x890
 8008454:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[8] -= work.L[22]*work.v[21];
 8008458:	4b0d      	ldr	r3, [pc, #52]	@ (8008490 <ldl_solve+0x7e8>)
 800845a:	f503 6308 	add.w	r3, r3, #2176	@ 0x880
 800845e:	ed93 6b00 	vldr	d6, [r3]
 8008462:	4b0b      	ldr	r3, [pc, #44]	@ (8008490 <ldl_solve+0x7e8>)
 8008464:	f503 63ee 	add.w	r3, r3, #1904	@ 0x770
 8008468:	ed13 5b02 	vldr	d5, [r3, #-8]
 800846c:	4b08      	ldr	r3, [pc, #32]	@ (8008490 <ldl_solve+0x7e8>)
 800846e:	f503 630f 	add.w	r3, r3, #2288	@ 0x8f0
 8008472:	ed13 7b02 	vldr	d7, [r3, #-8]
 8008476:	ee25 7b07 	vmul.f64	d7, d5, d7
 800847a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800847e:	4b04      	ldr	r3, [pc, #16]	@ (8008490 <ldl_solve+0x7e8>)
 8008480:	f503 6308 	add.w	r3, r3, #2176	@ 0x880
 8008484:	ed83 7b00 	vstr	d7, [r3]
  work.v[7] -= work.L[16]*work.v[19];
 8008488:	4b01      	ldr	r3, [pc, #4]	@ (8008490 <ldl_solve+0x7e8>)
 800848a:	f503 6308 	add.w	r3, r3, #2176	@ 0x880
 800848e:	e001      	b.n	8008494 <ldl_solve+0x7ec>
 8008490:	24007070 	.word	0x24007070
 8008494:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008498:	4bb8      	ldr	r3, [pc, #736]	@ (800877c <ldl_solve+0xad4>)
 800849a:	f503 63e8 	add.w	r3, r3, #1856	@ 0x740
 800849e:	ed13 5b02 	vldr	d5, [r3, #-8]
 80084a2:	4bb6      	ldr	r3, [pc, #728]	@ (800877c <ldl_solve+0xad4>)
 80084a4:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 80084a8:	ed13 7b02 	vldr	d7, [r3, #-8]
 80084ac:	ee25 7b07 	vmul.f64	d7, d5, d7
 80084b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80084b4:	4bb1      	ldr	r3, [pc, #708]	@ (800877c <ldl_solve+0xad4>)
 80084b6:	f503 6308 	add.w	r3, r3, #2176	@ 0x880
 80084ba:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[6] -= work.L[11]*work.v[17];
 80084be:	4baf      	ldr	r3, [pc, #700]	@ (800877c <ldl_solve+0xad4>)
 80084c0:	f503 6307 	add.w	r3, r3, #2160	@ 0x870
 80084c4:	ed93 6b00 	vldr	d6, [r3]
 80084c8:	4bac      	ldr	r3, [pc, #688]	@ (800877c <ldl_solve+0xad4>)
 80084ca:	f503 63e2 	add.w	r3, r3, #1808	@ 0x710
 80084ce:	ed93 5b00 	vldr	d5, [r3]
 80084d2:	4baa      	ldr	r3, [pc, #680]	@ (800877c <ldl_solve+0xad4>)
 80084d4:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 80084d8:	ed13 7b02 	vldr	d7, [r3, #-8]
 80084dc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80084e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80084e4:	4ba5      	ldr	r3, [pc, #660]	@ (800877c <ldl_solve+0xad4>)
 80084e6:	f503 6307 	add.w	r3, r3, #2160	@ 0x870
 80084ea:	ed83 7b00 	vstr	d7, [r3]
  work.v[5] -= work.L[7]*work.v[15];
 80084ee:	4ba3      	ldr	r3, [pc, #652]	@ (800877c <ldl_solve+0xad4>)
 80084f0:	f503 6307 	add.w	r3, r3, #2160	@ 0x870
 80084f4:	ed13 6b02 	vldr	d6, [r3, #-8]
 80084f8:	4ba0      	ldr	r3, [pc, #640]	@ (800877c <ldl_solve+0xad4>)
 80084fa:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 80084fe:	ed93 5b00 	vldr	d5, [r3]
 8008502:	4b9e      	ldr	r3, [pc, #632]	@ (800877c <ldl_solve+0xad4>)
 8008504:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8008508:	ed13 7b02 	vldr	d7, [r3, #-8]
 800850c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008510:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008514:	4b99      	ldr	r3, [pc, #612]	@ (800877c <ldl_solve+0xad4>)
 8008516:	f503 6307 	add.w	r3, r3, #2160	@ 0x870
 800851a:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[4] -= work.L[4]*work.v[13];
 800851e:	4b97      	ldr	r3, [pc, #604]	@ (800877c <ldl_solve+0xad4>)
 8008520:	f503 6306 	add.w	r3, r3, #2144	@ 0x860
 8008524:	ed93 6b00 	vldr	d6, [r3]
 8008528:	4b94      	ldr	r3, [pc, #592]	@ (800877c <ldl_solve+0xad4>)
 800852a:	f503 63dc 	add.w	r3, r3, #1760	@ 0x6e0
 800852e:	ed13 5b02 	vldr	d5, [r3, #-8]
 8008532:	4b92      	ldr	r3, [pc, #584]	@ (800877c <ldl_solve+0xad4>)
 8008534:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 8008538:	ed13 7b02 	vldr	d7, [r3, #-8]
 800853c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008540:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008544:	4b8d      	ldr	r3, [pc, #564]	@ (800877c <ldl_solve+0xad4>)
 8008546:	f503 6306 	add.w	r3, r3, #2144	@ 0x860
 800854a:	ed83 7b00 	vstr	d7, [r3]
  work.v[3] -= work.L[3]*work.v[12];
 800854e:	4b8b      	ldr	r3, [pc, #556]	@ (800877c <ldl_solve+0xad4>)
 8008550:	f503 6306 	add.w	r3, r3, #2144	@ 0x860
 8008554:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008558:	4b88      	ldr	r3, [pc, #544]	@ (800877c <ldl_solve+0xad4>)
 800855a:	f503 63da 	add.w	r3, r3, #1744	@ 0x6d0
 800855e:	ed93 5b00 	vldr	d5, [r3]
 8008562:	4b86      	ldr	r3, [pc, #536]	@ (800877c <ldl_solve+0xad4>)
 8008564:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8008568:	ed93 7b00 	vldr	d7, [r3]
 800856c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008570:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008574:	4b81      	ldr	r3, [pc, #516]	@ (800877c <ldl_solve+0xad4>)
 8008576:	f503 6306 	add.w	r3, r3, #2144	@ 0x860
 800857a:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[2] -= work.L[2]*work.v[11];
 800857e:	4b7f      	ldr	r3, [pc, #508]	@ (800877c <ldl_solve+0xad4>)
 8008580:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 8008584:	ed93 6b00 	vldr	d6, [r3]
 8008588:	4b7c      	ldr	r3, [pc, #496]	@ (800877c <ldl_solve+0xad4>)
 800858a:	f503 63da 	add.w	r3, r3, #1744	@ 0x6d0
 800858e:	ed13 5b02 	vldr	d5, [r3, #-8]
 8008592:	4b7a      	ldr	r3, [pc, #488]	@ (800877c <ldl_solve+0xad4>)
 8008594:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8008598:	ed13 7b02 	vldr	d7, [r3, #-8]
 800859c:	ee25 7b07 	vmul.f64	d7, d5, d7
 80085a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80085a4:	4b75      	ldr	r3, [pc, #468]	@ (800877c <ldl_solve+0xad4>)
 80085a6:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 80085aa:	ed83 7b00 	vstr	d7, [r3]
  work.v[1] -= work.L[1]*work.v[10];
 80085ae:	4b73      	ldr	r3, [pc, #460]	@ (800877c <ldl_solve+0xad4>)
 80085b0:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 80085b4:	ed13 6b02 	vldr	d6, [r3, #-8]
 80085b8:	4b70      	ldr	r3, [pc, #448]	@ (800877c <ldl_solve+0xad4>)
 80085ba:	f503 63d8 	add.w	r3, r3, #1728	@ 0x6c0
 80085be:	ed93 5b00 	vldr	d5, [r3]
 80085c2:	4b6e      	ldr	r3, [pc, #440]	@ (800877c <ldl_solve+0xad4>)
 80085c4:	f503 6309 	add.w	r3, r3, #2192	@ 0x890
 80085c8:	ed93 7b00 	vldr	d7, [r3]
 80085cc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80085d0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80085d4:	4b69      	ldr	r3, [pc, #420]	@ (800877c <ldl_solve+0xad4>)
 80085d6:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 80085da:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[0] -= work.L[0]*work.v[9];
 80085de:	4b67      	ldr	r3, [pc, #412]	@ (800877c <ldl_solve+0xad4>)
 80085e0:	f503 6304 	add.w	r3, r3, #2112	@ 0x840
 80085e4:	ed93 6b00 	vldr	d6, [r3]
 80085e8:	4b64      	ldr	r3, [pc, #400]	@ (800877c <ldl_solve+0xad4>)
 80085ea:	f503 63d8 	add.w	r3, r3, #1728	@ 0x6c0
 80085ee:	ed13 5b02 	vldr	d5, [r3, #-8]
 80085f2:	4b62      	ldr	r3, [pc, #392]	@ (800877c <ldl_solve+0xad4>)
 80085f4:	f503 6309 	add.w	r3, r3, #2192	@ 0x890
 80085f8:	ed13 7b02 	vldr	d7, [r3, #-8]
 80085fc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008600:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008604:	4b5d      	ldr	r3, [pc, #372]	@ (800877c <ldl_solve+0xad4>)
 8008606:	f503 6304 	add.w	r3, r3, #2112	@ 0x840
 800860a:	ed83 7b00 	vstr	d7, [r3]
  /* Unpermute the result, from v to var. */
  var[0] = work.v[14];
 800860e:	4b5b      	ldr	r3, [pc, #364]	@ (800877c <ldl_solve+0xad4>)
 8008610:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 8008614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008618:	6839      	ldr	r1, [r7, #0]
 800861a:	e9c1 2300 	strd	r2, r3, [r1]
  var[1] = work.v[16];
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	f103 0108 	add.w	r1, r3, #8
 8008624:	4b55      	ldr	r3, [pc, #340]	@ (800877c <ldl_solve+0xad4>)
 8008626:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 800862a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862e:	e9c1 2300 	strd	r2, r3, [r1]
  var[2] = work.v[18];
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	f103 0110 	add.w	r1, r3, #16
 8008638:	4b50      	ldr	r3, [pc, #320]	@ (800877c <ldl_solve+0xad4>)
 800863a:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 800863e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008642:	e9c1 2300 	strd	r2, r3, [r1]
  var[3] = work.v[20];
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	f103 0118 	add.w	r1, r3, #24
 800864c:	4b4b      	ldr	r3, [pc, #300]	@ (800877c <ldl_solve+0xad4>)
 800864e:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 8008652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008656:	e9c1 2300 	strd	r2, r3, [r1]
  var[4] = work.v[0];
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	f103 0120 	add.w	r1, r3, #32
 8008660:	4b46      	ldr	r3, [pc, #280]	@ (800877c <ldl_solve+0xad4>)
 8008662:	f503 6304 	add.w	r3, r3, #2112	@ 0x840
 8008666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866a:	e9c1 2300 	strd	r2, r3, [r1]
  var[5] = work.v[1];
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8008674:	4b41      	ldr	r3, [pc, #260]	@ (800877c <ldl_solve+0xad4>)
 8008676:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 800867a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800867e:	e9c1 2300 	strd	r2, r3, [r1]
  var[6] = work.v[2];
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008688:	4b3c      	ldr	r3, [pc, #240]	@ (800877c <ldl_solve+0xad4>)
 800868a:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 800868e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008692:	e9c1 2300 	strd	r2, r3, [r1]
  var[7] = work.v[3];
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800869c:	4b37      	ldr	r3, [pc, #220]	@ (800877c <ldl_solve+0xad4>)
 800869e:	f503 6306 	add.w	r3, r3, #2144	@ 0x860
 80086a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086a6:	e9c1 2300 	strd	r2, r3, [r1]
  var[8] = work.v[4];
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80086b0:	4b32      	ldr	r3, [pc, #200]	@ (800877c <ldl_solve+0xad4>)
 80086b2:	f503 6306 	add.w	r3, r3, #2144	@ 0x860
 80086b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ba:	e9c1 2300 	strd	r2, r3, [r1]
  var[9] = work.v[5];
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80086c4:	4b2d      	ldr	r3, [pc, #180]	@ (800877c <ldl_solve+0xad4>)
 80086c6:	f503 6307 	add.w	r3, r3, #2160	@ 0x870
 80086ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086ce:	e9c1 2300 	strd	r2, r3, [r1]
  var[10] = work.v[6];
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 80086d8:	4b28      	ldr	r3, [pc, #160]	@ (800877c <ldl_solve+0xad4>)
 80086da:	f503 6307 	add.w	r3, r3, #2160	@ 0x870
 80086de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e2:	e9c1 2300 	strd	r2, r3, [r1]
  var[11] = work.v[7];
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 80086ec:	4b23      	ldr	r3, [pc, #140]	@ (800877c <ldl_solve+0xad4>)
 80086ee:	f503 6308 	add.w	r3, r3, #2176	@ 0x880
 80086f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086f6:	e9c1 2300 	strd	r2, r3, [r1]
  var[12] = work.v[8];
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8008700:	4b1e      	ldr	r3, [pc, #120]	@ (800877c <ldl_solve+0xad4>)
 8008702:	f503 6308 	add.w	r3, r3, #2176	@ 0x880
 8008706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870a:	e9c1 2300 	strd	r2, r3, [r1]
  var[13] = work.v[9];
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8008714:	4b19      	ldr	r3, [pc, #100]	@ (800877c <ldl_solve+0xad4>)
 8008716:	f503 6309 	add.w	r3, r3, #2192	@ 0x890
 800871a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800871e:	e9c1 2300 	strd	r2, r3, [r1]
  var[14] = work.v[10];
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8008728:	4b14      	ldr	r3, [pc, #80]	@ (800877c <ldl_solve+0xad4>)
 800872a:	f503 6309 	add.w	r3, r3, #2192	@ 0x890
 800872e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008732:	e9c1 2300 	strd	r2, r3, [r1]
  var[15] = work.v[11];
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 800873c:	4b0f      	ldr	r3, [pc, #60]	@ (800877c <ldl_solve+0xad4>)
 800873e:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8008742:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008746:	e9c1 2300 	strd	r2, r3, [r1]
  var[16] = work.v[12];
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8008750:	4b0a      	ldr	r3, [pc, #40]	@ (800877c <ldl_solve+0xad4>)
 8008752:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8008756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875a:	e9c1 2300 	strd	r2, r3, [r1]
  var[17] = work.v[13];
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 8008764:	4b05      	ldr	r3, [pc, #20]	@ (800877c <ldl_solve+0xad4>)
 8008766:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 800876a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800876e:	e9c1 2300 	strd	r2, r3, [r1]
  var[18] = work.v[15];
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8008778:	e002      	b.n	8008780 <ldl_solve+0xad8>
 800877a:	bf00      	nop
 800877c:	24007070 	.word	0x24007070
 8008780:	4b15      	ldr	r3, [pc, #84]	@ (80087d8 <ldl_solve+0xb30>)
 8008782:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8008786:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800878a:	e9c1 2300 	strd	r2, r3, [r1]
  var[19] = work.v[17];
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	f103 0198 	add.w	r1, r3, #152	@ 0x98
 8008794:	4b10      	ldr	r3, [pc, #64]	@ (80087d8 <ldl_solve+0xb30>)
 8008796:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 800879a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800879e:	e9c1 2300 	strd	r2, r3, [r1]
  var[20] = work.v[19];
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	f103 01a0 	add.w	r1, r3, #160	@ 0xa0
 80087a8:	4b0b      	ldr	r3, [pc, #44]	@ (80087d8 <ldl_solve+0xb30>)
 80087aa:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 80087ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087b2:	e9c1 2300 	strd	r2, r3, [r1]
  var[21] = work.v[21];
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
 80087bc:	4b06      	ldr	r3, [pc, #24]	@ (80087d8 <ldl_solve+0xb30>)
 80087be:	f503 630f 	add.w	r3, r3, #2288	@ 0x8f0
 80087c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087c6:	e9c1 2300 	strd	r2, r3, [r1]
#ifndef ZERO_LIBRARY_MODE
  if (settings.debug) {
    printf("Squared norm for solution is %.8g.\n", check_residual(target, var));
  }
#endif
}
 80087ca:	bf00      	nop
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	24007070 	.word	0x24007070

080087dc <ldl_factor>:
void ldl_factor(void) {
 80087dc:	b480      	push	{r7}
 80087de:	af00      	add	r7, sp, #0
  work.d[0] = work.KKT[0];
 80087e0:	4bb8      	ldr	r3, [pc, #736]	@ (8008ac4 <ldl_factor+0x2e8>)
 80087e2:	f503 63a6 	add.w	r3, r3, #1328	@ 0x530
 80087e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ea:	49b6      	ldr	r1, [pc, #728]	@ (8008ac4 <ldl_factor+0x2e8>)
 80087ec:	f501 61f2 	add.w	r1, r1, #1936	@ 0x790
 80087f0:	e9c1 2300 	strd	r2, r3, [r1]
  if (work.d[0] < 0)
 80087f4:	4bb3      	ldr	r3, [pc, #716]	@ (8008ac4 <ldl_factor+0x2e8>)
 80087f6:	f503 63f2 	add.w	r3, r3, #1936	@ 0x790
 80087fa:	ed93 7b00 	vldr	d7, [r3]
 80087fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008806:	d508      	bpl.n	800881a <ldl_factor+0x3e>
    work.d[0] = cvxgen_settings.kkt_reg;
 8008808:	4baf      	ldr	r3, [pc, #700]	@ (8008ac8 <ldl_factor+0x2ec>)
 800880a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800880e:	49ad      	ldr	r1, [pc, #692]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008810:	f501 61f2 	add.w	r1, r1, #1936	@ 0x790
 8008814:	e9c1 2300 	strd	r2, r3, [r1]
 8008818:	e00e      	b.n	8008838 <ldl_factor+0x5c>
  else
    work.d[0] += cvxgen_settings.kkt_reg;
 800881a:	4baa      	ldr	r3, [pc, #680]	@ (8008ac4 <ldl_factor+0x2e8>)
 800881c:	f503 63f2 	add.w	r3, r3, #1936	@ 0x790
 8008820:	ed93 6b00 	vldr	d6, [r3]
 8008824:	4ba8      	ldr	r3, [pc, #672]	@ (8008ac8 <ldl_factor+0x2ec>)
 8008826:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 800882a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800882e:	4ba5      	ldr	r3, [pc, #660]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008830:	f503 63f2 	add.w	r3, r3, #1936	@ 0x790
 8008834:	ed83 7b00 	vstr	d7, [r3]
  work.d_inv[0] = 1/work.d[0];
 8008838:	4ba2      	ldr	r3, [pc, #648]	@ (8008ac4 <ldl_factor+0x2e8>)
 800883a:	f503 63f2 	add.w	r3, r3, #1936	@ 0x790
 800883e:	ed93 6b00 	vldr	d6, [r3]
 8008842:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8008846:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800884a:	4b9e      	ldr	r3, [pc, #632]	@ (8008ac4 <ldl_factor+0x2e8>)
 800884c:	f503 630f 	add.w	r3, r3, #2288	@ 0x8f0
 8008850:	ed83 7b00 	vstr	d7, [r3]
  work.L[0] = work.KKT[1]*work.d_inv[0];
 8008854:	4b9b      	ldr	r3, [pc, #620]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008856:	f503 63a8 	add.w	r3, r3, #1344	@ 0x540
 800885a:	ed13 6b02 	vldr	d6, [r3, #-8]
 800885e:	4b99      	ldr	r3, [pc, #612]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008860:	f503 630f 	add.w	r3, r3, #2288	@ 0x8f0
 8008864:	ed93 7b00 	vldr	d7, [r3]
 8008868:	ee26 7b07 	vmul.f64	d7, d6, d7
 800886c:	4b95      	ldr	r3, [pc, #596]	@ (8008ac4 <ldl_factor+0x2e8>)
 800886e:	f503 63d8 	add.w	r3, r3, #1728	@ 0x6c0
 8008872:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[1] = work.KKT[2];
 8008876:	4b93      	ldr	r3, [pc, #588]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008878:	f503 63a8 	add.w	r3, r3, #1344	@ 0x540
 800887c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008880:	4990      	ldr	r1, [pc, #576]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008882:	f501 6105 	add.w	r1, r1, #2128	@ 0x850
 8008886:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.d[1] = work.v[1];
 800888a:	4b8e      	ldr	r3, [pc, #568]	@ (8008ac4 <ldl_factor+0x2e8>)
 800888c:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 8008890:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008894:	498b      	ldr	r1, [pc, #556]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008896:	f501 61f4 	add.w	r1, r1, #1952	@ 0x7a0
 800889a:	e941 2302 	strd	r2, r3, [r1, #-8]
  if (work.d[1] < 0)
 800889e:	4b89      	ldr	r3, [pc, #548]	@ (8008ac4 <ldl_factor+0x2e8>)
 80088a0:	f503 63f4 	add.w	r3, r3, #1952	@ 0x7a0
 80088a4:	ed13 7b02 	vldr	d7, [r3, #-8]
 80088a8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80088ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088b0:	d508      	bpl.n	80088c4 <ldl_factor+0xe8>
    work.d[1] = cvxgen_settings.kkt_reg;
 80088b2:	4b85      	ldr	r3, [pc, #532]	@ (8008ac8 <ldl_factor+0x2ec>)
 80088b4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80088b8:	4982      	ldr	r1, [pc, #520]	@ (8008ac4 <ldl_factor+0x2e8>)
 80088ba:	f501 61f4 	add.w	r1, r1, #1952	@ 0x7a0
 80088be:	e941 2302 	strd	r2, r3, [r1, #-8]
 80088c2:	e00e      	b.n	80088e2 <ldl_factor+0x106>
  else
    work.d[1] += cvxgen_settings.kkt_reg;
 80088c4:	4b7f      	ldr	r3, [pc, #508]	@ (8008ac4 <ldl_factor+0x2e8>)
 80088c6:	f503 63f4 	add.w	r3, r3, #1952	@ 0x7a0
 80088ca:	ed13 6b02 	vldr	d6, [r3, #-8]
 80088ce:	4b7e      	ldr	r3, [pc, #504]	@ (8008ac8 <ldl_factor+0x2ec>)
 80088d0:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 80088d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80088d8:	4b7a      	ldr	r3, [pc, #488]	@ (8008ac4 <ldl_factor+0x2e8>)
 80088da:	f503 63f4 	add.w	r3, r3, #1952	@ 0x7a0
 80088de:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.d_inv[1] = 1/work.d[1];
 80088e2:	4b78      	ldr	r3, [pc, #480]	@ (8008ac4 <ldl_factor+0x2e8>)
 80088e4:	f503 63f4 	add.w	r3, r3, #1952	@ 0x7a0
 80088e8:	ed13 6b02 	vldr	d6, [r3, #-8]
 80088ec:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 80088f0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80088f4:	4b73      	ldr	r3, [pc, #460]	@ (8008ac4 <ldl_factor+0x2e8>)
 80088f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088fa:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.L[1] = (work.KKT[3])*work.d_inv[1];
 80088fe:	4b71      	ldr	r3, [pc, #452]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008900:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 8008904:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008908:	4b6e      	ldr	r3, [pc, #440]	@ (8008ac4 <ldl_factor+0x2e8>)
 800890a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800890e:	ed13 7b02 	vldr	d7, [r3, #-8]
 8008912:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008916:	4b6b      	ldr	r3, [pc, #428]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008918:	f503 63d8 	add.w	r3, r3, #1728	@ 0x6c0
 800891c:	ed83 7b00 	vstr	d7, [r3]
  work.v[2] = work.KKT[4];
 8008920:	4b68      	ldr	r3, [pc, #416]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008922:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 8008926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892a:	4966      	ldr	r1, [pc, #408]	@ (8008ac4 <ldl_factor+0x2e8>)
 800892c:	f501 6105 	add.w	r1, r1, #2128	@ 0x850
 8008930:	e9c1 2300 	strd	r2, r3, [r1]
  work.d[2] = work.v[2];
 8008934:	4b63      	ldr	r3, [pc, #396]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008936:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 800893a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893e:	4961      	ldr	r1, [pc, #388]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008940:	f501 61f4 	add.w	r1, r1, #1952	@ 0x7a0
 8008944:	e9c1 2300 	strd	r2, r3, [r1]
  if (work.d[2] < 0)
 8008948:	4b5e      	ldr	r3, [pc, #376]	@ (8008ac4 <ldl_factor+0x2e8>)
 800894a:	f503 63f4 	add.w	r3, r3, #1952	@ 0x7a0
 800894e:	ed93 7b00 	vldr	d7, [r3]
 8008952:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800895a:	d508      	bpl.n	800896e <ldl_factor+0x192>
    work.d[2] = cvxgen_settings.kkt_reg;
 800895c:	4b5a      	ldr	r3, [pc, #360]	@ (8008ac8 <ldl_factor+0x2ec>)
 800895e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008962:	4958      	ldr	r1, [pc, #352]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008964:	f501 61f4 	add.w	r1, r1, #1952	@ 0x7a0
 8008968:	e9c1 2300 	strd	r2, r3, [r1]
 800896c:	e00e      	b.n	800898c <ldl_factor+0x1b0>
  else
    work.d[2] += cvxgen_settings.kkt_reg;
 800896e:	4b55      	ldr	r3, [pc, #340]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008970:	f503 63f4 	add.w	r3, r3, #1952	@ 0x7a0
 8008974:	ed93 6b00 	vldr	d6, [r3]
 8008978:	4b53      	ldr	r3, [pc, #332]	@ (8008ac8 <ldl_factor+0x2ec>)
 800897a:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 800897e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008982:	4b50      	ldr	r3, [pc, #320]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008984:	f503 63f4 	add.w	r3, r3, #1952	@ 0x7a0
 8008988:	ed83 7b00 	vstr	d7, [r3]
  work.d_inv[2] = 1/work.d[2];
 800898c:	4b4d      	ldr	r3, [pc, #308]	@ (8008ac4 <ldl_factor+0x2e8>)
 800898e:	f503 63f4 	add.w	r3, r3, #1952	@ 0x7a0
 8008992:	ed93 6b00 	vldr	d6, [r3]
 8008996:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 800899a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800899e:	4b49      	ldr	r3, [pc, #292]	@ (8008ac4 <ldl_factor+0x2e8>)
 80089a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089a4:	ed83 7b00 	vstr	d7, [r3]
  work.L[2] = (work.KKT[5])*work.d_inv[2];
 80089a8:	4b46      	ldr	r3, [pc, #280]	@ (8008ac4 <ldl_factor+0x2e8>)
 80089aa:	f503 63ac 	add.w	r3, r3, #1376	@ 0x560
 80089ae:	ed13 6b02 	vldr	d6, [r3, #-8]
 80089b2:	4b44      	ldr	r3, [pc, #272]	@ (8008ac4 <ldl_factor+0x2e8>)
 80089b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089b8:	ed93 7b00 	vldr	d7, [r3]
 80089bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80089c0:	4b40      	ldr	r3, [pc, #256]	@ (8008ac4 <ldl_factor+0x2e8>)
 80089c2:	f503 63da 	add.w	r3, r3, #1744	@ 0x6d0
 80089c6:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[3] = work.KKT[6];
 80089ca:	4b3e      	ldr	r3, [pc, #248]	@ (8008ac4 <ldl_factor+0x2e8>)
 80089cc:	f503 63ac 	add.w	r3, r3, #1376	@ 0x560
 80089d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d4:	493b      	ldr	r1, [pc, #236]	@ (8008ac4 <ldl_factor+0x2e8>)
 80089d6:	f501 6106 	add.w	r1, r1, #2144	@ 0x860
 80089da:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.d[3] = work.v[3];
 80089de:	4b39      	ldr	r3, [pc, #228]	@ (8008ac4 <ldl_factor+0x2e8>)
 80089e0:	f503 6306 	add.w	r3, r3, #2144	@ 0x860
 80089e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80089e8:	4936      	ldr	r1, [pc, #216]	@ (8008ac4 <ldl_factor+0x2e8>)
 80089ea:	f501 61f6 	add.w	r1, r1, #1968	@ 0x7b0
 80089ee:	e941 2302 	strd	r2, r3, [r1, #-8]
  if (work.d[3] < 0)
 80089f2:	4b34      	ldr	r3, [pc, #208]	@ (8008ac4 <ldl_factor+0x2e8>)
 80089f4:	f503 63f6 	add.w	r3, r3, #1968	@ 0x7b0
 80089f8:	ed13 7b02 	vldr	d7, [r3, #-8]
 80089fc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a04:	d508      	bpl.n	8008a18 <ldl_factor+0x23c>
    work.d[3] = cvxgen_settings.kkt_reg;
 8008a06:	4b30      	ldr	r3, [pc, #192]	@ (8008ac8 <ldl_factor+0x2ec>)
 8008a08:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008a0c:	492d      	ldr	r1, [pc, #180]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008a0e:	f501 61f6 	add.w	r1, r1, #1968	@ 0x7b0
 8008a12:	e941 2302 	strd	r2, r3, [r1, #-8]
 8008a16:	e00e      	b.n	8008a36 <ldl_factor+0x25a>
  else
    work.d[3] += cvxgen_settings.kkt_reg;
 8008a18:	4b2a      	ldr	r3, [pc, #168]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008a1a:	f503 63f6 	add.w	r3, r3, #1968	@ 0x7b0
 8008a1e:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008a22:	4b29      	ldr	r3, [pc, #164]	@ (8008ac8 <ldl_factor+0x2ec>)
 8008a24:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8008a28:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008a2c:	4b25      	ldr	r3, [pc, #148]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008a2e:	f503 63f6 	add.w	r3, r3, #1968	@ 0x7b0
 8008a32:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.d_inv[3] = 1/work.d[3];
 8008a36:	4b23      	ldr	r3, [pc, #140]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008a38:	f503 63f6 	add.w	r3, r3, #1968	@ 0x7b0
 8008a3c:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008a40:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8008a44:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008a48:	4b1e      	ldr	r3, [pc, #120]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008a4a:	f503 6311 	add.w	r3, r3, #2320	@ 0x910
 8008a4e:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.L[3] = (work.KKT[7])*work.d_inv[3];
 8008a52:	4b1c      	ldr	r3, [pc, #112]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008a54:	f503 63ae 	add.w	r3, r3, #1392	@ 0x570
 8008a58:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008a5c:	4b19      	ldr	r3, [pc, #100]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008a5e:	f503 6311 	add.w	r3, r3, #2320	@ 0x910
 8008a62:	ed13 7b02 	vldr	d7, [r3, #-8]
 8008a66:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008a6a:	4b16      	ldr	r3, [pc, #88]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008a6c:	f503 63da 	add.w	r3, r3, #1744	@ 0x6d0
 8008a70:	ed83 7b00 	vstr	d7, [r3]
  work.v[4] = work.KKT[8];
 8008a74:	4b13      	ldr	r3, [pc, #76]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008a76:	f503 63ae 	add.w	r3, r3, #1392	@ 0x570
 8008a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7e:	4911      	ldr	r1, [pc, #68]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008a80:	f501 6106 	add.w	r1, r1, #2144	@ 0x860
 8008a84:	e9c1 2300 	strd	r2, r3, [r1]
  work.d[4] = work.v[4];
 8008a88:	4b0e      	ldr	r3, [pc, #56]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008a8a:	f503 6306 	add.w	r3, r3, #2144	@ 0x860
 8008a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a92:	490c      	ldr	r1, [pc, #48]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008a94:	f501 61f6 	add.w	r1, r1, #1968	@ 0x7b0
 8008a98:	e9c1 2300 	strd	r2, r3, [r1]
  if (work.d[4] < 0)
 8008a9c:	4b09      	ldr	r3, [pc, #36]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008a9e:	f503 63f6 	add.w	r3, r3, #1968	@ 0x7b0
 8008aa2:	ed93 7b00 	vldr	d7, [r3]
 8008aa6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aae:	d50d      	bpl.n	8008acc <ldl_factor+0x2f0>
    work.d[4] = cvxgen_settings.kkt_reg;
 8008ab0:	4b05      	ldr	r3, [pc, #20]	@ (8008ac8 <ldl_factor+0x2ec>)
 8008ab2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008ab6:	4903      	ldr	r1, [pc, #12]	@ (8008ac4 <ldl_factor+0x2e8>)
 8008ab8:	f501 61f6 	add.w	r1, r1, #1968	@ 0x7b0
 8008abc:	e9c1 2300 	strd	r2, r3, [r1]
 8008ac0:	e013      	b.n	8008aea <ldl_factor+0x30e>
 8008ac2:	bf00      	nop
 8008ac4:	24007070 	.word	0x24007070
 8008ac8:	24007a40 	.word	0x24007a40
  else
    work.d[4] += cvxgen_settings.kkt_reg;
 8008acc:	4ba9      	ldr	r3, [pc, #676]	@ (8008d74 <ldl_factor+0x598>)
 8008ace:	f503 63f6 	add.w	r3, r3, #1968	@ 0x7b0
 8008ad2:	ed93 6b00 	vldr	d6, [r3]
 8008ad6:	4ba8      	ldr	r3, [pc, #672]	@ (8008d78 <ldl_factor+0x59c>)
 8008ad8:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8008adc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008ae0:	4ba4      	ldr	r3, [pc, #656]	@ (8008d74 <ldl_factor+0x598>)
 8008ae2:	f503 63f6 	add.w	r3, r3, #1968	@ 0x7b0
 8008ae6:	ed83 7b00 	vstr	d7, [r3]
  work.d_inv[4] = 1/work.d[4];
 8008aea:	4ba2      	ldr	r3, [pc, #648]	@ (8008d74 <ldl_factor+0x598>)
 8008aec:	f503 63f6 	add.w	r3, r3, #1968	@ 0x7b0
 8008af0:	ed93 6b00 	vldr	d6, [r3]
 8008af4:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8008af8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008afc:	4b9d      	ldr	r3, [pc, #628]	@ (8008d74 <ldl_factor+0x598>)
 8008afe:	f503 6311 	add.w	r3, r3, #2320	@ 0x910
 8008b02:	ed83 7b00 	vstr	d7, [r3]
  work.L[4] = (work.KKT[9])*work.d_inv[4];
 8008b06:	4b9b      	ldr	r3, [pc, #620]	@ (8008d74 <ldl_factor+0x598>)
 8008b08:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 8008b0c:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008b10:	4b98      	ldr	r3, [pc, #608]	@ (8008d74 <ldl_factor+0x598>)
 8008b12:	f503 6311 	add.w	r3, r3, #2320	@ 0x910
 8008b16:	ed93 7b00 	vldr	d7, [r3]
 8008b1a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008b1e:	4b95      	ldr	r3, [pc, #596]	@ (8008d74 <ldl_factor+0x598>)
 8008b20:	f503 63dc 	add.w	r3, r3, #1760	@ 0x6e0
 8008b24:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[5] = work.KKT[10];
 8008b28:	4b92      	ldr	r3, [pc, #584]	@ (8008d74 <ldl_factor+0x598>)
 8008b2a:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 8008b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b32:	4990      	ldr	r1, [pc, #576]	@ (8008d74 <ldl_factor+0x598>)
 8008b34:	f501 6107 	add.w	r1, r1, #2160	@ 0x870
 8008b38:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.d[5] = work.v[5];
 8008b3c:	4b8d      	ldr	r3, [pc, #564]	@ (8008d74 <ldl_factor+0x598>)
 8008b3e:	f503 6307 	add.w	r3, r3, #2160	@ 0x870
 8008b42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b46:	498b      	ldr	r1, [pc, #556]	@ (8008d74 <ldl_factor+0x598>)
 8008b48:	f501 61f8 	add.w	r1, r1, #1984	@ 0x7c0
 8008b4c:	e941 2302 	strd	r2, r3, [r1, #-8]
  if (work.d[5] < 0)
 8008b50:	4b88      	ldr	r3, [pc, #544]	@ (8008d74 <ldl_factor+0x598>)
 8008b52:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8008b56:	ed13 7b02 	vldr	d7, [r3, #-8]
 8008b5a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b62:	d508      	bpl.n	8008b76 <ldl_factor+0x39a>
    work.d[5] = cvxgen_settings.kkt_reg;
 8008b64:	4b84      	ldr	r3, [pc, #528]	@ (8008d78 <ldl_factor+0x59c>)
 8008b66:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008b6a:	4982      	ldr	r1, [pc, #520]	@ (8008d74 <ldl_factor+0x598>)
 8008b6c:	f501 61f8 	add.w	r1, r1, #1984	@ 0x7c0
 8008b70:	e941 2302 	strd	r2, r3, [r1, #-8]
 8008b74:	e00e      	b.n	8008b94 <ldl_factor+0x3b8>
  else
    work.d[5] += cvxgen_settings.kkt_reg;
 8008b76:	4b7f      	ldr	r3, [pc, #508]	@ (8008d74 <ldl_factor+0x598>)
 8008b78:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8008b7c:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008b80:	4b7d      	ldr	r3, [pc, #500]	@ (8008d78 <ldl_factor+0x59c>)
 8008b82:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8008b86:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008b8a:	4b7a      	ldr	r3, [pc, #488]	@ (8008d74 <ldl_factor+0x598>)
 8008b8c:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8008b90:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.d_inv[5] = 1/work.d[5];
 8008b94:	4b77      	ldr	r3, [pc, #476]	@ (8008d74 <ldl_factor+0x598>)
 8008b96:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8008b9a:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008b9e:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8008ba2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008ba6:	4b73      	ldr	r3, [pc, #460]	@ (8008d74 <ldl_factor+0x598>)
 8008ba8:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8008bac:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.L[7] = (work.KKT[11])*work.d_inv[5];
 8008bb0:	4b70      	ldr	r3, [pc, #448]	@ (8008d74 <ldl_factor+0x598>)
 8008bb2:	f503 63b2 	add.w	r3, r3, #1424	@ 0x590
 8008bb6:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008bba:	4b6e      	ldr	r3, [pc, #440]	@ (8008d74 <ldl_factor+0x598>)
 8008bbc:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8008bc0:	ed13 7b02 	vldr	d7, [r3, #-8]
 8008bc4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008bc8:	4b6a      	ldr	r3, [pc, #424]	@ (8008d74 <ldl_factor+0x598>)
 8008bca:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 8008bce:	ed83 7b00 	vstr	d7, [r3]
  work.v[6] = work.KKT[12];
 8008bd2:	4b68      	ldr	r3, [pc, #416]	@ (8008d74 <ldl_factor+0x598>)
 8008bd4:	f503 63b2 	add.w	r3, r3, #1424	@ 0x590
 8008bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bdc:	4965      	ldr	r1, [pc, #404]	@ (8008d74 <ldl_factor+0x598>)
 8008bde:	f501 6107 	add.w	r1, r1, #2160	@ 0x870
 8008be2:	e9c1 2300 	strd	r2, r3, [r1]
  work.d[6] = work.v[6];
 8008be6:	4b63      	ldr	r3, [pc, #396]	@ (8008d74 <ldl_factor+0x598>)
 8008be8:	f503 6307 	add.w	r3, r3, #2160	@ 0x870
 8008bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf0:	4960      	ldr	r1, [pc, #384]	@ (8008d74 <ldl_factor+0x598>)
 8008bf2:	f501 61f8 	add.w	r1, r1, #1984	@ 0x7c0
 8008bf6:	e9c1 2300 	strd	r2, r3, [r1]
  if (work.d[6] < 0)
 8008bfa:	4b5e      	ldr	r3, [pc, #376]	@ (8008d74 <ldl_factor+0x598>)
 8008bfc:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8008c00:	ed93 7b00 	vldr	d7, [r3]
 8008c04:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c0c:	d508      	bpl.n	8008c20 <ldl_factor+0x444>
    work.d[6] = cvxgen_settings.kkt_reg;
 8008c0e:	4b5a      	ldr	r3, [pc, #360]	@ (8008d78 <ldl_factor+0x59c>)
 8008c10:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008c14:	4957      	ldr	r1, [pc, #348]	@ (8008d74 <ldl_factor+0x598>)
 8008c16:	f501 61f8 	add.w	r1, r1, #1984	@ 0x7c0
 8008c1a:	e9c1 2300 	strd	r2, r3, [r1]
 8008c1e:	e00e      	b.n	8008c3e <ldl_factor+0x462>
  else
    work.d[6] += cvxgen_settings.kkt_reg;
 8008c20:	4b54      	ldr	r3, [pc, #336]	@ (8008d74 <ldl_factor+0x598>)
 8008c22:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8008c26:	ed93 6b00 	vldr	d6, [r3]
 8008c2a:	4b53      	ldr	r3, [pc, #332]	@ (8008d78 <ldl_factor+0x59c>)
 8008c2c:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8008c30:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008c34:	4b4f      	ldr	r3, [pc, #316]	@ (8008d74 <ldl_factor+0x598>)
 8008c36:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8008c3a:	ed83 7b00 	vstr	d7, [r3]
  work.d_inv[6] = 1/work.d[6];
 8008c3e:	4b4d      	ldr	r3, [pc, #308]	@ (8008d74 <ldl_factor+0x598>)
 8008c40:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8008c44:	ed93 6b00 	vldr	d6, [r3]
 8008c48:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8008c4c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008c50:	4b48      	ldr	r3, [pc, #288]	@ (8008d74 <ldl_factor+0x598>)
 8008c52:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8008c56:	ed83 7b00 	vstr	d7, [r3]
  work.L[11] = (work.KKT[13])*work.d_inv[6];
 8008c5a:	4b46      	ldr	r3, [pc, #280]	@ (8008d74 <ldl_factor+0x598>)
 8008c5c:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 8008c60:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008c64:	4b43      	ldr	r3, [pc, #268]	@ (8008d74 <ldl_factor+0x598>)
 8008c66:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8008c6a:	ed93 7b00 	vldr	d7, [r3]
 8008c6e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008c72:	4b40      	ldr	r3, [pc, #256]	@ (8008d74 <ldl_factor+0x598>)
 8008c74:	f503 63e2 	add.w	r3, r3, #1808	@ 0x710
 8008c78:	ed83 7b00 	vstr	d7, [r3]
  work.v[7] = work.KKT[14];
 8008c7c:	4b3d      	ldr	r3, [pc, #244]	@ (8008d74 <ldl_factor+0x598>)
 8008c7e:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 8008c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c86:	493b      	ldr	r1, [pc, #236]	@ (8008d74 <ldl_factor+0x598>)
 8008c88:	f501 6108 	add.w	r1, r1, #2176	@ 0x880
 8008c8c:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.d[7] = work.v[7];
 8008c90:	4b38      	ldr	r3, [pc, #224]	@ (8008d74 <ldl_factor+0x598>)
 8008c92:	f503 6308 	add.w	r3, r3, #2176	@ 0x880
 8008c96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c9a:	4936      	ldr	r1, [pc, #216]	@ (8008d74 <ldl_factor+0x598>)
 8008c9c:	f501 61fa 	add.w	r1, r1, #2000	@ 0x7d0
 8008ca0:	e941 2302 	strd	r2, r3, [r1, #-8]
  if (work.d[7] < 0)
 8008ca4:	4b33      	ldr	r3, [pc, #204]	@ (8008d74 <ldl_factor+0x598>)
 8008ca6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8008caa:	ed13 7b02 	vldr	d7, [r3, #-8]
 8008cae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cb6:	d508      	bpl.n	8008cca <ldl_factor+0x4ee>
    work.d[7] = cvxgen_settings.kkt_reg;
 8008cb8:	4b2f      	ldr	r3, [pc, #188]	@ (8008d78 <ldl_factor+0x59c>)
 8008cba:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008cbe:	492d      	ldr	r1, [pc, #180]	@ (8008d74 <ldl_factor+0x598>)
 8008cc0:	f501 61fa 	add.w	r1, r1, #2000	@ 0x7d0
 8008cc4:	e941 2302 	strd	r2, r3, [r1, #-8]
 8008cc8:	e00e      	b.n	8008ce8 <ldl_factor+0x50c>
  else
    work.d[7] += cvxgen_settings.kkt_reg;
 8008cca:	4b2a      	ldr	r3, [pc, #168]	@ (8008d74 <ldl_factor+0x598>)
 8008ccc:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8008cd0:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008cd4:	4b28      	ldr	r3, [pc, #160]	@ (8008d78 <ldl_factor+0x59c>)
 8008cd6:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8008cda:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008cde:	4b25      	ldr	r3, [pc, #148]	@ (8008d74 <ldl_factor+0x598>)
 8008ce0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8008ce4:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.d_inv[7] = 1/work.d[7];
 8008ce8:	4b22      	ldr	r3, [pc, #136]	@ (8008d74 <ldl_factor+0x598>)
 8008cea:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8008cee:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008cf2:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8008cf6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8008d74 <ldl_factor+0x598>)
 8008cfc:	f503 6313 	add.w	r3, r3, #2352	@ 0x930
 8008d00:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.L[16] = (work.KKT[15])*work.d_inv[7];
 8008d04:	4b1b      	ldr	r3, [pc, #108]	@ (8008d74 <ldl_factor+0x598>)
 8008d06:	f503 63b6 	add.w	r3, r3, #1456	@ 0x5b0
 8008d0a:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008d0e:	4b19      	ldr	r3, [pc, #100]	@ (8008d74 <ldl_factor+0x598>)
 8008d10:	f503 6313 	add.w	r3, r3, #2352	@ 0x930
 8008d14:	ed13 7b02 	vldr	d7, [r3, #-8]
 8008d18:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008d1c:	4b15      	ldr	r3, [pc, #84]	@ (8008d74 <ldl_factor+0x598>)
 8008d1e:	f503 63e8 	add.w	r3, r3, #1856	@ 0x740
 8008d22:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[8] = work.KKT[16];
 8008d26:	4b13      	ldr	r3, [pc, #76]	@ (8008d74 <ldl_factor+0x598>)
 8008d28:	f503 63b6 	add.w	r3, r3, #1456	@ 0x5b0
 8008d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d30:	4910      	ldr	r1, [pc, #64]	@ (8008d74 <ldl_factor+0x598>)
 8008d32:	f501 6108 	add.w	r1, r1, #2176	@ 0x880
 8008d36:	e9c1 2300 	strd	r2, r3, [r1]
  work.d[8] = work.v[8];
 8008d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8008d74 <ldl_factor+0x598>)
 8008d3c:	f503 6308 	add.w	r3, r3, #2176	@ 0x880
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	490b      	ldr	r1, [pc, #44]	@ (8008d74 <ldl_factor+0x598>)
 8008d46:	f501 61fa 	add.w	r1, r1, #2000	@ 0x7d0
 8008d4a:	e9c1 2300 	strd	r2, r3, [r1]
  if (work.d[8] < 0)
 8008d4e:	4b09      	ldr	r3, [pc, #36]	@ (8008d74 <ldl_factor+0x598>)
 8008d50:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8008d54:	ed93 7b00 	vldr	d7, [r3]
 8008d58:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d60:	d50c      	bpl.n	8008d7c <ldl_factor+0x5a0>
    work.d[8] = cvxgen_settings.kkt_reg;
 8008d62:	4b05      	ldr	r3, [pc, #20]	@ (8008d78 <ldl_factor+0x59c>)
 8008d64:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008d68:	4902      	ldr	r1, [pc, #8]	@ (8008d74 <ldl_factor+0x598>)
 8008d6a:	f501 61fa 	add.w	r1, r1, #2000	@ 0x7d0
 8008d6e:	e9c1 2300 	strd	r2, r3, [r1]
 8008d72:	e012      	b.n	8008d9a <ldl_factor+0x5be>
 8008d74:	24007070 	.word	0x24007070
 8008d78:	24007a40 	.word	0x24007a40
  else
    work.d[8] += cvxgen_settings.kkt_reg;
 8008d7c:	4bb0      	ldr	r3, [pc, #704]	@ (8009040 <ldl_factor+0x864>)
 8008d7e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8008d82:	ed93 6b00 	vldr	d6, [r3]
 8008d86:	4baf      	ldr	r3, [pc, #700]	@ (8009044 <ldl_factor+0x868>)
 8008d88:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8008d8c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008d90:	4bab      	ldr	r3, [pc, #684]	@ (8009040 <ldl_factor+0x864>)
 8008d92:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8008d96:	ed83 7b00 	vstr	d7, [r3]
  work.d_inv[8] = 1/work.d[8];
 8008d9a:	4ba9      	ldr	r3, [pc, #676]	@ (8009040 <ldl_factor+0x864>)
 8008d9c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8008da0:	ed93 6b00 	vldr	d6, [r3]
 8008da4:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8008da8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008dac:	4ba4      	ldr	r3, [pc, #656]	@ (8009040 <ldl_factor+0x864>)
 8008dae:	f503 6313 	add.w	r3, r3, #2352	@ 0x930
 8008db2:	ed83 7b00 	vstr	d7, [r3]
  work.L[22] = (work.KKT[17])*work.d_inv[8];
 8008db6:	4ba2      	ldr	r3, [pc, #648]	@ (8009040 <ldl_factor+0x864>)
 8008db8:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 8008dbc:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008dc0:	4b9f      	ldr	r3, [pc, #636]	@ (8009040 <ldl_factor+0x864>)
 8008dc2:	f503 6313 	add.w	r3, r3, #2352	@ 0x930
 8008dc6:	ed93 7b00 	vldr	d7, [r3]
 8008dca:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008dce:	4b9c      	ldr	r3, [pc, #624]	@ (8009040 <ldl_factor+0x864>)
 8008dd0:	f503 63ee 	add.w	r3, r3, #1904	@ 0x770
 8008dd4:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[0] = work.L[0]*work.d[0];
 8008dd8:	4b99      	ldr	r3, [pc, #612]	@ (8009040 <ldl_factor+0x864>)
 8008dda:	f503 63d8 	add.w	r3, r3, #1728	@ 0x6c0
 8008dde:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008de2:	4b97      	ldr	r3, [pc, #604]	@ (8009040 <ldl_factor+0x864>)
 8008de4:	f503 63f2 	add.w	r3, r3, #1936	@ 0x790
 8008de8:	ed93 7b00 	vldr	d7, [r3]
 8008dec:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008df0:	4b93      	ldr	r3, [pc, #588]	@ (8009040 <ldl_factor+0x864>)
 8008df2:	f503 6304 	add.w	r3, r3, #2112	@ 0x840
 8008df6:	ed83 7b00 	vstr	d7, [r3]
  work.v[9] = work.KKT[18]-work.L[0]*work.v[0];
 8008dfa:	4b91      	ldr	r3, [pc, #580]	@ (8009040 <ldl_factor+0x864>)
 8008dfc:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 8008e00:	ed93 6b00 	vldr	d6, [r3]
 8008e04:	4b8e      	ldr	r3, [pc, #568]	@ (8009040 <ldl_factor+0x864>)
 8008e06:	f503 63d8 	add.w	r3, r3, #1728	@ 0x6c0
 8008e0a:	ed13 5b02 	vldr	d5, [r3, #-8]
 8008e0e:	4b8c      	ldr	r3, [pc, #560]	@ (8009040 <ldl_factor+0x864>)
 8008e10:	f503 6304 	add.w	r3, r3, #2112	@ 0x840
 8008e14:	ed93 7b00 	vldr	d7, [r3]
 8008e18:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008e1c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008e20:	4b87      	ldr	r3, [pc, #540]	@ (8009040 <ldl_factor+0x864>)
 8008e22:	f503 6309 	add.w	r3, r3, #2192	@ 0x890
 8008e26:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.d[9] = work.v[9];
 8008e2a:	4b85      	ldr	r3, [pc, #532]	@ (8009040 <ldl_factor+0x864>)
 8008e2c:	f503 6309 	add.w	r3, r3, #2192	@ 0x890
 8008e30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e34:	4982      	ldr	r1, [pc, #520]	@ (8009040 <ldl_factor+0x864>)
 8008e36:	f501 61fc 	add.w	r1, r1, #2016	@ 0x7e0
 8008e3a:	e941 2302 	strd	r2, r3, [r1, #-8]
  if (work.d[9] > 0)
 8008e3e:	4b80      	ldr	r3, [pc, #512]	@ (8009040 <ldl_factor+0x864>)
 8008e40:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8008e44:	ed13 7b02 	vldr	d7, [r3, #-8]
 8008e48:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e50:	dd0a      	ble.n	8008e68 <ldl_factor+0x68c>
    work.d[9] = -cvxgen_settings.kkt_reg;
 8008e52:	4b7c      	ldr	r3, [pc, #496]	@ (8009044 <ldl_factor+0x868>)
 8008e54:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8008e58:	eeb1 7b47 	vneg.f64	d7, d7
 8008e5c:	4b78      	ldr	r3, [pc, #480]	@ (8009040 <ldl_factor+0x864>)
 8008e5e:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8008e62:	ed03 7b02 	vstr	d7, [r3, #-8]
 8008e66:	e00e      	b.n	8008e86 <ldl_factor+0x6aa>
  else
    work.d[9] -= cvxgen_settings.kkt_reg;
 8008e68:	4b75      	ldr	r3, [pc, #468]	@ (8009040 <ldl_factor+0x864>)
 8008e6a:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8008e6e:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008e72:	4b74      	ldr	r3, [pc, #464]	@ (8009044 <ldl_factor+0x868>)
 8008e74:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8008e78:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008e7c:	4b70      	ldr	r3, [pc, #448]	@ (8009040 <ldl_factor+0x864>)
 8008e7e:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8008e82:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.d_inv[9] = 1/work.d[9];
 8008e86:	4b6e      	ldr	r3, [pc, #440]	@ (8009040 <ldl_factor+0x864>)
 8008e88:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8008e8c:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008e90:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8008e94:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008e98:	4b69      	ldr	r3, [pc, #420]	@ (8009040 <ldl_factor+0x864>)
 8008e9a:	f503 6314 	add.w	r3, r3, #2368	@ 0x940
 8008e9e:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.L[5] = (work.KKT[19])*work.d_inv[9];
 8008ea2:	4b67      	ldr	r3, [pc, #412]	@ (8009040 <ldl_factor+0x864>)
 8008ea4:	f503 63ba 	add.w	r3, r3, #1488	@ 0x5d0
 8008ea8:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008eac:	4b64      	ldr	r3, [pc, #400]	@ (8009040 <ldl_factor+0x864>)
 8008eae:	f503 6314 	add.w	r3, r3, #2368	@ 0x940
 8008eb2:	ed13 7b02 	vldr	d7, [r3, #-8]
 8008eb6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008eba:	4b61      	ldr	r3, [pc, #388]	@ (8009040 <ldl_factor+0x864>)
 8008ebc:	f503 63dc 	add.w	r3, r3, #1760	@ 0x6e0
 8008ec0:	ed83 7b00 	vstr	d7, [r3]
  work.v[1] = work.L[1]*work.d[1];
 8008ec4:	4b5e      	ldr	r3, [pc, #376]	@ (8009040 <ldl_factor+0x864>)
 8008ec6:	f503 63d8 	add.w	r3, r3, #1728	@ 0x6c0
 8008eca:	ed93 6b00 	vldr	d6, [r3]
 8008ece:	4b5c      	ldr	r3, [pc, #368]	@ (8009040 <ldl_factor+0x864>)
 8008ed0:	f503 63f4 	add.w	r3, r3, #1952	@ 0x7a0
 8008ed4:	ed13 7b02 	vldr	d7, [r3, #-8]
 8008ed8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008edc:	4b58      	ldr	r3, [pc, #352]	@ (8009040 <ldl_factor+0x864>)
 8008ede:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 8008ee2:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[10] = work.KKT[20]-work.L[1]*work.v[1];
 8008ee6:	4b56      	ldr	r3, [pc, #344]	@ (8009040 <ldl_factor+0x864>)
 8008ee8:	f503 63ba 	add.w	r3, r3, #1488	@ 0x5d0
 8008eec:	ed93 6b00 	vldr	d6, [r3]
 8008ef0:	4b53      	ldr	r3, [pc, #332]	@ (8009040 <ldl_factor+0x864>)
 8008ef2:	f503 63d8 	add.w	r3, r3, #1728	@ 0x6c0
 8008ef6:	ed93 5b00 	vldr	d5, [r3]
 8008efa:	4b51      	ldr	r3, [pc, #324]	@ (8009040 <ldl_factor+0x864>)
 8008efc:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 8008f00:	ed13 7b02 	vldr	d7, [r3, #-8]
 8008f04:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008f08:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008f0c:	4b4c      	ldr	r3, [pc, #304]	@ (8009040 <ldl_factor+0x864>)
 8008f0e:	f503 6309 	add.w	r3, r3, #2192	@ 0x890
 8008f12:	ed83 7b00 	vstr	d7, [r3]
  work.d[10] = work.v[10];
 8008f16:	4b4a      	ldr	r3, [pc, #296]	@ (8009040 <ldl_factor+0x864>)
 8008f18:	f503 6309 	add.w	r3, r3, #2192	@ 0x890
 8008f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f20:	4947      	ldr	r1, [pc, #284]	@ (8009040 <ldl_factor+0x864>)
 8008f22:	f501 61fc 	add.w	r1, r1, #2016	@ 0x7e0
 8008f26:	e9c1 2300 	strd	r2, r3, [r1]
  if (work.d[10] > 0)
 8008f2a:	4b45      	ldr	r3, [pc, #276]	@ (8009040 <ldl_factor+0x864>)
 8008f2c:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8008f30:	ed93 7b00 	vldr	d7, [r3]
 8008f34:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f3c:	dd0a      	ble.n	8008f54 <ldl_factor+0x778>
    work.d[10] = -cvxgen_settings.kkt_reg;
 8008f3e:	4b41      	ldr	r3, [pc, #260]	@ (8009044 <ldl_factor+0x868>)
 8008f40:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8008f44:	eeb1 7b47 	vneg.f64	d7, d7
 8008f48:	4b3d      	ldr	r3, [pc, #244]	@ (8009040 <ldl_factor+0x864>)
 8008f4a:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8008f4e:	ed83 7b00 	vstr	d7, [r3]
 8008f52:	e00e      	b.n	8008f72 <ldl_factor+0x796>
  else
    work.d[10] -= cvxgen_settings.kkt_reg;
 8008f54:	4b3a      	ldr	r3, [pc, #232]	@ (8009040 <ldl_factor+0x864>)
 8008f56:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8008f5a:	ed93 6b00 	vldr	d6, [r3]
 8008f5e:	4b39      	ldr	r3, [pc, #228]	@ (8009044 <ldl_factor+0x868>)
 8008f60:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8008f64:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008f68:	4b35      	ldr	r3, [pc, #212]	@ (8009040 <ldl_factor+0x864>)
 8008f6a:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8008f6e:	ed83 7b00 	vstr	d7, [r3]
  work.d_inv[10] = 1/work.d[10];
 8008f72:	4b33      	ldr	r3, [pc, #204]	@ (8009040 <ldl_factor+0x864>)
 8008f74:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8008f78:	ed93 6b00 	vldr	d6, [r3]
 8008f7c:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8008f80:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008f84:	4b2e      	ldr	r3, [pc, #184]	@ (8009040 <ldl_factor+0x864>)
 8008f86:	f503 6314 	add.w	r3, r3, #2368	@ 0x940
 8008f8a:	ed83 7b00 	vstr	d7, [r3]
  work.L[8] = (work.KKT[21])*work.d_inv[10];
 8008f8e:	4b2c      	ldr	r3, [pc, #176]	@ (8009040 <ldl_factor+0x864>)
 8008f90:	f503 63bc 	add.w	r3, r3, #1504	@ 0x5e0
 8008f94:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008f98:	4b29      	ldr	r3, [pc, #164]	@ (8009040 <ldl_factor+0x864>)
 8008f9a:	f503 6314 	add.w	r3, r3, #2368	@ 0x940
 8008f9e:	ed93 7b00 	vldr	d7, [r3]
 8008fa2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008fa6:	4b26      	ldr	r3, [pc, #152]	@ (8009040 <ldl_factor+0x864>)
 8008fa8:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8008fac:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[2] = work.L[2]*work.d[2];
 8008fb0:	4b23      	ldr	r3, [pc, #140]	@ (8009040 <ldl_factor+0x864>)
 8008fb2:	f503 63da 	add.w	r3, r3, #1744	@ 0x6d0
 8008fb6:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008fba:	4b21      	ldr	r3, [pc, #132]	@ (8009040 <ldl_factor+0x864>)
 8008fbc:	f503 63f4 	add.w	r3, r3, #1952	@ 0x7a0
 8008fc0:	ed93 7b00 	vldr	d7, [r3]
 8008fc4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8009040 <ldl_factor+0x864>)
 8008fca:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 8008fce:	ed83 7b00 	vstr	d7, [r3]
  work.v[11] = work.KKT[22]-work.L[2]*work.v[2];
 8008fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8009040 <ldl_factor+0x864>)
 8008fd4:	f503 63bc 	add.w	r3, r3, #1504	@ 0x5e0
 8008fd8:	ed93 6b00 	vldr	d6, [r3]
 8008fdc:	4b18      	ldr	r3, [pc, #96]	@ (8009040 <ldl_factor+0x864>)
 8008fde:	f503 63da 	add.w	r3, r3, #1744	@ 0x6d0
 8008fe2:	ed13 5b02 	vldr	d5, [r3, #-8]
 8008fe6:	4b16      	ldr	r3, [pc, #88]	@ (8009040 <ldl_factor+0x864>)
 8008fe8:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 8008fec:	ed93 7b00 	vldr	d7, [r3]
 8008ff0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008ff4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008ff8:	4b11      	ldr	r3, [pc, #68]	@ (8009040 <ldl_factor+0x864>)
 8008ffa:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8008ffe:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.d[11] = work.v[11];
 8009002:	4b0f      	ldr	r3, [pc, #60]	@ (8009040 <ldl_factor+0x864>)
 8009004:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8009008:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800900c:	490c      	ldr	r1, [pc, #48]	@ (8009040 <ldl_factor+0x864>)
 800900e:	f501 61fe 	add.w	r1, r1, #2032	@ 0x7f0
 8009012:	e941 2302 	strd	r2, r3, [r1, #-8]
  if (work.d[11] > 0)
 8009016:	4b0a      	ldr	r3, [pc, #40]	@ (8009040 <ldl_factor+0x864>)
 8009018:	f503 63fe 	add.w	r3, r3, #2032	@ 0x7f0
 800901c:	ed13 7b02 	vldr	d7, [r3, #-8]
 8009020:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009028:	dd0e      	ble.n	8009048 <ldl_factor+0x86c>
    work.d[11] = -cvxgen_settings.kkt_reg;
 800902a:	4b06      	ldr	r3, [pc, #24]	@ (8009044 <ldl_factor+0x868>)
 800902c:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8009030:	eeb1 7b47 	vneg.f64	d7, d7
 8009034:	4b02      	ldr	r3, [pc, #8]	@ (8009040 <ldl_factor+0x864>)
 8009036:	f503 63fe 	add.w	r3, r3, #2032	@ 0x7f0
 800903a:	ed03 7b02 	vstr	d7, [r3, #-8]
 800903e:	e012      	b.n	8009066 <ldl_factor+0x88a>
 8009040:	24007070 	.word	0x24007070
 8009044:	24007a40 	.word	0x24007a40
  else
    work.d[11] -= cvxgen_settings.kkt_reg;
 8009048:	4bbf      	ldr	r3, [pc, #764]	@ (8009348 <ldl_factor+0xb6c>)
 800904a:	f503 63fe 	add.w	r3, r3, #2032	@ 0x7f0
 800904e:	ed13 6b02 	vldr	d6, [r3, #-8]
 8009052:	4bbe      	ldr	r3, [pc, #760]	@ (800934c <ldl_factor+0xb70>)
 8009054:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8009058:	ee36 7b47 	vsub.f64	d7, d6, d7
 800905c:	4bba      	ldr	r3, [pc, #744]	@ (8009348 <ldl_factor+0xb6c>)
 800905e:	f503 63fe 	add.w	r3, r3, #2032	@ 0x7f0
 8009062:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.d_inv[11] = 1/work.d[11];
 8009066:	4bb8      	ldr	r3, [pc, #736]	@ (8009348 <ldl_factor+0xb6c>)
 8009068:	f503 63fe 	add.w	r3, r3, #2032	@ 0x7f0
 800906c:	ed13 6b02 	vldr	d6, [r3, #-8]
 8009070:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8009074:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009078:	4bb3      	ldr	r3, [pc, #716]	@ (8009348 <ldl_factor+0xb6c>)
 800907a:	f503 6315 	add.w	r3, r3, #2384	@ 0x950
 800907e:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.L[12] = (work.KKT[23])*work.d_inv[11];
 8009082:	4bb1      	ldr	r3, [pc, #708]	@ (8009348 <ldl_factor+0xb6c>)
 8009084:	f503 63be 	add.w	r3, r3, #1520	@ 0x5f0
 8009088:	ed13 6b02 	vldr	d6, [r3, #-8]
 800908c:	4bae      	ldr	r3, [pc, #696]	@ (8009348 <ldl_factor+0xb6c>)
 800908e:	f503 6315 	add.w	r3, r3, #2384	@ 0x950
 8009092:	ed13 7b02 	vldr	d7, [r3, #-8]
 8009096:	ee26 7b07 	vmul.f64	d7, d6, d7
 800909a:	4bab      	ldr	r3, [pc, #684]	@ (8009348 <ldl_factor+0xb6c>)
 800909c:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 80090a0:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[3] = work.L[3]*work.d[3];
 80090a4:	4ba8      	ldr	r3, [pc, #672]	@ (8009348 <ldl_factor+0xb6c>)
 80090a6:	f503 63da 	add.w	r3, r3, #1744	@ 0x6d0
 80090aa:	ed93 6b00 	vldr	d6, [r3]
 80090ae:	4ba6      	ldr	r3, [pc, #664]	@ (8009348 <ldl_factor+0xb6c>)
 80090b0:	f503 63f6 	add.w	r3, r3, #1968	@ 0x7b0
 80090b4:	ed13 7b02 	vldr	d7, [r3, #-8]
 80090b8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80090bc:	4ba2      	ldr	r3, [pc, #648]	@ (8009348 <ldl_factor+0xb6c>)
 80090be:	f503 6306 	add.w	r3, r3, #2144	@ 0x860
 80090c2:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[12] = work.KKT[24]-work.L[3]*work.v[3];
 80090c6:	4ba0      	ldr	r3, [pc, #640]	@ (8009348 <ldl_factor+0xb6c>)
 80090c8:	f503 63be 	add.w	r3, r3, #1520	@ 0x5f0
 80090cc:	ed93 6b00 	vldr	d6, [r3]
 80090d0:	4b9d      	ldr	r3, [pc, #628]	@ (8009348 <ldl_factor+0xb6c>)
 80090d2:	f503 63da 	add.w	r3, r3, #1744	@ 0x6d0
 80090d6:	ed93 5b00 	vldr	d5, [r3]
 80090da:	4b9b      	ldr	r3, [pc, #620]	@ (8009348 <ldl_factor+0xb6c>)
 80090dc:	f503 6306 	add.w	r3, r3, #2144	@ 0x860
 80090e0:	ed13 7b02 	vldr	d7, [r3, #-8]
 80090e4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80090e8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80090ec:	4b96      	ldr	r3, [pc, #600]	@ (8009348 <ldl_factor+0xb6c>)
 80090ee:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 80090f2:	ed83 7b00 	vstr	d7, [r3]
  work.d[12] = work.v[12];
 80090f6:	4b94      	ldr	r3, [pc, #592]	@ (8009348 <ldl_factor+0xb6c>)
 80090f8:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 80090fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009100:	4991      	ldr	r1, [pc, #580]	@ (8009348 <ldl_factor+0xb6c>)
 8009102:	f501 61fe 	add.w	r1, r1, #2032	@ 0x7f0
 8009106:	e9c1 2300 	strd	r2, r3, [r1]
  if (work.d[12] > 0)
 800910a:	4b8f      	ldr	r3, [pc, #572]	@ (8009348 <ldl_factor+0xb6c>)
 800910c:	f503 63fe 	add.w	r3, r3, #2032	@ 0x7f0
 8009110:	ed93 7b00 	vldr	d7, [r3]
 8009114:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800911c:	dd0a      	ble.n	8009134 <ldl_factor+0x958>
    work.d[12] = -cvxgen_settings.kkt_reg;
 800911e:	4b8b      	ldr	r3, [pc, #556]	@ (800934c <ldl_factor+0xb70>)
 8009120:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8009124:	eeb1 7b47 	vneg.f64	d7, d7
 8009128:	4b87      	ldr	r3, [pc, #540]	@ (8009348 <ldl_factor+0xb6c>)
 800912a:	f503 63fe 	add.w	r3, r3, #2032	@ 0x7f0
 800912e:	ed83 7b00 	vstr	d7, [r3]
 8009132:	e00e      	b.n	8009152 <ldl_factor+0x976>
  else
    work.d[12] -= cvxgen_settings.kkt_reg;
 8009134:	4b84      	ldr	r3, [pc, #528]	@ (8009348 <ldl_factor+0xb6c>)
 8009136:	f503 63fe 	add.w	r3, r3, #2032	@ 0x7f0
 800913a:	ed93 6b00 	vldr	d6, [r3]
 800913e:	4b83      	ldr	r3, [pc, #524]	@ (800934c <ldl_factor+0xb70>)
 8009140:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8009144:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009148:	4b7f      	ldr	r3, [pc, #508]	@ (8009348 <ldl_factor+0xb6c>)
 800914a:	f503 63fe 	add.w	r3, r3, #2032	@ 0x7f0
 800914e:	ed83 7b00 	vstr	d7, [r3]
  work.d_inv[12] = 1/work.d[12];
 8009152:	4b7d      	ldr	r3, [pc, #500]	@ (8009348 <ldl_factor+0xb6c>)
 8009154:	f503 63fe 	add.w	r3, r3, #2032	@ 0x7f0
 8009158:	ed93 6b00 	vldr	d6, [r3]
 800915c:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8009160:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009164:	4b78      	ldr	r3, [pc, #480]	@ (8009348 <ldl_factor+0xb6c>)
 8009166:	f503 6315 	add.w	r3, r3, #2384	@ 0x950
 800916a:	ed83 7b00 	vstr	d7, [r3]
  work.L[17] = (work.KKT[25])*work.d_inv[12];
 800916e:	4b76      	ldr	r3, [pc, #472]	@ (8009348 <ldl_factor+0xb6c>)
 8009170:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8009174:	ed13 6b02 	vldr	d6, [r3, #-8]
 8009178:	4b73      	ldr	r3, [pc, #460]	@ (8009348 <ldl_factor+0xb6c>)
 800917a:	f503 6315 	add.w	r3, r3, #2384	@ 0x950
 800917e:	ed93 7b00 	vldr	d7, [r3]
 8009182:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009186:	4b70      	ldr	r3, [pc, #448]	@ (8009348 <ldl_factor+0xb6c>)
 8009188:	f503 63e8 	add.w	r3, r3, #1856	@ 0x740
 800918c:	ed83 7b00 	vstr	d7, [r3]
  work.v[4] = work.L[4]*work.d[4];
 8009190:	4b6d      	ldr	r3, [pc, #436]	@ (8009348 <ldl_factor+0xb6c>)
 8009192:	f503 63dc 	add.w	r3, r3, #1760	@ 0x6e0
 8009196:	ed13 6b02 	vldr	d6, [r3, #-8]
 800919a:	4b6b      	ldr	r3, [pc, #428]	@ (8009348 <ldl_factor+0xb6c>)
 800919c:	f503 63f6 	add.w	r3, r3, #1968	@ 0x7b0
 80091a0:	ed93 7b00 	vldr	d7, [r3]
 80091a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80091a8:	4b67      	ldr	r3, [pc, #412]	@ (8009348 <ldl_factor+0xb6c>)
 80091aa:	f503 6306 	add.w	r3, r3, #2144	@ 0x860
 80091ae:	ed83 7b00 	vstr	d7, [r3]
  work.v[13] = work.KKT[26]-work.L[4]*work.v[4];
 80091b2:	4b65      	ldr	r3, [pc, #404]	@ (8009348 <ldl_factor+0xb6c>)
 80091b4:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80091b8:	ed93 6b00 	vldr	d6, [r3]
 80091bc:	4b62      	ldr	r3, [pc, #392]	@ (8009348 <ldl_factor+0xb6c>)
 80091be:	f503 63dc 	add.w	r3, r3, #1760	@ 0x6e0
 80091c2:	ed13 5b02 	vldr	d5, [r3, #-8]
 80091c6:	4b60      	ldr	r3, [pc, #384]	@ (8009348 <ldl_factor+0xb6c>)
 80091c8:	f503 6306 	add.w	r3, r3, #2144	@ 0x860
 80091cc:	ed93 7b00 	vldr	d7, [r3]
 80091d0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80091d4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80091d8:	4b5b      	ldr	r3, [pc, #364]	@ (8009348 <ldl_factor+0xb6c>)
 80091da:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 80091de:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.d[13] = work.v[13];
 80091e2:	4b59      	ldr	r3, [pc, #356]	@ (8009348 <ldl_factor+0xb6c>)
 80091e4:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 80091e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80091ec:	4956      	ldr	r1, [pc, #344]	@ (8009348 <ldl_factor+0xb6c>)
 80091ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80091f2:	e941 2302 	strd	r2, r3, [r1, #-8]
  if (work.d[13] > 0)
 80091f6:	4b54      	ldr	r3, [pc, #336]	@ (8009348 <ldl_factor+0xb6c>)
 80091f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091fc:	ed13 7b02 	vldr	d7, [r3, #-8]
 8009200:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009208:	dd0a      	ble.n	8009220 <ldl_factor+0xa44>
    work.d[13] = -cvxgen_settings.kkt_reg;
 800920a:	4b50      	ldr	r3, [pc, #320]	@ (800934c <ldl_factor+0xb70>)
 800920c:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8009210:	eeb1 7b47 	vneg.f64	d7, d7
 8009214:	4b4c      	ldr	r3, [pc, #304]	@ (8009348 <ldl_factor+0xb6c>)
 8009216:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800921a:	ed03 7b02 	vstr	d7, [r3, #-8]
 800921e:	e00e      	b.n	800923e <ldl_factor+0xa62>
  else
    work.d[13] -= cvxgen_settings.kkt_reg;
 8009220:	4b49      	ldr	r3, [pc, #292]	@ (8009348 <ldl_factor+0xb6c>)
 8009222:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009226:	ed13 6b02 	vldr	d6, [r3, #-8]
 800922a:	4b48      	ldr	r3, [pc, #288]	@ (800934c <ldl_factor+0xb70>)
 800922c:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8009230:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009234:	4b44      	ldr	r3, [pc, #272]	@ (8009348 <ldl_factor+0xb6c>)
 8009236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800923a:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.d_inv[13] = 1/work.d[13];
 800923e:	4b42      	ldr	r3, [pc, #264]	@ (8009348 <ldl_factor+0xb6c>)
 8009240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009244:	ed13 6b02 	vldr	d6, [r3, #-8]
 8009248:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 800924c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009250:	4b3d      	ldr	r3, [pc, #244]	@ (8009348 <ldl_factor+0xb6c>)
 8009252:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 8009256:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.L[6] = (work.KKT[27])*work.d_inv[13];
 800925a:	4b3b      	ldr	r3, [pc, #236]	@ (8009348 <ldl_factor+0xb6c>)
 800925c:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 8009260:	ed13 6b02 	vldr	d6, [r3, #-8]
 8009264:	4b38      	ldr	r3, [pc, #224]	@ (8009348 <ldl_factor+0xb6c>)
 8009266:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 800926a:	ed13 7b02 	vldr	d7, [r3, #-8]
 800926e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009272:	4b35      	ldr	r3, [pc, #212]	@ (8009348 <ldl_factor+0xb6c>)
 8009274:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 8009278:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[9] = work.L[5]*work.d[9];
 800927c:	4b32      	ldr	r3, [pc, #200]	@ (8009348 <ldl_factor+0xb6c>)
 800927e:	f503 63dc 	add.w	r3, r3, #1760	@ 0x6e0
 8009282:	ed93 6b00 	vldr	d6, [r3]
 8009286:	4b30      	ldr	r3, [pc, #192]	@ (8009348 <ldl_factor+0xb6c>)
 8009288:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800928c:	ed13 7b02 	vldr	d7, [r3, #-8]
 8009290:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009294:	4b2c      	ldr	r3, [pc, #176]	@ (8009348 <ldl_factor+0xb6c>)
 8009296:	f503 6309 	add.w	r3, r3, #2192	@ 0x890
 800929a:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[13] = work.L[6]*work.d[13];
 800929e:	4b2a      	ldr	r3, [pc, #168]	@ (8009348 <ldl_factor+0xb6c>)
 80092a0:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 80092a4:	ed13 6b02 	vldr	d6, [r3, #-8]
 80092a8:	4b27      	ldr	r3, [pc, #156]	@ (8009348 <ldl_factor+0xb6c>)
 80092aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092ae:	ed13 7b02 	vldr	d7, [r3, #-8]
 80092b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80092b6:	4b24      	ldr	r3, [pc, #144]	@ (8009348 <ldl_factor+0xb6c>)
 80092b8:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 80092bc:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[14] = work.KKT[28]-work.L[5]*work.v[9]-work.L[6]*work.v[13];
 80092c0:	4b21      	ldr	r3, [pc, #132]	@ (8009348 <ldl_factor+0xb6c>)
 80092c2:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 80092c6:	ed93 6b00 	vldr	d6, [r3]
 80092ca:	4b1f      	ldr	r3, [pc, #124]	@ (8009348 <ldl_factor+0xb6c>)
 80092cc:	f503 63dc 	add.w	r3, r3, #1760	@ 0x6e0
 80092d0:	ed93 5b00 	vldr	d5, [r3]
 80092d4:	4b1c      	ldr	r3, [pc, #112]	@ (8009348 <ldl_factor+0xb6c>)
 80092d6:	f503 6309 	add.w	r3, r3, #2192	@ 0x890
 80092da:	ed13 7b02 	vldr	d7, [r3, #-8]
 80092de:	ee25 7b07 	vmul.f64	d7, d5, d7
 80092e2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80092e6:	4b18      	ldr	r3, [pc, #96]	@ (8009348 <ldl_factor+0xb6c>)
 80092e8:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 80092ec:	ed13 5b02 	vldr	d5, [r3, #-8]
 80092f0:	4b15      	ldr	r3, [pc, #84]	@ (8009348 <ldl_factor+0xb6c>)
 80092f2:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 80092f6:	ed13 7b02 	vldr	d7, [r3, #-8]
 80092fa:	ee25 7b07 	vmul.f64	d7, d5, d7
 80092fe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009302:	4b11      	ldr	r3, [pc, #68]	@ (8009348 <ldl_factor+0xb6c>)
 8009304:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 8009308:	ed83 7b00 	vstr	d7, [r3]
  work.d[14] = work.v[14];
 800930c:	4b0e      	ldr	r3, [pc, #56]	@ (8009348 <ldl_factor+0xb6c>)
 800930e:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 8009312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009316:	490c      	ldr	r1, [pc, #48]	@ (8009348 <ldl_factor+0xb6c>)
 8009318:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800931c:	e9c1 2300 	strd	r2, r3, [r1]
  if (work.d[14] < 0)
 8009320:	4b09      	ldr	r3, [pc, #36]	@ (8009348 <ldl_factor+0xb6c>)
 8009322:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009326:	ed93 7b00 	vldr	d7, [r3]
 800932a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800932e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009332:	d50d      	bpl.n	8009350 <ldl_factor+0xb74>
    work.d[14] = cvxgen_settings.kkt_reg;
 8009334:	4b05      	ldr	r3, [pc, #20]	@ (800934c <ldl_factor+0xb70>)
 8009336:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800933a:	4903      	ldr	r1, [pc, #12]	@ (8009348 <ldl_factor+0xb6c>)
 800933c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009340:	e9c1 2300 	strd	r2, r3, [r1]
 8009344:	e013      	b.n	800936e <ldl_factor+0xb92>
 8009346:	bf00      	nop
 8009348:	24007070 	.word	0x24007070
 800934c:	24007a40 	.word	0x24007a40
  else
    work.d[14] += cvxgen_settings.kkt_reg;
 8009350:	4bad      	ldr	r3, [pc, #692]	@ (8009608 <ldl_factor+0xe2c>)
 8009352:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009356:	ed93 6b00 	vldr	d6, [r3]
 800935a:	4bac      	ldr	r3, [pc, #688]	@ (800960c <ldl_factor+0xe30>)
 800935c:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8009360:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009364:	4ba8      	ldr	r3, [pc, #672]	@ (8009608 <ldl_factor+0xe2c>)
 8009366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800936a:	ed83 7b00 	vstr	d7, [r3]
  work.d_inv[14] = 1/work.d[14];
 800936e:	4ba6      	ldr	r3, [pc, #664]	@ (8009608 <ldl_factor+0xe2c>)
 8009370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009374:	ed93 6b00 	vldr	d6, [r3]
 8009378:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 800937c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009380:	4ba1      	ldr	r3, [pc, #644]	@ (8009608 <ldl_factor+0xe2c>)
 8009382:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 8009386:	ed83 7b00 	vstr	d7, [r3]
  work.L[9] = (work.KKT[29])*work.d_inv[14];
 800938a:	4b9f      	ldr	r3, [pc, #636]	@ (8009608 <ldl_factor+0xe2c>)
 800938c:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 8009390:	ed13 6b02 	vldr	d6, [r3, #-8]
 8009394:	4b9c      	ldr	r3, [pc, #624]	@ (8009608 <ldl_factor+0xe2c>)
 8009396:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 800939a:	ed93 7b00 	vldr	d7, [r3]
 800939e:	ee26 7b07 	vmul.f64	d7, d6, d7
 80093a2:	4b99      	ldr	r3, [pc, #612]	@ (8009608 <ldl_factor+0xe2c>)
 80093a4:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 80093a8:	ed83 7b00 	vstr	d7, [r3]
  work.L[13] = (work.KKT[30])*work.d_inv[14];
 80093ac:	4b96      	ldr	r3, [pc, #600]	@ (8009608 <ldl_factor+0xe2c>)
 80093ae:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 80093b2:	ed93 6b00 	vldr	d6, [r3]
 80093b6:	4b94      	ldr	r3, [pc, #592]	@ (8009608 <ldl_factor+0xe2c>)
 80093b8:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 80093bc:	ed93 7b00 	vldr	d7, [r3]
 80093c0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80093c4:	4b90      	ldr	r3, [pc, #576]	@ (8009608 <ldl_factor+0xe2c>)
 80093c6:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 80093ca:	ed83 7b00 	vstr	d7, [r3]
  work.L[18] = (work.KKT[31])*work.d_inv[14];
 80093ce:	4b8e      	ldr	r3, [pc, #568]	@ (8009608 <ldl_factor+0xe2c>)
 80093d0:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80093d4:	ed13 6b02 	vldr	d6, [r3, #-8]
 80093d8:	4b8b      	ldr	r3, [pc, #556]	@ (8009608 <ldl_factor+0xe2c>)
 80093da:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 80093de:	ed93 7b00 	vldr	d7, [r3]
 80093e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80093e6:	4b88      	ldr	r3, [pc, #544]	@ (8009608 <ldl_factor+0xe2c>)
 80093e8:	f503 63ea 	add.w	r3, r3, #1872	@ 0x750
 80093ec:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.L[23] = (work.KKT[32])*work.d_inv[14];
 80093f0:	4b85      	ldr	r3, [pc, #532]	@ (8009608 <ldl_factor+0xe2c>)
 80093f2:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80093f6:	ed93 6b00 	vldr	d6, [r3]
 80093fa:	4b83      	ldr	r3, [pc, #524]	@ (8009608 <ldl_factor+0xe2c>)
 80093fc:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 8009400:	ed93 7b00 	vldr	d7, [r3]
 8009404:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009408:	4b7f      	ldr	r3, [pc, #508]	@ (8009608 <ldl_factor+0xe2c>)
 800940a:	f503 63ee 	add.w	r3, r3, #1904	@ 0x770
 800940e:	ed83 7b00 	vstr	d7, [r3]
  work.v[5] = work.L[7]*work.d[5];
 8009412:	4b7d      	ldr	r3, [pc, #500]	@ (8009608 <ldl_factor+0xe2c>)
 8009414:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 8009418:	ed93 6b00 	vldr	d6, [r3]
 800941c:	4b7a      	ldr	r3, [pc, #488]	@ (8009608 <ldl_factor+0xe2c>)
 800941e:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8009422:	ed13 7b02 	vldr	d7, [r3, #-8]
 8009426:	ee26 7b07 	vmul.f64	d7, d6, d7
 800942a:	4b77      	ldr	r3, [pc, #476]	@ (8009608 <ldl_factor+0xe2c>)
 800942c:	f503 6307 	add.w	r3, r3, #2160	@ 0x870
 8009430:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[15] = work.KKT[33]-work.L[7]*work.v[5];
 8009434:	4b74      	ldr	r3, [pc, #464]	@ (8009608 <ldl_factor+0xe2c>)
 8009436:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 800943a:	ed13 6b02 	vldr	d6, [r3, #-8]
 800943e:	4b72      	ldr	r3, [pc, #456]	@ (8009608 <ldl_factor+0xe2c>)
 8009440:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 8009444:	ed93 5b00 	vldr	d5, [r3]
 8009448:	4b6f      	ldr	r3, [pc, #444]	@ (8009608 <ldl_factor+0xe2c>)
 800944a:	f503 6307 	add.w	r3, r3, #2160	@ 0x870
 800944e:	ed13 7b02 	vldr	d7, [r3, #-8]
 8009452:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009456:	ee36 7b47 	vsub.f64	d7, d6, d7
 800945a:	4b6b      	ldr	r3, [pc, #428]	@ (8009608 <ldl_factor+0xe2c>)
 800945c:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8009460:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.d[15] = work.v[15];
 8009464:	4b68      	ldr	r3, [pc, #416]	@ (8009608 <ldl_factor+0xe2c>)
 8009466:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 800946a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800946e:	4966      	ldr	r1, [pc, #408]	@ (8009608 <ldl_factor+0xe2c>)
 8009470:	f501 6101 	add.w	r1, r1, #2064	@ 0x810
 8009474:	e941 2302 	strd	r2, r3, [r1, #-8]
  if (work.d[15] > 0)
 8009478:	4b63      	ldr	r3, [pc, #396]	@ (8009608 <ldl_factor+0xe2c>)
 800947a:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 800947e:	ed13 7b02 	vldr	d7, [r3, #-8]
 8009482:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800948a:	dd0a      	ble.n	80094a2 <ldl_factor+0xcc6>
    work.d[15] = -cvxgen_settings.kkt_reg;
 800948c:	4b5f      	ldr	r3, [pc, #380]	@ (800960c <ldl_factor+0xe30>)
 800948e:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8009492:	eeb1 7b47 	vneg.f64	d7, d7
 8009496:	4b5c      	ldr	r3, [pc, #368]	@ (8009608 <ldl_factor+0xe2c>)
 8009498:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 800949c:	ed03 7b02 	vstr	d7, [r3, #-8]
 80094a0:	e00e      	b.n	80094c0 <ldl_factor+0xce4>
  else
    work.d[15] -= cvxgen_settings.kkt_reg;
 80094a2:	4b59      	ldr	r3, [pc, #356]	@ (8009608 <ldl_factor+0xe2c>)
 80094a4:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 80094a8:	ed13 6b02 	vldr	d6, [r3, #-8]
 80094ac:	4b57      	ldr	r3, [pc, #348]	@ (800960c <ldl_factor+0xe30>)
 80094ae:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 80094b2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80094b6:	4b54      	ldr	r3, [pc, #336]	@ (8009608 <ldl_factor+0xe2c>)
 80094b8:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 80094bc:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.d_inv[15] = 1/work.d[15];
 80094c0:	4b51      	ldr	r3, [pc, #324]	@ (8009608 <ldl_factor+0xe2c>)
 80094c2:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 80094c6:	ed13 6b02 	vldr	d6, [r3, #-8]
 80094ca:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 80094ce:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80094d2:	4b4d      	ldr	r3, [pc, #308]	@ (8009608 <ldl_factor+0xe2c>)
 80094d4:	f503 6317 	add.w	r3, r3, #2416	@ 0x970
 80094d8:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.L[10] = (work.KKT[34])*work.d_inv[15];
 80094dc:	4b4a      	ldr	r3, [pc, #296]	@ (8009608 <ldl_factor+0xe2c>)
 80094de:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 80094e2:	ed93 6b00 	vldr	d6, [r3]
 80094e6:	4b48      	ldr	r3, [pc, #288]	@ (8009608 <ldl_factor+0xe2c>)
 80094e8:	f503 6317 	add.w	r3, r3, #2416	@ 0x970
 80094ec:	ed13 7b02 	vldr	d7, [r3, #-8]
 80094f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80094f4:	4b44      	ldr	r3, [pc, #272]	@ (8009608 <ldl_factor+0xe2c>)
 80094f6:	f503 63e2 	add.w	r3, r3, #1808	@ 0x710
 80094fa:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[10] = work.L[8]*work.d[10];
 80094fe:	4b42      	ldr	r3, [pc, #264]	@ (8009608 <ldl_factor+0xe2c>)
 8009500:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8009504:	ed13 6b02 	vldr	d6, [r3, #-8]
 8009508:	4b3f      	ldr	r3, [pc, #252]	@ (8009608 <ldl_factor+0xe2c>)
 800950a:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800950e:	ed93 7b00 	vldr	d7, [r3]
 8009512:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009516:	4b3c      	ldr	r3, [pc, #240]	@ (8009608 <ldl_factor+0xe2c>)
 8009518:	f503 6309 	add.w	r3, r3, #2192	@ 0x890
 800951c:	ed83 7b00 	vstr	d7, [r3]
  work.v[14] = work.L[9]*work.d[14];
 8009520:	4b39      	ldr	r3, [pc, #228]	@ (8009608 <ldl_factor+0xe2c>)
 8009522:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8009526:	ed93 6b00 	vldr	d6, [r3]
 800952a:	4b37      	ldr	r3, [pc, #220]	@ (8009608 <ldl_factor+0xe2c>)
 800952c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009530:	ed93 7b00 	vldr	d7, [r3]
 8009534:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009538:	4b33      	ldr	r3, [pc, #204]	@ (8009608 <ldl_factor+0xe2c>)
 800953a:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 800953e:	ed83 7b00 	vstr	d7, [r3]
  work.v[15] = work.L[10]*work.d[15];
 8009542:	4b31      	ldr	r3, [pc, #196]	@ (8009608 <ldl_factor+0xe2c>)
 8009544:	f503 63e2 	add.w	r3, r3, #1808	@ 0x710
 8009548:	ed13 6b02 	vldr	d6, [r3, #-8]
 800954c:	4b2e      	ldr	r3, [pc, #184]	@ (8009608 <ldl_factor+0xe2c>)
 800954e:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 8009552:	ed13 7b02 	vldr	d7, [r3, #-8]
 8009556:	ee26 7b07 	vmul.f64	d7, d6, d7
 800955a:	4b2b      	ldr	r3, [pc, #172]	@ (8009608 <ldl_factor+0xe2c>)
 800955c:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8009560:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[16] = work.KKT[35]-work.L[8]*work.v[10]-work.L[9]*work.v[14]-work.L[10]*work.v[15];
 8009564:	4b28      	ldr	r3, [pc, #160]	@ (8009608 <ldl_factor+0xe2c>)
 8009566:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 800956a:	ed13 6b02 	vldr	d6, [r3, #-8]
 800956e:	4b26      	ldr	r3, [pc, #152]	@ (8009608 <ldl_factor+0xe2c>)
 8009570:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8009574:	ed13 5b02 	vldr	d5, [r3, #-8]
 8009578:	4b23      	ldr	r3, [pc, #140]	@ (8009608 <ldl_factor+0xe2c>)
 800957a:	f503 6309 	add.w	r3, r3, #2192	@ 0x890
 800957e:	ed93 7b00 	vldr	d7, [r3]
 8009582:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009586:	ee36 6b47 	vsub.f64	d6, d6, d7
 800958a:	4b1f      	ldr	r3, [pc, #124]	@ (8009608 <ldl_factor+0xe2c>)
 800958c:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8009590:	ed93 5b00 	vldr	d5, [r3]
 8009594:	4b1c      	ldr	r3, [pc, #112]	@ (8009608 <ldl_factor+0xe2c>)
 8009596:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 800959a:	ed93 7b00 	vldr	d7, [r3]
 800959e:	ee25 7b07 	vmul.f64	d7, d5, d7
 80095a2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80095a6:	4b18      	ldr	r3, [pc, #96]	@ (8009608 <ldl_factor+0xe2c>)
 80095a8:	f503 63e2 	add.w	r3, r3, #1808	@ 0x710
 80095ac:	ed13 5b02 	vldr	d5, [r3, #-8]
 80095b0:	4b15      	ldr	r3, [pc, #84]	@ (8009608 <ldl_factor+0xe2c>)
 80095b2:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 80095b6:	ed13 7b02 	vldr	d7, [r3, #-8]
 80095ba:	ee25 7b07 	vmul.f64	d7, d5, d7
 80095be:	ee36 7b47 	vsub.f64	d7, d6, d7
 80095c2:	4b11      	ldr	r3, [pc, #68]	@ (8009608 <ldl_factor+0xe2c>)
 80095c4:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 80095c8:	ed83 7b00 	vstr	d7, [r3]
  work.d[16] = work.v[16];
 80095cc:	4b0e      	ldr	r3, [pc, #56]	@ (8009608 <ldl_factor+0xe2c>)
 80095ce:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 80095d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d6:	490c      	ldr	r1, [pc, #48]	@ (8009608 <ldl_factor+0xe2c>)
 80095d8:	f501 6101 	add.w	r1, r1, #2064	@ 0x810
 80095dc:	e9c1 2300 	strd	r2, r3, [r1]
  if (work.d[16] < 0)
 80095e0:	4b09      	ldr	r3, [pc, #36]	@ (8009608 <ldl_factor+0xe2c>)
 80095e2:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 80095e6:	ed93 7b00 	vldr	d7, [r3]
 80095ea:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80095ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095f2:	d50d      	bpl.n	8009610 <ldl_factor+0xe34>
    work.d[16] = cvxgen_settings.kkt_reg;
 80095f4:	4b05      	ldr	r3, [pc, #20]	@ (800960c <ldl_factor+0xe30>)
 80095f6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80095fa:	4903      	ldr	r1, [pc, #12]	@ (8009608 <ldl_factor+0xe2c>)
 80095fc:	f501 6101 	add.w	r1, r1, #2064	@ 0x810
 8009600:	e9c1 2300 	strd	r2, r3, [r1]
 8009604:	e013      	b.n	800962e <ldl_factor+0xe52>
 8009606:	bf00      	nop
 8009608:	24007070 	.word	0x24007070
 800960c:	24007a40 	.word	0x24007a40
  else
    work.d[16] += cvxgen_settings.kkt_reg;
 8009610:	4bc9      	ldr	r3, [pc, #804]	@ (8009938 <ldl_factor+0x115c>)
 8009612:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 8009616:	ed93 6b00 	vldr	d6, [r3]
 800961a:	4bc8      	ldr	r3, [pc, #800]	@ (800993c <ldl_factor+0x1160>)
 800961c:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8009620:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009624:	4bc4      	ldr	r3, [pc, #784]	@ (8009938 <ldl_factor+0x115c>)
 8009626:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 800962a:	ed83 7b00 	vstr	d7, [r3]
  work.d_inv[16] = 1/work.d[16];
 800962e:	4bc2      	ldr	r3, [pc, #776]	@ (8009938 <ldl_factor+0x115c>)
 8009630:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 8009634:	ed93 6b00 	vldr	d6, [r3]
 8009638:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 800963c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009640:	4bbd      	ldr	r3, [pc, #756]	@ (8009938 <ldl_factor+0x115c>)
 8009642:	f503 6317 	add.w	r3, r3, #2416	@ 0x970
 8009646:	ed83 7b00 	vstr	d7, [r3]
  work.L[14] = (work.KKT[36]-work.L[13]*work.v[14])*work.d_inv[16];
 800964a:	4bbb      	ldr	r3, [pc, #748]	@ (8009938 <ldl_factor+0x115c>)
 800964c:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 8009650:	ed93 6b00 	vldr	d6, [r3]
 8009654:	4bb8      	ldr	r3, [pc, #736]	@ (8009938 <ldl_factor+0x115c>)
 8009656:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 800965a:	ed93 5b00 	vldr	d5, [r3]
 800965e:	4bb6      	ldr	r3, [pc, #728]	@ (8009938 <ldl_factor+0x115c>)
 8009660:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 8009664:	ed93 7b00 	vldr	d7, [r3]
 8009668:	ee25 7b07 	vmul.f64	d7, d5, d7
 800966c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009670:	4bb1      	ldr	r3, [pc, #708]	@ (8009938 <ldl_factor+0x115c>)
 8009672:	f503 6317 	add.w	r3, r3, #2416	@ 0x970
 8009676:	ed93 7b00 	vldr	d7, [r3]
 800967a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800967e:	4bae      	ldr	r3, [pc, #696]	@ (8009938 <ldl_factor+0x115c>)
 8009680:	f503 63e6 	add.w	r3, r3, #1840	@ 0x730
 8009684:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.L[19] = (work.KKT[37]-work.L[18]*work.v[14])*work.d_inv[16];
 8009688:	4bab      	ldr	r3, [pc, #684]	@ (8009938 <ldl_factor+0x115c>)
 800968a:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800968e:	ed13 6b02 	vldr	d6, [r3, #-8]
 8009692:	4ba9      	ldr	r3, [pc, #676]	@ (8009938 <ldl_factor+0x115c>)
 8009694:	f503 63ea 	add.w	r3, r3, #1872	@ 0x750
 8009698:	ed13 5b02 	vldr	d5, [r3, #-8]
 800969c:	4ba6      	ldr	r3, [pc, #664]	@ (8009938 <ldl_factor+0x115c>)
 800969e:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 80096a2:	ed93 7b00 	vldr	d7, [r3]
 80096a6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80096aa:	ee36 6b47 	vsub.f64	d6, d6, d7
 80096ae:	4ba2      	ldr	r3, [pc, #648]	@ (8009938 <ldl_factor+0x115c>)
 80096b0:	f503 6317 	add.w	r3, r3, #2416	@ 0x970
 80096b4:	ed93 7b00 	vldr	d7, [r3]
 80096b8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80096bc:	4b9e      	ldr	r3, [pc, #632]	@ (8009938 <ldl_factor+0x115c>)
 80096be:	f503 63ea 	add.w	r3, r3, #1872	@ 0x750
 80096c2:	ed83 7b00 	vstr	d7, [r3]
  work.L[24] = (work.KKT[38]-work.L[23]*work.v[14])*work.d_inv[16];
 80096c6:	4b9c      	ldr	r3, [pc, #624]	@ (8009938 <ldl_factor+0x115c>)
 80096c8:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 80096cc:	ed93 6b00 	vldr	d6, [r3]
 80096d0:	4b99      	ldr	r3, [pc, #612]	@ (8009938 <ldl_factor+0x115c>)
 80096d2:	f503 63ee 	add.w	r3, r3, #1904	@ 0x770
 80096d6:	ed93 5b00 	vldr	d5, [r3]
 80096da:	4b97      	ldr	r3, [pc, #604]	@ (8009938 <ldl_factor+0x115c>)
 80096dc:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 80096e0:	ed93 7b00 	vldr	d7, [r3]
 80096e4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80096e8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80096ec:	4b92      	ldr	r3, [pc, #584]	@ (8009938 <ldl_factor+0x115c>)
 80096ee:	f503 6317 	add.w	r3, r3, #2416	@ 0x970
 80096f2:	ed93 7b00 	vldr	d7, [r3]
 80096f6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80096fa:	4b8f      	ldr	r3, [pc, #572]	@ (8009938 <ldl_factor+0x115c>)
 80096fc:	f503 63f0 	add.w	r3, r3, #1920	@ 0x780
 8009700:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[6] = work.L[11]*work.d[6];
 8009704:	4b8c      	ldr	r3, [pc, #560]	@ (8009938 <ldl_factor+0x115c>)
 8009706:	f503 63e2 	add.w	r3, r3, #1808	@ 0x710
 800970a:	ed93 6b00 	vldr	d6, [r3]
 800970e:	4b8a      	ldr	r3, [pc, #552]	@ (8009938 <ldl_factor+0x115c>)
 8009710:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8009714:	ed93 7b00 	vldr	d7, [r3]
 8009718:	ee26 7b07 	vmul.f64	d7, d6, d7
 800971c:	4b86      	ldr	r3, [pc, #536]	@ (8009938 <ldl_factor+0x115c>)
 800971e:	f503 6307 	add.w	r3, r3, #2160	@ 0x870
 8009722:	ed83 7b00 	vstr	d7, [r3]
  work.v[17] = work.KKT[39]-work.L[11]*work.v[6];
 8009726:	4b84      	ldr	r3, [pc, #528]	@ (8009938 <ldl_factor+0x115c>)
 8009728:	f503 63ce 	add.w	r3, r3, #1648	@ 0x670
 800972c:	ed13 6b02 	vldr	d6, [r3, #-8]
 8009730:	4b81      	ldr	r3, [pc, #516]	@ (8009938 <ldl_factor+0x115c>)
 8009732:	f503 63e2 	add.w	r3, r3, #1808	@ 0x710
 8009736:	ed93 5b00 	vldr	d5, [r3]
 800973a:	4b7f      	ldr	r3, [pc, #508]	@ (8009938 <ldl_factor+0x115c>)
 800973c:	f503 6307 	add.w	r3, r3, #2160	@ 0x870
 8009740:	ed93 7b00 	vldr	d7, [r3]
 8009744:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009748:	ee36 7b47 	vsub.f64	d7, d6, d7
 800974c:	4b7a      	ldr	r3, [pc, #488]	@ (8009938 <ldl_factor+0x115c>)
 800974e:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 8009752:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.d[17] = work.v[17];
 8009756:	4b78      	ldr	r3, [pc, #480]	@ (8009938 <ldl_factor+0x115c>)
 8009758:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 800975c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009760:	4975      	ldr	r1, [pc, #468]	@ (8009938 <ldl_factor+0x115c>)
 8009762:	f501 6102 	add.w	r1, r1, #2080	@ 0x820
 8009766:	e941 2302 	strd	r2, r3, [r1, #-8]
  if (work.d[17] > 0)
 800976a:	4b73      	ldr	r3, [pc, #460]	@ (8009938 <ldl_factor+0x115c>)
 800976c:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8009770:	ed13 7b02 	vldr	d7, [r3, #-8]
 8009774:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800977c:	dd0a      	ble.n	8009794 <ldl_factor+0xfb8>
    work.d[17] = -cvxgen_settings.kkt_reg;
 800977e:	4b6f      	ldr	r3, [pc, #444]	@ (800993c <ldl_factor+0x1160>)
 8009780:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8009784:	eeb1 7b47 	vneg.f64	d7, d7
 8009788:	4b6b      	ldr	r3, [pc, #428]	@ (8009938 <ldl_factor+0x115c>)
 800978a:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800978e:	ed03 7b02 	vstr	d7, [r3, #-8]
 8009792:	e00e      	b.n	80097b2 <ldl_factor+0xfd6>
  else
    work.d[17] -= cvxgen_settings.kkt_reg;
 8009794:	4b68      	ldr	r3, [pc, #416]	@ (8009938 <ldl_factor+0x115c>)
 8009796:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800979a:	ed13 6b02 	vldr	d6, [r3, #-8]
 800979e:	4b67      	ldr	r3, [pc, #412]	@ (800993c <ldl_factor+0x1160>)
 80097a0:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 80097a4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80097a8:	4b63      	ldr	r3, [pc, #396]	@ (8009938 <ldl_factor+0x115c>)
 80097aa:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 80097ae:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.d_inv[17] = 1/work.d[17];
 80097b2:	4b61      	ldr	r3, [pc, #388]	@ (8009938 <ldl_factor+0x115c>)
 80097b4:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 80097b8:	ed13 6b02 	vldr	d6, [r3, #-8]
 80097bc:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 80097c0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80097c4:	4b5c      	ldr	r3, [pc, #368]	@ (8009938 <ldl_factor+0x115c>)
 80097c6:	f503 6318 	add.w	r3, r3, #2432	@ 0x980
 80097ca:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.L[15] = (work.KKT[40])*work.d_inv[17];
 80097ce:	4b5a      	ldr	r3, [pc, #360]	@ (8009938 <ldl_factor+0x115c>)
 80097d0:	f503 63ce 	add.w	r3, r3, #1648	@ 0x670
 80097d4:	ed93 6b00 	vldr	d6, [r3]
 80097d8:	4b57      	ldr	r3, [pc, #348]	@ (8009938 <ldl_factor+0x115c>)
 80097da:	f503 6318 	add.w	r3, r3, #2432	@ 0x980
 80097de:	ed13 7b02 	vldr	d7, [r3, #-8]
 80097e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80097e6:	4b54      	ldr	r3, [pc, #336]	@ (8009938 <ldl_factor+0x115c>)
 80097e8:	f503 63e6 	add.w	r3, r3, #1840	@ 0x730
 80097ec:	ed83 7b00 	vstr	d7, [r3]
  work.v[11] = work.L[12]*work.d[11];
 80097f0:	4b51      	ldr	r3, [pc, #324]	@ (8009938 <ldl_factor+0x115c>)
 80097f2:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 80097f6:	ed13 6b02 	vldr	d6, [r3, #-8]
 80097fa:	4b4f      	ldr	r3, [pc, #316]	@ (8009938 <ldl_factor+0x115c>)
 80097fc:	f503 63fe 	add.w	r3, r3, #2032	@ 0x7f0
 8009800:	ed13 7b02 	vldr	d7, [r3, #-8]
 8009804:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009808:	4b4b      	ldr	r3, [pc, #300]	@ (8009938 <ldl_factor+0x115c>)
 800980a:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 800980e:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[14] = work.L[13]*work.d[14];
 8009812:	4b49      	ldr	r3, [pc, #292]	@ (8009938 <ldl_factor+0x115c>)
 8009814:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 8009818:	ed93 6b00 	vldr	d6, [r3]
 800981c:	4b46      	ldr	r3, [pc, #280]	@ (8009938 <ldl_factor+0x115c>)
 800981e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009822:	ed93 7b00 	vldr	d7, [r3]
 8009826:	ee26 7b07 	vmul.f64	d7, d6, d7
 800982a:	4b43      	ldr	r3, [pc, #268]	@ (8009938 <ldl_factor+0x115c>)
 800982c:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 8009830:	ed83 7b00 	vstr	d7, [r3]
  work.v[16] = work.L[14]*work.d[16];
 8009834:	4b40      	ldr	r3, [pc, #256]	@ (8009938 <ldl_factor+0x115c>)
 8009836:	f503 63e6 	add.w	r3, r3, #1840	@ 0x730
 800983a:	ed13 6b02 	vldr	d6, [r3, #-8]
 800983e:	4b3e      	ldr	r3, [pc, #248]	@ (8009938 <ldl_factor+0x115c>)
 8009840:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 8009844:	ed93 7b00 	vldr	d7, [r3]
 8009848:	ee26 7b07 	vmul.f64	d7, d6, d7
 800984c:	4b3a      	ldr	r3, [pc, #232]	@ (8009938 <ldl_factor+0x115c>)
 800984e:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8009852:	ed83 7b00 	vstr	d7, [r3]
  work.v[17] = work.L[15]*work.d[17];
 8009856:	4b38      	ldr	r3, [pc, #224]	@ (8009938 <ldl_factor+0x115c>)
 8009858:	f503 63e6 	add.w	r3, r3, #1840	@ 0x730
 800985c:	ed93 6b00 	vldr	d6, [r3]
 8009860:	4b35      	ldr	r3, [pc, #212]	@ (8009938 <ldl_factor+0x115c>)
 8009862:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8009866:	ed13 7b02 	vldr	d7, [r3, #-8]
 800986a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800986e:	4b32      	ldr	r3, [pc, #200]	@ (8009938 <ldl_factor+0x115c>)
 8009870:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 8009874:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[18] = work.KKT[41]-work.L[12]*work.v[11]-work.L[13]*work.v[14]-work.L[14]*work.v[16]-work.L[15]*work.v[17];
 8009878:	4b2f      	ldr	r3, [pc, #188]	@ (8009938 <ldl_factor+0x115c>)
 800987a:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 800987e:	ed13 6b02 	vldr	d6, [r3, #-8]
 8009882:	4b2d      	ldr	r3, [pc, #180]	@ (8009938 <ldl_factor+0x115c>)
 8009884:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 8009888:	ed13 5b02 	vldr	d5, [r3, #-8]
 800988c:	4b2a      	ldr	r3, [pc, #168]	@ (8009938 <ldl_factor+0x115c>)
 800988e:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8009892:	ed13 7b02 	vldr	d7, [r3, #-8]
 8009896:	ee25 7b07 	vmul.f64	d7, d5, d7
 800989a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800989e:	4b26      	ldr	r3, [pc, #152]	@ (8009938 <ldl_factor+0x115c>)
 80098a0:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 80098a4:	ed93 5b00 	vldr	d5, [r3]
 80098a8:	4b23      	ldr	r3, [pc, #140]	@ (8009938 <ldl_factor+0x115c>)
 80098aa:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 80098ae:	ed93 7b00 	vldr	d7, [r3]
 80098b2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80098b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80098ba:	4b1f      	ldr	r3, [pc, #124]	@ (8009938 <ldl_factor+0x115c>)
 80098bc:	f503 63e6 	add.w	r3, r3, #1840	@ 0x730
 80098c0:	ed13 5b02 	vldr	d5, [r3, #-8]
 80098c4:	4b1c      	ldr	r3, [pc, #112]	@ (8009938 <ldl_factor+0x115c>)
 80098c6:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 80098ca:	ed93 7b00 	vldr	d7, [r3]
 80098ce:	ee25 7b07 	vmul.f64	d7, d5, d7
 80098d2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80098d6:	4b18      	ldr	r3, [pc, #96]	@ (8009938 <ldl_factor+0x115c>)
 80098d8:	f503 63e6 	add.w	r3, r3, #1840	@ 0x730
 80098dc:	ed93 5b00 	vldr	d5, [r3]
 80098e0:	4b15      	ldr	r3, [pc, #84]	@ (8009938 <ldl_factor+0x115c>)
 80098e2:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 80098e6:	ed13 7b02 	vldr	d7, [r3, #-8]
 80098ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 80098ee:	ee36 7b47 	vsub.f64	d7, d6, d7
 80098f2:	4b11      	ldr	r3, [pc, #68]	@ (8009938 <ldl_factor+0x115c>)
 80098f4:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 80098f8:	ed83 7b00 	vstr	d7, [r3]
  work.d[18] = work.v[18];
 80098fc:	4b0e      	ldr	r3, [pc, #56]	@ (8009938 <ldl_factor+0x115c>)
 80098fe:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 8009902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009906:	490c      	ldr	r1, [pc, #48]	@ (8009938 <ldl_factor+0x115c>)
 8009908:	f501 6102 	add.w	r1, r1, #2080	@ 0x820
 800990c:	e9c1 2300 	strd	r2, r3, [r1]
  if (work.d[18] < 0)
 8009910:	4b09      	ldr	r3, [pc, #36]	@ (8009938 <ldl_factor+0x115c>)
 8009912:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8009916:	ed93 7b00 	vldr	d7, [r3]
 800991a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800991e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009922:	d50d      	bpl.n	8009940 <ldl_factor+0x1164>
    work.d[18] = cvxgen_settings.kkt_reg;
 8009924:	4b05      	ldr	r3, [pc, #20]	@ (800993c <ldl_factor+0x1160>)
 8009926:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800992a:	4903      	ldr	r1, [pc, #12]	@ (8009938 <ldl_factor+0x115c>)
 800992c:	f501 6102 	add.w	r1, r1, #2080	@ 0x820
 8009930:	e9c1 2300 	strd	r2, r3, [r1]
 8009934:	e013      	b.n	800995e <ldl_factor+0x1182>
 8009936:	bf00      	nop
 8009938:	24007070 	.word	0x24007070
 800993c:	24007a40 	.word	0x24007a40
  else
    work.d[18] += cvxgen_settings.kkt_reg;
 8009940:	4b5f      	ldr	r3, [pc, #380]	@ (8009ac0 <ldl_factor+0x12e4>)
 8009942:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8009946:	ed93 6b00 	vldr	d6, [r3]
 800994a:	4b5e      	ldr	r3, [pc, #376]	@ (8009ac4 <ldl_factor+0x12e8>)
 800994c:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8009950:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009954:	4b5a      	ldr	r3, [pc, #360]	@ (8009ac0 <ldl_factor+0x12e4>)
 8009956:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800995a:	ed83 7b00 	vstr	d7, [r3]
  work.d_inv[18] = 1/work.d[18];
 800995e:	4b58      	ldr	r3, [pc, #352]	@ (8009ac0 <ldl_factor+0x12e4>)
 8009960:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8009964:	ed93 6b00 	vldr	d6, [r3]
 8009968:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 800996c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009970:	4b53      	ldr	r3, [pc, #332]	@ (8009ac0 <ldl_factor+0x12e4>)
 8009972:	f503 6318 	add.w	r3, r3, #2432	@ 0x980
 8009976:	ed83 7b00 	vstr	d7, [r3]
  work.L[20] = (work.KKT[42]-work.L[18]*work.v[14]-work.L[19]*work.v[16])*work.d_inv[18];
 800997a:	4b51      	ldr	r3, [pc, #324]	@ (8009ac0 <ldl_factor+0x12e4>)
 800997c:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8009980:	ed93 6b00 	vldr	d6, [r3]
 8009984:	4b4e      	ldr	r3, [pc, #312]	@ (8009ac0 <ldl_factor+0x12e4>)
 8009986:	f503 63ea 	add.w	r3, r3, #1872	@ 0x750
 800998a:	ed13 5b02 	vldr	d5, [r3, #-8]
 800998e:	4b4c      	ldr	r3, [pc, #304]	@ (8009ac0 <ldl_factor+0x12e4>)
 8009990:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 8009994:	ed93 7b00 	vldr	d7, [r3]
 8009998:	ee25 7b07 	vmul.f64	d7, d5, d7
 800999c:	ee36 6b47 	vsub.f64	d6, d6, d7
 80099a0:	4b47      	ldr	r3, [pc, #284]	@ (8009ac0 <ldl_factor+0x12e4>)
 80099a2:	f503 63ea 	add.w	r3, r3, #1872	@ 0x750
 80099a6:	ed93 5b00 	vldr	d5, [r3]
 80099aa:	4b45      	ldr	r3, [pc, #276]	@ (8009ac0 <ldl_factor+0x12e4>)
 80099ac:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 80099b0:	ed93 7b00 	vldr	d7, [r3]
 80099b4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80099b8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80099bc:	4b40      	ldr	r3, [pc, #256]	@ (8009ac0 <ldl_factor+0x12e4>)
 80099be:	f503 6318 	add.w	r3, r3, #2432	@ 0x980
 80099c2:	ed93 7b00 	vldr	d7, [r3]
 80099c6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80099ca:	4b3d      	ldr	r3, [pc, #244]	@ (8009ac0 <ldl_factor+0x12e4>)
 80099cc:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 80099d0:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.L[25] = (work.KKT[43]-work.L[23]*work.v[14]-work.L[24]*work.v[16])*work.d_inv[18];
 80099d4:	4b3a      	ldr	r3, [pc, #232]	@ (8009ac0 <ldl_factor+0x12e4>)
 80099d6:	f503 63d2 	add.w	r3, r3, #1680	@ 0x690
 80099da:	ed13 6b02 	vldr	d6, [r3, #-8]
 80099de:	4b38      	ldr	r3, [pc, #224]	@ (8009ac0 <ldl_factor+0x12e4>)
 80099e0:	f503 63ee 	add.w	r3, r3, #1904	@ 0x770
 80099e4:	ed93 5b00 	vldr	d5, [r3]
 80099e8:	4b35      	ldr	r3, [pc, #212]	@ (8009ac0 <ldl_factor+0x12e4>)
 80099ea:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 80099ee:	ed93 7b00 	vldr	d7, [r3]
 80099f2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80099f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80099fa:	4b31      	ldr	r3, [pc, #196]	@ (8009ac0 <ldl_factor+0x12e4>)
 80099fc:	f503 63f0 	add.w	r3, r3, #1920	@ 0x780
 8009a00:	ed13 5b02 	vldr	d5, [r3, #-8]
 8009a04:	4b2e      	ldr	r3, [pc, #184]	@ (8009ac0 <ldl_factor+0x12e4>)
 8009a06:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8009a0a:	ed93 7b00 	vldr	d7, [r3]
 8009a0e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009a12:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009a16:	4b2a      	ldr	r3, [pc, #168]	@ (8009ac0 <ldl_factor+0x12e4>)
 8009a18:	f503 6318 	add.w	r3, r3, #2432	@ 0x980
 8009a1c:	ed93 7b00 	vldr	d7, [r3]
 8009a20:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009a24:	4b26      	ldr	r3, [pc, #152]	@ (8009ac0 <ldl_factor+0x12e4>)
 8009a26:	f503 63f0 	add.w	r3, r3, #1920	@ 0x780
 8009a2a:	ed83 7b00 	vstr	d7, [r3]
  work.v[7] = work.L[16]*work.d[7];
 8009a2e:	4b24      	ldr	r3, [pc, #144]	@ (8009ac0 <ldl_factor+0x12e4>)
 8009a30:	f503 63e8 	add.w	r3, r3, #1856	@ 0x740
 8009a34:	ed13 6b02 	vldr	d6, [r3, #-8]
 8009a38:	4b21      	ldr	r3, [pc, #132]	@ (8009ac0 <ldl_factor+0x12e4>)
 8009a3a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8009a3e:	ed13 7b02 	vldr	d7, [r3, #-8]
 8009a42:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009a46:	4b1e      	ldr	r3, [pc, #120]	@ (8009ac0 <ldl_factor+0x12e4>)
 8009a48:	f503 6308 	add.w	r3, r3, #2176	@ 0x880
 8009a4c:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[19] = work.KKT[44]-work.L[16]*work.v[7];
 8009a50:	4b1b      	ldr	r3, [pc, #108]	@ (8009ac0 <ldl_factor+0x12e4>)
 8009a52:	f503 63d2 	add.w	r3, r3, #1680	@ 0x690
 8009a56:	ed93 6b00 	vldr	d6, [r3]
 8009a5a:	4b19      	ldr	r3, [pc, #100]	@ (8009ac0 <ldl_factor+0x12e4>)
 8009a5c:	f503 63e8 	add.w	r3, r3, #1856	@ 0x740
 8009a60:	ed13 5b02 	vldr	d5, [r3, #-8]
 8009a64:	4b16      	ldr	r3, [pc, #88]	@ (8009ac0 <ldl_factor+0x12e4>)
 8009a66:	f503 6308 	add.w	r3, r3, #2176	@ 0x880
 8009a6a:	ed13 7b02 	vldr	d7, [r3, #-8]
 8009a6e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009a72:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009a76:	4b12      	ldr	r3, [pc, #72]	@ (8009ac0 <ldl_factor+0x12e4>)
 8009a78:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 8009a7c:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.d[19] = work.v[19];
 8009a80:	4b0f      	ldr	r3, [pc, #60]	@ (8009ac0 <ldl_factor+0x12e4>)
 8009a82:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 8009a86:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a8a:	490d      	ldr	r1, [pc, #52]	@ (8009ac0 <ldl_factor+0x12e4>)
 8009a8c:	f501 6103 	add.w	r1, r1, #2096	@ 0x830
 8009a90:	e941 2302 	strd	r2, r3, [r1, #-8]
  if (work.d[19] > 0)
 8009a94:	4b0a      	ldr	r3, [pc, #40]	@ (8009ac0 <ldl_factor+0x12e4>)
 8009a96:	f503 6303 	add.w	r3, r3, #2096	@ 0x830
 8009a9a:	ed13 7b02 	vldr	d7, [r3, #-8]
 8009a9e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aa6:	dd0f      	ble.n	8009ac8 <ldl_factor+0x12ec>
    work.d[19] = -cvxgen_settings.kkt_reg;
 8009aa8:	4b06      	ldr	r3, [pc, #24]	@ (8009ac4 <ldl_factor+0x12e8>)
 8009aaa:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8009aae:	eeb1 7b47 	vneg.f64	d7, d7
 8009ab2:	4b03      	ldr	r3, [pc, #12]	@ (8009ac0 <ldl_factor+0x12e4>)
 8009ab4:	f503 6303 	add.w	r3, r3, #2096	@ 0x830
 8009ab8:	ed03 7b02 	vstr	d7, [r3, #-8]
 8009abc:	e013      	b.n	8009ae6 <ldl_factor+0x130a>
 8009abe:	bf00      	nop
 8009ac0:	24007070 	.word	0x24007070
 8009ac4:	24007a40 	.word	0x24007a40
  else
    work.d[19] -= cvxgen_settings.kkt_reg;
 8009ac8:	4b77      	ldr	r3, [pc, #476]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009aca:	f503 6303 	add.w	r3, r3, #2096	@ 0x830
 8009ace:	ed13 6b02 	vldr	d6, [r3, #-8]
 8009ad2:	4b76      	ldr	r3, [pc, #472]	@ (8009cac <ldl_factor+0x14d0>)
 8009ad4:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8009ad8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009adc:	4b72      	ldr	r3, [pc, #456]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009ade:	f503 6303 	add.w	r3, r3, #2096	@ 0x830
 8009ae2:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.d_inv[19] = 1/work.d[19];
 8009ae6:	4b70      	ldr	r3, [pc, #448]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009ae8:	f503 6303 	add.w	r3, r3, #2096	@ 0x830
 8009aec:	ed13 6b02 	vldr	d6, [r3, #-8]
 8009af0:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8009af4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009af8:	4b6b      	ldr	r3, [pc, #428]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009afa:	f503 6319 	add.w	r3, r3, #2448	@ 0x990
 8009afe:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.L[21] = (work.KKT[45])*work.d_inv[19];
 8009b02:	4b69      	ldr	r3, [pc, #420]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009b04:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8009b08:	ed13 6b02 	vldr	d6, [r3, #-8]
 8009b0c:	4b66      	ldr	r3, [pc, #408]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009b0e:	f503 6319 	add.w	r3, r3, #2448	@ 0x990
 8009b12:	ed13 7b02 	vldr	d7, [r3, #-8]
 8009b16:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009b1a:	4b63      	ldr	r3, [pc, #396]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009b1c:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 8009b20:	ed83 7b00 	vstr	d7, [r3]
  work.v[12] = work.L[17]*work.d[12];
 8009b24:	4b60      	ldr	r3, [pc, #384]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009b26:	f503 63e8 	add.w	r3, r3, #1856	@ 0x740
 8009b2a:	ed93 6b00 	vldr	d6, [r3]
 8009b2e:	4b5e      	ldr	r3, [pc, #376]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009b30:	f503 63fe 	add.w	r3, r3, #2032	@ 0x7f0
 8009b34:	ed93 7b00 	vldr	d7, [r3]
 8009b38:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009b3c:	4b5a      	ldr	r3, [pc, #360]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009b3e:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8009b42:	ed83 7b00 	vstr	d7, [r3]
  work.v[14] = work.L[18]*work.d[14];
 8009b46:	4b58      	ldr	r3, [pc, #352]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009b48:	f503 63ea 	add.w	r3, r3, #1872	@ 0x750
 8009b4c:	ed13 6b02 	vldr	d6, [r3, #-8]
 8009b50:	4b55      	ldr	r3, [pc, #340]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b56:	ed93 7b00 	vldr	d7, [r3]
 8009b5a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009b5e:	4b52      	ldr	r3, [pc, #328]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009b60:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 8009b64:	ed83 7b00 	vstr	d7, [r3]
  work.v[16] = work.L[19]*work.d[16];
 8009b68:	4b4f      	ldr	r3, [pc, #316]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009b6a:	f503 63ea 	add.w	r3, r3, #1872	@ 0x750
 8009b6e:	ed93 6b00 	vldr	d6, [r3]
 8009b72:	4b4d      	ldr	r3, [pc, #308]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009b74:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 8009b78:	ed93 7b00 	vldr	d7, [r3]
 8009b7c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009b80:	4b49      	ldr	r3, [pc, #292]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009b82:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8009b86:	ed83 7b00 	vstr	d7, [r3]
  work.v[18] = work.L[20]*work.d[18];
 8009b8a:	4b47      	ldr	r3, [pc, #284]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009b8c:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 8009b90:	ed13 6b02 	vldr	d6, [r3, #-8]
 8009b94:	4b44      	ldr	r3, [pc, #272]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009b96:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8009b9a:	ed93 7b00 	vldr	d7, [r3]
 8009b9e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009ba2:	4b41      	ldr	r3, [pc, #260]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009ba4:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 8009ba8:	ed83 7b00 	vstr	d7, [r3]
  work.v[19] = work.L[21]*work.d[19];
 8009bac:	4b3e      	ldr	r3, [pc, #248]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009bae:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 8009bb2:	ed93 6b00 	vldr	d6, [r3]
 8009bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009bb8:	f503 6303 	add.w	r3, r3, #2096	@ 0x830
 8009bbc:	ed13 7b02 	vldr	d7, [r3, #-8]
 8009bc0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009bc4:	4b38      	ldr	r3, [pc, #224]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009bc6:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 8009bca:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[20] = work.KKT[46]-work.L[17]*work.v[12]-work.L[18]*work.v[14]-work.L[19]*work.v[16]-work.L[20]*work.v[18]-work.L[21]*work.v[19];
 8009bce:	4b36      	ldr	r3, [pc, #216]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009bd0:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8009bd4:	ed93 6b00 	vldr	d6, [r3]
 8009bd8:	4b33      	ldr	r3, [pc, #204]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009bda:	f503 63e8 	add.w	r3, r3, #1856	@ 0x740
 8009bde:	ed93 5b00 	vldr	d5, [r3]
 8009be2:	4b31      	ldr	r3, [pc, #196]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009be4:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8009be8:	ed93 7b00 	vldr	d7, [r3]
 8009bec:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009bf0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009bf4:	4b2c      	ldr	r3, [pc, #176]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009bf6:	f503 63ea 	add.w	r3, r3, #1872	@ 0x750
 8009bfa:	ed13 5b02 	vldr	d5, [r3, #-8]
 8009bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009c00:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 8009c04:	ed93 7b00 	vldr	d7, [r3]
 8009c08:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009c0c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009c10:	4b25      	ldr	r3, [pc, #148]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009c12:	f503 63ea 	add.w	r3, r3, #1872	@ 0x750
 8009c16:	ed93 5b00 	vldr	d5, [r3]
 8009c1a:	4b23      	ldr	r3, [pc, #140]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009c1c:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8009c20:	ed93 7b00 	vldr	d7, [r3]
 8009c24:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009c28:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009c2e:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 8009c32:	ed13 5b02 	vldr	d5, [r3, #-8]
 8009c36:	4b1c      	ldr	r3, [pc, #112]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009c38:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 8009c3c:	ed93 7b00 	vldr	d7, [r3]
 8009c40:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009c44:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009c48:	4b17      	ldr	r3, [pc, #92]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009c4a:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 8009c4e:	ed93 5b00 	vldr	d5, [r3]
 8009c52:	4b15      	ldr	r3, [pc, #84]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009c54:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 8009c58:	ed13 7b02 	vldr	d7, [r3, #-8]
 8009c5c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009c60:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009c64:	4b10      	ldr	r3, [pc, #64]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009c66:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 8009c6a:	ed83 7b00 	vstr	d7, [r3]
  work.d[20] = work.v[20];
 8009c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009c70:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 8009c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c78:	490b      	ldr	r1, [pc, #44]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009c7a:	f501 6103 	add.w	r1, r1, #2096	@ 0x830
 8009c7e:	e9c1 2300 	strd	r2, r3, [r1]
  if (work.d[20] < 0)
 8009c82:	4b09      	ldr	r3, [pc, #36]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009c84:	f503 6303 	add.w	r3, r3, #2096	@ 0x830
 8009c88:	ed93 7b00 	vldr	d7, [r3]
 8009c8c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c94:	d50c      	bpl.n	8009cb0 <ldl_factor+0x14d4>
    work.d[20] = cvxgen_settings.kkt_reg;
 8009c96:	4b05      	ldr	r3, [pc, #20]	@ (8009cac <ldl_factor+0x14d0>)
 8009c98:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8009c9c:	4902      	ldr	r1, [pc, #8]	@ (8009ca8 <ldl_factor+0x14cc>)
 8009c9e:	f501 6103 	add.w	r1, r1, #2096	@ 0x830
 8009ca2:	e9c1 2300 	strd	r2, r3, [r1]
 8009ca6:	e012      	b.n	8009cce <ldl_factor+0x14f2>
 8009ca8:	24007070 	.word	0x24007070
 8009cac:	24007a40 	.word	0x24007a40
  else
    work.d[20] += cvxgen_settings.kkt_reg;
 8009cb0:	4b9e      	ldr	r3, [pc, #632]	@ (8009f2c <ldl_factor+0x1750>)
 8009cb2:	f503 6303 	add.w	r3, r3, #2096	@ 0x830
 8009cb6:	ed93 6b00 	vldr	d6, [r3]
 8009cba:	4b9d      	ldr	r3, [pc, #628]	@ (8009f30 <ldl_factor+0x1754>)
 8009cbc:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8009cc0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009cc4:	4b99      	ldr	r3, [pc, #612]	@ (8009f2c <ldl_factor+0x1750>)
 8009cc6:	f503 6303 	add.w	r3, r3, #2096	@ 0x830
 8009cca:	ed83 7b00 	vstr	d7, [r3]
  work.d_inv[20] = 1/work.d[20];
 8009cce:	4b97      	ldr	r3, [pc, #604]	@ (8009f2c <ldl_factor+0x1750>)
 8009cd0:	f503 6303 	add.w	r3, r3, #2096	@ 0x830
 8009cd4:	ed93 6b00 	vldr	d6, [r3]
 8009cd8:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8009cdc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009ce0:	4b92      	ldr	r3, [pc, #584]	@ (8009f2c <ldl_factor+0x1750>)
 8009ce2:	f503 6319 	add.w	r3, r3, #2448	@ 0x990
 8009ce6:	ed83 7b00 	vstr	d7, [r3]
  work.L[26] = (work.KKT[47]-work.L[23]*work.v[14]-work.L[24]*work.v[16]-work.L[25]*work.v[18])*work.d_inv[20];
 8009cea:	4b90      	ldr	r3, [pc, #576]	@ (8009f2c <ldl_factor+0x1750>)
 8009cec:	f503 63d6 	add.w	r3, r3, #1712	@ 0x6b0
 8009cf0:	ed13 6b02 	vldr	d6, [r3, #-8]
 8009cf4:	4b8d      	ldr	r3, [pc, #564]	@ (8009f2c <ldl_factor+0x1750>)
 8009cf6:	f503 63ee 	add.w	r3, r3, #1904	@ 0x770
 8009cfa:	ed93 5b00 	vldr	d5, [r3]
 8009cfe:	4b8b      	ldr	r3, [pc, #556]	@ (8009f2c <ldl_factor+0x1750>)
 8009d00:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 8009d04:	ed93 7b00 	vldr	d7, [r3]
 8009d08:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009d0c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009d10:	4b86      	ldr	r3, [pc, #536]	@ (8009f2c <ldl_factor+0x1750>)
 8009d12:	f503 63f0 	add.w	r3, r3, #1920	@ 0x780
 8009d16:	ed13 5b02 	vldr	d5, [r3, #-8]
 8009d1a:	4b84      	ldr	r3, [pc, #528]	@ (8009f2c <ldl_factor+0x1750>)
 8009d1c:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8009d20:	ed93 7b00 	vldr	d7, [r3]
 8009d24:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009d28:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009d2c:	4b7f      	ldr	r3, [pc, #508]	@ (8009f2c <ldl_factor+0x1750>)
 8009d2e:	f503 63f0 	add.w	r3, r3, #1920	@ 0x780
 8009d32:	ed93 5b00 	vldr	d5, [r3]
 8009d36:	4b7d      	ldr	r3, [pc, #500]	@ (8009f2c <ldl_factor+0x1750>)
 8009d38:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 8009d3c:	ed93 7b00 	vldr	d7, [r3]
 8009d40:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009d44:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009d48:	4b78      	ldr	r3, [pc, #480]	@ (8009f2c <ldl_factor+0x1750>)
 8009d4a:	f503 6319 	add.w	r3, r3, #2448	@ 0x990
 8009d4e:	ed93 7b00 	vldr	d7, [r3]
 8009d52:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009d56:	4b75      	ldr	r3, [pc, #468]	@ (8009f2c <ldl_factor+0x1750>)
 8009d58:	f503 63f2 	add.w	r3, r3, #1936	@ 0x790
 8009d5c:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.v[8] = work.L[22]*work.d[8];
 8009d60:	4b72      	ldr	r3, [pc, #456]	@ (8009f2c <ldl_factor+0x1750>)
 8009d62:	f503 63ee 	add.w	r3, r3, #1904	@ 0x770
 8009d66:	ed13 6b02 	vldr	d6, [r3, #-8]
 8009d6a:	4b70      	ldr	r3, [pc, #448]	@ (8009f2c <ldl_factor+0x1750>)
 8009d6c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8009d70:	ed93 7b00 	vldr	d7, [r3]
 8009d74:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009d78:	4b6c      	ldr	r3, [pc, #432]	@ (8009f2c <ldl_factor+0x1750>)
 8009d7a:	f503 6308 	add.w	r3, r3, #2176	@ 0x880
 8009d7e:	ed83 7b00 	vstr	d7, [r3]
  work.v[14] = work.L[23]*work.d[14];
 8009d82:	4b6a      	ldr	r3, [pc, #424]	@ (8009f2c <ldl_factor+0x1750>)
 8009d84:	f503 63ee 	add.w	r3, r3, #1904	@ 0x770
 8009d88:	ed93 6b00 	vldr	d6, [r3]
 8009d8c:	4b67      	ldr	r3, [pc, #412]	@ (8009f2c <ldl_factor+0x1750>)
 8009d8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d92:	ed93 7b00 	vldr	d7, [r3]
 8009d96:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009d9a:	4b64      	ldr	r3, [pc, #400]	@ (8009f2c <ldl_factor+0x1750>)
 8009d9c:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 8009da0:	ed83 7b00 	vstr	d7, [r3]
  work.v[16] = work.L[24]*work.d[16];
 8009da4:	4b61      	ldr	r3, [pc, #388]	@ (8009f2c <ldl_factor+0x1750>)
 8009da6:	f503 63f0 	add.w	r3, r3, #1920	@ 0x780
 8009daa:	ed13 6b02 	vldr	d6, [r3, #-8]
 8009dae:	4b5f      	ldr	r3, [pc, #380]	@ (8009f2c <ldl_factor+0x1750>)
 8009db0:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 8009db4:	ed93 7b00 	vldr	d7, [r3]
 8009db8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009dbc:	4b5b      	ldr	r3, [pc, #364]	@ (8009f2c <ldl_factor+0x1750>)
 8009dbe:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8009dc2:	ed83 7b00 	vstr	d7, [r3]
  work.v[18] = work.L[25]*work.d[18];
 8009dc6:	4b59      	ldr	r3, [pc, #356]	@ (8009f2c <ldl_factor+0x1750>)
 8009dc8:	f503 63f0 	add.w	r3, r3, #1920	@ 0x780
 8009dcc:	ed93 6b00 	vldr	d6, [r3]
 8009dd0:	4b56      	ldr	r3, [pc, #344]	@ (8009f2c <ldl_factor+0x1750>)
 8009dd2:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8009dd6:	ed93 7b00 	vldr	d7, [r3]
 8009dda:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009dde:	4b53      	ldr	r3, [pc, #332]	@ (8009f2c <ldl_factor+0x1750>)
 8009de0:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 8009de4:	ed83 7b00 	vstr	d7, [r3]
  work.v[20] = work.L[26]*work.d[20];
 8009de8:	4b50      	ldr	r3, [pc, #320]	@ (8009f2c <ldl_factor+0x1750>)
 8009dea:	f503 63f2 	add.w	r3, r3, #1936	@ 0x790
 8009dee:	ed13 6b02 	vldr	d6, [r3, #-8]
 8009df2:	4b4e      	ldr	r3, [pc, #312]	@ (8009f2c <ldl_factor+0x1750>)
 8009df4:	f503 6303 	add.w	r3, r3, #2096	@ 0x830
 8009df8:	ed93 7b00 	vldr	d7, [r3]
 8009dfc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009e00:	4b4a      	ldr	r3, [pc, #296]	@ (8009f2c <ldl_factor+0x1750>)
 8009e02:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 8009e06:	ed83 7b00 	vstr	d7, [r3]
  work.v[21] = work.KKT[48]-work.L[22]*work.v[8]-work.L[23]*work.v[14]-work.L[24]*work.v[16]-work.L[25]*work.v[18]-work.L[26]*work.v[20];
 8009e0a:	4b48      	ldr	r3, [pc, #288]	@ (8009f2c <ldl_factor+0x1750>)
 8009e0c:	f503 63d6 	add.w	r3, r3, #1712	@ 0x6b0
 8009e10:	ed93 6b00 	vldr	d6, [r3]
 8009e14:	4b45      	ldr	r3, [pc, #276]	@ (8009f2c <ldl_factor+0x1750>)
 8009e16:	f503 63ee 	add.w	r3, r3, #1904	@ 0x770
 8009e1a:	ed13 5b02 	vldr	d5, [r3, #-8]
 8009e1e:	4b43      	ldr	r3, [pc, #268]	@ (8009f2c <ldl_factor+0x1750>)
 8009e20:	f503 6308 	add.w	r3, r3, #2176	@ 0x880
 8009e24:	ed93 7b00 	vldr	d7, [r3]
 8009e28:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009e2c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009e30:	4b3e      	ldr	r3, [pc, #248]	@ (8009f2c <ldl_factor+0x1750>)
 8009e32:	f503 63ee 	add.w	r3, r3, #1904	@ 0x770
 8009e36:	ed93 5b00 	vldr	d5, [r3]
 8009e3a:	4b3c      	ldr	r3, [pc, #240]	@ (8009f2c <ldl_factor+0x1750>)
 8009e3c:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 8009e40:	ed93 7b00 	vldr	d7, [r3]
 8009e44:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009e48:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009e4c:	4b37      	ldr	r3, [pc, #220]	@ (8009f2c <ldl_factor+0x1750>)
 8009e4e:	f503 63f0 	add.w	r3, r3, #1920	@ 0x780
 8009e52:	ed13 5b02 	vldr	d5, [r3, #-8]
 8009e56:	4b35      	ldr	r3, [pc, #212]	@ (8009f2c <ldl_factor+0x1750>)
 8009e58:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8009e5c:	ed93 7b00 	vldr	d7, [r3]
 8009e60:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009e64:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009e68:	4b30      	ldr	r3, [pc, #192]	@ (8009f2c <ldl_factor+0x1750>)
 8009e6a:	f503 63f0 	add.w	r3, r3, #1920	@ 0x780
 8009e6e:	ed93 5b00 	vldr	d5, [r3]
 8009e72:	4b2e      	ldr	r3, [pc, #184]	@ (8009f2c <ldl_factor+0x1750>)
 8009e74:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 8009e78:	ed93 7b00 	vldr	d7, [r3]
 8009e7c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009e80:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009e84:	4b29      	ldr	r3, [pc, #164]	@ (8009f2c <ldl_factor+0x1750>)
 8009e86:	f503 63f2 	add.w	r3, r3, #1936	@ 0x790
 8009e8a:	ed13 5b02 	vldr	d5, [r3, #-8]
 8009e8e:	4b27      	ldr	r3, [pc, #156]	@ (8009f2c <ldl_factor+0x1750>)
 8009e90:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 8009e94:	ed93 7b00 	vldr	d7, [r3]
 8009e98:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009e9c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009ea0:	4b22      	ldr	r3, [pc, #136]	@ (8009f2c <ldl_factor+0x1750>)
 8009ea2:	f503 630f 	add.w	r3, r3, #2288	@ 0x8f0
 8009ea6:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.d[21] = work.v[21];
 8009eaa:	4b20      	ldr	r3, [pc, #128]	@ (8009f2c <ldl_factor+0x1750>)
 8009eac:	f503 630f 	add.w	r3, r3, #2288	@ 0x8f0
 8009eb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009eb4:	491d      	ldr	r1, [pc, #116]	@ (8009f2c <ldl_factor+0x1750>)
 8009eb6:	f501 6104 	add.w	r1, r1, #2112	@ 0x840
 8009eba:	e941 2302 	strd	r2, r3, [r1, #-8]
  if (work.d[21] > 0)
 8009ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8009f2c <ldl_factor+0x1750>)
 8009ec0:	f503 6304 	add.w	r3, r3, #2112	@ 0x840
 8009ec4:	ed13 7b02 	vldr	d7, [r3, #-8]
 8009ec8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ed0:	dd0a      	ble.n	8009ee8 <ldl_factor+0x170c>
    work.d[21] = -cvxgen_settings.kkt_reg;
 8009ed2:	4b17      	ldr	r3, [pc, #92]	@ (8009f30 <ldl_factor+0x1754>)
 8009ed4:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8009ed8:	eeb1 7b47 	vneg.f64	d7, d7
 8009edc:	4b13      	ldr	r3, [pc, #76]	@ (8009f2c <ldl_factor+0x1750>)
 8009ede:	f503 6304 	add.w	r3, r3, #2112	@ 0x840
 8009ee2:	ed03 7b02 	vstr	d7, [r3, #-8]
 8009ee6:	e00e      	b.n	8009f06 <ldl_factor+0x172a>
  else
    work.d[21] -= cvxgen_settings.kkt_reg;
 8009ee8:	4b10      	ldr	r3, [pc, #64]	@ (8009f2c <ldl_factor+0x1750>)
 8009eea:	f503 6304 	add.w	r3, r3, #2112	@ 0x840
 8009eee:	ed13 6b02 	vldr	d6, [r3, #-8]
 8009ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8009f30 <ldl_factor+0x1754>)
 8009ef4:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8009ef8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009efc:	4b0b      	ldr	r3, [pc, #44]	@ (8009f2c <ldl_factor+0x1750>)
 8009efe:	f503 6304 	add.w	r3, r3, #2112	@ 0x840
 8009f02:	ed03 7b02 	vstr	d7, [r3, #-8]
  work.d_inv[21] = 1/work.d[21];
 8009f06:	4b09      	ldr	r3, [pc, #36]	@ (8009f2c <ldl_factor+0x1750>)
 8009f08:	f503 6304 	add.w	r3, r3, #2112	@ 0x840
 8009f0c:	ed13 6b02 	vldr	d6, [r3, #-8]
 8009f10:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8009f14:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009f18:	4b04      	ldr	r3, [pc, #16]	@ (8009f2c <ldl_factor+0x1750>)
 8009f1a:	f503 631a 	add.w	r3, r3, #2464	@ 0x9a0
 8009f1e:	ed03 7b02 	vstr	d7, [r3, #-8]
#ifndef ZERO_LIBRARY_MODE
  if (settings.debug) {
    printf("Squared Frobenius for factorization is %.8g.\n", check_factorization());
  }
#endif
}
 8009f22:	bf00      	nop
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr
 8009f2c:	24007070 	.word	0x24007070
 8009f30:	24007a40 	.word	0x24007a40

08009f34 <matrix_multiply>:
  residual += temp*temp;
  temp = work.KKT[47]-work.L[23]*work.d[14]*work.L[18]-work.L[24]*work.d[16]*work.L[19]-work.L[25]*work.d[18]*work.L[20]-work.L[26]*work.d[20]*1;
  residual += temp*temp;
  return residual;
}
void matrix_multiply(double *result, double *source) {
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
  /* Finds result = A*source. */
  result[0] = work.KKT[28]*source[0]+work.KKT[29]*source[1]+work.KKT[30]*source[2]+work.KKT[31]*source[3]+work.KKT[19]*source[13]+work.KKT[27]*source[17]+work.KKT[32]*source[21];
 8009f3e:	4bd9      	ldr	r3, [pc, #868]	@ (800a2a4 <matrix_multiply+0x370>)
 8009f40:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 8009f44:	ed93 6b00 	vldr	d6, [r3]
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	ed93 7b00 	vldr	d7, [r3]
 8009f4e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009f52:	4bd4      	ldr	r3, [pc, #848]	@ (800a2a4 <matrix_multiply+0x370>)
 8009f54:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 8009f58:	ed13 5b02 	vldr	d5, [r3, #-8]
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	3308      	adds	r3, #8
 8009f60:	ed93 7b00 	vldr	d7, [r3]
 8009f64:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009f68:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009f6c:	4bcd      	ldr	r3, [pc, #820]	@ (800a2a4 <matrix_multiply+0x370>)
 8009f6e:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 8009f72:	ed93 5b00 	vldr	d5, [r3]
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	3310      	adds	r3, #16
 8009f7a:	ed93 7b00 	vldr	d7, [r3]
 8009f7e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009f82:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009f86:	4bc7      	ldr	r3, [pc, #796]	@ (800a2a4 <matrix_multiply+0x370>)
 8009f88:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8009f8c:	ed13 5b02 	vldr	d5, [r3, #-8]
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	3318      	adds	r3, #24
 8009f94:	ed93 7b00 	vldr	d7, [r3]
 8009f98:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009f9c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009fa0:	4bc0      	ldr	r3, [pc, #768]	@ (800a2a4 <matrix_multiply+0x370>)
 8009fa2:	f503 63ba 	add.w	r3, r3, #1488	@ 0x5d0
 8009fa6:	ed13 5b02 	vldr	d5, [r3, #-8]
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	3368      	adds	r3, #104	@ 0x68
 8009fae:	ed93 7b00 	vldr	d7, [r3]
 8009fb2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009fb6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009fba:	4bba      	ldr	r3, [pc, #744]	@ (800a2a4 <matrix_multiply+0x370>)
 8009fbc:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 8009fc0:	ed13 5b02 	vldr	d5, [r3, #-8]
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	3388      	adds	r3, #136	@ 0x88
 8009fc8:	ed93 7b00 	vldr	d7, [r3]
 8009fcc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009fd0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009fd4:	4bb3      	ldr	r3, [pc, #716]	@ (800a2a4 <matrix_multiply+0x370>)
 8009fd6:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8009fda:	ed93 5b00 	vldr	d5, [r3]
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	33a8      	adds	r3, #168	@ 0xa8
 8009fe2:	ed93 7b00 	vldr	d7, [r3]
 8009fe6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009fea:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	ed83 7b00 	vstr	d7, [r3]
  result[1] = work.KKT[29]*source[0]+work.KKT[35]*source[1]+work.KKT[36]*source[2]+work.KKT[37]*source[3]+work.KKT[21]*source[14]+work.KKT[34]*source[18]+work.KKT[38]*source[21];
 8009ff4:	4bab      	ldr	r3, [pc, #684]	@ (800a2a4 <matrix_multiply+0x370>)
 8009ff6:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 8009ffa:	ed13 6b02 	vldr	d6, [r3, #-8]
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	ed93 7b00 	vldr	d7, [r3]
 800a004:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a008:	4ba6      	ldr	r3, [pc, #664]	@ (800a2a4 <matrix_multiply+0x370>)
 800a00a:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 800a00e:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	3308      	adds	r3, #8
 800a016:	ed93 7b00 	vldr	d7, [r3]
 800a01a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a01e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a022:	4ba0      	ldr	r3, [pc, #640]	@ (800a2a4 <matrix_multiply+0x370>)
 800a024:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 800a028:	ed93 5b00 	vldr	d5, [r3]
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	3310      	adds	r3, #16
 800a030:	ed93 7b00 	vldr	d7, [r3]
 800a034:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a038:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a03c:	4b99      	ldr	r3, [pc, #612]	@ (800a2a4 <matrix_multiply+0x370>)
 800a03e:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800a042:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	3318      	adds	r3, #24
 800a04a:	ed93 7b00 	vldr	d7, [r3]
 800a04e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a052:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a056:	4b93      	ldr	r3, [pc, #588]	@ (800a2a4 <matrix_multiply+0x370>)
 800a058:	f503 63bc 	add.w	r3, r3, #1504	@ 0x5e0
 800a05c:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	3370      	adds	r3, #112	@ 0x70
 800a064:	ed93 7b00 	vldr	d7, [r3]
 800a068:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a06c:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a070:	4b8c      	ldr	r3, [pc, #560]	@ (800a2a4 <matrix_multiply+0x370>)
 800a072:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 800a076:	ed93 5b00 	vldr	d5, [r3]
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	3390      	adds	r3, #144	@ 0x90
 800a07e:	ed93 7b00 	vldr	d7, [r3]
 800a082:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a086:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a08a:	4b86      	ldr	r3, [pc, #536]	@ (800a2a4 <matrix_multiply+0x370>)
 800a08c:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800a090:	ed93 5b00 	vldr	d5, [r3]
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	33a8      	adds	r3, #168	@ 0xa8
 800a098:	ed93 7b00 	vldr	d7, [r3]
 800a09c:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	3308      	adds	r3, #8
 800a0a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a0a8:	ed83 7b00 	vstr	d7, [r3]
  result[2] = work.KKT[30]*source[0]+work.KKT[36]*source[1]+work.KKT[41]*source[2]+work.KKT[42]*source[3]+work.KKT[23]*source[15]+work.KKT[40]*source[19]+work.KKT[43]*source[21];
 800a0ac:	4b7d      	ldr	r3, [pc, #500]	@ (800a2a4 <matrix_multiply+0x370>)
 800a0ae:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 800a0b2:	ed93 6b00 	vldr	d6, [r3]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	ed93 7b00 	vldr	d7, [r3]
 800a0bc:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a0c0:	4b78      	ldr	r3, [pc, #480]	@ (800a2a4 <matrix_multiply+0x370>)
 800a0c2:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 800a0c6:	ed93 5b00 	vldr	d5, [r3]
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	3308      	adds	r3, #8
 800a0ce:	ed93 7b00 	vldr	d7, [r3]
 800a0d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a0d6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a0da:	4b72      	ldr	r3, [pc, #456]	@ (800a2a4 <matrix_multiply+0x370>)
 800a0dc:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 800a0e0:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	3310      	adds	r3, #16
 800a0e8:	ed93 7b00 	vldr	d7, [r3]
 800a0ec:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a0f0:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a0f4:	4b6b      	ldr	r3, [pc, #428]	@ (800a2a4 <matrix_multiply+0x370>)
 800a0f6:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 800a0fa:	ed93 5b00 	vldr	d5, [r3]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	3318      	adds	r3, #24
 800a102:	ed93 7b00 	vldr	d7, [r3]
 800a106:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a10a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a10e:	4b65      	ldr	r3, [pc, #404]	@ (800a2a4 <matrix_multiply+0x370>)
 800a110:	f503 63be 	add.w	r3, r3, #1520	@ 0x5f0
 800a114:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	3378      	adds	r3, #120	@ 0x78
 800a11c:	ed93 7b00 	vldr	d7, [r3]
 800a120:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a124:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a128:	4b5e      	ldr	r3, [pc, #376]	@ (800a2a4 <matrix_multiply+0x370>)
 800a12a:	f503 63ce 	add.w	r3, r3, #1648	@ 0x670
 800a12e:	ed93 5b00 	vldr	d5, [r3]
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	3398      	adds	r3, #152	@ 0x98
 800a136:	ed93 7b00 	vldr	d7, [r3]
 800a13a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a13e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a142:	4b58      	ldr	r3, [pc, #352]	@ (800a2a4 <matrix_multiply+0x370>)
 800a144:	f503 63d2 	add.w	r3, r3, #1680	@ 0x690
 800a148:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	33a8      	adds	r3, #168	@ 0xa8
 800a150:	ed93 7b00 	vldr	d7, [r3]
 800a154:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	3310      	adds	r3, #16
 800a15c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a160:	ed83 7b00 	vstr	d7, [r3]
  result[3] = work.KKT[31]*source[0]+work.KKT[37]*source[1]+work.KKT[42]*source[2]+work.KKT[46]*source[3]+work.KKT[25]*source[16]+work.KKT[45]*source[20]+work.KKT[47]*source[21];
 800a164:	4b4f      	ldr	r3, [pc, #316]	@ (800a2a4 <matrix_multiply+0x370>)
 800a166:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 800a16a:	ed13 6b02 	vldr	d6, [r3, #-8]
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	ed93 7b00 	vldr	d7, [r3]
 800a174:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a178:	4b4a      	ldr	r3, [pc, #296]	@ (800a2a4 <matrix_multiply+0x370>)
 800a17a:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800a17e:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	3308      	adds	r3, #8
 800a186:	ed93 7b00 	vldr	d7, [r3]
 800a18a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a18e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a192:	4b44      	ldr	r3, [pc, #272]	@ (800a2a4 <matrix_multiply+0x370>)
 800a194:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 800a198:	ed93 5b00 	vldr	d5, [r3]
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	3310      	adds	r3, #16
 800a1a0:	ed93 7b00 	vldr	d7, [r3]
 800a1a4:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a1a8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a1ac:	4b3d      	ldr	r3, [pc, #244]	@ (800a2a4 <matrix_multiply+0x370>)
 800a1ae:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800a1b2:	ed93 5b00 	vldr	d5, [r3]
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	3318      	adds	r3, #24
 800a1ba:	ed93 7b00 	vldr	d7, [r3]
 800a1be:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a1c2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a1c6:	4b37      	ldr	r3, [pc, #220]	@ (800a2a4 <matrix_multiply+0x370>)
 800a1c8:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800a1cc:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	3380      	adds	r3, #128	@ 0x80
 800a1d4:	ed93 7b00 	vldr	d7, [r3]
 800a1d8:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a1dc:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a1e0:	4b30      	ldr	r3, [pc, #192]	@ (800a2a4 <matrix_multiply+0x370>)
 800a1e2:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800a1e6:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	33a0      	adds	r3, #160	@ 0xa0
 800a1ee:	ed93 7b00 	vldr	d7, [r3]
 800a1f2:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a1f6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a1fa:	4b2a      	ldr	r3, [pc, #168]	@ (800a2a4 <matrix_multiply+0x370>)
 800a1fc:	f503 63d6 	add.w	r3, r3, #1712	@ 0x6b0
 800a200:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	33a8      	adds	r3, #168	@ 0xa8
 800a208:	ed93 7b00 	vldr	d7, [r3]
 800a20c:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	3318      	adds	r3, #24
 800a214:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a218:	ed83 7b00 	vstr	d7, [r3]
  result[4] = work.KKT[0]*source[4]+work.KKT[1]*source[13];
 800a21c:	4b21      	ldr	r3, [pc, #132]	@ (800a2a4 <matrix_multiply+0x370>)
 800a21e:	f503 63a6 	add.w	r3, r3, #1328	@ 0x530
 800a222:	ed93 6b00 	vldr	d6, [r3]
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	3320      	adds	r3, #32
 800a22a:	ed93 7b00 	vldr	d7, [r3]
 800a22e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a232:	4b1c      	ldr	r3, [pc, #112]	@ (800a2a4 <matrix_multiply+0x370>)
 800a234:	f503 63a8 	add.w	r3, r3, #1344	@ 0x540
 800a238:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	3368      	adds	r3, #104	@ 0x68
 800a240:	ed93 7b00 	vldr	d7, [r3]
 800a244:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	3320      	adds	r3, #32
 800a24c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a250:	ed83 7b00 	vstr	d7, [r3]
  result[5] = work.KKT[2]*source[5]+work.KKT[3]*source[14];
 800a254:	4b13      	ldr	r3, [pc, #76]	@ (800a2a4 <matrix_multiply+0x370>)
 800a256:	f503 63a8 	add.w	r3, r3, #1344	@ 0x540
 800a25a:	ed93 6b00 	vldr	d6, [r3]
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	3328      	adds	r3, #40	@ 0x28
 800a262:	ed93 7b00 	vldr	d7, [r3]
 800a266:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a26a:	4b0e      	ldr	r3, [pc, #56]	@ (800a2a4 <matrix_multiply+0x370>)
 800a26c:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 800a270:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	3370      	adds	r3, #112	@ 0x70
 800a278:	ed93 7b00 	vldr	d7, [r3]
 800a27c:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	3328      	adds	r3, #40	@ 0x28
 800a284:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a288:	ed83 7b00 	vstr	d7, [r3]
  result[6] = work.KKT[4]*source[6]+work.KKT[5]*source[15];
 800a28c:	4b05      	ldr	r3, [pc, #20]	@ (800a2a4 <matrix_multiply+0x370>)
 800a28e:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 800a292:	ed93 6b00 	vldr	d6, [r3]
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	3330      	adds	r3, #48	@ 0x30
 800a29a:	ed93 7b00 	vldr	d7, [r3]
 800a29e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a2a2:	e001      	b.n	800a2a8 <matrix_multiply+0x374>
 800a2a4:	24007070 	.word	0x24007070
 800a2a8:	4bd8      	ldr	r3, [pc, #864]	@ (800a60c <matrix_multiply+0x6d8>)
 800a2aa:	f503 63ac 	add.w	r3, r3, #1376	@ 0x560
 800a2ae:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	3378      	adds	r3, #120	@ 0x78
 800a2b6:	ed93 7b00 	vldr	d7, [r3]
 800a2ba:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	3330      	adds	r3, #48	@ 0x30
 800a2c2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a2c6:	ed83 7b00 	vstr	d7, [r3]
  result[7] = work.KKT[6]*source[7]+work.KKT[7]*source[16];
 800a2ca:	4bd0      	ldr	r3, [pc, #832]	@ (800a60c <matrix_multiply+0x6d8>)
 800a2cc:	f503 63ac 	add.w	r3, r3, #1376	@ 0x560
 800a2d0:	ed93 6b00 	vldr	d6, [r3]
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	3338      	adds	r3, #56	@ 0x38
 800a2d8:	ed93 7b00 	vldr	d7, [r3]
 800a2dc:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a2e0:	4bca      	ldr	r3, [pc, #808]	@ (800a60c <matrix_multiply+0x6d8>)
 800a2e2:	f503 63ae 	add.w	r3, r3, #1392	@ 0x570
 800a2e6:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	3380      	adds	r3, #128	@ 0x80
 800a2ee:	ed93 7b00 	vldr	d7, [r3]
 800a2f2:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	3338      	adds	r3, #56	@ 0x38
 800a2fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a2fe:	ed83 7b00 	vstr	d7, [r3]
  result[8] = work.KKT[8]*source[8]+work.KKT[9]*source[17];
 800a302:	4bc2      	ldr	r3, [pc, #776]	@ (800a60c <matrix_multiply+0x6d8>)
 800a304:	f503 63ae 	add.w	r3, r3, #1392	@ 0x570
 800a308:	ed93 6b00 	vldr	d6, [r3]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	3340      	adds	r3, #64	@ 0x40
 800a310:	ed93 7b00 	vldr	d7, [r3]
 800a314:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a318:	4bbc      	ldr	r3, [pc, #752]	@ (800a60c <matrix_multiply+0x6d8>)
 800a31a:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 800a31e:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	3388      	adds	r3, #136	@ 0x88
 800a326:	ed93 7b00 	vldr	d7, [r3]
 800a32a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	3340      	adds	r3, #64	@ 0x40
 800a332:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a336:	ed83 7b00 	vstr	d7, [r3]
  result[9] = work.KKT[10]*source[9]+work.KKT[11]*source[18];
 800a33a:	4bb4      	ldr	r3, [pc, #720]	@ (800a60c <matrix_multiply+0x6d8>)
 800a33c:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 800a340:	ed93 6b00 	vldr	d6, [r3]
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	3348      	adds	r3, #72	@ 0x48
 800a348:	ed93 7b00 	vldr	d7, [r3]
 800a34c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a350:	4bae      	ldr	r3, [pc, #696]	@ (800a60c <matrix_multiply+0x6d8>)
 800a352:	f503 63b2 	add.w	r3, r3, #1424	@ 0x590
 800a356:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	3390      	adds	r3, #144	@ 0x90
 800a35e:	ed93 7b00 	vldr	d7, [r3]
 800a362:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	3348      	adds	r3, #72	@ 0x48
 800a36a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a36e:	ed83 7b00 	vstr	d7, [r3]
  result[10] = work.KKT[12]*source[10]+work.KKT[13]*source[19];
 800a372:	4ba6      	ldr	r3, [pc, #664]	@ (800a60c <matrix_multiply+0x6d8>)
 800a374:	f503 63b2 	add.w	r3, r3, #1424	@ 0x590
 800a378:	ed93 6b00 	vldr	d6, [r3]
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	3350      	adds	r3, #80	@ 0x50
 800a380:	ed93 7b00 	vldr	d7, [r3]
 800a384:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a388:	4ba0      	ldr	r3, [pc, #640]	@ (800a60c <matrix_multiply+0x6d8>)
 800a38a:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 800a38e:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	3398      	adds	r3, #152	@ 0x98
 800a396:	ed93 7b00 	vldr	d7, [r3]
 800a39a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	3350      	adds	r3, #80	@ 0x50
 800a3a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a3a6:	ed83 7b00 	vstr	d7, [r3]
  result[11] = work.KKT[14]*source[11]+work.KKT[15]*source[20];
 800a3aa:	4b98      	ldr	r3, [pc, #608]	@ (800a60c <matrix_multiply+0x6d8>)
 800a3ac:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 800a3b0:	ed93 6b00 	vldr	d6, [r3]
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	3358      	adds	r3, #88	@ 0x58
 800a3b8:	ed93 7b00 	vldr	d7, [r3]
 800a3bc:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a3c0:	4b92      	ldr	r3, [pc, #584]	@ (800a60c <matrix_multiply+0x6d8>)
 800a3c2:	f503 63b6 	add.w	r3, r3, #1456	@ 0x5b0
 800a3c6:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	33a0      	adds	r3, #160	@ 0xa0
 800a3ce:	ed93 7b00 	vldr	d7, [r3]
 800a3d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	3358      	adds	r3, #88	@ 0x58
 800a3da:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a3de:	ed83 7b00 	vstr	d7, [r3]
  result[12] = work.KKT[16]*source[12]+work.KKT[17]*source[21];
 800a3e2:	4b8a      	ldr	r3, [pc, #552]	@ (800a60c <matrix_multiply+0x6d8>)
 800a3e4:	f503 63b6 	add.w	r3, r3, #1456	@ 0x5b0
 800a3e8:	ed93 6b00 	vldr	d6, [r3]
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	3360      	adds	r3, #96	@ 0x60
 800a3f0:	ed93 7b00 	vldr	d7, [r3]
 800a3f4:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a3f8:	4b84      	ldr	r3, [pc, #528]	@ (800a60c <matrix_multiply+0x6d8>)
 800a3fa:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 800a3fe:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	33a8      	adds	r3, #168	@ 0xa8
 800a406:	ed93 7b00 	vldr	d7, [r3]
 800a40a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	3360      	adds	r3, #96	@ 0x60
 800a412:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a416:	ed83 7b00 	vstr	d7, [r3]
  result[13] = work.KKT[1]*source[4]+work.KKT[18]*source[13]+work.KKT[19]*source[0];
 800a41a:	4b7c      	ldr	r3, [pc, #496]	@ (800a60c <matrix_multiply+0x6d8>)
 800a41c:	f503 63a8 	add.w	r3, r3, #1344	@ 0x540
 800a420:	ed13 6b02 	vldr	d6, [r3, #-8]
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	3320      	adds	r3, #32
 800a428:	ed93 7b00 	vldr	d7, [r3]
 800a42c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a430:	4b76      	ldr	r3, [pc, #472]	@ (800a60c <matrix_multiply+0x6d8>)
 800a432:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 800a436:	ed93 5b00 	vldr	d5, [r3]
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	3368      	adds	r3, #104	@ 0x68
 800a43e:	ed93 7b00 	vldr	d7, [r3]
 800a442:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a446:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a44a:	4b70      	ldr	r3, [pc, #448]	@ (800a60c <matrix_multiply+0x6d8>)
 800a44c:	f503 63ba 	add.w	r3, r3, #1488	@ 0x5d0
 800a450:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	ed93 7b00 	vldr	d7, [r3]
 800a45a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	3368      	adds	r3, #104	@ 0x68
 800a462:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a466:	ed83 7b00 	vstr	d7, [r3]
  result[14] = work.KKT[3]*source[5]+work.KKT[20]*source[14]+work.KKT[21]*source[1];
 800a46a:	4b68      	ldr	r3, [pc, #416]	@ (800a60c <matrix_multiply+0x6d8>)
 800a46c:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 800a470:	ed13 6b02 	vldr	d6, [r3, #-8]
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	3328      	adds	r3, #40	@ 0x28
 800a478:	ed93 7b00 	vldr	d7, [r3]
 800a47c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a480:	4b62      	ldr	r3, [pc, #392]	@ (800a60c <matrix_multiply+0x6d8>)
 800a482:	f503 63ba 	add.w	r3, r3, #1488	@ 0x5d0
 800a486:	ed93 5b00 	vldr	d5, [r3]
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	3370      	adds	r3, #112	@ 0x70
 800a48e:	ed93 7b00 	vldr	d7, [r3]
 800a492:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a496:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a49a:	4b5c      	ldr	r3, [pc, #368]	@ (800a60c <matrix_multiply+0x6d8>)
 800a49c:	f503 63bc 	add.w	r3, r3, #1504	@ 0x5e0
 800a4a0:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	3308      	adds	r3, #8
 800a4a8:	ed93 7b00 	vldr	d7, [r3]
 800a4ac:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	3370      	adds	r3, #112	@ 0x70
 800a4b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a4b8:	ed83 7b00 	vstr	d7, [r3]
  result[15] = work.KKT[5]*source[6]+work.KKT[22]*source[15]+work.KKT[23]*source[2];
 800a4bc:	4b53      	ldr	r3, [pc, #332]	@ (800a60c <matrix_multiply+0x6d8>)
 800a4be:	f503 63ac 	add.w	r3, r3, #1376	@ 0x560
 800a4c2:	ed13 6b02 	vldr	d6, [r3, #-8]
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	3330      	adds	r3, #48	@ 0x30
 800a4ca:	ed93 7b00 	vldr	d7, [r3]
 800a4ce:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a4d2:	4b4e      	ldr	r3, [pc, #312]	@ (800a60c <matrix_multiply+0x6d8>)
 800a4d4:	f503 63bc 	add.w	r3, r3, #1504	@ 0x5e0
 800a4d8:	ed93 5b00 	vldr	d5, [r3]
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	3378      	adds	r3, #120	@ 0x78
 800a4e0:	ed93 7b00 	vldr	d7, [r3]
 800a4e4:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a4e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a4ec:	4b47      	ldr	r3, [pc, #284]	@ (800a60c <matrix_multiply+0x6d8>)
 800a4ee:	f503 63be 	add.w	r3, r3, #1520	@ 0x5f0
 800a4f2:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	3310      	adds	r3, #16
 800a4fa:	ed93 7b00 	vldr	d7, [r3]
 800a4fe:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	3378      	adds	r3, #120	@ 0x78
 800a506:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a50a:	ed83 7b00 	vstr	d7, [r3]
  result[16] = work.KKT[7]*source[7]+work.KKT[24]*source[16]+work.KKT[25]*source[3];
 800a50e:	4b3f      	ldr	r3, [pc, #252]	@ (800a60c <matrix_multiply+0x6d8>)
 800a510:	f503 63ae 	add.w	r3, r3, #1392	@ 0x570
 800a514:	ed13 6b02 	vldr	d6, [r3, #-8]
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	3338      	adds	r3, #56	@ 0x38
 800a51c:	ed93 7b00 	vldr	d7, [r3]
 800a520:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a524:	4b39      	ldr	r3, [pc, #228]	@ (800a60c <matrix_multiply+0x6d8>)
 800a526:	f503 63be 	add.w	r3, r3, #1520	@ 0x5f0
 800a52a:	ed93 5b00 	vldr	d5, [r3]
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	3380      	adds	r3, #128	@ 0x80
 800a532:	ed93 7b00 	vldr	d7, [r3]
 800a536:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a53a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a53e:	4b33      	ldr	r3, [pc, #204]	@ (800a60c <matrix_multiply+0x6d8>)
 800a540:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800a544:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	3318      	adds	r3, #24
 800a54c:	ed93 7b00 	vldr	d7, [r3]
 800a550:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	3380      	adds	r3, #128	@ 0x80
 800a558:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a55c:	ed83 7b00 	vstr	d7, [r3]
  result[17] = work.KKT[9]*source[8]+work.KKT[26]*source[17]+work.KKT[27]*source[0];
 800a560:	4b2a      	ldr	r3, [pc, #168]	@ (800a60c <matrix_multiply+0x6d8>)
 800a562:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 800a566:	ed13 6b02 	vldr	d6, [r3, #-8]
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	3340      	adds	r3, #64	@ 0x40
 800a56e:	ed93 7b00 	vldr	d7, [r3]
 800a572:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a576:	4b25      	ldr	r3, [pc, #148]	@ (800a60c <matrix_multiply+0x6d8>)
 800a578:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800a57c:	ed93 5b00 	vldr	d5, [r3]
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	3388      	adds	r3, #136	@ 0x88
 800a584:	ed93 7b00 	vldr	d7, [r3]
 800a588:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a58c:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a590:	4b1e      	ldr	r3, [pc, #120]	@ (800a60c <matrix_multiply+0x6d8>)
 800a592:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 800a596:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	ed93 7b00 	vldr	d7, [r3]
 800a5a0:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	3388      	adds	r3, #136	@ 0x88
 800a5a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a5ac:	ed83 7b00 	vstr	d7, [r3]
  result[18] = work.KKT[11]*source[9]+work.KKT[33]*source[18]+work.KKT[34]*source[1];
 800a5b0:	4b16      	ldr	r3, [pc, #88]	@ (800a60c <matrix_multiply+0x6d8>)
 800a5b2:	f503 63b2 	add.w	r3, r3, #1424	@ 0x590
 800a5b6:	ed13 6b02 	vldr	d6, [r3, #-8]
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	3348      	adds	r3, #72	@ 0x48
 800a5be:	ed93 7b00 	vldr	d7, [r3]
 800a5c2:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a5c6:	4b11      	ldr	r3, [pc, #68]	@ (800a60c <matrix_multiply+0x6d8>)
 800a5c8:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 800a5cc:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	3390      	adds	r3, #144	@ 0x90
 800a5d4:	ed93 7b00 	vldr	d7, [r3]
 800a5d8:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a5dc:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a5e0:	4b0a      	ldr	r3, [pc, #40]	@ (800a60c <matrix_multiply+0x6d8>)
 800a5e2:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 800a5e6:	ed93 5b00 	vldr	d5, [r3]
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	3308      	adds	r3, #8
 800a5ee:	ed93 7b00 	vldr	d7, [r3]
 800a5f2:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	3390      	adds	r3, #144	@ 0x90
 800a5fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a5fe:	ed83 7b00 	vstr	d7, [r3]
  result[19] = work.KKT[13]*source[10]+work.KKT[39]*source[19]+work.KKT[40]*source[2];
 800a602:	4b02      	ldr	r3, [pc, #8]	@ (800a60c <matrix_multiply+0x6d8>)
 800a604:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 800a608:	e002      	b.n	800a610 <matrix_multiply+0x6dc>
 800a60a:	bf00      	nop
 800a60c:	24007070 	.word	0x24007070
 800a610:	ed13 6b02 	vldr	d6, [r3, #-8]
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	3350      	adds	r3, #80	@ 0x50
 800a618:	ed93 7b00 	vldr	d7, [r3]
 800a61c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a620:	4b4d      	ldr	r3, [pc, #308]	@ (800a758 <matrix_multiply+0x824>)
 800a622:	f503 63ce 	add.w	r3, r3, #1648	@ 0x670
 800a626:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	3398      	adds	r3, #152	@ 0x98
 800a62e:	ed93 7b00 	vldr	d7, [r3]
 800a632:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a636:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a63a:	4b47      	ldr	r3, [pc, #284]	@ (800a758 <matrix_multiply+0x824>)
 800a63c:	f503 63ce 	add.w	r3, r3, #1648	@ 0x670
 800a640:	ed93 5b00 	vldr	d5, [r3]
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	3310      	adds	r3, #16
 800a648:	ed93 7b00 	vldr	d7, [r3]
 800a64c:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	3398      	adds	r3, #152	@ 0x98
 800a654:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a658:	ed83 7b00 	vstr	d7, [r3]
  result[20] = work.KKT[15]*source[11]+work.KKT[44]*source[20]+work.KKT[45]*source[3];
 800a65c:	4b3e      	ldr	r3, [pc, #248]	@ (800a758 <matrix_multiply+0x824>)
 800a65e:	f503 63b6 	add.w	r3, r3, #1456	@ 0x5b0
 800a662:	ed13 6b02 	vldr	d6, [r3, #-8]
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	3358      	adds	r3, #88	@ 0x58
 800a66a:	ed93 7b00 	vldr	d7, [r3]
 800a66e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a672:	4b39      	ldr	r3, [pc, #228]	@ (800a758 <matrix_multiply+0x824>)
 800a674:	f503 63d2 	add.w	r3, r3, #1680	@ 0x690
 800a678:	ed93 5b00 	vldr	d5, [r3]
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	33a0      	adds	r3, #160	@ 0xa0
 800a680:	ed93 7b00 	vldr	d7, [r3]
 800a684:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a688:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a68c:	4b32      	ldr	r3, [pc, #200]	@ (800a758 <matrix_multiply+0x824>)
 800a68e:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800a692:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	3318      	adds	r3, #24
 800a69a:	ed93 7b00 	vldr	d7, [r3]
 800a69e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	33a0      	adds	r3, #160	@ 0xa0
 800a6a6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a6aa:	ed83 7b00 	vstr	d7, [r3]
  result[21] = work.KKT[17]*source[12]+work.KKT[48]*source[21]+work.KKT[32]*source[0]+work.KKT[38]*source[1]+work.KKT[43]*source[2]+work.KKT[47]*source[3];
 800a6ae:	4b2a      	ldr	r3, [pc, #168]	@ (800a758 <matrix_multiply+0x824>)
 800a6b0:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 800a6b4:	ed13 6b02 	vldr	d6, [r3, #-8]
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	3360      	adds	r3, #96	@ 0x60
 800a6bc:	ed93 7b00 	vldr	d7, [r3]
 800a6c0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a6c4:	4b24      	ldr	r3, [pc, #144]	@ (800a758 <matrix_multiply+0x824>)
 800a6c6:	f503 63d6 	add.w	r3, r3, #1712	@ 0x6b0
 800a6ca:	ed93 5b00 	vldr	d5, [r3]
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	33a8      	adds	r3, #168	@ 0xa8
 800a6d2:	ed93 7b00 	vldr	d7, [r3]
 800a6d6:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a6da:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a6de:	4b1e      	ldr	r3, [pc, #120]	@ (800a758 <matrix_multiply+0x824>)
 800a6e0:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 800a6e4:	ed93 5b00 	vldr	d5, [r3]
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	ed93 7b00 	vldr	d7, [r3]
 800a6ee:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a6f2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a6f6:	4b18      	ldr	r3, [pc, #96]	@ (800a758 <matrix_multiply+0x824>)
 800a6f8:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800a6fc:	ed93 5b00 	vldr	d5, [r3]
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	3308      	adds	r3, #8
 800a704:	ed93 7b00 	vldr	d7, [r3]
 800a708:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a70c:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a710:	4b11      	ldr	r3, [pc, #68]	@ (800a758 <matrix_multiply+0x824>)
 800a712:	f503 63d2 	add.w	r3, r3, #1680	@ 0x690
 800a716:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	3310      	adds	r3, #16
 800a71e:	ed93 7b00 	vldr	d7, [r3]
 800a722:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a726:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a72a:	4b0b      	ldr	r3, [pc, #44]	@ (800a758 <matrix_multiply+0x824>)
 800a72c:	f503 63d6 	add.w	r3, r3, #1712	@ 0x6b0
 800a730:	ed13 5b02 	vldr	d5, [r3, #-8]
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	3318      	adds	r3, #24
 800a738:	ed93 7b00 	vldr	d7, [r3]
 800a73c:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	33a8      	adds	r3, #168	@ 0xa8
 800a744:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a748:	ed83 7b00 	vstr	d7, [r3]
}
 800a74c:	bf00      	nop
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr
 800a758:	24007070 	.word	0x24007070

0800a75c <fill_KKT>:
  for (i = 0; i < 4; i++) {
    residual += (target[i] - work.v[i])*(target[i] - work.v[i]);
  }
  return residual;
}
void fill_KKT(void) {
 800a75c:	b480      	push	{r7}
 800a75e:	af00      	add	r7, sp, #0
  work.KKT[28] = params.Q[0];
 800a760:	4b9b      	ldr	r3, [pc, #620]	@ (800a9d0 <fill_KKT+0x274>)
 800a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a766:	499b      	ldr	r1, [pc, #620]	@ (800a9d4 <fill_KKT+0x278>)
 800a768:	f501 61c2 	add.w	r1, r1, #1552	@ 0x610
 800a76c:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[29] = params.Q[4];
 800a770:	4b97      	ldr	r3, [pc, #604]	@ (800a9d0 <fill_KKT+0x274>)
 800a772:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a776:	4997      	ldr	r1, [pc, #604]	@ (800a9d4 <fill_KKT+0x278>)
 800a778:	f501 61c4 	add.w	r1, r1, #1568	@ 0x620
 800a77c:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.KKT[30] = params.Q[8];
 800a780:	4b93      	ldr	r3, [pc, #588]	@ (800a9d0 <fill_KKT+0x274>)
 800a782:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800a786:	4993      	ldr	r1, [pc, #588]	@ (800a9d4 <fill_KKT+0x278>)
 800a788:	f501 61c4 	add.w	r1, r1, #1568	@ 0x620
 800a78c:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[31] = params.Q[12];
 800a790:	4b8f      	ldr	r3, [pc, #572]	@ (800a9d0 <fill_KKT+0x274>)
 800a792:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800a796:	498f      	ldr	r1, [pc, #572]	@ (800a9d4 <fill_KKT+0x278>)
 800a798:	f501 61c6 	add.w	r1, r1, #1584	@ 0x630
 800a79c:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.KKT[35] = params.Q[5];
 800a7a0:	4b8b      	ldr	r3, [pc, #556]	@ (800a9d0 <fill_KKT+0x274>)
 800a7a2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800a7a6:	498b      	ldr	r1, [pc, #556]	@ (800a9d4 <fill_KKT+0x278>)
 800a7a8:	f501 61ca 	add.w	r1, r1, #1616	@ 0x650
 800a7ac:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.KKT[36] = params.Q[9];
 800a7b0:	4b87      	ldr	r3, [pc, #540]	@ (800a9d0 <fill_KKT+0x274>)
 800a7b2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800a7b6:	4987      	ldr	r1, [pc, #540]	@ (800a9d4 <fill_KKT+0x278>)
 800a7b8:	f501 61ca 	add.w	r1, r1, #1616	@ 0x650
 800a7bc:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[37] = params.Q[13];
 800a7c0:	4b83      	ldr	r3, [pc, #524]	@ (800a9d0 <fill_KKT+0x274>)
 800a7c2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800a7c6:	4983      	ldr	r1, [pc, #524]	@ (800a9d4 <fill_KKT+0x278>)
 800a7c8:	f501 61cc 	add.w	r1, r1, #1632	@ 0x660
 800a7cc:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.KKT[41] = params.Q[10];
 800a7d0:	4b7f      	ldr	r3, [pc, #508]	@ (800a9d0 <fill_KKT+0x274>)
 800a7d2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800a7d6:	497f      	ldr	r1, [pc, #508]	@ (800a9d4 <fill_KKT+0x278>)
 800a7d8:	f501 61d0 	add.w	r1, r1, #1664	@ 0x680
 800a7dc:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.KKT[42] = params.Q[14];
 800a7e0:	4b7b      	ldr	r3, [pc, #492]	@ (800a9d0 <fill_KKT+0x274>)
 800a7e2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800a7e6:	497b      	ldr	r1, [pc, #492]	@ (800a9d4 <fill_KKT+0x278>)
 800a7e8:	f501 61d0 	add.w	r1, r1, #1664	@ 0x680
 800a7ec:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[46] = params.Q[15];
 800a7f0:	4b77      	ldr	r3, [pc, #476]	@ (800a9d0 <fill_KKT+0x274>)
 800a7f2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 800a7f6:	4977      	ldr	r1, [pc, #476]	@ (800a9d4 <fill_KKT+0x278>)
 800a7f8:	f501 61d4 	add.w	r1, r1, #1696	@ 0x6a0
 800a7fc:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[0] = work.s_inv_z[0];
 800a800:	4b74      	ldr	r3, [pc, #464]	@ (800a9d4 <fill_KKT+0x278>)
 800a802:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800a806:	4973      	ldr	r1, [pc, #460]	@ (800a9d4 <fill_KKT+0x278>)
 800a808:	f501 61a6 	add.w	r1, r1, #1328	@ 0x530
 800a80c:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[2] = work.s_inv_z[1];
 800a810:	4b70      	ldr	r3, [pc, #448]	@ (800a9d4 <fill_KKT+0x278>)
 800a812:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800a816:	496f      	ldr	r1, [pc, #444]	@ (800a9d4 <fill_KKT+0x278>)
 800a818:	f501 61a8 	add.w	r1, r1, #1344	@ 0x540
 800a81c:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[4] = work.s_inv_z[2];
 800a820:	4b6c      	ldr	r3, [pc, #432]	@ (800a9d4 <fill_KKT+0x278>)
 800a822:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 800a826:	496b      	ldr	r1, [pc, #428]	@ (800a9d4 <fill_KKT+0x278>)
 800a828:	f501 61aa 	add.w	r1, r1, #1360	@ 0x550
 800a82c:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[6] = work.s_inv_z[3];
 800a830:	4b68      	ldr	r3, [pc, #416]	@ (800a9d4 <fill_KKT+0x278>)
 800a832:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 800a836:	4967      	ldr	r1, [pc, #412]	@ (800a9d4 <fill_KKT+0x278>)
 800a838:	f501 61ac 	add.w	r1, r1, #1376	@ 0x560
 800a83c:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[8] = work.s_inv_z[4];
 800a840:	4b64      	ldr	r3, [pc, #400]	@ (800a9d4 <fill_KKT+0x278>)
 800a842:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	@ 0xb0
 800a846:	4963      	ldr	r1, [pc, #396]	@ (800a9d4 <fill_KKT+0x278>)
 800a848:	f501 61ae 	add.w	r1, r1, #1392	@ 0x570
 800a84c:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[10] = work.s_inv_z[5];
 800a850:	4b60      	ldr	r3, [pc, #384]	@ (800a9d4 <fill_KKT+0x278>)
 800a852:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 800a856:	495f      	ldr	r1, [pc, #380]	@ (800a9d4 <fill_KKT+0x278>)
 800a858:	f501 61b0 	add.w	r1, r1, #1408	@ 0x580
 800a85c:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[12] = work.s_inv_z[6];
 800a860:	4b5c      	ldr	r3, [pc, #368]	@ (800a9d4 <fill_KKT+0x278>)
 800a862:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 800a866:	495b      	ldr	r1, [pc, #364]	@ (800a9d4 <fill_KKT+0x278>)
 800a868:	f501 61b2 	add.w	r1, r1, #1424	@ 0x590
 800a86c:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[14] = work.s_inv_z[7];
 800a870:	4b58      	ldr	r3, [pc, #352]	@ (800a9d4 <fill_KKT+0x278>)
 800a872:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 800a876:	4957      	ldr	r1, [pc, #348]	@ (800a9d4 <fill_KKT+0x278>)
 800a878:	f501 61b4 	add.w	r1, r1, #1440	@ 0x5a0
 800a87c:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[16] = work.s_inv_z[8];
 800a880:	4b54      	ldr	r3, [pc, #336]	@ (800a9d4 <fill_KKT+0x278>)
 800a882:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 800a886:	4953      	ldr	r1, [pc, #332]	@ (800a9d4 <fill_KKT+0x278>)
 800a888:	f501 61b6 	add.w	r1, r1, #1456	@ 0x5b0
 800a88c:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[1] = 1;
 800a890:	4b50      	ldr	r3, [pc, #320]	@ (800a9d4 <fill_KKT+0x278>)
 800a892:	f503 63a8 	add.w	r3, r3, #1344	@ 0x540
 800a896:	4619      	mov	r1, r3
 800a898:	f04f 0200 	mov.w	r2, #0
 800a89c:	4b4e      	ldr	r3, [pc, #312]	@ (800a9d8 <fill_KKT+0x27c>)
 800a89e:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.KKT[3] = 1;
 800a8a2:	4b4c      	ldr	r3, [pc, #304]	@ (800a9d4 <fill_KKT+0x278>)
 800a8a4:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	f04f 0200 	mov.w	r2, #0
 800a8ae:	4b4a      	ldr	r3, [pc, #296]	@ (800a9d8 <fill_KKT+0x27c>)
 800a8b0:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.KKT[5] = 1;
 800a8b4:	4b47      	ldr	r3, [pc, #284]	@ (800a9d4 <fill_KKT+0x278>)
 800a8b6:	f503 63ac 	add.w	r3, r3, #1376	@ 0x560
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	f04f 0200 	mov.w	r2, #0
 800a8c0:	4b45      	ldr	r3, [pc, #276]	@ (800a9d8 <fill_KKT+0x27c>)
 800a8c2:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.KKT[7] = 1;
 800a8c6:	4b43      	ldr	r3, [pc, #268]	@ (800a9d4 <fill_KKT+0x278>)
 800a8c8:	f503 63ae 	add.w	r3, r3, #1392	@ 0x570
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	f04f 0200 	mov.w	r2, #0
 800a8d2:	4b41      	ldr	r3, [pc, #260]	@ (800a9d8 <fill_KKT+0x27c>)
 800a8d4:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.KKT[9] = 1;
 800a8d8:	4b3e      	ldr	r3, [pc, #248]	@ (800a9d4 <fill_KKT+0x278>)
 800a8da:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 800a8de:	4619      	mov	r1, r3
 800a8e0:	f04f 0200 	mov.w	r2, #0
 800a8e4:	4b3c      	ldr	r3, [pc, #240]	@ (800a9d8 <fill_KKT+0x27c>)
 800a8e6:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.KKT[11] = 1;
 800a8ea:	4b3a      	ldr	r3, [pc, #232]	@ (800a9d4 <fill_KKT+0x278>)
 800a8ec:	f503 63b2 	add.w	r3, r3, #1424	@ 0x590
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	f04f 0200 	mov.w	r2, #0
 800a8f6:	4b38      	ldr	r3, [pc, #224]	@ (800a9d8 <fill_KKT+0x27c>)
 800a8f8:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.KKT[13] = 1;
 800a8fc:	4b35      	ldr	r3, [pc, #212]	@ (800a9d4 <fill_KKT+0x278>)
 800a8fe:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 800a902:	4619      	mov	r1, r3
 800a904:	f04f 0200 	mov.w	r2, #0
 800a908:	4b33      	ldr	r3, [pc, #204]	@ (800a9d8 <fill_KKT+0x27c>)
 800a90a:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.KKT[15] = 1;
 800a90e:	4b31      	ldr	r3, [pc, #196]	@ (800a9d4 <fill_KKT+0x278>)
 800a910:	f503 63b6 	add.w	r3, r3, #1456	@ 0x5b0
 800a914:	4619      	mov	r1, r3
 800a916:	f04f 0200 	mov.w	r2, #0
 800a91a:	4b2f      	ldr	r3, [pc, #188]	@ (800a9d8 <fill_KKT+0x27c>)
 800a91c:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.KKT[17] = 1;
 800a920:	4b2c      	ldr	r3, [pc, #176]	@ (800a9d4 <fill_KKT+0x278>)
 800a922:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 800a926:	4619      	mov	r1, r3
 800a928:	f04f 0200 	mov.w	r2, #0
 800a92c:	4b2a      	ldr	r3, [pc, #168]	@ (800a9d8 <fill_KKT+0x27c>)
 800a92e:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.KKT[18] = work.block_33[0];
 800a932:	4b28      	ldr	r3, [pc, #160]	@ (800a9d4 <fill_KKT+0x278>)
 800a934:	f503 631c 	add.w	r3, r3, #2496	@ 0x9c0
 800a938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93c:	4925      	ldr	r1, [pc, #148]	@ (800a9d4 <fill_KKT+0x278>)
 800a93e:	f501 61b8 	add.w	r1, r1, #1472	@ 0x5c0
 800a942:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[20] = work.block_33[0];
 800a946:	4b23      	ldr	r3, [pc, #140]	@ (800a9d4 <fill_KKT+0x278>)
 800a948:	f503 631c 	add.w	r3, r3, #2496	@ 0x9c0
 800a94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a950:	4920      	ldr	r1, [pc, #128]	@ (800a9d4 <fill_KKT+0x278>)
 800a952:	f501 61ba 	add.w	r1, r1, #1488	@ 0x5d0
 800a956:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[22] = work.block_33[0];
 800a95a:	4b1e      	ldr	r3, [pc, #120]	@ (800a9d4 <fill_KKT+0x278>)
 800a95c:	f503 631c 	add.w	r3, r3, #2496	@ 0x9c0
 800a960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a964:	491b      	ldr	r1, [pc, #108]	@ (800a9d4 <fill_KKT+0x278>)
 800a966:	f501 61bc 	add.w	r1, r1, #1504	@ 0x5e0
 800a96a:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[24] = work.block_33[0];
 800a96e:	4b19      	ldr	r3, [pc, #100]	@ (800a9d4 <fill_KKT+0x278>)
 800a970:	f503 631c 	add.w	r3, r3, #2496	@ 0x9c0
 800a974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a978:	4916      	ldr	r1, [pc, #88]	@ (800a9d4 <fill_KKT+0x278>)
 800a97a:	f501 61be 	add.w	r1, r1, #1520	@ 0x5f0
 800a97e:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[26] = work.block_33[0];
 800a982:	4b14      	ldr	r3, [pc, #80]	@ (800a9d4 <fill_KKT+0x278>)
 800a984:	f503 631c 	add.w	r3, r3, #2496	@ 0x9c0
 800a988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98c:	4911      	ldr	r1, [pc, #68]	@ (800a9d4 <fill_KKT+0x278>)
 800a98e:	f501 61c0 	add.w	r1, r1, #1536	@ 0x600
 800a992:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[33] = work.block_33[0];
 800a996:	4b0f      	ldr	r3, [pc, #60]	@ (800a9d4 <fill_KKT+0x278>)
 800a998:	f503 631c 	add.w	r3, r3, #2496	@ 0x9c0
 800a99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a0:	490c      	ldr	r1, [pc, #48]	@ (800a9d4 <fill_KKT+0x278>)
 800a9a2:	f501 61c8 	add.w	r1, r1, #1600	@ 0x640
 800a9a6:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.KKT[39] = work.block_33[0];
 800a9aa:	4b0a      	ldr	r3, [pc, #40]	@ (800a9d4 <fill_KKT+0x278>)
 800a9ac:	f503 631c 	add.w	r3, r3, #2496	@ 0x9c0
 800a9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b4:	4907      	ldr	r1, [pc, #28]	@ (800a9d4 <fill_KKT+0x278>)
 800a9b6:	f501 61ce 	add.w	r1, r1, #1648	@ 0x670
 800a9ba:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.KKT[44] = work.block_33[0];
 800a9be:	4b05      	ldr	r3, [pc, #20]	@ (800a9d4 <fill_KKT+0x278>)
 800a9c0:	f503 631c 	add.w	r3, r3, #2496	@ 0x9c0
 800a9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c8:	4902      	ldr	r1, [pc, #8]	@ (800a9d4 <fill_KKT+0x278>)
 800a9ca:	f501 61d2 	add.w	r1, r1, #1680	@ 0x690
 800a9ce:	e005      	b.n	800a9dc <fill_KKT+0x280>
 800a9d0:	24006f68 	.word	0x24006f68
 800a9d4:	24007070 	.word	0x24007070
 800a9d8:	3ff00000 	.word	0x3ff00000
 800a9dc:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[48] = work.block_33[0];
 800a9e0:	4b3b      	ldr	r3, [pc, #236]	@ (800aad0 <fill_KKT+0x374>)
 800a9e2:	f503 631c 	add.w	r3, r3, #2496	@ 0x9c0
 800a9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ea:	4939      	ldr	r1, [pc, #228]	@ (800aad0 <fill_KKT+0x374>)
 800a9ec:	f501 61d6 	add.w	r1, r1, #1712	@ 0x6b0
 800a9f0:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[19] = 1;
 800a9f4:	4b36      	ldr	r3, [pc, #216]	@ (800aad0 <fill_KKT+0x374>)
 800a9f6:	f503 63ba 	add.w	r3, r3, #1488	@ 0x5d0
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	f04f 0200 	mov.w	r2, #0
 800aa00:	4b34      	ldr	r3, [pc, #208]	@ (800aad4 <fill_KKT+0x378>)
 800aa02:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.KKT[21] = 1;
 800aa06:	4b32      	ldr	r3, [pc, #200]	@ (800aad0 <fill_KKT+0x374>)
 800aa08:	f503 63bc 	add.w	r3, r3, #1504	@ 0x5e0
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	f04f 0200 	mov.w	r2, #0
 800aa12:	4b30      	ldr	r3, [pc, #192]	@ (800aad4 <fill_KKT+0x378>)
 800aa14:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.KKT[23] = 1;
 800aa18:	4b2d      	ldr	r3, [pc, #180]	@ (800aad0 <fill_KKT+0x374>)
 800aa1a:	f503 63be 	add.w	r3, r3, #1520	@ 0x5f0
 800aa1e:	4619      	mov	r1, r3
 800aa20:	f04f 0200 	mov.w	r2, #0
 800aa24:	4b2b      	ldr	r3, [pc, #172]	@ (800aad4 <fill_KKT+0x378>)
 800aa26:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.KKT[25] = 1;
 800aa2a:	4b29      	ldr	r3, [pc, #164]	@ (800aad0 <fill_KKT+0x374>)
 800aa2c:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800aa30:	4619      	mov	r1, r3
 800aa32:	f04f 0200 	mov.w	r2, #0
 800aa36:	4b27      	ldr	r3, [pc, #156]	@ (800aad4 <fill_KKT+0x378>)
 800aa38:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.KKT[27] = -1;
 800aa3c:	4b24      	ldr	r3, [pc, #144]	@ (800aad0 <fill_KKT+0x374>)
 800aa3e:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 800aa42:	4619      	mov	r1, r3
 800aa44:	f04f 0200 	mov.w	r2, #0
 800aa48:	4b23      	ldr	r3, [pc, #140]	@ (800aad8 <fill_KKT+0x37c>)
 800aa4a:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.KKT[34] = -1;
 800aa4e:	4b20      	ldr	r3, [pc, #128]	@ (800aad0 <fill_KKT+0x374>)
 800aa50:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 800aa54:	4619      	mov	r1, r3
 800aa56:	f04f 0200 	mov.w	r2, #0
 800aa5a:	4b1f      	ldr	r3, [pc, #124]	@ (800aad8 <fill_KKT+0x37c>)
 800aa5c:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[40] = -1;
 800aa60:	4b1b      	ldr	r3, [pc, #108]	@ (800aad0 <fill_KKT+0x374>)
 800aa62:	f503 63ce 	add.w	r3, r3, #1648	@ 0x670
 800aa66:	4619      	mov	r1, r3
 800aa68:	f04f 0200 	mov.w	r2, #0
 800aa6c:	4b1a      	ldr	r3, [pc, #104]	@ (800aad8 <fill_KKT+0x37c>)
 800aa6e:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[45] = -1;
 800aa72:	4b17      	ldr	r3, [pc, #92]	@ (800aad0 <fill_KKT+0x374>)
 800aa74:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800aa78:	4619      	mov	r1, r3
 800aa7a:	f04f 0200 	mov.w	r2, #0
 800aa7e:	4b16      	ldr	r3, [pc, #88]	@ (800aad8 <fill_KKT+0x37c>)
 800aa80:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.KKT[32] = params.a[0];
 800aa84:	4b15      	ldr	r3, [pc, #84]	@ (800aadc <fill_KKT+0x380>)
 800aa86:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 800aa8a:	4911      	ldr	r1, [pc, #68]	@ (800aad0 <fill_KKT+0x374>)
 800aa8c:	f501 61c6 	add.w	r1, r1, #1584	@ 0x630
 800aa90:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[38] = params.a[1];
 800aa94:	4b11      	ldr	r3, [pc, #68]	@ (800aadc <fill_KKT+0x380>)
 800aa96:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 800aa9a:	490d      	ldr	r1, [pc, #52]	@ (800aad0 <fill_KKT+0x374>)
 800aa9c:	f501 61cc 	add.w	r1, r1, #1632	@ 0x660
 800aaa0:	e9c1 2300 	strd	r2, r3, [r1]
  work.KKT[43] = params.a[2];
 800aaa4:	4b0d      	ldr	r3, [pc, #52]	@ (800aadc <fill_KKT+0x380>)
 800aaa6:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 800aaaa:	4909      	ldr	r1, [pc, #36]	@ (800aad0 <fill_KKT+0x374>)
 800aaac:	f501 61d2 	add.w	r1, r1, #1680	@ 0x690
 800aab0:	e941 2302 	strd	r2, r3, [r1, #-8]
  work.KKT[47] = params.a[3];
 800aab4:	4b09      	ldr	r3, [pc, #36]	@ (800aadc <fill_KKT+0x380>)
 800aab6:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	@ 0xf8
 800aaba:	4905      	ldr	r1, [pc, #20]	@ (800aad0 <fill_KKT+0x374>)
 800aabc:	f501 61d6 	add.w	r1, r1, #1712	@ 0x6b0
 800aac0:	e941 2302 	strd	r2, r3, [r1, #-8]
}
 800aac4:	bf00      	nop
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	24007070 	.word	0x24007070
 800aad4:	3ff00000 	.word	0x3ff00000
 800aad8:	bff00000 	.word	0xbff00000
 800aadc:	24006f68 	.word	0x24006f68

0800aae0 <multbymA>:
/* applications without prior written permission from Jacob Mattingley. */

/* Filename: matrix_support.c. */
/* Description: Support functions for matrix multiplication and vector filling. */
#include "solver.h"
void multbymA(double *lhs, double *rhs) {
 800aae0:	b480      	push	{r7}
 800aae2:	b083      	sub	sp, #12
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
}
 800aaea:	bf00      	nop
 800aaec:	370c      	adds	r7, #12
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr

0800aaf6 <multbymAT>:
void multbymAT(double *lhs, double *rhs) {
 800aaf6:	b480      	push	{r7}
 800aaf8:	b083      	sub	sp, #12
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
 800aafe:	6039      	str	r1, [r7, #0]
  lhs[0] = 0;
 800ab00:	6879      	ldr	r1, [r7, #4]
 800ab02:	f04f 0200 	mov.w	r2, #0
 800ab06:	f04f 0300 	mov.w	r3, #0
 800ab0a:	e9c1 2300 	strd	r2, r3, [r1]
  lhs[1] = 0;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f103 0108 	add.w	r1, r3, #8
 800ab14:	f04f 0200 	mov.w	r2, #0
 800ab18:	f04f 0300 	mov.w	r3, #0
 800ab1c:	e9c1 2300 	strd	r2, r3, [r1]
  lhs[2] = 0;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f103 0110 	add.w	r1, r3, #16
 800ab26:	f04f 0200 	mov.w	r2, #0
 800ab2a:	f04f 0300 	mov.w	r3, #0
 800ab2e:	e9c1 2300 	strd	r2, r3, [r1]
  lhs[3] = 0;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f103 0118 	add.w	r1, r3, #24
 800ab38:	f04f 0200 	mov.w	r2, #0
 800ab3c:	f04f 0300 	mov.w	r3, #0
 800ab40:	e9c1 2300 	strd	r2, r3, [r1]
}
 800ab44:	bf00      	nop
 800ab46:	370c      	adds	r7, #12
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <multbymG>:
void multbymG(double *lhs, double *rhs) {
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  lhs[0] = -rhs[0]*(1);
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	ed93 7b00 	vldr	d7, [r3]
 800ab60:	eeb1 7b47 	vneg.f64	d7, d7
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	ed83 7b00 	vstr	d7, [r3]
  lhs[1] = -rhs[1]*(1);
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	3308      	adds	r3, #8
 800ab6e:	ed93 7b00 	vldr	d7, [r3]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	3308      	adds	r3, #8
 800ab76:	eeb1 7b47 	vneg.f64	d7, d7
 800ab7a:	ed83 7b00 	vstr	d7, [r3]
  lhs[2] = -rhs[2]*(1);
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	3310      	adds	r3, #16
 800ab82:	ed93 7b00 	vldr	d7, [r3]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	3310      	adds	r3, #16
 800ab8a:	eeb1 7b47 	vneg.f64	d7, d7
 800ab8e:	ed83 7b00 	vstr	d7, [r3]
  lhs[3] = -rhs[3]*(1);
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	3318      	adds	r3, #24
 800ab96:	ed93 7b00 	vldr	d7, [r3]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	3318      	adds	r3, #24
 800ab9e:	eeb1 7b47 	vneg.f64	d7, d7
 800aba2:	ed83 7b00 	vstr	d7, [r3]
  lhs[4] = -rhs[0]*(-1);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f103 0120 	add.w	r1, r3, #32
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb2:	e9c1 2300 	strd	r2, r3, [r1]
  lhs[5] = -rhs[1]*(-1);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800abc2:	e9c1 2300 	strd	r2, r3, [r1]
  lhs[6] = -rhs[2]*(-1);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800abd2:	e9c1 2300 	strd	r2, r3, [r1]
  lhs[7] = -rhs[3]*(-1);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800abe2:	e9c1 2300 	strd	r2, r3, [r1]
  lhs[8] = -rhs[0]*(params.a[0])-rhs[1]*(params.a[1])-rhs[2]*(params.a[2])-rhs[3]*(params.a[3]);
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	ed93 7b00 	vldr	d7, [r3]
 800abec:	eeb1 6b47 	vneg.f64	d6, d7
 800abf0:	4b17      	ldr	r3, [pc, #92]	@ (800ac50 <multbymG+0x100>)
 800abf2:	ed93 7b38 	vldr	d7, [r3, #224]	@ 0xe0
 800abf6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	3308      	adds	r3, #8
 800abfe:	ed93 5b00 	vldr	d5, [r3]
 800ac02:	4b13      	ldr	r3, [pc, #76]	@ (800ac50 <multbymG+0x100>)
 800ac04:	ed93 7b3a 	vldr	d7, [r3, #232]	@ 0xe8
 800ac08:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ac0c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	3310      	adds	r3, #16
 800ac14:	ed93 5b00 	vldr	d5, [r3]
 800ac18:	4b0d      	ldr	r3, [pc, #52]	@ (800ac50 <multbymG+0x100>)
 800ac1a:	ed93 7b3c 	vldr	d7, [r3, #240]	@ 0xf0
 800ac1e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ac22:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	3318      	adds	r3, #24
 800ac2a:	ed93 5b00 	vldr	d5, [r3]
 800ac2e:	4b08      	ldr	r3, [pc, #32]	@ (800ac50 <multbymG+0x100>)
 800ac30:	ed93 7b3e 	vldr	d7, [r3, #248]	@ 0xf8
 800ac34:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	3340      	adds	r3, #64	@ 0x40
 800ac3c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ac40:	ed83 7b00 	vstr	d7, [r3]
}
 800ac44:	bf00      	nop
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr
 800ac50:	24006f68 	.word	0x24006f68

0800ac54 <multbymGT>:
void multbymGT(double *lhs, double *rhs) {
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
  lhs[0] = -rhs[0]*(1)-rhs[4]*(-1)-rhs[8]*(params.a[0]);
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	3320      	adds	r3, #32
 800ac62:	ed93 6b00 	vldr	d6, [r3]
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	ed93 7b00 	vldr	d7, [r3]
 800ac6c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	3340      	adds	r3, #64	@ 0x40
 800ac74:	ed93 5b00 	vldr	d5, [r3]
 800ac78:	4b2d      	ldr	r3, [pc, #180]	@ (800ad30 <multbymGT+0xdc>)
 800ac7a:	ed93 7b38 	vldr	d7, [r3, #224]	@ 0xe0
 800ac7e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ac82:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	ed83 7b00 	vstr	d7, [r3]
  lhs[1] = -rhs[1]*(1)-rhs[5]*(-1)-rhs[8]*(params.a[1]);
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	3328      	adds	r3, #40	@ 0x28
 800ac90:	ed93 6b00 	vldr	d6, [r3]
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	3308      	adds	r3, #8
 800ac98:	ed93 7b00 	vldr	d7, [r3]
 800ac9c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	3340      	adds	r3, #64	@ 0x40
 800aca4:	ed93 5b00 	vldr	d5, [r3]
 800aca8:	4b21      	ldr	r3, [pc, #132]	@ (800ad30 <multbymGT+0xdc>)
 800acaa:	ed93 7b3a 	vldr	d7, [r3, #232]	@ 0xe8
 800acae:	ee25 7b07 	vmul.f64	d7, d5, d7
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	3308      	adds	r3, #8
 800acb6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800acba:	ed83 7b00 	vstr	d7, [r3]
  lhs[2] = -rhs[2]*(1)-rhs[6]*(-1)-rhs[8]*(params.a[2]);
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	3330      	adds	r3, #48	@ 0x30
 800acc2:	ed93 6b00 	vldr	d6, [r3]
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	3310      	adds	r3, #16
 800acca:	ed93 7b00 	vldr	d7, [r3]
 800acce:	ee36 6b47 	vsub.f64	d6, d6, d7
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	3340      	adds	r3, #64	@ 0x40
 800acd6:	ed93 5b00 	vldr	d5, [r3]
 800acda:	4b15      	ldr	r3, [pc, #84]	@ (800ad30 <multbymGT+0xdc>)
 800acdc:	ed93 7b3c 	vldr	d7, [r3, #240]	@ 0xf0
 800ace0:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	3310      	adds	r3, #16
 800ace8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800acec:	ed83 7b00 	vstr	d7, [r3]
  lhs[3] = -rhs[3]*(1)-rhs[7]*(-1)-rhs[8]*(params.a[3]);
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	3338      	adds	r3, #56	@ 0x38
 800acf4:	ed93 6b00 	vldr	d6, [r3]
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	3318      	adds	r3, #24
 800acfc:	ed93 7b00 	vldr	d7, [r3]
 800ad00:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	3340      	adds	r3, #64	@ 0x40
 800ad08:	ed93 5b00 	vldr	d5, [r3]
 800ad0c:	4b08      	ldr	r3, [pc, #32]	@ (800ad30 <multbymGT+0xdc>)
 800ad0e:	ed93 7b3e 	vldr	d7, [r3, #248]	@ 0xf8
 800ad12:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	3318      	adds	r3, #24
 800ad1a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ad1e:	ed83 7b00 	vstr	d7, [r3]
}
 800ad22:	bf00      	nop
 800ad24:	370c      	adds	r7, #12
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	24006f68 	.word	0x24006f68

0800ad34 <multbyP>:
void multbyP(double *lhs, double *rhs) {
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
  /* TODO use the fact that P is symmetric? */
  /* TODO check doubling / half factor etc. */
  lhs[0] = rhs[0]*(params.Q[0])+rhs[1]*(params.Q[4])+rhs[2]*(params.Q[8])+rhs[3]*(params.Q[12]);
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	ed93 6b00 	vldr	d6, [r3]
 800ad44:	4b5a      	ldr	r3, [pc, #360]	@ (800aeb0 <multbyP+0x17c>)
 800ad46:	ed93 7b00 	vldr	d7, [r3]
 800ad4a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	3308      	adds	r3, #8
 800ad52:	ed93 5b00 	vldr	d5, [r3]
 800ad56:	4b56      	ldr	r3, [pc, #344]	@ (800aeb0 <multbyP+0x17c>)
 800ad58:	ed93 7b08 	vldr	d7, [r3, #32]
 800ad5c:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ad60:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	3310      	adds	r3, #16
 800ad68:	ed93 5b00 	vldr	d5, [r3]
 800ad6c:	4b50      	ldr	r3, [pc, #320]	@ (800aeb0 <multbyP+0x17c>)
 800ad6e:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 800ad72:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ad76:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	3318      	adds	r3, #24
 800ad7e:	ed93 5b00 	vldr	d5, [r3]
 800ad82:	4b4b      	ldr	r3, [pc, #300]	@ (800aeb0 <multbyP+0x17c>)
 800ad84:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 800ad88:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ad8c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	ed83 7b00 	vstr	d7, [r3]
  lhs[1] = rhs[0]*(params.Q[1])+rhs[1]*(params.Q[5])+rhs[2]*(params.Q[9])+rhs[3]*(params.Q[13]);
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	ed93 6b00 	vldr	d6, [r3]
 800ad9c:	4b44      	ldr	r3, [pc, #272]	@ (800aeb0 <multbyP+0x17c>)
 800ad9e:	ed93 7b02 	vldr	d7, [r3, #8]
 800ada2:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	3308      	adds	r3, #8
 800adaa:	ed93 5b00 	vldr	d5, [r3]
 800adae:	4b40      	ldr	r3, [pc, #256]	@ (800aeb0 <multbyP+0x17c>)
 800adb0:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 800adb4:	ee25 7b07 	vmul.f64	d7, d5, d7
 800adb8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	3310      	adds	r3, #16
 800adc0:	ed93 5b00 	vldr	d5, [r3]
 800adc4:	4b3a      	ldr	r3, [pc, #232]	@ (800aeb0 <multbyP+0x17c>)
 800adc6:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
 800adca:	ee25 7b07 	vmul.f64	d7, d5, d7
 800adce:	ee36 6b07 	vadd.f64	d6, d6, d7
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	3318      	adds	r3, #24
 800add6:	ed93 5b00 	vldr	d5, [r3]
 800adda:	4b35      	ldr	r3, [pc, #212]	@ (800aeb0 <multbyP+0x17c>)
 800addc:	ed93 7b1a 	vldr	d7, [r3, #104]	@ 0x68
 800ade0:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	3308      	adds	r3, #8
 800ade8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800adec:	ed83 7b00 	vstr	d7, [r3]
  lhs[2] = rhs[0]*(params.Q[2])+rhs[1]*(params.Q[6])+rhs[2]*(params.Q[10])+rhs[3]*(params.Q[14]);
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	ed93 6b00 	vldr	d6, [r3]
 800adf6:	4b2e      	ldr	r3, [pc, #184]	@ (800aeb0 <multbyP+0x17c>)
 800adf8:	ed93 7b04 	vldr	d7, [r3, #16]
 800adfc:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	3308      	adds	r3, #8
 800ae04:	ed93 5b00 	vldr	d5, [r3]
 800ae08:	4b29      	ldr	r3, [pc, #164]	@ (800aeb0 <multbyP+0x17c>)
 800ae0a:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 800ae0e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ae12:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	3310      	adds	r3, #16
 800ae1a:	ed93 5b00 	vldr	d5, [r3]
 800ae1e:	4b24      	ldr	r3, [pc, #144]	@ (800aeb0 <multbyP+0x17c>)
 800ae20:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 800ae24:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ae28:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	3318      	adds	r3, #24
 800ae30:	ed93 5b00 	vldr	d5, [r3]
 800ae34:	4b1e      	ldr	r3, [pc, #120]	@ (800aeb0 <multbyP+0x17c>)
 800ae36:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800ae3a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	3310      	adds	r3, #16
 800ae42:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ae46:	ed83 7b00 	vstr	d7, [r3]
  lhs[3] = rhs[0]*(params.Q[3])+rhs[1]*(params.Q[7])+rhs[2]*(params.Q[11])+rhs[3]*(params.Q[15]);
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	ed93 6b00 	vldr	d6, [r3]
 800ae50:	4b17      	ldr	r3, [pc, #92]	@ (800aeb0 <multbyP+0x17c>)
 800ae52:	ed93 7b06 	vldr	d7, [r3, #24]
 800ae56:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	3308      	adds	r3, #8
 800ae5e:	ed93 5b00 	vldr	d5, [r3]
 800ae62:	4b13      	ldr	r3, [pc, #76]	@ (800aeb0 <multbyP+0x17c>)
 800ae64:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 800ae68:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ae6c:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	3310      	adds	r3, #16
 800ae74:	ed93 5b00 	vldr	d5, [r3]
 800ae78:	4b0d      	ldr	r3, [pc, #52]	@ (800aeb0 <multbyP+0x17c>)
 800ae7a:	ed93 7b16 	vldr	d7, [r3, #88]	@ 0x58
 800ae7e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ae82:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	3318      	adds	r3, #24
 800ae8a:	ed93 5b00 	vldr	d5, [r3]
 800ae8e:	4b08      	ldr	r3, [pc, #32]	@ (800aeb0 <multbyP+0x17c>)
 800ae90:	ed93 7b1e 	vldr	d7, [r3, #120]	@ 0x78
 800ae94:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	3318      	adds	r3, #24
 800ae9c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800aea0:	ed83 7b00 	vstr	d7, [r3]
}
 800aea4:	bf00      	nop
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr
 800aeb0:	24006f68 	.word	0x24006f68

0800aeb4 <fillq>:
void fillq(void) {
 800aeb4:	b480      	push	{r7}
 800aeb6:	af00      	add	r7, sp, #0
  work.q[0] = params.q[0];
 800aeb8:	4b0e      	ldr	r3, [pc, #56]	@ (800aef4 <fillq+0x40>)
 800aeba:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 800aebe:	490e      	ldr	r1, [pc, #56]	@ (800aef8 <fillq+0x44>)
 800aec0:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
  work.q[1] = params.q[1];
 800aec4:	4b0b      	ldr	r3, [pc, #44]	@ (800aef4 <fillq+0x40>)
 800aec6:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800aeca:	490b      	ldr	r1, [pc, #44]	@ (800aef8 <fillq+0x44>)
 800aecc:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
  work.q[2] = params.q[2];
 800aed0:	4b08      	ldr	r3, [pc, #32]	@ (800aef4 <fillq+0x40>)
 800aed2:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800aed6:	4908      	ldr	r1, [pc, #32]	@ (800aef8 <fillq+0x44>)
 800aed8:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0
  work.q[3] = params.q[3];
 800aedc:	4b05      	ldr	r3, [pc, #20]	@ (800aef4 <fillq+0x40>)
 800aede:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800aee2:	4905      	ldr	r1, [pc, #20]	@ (800aef8 <fillq+0x44>)
 800aee4:	e9c1 233e 	strd	r2, r3, [r1, #248]	@ 0xf8
}
 800aee8:	bf00      	nop
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr
 800aef2:	bf00      	nop
 800aef4:	24006f68 	.word	0x24006f68
 800aef8:	24007070 	.word	0x24007070

0800aefc <fillh>:
void fillh(void) {
 800aefc:	b480      	push	{r7}
 800aefe:	af00      	add	r7, sp, #0
  work.h[0] = params.tau_max[0];
 800af00:	4b21      	ldr	r3, [pc, #132]	@ (800af88 <fillh+0x8c>)
 800af02:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 800af06:	4921      	ldr	r1, [pc, #132]	@ (800af8c <fillh+0x90>)
 800af08:	e9c1 2300 	strd	r2, r3, [r1]
  work.h[1] = params.tau_max[1];
 800af0c:	4b1e      	ldr	r3, [pc, #120]	@ (800af88 <fillh+0x8c>)
 800af0e:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 800af12:	491e      	ldr	r1, [pc, #120]	@ (800af8c <fillh+0x90>)
 800af14:	e9c1 2302 	strd	r2, r3, [r1, #8]
  work.h[2] = params.tau_max[2];
 800af18:	4b1b      	ldr	r3, [pc, #108]	@ (800af88 <fillh+0x8c>)
 800af1a:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	@ 0xb0
 800af1e:	491b      	ldr	r1, [pc, #108]	@ (800af8c <fillh+0x90>)
 800af20:	e9c1 2304 	strd	r2, r3, [r1, #16]
  work.h[3] = params.tau_max[3];
 800af24:	4b18      	ldr	r3, [pc, #96]	@ (800af88 <fillh+0x8c>)
 800af26:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 800af2a:	4918      	ldr	r1, [pc, #96]	@ (800af8c <fillh+0x90>)
 800af2c:	e9c1 2306 	strd	r2, r3, [r1, #24]
  work.h[4] = -params.tau_min[0];
 800af30:	4b15      	ldr	r3, [pc, #84]	@ (800af88 <fillh+0x8c>)
 800af32:	ed93 7b30 	vldr	d7, [r3, #192]	@ 0xc0
 800af36:	eeb1 7b47 	vneg.f64	d7, d7
 800af3a:	4b14      	ldr	r3, [pc, #80]	@ (800af8c <fillh+0x90>)
 800af3c:	ed83 7b08 	vstr	d7, [r3, #32]
  work.h[5] = -params.tau_min[1];
 800af40:	4b11      	ldr	r3, [pc, #68]	@ (800af88 <fillh+0x8c>)
 800af42:	ed93 7b32 	vldr	d7, [r3, #200]	@ 0xc8
 800af46:	eeb1 7b47 	vneg.f64	d7, d7
 800af4a:	4b10      	ldr	r3, [pc, #64]	@ (800af8c <fillh+0x90>)
 800af4c:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
  work.h[6] = -params.tau_min[2];
 800af50:	4b0d      	ldr	r3, [pc, #52]	@ (800af88 <fillh+0x8c>)
 800af52:	ed93 7b34 	vldr	d7, [r3, #208]	@ 0xd0
 800af56:	eeb1 7b47 	vneg.f64	d7, d7
 800af5a:	4b0c      	ldr	r3, [pc, #48]	@ (800af8c <fillh+0x90>)
 800af5c:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
  work.h[7] = -params.tau_min[3];
 800af60:	4b09      	ldr	r3, [pc, #36]	@ (800af88 <fillh+0x8c>)
 800af62:	ed93 7b36 	vldr	d7, [r3, #216]	@ 0xd8
 800af66:	eeb1 7b47 	vneg.f64	d7, d7
 800af6a:	4b08      	ldr	r3, [pc, #32]	@ (800af8c <fillh+0x90>)
 800af6c:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
  work.h[8] = params.b[0];
 800af70:	4b05      	ldr	r3, [pc, #20]	@ (800af88 <fillh+0x8c>)
 800af72:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	@ 0x100
 800af76:	4905      	ldr	r1, [pc, #20]	@ (800af8c <fillh+0x90>)
 800af78:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
}
 800af7c:	bf00      	nop
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	24006f68 	.word	0x24006f68
 800af8c:	24007070 	.word	0x24007070

0800af90 <fillb>:
void fillb(void) {
 800af90:	b480      	push	{r7}
 800af92:	af00      	add	r7, sp, #0
}
 800af94:	bf00      	nop
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr

0800af9e <pre_ops>:
void pre_ops(void) {
 800af9e:	b480      	push	{r7}
 800afa0:	af00      	add	r7, sp, #0
}
 800afa2:	bf00      	nop
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <eval_gap>:
/* applications without prior written permission from Jacob Mattingley. */

/* Filename: solver.c. */
/* Description: Main solver file. */
#include "solver.h"
double eval_gap(void) {
 800afac:	b480      	push	{r7}
 800afae:	b085      	sub	sp, #20
 800afb0:	af00      	add	r7, sp, #0
  int i;
  double gap;
  gap = 0;
 800afb2:	f04f 0200 	mov.w	r2, #0
 800afb6:	f04f 0300 	mov.w	r3, #0
 800afba:	e9c7 2300 	strd	r2, r3, [r7]
  for (i = 0; i < 9; i++)
 800afbe:	2300      	movs	r3, #0
 800afc0:	60fb      	str	r3, [r7, #12]
 800afc2:	e01a      	b.n	800affa <eval_gap+0x4e>
    gap += work.z[i]*work.s[i];
 800afc4:	4b14      	ldr	r3, [pc, #80]	@ (800b018 <eval_gap+0x6c>)
 800afc6:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	00db      	lsls	r3, r3, #3
 800afce:	4413      	add	r3, r2
 800afd0:	ed93 6b00 	vldr	d6, [r3]
 800afd4:	4b10      	ldr	r3, [pc, #64]	@ (800b018 <eval_gap+0x6c>)
 800afd6:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	00db      	lsls	r3, r3, #3
 800afde:	4413      	add	r3, r2
 800afe0:	ed93 7b00 	vldr	d7, [r3]
 800afe4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800afe8:	ed97 6b00 	vldr	d6, [r7]
 800afec:	ee36 7b07 	vadd.f64	d7, d6, d7
 800aff0:	ed87 7b00 	vstr	d7, [r7]
  for (i = 0; i < 9; i++)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	3301      	adds	r3, #1
 800aff8:	60fb      	str	r3, [r7, #12]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2b08      	cmp	r3, #8
 800affe:	dde1      	ble.n	800afc4 <eval_gap+0x18>
  return gap;
 800b000:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b004:	ec43 2b17 	vmov	d7, r2, r3
}
 800b008:	eeb0 0b47 	vmov.f64	d0, d7
 800b00c:	3714      	adds	r7, #20
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	24007070 	.word	0x24007070
 800b01c:	00000000 	.word	0x00000000

0800b020 <set_defaults>:
void set_defaults(void) {
 800b020:	b480      	push	{r7}
 800b022:	af00      	add	r7, sp, #0
	cvxgen_settings.resid_tol = 1e-6;
 800b024:	4920      	ldr	r1, [pc, #128]	@ (800b0a8 <set_defaults+0x88>)
 800b026:	a31a      	add	r3, pc, #104	@ (adr r3, 800b090 <set_defaults+0x70>)
 800b028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02c:	e9c1 2300 	strd	r2, r3, [r1]
	cvxgen_settings.eps = 1e-4;
 800b030:	491d      	ldr	r1, [pc, #116]	@ (800b0a8 <set_defaults+0x88>)
 800b032:	a319      	add	r3, pc, #100	@ (adr r3, 800b098 <set_defaults+0x78>)
 800b034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b038:	e9c1 2302 	strd	r2, r3, [r1, #8]
	cvxgen_settings.max_iters = 25;
 800b03c:	4b1a      	ldr	r3, [pc, #104]	@ (800b0a8 <set_defaults+0x88>)
 800b03e:	2219      	movs	r2, #25
 800b040:	611a      	str	r2, [r3, #16]
	cvxgen_settings.refine_steps = 1;
 800b042:	4b19      	ldr	r3, [pc, #100]	@ (800b0a8 <set_defaults+0x88>)
 800b044:	2201      	movs	r2, #1
 800b046:	615a      	str	r2, [r3, #20]
	cvxgen_settings.s_init = 1;
 800b048:	4917      	ldr	r1, [pc, #92]	@ (800b0a8 <set_defaults+0x88>)
 800b04a:	f04f 0200 	mov.w	r2, #0
 800b04e:	4b17      	ldr	r3, [pc, #92]	@ (800b0ac <set_defaults+0x8c>)
 800b050:	e9c1 2308 	strd	r2, r3, [r1, #32]
	cvxgen_settings.z_init = 1;
 800b054:	4914      	ldr	r1, [pc, #80]	@ (800b0a8 <set_defaults+0x88>)
 800b056:	f04f 0200 	mov.w	r2, #0
 800b05a:	4b14      	ldr	r3, [pc, #80]	@ (800b0ac <set_defaults+0x8c>)
 800b05c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	cvxgen_settings.debug = 0;
 800b060:	4b11      	ldr	r3, [pc, #68]	@ (800b0a8 <set_defaults+0x88>)
 800b062:	2200      	movs	r2, #0
 800b064:	639a      	str	r2, [r3, #56]	@ 0x38
	cvxgen_settings.verbose = 1;
 800b066:	4b10      	ldr	r3, [pc, #64]	@ (800b0a8 <set_defaults+0x88>)
 800b068:	2201      	movs	r2, #1
 800b06a:	631a      	str	r2, [r3, #48]	@ 0x30
	cvxgen_settings.verbose_refinement = 0;
 800b06c:	4b0e      	ldr	r3, [pc, #56]	@ (800b0a8 <set_defaults+0x88>)
 800b06e:	2200      	movs	r2, #0
 800b070:	635a      	str	r2, [r3, #52]	@ 0x34
	cvxgen_settings.better_start = 1;
 800b072:	4b0d      	ldr	r3, [pc, #52]	@ (800b0a8 <set_defaults+0x88>)
 800b074:	2201      	movs	r2, #1
 800b076:	619a      	str	r2, [r3, #24]
	cvxgen_settings.kkt_reg = 1e-7;
 800b078:	490b      	ldr	r1, [pc, #44]	@ (800b0a8 <set_defaults+0x88>)
 800b07a:	a309      	add	r3, pc, #36	@ (adr r3, 800b0a0 <set_defaults+0x80>)
 800b07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b080:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
}
 800b084:	bf00      	nop
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	a0b5ed8d 	.word	0xa0b5ed8d
 800b094:	3eb0c6f7 	.word	0x3eb0c6f7
 800b098:	eb1c432d 	.word	0xeb1c432d
 800b09c:	3f1a36e2 	.word	0x3f1a36e2
 800b0a0:	9abcaf48 	.word	0x9abcaf48
 800b0a4:	3e7ad7f2 	.word	0x3e7ad7f2
 800b0a8:	24007a40 	.word	0x24007a40
 800b0ac:	3ff00000 	.word	0x3ff00000

0800b0b0 <setup_pointers>:
void setup_pointers(void) {
 800b0b0:	b480      	push	{r7}
 800b0b2:	af00      	add	r7, sp, #0
  work.y = work.x + 4;
 800b0b4:	4a09      	ldr	r2, [pc, #36]	@ (800b0dc <setup_pointers+0x2c>)
 800b0b6:	4b0a      	ldr	r3, [pc, #40]	@ (800b0e0 <setup_pointers+0x30>)
 800b0b8:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
  work.s = work.x + 4;
 800b0bc:	4a07      	ldr	r2, [pc, #28]	@ (800b0dc <setup_pointers+0x2c>)
 800b0be:	4b08      	ldr	r3, [pc, #32]	@ (800b0e0 <setup_pointers+0x30>)
 800b0c0:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
  work.z = work.x + 13;
 800b0c4:	4a07      	ldr	r2, [pc, #28]	@ (800b0e4 <setup_pointers+0x34>)
 800b0c6:	4b06      	ldr	r3, [pc, #24]	@ (800b0e0 <setup_pointers+0x30>)
 800b0c8:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
  vars.tau = work.x + 0;
 800b0cc:	4b06      	ldr	r3, [pc, #24]	@ (800b0e8 <setup_pointers+0x38>)
 800b0ce:	4a07      	ldr	r2, [pc, #28]	@ (800b0ec <setup_pointers+0x3c>)
 800b0d0:	601a      	str	r2, [r3, #0]
}
 800b0d2:	bf00      	nop
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr
 800b0dc:	24007240 	.word	0x24007240
 800b0e0:	24007070 	.word	0x24007070
 800b0e4:	24007288 	.word	0x24007288
 800b0e8:	24006f60 	.word	0x24006f60
 800b0ec:	24007220 	.word	0x24007220

0800b0f0 <setup_indexing>:
void setup_indexing(void) {
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	af00      	add	r7, sp, #0
  setup_pointers();
 800b0f4:	f7ff ffdc 	bl	800b0b0 <setup_pointers>
}
 800b0f8:	bf00      	nop
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <set_start>:
void set_start(void) {
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < 4; i++)
 800b102:	2300      	movs	r3, #0
 800b104:	607b      	str	r3, [r7, #4]
 800b106:	e00d      	b.n	800b124 <set_start+0x28>
    work.x[i] = 0;
 800b108:	4a33      	ldr	r2, [pc, #204]	@ (800b1d8 <set_start+0xdc>)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	3336      	adds	r3, #54	@ 0x36
 800b10e:	00db      	lsls	r3, r3, #3
 800b110:	18d1      	adds	r1, r2, r3
 800b112:	f04f 0200 	mov.w	r2, #0
 800b116:	f04f 0300 	mov.w	r3, #0
 800b11a:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 4; i++)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	3301      	adds	r3, #1
 800b122:	607b      	str	r3, [r7, #4]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2b03      	cmp	r3, #3
 800b128:	ddee      	ble.n	800b108 <set_start+0xc>
  for (i = 0; i < 0; i++)
 800b12a:	2300      	movs	r3, #0
 800b12c:	607b      	str	r3, [r7, #4]
 800b12e:	e00e      	b.n	800b14e <set_start+0x52>
    work.y[i] = 0;
 800b130:	4b29      	ldr	r3, [pc, #164]	@ (800b1d8 <set_start+0xdc>)
 800b132:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	00db      	lsls	r3, r3, #3
 800b13a:	18d1      	adds	r1, r2, r3
 800b13c:	f04f 0200 	mov.w	r2, #0
 800b140:	f04f 0300 	mov.w	r3, #0
 800b144:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 0; i++)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	3301      	adds	r3, #1
 800b14c:	607b      	str	r3, [r7, #4]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2b00      	cmp	r3, #0
 800b152:	dbed      	blt.n	800b130 <set_start+0x34>
  for (i = 0; i < 9; i++)
 800b154:	2300      	movs	r3, #0
 800b156:	607b      	str	r3, [r7, #4]
 800b158:	e01f      	b.n	800b19a <set_start+0x9e>
    work.s[i] = (work.h[i] > 0) ? work.h[i] : cvxgen_settings.s_init;
 800b15a:	4a1f      	ldr	r2, [pc, #124]	@ (800b1d8 <set_start+0xdc>)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	00db      	lsls	r3, r3, #3
 800b160:	4413      	add	r3, r2
 800b162:	ed93 7b00 	vldr	d7, [r3]
 800b166:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b16e:	dd06      	ble.n	800b17e <set_start+0x82>
 800b170:	4a19      	ldr	r2, [pc, #100]	@ (800b1d8 <set_start+0xdc>)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	00db      	lsls	r3, r3, #3
 800b176:	4413      	add	r3, r2
 800b178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17c:	e002      	b.n	800b184 <set_start+0x88>
 800b17e:	4b17      	ldr	r3, [pc, #92]	@ (800b1dc <set_start+0xe0>)
 800b180:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b184:	4914      	ldr	r1, [pc, #80]	@ (800b1d8 <set_start+0xdc>)
 800b186:	f8d1 0260 	ldr.w	r0, [r1, #608]	@ 0x260
 800b18a:	6879      	ldr	r1, [r7, #4]
 800b18c:	00c9      	lsls	r1, r1, #3
 800b18e:	4401      	add	r1, r0
 800b190:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 9; i++)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	3301      	adds	r3, #1
 800b198:	607b      	str	r3, [r7, #4]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2b08      	cmp	r3, #8
 800b19e:	dddc      	ble.n	800b15a <set_start+0x5e>
  for (i = 0; i < 9; i++)
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	607b      	str	r3, [r7, #4]
 800b1a4:	e00d      	b.n	800b1c2 <set_start+0xc6>
    work.z[i] = cvxgen_settings.z_init;
 800b1a6:	4b0c      	ldr	r3, [pc, #48]	@ (800b1d8 <set_start+0xdc>)
 800b1a8:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	00db      	lsls	r3, r3, #3
 800b1b0:	18d1      	adds	r1, r2, r3
 800b1b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b1dc <set_start+0xe0>)
 800b1b4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800b1b8:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 9; i++)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	607b      	str	r3, [r7, #4]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2b08      	cmp	r3, #8
 800b1c6:	ddee      	ble.n	800b1a6 <set_start+0xaa>
}
 800b1c8:	bf00      	nop
 800b1ca:	bf00      	nop
 800b1cc:	370c      	adds	r7, #12
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr
 800b1d6:	bf00      	nop
 800b1d8:	24007070 	.word	0x24007070
 800b1dc:	24007a40 	.word	0x24007a40

0800b1e0 <eval_objv>:
double eval_objv(void) {
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
  int i;
  double objv;
  /* Borrow space in work.rhs. */
  multbyP(work.rhs, work.x);
 800b1e6:	4932      	ldr	r1, [pc, #200]	@ (800b2b0 <eval_objv+0xd0>)
 800b1e8:	4832      	ldr	r0, [pc, #200]	@ (800b2b4 <eval_objv+0xd4>)
 800b1ea:	f7ff fda3 	bl	800ad34 <multbyP>
  objv = 0;
 800b1ee:	f04f 0200 	mov.w	r2, #0
 800b1f2:	f04f 0300 	mov.w	r3, #0
 800b1f6:	e9c7 2300 	strd	r2, r3, [r7]
  for (i = 0; i < 4; i++)
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	60fb      	str	r3, [r7, #12]
 800b1fe:	e018      	b.n	800b232 <eval_objv+0x52>
    objv += work.x[i]*work.rhs[i];
 800b200:	4a2d      	ldr	r2, [pc, #180]	@ (800b2b8 <eval_objv+0xd8>)
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	3336      	adds	r3, #54	@ 0x36
 800b206:	00db      	lsls	r3, r3, #3
 800b208:	4413      	add	r3, r2
 800b20a:	ed93 6b00 	vldr	d6, [r3]
 800b20e:	4a2a      	ldr	r2, [pc, #168]	@ (800b2b8 <eval_objv+0xd8>)
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	3320      	adds	r3, #32
 800b214:	00db      	lsls	r3, r3, #3
 800b216:	4413      	add	r3, r2
 800b218:	ed93 7b00 	vldr	d7, [r3]
 800b21c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b220:	ed97 6b00 	vldr	d6, [r7]
 800b224:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b228:	ed87 7b00 	vstr	d7, [r7]
  for (i = 0; i < 4; i++)
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	3301      	adds	r3, #1
 800b230:	60fb      	str	r3, [r7, #12]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2b03      	cmp	r3, #3
 800b236:	dde3      	ble.n	800b200 <eval_objv+0x20>
  objv *= 0.5;
 800b238:	ed97 7b00 	vldr	d7, [r7]
 800b23c:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 800b240:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b244:	ed87 7b00 	vstr	d7, [r7]
  for (i = 0; i < 4; i++)
 800b248:	2300      	movs	r3, #0
 800b24a:	60fb      	str	r3, [r7, #12]
 800b24c:	e018      	b.n	800b280 <eval_objv+0xa0>
    objv += work.q[i]*work.x[i];
 800b24e:	4a1a      	ldr	r2, [pc, #104]	@ (800b2b8 <eval_objv+0xd8>)
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	331c      	adds	r3, #28
 800b254:	00db      	lsls	r3, r3, #3
 800b256:	4413      	add	r3, r2
 800b258:	ed93 6b00 	vldr	d6, [r3]
 800b25c:	4a16      	ldr	r2, [pc, #88]	@ (800b2b8 <eval_objv+0xd8>)
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	3336      	adds	r3, #54	@ 0x36
 800b262:	00db      	lsls	r3, r3, #3
 800b264:	4413      	add	r3, r2
 800b266:	ed93 7b00 	vldr	d7, [r3]
 800b26a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b26e:	ed97 6b00 	vldr	d6, [r7]
 800b272:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b276:	ed87 7b00 	vstr	d7, [r7]
  for (i = 0; i < 4; i++)
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	3301      	adds	r3, #1
 800b27e:	60fb      	str	r3, [r7, #12]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2b03      	cmp	r3, #3
 800b284:	dde3      	ble.n	800b24e <eval_objv+0x6e>
  objv += 0.0;
 800b286:	ed97 7b00 	vldr	d7, [r7]
 800b28a:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 800b2a8 <eval_objv+0xc8>
 800b28e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b292:	ed87 7b00 	vstr	d7, [r7]
  return objv;
 800b296:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b29a:	ec43 2b17 	vmov	d7, r2, r3
}
 800b29e:	eeb0 0b47 	vmov.f64	d0, d7
 800b2a2:	3710      	adds	r7, #16
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}
	...
 800b2b0:	24007220 	.word	0x24007220
 800b2b4:	24007170 	.word	0x24007170
 800b2b8:	24007070 	.word	0x24007070

0800b2bc <fillrhs_aff>:
void fillrhs_aff(void) {
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b086      	sub	sp, #24
 800b2c0:	af00      	add	r7, sp, #0
  int i;
  double *r1, *r2, *r3, *r4;
  r1 = work.rhs;
 800b2c2:	4b65      	ldr	r3, [pc, #404]	@ (800b458 <fillrhs_aff+0x19c>)
 800b2c4:	613b      	str	r3, [r7, #16]
  r2 = work.rhs + 4;
 800b2c6:	4b65      	ldr	r3, [pc, #404]	@ (800b45c <fillrhs_aff+0x1a0>)
 800b2c8:	60fb      	str	r3, [r7, #12]
  r3 = work.rhs + 13;
 800b2ca:	4b65      	ldr	r3, [pc, #404]	@ (800b460 <fillrhs_aff+0x1a4>)
 800b2cc:	60bb      	str	r3, [r7, #8]
  r4 = work.rhs + 22;
 800b2ce:	4b65      	ldr	r3, [pc, #404]	@ (800b464 <fillrhs_aff+0x1a8>)
 800b2d0:	607b      	str	r3, [r7, #4]
  /* r1 = -A^Ty - G^Tz - Px - q. */
  multbymAT(r1, work.y);
 800b2d2:	4b65      	ldr	r3, [pc, #404]	@ (800b468 <fillrhs_aff+0x1ac>)
 800b2d4:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800b2d8:	4619      	mov	r1, r3
 800b2da:	6938      	ldr	r0, [r7, #16]
 800b2dc:	f7ff fc0b 	bl	800aaf6 <multbymAT>
  multbymGT(work.buffer, work.z);
 800b2e0:	4b61      	ldr	r3, [pc, #388]	@ (800b468 <fillrhs_aff+0x1ac>)
 800b2e2:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	4860      	ldr	r0, [pc, #384]	@ (800b46c <fillrhs_aff+0x1b0>)
 800b2ea:	f7ff fcb3 	bl	800ac54 <multbymGT>
  for (i = 0; i < 4; i++)
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	617b      	str	r3, [r7, #20]
 800b2f2:	e017      	b.n	800b324 <fillrhs_aff+0x68>
    r1[i] += work.buffer[i];
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	00db      	lsls	r3, r3, #3
 800b2f8:	693a      	ldr	r2, [r7, #16]
 800b2fa:	4413      	add	r3, r2
 800b2fc:	ed93 6b00 	vldr	d6, [r3]
 800b300:	4a59      	ldr	r2, [pc, #356]	@ (800b468 <fillrhs_aff+0x1ac>)
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	337a      	adds	r3, #122	@ 0x7a
 800b306:	00db      	lsls	r3, r3, #3
 800b308:	4413      	add	r3, r2
 800b30a:	ed93 7b00 	vldr	d7, [r3]
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	00db      	lsls	r3, r3, #3
 800b312:	693a      	ldr	r2, [r7, #16]
 800b314:	4413      	add	r3, r2
 800b316:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b31a:	ed83 7b00 	vstr	d7, [r3]
  for (i = 0; i < 4; i++)
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	3301      	adds	r3, #1
 800b322:	617b      	str	r3, [r7, #20]
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	2b03      	cmp	r3, #3
 800b328:	dde4      	ble.n	800b2f4 <fillrhs_aff+0x38>
  multbyP(work.buffer, work.x);
 800b32a:	494e      	ldr	r1, [pc, #312]	@ (800b464 <fillrhs_aff+0x1a8>)
 800b32c:	484f      	ldr	r0, [pc, #316]	@ (800b46c <fillrhs_aff+0x1b0>)
 800b32e:	f7ff fd01 	bl	800ad34 <multbyP>
  for (i = 0; i < 4; i++)
 800b332:	2300      	movs	r3, #0
 800b334:	617b      	str	r3, [r7, #20]
 800b336:	e020      	b.n	800b37a <fillrhs_aff+0xbe>
    r1[i] -= work.buffer[i] + work.q[i];
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	00db      	lsls	r3, r3, #3
 800b33c:	693a      	ldr	r2, [r7, #16]
 800b33e:	4413      	add	r3, r2
 800b340:	ed93 6b00 	vldr	d6, [r3]
 800b344:	4a48      	ldr	r2, [pc, #288]	@ (800b468 <fillrhs_aff+0x1ac>)
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	337a      	adds	r3, #122	@ 0x7a
 800b34a:	00db      	lsls	r3, r3, #3
 800b34c:	4413      	add	r3, r2
 800b34e:	ed93 5b00 	vldr	d5, [r3]
 800b352:	4a45      	ldr	r2, [pc, #276]	@ (800b468 <fillrhs_aff+0x1ac>)
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	331c      	adds	r3, #28
 800b358:	00db      	lsls	r3, r3, #3
 800b35a:	4413      	add	r3, r2
 800b35c:	ed93 7b00 	vldr	d7, [r3]
 800b360:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	00db      	lsls	r3, r3, #3
 800b368:	693a      	ldr	r2, [r7, #16]
 800b36a:	4413      	add	r3, r2
 800b36c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b370:	ed83 7b00 	vstr	d7, [r3]
  for (i = 0; i < 4; i++)
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	3301      	adds	r3, #1
 800b378:	617b      	str	r3, [r7, #20]
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	2b03      	cmp	r3, #3
 800b37e:	dddb      	ble.n	800b338 <fillrhs_aff+0x7c>
  /* r2 = -z. */
  for (i = 0; i < 9; i++)
 800b380:	2300      	movs	r3, #0
 800b382:	617b      	str	r3, [r7, #20]
 800b384:	e012      	b.n	800b3ac <fillrhs_aff+0xf0>
    r2[i] = -work.z[i];
 800b386:	4b38      	ldr	r3, [pc, #224]	@ (800b468 <fillrhs_aff+0x1ac>)
 800b388:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	00db      	lsls	r3, r3, #3
 800b390:	4413      	add	r3, r2
 800b392:	ed93 7b00 	vldr	d7, [r3]
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	00db      	lsls	r3, r3, #3
 800b39a:	68fa      	ldr	r2, [r7, #12]
 800b39c:	4413      	add	r3, r2
 800b39e:	eeb1 7b47 	vneg.f64	d7, d7
 800b3a2:	ed83 7b00 	vstr	d7, [r3]
  for (i = 0; i < 9; i++)
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	617b      	str	r3, [r7, #20]
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	2b08      	cmp	r3, #8
 800b3b0:	dde9      	ble.n	800b386 <fillrhs_aff+0xca>
  /* r3 = -Gx - s + h. */
  multbymG(r3, work.x);
 800b3b2:	492c      	ldr	r1, [pc, #176]	@ (800b464 <fillrhs_aff+0x1a8>)
 800b3b4:	68b8      	ldr	r0, [r7, #8]
 800b3b6:	f7ff fbcb 	bl	800ab50 <multbymG>
  for (i = 0; i < 9; i++)
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	617b      	str	r3, [r7, #20]
 800b3be:	e020      	b.n	800b402 <fillrhs_aff+0x146>
    r3[i] += -work.s[i] + work.h[i];
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	00db      	lsls	r3, r3, #3
 800b3c4:	68ba      	ldr	r2, [r7, #8]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	ed93 6b00 	vldr	d6, [r3]
 800b3cc:	4a26      	ldr	r2, [pc, #152]	@ (800b468 <fillrhs_aff+0x1ac>)
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	00db      	lsls	r3, r3, #3
 800b3d2:	4413      	add	r3, r2
 800b3d4:	ed93 5b00 	vldr	d5, [r3]
 800b3d8:	4b23      	ldr	r3, [pc, #140]	@ (800b468 <fillrhs_aff+0x1ac>)
 800b3da:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	00db      	lsls	r3, r3, #3
 800b3e2:	4413      	add	r3, r2
 800b3e4:	ed93 7b00 	vldr	d7, [r3]
 800b3e8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	00db      	lsls	r3, r3, #3
 800b3f0:	68ba      	ldr	r2, [r7, #8]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b3f8:	ed83 7b00 	vstr	d7, [r3]
  for (i = 0; i < 9; i++)
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	3301      	adds	r3, #1
 800b400:	617b      	str	r3, [r7, #20]
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	2b08      	cmp	r3, #8
 800b406:	dddb      	ble.n	800b3c0 <fillrhs_aff+0x104>
  /* r4 = -Ax + b. */
  multbymA(r4, work.x);
 800b408:	4916      	ldr	r1, [pc, #88]	@ (800b464 <fillrhs_aff+0x1a8>)
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f7ff fb68 	bl	800aae0 <multbymA>
  for (i = 0; i < 0; i++)
 800b410:	2300      	movs	r3, #0
 800b412:	617b      	str	r3, [r7, #20]
 800b414:	e018      	b.n	800b448 <fillrhs_aff+0x18c>
    r4[i] += work.b[i];
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	00db      	lsls	r3, r3, #3
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	4413      	add	r3, r2
 800b41e:	ed93 6b00 	vldr	d6, [r3]
 800b422:	4b11      	ldr	r3, [pc, #68]	@ (800b468 <fillrhs_aff+0x1ac>)
 800b424:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	00db      	lsls	r3, r3, #3
 800b42c:	4413      	add	r3, r2
 800b42e:	ed93 7b00 	vldr	d7, [r3]
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	00db      	lsls	r3, r3, #3
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	4413      	add	r3, r2
 800b43a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b43e:	ed83 7b00 	vstr	d7, [r3]
  for (i = 0; i < 0; i++)
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	3301      	adds	r3, #1
 800b446:	617b      	str	r3, [r7, #20]
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	dbe3      	blt.n	800b416 <fillrhs_aff+0x15a>
}
 800b44e:	bf00      	nop
 800b450:	bf00      	nop
 800b452:	3718      	adds	r7, #24
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}
 800b458:	24007170 	.word	0x24007170
 800b45c:	24007190 	.word	0x24007190
 800b460:	240071d8 	.word	0x240071d8
 800b464:	24007220 	.word	0x24007220
 800b468:	24007070 	.word	0x24007070
 800b46c:	24007440 	.word	0x24007440

0800b470 <fillrhs_cc>:
void fillrhs_cc(void) {
 800b470:	b480      	push	{r7}
 800b472:	b091      	sub	sp, #68	@ 0x44
 800b474:	af00      	add	r7, sp, #0
  double mu;
  double alpha;
  double sigma;
  double smu;
  double minval;
  r2 = work.rhs + 4;
 800b476:	4bb6      	ldr	r3, [pc, #728]	@ (800b750 <fillrhs_cc+0x2e0>)
 800b478:	617b      	str	r3, [r7, #20]
  ds_aff = work.lhs_aff + 4;
 800b47a:	4bb6      	ldr	r3, [pc, #728]	@ (800b754 <fillrhs_cc+0x2e4>)
 800b47c:	613b      	str	r3, [r7, #16]
  dz_aff = work.lhs_aff + 13;
 800b47e:	4bb6      	ldr	r3, [pc, #728]	@ (800b758 <fillrhs_cc+0x2e8>)
 800b480:	60fb      	str	r3, [r7, #12]
  mu = 0;
 800b482:	f04f 0200 	mov.w	r2, #0
 800b486:	f04f 0300 	mov.w	r3, #0
 800b48a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  for (i = 0; i < 9; i++)
 800b48e:	2300      	movs	r3, #0
 800b490:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b492:	e01a      	b.n	800b4ca <fillrhs_cc+0x5a>
    mu += work.s[i]*work.z[i];
 800b494:	4bb1      	ldr	r3, [pc, #708]	@ (800b75c <fillrhs_cc+0x2ec>)
 800b496:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800b49a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b49c:	00db      	lsls	r3, r3, #3
 800b49e:	4413      	add	r3, r2
 800b4a0:	ed93 6b00 	vldr	d6, [r3]
 800b4a4:	4bad      	ldr	r3, [pc, #692]	@ (800b75c <fillrhs_cc+0x2ec>)
 800b4a6:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 800b4aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4ac:	00db      	lsls	r3, r3, #3
 800b4ae:	4413      	add	r3, r2
 800b4b0:	ed93 7b00 	vldr	d7, [r3]
 800b4b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b4b8:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 800b4bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b4c0:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
  for (i = 0; i < 9; i++)
 800b4c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4cc:	2b08      	cmp	r3, #8
 800b4ce:	dde1      	ble.n	800b494 <fillrhs_cc+0x24>
  /* Don't finish calculating mu quite yet. */
  /* Find min(min(ds./s), min(dz./z)). */
  minval = 0;
 800b4d0:	f04f 0200 	mov.w	r2, #0
 800b4d4:	f04f 0300 	mov.w	r3, #0
 800b4d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < 9; i++)
 800b4dc:	2300      	movs	r3, #0
 800b4de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4e0:	e02b      	b.n	800b53a <fillrhs_cc+0xca>
    if (ds_aff[i] < minval*work.s[i])
 800b4e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4e4:	00db      	lsls	r3, r3, #3
 800b4e6:	693a      	ldr	r2, [r7, #16]
 800b4e8:	4413      	add	r3, r2
 800b4ea:	ed93 6b00 	vldr	d6, [r3]
 800b4ee:	4b9b      	ldr	r3, [pc, #620]	@ (800b75c <fillrhs_cc+0x2ec>)
 800b4f0:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800b4f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4f6:	00db      	lsls	r3, r3, #3
 800b4f8:	4413      	add	r3, r2
 800b4fa:	ed93 5b00 	vldr	d5, [r3]
 800b4fe:	ed97 7b06 	vldr	d7, [r7, #24]
 800b502:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b506:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b50e:	d511      	bpl.n	800b534 <fillrhs_cc+0xc4>
      minval = ds_aff[i]/work.s[i];
 800b510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b512:	00db      	lsls	r3, r3, #3
 800b514:	693a      	ldr	r2, [r7, #16]
 800b516:	4413      	add	r3, r2
 800b518:	ed93 5b00 	vldr	d5, [r3]
 800b51c:	4b8f      	ldr	r3, [pc, #572]	@ (800b75c <fillrhs_cc+0x2ec>)
 800b51e:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800b522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b524:	00db      	lsls	r3, r3, #3
 800b526:	4413      	add	r3, r2
 800b528:	ed93 6b00 	vldr	d6, [r3]
 800b52c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b530:	ed87 7b06 	vstr	d7, [r7, #24]
  for (i = 0; i < 9; i++)
 800b534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b536:	3301      	adds	r3, #1
 800b538:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b53a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b53c:	2b08      	cmp	r3, #8
 800b53e:	ddd0      	ble.n	800b4e2 <fillrhs_cc+0x72>
  for (i = 0; i < 9; i++)
 800b540:	2300      	movs	r3, #0
 800b542:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b544:	e02b      	b.n	800b59e <fillrhs_cc+0x12e>
    if (dz_aff[i] < minval*work.z[i])
 800b546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b548:	00db      	lsls	r3, r3, #3
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	4413      	add	r3, r2
 800b54e:	ed93 6b00 	vldr	d6, [r3]
 800b552:	4b82      	ldr	r3, [pc, #520]	@ (800b75c <fillrhs_cc+0x2ec>)
 800b554:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 800b558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b55a:	00db      	lsls	r3, r3, #3
 800b55c:	4413      	add	r3, r2
 800b55e:	ed93 5b00 	vldr	d5, [r3]
 800b562:	ed97 7b06 	vldr	d7, [r7, #24]
 800b566:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b56a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b56e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b572:	d511      	bpl.n	800b598 <fillrhs_cc+0x128>
      minval = dz_aff[i]/work.z[i];
 800b574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b576:	00db      	lsls	r3, r3, #3
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	4413      	add	r3, r2
 800b57c:	ed93 5b00 	vldr	d5, [r3]
 800b580:	4b76      	ldr	r3, [pc, #472]	@ (800b75c <fillrhs_cc+0x2ec>)
 800b582:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 800b586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b588:	00db      	lsls	r3, r3, #3
 800b58a:	4413      	add	r3, r2
 800b58c:	ed93 6b00 	vldr	d6, [r3]
 800b590:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b594:	ed87 7b06 	vstr	d7, [r7, #24]
  for (i = 0; i < 9; i++)
 800b598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b59a:	3301      	adds	r3, #1
 800b59c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b59e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5a0:	2b08      	cmp	r3, #8
 800b5a2:	ddd0      	ble.n	800b546 <fillrhs_cc+0xd6>
  /* Find alpha. */
  if (-1 < minval)
 800b5a4:	ed97 7b06 	vldr	d7, [r7, #24]
 800b5a8:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800b5ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5b4:	dd05      	ble.n	800b5c2 <fillrhs_cc+0x152>
      alpha = 1;
 800b5b6:	f04f 0200 	mov.w	r2, #0
 800b5ba:	4b69      	ldr	r3, [pc, #420]	@ (800b760 <fillrhs_cc+0x2f0>)
 800b5bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800b5c0:	e007      	b.n	800b5d2 <fillrhs_cc+0x162>
  else
      alpha = -1/minval;
 800b5c2:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 800b5c6:	ed97 6b06 	vldr	d6, [r7, #24]
 800b5ca:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b5ce:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
  sigma = 0;
 800b5d2:	f04f 0200 	mov.w	r2, #0
 800b5d6:	f04f 0300 	mov.w	r3, #0
 800b5da:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (i = 0; i < 9; i++)
 800b5de:	2300      	movs	r3, #0
 800b5e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5e2:	e032      	b.n	800b64a <fillrhs_cc+0x1da>
    sigma += (work.s[i] + alpha*ds_aff[i])*
 800b5e4:	4b5d      	ldr	r3, [pc, #372]	@ (800b75c <fillrhs_cc+0x2ec>)
 800b5e6:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800b5ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5ec:	00db      	lsls	r3, r3, #3
 800b5ee:	4413      	add	r3, r2
 800b5f0:	ed93 6b00 	vldr	d6, [r3]
 800b5f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5f6:	00db      	lsls	r3, r3, #3
 800b5f8:	693a      	ldr	r2, [r7, #16]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	ed93 5b00 	vldr	d5, [r3]
 800b600:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800b604:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b608:	ee36 6b07 	vadd.f64	d6, d6, d7
      (work.z[i] + alpha*dz_aff[i]);
 800b60c:	4b53      	ldr	r3, [pc, #332]	@ (800b75c <fillrhs_cc+0x2ec>)
 800b60e:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 800b612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b614:	00db      	lsls	r3, r3, #3
 800b616:	4413      	add	r3, r2
 800b618:	ed93 5b00 	vldr	d5, [r3]
 800b61c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b61e:	00db      	lsls	r3, r3, #3
 800b620:	68fa      	ldr	r2, [r7, #12]
 800b622:	4413      	add	r3, r2
 800b624:	ed93 4b00 	vldr	d4, [r3]
 800b628:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800b62c:	ee24 7b07 	vmul.f64	d7, d4, d7
 800b630:	ee35 7b07 	vadd.f64	d7, d5, d7
    sigma += (work.s[i] + alpha*ds_aff[i])*
 800b634:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b638:	ed97 6b08 	vldr	d6, [r7, #32]
 800b63c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b640:	ed87 7b08 	vstr	d7, [r7, #32]
  for (i = 0; i < 9; i++)
 800b644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b646:	3301      	adds	r3, #1
 800b648:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b64a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b64c:	2b08      	cmp	r3, #8
 800b64e:	ddc9      	ble.n	800b5e4 <fillrhs_cc+0x174>
  sigma /= mu;
 800b650:	ed97 5b08 	vldr	d5, [r7, #32]
 800b654:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 800b658:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b65c:	ed87 7b08 	vstr	d7, [r7, #32]
  sigma = sigma*sigma*sigma;
 800b660:	ed97 7b08 	vldr	d7, [r7, #32]
 800b664:	ee27 7b07 	vmul.f64	d7, d7, d7
 800b668:	ed97 6b08 	vldr	d6, [r7, #32]
 800b66c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b670:	ed87 7b08 	vstr	d7, [r7, #32]
  /* Finish calculating mu now. */
  mu *= 0.1111111111111111;
 800b674:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800b678:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 800b748 <fillrhs_cc+0x2d8>
 800b67c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b680:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
  smu = sigma*mu;
 800b684:	ed97 6b08 	vldr	d6, [r7, #32]
 800b688:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800b68c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b690:	ed87 7b00 	vstr	d7, [r7]
  /* Fill-in the rhs. */
  for (i = 0; i < 4; i++)
 800b694:	2300      	movs	r3, #0
 800b696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b698:	e00d      	b.n	800b6b6 <fillrhs_cc+0x246>
    work.rhs[i] = 0;
 800b69a:	4a30      	ldr	r2, [pc, #192]	@ (800b75c <fillrhs_cc+0x2ec>)
 800b69c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b69e:	3320      	adds	r3, #32
 800b6a0:	00db      	lsls	r3, r3, #3
 800b6a2:	18d1      	adds	r1, r2, r3
 800b6a4:	f04f 0200 	mov.w	r2, #0
 800b6a8:	f04f 0300 	mov.w	r3, #0
 800b6ac:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 4; i++)
 800b6b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6b8:	2b03      	cmp	r3, #3
 800b6ba:	ddee      	ble.n	800b69a <fillrhs_cc+0x22a>
  for (i = 13; i < 22; i++)
 800b6bc:	230d      	movs	r3, #13
 800b6be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6c0:	e00d      	b.n	800b6de <fillrhs_cc+0x26e>
    work.rhs[i] = 0;
 800b6c2:	4a26      	ldr	r2, [pc, #152]	@ (800b75c <fillrhs_cc+0x2ec>)
 800b6c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6c6:	3320      	adds	r3, #32
 800b6c8:	00db      	lsls	r3, r3, #3
 800b6ca:	18d1      	adds	r1, r2, r3
 800b6cc:	f04f 0200 	mov.w	r2, #0
 800b6d0:	f04f 0300 	mov.w	r3, #0
 800b6d4:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 13; i < 22; i++)
 800b6d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6da:	3301      	adds	r3, #1
 800b6dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6e0:	2b15      	cmp	r3, #21
 800b6e2:	ddee      	ble.n	800b6c2 <fillrhs_cc+0x252>
  for (i = 0; i < 9; i++)
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6e8:	e023      	b.n	800b732 <fillrhs_cc+0x2c2>
    r2[i] = work.s_inv[i]*(smu - ds_aff[i]*dz_aff[i]);
 800b6ea:	4a1c      	ldr	r2, [pc, #112]	@ (800b75c <fillrhs_cc+0x2ec>)
 800b6ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6ee:	3309      	adds	r3, #9
 800b6f0:	00db      	lsls	r3, r3, #3
 800b6f2:	4413      	add	r3, r2
 800b6f4:	ed93 6b00 	vldr	d6, [r3]
 800b6f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6fa:	00db      	lsls	r3, r3, #3
 800b6fc:	693a      	ldr	r2, [r7, #16]
 800b6fe:	4413      	add	r3, r2
 800b700:	ed93 5b00 	vldr	d5, [r3]
 800b704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b706:	00db      	lsls	r3, r3, #3
 800b708:	68fa      	ldr	r2, [r7, #12]
 800b70a:	4413      	add	r3, r2
 800b70c:	ed93 7b00 	vldr	d7, [r3]
 800b710:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b714:	ed97 5b00 	vldr	d5, [r7]
 800b718:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b71c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b71e:	00db      	lsls	r3, r3, #3
 800b720:	697a      	ldr	r2, [r7, #20]
 800b722:	4413      	add	r3, r2
 800b724:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b728:	ed83 7b00 	vstr	d7, [r3]
  for (i = 0; i < 9; i++)
 800b72c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b72e:	3301      	adds	r3, #1
 800b730:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b734:	2b08      	cmp	r3, #8
 800b736:	ddd8      	ble.n	800b6ea <fillrhs_cc+0x27a>
}
 800b738:	bf00      	nop
 800b73a:	bf00      	nop
 800b73c:	3744      	adds	r7, #68	@ 0x44
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr
 800b746:	bf00      	nop
 800b748:	1c71c71c 	.word	0x1c71c71c
 800b74c:	3fbc71c7 	.word	0x3fbc71c7
 800b750:	24007190 	.word	0x24007190
 800b754:	24007300 	.word	0x24007300
 800b758:	24007348 	.word	0x24007348
 800b75c:	24007070 	.word	0x24007070
 800b760:	3ff00000 	.word	0x3ff00000

0800b764 <refine>:
void refine(double *target, double *var) {
 800b764:	b580      	push	{r7, lr}
 800b766:	b088      	sub	sp, #32
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
  int i, j;
  double *residual = work.buffer;
 800b76e:	4b38      	ldr	r3, [pc, #224]	@ (800b850 <refine+0xec>)
 800b770:	60fb      	str	r3, [r7, #12]
  double norm2;
  double *new_var = work.buffer2;
 800b772:	4b38      	ldr	r3, [pc, #224]	@ (800b854 <refine+0xf0>)
 800b774:	60bb      	str	r3, [r7, #8]
  for (j = 0; j < cvxgen_settings.refine_steps; j++) {
 800b776:	2300      	movs	r3, #0
 800b778:	61bb      	str	r3, [r7, #24]
 800b77a:	e05e      	b.n	800b83a <refine+0xd6>
    norm2 = 0;
 800b77c:	f04f 0200 	mov.w	r2, #0
 800b780:	f04f 0300 	mov.w	r3, #0
 800b784:	e9c7 2304 	strd	r2, r3, [r7, #16]
    matrix_multiply(residual, var);
 800b788:	6839      	ldr	r1, [r7, #0]
 800b78a:	68f8      	ldr	r0, [r7, #12]
 800b78c:	f7fe fbd2 	bl	8009f34 <matrix_multiply>
    for (i = 0; i < 22; i++) {
 800b790:	2300      	movs	r3, #0
 800b792:	61fb      	str	r3, [r7, #28]
 800b794:	e02a      	b.n	800b7ec <refine+0x88>
      residual[i] = residual[i] - target[i];
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	00db      	lsls	r3, r3, #3
 800b79a:	68fa      	ldr	r2, [r7, #12]
 800b79c:	4413      	add	r3, r2
 800b79e:	ed93 6b00 	vldr	d6, [r3]
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	00db      	lsls	r3, r3, #3
 800b7a6:	687a      	ldr	r2, [r7, #4]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	ed93 7b00 	vldr	d7, [r3]
 800b7ae:	69fb      	ldr	r3, [r7, #28]
 800b7b0:	00db      	lsls	r3, r3, #3
 800b7b2:	68fa      	ldr	r2, [r7, #12]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b7ba:	ed83 7b00 	vstr	d7, [r3]
      norm2 += residual[i]*residual[i];
 800b7be:	69fb      	ldr	r3, [r7, #28]
 800b7c0:	00db      	lsls	r3, r3, #3
 800b7c2:	68fa      	ldr	r2, [r7, #12]
 800b7c4:	4413      	add	r3, r2
 800b7c6:	ed93 6b00 	vldr	d6, [r3]
 800b7ca:	69fb      	ldr	r3, [r7, #28]
 800b7cc:	00db      	lsls	r3, r3, #3
 800b7ce:	68fa      	ldr	r2, [r7, #12]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	ed93 7b00 	vldr	d7, [r3]
 800b7d6:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b7da:	ed97 6b04 	vldr	d6, [r7, #16]
 800b7de:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b7e2:	ed87 7b04 	vstr	d7, [r7, #16]
    for (i = 0; i < 22; i++) {
 800b7e6:	69fb      	ldr	r3, [r7, #28]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	61fb      	str	r3, [r7, #28]
 800b7ec:	69fb      	ldr	r3, [r7, #28]
 800b7ee:	2b15      	cmp	r3, #21
 800b7f0:	ddd1      	ble.n	800b796 <refine+0x32>
      else
        printf("After refinement we get squared norm %.6g.\n", norm2);
    }
#endif
    /* Solve to find new_var = KKT \ (target - A*var). */
    ldl_solve(residual, new_var);
 800b7f2:	68b9      	ldr	r1, [r7, #8]
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f7fc fa57 	bl	8007ca8 <ldl_solve>
    /* Update var += new_var, or var += KKT \ (target - A*var). */
    for (i = 0; i < 22; i++) {
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	61fb      	str	r3, [r7, #28]
 800b7fe:	e016      	b.n	800b82e <refine+0xca>
      var[i] -= new_var[i];
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	00db      	lsls	r3, r3, #3
 800b804:	683a      	ldr	r2, [r7, #0]
 800b806:	4413      	add	r3, r2
 800b808:	ed93 6b00 	vldr	d6, [r3]
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	00db      	lsls	r3, r3, #3
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	4413      	add	r3, r2
 800b814:	ed93 7b00 	vldr	d7, [r3]
 800b818:	69fb      	ldr	r3, [r7, #28]
 800b81a:	00db      	lsls	r3, r3, #3
 800b81c:	683a      	ldr	r2, [r7, #0]
 800b81e:	4413      	add	r3, r2
 800b820:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b824:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 22; i++) {
 800b828:	69fb      	ldr	r3, [r7, #28]
 800b82a:	3301      	adds	r3, #1
 800b82c:	61fb      	str	r3, [r7, #28]
 800b82e:	69fb      	ldr	r3, [r7, #28]
 800b830:	2b15      	cmp	r3, #21
 800b832:	dde5      	ble.n	800b800 <refine+0x9c>
  for (j = 0; j < cvxgen_settings.refine_steps; j++) {
 800b834:	69bb      	ldr	r3, [r7, #24]
 800b836:	3301      	adds	r3, #1
 800b838:	61bb      	str	r3, [r7, #24]
 800b83a:	4b07      	ldr	r3, [pc, #28]	@ (800b858 <refine+0xf4>)
 800b83c:	695b      	ldr	r3, [r3, #20]
 800b83e:	69ba      	ldr	r2, [r7, #24]
 800b840:	429a      	cmp	r2, r3
 800b842:	db9b      	blt.n	800b77c <refine+0x18>
      printf("Initial residual before refinement has norm squared %.6g.\n", norm2);
    else
      printf("After refinement we get squared norm %.6g.\n", norm2);
  }
#endif
}
 800b844:	bf00      	nop
 800b846:	bf00      	nop
 800b848:	3720      	adds	r7, #32
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	bf00      	nop
 800b850:	24007440 	.word	0x24007440
 800b854:	240074f0 	.word	0x240074f0
 800b858:	24007a40 	.word	0x24007a40

0800b85c <calc_ineq_resid_squared>:
double calc_ineq_resid_squared(void) {
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
  /* Calculates the norm ||-Gx - s + h||. */
  double norm2_squared;
  int i;
  /* Find -Gx. */
  multbymG(work.buffer, work.x);
 800b862:	492d      	ldr	r1, [pc, #180]	@ (800b918 <calc_ineq_resid_squared+0xbc>)
 800b864:	482d      	ldr	r0, [pc, #180]	@ (800b91c <calc_ineq_resid_squared+0xc0>)
 800b866:	f7ff f973 	bl	800ab50 <multbymG>
  /* Add -s + h. */
  for (i = 0; i < 9; i++)
 800b86a:	2300      	movs	r3, #0
 800b86c:	607b      	str	r3, [r7, #4]
 800b86e:	e022      	b.n	800b8b6 <calc_ineq_resid_squared+0x5a>
    work.buffer[i] += -work.s[i] + work.h[i];
 800b870:	4a2b      	ldr	r2, [pc, #172]	@ (800b920 <calc_ineq_resid_squared+0xc4>)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	337a      	adds	r3, #122	@ 0x7a
 800b876:	00db      	lsls	r3, r3, #3
 800b878:	4413      	add	r3, r2
 800b87a:	ed93 6b00 	vldr	d6, [r3]
 800b87e:	4a28      	ldr	r2, [pc, #160]	@ (800b920 <calc_ineq_resid_squared+0xc4>)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	00db      	lsls	r3, r3, #3
 800b884:	4413      	add	r3, r2
 800b886:	ed93 5b00 	vldr	d5, [r3]
 800b88a:	4b25      	ldr	r3, [pc, #148]	@ (800b920 <calc_ineq_resid_squared+0xc4>)
 800b88c:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	00db      	lsls	r3, r3, #3
 800b894:	4413      	add	r3, r2
 800b896:	ed93 7b00 	vldr	d7, [r3]
 800b89a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b89e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b8a2:	4a1f      	ldr	r2, [pc, #124]	@ (800b920 <calc_ineq_resid_squared+0xc4>)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	337a      	adds	r3, #122	@ 0x7a
 800b8a8:	00db      	lsls	r3, r3, #3
 800b8aa:	4413      	add	r3, r2
 800b8ac:	ed83 7b00 	vstr	d7, [r3]
  for (i = 0; i < 9; i++)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	607b      	str	r3, [r7, #4]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2b08      	cmp	r3, #8
 800b8ba:	ddd9      	ble.n	800b870 <calc_ineq_resid_squared+0x14>
  /* Now find the squared norm. */
  norm2_squared = 0;
 800b8bc:	f04f 0200 	mov.w	r2, #0
 800b8c0:	f04f 0300 	mov.w	r3, #0
 800b8c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
  for (i = 0; i < 9; i++)
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	607b      	str	r3, [r7, #4]
 800b8cc:	e018      	b.n	800b900 <calc_ineq_resid_squared+0xa4>
    norm2_squared += work.buffer[i]*work.buffer[i];
 800b8ce:	4a14      	ldr	r2, [pc, #80]	@ (800b920 <calc_ineq_resid_squared+0xc4>)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	337a      	adds	r3, #122	@ 0x7a
 800b8d4:	00db      	lsls	r3, r3, #3
 800b8d6:	4413      	add	r3, r2
 800b8d8:	ed93 6b00 	vldr	d6, [r3]
 800b8dc:	4a10      	ldr	r2, [pc, #64]	@ (800b920 <calc_ineq_resid_squared+0xc4>)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	337a      	adds	r3, #122	@ 0x7a
 800b8e2:	00db      	lsls	r3, r3, #3
 800b8e4:	4413      	add	r3, r2
 800b8e6:	ed93 7b00 	vldr	d7, [r3]
 800b8ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b8ee:	ed97 6b02 	vldr	d6, [r7, #8]
 800b8f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b8f6:	ed87 7b02 	vstr	d7, [r7, #8]
  for (i = 0; i < 9; i++)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	607b      	str	r3, [r7, #4]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2b08      	cmp	r3, #8
 800b904:	dde3      	ble.n	800b8ce <calc_ineq_resid_squared+0x72>
  return norm2_squared;
 800b906:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b90a:	ec43 2b17 	vmov	d7, r2, r3
}
 800b90e:	eeb0 0b47 	vmov.f64	d0, d7
 800b912:	3710      	adds	r7, #16
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}
 800b918:	24007220 	.word	0x24007220
 800b91c:	24007440 	.word	0x24007440
 800b920:	24007070 	.word	0x24007070

0800b924 <calc_eq_resid_squared>:
double calc_eq_resid_squared(void) {
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
  /* Calculates the norm ||-Ax + b||. */
  double norm2_squared;
  int i;
  /* Find -Ax. */
  multbymA(work.buffer, work.x);
 800b92a:	4929      	ldr	r1, [pc, #164]	@ (800b9d0 <calc_eq_resid_squared+0xac>)
 800b92c:	4829      	ldr	r0, [pc, #164]	@ (800b9d4 <calc_eq_resid_squared+0xb0>)
 800b92e:	f7ff f8d7 	bl	800aae0 <multbymA>
  /* Add +b. */
  for (i = 0; i < 0; i++)
 800b932:	2300      	movs	r3, #0
 800b934:	607b      	str	r3, [r7, #4]
 800b936:	e01a      	b.n	800b96e <calc_eq_resid_squared+0x4a>
    work.buffer[i] += work.b[i];
 800b938:	4a27      	ldr	r2, [pc, #156]	@ (800b9d8 <calc_eq_resid_squared+0xb4>)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	337a      	adds	r3, #122	@ 0x7a
 800b93e:	00db      	lsls	r3, r3, #3
 800b940:	4413      	add	r3, r2
 800b942:	ed93 6b00 	vldr	d6, [r3]
 800b946:	4b24      	ldr	r3, [pc, #144]	@ (800b9d8 <calc_eq_resid_squared+0xb4>)
 800b948:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	00db      	lsls	r3, r3, #3
 800b950:	4413      	add	r3, r2
 800b952:	ed93 7b00 	vldr	d7, [r3]
 800b956:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b95a:	4a1f      	ldr	r2, [pc, #124]	@ (800b9d8 <calc_eq_resid_squared+0xb4>)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	337a      	adds	r3, #122	@ 0x7a
 800b960:	00db      	lsls	r3, r3, #3
 800b962:	4413      	add	r3, r2
 800b964:	ed83 7b00 	vstr	d7, [r3]
  for (i = 0; i < 0; i++)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	3301      	adds	r3, #1
 800b96c:	607b      	str	r3, [r7, #4]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2b00      	cmp	r3, #0
 800b972:	dbe1      	blt.n	800b938 <calc_eq_resid_squared+0x14>
  /* Now find the squared norm. */
  norm2_squared = 0;
 800b974:	f04f 0200 	mov.w	r2, #0
 800b978:	f04f 0300 	mov.w	r3, #0
 800b97c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  for (i = 0; i < 0; i++)
 800b980:	2300      	movs	r3, #0
 800b982:	607b      	str	r3, [r7, #4]
 800b984:	e018      	b.n	800b9b8 <calc_eq_resid_squared+0x94>
    norm2_squared += work.buffer[i]*work.buffer[i];
 800b986:	4a14      	ldr	r2, [pc, #80]	@ (800b9d8 <calc_eq_resid_squared+0xb4>)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	337a      	adds	r3, #122	@ 0x7a
 800b98c:	00db      	lsls	r3, r3, #3
 800b98e:	4413      	add	r3, r2
 800b990:	ed93 6b00 	vldr	d6, [r3]
 800b994:	4a10      	ldr	r2, [pc, #64]	@ (800b9d8 <calc_eq_resid_squared+0xb4>)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	337a      	adds	r3, #122	@ 0x7a
 800b99a:	00db      	lsls	r3, r3, #3
 800b99c:	4413      	add	r3, r2
 800b99e:	ed93 7b00 	vldr	d7, [r3]
 800b9a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b9a6:	ed97 6b02 	vldr	d6, [r7, #8]
 800b9aa:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b9ae:	ed87 7b02 	vstr	d7, [r7, #8]
  for (i = 0; i < 0; i++)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	607b      	str	r3, [r7, #4]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	dbe3      	blt.n	800b986 <calc_eq_resid_squared+0x62>
  return norm2_squared;
 800b9be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b9c2:	ec43 2b17 	vmov	d7, r2, r3
}
 800b9c6:	eeb0 0b47 	vmov.f64	d0, d7
 800b9ca:	3710      	adds	r7, #16
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	24007220 	.word	0x24007220
 800b9d4:	24007440 	.word	0x24007440
 800b9d8:	24007070 	.word	0x24007070
 800b9dc:	00000000 	.word	0x00000000

0800b9e0 <better_start>:
void better_start(void) {
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b088      	sub	sp, #32
 800b9e4:	af00      	add	r7, sp, #0
  /* Calculates a better starting point, using a similar approach to CVXOPT. */
  /* Not yet speed optimized. */
  int i;
  double *x, *s, *z, *y;
  double alpha;
  work.block_33[0] = -1;
 800b9e6:	4b9a      	ldr	r3, [pc, #616]	@ (800bc50 <better_start+0x270>)
 800b9e8:	f503 631c 	add.w	r3, r3, #2496	@ 0x9c0
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	f04f 0200 	mov.w	r2, #0
 800b9f2:	4b98      	ldr	r3, [pc, #608]	@ (800bc54 <better_start+0x274>)
 800b9f4:	e9c1 2300 	strd	r2, r3, [r1]
  /* Make sure sinvz is 1 to make hijacked KKT system ok. */
  for (i = 0; i < 9; i++)
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	61fb      	str	r3, [r7, #28]
 800b9fc:	e00c      	b.n	800ba18 <better_start+0x38>
    work.s_inv_z[i] = 1;
 800b9fe:	4a94      	ldr	r2, [pc, #592]	@ (800bc50 <better_start+0x270>)
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	3312      	adds	r3, #18
 800ba04:	00db      	lsls	r3, r3, #3
 800ba06:	18d1      	adds	r1, r2, r3
 800ba08:	f04f 0200 	mov.w	r2, #0
 800ba0c:	4b92      	ldr	r3, [pc, #584]	@ (800bc58 <better_start+0x278>)
 800ba0e:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 9; i++)
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	3301      	adds	r3, #1
 800ba16:	61fb      	str	r3, [r7, #28]
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	2b08      	cmp	r3, #8
 800ba1c:	ddef      	ble.n	800b9fe <better_start+0x1e>
  fill_KKT();
 800ba1e:	f7fe fe9d 	bl	800a75c <fill_KKT>
  ldl_factor();
 800ba22:	f7fc fedb 	bl	80087dc <ldl_factor>
  fillrhs_start();
 800ba26:	f000 f923 	bl	800bc70 <fillrhs_start>
  /* Borrow work.lhs_aff for the solution. */
  ldl_solve(work.rhs, work.lhs_aff);
 800ba2a:	498c      	ldr	r1, [pc, #560]	@ (800bc5c <better_start+0x27c>)
 800ba2c:	488c      	ldr	r0, [pc, #560]	@ (800bc60 <better_start+0x280>)
 800ba2e:	f7fc f93b 	bl	8007ca8 <ldl_solve>
  /* Don't do any refinement for now. Precision doesn't matter too much. */
  x = work.lhs_aff;
 800ba32:	4b8a      	ldr	r3, [pc, #552]	@ (800bc5c <better_start+0x27c>)
 800ba34:	60fb      	str	r3, [r7, #12]
  s = work.lhs_aff + 4;
 800ba36:	4b8b      	ldr	r3, [pc, #556]	@ (800bc64 <better_start+0x284>)
 800ba38:	60bb      	str	r3, [r7, #8]
  z = work.lhs_aff + 13;
 800ba3a:	4b8b      	ldr	r3, [pc, #556]	@ (800bc68 <better_start+0x288>)
 800ba3c:	607b      	str	r3, [r7, #4]
  y = work.lhs_aff + 22;
 800ba3e:	4b8b      	ldr	r3, [pc, #556]	@ (800bc6c <better_start+0x28c>)
 800ba40:	603b      	str	r3, [r7, #0]
  /* Just set x and y as is. */
  for (i = 0; i < 4; i++)
 800ba42:	2300      	movs	r3, #0
 800ba44:	61fb      	str	r3, [r7, #28]
 800ba46:	e00f      	b.n	800ba68 <better_start+0x88>
    work.x[i] = x[i];
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	00db      	lsls	r3, r3, #3
 800ba4c:	68fa      	ldr	r2, [r7, #12]
 800ba4e:	4413      	add	r3, r2
 800ba50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba54:	487e      	ldr	r0, [pc, #504]	@ (800bc50 <better_start+0x270>)
 800ba56:	69f9      	ldr	r1, [r7, #28]
 800ba58:	3136      	adds	r1, #54	@ 0x36
 800ba5a:	00c9      	lsls	r1, r1, #3
 800ba5c:	4401      	add	r1, r0
 800ba5e:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 4; i++)
 800ba62:	69fb      	ldr	r3, [r7, #28]
 800ba64:	3301      	adds	r3, #1
 800ba66:	61fb      	str	r3, [r7, #28]
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	2b03      	cmp	r3, #3
 800ba6c:	ddec      	ble.n	800ba48 <better_start+0x68>
  for (i = 0; i < 0; i++)
 800ba6e:	2300      	movs	r3, #0
 800ba70:	61fb      	str	r3, [r7, #28]
 800ba72:	e010      	b.n	800ba96 <better_start+0xb6>
    work.y[i] = y[i];
 800ba74:	69fb      	ldr	r3, [r7, #28]
 800ba76:	00db      	lsls	r3, r3, #3
 800ba78:	683a      	ldr	r2, [r7, #0]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	4a74      	ldr	r2, [pc, #464]	@ (800bc50 <better_start+0x270>)
 800ba7e:	f8d2 1268 	ldr.w	r1, [r2, #616]	@ 0x268
 800ba82:	69fa      	ldr	r2, [r7, #28]
 800ba84:	00d2      	lsls	r2, r2, #3
 800ba86:	4411      	add	r1, r2
 800ba88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8c:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 0; i++)
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	3301      	adds	r3, #1
 800ba94:	61fb      	str	r3, [r7, #28]
 800ba96:	69fb      	ldr	r3, [r7, #28]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	dbeb      	blt.n	800ba74 <better_start+0x94>
  /* Now complete the initialization. Start with s. */
  /* Must have alpha > max(z). */
  alpha = -1e99;
 800ba9c:	a36a      	add	r3, pc, #424	@ (adr r3, 800bc48 <better_start+0x268>)
 800ba9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (i = 0; i < 9; i++)
 800baa6:	2300      	movs	r3, #0
 800baa8:	61fb      	str	r3, [r7, #28]
 800baaa:	e017      	b.n	800badc <better_start+0xfc>
    if (alpha < z[i])
 800baac:	69fb      	ldr	r3, [r7, #28]
 800baae:	00db      	lsls	r3, r3, #3
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	4413      	add	r3, r2
 800bab4:	ed93 7b00 	vldr	d7, [r3]
 800bab8:	ed97 6b04 	vldr	d6, [r7, #16]
 800babc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bac4:	d507      	bpl.n	800bad6 <better_start+0xf6>
      alpha = z[i];
 800bac6:	69fb      	ldr	r3, [r7, #28]
 800bac8:	00db      	lsls	r3, r3, #3
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	4413      	add	r3, r2
 800bace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (i = 0; i < 9; i++)
 800bad6:	69fb      	ldr	r3, [r7, #28]
 800bad8:	3301      	adds	r3, #1
 800bada:	61fb      	str	r3, [r7, #28]
 800badc:	69fb      	ldr	r3, [r7, #28]
 800bade:	2b08      	cmp	r3, #8
 800bae0:	dde4      	ble.n	800baac <better_start+0xcc>
  if (alpha < 0) {
 800bae2:	ed97 7b04 	vldr	d7, [r7, #16]
 800bae6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800baea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baee:	d519      	bpl.n	800bb24 <better_start+0x144>
    for (i = 0; i < 9; i++)
 800baf0:	2300      	movs	r3, #0
 800baf2:	61fb      	str	r3, [r7, #28]
 800baf4:	e012      	b.n	800bb1c <better_start+0x13c>
      work.s[i] = -z[i];
 800baf6:	69fb      	ldr	r3, [r7, #28]
 800baf8:	00db      	lsls	r3, r3, #3
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	4413      	add	r3, r2
 800bafe:	ed93 7b00 	vldr	d7, [r3]
 800bb02:	4b53      	ldr	r3, [pc, #332]	@ (800bc50 <better_start+0x270>)
 800bb04:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	00db      	lsls	r3, r3, #3
 800bb0c:	4413      	add	r3, r2
 800bb0e:	eeb1 7b47 	vneg.f64	d7, d7
 800bb12:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 9; i++)
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	3301      	adds	r3, #1
 800bb1a:	61fb      	str	r3, [r7, #28]
 800bb1c:	69fb      	ldr	r3, [r7, #28]
 800bb1e:	2b08      	cmp	r3, #8
 800bb20:	dde9      	ble.n	800baf6 <better_start+0x116>
 800bb22:	e022      	b.n	800bb6a <better_start+0x18a>
  } else {
    alpha += 1;
 800bb24:	ed97 7b04 	vldr	d7, [r7, #16]
 800bb28:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800bb2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bb30:	ed87 7b04 	vstr	d7, [r7, #16]
    for (i = 0; i < 9; i++)
 800bb34:	2300      	movs	r3, #0
 800bb36:	61fb      	str	r3, [r7, #28]
 800bb38:	e014      	b.n	800bb64 <better_start+0x184>
      work.s[i] = -z[i] + alpha;
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	00db      	lsls	r3, r3, #3
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	4413      	add	r3, r2
 800bb42:	ed93 7b00 	vldr	d7, [r3]
 800bb46:	4b42      	ldr	r3, [pc, #264]	@ (800bc50 <better_start+0x270>)
 800bb48:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	00db      	lsls	r3, r3, #3
 800bb50:	4413      	add	r3, r2
 800bb52:	ed97 6b04 	vldr	d6, [r7, #16]
 800bb56:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bb5a:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 9; i++)
 800bb5e:	69fb      	ldr	r3, [r7, #28]
 800bb60:	3301      	adds	r3, #1
 800bb62:	61fb      	str	r3, [r7, #28]
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	2b08      	cmp	r3, #8
 800bb68:	dde7      	ble.n	800bb3a <better_start+0x15a>
  }
  /* Now initialize z. */
  /* Now must have alpha > max(-z). */
  alpha = -1e99;
 800bb6a:	a337      	add	r3, pc, #220	@ (adr r3, 800bc48 <better_start+0x268>)
 800bb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb70:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (i = 0; i < 9; i++)
 800bb74:	2300      	movs	r3, #0
 800bb76:	61fb      	str	r3, [r7, #28]
 800bb78:	e01b      	b.n	800bbb2 <better_start+0x1d2>
    if (alpha < -z[i])
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	00db      	lsls	r3, r3, #3
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	4413      	add	r3, r2
 800bb82:	ed93 7b00 	vldr	d7, [r3]
 800bb86:	eeb1 7b47 	vneg.f64	d7, d7
 800bb8a:	ed97 6b04 	vldr	d6, [r7, #16]
 800bb8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb96:	d509      	bpl.n	800bbac <better_start+0x1cc>
      alpha = -z[i];
 800bb98:	69fb      	ldr	r3, [r7, #28]
 800bb9a:	00db      	lsls	r3, r3, #3
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	4413      	add	r3, r2
 800bba0:	ed93 7b00 	vldr	d7, [r3]
 800bba4:	eeb1 7b47 	vneg.f64	d7, d7
 800bba8:	ed87 7b04 	vstr	d7, [r7, #16]
  for (i = 0; i < 9; i++)
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	3301      	adds	r3, #1
 800bbb0:	61fb      	str	r3, [r7, #28]
 800bbb2:	69fb      	ldr	r3, [r7, #28]
 800bbb4:	2b08      	cmp	r3, #8
 800bbb6:	dde0      	ble.n	800bb7a <better_start+0x19a>
  if (alpha < 0) {
 800bbb8:	ed97 7b04 	vldr	d7, [r7, #16]
 800bbbc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bbc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbc4:	d517      	bpl.n	800bbf6 <better_start+0x216>
    for (i = 0; i < 9; i++)
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	61fb      	str	r3, [r7, #28]
 800bbca:	e010      	b.n	800bbee <better_start+0x20e>
      work.z[i] = z[i];
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	00db      	lsls	r3, r3, #3
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	4413      	add	r3, r2
 800bbd4:	4a1e      	ldr	r2, [pc, #120]	@ (800bc50 <better_start+0x270>)
 800bbd6:	f8d2 1264 	ldr.w	r1, [r2, #612]	@ 0x264
 800bbda:	69fa      	ldr	r2, [r7, #28]
 800bbdc:	00d2      	lsls	r2, r2, #3
 800bbde:	4411      	add	r1, r2
 800bbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe4:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 9; i++)
 800bbe8:	69fb      	ldr	r3, [r7, #28]
 800bbea:	3301      	adds	r3, #1
 800bbec:	61fb      	str	r3, [r7, #28]
 800bbee:	69fb      	ldr	r3, [r7, #28]
 800bbf0:	2b08      	cmp	r3, #8
 800bbf2:	ddeb      	ble.n	800bbcc <better_start+0x1ec>
  } else {
    alpha += 1;
    for (i = 0; i < 9; i++)
      work.z[i] = z[i] + alpha;
  }
}
 800bbf4:	e022      	b.n	800bc3c <better_start+0x25c>
    alpha += 1;
 800bbf6:	ed97 7b04 	vldr	d7, [r7, #16]
 800bbfa:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800bbfe:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bc02:	ed87 7b04 	vstr	d7, [r7, #16]
    for (i = 0; i < 9; i++)
 800bc06:	2300      	movs	r3, #0
 800bc08:	61fb      	str	r3, [r7, #28]
 800bc0a:	e014      	b.n	800bc36 <better_start+0x256>
      work.z[i] = z[i] + alpha;
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	00db      	lsls	r3, r3, #3
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	4413      	add	r3, r2
 800bc14:	ed93 6b00 	vldr	d6, [r3]
 800bc18:	4b0d      	ldr	r3, [pc, #52]	@ (800bc50 <better_start+0x270>)
 800bc1a:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 800bc1e:	69fb      	ldr	r3, [r7, #28]
 800bc20:	00db      	lsls	r3, r3, #3
 800bc22:	4413      	add	r3, r2
 800bc24:	ed97 7b04 	vldr	d7, [r7, #16]
 800bc28:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bc2c:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 9; i++)
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	3301      	adds	r3, #1
 800bc34:	61fb      	str	r3, [r7, #28]
 800bc36:	69fb      	ldr	r3, [r7, #28]
 800bc38:	2b08      	cmp	r3, #8
 800bc3a:	dde7      	ble.n	800bc0c <better_start+0x22c>
}
 800bc3c:	bf00      	nop
 800bc3e:	3720      	adds	r7, #32
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	f3af 8000 	nop.w
 800bc48:	a2879f2e 	.word	0xa2879f2e
 800bc4c:	d47d42ae 	.word	0xd47d42ae
 800bc50:	24007070 	.word	0x24007070
 800bc54:	bff00000 	.word	0xbff00000
 800bc58:	3ff00000 	.word	0x3ff00000
 800bc5c:	240072e0 	.word	0x240072e0
 800bc60:	24007170 	.word	0x24007170
 800bc64:	24007300 	.word	0x24007300
 800bc68:	24007348 	.word	0x24007348
 800bc6c:	24007390 	.word	0x24007390

0800bc70 <fillrhs_start>:
void fillrhs_start(void) {
 800bc70:	b480      	push	{r7}
 800bc72:	b087      	sub	sp, #28
 800bc74:	af00      	add	r7, sp, #0
  /* Fill rhs with (-q, 0, h, b). */
  int i;
  double *r1, *r2, *r3, *r4;
  r1 = work.rhs;
 800bc76:	4b33      	ldr	r3, [pc, #204]	@ (800bd44 <fillrhs_start+0xd4>)
 800bc78:	613b      	str	r3, [r7, #16]
  r2 = work.rhs + 4;
 800bc7a:	4b33      	ldr	r3, [pc, #204]	@ (800bd48 <fillrhs_start+0xd8>)
 800bc7c:	60fb      	str	r3, [r7, #12]
  r3 = work.rhs + 13;
 800bc7e:	4b33      	ldr	r3, [pc, #204]	@ (800bd4c <fillrhs_start+0xdc>)
 800bc80:	60bb      	str	r3, [r7, #8]
  r4 = work.rhs + 22;
 800bc82:	4b33      	ldr	r3, [pc, #204]	@ (800bd50 <fillrhs_start+0xe0>)
 800bc84:	607b      	str	r3, [r7, #4]
  for (i = 0; i < 4; i++)
 800bc86:	2300      	movs	r3, #0
 800bc88:	617b      	str	r3, [r7, #20]
 800bc8a:	e011      	b.n	800bcb0 <fillrhs_start+0x40>
    r1[i] = -work.q[i];
 800bc8c:	4a31      	ldr	r2, [pc, #196]	@ (800bd54 <fillrhs_start+0xe4>)
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	331c      	adds	r3, #28
 800bc92:	00db      	lsls	r3, r3, #3
 800bc94:	4413      	add	r3, r2
 800bc96:	ed93 7b00 	vldr	d7, [r3]
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	00db      	lsls	r3, r3, #3
 800bc9e:	693a      	ldr	r2, [r7, #16]
 800bca0:	4413      	add	r3, r2
 800bca2:	eeb1 7b47 	vneg.f64	d7, d7
 800bca6:	ed83 7b00 	vstr	d7, [r3]
  for (i = 0; i < 4; i++)
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	3301      	adds	r3, #1
 800bcae:	617b      	str	r3, [r7, #20]
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	2b03      	cmp	r3, #3
 800bcb4:	ddea      	ble.n	800bc8c <fillrhs_start+0x1c>
  for (i = 0; i < 9; i++)
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	617b      	str	r3, [r7, #20]
 800bcba:	e00c      	b.n	800bcd6 <fillrhs_start+0x66>
    r2[i] = 0;
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	00db      	lsls	r3, r3, #3
 800bcc0:	68fa      	ldr	r2, [r7, #12]
 800bcc2:	18d1      	adds	r1, r2, r3
 800bcc4:	f04f 0200 	mov.w	r2, #0
 800bcc8:	f04f 0300 	mov.w	r3, #0
 800bccc:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 9; i++)
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	617b      	str	r3, [r7, #20]
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	2b08      	cmp	r3, #8
 800bcda:	ddef      	ble.n	800bcbc <fillrhs_start+0x4c>
  for (i = 0; i < 9; i++)
 800bcdc:	2300      	movs	r3, #0
 800bcde:	617b      	str	r3, [r7, #20]
 800bce0:	e00e      	b.n	800bd00 <fillrhs_start+0x90>
    r3[i] = work.h[i];
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	00db      	lsls	r3, r3, #3
 800bce6:	68ba      	ldr	r2, [r7, #8]
 800bce8:	18d1      	adds	r1, r2, r3
 800bcea:	4a1a      	ldr	r2, [pc, #104]	@ (800bd54 <fillrhs_start+0xe4>)
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	00db      	lsls	r3, r3, #3
 800bcf0:	4413      	add	r3, r2
 800bcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf6:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 9; i++)
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	617b      	str	r3, [r7, #20]
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	2b08      	cmp	r3, #8
 800bd04:	dded      	ble.n	800bce2 <fillrhs_start+0x72>
  for (i = 0; i < 0; i++)
 800bd06:	2300      	movs	r3, #0
 800bd08:	617b      	str	r3, [r7, #20]
 800bd0a:	e010      	b.n	800bd2e <fillrhs_start+0xbe>
    r4[i] = work.b[i];
 800bd0c:	4b11      	ldr	r3, [pc, #68]	@ (800bd54 <fillrhs_start+0xe4>)
 800bd0e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	00db      	lsls	r3, r3, #3
 800bd16:	4413      	add	r3, r2
 800bd18:	697a      	ldr	r2, [r7, #20]
 800bd1a:	00d2      	lsls	r2, r2, #3
 800bd1c:	6879      	ldr	r1, [r7, #4]
 800bd1e:	4411      	add	r1, r2
 800bd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd24:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 0; i++)
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	617b      	str	r3, [r7, #20]
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	dbeb      	blt.n	800bd0c <fillrhs_start+0x9c>
}
 800bd34:	bf00      	nop
 800bd36:	bf00      	nop
 800bd38:	371c      	adds	r7, #28
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr
 800bd42:	bf00      	nop
 800bd44:	24007170 	.word	0x24007170
 800bd48:	24007190 	.word	0x24007190
 800bd4c:	240071d8 	.word	0x240071d8
 800bd50:	24007220 	.word	0x24007220
 800bd54:	24007070 	.word	0x24007070

0800bd58 <cvxgen_solve>:
long cvxgen_solve(void) {
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b08a      	sub	sp, #40	@ 0x28
 800bd5c:	af00      	add	r7, sp, #0
  int i;
  int iter;
  double *dx, *ds, *dy, *dz;
  double minval;
  double alpha;
  work.converged = 0;
 800bd5e:	4bb4      	ldr	r3, [pc, #720]	@ (800c030 <cvxgen_solve+0x2d8>)
 800bd60:	2200      	movs	r2, #0
 800bd62:	f8c3 29cc 	str.w	r2, [r3, #2508]	@ 0x9cc
  // work.start_time = DWT->CYCCNT;
  setup_pointers();
 800bd66:	f7ff f9a3 	bl	800b0b0 <setup_pointers>
  pre_ops();
 800bd6a:	f7ff f918 	bl	800af9e <pre_ops>
#ifndef ZERO_LIBRARY_MODE
  if (settings.verbose)
    printf("iter     objv        gap       |Ax-b|    |Gx+s-h|    step\n");
#endif
  fillq();
 800bd6e:	f7ff f8a1 	bl	800aeb4 <fillq>
  fillh();
 800bd72:	f7ff f8c3 	bl	800aefc <fillh>
  fillb();
 800bd76:	f7ff f90b 	bl	800af90 <fillb>
  if (cvxgen_settings.better_start)
 800bd7a:	4bae      	ldr	r3, [pc, #696]	@ (800c034 <cvxgen_solve+0x2dc>)
 800bd7c:	699b      	ldr	r3, [r3, #24]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d002      	beq.n	800bd88 <cvxgen_solve+0x30>
    better_start();
 800bd82:	f7ff fe2d 	bl	800b9e0 <better_start>
 800bd86:	e001      	b.n	800bd8c <cvxgen_solve+0x34>
  else
    set_start();
 800bd88:	f7ff f9b8 	bl	800b0fc <set_start>
  for (iter = 0; iter < cvxgen_settings.max_iters; iter++) {
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	623b      	str	r3, [r7, #32]
 800bd90:	e204      	b.n	800c19c <cvxgen_solve+0x444>
    for (i = 0; i < 9; i++) {
 800bd92:	2300      	movs	r3, #0
 800bd94:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd96:	e02d      	b.n	800bdf4 <cvxgen_solve+0x9c>
      work.s_inv[i] = 1.0 / work.s[i];
 800bd98:	4ba5      	ldr	r3, [pc, #660]	@ (800c030 <cvxgen_solve+0x2d8>)
 800bd9a:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800bd9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda0:	00db      	lsls	r3, r3, #3
 800bda2:	4413      	add	r3, r2
 800bda4:	ed93 6b00 	vldr	d6, [r3]
 800bda8:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 800bdac:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800bdb0:	4a9f      	ldr	r2, [pc, #636]	@ (800c030 <cvxgen_solve+0x2d8>)
 800bdb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb4:	3309      	adds	r3, #9
 800bdb6:	00db      	lsls	r3, r3, #3
 800bdb8:	4413      	add	r3, r2
 800bdba:	ed83 7b00 	vstr	d7, [r3]
      work.s_inv_z[i] = work.s_inv[i]*work.z[i];
 800bdbe:	4a9c      	ldr	r2, [pc, #624]	@ (800c030 <cvxgen_solve+0x2d8>)
 800bdc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc2:	3309      	adds	r3, #9
 800bdc4:	00db      	lsls	r3, r3, #3
 800bdc6:	4413      	add	r3, r2
 800bdc8:	ed93 6b00 	vldr	d6, [r3]
 800bdcc:	4b98      	ldr	r3, [pc, #608]	@ (800c030 <cvxgen_solve+0x2d8>)
 800bdce:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 800bdd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdd4:	00db      	lsls	r3, r3, #3
 800bdd6:	4413      	add	r3, r2
 800bdd8:	ed93 7b00 	vldr	d7, [r3]
 800bddc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bde0:	4a93      	ldr	r2, [pc, #588]	@ (800c030 <cvxgen_solve+0x2d8>)
 800bde2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde4:	3312      	adds	r3, #18
 800bde6:	00db      	lsls	r3, r3, #3
 800bde8:	4413      	add	r3, r2
 800bdea:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 9; i++) {
 800bdee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf6:	2b08      	cmp	r3, #8
 800bdf8:	ddce      	ble.n	800bd98 <cvxgen_solve+0x40>
    }
    work.block_33[0] = 0;
 800bdfa:	4b8d      	ldr	r3, [pc, #564]	@ (800c030 <cvxgen_solve+0x2d8>)
 800bdfc:	f503 631c 	add.w	r3, r3, #2496	@ 0x9c0
 800be00:	4619      	mov	r1, r3
 800be02:	f04f 0200 	mov.w	r2, #0
 800be06:	f04f 0300 	mov.w	r3, #0
 800be0a:	e9c1 2300 	strd	r2, r3, [r1]
    fill_KKT();
 800be0e:	f7fe fca5 	bl	800a75c <fill_KKT>
    ldl_factor();
 800be12:	f7fc fce3 	bl	80087dc <ldl_factor>
    /* Affine scaling directions. */
    fillrhs_aff();
 800be16:	f7ff fa51 	bl	800b2bc <fillrhs_aff>
    ldl_solve(work.rhs, work.lhs_aff);
 800be1a:	4987      	ldr	r1, [pc, #540]	@ (800c038 <cvxgen_solve+0x2e0>)
 800be1c:	4887      	ldr	r0, [pc, #540]	@ (800c03c <cvxgen_solve+0x2e4>)
 800be1e:	f7fb ff43 	bl	8007ca8 <ldl_solve>
    refine(work.rhs, work.lhs_aff);
 800be22:	4985      	ldr	r1, [pc, #532]	@ (800c038 <cvxgen_solve+0x2e0>)
 800be24:	4885      	ldr	r0, [pc, #532]	@ (800c03c <cvxgen_solve+0x2e4>)
 800be26:	f7ff fc9d 	bl	800b764 <refine>
    /* Centering plus corrector directions. */
    fillrhs_cc();
 800be2a:	f7ff fb21 	bl	800b470 <fillrhs_cc>
    ldl_solve(work.rhs, work.lhs_cc);
 800be2e:	4984      	ldr	r1, [pc, #528]	@ (800c040 <cvxgen_solve+0x2e8>)
 800be30:	4882      	ldr	r0, [pc, #520]	@ (800c03c <cvxgen_solve+0x2e4>)
 800be32:	f7fb ff39 	bl	8007ca8 <ldl_solve>
    refine(work.rhs, work.lhs_cc);
 800be36:	4982      	ldr	r1, [pc, #520]	@ (800c040 <cvxgen_solve+0x2e8>)
 800be38:	4880      	ldr	r0, [pc, #512]	@ (800c03c <cvxgen_solve+0x2e4>)
 800be3a:	f7ff fc93 	bl	800b764 <refine>
    /* Add the two together and store in aff. */
    for (i = 0; i < 22; i++)
 800be3e:	2300      	movs	r3, #0
 800be40:	627b      	str	r3, [r7, #36]	@ 0x24
 800be42:	e019      	b.n	800be78 <cvxgen_solve+0x120>
      work.lhs_aff[i] += work.lhs_cc[i];
 800be44:	4a7a      	ldr	r2, [pc, #488]	@ (800c030 <cvxgen_solve+0x2d8>)
 800be46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be48:	334e      	adds	r3, #78	@ 0x4e
 800be4a:	00db      	lsls	r3, r3, #3
 800be4c:	4413      	add	r3, r2
 800be4e:	ed93 6b00 	vldr	d6, [r3]
 800be52:	4a77      	ldr	r2, [pc, #476]	@ (800c030 <cvxgen_solve+0x2d8>)
 800be54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be56:	3364      	adds	r3, #100	@ 0x64
 800be58:	00db      	lsls	r3, r3, #3
 800be5a:	4413      	add	r3, r2
 800be5c:	ed93 7b00 	vldr	d7, [r3]
 800be60:	ee36 7b07 	vadd.f64	d7, d6, d7
 800be64:	4a72      	ldr	r2, [pc, #456]	@ (800c030 <cvxgen_solve+0x2d8>)
 800be66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be68:	334e      	adds	r3, #78	@ 0x4e
 800be6a:	00db      	lsls	r3, r3, #3
 800be6c:	4413      	add	r3, r2
 800be6e:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 22; i++)
 800be72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be74:	3301      	adds	r3, #1
 800be76:	627b      	str	r3, [r7, #36]	@ 0x24
 800be78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be7a:	2b15      	cmp	r3, #21
 800be7c:	dde2      	ble.n	800be44 <cvxgen_solve+0xec>
    /* Rename aff to reflect its new meaning. */
    dx = work.lhs_aff;
 800be7e:	4b6e      	ldr	r3, [pc, #440]	@ (800c038 <cvxgen_solve+0x2e0>)
 800be80:	60fb      	str	r3, [r7, #12]
    ds = work.lhs_aff + 4;
 800be82:	4b70      	ldr	r3, [pc, #448]	@ (800c044 <cvxgen_solve+0x2ec>)
 800be84:	60bb      	str	r3, [r7, #8]
    dz = work.lhs_aff + 13;
 800be86:	4b70      	ldr	r3, [pc, #448]	@ (800c048 <cvxgen_solve+0x2f0>)
 800be88:	607b      	str	r3, [r7, #4]
    dy = work.lhs_aff + 22;
 800be8a:	4b6d      	ldr	r3, [pc, #436]	@ (800c040 <cvxgen_solve+0x2e8>)
 800be8c:	603b      	str	r3, [r7, #0]
    /* Find min(min(ds./s), min(dz./z)). */
    minval = 0;
 800be8e:	f04f 0200 	mov.w	r2, #0
 800be92:	f04f 0300 	mov.w	r3, #0
 800be96:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (i = 0; i < 9; i++)
 800be9a:	2300      	movs	r3, #0
 800be9c:	627b      	str	r3, [r7, #36]	@ 0x24
 800be9e:	e02b      	b.n	800bef8 <cvxgen_solve+0x1a0>
      if (ds[i] < minval*work.s[i])
 800bea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bea2:	00db      	lsls	r3, r3, #3
 800bea4:	68ba      	ldr	r2, [r7, #8]
 800bea6:	4413      	add	r3, r2
 800bea8:	ed93 6b00 	vldr	d6, [r3]
 800beac:	4b60      	ldr	r3, [pc, #384]	@ (800c030 <cvxgen_solve+0x2d8>)
 800beae:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800beb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beb4:	00db      	lsls	r3, r3, #3
 800beb6:	4413      	add	r3, r2
 800beb8:	ed93 5b00 	vldr	d5, [r3]
 800bebc:	ed97 7b06 	vldr	d7, [r7, #24]
 800bec0:	ee25 7b07 	vmul.f64	d7, d5, d7
 800bec4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800becc:	d511      	bpl.n	800bef2 <cvxgen_solve+0x19a>
        minval = ds[i]/work.s[i];
 800bece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bed0:	00db      	lsls	r3, r3, #3
 800bed2:	68ba      	ldr	r2, [r7, #8]
 800bed4:	4413      	add	r3, r2
 800bed6:	ed93 5b00 	vldr	d5, [r3]
 800beda:	4b55      	ldr	r3, [pc, #340]	@ (800c030 <cvxgen_solve+0x2d8>)
 800bedc:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800bee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bee2:	00db      	lsls	r3, r3, #3
 800bee4:	4413      	add	r3, r2
 800bee6:	ed93 6b00 	vldr	d6, [r3]
 800beea:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800beee:	ed87 7b06 	vstr	d7, [r7, #24]
    for (i = 0; i < 9; i++)
 800bef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef4:	3301      	adds	r3, #1
 800bef6:	627b      	str	r3, [r7, #36]	@ 0x24
 800bef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800befa:	2b08      	cmp	r3, #8
 800befc:	ddd0      	ble.n	800bea0 <cvxgen_solve+0x148>
    for (i = 0; i < 9; i++)
 800befe:	2300      	movs	r3, #0
 800bf00:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf02:	e02b      	b.n	800bf5c <cvxgen_solve+0x204>
      if (dz[i] < minval*work.z[i])
 800bf04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf06:	00db      	lsls	r3, r3, #3
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	4413      	add	r3, r2
 800bf0c:	ed93 6b00 	vldr	d6, [r3]
 800bf10:	4b47      	ldr	r3, [pc, #284]	@ (800c030 <cvxgen_solve+0x2d8>)
 800bf12:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 800bf16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf18:	00db      	lsls	r3, r3, #3
 800bf1a:	4413      	add	r3, r2
 800bf1c:	ed93 5b00 	vldr	d5, [r3]
 800bf20:	ed97 7b06 	vldr	d7, [r7, #24]
 800bf24:	ee25 7b07 	vmul.f64	d7, d5, d7
 800bf28:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bf2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf30:	d511      	bpl.n	800bf56 <cvxgen_solve+0x1fe>
        minval = dz[i]/work.z[i];
 800bf32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf34:	00db      	lsls	r3, r3, #3
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	4413      	add	r3, r2
 800bf3a:	ed93 5b00 	vldr	d5, [r3]
 800bf3e:	4b3c      	ldr	r3, [pc, #240]	@ (800c030 <cvxgen_solve+0x2d8>)
 800bf40:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 800bf44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf46:	00db      	lsls	r3, r3, #3
 800bf48:	4413      	add	r3, r2
 800bf4a:	ed93 6b00 	vldr	d6, [r3]
 800bf4e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800bf52:	ed87 7b06 	vstr	d7, [r7, #24]
    for (i = 0; i < 9; i++)
 800bf56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf58:	3301      	adds	r3, #1
 800bf5a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf5e:	2b08      	cmp	r3, #8
 800bf60:	ddd0      	ble.n	800bf04 <cvxgen_solve+0x1ac>
    /* Find alpha. */
    if (-0.99 < minval)
 800bf62:	ed97 7b06 	vldr	d7, [r7, #24]
 800bf66:	ed9f 6b30 	vldr	d6, [pc, #192]	@ 800c028 <cvxgen_solve+0x2d0>
 800bf6a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bf6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf72:	dd05      	ble.n	800bf80 <cvxgen_solve+0x228>
      alpha = 1;
 800bf74:	f04f 0200 	mov.w	r2, #0
 800bf78:	4b34      	ldr	r3, [pc, #208]	@ (800c04c <cvxgen_solve+0x2f4>)
 800bf7a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800bf7e:	e007      	b.n	800bf90 <cvxgen_solve+0x238>
    else
      alpha = -0.99/minval;
 800bf80:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 800c028 <cvxgen_solve+0x2d0>
 800bf84:	ed97 6b06 	vldr	d6, [r7, #24]
 800bf88:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800bf8c:	ed87 7b04 	vstr	d7, [r7, #16]
    /* Update the primal and dual variables. */
    for (i = 0; i < 4; i++)
 800bf90:	2300      	movs	r3, #0
 800bf92:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf94:	e01c      	b.n	800bfd0 <cvxgen_solve+0x278>
      work.x[i] += alpha*dx[i];
 800bf96:	4a26      	ldr	r2, [pc, #152]	@ (800c030 <cvxgen_solve+0x2d8>)
 800bf98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf9a:	3336      	adds	r3, #54	@ 0x36
 800bf9c:	00db      	lsls	r3, r3, #3
 800bf9e:	4413      	add	r3, r2
 800bfa0:	ed93 6b00 	vldr	d6, [r3]
 800bfa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa6:	00db      	lsls	r3, r3, #3
 800bfa8:	68fa      	ldr	r2, [r7, #12]
 800bfaa:	4413      	add	r3, r2
 800bfac:	ed93 5b00 	vldr	d5, [r3]
 800bfb0:	ed97 7b04 	vldr	d7, [r7, #16]
 800bfb4:	ee25 7b07 	vmul.f64	d7, d5, d7
 800bfb8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bfbc:	4a1c      	ldr	r2, [pc, #112]	@ (800c030 <cvxgen_solve+0x2d8>)
 800bfbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc0:	3336      	adds	r3, #54	@ 0x36
 800bfc2:	00db      	lsls	r3, r3, #3
 800bfc4:	4413      	add	r3, r2
 800bfc6:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 4; i++)
 800bfca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfcc:	3301      	adds	r3, #1
 800bfce:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd2:	2b03      	cmp	r3, #3
 800bfd4:	dddf      	ble.n	800bf96 <cvxgen_solve+0x23e>
    for (i = 0; i < 9; i++)
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfda:	e01e      	b.n	800c01a <cvxgen_solve+0x2c2>
      work.s[i] += alpha*ds[i];
 800bfdc:	4b14      	ldr	r3, [pc, #80]	@ (800c030 <cvxgen_solve+0x2d8>)
 800bfde:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800bfe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfe4:	00db      	lsls	r3, r3, #3
 800bfe6:	4413      	add	r3, r2
 800bfe8:	ed93 6b00 	vldr	d6, [r3]
 800bfec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfee:	00db      	lsls	r3, r3, #3
 800bff0:	68ba      	ldr	r2, [r7, #8]
 800bff2:	4413      	add	r3, r2
 800bff4:	ed93 5b00 	vldr	d5, [r3]
 800bff8:	ed97 7b04 	vldr	d7, [r7, #16]
 800bffc:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c000:	4b0b      	ldr	r3, [pc, #44]	@ (800c030 <cvxgen_solve+0x2d8>)
 800c002:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800c006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c008:	00db      	lsls	r3, r3, #3
 800c00a:	4413      	add	r3, r2
 800c00c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c010:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 9; i++)
 800c014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c016:	3301      	adds	r3, #1
 800c018:	627b      	str	r3, [r7, #36]	@ 0x24
 800c01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c01c:	2b08      	cmp	r3, #8
 800c01e:	dddd      	ble.n	800bfdc <cvxgen_solve+0x284>
    for (i = 0; i < 9; i++)
 800c020:	2300      	movs	r3, #0
 800c022:	627b      	str	r3, [r7, #36]	@ 0x24
 800c024:	e033      	b.n	800c08e <cvxgen_solve+0x336>
 800c026:	bf00      	nop
 800c028:	7ae147ae 	.word	0x7ae147ae
 800c02c:	bfefae14 	.word	0xbfefae14
 800c030:	24007070 	.word	0x24007070
 800c034:	24007a40 	.word	0x24007a40
 800c038:	240072e0 	.word	0x240072e0
 800c03c:	24007170 	.word	0x24007170
 800c040:	24007390 	.word	0x24007390
 800c044:	24007300 	.word	0x24007300
 800c048:	24007348 	.word	0x24007348
 800c04c:	3ff00000 	.word	0x3ff00000
      work.z[i] += alpha*dz[i];
 800c050:	4b58      	ldr	r3, [pc, #352]	@ (800c1b4 <cvxgen_solve+0x45c>)
 800c052:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 800c056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c058:	00db      	lsls	r3, r3, #3
 800c05a:	4413      	add	r3, r2
 800c05c:	ed93 6b00 	vldr	d6, [r3]
 800c060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c062:	00db      	lsls	r3, r3, #3
 800c064:	687a      	ldr	r2, [r7, #4]
 800c066:	4413      	add	r3, r2
 800c068:	ed93 5b00 	vldr	d5, [r3]
 800c06c:	ed97 7b04 	vldr	d7, [r7, #16]
 800c070:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c074:	4b4f      	ldr	r3, [pc, #316]	@ (800c1b4 <cvxgen_solve+0x45c>)
 800c076:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 800c07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c07c:	00db      	lsls	r3, r3, #3
 800c07e:	4413      	add	r3, r2
 800c080:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c084:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 9; i++)
 800c088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c08a:	3301      	adds	r3, #1
 800c08c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c090:	2b08      	cmp	r3, #8
 800c092:	dddd      	ble.n	800c050 <cvxgen_solve+0x2f8>
    for (i = 0; i < 0; i++)
 800c094:	2300      	movs	r3, #0
 800c096:	627b      	str	r3, [r7, #36]	@ 0x24
 800c098:	e01e      	b.n	800c0d8 <cvxgen_solve+0x380>
      work.y[i] += alpha*dy[i];
 800c09a:	4b46      	ldr	r3, [pc, #280]	@ (800c1b4 <cvxgen_solve+0x45c>)
 800c09c:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0a2:	00db      	lsls	r3, r3, #3
 800c0a4:	4413      	add	r3, r2
 800c0a6:	ed93 6b00 	vldr	d6, [r3]
 800c0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ac:	00db      	lsls	r3, r3, #3
 800c0ae:	683a      	ldr	r2, [r7, #0]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	ed93 5b00 	vldr	d5, [r3]
 800c0b6:	ed97 7b04 	vldr	d7, [r7, #16]
 800c0ba:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c0be:	4b3d      	ldr	r3, [pc, #244]	@ (800c1b4 <cvxgen_solve+0x45c>)
 800c0c0:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 800c0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c6:	00db      	lsls	r3, r3, #3
 800c0c8:	4413      	add	r3, r2
 800c0ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c0ce:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 0; i++)
 800c0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	dbdd      	blt.n	800c09a <cvxgen_solve+0x342>
    work.gap = eval_gap();
 800c0de:	f7fe ff65 	bl	800afac <eval_gap>
 800c0e2:	eeb0 7b40 	vmov.f64	d7, d0
 800c0e6:	4b33      	ldr	r3, [pc, #204]	@ (800c1b4 <cvxgen_solve+0x45c>)
 800c0e8:	f503 631a 	add.w	r3, r3, #2464	@ 0x9a0
 800c0ec:	ed83 7b00 	vstr	d7, [r3]
    work.eq_resid_squared = calc_eq_resid_squared();
 800c0f0:	f7ff fc18 	bl	800b924 <calc_eq_resid_squared>
 800c0f4:	eeb0 7b40 	vmov.f64	d7, d0
 800c0f8:	4b2e      	ldr	r3, [pc, #184]	@ (800c1b4 <cvxgen_solve+0x45c>)
 800c0fa:	f503 631c 	add.w	r3, r3, #2496	@ 0x9c0
 800c0fe:	ed03 7b02 	vstr	d7, [r3, #-8]
    work.ineq_resid_squared = calc_ineq_resid_squared();
 800c102:	f7ff fbab 	bl	800b85c <calc_ineq_resid_squared>
 800c106:	eeb0 7b40 	vmov.f64	d7, d0
 800c10a:	4b2a      	ldr	r3, [pc, #168]	@ (800c1b4 <cvxgen_solve+0x45c>)
 800c10c:	f503 631b 	add.w	r3, r3, #2480	@ 0x9b0
 800c110:	ed83 7b00 	vstr	d7, [r3]
          sqrt(work.ineq_resid_squared), alpha);
    }
#endif
    /* Test termination conditions. Requires optimality, and satisfied */
    /* constraints. */
    if (   (work.gap < cvxgen_settings.eps)
 800c114:	4b27      	ldr	r3, [pc, #156]	@ (800c1b4 <cvxgen_solve+0x45c>)
 800c116:	f503 631a 	add.w	r3, r3, #2464	@ 0x9a0
 800c11a:	ed93 6b00 	vldr	d6, [r3]
 800c11e:	4b26      	ldr	r3, [pc, #152]	@ (800c1b8 <cvxgen_solve+0x460>)
 800c120:	ed93 7b02 	vldr	d7, [r3, #8]
 800c124:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c12c:	d533      	bpl.n	800c196 <cvxgen_solve+0x43e>
        && (work.eq_resid_squared <= cvxgen_settings.resid_tol*cvxgen_settings.resid_tol)
 800c12e:	4b21      	ldr	r3, [pc, #132]	@ (800c1b4 <cvxgen_solve+0x45c>)
 800c130:	f503 631c 	add.w	r3, r3, #2496	@ 0x9c0
 800c134:	ed13 6b02 	vldr	d6, [r3, #-8]
 800c138:	4b1f      	ldr	r3, [pc, #124]	@ (800c1b8 <cvxgen_solve+0x460>)
 800c13a:	ed93 5b00 	vldr	d5, [r3]
 800c13e:	4b1e      	ldr	r3, [pc, #120]	@ (800c1b8 <cvxgen_solve+0x460>)
 800c140:	ed93 7b00 	vldr	d7, [r3]
 800c144:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c148:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c150:	d821      	bhi.n	800c196 <cvxgen_solve+0x43e>
        && (work.ineq_resid_squared <= cvxgen_settings.resid_tol*cvxgen_settings.resid_tol)
 800c152:	4b18      	ldr	r3, [pc, #96]	@ (800c1b4 <cvxgen_solve+0x45c>)
 800c154:	f503 631b 	add.w	r3, r3, #2480	@ 0x9b0
 800c158:	ed93 6b00 	vldr	d6, [r3]
 800c15c:	4b16      	ldr	r3, [pc, #88]	@ (800c1b8 <cvxgen_solve+0x460>)
 800c15e:	ed93 5b00 	vldr	d5, [r3]
 800c162:	4b15      	ldr	r3, [pc, #84]	@ (800c1b8 <cvxgen_solve+0x460>)
 800c164:	ed93 7b00 	vldr	d7, [r3]
 800c168:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c16c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c174:	d80f      	bhi.n	800c196 <cvxgen_solve+0x43e>
       ) {
      work.converged = 1;
 800c176:	4b0f      	ldr	r3, [pc, #60]	@ (800c1b4 <cvxgen_solve+0x45c>)
 800c178:	2201      	movs	r2, #1
 800c17a:	f8c3 29cc 	str.w	r2, [r3, #2508]	@ 0x9cc
      work.optval = eval_objv();
 800c17e:	f7ff f82f 	bl	800b1e0 <eval_objv>
 800c182:	eeb0 7b40 	vmov.f64	d7, d0
 800c186:	4b0b      	ldr	r3, [pc, #44]	@ (800c1b4 <cvxgen_solve+0x45c>)
 800c188:	f503 631b 	add.w	r3, r3, #2480	@ 0x9b0
 800c18c:	ed03 7b02 	vstr	d7, [r3, #-8]
      return iter+1;
 800c190:	6a3b      	ldr	r3, [r7, #32]
 800c192:	3301      	adds	r3, #1
 800c194:	e009      	b.n	800c1aa <cvxgen_solve+0x452>
  for (iter = 0; iter < cvxgen_settings.max_iters; iter++) {
 800c196:	6a3b      	ldr	r3, [r7, #32]
 800c198:	3301      	adds	r3, #1
 800c19a:	623b      	str	r3, [r7, #32]
 800c19c:	4b06      	ldr	r3, [pc, #24]	@ (800c1b8 <cvxgen_solve+0x460>)
 800c19e:	691b      	ldr	r3, [r3, #16]
 800c1a0:	6a3a      	ldr	r2, [r7, #32]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	f6ff adf5 	blt.w	800bd92 <cvxgen_solve+0x3a>
//   if(DWT->CYCCNT - work.start_time > cvxgen_settings.max_time) {
//   	work.converged = 0;
//   	return iter+1;
//   }
  }
  return iter;
 800c1a8:	6a3b      	ldr	r3, [r7, #32]
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3728      	adds	r7, #40	@ 0x28
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	24007070 	.word	0x24007070
 800c1b8:	24007a40 	.word	0x24007a40

0800c1bc <cmr_adcSample>:
 *
 * @param pvParameters (cmr_adc_t *) The ADC.
 *
 * @return Does not return.
 */
static void cmr_adcSample(void *pvParameters) {
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
    cmr_adc_t *adc = (cmr_adc_t *) pvParameters;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	60fb      	str	r3, [r7, #12]

    TickType_t lastWakeTime = xTaskGetTickCount();
 800c1c8:	f004 fa06 	bl	80105d8 <xTaskGetTickCount>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	60bb      	str	r3, [r7, #8]
    while (1) {
        _platform_adcPoll(adc, CMR_ADC_TIMEOUT_MS);
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	68f8      	ldr	r0, [r7, #12]
 800c1d6:	f001 fad7 	bl	800d788 <_platform_adcPoll>
        vTaskDelayUntil(&lastWakeTime, cmr_adcSample_period_ms);
 800c1da:	4b05      	ldr	r3, [pc, #20]	@ (800c1f0 <cmr_adcSample+0x34>)
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	f107 0308 	add.w	r3, r7, #8
 800c1e2:	4611      	mov	r1, r2
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f004 f881 	bl	80102ec <vTaskDelayUntil>
        _platform_adcPoll(adc, CMR_ADC_TIMEOUT_MS);
 800c1ea:	bf00      	nop
 800c1ec:	e7f0      	b.n	800c1d0 <cmr_adcSample+0x14>
 800c1ee:	bf00      	nop
 800c1f0:	24000618 	.word	0x24000618

0800c1f4 <cmr_adcConfigChannels>:
/**
 * @brief Initializes ADC channel sequence.
 *
 * @param adc The ADC to configure.
 */
static void cmr_adcConfigChannels(cmr_adc_t *adc) {
 800c1f4:	b5b0      	push	{r4, r5, r7, lr}
 800c1f6:	b09c      	sub	sp, #112	@ 0x70
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
    for (size_t i = 0; i < adc->channelsLen; i++) {
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c200:	e048      	b.n	800c294 <cmr_adcConfigChannels+0xa0>
        const cmr_adcChannel_t *channel = adc->channels + i;
 800c202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c204:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c206:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c208:	4613      	mov	r3, r2
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	4413      	add	r3, r2
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	440b      	add	r3, r1
 800c212:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (channel->channel > ADC_CHANNEL_15) {
 800c214:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a23      	ldr	r2, [pc, #140]	@ (800c2a8 <cmr_adcConfigChannels+0xb4>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d902      	bls.n	800c224 <cmr_adcConfigChannels+0x30>
            cmr_panic("Invalid ADC channel!");
 800c21e:	4823      	ldr	r0, [pc, #140]	@ (800c2ac <cmr_adcConfigChannels+0xb8>)
 800c220:	f001 ff0b 	bl	800e03a <cmr_panic>
        }

        // Rank goes from 1 to 16
        ADC_ChannelConfTypeDef channelConfig;
#ifdef H725
        channelConfig = _platform_adcChannelConfig(channel, (uint32_t) 6*(i+1));
 800c224:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c226:	1c5a      	adds	r2, r3, #1
 800c228:	4613      	mov	r3, r2
 800c22a:	005b      	lsls	r3, r3, #1
 800c22c:	4413      	add	r3, r2
 800c22e:	005b      	lsls	r3, r3, #1
 800c230:	461a      	mov	r2, r3
 800c232:	463b      	mov	r3, r7
 800c234:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c236:	4618      	mov	r0, r3
 800c238:	f001 f9fe 	bl	800d638 <_platform_adcChannelConfig>
 800c23c:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800c240:	463d      	mov	r5, r7
 800c242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c24a:	682b      	ldr	r3, [r5, #0]
 800c24c:	6023      	str	r3, [r4, #0]
#else
        channelConfig = _platform_adcChannelConfig(channel, (uint32_t) (i+1));
#endif

        if (HAL_ADC_ConfigChannel(&adc->handle, &channelConfig) != HAL_OK) {
 800c24e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c250:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800c254:	4611      	mov	r1, r2
 800c256:	4618      	mov	r0, r3
 800c258:	f005 fed2 	bl	8012000 <HAL_ADC_ConfigChannel>
 800c25c:	4603      	mov	r3, r0
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d002      	beq.n	800c268 <cmr_adcConfigChannels+0x74>
            cmr_panic("HAL_ADC_ConfigChannel() failed!");
 800c262:	4813      	ldr	r0, [pc, #76]	@ (800c2b0 <cmr_adcConfigChannels+0xbc>)
 800c264:	f001 fee9 	bl	800e03a <cmr_panic>
        }

        // Configure the pin for analog use.
        cmr_rccGPIOClockEnable(channel->port);
 800c268:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	4618      	mov	r0, r3
 800c26e:	f002 f8e1 	bl	800e434 <cmr_rccGPIOClockEnable>

        GPIO_InitTypeDef pinConfig = _platform_adcPinConfig(channel);
 800c272:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800c276:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c278:	4618      	mov	r0, r3
 800c27a:	f001 fa05 	bl	800d688 <_platform_adcPinConfig>

        HAL_GPIO_Init(channel->port, &pinConfig);
 800c27e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800c286:	4611      	mov	r1, r2
 800c288:	4618      	mov	r0, r3
 800c28a:	f00a f87d 	bl	8016388 <HAL_GPIO_Init>
    for (size_t i = 0; i < adc->channelsLen; i++) {
 800c28e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c290:	3301      	adds	r3, #1
 800c292:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c298:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d3b1      	bcc.n	800c202 <cmr_adcConfigChannels+0xe>
    }
}
 800c29e:	bf00      	nop
 800c2a0:	bf00      	nop
 800c2a2:	3770      	adds	r7, #112	@ 0x70
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bdb0      	pop	{r4, r5, r7, pc}
 800c2a8:	3ef08000 	.word	0x3ef08000
 800c2ac:	0801fc4c 	.word	0x0801fc4c
 800c2b0:	0801fc64 	.word	0x0801fc64

0800c2b4 <cmr_adcInit>:
 */
void cmr_adcInit(
    cmr_adc_t *adc, ADC_TypeDef *instance,
    cmr_adcChannel_t *channels, const size_t channelsLen,
    TickType_t samplePeriod_ms
) {
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b086      	sub	sp, #24
 800c2b8:	af02      	add	r7, sp, #8
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	607a      	str	r2, [r7, #4]
 800c2c0:	603b      	str	r3, [r7, #0]
    if (channelsLen > CMR_ADC_CHANNELS) {
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	2b10      	cmp	r3, #16
 800c2c6:	d902      	bls.n	800c2ce <cmr_adcInit+0x1a>
        cmr_panic("Too many channels");
 800c2c8:	4814      	ldr	r0, [pc, #80]	@ (800c31c <cmr_adcInit+0x68>)
 800c2ca:	f001 feb6 	bl	800e03a <cmr_panic>
    }

    _platform_adcInit(adc, instance, channels, channelsLen);
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	68b9      	ldr	r1, [r7, #8]
 800c2d4:	68f8      	ldr	r0, [r7, #12]
 800c2d6:	f001 f9f4 	bl	800d6c2 <_platform_adcInit>

    cmr_rccADCClockEnable(instance);
 800c2da:	68b8      	ldr	r0, [r7, #8]
 800c2dc:	f002 f8b5 	bl	800e44a <cmr_rccADCClockEnable>

    if (HAL_ADC_Init(&adc->handle) != HAL_OK) {
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f005 faae 	bl	8011844 <HAL_ADC_Init>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d002      	beq.n	800c2f4 <cmr_adcInit+0x40>
        cmr_panic("HAL_ADC_Init() failed!");
 800c2ee:	480c      	ldr	r0, [pc, #48]	@ (800c320 <cmr_adcInit+0x6c>)
 800c2f0:	f001 fea3 	bl	800e03a <cmr_panic>
    }

    cmr_adcConfigChannels(adc);
 800c2f4:	68f8      	ldr	r0, [r7, #12]
 800c2f6:	f7ff ff7d 	bl	800c1f4 <cmr_adcConfigChannels>

    cmr_adcSample_period_ms = samplePeriod_ms;
 800c2fa:	4a0a      	ldr	r2, [pc, #40]	@ (800c324 <cmr_adcInit+0x70>)
 800c2fc:	69bb      	ldr	r3, [r7, #24]
 800c2fe:	6013      	str	r3, [r2, #0]
    cmr_taskInit(
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f103 0078 	add.w	r0, r3, #120	@ 0x78
 800c306:	2205      	movs	r2, #5
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	9300      	str	r3, [sp, #0]
 800c30c:	4b06      	ldr	r3, [pc, #24]	@ (800c328 <cmr_adcInit+0x74>)
 800c30e:	4907      	ldr	r1, [pc, #28]	@ (800c32c <cmr_adcInit+0x78>)
 800c310:	f002 fc4c 	bl	800ebac <cmr_taskInit>
        "ADC sample",
        cmr_adcSample_priority,
        cmr_adcSample,
        adc
    );
}
 800c314:	bf00      	nop
 800c316:	3710      	adds	r7, #16
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}
 800c31c:	0801fc84 	.word	0x0801fc84
 800c320:	0801fc98 	.word	0x0801fc98
 800c324:	24000618 	.word	0x24000618
 800c328:	0800c1bd 	.word	0x0800c1bd
 800c32c:	0801fcb0 	.word	0x0801fcb0

0800c330 <cmr_canTimeout>:
 *
 * @return A negative value if a timeout has occurred; otherwise 0.
 */
static int cmr_canTimeout(
    TickType_t lastReceived_ms, TickType_t threshold_ms, TickType_t now_ms
) {
 800c330:	b480      	push	{r7}
 800c332:	b087      	sub	sp, #28
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	607a      	str	r2, [r7, #4]
    TickType_t release_ms = lastReceived_ms + threshold_ms;
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	4413      	add	r3, r2
 800c342:	617b      	str	r3, [r7, #20]

    // If no message has been received yet, default to throwing a timeout
    if (lastReceived_ms == 0) {
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d102      	bne.n	800c350 <cmr_canTimeout+0x20>
    	return -1;
 800c34a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c34e:	e01c      	b.n	800c38a <cmr_canTimeout+0x5a>
    }

    if (now_ms < lastReceived_ms && release_ms <= lastReceived_ms) {
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	429a      	cmp	r2, r3
 800c356:	d206      	bcs.n	800c366 <cmr_canTimeout+0x36>
 800c358:	697a      	ldr	r2, [r7, #20]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d802      	bhi.n	800c366 <cmr_canTimeout+0x36>
        // Current time overflowed; release did not. Timeout!
        return -1;
 800c360:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c364:	e011      	b.n	800c38a <cmr_canTimeout+0x5a>
    }

    if (lastReceived_ms <= now_ms && release_ms < lastReceived_ms) {
 800c366:	68fa      	ldr	r2, [r7, #12]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d805      	bhi.n	800c37a <cmr_canTimeout+0x4a>
 800c36e:	697a      	ldr	r2, [r7, #20]
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	429a      	cmp	r2, r3
 800c374:	d201      	bcs.n	800c37a <cmr_canTimeout+0x4a>
        // Current time did not overflow; release time did. No timeout.
        return 0;
 800c376:	2300      	movs	r3, #0
 800c378:	e007      	b.n	800c38a <cmr_canTimeout+0x5a>
    }

    // Neither current nor release overflowed, or both have.
    // In either case, release less than current indicates timeout.
    //
    if (release_ms < now_ms) {
 800c37a:	697a      	ldr	r2, [r7, #20]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	429a      	cmp	r2, r3
 800c380:	d202      	bcs.n	800c388 <cmr_canTimeout+0x58>
        return -1;
 800c382:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c386:	e000      	b.n	800c38a <cmr_canTimeout+0x5a>
    }

    return 0;
 800c388:	2300      	movs	r3, #0
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	371c      	adds	r7, #28
 800c38e:	46bd      	mov	sp, r7
 800c390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c394:	4770      	bx	lr

0800c396 <cmr_canRXMetaTimeoutWarn>:
 * @param meta The periodic message's reception metadata.
 * @param now_ms Current timestamp, in milliseconds.
 *
 * @return A negative value if a timeout warning has occurred; otherwise 0.
 */
int cmr_canRXMetaTimeoutWarn(const cmr_canRXMeta_t *meta, TickType_t now_ms) {
 800c396:	b580      	push	{r7, lr}
 800c398:	b082      	sub	sp, #8
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	6078      	str	r0, [r7, #4]
 800c39e:	6039      	str	r1, [r7, #0]
    return cmr_canTimeout(
        meta->lastReceived_ms, meta->timeoutWarn_ms, now_ms
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6958      	ldr	r0, [r3, #20]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	685b      	ldr	r3, [r3, #4]
    return cmr_canTimeout(
 800c3a8:	683a      	ldr	r2, [r7, #0]
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	f7ff ffc0 	bl	800c330 <cmr_canTimeout>
 800c3b0:	4603      	mov	r3, r0
    );
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3708      	adds	r7, #8
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <cmr_canRXMetaTimeoutError>:
 * @param meta The periodic message's reception metadata.
 * @param now_ms Current timestamp, in milliseconds.
 *
 * @return A negative value if a timeout error has occurred; otherwise 0.
 */
int cmr_canRXMetaTimeoutError(const cmr_canRXMeta_t *meta, TickType_t now_ms) {
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b082      	sub	sp, #8
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
 800c3c2:	6039      	str	r1, [r7, #0]
    return cmr_canTimeout(
        meta->lastReceived_ms, meta->timeoutError_ms, now_ms
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6958      	ldr	r0, [r3, #20]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	68db      	ldr	r3, [r3, #12]
    return cmr_canTimeout(
 800c3cc:	683a      	ldr	r2, [r7, #0]
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	f7ff ffae 	bl	800c330 <cmr_canTimeout>
 800c3d4:	4603      	mov	r3, r0
    );
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3708      	adds	r7, #8
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <cmr_canRXMetaFind>:
 * @param can The interface.
 * @param canID The CAN ID to search for.
 *
 * @return The associated receive metadata, or `NULL` if not found.
 */
static cmr_canRXMeta_t *cmr_canRXMetaFind(cmr_can_t *can, uint16_t canID) {
 800c3de:	b480      	push	{r7}
 800c3e0:	b085      	sub	sp, #20
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
 800c3e6:	460b      	mov	r3, r1
 800c3e8:	807b      	strh	r3, [r7, #2]
    for (size_t i = 0; i < can->rxMetaLen; i++) {
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	60fb      	str	r3, [r7, #12]
 800c3ee:	e010      	b.n	800c412 <cmr_canRXMetaFind+0x34>
        cmr_canRXMeta_t *meta = can->rxMeta + i;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	015b      	lsls	r3, r3, #5
 800c3fa:	4413      	add	r3, r2
 800c3fc:	60bb      	str	r3, [r7, #8]
        if (meta->canID == canID) {
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	881b      	ldrh	r3, [r3, #0]
 800c402:	887a      	ldrh	r2, [r7, #2]
 800c404:	429a      	cmp	r2, r3
 800c406:	d101      	bne.n	800c40c <cmr_canRXMetaFind+0x2e>
            return meta;
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	e009      	b.n	800c420 <cmr_canRXMetaFind+0x42>
    for (size_t i = 0; i < can->rxMetaLen; i++) {
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	3301      	adds	r3, #1
 800c410:	60fb      	str	r3, [r7, #12]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c418:	68fa      	ldr	r2, [r7, #12]
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d3e8      	bcc.n	800c3f0 <cmr_canRXMetaFind+0x12>
        }
    }

    return NULL;    // No matching metadata.
 800c41e:	2300      	movs	r3, #0
}
 800c420:	4618      	mov	r0, r3
 800c422:	3714      	adds	r7, #20
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr

0800c42c <cmr_canRXData>:
 * @param data The received data.
 * @param dataLen The received data's length.
 */
static void cmr_canRXData(
    cmr_can_t *can, uint16_t canID, const void *data, size_t dataLen
) {
 800c42c:	b590      	push	{r4, r7, lr}
 800c42e:	b087      	sub	sp, #28
 800c430:	af00      	add	r7, sp, #0
 800c432:	60f8      	str	r0, [r7, #12]
 800c434:	607a      	str	r2, [r7, #4]
 800c436:	603b      	str	r3, [r7, #0]
 800c438:	460b      	mov	r3, r1
 800c43a:	817b      	strh	r3, [r7, #10]
    cmr_canRXMeta_t *meta = cmr_canRXMetaFind(can, canID);
 800c43c:	897b      	ldrh	r3, [r7, #10]
 800c43e:	4619      	mov	r1, r3
 800c440:	68f8      	ldr	r0, [r7, #12]
 800c442:	f7ff ffcc 	bl	800c3de <cmr_canRXMetaFind>
 800c446:	6178      	str	r0, [r7, #20]
    if (meta == NULL) {
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d10d      	bne.n	800c46a <cmr_canRXData+0x3e>
        // Not a configured message; attempt to use the callback.
        if (can->rxCallback) {
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c454:	2b00      	cmp	r3, #0
 800c456:	d018      	beq.n	800c48a <cmr_canRXData+0x5e>
            can->rxCallback(can, canID, data, dataLen);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f8d3 40f4 	ldr.w	r4, [r3, #244]	@ 0xf4
 800c45e:	8979      	ldrh	r1, [r7, #10]
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	47a0      	blx	r4
        }

        return;
 800c468:	e00f      	b.n	800c48a <cmr_canRXData+0x5e>
    }
    // shifted right because of macro definitions
    uint8_t len = dataLen >> 16;
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	0c1b      	lsrs	r3, r3, #16
 800c46e:	74fb      	strb	r3, [r7, #19]
    memcpy((void *) meta->payload, data, len);
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	3318      	adds	r3, #24
 800c474:	7cfa      	ldrb	r2, [r7, #19]
 800c476:	6879      	ldr	r1, [r7, #4]
 800c478:	4618      	mov	r0, r3
 800c47a:	f012 f8a7 	bl	801e5cc <memcpy>
    meta->lastReceived_ms = xTaskGetTickCountFromISR();
 800c47e:	f004 f8bb 	bl	80105f8 <xTaskGetTickCountFromISR>
 800c482:	4602      	mov	r2, r0
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	615a      	str	r2, [r3, #20]
 800c488:	e000      	b.n	800c48c <cmr_canRXData+0x60>
        return;
 800c48a:	bf00      	nop
}
 800c48c:	371c      	adds	r7, #28
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd90      	pop	{r4, r7, pc}

0800c492 <cmr_canFromHandle>:
 *
 * @param handle The handle.
 *
 * @return The interface.
 */
static cmr_can_t *cmr_canFromHandle(FDCAN_HandleTypeDef *handle) {
 800c492:	b480      	push	{r7}
 800c494:	b085      	sub	sp, #20
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
    char *addr = (void *) handle;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	60fb      	str	r3, [r7, #12]
    return (void *) (addr - offsetof(cmr_can_t, handle));
 800c49e:	68fb      	ldr	r3, [r7, #12]
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3714      	adds	r7, #20
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr

0800c4ac <cmr_FDcanInit>:
    cmr_canBitRate_t bitRate,
    cmr_canRXMeta_t *rxMeta, size_t rxMetaLen,
    cmr_canRXCallback_t rxCallback,
    GPIO_TypeDef *rxPort, uint16_t rxPin,
    GPIO_TypeDef *txPort, uint16_t txPin
) {
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b090      	sub	sp, #64	@ 0x40
 800c4b0:	af06      	add	r7, sp, #24
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	60b9      	str	r1, [r7, #8]
 800c4b6:	603b      	str	r3, [r7, #0]
 800c4b8:	4613      	mov	r3, r2
 800c4ba:	71fb      	strb	r3, [r7, #7]
    /* Do any platform-specific initialization */
	_platform_FDCANInit(
 800c4bc:	79fa      	ldrb	r2, [r7, #7]
 800c4be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c4c2:	9305      	str	r3, [sp, #20]
 800c4c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4c6:	9304      	str	r3, [sp, #16]
 800c4c8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c4ca:	9303      	str	r3, [sp, #12]
 800c4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ce:	9302      	str	r3, [sp, #8]
 800c4d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4d2:	9301      	str	r3, [sp, #4]
 800c4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4d6:	9300      	str	r3, [sp, #0]
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	68b9      	ldr	r1, [r7, #8]
 800c4dc:	68f8      	ldr	r0, [r7, #12]
 800c4de:	f000 fcf7 	bl	800ced0 <_platform_FDCANInit>
        rxCallback,
        rxPort, rxPin,
        txPort, txPin
    );

    cmr_rccCANClockEnable(instance);
 800c4e2:	68b8      	ldr	r0, [r7, #8]
 800c4e4:	f001 ffbc 	bl	800e460 <cmr_rccCANClockEnable>
    cmr_rccGPIOClockEnable(rxPort);
 800c4e8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c4ea:	f001 ffa3 	bl	800e434 <cmr_rccGPIOClockEnable>
    cmr_rccGPIOClockEnable(txPort);
 800c4ee:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800c4f0:	f001 ffa0 	bl	800e434 <cmr_rccGPIOClockEnable>

    // Configure CAN RX pin.
    GPIO_InitTypeDef pinConfig = {
 800c4f4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c4f6:	617b      	str	r3, [r7, #20]
 800c4f8:	2302      	movs	r3, #2
 800c4fa:	61bb      	str	r3, [r7, #24]
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	61fb      	str	r3, [r7, #28]
 800c500:	2303      	movs	r3, #3
 800c502:	623b      	str	r3, [r7, #32]
        .Pin = rxPin,
        .Mode = GPIO_MODE_AF_PP,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_VERY_HIGH,
        .Alternate = cmr_canGPIOAF(instance, rxPort)
 800c504:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c506:	68b8      	ldr	r0, [r7, #8]
 800c508:	f000 f924 	bl	800c754 <cmr_canGPIOAF>
 800c50c:	4603      	mov	r3, r0
    GPIO_InitTypeDef pinConfig = {
 800c50e:	627b      	str	r3, [r7, #36]	@ 0x24
    };
    HAL_GPIO_Init(rxPort, &pinConfig);
 800c510:	f107 0314 	add.w	r3, r7, #20
 800c514:	4619      	mov	r1, r3
 800c516:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c518:	f009 ff36 	bl	8016388 <HAL_GPIO_Init>

    // Configure CAN TX pin.
    pinConfig.Pin = txPin;
 800c51c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c520:	617b      	str	r3, [r7, #20]
    pinConfig.Alternate = cmr_canGPIOAF(instance, txPort);
 800c522:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c524:	68b8      	ldr	r0, [r7, #8]
 800c526:	f000 f915 	bl	800c754 <cmr_canGPIOAF>
 800c52a:	4603      	mov	r3, r0
 800c52c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(txPort, &pinConfig);
 800c52e:	f107 0314 	add.w	r3, r7, #20
 800c532:	4619      	mov	r1, r3
 800c534:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800c536:	f009 ff27 	bl	8016388 <HAL_GPIO_Init>

    if (HAL_FDCAN_Init(&can->handle) != HAL_OK) {
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	4618      	mov	r0, r3
 800c53e:	f008 fd01 	bl	8014f44 <HAL_FDCAN_Init>
 800c542:	4603      	mov	r3, r0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d002      	beq.n	800c54e <cmr_FDcanInit+0xa2>
        cmr_panic("HAL_FDCAN_Init() failed!");
 800c548:	480e      	ldr	r0, [pc, #56]	@ (800c584 <cmr_FDcanInit+0xd8>)
 800c54a:	f001 fd76 	bl	800e03a <cmr_panic>
    }

    if (HAL_FDCAN_Start(&can->handle) != HAL_OK) {
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	4618      	mov	r0, r3
 800c552:	f008 ff55 	bl	8015400 <HAL_FDCAN_Start>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d002      	beq.n	800c562 <cmr_FDcanInit+0xb6>
        cmr_panic("HAL_FDCAN_Start() failed!");
 800c55c:	480a      	ldr	r0, [pc, #40]	@ (800c588 <cmr_FDcanInit+0xdc>)
 800c55e:	f001 fd6c 	bl	800e03a <cmr_panic>
    }

    if (HAL_FDCAN_ActivateNotification(
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2200      	movs	r2, #0
 800c566:	4909      	ldr	r1, [pc, #36]	@ (800c58c <cmr_FDcanInit+0xe0>)
 800c568:	4618      	mov	r0, r3
 800c56a:	f009 f99f 	bl	80158ac <HAL_FDCAN_ActivateNotification>
 800c56e:	4603      	mov	r3, r0
 800c570:	2b00      	cmp	r3, #0
 800c572:	d002      	beq.n	800c57a <cmr_FDcanInit+0xce>
			FDCAN_IT_ERROR_WARNING |
			FDCAN_IT_ERROR_PASSIVE |
			FDCAN_IT_BUS_OFF,
			0
    )) {
        cmr_panic("HAL_FDCAN_ActivateNotification() failed!");
 800c574:	4806      	ldr	r0, [pc, #24]	@ (800c590 <cmr_FDcanInit+0xe4>)
 800c576:	f001 fd60 	bl	800e03a <cmr_panic>
    }
}
 800c57a:	bf00      	nop
 800c57c:	3728      	adds	r7, #40	@ 0x28
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}
 800c582:	bf00      	nop
 800c584:	0801fcbc 	.word	0x0801fcbc
 800c588:	0801fcd8 	.word	0x0801fcd8
 800c58c:	03800011 	.word	0x03800011
 800c590:	0801fcf4 	.word	0x0801fcf4

0800c594 <cmr_canRXPendingCallback>:


static void cmr_canRXPendingCallback(FDCAN_HandleTypeDef *handle, uint32_t fifo) {
 800c594:	b580      	push	{r7, lr}
 800c596:	b090      	sub	sp, #64	@ 0x40
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef msg;
    uint8_t data[8];
    if (HAL_FDCAN_GetRxMessage(handle, fifo, &msg, data) != HAL_OK) {
 800c59e:	f107 030c 	add.w	r3, r7, #12
 800c5a2:	f107 0214 	add.w	r2, r7, #20
 800c5a6:	6839      	ldr	r1, [r7, #0]
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f008 ffaf 	bl	801550c <HAL_FDCAN_GetRxMessage>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d10d      	bne.n	800c5d0 <cmr_canRXPendingCallback+0x3c>
        return;
    }

    cmr_can_t *can = cmr_canFromHandle(handle);
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f7ff ff6c 	bl	800c492 <cmr_canFromHandle>
 800c5ba:	63f8      	str	r0, [r7, #60]	@ 0x3c

    // shift by 16 because datalength lives in upper 16 bits of msg.DataLength
    cmr_canRXData(can, msg.Identifier, data, msg.DataLength >> 16);
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	b299      	uxth	r1, r3
 800c5c0:	6a3b      	ldr	r3, [r7, #32]
 800c5c2:	0c1b      	lsrs	r3, r3, #16
 800c5c4:	f107 020c 	add.w	r2, r7, #12
 800c5c8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c5ca:	f7ff ff2f 	bl	800c42c <cmr_canRXData>
 800c5ce:	e000      	b.n	800c5d2 <cmr_canRXPendingCallback+0x3e>
        return;
 800c5d0:	bf00      	nop
}
 800c5d2:	3740      	adds	r7, #64	@ 0x40
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <HAL_FDCAN_RxFifo0Callback>:
    void HAL_FDCAN_RxFifo ## fifo ## Callback( \
        FDCAN_HandleTypeDef *handle, uint32_t RxFifo ## fifo ## ITs \
    ) { \
        cmr_canRXPendingCallback(handle, FDCAN_RX_FIFO ## fifo); \
    }
CAN_RX_FIFO_PENDING(0)
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	6039      	str	r1, [r7, #0]
 800c5e2:	2140      	movs	r1, #64	@ 0x40
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f7ff ffd5 	bl	800c594 <cmr_canRXPendingCallback>
 800c5ea:	3708      	adds	r7, #8
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <HAL_FDCAN_RxFifo1Callback>:
CAN_RX_FIFO_PENDING(1)
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b082      	sub	sp, #8
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	6039      	str	r1, [r7, #0]
 800c5fa:	2141      	movs	r1, #65	@ 0x41
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f7ff ffc9 	bl	800c594 <cmr_canRXPendingCallback>
 800c602:	3708      	adds	r7, #8
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}

0800c608 <cmr_canTX>:

int cmr_canTX(
    cmr_can_t *can,
    uint16_t id, const void *data, size_t len,
    TickType_t timeout
) {
 800c608:	b580      	push	{r7, lr}
 800c60a:	b0a8      	sub	sp, #160	@ 0xa0
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	607a      	str	r2, [r7, #4]
 800c612:	603b      	str	r3, [r7, #0]
 800c614:	460b      	mov	r3, r1
 800c616:	817b      	strh	r3, [r7, #10]
	FDCAN_TxHeaderTypeDef txHeader = {
 800c618:	897b      	ldrh	r3, [r7, #10]
 800c61a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c61c:	2300      	movs	r3, #0
 800c61e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c620:	2300      	movs	r3, #0
 800c622:	673b      	str	r3, [r7, #112]	@ 0x70
        .Identifier = id,
        .IdType = FDCAN_STANDARD_ID,
        .TxFrameType = FDCAN_DATA_FRAME,
        .DataLength = len << 16, // shifted by 16 because of the FDCAN_DLC_BYTES definitions
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	041b      	lsls	r3, r3, #16
	FDCAN_TxHeaderTypeDef txHeader = {
 800c628:	677b      	str	r3, [r7, #116]	@ 0x74
 800c62a:	2300      	movs	r3, #0
 800c62c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c62e:	2300      	movs	r3, #0
 800c630:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c632:	2300      	movs	r3, #0
 800c634:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c638:	2300      	movs	r3, #0
 800c63a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c63e:	2300      	movs	r3, #0
 800c640:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		.FDFormat = FDCAN_CLASSIC_CAN,
		.TxEventFifoControl = FDCAN_NO_TX_EVENTS,
		.MessageMarker = 0
    };

    BaseType_t result = xSemaphoreTake(can->txSem, timeout);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 800c64a:	2300      	movs	r3, #0
 800c64c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c650:	2100      	movs	r1, #0
 800c652:	f003 fa53 	bl	800fafc <xQueueGenericReceive>
 800c656:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (result != pdTRUE) {
 800c65a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d002      	beq.n	800c668 <cmr_canTX+0x60>
        return -1;
 800c662:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c666:	e05f      	b.n	800c728 <cmr_canTX+0x120>
    }

    uint16_t freeLevel = HAL_FDCAN_GetTxFifoFreeLevel(&can->handle);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	4618      	mov	r0, r3
 800c66c:	f009 f90c 	bl	8015888 <HAL_FDCAN_GetTxFifoFreeLevel>
 800c670:	4603      	mov	r3, r0
 800c672:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
    int x = 0;
 800c676:	2300      	movs	r3, #0
 800c678:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    if(HAL_FDCAN_GetTxFifoFreeLevel(&can->handle) == 0) {
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	4618      	mov	r0, r3
 800c680:	f009 f902 	bl	8015888 <HAL_FDCAN_GetTxFifoFreeLevel>
 800c684:	4603      	mov	r3, r0
 800c686:	2b00      	cmp	r3, #0
 800c688:	d113      	bne.n	800c6b2 <cmr_canTX+0xaa>
    	FDCAN_ProtocolStatusTypeDef ProtocolStatus;
    	HAL_FDCAN_GetProtocolStatus(&can->handle, &ProtocolStatus);
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f107 0210 	add.w	r2, r7, #16
 800c690:	4611      	mov	r1, r2
 800c692:	4618      	mov	r0, r3
 800c694:	f009 f8a8 	bl	80157e8 <HAL_FDCAN_GetProtocolStatus>

    	result = xSemaphoreGive(can->txSem);
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 800c69e:	2300      	movs	r3, #0
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	2100      	movs	r1, #0
 800c6a4:	f003 f8d0 	bl	800f848 <xQueueGenericSend>
 800c6a8:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    	return -1;
 800c6ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c6b0:	e03a      	b.n	800c728 <cmr_canTX+0x120>
    }

    HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f008 fecb 	bl	8015456 <HAL_FDCAN_AddMessageToTxFifoQ>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
        &can->handle, &txHeader, (void *) data
    );

	FDCAN_ProtocolStatusTypeDef ProtocolStatus;
	HAL_FDCAN_GetProtocolStatus(&can->handle, &ProtocolStatus);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800c6cc:	4611      	mov	r1, r2
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f009 f88a 	bl	80157e8 <HAL_FDCAN_GetProtocolStatus>
	x = 0;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    if (status != HAL_OK) {
 800c6da:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d010      	beq.n	800c704 <cmr_canTX+0xfc>
    	int x = HAL_FDCAN_GetError(&can->handle);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f009 fc3d 	bl	8015f64 <HAL_FDCAN_GetError>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    	FDCAN_ProtocolStatusTypeDef ProtocolStatus;
    	HAL_FDCAN_GetProtocolStatus(&can->handle, &ProtocolStatus);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	f107 0210 	add.w	r2, r7, #16
 800c6f6:	4611      	mov	r1, r2
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f009 f875 	bl	80157e8 <HAL_FDCAN_GetProtocolStatus>
        cmr_panic("FDCAN Tx Failed!!");
 800c6fe:	480c      	ldr	r0, [pc, #48]	@ (800c730 <cmr_canTX+0x128>)
 800c700:	f001 fc9b 	bl	800e03a <cmr_panic>
    }
    result = xSemaphoreGive(can->txSem);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 800c70a:	2300      	movs	r3, #0
 800c70c:	2200      	movs	r2, #0
 800c70e:	2100      	movs	r1, #0
 800c710:	f003 f89a 	bl	800f848 <xQueueGenericSend>
 800c714:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (result != pdTRUE) {
 800c718:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d002      	beq.n	800c726 <cmr_canTX+0x11e>
    	return -1;
 800c720:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c724:	e000      	b.n	800c728 <cmr_canTX+0x120>
    }

    return 0;
 800c726:	2300      	movs	r3, #0
}
 800c728:	4618      	mov	r0, r3
 800c72a:	37a0      	adds	r7, #160	@ 0xa0
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}
 800c730:	0801fd20 	.word	0x0801fd20

0800c734 <HAL_FDCAN_ErrorCallback>:

void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *handle) {
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
	cmr_can_t *can = cmr_canFromHandle(handle);
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f7ff fea8 	bl	800c492 <cmr_canFromHandle>
 800c742:	60f8      	str	r0, [r7, #12]
	uint32_t error = handle->ErrorCode;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c74a:	60bb      	str	r3, [r7, #8]

	    }
	//clear error lol
	//handle->ErrorCode = 0;

}
 800c74c:	bf00      	nop
 800c74e:	3710      	adds	r7, #16
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <cmr_canGPIOAF>:
 * @param can The CAN interface.
 * @param port The GPIO port.
 *
 * @return The GPIO alternate function.
 */
uint32_t cmr_canGPIOAF(FDCAN_GlobalTypeDef *instance, GPIO_TypeDef *port) {
 800c754:	b580      	push	{r7, lr}
 800c756:	b082      	sub	sp, #8
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	6039      	str	r1, [r7, #0]
    return _platform_FDcanGPIOAF(instance, port);
 800c75e:	6839      	ldr	r1, [r7, #0]
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f000 fb45 	bl	800cdf0 <_platform_FDcanGPIOAF>
 800c766:	4603      	mov	r3, r0
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3708      	adds	r7, #8
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <cmr_canFilter>:
 * @param filtersLen The number of filters. Must be less than
 * `CMR_CAN_FILTERBANKS`.
 */
void cmr_canFilter(
    cmr_can_t *can, const cmr_canFilter_t *filters, size_t filtersLen
) {
 800c770:	b580      	push	{r7, lr}
 800c772:	b084      	sub	sp, #16
 800c774:	af00      	add	r7, sp, #0
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	607a      	str	r2, [r7, #4]
    _platform_canFilter(can, filters, filtersLen);
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	68b9      	ldr	r1, [r7, #8]
 800c780:	68f8      	ldr	r0, [r7, #12]
 800c782:	f000 fcf3 	bl	800d16c <_platform_canFilter>
}
 800c786:	bf00      	nop
 800c788:	3710      	adds	r7, #16
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
	...

0800c790 <getProcessedValue>:
 * @param index use the cmr_config_type_t enum to index into the appropriate value
 * @param expected_type the cmr_config_type_t type of pointer passed into returnPointer. Used for error checking
 *
 * @return bool of whether the value has been fetched correctly
 */
bool getProcessedValue(void* returnPointer, int index, cmr_config_type_t expected_type){
 800c790:	b480      	push	{r7}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	4613      	mov	r3, r2
 800c79c:	71fb      	strb	r3, [r7, #7]
    if (config_menu_main_array[index].value.type != expected_type){
 800c79e:	494f      	ldr	r1, [pc, #316]	@ (800c8dc <getProcessedValue+0x14c>)
 800c7a0:	68ba      	ldr	r2, [r7, #8]
 800c7a2:	4613      	mov	r3, r2
 800c7a4:	00db      	lsls	r3, r3, #3
 800c7a6:	4413      	add	r3, r2
 800c7a8:	009b      	lsls	r3, r3, #2
 800c7aa:	440b      	add	r3, r1
 800c7ac:	3318      	adds	r3, #24
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	79fa      	ldrb	r2, [r7, #7]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d001      	beq.n	800c7bc <getProcessedValue+0x2c>
        return false;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	e088      	b.n	800c8ce <getProcessedValue+0x13e>
    }
    switch(config_menu_main_array[index].value.type){
 800c7bc:	4947      	ldr	r1, [pc, #284]	@ (800c8dc <getProcessedValue+0x14c>)
 800c7be:	68ba      	ldr	r2, [r7, #8]
 800c7c0:	4613      	mov	r3, r2
 800c7c2:	00db      	lsls	r3, r3, #3
 800c7c4:	4413      	add	r3, r2
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	440b      	add	r3, r1
 800c7ca:	3318      	adds	r3, #24
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	2b05      	cmp	r3, #5
 800c7d2:	d87b      	bhi.n	800c8cc <getProcessedValue+0x13c>
 800c7d4:	a201      	add	r2, pc, #4	@ (adr r2, 800c7dc <getProcessedValue+0x4c>)
 800c7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7da:	bf00      	nop
 800c7dc:	0800c7f5 	.word	0x0800c7f5
 800c7e0:	0800c823 	.word	0x0800c823
 800c7e4:	0800c851 	.word	0x0800c851
 800c7e8:	0800c877 	.word	0x0800c877
 800c7ec:	0800c895 	.word	0x0800c895
 800c7f0:	0800c8b1 	.word	0x0800c8b1
        case float_1_decimal:
            *(float*)returnPointer = ((float) config_menu_main_array[index].value.value) / 10.f;
 800c7f4:	4939      	ldr	r1, [pc, #228]	@ (800c8dc <getProcessedValue+0x14c>)
 800c7f6:	68ba      	ldr	r2, [r7, #8]
 800c7f8:	4613      	mov	r3, r2
 800c7fa:	00db      	lsls	r3, r3, #3
 800c7fc:	4413      	add	r3, r2
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	440b      	add	r3, r1
 800c802:	3319      	adds	r3, #25
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	b2db      	uxtb	r3, r3
 800c808:	ee07 3a90 	vmov	s15, r3
 800c80c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c810:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800c814:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	edc3 7a00 	vstr	s15, [r3]
            return true;
 800c81e:	2301      	movs	r3, #1
 800c820:	e055      	b.n	800c8ce <getProcessedValue+0x13e>
        case float_2_decimal:
            *(float*)returnPointer = ((float) config_menu_main_array[index].value.value) / 100.f;
 800c822:	492e      	ldr	r1, [pc, #184]	@ (800c8dc <getProcessedValue+0x14c>)
 800c824:	68ba      	ldr	r2, [r7, #8]
 800c826:	4613      	mov	r3, r2
 800c828:	00db      	lsls	r3, r3, #3
 800c82a:	4413      	add	r3, r2
 800c82c:	009b      	lsls	r3, r3, #2
 800c82e:	440b      	add	r3, r1
 800c830:	3319      	adds	r3, #25
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	b2db      	uxtb	r3, r3
 800c836:	ee07 3a90 	vmov	s15, r3
 800c83a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c83e:	eddf 6a28 	vldr	s13, [pc, #160]	@ 800c8e0 <getProcessedValue+0x150>
 800c842:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	edc3 7a00 	vstr	s15, [r3]
            return true;
 800c84c:	2301      	movs	r3, #1
 800c84e:	e03e      	b.n	800c8ce <getProcessedValue+0x13e>
        case boolean:
            *(bool*)returnPointer = ((bool) config_menu_main_array[index].value.value);
 800c850:	4922      	ldr	r1, [pc, #136]	@ (800c8dc <getProcessedValue+0x14c>)
 800c852:	68ba      	ldr	r2, [r7, #8]
 800c854:	4613      	mov	r3, r2
 800c856:	00db      	lsls	r3, r3, #3
 800c858:	4413      	add	r3, r2
 800c85a:	009b      	lsls	r3, r3, #2
 800c85c:	440b      	add	r3, r1
 800c85e:	3319      	adds	r3, #25
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	b2db      	uxtb	r3, r3
 800c864:	2b00      	cmp	r3, #0
 800c866:	bf14      	ite	ne
 800c868:	2301      	movne	r3, #1
 800c86a:	2300      	moveq	r3, #0
 800c86c:	b2da      	uxtb	r2, r3
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	701a      	strb	r2, [r3, #0]
            return true;
 800c872:	2301      	movs	r3, #1
 800c874:	e02b      	b.n	800c8ce <getProcessedValue+0x13e>
        case integer:
            *(int8_t*)returnPointer = ((int8_t) config_menu_main_array[index].value.value);
 800c876:	4919      	ldr	r1, [pc, #100]	@ (800c8dc <getProcessedValue+0x14c>)
 800c878:	68ba      	ldr	r2, [r7, #8]
 800c87a:	4613      	mov	r3, r2
 800c87c:	00db      	lsls	r3, r3, #3
 800c87e:	4413      	add	r3, r2
 800c880:	009b      	lsls	r3, r3, #2
 800c882:	440b      	add	r3, r1
 800c884:	3319      	adds	r3, #25
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	b25a      	sxtb	r2, r3
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	701a      	strb	r2, [r3, #0]
            return true;
 800c890:	2301      	movs	r3, #1
 800c892:	e01c      	b.n	800c8ce <getProcessedValue+0x13e>
        case unsigned_integer:
            *(uint8_t*)returnPointer = ((uint8_t) config_menu_main_array[index].value.value);
 800c894:	4911      	ldr	r1, [pc, #68]	@ (800c8dc <getProcessedValue+0x14c>)
 800c896:	68ba      	ldr	r2, [r7, #8]
 800c898:	4613      	mov	r3, r2
 800c89a:	00db      	lsls	r3, r3, #3
 800c89c:	4413      	add	r3, r2
 800c89e:	009b      	lsls	r3, r3, #2
 800c8a0:	440b      	add	r3, r1
 800c8a2:	3319      	adds	r3, #25
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	b2da      	uxtb	r2, r3
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	701a      	strb	r2, [r3, #0]
            return true;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	e00e      	b.n	800c8ce <getProcessedValue+0x13e>
        case custom_enum:
            // note, custom enum error checking doesn't exist. That's ok bc its not safety critical
            *(uint8_t*)returnPointer = ((uint8_t)config_menu_main_array[index].value.value);
 800c8b0:	490a      	ldr	r1, [pc, #40]	@ (800c8dc <getProcessedValue+0x14c>)
 800c8b2:	68ba      	ldr	r2, [r7, #8]
 800c8b4:	4613      	mov	r3, r2
 800c8b6:	00db      	lsls	r3, r3, #3
 800c8b8:	4413      	add	r3, r2
 800c8ba:	009b      	lsls	r3, r3, #2
 800c8bc:	440b      	add	r3, r1
 800c8be:	3319      	adds	r3, #25
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	b2da      	uxtb	r2, r3
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	701a      	strb	r2, [r3, #0]
            return true;
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	e000      	b.n	800c8ce <getProcessedValue+0x13e>
        default:
            return false;
 800c8cc:	2300      	movs	r3, #0
    }
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3714      	adds	r7, #20
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop
 800c8dc:	2400062c 	.word	0x2400062c
 800c8e0:	42c80000 	.word	0x42c80000

0800c8e4 <DMA1_Stream0_IRQHandler>:
 */
#define DMA_IRQ_HANDLER(ctrl, stream) \
    void DMA_STREAM_NAME(ctrl, stream, _IRQHandler)(void) { \
        HAL_DMA_IRQHandler(cmr_dmaInterrupts[ctrl - 1][stream].handle); \
    }
DMA_STREAM_FOREACH(DMA_IRQ_HANDLER)
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	4b02      	ldr	r3, [pc, #8]	@ (800c8f4 <DMA1_Stream0_IRQHandler+0x10>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f007 fa45 	bl	8013d7c <HAL_DMA_IRQHandler>
 800c8f2:	bd80      	pop	{r7, pc}
 800c8f4:	2400e304 	.word	0x2400e304

0800c8f8 <DMA1_Stream1_IRQHandler>:
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	4b02      	ldr	r3, [pc, #8]	@ (800c908 <DMA1_Stream1_IRQHandler+0x10>)
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	4618      	mov	r0, r3
 800c902:	f007 fa3b 	bl	8013d7c <HAL_DMA_IRQHandler>
 800c906:	bd80      	pop	{r7, pc}
 800c908:	2400e304 	.word	0x2400e304

0800c90c <DMA1_Stream2_IRQHandler>:
 800c90c:	b580      	push	{r7, lr}
 800c90e:	af00      	add	r7, sp, #0
 800c910:	4b02      	ldr	r3, [pc, #8]	@ (800c91c <DMA1_Stream2_IRQHandler+0x10>)
 800c912:	689b      	ldr	r3, [r3, #8]
 800c914:	4618      	mov	r0, r3
 800c916:	f007 fa31 	bl	8013d7c <HAL_DMA_IRQHandler>
 800c91a:	bd80      	pop	{r7, pc}
 800c91c:	2400e304 	.word	0x2400e304

0800c920 <DMA1_Stream3_IRQHandler>:
 800c920:	b580      	push	{r7, lr}
 800c922:	af00      	add	r7, sp, #0
 800c924:	4b02      	ldr	r3, [pc, #8]	@ (800c930 <DMA1_Stream3_IRQHandler+0x10>)
 800c926:	68db      	ldr	r3, [r3, #12]
 800c928:	4618      	mov	r0, r3
 800c92a:	f007 fa27 	bl	8013d7c <HAL_DMA_IRQHandler>
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	2400e304 	.word	0x2400e304

0800c934 <DMA1_Stream4_IRQHandler>:
 800c934:	b580      	push	{r7, lr}
 800c936:	af00      	add	r7, sp, #0
 800c938:	4b02      	ldr	r3, [pc, #8]	@ (800c944 <DMA1_Stream4_IRQHandler+0x10>)
 800c93a:	691b      	ldr	r3, [r3, #16]
 800c93c:	4618      	mov	r0, r3
 800c93e:	f007 fa1d 	bl	8013d7c <HAL_DMA_IRQHandler>
 800c942:	bd80      	pop	{r7, pc}
 800c944:	2400e304 	.word	0x2400e304

0800c948 <DMA1_Stream5_IRQHandler>:
 800c948:	b580      	push	{r7, lr}
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	4b02      	ldr	r3, [pc, #8]	@ (800c958 <DMA1_Stream5_IRQHandler+0x10>)
 800c94e:	695b      	ldr	r3, [r3, #20]
 800c950:	4618      	mov	r0, r3
 800c952:	f007 fa13 	bl	8013d7c <HAL_DMA_IRQHandler>
 800c956:	bd80      	pop	{r7, pc}
 800c958:	2400e304 	.word	0x2400e304

0800c95c <DMA1_Stream6_IRQHandler>:
 800c95c:	b580      	push	{r7, lr}
 800c95e:	af00      	add	r7, sp, #0
 800c960:	4b02      	ldr	r3, [pc, #8]	@ (800c96c <DMA1_Stream6_IRQHandler+0x10>)
 800c962:	699b      	ldr	r3, [r3, #24]
 800c964:	4618      	mov	r0, r3
 800c966:	f007 fa09 	bl	8013d7c <HAL_DMA_IRQHandler>
 800c96a:	bd80      	pop	{r7, pc}
 800c96c:	2400e304 	.word	0x2400e304

0800c970 <DMA1_Stream7_IRQHandler>:
 800c970:	b580      	push	{r7, lr}
 800c972:	af00      	add	r7, sp, #0
 800c974:	4b02      	ldr	r3, [pc, #8]	@ (800c980 <DMA1_Stream7_IRQHandler+0x10>)
 800c976:	69db      	ldr	r3, [r3, #28]
 800c978:	4618      	mov	r0, r3
 800c97a:	f007 f9ff 	bl	8013d7c <HAL_DMA_IRQHandler>
 800c97e:	bd80      	pop	{r7, pc}
 800c980:	2400e304 	.word	0x2400e304

0800c984 <DMA2_Stream0_IRQHandler>:
 800c984:	b580      	push	{r7, lr}
 800c986:	af00      	add	r7, sp, #0
 800c988:	4b02      	ldr	r3, [pc, #8]	@ (800c994 <DMA2_Stream0_IRQHandler+0x10>)
 800c98a:	6a1b      	ldr	r3, [r3, #32]
 800c98c:	4618      	mov	r0, r3
 800c98e:	f007 f9f5 	bl	8013d7c <HAL_DMA_IRQHandler>
 800c992:	bd80      	pop	{r7, pc}
 800c994:	2400e304 	.word	0x2400e304

0800c998 <DMA2_Stream1_IRQHandler>:
 800c998:	b580      	push	{r7, lr}
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	4b02      	ldr	r3, [pc, #8]	@ (800c9a8 <DMA2_Stream1_IRQHandler+0x10>)
 800c99e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f007 f9eb 	bl	8013d7c <HAL_DMA_IRQHandler>
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	2400e304 	.word	0x2400e304

0800c9ac <DMA2_Stream2_IRQHandler>:
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	4b02      	ldr	r3, [pc, #8]	@ (800c9bc <DMA2_Stream2_IRQHandler+0x10>)
 800c9b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f007 f9e1 	bl	8013d7c <HAL_DMA_IRQHandler>
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	2400e304 	.word	0x2400e304

0800c9c0 <DMA2_Stream3_IRQHandler>:
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	4b02      	ldr	r3, [pc, #8]	@ (800c9d0 <DMA2_Stream3_IRQHandler+0x10>)
 800c9c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f007 f9d7 	bl	8013d7c <HAL_DMA_IRQHandler>
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	2400e304 	.word	0x2400e304

0800c9d4 <DMA2_Stream4_IRQHandler>:
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	4b02      	ldr	r3, [pc, #8]	@ (800c9e4 <DMA2_Stream4_IRQHandler+0x10>)
 800c9da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f007 f9cd 	bl	8013d7c <HAL_DMA_IRQHandler>
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	2400e304 	.word	0x2400e304

0800c9e8 <DMA2_Stream5_IRQHandler>:
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	4b02      	ldr	r3, [pc, #8]	@ (800c9f8 <DMA2_Stream5_IRQHandler+0x10>)
 800c9ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f007 f9c3 	bl	8013d7c <HAL_DMA_IRQHandler>
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	2400e304 	.word	0x2400e304

0800c9fc <DMA2_Stream6_IRQHandler>:
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	4b02      	ldr	r3, [pc, #8]	@ (800ca0c <DMA2_Stream6_IRQHandler+0x10>)
 800ca02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca04:	4618      	mov	r0, r3
 800ca06:	f007 f9b9 	bl	8013d7c <HAL_DMA_IRQHandler>
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	2400e304 	.word	0x2400e304

0800ca10 <DMA2_Stream7_IRQHandler>:
 800ca10:	b580      	push	{r7, lr}
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	4b02      	ldr	r3, [pc, #8]	@ (800ca20 <DMA2_Stream7_IRQHandler+0x10>)
 800ca16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f007 f9af 	bl	8013d7c <HAL_DMA_IRQHandler>
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	2400e304 	.word	0x2400e304

0800ca24 <cmr_fir_filter_init>:
    cmr_fir_filter_state_t *filter_state,
    float *buf,
    const float *coefs,
    size_t len,
    float initial_value
) {
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b086      	sub	sp, #24
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6178      	str	r0, [r7, #20]
 800ca2c:	6139      	str	r1, [r7, #16]
 800ca2e:	60fa      	str	r2, [r7, #12]
 800ca30:	60bb      	str	r3, [r7, #8]
 800ca32:	ed87 0a01 	vstr	s0, [r7, #4]
    configASSERT(filter_state != NULL);
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d103      	bne.n	800ca44 <cmr_fir_filter_init+0x20>
 800ca3c:	215f      	movs	r1, #95	@ 0x5f
 800ca3e:	4811      	ldr	r0, [pc, #68]	@ (800ca84 <cmr_fir_filter_init+0x60>)
 800ca40:	f001 fafb 	bl	800e03a <cmr_panic>
    configASSERT(buf != NULL);
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d103      	bne.n	800ca52 <cmr_fir_filter_init+0x2e>
 800ca4a:	2160      	movs	r1, #96	@ 0x60
 800ca4c:	480e      	ldr	r0, [pc, #56]	@ (800ca88 <cmr_fir_filter_init+0x64>)
 800ca4e:	f001 faf4 	bl	800e03a <cmr_panic>
    configASSERT(coefs != NULL);
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d103      	bne.n	800ca60 <cmr_fir_filter_init+0x3c>
 800ca58:	2161      	movs	r1, #97	@ 0x61
 800ca5a:	480c      	ldr	r0, [pc, #48]	@ (800ca8c <cmr_fir_filter_init+0x68>)
 800ca5c:	f001 faed 	bl	800e03a <cmr_panic>

    // fill in the fields
    filter_state->buf = buf;
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	693a      	ldr	r2, [r7, #16]
 800ca64:	601a      	str	r2, [r3, #0]
    filter_state->coefs = coefs;
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	68fa      	ldr	r2, [r7, #12]
 800ca6a:	605a      	str	r2, [r3, #4]
    filter_state->len = len;
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	68ba      	ldr	r2, [r7, #8]
 800ca70:	609a      	str	r2, [r3, #8]

    // reset the filter state
    cmr_fir_filter_reset(filter_state, initial_value);
 800ca72:	ed97 0a01 	vldr	s0, [r7, #4]
 800ca76:	6978      	ldr	r0, [r7, #20]
 800ca78:	f000 f80a 	bl	800ca90 <cmr_fir_filter_reset>
}
 800ca7c:	bf00      	nop
 800ca7e:	3718      	adds	r7, #24
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	0801ff98 	.word	0x0801ff98
 800ca88:	0801ffec 	.word	0x0801ffec
 800ca8c:	08020034 	.word	0x08020034

0800ca90 <cmr_fir_filter_reset>:
 * @param initial_value The initial value of the filter
 */
void cmr_fir_filter_reset(
    cmr_fir_filter_state_t *filter_state,
    float initial_value
) {
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	ed87 0a00 	vstr	s0, [r7]
    configASSERT(filter_state != NULL);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d103      	bne.n	800caaa <cmr_fir_filter_reset+0x1a>
 800caa2:	2175      	movs	r1, #117	@ 0x75
 800caa4:	4810      	ldr	r0, [pc, #64]	@ (800cae8 <cmr_fir_filter_reset+0x58>)
 800caa6:	f001 fac8 	bl	800e03a <cmr_panic>
    configASSERT(filter_state->buf != NULL);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d103      	bne.n	800caba <cmr_fir_filter_reset+0x2a>
 800cab2:	2176      	movs	r1, #118	@ 0x76
 800cab4:	480d      	ldr	r0, [pc, #52]	@ (800caec <cmr_fir_filter_reset+0x5c>)
 800cab6:	f001 fac0 	bl	800e03a <cmr_panic>

    // fill buf with zeros
    for (size_t i = 0; i < filter_state->len; i++) {
 800caba:	2300      	movs	r3, #0
 800cabc:	60fb      	str	r3, [r7, #12]
 800cabe:	e009      	b.n	800cad4 <cmr_fir_filter_reset+0x44>
        filter_state->buf[i] = initial_value;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681a      	ldr	r2, [r3, #0]
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	009b      	lsls	r3, r3, #2
 800cac8:	4413      	add	r3, r2
 800caca:	683a      	ldr	r2, [r7, #0]
 800cacc:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < filter_state->len; i++) {
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	3301      	adds	r3, #1
 800cad2:	60fb      	str	r3, [r7, #12]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	689b      	ldr	r3, [r3, #8]
 800cad8:	68fa      	ldr	r2, [r7, #12]
 800cada:	429a      	cmp	r2, r3
 800cadc:	d3f0      	bcc.n	800cac0 <cmr_fir_filter_reset+0x30>
    }
}
 800cade:	bf00      	nop
 800cae0:	bf00      	nop
 800cae2:	3710      	adds	r7, #16
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}
 800cae8:	0801ff98 	.word	0x0801ff98
 800caec:	08020080 	.word	0x08020080

0800caf0 <cmr_fir_filter_update>:
 * @return The dot product of the updated buffer and the filter coefficients
 */
float cmr_fir_filter_update(
    cmr_fir_filter_state_t *filter_state, 
    float new_sample
) {
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b086      	sub	sp, #24
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	ed87 0a00 	vstr	s0, [r7]
    configASSERT(filter_state != NULL);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d103      	bne.n	800cb0a <cmr_fir_filter_update+0x1a>
 800cb02:	2189      	movs	r1, #137	@ 0x89
 800cb04:	4827      	ldr	r0, [pc, #156]	@ (800cba4 <cmr_fir_filter_update+0xb4>)
 800cb06:	f001 fa98 	bl	800e03a <cmr_panic>
    configASSERT(filter_state->buf != NULL);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d103      	bne.n	800cb1a <cmr_fir_filter_update+0x2a>
 800cb12:	218a      	movs	r1, #138	@ 0x8a
 800cb14:	4824      	ldr	r0, [pc, #144]	@ (800cba8 <cmr_fir_filter_update+0xb8>)
 800cb16:	f001 fa90 	bl	800e03a <cmr_panic>
    configASSERT(filter_state->coefs != NULL);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d103      	bne.n	800cb2a <cmr_fir_filter_update+0x3a>
 800cb22:	218b      	movs	r1, #139	@ 0x8b
 800cb24:	4821      	ldr	r0, [pc, #132]	@ (800cbac <cmr_fir_filter_update+0xbc>)
 800cb26:	f001 fa88 	bl	800e03a <cmr_panic>

    float dot_product = 0.0f;
 800cb2a:	f04f 0300 	mov.w	r3, #0
 800cb2e:	617b      	str	r3, [r7, #20]

    // right-shift the buffer by one element and insert new_sample at buf[0]
    // and compute the dot product
    for (size_t i = 0; i < filter_state->len; i++) {
 800cb30:	2300      	movs	r3, #0
 800cb32:	613b      	str	r3, [r7, #16]
 800cb34:	e028      	b.n	800cb88 <cmr_fir_filter_update+0x98>
        // swap buf[i] and new_sample
        float tmp = filter_state->buf[i];
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	009b      	lsls	r3, r3, #2
 800cb3e:	4413      	add	r3, r2
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	60fb      	str	r3, [r7, #12]
        filter_state->buf[i] = new_sample;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681a      	ldr	r2, [r3, #0]
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	009b      	lsls	r3, r3, #2
 800cb4c:	4413      	add	r3, r2
 800cb4e:	683a      	ldr	r2, [r7, #0]
 800cb50:	601a      	str	r2, [r3, #0]
        new_sample = tmp;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	603b      	str	r3, [r7, #0]

        // update dot_product
        dot_product += filter_state->buf[i] * filter_state->coefs[i];
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	009b      	lsls	r3, r3, #2
 800cb5e:	4413      	add	r3, r2
 800cb60:	ed93 7a00 	vldr	s14, [r3]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	685a      	ldr	r2, [r3, #4]
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	009b      	lsls	r3, r3, #2
 800cb6c:	4413      	add	r3, r2
 800cb6e:	edd3 7a00 	vldr	s15, [r3]
 800cb72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb76:	ed97 7a05 	vldr	s14, [r7, #20]
 800cb7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cb7e:	edc7 7a05 	vstr	s15, [r7, #20]
    for (size_t i = 0; i < filter_state->len; i++) {
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	3301      	adds	r3, #1
 800cb86:	613b      	str	r3, [r7, #16]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	689b      	ldr	r3, [r3, #8]
 800cb8c:	693a      	ldr	r2, [r7, #16]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d3d1      	bcc.n	800cb36 <cmr_fir_filter_update+0x46>
    }

    return dot_product;
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	ee07 3a90 	vmov	s15, r3
}
 800cb98:	eeb0 0a67 	vmov.f32	s0, s15
 800cb9c:	3718      	adds	r7, #24
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	0801ff98 	.word	0x0801ff98
 800cba8:	08020080 	.word	0x08020080
 800cbac:	080200d8 	.word	0x080200d8

0800cbb0 <EXTI0_IRQHandler>:
 */
#define EXTI_IRQHandler(name, pins) \
    void EXTI##name##_IRQHandler(void) { \
        HAL_GPIO_EXTI_IRQHandler(pins); \
    }
EXTI_IRQHandler(0, GPIO_PIN_0)
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	2001      	movs	r0, #1
 800cbb6:	f009 fdc2 	bl	801673e <HAL_GPIO_EXTI_IRQHandler>
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <EXTI1_IRQHandler>:
EXTI_IRQHandler(1, GPIO_PIN_1)
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	2002      	movs	r0, #2
 800cbc2:	f009 fdbc 	bl	801673e <HAL_GPIO_EXTI_IRQHandler>
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <EXTI2_IRQHandler>:
EXTI_IRQHandler(2, GPIO_PIN_2)
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	2004      	movs	r0, #4
 800cbce:	f009 fdb6 	bl	801673e <HAL_GPIO_EXTI_IRQHandler>
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <EXTI3_IRQHandler>:
EXTI_IRQHandler(3, GPIO_PIN_3)
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	2008      	movs	r0, #8
 800cbda:	f009 fdb0 	bl	801673e <HAL_GPIO_EXTI_IRQHandler>
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <EXTI4_IRQHandler>:
EXTI_IRQHandler(4, GPIO_PIN_4)
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	2010      	movs	r0, #16
 800cbe6:	f009 fdaa 	bl	801673e <HAL_GPIO_EXTI_IRQHandler>
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <EXTI9_5_IRQHandler>:
EXTI_IRQHandler(
 800cbec:	b580      	push	{r7, lr}
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	f44f 7078 	mov.w	r0, #992	@ 0x3e0
 800cbf4:	f009 fda3 	bl	801673e <HAL_GPIO_EXTI_IRQHandler>
 800cbf8:	bd80      	pop	{r7, pc}

0800cbfa <EXTI15_10_IRQHandler>:
    9_5,
    GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_7 | GPIO_PIN_6 | GPIO_PIN_5
)
EXTI_IRQHandler(
 800cbfa:	b580      	push	{r7, lr}
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	f44f 407c 	mov.w	r0, #64512	@ 0xfc00
 800cc02:	f009 fd9c 	bl	801673e <HAL_GPIO_EXTI_IRQHandler>
 800cc06:	bd80      	pop	{r7, pc}

0800cc08 <cmr_gpioPinInit>:
 * @brief Configures the specified GPIO pin(s).
 *
 * @param pinConfigs The pin configuration(s).
 * @param pinConfigsLen The number of pin configurations.
 */
void cmr_gpioPinInit(const cmr_gpioPinConfig_t *pinConfigs, const size_t pinConfigsLen) {
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b084      	sub	sp, #16
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	6039      	str	r1, [r7, #0]
    cmr_gpioPinConfigs = pinConfigs;
 800cc12:	4a16      	ldr	r2, [pc, #88]	@ (800cc6c <cmr_gpioPinInit+0x64>)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6013      	str	r3, [r2, #0]
    cmr_gpioPinConfigsLen = pinConfigsLen;
 800cc18:	4a15      	ldr	r2, [pc, #84]	@ (800cc70 <cmr_gpioPinInit+0x68>)
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	6013      	str	r3, [r2, #0]

    for (size_t i = 0; i < cmr_gpioPinConfigsLen; i++) {
 800cc1e:	2300      	movs	r3, #0
 800cc20:	60fb      	str	r3, [r7, #12]
 800cc22:	e018      	b.n	800cc56 <cmr_gpioPinInit+0x4e>
        const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[i];
 800cc24:	4b11      	ldr	r3, [pc, #68]	@ (800cc6c <cmr_gpioPinInit+0x64>)
 800cc26:	6819      	ldr	r1, [r3, #0]
 800cc28:	68fa      	ldr	r2, [r7, #12]
 800cc2a:	4613      	mov	r3, r2
 800cc2c:	005b      	lsls	r3, r3, #1
 800cc2e:	4413      	add	r3, r2
 800cc30:	00db      	lsls	r3, r3, #3
 800cc32:	440b      	add	r3, r1
 800cc34:	60bb      	str	r3, [r7, #8]
        cmr_rccGPIOClockEnable(pinConfig->port);
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f001 fbfa 	bl	800e434 <cmr_rccGPIOClockEnable>

        // The HAL GPIO driver doesn't actually declare the initialization
        // struct as `const`, but it doesn't modify it either.
        HAL_GPIO_Init(
            pinConfig->port,
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	681a      	ldr	r2, [r3, #0]
            (GPIO_InitTypeDef *) &pinConfig->init
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	3304      	adds	r3, #4
        HAL_GPIO_Init(
 800cc48:	4619      	mov	r1, r3
 800cc4a:	4610      	mov	r0, r2
 800cc4c:	f009 fb9c 	bl	8016388 <HAL_GPIO_Init>
    for (size_t i = 0; i < cmr_gpioPinConfigsLen; i++) {
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	3301      	adds	r3, #1
 800cc54:	60fb      	str	r3, [r7, #12]
 800cc56:	4b06      	ldr	r3, [pc, #24]	@ (800cc70 <cmr_gpioPinInit+0x68>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	68fa      	ldr	r2, [r7, #12]
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	d3e1      	bcc.n	800cc24 <cmr_gpioPinInit+0x1c>
        );
    }
}
 800cc60:	bf00      	nop
 800cc62:	bf00      	nop
 800cc64:	3710      	adds	r7, #16
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	2400e344 	.word	0x2400e344
 800cc70:	2400e348 	.word	0x2400e348

0800cc74 <cmr_gpioWrite>:
 * @brief Writes a value to an output GPIO pin.
 *
 * @param pin The pin to write to.
 * @param value The value to write (zero for off; non-zero for on).
 */
void cmr_gpioWrite(size_t pin, int value) {
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
    configASSERT(pin < cmr_gpioPinConfigsLen);
 800cc7e:	4b18      	ldr	r3, [pc, #96]	@ (800cce0 <cmr_gpioWrite+0x6c>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d303      	bcc.n	800cc90 <cmr_gpioWrite+0x1c>
 800cc88:	214f      	movs	r1, #79	@ 0x4f
 800cc8a:	4816      	ldr	r0, [pc, #88]	@ (800cce4 <cmr_gpioWrite+0x70>)
 800cc8c:	f001 f9d5 	bl	800e03a <cmr_panic>

    const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[pin];
 800cc90:	4b15      	ldr	r3, [pc, #84]	@ (800cce8 <cmr_gpioWrite+0x74>)
 800cc92:	6819      	ldr	r1, [r3, #0]
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	4613      	mov	r3, r2
 800cc98:	005b      	lsls	r3, r3, #1
 800cc9a:	4413      	add	r3, r2
 800cc9c:	00db      	lsls	r3, r3, #3
 800cc9e:	440b      	add	r3, r1
 800cca0:	60fb      	str	r3, [r7, #12]
    configASSERT(
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	d007      	beq.n	800ccba <cmr_gpioWrite+0x46>
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	689b      	ldr	r3, [r3, #8]
 800ccae:	2b11      	cmp	r3, #17
 800ccb0:	d003      	beq.n	800ccba <cmr_gpioWrite+0x46>
 800ccb2:	2152      	movs	r1, #82	@ 0x52
 800ccb4:	480d      	ldr	r0, [pc, #52]	@ (800ccec <cmr_gpioWrite+0x78>)
 800ccb6:	f001 f9c0 	bl	800e03a <cmr_panic>
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_PP) ||
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_OD)
    );

    HAL_GPIO_WritePin(
        pinConfig->port, pinConfig->init.Pin,
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	6818      	ldr	r0, [r3, #0]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	685b      	ldr	r3, [r3, #4]
    HAL_GPIO_WritePin(
 800ccc2:	b299      	uxth	r1, r3
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	bf14      	ite	ne
 800ccca:	2301      	movne	r3, #1
 800cccc:	2300      	moveq	r3, #0
 800ccce:	b2db      	uxtb	r3, r3
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	f009 fd01 	bl	80166d8 <HAL_GPIO_WritePin>
        value ? GPIO_PIN_SET : GPIO_PIN_RESET
    );
}
 800ccd6:	bf00      	nop
 800ccd8:	3710      	adds	r7, #16
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	2400e348 	.word	0x2400e348
 800cce4:	08020130 	.word	0x08020130
 800cce8:	2400e344 	.word	0x2400e344
 800ccec:	08020184 	.word	0x08020184

0800ccf0 <cmr_gpioToggle>:
/**
 * @brief Toggles an output GPIO pin's value.
 *
 * @param pin The pin to toggle.
 */
void cmr_gpioToggle(size_t pin) {
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b084      	sub	sp, #16
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
    configASSERT(pin < cmr_gpioPinConfigsLen);
 800ccf8:	4b15      	ldr	r3, [pc, #84]	@ (800cd50 <cmr_gpioToggle+0x60>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	687a      	ldr	r2, [r7, #4]
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d303      	bcc.n	800cd0a <cmr_gpioToggle+0x1a>
 800cd02:	2163      	movs	r1, #99	@ 0x63
 800cd04:	4813      	ldr	r0, [pc, #76]	@ (800cd54 <cmr_gpioToggle+0x64>)
 800cd06:	f001 f998 	bl	800e03a <cmr_panic>

    const cmr_gpioPinConfig_t *pinConfig = &cmr_gpioPinConfigs[pin];
 800cd0a:	4b13      	ldr	r3, [pc, #76]	@ (800cd58 <cmr_gpioToggle+0x68>)
 800cd0c:	6819      	ldr	r1, [r3, #0]
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	4613      	mov	r3, r2
 800cd12:	005b      	lsls	r3, r3, #1
 800cd14:	4413      	add	r3, r2
 800cd16:	00db      	lsls	r3, r3, #3
 800cd18:	440b      	add	r3, r1
 800cd1a:	60fb      	str	r3, [r7, #12]
    configASSERT(
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	689b      	ldr	r3, [r3, #8]
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d007      	beq.n	800cd34 <cmr_gpioToggle+0x44>
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	689b      	ldr	r3, [r3, #8]
 800cd28:	2b11      	cmp	r3, #17
 800cd2a:	d003      	beq.n	800cd34 <cmr_gpioToggle+0x44>
 800cd2c:	2166      	movs	r1, #102	@ 0x66
 800cd2e:	480b      	ldr	r0, [pc, #44]	@ (800cd5c <cmr_gpioToggle+0x6c>)
 800cd30:	f001 f983 	bl	800e03a <cmr_panic>
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_PP) ||
        (pinConfig->init.Mode == GPIO_MODE_OUTPUT_OD)
    );

    HAL_GPIO_TogglePin(pinConfig->port, pinConfig->init.Pin);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	681a      	ldr	r2, [r3, #0]
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	685b      	ldr	r3, [r3, #4]
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	4619      	mov	r1, r3
 800cd40:	4610      	mov	r0, r2
 800cd42:	f009 fce2 	bl	801670a <HAL_GPIO_TogglePin>
}
 800cd46:	bf00      	nop
 800cd48:	3710      	adds	r7, #16
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	2400e348 	.word	0x2400e348
 800cd54:	08020130 	.word	0x08020130
 800cd58:	2400e344 	.word	0x2400e344
 800cd5c:	08020184 	.word	0x08020184

0800cd60 <FDCAN1_IT0_IRQHandler>:
 * @brief Defines interrupt handlers for each CAN interface.
 *
 * @param can The CAN interface number.
 */

void FDCAN1_IT0_IRQHandler(void) {
 800cd60:	b580      	push	{r7, lr}
 800cd62:	af00      	add	r7, sp, #0
	HAL_FDCAN_IRQHandler(cmr_canInterrupts[0].handle);
 800cd64:	4b03      	ldr	r3, [pc, #12]	@ (800cd74 <FDCAN1_IT0_IRQHandler+0x14>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f008 fe19 	bl	80159a0 <HAL_FDCAN_IRQHandler>
}
 800cd6e:	bf00      	nop
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	2400e350 	.word	0x2400e350

0800cd78 <FDCAN1_IT1_IRQHandler>:

void FDCAN1_IT1_IRQHandler(void) {
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	af00      	add	r7, sp, #0
	HAL_FDCAN_IRQHandler(cmr_canInterrupts[0].handle);
 800cd7c:	4b03      	ldr	r3, [pc, #12]	@ (800cd8c <FDCAN1_IT1_IRQHandler+0x14>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	4618      	mov	r0, r3
 800cd82:	f008 fe0d 	bl	80159a0 <HAL_FDCAN_IRQHandler>
}
 800cd86:	bf00      	nop
 800cd88:	bd80      	pop	{r7, pc}
 800cd8a:	bf00      	nop
 800cd8c:	2400e350 	.word	0x2400e350

0800cd90 <FDCAN2_IT0_IRQHandler>:
void FDCAN2_IT0_IRQHandler(void) {
 800cd90:	b580      	push	{r7, lr}
 800cd92:	af00      	add	r7, sp, #0
	HAL_FDCAN_IRQHandler(cmr_canInterrupts[1].handle);
 800cd94:	4b03      	ldr	r3, [pc, #12]	@ (800cda4 <FDCAN2_IT0_IRQHandler+0x14>)
 800cd96:	685b      	ldr	r3, [r3, #4]
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f008 fe01 	bl	80159a0 <HAL_FDCAN_IRQHandler>
}
 800cd9e:	bf00      	nop
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	2400e350 	.word	0x2400e350

0800cda8 <FDCAN2_IT1_IRQHandler>:

void FDCAN2_IT1_IRQHandler(void) {
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	af00      	add	r7, sp, #0
	HAL_FDCAN_IRQHandler(cmr_canInterrupts[1].handle);
 800cdac:	4b03      	ldr	r3, [pc, #12]	@ (800cdbc <FDCAN2_IT1_IRQHandler+0x14>)
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f008 fdf5 	bl	80159a0 <HAL_FDCAN_IRQHandler>
}
 800cdb6:	bf00      	nop
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	2400e350 	.word	0x2400e350

0800cdc0 <FDCAN3_IT0_IRQHandler>:
void FDCAN3_IT0_IRQHandler(void) {
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	af00      	add	r7, sp, #0
	HAL_FDCAN_IRQHandler(cmr_canInterrupts[2].handle);
 800cdc4:	4b03      	ldr	r3, [pc, #12]	@ (800cdd4 <FDCAN3_IT0_IRQHandler+0x14>)
 800cdc6:	689b      	ldr	r3, [r3, #8]
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f008 fde9 	bl	80159a0 <HAL_FDCAN_IRQHandler>
}
 800cdce:	bf00      	nop
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	bf00      	nop
 800cdd4:	2400e350 	.word	0x2400e350

0800cdd8 <FDCAN3_IT1_IRQHandler>:

void FDCAN3_IT1_IRQHandler(void) {
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	af00      	add	r7, sp, #0
	HAL_FDCAN_IRQHandler(cmr_canInterrupts[2].handle);
 800cddc:	4b03      	ldr	r3, [pc, #12]	@ (800cdec <FDCAN3_IT1_IRQHandler+0x14>)
 800cdde:	689b      	ldr	r3, [r3, #8]
 800cde0:	4618      	mov	r0, r3
 800cde2:	f008 fddd 	bl	80159a0 <HAL_FDCAN_IRQHandler>
}
 800cde6:	bf00      	nop
 800cde8:	bd80      	pop	{r7, pc}
 800cdea:	bf00      	nop
 800cdec:	2400e350 	.word	0x2400e350

0800cdf0 <_platform_FDcanGPIOAF>:
 * @param can The CAN interface.
 * @param port The GPIO port.
 *
 * @return The GPIO alternate function.
 */
uint32_t _platform_FDcanGPIOAF(FDCAN_GlobalTypeDef *instance, GPIO_TypeDef *port) {
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	6039      	str	r1, [r7, #0]
    switch ((uintptr_t) instance) {
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	4a29      	ldr	r2, [pc, #164]	@ (800cea4 <_platform_FDcanGPIOAF+0xb4>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d031      	beq.n	800ce66 <_platform_FDcanGPIOAF+0x76>
 800ce02:	4a28      	ldr	r2, [pc, #160]	@ (800cea4 <_platform_FDcanGPIOAF+0xb4>)
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d845      	bhi.n	800ce94 <_platform_FDcanGPIOAF+0xa4>
 800ce08:	4a27      	ldr	r2, [pc, #156]	@ (800cea8 <_platform_FDcanGPIOAF+0xb8>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d003      	beq.n	800ce16 <_platform_FDcanGPIOAF+0x26>
 800ce0e:	4a27      	ldr	r2, [pc, #156]	@ (800ceac <_platform_FDcanGPIOAF+0xbc>)
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d01f      	beq.n	800ce54 <_platform_FDcanGPIOAF+0x64>
 800ce14:	e03e      	b.n	800ce94 <_platform_FDcanGPIOAF+0xa4>
        case FDCAN1_BASE:
            switch ((uintptr_t) port) {
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	4a25      	ldr	r2, [pc, #148]	@ (800ceb0 <_platform_FDcanGPIOAF+0xc0>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d015      	beq.n	800ce4a <_platform_FDcanGPIOAF+0x5a>
 800ce1e:	4a24      	ldr	r2, [pc, #144]	@ (800ceb0 <_platform_FDcanGPIOAF+0xc0>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d814      	bhi.n	800ce4e <_platform_FDcanGPIOAF+0x5e>
 800ce24:	4a23      	ldr	r2, [pc, #140]	@ (800ceb4 <_platform_FDcanGPIOAF+0xc4>)
 800ce26:	4293      	cmp	r3, r2
 800ce28:	d00d      	beq.n	800ce46 <_platform_FDcanGPIOAF+0x56>
 800ce2a:	4a22      	ldr	r2, [pc, #136]	@ (800ceb4 <_platform_FDcanGPIOAF+0xc4>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d80e      	bhi.n	800ce4e <_platform_FDcanGPIOAF+0x5e>
 800ce30:	4a21      	ldr	r2, [pc, #132]	@ (800ceb8 <_platform_FDcanGPIOAF+0xc8>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d003      	beq.n	800ce3e <_platform_FDcanGPIOAF+0x4e>
 800ce36:	4a21      	ldr	r2, [pc, #132]	@ (800cebc <_platform_FDcanGPIOAF+0xcc>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d002      	beq.n	800ce42 <_platform_FDcanGPIOAF+0x52>
 800ce3c:	e007      	b.n	800ce4e <_platform_FDcanGPIOAF+0x5e>
                case GPIOA_BASE:
                	return GPIO_AF9_FDCAN1;
 800ce3e:	2309      	movs	r3, #9
 800ce40:	e02b      	b.n	800ce9a <_platform_FDcanGPIOAF+0xaa>
                case GPIOB_BASE:
                	return GPIO_AF9_FDCAN1;
 800ce42:	2309      	movs	r3, #9
 800ce44:	e029      	b.n	800ce9a <_platform_FDcanGPIOAF+0xaa>
                case GPIOD_BASE:
                	return GPIO_AF9_FDCAN1;
 800ce46:	2309      	movs	r3, #9
 800ce48:	e027      	b.n	800ce9a <_platform_FDcanGPIOAF+0xaa>
                case GPIOH_BASE:
                    return GPIO_AF9_FDCAN1;
 800ce4a:	2309      	movs	r3, #9
 800ce4c:	e025      	b.n	800ce9a <_platform_FDcanGPIOAF+0xaa>
                default:
                    cmr_panic("Unknown/unsupported GPIO port!");
 800ce4e:	481c      	ldr	r0, [pc, #112]	@ (800cec0 <_platform_FDcanGPIOAF+0xd0>)
 800ce50:	f001 f8f3 	bl	800e03a <cmr_panic>
            }
        case FDCAN2_BASE:
            switch ((uintptr_t) port) {
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	4a19      	ldr	r2, [pc, #100]	@ (800cebc <_platform_FDcanGPIOAF+0xcc>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d101      	bne.n	800ce60 <_platform_FDcanGPIOAF+0x70>
                case GPIOB_BASE:
                    return GPIO_AF9_FDCAN2;
 800ce5c:	2309      	movs	r3, #9
 800ce5e:	e01c      	b.n	800ce9a <_platform_FDcanGPIOAF+0xaa>
                default:
                    cmr_panic("Unknown/unsupported GPIO port!");
 800ce60:	4817      	ldr	r0, [pc, #92]	@ (800cec0 <_platform_FDcanGPIOAF+0xd0>)
 800ce62:	f001 f8ea 	bl	800e03a <cmr_panic>
            }
        case FDCAN3_BASE:
            switch ((uintptr_t) port) {
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	4a16      	ldr	r2, [pc, #88]	@ (800cec4 <_platform_FDcanGPIOAF+0xd4>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d00d      	beq.n	800ce8a <_platform_FDcanGPIOAF+0x9a>
 800ce6e:	4a15      	ldr	r2, [pc, #84]	@ (800cec4 <_platform_FDcanGPIOAF+0xd4>)
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d80c      	bhi.n	800ce8e <_platform_FDcanGPIOAF+0x9e>
 800ce74:	4a0f      	ldr	r2, [pc, #60]	@ (800ceb4 <_platform_FDcanGPIOAF+0xc4>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d003      	beq.n	800ce82 <_platform_FDcanGPIOAF+0x92>
 800ce7a:	4a13      	ldr	r2, [pc, #76]	@ (800cec8 <_platform_FDcanGPIOAF+0xd8>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d002      	beq.n	800ce86 <_platform_FDcanGPIOAF+0x96>
 800ce80:	e005      	b.n	800ce8e <_platform_FDcanGPIOAF+0x9e>
                case GPIOD_BASE:
                    return GPIO_AF5_FDCAN3;
 800ce82:	2305      	movs	r3, #5
 800ce84:	e009      	b.n	800ce9a <_platform_FDcanGPIOAF+0xaa>
                case GPIOF_BASE:
                	return GPIO_AF2_FDCAN3;
 800ce86:	2302      	movs	r3, #2
 800ce88:	e007      	b.n	800ce9a <_platform_FDcanGPIOAF+0xaa>
                case GPIOG_BASE:
                    return GPIO_AF2_FDCAN3;
 800ce8a:	2302      	movs	r3, #2
 800ce8c:	e005      	b.n	800ce9a <_platform_FDcanGPIOAF+0xaa>
                default:
                    cmr_panic("Unknown/unsupported GPIO port!");
 800ce8e:	480c      	ldr	r0, [pc, #48]	@ (800cec0 <_platform_FDcanGPIOAF+0xd0>)
 800ce90:	f001 f8d3 	bl	800e03a <cmr_panic>
            }
        default:
            cmr_panic("Unknown CAN instance!");
 800ce94:	480d      	ldr	r0, [pc, #52]	@ (800cecc <_platform_FDcanGPIOAF+0xdc>)
 800ce96:	f001 f8d0 	bl	800e03a <cmr_panic>
    }
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3708      	adds	r7, #8
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	4000d400 	.word	0x4000d400
 800cea8:	4000a000 	.word	0x4000a000
 800ceac:	4000a400 	.word	0x4000a400
 800ceb0:	58021c00 	.word	0x58021c00
 800ceb4:	58020c00 	.word	0x58020c00
 800ceb8:	58020000 	.word	0x58020000
 800cebc:	58020400 	.word	0x58020400
 800cec0:	08020270 	.word	0x08020270
 800cec4:	58021800 	.word	0x58021800
 800cec8:	58021400 	.word	0x58021400
 800cecc:	08020290 	.word	0x08020290

0800ced0 <_platform_FDCANInit>:
    cmr_canBitRate_t bitRate,
    cmr_canRXMeta_t *rxMeta, size_t rxMetaLen,
    cmr_canRXCallback_t rxCallback,
    GPIO_TypeDef *rxPort, uint16_t rxPin,
    GPIO_TypeDef *txPort, uint16_t txPin
) {
 800ced0:	b590      	push	{r4, r7, lr}
 800ced2:	b0c5      	sub	sp, #276	@ 0x114
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 800ceda:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 800cede:	6020      	str	r0, [r4, #0]
 800cee0:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800cee4:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 800cee8:	6001      	str	r1, [r0, #0]
 800ceea:	4611      	mov	r1, r2
 800ceec:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800cef0:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800cef4:	6013      	str	r3, [r2, #0]
 800cef6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cefa:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800cefe:	460a      	mov	r2, r1
 800cf00:	701a      	strb	r2, [r3, #0]
    *can = (cmr_can_t) {
 800cf02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cf06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	23f8      	movs	r3, #248	@ 0xf8
 800cf10:	461a      	mov	r2, r3
 800cf12:	2100      	movs	r1, #0
 800cf14:	f011 fb28 	bl	801e568 <memset>
 800cf18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cf1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800cf26:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800cf2a:	6812      	ldr	r2, [r2, #0]
 800cf2c:	601a      	str	r2, [r3, #0]
 800cf2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cf32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2201      	movs	r2, #1
 800cf3a:	741a      	strb	r2, [r3, #16]
 800cf3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cf40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	2201      	movs	r2, #1
 800cf48:	615a      	str	r2, [r3, #20]
 800cf4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cf4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2202      	movs	r2, #2
 800cf56:	619a      	str	r2, [r3, #24]
 800cf58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cf5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	2229      	movs	r2, #41	@ 0x29
 800cf64:	61da      	str	r2, [r3, #28]
 800cf66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cf6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	2208      	movs	r2, #8
 800cf72:	621a      	str	r2, [r3, #32]
 800cf74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cf78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	2280      	movs	r2, #128	@ 0x80
 800cf80:	639a      	str	r2, [r3, #56]	@ 0x38
 800cf82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cf86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	2240      	movs	r2, #64	@ 0x40
 800cf8e:	641a      	str	r2, [r3, #64]	@ 0x40
 800cf90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cf94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	2204      	movs	r2, #4
 800cf9c:	645a      	str	r2, [r3, #68]	@ 0x44
 800cf9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cfa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2240      	movs	r2, #64	@ 0x40
 800cfaa:	649a      	str	r2, [r3, #72]	@ 0x48
 800cfac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cfb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2204      	movs	r2, #4
 800cfb8:	64da      	str	r2, [r3, #76]	@ 0x4c
 800cfba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cfbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	2204      	movs	r2, #4
 800cfc6:	655a      	str	r2, [r3, #84]	@ 0x54
 800cfc8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cfcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	2220      	movs	r2, #32
 800cfd4:	661a      	str	r2, [r3, #96]	@ 0x60
 800cfd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cfda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	2204      	movs	r2, #4
 800cfe2:	669a      	str	r2, [r3, #104]	@ 0x68
 800cfe4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cfe8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800cff2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800cff6:	6812      	ldr	r2, [r2, #0]
 800cff8:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 800cffc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d000:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800d00a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800d00e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d012:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800d01c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        .rxMeta = rxMeta,
        .rxMetaLen = rxMetaLen,
        .rxCallback = rxCallback
    };

    if(instance == FDCAN2) {
 800d020:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d024:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4a4a      	ldr	r2, [pc, #296]	@ (800d154 <_platform_FDCANInit+0x284>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d108      	bne.n	800d042 <_platform_FDCANInit+0x172>
    	can->handle.Init.MessageRAMOffset = 853; //partitioning RAM size equally based on 2560 RAM Word Size
 800d030:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d034:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f240 3255 	movw	r2, #853	@ 0x355
 800d03e:	635a      	str	r2, [r3, #52]	@ 0x34
 800d040:	e00f      	b.n	800d062 <_platform_FDCANInit+0x192>
    }
    else if(instance == FDCAN3) {
 800d042:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d046:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	4a42      	ldr	r2, [pc, #264]	@ (800d158 <_platform_FDCANInit+0x288>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d107      	bne.n	800d062 <_platform_FDCANInit+0x192>
    	can->handle.Init.MessageRAMOffset = 1706;
 800d052:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d056:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f240 62aa 	movw	r2, #1706	@ 0x6aa
 800d060:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    can->txSem = xSemaphoreCreateMutexStatic(&can->txSemBuf);
 800d062:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d066:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	33a4      	adds	r3, #164	@ 0xa4
 800d06e:	4619      	mov	r1, r3
 800d070:	2001      	movs	r0, #1
 800d072:	f002 fbce 	bl	800f812 <xQueueCreateMutexStatic>
 800d076:	4602      	mov	r2, r0
 800d078:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d07c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

    configASSERT(can->txSem != NULL);
 800d086:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d08a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d094:	2b00      	cmp	r3, #0
 800d096:	d103      	bne.n	800d0a0 <_platform_FDCANInit+0x1d0>
 800d098:	21b9      	movs	r1, #185	@ 0xb9
 800d09a:	4830      	ldr	r0, [pc, #192]	@ (800d15c <_platform_FDCANInit+0x28c>)
 800d09c:	f000 ffcd 	bl	800e03a <cmr_panic>

    // Configure interrupts.
    size_t canIdx;
    IRQn_Type IT0;
    IRQn_Type IT1;
    switch ((uintptr_t) instance) {
 800d0a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d0a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4a2b      	ldr	r2, [pc, #172]	@ (800d158 <_platform_FDCANInit+0x288>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d01d      	beq.n	800d0ec <_platform_FDCANInit+0x21c>
 800d0b0:	4a29      	ldr	r2, [pc, #164]	@ (800d158 <_platform_FDCANInit+0x288>)
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d824      	bhi.n	800d100 <_platform_FDCANInit+0x230>
 800d0b6:	4a2a      	ldr	r2, [pc, #168]	@ (800d160 <_platform_FDCANInit+0x290>)
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	d003      	beq.n	800d0c4 <_platform_FDCANInit+0x1f4>
 800d0bc:	4a25      	ldr	r2, [pc, #148]	@ (800d154 <_platform_FDCANInit+0x284>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d00a      	beq.n	800d0d8 <_platform_FDCANInit+0x208>
 800d0c2:	e01d      	b.n	800d100 <_platform_FDCANInit+0x230>
        case FDCAN ## num ## _BASE: \
            canIdx = num - 1; \
            IT0 = FDCAN ## num ## _IT0_IRQn ; \
            IT1 = FDCAN ## num ## _IT1_IRQn ; \
            break;
CAN_FOREACH(CAN_INTERRUPT_CONFIG)
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800d0ca:	2313      	movs	r3, #19
 800d0cc:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 800d0d0:	2315      	movs	r3, #21
 800d0d2:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
 800d0d6:	e016      	b.n	800d106 <_platform_FDCANInit+0x236>
 800d0d8:	2301      	movs	r3, #1
 800d0da:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800d0de:	2314      	movs	r3, #20
 800d0e0:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 800d0e4:	2316      	movs	r3, #22
 800d0e6:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
 800d0ea:	e00c      	b.n	800d106 <_platform_FDCANInit+0x236>
 800d0ec:	2302      	movs	r3, #2
 800d0ee:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800d0f2:	239f      	movs	r3, #159	@ 0x9f
 800d0f4:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 800d0f8:	23a0      	movs	r3, #160	@ 0xa0
 800d0fa:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
 800d0fe:	e002      	b.n	800d106 <_platform_FDCANInit+0x236>
#undef CAN_INTERRUPT_CONFIG
        default:
            cmr_panic("Unknown CAN instance!");
 800d100:	4818      	ldr	r0, [pc, #96]	@ (800d164 <_platform_FDCANInit+0x294>)
 800d102:	f000 ff9a 	bl	800e03a <cmr_panic>
    }

    cmr_canInterrupts[canIdx] = (cmr_canInterrupt_t) {
        .handle = &can->handle
 800d106:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d10a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d10e:	681a      	ldr	r2, [r3, #0]
    cmr_canInterrupts[canIdx] = (cmr_canInterrupt_t) {
 800d110:	4915      	ldr	r1, [pc, #84]	@ (800d168 <_platform_FDCANInit+0x298>)
 800d112:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    };
    HAL_NVIC_SetPriority(IT0, 5, 0);
 800d11a:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	@ 0x10a
 800d11e:	2200      	movs	r2, #0
 800d120:	2105      	movs	r1, #5
 800d122:	4618      	mov	r0, r3
 800d124:	f005 fe34 	bl	8012d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(IT1, 5, 0);
 800d128:	f9b7 3108 	ldrsh.w	r3, [r7, #264]	@ 0x108
 800d12c:	2200      	movs	r2, #0
 800d12e:	2105      	movs	r1, #5
 800d130:	4618      	mov	r0, r3
 800d132:	f005 fe2d 	bl	8012d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IT0);
 800d136:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	@ 0x10a
 800d13a:	4618      	mov	r0, r3
 800d13c:	f005 fe42 	bl	8012dc4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(IT1);
 800d140:	f9b7 3108 	ldrsh.w	r3, [r7, #264]	@ 0x108
 800d144:	4618      	mov	r0, r3
 800d146:	f005 fe3d 	bl	8012dc4 <HAL_NVIC_EnableIRQ>
}
 800d14a:	bf00      	nop
 800d14c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800d150:	46bd      	mov	sp, r7
 800d152:	bd90      	pop	{r4, r7, pc}
 800d154:	4000a400 	.word	0x4000a400
 800d158:	4000d400 	.word	0x4000d400
 800d15c:	080202a8 	.word	0x080202a8
 800d160:	4000a000 	.word	0x4000a000
 800d164:	08020290 	.word	0x08020290
 800d168:	2400e350 	.word	0x2400e350

0800d16c <_platform_canFilter>:
 * @param filtersLen The number of filters. Must be less than
 * `CMR_CAN_FILTERBANKS`.
 */
void _platform_canFilter(
    cmr_can_t *can, const cmr_canFilter_t *filters, size_t filtersLen
) {
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b094      	sub	sp, #80	@ 0x50
 800d170:	af00      	add	r7, sp, #0
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	60b9      	str	r1, [r7, #8]
 800d176:	607a      	str	r2, [r7, #4]
    if (filtersLen >= CMR_CAN_FILTERBANKS) {
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2b0d      	cmp	r3, #13
 800d17c:	d902      	bls.n	800d184 <_platform_canFilter+0x18>
        cmr_panic("Too many filter banks!");
 800d17e:	4837      	ldr	r0, [pc, #220]	@ (800d25c <_platform_canFilter+0xf0>)
 800d180:	f000 ff5b 	bl	800e03a <cmr_panic>
    }

    for (size_t i = 0; i < filtersLen; i++) {
 800d184:	2300      	movs	r3, #0
 800d186:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d188:	e05e      	b.n	800d248 <_platform_canFilter+0xdc>
        const cmr_canFilter_t *filter = filters + i;
 800d18a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d18c:	011b      	lsls	r3, r3, #4
 800d18e:	68ba      	ldr	r2, [r7, #8]
 800d190:	4413      	add	r3, r2
 800d192:	647b      	str	r3, [r7, #68]	@ 0x44

        //fix this
        uint32_t bank = i;
 800d194:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d196:	643b      	str	r3, [r7, #64]	@ 0x40

        uint32_t filterMode = filter->isMask
 800d198:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d19a:	781b      	ldrb	r3, [r3, #0]
            ? FDCAN_FILTER_MASK
            : FDCAN_FILTER_DUAL;
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d001      	beq.n	800d1a4 <_platform_canFilter+0x38>
 800d1a0:	2302      	movs	r3, #2
 800d1a2:	e000      	b.n	800d1a6 <_platform_canFilter+0x3a>
 800d1a4:	2301      	movs	r3, #1
        uint32_t filterMode = filter->isMask
 800d1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c

        // In 16 bit ID list mode, FilterIdHigh, FilterIdLow, FilterMaskIdHigh,
        // and FilterMaskIdLow all serve as a whitelist of left-aligned 11-bit
        // CAN IDs.
        // See RM0430 32.7.4 Fig. 387.
        const uint16_t CMR_CAN_ID_FILTER_SHIFT = 5; //TODO: Why is this here?
 800d1a8:	2305      	movs	r3, #5
 800d1aa:	877b      	strh	r3, [r7, #58]	@ 0x3a
        uint32_t filter_config = (filter->rxFIFO == FDCAN_RX_FIFO0) ? FDCAN_FILTER_TO_RXFIFO0 : FDCAN_FILTER_TO_RXFIFO1;
 800d1ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	2b40      	cmp	r3, #64	@ 0x40
 800d1b2:	d101      	bne.n	800d1b8 <_platform_canFilter+0x4c>
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	e000      	b.n	800d1ba <_platform_canFilter+0x4e>
 800d1b8:	2302      	movs	r3, #2
 800d1ba:	637b      	str	r3, [r7, #52]	@ 0x34
        for (int i = 0; i < 2; i++) { // H7 can only do 2, so make a filter from the top that includes the other 2
 800d1bc:	2300      	movs	r3, #0
 800d1be:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d1c0:	e03c      	b.n	800d23c <_platform_canFilter+0xd0>
            uint32_t actual_bank = (i == 0) ? bank : (127-bank);
 800d1c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d003      	beq.n	800d1d0 <_platform_canFilter+0x64>
 800d1c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1ca:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800d1ce:	e000      	b.n	800d1d2 <_platform_canFilter+0x66>
 800d1d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1d2:	633b      	str	r3, [r7, #48]	@ 0x30
            FDCAN_FilterTypeDef config = {
 800d1d4:	f107 0310 	add.w	r3, r7, #16
 800d1d8:	2220      	movs	r2, #32
 800d1da:	2100      	movs	r1, #0
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f011 f9c3 	bl	801e568 <memset>
 800d1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1e4:	617b      	str	r3, [r7, #20]
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	61bb      	str	r3, [r7, #24]
 800d1ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1ec:	61fb      	str	r3, [r7, #28]
                .FilterID1              = filter->ids[2*i+0] << CMR_CAN_ID_FILTER_SHIFT,
 800d1ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1f0:	005a      	lsls	r2, r3, #1
 800d1f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1f4:	3204      	adds	r2, #4
 800d1f6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d1fe:	fa02 f303 	lsl.w	r3, r2, r3
            FDCAN_FilterTypeDef config = {
 800d202:	623b      	str	r3, [r7, #32]
                .FilterID2              = filter->ids[2*i+1] << CMR_CAN_ID_FILTER_SHIFT,
 800d204:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d206:	005b      	lsls	r3, r3, #1
 800d208:	1c5a      	adds	r2, r3, #1
 800d20a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d20c:	3204      	adds	r2, #4
 800d20e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d212:	461a      	mov	r2, r3
 800d214:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d216:	fa02 f303 	lsl.w	r3, r2, r3
            FDCAN_FilterTypeDef config = {
 800d21a:	627b      	str	r3, [r7, #36]	@ 0x24
                .FilterIndex            = actual_bank, //TODO: Is this the same thing?
                .FilterType             = FDCAN_FILTER_DUAL,
                .IdType                 = FDCAN_STANDARD_ID,
            };

            if (HAL_FDCAN_ConfigFilter(&can->handle, &config) != HAL_OK) {
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	f107 0210 	add.w	r2, r7, #16
 800d222:	4611      	mov	r1, r2
 800d224:	4618      	mov	r0, r3
 800d226:	f008 f875 	bl	8015314 <HAL_FDCAN_ConfigFilter>
 800d22a:	4603      	mov	r3, r0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d002      	beq.n	800d236 <_platform_canFilter+0xca>
                cmr_panic("HAL_FDCAN_ConfigFilter() failed!");
 800d230:	480b      	ldr	r0, [pc, #44]	@ (800d260 <_platform_canFilter+0xf4>)
 800d232:	f000 ff02 	bl	800e03a <cmr_panic>
        for (int i = 0; i < 2; i++) { // H7 can only do 2, so make a filter from the top that includes the other 2
 800d236:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d238:	3301      	adds	r3, #1
 800d23a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d23c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d23e:	2b01      	cmp	r3, #1
 800d240:	ddbf      	ble.n	800d1c2 <_platform_canFilter+0x56>
    for (size_t i = 0; i < filtersLen; i++) {
 800d242:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d244:	3301      	adds	r3, #1
 800d246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d248:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d39c      	bcc.n	800d18a <_platform_canFilter+0x1e>
            }
        }
    }
}
 800d250:	bf00      	nop
 800d252:	bf00      	nop
 800d254:	3750      	adds	r7, #80	@ 0x50
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	bf00      	nop
 800d25c:	080202f4 	.word	0x080202f4
 800d260:	0802030c 	.word	0x0802030c

0800d264 <_platform_rccFDCanClockEnable>:
 * @brief Enables the specified CAN interface's clock.
 *
 * @param instance The HAL CAN instance.
 */

void _platform_rccFDCanClockEnable() {
 800d264:	b580      	push	{r7, lr}
 800d266:	b0b4      	sub	sp, #208	@ 0xd0
 800d268:	af00      	add	r7, sp, #0
	if(HAL_RCC_FDCAN_CLK_ENABLED == 0) {
 800d26a:	4b1f      	ldr	r3, [pc, #124]	@ (800d2e8 <_platform_rccFDCanClockEnable+0x84>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d135      	bne.n	800d2de <_platform_rccFDCanClockEnable+0x7a>
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d272:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800d276:	2200      	movs	r2, #0
 800d278:	601a      	str	r2, [r3, #0]
 800d27a:	605a      	str	r2, [r3, #4]
 800d27c:	609a      	str	r2, [r3, #8]
 800d27e:	60da      	str	r2, [r3, #12]
 800d280:	611a      	str	r2, [r3, #16]
		RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d282:	463b      	mov	r3, r7
 800d284:	22b8      	movs	r2, #184	@ 0xb8
 800d286:	2100      	movs	r1, #0
 800d288:	4618      	mov	r0, r3
 800d28a:	f011 f96d 	bl	801e568 <memset>
	    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800d28e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800d292:	f04f 0300 	mov.w	r3, #0
 800d296:	e9c7 2300 	strd	r2, r3, [r7]
	    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800d29a:	2300      	movs	r3, #0
 800d29c:	66fb      	str	r3, [r7, #108]	@ 0x6c
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800d29e:	463b      	mov	r3, r7
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f00b fe73 	bl	8018f8c <HAL_RCCEx_PeriphCLKConfig>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d002      	beq.n	800d2b2 <_platform_rccFDCanClockEnable+0x4e>
	    	cmr_panic("Clock source failed!");
 800d2ac:	480f      	ldr	r0, [pc, #60]	@ (800d2ec <_platform_rccFDCanClockEnable+0x88>)
 800d2ae:	f000 fec4 	bl	800e03a <cmr_panic>
	    }
		__HAL_RCC_FDCAN_CLK_ENABLE();
 800d2b2:	4b0f      	ldr	r3, [pc, #60]	@ (800d2f0 <_platform_rccFDCanClockEnable+0x8c>)
 800d2b4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800d2b8:	4a0d      	ldr	r2, [pc, #52]	@ (800d2f0 <_platform_rccFDCanClockEnable+0x8c>)
 800d2ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d2be:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800d2c2:	4b0b      	ldr	r3, [pc, #44]	@ (800d2f0 <_platform_rccFDCanClockEnable+0x8c>)
 800d2c4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800d2c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d2d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
		HAL_RCC_FDCAN_CLK_ENABLED++;
 800d2d4:	4b04      	ldr	r3, [pc, #16]	@ (800d2e8 <_platform_rccFDCanClockEnable+0x84>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	3301      	adds	r3, #1
 800d2da:	4a03      	ldr	r2, [pc, #12]	@ (800d2e8 <_platform_rccFDCanClockEnable+0x84>)
 800d2dc:	6013      	str	r3, [r2, #0]
	}
}
 800d2de:	bf00      	nop
 800d2e0:	37d0      	adds	r7, #208	@ 0xd0
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
 800d2e6:	bf00      	nop
 800d2e8:	2400e34c 	.word	0x2400e34c
 800d2ec:	08020330 	.word	0x08020330
 800d2f0:	58024400 	.word	0x58024400

0800d2f4 <_platform_rccSystemClockEnable>:
 * an external clock.
 *
 * @note Generated by STM32Cube. Sets System Clock to 550 MHz
 * Peripheral clocks are at 137.5 MHz.
 */
void _platform_rccSystemClockEnable(void)  {
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b09c      	sub	sp, #112	@ 0x70
 800d2f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d2fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d2fe:	224c      	movs	r2, #76	@ 0x4c
 800d300:	2100      	movs	r1, #0
 800d302:	4618      	mov	r0, r3
 800d304:	f011 f930 	bl	801e568 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d308:	1d3b      	adds	r3, r7, #4
 800d30a:	2220      	movs	r2, #32
 800d30c:	2100      	movs	r1, #0
 800d30e:	4618      	mov	r0, r3
 800d310:	f011 f92a 	bl	801e568 <memset>

	  /** Supply configuration update enable
	  */
	  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800d314:	2002      	movs	r0, #2
 800d316:	f00a fe4d 	bl	8017fb4 <HAL_PWREx_ConfigSupply>

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800d31a:	2300      	movs	r3, #0
 800d31c:	603b      	str	r3, [r7, #0]
 800d31e:	4b30      	ldr	r3, [pc, #192]	@ (800d3e0 <_platform_rccSystemClockEnable+0xec>)
 800d320:	699b      	ldr	r3, [r3, #24]
 800d322:	4a2f      	ldr	r2, [pc, #188]	@ (800d3e0 <_platform_rccSystemClockEnable+0xec>)
 800d324:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800d328:	6193      	str	r3, [r2, #24]
 800d32a:	4b2d      	ldr	r3, [pc, #180]	@ (800d3e0 <_platform_rccSystemClockEnable+0xec>)
 800d32c:	699b      	ldr	r3, [r3, #24]
 800d32e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d332:	603b      	str	r3, [r7, #0]
 800d334:	683b      	ldr	r3, [r7, #0]

	  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800d336:	bf00      	nop
 800d338:	4b29      	ldr	r3, [pc, #164]	@ (800d3e0 <_platform_rccSystemClockEnable+0xec>)
 800d33a:	699b      	ldr	r3, [r3, #24]
 800d33c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d340:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d344:	d1f8      	bne.n	800d338 <_platform_rccSystemClockEnable+0x44>

	  /** Macro to configure the PLL clock source
	  */
	  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800d346:	4b27      	ldr	r3, [pc, #156]	@ (800d3e4 <_platform_rccSystemClockEnable+0xf0>)
 800d348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d34a:	f023 0303 	bic.w	r3, r3, #3
 800d34e:	4a25      	ldr	r2, [pc, #148]	@ (800d3e4 <_platform_rccSystemClockEnable+0xf0>)
 800d350:	f043 0302 	orr.w	r3, r3, #2
 800d354:	6293      	str	r3, [r2, #40]	@ 0x28

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d356:	2301      	movs	r3, #1
 800d358:	627b      	str	r3, [r7, #36]	@ 0x24
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d35a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800d35e:	62bb      	str	r3, [r7, #40]	@ 0x28
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d360:	2302      	movs	r3, #2
 800d362:	64bb      	str	r3, [r7, #72]	@ 0x48
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d364:	2302      	movs	r3, #2
 800d366:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  RCC_OscInitStruct.PLL.PLLM = 2;
 800d368:	2302      	movs	r3, #2
 800d36a:	653b      	str	r3, [r7, #80]	@ 0x50
	  RCC_OscInitStruct.PLL.PLLN = 44;
 800d36c:	232c      	movs	r3, #44	@ 0x2c
 800d36e:	657b      	str	r3, [r7, #84]	@ 0x54
	  RCC_OscInitStruct.PLL.PLLP = 1;
 800d370:	2301      	movs	r3, #1
 800d372:	65bb      	str	r3, [r7, #88]	@ 0x58
	  RCC_OscInitStruct.PLL.PLLQ = 3;
 800d374:	2303      	movs	r3, #3
 800d376:	65fb      	str	r3, [r7, #92]	@ 0x5c
	  RCC_OscInitStruct.PLL.PLLR = 2;
 800d378:	2302      	movs	r3, #2
 800d37a:	663b      	str	r3, [r7, #96]	@ 0x60
	  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800d37c:	230c      	movs	r3, #12
 800d37e:	667b      	str	r3, [r7, #100]	@ 0x64
	  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800d380:	2300      	movs	r3, #0
 800d382:	66bb      	str	r3, [r7, #104]	@ 0x68
	  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800d384:	2300      	movs	r3, #0
 800d386:	66fb      	str	r3, [r7, #108]	@ 0x6c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d388:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d38c:	4618      	mov	r0, r3
 800d38e:	f00a fe6b 	bl	8018068 <HAL_RCC_OscConfig>
 800d392:	4603      	mov	r3, r0
 800d394:	2b00      	cmp	r3, #0
 800d396:	d002      	beq.n	800d39e <_platform_rccSystemClockEnable+0xaa>
	  {
		cmr_panic("osc init failed!");
 800d398:	4813      	ldr	r0, [pc, #76]	@ (800d3e8 <_platform_rccSystemClockEnable+0xf4>)
 800d39a:	f000 fe4e 	bl	800e03a <cmr_panic>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d39e:	233f      	movs	r3, #63	@ 0x3f
 800d3a0:	607b      	str	r3, [r7, #4]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
	                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d3a2:	2303      	movs	r3, #3
 800d3a4:	60bb      	str	r3, [r7, #8]
	  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800d3aa:	2308      	movs	r3, #8
 800d3ac:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800d3ae:	2340      	movs	r3, #64	@ 0x40
 800d3b0:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800d3b2:	2340      	movs	r3, #64	@ 0x40
 800d3b4:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800d3b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d3ba:	61fb      	str	r3, [r7, #28]
	  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800d3bc:	2340      	movs	r3, #64	@ 0x40
 800d3be:	623b      	str	r3, [r7, #32]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800d3c0:	1d3b      	adds	r3, r7, #4
 800d3c2:	2103      	movs	r1, #3
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f00b fa29 	bl	801881c <HAL_RCC_ClockConfig>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d002      	beq.n	800d3d6 <_platform_rccSystemClockEnable+0xe2>
	  {
	    cmr_panic("clock init failed!");
 800d3d0:	4806      	ldr	r0, [pc, #24]	@ (800d3ec <_platform_rccSystemClockEnable+0xf8>)
 800d3d2:	f000 fe32 	bl	800e03a <cmr_panic>
//	  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
//	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
//	  {
//		  cmr_panic("clock init failed!");
//	  }
}
 800d3d6:	bf00      	nop
 800d3d8:	3770      	adds	r7, #112	@ 0x70
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}
 800d3de:	bf00      	nop
 800d3e0:	58024800 	.word	0x58024800
 800d3e4:	58024400 	.word	0x58024400
 800d3e8:	08020348 	.word	0x08020348
 800d3ec:	0802035c 	.word	0x0802035c

0800d3f0 <_platform_rccGPIOClockEnable>:
/**
 * @brief Enables the specified GPIO port's clock.
 *
 * @param port The GPIO port.
 */
void _platform_rccGPIOClockEnable(GPIO_TypeDef *port) {
 800d3f0:	b480      	push	{r7}
 800d3f2:	b08b      	sub	sp, #44	@ 0x2c
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
    switch ((uintptr_t) port) {
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	4a5c      	ldr	r2, [pc, #368]	@ (800d56c <_platform_rccGPIOClockEnable+0x17c>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	f000 809f 	beq.w	800d540 <_platform_rccGPIOClockEnable+0x150>
 800d402:	4a5a      	ldr	r2, [pc, #360]	@ (800d56c <_platform_rccGPIOClockEnable+0x17c>)
 800d404:	4293      	cmp	r3, r2
 800d406:	f200 80ab 	bhi.w	800d560 <_platform_rccGPIOClockEnable+0x170>
 800d40a:	4a59      	ldr	r2, [pc, #356]	@ (800d570 <_platform_rccGPIOClockEnable+0x180>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	f000 8087 	beq.w	800d520 <_platform_rccGPIOClockEnable+0x130>
 800d412:	4a57      	ldr	r2, [pc, #348]	@ (800d570 <_platform_rccGPIOClockEnable+0x180>)
 800d414:	4293      	cmp	r3, r2
 800d416:	f200 80a3 	bhi.w	800d560 <_platform_rccGPIOClockEnable+0x170>
 800d41a:	4a56      	ldr	r2, [pc, #344]	@ (800d574 <_platform_rccGPIOClockEnable+0x184>)
 800d41c:	4293      	cmp	r3, r2
 800d41e:	d06f      	beq.n	800d500 <_platform_rccGPIOClockEnable+0x110>
 800d420:	4a54      	ldr	r2, [pc, #336]	@ (800d574 <_platform_rccGPIOClockEnable+0x184>)
 800d422:	4293      	cmp	r3, r2
 800d424:	f200 809c 	bhi.w	800d560 <_platform_rccGPIOClockEnable+0x170>
 800d428:	4a53      	ldr	r2, [pc, #332]	@ (800d578 <_platform_rccGPIOClockEnable+0x188>)
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d058      	beq.n	800d4e0 <_platform_rccGPIOClockEnable+0xf0>
 800d42e:	4a52      	ldr	r2, [pc, #328]	@ (800d578 <_platform_rccGPIOClockEnable+0x188>)
 800d430:	4293      	cmp	r3, r2
 800d432:	f200 8095 	bhi.w	800d560 <_platform_rccGPIOClockEnable+0x170>
 800d436:	4a51      	ldr	r2, [pc, #324]	@ (800d57c <_platform_rccGPIOClockEnable+0x18c>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d041      	beq.n	800d4c0 <_platform_rccGPIOClockEnable+0xd0>
 800d43c:	4a4f      	ldr	r2, [pc, #316]	@ (800d57c <_platform_rccGPIOClockEnable+0x18c>)
 800d43e:	4293      	cmp	r3, r2
 800d440:	f200 808e 	bhi.w	800d560 <_platform_rccGPIOClockEnable+0x170>
 800d444:	4a4e      	ldr	r2, [pc, #312]	@ (800d580 <_platform_rccGPIOClockEnable+0x190>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d02a      	beq.n	800d4a0 <_platform_rccGPIOClockEnable+0xb0>
 800d44a:	4a4d      	ldr	r2, [pc, #308]	@ (800d580 <_platform_rccGPIOClockEnable+0x190>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	f200 8087 	bhi.w	800d560 <_platform_rccGPIOClockEnable+0x170>
 800d452:	4a4c      	ldr	r2, [pc, #304]	@ (800d584 <_platform_rccGPIOClockEnable+0x194>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d003      	beq.n	800d460 <_platform_rccGPIOClockEnable+0x70>
 800d458:	4a4b      	ldr	r2, [pc, #300]	@ (800d588 <_platform_rccGPIOClockEnable+0x198>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d010      	beq.n	800d480 <_platform_rccGPIOClockEnable+0x90>
            break;
        case GPIOH_BASE:
            __HAL_RCC_GPIOH_CLK_ENABLE();
            break;
    }
}
 800d45e:	e07f      	b.n	800d560 <_platform_rccGPIOClockEnable+0x170>
            __HAL_RCC_GPIOA_CLK_ENABLE();
 800d460:	4b4a      	ldr	r3, [pc, #296]	@ (800d58c <_platform_rccGPIOClockEnable+0x19c>)
 800d462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d466:	4a49      	ldr	r2, [pc, #292]	@ (800d58c <_platform_rccGPIOClockEnable+0x19c>)
 800d468:	f043 0301 	orr.w	r3, r3, #1
 800d46c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d470:	4b46      	ldr	r3, [pc, #280]	@ (800d58c <_platform_rccGPIOClockEnable+0x19c>)
 800d472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d476:	f003 0301 	and.w	r3, r3, #1
 800d47a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
            break;
 800d47e:	e06f      	b.n	800d560 <_platform_rccGPIOClockEnable+0x170>
            __HAL_RCC_GPIOB_CLK_ENABLE();
 800d480:	4b42      	ldr	r3, [pc, #264]	@ (800d58c <_platform_rccGPIOClockEnable+0x19c>)
 800d482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d486:	4a41      	ldr	r2, [pc, #260]	@ (800d58c <_platform_rccGPIOClockEnable+0x19c>)
 800d488:	f043 0302 	orr.w	r3, r3, #2
 800d48c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d490:	4b3e      	ldr	r3, [pc, #248]	@ (800d58c <_platform_rccGPIOClockEnable+0x19c>)
 800d492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d496:	f003 0302 	and.w	r3, r3, #2
 800d49a:	623b      	str	r3, [r7, #32]
 800d49c:	6a3b      	ldr	r3, [r7, #32]
            break;
 800d49e:	e05f      	b.n	800d560 <_platform_rccGPIOClockEnable+0x170>
            __HAL_RCC_GPIOC_CLK_ENABLE();
 800d4a0:	4b3a      	ldr	r3, [pc, #232]	@ (800d58c <_platform_rccGPIOClockEnable+0x19c>)
 800d4a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d4a6:	4a39      	ldr	r2, [pc, #228]	@ (800d58c <_platform_rccGPIOClockEnable+0x19c>)
 800d4a8:	f043 0304 	orr.w	r3, r3, #4
 800d4ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d4b0:	4b36      	ldr	r3, [pc, #216]	@ (800d58c <_platform_rccGPIOClockEnable+0x19c>)
 800d4b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d4b6:	f003 0304 	and.w	r3, r3, #4
 800d4ba:	61fb      	str	r3, [r7, #28]
 800d4bc:	69fb      	ldr	r3, [r7, #28]
            break;
 800d4be:	e04f      	b.n	800d560 <_platform_rccGPIOClockEnable+0x170>
            __HAL_RCC_GPIOD_CLK_ENABLE();
 800d4c0:	4b32      	ldr	r3, [pc, #200]	@ (800d58c <_platform_rccGPIOClockEnable+0x19c>)
 800d4c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d4c6:	4a31      	ldr	r2, [pc, #196]	@ (800d58c <_platform_rccGPIOClockEnable+0x19c>)
 800d4c8:	f043 0308 	orr.w	r3, r3, #8
 800d4cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d4d0:	4b2e      	ldr	r3, [pc, #184]	@ (800d58c <_platform_rccGPIOClockEnable+0x19c>)
 800d4d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d4d6:	f003 0308 	and.w	r3, r3, #8
 800d4da:	61bb      	str	r3, [r7, #24]
 800d4dc:	69bb      	ldr	r3, [r7, #24]
            break;
 800d4de:	e03f      	b.n	800d560 <_platform_rccGPIOClockEnable+0x170>
            __HAL_RCC_GPIOE_CLK_ENABLE();
 800d4e0:	4b2a      	ldr	r3, [pc, #168]	@ (800d58c <_platform_rccGPIOClockEnable+0x19c>)
 800d4e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d4e6:	4a29      	ldr	r2, [pc, #164]	@ (800d58c <_platform_rccGPIOClockEnable+0x19c>)
 800d4e8:	f043 0310 	orr.w	r3, r3, #16
 800d4ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d4f0:	4b26      	ldr	r3, [pc, #152]	@ (800d58c <_platform_rccGPIOClockEnable+0x19c>)
 800d4f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d4f6:	f003 0310 	and.w	r3, r3, #16
 800d4fa:	617b      	str	r3, [r7, #20]
 800d4fc:	697b      	ldr	r3, [r7, #20]
            break;
 800d4fe:	e02f      	b.n	800d560 <_platform_rccGPIOClockEnable+0x170>
            __HAL_RCC_GPIOF_CLK_ENABLE();
 800d500:	4b22      	ldr	r3, [pc, #136]	@ (800d58c <_platform_rccGPIOClockEnable+0x19c>)
 800d502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d506:	4a21      	ldr	r2, [pc, #132]	@ (800d58c <_platform_rccGPIOClockEnable+0x19c>)
 800d508:	f043 0320 	orr.w	r3, r3, #32
 800d50c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d510:	4b1e      	ldr	r3, [pc, #120]	@ (800d58c <_platform_rccGPIOClockEnable+0x19c>)
 800d512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d516:	f003 0320 	and.w	r3, r3, #32
 800d51a:	613b      	str	r3, [r7, #16]
 800d51c:	693b      	ldr	r3, [r7, #16]
            break;
 800d51e:	e01f      	b.n	800d560 <_platform_rccGPIOClockEnable+0x170>
            __HAL_RCC_GPIOG_CLK_ENABLE();
 800d520:	4b1a      	ldr	r3, [pc, #104]	@ (800d58c <_platform_rccGPIOClockEnable+0x19c>)
 800d522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d526:	4a19      	ldr	r2, [pc, #100]	@ (800d58c <_platform_rccGPIOClockEnable+0x19c>)
 800d528:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d52c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d530:	4b16      	ldr	r3, [pc, #88]	@ (800d58c <_platform_rccGPIOClockEnable+0x19c>)
 800d532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d53a:	60fb      	str	r3, [r7, #12]
 800d53c:	68fb      	ldr	r3, [r7, #12]
            break;
 800d53e:	e00f      	b.n	800d560 <_platform_rccGPIOClockEnable+0x170>
            __HAL_RCC_GPIOH_CLK_ENABLE();
 800d540:	4b12      	ldr	r3, [pc, #72]	@ (800d58c <_platform_rccGPIOClockEnable+0x19c>)
 800d542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d546:	4a11      	ldr	r2, [pc, #68]	@ (800d58c <_platform_rccGPIOClockEnable+0x19c>)
 800d548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d54c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d550:	4b0e      	ldr	r3, [pc, #56]	@ (800d58c <_platform_rccGPIOClockEnable+0x19c>)
 800d552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d55a:	60bb      	str	r3, [r7, #8]
 800d55c:	68bb      	ldr	r3, [r7, #8]
            break;
 800d55e:	bf00      	nop
}
 800d560:	bf00      	nop
 800d562:	372c      	adds	r7, #44	@ 0x2c
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr
 800d56c:	58021c00 	.word	0x58021c00
 800d570:	58021800 	.word	0x58021800
 800d574:	58021400 	.word	0x58021400
 800d578:	58021000 	.word	0x58021000
 800d57c:	58020c00 	.word	0x58020c00
 800d580:	58020800 	.word	0x58020800
 800d584:	58020000 	.word	0x58020000
 800d588:	58020400 	.word	0x58020400
 800d58c:	58024400 	.word	0x58024400

0800d590 <_platform_rccADCClockEnable>:
 * @param instance The HAL ADC instance.
 */

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void _platform_rccADCClockEnable(ADC_TypeDef *instance) {
 800d590:	b580      	push	{r7, lr}
 800d592:	b0b2      	sub	sp, #200	@ 0xc8
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d598:	f107 0310 	add.w	r3, r7, #16
 800d59c:	22b8      	movs	r2, #184	@ 0xb8
 800d59e:	2100      	movs	r1, #0
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f010 ffe1 	bl	801e568 <memset>

	  /* USER CODE END ADC1_MspInit 0 */

	  /** Initializes the peripherals clock
	  */
	 PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800d5a6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800d5aa:	f04f 0300 	mov.w	r3, #0
 800d5ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
	    PeriphClkInitStruct.PLL3.PLL3M = 2;
 800d5b2:	2302      	movs	r3, #2
 800d5b4:	63bb      	str	r3, [r7, #56]	@ 0x38
	    PeriphClkInitStruct.PLL3.PLL3N = 15;
 800d5b6:	230f      	movs	r3, #15
 800d5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800d5ba:	2302      	movs	r3, #2
 800d5bc:	643b      	str	r3, [r7, #64]	@ 0x40
	    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800d5be:	2302      	movs	r3, #2
 800d5c0:	647b      	str	r3, [r7, #68]	@ 0x44
	    PeriphClkInitStruct.PLL3.PLL3R = 16;
 800d5c2:	2310      	movs	r3, #16
 800d5c4:	64bb      	str	r3, [r7, #72]	@ 0x48
	    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800d5c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800d5ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
	    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	653b      	str	r3, [r7, #80]	@ 0x50
	    PeriphClkInitStruct.PLL3.PLL3FRACN = 2950;
 800d5d0:	f640 3386 	movw	r3, #2950	@ 0xb86
 800d5d4:	657b      	str	r3, [r7, #84]	@ 0x54
	    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 800d5d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800d5da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d5de:	f107 0310 	add.w	r3, r7, #16
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f00b fcd2 	bl	8018f8c <HAL_RCCEx_PeriphCLKConfig>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d002      	beq.n	800d5f4 <_platform_rccADCClockEnable+0x64>
	    {
	     cmr_panic("  ");
 800d5ee:	480f      	ldr	r0, [pc, #60]	@ (800d62c <_platform_rccADCClockEnable+0x9c>)
 800d5f0:	f000 fd23 	bl	800e03a <cmr_panic>
	    }

	if(HAL_RCC_ADC_CLK_ENABLED == 0) {
 800d5f4:	4b0e      	ldr	r3, [pc, #56]	@ (800d630 <_platform_rccADCClockEnable+0xa0>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d113      	bne.n	800d624 <_platform_rccADCClockEnable+0x94>
		__HAL_RCC_ADC12_CLK_ENABLE();
 800d5fc:	4b0d      	ldr	r3, [pc, #52]	@ (800d634 <_platform_rccADCClockEnable+0xa4>)
 800d5fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d602:	4a0c      	ldr	r2, [pc, #48]	@ (800d634 <_platform_rccADCClockEnable+0xa4>)
 800d604:	f043 0320 	orr.w	r3, r3, #32
 800d608:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800d60c:	4b09      	ldr	r3, [pc, #36]	@ (800d634 <_platform_rccADCClockEnable+0xa4>)
 800d60e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d612:	f003 0320 	and.w	r3, r3, #32
 800d616:	60fb      	str	r3, [r7, #12]
 800d618:	68fb      	ldr	r3, [r7, #12]
		HAL_RCC_ADC_CLK_ENABLED++;
 800d61a:	4b05      	ldr	r3, [pc, #20]	@ (800d630 <_platform_rccADCClockEnable+0xa0>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	3301      	adds	r3, #1
 800d620:	4a03      	ldr	r2, [pc, #12]	@ (800d630 <_platform_rccADCClockEnable+0xa0>)
 800d622:	6013      	str	r3, [r2, #0]
	}
}
 800d624:	bf00      	nop
 800d626:	37c8      	adds	r7, #200	@ 0xc8
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	0802038c 	.word	0x0802038c
 800d630:	2400e35c 	.word	0x2400e35c
 800d634:	58024400 	.word	0x58024400

0800d638 <_platform_adcChannelConfig>:

ADC_ChannelConfTypeDef _platform_adcChannelConfig(const cmr_adcChannel_t *channel, uint32_t rank) {
 800d638:	b5b0      	push	{r4, r5, r7, lr}
 800d63a:	b08e      	sub	sp, #56	@ 0x38
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	60f8      	str	r0, [r7, #12]
 800d640:	60b9      	str	r1, [r7, #8]
 800d642:	607a      	str	r2, [r7, #4]
    ADC_ChannelConfTypeDef channelConfig = {
 800d644:	f107 0314 	add.w	r3, r7, #20
 800d648:	2224      	movs	r2, #36	@ 0x24
 800d64a:	2100      	movs	r1, #0
 800d64c:	4618      	mov	r0, r3
 800d64e:	f010 ff8b 	bl	801e568 <memset>
        .Channel = channel->channel,
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	681b      	ldr	r3, [r3, #0]
    ADC_ChannelConfTypeDef channelConfig = {
 800d656:	617b      	str	r3, [r7, #20]
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	61bb      	str	r3, [r7, #24]
        .Rank = rank,  // HAL needs Rank to be from 1 to 16
        .SamplingTime = channel->samplingTime,
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	68db      	ldr	r3, [r3, #12]
    ADC_ChannelConfTypeDef channelConfig = {
 800d660:	61fb      	str	r3, [r7, #28]
 800d662:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800d666:	623b      	str	r3, [r7, #32]
 800d668:	2304      	movs	r3, #4
 800d66a:	627b      	str	r3, [r7, #36]	@ 0x24
        .Offset = 0,     // reserved, set to 0
        .SingleDiff = ADC_SINGLE_ENDED,
        .OffsetNumber = ADC_OFFSET_NONE
    };

    return channelConfig;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	461d      	mov	r5, r3
 800d670:	f107 0414 	add.w	r4, r7, #20
 800d674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d67a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d67c:	6823      	ldr	r3, [r4, #0]
 800d67e:	602b      	str	r3, [r5, #0]
}
 800d680:	68f8      	ldr	r0, [r7, #12]
 800d682:	3738      	adds	r7, #56	@ 0x38
 800d684:	46bd      	mov	sp, r7
 800d686:	bdb0      	pop	{r4, r5, r7, pc}

0800d688 <_platform_adcPinConfig>:

GPIO_InitTypeDef _platform_adcPinConfig(const cmr_adcChannel_t *channel) {
 800d688:	b4b0      	push	{r4, r5, r7}
 800d68a:	b089      	sub	sp, #36	@ 0x24
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
    GPIO_InitTypeDef pinConfig = {
        .Pin = channel->pin,
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	891b      	ldrh	r3, [r3, #8]
    GPIO_InitTypeDef pinConfig = {
 800d696:	60fb      	str	r3, [r7, #12]
 800d698:	2303      	movs	r3, #3
 800d69a:	613b      	str	r3, [r7, #16]
 800d69c:	2300      	movs	r3, #0
 800d69e:	617b      	str	r3, [r7, #20]
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	61bb      	str	r3, [r7, #24]
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	61fb      	str	r3, [r7, #28]
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_LOW,
        .Alternate = 0
    };

    return pinConfig;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	461d      	mov	r5, r3
 800d6ac:	f107 040c 	add.w	r4, r7, #12
 800d6b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d6b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d6b4:	6823      	ldr	r3, [r4, #0]
 800d6b6:	602b      	str	r3, [r5, #0]
}
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	3724      	adds	r7, #36	@ 0x24
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bcb0      	pop	{r4, r5, r7}
 800d6c0:	4770      	bx	lr

0800d6c2 <_platform_adcInit>:
/**
 * @brief Platform-specifc adc initialization
 *
 *  @param adc The ADC to initialize.
 */
void _platform_adcInit(cmr_adc_t *adc, ADC_TypeDef *instance, cmr_adcChannel_t *channels, const size_t channelsLen) {
 800d6c2:	b590      	push	{r4, r7, lr}
 800d6c4:	f5ad 5d87 	sub.w	sp, sp, #4320	@ 0x10e0
 800d6c8:	b083      	sub	sp, #12
 800d6ca:	af00      	add	r7, sp, #0
 800d6cc:	f107 04e8 	add.w	r4, r7, #232	@ 0xe8
 800d6d0:	f844 0cdc 	str.w	r0, [r4, #-220]
 800d6d4:	f107 00e8 	add.w	r0, r7, #232	@ 0xe8
 800d6d8:	f840 1ce0 	str.w	r1, [r0, #-224]
 800d6dc:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 800d6e0:	f841 2ce4 	str.w	r2, [r1, #-228]
 800d6e4:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 800d6e8:	f842 3ce8 	str.w	r3, [r2, #-232]
    *adc =  (cmr_adc_t) {
 800d6ec:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800d6f0:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f241 03d8 	movw	r3, #4312	@ 0x10d8
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	2100      	movs	r1, #0
 800d6fe:	f010 ff33 	bl	801e568 <memset>
 800d702:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800d706:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 800d70a:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 800d70e:	f852 2ce0 	ldr.w	r2, [r2, #-224]
 800d712:	601a      	str	r2, [r3, #0]
 800d714:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800d718:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 800d71c:	2201      	movs	r2, #1
 800d71e:	611a      	str	r2, [r3, #16]
 800d720:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800d724:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 800d728:	2204      	movs	r2, #4
 800d72a:	615a      	str	r2, [r3, #20]
 800d72c:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800d730:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 800d734:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 800d738:	f852 2ce8 	ldr.w	r2, [r2, #-232]
 800d73c:	61da      	str	r2, [r3, #28]
 800d73e:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800d742:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 800d746:	2201      	movs	r2, #1
 800d748:	f883 2020 	strb.w	r2, [r3, #32]
 800d74c:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800d750:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 800d754:	2201      	movs	r2, #1
 800d756:	625a      	str	r2, [r3, #36]	@ 0x24
 800d758:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800d75c:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 800d760:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 800d764:	f852 2ce4 	ldr.w	r2, [r2, #-228]
 800d768:	671a      	str	r2, [r3, #112]	@ 0x70
 800d76a:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800d76e:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 800d772:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 800d776:	f852 2ce8 	ldr.w	r2, [r2, #-232]
 800d77a:	675a      	str	r2, [r3, #116]	@ 0x74
            }
        },
        .channels = channels,
        .channelsLen = channelsLen
    };
}
 800d77c:	bf00      	nop
 800d77e:	f507 5787 	add.w	r7, r7, #4320	@ 0x10e0
 800d782:	370c      	adds	r7, #12
 800d784:	46bd      	mov	sp, r7
 800d786:	bd90      	pop	{r4, r7, pc}

0800d788 <_platform_adcPoll>:

void _platform_adcPoll(cmr_adc_t *adc, uint32_t adcTimeout) {
 800d788:	b580      	push	{r7, lr}
 800d78a:	b084      	sub	sp, #16
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	6039      	str	r1, [r7, #0]
    // ADC set up in discontinuous scan mode.
    // Each `HAL_ADC_Start()` call converts the next-highest-rank channel.
    for (size_t i = 0; i < adc->channelsLen; i++) {
 800d792:	2300      	movs	r3, #0
 800d794:	60fb      	str	r3, [r7, #12]
 800d796:	e01b      	b.n	800d7d0 <_platform_adcPoll+0x48>
        cmr_adcChannel_t *channel = &(adc->channels[i]);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800d79c:	68fa      	ldr	r2, [r7, #12]
 800d79e:	4613      	mov	r3, r2
 800d7a0:	009b      	lsls	r3, r3, #2
 800d7a2:	4413      	add	r3, r2
 800d7a4:	009b      	lsls	r3, r3, #2
 800d7a6:	440b      	add	r3, r1
 800d7a8:	60bb      	str	r3, [r7, #8]

        HAL_ADC_Start(&adc->handle);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f004 fa5b 	bl	8011c68 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&adc->handle, adcTimeout);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6839      	ldr	r1, [r7, #0]
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f004 fb20 	bl	8011dfc <HAL_ADC_PollForConversion>
        channel->value = HAL_ADC_GetValue(&adc->handle);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f004 fc10 	bl	8011fe4 <HAL_ADC_GetValue>
 800d7c4:	4602      	mov	r2, r0
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	611a      	str	r2, [r3, #16]
    for (size_t i = 0; i < adc->channelsLen; i++) {
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	60fb      	str	r3, [r7, #12]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d7d4:	68fa      	ldr	r2, [r7, #12]
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d3de      	bcc.n	800d798 <_platform_adcPoll+0x10>
    }
}
 800d7da:	bf00      	nop
 800d7dc:	bf00      	nop
 800d7de:	3710      	adds	r7, #16
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <_platform_rccTIMClockEnable>:

#endif /* HAL_FLASH_MODULE_ENABLED */

#ifdef HAL_TIM_MODULE_ENABLED
void _platform_rccTIMClockEnable(TIM_TypeDef *instance)
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b093      	sub	sp, #76	@ 0x4c
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
    switch ((uintptr_t)instance)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	4aa9      	ldr	r2, [pc, #676]	@ (800da94 <_platform_rccTIMClockEnable+0x2b0>)
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	f000 813e 	beq.w	800da72 <_platform_rccTIMClockEnable+0x28e>
 800d7f6:	4aa7      	ldr	r2, [pc, #668]	@ (800da94 <_platform_rccTIMClockEnable+0x2b0>)
 800d7f8:	4293      	cmp	r3, r2
 800d7fa:	f200 818b 	bhi.w	800db14 <_platform_rccTIMClockEnable+0x330>
 800d7fe:	4aa6      	ldr	r2, [pc, #664]	@ (800da98 <_platform_rccTIMClockEnable+0x2b4>)
 800d800:	4293      	cmp	r3, r2
 800d802:	f000 8126 	beq.w	800da52 <_platform_rccTIMClockEnable+0x26e>
 800d806:	4aa4      	ldr	r2, [pc, #656]	@ (800da98 <_platform_rccTIMClockEnable+0x2b4>)
 800d808:	4293      	cmp	r3, r2
 800d80a:	f200 8183 	bhi.w	800db14 <_platform_rccTIMClockEnable+0x330>
 800d80e:	4aa3      	ldr	r2, [pc, #652]	@ (800da9c <_platform_rccTIMClockEnable+0x2b8>)
 800d810:	4293      	cmp	r3, r2
 800d812:	f000 810e 	beq.w	800da32 <_platform_rccTIMClockEnable+0x24e>
 800d816:	4aa1      	ldr	r2, [pc, #644]	@ (800da9c <_platform_rccTIMClockEnable+0x2b8>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	f200 817b 	bhi.w	800db14 <_platform_rccTIMClockEnable+0x330>
 800d81e:	4aa0      	ldr	r2, [pc, #640]	@ (800daa0 <_platform_rccTIMClockEnable+0x2bc>)
 800d820:	4293      	cmp	r3, r2
 800d822:	f000 80c6 	beq.w	800d9b2 <_platform_rccTIMClockEnable+0x1ce>
 800d826:	4a9e      	ldr	r2, [pc, #632]	@ (800daa0 <_platform_rccTIMClockEnable+0x2bc>)
 800d828:	4293      	cmp	r3, r2
 800d82a:	f200 8173 	bhi.w	800db14 <_platform_rccTIMClockEnable+0x330>
 800d82e:	4a9d      	ldr	r2, [pc, #628]	@ (800daa4 <_platform_rccTIMClockEnable+0x2c0>)
 800d830:	4293      	cmp	r3, r2
 800d832:	d04e      	beq.n	800d8d2 <_platform_rccTIMClockEnable+0xee>
 800d834:	4a9b      	ldr	r2, [pc, #620]	@ (800daa4 <_platform_rccTIMClockEnable+0x2c0>)
 800d836:	4293      	cmp	r3, r2
 800d838:	f200 816c 	bhi.w	800db14 <_platform_rccTIMClockEnable+0x330>
 800d83c:	4a9a      	ldr	r2, [pc, #616]	@ (800daa8 <_platform_rccTIMClockEnable+0x2c4>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	f000 8158 	beq.w	800daf4 <_platform_rccTIMClockEnable+0x310>
 800d844:	4a98      	ldr	r2, [pc, #608]	@ (800daa8 <_platform_rccTIMClockEnable+0x2c4>)
 800d846:	4293      	cmp	r3, r2
 800d848:	f200 8164 	bhi.w	800db14 <_platform_rccTIMClockEnable+0x330>
 800d84c:	4a97      	ldr	r2, [pc, #604]	@ (800daac <_platform_rccTIMClockEnable+0x2c8>)
 800d84e:	4293      	cmp	r3, r2
 800d850:	f000 8140 	beq.w	800dad4 <_platform_rccTIMClockEnable+0x2f0>
 800d854:	4a95      	ldr	r2, [pc, #596]	@ (800daac <_platform_rccTIMClockEnable+0x2c8>)
 800d856:	4293      	cmp	r3, r2
 800d858:	f200 815c 	bhi.w	800db14 <_platform_rccTIMClockEnable+0x330>
 800d85c:	4a94      	ldr	r2, [pc, #592]	@ (800dab0 <_platform_rccTIMClockEnable+0x2cc>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	f000 80d7 	beq.w	800da12 <_platform_rccTIMClockEnable+0x22e>
 800d864:	4a92      	ldr	r2, [pc, #584]	@ (800dab0 <_platform_rccTIMClockEnable+0x2cc>)
 800d866:	4293      	cmp	r3, r2
 800d868:	f200 8154 	bhi.w	800db14 <_platform_rccTIMClockEnable+0x330>
 800d86c:	4a91      	ldr	r2, [pc, #580]	@ (800dab4 <_platform_rccTIMClockEnable+0x2d0>)
 800d86e:	4293      	cmp	r3, r2
 800d870:	f000 80bf 	beq.w	800d9f2 <_platform_rccTIMClockEnable+0x20e>
 800d874:	4a8f      	ldr	r2, [pc, #572]	@ (800dab4 <_platform_rccTIMClockEnable+0x2d0>)
 800d876:	4293      	cmp	r3, r2
 800d878:	f200 814c 	bhi.w	800db14 <_platform_rccTIMClockEnable+0x330>
 800d87c:	4a8e      	ldr	r2, [pc, #568]	@ (800dab8 <_platform_rccTIMClockEnable+0x2d4>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	f000 80a7 	beq.w	800d9d2 <_platform_rccTIMClockEnable+0x1ee>
 800d884:	4a8c      	ldr	r2, [pc, #560]	@ (800dab8 <_platform_rccTIMClockEnable+0x2d4>)
 800d886:	4293      	cmp	r3, r2
 800d888:	f200 8144 	bhi.w	800db14 <_platform_rccTIMClockEnable+0x330>
 800d88c:	4a8b      	ldr	r2, [pc, #556]	@ (800dabc <_platform_rccTIMClockEnable+0x2d8>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d07f      	beq.n	800d992 <_platform_rccTIMClockEnable+0x1ae>
 800d892:	4a8a      	ldr	r2, [pc, #552]	@ (800dabc <_platform_rccTIMClockEnable+0x2d8>)
 800d894:	4293      	cmp	r3, r2
 800d896:	f200 813d 	bhi.w	800db14 <_platform_rccTIMClockEnable+0x330>
 800d89a:	4a89      	ldr	r2, [pc, #548]	@ (800dac0 <_platform_rccTIMClockEnable+0x2dc>)
 800d89c:	4293      	cmp	r3, r2
 800d89e:	d068      	beq.n	800d972 <_platform_rccTIMClockEnable+0x18e>
 800d8a0:	4a87      	ldr	r2, [pc, #540]	@ (800dac0 <_platform_rccTIMClockEnable+0x2dc>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	f200 8136 	bhi.w	800db14 <_platform_rccTIMClockEnable+0x330>
 800d8a8:	4a86      	ldr	r2, [pc, #536]	@ (800dac4 <_platform_rccTIMClockEnable+0x2e0>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d051      	beq.n	800d952 <_platform_rccTIMClockEnable+0x16e>
 800d8ae:	4a85      	ldr	r2, [pc, #532]	@ (800dac4 <_platform_rccTIMClockEnable+0x2e0>)
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	f200 812f 	bhi.w	800db14 <_platform_rccTIMClockEnable+0x330>
 800d8b6:	4a84      	ldr	r2, [pc, #528]	@ (800dac8 <_platform_rccTIMClockEnable+0x2e4>)
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	d03a      	beq.n	800d932 <_platform_rccTIMClockEnable+0x14e>
 800d8bc:	4a82      	ldr	r2, [pc, #520]	@ (800dac8 <_platform_rccTIMClockEnable+0x2e4>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	f200 8128 	bhi.w	800db14 <_platform_rccTIMClockEnable+0x330>
 800d8c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d8c8:	d013      	beq.n	800d8f2 <_platform_rccTIMClockEnable+0x10e>
 800d8ca:	4a80      	ldr	r2, [pc, #512]	@ (800dacc <_platform_rccTIMClockEnable+0x2e8>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d020      	beq.n	800d912 <_platform_rccTIMClockEnable+0x12e>
        break;
    case TIM24_BASE:
        __HAL_RCC_TIM24_CLK_ENABLE();
        break;
    }
}
 800d8d0:	e120      	b.n	800db14 <_platform_rccTIMClockEnable+0x330>
        __HAL_RCC_TIM1_CLK_ENABLE();
 800d8d2:	4b7f      	ldr	r3, [pc, #508]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d8d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d8d8:	4a7d      	ldr	r2, [pc, #500]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d8da:	f043 0301 	orr.w	r3, r3, #1
 800d8de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d8e2:	4b7b      	ldr	r3, [pc, #492]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d8e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d8e8:	f003 0301 	and.w	r3, r3, #1
 800d8ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800d8ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
        break;
 800d8f0:	e110      	b.n	800db14 <_platform_rccTIMClockEnable+0x330>
        __HAL_RCC_TIM2_CLK_ENABLE();
 800d8f2:	4b77      	ldr	r3, [pc, #476]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d8f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d8f8:	4a75      	ldr	r2, [pc, #468]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d8fa:	f043 0301 	orr.w	r3, r3, #1
 800d8fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800d902:	4b73      	ldr	r3, [pc, #460]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d904:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d908:	f003 0301 	and.w	r3, r3, #1
 800d90c:	643b      	str	r3, [r7, #64]	@ 0x40
 800d90e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
        break;
 800d910:	e100      	b.n	800db14 <_platform_rccTIMClockEnable+0x330>
        __HAL_RCC_TIM3_CLK_ENABLE();
 800d912:	4b6f      	ldr	r3, [pc, #444]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d914:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d918:	4a6d      	ldr	r2, [pc, #436]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d91a:	f043 0302 	orr.w	r3, r3, #2
 800d91e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800d922:	4b6b      	ldr	r3, [pc, #428]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d924:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d928:	f003 0302 	and.w	r3, r3, #2
 800d92c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d92e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        break;
 800d930:	e0f0      	b.n	800db14 <_platform_rccTIMClockEnable+0x330>
        __HAL_RCC_TIM4_CLK_ENABLE();
 800d932:	4b67      	ldr	r3, [pc, #412]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d934:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d938:	4a65      	ldr	r2, [pc, #404]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d93a:	f043 0304 	orr.w	r3, r3, #4
 800d93e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800d942:	4b63      	ldr	r3, [pc, #396]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d944:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d948:	f003 0304 	and.w	r3, r3, #4
 800d94c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d94e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
        break;
 800d950:	e0e0      	b.n	800db14 <_platform_rccTIMClockEnable+0x330>
        __HAL_RCC_TIM5_CLK_ENABLE();
 800d952:	4b5f      	ldr	r3, [pc, #380]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d954:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d958:	4a5d      	ldr	r2, [pc, #372]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d95a:	f043 0308 	orr.w	r3, r3, #8
 800d95e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800d962:	4b5b      	ldr	r3, [pc, #364]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d964:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d968:	f003 0308 	and.w	r3, r3, #8
 800d96c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d96e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
        break;
 800d970:	e0d0      	b.n	800db14 <_platform_rccTIMClockEnable+0x330>
        __HAL_RCC_TIM6_CLK_ENABLE();
 800d972:	4b57      	ldr	r3, [pc, #348]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d974:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d978:	4a55      	ldr	r2, [pc, #340]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d97a:	f043 0310 	orr.w	r3, r3, #16
 800d97e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800d982:	4b53      	ldr	r3, [pc, #332]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d984:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d988:	f003 0310 	and.w	r3, r3, #16
 800d98c:	633b      	str	r3, [r7, #48]	@ 0x30
 800d98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        break;
 800d990:	e0c0      	b.n	800db14 <_platform_rccTIMClockEnable+0x330>
        __HAL_RCC_TIM7_CLK_ENABLE();
 800d992:	4b4f      	ldr	r3, [pc, #316]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d994:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d998:	4a4d      	ldr	r2, [pc, #308]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d99a:	f043 0320 	orr.w	r3, r3, #32
 800d99e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800d9a2:	4b4b      	ldr	r3, [pc, #300]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d9a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d9a8:	f003 0320 	and.w	r3, r3, #32
 800d9ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d9ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        break;
 800d9b0:	e0b0      	b.n	800db14 <_platform_rccTIMClockEnable+0x330>
        __HAL_RCC_TIM8_CLK_ENABLE();
 800d9b2:	4b47      	ldr	r3, [pc, #284]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d9b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d9b8:	4a45      	ldr	r2, [pc, #276]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d9ba:	f043 0302 	orr.w	r3, r3, #2
 800d9be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d9c2:	4b43      	ldr	r3, [pc, #268]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d9c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d9c8:	f003 0302 	and.w	r3, r3, #2
 800d9cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d9ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        break;
 800d9d0:	e0a0      	b.n	800db14 <_platform_rccTIMClockEnable+0x330>
        __HAL_RCC_TIM12_CLK_ENABLE();
 800d9d2:	4b3f      	ldr	r3, [pc, #252]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d9d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d9d8:	4a3d      	ldr	r2, [pc, #244]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d9da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800d9e2:	4b3b      	ldr	r3, [pc, #236]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d9e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d9e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800d9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        break;
 800d9f0:	e090      	b.n	800db14 <_platform_rccTIMClockEnable+0x330>
        __HAL_RCC_TIM13_CLK_ENABLE();
 800d9f2:	4b37      	ldr	r3, [pc, #220]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d9f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d9f8:	4a35      	ldr	r2, [pc, #212]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800d9fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800da02:	4b33      	ldr	r3, [pc, #204]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800da04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800da08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da0c:	623b      	str	r3, [r7, #32]
 800da0e:	6a3b      	ldr	r3, [r7, #32]
        break;
 800da10:	e080      	b.n	800db14 <_platform_rccTIMClockEnable+0x330>
        __HAL_RCC_TIM14_CLK_ENABLE();
 800da12:	4b2f      	ldr	r3, [pc, #188]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800da14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800da18:	4a2d      	ldr	r2, [pc, #180]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800da1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800da1e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800da22:	4b2b      	ldr	r3, [pc, #172]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800da24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800da28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da2c:	61fb      	str	r3, [r7, #28]
 800da2e:	69fb      	ldr	r3, [r7, #28]
        break;
 800da30:	e070      	b.n	800db14 <_platform_rccTIMClockEnable+0x330>
        __HAL_RCC_TIM15_CLK_ENABLE();
 800da32:	4b27      	ldr	r3, [pc, #156]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800da34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800da38:	4a25      	ldr	r2, [pc, #148]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800da3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800da3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800da42:	4b23      	ldr	r3, [pc, #140]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800da44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800da48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800da4c:	61bb      	str	r3, [r7, #24]
 800da4e:	69bb      	ldr	r3, [r7, #24]
        break;
 800da50:	e060      	b.n	800db14 <_platform_rccTIMClockEnable+0x330>
        __HAL_RCC_TIM16_CLK_ENABLE();
 800da52:	4b1f      	ldr	r3, [pc, #124]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800da54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800da58:	4a1d      	ldr	r2, [pc, #116]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800da5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800da5e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800da62:	4b1b      	ldr	r3, [pc, #108]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800da64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800da68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800da6c:	617b      	str	r3, [r7, #20]
 800da6e:	697b      	ldr	r3, [r7, #20]
        break;
 800da70:	e050      	b.n	800db14 <_platform_rccTIMClockEnable+0x330>
        __HAL_RCC_TIM17_CLK_ENABLE();
 800da72:	4b17      	ldr	r3, [pc, #92]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800da74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800da78:	4a15      	ldr	r2, [pc, #84]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800da7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800da7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800da82:	4b13      	ldr	r3, [pc, #76]	@ (800dad0 <_platform_rccTIMClockEnable+0x2ec>)
 800da84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800da88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800da8c:	613b      	str	r3, [r7, #16]
 800da8e:	693b      	ldr	r3, [r7, #16]
        break;
 800da90:	e040      	b.n	800db14 <_platform_rccTIMClockEnable+0x330>
 800da92:	bf00      	nop
 800da94:	40014800 	.word	0x40014800
 800da98:	40014400 	.word	0x40014400
 800da9c:	40014000 	.word	0x40014000
 800daa0:	40010400 	.word	0x40010400
 800daa4:	40010000 	.word	0x40010000
 800daa8:	4000e400 	.word	0x4000e400
 800daac:	4000e000 	.word	0x4000e000
 800dab0:	40002000 	.word	0x40002000
 800dab4:	40001c00 	.word	0x40001c00
 800dab8:	40001800 	.word	0x40001800
 800dabc:	40001400 	.word	0x40001400
 800dac0:	40001000 	.word	0x40001000
 800dac4:	40000c00 	.word	0x40000c00
 800dac8:	40000800 	.word	0x40000800
 800dacc:	40000400 	.word	0x40000400
 800dad0:	58024400 	.word	0x58024400
        __HAL_RCC_TIM23_CLK_ENABLE();
 800dad4:	4b12      	ldr	r3, [pc, #72]	@ (800db20 <_platform_rccTIMClockEnable+0x33c>)
 800dad6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800dada:	4a11      	ldr	r2, [pc, #68]	@ (800db20 <_platform_rccTIMClockEnable+0x33c>)
 800dadc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dae0:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800dae4:	4b0e      	ldr	r3, [pc, #56]	@ (800db20 <_platform_rccTIMClockEnable+0x33c>)
 800dae6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800daea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800daee:	60fb      	str	r3, [r7, #12]
 800daf0:	68fb      	ldr	r3, [r7, #12]
        break;
 800daf2:	e00f      	b.n	800db14 <_platform_rccTIMClockEnable+0x330>
        __HAL_RCC_TIM24_CLK_ENABLE();
 800daf4:	4b0a      	ldr	r3, [pc, #40]	@ (800db20 <_platform_rccTIMClockEnable+0x33c>)
 800daf6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800dafa:	4a09      	ldr	r2, [pc, #36]	@ (800db20 <_platform_rccTIMClockEnable+0x33c>)
 800dafc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800db00:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800db04:	4b06      	ldr	r3, [pc, #24]	@ (800db20 <_platform_rccTIMClockEnable+0x33c>)
 800db06:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800db0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db0e:	60bb      	str	r3, [r7, #8]
 800db10:	68bb      	ldr	r3, [r7, #8]
        break;
 800db12:	bf00      	nop
}
 800db14:	bf00      	nop
 800db16:	374c      	adds	r7, #76	@ 0x4c
 800db18:	46bd      	mov	sp, r7
 800db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1e:	4770      	bx	lr
 800db20:	58024400 	.word	0x58024400

0800db24 <_platform_i2cInit>:
#endif /* HAL_TIM_MODULE_ENABLED */

#ifdef HAL_I2C_MODULE_ENABLED
void _platform_i2cInit(cmr_i2c_t *i2c, I2C_TypeDef *instance, uint32_t clockSpeed, uint32_t ownAddr) {
 800db24:	b590      	push	{r4, r7, lr}
 800db26:	b0ef      	sub	sp, #444	@ 0x1bc
 800db28:	af00      	add	r7, sp, #0
 800db2a:	f507 74dc 	add.w	r4, r7, #440	@ 0x1b8
 800db2e:	f5a4 74d6 	sub.w	r4, r4, #428	@ 0x1ac
 800db32:	6020      	str	r0, [r4, #0]
 800db34:	f507 70dc 	add.w	r0, r7, #440	@ 0x1b8
 800db38:	f5a0 70d8 	sub.w	r0, r0, #432	@ 0x1b0
 800db3c:	6001      	str	r1, [r0, #0]
 800db3e:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 800db42:	f5a1 71da 	sub.w	r1, r1, #436	@ 0x1b4
 800db46:	600a      	str	r2, [r1, #0]
 800db48:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 800db4c:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 800db50:	6013      	str	r3, [r2, #0]
    *i2c = (cmr_i2c_t) {
 800db52:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800db56:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4618      	mov	r0, r3
 800db5e:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 800db62:	461a      	mov	r2, r3
 800db64:	2100      	movs	r1, #0
 800db66:	f010 fcff 	bl	801e568 <memset>
 800db6a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800db6e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 800db78:	f5a2 72d8 	sub.w	r2, r2, #432	@ 0x1b0
 800db7c:	6812      	ldr	r2, [r2, #0]
 800db7e:	601a      	str	r2, [r3, #0]
 800db80:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800db84:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4a07      	ldr	r2, [pc, #28]	@ (800dba8 <_platform_i2cInit+0x84>)
 800db8c:	605a      	str	r2, [r3, #4]
 800db8e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800db92:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	2201      	movs	r2, #1
 800db9a:	60da      	str	r2, [r3, #12]
				 .GeneralCallMode = I2C_GENERALCALL_DISABLE,
				 .NoStretchMode = I2C_NOSTRETCH_DISABLE
            }
        }
    };
}
 800db9c:	bf00      	nop
 800db9e:	f507 77de 	add.w	r7, r7, #444	@ 0x1bc
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd90      	pop	{r4, r7, pc}
 800dba6:	bf00      	nop
 800dba8:	00601a5c 	.word	0x00601a5c

0800dbac <_platform_i2cClockInit>:

void _platform_i2cClockInit(I2C_TypeDef *instance) {
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b0bc      	sub	sp, #240	@ 0xf0
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dbb4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800dbb8:	2200      	movs	r2, #0
 800dbba:	601a      	str	r2, [r3, #0]
 800dbbc:	605a      	str	r2, [r3, #4]
 800dbbe:	609a      	str	r2, [r3, #8]
 800dbc0:	60da      	str	r2, [r3, #12]
 800dbc2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800dbc4:	f107 0320 	add.w	r3, r7, #32
 800dbc8:	22b8      	movs	r2, #184	@ 0xb8
 800dbca:	2100      	movs	r1, #0
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f010 fccb 	bl	801e568 <memset>
	switch ((uintptr_t) instance) {
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	4a6a      	ldr	r2, [pc, #424]	@ (800dd80 <_platform_i2cClockInit+0x1d4>)
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	f000 8086 	beq.w	800dce8 <_platform_i2cClockInit+0x13c>
 800dbdc:	4a68      	ldr	r2, [pc, #416]	@ (800dd80 <_platform_i2cClockInit+0x1d4>)
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	f200 80ca 	bhi.w	800dd78 <_platform_i2cClockInit+0x1cc>
 800dbe4:	4a67      	ldr	r2, [pc, #412]	@ (800dd84 <_platform_i2cClockInit+0x1d8>)
 800dbe6:	4293      	cmp	r3, r2
 800dbe8:	f000 80a2 	beq.w	800dd30 <_platform_i2cClockInit+0x184>
 800dbec:	4a65      	ldr	r2, [pc, #404]	@ (800dd84 <_platform_i2cClockInit+0x1d8>)
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	f200 80c2 	bhi.w	800dd78 <_platform_i2cClockInit+0x1cc>
 800dbf4:	4a64      	ldr	r2, [pc, #400]	@ (800dd88 <_platform_i2cClockInit+0x1dc>)
 800dbf6:	4293      	cmp	r3, r2
 800dbf8:	d052      	beq.n	800dca0 <_platform_i2cClockInit+0xf4>
 800dbfa:	4a63      	ldr	r2, [pc, #396]	@ (800dd88 <_platform_i2cClockInit+0x1dc>)
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	f200 80bb 	bhi.w	800dd78 <_platform_i2cClockInit+0x1cc>
 800dc02:	4a62      	ldr	r2, [pc, #392]	@ (800dd8c <_platform_i2cClockInit+0x1e0>)
 800dc04:	4293      	cmp	r3, r2
 800dc06:	d003      	beq.n	800dc10 <_platform_i2cClockInit+0x64>
 800dc08:	4a61      	ldr	r2, [pc, #388]	@ (800dd90 <_platform_i2cClockInit+0x1e4>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d024      	beq.n	800dc58 <_platform_i2cClockInit+0xac>
				  cmr_panic("i2c clock failed!");
				}
				__HAL_RCC_I2C5_CLK_ENABLE();
				break;
	    }
}
 800dc0e:	e0b3      	b.n	800dd78 <_platform_i2cClockInit+0x1cc>
	        	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800dc10:	f04f 0208 	mov.w	r2, #8
 800dc14:	f04f 0300 	mov.w	r3, #0
 800dc18:	e9c7 2308 	strd	r2, r3, [r7, #32]
				PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1CLKSOURCE_D2PCLK1;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
				if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800dc22:	f107 0320 	add.w	r3, r7, #32
 800dc26:	4618      	mov	r0, r3
 800dc28:	f00b f9b0 	bl	8018f8c <HAL_RCCEx_PeriphCLKConfig>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d002      	beq.n	800dc38 <_platform_i2cClockInit+0x8c>
				  cmr_panic("i2c clock failed!");
 800dc32:	4858      	ldr	r0, [pc, #352]	@ (800dd94 <_platform_i2cClockInit+0x1e8>)
 800dc34:	f000 fa01 	bl	800e03a <cmr_panic>
				__HAL_RCC_I2C1_CLK_ENABLE();
 800dc38:	4b57      	ldr	r3, [pc, #348]	@ (800dd98 <_platform_i2cClockInit+0x1ec>)
 800dc3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dc3e:	4a56      	ldr	r2, [pc, #344]	@ (800dd98 <_platform_i2cClockInit+0x1ec>)
 800dc40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800dc44:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800dc48:	4b53      	ldr	r3, [pc, #332]	@ (800dd98 <_platform_i2cClockInit+0x1ec>)
 800dc4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dc4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dc52:	61fb      	str	r3, [r7, #28]
 800dc54:	69fb      	ldr	r3, [r7, #28]
	            break;
 800dc56:	e08f      	b.n	800dd78 <_platform_i2cClockInit+0x1cc>
	        	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800dc58:	f04f 0208 	mov.w	r2, #8
 800dc5c:	f04f 0300 	mov.w	r3, #0
 800dc60:	e9c7 2308 	strd	r2, r3, [r7, #32]
				PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C2CLKSOURCE_D2PCLK1;
 800dc64:	2300      	movs	r3, #0
 800dc66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
				if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800dc6a:	f107 0320 	add.w	r3, r7, #32
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f00b f98c 	bl	8018f8c <HAL_RCCEx_PeriphCLKConfig>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d002      	beq.n	800dc80 <_platform_i2cClockInit+0xd4>
				  cmr_panic("i2c clock failed!");
 800dc7a:	4846      	ldr	r0, [pc, #280]	@ (800dd94 <_platform_i2cClockInit+0x1e8>)
 800dc7c:	f000 f9dd 	bl	800e03a <cmr_panic>
				__HAL_RCC_I2C2_CLK_ENABLE();
 800dc80:	4b45      	ldr	r3, [pc, #276]	@ (800dd98 <_platform_i2cClockInit+0x1ec>)
 800dc82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dc86:	4a44      	ldr	r2, [pc, #272]	@ (800dd98 <_platform_i2cClockInit+0x1ec>)
 800dc88:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800dc8c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800dc90:	4b41      	ldr	r3, [pc, #260]	@ (800dd98 <_platform_i2cClockInit+0x1ec>)
 800dc92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dc96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dc9a:	61bb      	str	r3, [r7, #24]
 800dc9c:	69bb      	ldr	r3, [r7, #24]
				break;
 800dc9e:	e06b      	b.n	800dd78 <_platform_i2cClockInit+0x1cc>
	        	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800dca0:	f04f 0208 	mov.w	r2, #8
 800dca4:	f04f 0300 	mov.w	r3, #0
 800dca8:	e9c7 2308 	strd	r2, r3, [r7, #32]
				PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C3CLKSOURCE_D2PCLK1;
 800dcac:	2300      	movs	r3, #0
 800dcae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
				if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800dcb2:	f107 0320 	add.w	r3, r7, #32
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f00b f968 	bl	8018f8c <HAL_RCCEx_PeriphCLKConfig>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d002      	beq.n	800dcc8 <_platform_i2cClockInit+0x11c>
				  cmr_panic("i2c clock failed!");
 800dcc2:	4834      	ldr	r0, [pc, #208]	@ (800dd94 <_platform_i2cClockInit+0x1e8>)
 800dcc4:	f000 f9b9 	bl	800e03a <cmr_panic>
				__HAL_RCC_I2C3_CLK_ENABLE();
 800dcc8:	4b33      	ldr	r3, [pc, #204]	@ (800dd98 <_platform_i2cClockInit+0x1ec>)
 800dcca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dcce:	4a32      	ldr	r2, [pc, #200]	@ (800dd98 <_platform_i2cClockInit+0x1ec>)
 800dcd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800dcd4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800dcd8:	4b2f      	ldr	r3, [pc, #188]	@ (800dd98 <_platform_i2cClockInit+0x1ec>)
 800dcda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dcde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dce2:	617b      	str	r3, [r7, #20]
 800dce4:	697b      	ldr	r3, [r7, #20]
	            break;
 800dce6:	e047      	b.n	800dd78 <_platform_i2cClockInit+0x1cc>
	        	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800dce8:	f04f 0210 	mov.w	r2, #16
 800dcec:	f04f 0300 	mov.w	r3, #0
 800dcf0:	e9c7 2308 	strd	r2, r3, [r7, #32]
				PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
				if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800dcfa:	f107 0320 	add.w	r3, r7, #32
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f00b f944 	bl	8018f8c <HAL_RCCEx_PeriphCLKConfig>
 800dd04:	4603      	mov	r3, r0
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d002      	beq.n	800dd10 <_platform_i2cClockInit+0x164>
				  cmr_panic("i2c clock failed!");
 800dd0a:	4822      	ldr	r0, [pc, #136]	@ (800dd94 <_platform_i2cClockInit+0x1e8>)
 800dd0c:	f000 f995 	bl	800e03a <cmr_panic>
				__HAL_RCC_I2C4_CLK_ENABLE();
 800dd10:	4b21      	ldr	r3, [pc, #132]	@ (800dd98 <_platform_i2cClockInit+0x1ec>)
 800dd12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dd16:	4a20      	ldr	r2, [pc, #128]	@ (800dd98 <_platform_i2cClockInit+0x1ec>)
 800dd18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd1c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800dd20:	4b1d      	ldr	r3, [pc, #116]	@ (800dd98 <_platform_i2cClockInit+0x1ec>)
 800dd22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dd26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd2a:	613b      	str	r3, [r7, #16]
 800dd2c:	693b      	ldr	r3, [r7, #16]
				break;
 800dd2e:	e023      	b.n	800dd78 <_platform_i2cClockInit+0x1cc>
				PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 800dd30:	f04f 0208 	mov.w	r2, #8
 800dd34:	f04f 0300 	mov.w	r3, #0
 800dd38:	e9c7 2308 	strd	r2, r3, [r7, #32]
				PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C5CLKSOURCE_D2PCLK1;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
				if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800dd42:	f107 0320 	add.w	r3, r7, #32
 800dd46:	4618      	mov	r0, r3
 800dd48:	f00b f920 	bl	8018f8c <HAL_RCCEx_PeriphCLKConfig>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d002      	beq.n	800dd58 <_platform_i2cClockInit+0x1ac>
				  cmr_panic("i2c clock failed!");
 800dd52:	4810      	ldr	r0, [pc, #64]	@ (800dd94 <_platform_i2cClockInit+0x1e8>)
 800dd54:	f000 f971 	bl	800e03a <cmr_panic>
				__HAL_RCC_I2C5_CLK_ENABLE();
 800dd58:	4b0f      	ldr	r3, [pc, #60]	@ (800dd98 <_platform_i2cClockInit+0x1ec>)
 800dd5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dd5e:	4a0e      	ldr	r2, [pc, #56]	@ (800dd98 <_platform_i2cClockInit+0x1ec>)
 800dd60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800dd64:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800dd68:	4b0b      	ldr	r3, [pc, #44]	@ (800dd98 <_platform_i2cClockInit+0x1ec>)
 800dd6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dd6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dd72:	60fb      	str	r3, [r7, #12]
 800dd74:	68fb      	ldr	r3, [r7, #12]
				break;
 800dd76:	bf00      	nop
}
 800dd78:	bf00      	nop
 800dd7a:	37f0      	adds	r7, #240	@ 0xf0
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	58001c00 	.word	0x58001c00
 800dd84:	40006400 	.word	0x40006400
 800dd88:	40005c00 	.word	0x40005c00
 800dd8c:	40005400 	.word	0x40005400
 800dd90:	40005800 	.word	0x40005800
 800dd94:	080203d8 	.word	0x080203d8
 800dd98:	58024400 	.word	0x58024400

0800dd9c <I2C1_EV_IRQHandler>:
static cmr_i2cDevice_t cmr_i2cDevices[2];

/**
 * @brief I2C interrupt handler.
 */
void I2C1_EV_IRQHandler(void) {
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	af00      	add	r7, sp, #0
    HAL_I2C_EV_IRQHandler(cmr_i2cDevices[0].handle);
 800dda0:	4b03      	ldr	r3, [pc, #12]	@ (800ddb0 <I2C1_EV_IRQHandler+0x14>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4618      	mov	r0, r3
 800dda6:	f008 ff97 	bl	8016cd8 <HAL_I2C_EV_IRQHandler>
}
 800ddaa:	bf00      	nop
 800ddac:	bd80      	pop	{r7, pc}
 800ddae:	bf00      	nop
 800ddb0:	2400e360 	.word	0x2400e360

0800ddb4 <I2C2_EV_IRQHandler>:

/**
 * @brief I2C interrupt handler.
 */
void I2C2_EV_IRQHandler(void) {
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	af00      	add	r7, sp, #0
    HAL_I2C_EV_IRQHandler(cmr_i2cDevices[1].handle);
 800ddb8:	4b03      	ldr	r3, [pc, #12]	@ (800ddc8 <I2C2_EV_IRQHandler+0x14>)
 800ddba:	685b      	ldr	r3, [r3, #4]
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f008 ff8b 	bl	8016cd8 <HAL_I2C_EV_IRQHandler>
}
 800ddc2:	bf00      	nop
 800ddc4:	bd80      	pop	{r7, pc}
 800ddc6:	bf00      	nop
 800ddc8:	2400e360 	.word	0x2400e360

0800ddcc <I2C1_ER_IRQHandler>:
/**
 * @brief I2C interrupt handler.
 */
void I2C1_ER_IRQHandler(void) {
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	af00      	add	r7, sp, #0
    HAL_I2C_ER_IRQHandler(cmr_i2cDevices[0].handle);
 800ddd0:	4b03      	ldr	r3, [pc, #12]	@ (800dde0 <I2C1_ER_IRQHandler+0x14>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f008 ff99 	bl	8016d0c <HAL_I2C_ER_IRQHandler>
}
 800ddda:	bf00      	nop
 800dddc:	bd80      	pop	{r7, pc}
 800ddde:	bf00      	nop
 800dde0:	2400e360 	.word	0x2400e360

0800dde4 <I2C2_ER_IRQHandler>:

/**
 * @brief I2C interrupt handler.
 */
void I2C2_ER_IRQHandler(void) {
 800dde4:	b580      	push	{r7, lr}
 800dde6:	af00      	add	r7, sp, #0
    HAL_I2C_ER_IRQHandler(cmr_i2cDevices[1].handle);
 800dde8:	4b03      	ldr	r3, [pc, #12]	@ (800ddf8 <I2C2_ER_IRQHandler+0x14>)
 800ddea:	685b      	ldr	r3, [r3, #4]
 800ddec:	4618      	mov	r0, r3
 800ddee:	f008 ff8d 	bl	8016d0c <HAL_I2C_ER_IRQHandler>
}
 800ddf2:	bf00      	nop
 800ddf4:	bd80      	pop	{r7, pc}
 800ddf6:	bf00      	nop
 800ddf8:	2400e360 	.word	0x2400e360

0800ddfc <cmr_i2cDoneCallback>:
 *
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL I2C handle.
 */
static void cmr_i2cDoneCallback(I2C_HandleTypeDef *handle, uint32_t error) {
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b086      	sub	sp, #24
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
 800de04:	6039      	str	r1, [r7, #0]
    char *addr = (void *) handle;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	617b      	str	r3, [r7, #20]
    cmr_i2c_t *i2c = (void *) (addr - offsetof(cmr_i2c_t, handle));
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	613b      	str	r3, [r7, #16]

    i2c->error = error;
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	683a      	ldr	r2, [r7, #0]
 800de12:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0

    // Indicate completion.
    BaseType_t higherWoken;
    if (xSemaphoreGiveFromISR(i2c->doneSem, &higherWoken) != pdTRUE) {
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800de1c:	f107 020c 	add.w	r2, r7, #12
 800de20:	4611      	mov	r1, r2
 800de22:	4618      	mov	r0, r3
 800de24:	f001 fdf0 	bl	800fa08 <xQueueGiveFromISR>
 800de28:	4603      	mov	r3, r0
 800de2a:	2b01      	cmp	r3, #1
 800de2c:	d002      	beq.n	800de34 <cmr_i2cDoneCallback+0x38>
        cmr_panic("I2C done semaphore released more than once!");
 800de2e:	4809      	ldr	r0, [pc, #36]	@ (800de54 <cmr_i2cDoneCallback+0x58>)
 800de30:	f000 f903 	bl	800e03a <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d007      	beq.n	800de4a <cmr_i2cDoneCallback+0x4e>
 800de3a:	4b07      	ldr	r3, [pc, #28]	@ (800de58 <cmr_i2cDoneCallback+0x5c>)
 800de3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de40:	601a      	str	r2, [r3, #0]
 800de42:	f3bf 8f4f 	dsb	sy
 800de46:	f3bf 8f6f 	isb	sy
}
 800de4a:	bf00      	nop
 800de4c:	3718      	adds	r7, #24
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop
 800de54:	080203ec 	.word	0x080203ec
 800de58:	e000ed04 	.word	0xe000ed04

0800de5c <HAL_I2C_ErrorCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *handle) {
    cmr_i2cDoneCallback(handle, 0);
}

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *handle) {
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
	cmr_i2cDoneCallback(handle, HAL_I2C_GetError(handle));
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f008 ffe2 	bl	8016e2e <HAL_I2C_GetError>
 800de6a:	4603      	mov	r3, r0
 800de6c:	4619      	mov	r1, r3
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f7ff ffc4 	bl	800ddfc <cmr_i2cDoneCallback>
}
 800de74:	bf00      	nop
 800de76:	3708      	adds	r7, #8
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <i2cGPIOAF>:
 * @param instance The I2C instance.
 * @param port The GPIO port.
 * @param pin The GPIO pin.
 * @return The AF for the given I2C instance and GPIO port.
 */
uint32_t i2cGPIOAF(I2C_TypeDef *instance, GPIO_TypeDef *port, uint32_t pin) {
 800de7c:	b480      	push	{r7}
 800de7e:	b085      	sub	sp, #20
 800de80:	af00      	add	r7, sp, #0
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	607a      	str	r2, [r7, #4]
	#endif /* F413 */
//    else {
//    	cmr_panic("Invalid I2C instance!");
//    }
	//TODO: REMOVE THIS
	return GPIO_AF4_I2C4;
 800de88:	2304      	movs	r3, #4
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3714      	adds	r7, #20
 800de8e:	46bd      	mov	sp, r7
 800de90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de94:	4770      	bx	lr

0800de96 <cmr_i2cTX>:
  * @param timeout_ms Amount of time to wait in milliseconds.
  *
  * @retval 0 upon success, or otherwise a negative error code
  */
int cmr_i2cTX(cmr_i2c_t *i2c, uint16_t devAddr, uint8_t *data,
              size_t dataLength, uint32_t timeout_ms) {
 800de96:	b580      	push	{r7, lr}
 800de98:	b088      	sub	sp, #32
 800de9a:	af02      	add	r7, sp, #8
 800de9c:	60f8      	str	r0, [r7, #12]
 800de9e:	607a      	str	r2, [r7, #4]
 800dea0:	603b      	str	r3, [r7, #0]
 800dea2:	460b      	mov	r3, r1
 800dea4:	817b      	strh	r3, [r7, #10]
    // Shift the address by 1 per HAL library suggestion
    HAL_StatusTypeDef txStatus = HAL_I2C_Master_Transmit(
 800dea6:	68f8      	ldr	r0, [r7, #12]
 800dea8:	897b      	ldrh	r3, [r7, #10]
 800deaa:	005b      	lsls	r3, r3, #1
 800deac:	b299      	uxth	r1, r3
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	b29a      	uxth	r2, r3
 800deb2:	6a3b      	ldr	r3, [r7, #32]
 800deb4:	9300      	str	r3, [sp, #0]
 800deb6:	4613      	mov	r3, r2
 800deb8:	687a      	ldr	r2, [r7, #4]
 800deba:	f008 fcff 	bl	80168bc <HAL_I2C_Master_Transmit>
 800debe:	4603      	mov	r3, r0
 800dec0:	75fb      	strb	r3, [r7, #23]
        &(i2c->handle), devAddr << 1, data, dataLength, timeout_ms
    );

    if (txStatus != HAL_OK) {
 800dec2:	7dfb      	ldrb	r3, [r7, #23]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d001      	beq.n	800decc <cmr_i2cTX+0x36>
    //HAL_ERROR    = 0x01U,
    //HAL_BUSY     = 0x02U,
    //HAL_TIMEOUT  = 0x03U
        return txStatus;
 800dec8:	7dfb      	ldrb	r3, [r7, #23]
 800deca:	e000      	b.n	800dece <cmr_i2cTX+0x38>
    }

    return 0;
 800decc:	2300      	movs	r3, #0
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3718      	adds	r7, #24
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}

0800ded6 <cmr_i2cMemRX>:
  * @param timeout_ms Amount of time to wait in milliseconds.
  *
  * @retval 0 upon success, or otherwise a negative error code
  */
int cmr_i2cMemRX(cmr_i2c_t *i2c, uint16_t devAddr, uint16_t memaddress, uint8_t memsize, uint8_t *data,
              size_t dataLength, uint32_t timeout_ms) {
 800ded6:	b5b0      	push	{r4, r5, r7, lr}
 800ded8:	b08a      	sub	sp, #40	@ 0x28
 800deda:	af04      	add	r7, sp, #16
 800dedc:	60f8      	str	r0, [r7, #12]
 800dede:	4608      	mov	r0, r1
 800dee0:	4611      	mov	r1, r2
 800dee2:	461a      	mov	r2, r3
 800dee4:	4603      	mov	r3, r0
 800dee6:	817b      	strh	r3, [r7, #10]
 800dee8:	460b      	mov	r3, r1
 800deea:	813b      	strh	r3, [r7, #8]
 800deec:	4613      	mov	r3, r2
 800deee:	71fb      	strb	r3, [r7, #7]
    // Shift the address by 1 per HAL library suggestion
    HAL_StatusTypeDef rxStatus = HAL_I2C_Mem_Read(
 800def0:	68f8      	ldr	r0, [r7, #12]
 800def2:	897b      	ldrh	r3, [r7, #10]
 800def4:	005b      	lsls	r3, r3, #1
 800def6:	b299      	uxth	r1, r3
 800def8:	79fb      	ldrb	r3, [r7, #7]
 800defa:	b29d      	uxth	r5, r3
 800defc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800defe:	b29b      	uxth	r3, r3
 800df00:	893c      	ldrh	r4, [r7, #8]
 800df02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df04:	9202      	str	r2, [sp, #8]
 800df06:	9301      	str	r3, [sp, #4]
 800df08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df0a:	9300      	str	r3, [sp, #0]
 800df0c:	462b      	mov	r3, r5
 800df0e:	4622      	mov	r2, r4
 800df10:	f008 fdc8 	bl	8016aa4 <HAL_I2C_Mem_Read>
 800df14:	4603      	mov	r3, r0
 800df16:	75fb      	strb	r3, [r7, #23]
        &(i2c->handle), devAddr << 1, memaddress, memsize, data, dataLength, timeout_ms
    );


    if (rxStatus != HAL_OK) {
 800df18:	7dfb      	ldrb	r3, [r7, #23]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d002      	beq.n	800df24 <cmr_i2cMemRX+0x4e>
        return -1;
 800df1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800df22:	e000      	b.n	800df26 <cmr_i2cMemRX+0x50>
    }

    return 0;
 800df24:	2300      	movs	r3, #0
}
 800df26:	4618      	mov	r0, r3
 800df28:	3718      	adds	r7, #24
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800df30 <cmr_i2cInit>:
void cmr_i2cInit(
    cmr_i2c_t *i2c, I2C_TypeDef *instance,
    uint32_t clockSpeed, uint32_t ownAddr,
    GPIO_TypeDef *i2cClkPort, uint32_t i2cClkPin,
    GPIO_TypeDef *i2cDataPort, uint32_t i2cDataPin
) {
 800df30:	b580      	push	{r7, lr}
 800df32:	b08a      	sub	sp, #40	@ 0x28
 800df34:	af00      	add	r7, sp, #0
 800df36:	60f8      	str	r0, [r7, #12]
 800df38:	60b9      	str	r1, [r7, #8]
 800df3a:	607a      	str	r2, [r7, #4]
 800df3c:	603b      	str	r3, [r7, #0]
    _platform_i2cInit(i2c, instance, clockSpeed, ownAddr);
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	687a      	ldr	r2, [r7, #4]
 800df42:	68b9      	ldr	r1, [r7, #8]
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	f7ff fded 	bl	800db24 <_platform_i2cInit>

    cmr_rccI2CClockEnable(instance);
 800df4a:	68b8      	ldr	r0, [r7, #8]
 800df4c:	f000 fa93 	bl	800e476 <cmr_rccI2CClockEnable>
    cmr_rccGPIOClockEnable(i2cClkPort);
 800df50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800df52:	f000 fa6f 	bl	800e434 <cmr_rccGPIOClockEnable>
    cmr_rccGPIOClockEnable(i2cDataPort);
 800df56:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800df58:	f000 fa6c 	bl	800e434 <cmr_rccGPIOClockEnable>

    if (HAL_I2C_Init(&(i2c->handle)) != HAL_OK) {
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	4618      	mov	r0, r3
 800df60:	f008 fc12 	bl	8016788 <HAL_I2C_Init>
 800df64:	4603      	mov	r3, r0
 800df66:	2b00      	cmp	r3, #0
 800df68:	d002      	beq.n	800df70 <cmr_i2cInit+0x40>
        cmr_panic("HAL_I2C_Init() failed!");
 800df6a:	4820      	ldr	r0, [pc, #128]	@ (800dfec <cmr_i2cInit+0xbc>)
 800df6c:	f000 f865 	bl	800e03a <cmr_panic>
    }

    if (HAL_I2CEx_ConfigAnalogFilter(&(i2c->handle), I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	2100      	movs	r1, #0
 800df74:	4618      	mov	r0, r3
 800df76:	f009 ff7f 	bl	8017e78 <HAL_I2CEx_ConfigAnalogFilter>
 800df7a:	4603      	mov	r3, r0
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d002      	beq.n	800df86 <cmr_i2cInit+0x56>
	  {
		cmr_panic("bruh");
 800df80:	481b      	ldr	r0, [pc, #108]	@ (800dff0 <cmr_i2cInit+0xc0>)
 800df82:	f000 f85a 	bl	800e03a <cmr_panic>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&(i2c->handle), 0) != HAL_OK)
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	2100      	movs	r1, #0
 800df8a:	4618      	mov	r0, r3
 800df8c:	f009 ffbf 	bl	8017f0e <HAL_I2CEx_ConfigDigitalFilter>
 800df90:	4603      	mov	r3, r0
 800df92:	2b00      	cmp	r3, #0
 800df94:	d002      	beq.n	800df9c <cmr_i2cInit+0x6c>
	  {
		  cmr_panic("bruh");
 800df96:	4816      	ldr	r0, [pc, #88]	@ (800dff0 <cmr_i2cInit+0xc0>)
 800df98:	f000 f84f 	bl	800e03a <cmr_panic>
	  }

    // TODO: Init GPIO with CMR drivers instead of HAL
    GPIO_InitTypeDef pinConfig = {
 800df9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df9e:	617b      	str	r3, [r7, #20]
 800dfa0:	2312      	movs	r3, #18
 800dfa2:	61bb      	str	r3, [r7, #24]
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	61fb      	str	r3, [r7, #28]
 800dfa8:	2303      	movs	r3, #3
 800dfaa:	623b      	str	r3, [r7, #32]
        .Pin = i2cClkPin,
        .Mode = GPIO_MODE_AF_OD,
        .Pull = GPIO_PULLUP,
        .Speed = GPIO_SPEED_FREQ_VERY_HIGH,
        .Alternate = i2cGPIOAF(instance, i2cClkPort, i2cClkPin)
 800dfac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dfae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dfb0:	68b8      	ldr	r0, [r7, #8]
 800dfb2:	f7ff ff63 	bl	800de7c <i2cGPIOAF>
 800dfb6:	4603      	mov	r3, r0
    GPIO_InitTypeDef pinConfig = {
 800dfb8:	627b      	str	r3, [r7, #36]	@ 0x24
    };

    HAL_GPIO_Init(i2cClkPort, &pinConfig);
 800dfba:	f107 0314 	add.w	r3, r7, #20
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dfc2:	f008 f9e1 	bl	8016388 <HAL_GPIO_Init>
    pinConfig.Pin = i2cDataPin;
 800dfc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfc8:	617b      	str	r3, [r7, #20]
    pinConfig.Alternate = i2cGPIOAF(instance, i2cDataPort, i2cDataPin);
 800dfca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dfcc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dfce:	68b8      	ldr	r0, [r7, #8]
 800dfd0:	f7ff ff54 	bl	800de7c <i2cGPIOAF>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(i2cDataPort, &pinConfig);
 800dfd8:	f107 0314 	add.w	r3, r7, #20
 800dfdc:	4619      	mov	r1, r3
 800dfde:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dfe0:	f008 f9d2 	bl	8016388 <HAL_GPIO_Init>
}
 800dfe4:	bf00      	nop
 800dfe6:	3728      	adds	r7, #40	@ 0x28
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}
 800dfec:	08020418 	.word	0x08020418
 800dff0:	08020430 	.word	0x08020430

0800dff4 <SysTick_Handler>:
extern void xPortSysTickHandler(void);

/**
 * @brief System tick interrupt handler.
 */
void SysTick_Handler(void) {
 800dff4:	b580      	push	{r7, lr}
 800dff6:	af00      	add	r7, sp, #0
    HAL_IncTick();  // Report tick to HAL.
 800dff8:	f003 f968 	bl	80112cc <HAL_IncTick>

    if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED) {
 800dffc:	f002 fd9e 	bl	8010b3c <xTaskGetSchedulerState>
 800e000:	4603      	mov	r3, r0
 800e002:	2b01      	cmp	r3, #1
 800e004:	d002      	beq.n	800e00c <SysTick_Handler+0x18>
        return;
    }

    xPortSysTickHandler();  // Invoke FreeRTOS tick handler.
 800e006:	f003 f8a7 	bl	8011158 <xPortSysTickHandler>
 800e00a:	e000      	b.n	800e00e <SysTick_Handler+0x1a>
        return;
 800e00c:	bf00      	nop
}
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <NMI_Handler>:

/**
 * @brief Non-maskable interrupt handler.
 */
void NMI_Handler(void) {
 800e010:	b480      	push	{r7}
 800e012:	af00      	add	r7, sp, #0
    // Nothing to do.
}
 800e014:	bf00      	nop
 800e016:	46bd      	mov	sp, r7
 800e018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01c:	4770      	bx	lr

0800e01e <DebugMon_Handler>:

/**
 * @brief Debug monitor exception handler.
 */
void DebugMon_Handler(void) {
 800e01e:	b480      	push	{r7}
 800e020:	af00      	add	r7, sp, #0
    // Nothing to do.
}
 800e022:	bf00      	nop
 800e024:	46bd      	mov	sp, r7
 800e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02a:	4770      	bx	lr

0800e02c <cmr_panicSetup>:
 * @brief Default pre-panic setup implementation.
 *
 * Nothing happens by default; this should be overridden if custom behavior is
 * desired.
 */
void cmr_panicSetup(void) {
 800e02c:	b480      	push	{r7}
 800e02e:	af00      	add	r7, sp, #0
    // Nothing to do.
}
 800e030:	bf00      	nop
 800e032:	46bd      	mov	sp, r7
 800e034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e038:	4770      	bx	lr

0800e03a <cmr_panic>:
 * @param fmt The formatting string.
 * @param ... Additional arguments for formatting.
 *
 * @return Does not return.
 */
void cmr_panic(const char *fmt, ...) {
 800e03a:	b40f      	push	{r0, r1, r2, r3}
 800e03c:	b580      	push	{r7, lr}
 800e03e:	af00      	add	r7, sp, #0
    (void) fmt;

    cmr_panicSetup();
 800e040:	f7ff fff4 	bl	800e02c <cmr_panicSetup>

    while (1) {
        continue;
 800e044:	bf00      	nop
    while (1) {
 800e046:	e7fd      	b.n	800e044 <cmr_panic+0xa>

0800e048 <cmr_timerToAltFunc>:
#ifdef HAL_TIM_MODULE_ENABLED

#include <FreeRTOS.h>
#include "rcc.h"

static uint32_t cmr_timerToAltFunc(TIM_TypeDef *timer) {
 800e048:	b480      	push	{r7}
 800e04a:	b083      	sub	sp, #12
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
		case TIM16_BASE:
			return GPIO_AF14_TIM16;
#endif
    }

    return (uint32_t) -1;
 800e050:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800e054:	4618      	mov	r0, r3
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr

0800e060 <cmr_pwmInit>:
 *
 * @param pwmChannel A PWM channel struct to use.
 * @param pwmPinConfig The pin to initialize.
 */
void cmr_pwmInit(cmr_pwm_t *pwmChannel,
                 const cmr_pwmPinConfig_t *pwmPinConfig) {
 800e060:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e062:	b0b9      	sub	sp, #228	@ 0xe4
 800e064:	af00      	add	r7, sp, #0
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]

    configASSERT(pwmPinConfig != NULL);
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d103      	bne.n	800e078 <cmr_pwmInit+0x18>
 800e070:	2143      	movs	r1, #67	@ 0x43
 800e072:	489c      	ldr	r0, [pc, #624]	@ (800e2e4 <cmr_pwmInit+0x284>)
 800e074:	f7ff ffe1 	bl	800e03a <cmr_panic>
    configASSERT(pwmPinConfig->timer != NULL);
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	695b      	ldr	r3, [r3, #20]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d103      	bne.n	800e088 <cmr_pwmInit+0x28>
 800e080:	2144      	movs	r1, #68	@ 0x44
 800e082:	4899      	ldr	r0, [pc, #612]	@ (800e2e8 <cmr_pwmInit+0x288>)
 800e084:	f7ff ffd9 	bl	800e03a <cmr_panic>

    configASSERT(pwmPinConfig->presc > 0 && pwmPinConfig->presc <= UINT16_MAX + 1);
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	68db      	ldr	r3, [r3, #12]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d004      	beq.n	800e09a <cmr_pwmInit+0x3a>
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	68db      	ldr	r3, [r3, #12]
 800e094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e098:	d903      	bls.n	800e0a2 <cmr_pwmInit+0x42>
 800e09a:	2146      	movs	r1, #70	@ 0x46
 800e09c:	4893      	ldr	r0, [pc, #588]	@ (800e2ec <cmr_pwmInit+0x28c>)
 800e09e:	f7ff ffcc 	bl	800e03a <cmr_panic>
    configASSERT(pwmPinConfig->period_ticks > 0 && pwmPinConfig->period_ticks <= UINT16_MAX + 1);
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	691b      	ldr	r3, [r3, #16]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d004      	beq.n	800e0b4 <cmr_pwmInit+0x54>
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	691b      	ldr	r3, [r3, #16]
 800e0ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e0b2:	d903      	bls.n	800e0bc <cmr_pwmInit+0x5c>
 800e0b4:	2147      	movs	r1, #71	@ 0x47
 800e0b6:	488e      	ldr	r0, [pc, #568]	@ (800e2f0 <cmr_pwmInit+0x290>)
 800e0b8:	f7ff ffbf 	bl	800e03a <cmr_panic>

    cmr_rccGPIOClockEnable(pwmPinConfig->port);
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f000 f9b7 	bl	800e434 <cmr_rccGPIOClockEnable>

    *pwmChannel = (cmr_pwm_t) {
        .handle = {
            .Instance = pwmPinConfig->timer,
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	695b      	ldr	r3, [r3, #20]
 800e0ca:	607b      	str	r3, [r7, #4]
            .Init = {
                .Prescaler = pwmPinConfig->presc - 1,
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	68db      	ldr	r3, [r3, #12]
 800e0d0:	1e5e      	subs	r6, r3, #1
                .CounterMode = TIM_COUNTERMODE_UP,
                .Period = pwmPinConfig->period_ticks - 1,
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	691b      	ldr	r3, [r3, #16]
 800e0d6:	1e5d      	subs	r5, r3, #1
                .ClockDivision = TIM_CLOCKDIVISION_DIV1,
                .RepetitionCounter = 0,
                .AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE
            }
        },
        .channel = pwmPinConfig->channel
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	689c      	ldr	r4, [r3, #8]
    *pwmChannel = (cmr_pwm_t) {
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	4618      	mov	r0, r3
 800e0e0:	2350      	movs	r3, #80	@ 0x50
 800e0e2:	461a      	mov	r2, r3
 800e0e4:	2100      	movs	r1, #0
 800e0e6:	f010 fa3f 	bl	801e568 <memset>
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	601a      	str	r2, [r3, #0]
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	605e      	str	r6, [r3, #4]
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	60dd      	str	r5, [r3, #12]
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	2280      	movs	r2, #128	@ 0x80
 800e0fc:	619a      	str	r2, [r3, #24]
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	64dc      	str	r4, [r3, #76]	@ 0x4c
    };

    cmr_rccTIMClockEnable(pwmPinConfig->timer);
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	695b      	ldr	r3, [r3, #20]
 800e106:	4618      	mov	r0, r3
 800e108:	f000 fa5c 	bl	800e5c4 <cmr_rccTIMClockEnable>

    if (HAL_TIM_Base_Init(&pwmChannel->handle) != HAL_OK) {
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	4618      	mov	r0, r3
 800e110:	f00d fd0b 	bl	801bb2a <HAL_TIM_Base_Init>
 800e114:	4603      	mov	r3, r0
 800e116:	2b00      	cmp	r3, #0
 800e118:	d002      	beq.n	800e120 <cmr_pwmInit+0xc0>
        cmr_panic("pwmInit HAL_TIM_Base_Init failed!");
 800e11a:	4876      	ldr	r0, [pc, #472]	@ (800e2f4 <cmr_pwmInit+0x294>)
 800e11c:	f7ff ff8d 	bl	800e03a <cmr_panic>
        return;
    }

    TIM_ClockConfigTypeDef clockSrcConfig = {
 800e120:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800e124:	2200      	movs	r2, #0
 800e126:	601a      	str	r2, [r3, #0]
 800e128:	605a      	str	r2, [r3, #4]
 800e12a:	609a      	str	r2, [r3, #8]
 800e12c:	60da      	str	r2, [r3, #12]
 800e12e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e132:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        .ClockSource = TIM_CLOCKSOURCE_INTERNAL
    };
    if (HAL_TIM_ConfigClockSource(&pwmChannel->handle, &clockSrcConfig) != HAL_OK) {
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800e13c:	4611      	mov	r1, r2
 800e13e:	4618      	mov	r0, r3
 800e140:	f00e fa22 	bl	801c588 <HAL_TIM_ConfigClockSource>
 800e144:	4603      	mov	r3, r0
 800e146:	2b00      	cmp	r3, #0
 800e148:	d002      	beq.n	800e150 <cmr_pwmInit+0xf0>
        cmr_panic("pwmInit HAL_TIM_ConfigClockSource failed!");
 800e14a:	486b      	ldr	r0, [pc, #428]	@ (800e2f8 <cmr_pwmInit+0x298>)
 800e14c:	f7ff ff75 	bl	800e03a <cmr_panic>
        return;
    }

    if (HAL_TIM_PWM_Init(&pwmChannel->handle) != HAL_OK) {
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	4618      	mov	r0, r3
 800e154:	f00d fdd0 	bl	801bcf8 <HAL_TIM_PWM_Init>
 800e158:	4603      	mov	r3, r0
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d002      	beq.n	800e164 <cmr_pwmInit+0x104>
        cmr_panic("pwmInit HAL_TIM_PWM_Init failed!");
 800e15e:	4867      	ldr	r0, [pc, #412]	@ (800e2fc <cmr_pwmInit+0x29c>)
 800e160:	f7ff ff6b 	bl	800e03a <cmr_panic>
        return;
    }

    // Disable fancy master/slave stuff if applicable since we won't use it.
    // Based on Cube-generated code.
    if (IS_TIM_MASTER_INSTANCE(pwmPinConfig->timer)) {
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	695b      	ldr	r3, [r3, #20]
 800e168:	4a65      	ldr	r2, [pc, #404]	@ (800e300 <cmr_pwmInit+0x2a0>)
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d036      	beq.n	800e1dc <cmr_pwmInit+0x17c>
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	695b      	ldr	r3, [r3, #20]
 800e172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e176:	d031      	beq.n	800e1dc <cmr_pwmInit+0x17c>
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	695b      	ldr	r3, [r3, #20]
 800e17c:	4a61      	ldr	r2, [pc, #388]	@ (800e304 <cmr_pwmInit+0x2a4>)
 800e17e:	4293      	cmp	r3, r2
 800e180:	d02c      	beq.n	800e1dc <cmr_pwmInit+0x17c>
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	695b      	ldr	r3, [r3, #20]
 800e186:	4a60      	ldr	r2, [pc, #384]	@ (800e308 <cmr_pwmInit+0x2a8>)
 800e188:	4293      	cmp	r3, r2
 800e18a:	d027      	beq.n	800e1dc <cmr_pwmInit+0x17c>
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	695b      	ldr	r3, [r3, #20]
 800e190:	4a5e      	ldr	r2, [pc, #376]	@ (800e30c <cmr_pwmInit+0x2ac>)
 800e192:	4293      	cmp	r3, r2
 800e194:	d022      	beq.n	800e1dc <cmr_pwmInit+0x17c>
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	695b      	ldr	r3, [r3, #20]
 800e19a:	4a5d      	ldr	r2, [pc, #372]	@ (800e310 <cmr_pwmInit+0x2b0>)
 800e19c:	4293      	cmp	r3, r2
 800e19e:	d01d      	beq.n	800e1dc <cmr_pwmInit+0x17c>
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	695b      	ldr	r3, [r3, #20]
 800e1a4:	4a5b      	ldr	r2, [pc, #364]	@ (800e314 <cmr_pwmInit+0x2b4>)
 800e1a6:	4293      	cmp	r3, r2
 800e1a8:	d018      	beq.n	800e1dc <cmr_pwmInit+0x17c>
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	695b      	ldr	r3, [r3, #20]
 800e1ae:	4a5a      	ldr	r2, [pc, #360]	@ (800e318 <cmr_pwmInit+0x2b8>)
 800e1b0:	4293      	cmp	r3, r2
 800e1b2:	d013      	beq.n	800e1dc <cmr_pwmInit+0x17c>
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	695b      	ldr	r3, [r3, #20]
 800e1b8:	4a58      	ldr	r2, [pc, #352]	@ (800e31c <cmr_pwmInit+0x2bc>)
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d00e      	beq.n	800e1dc <cmr_pwmInit+0x17c>
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	695b      	ldr	r3, [r3, #20]
 800e1c2:	4a57      	ldr	r2, [pc, #348]	@ (800e320 <cmr_pwmInit+0x2c0>)
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d009      	beq.n	800e1dc <cmr_pwmInit+0x17c>
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	695b      	ldr	r3, [r3, #20]
 800e1cc:	4a55      	ldr	r2, [pc, #340]	@ (800e324 <cmr_pwmInit+0x2c4>)
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	d004      	beq.n	800e1dc <cmr_pwmInit+0x17c>
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	695b      	ldr	r3, [r3, #20]
 800e1d6:	4a54      	ldr	r2, [pc, #336]	@ (800e328 <cmr_pwmInit+0x2c8>)
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	d112      	bne.n	800e202 <cmr_pwmInit+0x1a2>
        TIM_MasterConfigTypeDef masterConfig = {
 800e1dc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	601a      	str	r2, [r3, #0]
 800e1e4:	605a      	str	r2, [r3, #4]
 800e1e6:	609a      	str	r2, [r3, #8]
            .MasterOutputTrigger = TIM_TRGO_RESET,
            .MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE
        };

        if (HAL_TIMEx_MasterConfigSynchronization(&pwmChannel->handle, &masterConfig) != HAL_OK) {
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800e1ee:	4611      	mov	r1, r2
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f00e ff29 	bl	801d048 <HAL_TIMEx_MasterConfigSynchronization>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d002      	beq.n	800e202 <cmr_pwmInit+0x1a2>
            cmr_panic("pwmInit HAL_TIMEx_MasterConfigSynchronization failed!");
 800e1fc:	484b      	ldr	r0, [pc, #300]	@ (800e32c <cmr_pwmInit+0x2cc>)
 800e1fe:	f7ff ff1c 	bl	800e03a <cmr_panic>
    }

    // Begin with 0% duty cycle
    // Do not use cmr_pwmSetDutyCycle() because that would prematurely call
    // HAL_TIM_PWM_Start()
    TIM_OC_InitTypeDef outputCompareConfig = {
 800e202:	4b4b      	ldr	r3, [pc, #300]	@ (800e330 <cmr_pwmInit+0x2d0>)
 800e204:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 800e208:	461d      	mov	r5, r3
 800e20a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e20c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e20e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e212:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        .OCFastMode = TIM_OCFAST_DISABLE,
        .OCIdleState = TIM_OCIDLESTATE_RESET,
        .OCNIdleState = TIM_OCNIDLESTATE_RESET
    };

    if (HAL_TIM_PWM_ConfigChannel(&pwmChannel->handle, &outputCompareConfig, pwmChannel->channel) != HAL_OK) {
 800e216:	68f8      	ldr	r0, [r7, #12]
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e21c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800e220:	4619      	mov	r1, r3
 800e222:	f00e f89d 	bl	801c360 <HAL_TIM_PWM_ConfigChannel>
 800e226:	4603      	mov	r3, r0
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d002      	beq.n	800e232 <cmr_pwmInit+0x1d2>
        cmr_panic("pwmInit cmr_pwmSetDutyCycle failed!");
 800e22c:	4841      	ldr	r0, [pc, #260]	@ (800e334 <cmr_pwmInit+0x2d4>)
 800e22e:	f7ff ff04 	bl	800e03a <cmr_panic>
    }

    // Disable fancy break/dead time stuff if applicable since we won't use it.
    // Based on Cube-generated code.
    if (IS_TIM_BREAK_INSTANCE(pwmPinConfig->timer)) {
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	695b      	ldr	r3, [r3, #20]
 800e236:	4a32      	ldr	r2, [pc, #200]	@ (800e300 <cmr_pwmInit+0x2a0>)
 800e238:	4293      	cmp	r3, r2
 800e23a:	d013      	beq.n	800e264 <cmr_pwmInit+0x204>
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	695b      	ldr	r3, [r3, #20]
 800e240:	4a35      	ldr	r2, [pc, #212]	@ (800e318 <cmr_pwmInit+0x2b8>)
 800e242:	4293      	cmp	r3, r2
 800e244:	d00e      	beq.n	800e264 <cmr_pwmInit+0x204>
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	695b      	ldr	r3, [r3, #20]
 800e24a:	4a35      	ldr	r2, [pc, #212]	@ (800e320 <cmr_pwmInit+0x2c0>)
 800e24c:	4293      	cmp	r3, r2
 800e24e:	d009      	beq.n	800e264 <cmr_pwmInit+0x204>
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	695b      	ldr	r3, [r3, #20]
 800e254:	4a38      	ldr	r2, [pc, #224]	@ (800e338 <cmr_pwmInit+0x2d8>)
 800e256:	4293      	cmp	r3, r2
 800e258:	d004      	beq.n	800e264 <cmr_pwmInit+0x204>
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	695b      	ldr	r3, [r3, #20]
 800e25e:	4a37      	ldr	r2, [pc, #220]	@ (800e33c <cmr_pwmInit+0x2dc>)
 800e260:	4293      	cmp	r3, r2
 800e262:	d116      	bne.n	800e292 <cmr_pwmInit+0x232>
        TIM_BreakDeadTimeConfigTypeDef breakDeadConfig = {
 800e264:	f107 0310 	add.w	r3, r7, #16
 800e268:	2234      	movs	r2, #52	@ 0x34
 800e26a:	2100      	movs	r1, #0
 800e26c:	4618      	mov	r0, r3
 800e26e:	f010 f97b 	bl	801e568 <memset>
 800e272:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e276:	627b      	str	r3, [r7, #36]	@ 0x24
            .BreakState = TIM_BREAK_DISABLE,
            .BreakPolarity = TIM_BREAKPOLARITY_HIGH,
            .AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE
        };

        if (HAL_TIMEx_ConfigBreakDeadTime(&pwmChannel->handle, &breakDeadConfig) != HAL_OK) {
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f107 0210 	add.w	r2, r7, #16
 800e27e:	4611      	mov	r1, r2
 800e280:	4618      	mov	r0, r3
 800e282:	f00e ff7d 	bl	801d180 <HAL_TIMEx_ConfigBreakDeadTime>
 800e286:	4603      	mov	r3, r0
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d002      	beq.n	800e292 <cmr_pwmInit+0x232>
            cmr_panic("pwmInit HAL_TIMEx_ConfigBreakDeadTime failed!");
 800e28c:	482c      	ldr	r0, [pc, #176]	@ (800e340 <cmr_pwmInit+0x2e0>)
 800e28e:	f7ff fed4 	bl	800e03a <cmr_panic>
            return;
        }
    }

    GPIO_InitTypeDef pinConfig = {
        .Pin = pwmPinConfig->pin,
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	889b      	ldrh	r3, [r3, #4]
    GPIO_InitTypeDef pinConfig = {
 800e296:	653b      	str	r3, [r7, #80]	@ 0x50
 800e298:	2302      	movs	r3, #2
 800e29a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e29c:	2300      	movs	r3, #0
 800e29e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e2a0:	2303      	movs	r3, #3
 800e2a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        .Mode = GPIO_MODE_AF_PP,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_VERY_HIGH,
        .Alternate = cmr_timerToAltFunc(pwmPinConfig->timer)
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	695b      	ldr	r3, [r3, #20]
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f7ff fecd 	bl	800e048 <cmr_timerToAltFunc>
 800e2ae:	4603      	mov	r3, r0
    GPIO_InitTypeDef pinConfig = {
 800e2b0:	663b      	str	r3, [r7, #96]	@ 0x60
    };
    HAL_GPIO_Init(pwmPinConfig->port, &pinConfig);
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800e2ba:	4611      	mov	r1, r2
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f008 f863 	bl	8016388 <HAL_GPIO_Init>

    if (HAL_TIM_PWM_Start(&pwmChannel->handle, pwmChannel->channel) != HAL_OK) {
 800e2c2:	68fa      	ldr	r2, [r7, #12]
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	4610      	mov	r0, r2
 800e2cc:	f00d fd76 	bl	801bdbc <HAL_TIM_PWM_Start>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d002      	beq.n	800e2dc <cmr_pwmInit+0x27c>
        cmr_panic("pwmInit HAL_TIM_PWM_Start failed!");
 800e2d6:	481b      	ldr	r0, [pc, #108]	@ (800e344 <cmr_pwmInit+0x2e4>)
 800e2d8:	f7ff feaf 	bl	800e03a <cmr_panic>
    }
}
 800e2dc:	37e4      	adds	r7, #228	@ 0xe4
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	08020438 	.word	0x08020438
 800e2e8:	08020484 	.word	0x08020484
 800e2ec:	080204d8 	.word	0x080204d8
 800e2f0:	08020550 	.word	0x08020550
 800e2f4:	080205d4 	.word	0x080205d4
 800e2f8:	080205f8 	.word	0x080205f8
 800e2fc:	08020624 	.word	0x08020624
 800e300:	40010000 	.word	0x40010000
 800e304:	40000400 	.word	0x40000400
 800e308:	40000800 	.word	0x40000800
 800e30c:	40000c00 	.word	0x40000c00
 800e310:	40001000 	.word	0x40001000
 800e314:	40001400 	.word	0x40001400
 800e318:	40010400 	.word	0x40010400
 800e31c:	40001800 	.word	0x40001800
 800e320:	40014000 	.word	0x40014000
 800e324:	4000e000 	.word	0x4000e000
 800e328:	4000e400 	.word	0x4000e400
 800e32c:	08020648 	.word	0x08020648
 800e330:	080206f8 	.word	0x080206f8
 800e334:	08020680 	.word	0x08020680
 800e338:	40014400 	.word	0x40014400
 800e33c:	40014800 	.word	0x40014800
 800e340:	080206a4 	.word	0x080206a4
 800e344:	080206d4 	.word	0x080206d4

0800e348 <cmr_pwmSetDutyCycle>:
 * @brief Sets the duty cycle of a PWM channel.
 *
 * @param pwmChannel The PWM channel to set the duty cycle of.
 * @param dutyCycle_pcnt The duty cycle, in percent no greater than 100, to set pwmChannel to.
 */
void cmr_pwmSetDutyCycle(cmr_pwm_t *pwmChannel, uint32_t dutyCycle_pcnt) {
 800e348:	b580      	push	{r7, lr}
 800e34a:	b084      	sub	sp, #16
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	6039      	str	r1, [r7, #0]
    configASSERT(pwmChannel != NULL);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d103      	bne.n	800e360 <cmr_pwmSetDutyCycle+0x18>
 800e358:	21b5      	movs	r1, #181	@ 0xb5
 800e35a:	482c      	ldr	r0, [pc, #176]	@ (800e40c <cmr_pwmSetDutyCycle+0xc4>)
 800e35c:	f7ff fe6d 	bl	800e03a <cmr_panic>
    configASSERT(dutyCycle_pcnt <= 100);
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	2b64      	cmp	r3, #100	@ 0x64
 800e364:	d903      	bls.n	800e36e <cmr_pwmSetDutyCycle+0x26>
 800e366:	21b6      	movs	r1, #182	@ 0xb6
 800e368:	4829      	ldr	r0, [pc, #164]	@ (800e410 <cmr_pwmSetDutyCycle+0xc8>)
 800e36a:	f7ff fe66 	bl	800e03a <cmr_panic>
        .OCFastMode = TIM_OCFAST_DISABLE,
        .OCIdleState = TIM_OCIDLESTATE_RESET,
        .OCNIdleState = TIM_OCNIDLESTATE_RESET
    };

    uint32_t period_ticks = pwmChannel->handle.Init.Period + 1;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	68db      	ldr	r3, [r3, #12]
 800e372:	3301      	adds	r3, #1
 800e374:	60fb      	str	r3, [r7, #12]

    // Prevent overflow (should never occur)
    if (UINT32_MAX / period_ticks < dutyCycle_pcnt) {
 800e376:	2100      	movs	r1, #0
 800e378:	683a      	ldr	r2, [r7, #0]
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	fba3 2302 	umull	r2, r3, r3, r2
 800e380:	2b00      	cmp	r3, #0
 800e382:	d000      	beq.n	800e386 <cmr_pwmSetDutyCycle+0x3e>
 800e384:	2101      	movs	r1, #1
 800e386:	460b      	mov	r3, r1
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d00a      	beq.n	800e3a2 <cmr_pwmSetDutyCycle+0x5a>
        outputCompareConfig.Pulse = period_ticks / 100 * dutyCycle_pcnt;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	4a21      	ldr	r2, [pc, #132]	@ (800e414 <cmr_pwmSetDutyCycle+0xcc>)
 800e390:	fba2 2303 	umull	r2, r3, r2, r3
 800e394:	095b      	lsrs	r3, r3, #5
 800e396:	683a      	ldr	r2, [r7, #0]
 800e398:	fb02 f303 	mul.w	r3, r2, r3
 800e39c:	4a1e      	ldr	r2, [pc, #120]	@ (800e418 <cmr_pwmSetDutyCycle+0xd0>)
 800e39e:	6053      	str	r3, [r2, #4]
 800e3a0:	e009      	b.n	800e3b6 <cmr_pwmSetDutyCycle+0x6e>
    } else {
        outputCompareConfig.Pulse = period_ticks * dutyCycle_pcnt / 100;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	683a      	ldr	r2, [r7, #0]
 800e3a6:	fb02 f303 	mul.w	r3, r2, r3
 800e3aa:	4a1a      	ldr	r2, [pc, #104]	@ (800e414 <cmr_pwmSetDutyCycle+0xcc>)
 800e3ac:	fba2 2303 	umull	r2, r3, r2, r3
 800e3b0:	095b      	lsrs	r3, r3, #5
 800e3b2:	4a19      	ldr	r2, [pc, #100]	@ (800e418 <cmr_pwmSetDutyCycle+0xd0>)
 800e3b4:	6053      	str	r3, [r2, #4]
    }

    if (HAL_TIM_PWM_Stop(&pwmChannel->handle, pwmChannel->channel) != HAL_OK) {
 800e3b6:	687a      	ldr	r2, [r7, #4]
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3bc:	4619      	mov	r1, r3
 800e3be:	4610      	mov	r0, r2
 800e3c0:	f00d fe18 	bl	801bff4 <HAL_TIM_PWM_Stop>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d002      	beq.n	800e3d0 <cmr_pwmSetDutyCycle+0x88>
        cmr_panic("pwmSetPeriod HAL_TIM_PWM_Stop failed!");
 800e3ca:	4814      	ldr	r0, [pc, #80]	@ (800e41c <cmr_pwmSetDutyCycle+0xd4>)
 800e3cc:	f7ff fe35 	bl	800e03a <cmr_panic>
    }

    if (HAL_TIM_PWM_ConfigChannel(&pwmChannel->handle, &outputCompareConfig, pwmChannel->channel) != HAL_OK) {
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	490f      	ldr	r1, [pc, #60]	@ (800e418 <cmr_pwmSetDutyCycle+0xd0>)
 800e3da:	f00d ffc1 	bl	801c360 <HAL_TIM_PWM_ConfigChannel>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d002      	beq.n	800e3ea <cmr_pwmSetDutyCycle+0xa2>
        cmr_panic("pwmSetDutyCycle cmr_pwmSetDutyCycle failed!");
 800e3e4:	480e      	ldr	r0, [pc, #56]	@ (800e420 <cmr_pwmSetDutyCycle+0xd8>)
 800e3e6:	f7ff fe28 	bl	800e03a <cmr_panic>
    }

    if (HAL_TIM_PWM_Start(&pwmChannel->handle, pwmChannel->channel) != HAL_OK) {
 800e3ea:	687a      	ldr	r2, [r7, #4]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	4610      	mov	r0, r2
 800e3f4:	f00d fce2 	bl	801bdbc <HAL_TIM_PWM_Start>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d002      	beq.n	800e404 <cmr_pwmSetDutyCycle+0xbc>
        cmr_panic("pwmSetPeriod HAL_TIM_PWM_Start failed!");
 800e3fe:	4809      	ldr	r0, [pc, #36]	@ (800e424 <cmr_pwmSetDutyCycle+0xdc>)
 800e400:	f7ff fe1b 	bl	800e03a <cmr_panic>
    }
}
 800e404:	bf00      	nop
 800e406:	3710      	adds	r7, #16
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}
 800e40c:	08020714 	.word	0x08020714
 800e410:	0802075c 	.word	0x0802075c
 800e414:	51eb851f 	.word	0x51eb851f
 800e418:	24000890 	.word	0x24000890
 800e41c:	080207a8 	.word	0x080207a8
 800e420:	080207d0 	.word	0x080207d0
 800e424:	080207fc 	.word	0x080207fc

0800e428 <cmr_rccSystemClockEnable>:
 * @brief Configures the system and peripheral clocks using external oscillator
 *
 * @note Generated by STM32Cube. Sets System Clock to 96 MHz, with only APB1
 * Peripheral Clocks at 48 MHz (APB1 Timer Clocks are still 96 MHz).
 */
void cmr_rccSystemClockEnable(void)  {
 800e428:	b580      	push	{r7, lr}
 800e42a:	af00      	add	r7, sp, #0
    _platform_rccSystemClockEnable();
 800e42c:	f7fe ff62 	bl	800d2f4 <_platform_rccSystemClockEnable>
}
 800e430:	bf00      	nop
 800e432:	bd80      	pop	{r7, pc}

0800e434 <cmr_rccGPIOClockEnable>:
/**
 * @brief Enables the specified GPIO port's clock.
 *
 * @param port The GPIO port.
 */
void cmr_rccGPIOClockEnable(GPIO_TypeDef *port) {
 800e434:	b580      	push	{r7, lr}
 800e436:	b082      	sub	sp, #8
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
    _platform_rccGPIOClockEnable(port);
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f7fe ffd7 	bl	800d3f0 <_platform_rccGPIOClockEnable>
}
 800e442:	bf00      	nop
 800e444:	3708      	adds	r7, #8
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}

0800e44a <cmr_rccADCClockEnable>:
/**
 * @brief Enables the specified ADC's clock.
 *
 * @param instance The HAL ADC instance.
 */
void cmr_rccADCClockEnable(ADC_TypeDef *instance) {
 800e44a:	b580      	push	{r7, lr}
 800e44c:	b082      	sub	sp, #8
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
    _platform_rccADCClockEnable(instance);
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f7ff f89c 	bl	800d590 <_platform_rccADCClockEnable>
}
 800e458:	bf00      	nop
 800e45a:	3708      	adds	r7, #8
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <cmr_rccCANClockEnable>:
/**
 * @brief Enables the specified CAN interface's clock.
 *
 * @param instance The HAL CAN instance.
 */
void cmr_rccCANClockEnable(FDCAN_GlobalTypeDef *instance) {
 800e460:	b580      	push	{r7, lr}
 800e462:	b082      	sub	sp, #8
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
	_platform_rccFDCanClockEnable(instance);
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f7fe fefb 	bl	800d264 <_platform_rccFDCanClockEnable>
}
 800e46e:	bf00      	nop
 800e470:	3708      	adds	r7, #8
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}

0800e476 <cmr_rccI2CClockEnable>:
/**
 * @brief Enables the specified I2C port's clock.
 *
 * @param instance The HAL I2C instance.
 */
void cmr_rccI2CClockEnable(I2C_TypeDef *instance) {
 800e476:	b580      	push	{r7, lr}
 800e478:	b082      	sub	sp, #8
 800e47a:	af00      	add	r7, sp, #0
 800e47c:	6078      	str	r0, [r7, #4]
	_platform_i2cClockInit(instance);
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f7ff fb94 	bl	800dbac <_platform_i2cClockInit>
}
 800e484:	bf00      	nop
 800e486:	3708      	adds	r7, #8
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}

0800e48c <cmr_rccSPIClockEnable>:
/**
 * @brief Enables the specified SPI port's clock.
 *
 * @param instance The HAL SPI instance.
 */
void cmr_rccSPIClockEnable(SPI_TypeDef *instance) {
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b0b6      	sub	sp, #216	@ 0xd8
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]

	#ifdef H725
		RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e494:	f107 0320 	add.w	r3, r7, #32
 800e498:	22b8      	movs	r2, #184	@ 0xb8
 800e49a:	2100      	movs	r1, #0
 800e49c:	4618      	mov	r0, r3
 800e49e:	f010 f863 	bl	801e568 <memset>
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800e4a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800e4a6:	f04f 0300 	mov.w	r3, #0
 800e4aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
		PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSE;
 800e4ae:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800e4b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e4b6:	f107 0320 	add.w	r3, r7, #32
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f00a fd66 	bl	8018f8c <HAL_RCCEx_PeriphCLKConfig>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d002      	beq.n	800e4cc <cmr_rccSPIClockEnable+0x40>
		{
		  cmr_panic("fucky wucky periph clock config");
 800e4c6:	4838      	ldr	r0, [pc, #224]	@ (800e5a8 <cmr_rccSPIClockEnable+0x11c>)
 800e4c8:	f7ff fdb7 	bl	800e03a <cmr_panic>
		}
	#endif

    switch ((uintptr_t) instance) {
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	4a37      	ldr	r2, [pc, #220]	@ (800e5ac <cmr_rccSPIClockEnable+0x120>)
 800e4d0:	4293      	cmp	r3, r2
 800e4d2:	d055      	beq.n	800e580 <cmr_rccSPIClockEnable+0xf4>
 800e4d4:	4a35      	ldr	r2, [pc, #212]	@ (800e5ac <cmr_rccSPIClockEnable+0x120>)
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d862      	bhi.n	800e5a0 <cmr_rccSPIClockEnable+0x114>
 800e4da:	4a35      	ldr	r2, [pc, #212]	@ (800e5b0 <cmr_rccSPIClockEnable+0x124>)
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	d03f      	beq.n	800e560 <cmr_rccSPIClockEnable+0xd4>
 800e4e0:	4a33      	ldr	r2, [pc, #204]	@ (800e5b0 <cmr_rccSPIClockEnable+0x124>)
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	d85c      	bhi.n	800e5a0 <cmr_rccSPIClockEnable+0x114>
 800e4e6:	4a33      	ldr	r2, [pc, #204]	@ (800e5b4 <cmr_rccSPIClockEnable+0x128>)
 800e4e8:	4293      	cmp	r3, r2
 800e4ea:	d009      	beq.n	800e500 <cmr_rccSPIClockEnable+0x74>
 800e4ec:	4a31      	ldr	r2, [pc, #196]	@ (800e5b4 <cmr_rccSPIClockEnable+0x128>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d856      	bhi.n	800e5a0 <cmr_rccSPIClockEnable+0x114>
 800e4f2:	4a31      	ldr	r2, [pc, #196]	@ (800e5b8 <cmr_rccSPIClockEnable+0x12c>)
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	d013      	beq.n	800e520 <cmr_rccSPIClockEnable+0x94>
 800e4f8:	4a30      	ldr	r2, [pc, #192]	@ (800e5bc <cmr_rccSPIClockEnable+0x130>)
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	d020      	beq.n	800e540 <cmr_rccSPIClockEnable+0xb4>
            break;
        case SPI5_BASE:
            __HAL_RCC_SPI5_CLK_ENABLE();
            break;
    }
}
 800e4fe:	e04f      	b.n	800e5a0 <cmr_rccSPIClockEnable+0x114>
            __HAL_RCC_SPI1_CLK_ENABLE();
 800e500:	4b2f      	ldr	r3, [pc, #188]	@ (800e5c0 <cmr_rccSPIClockEnable+0x134>)
 800e502:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e506:	4a2e      	ldr	r2, [pc, #184]	@ (800e5c0 <cmr_rccSPIClockEnable+0x134>)
 800e508:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e50c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800e510:	4b2b      	ldr	r3, [pc, #172]	@ (800e5c0 <cmr_rccSPIClockEnable+0x134>)
 800e512:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e516:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e51a:	61fb      	str	r3, [r7, #28]
 800e51c:	69fb      	ldr	r3, [r7, #28]
            break;
 800e51e:	e03f      	b.n	800e5a0 <cmr_rccSPIClockEnable+0x114>
            __HAL_RCC_SPI2_CLK_ENABLE();
 800e520:	4b27      	ldr	r3, [pc, #156]	@ (800e5c0 <cmr_rccSPIClockEnable+0x134>)
 800e522:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e526:	4a26      	ldr	r2, [pc, #152]	@ (800e5c0 <cmr_rccSPIClockEnable+0x134>)
 800e528:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e52c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800e530:	4b23      	ldr	r3, [pc, #140]	@ (800e5c0 <cmr_rccSPIClockEnable+0x134>)
 800e532:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e536:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e53a:	61bb      	str	r3, [r7, #24]
 800e53c:	69bb      	ldr	r3, [r7, #24]
            break;
 800e53e:	e02f      	b.n	800e5a0 <cmr_rccSPIClockEnable+0x114>
            __HAL_RCC_SPI3_CLK_ENABLE();
 800e540:	4b1f      	ldr	r3, [pc, #124]	@ (800e5c0 <cmr_rccSPIClockEnable+0x134>)
 800e542:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e546:	4a1e      	ldr	r2, [pc, #120]	@ (800e5c0 <cmr_rccSPIClockEnable+0x134>)
 800e548:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e54c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800e550:	4b1b      	ldr	r3, [pc, #108]	@ (800e5c0 <cmr_rccSPIClockEnable+0x134>)
 800e552:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e556:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e55a:	617b      	str	r3, [r7, #20]
 800e55c:	697b      	ldr	r3, [r7, #20]
            break;
 800e55e:	e01f      	b.n	800e5a0 <cmr_rccSPIClockEnable+0x114>
            __HAL_RCC_SPI4_CLK_ENABLE();
 800e560:	4b17      	ldr	r3, [pc, #92]	@ (800e5c0 <cmr_rccSPIClockEnable+0x134>)
 800e562:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e566:	4a16      	ldr	r2, [pc, #88]	@ (800e5c0 <cmr_rccSPIClockEnable+0x134>)
 800e568:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800e56c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800e570:	4b13      	ldr	r3, [pc, #76]	@ (800e5c0 <cmr_rccSPIClockEnable+0x134>)
 800e572:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e576:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e57a:	613b      	str	r3, [r7, #16]
 800e57c:	693b      	ldr	r3, [r7, #16]
            break;
 800e57e:	e00f      	b.n	800e5a0 <cmr_rccSPIClockEnable+0x114>
            __HAL_RCC_SPI5_CLK_ENABLE();
 800e580:	4b0f      	ldr	r3, [pc, #60]	@ (800e5c0 <cmr_rccSPIClockEnable+0x134>)
 800e582:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e586:	4a0e      	ldr	r2, [pc, #56]	@ (800e5c0 <cmr_rccSPIClockEnable+0x134>)
 800e588:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e58c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800e590:	4b0b      	ldr	r3, [pc, #44]	@ (800e5c0 <cmr_rccSPIClockEnable+0x134>)
 800e592:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e596:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e59a:	60fb      	str	r3, [r7, #12]
 800e59c:	68fb      	ldr	r3, [r7, #12]
            break;
 800e59e:	bf00      	nop
}
 800e5a0:	bf00      	nop
 800e5a2:	37d8      	adds	r7, #216	@ 0xd8
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	08020824 	.word	0x08020824
 800e5ac:	40015000 	.word	0x40015000
 800e5b0:	40013400 	.word	0x40013400
 800e5b4:	40013000 	.word	0x40013000
 800e5b8:	40003800 	.word	0x40003800
 800e5bc:	40003c00 	.word	0x40003c00
 800e5c0:	58024400 	.word	0x58024400

0800e5c4 <cmr_rccTIMClockEnable>:
    }
}
#endif /* HAL_USART_MODULE_ENABLED */

#ifdef HAL_TIM_MODULE_ENABLED
void cmr_rccTIMClockEnable(TIM_TypeDef *instance) {
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b082      	sub	sp, #8
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
    _platform_rccTIMClockEnable(instance);
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f7ff f909 	bl	800d7e4 <_platform_rccTIMClockEnable>
}
 800e5d2:	bf00      	nop
 800e5d4:	3708      	adds	r7, #8
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
	...

0800e5dc <cmr_sensorInit>:
 *
 * @note The sensor's public fields should already be filled in!
 *
 * @param sensor The sensor to initialize.
 */
static void cmr_sensorInit(cmr_sensor_t *sensor) {
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b08a      	sub	sp, #40	@ 0x28
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
    configASSERT(sensor->readingMax >= sensor->readingMin);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	68da      	ldr	r2, [r3, #12]
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	689b      	ldr	r3, [r3, #8]
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	d203      	bcs.n	800e5f8 <cmr_sensorInit+0x1c>
 800e5f0:	2114      	movs	r1, #20
 800e5f2:	482a      	ldr	r0, [pc, #168]	@ (800e69c <cmr_sensorInit+0xc0>)
 800e5f4:	f7ff fd21 	bl	800e03a <cmr_panic>

    // Calculate tolerance.
    const uint32_t readingRange = sensor->readingMax - sensor->readingMin;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	68da      	ldr	r2, [r3, #12]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	689b      	ldr	r3, [r3, #8]
 800e600:	1ad3      	subs	r3, r2, r3
 800e602:	61bb      	str	r3, [r7, #24]
    uint32_t readingTolerance;
    // Prevent overflow.
    if (UINT32_MAX / sensor->outOfRange_pcnt < readingRange) {
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	691a      	ldr	r2, [r3, #16]
 800e608:	2100      	movs	r1, #0
 800e60a:	69bb      	ldr	r3, [r7, #24]
 800e60c:	fba3 2302 	umull	r2, r3, r3, r2
 800e610:	2b00      	cmp	r3, #0
 800e612:	d000      	beq.n	800e616 <cmr_sensorInit+0x3a>
 800e614:	2101      	movs	r1, #1
 800e616:	460b      	mov	r3, r1
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d00a      	beq.n	800e632 <cmr_sensorInit+0x56>
        readingTolerance = (readingRange / 100) * sensor->outOfRange_pcnt;
 800e61c:	69bb      	ldr	r3, [r7, #24]
 800e61e:	4a20      	ldr	r2, [pc, #128]	@ (800e6a0 <cmr_sensorInit+0xc4>)
 800e620:	fba2 2303 	umull	r2, r3, r2, r3
 800e624:	095b      	lsrs	r3, r3, #5
 800e626:	687a      	ldr	r2, [r7, #4]
 800e628:	6912      	ldr	r2, [r2, #16]
 800e62a:	fb02 f303 	mul.w	r3, r2, r3
 800e62e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e630:	e009      	b.n	800e646 <cmr_sensorInit+0x6a>
    } else {
        readingTolerance = (readingRange * sensor->outOfRange_pcnt) / 100;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	691b      	ldr	r3, [r3, #16]
 800e636:	69ba      	ldr	r2, [r7, #24]
 800e638:	fb02 f303 	mul.w	r3, r2, r3
 800e63c:	4a18      	ldr	r2, [pc, #96]	@ (800e6a0 <cmr_sensorInit+0xc4>)
 800e63e:	fba2 2303 	umull	r2, r3, r2, r3
 800e642:	095b      	lsrs	r3, r3, #5
 800e644:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Calculate thresholds from tolerance.
    uint32_t readingUpper = sensor->readingMax + readingTolerance;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	68db      	ldr	r3, [r3, #12]
 800e64a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e64c:	4413      	add	r3, r2
 800e64e:	623b      	str	r3, [r7, #32]
    if (readingUpper < sensor->readingMax) {
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	68db      	ldr	r3, [r3, #12]
 800e654:	6a3a      	ldr	r2, [r7, #32]
 800e656:	429a      	cmp	r2, r3
 800e658:	d202      	bcs.n	800e660 <cmr_sensorInit+0x84>
        readingUpper = UINT32_MAX;  // Overflow!
 800e65a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e65e:	623b      	str	r3, [r7, #32]
    }

    uint32_t readingLower = sensor->readingMin - readingTolerance;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	689a      	ldr	r2, [r3, #8]
 800e664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e666:	1ad3      	subs	r3, r2, r3
 800e668:	61fb      	str	r3, [r7, #28]
    if (readingLower > sensor->readingMin) {
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	689b      	ldr	r3, [r3, #8]
 800e66e:	69fa      	ldr	r2, [r7, #28]
 800e670:	429a      	cmp	r2, r3
 800e672:	d901      	bls.n	800e678 <cmr_sensorInit+0x9c>
        readingLower = 0;  // Underflow!
 800e674:	2300      	movs	r3, #0
 800e676:	61fb      	str	r3, [r7, #28]
    }

    sensor->_ = (struct cmr_sensor_private) {
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	6a3a      	ldr	r2, [r7, #32]
 800e67c:	619a      	str	r2, [r3, #24]
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	69fa      	ldr	r2, [r7, #28]
 800e682:	61da      	str	r2, [r3, #28]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2200      	movs	r2, #0
 800e688:	621a      	str	r2, [r3, #32]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2200      	movs	r2, #0
 800e68e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        .readingUpper = readingUpper,
        .readingLower = readingLower,
        .value = 0,
        .error = CMR_SENSOR_ERR_NONE
    };
}
 800e692:	bf00      	nop
 800e694:	3728      	adds	r7, #40	@ 0x28
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
 800e69a:	bf00      	nop
 800e69c:	08020844 	.word	0x08020844
 800e6a0:	51eb851f 	.word	0x51eb851f

0800e6a4 <cmr_sensorUpdate>:
/**
 * @brief Updates the sensor.
 *
 * @param sensor The sensor to sample.
 */
static void cmr_sensorUpdate(cmr_sensor_t *sensor) {
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
    uint32_t reading = sensor->sample(sensor);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	4798      	blx	r3
 800e6b4:	60b8      	str	r0, [r7, #8]

    // Check if sensor has gone out-of-range.
    if (reading < sensor->_.readingLower || sensor->_.readingUpper < reading) {
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	69db      	ldr	r3, [r3, #28]
 800e6ba:	68ba      	ldr	r2, [r7, #8]
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d304      	bcc.n	800e6ca <cmr_sensorUpdate+0x26>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	699b      	ldr	r3, [r3, #24]
 800e6c4:	68ba      	ldr	r2, [r7, #8]
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d904      	bls.n	800e6d4 <cmr_sensorUpdate+0x30>
        sensor->_.error = CMR_SENSOR_ERR_OUT_OF_RANGE;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2201      	movs	r2, #1
 800e6ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800e6d2:	e003      	b.n	800e6dc <cmr_sensorUpdate+0x38>
    } else {
        sensor->_.error = CMR_SENSOR_ERR_NONE;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }

    uint32_t value;
    if (sensor->conv != NULL) {
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d007      	beq.n	800e6f4 <cmr_sensorUpdate+0x50>
        value = sensor->conv(sensor, reading);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	68b9      	ldr	r1, [r7, #8]
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	4798      	blx	r3
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	60fb      	str	r3, [r7, #12]
 800e6f2:	e001      	b.n	800e6f8 <cmr_sensorUpdate+0x54>
    } else {
        value = reading;
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	60fb      	str	r3, [r7, #12]
    }

    sensor->_.value = value;
 800e6f8:	68fa      	ldr	r2, [r7, #12]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	621a      	str	r2, [r3, #32]
}
 800e6fe:	bf00      	nop
 800e700:	3710      	adds	r7, #16
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}

0800e706 <cmr_sensorListInit>:
 * @param sensorsLen The total number of sensors in the array.
 */
void cmr_sensorListInit(
    cmr_sensorList_t *list,
    cmr_sensor_t *sensors, size_t sensorsLen
) {
 800e706:	b580      	push	{r7, lr}
 800e708:	b086      	sub	sp, #24
 800e70a:	af00      	add	r7, sp, #0
 800e70c:	60f8      	str	r0, [r7, #12]
 800e70e:	60b9      	str	r1, [r7, #8]
 800e710:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < sensorsLen; i++) {
 800e712:	2300      	movs	r3, #0
 800e714:	617b      	str	r3, [r7, #20]
 800e716:	e00d      	b.n	800e734 <cmr_sensorListInit+0x2e>
        cmr_sensorInit(sensors + i);
 800e718:	697a      	ldr	r2, [r7, #20]
 800e71a:	4613      	mov	r3, r2
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	4413      	add	r3, r2
 800e720:	00db      	lsls	r3, r3, #3
 800e722:	461a      	mov	r2, r3
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	4413      	add	r3, r2
 800e728:	4618      	mov	r0, r3
 800e72a:	f7ff ff57 	bl	800e5dc <cmr_sensorInit>
    for (size_t i = 0; i < sensorsLen; i++) {
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	3301      	adds	r3, #1
 800e732:	617b      	str	r3, [r7, #20]
 800e734:	697a      	ldr	r2, [r7, #20]
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	429a      	cmp	r2, r3
 800e73a:	d3ed      	bcc.n	800e718 <cmr_sensorListInit+0x12>
    }

    list->sensors = sensors;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	68ba      	ldr	r2, [r7, #8]
 800e740:	601a      	str	r2, [r3, #0]
    list->sensorsLen = sensorsLen;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	687a      	ldr	r2, [r7, #4]
 800e746:	605a      	str	r2, [r3, #4]
}
 800e748:	bf00      	nop
 800e74a:	3718      	adds	r7, #24
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}

0800e750 <cmr_sensorListUpdate>:
/**
 * @brief Updates the given sensor list.
 *
 * @param list The list to update.
 */
void cmr_sensorListUpdate(cmr_sensorList_t *list) {
 800e750:	b580      	push	{r7, lr}
 800e752:	b084      	sub	sp, #16
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < list->sensorsLen; i++) {
 800e758:	2300      	movs	r3, #0
 800e75a:	60fb      	str	r3, [r7, #12]
 800e75c:	e00d      	b.n	800e77a <cmr_sensorListUpdate+0x2a>
        cmr_sensorUpdate(list->sensors + i);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6819      	ldr	r1, [r3, #0]
 800e762:	68fa      	ldr	r2, [r7, #12]
 800e764:	4613      	mov	r3, r2
 800e766:	009b      	lsls	r3, r3, #2
 800e768:	4413      	add	r3, r2
 800e76a:	00db      	lsls	r3, r3, #3
 800e76c:	440b      	add	r3, r1
 800e76e:	4618      	mov	r0, r3
 800e770:	f7ff ff98 	bl	800e6a4 <cmr_sensorUpdate>
    for (size_t i = 0; i < list->sensorsLen; i++) {
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	3301      	adds	r3, #1
 800e778:	60fb      	str	r3, [r7, #12]
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	685b      	ldr	r3, [r3, #4]
 800e77e:	68fa      	ldr	r2, [r7, #12]
 800e780:	429a      	cmp	r2, r3
 800e782:	d3ec      	bcc.n	800e75e <cmr_sensorListUpdate+0xe>
    }
}
 800e784:	bf00      	nop
 800e786:	bf00      	nop
 800e788:	3710      	adds	r7, #16
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}

0800e78e <cmr_sensorListGetFlags>:
 * @param errorp The errors to update, or NULL to ignore.
 */
void cmr_sensorListGetFlags(
    cmr_sensorList_t *list,
    cmr_canWarn_t *warnp, cmr_canError_t *errorp
) {
 800e78e:	b480      	push	{r7}
 800e790:	b089      	sub	sp, #36	@ 0x24
 800e792:	af00      	add	r7, sp, #0
 800e794:	60f8      	str	r0, [r7, #12]
 800e796:	60b9      	str	r1, [r7, #8]
 800e798:	607a      	str	r2, [r7, #4]
    cmr_canWarn_t warn = (warnp == NULL) ? 0 : *warnp;
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d002      	beq.n	800e7a6 <cmr_sensorListGetFlags+0x18>
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	881b      	ldrh	r3, [r3, #0]
 800e7a4:	e000      	b.n	800e7a8 <cmr_sensorListGetFlags+0x1a>
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	83fb      	strh	r3, [r7, #30]
    cmr_canError_t error = (errorp == NULL) ? 0 : *errorp;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d002      	beq.n	800e7b6 <cmr_sensorListGetFlags+0x28>
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	881b      	ldrh	r3, [r3, #0]
 800e7b4:	e000      	b.n	800e7b8 <cmr_sensorListGetFlags+0x2a>
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	83bb      	strh	r3, [r7, #28]

    for (size_t i = 0; i < list->sensorsLen; i++) {
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	61bb      	str	r3, [r7, #24]
 800e7be:	e01d      	b.n	800e7fc <cmr_sensorListGetFlags+0x6e>
        cmr_sensor_t *sensor = list->sensors + i;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	6819      	ldr	r1, [r3, #0]
 800e7c4:	69ba      	ldr	r2, [r7, #24]
 800e7c6:	4613      	mov	r3, r2
 800e7c8:	009b      	lsls	r3, r3, #2
 800e7ca:	4413      	add	r3, r2
 800e7cc:	00db      	lsls	r3, r3, #3
 800e7ce:	440b      	add	r3, r1
 800e7d0:	617b      	str	r3, [r7, #20]
        switch (sensor->_.error) {
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e7d8:	b2db      	uxtb	r3, r3
 800e7da:	2b01      	cmp	r3, #1
 800e7dc:	d10a      	bne.n	800e7f4 <cmr_sensorListGetFlags+0x66>
            case CMR_SENSOR_ERR_OUT_OF_RANGE:
                warn |= sensor->warnFlag;
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	8a9a      	ldrh	r2, [r3, #20]
 800e7e2:	8bfb      	ldrh	r3, [r7, #30]
 800e7e4:	4313      	orrs	r3, r2
 800e7e6:	83fb      	strh	r3, [r7, #30]
                error |= sensor->errorFlag;
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	8ada      	ldrh	r2, [r3, #22]
 800e7ec:	8bbb      	ldrh	r3, [r7, #28]
 800e7ee:	4313      	orrs	r3, r2
 800e7f0:	83bb      	strh	r3, [r7, #28]
                break;
 800e7f2:	e000      	b.n	800e7f6 <cmr_sensorListGetFlags+0x68>
            default:
                break;
 800e7f4:	bf00      	nop
    for (size_t i = 0; i < list->sensorsLen; i++) {
 800e7f6:	69bb      	ldr	r3, [r7, #24]
 800e7f8:	3301      	adds	r3, #1
 800e7fa:	61bb      	str	r3, [r7, #24]
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	69ba      	ldr	r2, [r7, #24]
 800e802:	429a      	cmp	r2, r3
 800e804:	d3dc      	bcc.n	800e7c0 <cmr_sensorListGetFlags+0x32>
        }
    }

    if (warnp != NULL) {
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d006      	beq.n	800e81a <cmr_sensorListGetFlags+0x8c>
        *warnp |= warn;
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	881a      	ldrh	r2, [r3, #0]
 800e810:	8bfb      	ldrh	r3, [r7, #30]
 800e812:	4313      	orrs	r3, r2
 800e814:	b29a      	uxth	r2, r3
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	801a      	strh	r2, [r3, #0]
    }

    if (errorp != NULL) {
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d006      	beq.n	800e82e <cmr_sensorListGetFlags+0xa0>
        *errorp |= error;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	881a      	ldrh	r2, [r3, #0]
 800e824:	8bbb      	ldrh	r3, [r7, #28]
 800e826:	4313      	orrs	r3, r2
 800e828:	b29a      	uxth	r2, r3
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	801a      	strh	r2, [r3, #0]
    }
}
 800e82e:	bf00      	nop
 800e830:	3724      	adds	r7, #36	@ 0x24
 800e832:	46bd      	mov	sp, r7
 800e834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e838:	4770      	bx	lr

0800e83a <cmr_sensorListGetValue>:
 *
 * @return The most recent converted value.
 */
int32_t cmr_sensorListGetValue(
    cmr_sensorList_t *list, size_t channel
) {
 800e83a:	b480      	push	{r7}
 800e83c:	b083      	sub	sp, #12
 800e83e:	af00      	add	r7, sp, #0
 800e840:	6078      	str	r0, [r7, #4]
 800e842:	6039      	str	r1, [r7, #0]
    return list->sensors[channel]._.value;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6819      	ldr	r1, [r3, #0]
 800e848:	683a      	ldr	r2, [r7, #0]
 800e84a:	4613      	mov	r3, r2
 800e84c:	009b      	lsls	r3, r3, #2
 800e84e:	4413      	add	r3, r2
 800e850:	00db      	lsls	r3, r3, #3
 800e852:	440b      	add	r3, r1
 800e854:	6a1b      	ldr	r3, [r3, #32]
}
 800e856:	4618      	mov	r0, r3
 800e858:	370c      	adds	r7, #12
 800e85a:	46bd      	mov	sp, r7
 800e85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e860:	4770      	bx	lr
	...

0800e864 <cmr_spiInit>:
void cmr_spiInit(
    cmr_spi_t *spi, SPI_TypeDef *instance, const SPI_InitTypeDef *init,
    const cmr_spiPinConfig_t *pins,
    DMA_Stream_TypeDef *rxDMA, uint32_t rxDMAChannel,
    DMA_Stream_TypeDef *txDMA, uint32_t txDMAChannel
) {
 800e864:	b590      	push	{r4, r7, lr}
 800e866:	f5ad 7d1d 	sub.w	sp, sp, #628	@ 0x274
 800e86a:	af02      	add	r7, sp, #8
 800e86c:	f507 741a 	add.w	r4, r7, #616	@ 0x268
 800e870:	f5a4 7417 	sub.w	r4, r4, #604	@ 0x25c
 800e874:	6020      	str	r0, [r4, #0]
 800e876:	f507 701a 	add.w	r0, r7, #616	@ 0x268
 800e87a:	f5a0 7018 	sub.w	r0, r0, #608	@ 0x260
 800e87e:	6001      	str	r1, [r0, #0]
 800e880:	f507 711a 	add.w	r1, r7, #616	@ 0x268
 800e884:	f5a1 7119 	sub.w	r1, r1, #612	@ 0x264
 800e888:	600a      	str	r2, [r1, #0]
 800e88a:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800e88e:	f5a2 721a 	sub.w	r2, r2, #616	@ 0x268
 800e892:	6013      	str	r3, [r2, #0]
    *spi = (cmr_spi_t) {
        .handle = {
            .Instance = instance,
            .Init = *init
 800e894:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e898:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800e89c:	681a      	ldr	r2, [r3, #0]
 800e89e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800e8a2:	4611      	mov	r1, r2
 800e8a4:	2258      	movs	r2, #88	@ 0x58
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f00f fe90 	bl	801e5cc <memcpy>
                .Mode = DMA_NORMAL,
                .Priority = DMA_PRIORITY_LOW,
                .FIFOMode = DMA_FIFOMODE_DISABLE
            }
        },
        .nssPin = pins->nss,
 800e8ac:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e8b0:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800e8ba:	3218      	adds	r2, #24
 800e8bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8c0:	e883 0003 	stmia.w	r3, {r0, r1}
    *spi = (cmr_spi_t) {
 800e8c4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e8c8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 800e8d4:	461a      	mov	r2, r3
 800e8d6:	2100      	movs	r1, #0
 800e8d8:	f00f fe46 	bl	801e568 <memset>
 800e8dc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e8e0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800e8ea:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 800e8ee:	6812      	ldr	r2, [r2, #0]
 800e8f0:	601a      	str	r2, [r3, #0]
 800e8f2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e8f6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	3304      	adds	r3, #4
 800e8fe:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 800e902:	2258      	movs	r2, #88	@ 0x58
 800e904:	4618      	mov	r0, r3
 800e906:	f00f fe61 	bl	801e5cc <memcpy>
 800e90a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e90e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f8d7 2278 	ldr.w	r2, [r7, #632]	@ 0x278
 800e918:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800e91c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e920:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e92a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800e92e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e932:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	f8d7 2280 	ldr.w	r2, [r7, #640]	@ 0x280
 800e93c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800e940:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e944:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	2240      	movs	r2, #64	@ 0x40
 800e94c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 800e950:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e954:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e95e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
 800e962:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e966:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800e970:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 800e974:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e978:	e883 0003 	stmia.w	r3, {r0, r1}
    };

    // Always use software NSS.
    spi->handle.Init.NSS = SPI_NSS_SOFT;
 800e97c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e980:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800e98a:	619a      	str	r2, [r3, #24]

    spi->doneSem = xSemaphoreCreateBinaryStatic(&spi->doneSemBuf);
 800e98c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e990:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800e99a:	2203      	movs	r2, #3
 800e99c:	9200      	str	r2, [sp, #0]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	2100      	movs	r1, #0
 800e9a2:	2001      	movs	r0, #1
 800e9a4:	f000 fea6 	bl	800f6f4 <xQueueGenericCreateStatic>
 800e9a8:	4602      	mov	r2, r0
 800e9aa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e9ae:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    configASSERT(spi->doneSem != NULL);
 800e9b8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e9bc:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d103      	bne.n	800e9d2 <cmr_spiInit+0x16e>
 800e9ca:	21bc      	movs	r1, #188	@ 0xbc
 800e9cc:	4875      	ldr	r0, [pc, #468]	@ (800eba4 <cmr_spiInit+0x340>)
 800e9ce:	f7ff fb34 	bl	800e03a <cmr_panic>

    cmr_rccSPIClockEnable(instance);
 800e9d2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e9d6:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800e9da:	6818      	ldr	r0, [r3, #0]
 800e9dc:	f7ff fd56 	bl	800e48c <cmr_rccSPIClockEnable>

    // Configure pins.

    GPIO_InitTypeDef pinConfig = {
			.Pin = pins->mosi.pin,
 800e9e0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e9e4:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	889b      	ldrh	r3, [r3, #4]
 800e9ec:	461a      	mov	r2, r3
    GPIO_InitTypeDef pinConfig = {
 800e9ee:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e9f2:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800e9f6:	601a      	str	r2, [r3, #0]
 800e9f8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800e9fc:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800ea00:	2202      	movs	r2, #2
 800ea02:	605a      	str	r2, [r3, #4]
 800ea04:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800ea08:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	609a      	str	r2, [r3, #8]
 800ea10:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800ea14:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800ea18:	2203      	movs	r2, #3
 800ea1a:	60da      	str	r2, [r3, #12]
 800ea1c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800ea20:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800ea24:	2205      	movs	r2, #5
 800ea26:	611a      	str	r2, [r3, #16]
			.Pull = GPIO_NOPULL,
			.Speed = GPIO_SPEED_FREQ_VERY_HIGH,
			.Alternate = GPIO_AF5_SPI4,     // All SPI ports on AF5.
    	};

    cmr_rccGPIOClockEnable(pins->mosi.port);
 800ea28:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800ea2c:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	4618      	mov	r0, r3
 800ea36:	f7ff fcfd 	bl	800e434 <cmr_rccGPIOClockEnable>
    HAL_GPIO_Init(pins->mosi.port, &pinConfig);
 800ea3a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800ea3e:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800ea4a:	4611      	mov	r1, r2
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f007 fc9b 	bl	8016388 <HAL_GPIO_Init>

    pinConfig.Pin = pins->miso.pin;
 800ea52:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800ea56:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	899b      	ldrh	r3, [r3, #12]
 800ea5e:	461a      	mov	r2, r3
 800ea60:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800ea64:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800ea68:	601a      	str	r2, [r3, #0]
    cmr_rccGPIOClockEnable(pins->miso.port);
 800ea6a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800ea6e:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	689b      	ldr	r3, [r3, #8]
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7ff fcdc 	bl	800e434 <cmr_rccGPIOClockEnable>
    HAL_GPIO_Init(pins->miso.port, &pinConfig);
 800ea7c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800ea80:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	689b      	ldr	r3, [r3, #8]
 800ea88:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800ea8c:	4611      	mov	r1, r2
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f007 fc7a 	bl	8016388 <HAL_GPIO_Init>

    pinConfig.Pin = pins->sck.pin;
 800ea94:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800ea98:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	8a9b      	ldrh	r3, [r3, #20]
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800eaa6:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800eaaa:	601a      	str	r2, [r3, #0]
    pinConfig.Pull = GPIO_PULLUP;
 800eaac:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800eab0:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800eab4:	2201      	movs	r2, #1
 800eab6:	609a      	str	r2, [r3, #8]
    cmr_rccGPIOClockEnable(pins->sck.port);
 800eab8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800eabc:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	691b      	ldr	r3, [r3, #16]
 800eac4:	4618      	mov	r0, r3
 800eac6:	f7ff fcb5 	bl	800e434 <cmr_rccGPIOClockEnable>
    HAL_GPIO_Init(pins->sck.port, &pinConfig);
 800eaca:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800eace:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	691b      	ldr	r3, [r3, #16]
 800ead6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800eada:	4611      	mov	r1, r2
 800eadc:	4618      	mov	r0, r3
 800eade:	f007 fc53 	bl	8016388 <HAL_GPIO_Init>

    pinConfig = (GPIO_InitTypeDef) {
        .Pin = spi->nssPin.pin,
 800eae2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800eae6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f8b3 317c 	ldrh.w	r3, [r3, #380]	@ 0x17c
 800eaf0:	4619      	mov	r1, r3
    pinConfig = (GPIO_InitTypeDef) {
 800eaf2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800eaf6:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800eafa:	461a      	mov	r2, r3
 800eafc:	2300      	movs	r3, #0
 800eafe:	6013      	str	r3, [r2, #0]
 800eb00:	6053      	str	r3, [r2, #4]
 800eb02:	6093      	str	r3, [r2, #8]
 800eb04:	60d3      	str	r3, [r2, #12]
 800eb06:	6113      	str	r3, [r2, #16]
 800eb08:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800eb0c:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800eb10:	6019      	str	r1, [r3, #0]
 800eb12:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800eb16:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800eb1a:	2201      	movs	r2, #1
 800eb1c:	605a      	str	r2, [r3, #4]
 800eb1e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800eb22:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800eb26:	2203      	movs	r2, #3
 800eb28:	60da      	str	r2, [r3, #12]
        .Mode = GPIO_MODE_OUTPUT_PP,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_VERY_HIGH
    };
    cmr_rccGPIOClockEnable(spi->nssPin.port);
 800eb2a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800eb2e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7ff fc7b 	bl	800e434 <cmr_rccGPIOClockEnable>
    HAL_GPIO_Init(spi->nssPin.port, &pinConfig);
 800eb3e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800eb42:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800eb4c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800eb50:	4611      	mov	r1, r2
 800eb52:	4618      	mov	r0, r3
 800eb54:	f007 fc18 	bl	8016388 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(spi->nssPin.port, spi->nssPin.pin, GPIO_PIN_SET);
 800eb58:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800eb5c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	f8d3 0178 	ldr.w	r0, [r3, #376]	@ 0x178
 800eb66:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800eb6a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	f8b3 317c 	ldrh.w	r3, [r3, #380]	@ 0x17c
 800eb74:	2201      	movs	r2, #1
 800eb76:	4619      	mov	r1, r3
 800eb78:	f007 fdae 	bl	80166d8 <HAL_GPIO_WritePin>
    // cmr_dmaInit(&spi->rxDMA);
    // cmr_dmaInit(&spi->txDMA);
    // __HAL_LINKDMA(&spi->handle, hdmarx, spi->rxDMA);
    // __HAL_LINKDMA(&spi->handle, hdmatx, spi->txDMA);

    if (HAL_SPI_Init(&spi->handle) != HAL_OK) {
 800eb7c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800eb80:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	4618      	mov	r0, r3
 800eb88:	f00c fde6 	bl	801b758 <HAL_SPI_Init>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d002      	beq.n	800eb98 <cmr_spiInit+0x334>
        cmr_panic("HAL_SPI_Init() failed!");
 800eb92:	4805      	ldr	r0, [pc, #20]	@ (800eba8 <cmr_spiInit+0x344>)
 800eb94:	f7ff fa51 	bl	800e03a <cmr_panic>
    }
}
 800eb98:	bf00      	nop
 800eb9a:	f507 771b 	add.w	r7, r7, #620	@ 0x26c
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd90      	pop	{r4, r7, pc}
 800eba2:	bf00      	nop
 800eba4:	08020908 	.word	0x08020908
 800eba8:	08020954 	.word	0x08020954

0800ebac <cmr_taskInit>:
    cmr_task_t *task,
    const char *name,
    UBaseType_t priority,
    TaskFunction_t func,
    void *arg
) {
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b088      	sub	sp, #32
 800ebb0:	af04      	add	r7, sp, #16
 800ebb2:	60f8      	str	r0, [r7, #12]
 800ebb4:	60b9      	str	r1, [r7, #8]
 800ebb6:	607a      	str	r2, [r7, #4]
 800ebb8:	603b      	str	r3, [r7, #0]
        func,
        name,
        sizeof(task->stackBuf) / sizeof(task->stackBuf[0]),
        arg,
        priority,
        task->stackBuf,
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	3360      	adds	r3, #96	@ 0x60
    task->handle = xTaskCreateStatic(
 800ebbe:	68fa      	ldr	r2, [r7, #12]
 800ebc0:	3204      	adds	r2, #4
 800ebc2:	9202      	str	r2, [sp, #8]
 800ebc4:	9301      	str	r3, [sp, #4]
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	9300      	str	r3, [sp, #0]
 800ebca:	69bb      	ldr	r3, [r7, #24]
 800ebcc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ebd0:	68b9      	ldr	r1, [r7, #8]
 800ebd2:	6838      	ldr	r0, [r7, #0]
 800ebd4:	f001 fa6c 	bl	80100b0 <xTaskCreateStatic>
 800ebd8:	4602      	mov	r2, r0
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	601a      	str	r2, [r3, #0]
    );
#else
#error "At least one of configSUPPORT_{STATIC,DYNAMIC}_ALLOCATION must be 1!"
#endif

    configASSERT(task->handle != NULL);
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d103      	bne.n	800ebee <cmr_taskInit+0x42>
 800ebe6:	2130      	movs	r1, #48	@ 0x30
 800ebe8:	4803      	ldr	r0, [pc, #12]	@ (800ebf8 <cmr_taskInit+0x4c>)
 800ebea:	f7ff fa26 	bl	800e03a <cmr_panic>
}
 800ebee:	bf00      	nop
 800ebf0:	3710      	adds	r7, #16
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	08020988 	.word	0x08020988

0800ebfc <vApplicationGetIdleTaskMemory>:
 */
void vApplicationGetIdleTaskMemory(
    StaticTask_t **task,
    StackType_t **stack,
    uint32_t *stackLen
) {
 800ebfc:	b480      	push	{r7}
 800ebfe:	b085      	sub	sp, #20
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	60f8      	str	r0, [r7, #12]
 800ec04:	60b9      	str	r1, [r7, #8]
 800ec06:	607a      	str	r2, [r7, #4]
    static StaticTask_t taskBuf;

    /** @brief The task's stack buffer. */
    static StackType_t stackBuf[configMINIMAL_STACK_SIZE];

    *task = &taskBuf;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	4a07      	ldr	r2, [pc, #28]	@ (800ec28 <vApplicationGetIdleTaskMemory+0x2c>)
 800ec0c:	601a      	str	r2, [r3, #0]
    *stack = stackBuf;
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	4a06      	ldr	r2, [pc, #24]	@ (800ec2c <vApplicationGetIdleTaskMemory+0x30>)
 800ec12:	601a      	str	r2, [r3, #0]
    *stackLen = sizeof(stackBuf) / sizeof(stackBuf[0]);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ec1a:	601a      	str	r2, [r3, #0]
}
 800ec1c:	bf00      	nop
 800ec1e:	3714      	adds	r7, #20
 800ec20:	46bd      	mov	sp, r7
 800ec22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec26:	4770      	bx	lr
 800ec28:	2400e368 	.word	0x2400e368
 800ec2c:	2400e3c4 	.word	0x2400e3c4

0800ec30 <USART1_IRQHandler>:
            HAL_StatusTypeDef status = HAL_UART_AbortReceive_IT(handle); \
            configASSERT(status == HAL_OK); \
        } \
        HAL_UART_IRQHandler(handle); \
    }
UART_FOREACH(UART_IRQ_HANDLERS)
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b082      	sub	sp, #8
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	4b14      	ldr	r3, [pc, #80]	@ (800ec88 <USART1_IRQHandler+0x58>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	607b      	str	r3, [r7, #4]
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	f003 0310 	and.w	r3, r3, #16
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d017      	beq.n	800ec7a <USART1_IRQHandler+0x4a>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	681a      	ldr	r2, [r3, #0]
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	f022 0210 	bic.w	r2, r2, #16
 800ec58:	601a      	str	r2, [r3, #0]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	2210      	movs	r2, #16
 800ec60:	621a      	str	r2, [r3, #32]
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f00e fca0 	bl	801d5a8 <HAL_UART_AbortReceive_IT>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	70fb      	strb	r3, [r7, #3]
 800ec6c:	78fb      	ldrb	r3, [r7, #3]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d003      	beq.n	800ec7a <USART1_IRQHandler+0x4a>
 800ec72:	21a7      	movs	r1, #167	@ 0xa7
 800ec74:	4805      	ldr	r0, [pc, #20]	@ (800ec8c <USART1_IRQHandler+0x5c>)
 800ec76:	f7ff f9e0 	bl	800e03a <cmr_panic>
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f00e fd62 	bl	801d744 <HAL_UART_IRQHandler>
 800ec80:	3708      	adds	r7, #8
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop
 800ec88:	2400f3c4 	.word	0x2400f3c4
 800ec8c:	08020a04 	.word	0x08020a04

0800ec90 <USART2_IRQHandler>:
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b082      	sub	sp, #8
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	4b14      	ldr	r3, [pc, #80]	@ (800ece8 <USART2_IRQHandler+0x58>)
 800ec98:	685b      	ldr	r3, [r3, #4]
 800ec9a:	607b      	str	r3, [r7, #4]
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	f003 0310 	and.w	r3, r3, #16
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d017      	beq.n	800ecda <USART2_IRQHandler+0x4a>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	681a      	ldr	r2, [r3, #0]
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	f022 0210 	bic.w	r2, r2, #16
 800ecb8:	601a      	str	r2, [r3, #0]
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	2210      	movs	r2, #16
 800ecc0:	621a      	str	r2, [r3, #32]
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f00e fc70 	bl	801d5a8 <HAL_UART_AbortReceive_IT>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	70fb      	strb	r3, [r7, #3]
 800eccc:	78fb      	ldrb	r3, [r7, #3]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d003      	beq.n	800ecda <USART2_IRQHandler+0x4a>
 800ecd2:	21a7      	movs	r1, #167	@ 0xa7
 800ecd4:	4805      	ldr	r0, [pc, #20]	@ (800ecec <USART2_IRQHandler+0x5c>)
 800ecd6:	f7ff f9b0 	bl	800e03a <cmr_panic>
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f00e fd32 	bl	801d744 <HAL_UART_IRQHandler>
 800ece0:	3708      	adds	r7, #8
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	2400f3c4 	.word	0x2400f3c4
 800ecec:	08020a04 	.word	0x08020a04

0800ecf0 <USART3_IRQHandler>:
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b082      	sub	sp, #8
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	4b14      	ldr	r3, [pc, #80]	@ (800ed48 <USART3_IRQHandler+0x58>)
 800ecf8:	689b      	ldr	r3, [r3, #8]
 800ecfa:	607b      	str	r3, [r7, #4]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	f003 0310 	and.w	r3, r3, #16
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d017      	beq.n	800ed3a <USART3_IRQHandler+0x4a>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	681a      	ldr	r2, [r3, #0]
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	f022 0210 	bic.w	r2, r2, #16
 800ed18:	601a      	str	r2, [r3, #0]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	2210      	movs	r2, #16
 800ed20:	621a      	str	r2, [r3, #32]
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f00e fc40 	bl	801d5a8 <HAL_UART_AbortReceive_IT>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	70fb      	strb	r3, [r7, #3]
 800ed2c:	78fb      	ldrb	r3, [r7, #3]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d003      	beq.n	800ed3a <USART3_IRQHandler+0x4a>
 800ed32:	21a7      	movs	r1, #167	@ 0xa7
 800ed34:	4805      	ldr	r0, [pc, #20]	@ (800ed4c <USART3_IRQHandler+0x5c>)
 800ed36:	f7ff f980 	bl	800e03a <cmr_panic>
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f00e fd02 	bl	801d744 <HAL_UART_IRQHandler>
 800ed40:	3708      	adds	r7, #8
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	bf00      	nop
 800ed48:	2400f3c4 	.word	0x2400f3c4
 800ed4c:	08020a04 	.word	0x08020a04

0800ed50 <UART4_IRQHandler>:
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b082      	sub	sp, #8
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	4b14      	ldr	r3, [pc, #80]	@ (800eda8 <UART4_IRQHandler+0x58>)
 800ed58:	68db      	ldr	r3, [r3, #12]
 800ed5a:	607b      	str	r3, [r7, #4]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	f003 0310 	and.w	r3, r3, #16
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d017      	beq.n	800ed9a <UART4_IRQHandler+0x4a>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	681a      	ldr	r2, [r3, #0]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f022 0210 	bic.w	r2, r2, #16
 800ed78:	601a      	str	r2, [r3, #0]
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	2210      	movs	r2, #16
 800ed80:	621a      	str	r2, [r3, #32]
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f00e fc10 	bl	801d5a8 <HAL_UART_AbortReceive_IT>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	70fb      	strb	r3, [r7, #3]
 800ed8c:	78fb      	ldrb	r3, [r7, #3]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d003      	beq.n	800ed9a <UART4_IRQHandler+0x4a>
 800ed92:	21a7      	movs	r1, #167	@ 0xa7
 800ed94:	4805      	ldr	r0, [pc, #20]	@ (800edac <UART4_IRQHandler+0x5c>)
 800ed96:	f7ff f950 	bl	800e03a <cmr_panic>
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f00e fcd2 	bl	801d744 <HAL_UART_IRQHandler>
 800eda0:	3708      	adds	r7, #8
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	2400f3c4 	.word	0x2400f3c4
 800edac:	08020a04 	.word	0x08020a04

0800edb0 <UART5_IRQHandler>:
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b082      	sub	sp, #8
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	4b14      	ldr	r3, [pc, #80]	@ (800ee08 <UART5_IRQHandler+0x58>)
 800edb8:	691b      	ldr	r3, [r3, #16]
 800edba:	607b      	str	r3, [r7, #4]
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	f003 0310 	and.w	r3, r3, #16
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d017      	beq.n	800edfa <UART5_IRQHandler+0x4a>
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	681a      	ldr	r2, [r3, #0]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	f022 0210 	bic.w	r2, r2, #16
 800edd8:	601a      	str	r2, [r3, #0]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	2210      	movs	r2, #16
 800ede0:	621a      	str	r2, [r3, #32]
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f00e fbe0 	bl	801d5a8 <HAL_UART_AbortReceive_IT>
 800ede8:	4603      	mov	r3, r0
 800edea:	70fb      	strb	r3, [r7, #3]
 800edec:	78fb      	ldrb	r3, [r7, #3]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d003      	beq.n	800edfa <UART5_IRQHandler+0x4a>
 800edf2:	21a7      	movs	r1, #167	@ 0xa7
 800edf4:	4805      	ldr	r0, [pc, #20]	@ (800ee0c <UART5_IRQHandler+0x5c>)
 800edf6:	f7ff f920 	bl	800e03a <cmr_panic>
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f00e fca2 	bl	801d744 <HAL_UART_IRQHandler>
 800ee00:	3708      	adds	r7, #8
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	2400f3c4 	.word	0x2400f3c4
 800ee0c:	08020a04 	.word	0x08020a04

0800ee10 <USART6_IRQHandler>:
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b082      	sub	sp, #8
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	4b14      	ldr	r3, [pc, #80]	@ (800ee68 <USART6_IRQHandler+0x58>)
 800ee18:	695b      	ldr	r3, [r3, #20]
 800ee1a:	607b      	str	r3, [r7, #4]
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f003 0310 	and.w	r3, r3, #16
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d017      	beq.n	800ee5a <USART6_IRQHandler+0x4a>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	681a      	ldr	r2, [r3, #0]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f022 0210 	bic.w	r2, r2, #16
 800ee38:	601a      	str	r2, [r3, #0]
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	2210      	movs	r2, #16
 800ee40:	621a      	str	r2, [r3, #32]
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f00e fbb0 	bl	801d5a8 <HAL_UART_AbortReceive_IT>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	70fb      	strb	r3, [r7, #3]
 800ee4c:	78fb      	ldrb	r3, [r7, #3]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d003      	beq.n	800ee5a <USART6_IRQHandler+0x4a>
 800ee52:	21a7      	movs	r1, #167	@ 0xa7
 800ee54:	4805      	ldr	r0, [pc, #20]	@ (800ee6c <USART6_IRQHandler+0x5c>)
 800ee56:	f7ff f8f0 	bl	800e03a <cmr_panic>
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f00e fc72 	bl	801d744 <HAL_UART_IRQHandler>
 800ee60:	3708      	adds	r7, #8
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
 800ee66:	bf00      	nop
 800ee68:	2400f3c4 	.word	0x2400f3c4
 800ee6c:	08020a04 	.word	0x08020a04

0800ee70 <UART7_IRQHandler>:
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b082      	sub	sp, #8
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	4b14      	ldr	r3, [pc, #80]	@ (800eec8 <UART7_IRQHandler+0x58>)
 800ee78:	699b      	ldr	r3, [r3, #24]
 800ee7a:	607b      	str	r3, [r7, #4]
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	f003 0310 	and.w	r3, r3, #16
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d017      	beq.n	800eeba <UART7_IRQHandler+0x4a>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f022 0210 	bic.w	r2, r2, #16
 800ee98:	601a      	str	r2, [r3, #0]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	2210      	movs	r2, #16
 800eea0:	621a      	str	r2, [r3, #32]
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f00e fb80 	bl	801d5a8 <HAL_UART_AbortReceive_IT>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	70fb      	strb	r3, [r7, #3]
 800eeac:	78fb      	ldrb	r3, [r7, #3]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d003      	beq.n	800eeba <UART7_IRQHandler+0x4a>
 800eeb2:	21a7      	movs	r1, #167	@ 0xa7
 800eeb4:	4805      	ldr	r0, [pc, #20]	@ (800eecc <UART7_IRQHandler+0x5c>)
 800eeb6:	f7ff f8c0 	bl	800e03a <cmr_panic>
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f00e fc42 	bl	801d744 <HAL_UART_IRQHandler>
 800eec0:	3708      	adds	r7, #8
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}
 800eec6:	bf00      	nop
 800eec8:	2400f3c4 	.word	0x2400f3c4
 800eecc:	08020a04 	.word	0x08020a04

0800eed0 <UART8_IRQHandler>:
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b082      	sub	sp, #8
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	4b14      	ldr	r3, [pc, #80]	@ (800ef28 <UART8_IRQHandler+0x58>)
 800eed8:	69db      	ldr	r3, [r3, #28]
 800eeda:	607b      	str	r3, [r7, #4]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f003 0310 	and.w	r3, r3, #16
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d017      	beq.n	800ef1a <UART8_IRQHandler+0x4a>
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	681a      	ldr	r2, [r3, #0]
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	f022 0210 	bic.w	r2, r2, #16
 800eef8:	601a      	str	r2, [r3, #0]
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	2210      	movs	r2, #16
 800ef00:	621a      	str	r2, [r3, #32]
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f00e fb50 	bl	801d5a8 <HAL_UART_AbortReceive_IT>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	70fb      	strb	r3, [r7, #3]
 800ef0c:	78fb      	ldrb	r3, [r7, #3]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d003      	beq.n	800ef1a <UART8_IRQHandler+0x4a>
 800ef12:	21a7      	movs	r1, #167	@ 0xa7
 800ef14:	4805      	ldr	r0, [pc, #20]	@ (800ef2c <UART8_IRQHandler+0x5c>)
 800ef16:	f7ff f890 	bl	800e03a <cmr_panic>
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f00e fc12 	bl	801d744 <HAL_UART_IRQHandler>
 800ef20:	3708      	adds	r7, #8
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}
 800ef26:	bf00      	nop
 800ef28:	2400f3c4 	.word	0x2400f3c4
 800ef2c:	08020a04 	.word	0x08020a04

0800ef30 <UART9_IRQHandler>:
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	4b14      	ldr	r3, [pc, #80]	@ (800ef88 <UART9_IRQHandler+0x58>)
 800ef38:	6a1b      	ldr	r3, [r3, #32]
 800ef3a:	607b      	str	r3, [r7, #4]
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	f003 0310 	and.w	r3, r3, #16
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d017      	beq.n	800ef7a <UART9_IRQHandler+0x4a>
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	681a      	ldr	r2, [r3, #0]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f022 0210 	bic.w	r2, r2, #16
 800ef58:	601a      	str	r2, [r3, #0]
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	2210      	movs	r2, #16
 800ef60:	621a      	str	r2, [r3, #32]
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f00e fb20 	bl	801d5a8 <HAL_UART_AbortReceive_IT>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	70fb      	strb	r3, [r7, #3]
 800ef6c:	78fb      	ldrb	r3, [r7, #3]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d003      	beq.n	800ef7a <UART9_IRQHandler+0x4a>
 800ef72:	21a7      	movs	r1, #167	@ 0xa7
 800ef74:	4805      	ldr	r0, [pc, #20]	@ (800ef8c <UART9_IRQHandler+0x5c>)
 800ef76:	f7ff f860 	bl	800e03a <cmr_panic>
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f00e fbe2 	bl	801d744 <HAL_UART_IRQHandler>
 800ef80:	3708      	adds	r7, #8
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
 800ef86:	bf00      	nop
 800ef88:	2400f3c4 	.word	0x2400f3c4
 800ef8c:	08020a04 	.word	0x08020a04

0800ef90 <USART10_IRQHandler>:
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b082      	sub	sp, #8
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	4b14      	ldr	r3, [pc, #80]	@ (800efe8 <USART10_IRQHandler+0x58>)
 800ef98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef9a:	607b      	str	r3, [r7, #4]
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f003 0310 	and.w	r3, r3, #16
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d017      	beq.n	800efda <USART10_IRQHandler+0x4a>
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	681a      	ldr	r2, [r3, #0]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	f022 0210 	bic.w	r2, r2, #16
 800efb8:	601a      	str	r2, [r3, #0]
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	2210      	movs	r2, #16
 800efc0:	621a      	str	r2, [r3, #32]
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f00e faf0 	bl	801d5a8 <HAL_UART_AbortReceive_IT>
 800efc8:	4603      	mov	r3, r0
 800efca:	70fb      	strb	r3, [r7, #3]
 800efcc:	78fb      	ldrb	r3, [r7, #3]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d003      	beq.n	800efda <USART10_IRQHandler+0x4a>
 800efd2:	21a7      	movs	r1, #167	@ 0xa7
 800efd4:	4805      	ldr	r0, [pc, #20]	@ (800efec <USART10_IRQHandler+0x5c>)
 800efd6:	f7ff f830 	bl	800e03a <cmr_panic>
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f00e fbb2 	bl	801d744 <HAL_UART_IRQHandler>
 800efe0:	3708      	adds	r7, #8
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
 800efe6:	bf00      	nop
 800efe8:	2400f3c4 	.word	0x2400f3c4
 800efec:	08020a04 	.word	0x08020a04

0800eff0 <cmr_uartFromHandle>:
 *
 * @param handle The handle.
 *
 * @return The interface.
 */
static cmr_uart_t *cmr_uartFromHandle(UART_HandleTypeDef *handle) {
 800eff0:	b480      	push	{r7}
 800eff2:	b085      	sub	sp, #20
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
    char *addr = (void *) handle;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	60fb      	str	r3, [r7, #12]
    return (void *) (addr - offsetof(cmr_uart_t, handle));
 800effc:	68fb      	ldr	r3, [r7, #12]
}
 800effe:	4618      	mov	r0, r3
 800f000:	3714      	adds	r7, #20
 800f002:	46bd      	mov	sp, r7
 800f004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f008:	4770      	bx	lr
	...

0800f00c <HAL_UART_TxCpltCallback>:
 * @warning Called from an interrupt handler!
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *handle) {
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b086      	sub	sp, #24
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
    cmr_uart_t *uart = cmr_uartFromHandle(handle);
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f7ff ffeb 	bl	800eff0 <cmr_uartFromHandle>
 800f01a:	6178      	str	r0, [r7, #20]

    BaseType_t higherWoken;
    cmr_uartMsg_t *msg;
    if (xQueueReceiveFromISR(uart->tx.q, &msg, &higherWoken) != pdTRUE) {
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 800f022:	f107 020c 	add.w	r2, r7, #12
 800f026:	f107 0108 	add.w	r1, r7, #8
 800f02a:	4618      	mov	r0, r3
 800f02c:	f000 fe66 	bl	800fcfc <xQueueReceiveFromISR>
 800f030:	4603      	mov	r3, r0
 800f032:	2b01      	cmp	r3, #1
 800f034:	d002      	beq.n	800f03c <HAL_UART_TxCpltCallback+0x30>
        cmr_panic("HAL UART TX completion handler called with empty queue!");
 800f036:	4831      	ldr	r0, [pc, #196]	@ (800f0fc <HAL_UART_TxCpltCallback+0xf0>)
 800f038:	f7fe ffff 	bl	800e03a <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d007      	beq.n	800f052 <HAL_UART_TxCpltCallback+0x46>
 800f042:	4b2f      	ldr	r3, [pc, #188]	@ (800f100 <HAL_UART_TxCpltCallback+0xf4>)
 800f044:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f048:	601a      	str	r2, [r3, #0]
 800f04a:	f3bf 8f4f 	dsb	sy
 800f04e:	f3bf 8f6f 	isb	sy

    // Signal message as done.
    if (xSemaphoreGiveFromISR(msg->doneSem, &higherWoken) != pdTRUE) {
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	f107 020c 	add.w	r2, r7, #12
 800f05a:	4611      	mov	r1, r2
 800f05c:	4618      	mov	r0, r3
 800f05e:	f000 fcd3 	bl	800fa08 <xQueueGiveFromISR>
 800f062:	4603      	mov	r3, r0
 800f064:	2b01      	cmp	r3, #1
 800f066:	d002      	beq.n	800f06e <HAL_UART_TxCpltCallback+0x62>
        cmr_panic("HAL UART TX completion handler failed to signal message!");
 800f068:	4826      	ldr	r0, [pc, #152]	@ (800f104 <HAL_UART_TxCpltCallback+0xf8>)
 800f06a:	f7fe ffe6 	bl	800e03a <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d007      	beq.n	800f084 <HAL_UART_TxCpltCallback+0x78>
 800f074:	4b22      	ldr	r3, [pc, #136]	@ (800f100 <HAL_UART_TxCpltCallback+0xf4>)
 800f076:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f07a:	601a      	str	r2, [r3, #0]
 800f07c:	f3bf 8f4f 	dsb	sy
 800f080:	f3bf 8f6f 	isb	sy

    if (xQueuePeekFromISR(uart->tx.q, &msg) != pdTRUE) {
 800f084:	697b      	ldr	r3, [r7, #20]
 800f086:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 800f08a:	f107 0208 	add.w	r2, r7, #8
 800f08e:	4611      	mov	r1, r2
 800f090:	4618      	mov	r0, r3
 800f092:	f000 fea5 	bl	800fde0 <xQueuePeekFromISR>
 800f096:	4603      	mov	r3, r0
 800f098:	2b01      	cmp	r3, #1
 800f09a:	d01a      	beq.n	800f0d2 <HAL_UART_TxCpltCallback+0xc6>
        // No more messages pending; release DMA semaphore.
        if (xSemaphoreGiveFromISR(uart->tx.dmaSem, &higherWoken) != pdTRUE) {
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800f0a2:	f107 020c 	add.w	r2, r7, #12
 800f0a6:	4611      	mov	r1, r2
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f000 fcad 	bl	800fa08 <xQueueGiveFromISR>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	2b01      	cmp	r3, #1
 800f0b2:	d002      	beq.n	800f0ba <HAL_UART_TxCpltCallback+0xae>
            cmr_panic("HAL UART TX completion handler failed to release DMA!");
 800f0b4:	4814      	ldr	r0, [pc, #80]	@ (800f108 <HAL_UART_TxCpltCallback+0xfc>)
 800f0b6:	f7fe ffc0 	bl	800e03a <cmr_panic>
        }
        portYIELD_FROM_ISR(higherWoken);
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d019      	beq.n	800f0f4 <HAL_UART_TxCpltCallback+0xe8>
 800f0c0:	4b0f      	ldr	r3, [pc, #60]	@ (800f100 <HAL_UART_TxCpltCallback+0xf4>)
 800f0c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0c6:	601a      	str	r2, [r3, #0]
 800f0c8:	f3bf 8f4f 	dsb	sy
 800f0cc:	f3bf 8f6f 	isb	sy
 800f0d0:	e011      	b.n	800f0f6 <HAL_UART_TxCpltCallback+0xea>
        return;
    }

    // Message pending; start DMA.
    HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(
 800f0d2:	6978      	ldr	r0, [r7, #20]
        &uart->handle, msg->data, msg->len
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(
 800f0dc:	b29b      	uxth	r3, r3
 800f0de:	461a      	mov	r2, r3
 800f0e0:	f00e f996 	bl	801d410 <HAL_UART_Transmit_DMA>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	74fb      	strb	r3, [r7, #19]
    );
    if (status != HAL_OK) {
 800f0e8:	7cfb      	ldrb	r3, [r7, #19]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d003      	beq.n	800f0f6 <HAL_UART_TxCpltCallback+0xea>
        cmr_panic("HAL UART TX failed!");
 800f0ee:	4807      	ldr	r0, [pc, #28]	@ (800f10c <HAL_UART_TxCpltCallback+0x100>)
 800f0f0:	f7fe ffa3 	bl	800e03a <cmr_panic>
        return;
 800f0f4:	bf00      	nop
    }
}
 800f0f6:	3718      	adds	r7, #24
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}
 800f0fc:	08020a4c 	.word	0x08020a4c
 800f100:	e000ed04 	.word	0xe000ed04
 800f104:	08020a84 	.word	0x08020a84
 800f108:	08020ac0 	.word	0x08020ac0
 800f10c:	08020af8 	.word	0x08020af8

0800f110 <HAL_UART_RxCpltCallback>:
 * @warning Called from an interrupt handler!
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL UART handle.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *handle) {
 800f110:	b580      	push	{r7, lr}
 800f112:	b088      	sub	sp, #32
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
    cmr_uart_t *uart = cmr_uartFromHandle(handle);
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f7ff ff69 	bl	800eff0 <cmr_uartFromHandle>
 800f11e:	61f8      	str	r0, [r7, #28]

    BaseType_t higherWoken;
    cmr_uartMsg_t *msg;
    if (xQueueReceiveFromISR(uart->rx.q, &msg, &higherWoken) != pdTRUE) {
 800f120:	69fb      	ldr	r3, [r7, #28]
 800f122:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800f126:	f107 0210 	add.w	r2, r7, #16
 800f12a:	f107 010c 	add.w	r1, r7, #12
 800f12e:	4618      	mov	r0, r3
 800f130:	f000 fde4 	bl	800fcfc <xQueueReceiveFromISR>
 800f134:	4603      	mov	r3, r0
 800f136:	2b01      	cmp	r3, #1
 800f138:	d002      	beq.n	800f140 <HAL_UART_RxCpltCallback+0x30>
        cmr_panic("HAL UART RX completion handler called with empty queue!");
 800f13a:	4875      	ldr	r0, [pc, #468]	@ (800f310 <HAL_UART_RxCpltCallback+0x200>)
 800f13c:	f7fe ff7d 	bl	800e03a <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d007      	beq.n	800f156 <HAL_UART_RxCpltCallback+0x46>
 800f146:	4b73      	ldr	r3, [pc, #460]	@ (800f314 <HAL_UART_RxCpltCallback+0x204>)
 800f148:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f14c:	601a      	str	r2, [r3, #0]
 800f14e:	f3bf 8f4f 	dsb	sy
 800f152:	f3bf 8f6f 	isb	sy

    // Record actual number of bytes received.
    size_t remLen = __HAL_DMA_GET_COUNTER(&uart->rx.dma);
 800f156:	69fb      	ldr	r3, [r7, #28]
 800f158:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f15c:	4a6e      	ldr	r2, [pc, #440]	@ (800f318 <HAL_UART_RxCpltCallback+0x208>)
 800f15e:	4293      	cmp	r3, r2
 800f160:	d059      	beq.n	800f216 <HAL_UART_RxCpltCallback+0x106>
 800f162:	69fb      	ldr	r3, [r7, #28]
 800f164:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f168:	4a6c      	ldr	r2, [pc, #432]	@ (800f31c <HAL_UART_RxCpltCallback+0x20c>)
 800f16a:	4293      	cmp	r3, r2
 800f16c:	d053      	beq.n	800f216 <HAL_UART_RxCpltCallback+0x106>
 800f16e:	69fb      	ldr	r3, [r7, #28]
 800f170:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f174:	4a6a      	ldr	r2, [pc, #424]	@ (800f320 <HAL_UART_RxCpltCallback+0x210>)
 800f176:	4293      	cmp	r3, r2
 800f178:	d04d      	beq.n	800f216 <HAL_UART_RxCpltCallback+0x106>
 800f17a:	69fb      	ldr	r3, [r7, #28]
 800f17c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f180:	4a68      	ldr	r2, [pc, #416]	@ (800f324 <HAL_UART_RxCpltCallback+0x214>)
 800f182:	4293      	cmp	r3, r2
 800f184:	d047      	beq.n	800f216 <HAL_UART_RxCpltCallback+0x106>
 800f186:	69fb      	ldr	r3, [r7, #28]
 800f188:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f18c:	4a66      	ldr	r2, [pc, #408]	@ (800f328 <HAL_UART_RxCpltCallback+0x218>)
 800f18e:	4293      	cmp	r3, r2
 800f190:	d041      	beq.n	800f216 <HAL_UART_RxCpltCallback+0x106>
 800f192:	69fb      	ldr	r3, [r7, #28]
 800f194:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f198:	4a64      	ldr	r2, [pc, #400]	@ (800f32c <HAL_UART_RxCpltCallback+0x21c>)
 800f19a:	4293      	cmp	r3, r2
 800f19c:	d03b      	beq.n	800f216 <HAL_UART_RxCpltCallback+0x106>
 800f19e:	69fb      	ldr	r3, [r7, #28]
 800f1a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f1a4:	4a62      	ldr	r2, [pc, #392]	@ (800f330 <HAL_UART_RxCpltCallback+0x220>)
 800f1a6:	4293      	cmp	r3, r2
 800f1a8:	d035      	beq.n	800f216 <HAL_UART_RxCpltCallback+0x106>
 800f1aa:	69fb      	ldr	r3, [r7, #28]
 800f1ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f1b0:	4a60      	ldr	r2, [pc, #384]	@ (800f334 <HAL_UART_RxCpltCallback+0x224>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d02f      	beq.n	800f216 <HAL_UART_RxCpltCallback+0x106>
 800f1b6:	69fb      	ldr	r3, [r7, #28]
 800f1b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f1bc:	4a5e      	ldr	r2, [pc, #376]	@ (800f338 <HAL_UART_RxCpltCallback+0x228>)
 800f1be:	4293      	cmp	r3, r2
 800f1c0:	d029      	beq.n	800f216 <HAL_UART_RxCpltCallback+0x106>
 800f1c2:	69fb      	ldr	r3, [r7, #28]
 800f1c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f1c8:	4a5c      	ldr	r2, [pc, #368]	@ (800f33c <HAL_UART_RxCpltCallback+0x22c>)
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	d023      	beq.n	800f216 <HAL_UART_RxCpltCallback+0x106>
 800f1ce:	69fb      	ldr	r3, [r7, #28]
 800f1d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f1d4:	4a5a      	ldr	r2, [pc, #360]	@ (800f340 <HAL_UART_RxCpltCallback+0x230>)
 800f1d6:	4293      	cmp	r3, r2
 800f1d8:	d01d      	beq.n	800f216 <HAL_UART_RxCpltCallback+0x106>
 800f1da:	69fb      	ldr	r3, [r7, #28]
 800f1dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f1e0:	4a58      	ldr	r2, [pc, #352]	@ (800f344 <HAL_UART_RxCpltCallback+0x234>)
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	d017      	beq.n	800f216 <HAL_UART_RxCpltCallback+0x106>
 800f1e6:	69fb      	ldr	r3, [r7, #28]
 800f1e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f1ec:	4a56      	ldr	r2, [pc, #344]	@ (800f348 <HAL_UART_RxCpltCallback+0x238>)
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d011      	beq.n	800f216 <HAL_UART_RxCpltCallback+0x106>
 800f1f2:	69fb      	ldr	r3, [r7, #28]
 800f1f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f1f8:	4a54      	ldr	r2, [pc, #336]	@ (800f34c <HAL_UART_RxCpltCallback+0x23c>)
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d00b      	beq.n	800f216 <HAL_UART_RxCpltCallback+0x106>
 800f1fe:	69fb      	ldr	r3, [r7, #28]
 800f200:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f204:	4a52      	ldr	r2, [pc, #328]	@ (800f350 <HAL_UART_RxCpltCallback+0x240>)
 800f206:	4293      	cmp	r3, r2
 800f208:	d005      	beq.n	800f216 <HAL_UART_RxCpltCallback+0x106>
 800f20a:	69fb      	ldr	r3, [r7, #28]
 800f20c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f210:	4a50      	ldr	r2, [pc, #320]	@ (800f354 <HAL_UART_RxCpltCallback+0x244>)
 800f212:	4293      	cmp	r3, r2
 800f214:	d104      	bne.n	800f220 <HAL_UART_RxCpltCallback+0x110>
 800f216:	69fb      	ldr	r3, [r7, #28]
 800f218:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	e003      	b.n	800f228 <HAL_UART_RxCpltCallback+0x118>
 800f220:	69fb      	ldr	r3, [r7, #28]
 800f222:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	61bb      	str	r3, [r7, #24]
    configASSERT(remLen <= msg->len);
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f22e:	69ba      	ldr	r2, [r7, #24]
 800f230:	429a      	cmp	r2, r3
 800f232:	d903      	bls.n	800f23c <HAL_UART_RxCpltCallback+0x12c>
 800f234:	21f6      	movs	r1, #246	@ 0xf6
 800f236:	4848      	ldr	r0, [pc, #288]	@ (800f358 <HAL_UART_RxCpltCallback+0x248>)
 800f238:	f7fe feff 	bl	800e03a <cmr_panic>
    msg->len -= remLen;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	69ba      	ldr	r2, [r7, #24]
 800f244:	1a8a      	subs	r2, r1, r2
 800f246:	651a      	str	r2, [r3, #80]	@ 0x50

    // Signal message as done.
    if (xSemaphoreGiveFromISR(msg->doneSem, &higherWoken) != pdTRUE) {
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	f107 0210 	add.w	r2, r7, #16
 800f250:	4611      	mov	r1, r2
 800f252:	4618      	mov	r0, r3
 800f254:	f000 fbd8 	bl	800fa08 <xQueueGiveFromISR>
 800f258:	4603      	mov	r3, r0
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	d002      	beq.n	800f264 <HAL_UART_RxCpltCallback+0x154>
        cmr_panic("HAL UART RX completion handler failed to signal message!");
 800f25e:	483f      	ldr	r0, [pc, #252]	@ (800f35c <HAL_UART_RxCpltCallback+0x24c>)
 800f260:	f7fe feeb 	bl	800e03a <cmr_panic>
    }
    portYIELD_FROM_ISR(higherWoken);
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d007      	beq.n	800f27a <HAL_UART_RxCpltCallback+0x16a>
 800f26a:	4b2a      	ldr	r3, [pc, #168]	@ (800f314 <HAL_UART_RxCpltCallback+0x204>)
 800f26c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f270:	601a      	str	r2, [r3, #0]
 800f272:	f3bf 8f4f 	dsb	sy
 800f276:	f3bf 8f6f 	isb	sy

    if (xQueuePeekFromISR(uart->rx.q, &msg) != pdTRUE) {
 800f27a:	69fb      	ldr	r3, [r7, #28]
 800f27c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800f280:	f107 020c 	add.w	r2, r7, #12
 800f284:	4611      	mov	r1, r2
 800f286:	4618      	mov	r0, r3
 800f288:	f000 fdaa 	bl	800fde0 <xQueuePeekFromISR>
 800f28c:	4603      	mov	r3, r0
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d01a      	beq.n	800f2c8 <HAL_UART_RxCpltCallback+0x1b8>
        // No more messages pending; release DMA semaphore.
        if (xSemaphoreGiveFromISR(uart->rx.dmaSem, &higherWoken) != pdTRUE) {
 800f292:	69fb      	ldr	r3, [r7, #28]
 800f294:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800f298:	f107 0210 	add.w	r2, r7, #16
 800f29c:	4611      	mov	r1, r2
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f000 fbb2 	bl	800fa08 <xQueueGiveFromISR>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	2b01      	cmp	r3, #1
 800f2a8:	d002      	beq.n	800f2b0 <HAL_UART_RxCpltCallback+0x1a0>
            cmr_panic("HAL UART RX completion handler failed to release DMA!");
 800f2aa:	482d      	ldr	r0, [pc, #180]	@ (800f360 <HAL_UART_RxCpltCallback+0x250>)
 800f2ac:	f7fe fec5 	bl	800e03a <cmr_panic>
        }
        portYIELD_FROM_ISR(higherWoken);
 800f2b0:	693b      	ldr	r3, [r7, #16]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d028      	beq.n	800f308 <HAL_UART_RxCpltCallback+0x1f8>
 800f2b6:	4b17      	ldr	r3, [pc, #92]	@ (800f314 <HAL_UART_RxCpltCallback+0x204>)
 800f2b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2bc:	601a      	str	r2, [r3, #0]
 800f2be:	f3bf 8f4f 	dsb	sy
 800f2c2:	f3bf 8f6f 	isb	sy
 800f2c6:	e020      	b.n	800f30a <HAL_UART_RxCpltCallback+0x1fa>
        return;
    }

    // Message pending; start DMA.
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(
 800f2c8:	69f8      	ldr	r0, [r7, #28]
        &uart->handle, msg->data, msg->len
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(
 800f2d2:	b29b      	uxth	r3, r3
 800f2d4:	461a      	mov	r2, r3
 800f2d6:	f00e f91b 	bl	801d510 <HAL_UART_Receive_DMA>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	75fb      	strb	r3, [r7, #23]
    );
    if (status != HAL_OK) {
 800f2de:	7dfb      	ldrb	r3, [r7, #23]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d002      	beq.n	800f2ea <HAL_UART_RxCpltCallback+0x1da>
        cmr_panic("HAL UART RX failed!");
 800f2e4:	481f      	ldr	r0, [pc, #124]	@ (800f364 <HAL_UART_RxCpltCallback+0x254>)
 800f2e6:	f7fe fea8 	bl	800e03a <cmr_panic>
    }

    if (msg->opts & CMR_UART_RXOPTS_IDLEABORT) {
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f2ee:	f003 0301 	and.w	r3, r3, #1
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d009      	beq.n	800f30a <HAL_UART_RxCpltCallback+0x1fa>
        // Enable idle line detection.
        __HAL_UART_ENABLE_IT(&uart->handle, UART_IT_IDLE);
 800f2f6:	69fb      	ldr	r3, [r7, #28]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	681a      	ldr	r2, [r3, #0]
 800f2fc:	69fb      	ldr	r3, [r7, #28]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	f042 0210 	orr.w	r2, r2, #16
 800f304:	601a      	str	r2, [r3, #0]
 800f306:	e000      	b.n	800f30a <HAL_UART_RxCpltCallback+0x1fa>
        return;
 800f308:	bf00      	nop
    }
}
 800f30a:	3720      	adds	r7, #32
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}
 800f310:	08020b0c 	.word	0x08020b0c
 800f314:	e000ed04 	.word	0xe000ed04
 800f318:	40020010 	.word	0x40020010
 800f31c:	40020028 	.word	0x40020028
 800f320:	40020040 	.word	0x40020040
 800f324:	40020058 	.word	0x40020058
 800f328:	40020070 	.word	0x40020070
 800f32c:	40020088 	.word	0x40020088
 800f330:	400200a0 	.word	0x400200a0
 800f334:	400200b8 	.word	0x400200b8
 800f338:	40020410 	.word	0x40020410
 800f33c:	40020428 	.word	0x40020428
 800f340:	40020440 	.word	0x40020440
 800f344:	40020458 	.word	0x40020458
 800f348:	40020470 	.word	0x40020470
 800f34c:	40020488 	.word	0x40020488
 800f350:	400204a0 	.word	0x400204a0
 800f354:	400204b8 	.word	0x400204b8
 800f358:	08020b44 	.word	0x08020b44
 800f35c:	08020b90 	.word	0x08020b90
 800f360:	08020bcc 	.word	0x08020bcc
 800f364:	08020c04 	.word	0x08020c04

0800f368 <HAL_UART_AbortReceiveCpltCallback>:
 * @warning Called from an interrupt handler!
 * @warning The handle must have been configured through this library!
 *
 * @param handle The HAL UART handle.
 */
void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *handle) {
 800f368:	b580      	push	{r7, lr}
 800f36a:	b082      	sub	sp, #8
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
    // Receive aborted; treat as completion.
    HAL_UART_RxCpltCallback(handle);
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f7ff fecd 	bl	800f110 <HAL_UART_RxCpltCallback>
}
 800f376:	bf00      	nop
 800f378:	3708      	adds	r7, #8
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}
	...

0800f380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800f380:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800f3b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800f384:	f000 f826 	bl	800f3d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800f388:	480c      	ldr	r0, [pc, #48]	@ (800f3bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800f38a:	490d      	ldr	r1, [pc, #52]	@ (800f3c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800f38c:	4a0d      	ldr	r2, [pc, #52]	@ (800f3c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800f38e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800f390:	e002      	b.n	800f398 <LoopCopyDataInit>

0800f392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800f392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800f394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800f396:	3304      	adds	r3, #4

0800f398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800f398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800f39a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800f39c:	d3f9      	bcc.n	800f392 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800f39e:	4a0a      	ldr	r2, [pc, #40]	@ (800f3c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800f3a0:	4c0a      	ldr	r4, [pc, #40]	@ (800f3cc <LoopFillZerobss+0x22>)
  movs r3, #0
 800f3a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800f3a4:	e001      	b.n	800f3aa <LoopFillZerobss>

0800f3a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800f3a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800f3a8:	3204      	adds	r2, #4

0800f3aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800f3aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800f3ac:	d3fb      	bcc.n	800f3a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800f3ae:	f00f f8e9 	bl	801e584 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f3b2:	f7f6 fc99 	bl	8005ce8 <main>
  bx  lr
 800f3b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800f3b8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800f3bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800f3c0:	24000910 	.word	0x24000910
  ldr r2, =_sidata
 800f3c4:	08045310 	.word	0x08045310
  ldr r2, =_sbss
 800f3c8:	24000910 	.word	0x24000910
  ldr r4, =_ebss
 800f3cc:	2400f690 	.word	0x2400f690

0800f3d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f3d0:	e7fe      	b.n	800f3d0 <ADC3_IRQHandler>
	...

0800f3d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800f3d4:	b480      	push	{r7}
 800f3d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800f3d8:	4b32      	ldr	r3, [pc, #200]	@ (800f4a4 <SystemInit+0xd0>)
 800f3da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f3de:	4a31      	ldr	r2, [pc, #196]	@ (800f4a4 <SystemInit+0xd0>)
 800f3e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f3e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800f3e8:	4b2f      	ldr	r3, [pc, #188]	@ (800f4a8 <SystemInit+0xd4>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	f003 030f 	and.w	r3, r3, #15
 800f3f0:	2b06      	cmp	r3, #6
 800f3f2:	d807      	bhi.n	800f404 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800f3f4:	4b2c      	ldr	r3, [pc, #176]	@ (800f4a8 <SystemInit+0xd4>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f023 030f 	bic.w	r3, r3, #15
 800f3fc:	4a2a      	ldr	r2, [pc, #168]	@ (800f4a8 <SystemInit+0xd4>)
 800f3fe:	f043 0307 	orr.w	r3, r3, #7
 800f402:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800f404:	4b29      	ldr	r3, [pc, #164]	@ (800f4ac <SystemInit+0xd8>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	4a28      	ldr	r2, [pc, #160]	@ (800f4ac <SystemInit+0xd8>)
 800f40a:	f043 0301 	orr.w	r3, r3, #1
 800f40e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800f410:	4b26      	ldr	r3, [pc, #152]	@ (800f4ac <SystemInit+0xd8>)
 800f412:	2200      	movs	r2, #0
 800f414:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800f416:	4b25      	ldr	r3, [pc, #148]	@ (800f4ac <SystemInit+0xd8>)
 800f418:	681a      	ldr	r2, [r3, #0]
 800f41a:	4924      	ldr	r1, [pc, #144]	@ (800f4ac <SystemInit+0xd8>)
 800f41c:	4b24      	ldr	r3, [pc, #144]	@ (800f4b0 <SystemInit+0xdc>)
 800f41e:	4013      	ands	r3, r2
 800f420:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800f422:	4b21      	ldr	r3, [pc, #132]	@ (800f4a8 <SystemInit+0xd4>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	f003 0308 	and.w	r3, r3, #8
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d007      	beq.n	800f43e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800f42e:	4b1e      	ldr	r3, [pc, #120]	@ (800f4a8 <SystemInit+0xd4>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	f023 030f 	bic.w	r3, r3, #15
 800f436:	4a1c      	ldr	r2, [pc, #112]	@ (800f4a8 <SystemInit+0xd4>)
 800f438:	f043 0307 	orr.w	r3, r3, #7
 800f43c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800f43e:	4b1b      	ldr	r3, [pc, #108]	@ (800f4ac <SystemInit+0xd8>)
 800f440:	2200      	movs	r2, #0
 800f442:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800f444:	4b19      	ldr	r3, [pc, #100]	@ (800f4ac <SystemInit+0xd8>)
 800f446:	2200      	movs	r2, #0
 800f448:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800f44a:	4b18      	ldr	r3, [pc, #96]	@ (800f4ac <SystemInit+0xd8>)
 800f44c:	2200      	movs	r2, #0
 800f44e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800f450:	4b16      	ldr	r3, [pc, #88]	@ (800f4ac <SystemInit+0xd8>)
 800f452:	4a18      	ldr	r2, [pc, #96]	@ (800f4b4 <SystemInit+0xe0>)
 800f454:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800f456:	4b15      	ldr	r3, [pc, #84]	@ (800f4ac <SystemInit+0xd8>)
 800f458:	4a17      	ldr	r2, [pc, #92]	@ (800f4b8 <SystemInit+0xe4>)
 800f45a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800f45c:	4b13      	ldr	r3, [pc, #76]	@ (800f4ac <SystemInit+0xd8>)
 800f45e:	4a17      	ldr	r2, [pc, #92]	@ (800f4bc <SystemInit+0xe8>)
 800f460:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800f462:	4b12      	ldr	r3, [pc, #72]	@ (800f4ac <SystemInit+0xd8>)
 800f464:	2200      	movs	r2, #0
 800f466:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800f468:	4b10      	ldr	r3, [pc, #64]	@ (800f4ac <SystemInit+0xd8>)
 800f46a:	4a14      	ldr	r2, [pc, #80]	@ (800f4bc <SystemInit+0xe8>)
 800f46c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800f46e:	4b0f      	ldr	r3, [pc, #60]	@ (800f4ac <SystemInit+0xd8>)
 800f470:	2200      	movs	r2, #0
 800f472:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800f474:	4b0d      	ldr	r3, [pc, #52]	@ (800f4ac <SystemInit+0xd8>)
 800f476:	4a11      	ldr	r2, [pc, #68]	@ (800f4bc <SystemInit+0xe8>)
 800f478:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800f47a:	4b0c      	ldr	r3, [pc, #48]	@ (800f4ac <SystemInit+0xd8>)
 800f47c:	2200      	movs	r2, #0
 800f47e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800f480:	4b0a      	ldr	r3, [pc, #40]	@ (800f4ac <SystemInit+0xd8>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	4a09      	ldr	r2, [pc, #36]	@ (800f4ac <SystemInit+0xd8>)
 800f486:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f48a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800f48c:	4b07      	ldr	r3, [pc, #28]	@ (800f4ac <SystemInit+0xd8>)
 800f48e:	2200      	movs	r2, #0
 800f490:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800f492:	4b0b      	ldr	r3, [pc, #44]	@ (800f4c0 <SystemInit+0xec>)
 800f494:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800f498:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800f49a:	bf00      	nop
 800f49c:	46bd      	mov	sp, r7
 800f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a2:	4770      	bx	lr
 800f4a4:	e000ed00 	.word	0xe000ed00
 800f4a8:	52002000 	.word	0x52002000
 800f4ac:	58024400 	.word	0x58024400
 800f4b0:	eaf6ed7f 	.word	0xeaf6ed7f
 800f4b4:	02020200 	.word	0x02020200
 800f4b8:	01ff0000 	.word	0x01ff0000
 800f4bc:	01010280 	.word	0x01010280
 800f4c0:	52004000 	.word	0x52004000

0800f4c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f4c4:	b480      	push	{r7}
 800f4c6:	b083      	sub	sp, #12
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f103 0208 	add.w	r2, r3, #8
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f4dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f103 0208 	add.w	r2, r3, #8
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f103 0208 	add.w	r2, r3, #8
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f4f8:	bf00      	nop
 800f4fa:	370c      	adds	r7, #12
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr

0800f504 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f504:	b480      	push	{r7}
 800f506:	b083      	sub	sp, #12
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2200      	movs	r2, #0
 800f510:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f512:	bf00      	nop
 800f514:	370c      	adds	r7, #12
 800f516:	46bd      	mov	sp, r7
 800f518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51c:	4770      	bx	lr

0800f51e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f51e:	b480      	push	{r7}
 800f520:	b085      	sub	sp, #20
 800f522:	af00      	add	r7, sp, #0
 800f524:	6078      	str	r0, [r7, #4]
 800f526:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	685b      	ldr	r3, [r3, #4]
 800f52c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	68fa      	ldr	r2, [r7, #12]
 800f532:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	689a      	ldr	r2, [r3, #8]
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	689b      	ldr	r3, [r3, #8]
 800f540:	683a      	ldr	r2, [r7, #0]
 800f542:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	683a      	ldr	r2, [r7, #0]
 800f548:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	687a      	ldr	r2, [r7, #4]
 800f54e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	1c5a      	adds	r2, r3, #1
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	601a      	str	r2, [r3, #0]
}
 800f55a:	bf00      	nop
 800f55c:	3714      	adds	r7, #20
 800f55e:	46bd      	mov	sp, r7
 800f560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f564:	4770      	bx	lr

0800f566 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f566:	b480      	push	{r7}
 800f568:	b085      	sub	sp, #20
 800f56a:	af00      	add	r7, sp, #0
 800f56c:	6078      	str	r0, [r7, #4]
 800f56e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f57c:	d103      	bne.n	800f586 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	691b      	ldr	r3, [r3, #16]
 800f582:	60fb      	str	r3, [r7, #12]
 800f584:	e00c      	b.n	800f5a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	3308      	adds	r3, #8
 800f58a:	60fb      	str	r3, [r7, #12]
 800f58c:	e002      	b.n	800f594 <vListInsert+0x2e>
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	685b      	ldr	r3, [r3, #4]
 800f592:	60fb      	str	r3, [r7, #12]
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	685b      	ldr	r3, [r3, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	68ba      	ldr	r2, [r7, #8]
 800f59c:	429a      	cmp	r2, r3
 800f59e:	d2f6      	bcs.n	800f58e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	685a      	ldr	r2, [r3, #4]
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	685b      	ldr	r3, [r3, #4]
 800f5ac:	683a      	ldr	r2, [r7, #0]
 800f5ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	68fa      	ldr	r2, [r7, #12]
 800f5b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	683a      	ldr	r2, [r7, #0]
 800f5ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	687a      	ldr	r2, [r7, #4]
 800f5c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	1c5a      	adds	r2, r3, #1
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	601a      	str	r2, [r3, #0]
}
 800f5cc:	bf00      	nop
 800f5ce:	3714      	adds	r7, #20
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d6:	4770      	bx	lr

0800f5d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f5d8:	b480      	push	{r7}
 800f5da:	b085      	sub	sp, #20
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	691b      	ldr	r3, [r3, #16]
 800f5e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	685b      	ldr	r3, [r3, #4]
 800f5ea:	687a      	ldr	r2, [r7, #4]
 800f5ec:	6892      	ldr	r2, [r2, #8]
 800f5ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	689b      	ldr	r3, [r3, #8]
 800f5f4:	687a      	ldr	r2, [r7, #4]
 800f5f6:	6852      	ldr	r2, [r2, #4]
 800f5f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	685b      	ldr	r3, [r3, #4]
 800f5fe:	687a      	ldr	r2, [r7, #4]
 800f600:	429a      	cmp	r2, r3
 800f602:	d103      	bne.n	800f60c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	689a      	ldr	r2, [r3, #8]
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2200      	movs	r2, #0
 800f610:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	1e5a      	subs	r2, r3, #1
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	681b      	ldr	r3, [r3, #0]
}
 800f620:	4618      	mov	r0, r3
 800f622:	3714      	adds	r7, #20
 800f624:	46bd      	mov	sp, r7
 800f626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62a:	4770      	bx	lr

0800f62c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b084      	sub	sp, #16
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d104      	bne.n	800f64a <xQueueGenericReset+0x1e>
 800f640:	f240 111b 	movw	r1, #283	@ 0x11b
 800f644:	4829      	ldr	r0, [pc, #164]	@ (800f6ec <xQueueGenericReset+0xc0>)
 800f646:	f7fe fcf8 	bl	800e03a <cmr_panic>

	taskENTER_CRITICAL();
 800f64a:	f001 fd03 	bl	8011054 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	681a      	ldr	r2, [r3, #0]
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f656:	68f9      	ldr	r1, [r7, #12]
 800f658:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f65a:	fb01 f303 	mul.w	r3, r1, r3
 800f65e:	441a      	add	r2, r3
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	2200      	movs	r2, #0
 800f668:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	681a      	ldr	r2, [r3, #0]
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	681a      	ldr	r2, [r3, #0]
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f67a:	3b01      	subs	r3, #1
 800f67c:	68f9      	ldr	r1, [r7, #12]
 800f67e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f680:	fb01 f303 	mul.w	r3, r1, r3
 800f684:	441a      	add	r2, r3
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	22ff      	movs	r2, #255	@ 0xff
 800f68e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	22ff      	movs	r2, #255	@ 0xff
 800f696:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d114      	bne.n	800f6ca <xQueueGenericReset+0x9e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	691b      	ldr	r3, [r3, #16]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d01a      	beq.n	800f6de <xQueueGenericReset+0xb2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	3310      	adds	r3, #16
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f001 f8e5 	bl	801087c <xTaskRemoveFromEventList>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d012      	beq.n	800f6de <xQueueGenericReset+0xb2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f6b8:	4b0d      	ldr	r3, [pc, #52]	@ (800f6f0 <xQueueGenericReset+0xc4>)
 800f6ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f6be:	601a      	str	r2, [r3, #0]
 800f6c0:	f3bf 8f4f 	dsb	sy
 800f6c4:	f3bf 8f6f 	isb	sy
 800f6c8:	e009      	b.n	800f6de <xQueueGenericReset+0xb2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	3310      	adds	r3, #16
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7ff fef8 	bl	800f4c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	3324      	adds	r3, #36	@ 0x24
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f7ff fef3 	bl	800f4c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f6de:	f001 fce3 	bl	80110a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f6e2:	2301      	movs	r3, #1
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3710      	adds	r7, #16
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}
 800f6ec:	08020e10 	.word	0x08020e10
 800f6f0:	e000ed04 	.word	0xe000ed04

0800f6f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b088      	sub	sp, #32
 800f6f8:	af02      	add	r7, sp, #8
 800f6fa:	60f8      	str	r0, [r7, #12]
 800f6fc:	60b9      	str	r1, [r7, #8]
 800f6fe:	607a      	str	r2, [r7, #4]
 800f700:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d104      	bne.n	800f712 <xQueueGenericCreateStatic+0x1e>
 800f708:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 800f70c:	481f      	ldr	r0, [pc, #124]	@ (800f78c <xQueueGenericCreateStatic+0x98>)
 800f70e:	f7fe fc94 	bl	800e03a <cmr_panic>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d104      	bne.n	800f722 <xQueueGenericCreateStatic+0x2e>
 800f718:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 800f71c:	481c      	ldr	r0, [pc, #112]	@ (800f790 <xQueueGenericCreateStatic+0x9c>)
 800f71e:	f7fe fc8c 	bl	800e03a <cmr_panic>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d007      	beq.n	800f738 <xQueueGenericCreateStatic+0x44>
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d104      	bne.n	800f738 <xQueueGenericCreateStatic+0x44>
 800f72e:	f44f 71ad 	mov.w	r1, #346	@ 0x15a
 800f732:	4818      	ldr	r0, [pc, #96]	@ (800f794 <xQueueGenericCreateStatic+0xa0>)
 800f734:	f7fe fc81 	bl	800e03a <cmr_panic>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d107      	bne.n	800f74e <xQueueGenericCreateStatic+0x5a>
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d004      	beq.n	800f74e <xQueueGenericCreateStatic+0x5a>
 800f744:	f240 115b 	movw	r1, #347	@ 0x15b
 800f748:	4813      	ldr	r0, [pc, #76]	@ (800f798 <xQueueGenericCreateStatic+0xa4>)
 800f74a:	f7fe fc76 	bl	800e03a <cmr_panic>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f74e:	2348      	movs	r3, #72	@ 0x48
 800f750:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f752:	693b      	ldr	r3, [r7, #16]
 800f754:	2b48      	cmp	r3, #72	@ 0x48
 800f756:	d004      	beq.n	800f762 <xQueueGenericCreateStatic+0x6e>
 800f758:	f240 1163 	movw	r1, #355	@ 0x163
 800f75c:	480f      	ldr	r0, [pc, #60]	@ (800f79c <xQueueGenericCreateStatic+0xa8>)
 800f75e:	f7fe fc6c 	bl	800e03a <cmr_panic>
			(void) xSize; // Placate compiler
 800f762:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d009      	beq.n	800f782 <xQueueGenericCreateStatic+0x8e>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f76e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	9300      	str	r3, [sp, #0]
 800f776:	4613      	mov	r3, r2
 800f778:	687a      	ldr	r2, [r7, #4]
 800f77a:	68b9      	ldr	r1, [r7, #8]
 800f77c:	68f8      	ldr	r0, [r7, #12]
 800f77e:	f000 f80f 	bl	800f7a0 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 800f782:	697b      	ldr	r3, [r7, #20]
	}
 800f784:	4618      	mov	r0, r3
 800f786:	3718      	adds	r7, #24
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}
 800f78c:	08020e54 	.word	0x08020e54
 800f790:	08020eb4 	.word	0x08020eb4
 800f794:	08020f08 	.word	0x08020f08
 800f798:	08020f7c 	.word	0x08020f7c
 800f79c:	08020ff0 	.word	0x08020ff0

0800f7a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b084      	sub	sp, #16
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	60f8      	str	r0, [r7, #12]
 800f7a8:	60b9      	str	r1, [r7, #8]
 800f7aa:	607a      	str	r2, [r7, #4]
 800f7ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d103      	bne.n	800f7bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f7b4:	69bb      	ldr	r3, [r7, #24]
 800f7b6:	69ba      	ldr	r2, [r7, #24]
 800f7b8:	601a      	str	r2, [r3, #0]
 800f7ba:	e002      	b.n	800f7c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f7bc:	69bb      	ldr	r3, [r7, #24]
 800f7be:	687a      	ldr	r2, [r7, #4]
 800f7c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f7c2:	69bb      	ldr	r3, [r7, #24]
 800f7c4:	68fa      	ldr	r2, [r7, #12]
 800f7c6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f7c8:	69bb      	ldr	r3, [r7, #24]
 800f7ca:	68ba      	ldr	r2, [r7, #8]
 800f7cc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f7ce:	2101      	movs	r1, #1
 800f7d0:	69b8      	ldr	r0, [r7, #24]
 800f7d2:	f7ff ff2b 	bl	800f62c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f7d6:	bf00      	nop
 800f7d8:	3710      	adds	r7, #16
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}

0800f7de <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f7de:	b580      	push	{r7, lr}
 800f7e0:	b082      	sub	sp, #8
 800f7e2:	af00      	add	r7, sp, #0
 800f7e4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d00e      	beq.n	800f80a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f7fe:	2300      	movs	r3, #0
 800f800:	2200      	movs	r2, #0
 800f802:	2100      	movs	r1, #0
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f000 f81f 	bl	800f848 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f80a:	bf00      	nop
 800f80c:	3708      	adds	r7, #8
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}

0800f812 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f812:	b580      	push	{r7, lr}
 800f814:	b088      	sub	sp, #32
 800f816:	af02      	add	r7, sp, #8
 800f818:	4603      	mov	r3, r0
 800f81a:	6039      	str	r1, [r7, #0]
 800f81c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f81e:	2301      	movs	r3, #1
 800f820:	617b      	str	r3, [r7, #20]
 800f822:	2300      	movs	r3, #0
 800f824:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f826:	79fb      	ldrb	r3, [r7, #7]
 800f828:	9300      	str	r3, [sp, #0]
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	2200      	movs	r2, #0
 800f82e:	6939      	ldr	r1, [r7, #16]
 800f830:	6978      	ldr	r0, [r7, #20]
 800f832:	f7ff ff5f 	bl	800f6f4 <xQueueGenericCreateStatic>
 800f836:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800f838:	68f8      	ldr	r0, [r7, #12]
 800f83a:	f7ff ffd0 	bl	800f7de <prvInitialiseMutex>

		return pxNewQueue;
 800f83e:	68fb      	ldr	r3, [r7, #12]
	}
 800f840:	4618      	mov	r0, r3
 800f842:	3718      	adds	r7, #24
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}

0800f848 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b08a      	sub	sp, #40	@ 0x28
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	60f8      	str	r0, [r7, #12]
 800f850:	60b9      	str	r1, [r7, #8]
 800f852:	607a      	str	r2, [r7, #4]
 800f854:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f856:	2300      	movs	r3, #0
 800f858:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800f85e:	6a3b      	ldr	r3, [r7, #32]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d104      	bne.n	800f86e <xQueueGenericSend+0x26>
 800f864:	f240 21da 	movw	r1, #730	@ 0x2da
 800f868:	4862      	ldr	r0, [pc, #392]	@ (800f9f4 <xQueueGenericSend+0x1ac>)
 800f86a:	f7fe fbe6 	bl	800e03a <cmr_panic>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f86e:	68bb      	ldr	r3, [r7, #8]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d108      	bne.n	800f886 <xQueueGenericSend+0x3e>
 800f874:	6a3b      	ldr	r3, [r7, #32]
 800f876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d004      	beq.n	800f886 <xQueueGenericSend+0x3e>
 800f87c:	f240 21db 	movw	r1, #731	@ 0x2db
 800f880:	485d      	ldr	r0, [pc, #372]	@ (800f9f8 <xQueueGenericSend+0x1b0>)
 800f882:	f7fe fbda 	bl	800e03a <cmr_panic>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	2b02      	cmp	r3, #2
 800f88a:	d108      	bne.n	800f89e <xQueueGenericSend+0x56>
 800f88c:	6a3b      	ldr	r3, [r7, #32]
 800f88e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f890:	2b01      	cmp	r3, #1
 800f892:	d004      	beq.n	800f89e <xQueueGenericSend+0x56>
 800f894:	f44f 7137 	mov.w	r1, #732	@ 0x2dc
 800f898:	4858      	ldr	r0, [pc, #352]	@ (800f9fc <xQueueGenericSend+0x1b4>)
 800f89a:	f7fe fbce 	bl	800e03a <cmr_panic>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f89e:	f001 f94d 	bl	8010b3c <xTaskGetSchedulerState>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d000      	beq.n	800f8aa <xQueueGenericSend+0x62>
 800f8a8:	e007      	b.n	800f8ba <xQueueGenericSend+0x72>
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d004      	beq.n	800f8ba <xQueueGenericSend+0x72>
 800f8b0:	f240 21df 	movw	r1, #735	@ 0x2df
 800f8b4:	4852      	ldr	r0, [pc, #328]	@ (800fa00 <xQueueGenericSend+0x1b8>)
 800f8b6:	f7fe fbc0 	bl	800e03a <cmr_panic>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f8ba:	f001 fbcb 	bl	8011054 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f8be:	6a3b      	ldr	r3, [r7, #32]
 800f8c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f8c2:	6a3b      	ldr	r3, [r7, #32]
 800f8c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d302      	bcc.n	800f8d0 <xQueueGenericSend+0x88>
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	2b02      	cmp	r3, #2
 800f8ce:	d129      	bne.n	800f924 <xQueueGenericSend+0xdc>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f8d0:	683a      	ldr	r2, [r7, #0]
 800f8d2:	68b9      	ldr	r1, [r7, #8]
 800f8d4:	6a38      	ldr	r0, [r7, #32]
 800f8d6:	f000 fadb 	bl	800fe90 <prvCopyDataToQueue>
 800f8da:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f8dc:	6a3b      	ldr	r3, [r7, #32]
 800f8de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d010      	beq.n	800f906 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f8e4:	6a3b      	ldr	r3, [r7, #32]
 800f8e6:	3324      	adds	r3, #36	@ 0x24
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f000 ffc7 	bl	801087c <xTaskRemoveFromEventList>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d013      	beq.n	800f91c <xQueueGenericSend+0xd4>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f8f4:	4b43      	ldr	r3, [pc, #268]	@ (800fa04 <xQueueGenericSend+0x1bc>)
 800f8f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f8fa:	601a      	str	r2, [r3, #0]
 800f8fc:	f3bf 8f4f 	dsb	sy
 800f900:	f3bf 8f6f 	isb	sy
 800f904:	e00a      	b.n	800f91c <xQueueGenericSend+0xd4>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f906:	69fb      	ldr	r3, [r7, #28]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d007      	beq.n	800f91c <xQueueGenericSend+0xd4>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f90c:	4b3d      	ldr	r3, [pc, #244]	@ (800fa04 <xQueueGenericSend+0x1bc>)
 800f90e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f912:	601a      	str	r2, [r3, #0]
 800f914:	f3bf 8f4f 	dsb	sy
 800f918:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f91c:	f001 fbc4 	bl	80110a8 <vPortExitCritical>
				return pdPASS;
 800f920:	2301      	movs	r3, #1
 800f922:	e063      	b.n	800f9ec <xQueueGenericSend+0x1a4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d103      	bne.n	800f932 <xQueueGenericSend+0xea>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f92a:	f001 fbbd 	bl	80110a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f92e:	2300      	movs	r3, #0
 800f930:	e05c      	b.n	800f9ec <xQueueGenericSend+0x1a4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f934:	2b00      	cmp	r3, #0
 800f936:	d106      	bne.n	800f946 <xQueueGenericSend+0xfe>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800f938:	f107 0314 	add.w	r3, r7, #20
 800f93c:	4618      	mov	r0, r3
 800f93e:	f000 fffb 	bl	8010938 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f942:	2301      	movs	r3, #1
 800f944:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f946:	f001 fbaf 	bl	80110a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f94a:	f000 fd9f 	bl	801048c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f94e:	f001 fb81 	bl	8011054 <vPortEnterCritical>
 800f952:	6a3b      	ldr	r3, [r7, #32]
 800f954:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f958:	b25b      	sxtb	r3, r3
 800f95a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f95e:	d103      	bne.n	800f968 <xQueueGenericSend+0x120>
 800f960:	6a3b      	ldr	r3, [r7, #32]
 800f962:	2200      	movs	r2, #0
 800f964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f968:	6a3b      	ldr	r3, [r7, #32]
 800f96a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f96e:	b25b      	sxtb	r3, r3
 800f970:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f974:	d103      	bne.n	800f97e <xQueueGenericSend+0x136>
 800f976:	6a3b      	ldr	r3, [r7, #32]
 800f978:	2200      	movs	r2, #0
 800f97a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f97e:	f001 fb93 	bl	80110a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f982:	1d3a      	adds	r2, r7, #4
 800f984:	f107 0314 	add.w	r3, r7, #20
 800f988:	4611      	mov	r1, r2
 800f98a:	4618      	mov	r0, r3
 800f98c:	f000 fff2 	bl	8010974 <xTaskCheckForTimeOut>
 800f990:	4603      	mov	r3, r0
 800f992:	2b00      	cmp	r3, #0
 800f994:	d124      	bne.n	800f9e0 <xQueueGenericSend+0x198>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f996:	6a38      	ldr	r0, [r7, #32]
 800f998:	f000 fb72 	bl	8010080 <prvIsQueueFull>
 800f99c:	4603      	mov	r3, r0
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d018      	beq.n	800f9d4 <xQueueGenericSend+0x18c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f9a2:	6a3b      	ldr	r3, [r7, #32]
 800f9a4:	3310      	adds	r3, #16
 800f9a6:	687a      	ldr	r2, [r7, #4]
 800f9a8:	4611      	mov	r1, r2
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f000 ff46 	bl	801083c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f9b0:	6a38      	ldr	r0, [r7, #32]
 800f9b2:	f000 fafd 	bl	800ffb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f9b6:	f000 fd77 	bl	80104a8 <xTaskResumeAll>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	f47f af7c 	bne.w	800f8ba <xQueueGenericSend+0x72>
				{
					portYIELD_WITHIN_API();
 800f9c2:	4b10      	ldr	r3, [pc, #64]	@ (800fa04 <xQueueGenericSend+0x1bc>)
 800f9c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f9c8:	601a      	str	r2, [r3, #0]
 800f9ca:	f3bf 8f4f 	dsb	sy
 800f9ce:	f3bf 8f6f 	isb	sy
 800f9d2:	e772      	b.n	800f8ba <xQueueGenericSend+0x72>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f9d4:	6a38      	ldr	r0, [r7, #32]
 800f9d6:	f000 faeb 	bl	800ffb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f9da:	f000 fd65 	bl	80104a8 <xTaskResumeAll>
 800f9de:	e76c      	b.n	800f8ba <xQueueGenericSend+0x72>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f9e0:	6a38      	ldr	r0, [r7, #32]
 800f9e2:	f000 fae5 	bl	800ffb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f9e6:	f000 fd5f 	bl	80104a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f9ea:	2300      	movs	r3, #0
		}
	}
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3728      	adds	r7, #40	@ 0x28
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}
 800f9f4:	08020e10 	.word	0x08020e10
 800f9f8:	080210f0 	.word	0x080210f0
 800f9fc:	0802117c 	.word	0x0802117c
 800fa00:	08021200 	.word	0x08021200
 800fa04:	e000ed04 	.word	0xe000ed04

0800fa08 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b08a      	sub	sp, #40	@ 0x28
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
 800fa10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fa16:	6a3b      	ldr	r3, [r7, #32]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d104      	bne.n	800fa26 <xQueueGiveFromISR+0x1e>
 800fa1c:	f240 413d 	movw	r1, #1085	@ 0x43d
 800fa20:	4833      	ldr	r0, [pc, #204]	@ (800faf0 <xQueueGiveFromISR+0xe8>)
 800fa22:	f7fe fb0a 	bl	800e03a <cmr_panic>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fa26:	6a3b      	ldr	r3, [r7, #32]
 800fa28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d004      	beq.n	800fa38 <xQueueGiveFromISR+0x30>
 800fa2e:	f240 4141 	movw	r1, #1089	@ 0x441
 800fa32:	4830      	ldr	r0, [pc, #192]	@ (800faf4 <xQueueGiveFromISR+0xec>)
 800fa34:	f7fe fb01 	bl	800e03a <cmr_panic>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800fa38:	6a3b      	ldr	r3, [r7, #32]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d108      	bne.n	800fa52 <xQueueGiveFromISR+0x4a>
 800fa40:	6a3b      	ldr	r3, [r7, #32]
 800fa42:	685b      	ldr	r3, [r3, #4]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d004      	beq.n	800fa52 <xQueueGiveFromISR+0x4a>
 800fa48:	f240 4146 	movw	r1, #1094	@ 0x446
 800fa4c:	482a      	ldr	r0, [pc, #168]	@ (800faf8 <xQueueGiveFromISR+0xf0>)
 800fa4e:	f7fe faf4 	bl	800e03a <cmr_panic>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fa52:	f001 fbc9 	bl	80111e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fa56:	f3ef 8211 	mrs	r2, BASEPRI
 800fa5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa5e:	f383 8811 	msr	BASEPRI, r3
 800fa62:	f3bf 8f6f 	isb	sy
 800fa66:	f3bf 8f4f 	dsb	sy
 800fa6a:	613a      	str	r2, [r7, #16]
 800fa6c:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fa6e:	693b      	ldr	r3, [r7, #16]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fa70:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fa72:	6a3b      	ldr	r3, [r7, #32]
 800fa74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa76:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fa78:	6a3b      	ldr	r3, [r7, #32]
 800fa7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa7c:	69ba      	ldr	r2, [r7, #24]
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	d229      	bcs.n	800fad6 <xQueueGiveFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fa82:	6a3b      	ldr	r3, [r7, #32]
 800fa84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fa88:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800fa8a:	69bb      	ldr	r3, [r7, #24]
 800fa8c:	1c5a      	adds	r2, r3, #1
 800fa8e:	6a3b      	ldr	r3, [r7, #32]
 800fa90:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fa92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fa96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fa9a:	d112      	bne.n	800fac2 <xQueueGiveFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fa9c:	6a3b      	ldr	r3, [r7, #32]
 800fa9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d015      	beq.n	800fad0 <xQueueGiveFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800faa4:	6a3b      	ldr	r3, [r7, #32]
 800faa6:	3324      	adds	r3, #36	@ 0x24
 800faa8:	4618      	mov	r0, r3
 800faaa:	f000 fee7 	bl	801087c <xTaskRemoveFromEventList>
 800faae:	4603      	mov	r3, r0
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d00d      	beq.n	800fad0 <xQueueGiveFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d00a      	beq.n	800fad0 <xQueueGiveFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	2201      	movs	r2, #1
 800fabe:	601a      	str	r2, [r3, #0]
 800fac0:	e006      	b.n	800fad0 <xQueueGiveFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fac2:	7dfb      	ldrb	r3, [r7, #23]
 800fac4:	3301      	adds	r3, #1
 800fac6:	b2db      	uxtb	r3, r3
 800fac8:	b25a      	sxtb	r2, r3
 800faca:	6a3b      	ldr	r3, [r7, #32]
 800facc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fad0:	2301      	movs	r3, #1
 800fad2:	627b      	str	r3, [r7, #36]	@ 0x24
 800fad4:	e001      	b.n	800fada <xQueueGiveFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fad6:	2300      	movs	r3, #0
 800fad8:	627b      	str	r3, [r7, #36]	@ 0x24
 800fada:	69fb      	ldr	r3, [r7, #28]
 800fadc:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue )
	);
}
 800fae4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800fae8:	4618      	mov	r0, r3
 800faea:	3728      	adds	r7, #40	@ 0x28
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}
 800faf0:	08020e10 	.word	0x08020e10
 800faf4:	08021294 	.word	0x08021294
 800faf8:	080212ec 	.word	0x080212ec

0800fafc <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b08a      	sub	sp, #40	@ 0x28
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	60f8      	str	r0, [r7, #12]
 800fb04:	60b9      	str	r1, [r7, #8]
 800fb06:	607a      	str	r2, [r7, #4]
 800fb08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800fb12:	6a3b      	ldr	r3, [r7, #32]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d104      	bne.n	800fb22 <xQueueGenericReceive+0x26>
 800fb18:	f240 41dd 	movw	r1, #1245	@ 0x4dd
 800fb1c:	4873      	ldr	r0, [pc, #460]	@ (800fcec <xQueueGenericReceive+0x1f0>)
 800fb1e:	f7fe fa8c 	bl	800e03a <cmr_panic>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fb22:	68bb      	ldr	r3, [r7, #8]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d108      	bne.n	800fb3a <xQueueGenericReceive+0x3e>
 800fb28:	6a3b      	ldr	r3, [r7, #32]
 800fb2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d004      	beq.n	800fb3a <xQueueGenericReceive+0x3e>
 800fb30:	f240 41de 	movw	r1, #1246	@ 0x4de
 800fb34:	486e      	ldr	r0, [pc, #440]	@ (800fcf0 <xQueueGenericReceive+0x1f4>)
 800fb36:	f7fe fa80 	bl	800e03a <cmr_panic>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fb3a:	f000 ffff 	bl	8010b3c <xTaskGetSchedulerState>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d000      	beq.n	800fb46 <xQueueGenericReceive+0x4a>
 800fb44:	e007      	b.n	800fb56 <xQueueGenericReceive+0x5a>
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d004      	beq.n	800fb56 <xQueueGenericReceive+0x5a>
 800fb4c:	f240 41e1 	movw	r1, #1249	@ 0x4e1
 800fb50:	4868      	ldr	r0, [pc, #416]	@ (800fcf4 <xQueueGenericReceive+0x1f8>)
 800fb52:	f7fe fa72 	bl	800e03a <cmr_panic>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800fb56:	f001 fa7d 	bl	8011054 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fb5a:	6a3b      	ldr	r3, [r7, #32]
 800fb5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb5e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fb60:	69fb      	ldr	r3, [r7, #28]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d046      	beq.n	800fbf4 <xQueueGenericReceive+0xf8>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800fb66:	6a3b      	ldr	r3, [r7, #32]
 800fb68:	68db      	ldr	r3, [r3, #12]
 800fb6a:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fb6c:	68b9      	ldr	r1, [r7, #8]
 800fb6e:	6a38      	ldr	r0, [r7, #32]
 800fb70:	f000 f9f8 	bl	800ff64 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d121      	bne.n	800fbbe <xQueueGenericReceive+0xc2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800fb7a:	69fb      	ldr	r3, [r7, #28]
 800fb7c:	1e5a      	subs	r2, r3, #1
 800fb7e:	6a3b      	ldr	r3, [r7, #32]
 800fb80:	639a      	str	r2, [r3, #56]	@ 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fb82:	6a3b      	ldr	r3, [r7, #32]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d104      	bne.n	800fb94 <xQueueGenericReceive+0x98>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800fb8a:	f001 f8e9 	bl	8010d60 <pvTaskIncrementMutexHeldCount>
 800fb8e:	4602      	mov	r2, r0
 800fb90:	6a3b      	ldr	r3, [r7, #32]
 800fb92:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb94:	6a3b      	ldr	r3, [r7, #32]
 800fb96:	691b      	ldr	r3, [r3, #16]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d027      	beq.n	800fbec <xQueueGenericReceive+0xf0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb9c:	6a3b      	ldr	r3, [r7, #32]
 800fb9e:	3310      	adds	r3, #16
 800fba0:	4618      	mov	r0, r3
 800fba2:	f000 fe6b 	bl	801087c <xTaskRemoveFromEventList>
 800fba6:	4603      	mov	r3, r0
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d01f      	beq.n	800fbec <xQueueGenericReceive+0xf0>
						{
							queueYIELD_IF_USING_PREEMPTION();
 800fbac:	4b52      	ldr	r3, [pc, #328]	@ (800fcf8 <xQueueGenericReceive+0x1fc>)
 800fbae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fbb2:	601a      	str	r2, [r3, #0]
 800fbb4:	f3bf 8f4f 	dsb	sy
 800fbb8:	f3bf 8f6f 	isb	sy
 800fbbc:	e016      	b.n	800fbec <xQueueGenericReceive+0xf0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800fbbe:	6a3b      	ldr	r3, [r7, #32]
 800fbc0:	69ba      	ldr	r2, [r7, #24]
 800fbc2:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fbc4:	6a3b      	ldr	r3, [r7, #32]
 800fbc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d00f      	beq.n	800fbec <xQueueGenericReceive+0xf0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fbcc:	6a3b      	ldr	r3, [r7, #32]
 800fbce:	3324      	adds	r3, #36	@ 0x24
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f000 fe53 	bl	801087c <xTaskRemoveFromEventList>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d007      	beq.n	800fbec <xQueueGenericReceive+0xf0>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 800fbdc:	4b46      	ldr	r3, [pc, #280]	@ (800fcf8 <xQueueGenericReceive+0x1fc>)
 800fbde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fbe2:	601a      	str	r2, [r3, #0]
 800fbe4:	f3bf 8f4f 	dsb	sy
 800fbe8:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800fbec:	f001 fa5c 	bl	80110a8 <vPortExitCritical>
				return pdPASS;
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	e077      	b.n	800fce4 <xQueueGenericReceive+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d103      	bne.n	800fc02 <xQueueGenericReceive+0x106>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fbfa:	f001 fa55 	bl	80110a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	e070      	b.n	800fce4 <xQueueGenericReceive+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fc02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d106      	bne.n	800fc16 <xQueueGenericReceive+0x11a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800fc08:	f107 0310 	add.w	r3, r7, #16
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f000 fe93 	bl	8010938 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fc12:	2301      	movs	r3, #1
 800fc14:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fc16:	f001 fa47 	bl	80110a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fc1a:	f000 fc37 	bl	801048c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fc1e:	f001 fa19 	bl	8011054 <vPortEnterCritical>
 800fc22:	6a3b      	ldr	r3, [r7, #32]
 800fc24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fc28:	b25b      	sxtb	r3, r3
 800fc2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fc2e:	d103      	bne.n	800fc38 <xQueueGenericReceive+0x13c>
 800fc30:	6a3b      	ldr	r3, [r7, #32]
 800fc32:	2200      	movs	r2, #0
 800fc34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fc38:	6a3b      	ldr	r3, [r7, #32]
 800fc3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fc3e:	b25b      	sxtb	r3, r3
 800fc40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fc44:	d103      	bne.n	800fc4e <xQueueGenericReceive+0x152>
 800fc46:	6a3b      	ldr	r3, [r7, #32]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fc4e:	f001 fa2b 	bl	80110a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fc52:	1d3a      	adds	r2, r7, #4
 800fc54:	f107 0310 	add.w	r3, r7, #16
 800fc58:	4611      	mov	r1, r2
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f000 fe8a 	bl	8010974 <xTaskCheckForTimeOut>
 800fc60:	4603      	mov	r3, r0
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d131      	bne.n	800fcca <xQueueGenericReceive+0x1ce>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fc66:	6a38      	ldr	r0, [r7, #32]
 800fc68:	f000 f9f4 	bl	8010054 <prvIsQueueEmpty>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d025      	beq.n	800fcbe <xQueueGenericReceive+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fc72:	6a3b      	ldr	r3, [r7, #32]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d108      	bne.n	800fc8c <xQueueGenericReceive+0x190>
					{
						taskENTER_CRITICAL();
 800fc7a:	f001 f9eb 	bl	8011054 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800fc7e:	6a3b      	ldr	r3, [r7, #32]
 800fc80:	685b      	ldr	r3, [r3, #4]
 800fc82:	4618      	mov	r0, r3
 800fc84:	f000 ff78 	bl	8010b78 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800fc88:	f001 fa0e 	bl	80110a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fc8c:	6a3b      	ldr	r3, [r7, #32]
 800fc8e:	3324      	adds	r3, #36	@ 0x24
 800fc90:	687a      	ldr	r2, [r7, #4]
 800fc92:	4611      	mov	r1, r2
 800fc94:	4618      	mov	r0, r3
 800fc96:	f000 fdd1 	bl	801083c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fc9a:	6a38      	ldr	r0, [r7, #32]
 800fc9c:	f000 f988 	bl	800ffb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fca0:	f000 fc02 	bl	80104a8 <xTaskResumeAll>
 800fca4:	4603      	mov	r3, r0
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	f47f af55 	bne.w	800fb56 <xQueueGenericReceive+0x5a>
				{
					portYIELD_WITHIN_API();
 800fcac:	4b12      	ldr	r3, [pc, #72]	@ (800fcf8 <xQueueGenericReceive+0x1fc>)
 800fcae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fcb2:	601a      	str	r2, [r3, #0]
 800fcb4:	f3bf 8f4f 	dsb	sy
 800fcb8:	f3bf 8f6f 	isb	sy
 800fcbc:	e74b      	b.n	800fb56 <xQueueGenericReceive+0x5a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fcbe:	6a38      	ldr	r0, [r7, #32]
 800fcc0:	f000 f976 	bl	800ffb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fcc4:	f000 fbf0 	bl	80104a8 <xTaskResumeAll>
 800fcc8:	e745      	b.n	800fb56 <xQueueGenericReceive+0x5a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800fcca:	6a38      	ldr	r0, [r7, #32]
 800fccc:	f000 f970 	bl	800ffb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fcd0:	f000 fbea 	bl	80104a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fcd4:	6a38      	ldr	r0, [r7, #32]
 800fcd6:	f000 f9bd 	bl	8010054 <prvIsQueueEmpty>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	f43f af3a 	beq.w	800fb56 <xQueueGenericReceive+0x5a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fce2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	3728      	adds	r7, #40	@ 0x28
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}
 800fcec:	08020e10 	.word	0x08020e10
 800fcf0:	08021384 	.word	0x08021384
 800fcf4:	08021200 	.word	0x08021200
 800fcf8:	e000ed04 	.word	0xe000ed04

0800fcfc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b08c      	sub	sp, #48	@ 0x30
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	60f8      	str	r0, [r7, #12]
 800fd04:	60b9      	str	r1, [r7, #8]
 800fd06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	62bb      	str	r3, [r7, #40]	@ 0x28

	configASSERT( pxQueue );
 800fd0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d104      	bne.n	800fd1c <xQueueReceiveFromISR+0x20>
 800fd12:	f240 51a1 	movw	r1, #1441	@ 0x5a1
 800fd16:	4830      	ldr	r0, [pc, #192]	@ (800fdd8 <xQueueReceiveFromISR+0xdc>)
 800fd18:	f7fe f98f 	bl	800e03a <cmr_panic>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d108      	bne.n	800fd34 <xQueueReceiveFromISR+0x38>
 800fd22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d004      	beq.n	800fd34 <xQueueReceiveFromISR+0x38>
 800fd2a:	f240 51a2 	movw	r1, #1442	@ 0x5a2
 800fd2e:	482b      	ldr	r0, [pc, #172]	@ (800fddc <xQueueReceiveFromISR+0xe0>)
 800fd30:	f7fe f983 	bl	800e03a <cmr_panic>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fd34:	f001 fa58 	bl	80111e8 <vPortValidateInterruptPriority>
	__asm volatile
 800fd38:	f3ef 8211 	mrs	r2, BASEPRI
 800fd3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd40:	f383 8811 	msr	BASEPRI, r3
 800fd44:	f3bf 8f6f 	isb	sy
 800fd48:	f3bf 8f4f 	dsb	sy
 800fd4c:	61ba      	str	r2, [r7, #24]
 800fd4e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fd50:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fd52:	627b      	str	r3, [r7, #36]	@ 0x24
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fd54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd58:	623b      	str	r3, [r7, #32]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fd5a:	6a3b      	ldr	r3, [r7, #32]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d02d      	beq.n	800fdbc <xQueueReceiveFromISR+0xc0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fd60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd62:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fd66:	77fb      	strb	r3, [r7, #31]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fd68:	68b9      	ldr	r1, [r7, #8]
 800fd6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd6c:	f000 f8fa 	bl	800ff64 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800fd70:	6a3b      	ldr	r3, [r7, #32]
 800fd72:	1e5a      	subs	r2, r3, #1
 800fd74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd76:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fd78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fd7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fd80:	d112      	bne.n	800fda8 <xQueueReceiveFromISR+0xac>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd84:	691b      	ldr	r3, [r3, #16]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d015      	beq.n	800fdb6 <xQueueReceiveFromISR+0xba>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd8c:	3310      	adds	r3, #16
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f000 fd74 	bl	801087c <xTaskRemoveFromEventList>
 800fd94:	4603      	mov	r3, r0
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d00d      	beq.n	800fdb6 <xQueueReceiveFromISR+0xba>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d00a      	beq.n	800fdb6 <xQueueReceiveFromISR+0xba>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2201      	movs	r2, #1
 800fda4:	601a      	str	r2, [r3, #0]
 800fda6:	e006      	b.n	800fdb6 <xQueueReceiveFromISR+0xba>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fda8:	7ffb      	ldrb	r3, [r7, #31]
 800fdaa:	3301      	adds	r3, #1
 800fdac:	b2db      	uxtb	r3, r3
 800fdae:	b25a      	sxtb	r2, r3
 800fdb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fdba:	e001      	b.n	800fdc0 <xQueueReceiveFromISR+0xc4>
		}
		else
		{
			xReturn = pdFAIL;
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fdc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdc2:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fdc4:	693b      	ldr	r3, [r7, #16]
 800fdc6:	f383 8811 	msr	BASEPRI, r3
}
 800fdca:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fdcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800fdce:	4618      	mov	r0, r3
 800fdd0:	3730      	adds	r7, #48	@ 0x30
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	bd80      	pop	{r7, pc}
 800fdd6:	bf00      	nop
 800fdd8:	08020e10 	.word	0x08020e10
 800fddc:	08021384 	.word	0x08021384

0800fde0 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b08a      	sub	sp, #40	@ 0x28
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
 800fde8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800fdee:	6a3b      	ldr	r3, [r7, #32]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d104      	bne.n	800fdfe <xQueuePeekFromISR+0x1e>
 800fdf4:	f240 51fd 	movw	r1, #1533	@ 0x5fd
 800fdf8:	4822      	ldr	r0, [pc, #136]	@ (800fe84 <xQueuePeekFromISR+0xa4>)
 800fdfa:	f7fe f91e 	bl	800e03a <cmr_panic>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d108      	bne.n	800fe16 <xQueuePeekFromISR+0x36>
 800fe04:	6a3b      	ldr	r3, [r7, #32]
 800fe06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d004      	beq.n	800fe16 <xQueuePeekFromISR+0x36>
 800fe0c:	f240 51fe 	movw	r1, #1534	@ 0x5fe
 800fe10:	481d      	ldr	r0, [pc, #116]	@ (800fe88 <xQueuePeekFromISR+0xa8>)
 800fe12:	f7fe f912 	bl	800e03a <cmr_panic>
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 800fe16:	6a3b      	ldr	r3, [r7, #32]
 800fe18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d104      	bne.n	800fe28 <xQueuePeekFromISR+0x48>
 800fe1e:	f240 51ff 	movw	r1, #1535	@ 0x5ff
 800fe22:	481a      	ldr	r0, [pc, #104]	@ (800fe8c <xQueuePeekFromISR+0xac>)
 800fe24:	f7fe f909 	bl	800e03a <cmr_panic>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fe28:	f001 f9de 	bl	80111e8 <vPortValidateInterruptPriority>
	__asm volatile
 800fe2c:	f3ef 8211 	mrs	r2, BASEPRI
 800fe30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe34:	f383 8811 	msr	BASEPRI, r3
 800fe38:	f3bf 8f6f 	isb	sy
 800fe3c:	f3bf 8f4f 	dsb	sy
 800fe40:	617a      	str	r2, [r7, #20]
 800fe42:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800fe44:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fe46:	61fb      	str	r3, [r7, #28]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fe48:	6a3b      	ldr	r3, [r7, #32]
 800fe4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d00c      	beq.n	800fe6a <xQueuePeekFromISR+0x8a>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800fe50:	6a3b      	ldr	r3, [r7, #32]
 800fe52:	68db      	ldr	r3, [r3, #12]
 800fe54:	61bb      	str	r3, [r7, #24]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fe56:	6839      	ldr	r1, [r7, #0]
 800fe58:	6a38      	ldr	r0, [r7, #32]
 800fe5a:	f000 f883 	bl	800ff64 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800fe5e:	6a3b      	ldr	r3, [r7, #32]
 800fe60:	69ba      	ldr	r2, [r7, #24]
 800fe62:	60da      	str	r2, [r3, #12]

			xReturn = pdPASS;
 800fe64:	2301      	movs	r3, #1
 800fe66:	627b      	str	r3, [r7, #36]	@ 0x24
 800fe68:	e001      	b.n	800fe6e <xQueuePeekFromISR+0x8e>
		}
		else
		{
			xReturn = pdFAIL;
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	627b      	str	r3, [r7, #36]	@ 0x24
 800fe6e:	69fb      	ldr	r3, [r7, #28]
 800fe70:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	f383 8811 	msr	BASEPRI, r3
}
 800fe78:	bf00      	nop
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fe7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3728      	adds	r7, #40	@ 0x28
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}
 800fe84:	08020e10 	.word	0x08020e10
 800fe88:	08021384 	.word	0x08021384
 800fe8c:	0802140c 	.word	0x0802140c

0800fe90 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b086      	sub	sp, #24
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	60f8      	str	r0, [r7, #12]
 800fe98:	60b9      	str	r1, [r7, #8]
 800fe9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fea4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d10d      	bne.n	800feca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d14d      	bne.n	800ff52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	685b      	ldr	r3, [r3, #4]
 800feba:	4618      	mov	r0, r3
 800febc:	f000 fed2 	bl	8010c64 <xTaskPriorityDisinherit>
 800fec0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	2200      	movs	r2, #0
 800fec6:	605a      	str	r2, [r3, #4]
 800fec8:	e043      	b.n	800ff52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d119      	bne.n	800ff04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	6898      	ldr	r0, [r3, #8]
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fed8:	461a      	mov	r2, r3
 800feda:	68b9      	ldr	r1, [r7, #8]
 800fedc:	f00e fb76 	bl	801e5cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	689a      	ldr	r2, [r3, #8]
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fee8:	441a      	add	r2, r3
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	689a      	ldr	r2, [r3, #8]
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	685b      	ldr	r3, [r3, #4]
 800fef6:	429a      	cmp	r2, r3
 800fef8:	d32b      	bcc.n	800ff52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	681a      	ldr	r2, [r3, #0]
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	609a      	str	r2, [r3, #8]
 800ff02:	e026      	b.n	800ff52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	68d8      	ldr	r0, [r3, #12]
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	68b9      	ldr	r1, [r7, #8]
 800ff10:	f00e fb5c 	bl	801e5cc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	68da      	ldr	r2, [r3, #12]
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff1c:	425b      	negs	r3, r3
 800ff1e:	441a      	add	r2, r3
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	68da      	ldr	r2, [r3, #12]
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d207      	bcs.n	800ff40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	685a      	ldr	r2, [r3, #4]
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff38:	425b      	negs	r3, r3
 800ff3a:	441a      	add	r2, r3
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2b02      	cmp	r3, #2
 800ff44:	d105      	bne.n	800ff52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ff46:	693b      	ldr	r3, [r7, #16]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d002      	beq.n	800ff52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	3b01      	subs	r3, #1
 800ff50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800ff52:	693b      	ldr	r3, [r7, #16]
 800ff54:	1c5a      	adds	r2, r3, #1
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ff5a:	697b      	ldr	r3, [r7, #20]
}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	3718      	adds	r7, #24
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}

0800ff64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b082      	sub	sp, #8
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
 800ff6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d018      	beq.n	800ffa8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	68da      	ldr	r2, [r3, #12]
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff7e:	441a      	add	r2, r3
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	68da      	ldr	r2, [r3, #12]
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	685b      	ldr	r3, [r3, #4]
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	d303      	bcc.n	800ff98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681a      	ldr	r2, [r3, #0]
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	68d9      	ldr	r1, [r3, #12]
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	6838      	ldr	r0, [r7, #0]
 800ffa4:	f00e fb12 	bl	801e5cc <memcpy>
	}
}
 800ffa8:	bf00      	nop
 800ffaa:	3708      	adds	r7, #8
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}

0800ffb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b084      	sub	sp, #16
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ffb8:	f001 f84c 	bl	8011054 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ffc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ffc4:	e011      	b.n	800ffea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d012      	beq.n	800fff4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	3324      	adds	r3, #36	@ 0x24
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f000 fc52 	bl	801087c <xTaskRemoveFromEventList>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d001      	beq.n	800ffe2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ffde:	f000 fd21 	bl	8010a24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ffe2:	7bfb      	ldrb	r3, [r7, #15]
 800ffe4:	3b01      	subs	r3, #1
 800ffe6:	b2db      	uxtb	r3, r3
 800ffe8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ffea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	dce9      	bgt.n	800ffc6 <prvUnlockQueue+0x16>
 800fff2:	e000      	b.n	800fff6 <prvUnlockQueue+0x46>
					break;
 800fff4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	22ff      	movs	r2, #255	@ 0xff
 800fffa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800fffe:	f001 f853 	bl	80110a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010002:	f001 f827 	bl	8011054 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801000c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801000e:	e011      	b.n	8010034 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	691b      	ldr	r3, [r3, #16]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d012      	beq.n	801003e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	3310      	adds	r3, #16
 801001c:	4618      	mov	r0, r3
 801001e:	f000 fc2d 	bl	801087c <xTaskRemoveFromEventList>
 8010022:	4603      	mov	r3, r0
 8010024:	2b00      	cmp	r3, #0
 8010026:	d001      	beq.n	801002c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010028:	f000 fcfc 	bl	8010a24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801002c:	7bbb      	ldrb	r3, [r7, #14]
 801002e:	3b01      	subs	r3, #1
 8010030:	b2db      	uxtb	r3, r3
 8010032:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010034:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010038:	2b00      	cmp	r3, #0
 801003a:	dce9      	bgt.n	8010010 <prvUnlockQueue+0x60>
 801003c:	e000      	b.n	8010040 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801003e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	22ff      	movs	r2, #255	@ 0xff
 8010044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8010048:	f001 f82e 	bl	80110a8 <vPortExitCritical>
}
 801004c:	bf00      	nop
 801004e:	3710      	adds	r7, #16
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}

08010054 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b084      	sub	sp, #16
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801005c:	f000 fffa 	bl	8011054 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010064:	2b00      	cmp	r3, #0
 8010066:	d102      	bne.n	801006e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010068:	2301      	movs	r3, #1
 801006a:	60fb      	str	r3, [r7, #12]
 801006c:	e001      	b.n	8010072 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801006e:	2300      	movs	r3, #0
 8010070:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010072:	f001 f819 	bl	80110a8 <vPortExitCritical>

	return xReturn;
 8010076:	68fb      	ldr	r3, [r7, #12]
}
 8010078:	4618      	mov	r0, r3
 801007a:	3710      	adds	r7, #16
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}

08010080 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b084      	sub	sp, #16
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010088:	f000 ffe4 	bl	8011054 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010094:	429a      	cmp	r2, r3
 8010096:	d102      	bne.n	801009e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010098:	2301      	movs	r3, #1
 801009a:	60fb      	str	r3, [r7, #12]
 801009c:	e001      	b.n	80100a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801009e:	2300      	movs	r3, #0
 80100a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80100a2:	f001 f801 	bl	80110a8 <vPortExitCritical>

	return xReturn;
 80100a6:	68fb      	ldr	r3, [r7, #12]
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	3710      	adds	r7, #16
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}

080100b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b08a      	sub	sp, #40	@ 0x28
 80100b4:	af04      	add	r7, sp, #16
 80100b6:	60f8      	str	r0, [r7, #12]
 80100b8:	60b9      	str	r1, [r7, #8]
 80100ba:	607a      	str	r2, [r7, #4]
 80100bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80100be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d104      	bne.n	80100ce <xTaskCreateStatic+0x1e>
 80100c4:	f240 2155 	movw	r1, #597	@ 0x255
 80100c8:	4817      	ldr	r0, [pc, #92]	@ (8010128 <xTaskCreateStatic+0x78>)
 80100ca:	f7fd ffb6 	bl	800e03a <cmr_panic>
		configASSERT( pxTaskBuffer != NULL );
 80100ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d104      	bne.n	80100de <xTaskCreateStatic+0x2e>
 80100d4:	f240 2156 	movw	r1, #598	@ 0x256
 80100d8:	4814      	ldr	r0, [pc, #80]	@ (801012c <xTaskCreateStatic+0x7c>)
 80100da:	f7fd ffae 	bl	800e03a <cmr_panic>

		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80100de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d01a      	beq.n	801011a <xTaskCreateStatic+0x6a>
 80100e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d017      	beq.n	801011a <xTaskCreateStatic+0x6a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80100ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100ec:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80100f2:	631a      	str	r2, [r3, #48]	@ 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80100f4:	2300      	movs	r3, #0
 80100f6:	9303      	str	r3, [sp, #12]
 80100f8:	697b      	ldr	r3, [r7, #20]
 80100fa:	9302      	str	r3, [sp, #8]
 80100fc:	f107 0310 	add.w	r3, r7, #16
 8010100:	9301      	str	r3, [sp, #4]
 8010102:	6a3b      	ldr	r3, [r7, #32]
 8010104:	9300      	str	r3, [sp, #0]
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	687a      	ldr	r2, [r7, #4]
 801010a:	68b9      	ldr	r1, [r7, #8]
 801010c:	68f8      	ldr	r0, [r7, #12]
 801010e:	f000 f80f 	bl	8010130 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010112:	6978      	ldr	r0, [r7, #20]
 8010114:	f000 f880 	bl	8010218 <prvAddNewTaskToReadyList>
 8010118:	e001      	b.n	801011e <xTaskCreateStatic+0x6e>
		}
		else
		{
			xReturn = NULL;
 801011a:	2300      	movs	r3, #0
 801011c:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 801011e:	693b      	ldr	r3, [r7, #16]
	}
 8010120:	4618      	mov	r0, r3
 8010122:	3718      	adds	r7, #24
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}
 8010128:	080214a8 	.word	0x080214a8
 801012c:	080214fc 	.word	0x080214fc

08010130 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b086      	sub	sp, #24
 8010134:	af00      	add	r7, sp, #0
 8010136:	60f8      	str	r0, [r7, #12]
 8010138:	60b9      	str	r1, [r7, #8]
 801013a:	607a      	str	r2, [r7, #4]
 801013c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 801013e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010140:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010142:	6879      	ldr	r1, [r7, #4]
 8010144:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8010148:	440b      	add	r3, r1
 801014a:	009b      	lsls	r3, r3, #2
 801014c:	4413      	add	r3, r2
 801014e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	f023 0307 	bic.w	r3, r3, #7
 8010156:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010158:	693b      	ldr	r3, [r7, #16]
 801015a:	f003 0307 	and.w	r3, r3, #7
 801015e:	2b00      	cmp	r3, #0
 8010160:	d004      	beq.n	801016c <prvInitialiseNewTask+0x3c>
 8010162:	f240 312b 	movw	r1, #811	@ 0x32b
 8010166:	482b      	ldr	r0, [pc, #172]	@ (8010214 <prvInitialiseNewTask+0xe4>)
 8010168:	f7fd ff67 	bl	800e03a <cmr_panic>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801016c:	2300      	movs	r3, #0
 801016e:	617b      	str	r3, [r7, #20]
 8010170:	e012      	b.n	8010198 <prvInitialiseNewTask+0x68>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010172:	68ba      	ldr	r2, [r7, #8]
 8010174:	697b      	ldr	r3, [r7, #20]
 8010176:	4413      	add	r3, r2
 8010178:	7819      	ldrb	r1, [r3, #0]
 801017a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801017c:	697b      	ldr	r3, [r7, #20]
 801017e:	4413      	add	r3, r2
 8010180:	3334      	adds	r3, #52	@ 0x34
 8010182:	460a      	mov	r2, r1
 8010184:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8010186:	68ba      	ldr	r2, [r7, #8]
 8010188:	697b      	ldr	r3, [r7, #20]
 801018a:	4413      	add	r3, r2
 801018c:	781b      	ldrb	r3, [r3, #0]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d006      	beq.n	80101a0 <prvInitialiseNewTask+0x70>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	3301      	adds	r3, #1
 8010196:	617b      	str	r3, [r7, #20]
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	2b1f      	cmp	r3, #31
 801019c:	d9e9      	bls.n	8010172 <prvInitialiseNewTask+0x42>
 801019e:	e000      	b.n	80101a2 <prvInitialiseNewTask+0x72>
		{
			break;
 80101a0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80101a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101a4:	2200      	movs	r2, #0
 80101a6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80101aa:	6a3b      	ldr	r3, [r7, #32]
 80101ac:	2b06      	cmp	r3, #6
 80101ae:	d901      	bls.n	80101b4 <prvInitialiseNewTask+0x84>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80101b0:	2306      	movs	r3, #6
 80101b2:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80101b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101b6:	6a3a      	ldr	r2, [r7, #32]
 80101b8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80101ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101bc:	6a3a      	ldr	r2, [r7, #32]
 80101be:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->uxMutexesHeld = 0;
 80101c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101c2:	2200      	movs	r2, #0
 80101c4:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80101c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101c8:	3304      	adds	r3, #4
 80101ca:	4618      	mov	r0, r3
 80101cc:	f7ff f99a 	bl	800f504 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80101d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101d2:	3318      	adds	r3, #24
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7ff f995 	bl	800f504 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80101da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80101de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101e0:	6a3b      	ldr	r3, [r7, #32]
 80101e2:	f1c3 0207 	rsb	r2, r3, #7
 80101e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80101ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80101ee:	625a      	str	r2, [r3, #36]	@ 0x24
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80101f0:	683a      	ldr	r2, [r7, #0]
 80101f2:	68f9      	ldr	r1, [r7, #12]
 80101f4:	6938      	ldr	r0, [r7, #16]
 80101f6:	f000 fe2d 	bl	8010e54 <pxPortInitialiseStack>
 80101fa:	4602      	mov	r2, r0
 80101fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101fe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8010200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010202:	2b00      	cmp	r3, #0
 8010204:	d002      	beq.n	801020c <prvInitialiseNewTask+0xdc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010208:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801020a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801020c:	bf00      	nop
 801020e:	3718      	adds	r7, #24
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}
 8010214:	08021550 	.word	0x08021550

08010218 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b082      	sub	sp, #8
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010220:	f000 ff18 	bl	8011054 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010224:	4b2a      	ldr	r3, [pc, #168]	@ (80102d0 <prvAddNewTaskToReadyList+0xb8>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	3301      	adds	r3, #1
 801022a:	4a29      	ldr	r2, [pc, #164]	@ (80102d0 <prvAddNewTaskToReadyList+0xb8>)
 801022c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801022e:	4b29      	ldr	r3, [pc, #164]	@ (80102d4 <prvAddNewTaskToReadyList+0xbc>)
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d109      	bne.n	801024a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010236:	4a27      	ldr	r2, [pc, #156]	@ (80102d4 <prvAddNewTaskToReadyList+0xbc>)
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801023c:	4b24      	ldr	r3, [pc, #144]	@ (80102d0 <prvAddNewTaskToReadyList+0xb8>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	2b01      	cmp	r3, #1
 8010242:	d110      	bne.n	8010266 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010244:	f000 fc12 	bl	8010a6c <prvInitialiseTaskLists>
 8010248:	e00d      	b.n	8010266 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801024a:	4b23      	ldr	r3, [pc, #140]	@ (80102d8 <prvAddNewTaskToReadyList+0xc0>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d109      	bne.n	8010266 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010252:	4b20      	ldr	r3, [pc, #128]	@ (80102d4 <prvAddNewTaskToReadyList+0xbc>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801025c:	429a      	cmp	r2, r3
 801025e:	d802      	bhi.n	8010266 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010260:	4a1c      	ldr	r2, [pc, #112]	@ (80102d4 <prvAddNewTaskToReadyList+0xbc>)
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010266:	4b1d      	ldr	r3, [pc, #116]	@ (80102dc <prvAddNewTaskToReadyList+0xc4>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	3301      	adds	r3, #1
 801026c:	4a1b      	ldr	r2, [pc, #108]	@ (80102dc <prvAddNewTaskToReadyList+0xc4>)
 801026e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010274:	2201      	movs	r2, #1
 8010276:	409a      	lsls	r2, r3
 8010278:	4b19      	ldr	r3, [pc, #100]	@ (80102e0 <prvAddNewTaskToReadyList+0xc8>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	4313      	orrs	r3, r2
 801027e:	4a18      	ldr	r2, [pc, #96]	@ (80102e0 <prvAddNewTaskToReadyList+0xc8>)
 8010280:	6013      	str	r3, [r2, #0]
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010286:	4613      	mov	r3, r2
 8010288:	009b      	lsls	r3, r3, #2
 801028a:	4413      	add	r3, r2
 801028c:	009b      	lsls	r3, r3, #2
 801028e:	4a15      	ldr	r2, [pc, #84]	@ (80102e4 <prvAddNewTaskToReadyList+0xcc>)
 8010290:	441a      	add	r2, r3
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	3304      	adds	r3, #4
 8010296:	4619      	mov	r1, r3
 8010298:	4610      	mov	r0, r2
 801029a:	f7ff f940 	bl	800f51e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801029e:	f000 ff03 	bl	80110a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80102a2:	4b0d      	ldr	r3, [pc, #52]	@ (80102d8 <prvAddNewTaskToReadyList+0xc0>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d00e      	beq.n	80102c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80102aa:	4b0a      	ldr	r3, [pc, #40]	@ (80102d4 <prvAddNewTaskToReadyList+0xbc>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102b4:	429a      	cmp	r2, r3
 80102b6:	d207      	bcs.n	80102c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80102b8:	4b0b      	ldr	r3, [pc, #44]	@ (80102e8 <prvAddNewTaskToReadyList+0xd0>)
 80102ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80102be:	601a      	str	r2, [r3, #0]
 80102c0:	f3bf 8f4f 	dsb	sy
 80102c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80102c8:	bf00      	nop
 80102ca:	3708      	adds	r7, #8
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}
 80102d0:	2400f4d4 	.word	0x2400f4d4
 80102d4:	2400f3ec 	.word	0x2400f3ec
 80102d8:	2400f4e0 	.word	0x2400f4e0
 80102dc:	2400f4f0 	.word	0x2400f4f0
 80102e0:	2400f4dc 	.word	0x2400f4dc
 80102e4:	2400f3f0 	.word	0x2400f3f0
 80102e8:	e000ed04 	.word	0xe000ed04

080102ec <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b086      	sub	sp, #24
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80102f6:	2300      	movs	r3, #0
 80102f8:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d104      	bne.n	801030a <vTaskDelayUntil+0x1e>
 8010300:	f240 4179 	movw	r1, #1145	@ 0x479
 8010304:	482c      	ldr	r0, [pc, #176]	@ (80103b8 <vTaskDelayUntil+0xcc>)
 8010306:	f7fd fe98 	bl	800e03a <cmr_panic>
		configASSERT( ( xTimeIncrement > 0U ) );
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d104      	bne.n	801031a <vTaskDelayUntil+0x2e>
 8010310:	f240 417a 	movw	r1, #1146	@ 0x47a
 8010314:	4829      	ldr	r0, [pc, #164]	@ (80103bc <vTaskDelayUntil+0xd0>)
 8010316:	f7fd fe90 	bl	800e03a <cmr_panic>
		configASSERT( uxSchedulerSuspended == 0 );
 801031a:	4b29      	ldr	r3, [pc, #164]	@ (80103c0 <vTaskDelayUntil+0xd4>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d004      	beq.n	801032c <vTaskDelayUntil+0x40>
 8010322:	f240 417b 	movw	r1, #1147	@ 0x47b
 8010326:	4827      	ldr	r0, [pc, #156]	@ (80103c4 <vTaskDelayUntil+0xd8>)
 8010328:	f7fd fe87 	bl	800e03a <cmr_panic>

		vTaskSuspendAll();
 801032c:	f000 f8ae 	bl	801048c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8010330:	4b25      	ldr	r3, [pc, #148]	@ (80103c8 <vTaskDelayUntil+0xdc>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	683a      	ldr	r2, [r7, #0]
 801033c:	4413      	add	r3, r2
 801033e:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	693a      	ldr	r2, [r7, #16]
 8010346:	429a      	cmp	r2, r3
 8010348:	d20b      	bcs.n	8010362 <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	68fa      	ldr	r2, [r7, #12]
 8010350:	429a      	cmp	r2, r3
 8010352:	d211      	bcs.n	8010378 <vTaskDelayUntil+0x8c>
 8010354:	68fa      	ldr	r2, [r7, #12]
 8010356:	693b      	ldr	r3, [r7, #16]
 8010358:	429a      	cmp	r2, r3
 801035a:	d90d      	bls.n	8010378 <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
 801035c:	2301      	movs	r3, #1
 801035e:	617b      	str	r3, [r7, #20]
 8010360:	e00a      	b.n	8010378 <vTaskDelayUntil+0x8c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	68fa      	ldr	r2, [r7, #12]
 8010368:	429a      	cmp	r2, r3
 801036a:	d303      	bcc.n	8010374 <vTaskDelayUntil+0x88>
 801036c:	68fa      	ldr	r2, [r7, #12]
 801036e:	693b      	ldr	r3, [r7, #16]
 8010370:	429a      	cmp	r2, r3
 8010372:	d901      	bls.n	8010378 <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
 8010374:	2301      	movs	r3, #1
 8010376:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	68fa      	ldr	r2, [r7, #12]
 801037c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d006      	beq.n	8010392 <vTaskDelayUntil+0xa6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8010384:	68fa      	ldr	r2, [r7, #12]
 8010386:	693b      	ldr	r3, [r7, #16]
 8010388:	1ad3      	subs	r3, r2, r3
 801038a:	2100      	movs	r1, #0
 801038c:	4618      	mov	r0, r3
 801038e:	f000 fcfb 	bl	8010d88 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8010392:	f000 f889 	bl	80104a8 <xTaskResumeAll>
 8010396:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d107      	bne.n	80103ae <vTaskDelayUntil+0xc2>
		{
			portYIELD_WITHIN_API();
 801039e:	4b0b      	ldr	r3, [pc, #44]	@ (80103cc <vTaskDelayUntil+0xe0>)
 80103a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80103a4:	601a      	str	r2, [r3, #0]
 80103a6:	f3bf 8f4f 	dsb	sy
 80103aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80103ae:	bf00      	nop
 80103b0:	3718      	adds	r7, #24
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}
 80103b6:	bf00      	nop
 80103b8:	080215f8 	.word	0x080215f8
 80103bc:	08021648 	.word	0x08021648
 80103c0:	2400f4fc 	.word	0x2400f4fc
 80103c4:	0802169c 	.word	0x0802169c
 80103c8:	2400f4d8 	.word	0x2400f4d8
 80103cc:	e000ed04 	.word	0xe000ed04

080103d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b08a      	sub	sp, #40	@ 0x28
 80103d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80103d6:	2300      	movs	r3, #0
 80103d8:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80103da:	2300      	movs	r3, #0
 80103dc:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80103de:	1d3a      	adds	r2, r7, #4
 80103e0:	f107 0108 	add.w	r1, r7, #8
 80103e4:	f107 030c 	add.w	r3, r7, #12
 80103e8:	4618      	mov	r0, r3
 80103ea:	f7fe fc07 	bl	800ebfc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80103ee:	6879      	ldr	r1, [r7, #4]
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	68fa      	ldr	r2, [r7, #12]
 80103f4:	9202      	str	r2, [sp, #8]
 80103f6:	9301      	str	r3, [sp, #4]
 80103f8:	2300      	movs	r3, #0
 80103fa:	9300      	str	r3, [sp, #0]
 80103fc:	2300      	movs	r3, #0
 80103fe:	460a      	mov	r2, r1
 8010400:	491b      	ldr	r1, [pc, #108]	@ (8010470 <vTaskStartScheduler+0xa0>)
 8010402:	481c      	ldr	r0, [pc, #112]	@ (8010474 <vTaskStartScheduler+0xa4>)
 8010404:	f7ff fe54 	bl	80100b0 <xTaskCreateStatic>
 8010408:	4603      	mov	r3, r0
 801040a:	4a1b      	ldr	r2, [pc, #108]	@ (8010478 <vTaskStartScheduler+0xa8>)
 801040c:	6013      	str	r3, [r2, #0]
												( void * ) NULL,
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801040e:	4b1a      	ldr	r3, [pc, #104]	@ (8010478 <vTaskStartScheduler+0xa8>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d002      	beq.n	801041c <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 8010416:	2301      	movs	r3, #1
 8010418:	617b      	str	r3, [r7, #20]
 801041a:	e001      	b.n	8010420 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 801041c:	2300      	movs	r3, #0
 801041e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010420:	697b      	ldr	r3, [r7, #20]
 8010422:	2b01      	cmp	r3, #1
 8010424:	d116      	bne.n	8010454 <vTaskStartScheduler+0x84>
	__asm volatile
 8010426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801042a:	f383 8811 	msr	BASEPRI, r3
 801042e:	f3bf 8f6f 	isb	sy
 8010432:	f3bf 8f4f 	dsb	sy
 8010436:	613b      	str	r3, [r7, #16]
}
 8010438:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801043a:	4b10      	ldr	r3, [pc, #64]	@ (801047c <vTaskStartScheduler+0xac>)
 801043c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010440:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010442:	4b0f      	ldr	r3, [pc, #60]	@ (8010480 <vTaskStartScheduler+0xb0>)
 8010444:	2201      	movs	r2, #1
 8010446:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8010448:	4b0e      	ldr	r3, [pc, #56]	@ (8010484 <vTaskStartScheduler+0xb4>)
 801044a:	2200      	movs	r2, #0
 801044c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801044e:	f000 fd7b 	bl	8010f48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010452:	e008      	b.n	8010466 <vTaskStartScheduler+0x96>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801045a:	d104      	bne.n	8010466 <vTaskStartScheduler+0x96>
 801045c:	f240 7184 	movw	r1, #1924	@ 0x784
 8010460:	4809      	ldr	r0, [pc, #36]	@ (8010488 <vTaskStartScheduler+0xb8>)
 8010462:	f7fd fdea 	bl	800e03a <cmr_panic>
}
 8010466:	bf00      	nop
 8010468:	3718      	adds	r7, #24
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}
 801046e:	bf00      	nop
 8010470:	08021784 	.word	0x08021784
 8010474:	08010a3d 	.word	0x08010a3d
 8010478:	2400f4f8 	.word	0x2400f4f8
 801047c:	2400f4f4 	.word	0x2400f4f4
 8010480:	2400f4e0 	.word	0x2400f4e0
 8010484:	2400f4d8 	.word	0x2400f4d8
 8010488:	0802178c 	.word	0x0802178c

0801048c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801048c:	b480      	push	{r7}
 801048e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010490:	4b04      	ldr	r3, [pc, #16]	@ (80104a4 <vTaskSuspendAll+0x18>)
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	3301      	adds	r3, #1
 8010496:	4a03      	ldr	r2, [pc, #12]	@ (80104a4 <vTaskSuspendAll+0x18>)
 8010498:	6013      	str	r3, [r2, #0]
}
 801049a:	bf00      	nop
 801049c:	46bd      	mov	sp, r7
 801049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a2:	4770      	bx	lr
 80104a4:	2400f4fc 	.word	0x2400f4fc

080104a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b084      	sub	sp, #16
 80104ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80104ae:	2300      	movs	r3, #0
 80104b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80104b2:	2300      	movs	r3, #0
 80104b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80104b6:	4b3e      	ldr	r3, [pc, #248]	@ (80105b0 <xTaskResumeAll+0x108>)
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d104      	bne.n	80104c8 <xTaskResumeAll+0x20>
 80104be:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 80104c2:	483c      	ldr	r0, [pc, #240]	@ (80105b4 <xTaskResumeAll+0x10c>)
 80104c4:	f7fd fdb9 	bl	800e03a <cmr_panic>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80104c8:	f000 fdc4 	bl	8011054 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80104cc:	4b38      	ldr	r3, [pc, #224]	@ (80105b0 <xTaskResumeAll+0x108>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	3b01      	subs	r3, #1
 80104d2:	4a37      	ldr	r2, [pc, #220]	@ (80105b0 <xTaskResumeAll+0x108>)
 80104d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80104d6:	4b36      	ldr	r3, [pc, #216]	@ (80105b0 <xTaskResumeAll+0x108>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d161      	bne.n	80105a2 <xTaskResumeAll+0xfa>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80104de:	4b36      	ldr	r3, [pc, #216]	@ (80105b8 <xTaskResumeAll+0x110>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d05d      	beq.n	80105a2 <xTaskResumeAll+0xfa>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80104e6:	e02e      	b.n	8010546 <xTaskResumeAll+0x9e>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80104e8:	4b34      	ldr	r3, [pc, #208]	@ (80105bc <xTaskResumeAll+0x114>)
 80104ea:	68db      	ldr	r3, [r3, #12]
 80104ec:	68db      	ldr	r3, [r3, #12]
 80104ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	3318      	adds	r3, #24
 80104f4:	4618      	mov	r0, r3
 80104f6:	f7ff f86f 	bl	800f5d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	3304      	adds	r3, #4
 80104fe:	4618      	mov	r0, r3
 8010500:	f7ff f86a 	bl	800f5d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010508:	2201      	movs	r2, #1
 801050a:	409a      	lsls	r2, r3
 801050c:	4b2c      	ldr	r3, [pc, #176]	@ (80105c0 <xTaskResumeAll+0x118>)
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	4313      	orrs	r3, r2
 8010512:	4a2b      	ldr	r2, [pc, #172]	@ (80105c0 <xTaskResumeAll+0x118>)
 8010514:	6013      	str	r3, [r2, #0]
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801051a:	4613      	mov	r3, r2
 801051c:	009b      	lsls	r3, r3, #2
 801051e:	4413      	add	r3, r2
 8010520:	009b      	lsls	r3, r3, #2
 8010522:	4a28      	ldr	r2, [pc, #160]	@ (80105c4 <xTaskResumeAll+0x11c>)
 8010524:	441a      	add	r2, r3
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	3304      	adds	r3, #4
 801052a:	4619      	mov	r1, r3
 801052c:	4610      	mov	r0, r2
 801052e:	f7fe fff6 	bl	800f51e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010536:	4b24      	ldr	r3, [pc, #144]	@ (80105c8 <xTaskResumeAll+0x120>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801053c:	429a      	cmp	r2, r3
 801053e:	d302      	bcc.n	8010546 <xTaskResumeAll+0x9e>
					{
						xYieldPending = pdTRUE;
 8010540:	4b22      	ldr	r3, [pc, #136]	@ (80105cc <xTaskResumeAll+0x124>)
 8010542:	2201      	movs	r2, #1
 8010544:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010546:	4b1d      	ldr	r3, [pc, #116]	@ (80105bc <xTaskResumeAll+0x114>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d1cc      	bne.n	80104e8 <xTaskResumeAll+0x40>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d001      	beq.n	8010558 <xTaskResumeAll+0xb0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010554:	f000 facc 	bl	8010af0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010558:	4b1d      	ldr	r3, [pc, #116]	@ (80105d0 <xTaskResumeAll+0x128>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d010      	beq.n	8010586 <xTaskResumeAll+0xde>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010564:	f000 f85a 	bl	801061c <xTaskIncrementTick>
 8010568:	4603      	mov	r3, r0
 801056a:	2b00      	cmp	r3, #0
 801056c:	d002      	beq.n	8010574 <xTaskResumeAll+0xcc>
							{
								xYieldPending = pdTRUE;
 801056e:	4b17      	ldr	r3, [pc, #92]	@ (80105cc <xTaskResumeAll+0x124>)
 8010570:	2201      	movs	r2, #1
 8010572:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	3b01      	subs	r3, #1
 8010578:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d1f1      	bne.n	8010564 <xTaskResumeAll+0xbc>

						uxPendedTicks = 0;
 8010580:	4b13      	ldr	r3, [pc, #76]	@ (80105d0 <xTaskResumeAll+0x128>)
 8010582:	2200      	movs	r2, #0
 8010584:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010586:	4b11      	ldr	r3, [pc, #68]	@ (80105cc <xTaskResumeAll+0x124>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d009      	beq.n	80105a2 <xTaskResumeAll+0xfa>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801058e:	2301      	movs	r3, #1
 8010590:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010592:	4b10      	ldr	r3, [pc, #64]	@ (80105d4 <xTaskResumeAll+0x12c>)
 8010594:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010598:	601a      	str	r2, [r3, #0]
 801059a:	f3bf 8f4f 	dsb	sy
 801059e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80105a2:	f000 fd81 	bl	80110a8 <vPortExitCritical>

	return xAlreadyYielded;
 80105a6:	68bb      	ldr	r3, [r7, #8]
}
 80105a8:	4618      	mov	r0, r3
 80105aa:	3710      	adds	r7, #16
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}
 80105b0:	2400f4fc 	.word	0x2400f4fc
 80105b4:	080217fc 	.word	0x080217fc
 80105b8:	2400f4d4 	.word	0x2400f4d4
 80105bc:	2400f4ac 	.word	0x2400f4ac
 80105c0:	2400f4dc 	.word	0x2400f4dc
 80105c4:	2400f3f0 	.word	0x2400f3f0
 80105c8:	2400f3ec 	.word	0x2400f3ec
 80105cc:	2400f4e8 	.word	0x2400f4e8
 80105d0:	2400f4e4 	.word	0x2400f4e4
 80105d4:	e000ed04 	.word	0xe000ed04

080105d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80105d8:	b480      	push	{r7}
 80105da:	b083      	sub	sp, #12
 80105dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80105de:	4b05      	ldr	r3, [pc, #20]	@ (80105f4 <xTaskGetTickCount+0x1c>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80105e4:	687b      	ldr	r3, [r7, #4]
}
 80105e6:	4618      	mov	r0, r3
 80105e8:	370c      	adds	r7, #12
 80105ea:	46bd      	mov	sp, r7
 80105ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f0:	4770      	bx	lr
 80105f2:	bf00      	nop
 80105f4:	2400f4d8 	.word	0x2400f4d8

080105f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b082      	sub	sp, #8
 80105fc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80105fe:	f000 fdf3 	bl	80111e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8010602:	2300      	movs	r3, #0
 8010604:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8010606:	4b04      	ldr	r3, [pc, #16]	@ (8010618 <xTaskGetTickCountFromISR+0x20>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801060c:	683b      	ldr	r3, [r7, #0]
}
 801060e:	4618      	mov	r0, r3
 8010610:	3708      	adds	r7, #8
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}
 8010616:	bf00      	nop
 8010618:	2400f4d8 	.word	0x2400f4d8

0801061c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b086      	sub	sp, #24
 8010620:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010622:	2300      	movs	r3, #0
 8010624:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010626:	4b4e      	ldr	r3, [pc, #312]	@ (8010760 <xTaskIncrementTick+0x144>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	2b00      	cmp	r3, #0
 801062c:	f040 8087 	bne.w	801073e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8010630:	4b4c      	ldr	r3, [pc, #304]	@ (8010764 <xTaskIncrementTick+0x148>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	3301      	adds	r3, #1
 8010636:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010638:	4a4a      	ldr	r2, [pc, #296]	@ (8010764 <xTaskIncrementTick+0x148>)
 801063a:	693b      	ldr	r3, [r7, #16]
 801063c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 801063e:	693b      	ldr	r3, [r7, #16]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d11a      	bne.n	801067a <xTaskIncrementTick+0x5e>
		{
			taskSWITCH_DELAYED_LISTS();
 8010644:	4b48      	ldr	r3, [pc, #288]	@ (8010768 <xTaskIncrementTick+0x14c>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d004      	beq.n	8010658 <xTaskIncrementTick+0x3c>
 801064e:	f640 11d9 	movw	r1, #2521	@ 0x9d9
 8010652:	4846      	ldr	r0, [pc, #280]	@ (801076c <xTaskIncrementTick+0x150>)
 8010654:	f7fd fcf1 	bl	800e03a <cmr_panic>
 8010658:	4b43      	ldr	r3, [pc, #268]	@ (8010768 <xTaskIncrementTick+0x14c>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	60fb      	str	r3, [r7, #12]
 801065e:	4b44      	ldr	r3, [pc, #272]	@ (8010770 <xTaskIncrementTick+0x154>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	4a41      	ldr	r2, [pc, #260]	@ (8010768 <xTaskIncrementTick+0x14c>)
 8010664:	6013      	str	r3, [r2, #0]
 8010666:	4a42      	ldr	r2, [pc, #264]	@ (8010770 <xTaskIncrementTick+0x154>)
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	6013      	str	r3, [r2, #0]
 801066c:	4b41      	ldr	r3, [pc, #260]	@ (8010774 <xTaskIncrementTick+0x158>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	3301      	adds	r3, #1
 8010672:	4a40      	ldr	r2, [pc, #256]	@ (8010774 <xTaskIncrementTick+0x158>)
 8010674:	6013      	str	r3, [r2, #0]
 8010676:	f000 fa3b 	bl	8010af0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801067a:	4b3f      	ldr	r3, [pc, #252]	@ (8010778 <xTaskIncrementTick+0x15c>)
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	693a      	ldr	r2, [r7, #16]
 8010680:	429a      	cmp	r2, r3
 8010682:	d34d      	bcc.n	8010720 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010684:	4b38      	ldr	r3, [pc, #224]	@ (8010768 <xTaskIncrementTick+0x14c>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d101      	bne.n	8010692 <xTaskIncrementTick+0x76>
 801068e:	2301      	movs	r3, #1
 8010690:	e000      	b.n	8010694 <xTaskIncrementTick+0x78>
 8010692:	2300      	movs	r3, #0
 8010694:	2b00      	cmp	r3, #0
 8010696:	d004      	beq.n	80106a2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010698:	4b37      	ldr	r3, [pc, #220]	@ (8010778 <xTaskIncrementTick+0x15c>)
 801069a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801069e:	601a      	str	r2, [r3, #0]
					break;
 80106a0:	e03e      	b.n	8010720 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80106a2:	4b31      	ldr	r3, [pc, #196]	@ (8010768 <xTaskIncrementTick+0x14c>)
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	68db      	ldr	r3, [r3, #12]
 80106a8:	68db      	ldr	r3, [r3, #12]
 80106aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	685b      	ldr	r3, [r3, #4]
 80106b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80106b2:	693a      	ldr	r2, [r7, #16]
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	429a      	cmp	r2, r3
 80106b8:	d203      	bcs.n	80106c2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80106ba:	4a2f      	ldr	r2, [pc, #188]	@ (8010778 <xTaskIncrementTick+0x15c>)
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	6013      	str	r3, [r2, #0]
						break;
 80106c0:	e02e      	b.n	8010720 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80106c2:	68bb      	ldr	r3, [r7, #8]
 80106c4:	3304      	adds	r3, #4
 80106c6:	4618      	mov	r0, r3
 80106c8:	f7fe ff86 	bl	800f5d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d004      	beq.n	80106de <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	3318      	adds	r3, #24
 80106d8:	4618      	mov	r0, r3
 80106da:	f7fe ff7d 	bl	800f5d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80106de:	68bb      	ldr	r3, [r7, #8]
 80106e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106e2:	2201      	movs	r2, #1
 80106e4:	409a      	lsls	r2, r3
 80106e6:	4b25      	ldr	r3, [pc, #148]	@ (801077c <xTaskIncrementTick+0x160>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	4313      	orrs	r3, r2
 80106ec:	4a23      	ldr	r2, [pc, #140]	@ (801077c <xTaskIncrementTick+0x160>)
 80106ee:	6013      	str	r3, [r2, #0]
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106f4:	4613      	mov	r3, r2
 80106f6:	009b      	lsls	r3, r3, #2
 80106f8:	4413      	add	r3, r2
 80106fa:	009b      	lsls	r3, r3, #2
 80106fc:	4a20      	ldr	r2, [pc, #128]	@ (8010780 <xTaskIncrementTick+0x164>)
 80106fe:	441a      	add	r2, r3
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	3304      	adds	r3, #4
 8010704:	4619      	mov	r1, r3
 8010706:	4610      	mov	r0, r2
 8010708:	f7fe ff09 	bl	800f51e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010710:	4b1c      	ldr	r3, [pc, #112]	@ (8010784 <xTaskIncrementTick+0x168>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010716:	429a      	cmp	r2, r3
 8010718:	d3b4      	bcc.n	8010684 <xTaskIncrementTick+0x68>
						{
							xSwitchRequired = pdTRUE;
 801071a:	2301      	movs	r3, #1
 801071c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801071e:	e7b1      	b.n	8010684 <xTaskIncrementTick+0x68>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010720:	4b18      	ldr	r3, [pc, #96]	@ (8010784 <xTaskIncrementTick+0x168>)
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010726:	4916      	ldr	r1, [pc, #88]	@ (8010780 <xTaskIncrementTick+0x164>)
 8010728:	4613      	mov	r3, r2
 801072a:	009b      	lsls	r3, r3, #2
 801072c:	4413      	add	r3, r2
 801072e:	009b      	lsls	r3, r3, #2
 8010730:	440b      	add	r3, r1
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	2b01      	cmp	r3, #1
 8010736:	d907      	bls.n	8010748 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8010738:	2301      	movs	r3, #1
 801073a:	617b      	str	r3, [r7, #20]
 801073c:	e004      	b.n	8010748 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801073e:	4b12      	ldr	r3, [pc, #72]	@ (8010788 <xTaskIncrementTick+0x16c>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	3301      	adds	r3, #1
 8010744:	4a10      	ldr	r2, [pc, #64]	@ (8010788 <xTaskIncrementTick+0x16c>)
 8010746:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010748:	4b10      	ldr	r3, [pc, #64]	@ (801078c <xTaskIncrementTick+0x170>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d001      	beq.n	8010754 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8010750:	2301      	movs	r3, #1
 8010752:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010754:	697b      	ldr	r3, [r7, #20]
}
 8010756:	4618      	mov	r0, r3
 8010758:	3718      	adds	r7, #24
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}
 801075e:	bf00      	nop
 8010760:	2400f4fc 	.word	0x2400f4fc
 8010764:	2400f4d8 	.word	0x2400f4d8
 8010768:	2400f4a4 	.word	0x2400f4a4
 801076c:	08021894 	.word	0x08021894
 8010770:	2400f4a8 	.word	0x2400f4a8
 8010774:	2400f4ec 	.word	0x2400f4ec
 8010778:	2400f4f4 	.word	0x2400f4f4
 801077c:	2400f4dc 	.word	0x2400f4dc
 8010780:	2400f3f0 	.word	0x2400f3f0
 8010784:	2400f3ec 	.word	0x2400f3ec
 8010788:	2400f4e4 	.word	0x2400f4e4
 801078c:	2400f4e8 	.word	0x2400f4e8

08010790 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b084      	sub	sp, #16
 8010794:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010796:	4b23      	ldr	r3, [pc, #140]	@ (8010824 <vTaskSwitchContext+0x94>)
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d003      	beq.n	80107a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801079e:	4b22      	ldr	r3, [pc, #136]	@ (8010828 <vTaskSwitchContext+0x98>)
 80107a0:	2201      	movs	r2, #1
 80107a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80107a4:	e039      	b.n	801081a <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 80107a6:	4b20      	ldr	r3, [pc, #128]	@ (8010828 <vTaskSwitchContext+0x98>)
 80107a8:	2200      	movs	r2, #0
 80107aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80107ac:	4b1f      	ldr	r3, [pc, #124]	@ (801082c <vTaskSwitchContext+0x9c>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	fab3 f383 	clz	r3, r3
 80107b8:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 80107ba:	78fb      	ldrb	r3, [r7, #3]
 80107bc:	f1c3 031f 	rsb	r3, r3, #31
 80107c0:	60fb      	str	r3, [r7, #12]
 80107c2:	491b      	ldr	r1, [pc, #108]	@ (8010830 <vTaskSwitchContext+0xa0>)
 80107c4:	68fa      	ldr	r2, [r7, #12]
 80107c6:	4613      	mov	r3, r2
 80107c8:	009b      	lsls	r3, r3, #2
 80107ca:	4413      	add	r3, r2
 80107cc:	009b      	lsls	r3, r3, #2
 80107ce:	440b      	add	r3, r1
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d104      	bne.n	80107e0 <vTaskSwitchContext+0x50>
 80107d6:	f640 21f6 	movw	r1, #2806	@ 0xaf6
 80107da:	4816      	ldr	r0, [pc, #88]	@ (8010834 <vTaskSwitchContext+0xa4>)
 80107dc:	f7fd fc2d 	bl	800e03a <cmr_panic>
 80107e0:	68fa      	ldr	r2, [r7, #12]
 80107e2:	4613      	mov	r3, r2
 80107e4:	009b      	lsls	r3, r3, #2
 80107e6:	4413      	add	r3, r2
 80107e8:	009b      	lsls	r3, r3, #2
 80107ea:	4a11      	ldr	r2, [pc, #68]	@ (8010830 <vTaskSwitchContext+0xa0>)
 80107ec:	4413      	add	r3, r2
 80107ee:	60bb      	str	r3, [r7, #8]
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	685b      	ldr	r3, [r3, #4]
 80107f4:	685a      	ldr	r2, [r3, #4]
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	605a      	str	r2, [r3, #4]
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	685a      	ldr	r2, [r3, #4]
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	3308      	adds	r3, #8
 8010802:	429a      	cmp	r2, r3
 8010804:	d104      	bne.n	8010810 <vTaskSwitchContext+0x80>
 8010806:	68bb      	ldr	r3, [r7, #8]
 8010808:	685b      	ldr	r3, [r3, #4]
 801080a:	685a      	ldr	r2, [r3, #4]
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	605a      	str	r2, [r3, #4]
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	685b      	ldr	r3, [r3, #4]
 8010814:	68db      	ldr	r3, [r3, #12]
 8010816:	4a08      	ldr	r2, [pc, #32]	@ (8010838 <vTaskSwitchContext+0xa8>)
 8010818:	6013      	str	r3, [r2, #0]
}
 801081a:	bf00      	nop
 801081c:	3710      	adds	r7, #16
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}
 8010822:	bf00      	nop
 8010824:	2400f4fc 	.word	0x2400f4fc
 8010828:	2400f4e8 	.word	0x2400f4e8
 801082c:	2400f4dc 	.word	0x2400f4dc
 8010830:	2400f3f0 	.word	0x2400f3f0
 8010834:	080218fc 	.word	0x080218fc
 8010838:	2400f3ec 	.word	0x2400f3ec

0801083c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b082      	sub	sp, #8
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
 8010844:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d104      	bne.n	8010856 <vTaskPlaceOnEventList+0x1a>
 801084c:	f640 3106 	movw	r1, #2822	@ 0xb06
 8010850:	4808      	ldr	r0, [pc, #32]	@ (8010874 <vTaskPlaceOnEventList+0x38>)
 8010852:	f7fd fbf2 	bl	800e03a <cmr_panic>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010856:	4b08      	ldr	r3, [pc, #32]	@ (8010878 <vTaskPlaceOnEventList+0x3c>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	3318      	adds	r3, #24
 801085c:	4619      	mov	r1, r3
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f7fe fe81 	bl	800f566 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010864:	2101      	movs	r1, #1
 8010866:	6838      	ldr	r0, [r7, #0]
 8010868:	f000 fa8e 	bl	8010d88 <prvAddCurrentTaskToDelayedList>
}
 801086c:	bf00      	nop
 801086e:	3708      	adds	r7, #8
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}
 8010874:	08021980 	.word	0x08021980
 8010878:	2400f3ec 	.word	0x2400f3ec

0801087c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b084      	sub	sp, #16
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	68db      	ldr	r3, [r3, #12]
 8010888:	68db      	ldr	r3, [r3, #12]
 801088a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 801088c:	68bb      	ldr	r3, [r7, #8]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d104      	bne.n	801089c <xTaskRemoveFromEventList+0x20>
 8010892:	f640 3161 	movw	r1, #2913	@ 0xb61
 8010896:	4821      	ldr	r0, [pc, #132]	@ (801091c <xTaskRemoveFromEventList+0xa0>)
 8010898:	f7fd fbcf 	bl	800e03a <cmr_panic>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801089c:	68bb      	ldr	r3, [r7, #8]
 801089e:	3318      	adds	r3, #24
 80108a0:	4618      	mov	r0, r3
 80108a2:	f7fe fe99 	bl	800f5d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80108a6:	4b1e      	ldr	r3, [pc, #120]	@ (8010920 <xTaskRemoveFromEventList+0xa4>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d11c      	bne.n	80108e8 <xTaskRemoveFromEventList+0x6c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80108ae:	68bb      	ldr	r3, [r7, #8]
 80108b0:	3304      	adds	r3, #4
 80108b2:	4618      	mov	r0, r3
 80108b4:	f7fe fe90 	bl	800f5d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80108b8:	68bb      	ldr	r3, [r7, #8]
 80108ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108bc:	2201      	movs	r2, #1
 80108be:	409a      	lsls	r2, r3
 80108c0:	4b18      	ldr	r3, [pc, #96]	@ (8010924 <xTaskRemoveFromEventList+0xa8>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	4313      	orrs	r3, r2
 80108c6:	4a17      	ldr	r2, [pc, #92]	@ (8010924 <xTaskRemoveFromEventList+0xa8>)
 80108c8:	6013      	str	r3, [r2, #0]
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108ce:	4613      	mov	r3, r2
 80108d0:	009b      	lsls	r3, r3, #2
 80108d2:	4413      	add	r3, r2
 80108d4:	009b      	lsls	r3, r3, #2
 80108d6:	4a14      	ldr	r2, [pc, #80]	@ (8010928 <xTaskRemoveFromEventList+0xac>)
 80108d8:	441a      	add	r2, r3
 80108da:	68bb      	ldr	r3, [r7, #8]
 80108dc:	3304      	adds	r3, #4
 80108de:	4619      	mov	r1, r3
 80108e0:	4610      	mov	r0, r2
 80108e2:	f7fe fe1c 	bl	800f51e <vListInsertEnd>
 80108e6:	e005      	b.n	80108f4 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	3318      	adds	r3, #24
 80108ec:	4619      	mov	r1, r3
 80108ee:	480f      	ldr	r0, [pc, #60]	@ (801092c <xTaskRemoveFromEventList+0xb0>)
 80108f0:	f7fe fe15 	bl	800f51e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80108f4:	68bb      	ldr	r3, [r7, #8]
 80108f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108f8:	4b0d      	ldr	r3, [pc, #52]	@ (8010930 <xTaskRemoveFromEventList+0xb4>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108fe:	429a      	cmp	r2, r3
 8010900:	d905      	bls.n	801090e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010902:	2301      	movs	r3, #1
 8010904:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010906:	4b0b      	ldr	r3, [pc, #44]	@ (8010934 <xTaskRemoveFromEventList+0xb8>)
 8010908:	2201      	movs	r2, #1
 801090a:	601a      	str	r2, [r3, #0]
 801090c:	e001      	b.n	8010912 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 801090e:	2300      	movs	r3, #0
 8010910:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8010912:	68fb      	ldr	r3, [r7, #12]
}
 8010914:	4618      	mov	r0, r3
 8010916:	3710      	adds	r7, #16
 8010918:	46bd      	mov	sp, r7
 801091a:	bd80      	pop	{r7, pc}
 801091c:	08021a20 	.word	0x08021a20
 8010920:	2400f4fc 	.word	0x2400f4fc
 8010924:	2400f4dc 	.word	0x2400f4dc
 8010928:	2400f3f0 	.word	0x2400f3f0
 801092c:	2400f4ac 	.word	0x2400f4ac
 8010930:	2400f3ec 	.word	0x2400f3ec
 8010934:	2400f4e8 	.word	0x2400f4e8

08010938 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b082      	sub	sp, #8
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d104      	bne.n	8010950 <vTaskSetTimeOutState+0x18>
 8010946:	f640 31c1 	movw	r1, #3009	@ 0xbc1
 801094a:	4807      	ldr	r0, [pc, #28]	@ (8010968 <vTaskSetTimeOutState+0x30>)
 801094c:	f7fd fb75 	bl	800e03a <cmr_panic>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010950:	4b06      	ldr	r3, [pc, #24]	@ (801096c <vTaskSetTimeOutState+0x34>)
 8010952:	681a      	ldr	r2, [r3, #0]
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010958:	4b05      	ldr	r3, [pc, #20]	@ (8010970 <vTaskSetTimeOutState+0x38>)
 801095a:	681a      	ldr	r2, [r3, #0]
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	605a      	str	r2, [r3, #4]
}
 8010960:	bf00      	nop
 8010962:	3708      	adds	r7, #8
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}
 8010968:	08021ac8 	.word	0x08021ac8
 801096c:	2400f4ec 	.word	0x2400f4ec
 8010970:	2400f4d8 	.word	0x2400f4d8

08010974 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b084      	sub	sp, #16
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d104      	bne.n	801098e <xTaskCheckForTimeOut+0x1a>
 8010984:	f640 31cb 	movw	r1, #3019	@ 0xbcb
 8010988:	4822      	ldr	r0, [pc, #136]	@ (8010a14 <xTaskCheckForTimeOut+0xa0>)
 801098a:	f7fd fb56 	bl	800e03a <cmr_panic>
	configASSERT( pxTicksToWait );
 801098e:	683b      	ldr	r3, [r7, #0]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d104      	bne.n	801099e <xTaskCheckForTimeOut+0x2a>
 8010994:	f640 31cc 	movw	r1, #3020	@ 0xbcc
 8010998:	481f      	ldr	r0, [pc, #124]	@ (8010a18 <xTaskCheckForTimeOut+0xa4>)
 801099a:	f7fd fb4e 	bl	800e03a <cmr_panic>

	taskENTER_CRITICAL();
 801099e:	f000 fb59 	bl	8011054 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80109a2:	4b1e      	ldr	r3, [pc, #120]	@ (8010a1c <xTaskCheckForTimeOut+0xa8>)
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80109b0:	d102      	bne.n	80109b8 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80109b2:	2300      	movs	r3, #0
 80109b4:	60fb      	str	r3, [r7, #12]
 80109b6:	e026      	b.n	8010a06 <xTaskCheckForTimeOut+0x92>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681a      	ldr	r2, [r3, #0]
 80109bc:	4b18      	ldr	r3, [pc, #96]	@ (8010a20 <xTaskCheckForTimeOut+0xac>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	429a      	cmp	r2, r3
 80109c2:	d007      	beq.n	80109d4 <xTaskCheckForTimeOut+0x60>
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	685b      	ldr	r3, [r3, #4]
 80109c8:	68ba      	ldr	r2, [r7, #8]
 80109ca:	429a      	cmp	r2, r3
 80109cc:	d302      	bcc.n	80109d4 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80109ce:	2301      	movs	r3, #1
 80109d0:	60fb      	str	r3, [r7, #12]
 80109d2:	e018      	b.n	8010a06 <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	685b      	ldr	r3, [r3, #4]
 80109d8:	68ba      	ldr	r2, [r7, #8]
 80109da:	1ad2      	subs	r2, r2, r3
 80109dc:	683b      	ldr	r3, [r7, #0]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	429a      	cmp	r2, r3
 80109e2:	d20e      	bcs.n	8010a02 <xTaskCheckForTimeOut+0x8e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80109e4:	683b      	ldr	r3, [r7, #0]
 80109e6:	681a      	ldr	r2, [r3, #0]
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6859      	ldr	r1, [r3, #4]
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	1acb      	subs	r3, r1, r3
 80109f0:	441a      	add	r2, r3
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	f7ff ff9e 	bl	8010938 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80109fc:	2300      	movs	r3, #0
 80109fe:	60fb      	str	r3, [r7, #12]
 8010a00:	e001      	b.n	8010a06 <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
 8010a02:	2301      	movs	r3, #1
 8010a04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010a06:	f000 fb4f 	bl	80110a8 <vPortExitCritical>

	return xReturn;
 8010a0a:	68fb      	ldr	r3, [r7, #12]
}
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	3710      	adds	r7, #16
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bd80      	pop	{r7, pc}
 8010a14:	08021ac8 	.word	0x08021ac8
 8010a18:	08021b10 	.word	0x08021b10
 8010a1c:	2400f4d8 	.word	0x2400f4d8
 8010a20:	2400f4ec 	.word	0x2400f4ec

08010a24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010a24:	b480      	push	{r7}
 8010a26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010a28:	4b03      	ldr	r3, [pc, #12]	@ (8010a38 <vTaskMissedYield+0x14>)
 8010a2a:	2201      	movs	r2, #1
 8010a2c:	601a      	str	r2, [r3, #0]
}
 8010a2e:	bf00      	nop
 8010a30:	46bd      	mov	sp, r7
 8010a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a36:	4770      	bx	lr
 8010a38:	2400f4e8 	.word	0x2400f4e8

08010a3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b082      	sub	sp, #8
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010a44:	f000 f84c 	bl	8010ae0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010a48:	4b06      	ldr	r3, [pc, #24]	@ (8010a64 <prvIdleTask+0x28>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	2b01      	cmp	r3, #1
 8010a4e:	d9f9      	bls.n	8010a44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010a50:	4b05      	ldr	r3, [pc, #20]	@ (8010a68 <prvIdleTask+0x2c>)
 8010a52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010a56:	601a      	str	r2, [r3, #0]
 8010a58:	f3bf 8f4f 	dsb	sy
 8010a5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010a60:	e7f0      	b.n	8010a44 <prvIdleTask+0x8>
 8010a62:	bf00      	nop
 8010a64:	2400f3f0 	.word	0x2400f3f0
 8010a68:	e000ed04 	.word	0xe000ed04

08010a6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b082      	sub	sp, #8
 8010a70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010a72:	2300      	movs	r3, #0
 8010a74:	607b      	str	r3, [r7, #4]
 8010a76:	e00c      	b.n	8010a92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010a78:	687a      	ldr	r2, [r7, #4]
 8010a7a:	4613      	mov	r3, r2
 8010a7c:	009b      	lsls	r3, r3, #2
 8010a7e:	4413      	add	r3, r2
 8010a80:	009b      	lsls	r3, r3, #2
 8010a82:	4a10      	ldr	r2, [pc, #64]	@ (8010ac4 <prvInitialiseTaskLists+0x58>)
 8010a84:	4413      	add	r3, r2
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7fe fd1c 	bl	800f4c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	3301      	adds	r3, #1
 8010a90:	607b      	str	r3, [r7, #4]
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	2b06      	cmp	r3, #6
 8010a96:	d9ef      	bls.n	8010a78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010a98:	480b      	ldr	r0, [pc, #44]	@ (8010ac8 <prvInitialiseTaskLists+0x5c>)
 8010a9a:	f7fe fd13 	bl	800f4c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010a9e:	480b      	ldr	r0, [pc, #44]	@ (8010acc <prvInitialiseTaskLists+0x60>)
 8010aa0:	f7fe fd10 	bl	800f4c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010aa4:	480a      	ldr	r0, [pc, #40]	@ (8010ad0 <prvInitialiseTaskLists+0x64>)
 8010aa6:	f7fe fd0d 	bl	800f4c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010aaa:	480a      	ldr	r0, [pc, #40]	@ (8010ad4 <prvInitialiseTaskLists+0x68>)
 8010aac:	f7fe fd0a 	bl	800f4c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010ab0:	4b09      	ldr	r3, [pc, #36]	@ (8010ad8 <prvInitialiseTaskLists+0x6c>)
 8010ab2:	4a05      	ldr	r2, [pc, #20]	@ (8010ac8 <prvInitialiseTaskLists+0x5c>)
 8010ab4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010ab6:	4b09      	ldr	r3, [pc, #36]	@ (8010adc <prvInitialiseTaskLists+0x70>)
 8010ab8:	4a04      	ldr	r2, [pc, #16]	@ (8010acc <prvInitialiseTaskLists+0x60>)
 8010aba:	601a      	str	r2, [r3, #0]
}
 8010abc:	bf00      	nop
 8010abe:	3708      	adds	r7, #8
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}
 8010ac4:	2400f3f0 	.word	0x2400f3f0
 8010ac8:	2400f47c 	.word	0x2400f47c
 8010acc:	2400f490 	.word	0x2400f490
 8010ad0:	2400f4ac 	.word	0x2400f4ac
 8010ad4:	2400f4c0 	.word	0x2400f4c0
 8010ad8:	2400f4a4 	.word	0x2400f4a4
 8010adc:	2400f4a8 	.word	0x2400f4a8

08010ae0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010ae0:	b480      	push	{r7}
 8010ae2:	af00      	add	r7, sp, #0
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010ae4:	bf00      	nop
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aec:	4770      	bx	lr
	...

08010af0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010af0:	b480      	push	{r7}
 8010af2:	b083      	sub	sp, #12
 8010af4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010af6:	4b0f      	ldr	r3, [pc, #60]	@ (8010b34 <prvResetNextTaskUnblockTime+0x44>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d101      	bne.n	8010b04 <prvResetNextTaskUnblockTime+0x14>
 8010b00:	2301      	movs	r3, #1
 8010b02:	e000      	b.n	8010b06 <prvResetNextTaskUnblockTime+0x16>
 8010b04:	2300      	movs	r3, #0
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d004      	beq.n	8010b14 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8010b38 <prvResetNextTaskUnblockTime+0x48>)
 8010b0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010b10:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010b12:	e008      	b.n	8010b26 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010b14:	4b07      	ldr	r3, [pc, #28]	@ (8010b34 <prvResetNextTaskUnblockTime+0x44>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	68db      	ldr	r3, [r3, #12]
 8010b1a:	68db      	ldr	r3, [r3, #12]
 8010b1c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	685b      	ldr	r3, [r3, #4]
 8010b22:	4a05      	ldr	r2, [pc, #20]	@ (8010b38 <prvResetNextTaskUnblockTime+0x48>)
 8010b24:	6013      	str	r3, [r2, #0]
}
 8010b26:	bf00      	nop
 8010b28:	370c      	adds	r7, #12
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b30:	4770      	bx	lr
 8010b32:	bf00      	nop
 8010b34:	2400f4a4 	.word	0x2400f4a4
 8010b38:	2400f4f4 	.word	0x2400f4f4

08010b3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010b3c:	b480      	push	{r7}
 8010b3e:	b083      	sub	sp, #12
 8010b40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010b42:	4b0b      	ldr	r3, [pc, #44]	@ (8010b70 <xTaskGetSchedulerState+0x34>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d102      	bne.n	8010b50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010b4a:	2301      	movs	r3, #1
 8010b4c:	607b      	str	r3, [r7, #4]
 8010b4e:	e008      	b.n	8010b62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b50:	4b08      	ldr	r3, [pc, #32]	@ (8010b74 <xTaskGetSchedulerState+0x38>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d102      	bne.n	8010b5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010b58:	2302      	movs	r3, #2
 8010b5a:	607b      	str	r3, [r7, #4]
 8010b5c:	e001      	b.n	8010b62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010b62:	687b      	ldr	r3, [r7, #4]
	}
 8010b64:	4618      	mov	r0, r3
 8010b66:	370c      	adds	r7, #12
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6e:	4770      	bx	lr
 8010b70:	2400f4e0 	.word	0x2400f4e0
 8010b74:	2400f4fc 	.word	0x2400f4fc

08010b78 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b084      	sub	sp, #16
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d062      	beq.n	8010c50 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b8e:	4b32      	ldr	r3, [pc, #200]	@ (8010c58 <vTaskPriorityInherit+0xe0>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d25b      	bcs.n	8010c50 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	699b      	ldr	r3, [r3, #24]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	db06      	blt.n	8010bae <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8010c58 <vTaskPriorityInherit+0xe0>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ba6:	f1c3 0207 	rsb	r2, r3, #7
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	6959      	ldr	r1, [r3, #20]
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010bb6:	4613      	mov	r3, r2
 8010bb8:	009b      	lsls	r3, r3, #2
 8010bba:	4413      	add	r3, r2
 8010bbc:	009b      	lsls	r3, r3, #2
 8010bbe:	4a27      	ldr	r2, [pc, #156]	@ (8010c5c <vTaskPriorityInherit+0xe4>)
 8010bc0:	4413      	add	r3, r2
 8010bc2:	4299      	cmp	r1, r3
 8010bc4:	d101      	bne.n	8010bca <vTaskPriorityInherit+0x52>
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	e000      	b.n	8010bcc <vTaskPriorityInherit+0x54>
 8010bca:	2300      	movs	r3, #0
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d03a      	beq.n	8010c46 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	3304      	adds	r3, #4
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f7fe fcff 	bl	800f5d8 <uxListRemove>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d115      	bne.n	8010c0c <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010be4:	491d      	ldr	r1, [pc, #116]	@ (8010c5c <vTaskPriorityInherit+0xe4>)
 8010be6:	4613      	mov	r3, r2
 8010be8:	009b      	lsls	r3, r3, #2
 8010bea:	4413      	add	r3, r2
 8010bec:	009b      	lsls	r3, r3, #2
 8010bee:	440b      	add	r3, r1
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d10a      	bne.n	8010c0c <vTaskPriorityInherit+0x94>
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bfa:	2201      	movs	r2, #1
 8010bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8010c00:	43da      	mvns	r2, r3
 8010c02:	4b17      	ldr	r3, [pc, #92]	@ (8010c60 <vTaskPriorityInherit+0xe8>)
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	4013      	ands	r3, r2
 8010c08:	4a15      	ldr	r2, [pc, #84]	@ (8010c60 <vTaskPriorityInherit+0xe8>)
 8010c0a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010c0c:	4b12      	ldr	r3, [pc, #72]	@ (8010c58 <vTaskPriorityInherit+0xe0>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxTCB );
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c1a:	2201      	movs	r2, #1
 8010c1c:	409a      	lsls	r2, r3
 8010c1e:	4b10      	ldr	r3, [pc, #64]	@ (8010c60 <vTaskPriorityInherit+0xe8>)
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	4313      	orrs	r3, r2
 8010c24:	4a0e      	ldr	r2, [pc, #56]	@ (8010c60 <vTaskPriorityInherit+0xe8>)
 8010c26:	6013      	str	r3, [r2, #0]
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c2c:	4613      	mov	r3, r2
 8010c2e:	009b      	lsls	r3, r3, #2
 8010c30:	4413      	add	r3, r2
 8010c32:	009b      	lsls	r3, r3, #2
 8010c34:	4a09      	ldr	r2, [pc, #36]	@ (8010c5c <vTaskPriorityInherit+0xe4>)
 8010c36:	441a      	add	r2, r3
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	3304      	adds	r3, #4
 8010c3c:	4619      	mov	r1, r3
 8010c3e:	4610      	mov	r0, r2
 8010c40:	f7fe fc6d 	bl	800f51e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010c44:	e004      	b.n	8010c50 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010c46:	4b04      	ldr	r3, [pc, #16]	@ (8010c58 <vTaskPriorityInherit+0xe0>)
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
 8010c50:	bf00      	nop
 8010c52:	3710      	adds	r7, #16
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}
 8010c58:	2400f3ec 	.word	0x2400f3ec
 8010c5c:	2400f3f0 	.word	0x2400f3f0
 8010c60:	2400f4dc 	.word	0x2400f4dc

08010c64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b084      	sub	sp, #16
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010c70:	2300      	movs	r3, #0
 8010c72:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d062      	beq.n	8010d40 <xTaskPriorityDisinherit+0xdc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010c7a:	4b34      	ldr	r3, [pc, #208]	@ (8010d4c <xTaskPriorityDisinherit+0xe8>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	68ba      	ldr	r2, [r7, #8]
 8010c80:	429a      	cmp	r2, r3
 8010c82:	d004      	beq.n	8010c8e <xTaskPriorityDisinherit+0x2a>
 8010c84:	f640 61c7 	movw	r1, #3783	@ 0xec7
 8010c88:	4831      	ldr	r0, [pc, #196]	@ (8010d50 <xTaskPriorityDisinherit+0xec>)
 8010c8a:	f7fd f9d6 	bl	800e03a <cmr_panic>

			configASSERT( pxTCB->uxMutexesHeld );
 8010c8e:	68bb      	ldr	r3, [r7, #8]
 8010c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d104      	bne.n	8010ca0 <xTaskPriorityDisinherit+0x3c>
 8010c96:	f640 61c9 	movw	r1, #3785	@ 0xec9
 8010c9a:	482e      	ldr	r0, [pc, #184]	@ (8010d54 <xTaskPriorityDisinherit+0xf0>)
 8010c9c:	f7fd f9cd 	bl	800e03a <cmr_panic>
			( pxTCB->uxMutexesHeld )--;
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010ca4:	1e5a      	subs	r2, r3, #1
 8010ca6:	68bb      	ldr	r3, [r7, #8]
 8010ca8:	659a      	str	r2, [r3, #88]	@ 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010cb2:	429a      	cmp	r2, r3
 8010cb4:	d044      	beq.n	8010d40 <xTaskPriorityDisinherit+0xdc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010cb6:	68bb      	ldr	r3, [r7, #8]
 8010cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d140      	bne.n	8010d40 <xTaskPriorityDisinherit+0xdc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010cbe:	68bb      	ldr	r3, [r7, #8]
 8010cc0:	3304      	adds	r3, #4
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	f7fe fc88 	bl	800f5d8 <uxListRemove>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d115      	bne.n	8010cfa <xTaskPriorityDisinherit+0x96>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010cce:	68bb      	ldr	r3, [r7, #8]
 8010cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cd2:	4921      	ldr	r1, [pc, #132]	@ (8010d58 <xTaskPriorityDisinherit+0xf4>)
 8010cd4:	4613      	mov	r3, r2
 8010cd6:	009b      	lsls	r3, r3, #2
 8010cd8:	4413      	add	r3, r2
 8010cda:	009b      	lsls	r3, r3, #2
 8010cdc:	440b      	add	r3, r1
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d10a      	bne.n	8010cfa <xTaskPriorityDisinherit+0x96>
 8010ce4:	68bb      	ldr	r3, [r7, #8]
 8010ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ce8:	2201      	movs	r2, #1
 8010cea:	fa02 f303 	lsl.w	r3, r2, r3
 8010cee:	43da      	mvns	r2, r3
 8010cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8010d5c <xTaskPriorityDisinherit+0xf8>)
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	4013      	ands	r3, r2
 8010cf6:	4a19      	ldr	r2, [pc, #100]	@ (8010d5c <xTaskPriorityDisinherit+0xf8>)
 8010cf8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010cfa:	68bb      	ldr	r3, [r7, #8]
 8010cfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010cfe:	68bb      	ldr	r3, [r7, #8]
 8010d00:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d02:	68bb      	ldr	r3, [r7, #8]
 8010d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d06:	f1c3 0207 	rsb	r2, r3, #7
 8010d0a:	68bb      	ldr	r3, [r7, #8]
 8010d0c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d12:	2201      	movs	r2, #1
 8010d14:	409a      	lsls	r2, r3
 8010d16:	4b11      	ldr	r3, [pc, #68]	@ (8010d5c <xTaskPriorityDisinherit+0xf8>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	4313      	orrs	r3, r2
 8010d1c:	4a0f      	ldr	r2, [pc, #60]	@ (8010d5c <xTaskPriorityDisinherit+0xf8>)
 8010d1e:	6013      	str	r3, [r2, #0]
 8010d20:	68bb      	ldr	r3, [r7, #8]
 8010d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d24:	4613      	mov	r3, r2
 8010d26:	009b      	lsls	r3, r3, #2
 8010d28:	4413      	add	r3, r2
 8010d2a:	009b      	lsls	r3, r3, #2
 8010d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8010d58 <xTaskPriorityDisinherit+0xf4>)
 8010d2e:	441a      	add	r2, r3
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	3304      	adds	r3, #4
 8010d34:	4619      	mov	r1, r3
 8010d36:	4610      	mov	r0, r2
 8010d38:	f7fe fbf1 	bl	800f51e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010d3c:	2301      	movs	r3, #1
 8010d3e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010d40:	68fb      	ldr	r3, [r7, #12]
	}
 8010d42:	4618      	mov	r0, r3
 8010d44:	3710      	adds	r7, #16
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
 8010d4a:	bf00      	nop
 8010d4c:	2400f3ec 	.word	0x2400f3ec
 8010d50:	08021b5c 	.word	0x08021b5c
 8010d54:	08021bb0 	.word	0x08021bb0
 8010d58:	2400f3f0 	.word	0x2400f3f0
 8010d5c:	2400f4dc 	.word	0x2400f4dc

08010d60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8010d60:	b480      	push	{r7}
 8010d62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010d64:	4b07      	ldr	r3, [pc, #28]	@ (8010d84 <pvTaskIncrementMutexHeldCount+0x24>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d004      	beq.n	8010d76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010d6c:	4b05      	ldr	r3, [pc, #20]	@ (8010d84 <pvTaskIncrementMutexHeldCount+0x24>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010d72:	3201      	adds	r2, #1
 8010d74:	659a      	str	r2, [r3, #88]	@ 0x58
		}

		return pxCurrentTCB;
 8010d76:	4b03      	ldr	r3, [pc, #12]	@ (8010d84 <pvTaskIncrementMutexHeldCount+0x24>)
 8010d78:	681b      	ldr	r3, [r3, #0]
	}
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d82:	4770      	bx	lr
 8010d84:	2400f3ec 	.word	0x2400f3ec

08010d88 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b084      	sub	sp, #16
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
 8010d90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010d92:	4b29      	ldr	r3, [pc, #164]	@ (8010e38 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010d98:	4b28      	ldr	r3, [pc, #160]	@ (8010e3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	3304      	adds	r3, #4
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f7fe fc1a 	bl	800f5d8 <uxListRemove>
 8010da4:	4603      	mov	r3, r0
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d10b      	bne.n	8010dc2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8010daa:	4b24      	ldr	r3, [pc, #144]	@ (8010e3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010db0:	2201      	movs	r2, #1
 8010db2:	fa02 f303 	lsl.w	r3, r2, r3
 8010db6:	43da      	mvns	r2, r3
 8010db8:	4b21      	ldr	r3, [pc, #132]	@ (8010e40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	4013      	ands	r3, r2
 8010dbe:	4a20      	ldr	r2, [pc, #128]	@ (8010e40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010dc0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010dc8:	d10a      	bne.n	8010de0 <prvAddCurrentTaskToDelayedList+0x58>
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d007      	beq.n	8010de0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8010e3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	3304      	adds	r3, #4
 8010dd6:	4619      	mov	r1, r3
 8010dd8:	481a      	ldr	r0, [pc, #104]	@ (8010e44 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010dda:	f7fe fba0 	bl	800f51e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010dde:	e026      	b.n	8010e2e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010de0:	68fa      	ldr	r2, [r7, #12]
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	4413      	add	r3, r2
 8010de6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010de8:	4b14      	ldr	r3, [pc, #80]	@ (8010e3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	68ba      	ldr	r2, [r7, #8]
 8010dee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010df0:	68ba      	ldr	r2, [r7, #8]
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	429a      	cmp	r2, r3
 8010df6:	d209      	bcs.n	8010e0c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010df8:	4b13      	ldr	r3, [pc, #76]	@ (8010e48 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010dfa:	681a      	ldr	r2, [r3, #0]
 8010dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8010e3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	3304      	adds	r3, #4
 8010e02:	4619      	mov	r1, r3
 8010e04:	4610      	mov	r0, r2
 8010e06:	f7fe fbae 	bl	800f566 <vListInsert>
}
 8010e0a:	e010      	b.n	8010e2e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8010e4c <prvAddCurrentTaskToDelayedList+0xc4>)
 8010e0e:	681a      	ldr	r2, [r3, #0]
 8010e10:	4b0a      	ldr	r3, [pc, #40]	@ (8010e3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	3304      	adds	r3, #4
 8010e16:	4619      	mov	r1, r3
 8010e18:	4610      	mov	r0, r2
 8010e1a:	f7fe fba4 	bl	800f566 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8010e50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	68ba      	ldr	r2, [r7, #8]
 8010e24:	429a      	cmp	r2, r3
 8010e26:	d202      	bcs.n	8010e2e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010e28:	4a09      	ldr	r2, [pc, #36]	@ (8010e50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010e2a:	68bb      	ldr	r3, [r7, #8]
 8010e2c:	6013      	str	r3, [r2, #0]
}
 8010e2e:	bf00      	nop
 8010e30:	3710      	adds	r7, #16
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bd80      	pop	{r7, pc}
 8010e36:	bf00      	nop
 8010e38:	2400f4d8 	.word	0x2400f4d8
 8010e3c:	2400f3ec 	.word	0x2400f3ec
 8010e40:	2400f4dc 	.word	0x2400f4dc
 8010e44:	2400f4c0 	.word	0x2400f4c0
 8010e48:	2400f4a8 	.word	0x2400f4a8
 8010e4c:	2400f4a4 	.word	0x2400f4a4
 8010e50:	2400f4f4 	.word	0x2400f4f4

08010e54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010e54:	b480      	push	{r7}
 8010e56:	b085      	sub	sp, #20
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	60f8      	str	r0, [r7, #12]
 8010e5c:	60b9      	str	r1, [r7, #8]
 8010e5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	3b04      	subs	r3, #4
 8010e64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010e6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	3b04      	subs	r3, #4
 8010e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010e74:	68bb      	ldr	r3, [r7, #8]
 8010e76:	f023 0201 	bic.w	r2, r3, #1
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	3b04      	subs	r3, #4
 8010e82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010e84:	4a0c      	ldr	r2, [pc, #48]	@ (8010eb8 <pxPortInitialiseStack+0x64>)
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	3b14      	subs	r3, #20
 8010e8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010e90:	687a      	ldr	r2, [r7, #4]
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	3b04      	subs	r3, #4
 8010e9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	f06f 0202 	mvn.w	r2, #2
 8010ea2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	3b20      	subs	r3, #32
 8010ea8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010eaa:	68fb      	ldr	r3, [r7, #12]
}
 8010eac:	4618      	mov	r0, r3
 8010eae:	3714      	adds	r7, #20
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb6:	4770      	bx	lr
 8010eb8:	08010ebd 	.word	0x08010ebd

08010ebc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b082      	sub	sp, #8
 8010ec0:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8010ef0 <prvTaskExitError+0x34>)
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010eca:	d004      	beq.n	8010ed6 <prvTaskExitError+0x1a>
 8010ecc:	f240 110b 	movw	r1, #267	@ 0x10b
 8010ed0:	4808      	ldr	r0, [pc, #32]	@ (8010ef4 <prvTaskExitError+0x38>)
 8010ed2:	f7fd f8b2 	bl	800e03a <cmr_panic>
	__asm volatile
 8010ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010eda:	f383 8811 	msr	BASEPRI, r3
 8010ede:	f3bf 8f6f 	isb	sy
 8010ee2:	f3bf 8f4f 	dsb	sy
 8010ee6:	607b      	str	r3, [r7, #4]
}
 8010ee8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	for( ;; );
 8010eea:	bf00      	nop
 8010eec:	e7fd      	b.n	8010eea <prvTaskExitError+0x2e>
 8010eee:	bf00      	nop
 8010ef0:	240008b4 	.word	0x240008b4
 8010ef4:	08021c04 	.word	0x08021c04
	...

08010f00 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010f00:	4b07      	ldr	r3, [pc, #28]	@ (8010f20 <pxCurrentTCBConst2>)
 8010f02:	6819      	ldr	r1, [r3, #0]
 8010f04:	6808      	ldr	r0, [r1, #0]
 8010f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f0a:	f380 8809 	msr	PSP, r0
 8010f0e:	f3bf 8f6f 	isb	sy
 8010f12:	f04f 0000 	mov.w	r0, #0
 8010f16:	f380 8811 	msr	BASEPRI, r0
 8010f1a:	4770      	bx	lr
 8010f1c:	f3af 8000 	nop.w

08010f20 <pxCurrentTCBConst2>:
 8010f20:	2400f3ec 	.word	0x2400f3ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010f24:	bf00      	nop
 8010f26:	bf00      	nop

08010f28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8010f28:	4806      	ldr	r0, [pc, #24]	@ (8010f44 <prvPortStartFirstTask+0x1c>)
 8010f2a:	6800      	ldr	r0, [r0, #0]
 8010f2c:	6800      	ldr	r0, [r0, #0]
 8010f2e:	f380 8808 	msr	MSP, r0
 8010f32:	b662      	cpsie	i
 8010f34:	b661      	cpsie	f
 8010f36:	f3bf 8f4f 	dsb	sy
 8010f3a:	f3bf 8f6f 	isb	sy
 8010f3e:	df00      	svc	0
 8010f40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010f42:	bf00      	nop
 8010f44:	e000ed08 	.word	0xe000ed08

08010f48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b084      	sub	sp, #16
 8010f4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010f4e:	4b36      	ldr	r3, [pc, #216]	@ (8011028 <xPortStartScheduler+0xe0>)
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	4a36      	ldr	r2, [pc, #216]	@ (801102c <xPortStartScheduler+0xe4>)
 8010f54:	4293      	cmp	r3, r2
 8010f56:	d104      	bne.n	8010f62 <xPortStartScheduler+0x1a>
 8010f58:	f240 1141 	movw	r1, #321	@ 0x141
 8010f5c:	4834      	ldr	r0, [pc, #208]	@ (8011030 <xPortStartScheduler+0xe8>)
 8010f5e:	f7fd f86c 	bl	800e03a <cmr_panic>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010f62:	4b31      	ldr	r3, [pc, #196]	@ (8011028 <xPortStartScheduler+0xe0>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	4a33      	ldr	r2, [pc, #204]	@ (8011034 <xPortStartScheduler+0xec>)
 8010f68:	4293      	cmp	r3, r2
 8010f6a:	d104      	bne.n	8010f76 <xPortStartScheduler+0x2e>
 8010f6c:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8010f70:	4831      	ldr	r0, [pc, #196]	@ (8011038 <xPortStartScheduler+0xf0>)
 8010f72:	f7fd f862 	bl	800e03a <cmr_panic>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010f76:	4b31      	ldr	r3, [pc, #196]	@ (801103c <xPortStartScheduler+0xf4>)
 8010f78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	781b      	ldrb	r3, [r3, #0]
 8010f7e:	b2db      	uxtb	r3, r3
 8010f80:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	22ff      	movs	r2, #255	@ 0xff
 8010f86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	781b      	ldrb	r3, [r3, #0]
 8010f8c:	b2db      	uxtb	r3, r3
 8010f8e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010f90:	79fb      	ldrb	r3, [r7, #7]
 8010f92:	b2db      	uxtb	r3, r3
 8010f94:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8010f98:	b2da      	uxtb	r2, r3
 8010f9a:	4b29      	ldr	r3, [pc, #164]	@ (8011040 <xPortStartScheduler+0xf8>)
 8010f9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010f9e:	4b29      	ldr	r3, [pc, #164]	@ (8011044 <xPortStartScheduler+0xfc>)
 8010fa0:	2207      	movs	r2, #7
 8010fa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010fa4:	e009      	b.n	8010fba <xPortStartScheduler+0x72>
		{
			ulMaxPRIGROUPValue--;
 8010fa6:	4b27      	ldr	r3, [pc, #156]	@ (8011044 <xPortStartScheduler+0xfc>)
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	3b01      	subs	r3, #1
 8010fac:	4a25      	ldr	r2, [pc, #148]	@ (8011044 <xPortStartScheduler+0xfc>)
 8010fae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010fb0:	79fb      	ldrb	r3, [r7, #7]
 8010fb2:	b2db      	uxtb	r3, r3
 8010fb4:	005b      	lsls	r3, r3, #1
 8010fb6:	b2db      	uxtb	r3, r3
 8010fb8:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010fba:	79fb      	ldrb	r3, [r7, #7]
 8010fbc:	b2db      	uxtb	r3, r3
 8010fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010fc2:	2b80      	cmp	r3, #128	@ 0x80
 8010fc4:	d0ef      	beq.n	8010fa6 <xPortStartScheduler+0x5e>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8011044 <xPortStartScheduler+0xfc>)
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	021b      	lsls	r3, r3, #8
 8010fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8011044 <xPortStartScheduler+0xfc>)
 8010fce:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8011044 <xPortStartScheduler+0xfc>)
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010fd8:	4a1a      	ldr	r2, [pc, #104]	@ (8011044 <xPortStartScheduler+0xfc>)
 8010fda:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	b2da      	uxtb	r2, r3
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010fe4:	4b18      	ldr	r3, [pc, #96]	@ (8011048 <xPortStartScheduler+0x100>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	4a17      	ldr	r2, [pc, #92]	@ (8011048 <xPortStartScheduler+0x100>)
 8010fea:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010fee:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010ff0:	4b15      	ldr	r3, [pc, #84]	@ (8011048 <xPortStartScheduler+0x100>)
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	4a14      	ldr	r2, [pc, #80]	@ (8011048 <xPortStartScheduler+0x100>)
 8010ff6:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010ffa:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010ffc:	f000 f8ce 	bl	801119c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011000:	4b12      	ldr	r3, [pc, #72]	@ (801104c <xPortStartScheduler+0x104>)
 8011002:	2200      	movs	r2, #0
 8011004:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011006:	f000 f8e5 	bl	80111d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801100a:	4b11      	ldr	r3, [pc, #68]	@ (8011050 <xPortStartScheduler+0x108>)
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	4a10      	ldr	r2, [pc, #64]	@ (8011050 <xPortStartScheduler+0x108>)
 8011010:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8011014:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011016:	f7ff ff87 	bl	8010f28 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 801101a:	f7ff ff4f 	bl	8010ebc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801101e:	2300      	movs	r3, #0
}
 8011020:	4618      	mov	r0, r3
 8011022:	3710      	adds	r7, #16
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}
 8011028:	e000ed00 	.word	0xe000ed00
 801102c:	410fc271 	.word	0x410fc271
 8011030:	08021c70 	.word	0x08021c70
 8011034:	410fc270 	.word	0x410fc270
 8011038:	08021ce4 	.word	0x08021ce4
 801103c:	e000e400 	.word	0xe000e400
 8011040:	2400f500 	.word	0x2400f500
 8011044:	2400f504 	.word	0x2400f504
 8011048:	e000ed20 	.word	0xe000ed20
 801104c:	240008b4 	.word	0x240008b4
 8011050:	e000ef34 	.word	0xe000ef34

08011054 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b082      	sub	sp, #8
 8011058:	af00      	add	r7, sp, #0
	__asm volatile
 801105a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801105e:	f383 8811 	msr	BASEPRI, r3
 8011062:	f3bf 8f6f 	isb	sy
 8011066:	f3bf 8f4f 	dsb	sy
 801106a:	607b      	str	r3, [r7, #4]
}
 801106c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801106e:	4b0b      	ldr	r3, [pc, #44]	@ (801109c <vPortEnterCritical+0x48>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	3301      	adds	r3, #1
 8011074:	4a09      	ldr	r2, [pc, #36]	@ (801109c <vPortEnterCritical+0x48>)
 8011076:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011078:	4b08      	ldr	r3, [pc, #32]	@ (801109c <vPortEnterCritical+0x48>)
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	2b01      	cmp	r3, #1
 801107e:	d109      	bne.n	8011094 <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011080:	4b07      	ldr	r3, [pc, #28]	@ (80110a0 <vPortEnterCritical+0x4c>)
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	b2db      	uxtb	r3, r3
 8011086:	2b00      	cmp	r3, #0
 8011088:	d004      	beq.n	8011094 <vPortEnterCritical+0x40>
 801108a:	f240 11a3 	movw	r1, #419	@ 0x1a3
 801108e:	4805      	ldr	r0, [pc, #20]	@ (80110a4 <vPortEnterCritical+0x50>)
 8011090:	f7fc ffd3 	bl	800e03a <cmr_panic>
	}
}
 8011094:	bf00      	nop
 8011096:	3708      	adds	r7, #8
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}
 801109c:	240008b4 	.word	0x240008b4
 80110a0:	e000ed04 	.word	0xe000ed04
 80110a4:	08021dc8 	.word	0x08021dc8

080110a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b082      	sub	sp, #8
 80110ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80110ae:	4b0e      	ldr	r3, [pc, #56]	@ (80110e8 <vPortExitCritical+0x40>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d104      	bne.n	80110c0 <vPortExitCritical+0x18>
 80110b6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80110ba:	480c      	ldr	r0, [pc, #48]	@ (80110ec <vPortExitCritical+0x44>)
 80110bc:	f7fc ffbd 	bl	800e03a <cmr_panic>
	uxCriticalNesting--;
 80110c0:	4b09      	ldr	r3, [pc, #36]	@ (80110e8 <vPortExitCritical+0x40>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	3b01      	subs	r3, #1
 80110c6:	4a08      	ldr	r2, [pc, #32]	@ (80110e8 <vPortExitCritical+0x40>)
 80110c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80110ca:	4b07      	ldr	r3, [pc, #28]	@ (80110e8 <vPortExitCritical+0x40>)
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d105      	bne.n	80110de <vPortExitCritical+0x36>
 80110d2:	2300      	movs	r3, #0
 80110d4:	607b      	str	r3, [r7, #4]
	__asm volatile
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	f383 8811 	msr	BASEPRI, r3
}
 80110dc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80110de:	bf00      	nop
 80110e0:	3708      	adds	r7, #8
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd80      	pop	{r7, pc}
 80110e6:	bf00      	nop
 80110e8:	240008b4 	.word	0x240008b4
 80110ec:	08021e50 	.word	0x08021e50

080110f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80110f0:	f3ef 8009 	mrs	r0, PSP
 80110f4:	f3bf 8f6f 	isb	sy
 80110f8:	4b15      	ldr	r3, [pc, #84]	@ (8011150 <pxCurrentTCBConst>)
 80110fa:	681a      	ldr	r2, [r3, #0]
 80110fc:	f01e 0f10 	tst.w	lr, #16
 8011100:	bf08      	it	eq
 8011102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801110a:	6010      	str	r0, [r2, #0]
 801110c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8011110:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8011114:	f380 8811 	msr	BASEPRI, r0
 8011118:	f3bf 8f4f 	dsb	sy
 801111c:	f3bf 8f6f 	isb	sy
 8011120:	f7ff fb36 	bl	8010790 <vTaskSwitchContext>
 8011124:	f04f 0000 	mov.w	r0, #0
 8011128:	f380 8811 	msr	BASEPRI, r0
 801112c:	bc08      	pop	{r3}
 801112e:	6819      	ldr	r1, [r3, #0]
 8011130:	6808      	ldr	r0, [r1, #0]
 8011132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011136:	f01e 0f10 	tst.w	lr, #16
 801113a:	bf08      	it	eq
 801113c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011140:	f380 8809 	msr	PSP, r0
 8011144:	f3bf 8f6f 	isb	sy
 8011148:	4770      	bx	lr
 801114a:	bf00      	nop
 801114c:	f3af 8000 	nop.w

08011150 <pxCurrentTCBConst>:
 8011150:	2400f3ec 	.word	0x2400f3ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011154:	bf00      	nop
 8011156:	bf00      	nop

08011158 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b082      	sub	sp, #8
 801115c:	af00      	add	r7, sp, #0
	__asm volatile
 801115e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011162:	f383 8811 	msr	BASEPRI, r3
 8011166:	f3bf 8f6f 	isb	sy
 801116a:	f3bf 8f4f 	dsb	sy
 801116e:	607b      	str	r3, [r7, #4]
}
 8011170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011172:	f7ff fa53 	bl	801061c <xTaskIncrementTick>
 8011176:	4603      	mov	r3, r0
 8011178:	2b00      	cmp	r3, #0
 801117a:	d003      	beq.n	8011184 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801117c:	4b06      	ldr	r3, [pc, #24]	@ (8011198 <xPortSysTickHandler+0x40>)
 801117e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011182:	601a      	str	r2, [r3, #0]
 8011184:	2300      	movs	r3, #0
 8011186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011188:	683b      	ldr	r3, [r7, #0]
 801118a:	f383 8811 	msr	BASEPRI, r3
}
 801118e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011190:	bf00      	nop
 8011192:	3708      	adds	r7, #8
 8011194:	46bd      	mov	sp, r7
 8011196:	bd80      	pop	{r7, pc}
 8011198:	e000ed04 	.word	0xe000ed04

0801119c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801119c:	b480      	push	{r7}
 801119e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80111a0:	4b08      	ldr	r3, [pc, #32]	@ (80111c4 <vPortSetupTimerInterrupt+0x28>)
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	4a08      	ldr	r2, [pc, #32]	@ (80111c8 <vPortSetupTimerInterrupt+0x2c>)
 80111a6:	fba2 2303 	umull	r2, r3, r2, r3
 80111aa:	099b      	lsrs	r3, r3, #6
 80111ac:	4a07      	ldr	r2, [pc, #28]	@ (80111cc <vPortSetupTimerInterrupt+0x30>)
 80111ae:	3b01      	subs	r3, #1
 80111b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80111b2:	4b07      	ldr	r3, [pc, #28]	@ (80111d0 <vPortSetupTimerInterrupt+0x34>)
 80111b4:	2207      	movs	r2, #7
 80111b6:	601a      	str	r2, [r3, #0]
}
 80111b8:	bf00      	nop
 80111ba:	46bd      	mov	sp, r7
 80111bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c0:	4770      	bx	lr
 80111c2:	bf00      	nop
 80111c4:	240008ac 	.word	0x240008ac
 80111c8:	10624dd3 	.word	0x10624dd3
 80111cc:	e000e014 	.word	0xe000e014
 80111d0:	e000e010 	.word	0xe000e010

080111d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80111d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80111e4 <vPortEnableVFP+0x10>
 80111d8:	6801      	ldr	r1, [r0, #0]
 80111da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80111de:	6001      	str	r1, [r0, #0]
 80111e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80111e2:	bf00      	nop
 80111e4:	e000ed88 	.word	0xe000ed88

080111e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b082      	sub	sp, #8
 80111ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80111ee:	f3ef 8305 	mrs	r3, IPSR
 80111f2:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2b0f      	cmp	r3, #15
 80111f8:	d90e      	bls.n	8011218 <vPortValidateInterruptPriority+0x30>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80111fa:	4a10      	ldr	r2, [pc, #64]	@ (801123c <vPortValidateInterruptPriority+0x54>)
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	4413      	add	r3, r2
 8011200:	781b      	ldrb	r3, [r3, #0]
 8011202:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011204:	4b0e      	ldr	r3, [pc, #56]	@ (8011240 <vPortValidateInterruptPriority+0x58>)
 8011206:	781b      	ldrb	r3, [r3, #0]
 8011208:	78fa      	ldrb	r2, [r7, #3]
 801120a:	429a      	cmp	r2, r3
 801120c:	d204      	bcs.n	8011218 <vPortValidateInterruptPriority+0x30>
 801120e:	f240 21e6 	movw	r1, #742	@ 0x2e6
 8011212:	480c      	ldr	r0, [pc, #48]	@ (8011244 <vPortValidateInterruptPriority+0x5c>)
 8011214:	f7fc ff11 	bl	800e03a <cmr_panic>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011218:	4b0b      	ldr	r3, [pc, #44]	@ (8011248 <vPortValidateInterruptPriority+0x60>)
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8011220:	4b0a      	ldr	r3, [pc, #40]	@ (801124c <vPortValidateInterruptPriority+0x64>)
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	429a      	cmp	r2, r3
 8011226:	d904      	bls.n	8011232 <vPortValidateInterruptPriority+0x4a>
 8011228:	f44f 713f 	mov.w	r1, #764	@ 0x2fc
 801122c:	4808      	ldr	r0, [pc, #32]	@ (8011250 <vPortValidateInterruptPriority+0x68>)
 801122e:	f7fc ff04 	bl	800e03a <cmr_panic>
	}
 8011232:	bf00      	nop
 8011234:	3708      	adds	r7, #8
 8011236:	46bd      	mov	sp, r7
 8011238:	bd80      	pop	{r7, pc}
 801123a:	bf00      	nop
 801123c:	e000e3f0 	.word	0xe000e3f0
 8011240:	2400f500 	.word	0x2400f500
 8011244:	08021eb4 	.word	0x08021eb4
 8011248:	e000ed0c 	.word	0xe000ed0c
 801124c:	2400f504 	.word	0x2400f504
 8011250:	08021f30 	.word	0x08021f30

08011254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b082      	sub	sp, #8
 8011258:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801125a:	2003      	movs	r0, #3
 801125c:	f001 fd8d 	bl	8012d7a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8011260:	f007 fc92 	bl	8018b88 <HAL_RCC_GetSysClockFreq>
 8011264:	4602      	mov	r2, r0
 8011266:	4b15      	ldr	r3, [pc, #84]	@ (80112bc <HAL_Init+0x68>)
 8011268:	699b      	ldr	r3, [r3, #24]
 801126a:	0a1b      	lsrs	r3, r3, #8
 801126c:	f003 030f 	and.w	r3, r3, #15
 8011270:	4913      	ldr	r1, [pc, #76]	@ (80112c0 <HAL_Init+0x6c>)
 8011272:	5ccb      	ldrb	r3, [r1, r3]
 8011274:	f003 031f 	and.w	r3, r3, #31
 8011278:	fa22 f303 	lsr.w	r3, r2, r3
 801127c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801127e:	4b0f      	ldr	r3, [pc, #60]	@ (80112bc <HAL_Init+0x68>)
 8011280:	699b      	ldr	r3, [r3, #24]
 8011282:	f003 030f 	and.w	r3, r3, #15
 8011286:	4a0e      	ldr	r2, [pc, #56]	@ (80112c0 <HAL_Init+0x6c>)
 8011288:	5cd3      	ldrb	r3, [r2, r3]
 801128a:	f003 031f 	and.w	r3, r3, #31
 801128e:	687a      	ldr	r2, [r7, #4]
 8011290:	fa22 f303 	lsr.w	r3, r2, r3
 8011294:	4a0b      	ldr	r2, [pc, #44]	@ (80112c4 <HAL_Init+0x70>)
 8011296:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011298:	4a0b      	ldr	r2, [pc, #44]	@ (80112c8 <HAL_Init+0x74>)
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801129e:	200f      	movs	r0, #15
 80112a0:	f00c f82c 	bl	801d2fc <HAL_InitTick>
 80112a4:	4603      	mov	r3, r0
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d001      	beq.n	80112ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80112aa:	2301      	movs	r3, #1
 80112ac:	e002      	b.n	80112b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80112ae:	f006 fe7a 	bl	8017fa6 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80112b2:	2300      	movs	r3, #0
}
 80112b4:	4618      	mov	r0, r3
 80112b6:	3708      	adds	r7, #8
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bd80      	pop	{r7, pc}
 80112bc:	58024400 	.word	0x58024400
 80112c0:	08044f94 	.word	0x08044f94
 80112c4:	240008b0 	.word	0x240008b0
 80112c8:	240008ac 	.word	0x240008ac

080112cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80112cc:	b480      	push	{r7}
 80112ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80112d0:	4b06      	ldr	r3, [pc, #24]	@ (80112ec <HAL_IncTick+0x20>)
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	461a      	mov	r2, r3
 80112d6:	4b06      	ldr	r3, [pc, #24]	@ (80112f0 <HAL_IncTick+0x24>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	4413      	add	r3, r2
 80112dc:	4a04      	ldr	r2, [pc, #16]	@ (80112f0 <HAL_IncTick+0x24>)
 80112de:	6013      	str	r3, [r2, #0]
}
 80112e0:	bf00      	nop
 80112e2:	46bd      	mov	sp, r7
 80112e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e8:	4770      	bx	lr
 80112ea:	bf00      	nop
 80112ec:	240008bc 	.word	0x240008bc
 80112f0:	2400f508 	.word	0x2400f508

080112f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80112f4:	b480      	push	{r7}
 80112f6:	af00      	add	r7, sp, #0
  return uwTick;
 80112f8:	4b03      	ldr	r3, [pc, #12]	@ (8011308 <HAL_GetTick+0x14>)
 80112fa:	681b      	ldr	r3, [r3, #0]
}
 80112fc:	4618      	mov	r0, r3
 80112fe:	46bd      	mov	sp, r7
 8011300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011304:	4770      	bx	lr
 8011306:	bf00      	nop
 8011308:	2400f508 	.word	0x2400f508

0801130c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 801130c:	b480      	push	{r7}
 801130e:	b083      	sub	sp, #12
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
 8011314:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	689b      	ldr	r3, [r3, #8]
 801131a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	431a      	orrs	r2, r3
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	609a      	str	r2, [r3, #8]
}
 8011326:	bf00      	nop
 8011328:	370c      	adds	r7, #12
 801132a:	46bd      	mov	sp, r7
 801132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011330:	4770      	bx	lr

08011332 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8011332:	b480      	push	{r7}
 8011334:	b083      	sub	sp, #12
 8011336:	af00      	add	r7, sp, #0
 8011338:	6078      	str	r0, [r7, #4]
 801133a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	689b      	ldr	r3, [r3, #8]
 8011340:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	431a      	orrs	r2, r3
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	609a      	str	r2, [r3, #8]
}
 801134c:	bf00      	nop
 801134e:	370c      	adds	r7, #12
 8011350:	46bd      	mov	sp, r7
 8011352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011356:	4770      	bx	lr

08011358 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8011358:	b480      	push	{r7}
 801135a:	b083      	sub	sp, #12
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	689b      	ldr	r3, [r3, #8]
 8011364:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8011368:	4618      	mov	r0, r3
 801136a:	370c      	adds	r7, #12
 801136c:	46bd      	mov	sp, r7
 801136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011372:	4770      	bx	lr

08011374 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8011374:	b480      	push	{r7}
 8011376:	b087      	sub	sp, #28
 8011378:	af00      	add	r7, sp, #0
 801137a:	60f8      	str	r0, [r7, #12]
 801137c:	60b9      	str	r1, [r7, #8]
 801137e:	607a      	str	r2, [r7, #4]
 8011380:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	3360      	adds	r3, #96	@ 0x60
 8011386:	461a      	mov	r2, r3
 8011388:	68bb      	ldr	r3, [r7, #8]
 801138a:	009b      	lsls	r3, r3, #2
 801138c:	4413      	add	r3, r2
 801138e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	4a10      	ldr	r2, [pc, #64]	@ (80113d4 <LL_ADC_SetOffset+0x60>)
 8011394:	4293      	cmp	r3, r2
 8011396:	d10b      	bne.n	80113b0 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8011398:	697b      	ldr	r3, [r7, #20]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80113a2:	683b      	ldr	r3, [r7, #0]
 80113a4:	4313      	orrs	r3, r2
 80113a6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80113aa:	697b      	ldr	r3, [r7, #20]
 80113ac:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80113ae:	e00b      	b.n	80113c8 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80113b0:	697b      	ldr	r3, [r7, #20]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80113be:	683b      	ldr	r3, [r7, #0]
 80113c0:	430b      	orrs	r3, r1
 80113c2:	431a      	orrs	r2, r3
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	601a      	str	r2, [r3, #0]
}
 80113c8:	bf00      	nop
 80113ca:	371c      	adds	r7, #28
 80113cc:	46bd      	mov	sp, r7
 80113ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d2:	4770      	bx	lr
 80113d4:	58026000 	.word	0x58026000

080113d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80113d8:	b480      	push	{r7}
 80113da:	b085      	sub	sp, #20
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
 80113e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	3360      	adds	r3, #96	@ 0x60
 80113e6:	461a      	mov	r2, r3
 80113e8:	683b      	ldr	r3, [r7, #0]
 80113ea:	009b      	lsls	r3, r3, #2
 80113ec:	4413      	add	r3, r2
 80113ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80113f8:	4618      	mov	r0, r3
 80113fa:	3714      	adds	r7, #20
 80113fc:	46bd      	mov	sp, r7
 80113fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011402:	4770      	bx	lr

08011404 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8011404:	b480      	push	{r7}
 8011406:	b085      	sub	sp, #20
 8011408:	af00      	add	r7, sp, #0
 801140a:	60f8      	str	r0, [r7, #12]
 801140c:	60b9      	str	r1, [r7, #8]
 801140e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	691b      	ldr	r3, [r3, #16]
 8011414:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	f003 031f 	and.w	r3, r3, #31
 801141e:	6879      	ldr	r1, [r7, #4]
 8011420:	fa01 f303 	lsl.w	r3, r1, r3
 8011424:	431a      	orrs	r2, r3
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	611a      	str	r2, [r3, #16]
}
 801142a:	bf00      	nop
 801142c:	3714      	adds	r7, #20
 801142e:	46bd      	mov	sp, r7
 8011430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011434:	4770      	bx	lr
	...

08011438 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8011438:	b480      	push	{r7}
 801143a:	b087      	sub	sp, #28
 801143c:	af00      	add	r7, sp, #0
 801143e:	60f8      	str	r0, [r7, #12]
 8011440:	60b9      	str	r1, [r7, #8]
 8011442:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	4a0c      	ldr	r2, [pc, #48]	@ (8011478 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8011448:	4293      	cmp	r3, r2
 801144a:	d00e      	beq.n	801146a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	3360      	adds	r3, #96	@ 0x60
 8011450:	461a      	mov	r2, r3
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	009b      	lsls	r3, r3, #2
 8011456:	4413      	add	r3, r2
 8011458:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 801145a:	697b      	ldr	r3, [r7, #20]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	431a      	orrs	r2, r3
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	601a      	str	r2, [r3, #0]
  }
}
 801146a:	bf00      	nop
 801146c:	371c      	adds	r7, #28
 801146e:	46bd      	mov	sp, r7
 8011470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011474:	4770      	bx	lr
 8011476:	bf00      	nop
 8011478:	58026000 	.word	0x58026000

0801147c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 801147c:	b480      	push	{r7}
 801147e:	b087      	sub	sp, #28
 8011480:	af00      	add	r7, sp, #0
 8011482:	60f8      	str	r0, [r7, #12]
 8011484:	60b9      	str	r1, [r7, #8]
 8011486:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	4a0c      	ldr	r2, [pc, #48]	@ (80114bc <LL_ADC_SetOffsetSaturation+0x40>)
 801148c:	4293      	cmp	r3, r2
 801148e:	d10e      	bne.n	80114ae <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	3360      	adds	r3, #96	@ 0x60
 8011494:	461a      	mov	r2, r3
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	009b      	lsls	r3, r3, #2
 801149a:	4413      	add	r3, r2
 801149c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 801149e:	697b      	ldr	r3, [r7, #20]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	431a      	orrs	r2, r3
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80114ae:	bf00      	nop
 80114b0:	371c      	adds	r7, #28
 80114b2:	46bd      	mov	sp, r7
 80114b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b8:	4770      	bx	lr
 80114ba:	bf00      	nop
 80114bc:	58026000 	.word	0x58026000

080114c0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80114c0:	b480      	push	{r7}
 80114c2:	b087      	sub	sp, #28
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	60f8      	str	r0, [r7, #12]
 80114c8:	60b9      	str	r1, [r7, #8]
 80114ca:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	4a0c      	ldr	r2, [pc, #48]	@ (8011500 <LL_ADC_SetOffsetSign+0x40>)
 80114d0:	4293      	cmp	r3, r2
 80114d2:	d10e      	bne.n	80114f2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	3360      	adds	r3, #96	@ 0x60
 80114d8:	461a      	mov	r2, r3
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	009b      	lsls	r3, r3, #2
 80114de:	4413      	add	r3, r2
 80114e0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80114e2:	697b      	ldr	r3, [r7, #20]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	431a      	orrs	r2, r3
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80114f2:	bf00      	nop
 80114f4:	371c      	adds	r7, #28
 80114f6:	46bd      	mov	sp, r7
 80114f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fc:	4770      	bx	lr
 80114fe:	bf00      	nop
 8011500:	58026000 	.word	0x58026000

08011504 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8011504:	b480      	push	{r7}
 8011506:	b087      	sub	sp, #28
 8011508:	af00      	add	r7, sp, #0
 801150a:	60f8      	str	r0, [r7, #12]
 801150c:	60b9      	str	r1, [r7, #8]
 801150e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	3360      	adds	r3, #96	@ 0x60
 8011514:	461a      	mov	r2, r3
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	009b      	lsls	r3, r3, #2
 801151a:	4413      	add	r3, r2
 801151c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	4a0c      	ldr	r2, [pc, #48]	@ (8011554 <LL_ADC_SetOffsetState+0x50>)
 8011522:	4293      	cmp	r3, r2
 8011524:	d108      	bne.n	8011538 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8011526:	697b      	ldr	r3, [r7, #20]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	431a      	orrs	r2, r3
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8011536:	e007      	b.n	8011548 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	431a      	orrs	r2, r3
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	601a      	str	r2, [r3, #0]
}
 8011548:	bf00      	nop
 801154a:	371c      	adds	r7, #28
 801154c:	46bd      	mov	sp, r7
 801154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011552:	4770      	bx	lr
 8011554:	58026000 	.word	0x58026000

08011558 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8011558:	b480      	push	{r7}
 801155a:	b083      	sub	sp, #12
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	68db      	ldr	r3, [r3, #12]
 8011564:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8011568:	2b00      	cmp	r3, #0
 801156a:	d101      	bne.n	8011570 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 801156c:	2301      	movs	r3, #1
 801156e:	e000      	b.n	8011572 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8011570:	2300      	movs	r3, #0
}
 8011572:	4618      	mov	r0, r3
 8011574:	370c      	adds	r7, #12
 8011576:	46bd      	mov	sp, r7
 8011578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157c:	4770      	bx	lr

0801157e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 801157e:	b480      	push	{r7}
 8011580:	b087      	sub	sp, #28
 8011582:	af00      	add	r7, sp, #0
 8011584:	60f8      	str	r0, [r7, #12]
 8011586:	60b9      	str	r1, [r7, #8]
 8011588:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	3330      	adds	r3, #48	@ 0x30
 801158e:	461a      	mov	r2, r3
 8011590:	68bb      	ldr	r3, [r7, #8]
 8011592:	0a1b      	lsrs	r3, r3, #8
 8011594:	009b      	lsls	r3, r3, #2
 8011596:	f003 030c 	and.w	r3, r3, #12
 801159a:	4413      	add	r3, r2
 801159c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801159e:	697b      	ldr	r3, [r7, #20]
 80115a0:	681a      	ldr	r2, [r3, #0]
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	f003 031f 	and.w	r3, r3, #31
 80115a8:	211f      	movs	r1, #31
 80115aa:	fa01 f303 	lsl.w	r3, r1, r3
 80115ae:	43db      	mvns	r3, r3
 80115b0:	401a      	ands	r2, r3
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	0e9b      	lsrs	r3, r3, #26
 80115b6:	f003 011f 	and.w	r1, r3, #31
 80115ba:	68bb      	ldr	r3, [r7, #8]
 80115bc:	f003 031f 	and.w	r3, r3, #31
 80115c0:	fa01 f303 	lsl.w	r3, r1, r3
 80115c4:	431a      	orrs	r2, r3
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80115ca:	bf00      	nop
 80115cc:	371c      	adds	r7, #28
 80115ce:	46bd      	mov	sp, r7
 80115d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d4:	4770      	bx	lr

080115d6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80115d6:	b480      	push	{r7}
 80115d8:	b087      	sub	sp, #28
 80115da:	af00      	add	r7, sp, #0
 80115dc:	60f8      	str	r0, [r7, #12]
 80115de:	60b9      	str	r1, [r7, #8]
 80115e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	3314      	adds	r3, #20
 80115e6:	461a      	mov	r2, r3
 80115e8:	68bb      	ldr	r3, [r7, #8]
 80115ea:	0e5b      	lsrs	r3, r3, #25
 80115ec:	009b      	lsls	r3, r3, #2
 80115ee:	f003 0304 	and.w	r3, r3, #4
 80115f2:	4413      	add	r3, r2
 80115f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80115f6:	697b      	ldr	r3, [r7, #20]
 80115f8:	681a      	ldr	r2, [r3, #0]
 80115fa:	68bb      	ldr	r3, [r7, #8]
 80115fc:	0d1b      	lsrs	r3, r3, #20
 80115fe:	f003 031f 	and.w	r3, r3, #31
 8011602:	2107      	movs	r1, #7
 8011604:	fa01 f303 	lsl.w	r3, r1, r3
 8011608:	43db      	mvns	r3, r3
 801160a:	401a      	ands	r2, r3
 801160c:	68bb      	ldr	r3, [r7, #8]
 801160e:	0d1b      	lsrs	r3, r3, #20
 8011610:	f003 031f 	and.w	r3, r3, #31
 8011614:	6879      	ldr	r1, [r7, #4]
 8011616:	fa01 f303 	lsl.w	r3, r1, r3
 801161a:	431a      	orrs	r2, r3
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8011620:	bf00      	nop
 8011622:	371c      	adds	r7, #28
 8011624:	46bd      	mov	sp, r7
 8011626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162a:	4770      	bx	lr

0801162c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 801162c:	b480      	push	{r7}
 801162e:	b085      	sub	sp, #20
 8011630:	af00      	add	r7, sp, #0
 8011632:	60f8      	str	r0, [r7, #12]
 8011634:	60b9      	str	r1, [r7, #8]
 8011636:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	4a1a      	ldr	r2, [pc, #104]	@ (80116a4 <LL_ADC_SetChannelSingleDiff+0x78>)
 801163c:	4293      	cmp	r3, r2
 801163e:	d115      	bne.n	801166c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801164c:	43db      	mvns	r3, r3
 801164e:	401a      	ands	r2, r3
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f003 0318 	and.w	r3, r3, #24
 8011656:	4914      	ldr	r1, [pc, #80]	@ (80116a8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8011658:	40d9      	lsrs	r1, r3
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	400b      	ands	r3, r1
 801165e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011662:	431a      	orrs	r2, r3
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 801166a:	e014      	b.n	8011696 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011678:	43db      	mvns	r3, r3
 801167a:	401a      	ands	r2, r3
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	f003 0318 	and.w	r3, r3, #24
 8011682:	4909      	ldr	r1, [pc, #36]	@ (80116a8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8011684:	40d9      	lsrs	r1, r3
 8011686:	68bb      	ldr	r3, [r7, #8]
 8011688:	400b      	ands	r3, r1
 801168a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801168e:	431a      	orrs	r2, r3
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8011696:	bf00      	nop
 8011698:	3714      	adds	r7, #20
 801169a:	46bd      	mov	sp, r7
 801169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a0:	4770      	bx	lr
 80116a2:	bf00      	nop
 80116a4:	58026000 	.word	0x58026000
 80116a8:	000fffff 	.word	0x000fffff

080116ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80116ac:	b480      	push	{r7}
 80116ae:	b083      	sub	sp, #12
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	689b      	ldr	r3, [r3, #8]
 80116b8:	f003 031f 	and.w	r3, r3, #31
}
 80116bc:	4618      	mov	r0, r3
 80116be:	370c      	adds	r7, #12
 80116c0:	46bd      	mov	sp, r7
 80116c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c6:	4770      	bx	lr

080116c8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80116c8:	b480      	push	{r7}
 80116ca:	b083      	sub	sp, #12
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	689b      	ldr	r3, [r3, #8]
 80116d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80116d8:	4618      	mov	r0, r3
 80116da:	370c      	adds	r7, #12
 80116dc:	46bd      	mov	sp, r7
 80116de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e2:	4770      	bx	lr

080116e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80116e4:	b480      	push	{r7}
 80116e6:	b083      	sub	sp, #12
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	689a      	ldr	r2, [r3, #8]
 80116f0:	4b04      	ldr	r3, [pc, #16]	@ (8011704 <LL_ADC_DisableDeepPowerDown+0x20>)
 80116f2:	4013      	ands	r3, r2
 80116f4:	687a      	ldr	r2, [r7, #4]
 80116f6:	6093      	str	r3, [r2, #8]
}
 80116f8:	bf00      	nop
 80116fa:	370c      	adds	r7, #12
 80116fc:	46bd      	mov	sp, r7
 80116fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011702:	4770      	bx	lr
 8011704:	5fffffc0 	.word	0x5fffffc0

08011708 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8011708:	b480      	push	{r7}
 801170a:	b083      	sub	sp, #12
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	689b      	ldr	r3, [r3, #8]
 8011714:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011718:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801171c:	d101      	bne.n	8011722 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 801171e:	2301      	movs	r3, #1
 8011720:	e000      	b.n	8011724 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8011722:	2300      	movs	r3, #0
}
 8011724:	4618      	mov	r0, r3
 8011726:	370c      	adds	r7, #12
 8011728:	46bd      	mov	sp, r7
 801172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172e:	4770      	bx	lr

08011730 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8011730:	b480      	push	{r7}
 8011732:	b083      	sub	sp, #12
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	689a      	ldr	r2, [r3, #8]
 801173c:	4b05      	ldr	r3, [pc, #20]	@ (8011754 <LL_ADC_EnableInternalRegulator+0x24>)
 801173e:	4013      	ands	r3, r2
 8011740:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8011748:	bf00      	nop
 801174a:	370c      	adds	r7, #12
 801174c:	46bd      	mov	sp, r7
 801174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011752:	4770      	bx	lr
 8011754:	6fffffc0 	.word	0x6fffffc0

08011758 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8011758:	b480      	push	{r7}
 801175a:	b083      	sub	sp, #12
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	689b      	ldr	r3, [r3, #8]
 8011764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011768:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801176c:	d101      	bne.n	8011772 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 801176e:	2301      	movs	r3, #1
 8011770:	e000      	b.n	8011774 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8011772:	2300      	movs	r3, #0
}
 8011774:	4618      	mov	r0, r3
 8011776:	370c      	adds	r7, #12
 8011778:	46bd      	mov	sp, r7
 801177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177e:	4770      	bx	lr

08011780 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8011780:	b480      	push	{r7}
 8011782:	b083      	sub	sp, #12
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	689a      	ldr	r2, [r3, #8]
 801178c:	4b05      	ldr	r3, [pc, #20]	@ (80117a4 <LL_ADC_Enable+0x24>)
 801178e:	4013      	ands	r3, r2
 8011790:	f043 0201 	orr.w	r2, r3, #1
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8011798:	bf00      	nop
 801179a:	370c      	adds	r7, #12
 801179c:	46bd      	mov	sp, r7
 801179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a2:	4770      	bx	lr
 80117a4:	7fffffc0 	.word	0x7fffffc0

080117a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80117a8:	b480      	push	{r7}
 80117aa:	b083      	sub	sp, #12
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	689b      	ldr	r3, [r3, #8]
 80117b4:	f003 0301 	and.w	r3, r3, #1
 80117b8:	2b01      	cmp	r3, #1
 80117ba:	d101      	bne.n	80117c0 <LL_ADC_IsEnabled+0x18>
 80117bc:	2301      	movs	r3, #1
 80117be:	e000      	b.n	80117c2 <LL_ADC_IsEnabled+0x1a>
 80117c0:	2300      	movs	r3, #0
}
 80117c2:	4618      	mov	r0, r3
 80117c4:	370c      	adds	r7, #12
 80117c6:	46bd      	mov	sp, r7
 80117c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117cc:	4770      	bx	lr
	...

080117d0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80117d0:	b480      	push	{r7}
 80117d2:	b083      	sub	sp, #12
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	689a      	ldr	r2, [r3, #8]
 80117dc:	4b05      	ldr	r3, [pc, #20]	@ (80117f4 <LL_ADC_REG_StartConversion+0x24>)
 80117de:	4013      	ands	r3, r2
 80117e0:	f043 0204 	orr.w	r2, r3, #4
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80117e8:	bf00      	nop
 80117ea:	370c      	adds	r7, #12
 80117ec:	46bd      	mov	sp, r7
 80117ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f2:	4770      	bx	lr
 80117f4:	7fffffc0 	.word	0x7fffffc0

080117f8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80117f8:	b480      	push	{r7}
 80117fa:	b083      	sub	sp, #12
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	689b      	ldr	r3, [r3, #8]
 8011804:	f003 0304 	and.w	r3, r3, #4
 8011808:	2b04      	cmp	r3, #4
 801180a:	d101      	bne.n	8011810 <LL_ADC_REG_IsConversionOngoing+0x18>
 801180c:	2301      	movs	r3, #1
 801180e:	e000      	b.n	8011812 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8011810:	2300      	movs	r3, #0
}
 8011812:	4618      	mov	r0, r3
 8011814:	370c      	adds	r7, #12
 8011816:	46bd      	mov	sp, r7
 8011818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181c:	4770      	bx	lr

0801181e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 801181e:	b480      	push	{r7}
 8011820:	b083      	sub	sp, #12
 8011822:	af00      	add	r7, sp, #0
 8011824:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	689b      	ldr	r3, [r3, #8]
 801182a:	f003 0308 	and.w	r3, r3, #8
 801182e:	2b08      	cmp	r3, #8
 8011830:	d101      	bne.n	8011836 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8011832:	2301      	movs	r3, #1
 8011834:	e000      	b.n	8011838 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8011836:	2300      	movs	r3, #0
}
 8011838:	4618      	mov	r0, r3
 801183a:	370c      	adds	r7, #12
 801183c:	46bd      	mov	sp, r7
 801183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011842:	4770      	bx	lr

08011844 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8011844:	b590      	push	{r4, r7, lr}
 8011846:	b089      	sub	sp, #36	@ 0x24
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801184c:	2300      	movs	r3, #0
 801184e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8011850:	2300      	movs	r3, #0
 8011852:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d101      	bne.n	801185e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 801185a:	2301      	movs	r3, #1
 801185c:	e1ee      	b.n	8011c3c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	691b      	ldr	r3, [r3, #16]
 8011862:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011868:	2b00      	cmp	r3, #0
 801186a:	d109      	bne.n	8011880 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801186c:	6878      	ldr	r0, [r7, #4]
 801186e:	f000 f9f1 	bl	8011c54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	2200      	movs	r2, #0
 8011876:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	2200      	movs	r2, #0
 801187c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	4618      	mov	r0, r3
 8011886:	f7ff ff3f 	bl	8011708 <LL_ADC_IsDeepPowerDownEnabled>
 801188a:	4603      	mov	r3, r0
 801188c:	2b00      	cmp	r3, #0
 801188e:	d004      	beq.n	801189a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	4618      	mov	r0, r3
 8011896:	f7ff ff25 	bl	80116e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	4618      	mov	r0, r3
 80118a0:	f7ff ff5a 	bl	8011758 <LL_ADC_IsInternalRegulatorEnabled>
 80118a4:	4603      	mov	r3, r0
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d114      	bne.n	80118d4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	4618      	mov	r0, r3
 80118b0:	f7ff ff3e 	bl	8011730 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80118b4:	4b8e      	ldr	r3, [pc, #568]	@ (8011af0 <HAL_ADC_Init+0x2ac>)
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	099b      	lsrs	r3, r3, #6
 80118ba:	4a8e      	ldr	r2, [pc, #568]	@ (8011af4 <HAL_ADC_Init+0x2b0>)
 80118bc:	fba2 2303 	umull	r2, r3, r2, r3
 80118c0:	099b      	lsrs	r3, r3, #6
 80118c2:	3301      	adds	r3, #1
 80118c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80118c6:	e002      	b.n	80118ce <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	3b01      	subs	r3, #1
 80118cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80118ce:	68bb      	ldr	r3, [r7, #8]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d1f9      	bne.n	80118c8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	4618      	mov	r0, r3
 80118da:	f7ff ff3d 	bl	8011758 <LL_ADC_IsInternalRegulatorEnabled>
 80118de:	4603      	mov	r3, r0
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d10d      	bne.n	8011900 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80118e8:	f043 0210 	orr.w	r2, r3, #16
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80118f4:	f043 0201 	orr.w	r2, r3, #1
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80118fc:	2301      	movs	r3, #1
 80118fe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	4618      	mov	r0, r3
 8011906:	f7ff ff77 	bl	80117f8 <LL_ADC_REG_IsConversionOngoing>
 801190a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011910:	f003 0310 	and.w	r3, r3, #16
 8011914:	2b00      	cmp	r3, #0
 8011916:	f040 8188 	bne.w	8011c2a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 801191a:	697b      	ldr	r3, [r7, #20]
 801191c:	2b00      	cmp	r3, #0
 801191e:	f040 8184 	bne.w	8011c2a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011926:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 801192a:	f043 0202 	orr.w	r2, r3, #2
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	4618      	mov	r0, r3
 8011938:	f7ff ff36 	bl	80117a8 <LL_ADC_IsEnabled>
 801193c:	4603      	mov	r3, r0
 801193e:	2b00      	cmp	r3, #0
 8011940:	d136      	bne.n	80119b0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	4a6c      	ldr	r2, [pc, #432]	@ (8011af8 <HAL_ADC_Init+0x2b4>)
 8011948:	4293      	cmp	r3, r2
 801194a:	d004      	beq.n	8011956 <HAL_ADC_Init+0x112>
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	4a6a      	ldr	r2, [pc, #424]	@ (8011afc <HAL_ADC_Init+0x2b8>)
 8011952:	4293      	cmp	r3, r2
 8011954:	d10e      	bne.n	8011974 <HAL_ADC_Init+0x130>
 8011956:	4868      	ldr	r0, [pc, #416]	@ (8011af8 <HAL_ADC_Init+0x2b4>)
 8011958:	f7ff ff26 	bl	80117a8 <LL_ADC_IsEnabled>
 801195c:	4604      	mov	r4, r0
 801195e:	4867      	ldr	r0, [pc, #412]	@ (8011afc <HAL_ADC_Init+0x2b8>)
 8011960:	f7ff ff22 	bl	80117a8 <LL_ADC_IsEnabled>
 8011964:	4603      	mov	r3, r0
 8011966:	4323      	orrs	r3, r4
 8011968:	2b00      	cmp	r3, #0
 801196a:	bf0c      	ite	eq
 801196c:	2301      	moveq	r3, #1
 801196e:	2300      	movne	r3, #0
 8011970:	b2db      	uxtb	r3, r3
 8011972:	e008      	b.n	8011986 <HAL_ADC_Init+0x142>
 8011974:	4862      	ldr	r0, [pc, #392]	@ (8011b00 <HAL_ADC_Init+0x2bc>)
 8011976:	f7ff ff17 	bl	80117a8 <LL_ADC_IsEnabled>
 801197a:	4603      	mov	r3, r0
 801197c:	2b00      	cmp	r3, #0
 801197e:	bf0c      	ite	eq
 8011980:	2301      	moveq	r3, #1
 8011982:	2300      	movne	r3, #0
 8011984:	b2db      	uxtb	r3, r3
 8011986:	2b00      	cmp	r3, #0
 8011988:	d012      	beq.n	80119b0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	4a5a      	ldr	r2, [pc, #360]	@ (8011af8 <HAL_ADC_Init+0x2b4>)
 8011990:	4293      	cmp	r3, r2
 8011992:	d004      	beq.n	801199e <HAL_ADC_Init+0x15a>
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	4a58      	ldr	r2, [pc, #352]	@ (8011afc <HAL_ADC_Init+0x2b8>)
 801199a:	4293      	cmp	r3, r2
 801199c:	d101      	bne.n	80119a2 <HAL_ADC_Init+0x15e>
 801199e:	4a59      	ldr	r2, [pc, #356]	@ (8011b04 <HAL_ADC_Init+0x2c0>)
 80119a0:	e000      	b.n	80119a4 <HAL_ADC_Init+0x160>
 80119a2:	4a59      	ldr	r2, [pc, #356]	@ (8011b08 <HAL_ADC_Init+0x2c4>)
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	685b      	ldr	r3, [r3, #4]
 80119a8:	4619      	mov	r1, r3
 80119aa:	4610      	mov	r0, r2
 80119ac:	f7ff fcae 	bl	801130c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	4a52      	ldr	r2, [pc, #328]	@ (8011b00 <HAL_ADC_Init+0x2bc>)
 80119b6:	4293      	cmp	r3, r2
 80119b8:	d129      	bne.n	8011a0e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	7e5b      	ldrb	r3, [r3, #25]
 80119be:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80119c4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80119ca:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	689b      	ldr	r3, [r3, #8]
 80119d0:	2b08      	cmp	r3, #8
 80119d2:	d013      	beq.n	80119fc <HAL_ADC_Init+0x1b8>
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	689b      	ldr	r3, [r3, #8]
 80119d8:	2b0c      	cmp	r3, #12
 80119da:	d00d      	beq.n	80119f8 <HAL_ADC_Init+0x1b4>
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	689b      	ldr	r3, [r3, #8]
 80119e0:	2b1c      	cmp	r3, #28
 80119e2:	d007      	beq.n	80119f4 <HAL_ADC_Init+0x1b0>
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	689b      	ldr	r3, [r3, #8]
 80119e8:	2b18      	cmp	r3, #24
 80119ea:	d101      	bne.n	80119f0 <HAL_ADC_Init+0x1ac>
 80119ec:	2318      	movs	r3, #24
 80119ee:	e006      	b.n	80119fe <HAL_ADC_Init+0x1ba>
 80119f0:	2300      	movs	r3, #0
 80119f2:	e004      	b.n	80119fe <HAL_ADC_Init+0x1ba>
 80119f4:	2310      	movs	r3, #16
 80119f6:	e002      	b.n	80119fe <HAL_ADC_Init+0x1ba>
 80119f8:	2308      	movs	r3, #8
 80119fa:	e000      	b.n	80119fe <HAL_ADC_Init+0x1ba>
 80119fc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80119fe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011a06:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8011a08:	4313      	orrs	r3, r2
 8011a0a:	61bb      	str	r3, [r7, #24]
 8011a0c:	e00e      	b.n	8011a2c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	7e5b      	ldrb	r3, [r3, #25]
 8011a12:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8011a18:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8011a1e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011a26:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8011a28:	4313      	orrs	r3, r2
 8011a2a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011a32:	2b01      	cmp	r3, #1
 8011a34:	d106      	bne.n	8011a44 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a3a:	3b01      	subs	r3, #1
 8011a3c:	045b      	lsls	r3, r3, #17
 8011a3e:	69ba      	ldr	r2, [r7, #24]
 8011a40:	4313      	orrs	r3, r2
 8011a42:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d009      	beq.n	8011a60 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a50:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a58:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8011a5a:	69ba      	ldr	r2, [r7, #24]
 8011a5c:	4313      	orrs	r3, r2
 8011a5e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	4a26      	ldr	r2, [pc, #152]	@ (8011b00 <HAL_ADC_Init+0x2bc>)
 8011a66:	4293      	cmp	r3, r2
 8011a68:	d115      	bne.n	8011a96 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	68da      	ldr	r2, [r3, #12]
 8011a70:	4b26      	ldr	r3, [pc, #152]	@ (8011b0c <HAL_ADC_Init+0x2c8>)
 8011a72:	4013      	ands	r3, r2
 8011a74:	687a      	ldr	r2, [r7, #4]
 8011a76:	6812      	ldr	r2, [r2, #0]
 8011a78:	69b9      	ldr	r1, [r7, #24]
 8011a7a:	430b      	orrs	r3, r1
 8011a7c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	691b      	ldr	r3, [r3, #16]
 8011a84:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	430a      	orrs	r2, r1
 8011a92:	611a      	str	r2, [r3, #16]
 8011a94:	e009      	b.n	8011aaa <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	68da      	ldr	r2, [r3, #12]
 8011a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8011b10 <HAL_ADC_Init+0x2cc>)
 8011a9e:	4013      	ands	r3, r2
 8011aa0:	687a      	ldr	r2, [r7, #4]
 8011aa2:	6812      	ldr	r2, [r2, #0]
 8011aa4:	69b9      	ldr	r1, [r7, #24]
 8011aa6:	430b      	orrs	r3, r1
 8011aa8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7ff fea2 	bl	80117f8 <LL_ADC_REG_IsConversionOngoing>
 8011ab4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	4618      	mov	r0, r3
 8011abc:	f7ff feaf 	bl	801181e <LL_ADC_INJ_IsConversionOngoing>
 8011ac0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8011ac2:	693b      	ldr	r3, [r7, #16]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	f040 808e 	bne.w	8011be6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	f040 808a 	bne.w	8011be6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8011b00 <HAL_ADC_Init+0x2bc>)
 8011ad8:	4293      	cmp	r3, r2
 8011ada:	d11b      	bne.n	8011b14 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	7e1b      	ldrb	r3, [r3, #24]
 8011ae0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011ae8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8011aea:	4313      	orrs	r3, r2
 8011aec:	61bb      	str	r3, [r7, #24]
 8011aee:	e018      	b.n	8011b22 <HAL_ADC_Init+0x2de>
 8011af0:	240008ac 	.word	0x240008ac
 8011af4:	053e2d63 	.word	0x053e2d63
 8011af8:	40022000 	.word	0x40022000
 8011afc:	40022100 	.word	0x40022100
 8011b00:	58026000 	.word	0x58026000
 8011b04:	40022300 	.word	0x40022300
 8011b08:	58026300 	.word	0x58026300
 8011b0c:	fff04007 	.word	0xfff04007
 8011b10:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	7e1b      	ldrb	r3, [r3, #24]
 8011b18:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8011b1e:	4313      	orrs	r3, r2
 8011b20:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	68da      	ldr	r2, [r3, #12]
 8011b28:	4b46      	ldr	r3, [pc, #280]	@ (8011c44 <HAL_ADC_Init+0x400>)
 8011b2a:	4013      	ands	r3, r2
 8011b2c:	687a      	ldr	r2, [r7, #4]
 8011b2e:	6812      	ldr	r2, [r2, #0]
 8011b30:	69b9      	ldr	r1, [r7, #24]
 8011b32:	430b      	orrs	r3, r1
 8011b34:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011b3c:	2b01      	cmp	r3, #1
 8011b3e:	d137      	bne.n	8011bb0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b44:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	4a3f      	ldr	r2, [pc, #252]	@ (8011c48 <HAL_ADC_Init+0x404>)
 8011b4c:	4293      	cmp	r3, r2
 8011b4e:	d116      	bne.n	8011b7e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	691a      	ldr	r2, [r3, #16]
 8011b56:	4b3d      	ldr	r3, [pc, #244]	@ (8011c4c <HAL_ADC_Init+0x408>)
 8011b58:	4013      	ands	r3, r2
 8011b5a:	687a      	ldr	r2, [r7, #4]
 8011b5c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8011b5e:	687a      	ldr	r2, [r7, #4]
 8011b60:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8011b62:	4311      	orrs	r1, r2
 8011b64:	687a      	ldr	r2, [r7, #4]
 8011b66:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8011b68:	4311      	orrs	r1, r2
 8011b6a:	687a      	ldr	r2, [r7, #4]
 8011b6c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8011b6e:	430a      	orrs	r2, r1
 8011b70:	431a      	orrs	r2, r3
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	f042 0201 	orr.w	r2, r2, #1
 8011b7a:	611a      	str	r2, [r3, #16]
 8011b7c:	e020      	b.n	8011bc0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	691a      	ldr	r2, [r3, #16]
 8011b84:	4b32      	ldr	r3, [pc, #200]	@ (8011c50 <HAL_ADC_Init+0x40c>)
 8011b86:	4013      	ands	r3, r2
 8011b88:	687a      	ldr	r2, [r7, #4]
 8011b8a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8011b8c:	3a01      	subs	r2, #1
 8011b8e:	0411      	lsls	r1, r2, #16
 8011b90:	687a      	ldr	r2, [r7, #4]
 8011b92:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8011b94:	4311      	orrs	r1, r2
 8011b96:	687a      	ldr	r2, [r7, #4]
 8011b98:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8011b9a:	4311      	orrs	r1, r2
 8011b9c:	687a      	ldr	r2, [r7, #4]
 8011b9e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8011ba0:	430a      	orrs	r2, r1
 8011ba2:	431a      	orrs	r2, r3
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	f042 0201 	orr.w	r2, r2, #1
 8011bac:	611a      	str	r2, [r3, #16]
 8011bae:	e007      	b.n	8011bc0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	691a      	ldr	r2, [r3, #16]
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	f022 0201 	bic.w	r2, r2, #1
 8011bbe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	691b      	ldr	r3, [r3, #16]
 8011bc6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	430a      	orrs	r2, r1
 8011bd4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	4a1b      	ldr	r2, [pc, #108]	@ (8011c48 <HAL_ADC_Init+0x404>)
 8011bdc:	4293      	cmp	r3, r2
 8011bde:	d002      	beq.n	8011be6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8011be0:	6878      	ldr	r0, [r7, #4]
 8011be2:	f000 ff2f 	bl	8012a44 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	691b      	ldr	r3, [r3, #16]
 8011bea:	2b01      	cmp	r3, #1
 8011bec:	d10c      	bne.n	8011c08 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011bf4:	f023 010f 	bic.w	r1, r3, #15
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	69db      	ldr	r3, [r3, #28]
 8011bfc:	1e5a      	subs	r2, r3, #1
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	430a      	orrs	r2, r1
 8011c04:	631a      	str	r2, [r3, #48]	@ 0x30
 8011c06:	e007      	b.n	8011c18 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	f022 020f 	bic.w	r2, r2, #15
 8011c16:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011c1c:	f023 0303 	bic.w	r3, r3, #3
 8011c20:	f043 0201 	orr.w	r2, r3, #1
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	661a      	str	r2, [r3, #96]	@ 0x60
 8011c28:	e007      	b.n	8011c3a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011c2e:	f043 0210 	orr.w	r2, r3, #16
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8011c36:	2301      	movs	r3, #1
 8011c38:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8011c3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	3724      	adds	r7, #36	@ 0x24
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd90      	pop	{r4, r7, pc}
 8011c44:	ffffbffc 	.word	0xffffbffc
 8011c48:	58026000 	.word	0x58026000
 8011c4c:	fc00f81f 	.word	0xfc00f81f
 8011c50:	fc00f81e 	.word	0xfc00f81e

08011c54 <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 8011c54:	b480      	push	{r7}
 8011c56:	b083      	sub	sp, #12
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */
}
 8011c5c:	bf00      	nop
 8011c5e:	370c      	adds	r7, #12
 8011c60:	46bd      	mov	sp, r7
 8011c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c66:	4770      	bx	lr

08011c68 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b086      	sub	sp, #24
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	4a5c      	ldr	r2, [pc, #368]	@ (8011de8 <HAL_ADC_Start+0x180>)
 8011c76:	4293      	cmp	r3, r2
 8011c78:	d004      	beq.n	8011c84 <HAL_ADC_Start+0x1c>
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	4a5b      	ldr	r2, [pc, #364]	@ (8011dec <HAL_ADC_Start+0x184>)
 8011c80:	4293      	cmp	r3, r2
 8011c82:	d101      	bne.n	8011c88 <HAL_ADC_Start+0x20>
 8011c84:	4b5a      	ldr	r3, [pc, #360]	@ (8011df0 <HAL_ADC_Start+0x188>)
 8011c86:	e000      	b.n	8011c8a <HAL_ADC_Start+0x22>
 8011c88:	4b5a      	ldr	r3, [pc, #360]	@ (8011df4 <HAL_ADC_Start+0x18c>)
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	f7ff fd0e 	bl	80116ac <LL_ADC_GetMultimode>
 8011c90:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	4618      	mov	r0, r3
 8011c98:	f7ff fdae 	bl	80117f8 <LL_ADC_REG_IsConversionOngoing>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	f040 809a 	bne.w	8011dd8 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8011caa:	2b01      	cmp	r3, #1
 8011cac:	d101      	bne.n	8011cb2 <HAL_ADC_Start+0x4a>
 8011cae:	2302      	movs	r3, #2
 8011cb0:	e095      	b.n	8011dde <HAL_ADC_Start+0x176>
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	2201      	movs	r2, #1
 8011cb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8011cba:	6878      	ldr	r0, [r7, #4]
 8011cbc:	f000 fe38 	bl	8012930 <ADC_Enable>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8011cc4:	7dfb      	ldrb	r3, [r7, #23]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	f040 8081 	bne.w	8011dce <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8011cd0:	4b49      	ldr	r3, [pc, #292]	@ (8011df8 <HAL_ADC_Start+0x190>)
 8011cd2:	4013      	ands	r3, r2
 8011cd4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	4a42      	ldr	r2, [pc, #264]	@ (8011dec <HAL_ADC_Start+0x184>)
 8011ce2:	4293      	cmp	r3, r2
 8011ce4:	d002      	beq.n	8011cec <HAL_ADC_Start+0x84>
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	e000      	b.n	8011cee <HAL_ADC_Start+0x86>
 8011cec:	4b3e      	ldr	r3, [pc, #248]	@ (8011de8 <HAL_ADC_Start+0x180>)
 8011cee:	687a      	ldr	r2, [r7, #4]
 8011cf0:	6812      	ldr	r2, [r2, #0]
 8011cf2:	4293      	cmp	r3, r2
 8011cf4:	d002      	beq.n	8011cfc <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8011cf6:	693b      	ldr	r3, [r7, #16]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d105      	bne.n	8011d08 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011d00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011d0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8011d10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011d14:	d106      	bne.n	8011d24 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d1a:	f023 0206 	bic.w	r2, r3, #6
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	665a      	str	r2, [r3, #100]	@ 0x64
 8011d22:	e002      	b.n	8011d2a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	2200      	movs	r2, #0
 8011d28:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	221c      	movs	r2, #28
 8011d30:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	2200      	movs	r2, #0
 8011d36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	4a2b      	ldr	r2, [pc, #172]	@ (8011dec <HAL_ADC_Start+0x184>)
 8011d40:	4293      	cmp	r3, r2
 8011d42:	d002      	beq.n	8011d4a <HAL_ADC_Start+0xe2>
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	e000      	b.n	8011d4c <HAL_ADC_Start+0xe4>
 8011d4a:	4b27      	ldr	r3, [pc, #156]	@ (8011de8 <HAL_ADC_Start+0x180>)
 8011d4c:	687a      	ldr	r2, [r7, #4]
 8011d4e:	6812      	ldr	r2, [r2, #0]
 8011d50:	4293      	cmp	r3, r2
 8011d52:	d008      	beq.n	8011d66 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8011d54:	693b      	ldr	r3, [r7, #16]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d005      	beq.n	8011d66 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8011d5a:	693b      	ldr	r3, [r7, #16]
 8011d5c:	2b05      	cmp	r3, #5
 8011d5e:	d002      	beq.n	8011d66 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8011d60:	693b      	ldr	r3, [r7, #16]
 8011d62:	2b09      	cmp	r3, #9
 8011d64:	d114      	bne.n	8011d90 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	68db      	ldr	r3, [r3, #12]
 8011d6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d007      	beq.n	8011d84 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011d78:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8011d7c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f7ff fd21 	bl	80117d0 <LL_ADC_REG_StartConversion>
 8011d8e:	e025      	b.n	8011ddc <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011d94:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	4a12      	ldr	r2, [pc, #72]	@ (8011dec <HAL_ADC_Start+0x184>)
 8011da2:	4293      	cmp	r3, r2
 8011da4:	d002      	beq.n	8011dac <HAL_ADC_Start+0x144>
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	e000      	b.n	8011dae <HAL_ADC_Start+0x146>
 8011dac:	4b0e      	ldr	r3, [pc, #56]	@ (8011de8 <HAL_ADC_Start+0x180>)
 8011dae:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	68db      	ldr	r3, [r3, #12]
 8011db4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d00f      	beq.n	8011ddc <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011dc0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8011dc4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	661a      	str	r2, [r3, #96]	@ 0x60
 8011dcc:	e006      	b.n	8011ddc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8011dd6:	e001      	b.n	8011ddc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8011dd8:	2302      	movs	r3, #2
 8011dda:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8011ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8011dde:	4618      	mov	r0, r3
 8011de0:	3718      	adds	r7, #24
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bd80      	pop	{r7, pc}
 8011de6:	bf00      	nop
 8011de8:	40022000 	.word	0x40022000
 8011dec:	40022100 	.word	0x40022100
 8011df0:	40022300 	.word	0x40022300
 8011df4:	58026300 	.word	0x58026300
 8011df8:	fffff0fe 	.word	0xfffff0fe

08011dfc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b088      	sub	sp, #32
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
 8011e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	4a72      	ldr	r2, [pc, #456]	@ (8011fd4 <HAL_ADC_PollForConversion+0x1d8>)
 8011e0c:	4293      	cmp	r3, r2
 8011e0e:	d004      	beq.n	8011e1a <HAL_ADC_PollForConversion+0x1e>
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	4a70      	ldr	r2, [pc, #448]	@ (8011fd8 <HAL_ADC_PollForConversion+0x1dc>)
 8011e16:	4293      	cmp	r3, r2
 8011e18:	d101      	bne.n	8011e1e <HAL_ADC_PollForConversion+0x22>
 8011e1a:	4b70      	ldr	r3, [pc, #448]	@ (8011fdc <HAL_ADC_PollForConversion+0x1e0>)
 8011e1c:	e000      	b.n	8011e20 <HAL_ADC_PollForConversion+0x24>
 8011e1e:	4b70      	ldr	r3, [pc, #448]	@ (8011fe0 <HAL_ADC_PollForConversion+0x1e4>)
 8011e20:	4618      	mov	r0, r3
 8011e22:	f7ff fc43 	bl	80116ac <LL_ADC_GetMultimode>
 8011e26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	695b      	ldr	r3, [r3, #20]
 8011e2c:	2b08      	cmp	r3, #8
 8011e2e:	d102      	bne.n	8011e36 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8011e30:	2308      	movs	r3, #8
 8011e32:	61fb      	str	r3, [r7, #28]
 8011e34:	e037      	b.n	8011ea6 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8011e36:	697b      	ldr	r3, [r7, #20]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d005      	beq.n	8011e48 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8011e3c:	697b      	ldr	r3, [r7, #20]
 8011e3e:	2b05      	cmp	r3, #5
 8011e40:	d002      	beq.n	8011e48 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8011e42:	697b      	ldr	r3, [r7, #20]
 8011e44:	2b09      	cmp	r3, #9
 8011e46:	d111      	bne.n	8011e6c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	68db      	ldr	r3, [r3, #12]
 8011e4e:	f003 0301 	and.w	r3, r3, #1
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d007      	beq.n	8011e66 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011e5a:	f043 0220 	orr.w	r2, r3, #32
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8011e62:	2301      	movs	r3, #1
 8011e64:	e0b1      	b.n	8011fca <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8011e66:	2304      	movs	r3, #4
 8011e68:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8011e6a:	e01c      	b.n	8011ea6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	4a58      	ldr	r2, [pc, #352]	@ (8011fd4 <HAL_ADC_PollForConversion+0x1d8>)
 8011e72:	4293      	cmp	r3, r2
 8011e74:	d004      	beq.n	8011e80 <HAL_ADC_PollForConversion+0x84>
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	4a57      	ldr	r2, [pc, #348]	@ (8011fd8 <HAL_ADC_PollForConversion+0x1dc>)
 8011e7c:	4293      	cmp	r3, r2
 8011e7e:	d101      	bne.n	8011e84 <HAL_ADC_PollForConversion+0x88>
 8011e80:	4b56      	ldr	r3, [pc, #344]	@ (8011fdc <HAL_ADC_PollForConversion+0x1e0>)
 8011e82:	e000      	b.n	8011e86 <HAL_ADC_PollForConversion+0x8a>
 8011e84:	4b56      	ldr	r3, [pc, #344]	@ (8011fe0 <HAL_ADC_PollForConversion+0x1e4>)
 8011e86:	4618      	mov	r0, r3
 8011e88:	f7ff fc1e 	bl	80116c8 <LL_ADC_GetMultiDMATransfer>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d007      	beq.n	8011ea2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011e96:	f043 0220 	orr.w	r2, r3, #32
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8011e9e:	2301      	movs	r3, #1
 8011ea0:	e093      	b.n	8011fca <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8011ea2:	2304      	movs	r3, #4
 8011ea4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8011ea6:	f7ff fa25 	bl	80112f4 <HAL_GetTick>
 8011eaa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8011eac:	e021      	b.n	8011ef2 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8011eae:	683b      	ldr	r3, [r7, #0]
 8011eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011eb4:	d01d      	beq.n	8011ef2 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8011eb6:	f7ff fa1d 	bl	80112f4 <HAL_GetTick>
 8011eba:	4602      	mov	r2, r0
 8011ebc:	693b      	ldr	r3, [r7, #16]
 8011ebe:	1ad3      	subs	r3, r2, r3
 8011ec0:	683a      	ldr	r2, [r7, #0]
 8011ec2:	429a      	cmp	r2, r3
 8011ec4:	d302      	bcc.n	8011ecc <HAL_ADC_PollForConversion+0xd0>
 8011ec6:	683b      	ldr	r3, [r7, #0]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d112      	bne.n	8011ef2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	681a      	ldr	r2, [r3, #0]
 8011ed2:	69fb      	ldr	r3, [r7, #28]
 8011ed4:	4013      	ands	r3, r2
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d10b      	bne.n	8011ef2 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011ede:	f043 0204 	orr.w	r2, r3, #4
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	2200      	movs	r2, #0
 8011eea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 8011eee:	2303      	movs	r3, #3
 8011ef0:	e06b      	b.n	8011fca <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	681a      	ldr	r2, [r3, #0]
 8011ef8:	69fb      	ldr	r3, [r7, #28]
 8011efa:	4013      	ands	r3, r2
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d0d6      	beq.n	8011eae <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011f04:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	4618      	mov	r0, r3
 8011f12:	f7ff fb21 	bl	8011558 <LL_ADC_REG_IsTriggerSourceSWStart>
 8011f16:	4603      	mov	r3, r0
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d01c      	beq.n	8011f56 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	7e5b      	ldrb	r3, [r3, #25]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d118      	bne.n	8011f56 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	f003 0308 	and.w	r3, r3, #8
 8011f2e:	2b08      	cmp	r3, #8
 8011f30:	d111      	bne.n	8011f56 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011f36:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011f42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d105      	bne.n	8011f56 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011f4e:	f043 0201 	orr.w	r2, r3, #1
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8011fd8 <HAL_ADC_PollForConversion+0x1dc>)
 8011f5c:	4293      	cmp	r3, r2
 8011f5e:	d002      	beq.n	8011f66 <HAL_ADC_PollForConversion+0x16a>
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	e000      	b.n	8011f68 <HAL_ADC_PollForConversion+0x16c>
 8011f66:	4b1b      	ldr	r3, [pc, #108]	@ (8011fd4 <HAL_ADC_PollForConversion+0x1d8>)
 8011f68:	687a      	ldr	r2, [r7, #4]
 8011f6a:	6812      	ldr	r2, [r2, #0]
 8011f6c:	4293      	cmp	r3, r2
 8011f6e:	d008      	beq.n	8011f82 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8011f70:	697b      	ldr	r3, [r7, #20]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d005      	beq.n	8011f82 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8011f76:	697b      	ldr	r3, [r7, #20]
 8011f78:	2b05      	cmp	r3, #5
 8011f7a:	d002      	beq.n	8011f82 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8011f7c:	697b      	ldr	r3, [r7, #20]
 8011f7e:	2b09      	cmp	r3, #9
 8011f80:	d104      	bne.n	8011f8c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	68db      	ldr	r3, [r3, #12]
 8011f88:	61bb      	str	r3, [r7, #24]
 8011f8a:	e00c      	b.n	8011fa6 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	4a11      	ldr	r2, [pc, #68]	@ (8011fd8 <HAL_ADC_PollForConversion+0x1dc>)
 8011f92:	4293      	cmp	r3, r2
 8011f94:	d002      	beq.n	8011f9c <HAL_ADC_PollForConversion+0x1a0>
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	e000      	b.n	8011f9e <HAL_ADC_PollForConversion+0x1a2>
 8011f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8011fd4 <HAL_ADC_PollForConversion+0x1d8>)
 8011f9e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	68db      	ldr	r3, [r3, #12]
 8011fa4:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8011fa6:	69fb      	ldr	r3, [r7, #28]
 8011fa8:	2b08      	cmp	r3, #8
 8011faa:	d104      	bne.n	8011fb6 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	2208      	movs	r2, #8
 8011fb2:	601a      	str	r2, [r3, #0]
 8011fb4:	e008      	b.n	8011fc8 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8011fb6:	69bb      	ldr	r3, [r7, #24]
 8011fb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d103      	bne.n	8011fc8 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	220c      	movs	r2, #12
 8011fc6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8011fc8:	2300      	movs	r3, #0
}
 8011fca:	4618      	mov	r0, r3
 8011fcc:	3720      	adds	r7, #32
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	bd80      	pop	{r7, pc}
 8011fd2:	bf00      	nop
 8011fd4:	40022000 	.word	0x40022000
 8011fd8:	40022100 	.word	0x40022100
 8011fdc:	40022300 	.word	0x40022300
 8011fe0:	58026300 	.word	0x58026300

08011fe4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8011fe4:	b480      	push	{r7}
 8011fe6:	b083      	sub	sp, #12
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	370c      	adds	r7, #12
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffc:	4770      	bx	lr
	...

08012000 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8012000:	b590      	push	{r4, r7, lr}
 8012002:	b0a9      	sub	sp, #164	@ 0xa4
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
 8012008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801200a:	2300      	movs	r3, #0
 801200c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8012010:	2300      	movs	r3, #0
 8012012:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801201a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 801201c:	683b      	ldr	r3, [r7, #0]
 801201e:	68db      	ldr	r3, [r3, #12]
 8012020:	4a9e      	ldr	r2, [pc, #632]	@ (801229c <HAL_ADC_ConfigChannel+0x29c>)
 8012022:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 801202a:	2b01      	cmp	r3, #1
 801202c:	d102      	bne.n	8012034 <HAL_ADC_ConfigChannel+0x34>
 801202e:	2302      	movs	r3, #2
 8012030:	f000 bc65 	b.w	80128fe <HAL_ADC_ConfigChannel+0x8fe>
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	2201      	movs	r2, #1
 8012038:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	4618      	mov	r0, r3
 8012042:	f7ff fbd9 	bl	80117f8 <LL_ADC_REG_IsConversionOngoing>
 8012046:	4603      	mov	r3, r0
 8012048:	2b00      	cmp	r3, #0
 801204a:	f040 8449 	bne.w	80128e0 <HAL_ADC_ConfigChannel+0x8e0>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	4a93      	ldr	r2, [pc, #588]	@ (80122a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8012054:	4293      	cmp	r3, r2
 8012056:	d029      	beq.n	80120ac <HAL_ADC_ConfigChannel+0xac>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012060:	2b00      	cmp	r3, #0
 8012062:	d108      	bne.n	8012076 <HAL_ADC_ConfigChannel+0x76>
 8012064:	683b      	ldr	r3, [r7, #0]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	0e9b      	lsrs	r3, r3, #26
 801206a:	f003 031f 	and.w	r3, r3, #31
 801206e:	2201      	movs	r2, #1
 8012070:	fa02 f303 	lsl.w	r3, r2, r3
 8012074:	e013      	b.n	801209e <HAL_ADC_ConfigChannel+0x9e>
 8012076:	683b      	ldr	r3, [r7, #0]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801207e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012082:	fa93 f3a3 	rbit	r3, r3
 8012086:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 801208a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801208e:	fab3 f383 	clz	r3, r3
 8012092:	b2db      	uxtb	r3, r3
 8012094:	f003 031f 	and.w	r3, r3, #31
 8012098:	2201      	movs	r2, #1
 801209a:	fa02 f303 	lsl.w	r3, r2, r3
 801209e:	687a      	ldr	r2, [r7, #4]
 80120a0:	6812      	ldr	r2, [r2, #0]
 80120a2:	69d1      	ldr	r1, [r2, #28]
 80120a4:	687a      	ldr	r2, [r7, #4]
 80120a6:	6812      	ldr	r2, [r2, #0]
 80120a8:	430b      	orrs	r3, r1
 80120aa:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	6818      	ldr	r0, [r3, #0]
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	6859      	ldr	r1, [r3, #4]
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	461a      	mov	r2, r3
 80120ba:	f7ff fa60 	bl	801157e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	4618      	mov	r0, r3
 80120c4:	f7ff fb98 	bl	80117f8 <LL_ADC_REG_IsConversionOngoing>
 80120c8:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	4618      	mov	r0, r3
 80120d2:	f7ff fba4 	bl	801181e <LL_ADC_INJ_IsConversionOngoing>
 80120d6:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80120da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80120de:	2b00      	cmp	r3, #0
 80120e0:	f040 8214 	bne.w	801250c <HAL_ADC_ConfigChannel+0x50c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80120e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	f040 820f 	bne.w	801250c <HAL_ADC_ConfigChannel+0x50c>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6818      	ldr	r0, [r3, #0]
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	6819      	ldr	r1, [r3, #0]
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	689b      	ldr	r3, [r3, #8]
 80120fa:	461a      	mov	r2, r3
 80120fc:	f7ff fa6b 	bl	80115d6 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	4a66      	ldr	r2, [pc, #408]	@ (80122a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8012106:	4293      	cmp	r3, r2
 8012108:	d10d      	bne.n	8012126 <HAL_ADC_ConfigChannel+0x126>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 801210a:	683b      	ldr	r3, [r7, #0]
 801210c:	695a      	ldr	r2, [r3, #20]
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	68db      	ldr	r3, [r3, #12]
 8012114:	08db      	lsrs	r3, r3, #3
 8012116:	f003 0303 	and.w	r3, r3, #3
 801211a:	005b      	lsls	r3, r3, #1
 801211c:	fa02 f303 	lsl.w	r3, r2, r3
 8012120:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012124:	e032      	b.n	801218c <HAL_ADC_ConfigChannel+0x18c>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8012126:	4b5f      	ldr	r3, [pc, #380]	@ (80122a4 <HAL_ADC_ConfigChannel+0x2a4>)
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801212e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012132:	d10b      	bne.n	801214c <HAL_ADC_ConfigChannel+0x14c>
 8012134:	683b      	ldr	r3, [r7, #0]
 8012136:	695a      	ldr	r2, [r3, #20]
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	68db      	ldr	r3, [r3, #12]
 801213e:	089b      	lsrs	r3, r3, #2
 8012140:	f003 0307 	and.w	r3, r3, #7
 8012144:	005b      	lsls	r3, r3, #1
 8012146:	fa02 f303 	lsl.w	r3, r2, r3
 801214a:	e01d      	b.n	8012188 <HAL_ADC_ConfigChannel+0x188>
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	68db      	ldr	r3, [r3, #12]
 8012152:	f003 0310 	and.w	r3, r3, #16
 8012156:	2b00      	cmp	r3, #0
 8012158:	d10b      	bne.n	8012172 <HAL_ADC_ConfigChannel+0x172>
 801215a:	683b      	ldr	r3, [r7, #0]
 801215c:	695a      	ldr	r2, [r3, #20]
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	68db      	ldr	r3, [r3, #12]
 8012164:	089b      	lsrs	r3, r3, #2
 8012166:	f003 0307 	and.w	r3, r3, #7
 801216a:	005b      	lsls	r3, r3, #1
 801216c:	fa02 f303 	lsl.w	r3, r2, r3
 8012170:	e00a      	b.n	8012188 <HAL_ADC_ConfigChannel+0x188>
 8012172:	683b      	ldr	r3, [r7, #0]
 8012174:	695a      	ldr	r2, [r3, #20]
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	68db      	ldr	r3, [r3, #12]
 801217c:	089b      	lsrs	r3, r3, #2
 801217e:	f003 0304 	and.w	r3, r3, #4
 8012182:	005b      	lsls	r3, r3, #1
 8012184:	fa02 f303 	lsl.w	r3, r2, r3
 8012188:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 801218c:	683b      	ldr	r3, [r7, #0]
 801218e:	691b      	ldr	r3, [r3, #16]
 8012190:	2b04      	cmp	r3, #4
 8012192:	d048      	beq.n	8012226 <HAL_ADC_ConfigChannel+0x226>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	6818      	ldr	r0, [r3, #0]
 8012198:	683b      	ldr	r3, [r7, #0]
 801219a:	6919      	ldr	r1, [r3, #16]
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	681a      	ldr	r2, [r3, #0]
 80121a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80121a4:	f7ff f8e6 	bl	8011374 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	4a3c      	ldr	r2, [pc, #240]	@ (80122a0 <HAL_ADC_ConfigChannel+0x2a0>)
 80121ae:	4293      	cmp	r3, r2
 80121b0:	d119      	bne.n	80121e6 <HAL_ADC_ConfigChannel+0x1e6>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6818      	ldr	r0, [r3, #0]
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	6919      	ldr	r1, [r3, #16]
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	69db      	ldr	r3, [r3, #28]
 80121be:	461a      	mov	r2, r3
 80121c0:	f7ff f97e 	bl	80114c0 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	6818      	ldr	r0, [r3, #0]
 80121c8:	683b      	ldr	r3, [r7, #0]
 80121ca:	6919      	ldr	r1, [r3, #16]
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80121d2:	2b01      	cmp	r3, #1
 80121d4:	d102      	bne.n	80121dc <HAL_ADC_ConfigChannel+0x1dc>
 80121d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80121da:	e000      	b.n	80121de <HAL_ADC_ConfigChannel+0x1de>
 80121dc:	2300      	movs	r3, #0
 80121de:	461a      	mov	r2, r3
 80121e0:	f7ff f94c 	bl	801147c <LL_ADC_SetOffsetSaturation>
 80121e4:	e192      	b.n	801250c <HAL_ADC_ConfigChannel+0x50c>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	6818      	ldr	r0, [r3, #0]
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	6919      	ldr	r1, [r3, #16]
 80121ee:	683b      	ldr	r3, [r7, #0]
 80121f0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80121f4:	2b01      	cmp	r3, #1
 80121f6:	d102      	bne.n	80121fe <HAL_ADC_ConfigChannel+0x1fe>
 80121f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80121fc:	e000      	b.n	8012200 <HAL_ADC_ConfigChannel+0x200>
 80121fe:	2300      	movs	r3, #0
 8012200:	461a      	mov	r2, r3
 8012202:	f7ff f919 	bl	8011438 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	6818      	ldr	r0, [r3, #0]
 801220a:	683b      	ldr	r3, [r7, #0]
 801220c:	6919      	ldr	r1, [r3, #16]
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	7e1b      	ldrb	r3, [r3, #24]
 8012212:	2b01      	cmp	r3, #1
 8012214:	d102      	bne.n	801221c <HAL_ADC_ConfigChannel+0x21c>
 8012216:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801221a:	e000      	b.n	801221e <HAL_ADC_ConfigChannel+0x21e>
 801221c:	2300      	movs	r3, #0
 801221e:	461a      	mov	r2, r3
 8012220:	f7ff f8f0 	bl	8011404 <LL_ADC_SetDataRightShift>
 8012224:	e172      	b.n	801250c <HAL_ADC_ConfigChannel+0x50c>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	4a1d      	ldr	r2, [pc, #116]	@ (80122a0 <HAL_ADC_ConfigChannel+0x2a0>)
 801222c:	4293      	cmp	r3, r2
 801222e:	f040 8125 	bne.w	801247c <HAL_ADC_ConfigChannel+0x47c>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	2100      	movs	r1, #0
 8012238:	4618      	mov	r0, r3
 801223a:	f7ff f8cd 	bl	80113d8 <LL_ADC_GetOffsetChannel>
 801223e:	4603      	mov	r3, r0
 8012240:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012244:	2b00      	cmp	r3, #0
 8012246:	d10a      	bne.n	801225e <HAL_ADC_ConfigChannel+0x25e>
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	2100      	movs	r1, #0
 801224e:	4618      	mov	r0, r3
 8012250:	f7ff f8c2 	bl	80113d8 <LL_ADC_GetOffsetChannel>
 8012254:	4603      	mov	r3, r0
 8012256:	0e9b      	lsrs	r3, r3, #26
 8012258:	f003 021f 	and.w	r2, r3, #31
 801225c:	e012      	b.n	8012284 <HAL_ADC_ConfigChannel+0x284>
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	2100      	movs	r1, #0
 8012264:	4618      	mov	r0, r3
 8012266:	f7ff f8b7 	bl	80113d8 <LL_ADC_GetOffsetChannel>
 801226a:	4603      	mov	r3, r0
 801226c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012270:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012274:	fa93 f3a3 	rbit	r3, r3
 8012278:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 801227a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801227c:	fab3 f383 	clz	r3, r3
 8012280:	b2db      	uxtb	r3, r3
 8012282:	461a      	mov	r2, r3
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801228c:	2b00      	cmp	r3, #0
 801228e:	d10b      	bne.n	80122a8 <HAL_ADC_ConfigChannel+0x2a8>
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	0e9b      	lsrs	r3, r3, #26
 8012296:	f003 031f 	and.w	r3, r3, #31
 801229a:	e010      	b.n	80122be <HAL_ADC_ConfigChannel+0x2be>
 801229c:	47ff0000 	.word	0x47ff0000
 80122a0:	58026000 	.word	0x58026000
 80122a4:	5c001000 	.word	0x5c001000
 80122a8:	683b      	ldr	r3, [r7, #0]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	67bb      	str	r3, [r7, #120]	@ 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80122ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80122b0:	fa93 f3a3 	rbit	r3, r3
 80122b4:	677b      	str	r3, [r7, #116]	@ 0x74
  return result;
 80122b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80122b8:	fab3 f383 	clz	r3, r3
 80122bc:	b2db      	uxtb	r3, r3
 80122be:	429a      	cmp	r2, r3
 80122c0:	d106      	bne.n	80122d0 <HAL_ADC_ConfigChannel+0x2d0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	2200      	movs	r2, #0
 80122c8:	2100      	movs	r1, #0
 80122ca:	4618      	mov	r0, r3
 80122cc:	f7ff f91a 	bl	8011504 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	2101      	movs	r1, #1
 80122d6:	4618      	mov	r0, r3
 80122d8:	f7ff f87e 	bl	80113d8 <LL_ADC_GetOffsetChannel>
 80122dc:	4603      	mov	r3, r0
 80122de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d10a      	bne.n	80122fc <HAL_ADC_ConfigChannel+0x2fc>
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	2101      	movs	r1, #1
 80122ec:	4618      	mov	r0, r3
 80122ee:	f7ff f873 	bl	80113d8 <LL_ADC_GetOffsetChannel>
 80122f2:	4603      	mov	r3, r0
 80122f4:	0e9b      	lsrs	r3, r3, #26
 80122f6:	f003 021f 	and.w	r2, r3, #31
 80122fa:	e010      	b.n	801231e <HAL_ADC_ConfigChannel+0x31e>
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	2101      	movs	r1, #1
 8012302:	4618      	mov	r0, r3
 8012304:	f7ff f868 	bl	80113d8 <LL_ADC_GetOffsetChannel>
 8012308:	4603      	mov	r3, r0
 801230a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801230c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801230e:	fa93 f3a3 	rbit	r3, r3
 8012312:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8012314:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012316:	fab3 f383 	clz	r3, r3
 801231a:	b2db      	uxtb	r3, r3
 801231c:	461a      	mov	r2, r3
 801231e:	683b      	ldr	r3, [r7, #0]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012326:	2b00      	cmp	r3, #0
 8012328:	d105      	bne.n	8012336 <HAL_ADC_ConfigChannel+0x336>
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	0e9b      	lsrs	r3, r3, #26
 8012330:	f003 031f 	and.w	r3, r3, #31
 8012334:	e00a      	b.n	801234c <HAL_ADC_ConfigChannel+0x34c>
 8012336:	683b      	ldr	r3, [r7, #0]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801233c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801233e:	fa93 f3a3 	rbit	r3, r3
 8012342:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8012344:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012346:	fab3 f383 	clz	r3, r3
 801234a:	b2db      	uxtb	r3, r3
 801234c:	429a      	cmp	r2, r3
 801234e:	d106      	bne.n	801235e <HAL_ADC_ConfigChannel+0x35e>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	2200      	movs	r2, #0
 8012356:	2101      	movs	r1, #1
 8012358:	4618      	mov	r0, r3
 801235a:	f7ff f8d3 	bl	8011504 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	2102      	movs	r1, #2
 8012364:	4618      	mov	r0, r3
 8012366:	f7ff f837 	bl	80113d8 <LL_ADC_GetOffsetChannel>
 801236a:	4603      	mov	r3, r0
 801236c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012370:	2b00      	cmp	r3, #0
 8012372:	d10a      	bne.n	801238a <HAL_ADC_ConfigChannel+0x38a>
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	2102      	movs	r1, #2
 801237a:	4618      	mov	r0, r3
 801237c:	f7ff f82c 	bl	80113d8 <LL_ADC_GetOffsetChannel>
 8012380:	4603      	mov	r3, r0
 8012382:	0e9b      	lsrs	r3, r3, #26
 8012384:	f003 021f 	and.w	r2, r3, #31
 8012388:	e010      	b.n	80123ac <HAL_ADC_ConfigChannel+0x3ac>
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	2102      	movs	r1, #2
 8012390:	4618      	mov	r0, r3
 8012392:	f7ff f821 	bl	80113d8 <LL_ADC_GetOffsetChannel>
 8012396:	4603      	mov	r3, r0
 8012398:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801239a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801239c:	fa93 f3a3 	rbit	r3, r3
 80123a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  return result;
 80123a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80123a4:	fab3 f383 	clz	r3, r3
 80123a8:	b2db      	uxtb	r3, r3
 80123aa:	461a      	mov	r2, r3
 80123ac:	683b      	ldr	r3, [r7, #0]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d105      	bne.n	80123c4 <HAL_ADC_ConfigChannel+0x3c4>
 80123b8:	683b      	ldr	r3, [r7, #0]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	0e9b      	lsrs	r3, r3, #26
 80123be:	f003 031f 	and.w	r3, r3, #31
 80123c2:	e00a      	b.n	80123da <HAL_ADC_ConfigChannel+0x3da>
 80123c4:	683b      	ldr	r3, [r7, #0]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80123ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80123cc:	fa93 f3a3 	rbit	r3, r3
 80123d0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80123d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80123d4:	fab3 f383 	clz	r3, r3
 80123d8:	b2db      	uxtb	r3, r3
 80123da:	429a      	cmp	r2, r3
 80123dc:	d106      	bne.n	80123ec <HAL_ADC_ConfigChannel+0x3ec>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	2200      	movs	r2, #0
 80123e4:	2102      	movs	r1, #2
 80123e6:	4618      	mov	r0, r3
 80123e8:	f7ff f88c 	bl	8011504 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	2103      	movs	r1, #3
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7fe fff0 	bl	80113d8 <LL_ADC_GetOffsetChannel>
 80123f8:	4603      	mov	r3, r0
 80123fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d10a      	bne.n	8012418 <HAL_ADC_ConfigChannel+0x418>
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	2103      	movs	r1, #3
 8012408:	4618      	mov	r0, r3
 801240a:	f7fe ffe5 	bl	80113d8 <LL_ADC_GetOffsetChannel>
 801240e:	4603      	mov	r3, r0
 8012410:	0e9b      	lsrs	r3, r3, #26
 8012412:	f003 021f 	and.w	r2, r3, #31
 8012416:	e010      	b.n	801243a <HAL_ADC_ConfigChannel+0x43a>
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	2103      	movs	r1, #3
 801241e:	4618      	mov	r0, r3
 8012420:	f7fe ffda 	bl	80113d8 <LL_ADC_GetOffsetChannel>
 8012424:	4603      	mov	r3, r0
 8012426:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012428:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801242a:	fa93 f3a3 	rbit	r3, r3
 801242e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8012430:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012432:	fab3 f383 	clz	r3, r3
 8012436:	b2db      	uxtb	r3, r3
 8012438:	461a      	mov	r2, r3
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012442:	2b00      	cmp	r3, #0
 8012444:	d105      	bne.n	8012452 <HAL_ADC_ConfigChannel+0x452>
 8012446:	683b      	ldr	r3, [r7, #0]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	0e9b      	lsrs	r3, r3, #26
 801244c:	f003 031f 	and.w	r3, r3, #31
 8012450:	e00a      	b.n	8012468 <HAL_ADC_ConfigChannel+0x468>
 8012452:	683b      	ldr	r3, [r7, #0]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012458:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801245a:	fa93 f3a3 	rbit	r3, r3
 801245e:	647b      	str	r3, [r7, #68]	@ 0x44
  return result;
 8012460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012462:	fab3 f383 	clz	r3, r3
 8012466:	b2db      	uxtb	r3, r3
 8012468:	429a      	cmp	r2, r3
 801246a:	d14f      	bne.n	801250c <HAL_ADC_ConfigChannel+0x50c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	2200      	movs	r2, #0
 8012472:	2103      	movs	r1, #3
 8012474:	4618      	mov	r0, r3
 8012476:	f7ff f845 	bl	8011504 <LL_ADC_SetOffsetState>
 801247a:	e047      	b.n	801250c <HAL_ADC_ConfigChannel+0x50c>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012482:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	069b      	lsls	r3, r3, #26
 801248c:	429a      	cmp	r2, r3
 801248e:	d107      	bne.n	80124a0 <HAL_ADC_ConfigChannel+0x4a0>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 801249e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80124a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	069b      	lsls	r3, r3, #26
 80124b0:	429a      	cmp	r2, r3
 80124b2:	d107      	bne.n	80124c4 <HAL_ADC_ConfigChannel+0x4c4>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80124c2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80124ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80124ce:	683b      	ldr	r3, [r7, #0]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	069b      	lsls	r3, r3, #26
 80124d4:	429a      	cmp	r2, r3
 80124d6:	d107      	bne.n	80124e8 <HAL_ADC_ConfigChannel+0x4e8>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80124e6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80124ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80124f2:	683b      	ldr	r3, [r7, #0]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	069b      	lsls	r3, r3, #26
 80124f8:	429a      	cmp	r2, r3
 80124fa:	d107      	bne.n	801250c <HAL_ADC_ConfigChannel+0x50c>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 801250a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	4618      	mov	r0, r3
 8012512:	f7ff f949 	bl	80117a8 <LL_ADC_IsEnabled>
 8012516:	4603      	mov	r3, r0
 8012518:	2b00      	cmp	r3, #0
 801251a:	f040 81ea 	bne.w	80128f2 <HAL_ADC_ConfigChannel+0x8f2>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	6818      	ldr	r0, [r3, #0]
 8012522:	683b      	ldr	r3, [r7, #0]
 8012524:	6819      	ldr	r1, [r3, #0]
 8012526:	683b      	ldr	r3, [r7, #0]
 8012528:	68db      	ldr	r3, [r3, #12]
 801252a:	461a      	mov	r2, r3
 801252c:	f7ff f87e 	bl	801162c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8012530:	683b      	ldr	r3, [r7, #0]
 8012532:	68db      	ldr	r3, [r3, #12]
 8012534:	4a98      	ldr	r2, [pc, #608]	@ (8012798 <HAL_ADC_ConfigChannel+0x798>)
 8012536:	4293      	cmp	r3, r2
 8012538:	f040 80fd 	bne.w	8012736 <HAL_ADC_ConfigChannel+0x736>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8012540:	683b      	ldr	r3, [r7, #0]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012548:	2b00      	cmp	r3, #0
 801254a:	d10b      	bne.n	8012564 <HAL_ADC_ConfigChannel+0x564>
 801254c:	683b      	ldr	r3, [r7, #0]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	0e9b      	lsrs	r3, r3, #26
 8012552:	3301      	adds	r3, #1
 8012554:	f003 031f 	and.w	r3, r3, #31
 8012558:	2b09      	cmp	r3, #9
 801255a:	bf94      	ite	ls
 801255c:	2301      	movls	r3, #1
 801255e:	2300      	movhi	r3, #0
 8012560:	b2db      	uxtb	r3, r3
 8012562:	e012      	b.n	801258a <HAL_ADC_ConfigChannel+0x58a>
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801256a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801256c:	fa93 f3a3 	rbit	r3, r3
 8012570:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8012572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012574:	fab3 f383 	clz	r3, r3
 8012578:	b2db      	uxtb	r3, r3
 801257a:	3301      	adds	r3, #1
 801257c:	f003 031f 	and.w	r3, r3, #31
 8012580:	2b09      	cmp	r3, #9
 8012582:	bf94      	ite	ls
 8012584:	2301      	movls	r3, #1
 8012586:	2300      	movhi	r3, #0
 8012588:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801258a:	2b00      	cmp	r3, #0
 801258c:	d064      	beq.n	8012658 <HAL_ADC_ConfigChannel+0x658>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012596:	2b00      	cmp	r3, #0
 8012598:	d107      	bne.n	80125aa <HAL_ADC_ConfigChannel+0x5aa>
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	0e9b      	lsrs	r3, r3, #26
 80125a0:	3301      	adds	r3, #1
 80125a2:	069b      	lsls	r3, r3, #26
 80125a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80125a8:	e00e      	b.n	80125c8 <HAL_ADC_ConfigChannel+0x5c8>
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80125b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125b2:	fa93 f3a3 	rbit	r3, r3
 80125b6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80125b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125ba:	fab3 f383 	clz	r3, r3
 80125be:	b2db      	uxtb	r3, r3
 80125c0:	3301      	adds	r3, #1
 80125c2:	069b      	lsls	r3, r3, #26
 80125c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d109      	bne.n	80125e8 <HAL_ADC_ConfigChannel+0x5e8>
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	0e9b      	lsrs	r3, r3, #26
 80125da:	3301      	adds	r3, #1
 80125dc:	f003 031f 	and.w	r3, r3, #31
 80125e0:	2101      	movs	r1, #1
 80125e2:	fa01 f303 	lsl.w	r3, r1, r3
 80125e6:	e010      	b.n	801260a <HAL_ADC_ConfigChannel+0x60a>
 80125e8:	683b      	ldr	r3, [r7, #0]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80125ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125f0:	fa93 f3a3 	rbit	r3, r3
 80125f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80125f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125f8:	fab3 f383 	clz	r3, r3
 80125fc:	b2db      	uxtb	r3, r3
 80125fe:	3301      	adds	r3, #1
 8012600:	f003 031f 	and.w	r3, r3, #31
 8012604:	2101      	movs	r1, #1
 8012606:	fa01 f303 	lsl.w	r3, r1, r3
 801260a:	ea42 0103 	orr.w	r1, r2, r3
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012616:	2b00      	cmp	r3, #0
 8012618:	d10a      	bne.n	8012630 <HAL_ADC_ConfigChannel+0x630>
 801261a:	683b      	ldr	r3, [r7, #0]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	0e9b      	lsrs	r3, r3, #26
 8012620:	3301      	adds	r3, #1
 8012622:	f003 021f 	and.w	r2, r3, #31
 8012626:	4613      	mov	r3, r2
 8012628:	005b      	lsls	r3, r3, #1
 801262a:	4413      	add	r3, r2
 801262c:	051b      	lsls	r3, r3, #20
 801262e:	e011      	b.n	8012654 <HAL_ADC_ConfigChannel+0x654>
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012638:	fa93 f3a3 	rbit	r3, r3
 801263c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 801263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012640:	fab3 f383 	clz	r3, r3
 8012644:	b2db      	uxtb	r3, r3
 8012646:	3301      	adds	r3, #1
 8012648:	f003 021f 	and.w	r2, r3, #31
 801264c:	4613      	mov	r3, r2
 801264e:	005b      	lsls	r3, r3, #1
 8012650:	4413      	add	r3, r2
 8012652:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8012654:	430b      	orrs	r3, r1
 8012656:	e069      	b.n	801272c <HAL_ADC_ConfigChannel+0x72c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8012658:	683b      	ldr	r3, [r7, #0]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012660:	2b00      	cmp	r3, #0
 8012662:	d107      	bne.n	8012674 <HAL_ADC_ConfigChannel+0x674>
 8012664:	683b      	ldr	r3, [r7, #0]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	0e9b      	lsrs	r3, r3, #26
 801266a:	3301      	adds	r3, #1
 801266c:	069b      	lsls	r3, r3, #26
 801266e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8012672:	e00e      	b.n	8012692 <HAL_ADC_ConfigChannel+0x692>
 8012674:	683b      	ldr	r3, [r7, #0]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801267a:	6a3b      	ldr	r3, [r7, #32]
 801267c:	fa93 f3a3 	rbit	r3, r3
 8012680:	61fb      	str	r3, [r7, #28]
  return result;
 8012682:	69fb      	ldr	r3, [r7, #28]
 8012684:	fab3 f383 	clz	r3, r3
 8012688:	b2db      	uxtb	r3, r3
 801268a:	3301      	adds	r3, #1
 801268c:	069b      	lsls	r3, r3, #26
 801268e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8012692:	683b      	ldr	r3, [r7, #0]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801269a:	2b00      	cmp	r3, #0
 801269c:	d109      	bne.n	80126b2 <HAL_ADC_ConfigChannel+0x6b2>
 801269e:	683b      	ldr	r3, [r7, #0]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	0e9b      	lsrs	r3, r3, #26
 80126a4:	3301      	adds	r3, #1
 80126a6:	f003 031f 	and.w	r3, r3, #31
 80126aa:	2101      	movs	r1, #1
 80126ac:	fa01 f303 	lsl.w	r3, r1, r3
 80126b0:	e010      	b.n	80126d4 <HAL_ADC_ConfigChannel+0x6d4>
 80126b2:	683b      	ldr	r3, [r7, #0]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80126b8:	69bb      	ldr	r3, [r7, #24]
 80126ba:	fa93 f3a3 	rbit	r3, r3
 80126be:	617b      	str	r3, [r7, #20]
  return result;
 80126c0:	697b      	ldr	r3, [r7, #20]
 80126c2:	fab3 f383 	clz	r3, r3
 80126c6:	b2db      	uxtb	r3, r3
 80126c8:	3301      	adds	r3, #1
 80126ca:	f003 031f 	and.w	r3, r3, #31
 80126ce:	2101      	movs	r1, #1
 80126d0:	fa01 f303 	lsl.w	r3, r1, r3
 80126d4:	ea42 0103 	orr.w	r1, r2, r3
 80126d8:	683b      	ldr	r3, [r7, #0]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d10d      	bne.n	8012700 <HAL_ADC_ConfigChannel+0x700>
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	0e9b      	lsrs	r3, r3, #26
 80126ea:	3301      	adds	r3, #1
 80126ec:	f003 021f 	and.w	r2, r3, #31
 80126f0:	4613      	mov	r3, r2
 80126f2:	005b      	lsls	r3, r3, #1
 80126f4:	4413      	add	r3, r2
 80126f6:	3b1e      	subs	r3, #30
 80126f8:	051b      	lsls	r3, r3, #20
 80126fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80126fe:	e014      	b.n	801272a <HAL_ADC_ConfigChannel+0x72a>
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012706:	693b      	ldr	r3, [r7, #16]
 8012708:	fa93 f3a3 	rbit	r3, r3
 801270c:	60fb      	str	r3, [r7, #12]
  return result;
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	fab3 f383 	clz	r3, r3
 8012714:	b2db      	uxtb	r3, r3
 8012716:	3301      	adds	r3, #1
 8012718:	f003 021f 	and.w	r2, r3, #31
 801271c:	4613      	mov	r3, r2
 801271e:	005b      	lsls	r3, r3, #1
 8012720:	4413      	add	r3, r2
 8012722:	3b1e      	subs	r3, #30
 8012724:	051b      	lsls	r3, r3, #20
 8012726:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801272a:	430b      	orrs	r3, r1
 801272c:	683a      	ldr	r2, [r7, #0]
 801272e:	6892      	ldr	r2, [r2, #8]
 8012730:	4619      	mov	r1, r3
 8012732:	f7fe ff50 	bl	80115d6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8012736:	683b      	ldr	r3, [r7, #0]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	2b00      	cmp	r3, #0
 801273c:	f280 80d9 	bge.w	80128f2 <HAL_ADC_ConfigChannel+0x8f2>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	4a15      	ldr	r2, [pc, #84]	@ (801279c <HAL_ADC_ConfigChannel+0x79c>)
 8012746:	4293      	cmp	r3, r2
 8012748:	d004      	beq.n	8012754 <HAL_ADC_ConfigChannel+0x754>
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	4a14      	ldr	r2, [pc, #80]	@ (80127a0 <HAL_ADC_ConfigChannel+0x7a0>)
 8012750:	4293      	cmp	r3, r2
 8012752:	d101      	bne.n	8012758 <HAL_ADC_ConfigChannel+0x758>
 8012754:	4b13      	ldr	r3, [pc, #76]	@ (80127a4 <HAL_ADC_ConfigChannel+0x7a4>)
 8012756:	e000      	b.n	801275a <HAL_ADC_ConfigChannel+0x75a>
 8012758:	4b13      	ldr	r3, [pc, #76]	@ (80127a8 <HAL_ADC_ConfigChannel+0x7a8>)
 801275a:	4618      	mov	r0, r3
 801275c:	f7fe fdfc 	bl	8011358 <LL_ADC_GetCommonPathInternalCh>
 8012760:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	4a0c      	ldr	r2, [pc, #48]	@ (801279c <HAL_ADC_ConfigChannel+0x79c>)
 801276a:	4293      	cmp	r3, r2
 801276c:	d004      	beq.n	8012778 <HAL_ADC_ConfigChannel+0x778>
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	4a0b      	ldr	r2, [pc, #44]	@ (80127a0 <HAL_ADC_ConfigChannel+0x7a0>)
 8012774:	4293      	cmp	r3, r2
 8012776:	d119      	bne.n	80127ac <HAL_ADC_ConfigChannel+0x7ac>
 8012778:	4808      	ldr	r0, [pc, #32]	@ (801279c <HAL_ADC_ConfigChannel+0x79c>)
 801277a:	f7ff f815 	bl	80117a8 <LL_ADC_IsEnabled>
 801277e:	4604      	mov	r4, r0
 8012780:	4807      	ldr	r0, [pc, #28]	@ (80127a0 <HAL_ADC_ConfigChannel+0x7a0>)
 8012782:	f7ff f811 	bl	80117a8 <LL_ADC_IsEnabled>
 8012786:	4603      	mov	r3, r0
 8012788:	4323      	orrs	r3, r4
 801278a:	2b00      	cmp	r3, #0
 801278c:	bf0c      	ite	eq
 801278e:	2301      	moveq	r3, #1
 8012790:	2300      	movne	r3, #0
 8012792:	b2db      	uxtb	r3, r3
 8012794:	e013      	b.n	80127be <HAL_ADC_ConfigChannel+0x7be>
 8012796:	bf00      	nop
 8012798:	47ff0000 	.word	0x47ff0000
 801279c:	40022000 	.word	0x40022000
 80127a0:	40022100 	.word	0x40022100
 80127a4:	40022300 	.word	0x40022300
 80127a8:	58026300 	.word	0x58026300
 80127ac:	4856      	ldr	r0, [pc, #344]	@ (8012908 <HAL_ADC_ConfigChannel+0x908>)
 80127ae:	f7fe fffb 	bl	80117a8 <LL_ADC_IsEnabled>
 80127b2:	4603      	mov	r3, r0
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	bf0c      	ite	eq
 80127b8:	2301      	moveq	r3, #1
 80127ba:	2300      	movne	r3, #0
 80127bc:	b2db      	uxtb	r3, r3
 80127be:	2b00      	cmp	r3, #0
 80127c0:	f000 8084 	beq.w	80128cc <HAL_ADC_ConfigChannel+0x8cc>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80127c4:	683b      	ldr	r3, [r7, #0]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	4a50      	ldr	r2, [pc, #320]	@ (801290c <HAL_ADC_ConfigChannel+0x90c>)
 80127ca:	4293      	cmp	r3, r2
 80127cc:	d132      	bne.n	8012834 <HAL_ADC_ConfigChannel+0x834>
 80127ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80127d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d12c      	bne.n	8012834 <HAL_ADC_ConfigChannel+0x834>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	4a4a      	ldr	r2, [pc, #296]	@ (8012908 <HAL_ADC_ConfigChannel+0x908>)
 80127e0:	4293      	cmp	r3, r2
 80127e2:	f040 8086 	bne.w	80128f2 <HAL_ADC_ConfigChannel+0x8f2>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	4a49      	ldr	r2, [pc, #292]	@ (8012910 <HAL_ADC_ConfigChannel+0x910>)
 80127ec:	4293      	cmp	r3, r2
 80127ee:	d004      	beq.n	80127fa <HAL_ADC_ConfigChannel+0x7fa>
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	4a47      	ldr	r2, [pc, #284]	@ (8012914 <HAL_ADC_ConfigChannel+0x914>)
 80127f6:	4293      	cmp	r3, r2
 80127f8:	d101      	bne.n	80127fe <HAL_ADC_ConfigChannel+0x7fe>
 80127fa:	4a47      	ldr	r2, [pc, #284]	@ (8012918 <HAL_ADC_ConfigChannel+0x918>)
 80127fc:	e000      	b.n	8012800 <HAL_ADC_ConfigChannel+0x800>
 80127fe:	4a47      	ldr	r2, [pc, #284]	@ (801291c <HAL_ADC_ConfigChannel+0x91c>)
 8012800:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012804:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8012808:	4619      	mov	r1, r3
 801280a:	4610      	mov	r0, r2
 801280c:	f7fe fd91 	bl	8011332 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8012810:	4b43      	ldr	r3, [pc, #268]	@ (8012920 <HAL_ADC_ConfigChannel+0x920>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	099b      	lsrs	r3, r3, #6
 8012816:	4a43      	ldr	r2, [pc, #268]	@ (8012924 <HAL_ADC_ConfigChannel+0x924>)
 8012818:	fba2 2303 	umull	r2, r3, r2, r3
 801281c:	099b      	lsrs	r3, r3, #6
 801281e:	3301      	adds	r3, #1
 8012820:	005b      	lsls	r3, r3, #1
 8012822:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8012824:	e002      	b.n	801282c <HAL_ADC_ConfigChannel+0x82c>
              {
                wait_loop_index--;
 8012826:	68bb      	ldr	r3, [r7, #8]
 8012828:	3b01      	subs	r3, #1
 801282a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d1f9      	bne.n	8012826 <HAL_ADC_ConfigChannel+0x826>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8012832:	e05e      	b.n	80128f2 <HAL_ADC_ConfigChannel+0x8f2>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	4a3b      	ldr	r2, [pc, #236]	@ (8012928 <HAL_ADC_ConfigChannel+0x928>)
 801283a:	4293      	cmp	r3, r2
 801283c:	d120      	bne.n	8012880 <HAL_ADC_ConfigChannel+0x880>
 801283e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012842:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012846:	2b00      	cmp	r3, #0
 8012848:	d11a      	bne.n	8012880 <HAL_ADC_ConfigChannel+0x880>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	4a2e      	ldr	r2, [pc, #184]	@ (8012908 <HAL_ADC_ConfigChannel+0x908>)
 8012850:	4293      	cmp	r3, r2
 8012852:	d14e      	bne.n	80128f2 <HAL_ADC_ConfigChannel+0x8f2>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	4a2d      	ldr	r2, [pc, #180]	@ (8012910 <HAL_ADC_ConfigChannel+0x910>)
 801285a:	4293      	cmp	r3, r2
 801285c:	d004      	beq.n	8012868 <HAL_ADC_ConfigChannel+0x868>
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	4a2c      	ldr	r2, [pc, #176]	@ (8012914 <HAL_ADC_ConfigChannel+0x914>)
 8012864:	4293      	cmp	r3, r2
 8012866:	d101      	bne.n	801286c <HAL_ADC_ConfigChannel+0x86c>
 8012868:	4a2b      	ldr	r2, [pc, #172]	@ (8012918 <HAL_ADC_ConfigChannel+0x918>)
 801286a:	e000      	b.n	801286e <HAL_ADC_ConfigChannel+0x86e>
 801286c:	4a2b      	ldr	r2, [pc, #172]	@ (801291c <HAL_ADC_ConfigChannel+0x91c>)
 801286e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012872:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8012876:	4619      	mov	r1, r3
 8012878:	4610      	mov	r0, r2
 801287a:	f7fe fd5a 	bl	8011332 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801287e:	e038      	b.n	80128f2 <HAL_ADC_ConfigChannel+0x8f2>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8012880:	683b      	ldr	r3, [r7, #0]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	4a29      	ldr	r2, [pc, #164]	@ (801292c <HAL_ADC_ConfigChannel+0x92c>)
 8012886:	4293      	cmp	r3, r2
 8012888:	d133      	bne.n	80128f2 <HAL_ADC_ConfigChannel+0x8f2>
 801288a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801288e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8012892:	2b00      	cmp	r3, #0
 8012894:	d12d      	bne.n	80128f2 <HAL_ADC_ConfigChannel+0x8f2>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	4a1b      	ldr	r2, [pc, #108]	@ (8012908 <HAL_ADC_ConfigChannel+0x908>)
 801289c:	4293      	cmp	r3, r2
 801289e:	d128      	bne.n	80128f2 <HAL_ADC_ConfigChannel+0x8f2>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	4a1a      	ldr	r2, [pc, #104]	@ (8012910 <HAL_ADC_ConfigChannel+0x910>)
 80128a6:	4293      	cmp	r3, r2
 80128a8:	d004      	beq.n	80128b4 <HAL_ADC_ConfigChannel+0x8b4>
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	4a19      	ldr	r2, [pc, #100]	@ (8012914 <HAL_ADC_ConfigChannel+0x914>)
 80128b0:	4293      	cmp	r3, r2
 80128b2:	d101      	bne.n	80128b8 <HAL_ADC_ConfigChannel+0x8b8>
 80128b4:	4a18      	ldr	r2, [pc, #96]	@ (8012918 <HAL_ADC_ConfigChannel+0x918>)
 80128b6:	e000      	b.n	80128ba <HAL_ADC_ConfigChannel+0x8ba>
 80128b8:	4a18      	ldr	r2, [pc, #96]	@ (801291c <HAL_ADC_ConfigChannel+0x91c>)
 80128ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80128be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80128c2:	4619      	mov	r1, r3
 80128c4:	4610      	mov	r0, r2
 80128c6:	f7fe fd34 	bl	8011332 <LL_ADC_SetCommonPathInternalCh>
 80128ca:	e012      	b.n	80128f2 <HAL_ADC_ConfigChannel+0x8f2>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80128d0:	f043 0220 	orr.w	r2, r3, #32
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80128d8:	2301      	movs	r3, #1
 80128da:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 80128de:	e008      	b.n	80128f2 <HAL_ADC_ConfigChannel+0x8f2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80128e4:	f043 0220 	orr.w	r2, r3, #32
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80128ec:	2301      	movs	r3, #1
 80128ee:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	2200      	movs	r2, #0
 80128f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80128fa:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
}
 80128fe:	4618      	mov	r0, r3
 8012900:	37a4      	adds	r7, #164	@ 0xa4
 8012902:	46bd      	mov	sp, r7
 8012904:	bd90      	pop	{r4, r7, pc}
 8012906:	bf00      	nop
 8012908:	58026000 	.word	0x58026000
 801290c:	c7520000 	.word	0xc7520000
 8012910:	40022000 	.word	0x40022000
 8012914:	40022100 	.word	0x40022100
 8012918:	40022300 	.word	0x40022300
 801291c:	58026300 	.word	0x58026300
 8012920:	240008ac 	.word	0x240008ac
 8012924:	053e2d63 	.word	0x053e2d63
 8012928:	c3210000 	.word	0xc3210000
 801292c:	cb840000 	.word	0xcb840000

08012930 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b084      	sub	sp, #16
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	4618      	mov	r0, r3
 801293e:	f7fe ff33 	bl	80117a8 <LL_ADC_IsEnabled>
 8012942:	4603      	mov	r3, r0
 8012944:	2b00      	cmp	r3, #0
 8012946:	d16e      	bne.n	8012a26 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	689a      	ldr	r2, [r3, #8]
 801294e:	4b38      	ldr	r3, [pc, #224]	@ (8012a30 <ADC_Enable+0x100>)
 8012950:	4013      	ands	r3, r2
 8012952:	2b00      	cmp	r3, #0
 8012954:	d00d      	beq.n	8012972 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801295a:	f043 0210 	orr.w	r2, r3, #16
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012966:	f043 0201 	orr.w	r2, r3, #1
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 801296e:	2301      	movs	r3, #1
 8012970:	e05a      	b.n	8012a28 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	4618      	mov	r0, r3
 8012978:	f7fe ff02 	bl	8011780 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 801297c:	f7fe fcba 	bl	80112f4 <HAL_GetTick>
 8012980:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	4a2b      	ldr	r2, [pc, #172]	@ (8012a34 <ADC_Enable+0x104>)
 8012988:	4293      	cmp	r3, r2
 801298a:	d004      	beq.n	8012996 <ADC_Enable+0x66>
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	4a29      	ldr	r2, [pc, #164]	@ (8012a38 <ADC_Enable+0x108>)
 8012992:	4293      	cmp	r3, r2
 8012994:	d101      	bne.n	801299a <ADC_Enable+0x6a>
 8012996:	4b29      	ldr	r3, [pc, #164]	@ (8012a3c <ADC_Enable+0x10c>)
 8012998:	e000      	b.n	801299c <ADC_Enable+0x6c>
 801299a:	4b29      	ldr	r3, [pc, #164]	@ (8012a40 <ADC_Enable+0x110>)
 801299c:	4618      	mov	r0, r3
 801299e:	f7fe fe85 	bl	80116ac <LL_ADC_GetMultimode>
 80129a2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	4a23      	ldr	r2, [pc, #140]	@ (8012a38 <ADC_Enable+0x108>)
 80129aa:	4293      	cmp	r3, r2
 80129ac:	d002      	beq.n	80129b4 <ADC_Enable+0x84>
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	e000      	b.n	80129b6 <ADC_Enable+0x86>
 80129b4:	4b1f      	ldr	r3, [pc, #124]	@ (8012a34 <ADC_Enable+0x104>)
 80129b6:	687a      	ldr	r2, [r7, #4]
 80129b8:	6812      	ldr	r2, [r2, #0]
 80129ba:	4293      	cmp	r3, r2
 80129bc:	d02c      	beq.n	8012a18 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80129be:	68bb      	ldr	r3, [r7, #8]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d130      	bne.n	8012a26 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80129c4:	e028      	b.n	8012a18 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	4618      	mov	r0, r3
 80129cc:	f7fe feec 	bl	80117a8 <LL_ADC_IsEnabled>
 80129d0:	4603      	mov	r3, r0
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d104      	bne.n	80129e0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	4618      	mov	r0, r3
 80129dc:	f7fe fed0 	bl	8011780 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80129e0:	f7fe fc88 	bl	80112f4 <HAL_GetTick>
 80129e4:	4602      	mov	r2, r0
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	1ad3      	subs	r3, r2, r3
 80129ea:	2b02      	cmp	r3, #2
 80129ec:	d914      	bls.n	8012a18 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	f003 0301 	and.w	r3, r3, #1
 80129f8:	2b01      	cmp	r3, #1
 80129fa:	d00d      	beq.n	8012a18 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012a00:	f043 0210 	orr.w	r2, r3, #16
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012a0c:	f043 0201 	orr.w	r2, r3, #1
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8012a14:	2301      	movs	r3, #1
 8012a16:	e007      	b.n	8012a28 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	f003 0301 	and.w	r3, r3, #1
 8012a22:	2b01      	cmp	r3, #1
 8012a24:	d1cf      	bne.n	80129c6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8012a26:	2300      	movs	r3, #0
}
 8012a28:	4618      	mov	r0, r3
 8012a2a:	3710      	adds	r7, #16
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	bd80      	pop	{r7, pc}
 8012a30:	8000003f 	.word	0x8000003f
 8012a34:	40022000 	.word	0x40022000
 8012a38:	40022100 	.word	0x40022100
 8012a3c:	40022300 	.word	0x40022300
 8012a40:	58026300 	.word	0x58026300

08012a44 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b084      	sub	sp, #16
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	4a6c      	ldr	r2, [pc, #432]	@ (8012c04 <ADC_ConfigureBoostMode+0x1c0>)
 8012a52:	4293      	cmp	r3, r2
 8012a54:	d004      	beq.n	8012a60 <ADC_ConfigureBoostMode+0x1c>
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	4a6b      	ldr	r2, [pc, #428]	@ (8012c08 <ADC_ConfigureBoostMode+0x1c4>)
 8012a5c:	4293      	cmp	r3, r2
 8012a5e:	d109      	bne.n	8012a74 <ADC_ConfigureBoostMode+0x30>
 8012a60:	4b6a      	ldr	r3, [pc, #424]	@ (8012c0c <ADC_ConfigureBoostMode+0x1c8>)
 8012a62:	689b      	ldr	r3, [r3, #8]
 8012a64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	bf14      	ite	ne
 8012a6c:	2301      	movne	r3, #1
 8012a6e:	2300      	moveq	r3, #0
 8012a70:	b2db      	uxtb	r3, r3
 8012a72:	e008      	b.n	8012a86 <ADC_ConfigureBoostMode+0x42>
 8012a74:	4b66      	ldr	r3, [pc, #408]	@ (8012c10 <ADC_ConfigureBoostMode+0x1cc>)
 8012a76:	689b      	ldr	r3, [r3, #8]
 8012a78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	bf14      	ite	ne
 8012a80:	2301      	movne	r3, #1
 8012a82:	2300      	moveq	r3, #0
 8012a84:	b2db      	uxtb	r3, r3
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d01c      	beq.n	8012ac4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8012a8a:	f006 f9f7 	bl	8018e7c <HAL_RCC_GetHCLKFreq>
 8012a8e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	685b      	ldr	r3, [r3, #4]
 8012a94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012a98:	d010      	beq.n	8012abc <ADC_ConfigureBoostMode+0x78>
 8012a9a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012a9e:	d873      	bhi.n	8012b88 <ADC_ConfigureBoostMode+0x144>
 8012aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012aa4:	d002      	beq.n	8012aac <ADC_ConfigureBoostMode+0x68>
 8012aa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012aaa:	d16d      	bne.n	8012b88 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	685b      	ldr	r3, [r3, #4]
 8012ab0:	0c1b      	lsrs	r3, r3, #16
 8012ab2:	68fa      	ldr	r2, [r7, #12]
 8012ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ab8:	60fb      	str	r3, [r7, #12]
        break;
 8012aba:	e068      	b.n	8012b8e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	089b      	lsrs	r3, r3, #2
 8012ac0:	60fb      	str	r3, [r7, #12]
        break;
 8012ac2:	e064      	b.n	8012b8e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8012ac4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8012ac8:	f04f 0100 	mov.w	r1, #0
 8012acc:	f007 fbfe 	bl	801a2cc <HAL_RCCEx_GetPeriphCLKFreq>
 8012ad0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	685b      	ldr	r3, [r3, #4]
 8012ad6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8012ada:	d051      	beq.n	8012b80 <ADC_ConfigureBoostMode+0x13c>
 8012adc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8012ae0:	d854      	bhi.n	8012b8c <ADC_ConfigureBoostMode+0x148>
 8012ae2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8012ae6:	d047      	beq.n	8012b78 <ADC_ConfigureBoostMode+0x134>
 8012ae8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8012aec:	d84e      	bhi.n	8012b8c <ADC_ConfigureBoostMode+0x148>
 8012aee:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8012af2:	d03d      	beq.n	8012b70 <ADC_ConfigureBoostMode+0x12c>
 8012af4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8012af8:	d848      	bhi.n	8012b8c <ADC_ConfigureBoostMode+0x148>
 8012afa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012afe:	d033      	beq.n	8012b68 <ADC_ConfigureBoostMode+0x124>
 8012b00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012b04:	d842      	bhi.n	8012b8c <ADC_ConfigureBoostMode+0x148>
 8012b06:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8012b0a:	d029      	beq.n	8012b60 <ADC_ConfigureBoostMode+0x11c>
 8012b0c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8012b10:	d83c      	bhi.n	8012b8c <ADC_ConfigureBoostMode+0x148>
 8012b12:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8012b16:	d01a      	beq.n	8012b4e <ADC_ConfigureBoostMode+0x10a>
 8012b18:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8012b1c:	d836      	bhi.n	8012b8c <ADC_ConfigureBoostMode+0x148>
 8012b1e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8012b22:	d014      	beq.n	8012b4e <ADC_ConfigureBoostMode+0x10a>
 8012b24:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8012b28:	d830      	bhi.n	8012b8c <ADC_ConfigureBoostMode+0x148>
 8012b2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012b2e:	d00e      	beq.n	8012b4e <ADC_ConfigureBoostMode+0x10a>
 8012b30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012b34:	d82a      	bhi.n	8012b8c <ADC_ConfigureBoostMode+0x148>
 8012b36:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8012b3a:	d008      	beq.n	8012b4e <ADC_ConfigureBoostMode+0x10a>
 8012b3c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8012b40:	d824      	bhi.n	8012b8c <ADC_ConfigureBoostMode+0x148>
 8012b42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012b46:	d002      	beq.n	8012b4e <ADC_ConfigureBoostMode+0x10a>
 8012b48:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8012b4c:	d11e      	bne.n	8012b8c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	685b      	ldr	r3, [r3, #4]
 8012b52:	0c9b      	lsrs	r3, r3, #18
 8012b54:	005b      	lsls	r3, r3, #1
 8012b56:	68fa      	ldr	r2, [r7, #12]
 8012b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8012b5c:	60fb      	str	r3, [r7, #12]
        break;
 8012b5e:	e016      	b.n	8012b8e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	091b      	lsrs	r3, r3, #4
 8012b64:	60fb      	str	r3, [r7, #12]
        break;
 8012b66:	e012      	b.n	8012b8e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	095b      	lsrs	r3, r3, #5
 8012b6c:	60fb      	str	r3, [r7, #12]
        break;
 8012b6e:	e00e      	b.n	8012b8e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	099b      	lsrs	r3, r3, #6
 8012b74:	60fb      	str	r3, [r7, #12]
        break;
 8012b76:	e00a      	b.n	8012b8e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	09db      	lsrs	r3, r3, #7
 8012b7c:	60fb      	str	r3, [r7, #12]
        break;
 8012b7e:	e006      	b.n	8012b8e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	0a1b      	lsrs	r3, r3, #8
 8012b84:	60fb      	str	r3, [r7, #12]
        break;
 8012b86:	e002      	b.n	8012b8e <ADC_ConfigureBoostMode+0x14a>
        break;
 8012b88:	bf00      	nop
 8012b8a:	e000      	b.n	8012b8e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8012b8c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	085b      	lsrs	r3, r3, #1
 8012b92:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	4a1f      	ldr	r2, [pc, #124]	@ (8012c14 <ADC_ConfigureBoostMode+0x1d0>)
 8012b98:	4293      	cmp	r3, r2
 8012b9a:	d808      	bhi.n	8012bae <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	689a      	ldr	r2, [r3, #8]
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8012baa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8012bac:	e025      	b.n	8012bfa <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	4a19      	ldr	r2, [pc, #100]	@ (8012c18 <ADC_ConfigureBoostMode+0x1d4>)
 8012bb2:	4293      	cmp	r3, r2
 8012bb4:	d80a      	bhi.n	8012bcc <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	689b      	ldr	r3, [r3, #8]
 8012bbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012bc8:	609a      	str	r2, [r3, #8]
}
 8012bca:	e016      	b.n	8012bfa <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	4a13      	ldr	r2, [pc, #76]	@ (8012c1c <ADC_ConfigureBoostMode+0x1d8>)
 8012bd0:	4293      	cmp	r3, r2
 8012bd2:	d80a      	bhi.n	8012bea <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	689b      	ldr	r3, [r3, #8]
 8012bda:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012be6:	609a      	str	r2, [r3, #8]
}
 8012be8:	e007      	b.n	8012bfa <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	689a      	ldr	r2, [r3, #8]
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8012bf8:	609a      	str	r2, [r3, #8]
}
 8012bfa:	bf00      	nop
 8012bfc:	3710      	adds	r7, #16
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}
 8012c02:	bf00      	nop
 8012c04:	40022000 	.word	0x40022000
 8012c08:	40022100 	.word	0x40022100
 8012c0c:	40022300 	.word	0x40022300
 8012c10:	58026300 	.word	0x58026300
 8012c14:	005f5e10 	.word	0x005f5e10
 8012c18:	00bebc20 	.word	0x00bebc20
 8012c1c:	017d7840 	.word	0x017d7840

08012c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012c20:	b480      	push	{r7}
 8012c22:	b085      	sub	sp, #20
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	f003 0307 	and.w	r3, r3, #7
 8012c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012c30:	4b0b      	ldr	r3, [pc, #44]	@ (8012c60 <__NVIC_SetPriorityGrouping+0x40>)
 8012c32:	68db      	ldr	r3, [r3, #12]
 8012c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012c36:	68ba      	ldr	r2, [r7, #8]
 8012c38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8012c3c:	4013      	ands	r3, r2
 8012c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012c44:	68bb      	ldr	r3, [r7, #8]
 8012c46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8012c48:	4b06      	ldr	r3, [pc, #24]	@ (8012c64 <__NVIC_SetPriorityGrouping+0x44>)
 8012c4a:	4313      	orrs	r3, r2
 8012c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8012c4e:	4a04      	ldr	r2, [pc, #16]	@ (8012c60 <__NVIC_SetPriorityGrouping+0x40>)
 8012c50:	68bb      	ldr	r3, [r7, #8]
 8012c52:	60d3      	str	r3, [r2, #12]
}
 8012c54:	bf00      	nop
 8012c56:	3714      	adds	r7, #20
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5e:	4770      	bx	lr
 8012c60:	e000ed00 	.word	0xe000ed00
 8012c64:	05fa0000 	.word	0x05fa0000

08012c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8012c68:	b480      	push	{r7}
 8012c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012c6c:	4b04      	ldr	r3, [pc, #16]	@ (8012c80 <__NVIC_GetPriorityGrouping+0x18>)
 8012c6e:	68db      	ldr	r3, [r3, #12]
 8012c70:	0a1b      	lsrs	r3, r3, #8
 8012c72:	f003 0307 	and.w	r3, r3, #7
}
 8012c76:	4618      	mov	r0, r3
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7e:	4770      	bx	lr
 8012c80:	e000ed00 	.word	0xe000ed00

08012c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012c84:	b480      	push	{r7}
 8012c86:	b083      	sub	sp, #12
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012c8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	db0b      	blt.n	8012cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012c96:	88fb      	ldrh	r3, [r7, #6]
 8012c98:	f003 021f 	and.w	r2, r3, #31
 8012c9c:	4907      	ldr	r1, [pc, #28]	@ (8012cbc <__NVIC_EnableIRQ+0x38>)
 8012c9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012ca2:	095b      	lsrs	r3, r3, #5
 8012ca4:	2001      	movs	r0, #1
 8012ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8012caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8012cae:	bf00      	nop
 8012cb0:	370c      	adds	r7, #12
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb8:	4770      	bx	lr
 8012cba:	bf00      	nop
 8012cbc:	e000e100 	.word	0xe000e100

08012cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8012cc0:	b480      	push	{r7}
 8012cc2:	b083      	sub	sp, #12
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	6039      	str	r1, [r7, #0]
 8012cca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012ccc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	db0a      	blt.n	8012cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012cd4:	683b      	ldr	r3, [r7, #0]
 8012cd6:	b2da      	uxtb	r2, r3
 8012cd8:	490c      	ldr	r1, [pc, #48]	@ (8012d0c <__NVIC_SetPriority+0x4c>)
 8012cda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012cde:	0112      	lsls	r2, r2, #4
 8012ce0:	b2d2      	uxtb	r2, r2
 8012ce2:	440b      	add	r3, r1
 8012ce4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012ce8:	e00a      	b.n	8012d00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	b2da      	uxtb	r2, r3
 8012cee:	4908      	ldr	r1, [pc, #32]	@ (8012d10 <__NVIC_SetPriority+0x50>)
 8012cf0:	88fb      	ldrh	r3, [r7, #6]
 8012cf2:	f003 030f 	and.w	r3, r3, #15
 8012cf6:	3b04      	subs	r3, #4
 8012cf8:	0112      	lsls	r2, r2, #4
 8012cfa:	b2d2      	uxtb	r2, r2
 8012cfc:	440b      	add	r3, r1
 8012cfe:	761a      	strb	r2, [r3, #24]
}
 8012d00:	bf00      	nop
 8012d02:	370c      	adds	r7, #12
 8012d04:	46bd      	mov	sp, r7
 8012d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0a:	4770      	bx	lr
 8012d0c:	e000e100 	.word	0xe000e100
 8012d10:	e000ed00 	.word	0xe000ed00

08012d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012d14:	b480      	push	{r7}
 8012d16:	b089      	sub	sp, #36	@ 0x24
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	60f8      	str	r0, [r7, #12]
 8012d1c:	60b9      	str	r1, [r7, #8]
 8012d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	f003 0307 	and.w	r3, r3, #7
 8012d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012d28:	69fb      	ldr	r3, [r7, #28]
 8012d2a:	f1c3 0307 	rsb	r3, r3, #7
 8012d2e:	2b04      	cmp	r3, #4
 8012d30:	bf28      	it	cs
 8012d32:	2304      	movcs	r3, #4
 8012d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012d36:	69fb      	ldr	r3, [r7, #28]
 8012d38:	3304      	adds	r3, #4
 8012d3a:	2b06      	cmp	r3, #6
 8012d3c:	d902      	bls.n	8012d44 <NVIC_EncodePriority+0x30>
 8012d3e:	69fb      	ldr	r3, [r7, #28]
 8012d40:	3b03      	subs	r3, #3
 8012d42:	e000      	b.n	8012d46 <NVIC_EncodePriority+0x32>
 8012d44:	2300      	movs	r3, #0
 8012d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012d48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012d4c:	69bb      	ldr	r3, [r7, #24]
 8012d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8012d52:	43da      	mvns	r2, r3
 8012d54:	68bb      	ldr	r3, [r7, #8]
 8012d56:	401a      	ands	r2, r3
 8012d58:	697b      	ldr	r3, [r7, #20]
 8012d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012d5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012d60:	697b      	ldr	r3, [r7, #20]
 8012d62:	fa01 f303 	lsl.w	r3, r1, r3
 8012d66:	43d9      	mvns	r1, r3
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012d6c:	4313      	orrs	r3, r2
         );
}
 8012d6e:	4618      	mov	r0, r3
 8012d70:	3724      	adds	r7, #36	@ 0x24
 8012d72:	46bd      	mov	sp, r7
 8012d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d78:	4770      	bx	lr

08012d7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012d7a:	b580      	push	{r7, lr}
 8012d7c:	b082      	sub	sp, #8
 8012d7e:	af00      	add	r7, sp, #0
 8012d80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012d82:	6878      	ldr	r0, [r7, #4]
 8012d84:	f7ff ff4c 	bl	8012c20 <__NVIC_SetPriorityGrouping>
}
 8012d88:	bf00      	nop
 8012d8a:	3708      	adds	r7, #8
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd80      	pop	{r7, pc}

08012d90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b086      	sub	sp, #24
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	4603      	mov	r3, r0
 8012d98:	60b9      	str	r1, [r7, #8]
 8012d9a:	607a      	str	r2, [r7, #4]
 8012d9c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8012d9e:	f7ff ff63 	bl	8012c68 <__NVIC_GetPriorityGrouping>
 8012da2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012da4:	687a      	ldr	r2, [r7, #4]
 8012da6:	68b9      	ldr	r1, [r7, #8]
 8012da8:	6978      	ldr	r0, [r7, #20]
 8012daa:	f7ff ffb3 	bl	8012d14 <NVIC_EncodePriority>
 8012dae:	4602      	mov	r2, r0
 8012db0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012db4:	4611      	mov	r1, r2
 8012db6:	4618      	mov	r0, r3
 8012db8:	f7ff ff82 	bl	8012cc0 <__NVIC_SetPriority>
}
 8012dbc:	bf00      	nop
 8012dbe:	3718      	adds	r7, #24
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}

08012dc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b082      	sub	sp, #8
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	4603      	mov	r3, r0
 8012dcc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7ff ff56 	bl	8012c84 <__NVIC_EnableIRQ>
}
 8012dd8:	bf00      	nop
 8012dda:	3708      	adds	r7, #8
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}

08012de0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b086      	sub	sp, #24
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	60f8      	str	r0, [r7, #12]
 8012de8:	60b9      	str	r1, [r7, #8]
 8012dea:	607a      	str	r2, [r7, #4]
 8012dec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012dee:	2300      	movs	r3, #0
 8012df0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d101      	bne.n	8012dfc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8012df8:	2301      	movs	r3, #1
 8012dfa:	e226      	b.n	801324a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012e02:	2b01      	cmp	r3, #1
 8012e04:	d101      	bne.n	8012e0a <HAL_DMA_Start_IT+0x2a>
 8012e06:	2302      	movs	r3, #2
 8012e08:	e21f      	b.n	801324a <HAL_DMA_Start_IT+0x46a>
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	2201      	movs	r2, #1
 8012e0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8012e18:	b2db      	uxtb	r3, r3
 8012e1a:	2b01      	cmp	r3, #1
 8012e1c:	f040 820a 	bne.w	8013234 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	2202      	movs	r2, #2
 8012e24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	4a68      	ldr	r2, [pc, #416]	@ (8012fd4 <HAL_DMA_Start_IT+0x1f4>)
 8012e34:	4293      	cmp	r3, r2
 8012e36:	d04a      	beq.n	8012ece <HAL_DMA_Start_IT+0xee>
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	4a66      	ldr	r2, [pc, #408]	@ (8012fd8 <HAL_DMA_Start_IT+0x1f8>)
 8012e3e:	4293      	cmp	r3, r2
 8012e40:	d045      	beq.n	8012ece <HAL_DMA_Start_IT+0xee>
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	4a65      	ldr	r2, [pc, #404]	@ (8012fdc <HAL_DMA_Start_IT+0x1fc>)
 8012e48:	4293      	cmp	r3, r2
 8012e4a:	d040      	beq.n	8012ece <HAL_DMA_Start_IT+0xee>
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	4a63      	ldr	r2, [pc, #396]	@ (8012fe0 <HAL_DMA_Start_IT+0x200>)
 8012e52:	4293      	cmp	r3, r2
 8012e54:	d03b      	beq.n	8012ece <HAL_DMA_Start_IT+0xee>
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	4a62      	ldr	r2, [pc, #392]	@ (8012fe4 <HAL_DMA_Start_IT+0x204>)
 8012e5c:	4293      	cmp	r3, r2
 8012e5e:	d036      	beq.n	8012ece <HAL_DMA_Start_IT+0xee>
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	4a60      	ldr	r2, [pc, #384]	@ (8012fe8 <HAL_DMA_Start_IT+0x208>)
 8012e66:	4293      	cmp	r3, r2
 8012e68:	d031      	beq.n	8012ece <HAL_DMA_Start_IT+0xee>
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	4a5f      	ldr	r2, [pc, #380]	@ (8012fec <HAL_DMA_Start_IT+0x20c>)
 8012e70:	4293      	cmp	r3, r2
 8012e72:	d02c      	beq.n	8012ece <HAL_DMA_Start_IT+0xee>
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	4a5d      	ldr	r2, [pc, #372]	@ (8012ff0 <HAL_DMA_Start_IT+0x210>)
 8012e7a:	4293      	cmp	r3, r2
 8012e7c:	d027      	beq.n	8012ece <HAL_DMA_Start_IT+0xee>
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	4a5c      	ldr	r2, [pc, #368]	@ (8012ff4 <HAL_DMA_Start_IT+0x214>)
 8012e84:	4293      	cmp	r3, r2
 8012e86:	d022      	beq.n	8012ece <HAL_DMA_Start_IT+0xee>
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	4a5a      	ldr	r2, [pc, #360]	@ (8012ff8 <HAL_DMA_Start_IT+0x218>)
 8012e8e:	4293      	cmp	r3, r2
 8012e90:	d01d      	beq.n	8012ece <HAL_DMA_Start_IT+0xee>
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	4a59      	ldr	r2, [pc, #356]	@ (8012ffc <HAL_DMA_Start_IT+0x21c>)
 8012e98:	4293      	cmp	r3, r2
 8012e9a:	d018      	beq.n	8012ece <HAL_DMA_Start_IT+0xee>
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	4a57      	ldr	r2, [pc, #348]	@ (8013000 <HAL_DMA_Start_IT+0x220>)
 8012ea2:	4293      	cmp	r3, r2
 8012ea4:	d013      	beq.n	8012ece <HAL_DMA_Start_IT+0xee>
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	4a56      	ldr	r2, [pc, #344]	@ (8013004 <HAL_DMA_Start_IT+0x224>)
 8012eac:	4293      	cmp	r3, r2
 8012eae:	d00e      	beq.n	8012ece <HAL_DMA_Start_IT+0xee>
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	4a54      	ldr	r2, [pc, #336]	@ (8013008 <HAL_DMA_Start_IT+0x228>)
 8012eb6:	4293      	cmp	r3, r2
 8012eb8:	d009      	beq.n	8012ece <HAL_DMA_Start_IT+0xee>
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	4a53      	ldr	r2, [pc, #332]	@ (801300c <HAL_DMA_Start_IT+0x22c>)
 8012ec0:	4293      	cmp	r3, r2
 8012ec2:	d004      	beq.n	8012ece <HAL_DMA_Start_IT+0xee>
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	4a51      	ldr	r2, [pc, #324]	@ (8013010 <HAL_DMA_Start_IT+0x230>)
 8012eca:	4293      	cmp	r3, r2
 8012ecc:	d108      	bne.n	8012ee0 <HAL_DMA_Start_IT+0x100>
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	681a      	ldr	r2, [r3, #0]
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	f022 0201 	bic.w	r2, r2, #1
 8012edc:	601a      	str	r2, [r3, #0]
 8012ede:	e007      	b.n	8012ef0 <HAL_DMA_Start_IT+0x110>
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	681a      	ldr	r2, [r3, #0]
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	f022 0201 	bic.w	r2, r2, #1
 8012eee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8012ef0:	683b      	ldr	r3, [r7, #0]
 8012ef2:	687a      	ldr	r2, [r7, #4]
 8012ef4:	68b9      	ldr	r1, [r7, #8]
 8012ef6:	68f8      	ldr	r0, [r7, #12]
 8012ef8:	f001 fe78 	bl	8014bec <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	4a34      	ldr	r2, [pc, #208]	@ (8012fd4 <HAL_DMA_Start_IT+0x1f4>)
 8012f02:	4293      	cmp	r3, r2
 8012f04:	d04a      	beq.n	8012f9c <HAL_DMA_Start_IT+0x1bc>
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	4a33      	ldr	r2, [pc, #204]	@ (8012fd8 <HAL_DMA_Start_IT+0x1f8>)
 8012f0c:	4293      	cmp	r3, r2
 8012f0e:	d045      	beq.n	8012f9c <HAL_DMA_Start_IT+0x1bc>
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	4a31      	ldr	r2, [pc, #196]	@ (8012fdc <HAL_DMA_Start_IT+0x1fc>)
 8012f16:	4293      	cmp	r3, r2
 8012f18:	d040      	beq.n	8012f9c <HAL_DMA_Start_IT+0x1bc>
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	4a30      	ldr	r2, [pc, #192]	@ (8012fe0 <HAL_DMA_Start_IT+0x200>)
 8012f20:	4293      	cmp	r3, r2
 8012f22:	d03b      	beq.n	8012f9c <HAL_DMA_Start_IT+0x1bc>
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	4a2e      	ldr	r2, [pc, #184]	@ (8012fe4 <HAL_DMA_Start_IT+0x204>)
 8012f2a:	4293      	cmp	r3, r2
 8012f2c:	d036      	beq.n	8012f9c <HAL_DMA_Start_IT+0x1bc>
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	4a2d      	ldr	r2, [pc, #180]	@ (8012fe8 <HAL_DMA_Start_IT+0x208>)
 8012f34:	4293      	cmp	r3, r2
 8012f36:	d031      	beq.n	8012f9c <HAL_DMA_Start_IT+0x1bc>
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8012fec <HAL_DMA_Start_IT+0x20c>)
 8012f3e:	4293      	cmp	r3, r2
 8012f40:	d02c      	beq.n	8012f9c <HAL_DMA_Start_IT+0x1bc>
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	4a2a      	ldr	r2, [pc, #168]	@ (8012ff0 <HAL_DMA_Start_IT+0x210>)
 8012f48:	4293      	cmp	r3, r2
 8012f4a:	d027      	beq.n	8012f9c <HAL_DMA_Start_IT+0x1bc>
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	4a28      	ldr	r2, [pc, #160]	@ (8012ff4 <HAL_DMA_Start_IT+0x214>)
 8012f52:	4293      	cmp	r3, r2
 8012f54:	d022      	beq.n	8012f9c <HAL_DMA_Start_IT+0x1bc>
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	4a27      	ldr	r2, [pc, #156]	@ (8012ff8 <HAL_DMA_Start_IT+0x218>)
 8012f5c:	4293      	cmp	r3, r2
 8012f5e:	d01d      	beq.n	8012f9c <HAL_DMA_Start_IT+0x1bc>
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	4a25      	ldr	r2, [pc, #148]	@ (8012ffc <HAL_DMA_Start_IT+0x21c>)
 8012f66:	4293      	cmp	r3, r2
 8012f68:	d018      	beq.n	8012f9c <HAL_DMA_Start_IT+0x1bc>
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	4a24      	ldr	r2, [pc, #144]	@ (8013000 <HAL_DMA_Start_IT+0x220>)
 8012f70:	4293      	cmp	r3, r2
 8012f72:	d013      	beq.n	8012f9c <HAL_DMA_Start_IT+0x1bc>
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	4a22      	ldr	r2, [pc, #136]	@ (8013004 <HAL_DMA_Start_IT+0x224>)
 8012f7a:	4293      	cmp	r3, r2
 8012f7c:	d00e      	beq.n	8012f9c <HAL_DMA_Start_IT+0x1bc>
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	4a21      	ldr	r2, [pc, #132]	@ (8013008 <HAL_DMA_Start_IT+0x228>)
 8012f84:	4293      	cmp	r3, r2
 8012f86:	d009      	beq.n	8012f9c <HAL_DMA_Start_IT+0x1bc>
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	4a1f      	ldr	r2, [pc, #124]	@ (801300c <HAL_DMA_Start_IT+0x22c>)
 8012f8e:	4293      	cmp	r3, r2
 8012f90:	d004      	beq.n	8012f9c <HAL_DMA_Start_IT+0x1bc>
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	4a1e      	ldr	r2, [pc, #120]	@ (8013010 <HAL_DMA_Start_IT+0x230>)
 8012f98:	4293      	cmp	r3, r2
 8012f9a:	d101      	bne.n	8012fa0 <HAL_DMA_Start_IT+0x1c0>
 8012f9c:	2301      	movs	r3, #1
 8012f9e:	e000      	b.n	8012fa2 <HAL_DMA_Start_IT+0x1c2>
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d036      	beq.n	8013014 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	f023 021e 	bic.w	r2, r3, #30
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	f042 0216 	orr.w	r2, r2, #22
 8012fb8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d03e      	beq.n	8013040 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	681a      	ldr	r2, [r3, #0]
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	f042 0208 	orr.w	r2, r2, #8
 8012fd0:	601a      	str	r2, [r3, #0]
 8012fd2:	e035      	b.n	8013040 <HAL_DMA_Start_IT+0x260>
 8012fd4:	40020010 	.word	0x40020010
 8012fd8:	40020028 	.word	0x40020028
 8012fdc:	40020040 	.word	0x40020040
 8012fe0:	40020058 	.word	0x40020058
 8012fe4:	40020070 	.word	0x40020070
 8012fe8:	40020088 	.word	0x40020088
 8012fec:	400200a0 	.word	0x400200a0
 8012ff0:	400200b8 	.word	0x400200b8
 8012ff4:	40020410 	.word	0x40020410
 8012ff8:	40020428 	.word	0x40020428
 8012ffc:	40020440 	.word	0x40020440
 8013000:	40020458 	.word	0x40020458
 8013004:	40020470 	.word	0x40020470
 8013008:	40020488 	.word	0x40020488
 801300c:	400204a0 	.word	0x400204a0
 8013010:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	f023 020e 	bic.w	r2, r3, #14
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	f042 020a 	orr.w	r2, r2, #10
 8013026:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801302c:	2b00      	cmp	r3, #0
 801302e:	d007      	beq.n	8013040 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	681a      	ldr	r2, [r3, #0]
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	f042 0204 	orr.w	r2, r2, #4
 801303e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	4a83      	ldr	r2, [pc, #524]	@ (8013254 <HAL_DMA_Start_IT+0x474>)
 8013046:	4293      	cmp	r3, r2
 8013048:	d072      	beq.n	8013130 <HAL_DMA_Start_IT+0x350>
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	4a82      	ldr	r2, [pc, #520]	@ (8013258 <HAL_DMA_Start_IT+0x478>)
 8013050:	4293      	cmp	r3, r2
 8013052:	d06d      	beq.n	8013130 <HAL_DMA_Start_IT+0x350>
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	4a80      	ldr	r2, [pc, #512]	@ (801325c <HAL_DMA_Start_IT+0x47c>)
 801305a:	4293      	cmp	r3, r2
 801305c:	d068      	beq.n	8013130 <HAL_DMA_Start_IT+0x350>
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	4a7f      	ldr	r2, [pc, #508]	@ (8013260 <HAL_DMA_Start_IT+0x480>)
 8013064:	4293      	cmp	r3, r2
 8013066:	d063      	beq.n	8013130 <HAL_DMA_Start_IT+0x350>
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	4a7d      	ldr	r2, [pc, #500]	@ (8013264 <HAL_DMA_Start_IT+0x484>)
 801306e:	4293      	cmp	r3, r2
 8013070:	d05e      	beq.n	8013130 <HAL_DMA_Start_IT+0x350>
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	4a7c      	ldr	r2, [pc, #496]	@ (8013268 <HAL_DMA_Start_IT+0x488>)
 8013078:	4293      	cmp	r3, r2
 801307a:	d059      	beq.n	8013130 <HAL_DMA_Start_IT+0x350>
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	4a7a      	ldr	r2, [pc, #488]	@ (801326c <HAL_DMA_Start_IT+0x48c>)
 8013082:	4293      	cmp	r3, r2
 8013084:	d054      	beq.n	8013130 <HAL_DMA_Start_IT+0x350>
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	4a79      	ldr	r2, [pc, #484]	@ (8013270 <HAL_DMA_Start_IT+0x490>)
 801308c:	4293      	cmp	r3, r2
 801308e:	d04f      	beq.n	8013130 <HAL_DMA_Start_IT+0x350>
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	4a77      	ldr	r2, [pc, #476]	@ (8013274 <HAL_DMA_Start_IT+0x494>)
 8013096:	4293      	cmp	r3, r2
 8013098:	d04a      	beq.n	8013130 <HAL_DMA_Start_IT+0x350>
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	4a76      	ldr	r2, [pc, #472]	@ (8013278 <HAL_DMA_Start_IT+0x498>)
 80130a0:	4293      	cmp	r3, r2
 80130a2:	d045      	beq.n	8013130 <HAL_DMA_Start_IT+0x350>
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	4a74      	ldr	r2, [pc, #464]	@ (801327c <HAL_DMA_Start_IT+0x49c>)
 80130aa:	4293      	cmp	r3, r2
 80130ac:	d040      	beq.n	8013130 <HAL_DMA_Start_IT+0x350>
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	4a73      	ldr	r2, [pc, #460]	@ (8013280 <HAL_DMA_Start_IT+0x4a0>)
 80130b4:	4293      	cmp	r3, r2
 80130b6:	d03b      	beq.n	8013130 <HAL_DMA_Start_IT+0x350>
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	4a71      	ldr	r2, [pc, #452]	@ (8013284 <HAL_DMA_Start_IT+0x4a4>)
 80130be:	4293      	cmp	r3, r2
 80130c0:	d036      	beq.n	8013130 <HAL_DMA_Start_IT+0x350>
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	4a70      	ldr	r2, [pc, #448]	@ (8013288 <HAL_DMA_Start_IT+0x4a8>)
 80130c8:	4293      	cmp	r3, r2
 80130ca:	d031      	beq.n	8013130 <HAL_DMA_Start_IT+0x350>
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	4a6e      	ldr	r2, [pc, #440]	@ (801328c <HAL_DMA_Start_IT+0x4ac>)
 80130d2:	4293      	cmp	r3, r2
 80130d4:	d02c      	beq.n	8013130 <HAL_DMA_Start_IT+0x350>
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	4a6d      	ldr	r2, [pc, #436]	@ (8013290 <HAL_DMA_Start_IT+0x4b0>)
 80130dc:	4293      	cmp	r3, r2
 80130de:	d027      	beq.n	8013130 <HAL_DMA_Start_IT+0x350>
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	4a6b      	ldr	r2, [pc, #428]	@ (8013294 <HAL_DMA_Start_IT+0x4b4>)
 80130e6:	4293      	cmp	r3, r2
 80130e8:	d022      	beq.n	8013130 <HAL_DMA_Start_IT+0x350>
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	4a6a      	ldr	r2, [pc, #424]	@ (8013298 <HAL_DMA_Start_IT+0x4b8>)
 80130f0:	4293      	cmp	r3, r2
 80130f2:	d01d      	beq.n	8013130 <HAL_DMA_Start_IT+0x350>
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	4a68      	ldr	r2, [pc, #416]	@ (801329c <HAL_DMA_Start_IT+0x4bc>)
 80130fa:	4293      	cmp	r3, r2
 80130fc:	d018      	beq.n	8013130 <HAL_DMA_Start_IT+0x350>
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	4a67      	ldr	r2, [pc, #412]	@ (80132a0 <HAL_DMA_Start_IT+0x4c0>)
 8013104:	4293      	cmp	r3, r2
 8013106:	d013      	beq.n	8013130 <HAL_DMA_Start_IT+0x350>
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	4a65      	ldr	r2, [pc, #404]	@ (80132a4 <HAL_DMA_Start_IT+0x4c4>)
 801310e:	4293      	cmp	r3, r2
 8013110:	d00e      	beq.n	8013130 <HAL_DMA_Start_IT+0x350>
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	4a64      	ldr	r2, [pc, #400]	@ (80132a8 <HAL_DMA_Start_IT+0x4c8>)
 8013118:	4293      	cmp	r3, r2
 801311a:	d009      	beq.n	8013130 <HAL_DMA_Start_IT+0x350>
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	4a62      	ldr	r2, [pc, #392]	@ (80132ac <HAL_DMA_Start_IT+0x4cc>)
 8013122:	4293      	cmp	r3, r2
 8013124:	d004      	beq.n	8013130 <HAL_DMA_Start_IT+0x350>
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	4a61      	ldr	r2, [pc, #388]	@ (80132b0 <HAL_DMA_Start_IT+0x4d0>)
 801312c:	4293      	cmp	r3, r2
 801312e:	d101      	bne.n	8013134 <HAL_DMA_Start_IT+0x354>
 8013130:	2301      	movs	r3, #1
 8013132:	e000      	b.n	8013136 <HAL_DMA_Start_IT+0x356>
 8013134:	2300      	movs	r3, #0
 8013136:	2b00      	cmp	r3, #0
 8013138:	d01a      	beq.n	8013170 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013144:	2b00      	cmp	r3, #0
 8013146:	d007      	beq.n	8013158 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801314c:	681a      	ldr	r2, [r3, #0]
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013152:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8013156:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801315c:	2b00      	cmp	r3, #0
 801315e:	d007      	beq.n	8013170 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013164:	681a      	ldr	r2, [r3, #0]
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801316a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801316e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	4a37      	ldr	r2, [pc, #220]	@ (8013254 <HAL_DMA_Start_IT+0x474>)
 8013176:	4293      	cmp	r3, r2
 8013178:	d04a      	beq.n	8013210 <HAL_DMA_Start_IT+0x430>
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	4a36      	ldr	r2, [pc, #216]	@ (8013258 <HAL_DMA_Start_IT+0x478>)
 8013180:	4293      	cmp	r3, r2
 8013182:	d045      	beq.n	8013210 <HAL_DMA_Start_IT+0x430>
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	4a34      	ldr	r2, [pc, #208]	@ (801325c <HAL_DMA_Start_IT+0x47c>)
 801318a:	4293      	cmp	r3, r2
 801318c:	d040      	beq.n	8013210 <HAL_DMA_Start_IT+0x430>
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	4a33      	ldr	r2, [pc, #204]	@ (8013260 <HAL_DMA_Start_IT+0x480>)
 8013194:	4293      	cmp	r3, r2
 8013196:	d03b      	beq.n	8013210 <HAL_DMA_Start_IT+0x430>
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	4a31      	ldr	r2, [pc, #196]	@ (8013264 <HAL_DMA_Start_IT+0x484>)
 801319e:	4293      	cmp	r3, r2
 80131a0:	d036      	beq.n	8013210 <HAL_DMA_Start_IT+0x430>
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	4a30      	ldr	r2, [pc, #192]	@ (8013268 <HAL_DMA_Start_IT+0x488>)
 80131a8:	4293      	cmp	r3, r2
 80131aa:	d031      	beq.n	8013210 <HAL_DMA_Start_IT+0x430>
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	4a2e      	ldr	r2, [pc, #184]	@ (801326c <HAL_DMA_Start_IT+0x48c>)
 80131b2:	4293      	cmp	r3, r2
 80131b4:	d02c      	beq.n	8013210 <HAL_DMA_Start_IT+0x430>
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	4a2d      	ldr	r2, [pc, #180]	@ (8013270 <HAL_DMA_Start_IT+0x490>)
 80131bc:	4293      	cmp	r3, r2
 80131be:	d027      	beq.n	8013210 <HAL_DMA_Start_IT+0x430>
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	4a2b      	ldr	r2, [pc, #172]	@ (8013274 <HAL_DMA_Start_IT+0x494>)
 80131c6:	4293      	cmp	r3, r2
 80131c8:	d022      	beq.n	8013210 <HAL_DMA_Start_IT+0x430>
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	4a2a      	ldr	r2, [pc, #168]	@ (8013278 <HAL_DMA_Start_IT+0x498>)
 80131d0:	4293      	cmp	r3, r2
 80131d2:	d01d      	beq.n	8013210 <HAL_DMA_Start_IT+0x430>
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	4a28      	ldr	r2, [pc, #160]	@ (801327c <HAL_DMA_Start_IT+0x49c>)
 80131da:	4293      	cmp	r3, r2
 80131dc:	d018      	beq.n	8013210 <HAL_DMA_Start_IT+0x430>
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	4a27      	ldr	r2, [pc, #156]	@ (8013280 <HAL_DMA_Start_IT+0x4a0>)
 80131e4:	4293      	cmp	r3, r2
 80131e6:	d013      	beq.n	8013210 <HAL_DMA_Start_IT+0x430>
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	4a25      	ldr	r2, [pc, #148]	@ (8013284 <HAL_DMA_Start_IT+0x4a4>)
 80131ee:	4293      	cmp	r3, r2
 80131f0:	d00e      	beq.n	8013210 <HAL_DMA_Start_IT+0x430>
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	4a24      	ldr	r2, [pc, #144]	@ (8013288 <HAL_DMA_Start_IT+0x4a8>)
 80131f8:	4293      	cmp	r3, r2
 80131fa:	d009      	beq.n	8013210 <HAL_DMA_Start_IT+0x430>
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	4a22      	ldr	r2, [pc, #136]	@ (801328c <HAL_DMA_Start_IT+0x4ac>)
 8013202:	4293      	cmp	r3, r2
 8013204:	d004      	beq.n	8013210 <HAL_DMA_Start_IT+0x430>
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	4a21      	ldr	r2, [pc, #132]	@ (8013290 <HAL_DMA_Start_IT+0x4b0>)
 801320c:	4293      	cmp	r3, r2
 801320e:	d108      	bne.n	8013222 <HAL_DMA_Start_IT+0x442>
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	681a      	ldr	r2, [r3, #0]
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	f042 0201 	orr.w	r2, r2, #1
 801321e:	601a      	str	r2, [r3, #0]
 8013220:	e012      	b.n	8013248 <HAL_DMA_Start_IT+0x468>
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	681a      	ldr	r2, [r3, #0]
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	f042 0201 	orr.w	r2, r2, #1
 8013230:	601a      	str	r2, [r3, #0]
 8013232:	e009      	b.n	8013248 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801323a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	2200      	movs	r2, #0
 8013240:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8013244:	2301      	movs	r3, #1
 8013246:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8013248:	7dfb      	ldrb	r3, [r7, #23]
}
 801324a:	4618      	mov	r0, r3
 801324c:	3718      	adds	r7, #24
 801324e:	46bd      	mov	sp, r7
 8013250:	bd80      	pop	{r7, pc}
 8013252:	bf00      	nop
 8013254:	40020010 	.word	0x40020010
 8013258:	40020028 	.word	0x40020028
 801325c:	40020040 	.word	0x40020040
 8013260:	40020058 	.word	0x40020058
 8013264:	40020070 	.word	0x40020070
 8013268:	40020088 	.word	0x40020088
 801326c:	400200a0 	.word	0x400200a0
 8013270:	400200b8 	.word	0x400200b8
 8013274:	40020410 	.word	0x40020410
 8013278:	40020428 	.word	0x40020428
 801327c:	40020440 	.word	0x40020440
 8013280:	40020458 	.word	0x40020458
 8013284:	40020470 	.word	0x40020470
 8013288:	40020488 	.word	0x40020488
 801328c:	400204a0 	.word	0x400204a0
 8013290:	400204b8 	.word	0x400204b8
 8013294:	58025408 	.word	0x58025408
 8013298:	5802541c 	.word	0x5802541c
 801329c:	58025430 	.word	0x58025430
 80132a0:	58025444 	.word	0x58025444
 80132a4:	58025458 	.word	0x58025458
 80132a8:	5802546c 	.word	0x5802546c
 80132ac:	58025480 	.word	0x58025480
 80132b0:	58025494 	.word	0x58025494

080132b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	b086      	sub	sp, #24
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80132bc:	f7fe f81a 	bl	80112f4 <HAL_GetTick>
 80132c0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d101      	bne.n	80132cc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80132c8:	2301      	movs	r3, #1
 80132ca:	e2dc      	b.n	8013886 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80132d2:	b2db      	uxtb	r3, r3
 80132d4:	2b02      	cmp	r3, #2
 80132d6:	d008      	beq.n	80132ea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	2280      	movs	r2, #128	@ 0x80
 80132dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	2200      	movs	r2, #0
 80132e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80132e6:	2301      	movs	r3, #1
 80132e8:	e2cd      	b.n	8013886 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	4a76      	ldr	r2, [pc, #472]	@ (80134c8 <HAL_DMA_Abort+0x214>)
 80132f0:	4293      	cmp	r3, r2
 80132f2:	d04a      	beq.n	801338a <HAL_DMA_Abort+0xd6>
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	4a74      	ldr	r2, [pc, #464]	@ (80134cc <HAL_DMA_Abort+0x218>)
 80132fa:	4293      	cmp	r3, r2
 80132fc:	d045      	beq.n	801338a <HAL_DMA_Abort+0xd6>
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	4a73      	ldr	r2, [pc, #460]	@ (80134d0 <HAL_DMA_Abort+0x21c>)
 8013304:	4293      	cmp	r3, r2
 8013306:	d040      	beq.n	801338a <HAL_DMA_Abort+0xd6>
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	4a71      	ldr	r2, [pc, #452]	@ (80134d4 <HAL_DMA_Abort+0x220>)
 801330e:	4293      	cmp	r3, r2
 8013310:	d03b      	beq.n	801338a <HAL_DMA_Abort+0xd6>
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	4a70      	ldr	r2, [pc, #448]	@ (80134d8 <HAL_DMA_Abort+0x224>)
 8013318:	4293      	cmp	r3, r2
 801331a:	d036      	beq.n	801338a <HAL_DMA_Abort+0xd6>
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	4a6e      	ldr	r2, [pc, #440]	@ (80134dc <HAL_DMA_Abort+0x228>)
 8013322:	4293      	cmp	r3, r2
 8013324:	d031      	beq.n	801338a <HAL_DMA_Abort+0xd6>
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	4a6d      	ldr	r2, [pc, #436]	@ (80134e0 <HAL_DMA_Abort+0x22c>)
 801332c:	4293      	cmp	r3, r2
 801332e:	d02c      	beq.n	801338a <HAL_DMA_Abort+0xd6>
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	4a6b      	ldr	r2, [pc, #428]	@ (80134e4 <HAL_DMA_Abort+0x230>)
 8013336:	4293      	cmp	r3, r2
 8013338:	d027      	beq.n	801338a <HAL_DMA_Abort+0xd6>
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	4a6a      	ldr	r2, [pc, #424]	@ (80134e8 <HAL_DMA_Abort+0x234>)
 8013340:	4293      	cmp	r3, r2
 8013342:	d022      	beq.n	801338a <HAL_DMA_Abort+0xd6>
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	4a68      	ldr	r2, [pc, #416]	@ (80134ec <HAL_DMA_Abort+0x238>)
 801334a:	4293      	cmp	r3, r2
 801334c:	d01d      	beq.n	801338a <HAL_DMA_Abort+0xd6>
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	4a67      	ldr	r2, [pc, #412]	@ (80134f0 <HAL_DMA_Abort+0x23c>)
 8013354:	4293      	cmp	r3, r2
 8013356:	d018      	beq.n	801338a <HAL_DMA_Abort+0xd6>
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	4a65      	ldr	r2, [pc, #404]	@ (80134f4 <HAL_DMA_Abort+0x240>)
 801335e:	4293      	cmp	r3, r2
 8013360:	d013      	beq.n	801338a <HAL_DMA_Abort+0xd6>
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	4a64      	ldr	r2, [pc, #400]	@ (80134f8 <HAL_DMA_Abort+0x244>)
 8013368:	4293      	cmp	r3, r2
 801336a:	d00e      	beq.n	801338a <HAL_DMA_Abort+0xd6>
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	4a62      	ldr	r2, [pc, #392]	@ (80134fc <HAL_DMA_Abort+0x248>)
 8013372:	4293      	cmp	r3, r2
 8013374:	d009      	beq.n	801338a <HAL_DMA_Abort+0xd6>
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	4a61      	ldr	r2, [pc, #388]	@ (8013500 <HAL_DMA_Abort+0x24c>)
 801337c:	4293      	cmp	r3, r2
 801337e:	d004      	beq.n	801338a <HAL_DMA_Abort+0xd6>
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	4a5f      	ldr	r2, [pc, #380]	@ (8013504 <HAL_DMA_Abort+0x250>)
 8013386:	4293      	cmp	r3, r2
 8013388:	d101      	bne.n	801338e <HAL_DMA_Abort+0xda>
 801338a:	2301      	movs	r3, #1
 801338c:	e000      	b.n	8013390 <HAL_DMA_Abort+0xdc>
 801338e:	2300      	movs	r3, #0
 8013390:	2b00      	cmp	r3, #0
 8013392:	d013      	beq.n	80133bc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	681a      	ldr	r2, [r3, #0]
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	f022 021e 	bic.w	r2, r2, #30
 80133a2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	695a      	ldr	r2, [r3, #20]
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80133b2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	617b      	str	r3, [r7, #20]
 80133ba:	e00a      	b.n	80133d2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	681a      	ldr	r2, [r3, #0]
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	f022 020e 	bic.w	r2, r2, #14
 80133ca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	4a3c      	ldr	r2, [pc, #240]	@ (80134c8 <HAL_DMA_Abort+0x214>)
 80133d8:	4293      	cmp	r3, r2
 80133da:	d072      	beq.n	80134c2 <HAL_DMA_Abort+0x20e>
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	4a3a      	ldr	r2, [pc, #232]	@ (80134cc <HAL_DMA_Abort+0x218>)
 80133e2:	4293      	cmp	r3, r2
 80133e4:	d06d      	beq.n	80134c2 <HAL_DMA_Abort+0x20e>
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	4a39      	ldr	r2, [pc, #228]	@ (80134d0 <HAL_DMA_Abort+0x21c>)
 80133ec:	4293      	cmp	r3, r2
 80133ee:	d068      	beq.n	80134c2 <HAL_DMA_Abort+0x20e>
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	4a37      	ldr	r2, [pc, #220]	@ (80134d4 <HAL_DMA_Abort+0x220>)
 80133f6:	4293      	cmp	r3, r2
 80133f8:	d063      	beq.n	80134c2 <HAL_DMA_Abort+0x20e>
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	4a36      	ldr	r2, [pc, #216]	@ (80134d8 <HAL_DMA_Abort+0x224>)
 8013400:	4293      	cmp	r3, r2
 8013402:	d05e      	beq.n	80134c2 <HAL_DMA_Abort+0x20e>
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	4a34      	ldr	r2, [pc, #208]	@ (80134dc <HAL_DMA_Abort+0x228>)
 801340a:	4293      	cmp	r3, r2
 801340c:	d059      	beq.n	80134c2 <HAL_DMA_Abort+0x20e>
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	4a33      	ldr	r2, [pc, #204]	@ (80134e0 <HAL_DMA_Abort+0x22c>)
 8013414:	4293      	cmp	r3, r2
 8013416:	d054      	beq.n	80134c2 <HAL_DMA_Abort+0x20e>
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	4a31      	ldr	r2, [pc, #196]	@ (80134e4 <HAL_DMA_Abort+0x230>)
 801341e:	4293      	cmp	r3, r2
 8013420:	d04f      	beq.n	80134c2 <HAL_DMA_Abort+0x20e>
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	4a30      	ldr	r2, [pc, #192]	@ (80134e8 <HAL_DMA_Abort+0x234>)
 8013428:	4293      	cmp	r3, r2
 801342a:	d04a      	beq.n	80134c2 <HAL_DMA_Abort+0x20e>
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	4a2e      	ldr	r2, [pc, #184]	@ (80134ec <HAL_DMA_Abort+0x238>)
 8013432:	4293      	cmp	r3, r2
 8013434:	d045      	beq.n	80134c2 <HAL_DMA_Abort+0x20e>
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	4a2d      	ldr	r2, [pc, #180]	@ (80134f0 <HAL_DMA_Abort+0x23c>)
 801343c:	4293      	cmp	r3, r2
 801343e:	d040      	beq.n	80134c2 <HAL_DMA_Abort+0x20e>
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	4a2b      	ldr	r2, [pc, #172]	@ (80134f4 <HAL_DMA_Abort+0x240>)
 8013446:	4293      	cmp	r3, r2
 8013448:	d03b      	beq.n	80134c2 <HAL_DMA_Abort+0x20e>
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	4a2a      	ldr	r2, [pc, #168]	@ (80134f8 <HAL_DMA_Abort+0x244>)
 8013450:	4293      	cmp	r3, r2
 8013452:	d036      	beq.n	80134c2 <HAL_DMA_Abort+0x20e>
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	4a28      	ldr	r2, [pc, #160]	@ (80134fc <HAL_DMA_Abort+0x248>)
 801345a:	4293      	cmp	r3, r2
 801345c:	d031      	beq.n	80134c2 <HAL_DMA_Abort+0x20e>
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	4a27      	ldr	r2, [pc, #156]	@ (8013500 <HAL_DMA_Abort+0x24c>)
 8013464:	4293      	cmp	r3, r2
 8013466:	d02c      	beq.n	80134c2 <HAL_DMA_Abort+0x20e>
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	4a25      	ldr	r2, [pc, #148]	@ (8013504 <HAL_DMA_Abort+0x250>)
 801346e:	4293      	cmp	r3, r2
 8013470:	d027      	beq.n	80134c2 <HAL_DMA_Abort+0x20e>
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	4a24      	ldr	r2, [pc, #144]	@ (8013508 <HAL_DMA_Abort+0x254>)
 8013478:	4293      	cmp	r3, r2
 801347a:	d022      	beq.n	80134c2 <HAL_DMA_Abort+0x20e>
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	4a22      	ldr	r2, [pc, #136]	@ (801350c <HAL_DMA_Abort+0x258>)
 8013482:	4293      	cmp	r3, r2
 8013484:	d01d      	beq.n	80134c2 <HAL_DMA_Abort+0x20e>
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	4a21      	ldr	r2, [pc, #132]	@ (8013510 <HAL_DMA_Abort+0x25c>)
 801348c:	4293      	cmp	r3, r2
 801348e:	d018      	beq.n	80134c2 <HAL_DMA_Abort+0x20e>
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	4a1f      	ldr	r2, [pc, #124]	@ (8013514 <HAL_DMA_Abort+0x260>)
 8013496:	4293      	cmp	r3, r2
 8013498:	d013      	beq.n	80134c2 <HAL_DMA_Abort+0x20e>
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	4a1e      	ldr	r2, [pc, #120]	@ (8013518 <HAL_DMA_Abort+0x264>)
 80134a0:	4293      	cmp	r3, r2
 80134a2:	d00e      	beq.n	80134c2 <HAL_DMA_Abort+0x20e>
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	4a1c      	ldr	r2, [pc, #112]	@ (801351c <HAL_DMA_Abort+0x268>)
 80134aa:	4293      	cmp	r3, r2
 80134ac:	d009      	beq.n	80134c2 <HAL_DMA_Abort+0x20e>
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	4a1b      	ldr	r2, [pc, #108]	@ (8013520 <HAL_DMA_Abort+0x26c>)
 80134b4:	4293      	cmp	r3, r2
 80134b6:	d004      	beq.n	80134c2 <HAL_DMA_Abort+0x20e>
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	4a19      	ldr	r2, [pc, #100]	@ (8013524 <HAL_DMA_Abort+0x270>)
 80134be:	4293      	cmp	r3, r2
 80134c0:	d132      	bne.n	8013528 <HAL_DMA_Abort+0x274>
 80134c2:	2301      	movs	r3, #1
 80134c4:	e031      	b.n	801352a <HAL_DMA_Abort+0x276>
 80134c6:	bf00      	nop
 80134c8:	40020010 	.word	0x40020010
 80134cc:	40020028 	.word	0x40020028
 80134d0:	40020040 	.word	0x40020040
 80134d4:	40020058 	.word	0x40020058
 80134d8:	40020070 	.word	0x40020070
 80134dc:	40020088 	.word	0x40020088
 80134e0:	400200a0 	.word	0x400200a0
 80134e4:	400200b8 	.word	0x400200b8
 80134e8:	40020410 	.word	0x40020410
 80134ec:	40020428 	.word	0x40020428
 80134f0:	40020440 	.word	0x40020440
 80134f4:	40020458 	.word	0x40020458
 80134f8:	40020470 	.word	0x40020470
 80134fc:	40020488 	.word	0x40020488
 8013500:	400204a0 	.word	0x400204a0
 8013504:	400204b8 	.word	0x400204b8
 8013508:	58025408 	.word	0x58025408
 801350c:	5802541c 	.word	0x5802541c
 8013510:	58025430 	.word	0x58025430
 8013514:	58025444 	.word	0x58025444
 8013518:	58025458 	.word	0x58025458
 801351c:	5802546c 	.word	0x5802546c
 8013520:	58025480 	.word	0x58025480
 8013524:	58025494 	.word	0x58025494
 8013528:	2300      	movs	r3, #0
 801352a:	2b00      	cmp	r3, #0
 801352c:	d007      	beq.n	801353e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013532:	681a      	ldr	r2, [r3, #0]
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013538:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801353c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	4a6d      	ldr	r2, [pc, #436]	@ (80136f8 <HAL_DMA_Abort+0x444>)
 8013544:	4293      	cmp	r3, r2
 8013546:	d04a      	beq.n	80135de <HAL_DMA_Abort+0x32a>
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	4a6b      	ldr	r2, [pc, #428]	@ (80136fc <HAL_DMA_Abort+0x448>)
 801354e:	4293      	cmp	r3, r2
 8013550:	d045      	beq.n	80135de <HAL_DMA_Abort+0x32a>
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	4a6a      	ldr	r2, [pc, #424]	@ (8013700 <HAL_DMA_Abort+0x44c>)
 8013558:	4293      	cmp	r3, r2
 801355a:	d040      	beq.n	80135de <HAL_DMA_Abort+0x32a>
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	4a68      	ldr	r2, [pc, #416]	@ (8013704 <HAL_DMA_Abort+0x450>)
 8013562:	4293      	cmp	r3, r2
 8013564:	d03b      	beq.n	80135de <HAL_DMA_Abort+0x32a>
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	4a67      	ldr	r2, [pc, #412]	@ (8013708 <HAL_DMA_Abort+0x454>)
 801356c:	4293      	cmp	r3, r2
 801356e:	d036      	beq.n	80135de <HAL_DMA_Abort+0x32a>
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	4a65      	ldr	r2, [pc, #404]	@ (801370c <HAL_DMA_Abort+0x458>)
 8013576:	4293      	cmp	r3, r2
 8013578:	d031      	beq.n	80135de <HAL_DMA_Abort+0x32a>
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	4a64      	ldr	r2, [pc, #400]	@ (8013710 <HAL_DMA_Abort+0x45c>)
 8013580:	4293      	cmp	r3, r2
 8013582:	d02c      	beq.n	80135de <HAL_DMA_Abort+0x32a>
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	4a62      	ldr	r2, [pc, #392]	@ (8013714 <HAL_DMA_Abort+0x460>)
 801358a:	4293      	cmp	r3, r2
 801358c:	d027      	beq.n	80135de <HAL_DMA_Abort+0x32a>
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	4a61      	ldr	r2, [pc, #388]	@ (8013718 <HAL_DMA_Abort+0x464>)
 8013594:	4293      	cmp	r3, r2
 8013596:	d022      	beq.n	80135de <HAL_DMA_Abort+0x32a>
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	4a5f      	ldr	r2, [pc, #380]	@ (801371c <HAL_DMA_Abort+0x468>)
 801359e:	4293      	cmp	r3, r2
 80135a0:	d01d      	beq.n	80135de <HAL_DMA_Abort+0x32a>
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	4a5e      	ldr	r2, [pc, #376]	@ (8013720 <HAL_DMA_Abort+0x46c>)
 80135a8:	4293      	cmp	r3, r2
 80135aa:	d018      	beq.n	80135de <HAL_DMA_Abort+0x32a>
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	4a5c      	ldr	r2, [pc, #368]	@ (8013724 <HAL_DMA_Abort+0x470>)
 80135b2:	4293      	cmp	r3, r2
 80135b4:	d013      	beq.n	80135de <HAL_DMA_Abort+0x32a>
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	4a5b      	ldr	r2, [pc, #364]	@ (8013728 <HAL_DMA_Abort+0x474>)
 80135bc:	4293      	cmp	r3, r2
 80135be:	d00e      	beq.n	80135de <HAL_DMA_Abort+0x32a>
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	4a59      	ldr	r2, [pc, #356]	@ (801372c <HAL_DMA_Abort+0x478>)
 80135c6:	4293      	cmp	r3, r2
 80135c8:	d009      	beq.n	80135de <HAL_DMA_Abort+0x32a>
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	4a58      	ldr	r2, [pc, #352]	@ (8013730 <HAL_DMA_Abort+0x47c>)
 80135d0:	4293      	cmp	r3, r2
 80135d2:	d004      	beq.n	80135de <HAL_DMA_Abort+0x32a>
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	4a56      	ldr	r2, [pc, #344]	@ (8013734 <HAL_DMA_Abort+0x480>)
 80135da:	4293      	cmp	r3, r2
 80135dc:	d108      	bne.n	80135f0 <HAL_DMA_Abort+0x33c>
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	681a      	ldr	r2, [r3, #0]
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	f022 0201 	bic.w	r2, r2, #1
 80135ec:	601a      	str	r2, [r3, #0]
 80135ee:	e007      	b.n	8013600 <HAL_DMA_Abort+0x34c>
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	681a      	ldr	r2, [r3, #0]
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	f022 0201 	bic.w	r2, r2, #1
 80135fe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8013600:	e013      	b.n	801362a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8013602:	f7fd fe77 	bl	80112f4 <HAL_GetTick>
 8013606:	4602      	mov	r2, r0
 8013608:	693b      	ldr	r3, [r7, #16]
 801360a:	1ad3      	subs	r3, r2, r3
 801360c:	2b05      	cmp	r3, #5
 801360e:	d90c      	bls.n	801362a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	2220      	movs	r2, #32
 8013614:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	2203      	movs	r2, #3
 801361a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	2200      	movs	r2, #0
 8013622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8013626:	2301      	movs	r3, #1
 8013628:	e12d      	b.n	8013886 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 801362a:	697b      	ldr	r3, [r7, #20]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	f003 0301 	and.w	r3, r3, #1
 8013632:	2b00      	cmp	r3, #0
 8013634:	d1e5      	bne.n	8013602 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	4a2f      	ldr	r2, [pc, #188]	@ (80136f8 <HAL_DMA_Abort+0x444>)
 801363c:	4293      	cmp	r3, r2
 801363e:	d04a      	beq.n	80136d6 <HAL_DMA_Abort+0x422>
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	4a2d      	ldr	r2, [pc, #180]	@ (80136fc <HAL_DMA_Abort+0x448>)
 8013646:	4293      	cmp	r3, r2
 8013648:	d045      	beq.n	80136d6 <HAL_DMA_Abort+0x422>
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	4a2c      	ldr	r2, [pc, #176]	@ (8013700 <HAL_DMA_Abort+0x44c>)
 8013650:	4293      	cmp	r3, r2
 8013652:	d040      	beq.n	80136d6 <HAL_DMA_Abort+0x422>
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	4a2a      	ldr	r2, [pc, #168]	@ (8013704 <HAL_DMA_Abort+0x450>)
 801365a:	4293      	cmp	r3, r2
 801365c:	d03b      	beq.n	80136d6 <HAL_DMA_Abort+0x422>
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	4a29      	ldr	r2, [pc, #164]	@ (8013708 <HAL_DMA_Abort+0x454>)
 8013664:	4293      	cmp	r3, r2
 8013666:	d036      	beq.n	80136d6 <HAL_DMA_Abort+0x422>
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	4a27      	ldr	r2, [pc, #156]	@ (801370c <HAL_DMA_Abort+0x458>)
 801366e:	4293      	cmp	r3, r2
 8013670:	d031      	beq.n	80136d6 <HAL_DMA_Abort+0x422>
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	4a26      	ldr	r2, [pc, #152]	@ (8013710 <HAL_DMA_Abort+0x45c>)
 8013678:	4293      	cmp	r3, r2
 801367a:	d02c      	beq.n	80136d6 <HAL_DMA_Abort+0x422>
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	4a24      	ldr	r2, [pc, #144]	@ (8013714 <HAL_DMA_Abort+0x460>)
 8013682:	4293      	cmp	r3, r2
 8013684:	d027      	beq.n	80136d6 <HAL_DMA_Abort+0x422>
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	4a23      	ldr	r2, [pc, #140]	@ (8013718 <HAL_DMA_Abort+0x464>)
 801368c:	4293      	cmp	r3, r2
 801368e:	d022      	beq.n	80136d6 <HAL_DMA_Abort+0x422>
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	4a21      	ldr	r2, [pc, #132]	@ (801371c <HAL_DMA_Abort+0x468>)
 8013696:	4293      	cmp	r3, r2
 8013698:	d01d      	beq.n	80136d6 <HAL_DMA_Abort+0x422>
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	4a20      	ldr	r2, [pc, #128]	@ (8013720 <HAL_DMA_Abort+0x46c>)
 80136a0:	4293      	cmp	r3, r2
 80136a2:	d018      	beq.n	80136d6 <HAL_DMA_Abort+0x422>
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	4a1e      	ldr	r2, [pc, #120]	@ (8013724 <HAL_DMA_Abort+0x470>)
 80136aa:	4293      	cmp	r3, r2
 80136ac:	d013      	beq.n	80136d6 <HAL_DMA_Abort+0x422>
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	4a1d      	ldr	r2, [pc, #116]	@ (8013728 <HAL_DMA_Abort+0x474>)
 80136b4:	4293      	cmp	r3, r2
 80136b6:	d00e      	beq.n	80136d6 <HAL_DMA_Abort+0x422>
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	4a1b      	ldr	r2, [pc, #108]	@ (801372c <HAL_DMA_Abort+0x478>)
 80136be:	4293      	cmp	r3, r2
 80136c0:	d009      	beq.n	80136d6 <HAL_DMA_Abort+0x422>
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	4a1a      	ldr	r2, [pc, #104]	@ (8013730 <HAL_DMA_Abort+0x47c>)
 80136c8:	4293      	cmp	r3, r2
 80136ca:	d004      	beq.n	80136d6 <HAL_DMA_Abort+0x422>
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	4a18      	ldr	r2, [pc, #96]	@ (8013734 <HAL_DMA_Abort+0x480>)
 80136d2:	4293      	cmp	r3, r2
 80136d4:	d101      	bne.n	80136da <HAL_DMA_Abort+0x426>
 80136d6:	2301      	movs	r3, #1
 80136d8:	e000      	b.n	80136dc <HAL_DMA_Abort+0x428>
 80136da:	2300      	movs	r3, #0
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d02b      	beq.n	8013738 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80136e4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80136ea:	f003 031f 	and.w	r3, r3, #31
 80136ee:	223f      	movs	r2, #63	@ 0x3f
 80136f0:	409a      	lsls	r2, r3
 80136f2:	68bb      	ldr	r3, [r7, #8]
 80136f4:	609a      	str	r2, [r3, #8]
 80136f6:	e02a      	b.n	801374e <HAL_DMA_Abort+0x49a>
 80136f8:	40020010 	.word	0x40020010
 80136fc:	40020028 	.word	0x40020028
 8013700:	40020040 	.word	0x40020040
 8013704:	40020058 	.word	0x40020058
 8013708:	40020070 	.word	0x40020070
 801370c:	40020088 	.word	0x40020088
 8013710:	400200a0 	.word	0x400200a0
 8013714:	400200b8 	.word	0x400200b8
 8013718:	40020410 	.word	0x40020410
 801371c:	40020428 	.word	0x40020428
 8013720:	40020440 	.word	0x40020440
 8013724:	40020458 	.word	0x40020458
 8013728:	40020470 	.word	0x40020470
 801372c:	40020488 	.word	0x40020488
 8013730:	400204a0 	.word	0x400204a0
 8013734:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801373c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013742:	f003 031f 	and.w	r3, r3, #31
 8013746:	2201      	movs	r2, #1
 8013748:	409a      	lsls	r2, r3
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	4a4f      	ldr	r2, [pc, #316]	@ (8013890 <HAL_DMA_Abort+0x5dc>)
 8013754:	4293      	cmp	r3, r2
 8013756:	d072      	beq.n	801383e <HAL_DMA_Abort+0x58a>
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	4a4d      	ldr	r2, [pc, #308]	@ (8013894 <HAL_DMA_Abort+0x5e0>)
 801375e:	4293      	cmp	r3, r2
 8013760:	d06d      	beq.n	801383e <HAL_DMA_Abort+0x58a>
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	4a4c      	ldr	r2, [pc, #304]	@ (8013898 <HAL_DMA_Abort+0x5e4>)
 8013768:	4293      	cmp	r3, r2
 801376a:	d068      	beq.n	801383e <HAL_DMA_Abort+0x58a>
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	4a4a      	ldr	r2, [pc, #296]	@ (801389c <HAL_DMA_Abort+0x5e8>)
 8013772:	4293      	cmp	r3, r2
 8013774:	d063      	beq.n	801383e <HAL_DMA_Abort+0x58a>
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	4a49      	ldr	r2, [pc, #292]	@ (80138a0 <HAL_DMA_Abort+0x5ec>)
 801377c:	4293      	cmp	r3, r2
 801377e:	d05e      	beq.n	801383e <HAL_DMA_Abort+0x58a>
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	4a47      	ldr	r2, [pc, #284]	@ (80138a4 <HAL_DMA_Abort+0x5f0>)
 8013786:	4293      	cmp	r3, r2
 8013788:	d059      	beq.n	801383e <HAL_DMA_Abort+0x58a>
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	4a46      	ldr	r2, [pc, #280]	@ (80138a8 <HAL_DMA_Abort+0x5f4>)
 8013790:	4293      	cmp	r3, r2
 8013792:	d054      	beq.n	801383e <HAL_DMA_Abort+0x58a>
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	4a44      	ldr	r2, [pc, #272]	@ (80138ac <HAL_DMA_Abort+0x5f8>)
 801379a:	4293      	cmp	r3, r2
 801379c:	d04f      	beq.n	801383e <HAL_DMA_Abort+0x58a>
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	4a43      	ldr	r2, [pc, #268]	@ (80138b0 <HAL_DMA_Abort+0x5fc>)
 80137a4:	4293      	cmp	r3, r2
 80137a6:	d04a      	beq.n	801383e <HAL_DMA_Abort+0x58a>
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	4a41      	ldr	r2, [pc, #260]	@ (80138b4 <HAL_DMA_Abort+0x600>)
 80137ae:	4293      	cmp	r3, r2
 80137b0:	d045      	beq.n	801383e <HAL_DMA_Abort+0x58a>
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	4a40      	ldr	r2, [pc, #256]	@ (80138b8 <HAL_DMA_Abort+0x604>)
 80137b8:	4293      	cmp	r3, r2
 80137ba:	d040      	beq.n	801383e <HAL_DMA_Abort+0x58a>
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	4a3e      	ldr	r2, [pc, #248]	@ (80138bc <HAL_DMA_Abort+0x608>)
 80137c2:	4293      	cmp	r3, r2
 80137c4:	d03b      	beq.n	801383e <HAL_DMA_Abort+0x58a>
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	4a3d      	ldr	r2, [pc, #244]	@ (80138c0 <HAL_DMA_Abort+0x60c>)
 80137cc:	4293      	cmp	r3, r2
 80137ce:	d036      	beq.n	801383e <HAL_DMA_Abort+0x58a>
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	4a3b      	ldr	r2, [pc, #236]	@ (80138c4 <HAL_DMA_Abort+0x610>)
 80137d6:	4293      	cmp	r3, r2
 80137d8:	d031      	beq.n	801383e <HAL_DMA_Abort+0x58a>
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	4a3a      	ldr	r2, [pc, #232]	@ (80138c8 <HAL_DMA_Abort+0x614>)
 80137e0:	4293      	cmp	r3, r2
 80137e2:	d02c      	beq.n	801383e <HAL_DMA_Abort+0x58a>
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	4a38      	ldr	r2, [pc, #224]	@ (80138cc <HAL_DMA_Abort+0x618>)
 80137ea:	4293      	cmp	r3, r2
 80137ec:	d027      	beq.n	801383e <HAL_DMA_Abort+0x58a>
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	4a37      	ldr	r2, [pc, #220]	@ (80138d0 <HAL_DMA_Abort+0x61c>)
 80137f4:	4293      	cmp	r3, r2
 80137f6:	d022      	beq.n	801383e <HAL_DMA_Abort+0x58a>
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	4a35      	ldr	r2, [pc, #212]	@ (80138d4 <HAL_DMA_Abort+0x620>)
 80137fe:	4293      	cmp	r3, r2
 8013800:	d01d      	beq.n	801383e <HAL_DMA_Abort+0x58a>
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	4a34      	ldr	r2, [pc, #208]	@ (80138d8 <HAL_DMA_Abort+0x624>)
 8013808:	4293      	cmp	r3, r2
 801380a:	d018      	beq.n	801383e <HAL_DMA_Abort+0x58a>
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	4a32      	ldr	r2, [pc, #200]	@ (80138dc <HAL_DMA_Abort+0x628>)
 8013812:	4293      	cmp	r3, r2
 8013814:	d013      	beq.n	801383e <HAL_DMA_Abort+0x58a>
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	4a31      	ldr	r2, [pc, #196]	@ (80138e0 <HAL_DMA_Abort+0x62c>)
 801381c:	4293      	cmp	r3, r2
 801381e:	d00e      	beq.n	801383e <HAL_DMA_Abort+0x58a>
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	4a2f      	ldr	r2, [pc, #188]	@ (80138e4 <HAL_DMA_Abort+0x630>)
 8013826:	4293      	cmp	r3, r2
 8013828:	d009      	beq.n	801383e <HAL_DMA_Abort+0x58a>
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	4a2e      	ldr	r2, [pc, #184]	@ (80138e8 <HAL_DMA_Abort+0x634>)
 8013830:	4293      	cmp	r3, r2
 8013832:	d004      	beq.n	801383e <HAL_DMA_Abort+0x58a>
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	4a2c      	ldr	r2, [pc, #176]	@ (80138ec <HAL_DMA_Abort+0x638>)
 801383a:	4293      	cmp	r3, r2
 801383c:	d101      	bne.n	8013842 <HAL_DMA_Abort+0x58e>
 801383e:	2301      	movs	r3, #1
 8013840:	e000      	b.n	8013844 <HAL_DMA_Abort+0x590>
 8013842:	2300      	movs	r3, #0
 8013844:	2b00      	cmp	r3, #0
 8013846:	d015      	beq.n	8013874 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801384c:	687a      	ldr	r2, [r7, #4]
 801384e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8013850:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013856:	2b00      	cmp	r3, #0
 8013858:	d00c      	beq.n	8013874 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801385e:	681a      	ldr	r2, [r3, #0]
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013864:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8013868:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801386e:	687a      	ldr	r2, [r7, #4]
 8013870:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8013872:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	2201      	movs	r2, #1
 8013878:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	2200      	movs	r2, #0
 8013880:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8013884:	2300      	movs	r3, #0
}
 8013886:	4618      	mov	r0, r3
 8013888:	3718      	adds	r7, #24
 801388a:	46bd      	mov	sp, r7
 801388c:	bd80      	pop	{r7, pc}
 801388e:	bf00      	nop
 8013890:	40020010 	.word	0x40020010
 8013894:	40020028 	.word	0x40020028
 8013898:	40020040 	.word	0x40020040
 801389c:	40020058 	.word	0x40020058
 80138a0:	40020070 	.word	0x40020070
 80138a4:	40020088 	.word	0x40020088
 80138a8:	400200a0 	.word	0x400200a0
 80138ac:	400200b8 	.word	0x400200b8
 80138b0:	40020410 	.word	0x40020410
 80138b4:	40020428 	.word	0x40020428
 80138b8:	40020440 	.word	0x40020440
 80138bc:	40020458 	.word	0x40020458
 80138c0:	40020470 	.word	0x40020470
 80138c4:	40020488 	.word	0x40020488
 80138c8:	400204a0 	.word	0x400204a0
 80138cc:	400204b8 	.word	0x400204b8
 80138d0:	58025408 	.word	0x58025408
 80138d4:	5802541c 	.word	0x5802541c
 80138d8:	58025430 	.word	0x58025430
 80138dc:	58025444 	.word	0x58025444
 80138e0:	58025458 	.word	0x58025458
 80138e4:	5802546c 	.word	0x5802546c
 80138e8:	58025480 	.word	0x58025480
 80138ec:	58025494 	.word	0x58025494

080138f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b084      	sub	sp, #16
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d101      	bne.n	8013902 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80138fe:	2301      	movs	r3, #1
 8013900:	e237      	b.n	8013d72 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8013908:	b2db      	uxtb	r3, r3
 801390a:	2b02      	cmp	r3, #2
 801390c:	d004      	beq.n	8013918 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	2280      	movs	r2, #128	@ 0x80
 8013912:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8013914:	2301      	movs	r3, #1
 8013916:	e22c      	b.n	8013d72 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	4a5c      	ldr	r2, [pc, #368]	@ (8013a90 <HAL_DMA_Abort_IT+0x1a0>)
 801391e:	4293      	cmp	r3, r2
 8013920:	d04a      	beq.n	80139b8 <HAL_DMA_Abort_IT+0xc8>
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	4a5b      	ldr	r2, [pc, #364]	@ (8013a94 <HAL_DMA_Abort_IT+0x1a4>)
 8013928:	4293      	cmp	r3, r2
 801392a:	d045      	beq.n	80139b8 <HAL_DMA_Abort_IT+0xc8>
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	4a59      	ldr	r2, [pc, #356]	@ (8013a98 <HAL_DMA_Abort_IT+0x1a8>)
 8013932:	4293      	cmp	r3, r2
 8013934:	d040      	beq.n	80139b8 <HAL_DMA_Abort_IT+0xc8>
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	4a58      	ldr	r2, [pc, #352]	@ (8013a9c <HAL_DMA_Abort_IT+0x1ac>)
 801393c:	4293      	cmp	r3, r2
 801393e:	d03b      	beq.n	80139b8 <HAL_DMA_Abort_IT+0xc8>
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	4a56      	ldr	r2, [pc, #344]	@ (8013aa0 <HAL_DMA_Abort_IT+0x1b0>)
 8013946:	4293      	cmp	r3, r2
 8013948:	d036      	beq.n	80139b8 <HAL_DMA_Abort_IT+0xc8>
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	4a55      	ldr	r2, [pc, #340]	@ (8013aa4 <HAL_DMA_Abort_IT+0x1b4>)
 8013950:	4293      	cmp	r3, r2
 8013952:	d031      	beq.n	80139b8 <HAL_DMA_Abort_IT+0xc8>
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	4a53      	ldr	r2, [pc, #332]	@ (8013aa8 <HAL_DMA_Abort_IT+0x1b8>)
 801395a:	4293      	cmp	r3, r2
 801395c:	d02c      	beq.n	80139b8 <HAL_DMA_Abort_IT+0xc8>
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	4a52      	ldr	r2, [pc, #328]	@ (8013aac <HAL_DMA_Abort_IT+0x1bc>)
 8013964:	4293      	cmp	r3, r2
 8013966:	d027      	beq.n	80139b8 <HAL_DMA_Abort_IT+0xc8>
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	4a50      	ldr	r2, [pc, #320]	@ (8013ab0 <HAL_DMA_Abort_IT+0x1c0>)
 801396e:	4293      	cmp	r3, r2
 8013970:	d022      	beq.n	80139b8 <HAL_DMA_Abort_IT+0xc8>
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	4a4f      	ldr	r2, [pc, #316]	@ (8013ab4 <HAL_DMA_Abort_IT+0x1c4>)
 8013978:	4293      	cmp	r3, r2
 801397a:	d01d      	beq.n	80139b8 <HAL_DMA_Abort_IT+0xc8>
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	4a4d      	ldr	r2, [pc, #308]	@ (8013ab8 <HAL_DMA_Abort_IT+0x1c8>)
 8013982:	4293      	cmp	r3, r2
 8013984:	d018      	beq.n	80139b8 <HAL_DMA_Abort_IT+0xc8>
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	4a4c      	ldr	r2, [pc, #304]	@ (8013abc <HAL_DMA_Abort_IT+0x1cc>)
 801398c:	4293      	cmp	r3, r2
 801398e:	d013      	beq.n	80139b8 <HAL_DMA_Abort_IT+0xc8>
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	4a4a      	ldr	r2, [pc, #296]	@ (8013ac0 <HAL_DMA_Abort_IT+0x1d0>)
 8013996:	4293      	cmp	r3, r2
 8013998:	d00e      	beq.n	80139b8 <HAL_DMA_Abort_IT+0xc8>
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	4a49      	ldr	r2, [pc, #292]	@ (8013ac4 <HAL_DMA_Abort_IT+0x1d4>)
 80139a0:	4293      	cmp	r3, r2
 80139a2:	d009      	beq.n	80139b8 <HAL_DMA_Abort_IT+0xc8>
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	4a47      	ldr	r2, [pc, #284]	@ (8013ac8 <HAL_DMA_Abort_IT+0x1d8>)
 80139aa:	4293      	cmp	r3, r2
 80139ac:	d004      	beq.n	80139b8 <HAL_DMA_Abort_IT+0xc8>
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	4a46      	ldr	r2, [pc, #280]	@ (8013acc <HAL_DMA_Abort_IT+0x1dc>)
 80139b4:	4293      	cmp	r3, r2
 80139b6:	d101      	bne.n	80139bc <HAL_DMA_Abort_IT+0xcc>
 80139b8:	2301      	movs	r3, #1
 80139ba:	e000      	b.n	80139be <HAL_DMA_Abort_IT+0xce>
 80139bc:	2300      	movs	r3, #0
 80139be:	2b00      	cmp	r3, #0
 80139c0:	f000 8086 	beq.w	8013ad0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	2204      	movs	r2, #4
 80139c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	4a2f      	ldr	r2, [pc, #188]	@ (8013a90 <HAL_DMA_Abort_IT+0x1a0>)
 80139d2:	4293      	cmp	r3, r2
 80139d4:	d04a      	beq.n	8013a6c <HAL_DMA_Abort_IT+0x17c>
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	4a2e      	ldr	r2, [pc, #184]	@ (8013a94 <HAL_DMA_Abort_IT+0x1a4>)
 80139dc:	4293      	cmp	r3, r2
 80139de:	d045      	beq.n	8013a6c <HAL_DMA_Abort_IT+0x17c>
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	4a2c      	ldr	r2, [pc, #176]	@ (8013a98 <HAL_DMA_Abort_IT+0x1a8>)
 80139e6:	4293      	cmp	r3, r2
 80139e8:	d040      	beq.n	8013a6c <HAL_DMA_Abort_IT+0x17c>
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	4a2b      	ldr	r2, [pc, #172]	@ (8013a9c <HAL_DMA_Abort_IT+0x1ac>)
 80139f0:	4293      	cmp	r3, r2
 80139f2:	d03b      	beq.n	8013a6c <HAL_DMA_Abort_IT+0x17c>
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	4a29      	ldr	r2, [pc, #164]	@ (8013aa0 <HAL_DMA_Abort_IT+0x1b0>)
 80139fa:	4293      	cmp	r3, r2
 80139fc:	d036      	beq.n	8013a6c <HAL_DMA_Abort_IT+0x17c>
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	4a28      	ldr	r2, [pc, #160]	@ (8013aa4 <HAL_DMA_Abort_IT+0x1b4>)
 8013a04:	4293      	cmp	r3, r2
 8013a06:	d031      	beq.n	8013a6c <HAL_DMA_Abort_IT+0x17c>
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	4a26      	ldr	r2, [pc, #152]	@ (8013aa8 <HAL_DMA_Abort_IT+0x1b8>)
 8013a0e:	4293      	cmp	r3, r2
 8013a10:	d02c      	beq.n	8013a6c <HAL_DMA_Abort_IT+0x17c>
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	4a25      	ldr	r2, [pc, #148]	@ (8013aac <HAL_DMA_Abort_IT+0x1bc>)
 8013a18:	4293      	cmp	r3, r2
 8013a1a:	d027      	beq.n	8013a6c <HAL_DMA_Abort_IT+0x17c>
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	4a23      	ldr	r2, [pc, #140]	@ (8013ab0 <HAL_DMA_Abort_IT+0x1c0>)
 8013a22:	4293      	cmp	r3, r2
 8013a24:	d022      	beq.n	8013a6c <HAL_DMA_Abort_IT+0x17c>
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	4a22      	ldr	r2, [pc, #136]	@ (8013ab4 <HAL_DMA_Abort_IT+0x1c4>)
 8013a2c:	4293      	cmp	r3, r2
 8013a2e:	d01d      	beq.n	8013a6c <HAL_DMA_Abort_IT+0x17c>
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	4a20      	ldr	r2, [pc, #128]	@ (8013ab8 <HAL_DMA_Abort_IT+0x1c8>)
 8013a36:	4293      	cmp	r3, r2
 8013a38:	d018      	beq.n	8013a6c <HAL_DMA_Abort_IT+0x17c>
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8013abc <HAL_DMA_Abort_IT+0x1cc>)
 8013a40:	4293      	cmp	r3, r2
 8013a42:	d013      	beq.n	8013a6c <HAL_DMA_Abort_IT+0x17c>
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	4a1d      	ldr	r2, [pc, #116]	@ (8013ac0 <HAL_DMA_Abort_IT+0x1d0>)
 8013a4a:	4293      	cmp	r3, r2
 8013a4c:	d00e      	beq.n	8013a6c <HAL_DMA_Abort_IT+0x17c>
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	4a1c      	ldr	r2, [pc, #112]	@ (8013ac4 <HAL_DMA_Abort_IT+0x1d4>)
 8013a54:	4293      	cmp	r3, r2
 8013a56:	d009      	beq.n	8013a6c <HAL_DMA_Abort_IT+0x17c>
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	4a1a      	ldr	r2, [pc, #104]	@ (8013ac8 <HAL_DMA_Abort_IT+0x1d8>)
 8013a5e:	4293      	cmp	r3, r2
 8013a60:	d004      	beq.n	8013a6c <HAL_DMA_Abort_IT+0x17c>
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	4a19      	ldr	r2, [pc, #100]	@ (8013acc <HAL_DMA_Abort_IT+0x1dc>)
 8013a68:	4293      	cmp	r3, r2
 8013a6a:	d108      	bne.n	8013a7e <HAL_DMA_Abort_IT+0x18e>
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	681a      	ldr	r2, [r3, #0]
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	f022 0201 	bic.w	r2, r2, #1
 8013a7a:	601a      	str	r2, [r3, #0]
 8013a7c:	e178      	b.n	8013d70 <HAL_DMA_Abort_IT+0x480>
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	681a      	ldr	r2, [r3, #0]
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	f022 0201 	bic.w	r2, r2, #1
 8013a8c:	601a      	str	r2, [r3, #0]
 8013a8e:	e16f      	b.n	8013d70 <HAL_DMA_Abort_IT+0x480>
 8013a90:	40020010 	.word	0x40020010
 8013a94:	40020028 	.word	0x40020028
 8013a98:	40020040 	.word	0x40020040
 8013a9c:	40020058 	.word	0x40020058
 8013aa0:	40020070 	.word	0x40020070
 8013aa4:	40020088 	.word	0x40020088
 8013aa8:	400200a0 	.word	0x400200a0
 8013aac:	400200b8 	.word	0x400200b8
 8013ab0:	40020410 	.word	0x40020410
 8013ab4:	40020428 	.word	0x40020428
 8013ab8:	40020440 	.word	0x40020440
 8013abc:	40020458 	.word	0x40020458
 8013ac0:	40020470 	.word	0x40020470
 8013ac4:	40020488 	.word	0x40020488
 8013ac8:	400204a0 	.word	0x400204a0
 8013acc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	681a      	ldr	r2, [r3, #0]
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	f022 020e 	bic.w	r2, r2, #14
 8013ade:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	4a6c      	ldr	r2, [pc, #432]	@ (8013c98 <HAL_DMA_Abort_IT+0x3a8>)
 8013ae6:	4293      	cmp	r3, r2
 8013ae8:	d04a      	beq.n	8013b80 <HAL_DMA_Abort_IT+0x290>
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	4a6b      	ldr	r2, [pc, #428]	@ (8013c9c <HAL_DMA_Abort_IT+0x3ac>)
 8013af0:	4293      	cmp	r3, r2
 8013af2:	d045      	beq.n	8013b80 <HAL_DMA_Abort_IT+0x290>
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	4a69      	ldr	r2, [pc, #420]	@ (8013ca0 <HAL_DMA_Abort_IT+0x3b0>)
 8013afa:	4293      	cmp	r3, r2
 8013afc:	d040      	beq.n	8013b80 <HAL_DMA_Abort_IT+0x290>
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	4a68      	ldr	r2, [pc, #416]	@ (8013ca4 <HAL_DMA_Abort_IT+0x3b4>)
 8013b04:	4293      	cmp	r3, r2
 8013b06:	d03b      	beq.n	8013b80 <HAL_DMA_Abort_IT+0x290>
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	4a66      	ldr	r2, [pc, #408]	@ (8013ca8 <HAL_DMA_Abort_IT+0x3b8>)
 8013b0e:	4293      	cmp	r3, r2
 8013b10:	d036      	beq.n	8013b80 <HAL_DMA_Abort_IT+0x290>
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	4a65      	ldr	r2, [pc, #404]	@ (8013cac <HAL_DMA_Abort_IT+0x3bc>)
 8013b18:	4293      	cmp	r3, r2
 8013b1a:	d031      	beq.n	8013b80 <HAL_DMA_Abort_IT+0x290>
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	4a63      	ldr	r2, [pc, #396]	@ (8013cb0 <HAL_DMA_Abort_IT+0x3c0>)
 8013b22:	4293      	cmp	r3, r2
 8013b24:	d02c      	beq.n	8013b80 <HAL_DMA_Abort_IT+0x290>
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	4a62      	ldr	r2, [pc, #392]	@ (8013cb4 <HAL_DMA_Abort_IT+0x3c4>)
 8013b2c:	4293      	cmp	r3, r2
 8013b2e:	d027      	beq.n	8013b80 <HAL_DMA_Abort_IT+0x290>
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	4a60      	ldr	r2, [pc, #384]	@ (8013cb8 <HAL_DMA_Abort_IT+0x3c8>)
 8013b36:	4293      	cmp	r3, r2
 8013b38:	d022      	beq.n	8013b80 <HAL_DMA_Abort_IT+0x290>
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	4a5f      	ldr	r2, [pc, #380]	@ (8013cbc <HAL_DMA_Abort_IT+0x3cc>)
 8013b40:	4293      	cmp	r3, r2
 8013b42:	d01d      	beq.n	8013b80 <HAL_DMA_Abort_IT+0x290>
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	4a5d      	ldr	r2, [pc, #372]	@ (8013cc0 <HAL_DMA_Abort_IT+0x3d0>)
 8013b4a:	4293      	cmp	r3, r2
 8013b4c:	d018      	beq.n	8013b80 <HAL_DMA_Abort_IT+0x290>
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	4a5c      	ldr	r2, [pc, #368]	@ (8013cc4 <HAL_DMA_Abort_IT+0x3d4>)
 8013b54:	4293      	cmp	r3, r2
 8013b56:	d013      	beq.n	8013b80 <HAL_DMA_Abort_IT+0x290>
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	4a5a      	ldr	r2, [pc, #360]	@ (8013cc8 <HAL_DMA_Abort_IT+0x3d8>)
 8013b5e:	4293      	cmp	r3, r2
 8013b60:	d00e      	beq.n	8013b80 <HAL_DMA_Abort_IT+0x290>
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	4a59      	ldr	r2, [pc, #356]	@ (8013ccc <HAL_DMA_Abort_IT+0x3dc>)
 8013b68:	4293      	cmp	r3, r2
 8013b6a:	d009      	beq.n	8013b80 <HAL_DMA_Abort_IT+0x290>
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	4a57      	ldr	r2, [pc, #348]	@ (8013cd0 <HAL_DMA_Abort_IT+0x3e0>)
 8013b72:	4293      	cmp	r3, r2
 8013b74:	d004      	beq.n	8013b80 <HAL_DMA_Abort_IT+0x290>
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	4a56      	ldr	r2, [pc, #344]	@ (8013cd4 <HAL_DMA_Abort_IT+0x3e4>)
 8013b7c:	4293      	cmp	r3, r2
 8013b7e:	d108      	bne.n	8013b92 <HAL_DMA_Abort_IT+0x2a2>
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	681a      	ldr	r2, [r3, #0]
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	f022 0201 	bic.w	r2, r2, #1
 8013b8e:	601a      	str	r2, [r3, #0]
 8013b90:	e007      	b.n	8013ba2 <HAL_DMA_Abort_IT+0x2b2>
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	681a      	ldr	r2, [r3, #0]
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	f022 0201 	bic.w	r2, r2, #1
 8013ba0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	4a3c      	ldr	r2, [pc, #240]	@ (8013c98 <HAL_DMA_Abort_IT+0x3a8>)
 8013ba8:	4293      	cmp	r3, r2
 8013baa:	d072      	beq.n	8013c92 <HAL_DMA_Abort_IT+0x3a2>
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	4a3a      	ldr	r2, [pc, #232]	@ (8013c9c <HAL_DMA_Abort_IT+0x3ac>)
 8013bb2:	4293      	cmp	r3, r2
 8013bb4:	d06d      	beq.n	8013c92 <HAL_DMA_Abort_IT+0x3a2>
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	4a39      	ldr	r2, [pc, #228]	@ (8013ca0 <HAL_DMA_Abort_IT+0x3b0>)
 8013bbc:	4293      	cmp	r3, r2
 8013bbe:	d068      	beq.n	8013c92 <HAL_DMA_Abort_IT+0x3a2>
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	4a37      	ldr	r2, [pc, #220]	@ (8013ca4 <HAL_DMA_Abort_IT+0x3b4>)
 8013bc6:	4293      	cmp	r3, r2
 8013bc8:	d063      	beq.n	8013c92 <HAL_DMA_Abort_IT+0x3a2>
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	4a36      	ldr	r2, [pc, #216]	@ (8013ca8 <HAL_DMA_Abort_IT+0x3b8>)
 8013bd0:	4293      	cmp	r3, r2
 8013bd2:	d05e      	beq.n	8013c92 <HAL_DMA_Abort_IT+0x3a2>
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	4a34      	ldr	r2, [pc, #208]	@ (8013cac <HAL_DMA_Abort_IT+0x3bc>)
 8013bda:	4293      	cmp	r3, r2
 8013bdc:	d059      	beq.n	8013c92 <HAL_DMA_Abort_IT+0x3a2>
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	4a33      	ldr	r2, [pc, #204]	@ (8013cb0 <HAL_DMA_Abort_IT+0x3c0>)
 8013be4:	4293      	cmp	r3, r2
 8013be6:	d054      	beq.n	8013c92 <HAL_DMA_Abort_IT+0x3a2>
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	4a31      	ldr	r2, [pc, #196]	@ (8013cb4 <HAL_DMA_Abort_IT+0x3c4>)
 8013bee:	4293      	cmp	r3, r2
 8013bf0:	d04f      	beq.n	8013c92 <HAL_DMA_Abort_IT+0x3a2>
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	4a30      	ldr	r2, [pc, #192]	@ (8013cb8 <HAL_DMA_Abort_IT+0x3c8>)
 8013bf8:	4293      	cmp	r3, r2
 8013bfa:	d04a      	beq.n	8013c92 <HAL_DMA_Abort_IT+0x3a2>
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	4a2e      	ldr	r2, [pc, #184]	@ (8013cbc <HAL_DMA_Abort_IT+0x3cc>)
 8013c02:	4293      	cmp	r3, r2
 8013c04:	d045      	beq.n	8013c92 <HAL_DMA_Abort_IT+0x3a2>
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	4a2d      	ldr	r2, [pc, #180]	@ (8013cc0 <HAL_DMA_Abort_IT+0x3d0>)
 8013c0c:	4293      	cmp	r3, r2
 8013c0e:	d040      	beq.n	8013c92 <HAL_DMA_Abort_IT+0x3a2>
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	4a2b      	ldr	r2, [pc, #172]	@ (8013cc4 <HAL_DMA_Abort_IT+0x3d4>)
 8013c16:	4293      	cmp	r3, r2
 8013c18:	d03b      	beq.n	8013c92 <HAL_DMA_Abort_IT+0x3a2>
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8013cc8 <HAL_DMA_Abort_IT+0x3d8>)
 8013c20:	4293      	cmp	r3, r2
 8013c22:	d036      	beq.n	8013c92 <HAL_DMA_Abort_IT+0x3a2>
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	4a28      	ldr	r2, [pc, #160]	@ (8013ccc <HAL_DMA_Abort_IT+0x3dc>)
 8013c2a:	4293      	cmp	r3, r2
 8013c2c:	d031      	beq.n	8013c92 <HAL_DMA_Abort_IT+0x3a2>
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	4a27      	ldr	r2, [pc, #156]	@ (8013cd0 <HAL_DMA_Abort_IT+0x3e0>)
 8013c34:	4293      	cmp	r3, r2
 8013c36:	d02c      	beq.n	8013c92 <HAL_DMA_Abort_IT+0x3a2>
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	4a25      	ldr	r2, [pc, #148]	@ (8013cd4 <HAL_DMA_Abort_IT+0x3e4>)
 8013c3e:	4293      	cmp	r3, r2
 8013c40:	d027      	beq.n	8013c92 <HAL_DMA_Abort_IT+0x3a2>
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	4a24      	ldr	r2, [pc, #144]	@ (8013cd8 <HAL_DMA_Abort_IT+0x3e8>)
 8013c48:	4293      	cmp	r3, r2
 8013c4a:	d022      	beq.n	8013c92 <HAL_DMA_Abort_IT+0x3a2>
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	4a22      	ldr	r2, [pc, #136]	@ (8013cdc <HAL_DMA_Abort_IT+0x3ec>)
 8013c52:	4293      	cmp	r3, r2
 8013c54:	d01d      	beq.n	8013c92 <HAL_DMA_Abort_IT+0x3a2>
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	4a21      	ldr	r2, [pc, #132]	@ (8013ce0 <HAL_DMA_Abort_IT+0x3f0>)
 8013c5c:	4293      	cmp	r3, r2
 8013c5e:	d018      	beq.n	8013c92 <HAL_DMA_Abort_IT+0x3a2>
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	4a1f      	ldr	r2, [pc, #124]	@ (8013ce4 <HAL_DMA_Abort_IT+0x3f4>)
 8013c66:	4293      	cmp	r3, r2
 8013c68:	d013      	beq.n	8013c92 <HAL_DMA_Abort_IT+0x3a2>
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8013ce8 <HAL_DMA_Abort_IT+0x3f8>)
 8013c70:	4293      	cmp	r3, r2
 8013c72:	d00e      	beq.n	8013c92 <HAL_DMA_Abort_IT+0x3a2>
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	4a1c      	ldr	r2, [pc, #112]	@ (8013cec <HAL_DMA_Abort_IT+0x3fc>)
 8013c7a:	4293      	cmp	r3, r2
 8013c7c:	d009      	beq.n	8013c92 <HAL_DMA_Abort_IT+0x3a2>
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	4a1b      	ldr	r2, [pc, #108]	@ (8013cf0 <HAL_DMA_Abort_IT+0x400>)
 8013c84:	4293      	cmp	r3, r2
 8013c86:	d004      	beq.n	8013c92 <HAL_DMA_Abort_IT+0x3a2>
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	4a19      	ldr	r2, [pc, #100]	@ (8013cf4 <HAL_DMA_Abort_IT+0x404>)
 8013c8e:	4293      	cmp	r3, r2
 8013c90:	d132      	bne.n	8013cf8 <HAL_DMA_Abort_IT+0x408>
 8013c92:	2301      	movs	r3, #1
 8013c94:	e031      	b.n	8013cfa <HAL_DMA_Abort_IT+0x40a>
 8013c96:	bf00      	nop
 8013c98:	40020010 	.word	0x40020010
 8013c9c:	40020028 	.word	0x40020028
 8013ca0:	40020040 	.word	0x40020040
 8013ca4:	40020058 	.word	0x40020058
 8013ca8:	40020070 	.word	0x40020070
 8013cac:	40020088 	.word	0x40020088
 8013cb0:	400200a0 	.word	0x400200a0
 8013cb4:	400200b8 	.word	0x400200b8
 8013cb8:	40020410 	.word	0x40020410
 8013cbc:	40020428 	.word	0x40020428
 8013cc0:	40020440 	.word	0x40020440
 8013cc4:	40020458 	.word	0x40020458
 8013cc8:	40020470 	.word	0x40020470
 8013ccc:	40020488 	.word	0x40020488
 8013cd0:	400204a0 	.word	0x400204a0
 8013cd4:	400204b8 	.word	0x400204b8
 8013cd8:	58025408 	.word	0x58025408
 8013cdc:	5802541c 	.word	0x5802541c
 8013ce0:	58025430 	.word	0x58025430
 8013ce4:	58025444 	.word	0x58025444
 8013ce8:	58025458 	.word	0x58025458
 8013cec:	5802546c 	.word	0x5802546c
 8013cf0:	58025480 	.word	0x58025480
 8013cf4:	58025494 	.word	0x58025494
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d028      	beq.n	8013d50 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013d02:	681a      	ldr	r2, [r3, #0]
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013d08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8013d0c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013d12:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013d18:	f003 031f 	and.w	r3, r3, #31
 8013d1c:	2201      	movs	r2, #1
 8013d1e:	409a      	lsls	r2, r3
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013d28:	687a      	ldr	r2, [r7, #4]
 8013d2a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8013d2c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d00c      	beq.n	8013d50 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d3a:	681a      	ldr	r2, [r3, #0]
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8013d44:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013d4a:	687a      	ldr	r2, [r7, #4]
 8013d4c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8013d4e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	2201      	movs	r2, #1
 8013d54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d003      	beq.n	8013d70 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013d6c:	6878      	ldr	r0, [r7, #4]
 8013d6e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8013d70:	2300      	movs	r3, #0
}
 8013d72:	4618      	mov	r0, r3
 8013d74:	3710      	adds	r7, #16
 8013d76:	46bd      	mov	sp, r7
 8013d78:	bd80      	pop	{r7, pc}
 8013d7a:	bf00      	nop

08013d7c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b08a      	sub	sp, #40	@ 0x28
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8013d84:	2300      	movs	r3, #0
 8013d86:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8013d88:	4b67      	ldr	r3, [pc, #412]	@ (8013f28 <HAL_DMA_IRQHandler+0x1ac>)
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	4a67      	ldr	r2, [pc, #412]	@ (8013f2c <HAL_DMA_IRQHandler+0x1b0>)
 8013d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8013d92:	0a9b      	lsrs	r3, r3, #10
 8013d94:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013d9a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013da0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8013da2:	6a3b      	ldr	r3, [r7, #32]
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8013da8:	69fb      	ldr	r3, [r7, #28]
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	4a5f      	ldr	r2, [pc, #380]	@ (8013f30 <HAL_DMA_IRQHandler+0x1b4>)
 8013db4:	4293      	cmp	r3, r2
 8013db6:	d04a      	beq.n	8013e4e <HAL_DMA_IRQHandler+0xd2>
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	4a5d      	ldr	r2, [pc, #372]	@ (8013f34 <HAL_DMA_IRQHandler+0x1b8>)
 8013dbe:	4293      	cmp	r3, r2
 8013dc0:	d045      	beq.n	8013e4e <HAL_DMA_IRQHandler+0xd2>
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	4a5c      	ldr	r2, [pc, #368]	@ (8013f38 <HAL_DMA_IRQHandler+0x1bc>)
 8013dc8:	4293      	cmp	r3, r2
 8013dca:	d040      	beq.n	8013e4e <HAL_DMA_IRQHandler+0xd2>
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	4a5a      	ldr	r2, [pc, #360]	@ (8013f3c <HAL_DMA_IRQHandler+0x1c0>)
 8013dd2:	4293      	cmp	r3, r2
 8013dd4:	d03b      	beq.n	8013e4e <HAL_DMA_IRQHandler+0xd2>
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	4a59      	ldr	r2, [pc, #356]	@ (8013f40 <HAL_DMA_IRQHandler+0x1c4>)
 8013ddc:	4293      	cmp	r3, r2
 8013dde:	d036      	beq.n	8013e4e <HAL_DMA_IRQHandler+0xd2>
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	4a57      	ldr	r2, [pc, #348]	@ (8013f44 <HAL_DMA_IRQHandler+0x1c8>)
 8013de6:	4293      	cmp	r3, r2
 8013de8:	d031      	beq.n	8013e4e <HAL_DMA_IRQHandler+0xd2>
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	4a56      	ldr	r2, [pc, #344]	@ (8013f48 <HAL_DMA_IRQHandler+0x1cc>)
 8013df0:	4293      	cmp	r3, r2
 8013df2:	d02c      	beq.n	8013e4e <HAL_DMA_IRQHandler+0xd2>
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	4a54      	ldr	r2, [pc, #336]	@ (8013f4c <HAL_DMA_IRQHandler+0x1d0>)
 8013dfa:	4293      	cmp	r3, r2
 8013dfc:	d027      	beq.n	8013e4e <HAL_DMA_IRQHandler+0xd2>
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	4a53      	ldr	r2, [pc, #332]	@ (8013f50 <HAL_DMA_IRQHandler+0x1d4>)
 8013e04:	4293      	cmp	r3, r2
 8013e06:	d022      	beq.n	8013e4e <HAL_DMA_IRQHandler+0xd2>
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	4a51      	ldr	r2, [pc, #324]	@ (8013f54 <HAL_DMA_IRQHandler+0x1d8>)
 8013e0e:	4293      	cmp	r3, r2
 8013e10:	d01d      	beq.n	8013e4e <HAL_DMA_IRQHandler+0xd2>
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	4a50      	ldr	r2, [pc, #320]	@ (8013f58 <HAL_DMA_IRQHandler+0x1dc>)
 8013e18:	4293      	cmp	r3, r2
 8013e1a:	d018      	beq.n	8013e4e <HAL_DMA_IRQHandler+0xd2>
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	4a4e      	ldr	r2, [pc, #312]	@ (8013f5c <HAL_DMA_IRQHandler+0x1e0>)
 8013e22:	4293      	cmp	r3, r2
 8013e24:	d013      	beq.n	8013e4e <HAL_DMA_IRQHandler+0xd2>
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	4a4d      	ldr	r2, [pc, #308]	@ (8013f60 <HAL_DMA_IRQHandler+0x1e4>)
 8013e2c:	4293      	cmp	r3, r2
 8013e2e:	d00e      	beq.n	8013e4e <HAL_DMA_IRQHandler+0xd2>
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	4a4b      	ldr	r2, [pc, #300]	@ (8013f64 <HAL_DMA_IRQHandler+0x1e8>)
 8013e36:	4293      	cmp	r3, r2
 8013e38:	d009      	beq.n	8013e4e <HAL_DMA_IRQHandler+0xd2>
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	4a4a      	ldr	r2, [pc, #296]	@ (8013f68 <HAL_DMA_IRQHandler+0x1ec>)
 8013e40:	4293      	cmp	r3, r2
 8013e42:	d004      	beq.n	8013e4e <HAL_DMA_IRQHandler+0xd2>
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	4a48      	ldr	r2, [pc, #288]	@ (8013f6c <HAL_DMA_IRQHandler+0x1f0>)
 8013e4a:	4293      	cmp	r3, r2
 8013e4c:	d101      	bne.n	8013e52 <HAL_DMA_IRQHandler+0xd6>
 8013e4e:	2301      	movs	r3, #1
 8013e50:	e000      	b.n	8013e54 <HAL_DMA_IRQHandler+0xd8>
 8013e52:	2300      	movs	r3, #0
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	f000 842b 	beq.w	80146b0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013e5e:	f003 031f 	and.w	r3, r3, #31
 8013e62:	2208      	movs	r2, #8
 8013e64:	409a      	lsls	r2, r3
 8013e66:	69bb      	ldr	r3, [r7, #24]
 8013e68:	4013      	ands	r3, r2
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	f000 80a2 	beq.w	8013fb4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	4a2e      	ldr	r2, [pc, #184]	@ (8013f30 <HAL_DMA_IRQHandler+0x1b4>)
 8013e76:	4293      	cmp	r3, r2
 8013e78:	d04a      	beq.n	8013f10 <HAL_DMA_IRQHandler+0x194>
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	4a2d      	ldr	r2, [pc, #180]	@ (8013f34 <HAL_DMA_IRQHandler+0x1b8>)
 8013e80:	4293      	cmp	r3, r2
 8013e82:	d045      	beq.n	8013f10 <HAL_DMA_IRQHandler+0x194>
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	4a2b      	ldr	r2, [pc, #172]	@ (8013f38 <HAL_DMA_IRQHandler+0x1bc>)
 8013e8a:	4293      	cmp	r3, r2
 8013e8c:	d040      	beq.n	8013f10 <HAL_DMA_IRQHandler+0x194>
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	4a2a      	ldr	r2, [pc, #168]	@ (8013f3c <HAL_DMA_IRQHandler+0x1c0>)
 8013e94:	4293      	cmp	r3, r2
 8013e96:	d03b      	beq.n	8013f10 <HAL_DMA_IRQHandler+0x194>
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	4a28      	ldr	r2, [pc, #160]	@ (8013f40 <HAL_DMA_IRQHandler+0x1c4>)
 8013e9e:	4293      	cmp	r3, r2
 8013ea0:	d036      	beq.n	8013f10 <HAL_DMA_IRQHandler+0x194>
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	4a27      	ldr	r2, [pc, #156]	@ (8013f44 <HAL_DMA_IRQHandler+0x1c8>)
 8013ea8:	4293      	cmp	r3, r2
 8013eaa:	d031      	beq.n	8013f10 <HAL_DMA_IRQHandler+0x194>
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	4a25      	ldr	r2, [pc, #148]	@ (8013f48 <HAL_DMA_IRQHandler+0x1cc>)
 8013eb2:	4293      	cmp	r3, r2
 8013eb4:	d02c      	beq.n	8013f10 <HAL_DMA_IRQHandler+0x194>
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	4a24      	ldr	r2, [pc, #144]	@ (8013f4c <HAL_DMA_IRQHandler+0x1d0>)
 8013ebc:	4293      	cmp	r3, r2
 8013ebe:	d027      	beq.n	8013f10 <HAL_DMA_IRQHandler+0x194>
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	4a22      	ldr	r2, [pc, #136]	@ (8013f50 <HAL_DMA_IRQHandler+0x1d4>)
 8013ec6:	4293      	cmp	r3, r2
 8013ec8:	d022      	beq.n	8013f10 <HAL_DMA_IRQHandler+0x194>
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	4a21      	ldr	r2, [pc, #132]	@ (8013f54 <HAL_DMA_IRQHandler+0x1d8>)
 8013ed0:	4293      	cmp	r3, r2
 8013ed2:	d01d      	beq.n	8013f10 <HAL_DMA_IRQHandler+0x194>
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	4a1f      	ldr	r2, [pc, #124]	@ (8013f58 <HAL_DMA_IRQHandler+0x1dc>)
 8013eda:	4293      	cmp	r3, r2
 8013edc:	d018      	beq.n	8013f10 <HAL_DMA_IRQHandler+0x194>
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8013f5c <HAL_DMA_IRQHandler+0x1e0>)
 8013ee4:	4293      	cmp	r3, r2
 8013ee6:	d013      	beq.n	8013f10 <HAL_DMA_IRQHandler+0x194>
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	4a1c      	ldr	r2, [pc, #112]	@ (8013f60 <HAL_DMA_IRQHandler+0x1e4>)
 8013eee:	4293      	cmp	r3, r2
 8013ef0:	d00e      	beq.n	8013f10 <HAL_DMA_IRQHandler+0x194>
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8013f64 <HAL_DMA_IRQHandler+0x1e8>)
 8013ef8:	4293      	cmp	r3, r2
 8013efa:	d009      	beq.n	8013f10 <HAL_DMA_IRQHandler+0x194>
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	4a19      	ldr	r2, [pc, #100]	@ (8013f68 <HAL_DMA_IRQHandler+0x1ec>)
 8013f02:	4293      	cmp	r3, r2
 8013f04:	d004      	beq.n	8013f10 <HAL_DMA_IRQHandler+0x194>
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	4a18      	ldr	r2, [pc, #96]	@ (8013f6c <HAL_DMA_IRQHandler+0x1f0>)
 8013f0c:	4293      	cmp	r3, r2
 8013f0e:	d12f      	bne.n	8013f70 <HAL_DMA_IRQHandler+0x1f4>
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	f003 0304 	and.w	r3, r3, #4
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	bf14      	ite	ne
 8013f1e:	2301      	movne	r3, #1
 8013f20:	2300      	moveq	r3, #0
 8013f22:	b2db      	uxtb	r3, r3
 8013f24:	e02e      	b.n	8013f84 <HAL_DMA_IRQHandler+0x208>
 8013f26:	bf00      	nop
 8013f28:	240008ac 	.word	0x240008ac
 8013f2c:	1b4e81b5 	.word	0x1b4e81b5
 8013f30:	40020010 	.word	0x40020010
 8013f34:	40020028 	.word	0x40020028
 8013f38:	40020040 	.word	0x40020040
 8013f3c:	40020058 	.word	0x40020058
 8013f40:	40020070 	.word	0x40020070
 8013f44:	40020088 	.word	0x40020088
 8013f48:	400200a0 	.word	0x400200a0
 8013f4c:	400200b8 	.word	0x400200b8
 8013f50:	40020410 	.word	0x40020410
 8013f54:	40020428 	.word	0x40020428
 8013f58:	40020440 	.word	0x40020440
 8013f5c:	40020458 	.word	0x40020458
 8013f60:	40020470 	.word	0x40020470
 8013f64:	40020488 	.word	0x40020488
 8013f68:	400204a0 	.word	0x400204a0
 8013f6c:	400204b8 	.word	0x400204b8
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	f003 0308 	and.w	r3, r3, #8
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	bf14      	ite	ne
 8013f7e:	2301      	movne	r3, #1
 8013f80:	2300      	moveq	r3, #0
 8013f82:	b2db      	uxtb	r3, r3
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d015      	beq.n	8013fb4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	681a      	ldr	r2, [r3, #0]
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	f022 0204 	bic.w	r2, r2, #4
 8013f96:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013f9c:	f003 031f 	and.w	r3, r3, #31
 8013fa0:	2208      	movs	r2, #8
 8013fa2:	409a      	lsls	r2, r3
 8013fa4:	6a3b      	ldr	r3, [r7, #32]
 8013fa6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013fac:	f043 0201 	orr.w	r2, r3, #1
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013fb8:	f003 031f 	and.w	r3, r3, #31
 8013fbc:	69ba      	ldr	r2, [r7, #24]
 8013fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8013fc2:	f003 0301 	and.w	r3, r3, #1
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d06e      	beq.n	80140a8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	4a69      	ldr	r2, [pc, #420]	@ (8014174 <HAL_DMA_IRQHandler+0x3f8>)
 8013fd0:	4293      	cmp	r3, r2
 8013fd2:	d04a      	beq.n	801406a <HAL_DMA_IRQHandler+0x2ee>
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	4a67      	ldr	r2, [pc, #412]	@ (8014178 <HAL_DMA_IRQHandler+0x3fc>)
 8013fda:	4293      	cmp	r3, r2
 8013fdc:	d045      	beq.n	801406a <HAL_DMA_IRQHandler+0x2ee>
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	4a66      	ldr	r2, [pc, #408]	@ (801417c <HAL_DMA_IRQHandler+0x400>)
 8013fe4:	4293      	cmp	r3, r2
 8013fe6:	d040      	beq.n	801406a <HAL_DMA_IRQHandler+0x2ee>
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	4a64      	ldr	r2, [pc, #400]	@ (8014180 <HAL_DMA_IRQHandler+0x404>)
 8013fee:	4293      	cmp	r3, r2
 8013ff0:	d03b      	beq.n	801406a <HAL_DMA_IRQHandler+0x2ee>
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	4a63      	ldr	r2, [pc, #396]	@ (8014184 <HAL_DMA_IRQHandler+0x408>)
 8013ff8:	4293      	cmp	r3, r2
 8013ffa:	d036      	beq.n	801406a <HAL_DMA_IRQHandler+0x2ee>
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	4a61      	ldr	r2, [pc, #388]	@ (8014188 <HAL_DMA_IRQHandler+0x40c>)
 8014002:	4293      	cmp	r3, r2
 8014004:	d031      	beq.n	801406a <HAL_DMA_IRQHandler+0x2ee>
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	4a60      	ldr	r2, [pc, #384]	@ (801418c <HAL_DMA_IRQHandler+0x410>)
 801400c:	4293      	cmp	r3, r2
 801400e:	d02c      	beq.n	801406a <HAL_DMA_IRQHandler+0x2ee>
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	4a5e      	ldr	r2, [pc, #376]	@ (8014190 <HAL_DMA_IRQHandler+0x414>)
 8014016:	4293      	cmp	r3, r2
 8014018:	d027      	beq.n	801406a <HAL_DMA_IRQHandler+0x2ee>
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	4a5d      	ldr	r2, [pc, #372]	@ (8014194 <HAL_DMA_IRQHandler+0x418>)
 8014020:	4293      	cmp	r3, r2
 8014022:	d022      	beq.n	801406a <HAL_DMA_IRQHandler+0x2ee>
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	4a5b      	ldr	r2, [pc, #364]	@ (8014198 <HAL_DMA_IRQHandler+0x41c>)
 801402a:	4293      	cmp	r3, r2
 801402c:	d01d      	beq.n	801406a <HAL_DMA_IRQHandler+0x2ee>
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	4a5a      	ldr	r2, [pc, #360]	@ (801419c <HAL_DMA_IRQHandler+0x420>)
 8014034:	4293      	cmp	r3, r2
 8014036:	d018      	beq.n	801406a <HAL_DMA_IRQHandler+0x2ee>
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	4a58      	ldr	r2, [pc, #352]	@ (80141a0 <HAL_DMA_IRQHandler+0x424>)
 801403e:	4293      	cmp	r3, r2
 8014040:	d013      	beq.n	801406a <HAL_DMA_IRQHandler+0x2ee>
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	4a57      	ldr	r2, [pc, #348]	@ (80141a4 <HAL_DMA_IRQHandler+0x428>)
 8014048:	4293      	cmp	r3, r2
 801404a:	d00e      	beq.n	801406a <HAL_DMA_IRQHandler+0x2ee>
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	4a55      	ldr	r2, [pc, #340]	@ (80141a8 <HAL_DMA_IRQHandler+0x42c>)
 8014052:	4293      	cmp	r3, r2
 8014054:	d009      	beq.n	801406a <HAL_DMA_IRQHandler+0x2ee>
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	4a54      	ldr	r2, [pc, #336]	@ (80141ac <HAL_DMA_IRQHandler+0x430>)
 801405c:	4293      	cmp	r3, r2
 801405e:	d004      	beq.n	801406a <HAL_DMA_IRQHandler+0x2ee>
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	4a52      	ldr	r2, [pc, #328]	@ (80141b0 <HAL_DMA_IRQHandler+0x434>)
 8014066:	4293      	cmp	r3, r2
 8014068:	d10a      	bne.n	8014080 <HAL_DMA_IRQHandler+0x304>
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	695b      	ldr	r3, [r3, #20]
 8014070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014074:	2b00      	cmp	r3, #0
 8014076:	bf14      	ite	ne
 8014078:	2301      	movne	r3, #1
 801407a:	2300      	moveq	r3, #0
 801407c:	b2db      	uxtb	r3, r3
 801407e:	e003      	b.n	8014088 <HAL_DMA_IRQHandler+0x30c>
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	2300      	movs	r3, #0
 8014088:	2b00      	cmp	r3, #0
 801408a:	d00d      	beq.n	80140a8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014090:	f003 031f 	and.w	r3, r3, #31
 8014094:	2201      	movs	r2, #1
 8014096:	409a      	lsls	r2, r3
 8014098:	6a3b      	ldr	r3, [r7, #32]
 801409a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80140a0:	f043 0202 	orr.w	r2, r3, #2
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80140ac:	f003 031f 	and.w	r3, r3, #31
 80140b0:	2204      	movs	r2, #4
 80140b2:	409a      	lsls	r2, r3
 80140b4:	69bb      	ldr	r3, [r7, #24]
 80140b6:	4013      	ands	r3, r2
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	f000 808f 	beq.w	80141dc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	4a2c      	ldr	r2, [pc, #176]	@ (8014174 <HAL_DMA_IRQHandler+0x3f8>)
 80140c4:	4293      	cmp	r3, r2
 80140c6:	d04a      	beq.n	801415e <HAL_DMA_IRQHandler+0x3e2>
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	4a2a      	ldr	r2, [pc, #168]	@ (8014178 <HAL_DMA_IRQHandler+0x3fc>)
 80140ce:	4293      	cmp	r3, r2
 80140d0:	d045      	beq.n	801415e <HAL_DMA_IRQHandler+0x3e2>
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	4a29      	ldr	r2, [pc, #164]	@ (801417c <HAL_DMA_IRQHandler+0x400>)
 80140d8:	4293      	cmp	r3, r2
 80140da:	d040      	beq.n	801415e <HAL_DMA_IRQHandler+0x3e2>
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	4a27      	ldr	r2, [pc, #156]	@ (8014180 <HAL_DMA_IRQHandler+0x404>)
 80140e2:	4293      	cmp	r3, r2
 80140e4:	d03b      	beq.n	801415e <HAL_DMA_IRQHandler+0x3e2>
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	4a26      	ldr	r2, [pc, #152]	@ (8014184 <HAL_DMA_IRQHandler+0x408>)
 80140ec:	4293      	cmp	r3, r2
 80140ee:	d036      	beq.n	801415e <HAL_DMA_IRQHandler+0x3e2>
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	4a24      	ldr	r2, [pc, #144]	@ (8014188 <HAL_DMA_IRQHandler+0x40c>)
 80140f6:	4293      	cmp	r3, r2
 80140f8:	d031      	beq.n	801415e <HAL_DMA_IRQHandler+0x3e2>
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	4a23      	ldr	r2, [pc, #140]	@ (801418c <HAL_DMA_IRQHandler+0x410>)
 8014100:	4293      	cmp	r3, r2
 8014102:	d02c      	beq.n	801415e <HAL_DMA_IRQHandler+0x3e2>
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	4a21      	ldr	r2, [pc, #132]	@ (8014190 <HAL_DMA_IRQHandler+0x414>)
 801410a:	4293      	cmp	r3, r2
 801410c:	d027      	beq.n	801415e <HAL_DMA_IRQHandler+0x3e2>
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	4a20      	ldr	r2, [pc, #128]	@ (8014194 <HAL_DMA_IRQHandler+0x418>)
 8014114:	4293      	cmp	r3, r2
 8014116:	d022      	beq.n	801415e <HAL_DMA_IRQHandler+0x3e2>
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	4a1e      	ldr	r2, [pc, #120]	@ (8014198 <HAL_DMA_IRQHandler+0x41c>)
 801411e:	4293      	cmp	r3, r2
 8014120:	d01d      	beq.n	801415e <HAL_DMA_IRQHandler+0x3e2>
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	4a1d      	ldr	r2, [pc, #116]	@ (801419c <HAL_DMA_IRQHandler+0x420>)
 8014128:	4293      	cmp	r3, r2
 801412a:	d018      	beq.n	801415e <HAL_DMA_IRQHandler+0x3e2>
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	4a1b      	ldr	r2, [pc, #108]	@ (80141a0 <HAL_DMA_IRQHandler+0x424>)
 8014132:	4293      	cmp	r3, r2
 8014134:	d013      	beq.n	801415e <HAL_DMA_IRQHandler+0x3e2>
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	4a1a      	ldr	r2, [pc, #104]	@ (80141a4 <HAL_DMA_IRQHandler+0x428>)
 801413c:	4293      	cmp	r3, r2
 801413e:	d00e      	beq.n	801415e <HAL_DMA_IRQHandler+0x3e2>
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	4a18      	ldr	r2, [pc, #96]	@ (80141a8 <HAL_DMA_IRQHandler+0x42c>)
 8014146:	4293      	cmp	r3, r2
 8014148:	d009      	beq.n	801415e <HAL_DMA_IRQHandler+0x3e2>
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	4a17      	ldr	r2, [pc, #92]	@ (80141ac <HAL_DMA_IRQHandler+0x430>)
 8014150:	4293      	cmp	r3, r2
 8014152:	d004      	beq.n	801415e <HAL_DMA_IRQHandler+0x3e2>
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	4a15      	ldr	r2, [pc, #84]	@ (80141b0 <HAL_DMA_IRQHandler+0x434>)
 801415a:	4293      	cmp	r3, r2
 801415c:	d12a      	bne.n	80141b4 <HAL_DMA_IRQHandler+0x438>
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	f003 0302 	and.w	r3, r3, #2
 8014168:	2b00      	cmp	r3, #0
 801416a:	bf14      	ite	ne
 801416c:	2301      	movne	r3, #1
 801416e:	2300      	moveq	r3, #0
 8014170:	b2db      	uxtb	r3, r3
 8014172:	e023      	b.n	80141bc <HAL_DMA_IRQHandler+0x440>
 8014174:	40020010 	.word	0x40020010
 8014178:	40020028 	.word	0x40020028
 801417c:	40020040 	.word	0x40020040
 8014180:	40020058 	.word	0x40020058
 8014184:	40020070 	.word	0x40020070
 8014188:	40020088 	.word	0x40020088
 801418c:	400200a0 	.word	0x400200a0
 8014190:	400200b8 	.word	0x400200b8
 8014194:	40020410 	.word	0x40020410
 8014198:	40020428 	.word	0x40020428
 801419c:	40020440 	.word	0x40020440
 80141a0:	40020458 	.word	0x40020458
 80141a4:	40020470 	.word	0x40020470
 80141a8:	40020488 	.word	0x40020488
 80141ac:	400204a0 	.word	0x400204a0
 80141b0:	400204b8 	.word	0x400204b8
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	2300      	movs	r3, #0
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d00d      	beq.n	80141dc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80141c4:	f003 031f 	and.w	r3, r3, #31
 80141c8:	2204      	movs	r2, #4
 80141ca:	409a      	lsls	r2, r3
 80141cc:	6a3b      	ldr	r3, [r7, #32]
 80141ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80141d4:	f043 0204 	orr.w	r2, r3, #4
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80141e0:	f003 031f 	and.w	r3, r3, #31
 80141e4:	2210      	movs	r2, #16
 80141e6:	409a      	lsls	r2, r3
 80141e8:	69bb      	ldr	r3, [r7, #24]
 80141ea:	4013      	ands	r3, r2
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	f000 80a6 	beq.w	801433e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	4a85      	ldr	r2, [pc, #532]	@ (801440c <HAL_DMA_IRQHandler+0x690>)
 80141f8:	4293      	cmp	r3, r2
 80141fa:	d04a      	beq.n	8014292 <HAL_DMA_IRQHandler+0x516>
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	4a83      	ldr	r2, [pc, #524]	@ (8014410 <HAL_DMA_IRQHandler+0x694>)
 8014202:	4293      	cmp	r3, r2
 8014204:	d045      	beq.n	8014292 <HAL_DMA_IRQHandler+0x516>
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	4a82      	ldr	r2, [pc, #520]	@ (8014414 <HAL_DMA_IRQHandler+0x698>)
 801420c:	4293      	cmp	r3, r2
 801420e:	d040      	beq.n	8014292 <HAL_DMA_IRQHandler+0x516>
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	4a80      	ldr	r2, [pc, #512]	@ (8014418 <HAL_DMA_IRQHandler+0x69c>)
 8014216:	4293      	cmp	r3, r2
 8014218:	d03b      	beq.n	8014292 <HAL_DMA_IRQHandler+0x516>
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	4a7f      	ldr	r2, [pc, #508]	@ (801441c <HAL_DMA_IRQHandler+0x6a0>)
 8014220:	4293      	cmp	r3, r2
 8014222:	d036      	beq.n	8014292 <HAL_DMA_IRQHandler+0x516>
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	4a7d      	ldr	r2, [pc, #500]	@ (8014420 <HAL_DMA_IRQHandler+0x6a4>)
 801422a:	4293      	cmp	r3, r2
 801422c:	d031      	beq.n	8014292 <HAL_DMA_IRQHandler+0x516>
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	4a7c      	ldr	r2, [pc, #496]	@ (8014424 <HAL_DMA_IRQHandler+0x6a8>)
 8014234:	4293      	cmp	r3, r2
 8014236:	d02c      	beq.n	8014292 <HAL_DMA_IRQHandler+0x516>
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	4a7a      	ldr	r2, [pc, #488]	@ (8014428 <HAL_DMA_IRQHandler+0x6ac>)
 801423e:	4293      	cmp	r3, r2
 8014240:	d027      	beq.n	8014292 <HAL_DMA_IRQHandler+0x516>
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	4a79      	ldr	r2, [pc, #484]	@ (801442c <HAL_DMA_IRQHandler+0x6b0>)
 8014248:	4293      	cmp	r3, r2
 801424a:	d022      	beq.n	8014292 <HAL_DMA_IRQHandler+0x516>
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	4a77      	ldr	r2, [pc, #476]	@ (8014430 <HAL_DMA_IRQHandler+0x6b4>)
 8014252:	4293      	cmp	r3, r2
 8014254:	d01d      	beq.n	8014292 <HAL_DMA_IRQHandler+0x516>
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	4a76      	ldr	r2, [pc, #472]	@ (8014434 <HAL_DMA_IRQHandler+0x6b8>)
 801425c:	4293      	cmp	r3, r2
 801425e:	d018      	beq.n	8014292 <HAL_DMA_IRQHandler+0x516>
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	4a74      	ldr	r2, [pc, #464]	@ (8014438 <HAL_DMA_IRQHandler+0x6bc>)
 8014266:	4293      	cmp	r3, r2
 8014268:	d013      	beq.n	8014292 <HAL_DMA_IRQHandler+0x516>
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	4a73      	ldr	r2, [pc, #460]	@ (801443c <HAL_DMA_IRQHandler+0x6c0>)
 8014270:	4293      	cmp	r3, r2
 8014272:	d00e      	beq.n	8014292 <HAL_DMA_IRQHandler+0x516>
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	4a71      	ldr	r2, [pc, #452]	@ (8014440 <HAL_DMA_IRQHandler+0x6c4>)
 801427a:	4293      	cmp	r3, r2
 801427c:	d009      	beq.n	8014292 <HAL_DMA_IRQHandler+0x516>
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	4a70      	ldr	r2, [pc, #448]	@ (8014444 <HAL_DMA_IRQHandler+0x6c8>)
 8014284:	4293      	cmp	r3, r2
 8014286:	d004      	beq.n	8014292 <HAL_DMA_IRQHandler+0x516>
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	4a6e      	ldr	r2, [pc, #440]	@ (8014448 <HAL_DMA_IRQHandler+0x6cc>)
 801428e:	4293      	cmp	r3, r2
 8014290:	d10a      	bne.n	80142a8 <HAL_DMA_IRQHandler+0x52c>
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	f003 0308 	and.w	r3, r3, #8
 801429c:	2b00      	cmp	r3, #0
 801429e:	bf14      	ite	ne
 80142a0:	2301      	movne	r3, #1
 80142a2:	2300      	moveq	r3, #0
 80142a4:	b2db      	uxtb	r3, r3
 80142a6:	e009      	b.n	80142bc <HAL_DMA_IRQHandler+0x540>
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	f003 0304 	and.w	r3, r3, #4
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	bf14      	ite	ne
 80142b6:	2301      	movne	r3, #1
 80142b8:	2300      	moveq	r3, #0
 80142ba:	b2db      	uxtb	r3, r3
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d03e      	beq.n	801433e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80142c4:	f003 031f 	and.w	r3, r3, #31
 80142c8:	2210      	movs	r2, #16
 80142ca:	409a      	lsls	r2, r3
 80142cc:	6a3b      	ldr	r3, [r7, #32]
 80142ce:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d018      	beq.n	8014310 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d108      	bne.n	80142fe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d024      	beq.n	801433e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80142f8:	6878      	ldr	r0, [r7, #4]
 80142fa:	4798      	blx	r3
 80142fc:	e01f      	b.n	801433e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014302:	2b00      	cmp	r3, #0
 8014304:	d01b      	beq.n	801433e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801430a:	6878      	ldr	r0, [r7, #4]
 801430c:	4798      	blx	r3
 801430e:	e016      	b.n	801433e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801431a:	2b00      	cmp	r3, #0
 801431c:	d107      	bne.n	801432e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	681a      	ldr	r2, [r3, #0]
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	f022 0208 	bic.w	r2, r2, #8
 801432c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014332:	2b00      	cmp	r3, #0
 8014334:	d003      	beq.n	801433e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801433a:	6878      	ldr	r0, [r7, #4]
 801433c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014342:	f003 031f 	and.w	r3, r3, #31
 8014346:	2220      	movs	r2, #32
 8014348:	409a      	lsls	r2, r3
 801434a:	69bb      	ldr	r3, [r7, #24]
 801434c:	4013      	ands	r3, r2
 801434e:	2b00      	cmp	r3, #0
 8014350:	f000 8110 	beq.w	8014574 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	4a2c      	ldr	r2, [pc, #176]	@ (801440c <HAL_DMA_IRQHandler+0x690>)
 801435a:	4293      	cmp	r3, r2
 801435c:	d04a      	beq.n	80143f4 <HAL_DMA_IRQHandler+0x678>
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	4a2b      	ldr	r2, [pc, #172]	@ (8014410 <HAL_DMA_IRQHandler+0x694>)
 8014364:	4293      	cmp	r3, r2
 8014366:	d045      	beq.n	80143f4 <HAL_DMA_IRQHandler+0x678>
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	4a29      	ldr	r2, [pc, #164]	@ (8014414 <HAL_DMA_IRQHandler+0x698>)
 801436e:	4293      	cmp	r3, r2
 8014370:	d040      	beq.n	80143f4 <HAL_DMA_IRQHandler+0x678>
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	4a28      	ldr	r2, [pc, #160]	@ (8014418 <HAL_DMA_IRQHandler+0x69c>)
 8014378:	4293      	cmp	r3, r2
 801437a:	d03b      	beq.n	80143f4 <HAL_DMA_IRQHandler+0x678>
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	4a26      	ldr	r2, [pc, #152]	@ (801441c <HAL_DMA_IRQHandler+0x6a0>)
 8014382:	4293      	cmp	r3, r2
 8014384:	d036      	beq.n	80143f4 <HAL_DMA_IRQHandler+0x678>
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	4a25      	ldr	r2, [pc, #148]	@ (8014420 <HAL_DMA_IRQHandler+0x6a4>)
 801438c:	4293      	cmp	r3, r2
 801438e:	d031      	beq.n	80143f4 <HAL_DMA_IRQHandler+0x678>
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	4a23      	ldr	r2, [pc, #140]	@ (8014424 <HAL_DMA_IRQHandler+0x6a8>)
 8014396:	4293      	cmp	r3, r2
 8014398:	d02c      	beq.n	80143f4 <HAL_DMA_IRQHandler+0x678>
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	4a22      	ldr	r2, [pc, #136]	@ (8014428 <HAL_DMA_IRQHandler+0x6ac>)
 80143a0:	4293      	cmp	r3, r2
 80143a2:	d027      	beq.n	80143f4 <HAL_DMA_IRQHandler+0x678>
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	4a20      	ldr	r2, [pc, #128]	@ (801442c <HAL_DMA_IRQHandler+0x6b0>)
 80143aa:	4293      	cmp	r3, r2
 80143ac:	d022      	beq.n	80143f4 <HAL_DMA_IRQHandler+0x678>
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	4a1f      	ldr	r2, [pc, #124]	@ (8014430 <HAL_DMA_IRQHandler+0x6b4>)
 80143b4:	4293      	cmp	r3, r2
 80143b6:	d01d      	beq.n	80143f4 <HAL_DMA_IRQHandler+0x678>
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	4a1d      	ldr	r2, [pc, #116]	@ (8014434 <HAL_DMA_IRQHandler+0x6b8>)
 80143be:	4293      	cmp	r3, r2
 80143c0:	d018      	beq.n	80143f4 <HAL_DMA_IRQHandler+0x678>
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	4a1c      	ldr	r2, [pc, #112]	@ (8014438 <HAL_DMA_IRQHandler+0x6bc>)
 80143c8:	4293      	cmp	r3, r2
 80143ca:	d013      	beq.n	80143f4 <HAL_DMA_IRQHandler+0x678>
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	4a1a      	ldr	r2, [pc, #104]	@ (801443c <HAL_DMA_IRQHandler+0x6c0>)
 80143d2:	4293      	cmp	r3, r2
 80143d4:	d00e      	beq.n	80143f4 <HAL_DMA_IRQHandler+0x678>
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	4a19      	ldr	r2, [pc, #100]	@ (8014440 <HAL_DMA_IRQHandler+0x6c4>)
 80143dc:	4293      	cmp	r3, r2
 80143de:	d009      	beq.n	80143f4 <HAL_DMA_IRQHandler+0x678>
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	4a17      	ldr	r2, [pc, #92]	@ (8014444 <HAL_DMA_IRQHandler+0x6c8>)
 80143e6:	4293      	cmp	r3, r2
 80143e8:	d004      	beq.n	80143f4 <HAL_DMA_IRQHandler+0x678>
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	4a16      	ldr	r2, [pc, #88]	@ (8014448 <HAL_DMA_IRQHandler+0x6cc>)
 80143f0:	4293      	cmp	r3, r2
 80143f2:	d12b      	bne.n	801444c <HAL_DMA_IRQHandler+0x6d0>
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	f003 0310 	and.w	r3, r3, #16
 80143fe:	2b00      	cmp	r3, #0
 8014400:	bf14      	ite	ne
 8014402:	2301      	movne	r3, #1
 8014404:	2300      	moveq	r3, #0
 8014406:	b2db      	uxtb	r3, r3
 8014408:	e02a      	b.n	8014460 <HAL_DMA_IRQHandler+0x6e4>
 801440a:	bf00      	nop
 801440c:	40020010 	.word	0x40020010
 8014410:	40020028 	.word	0x40020028
 8014414:	40020040 	.word	0x40020040
 8014418:	40020058 	.word	0x40020058
 801441c:	40020070 	.word	0x40020070
 8014420:	40020088 	.word	0x40020088
 8014424:	400200a0 	.word	0x400200a0
 8014428:	400200b8 	.word	0x400200b8
 801442c:	40020410 	.word	0x40020410
 8014430:	40020428 	.word	0x40020428
 8014434:	40020440 	.word	0x40020440
 8014438:	40020458 	.word	0x40020458
 801443c:	40020470 	.word	0x40020470
 8014440:	40020488 	.word	0x40020488
 8014444:	400204a0 	.word	0x400204a0
 8014448:	400204b8 	.word	0x400204b8
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	f003 0302 	and.w	r3, r3, #2
 8014456:	2b00      	cmp	r3, #0
 8014458:	bf14      	ite	ne
 801445a:	2301      	movne	r3, #1
 801445c:	2300      	moveq	r3, #0
 801445e:	b2db      	uxtb	r3, r3
 8014460:	2b00      	cmp	r3, #0
 8014462:	f000 8087 	beq.w	8014574 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801446a:	f003 031f 	and.w	r3, r3, #31
 801446e:	2220      	movs	r2, #32
 8014470:	409a      	lsls	r2, r3
 8014472:	6a3b      	ldr	r3, [r7, #32]
 8014474:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801447c:	b2db      	uxtb	r3, r3
 801447e:	2b04      	cmp	r3, #4
 8014480:	d139      	bne.n	80144f6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	681a      	ldr	r2, [r3, #0]
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	f022 0216 	bic.w	r2, r2, #22
 8014490:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	695a      	ldr	r2, [r3, #20]
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80144a0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d103      	bne.n	80144b2 <HAL_DMA_IRQHandler+0x736>
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d007      	beq.n	80144c2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	681a      	ldr	r2, [r3, #0]
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	f022 0208 	bic.w	r2, r2, #8
 80144c0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80144c6:	f003 031f 	and.w	r3, r3, #31
 80144ca:	223f      	movs	r2, #63	@ 0x3f
 80144cc:	409a      	lsls	r2, r3
 80144ce:	6a3b      	ldr	r3, [r7, #32]
 80144d0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	2201      	movs	r2, #1
 80144d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	2200      	movs	r2, #0
 80144de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	f000 834a 	beq.w	8014b80 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	4798      	blx	r3
          }
          return;
 80144f4:	e344      	b.n	8014b80 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8014500:	2b00      	cmp	r3, #0
 8014502:	d018      	beq.n	8014536 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801450e:	2b00      	cmp	r3, #0
 8014510:	d108      	bne.n	8014524 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014516:	2b00      	cmp	r3, #0
 8014518:	d02c      	beq.n	8014574 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801451e:	6878      	ldr	r0, [r7, #4]
 8014520:	4798      	blx	r3
 8014522:	e027      	b.n	8014574 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014528:	2b00      	cmp	r3, #0
 801452a:	d023      	beq.n	8014574 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014530:	6878      	ldr	r0, [r7, #4]
 8014532:	4798      	blx	r3
 8014534:	e01e      	b.n	8014574 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014540:	2b00      	cmp	r3, #0
 8014542:	d10f      	bne.n	8014564 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	681a      	ldr	r2, [r3, #0]
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	f022 0210 	bic.w	r2, r2, #16
 8014552:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	2201      	movs	r2, #1
 8014558:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	2200      	movs	r2, #0
 8014560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014568:	2b00      	cmp	r3, #0
 801456a:	d003      	beq.n	8014574 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014570:	6878      	ldr	r0, [r7, #4]
 8014572:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014578:	2b00      	cmp	r3, #0
 801457a:	f000 8306 	beq.w	8014b8a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014582:	f003 0301 	and.w	r3, r3, #1
 8014586:	2b00      	cmp	r3, #0
 8014588:	f000 8088 	beq.w	801469c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	2204      	movs	r2, #4
 8014590:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	4a7a      	ldr	r2, [pc, #488]	@ (8014784 <HAL_DMA_IRQHandler+0xa08>)
 801459a:	4293      	cmp	r3, r2
 801459c:	d04a      	beq.n	8014634 <HAL_DMA_IRQHandler+0x8b8>
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	4a79      	ldr	r2, [pc, #484]	@ (8014788 <HAL_DMA_IRQHandler+0xa0c>)
 80145a4:	4293      	cmp	r3, r2
 80145a6:	d045      	beq.n	8014634 <HAL_DMA_IRQHandler+0x8b8>
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	4a77      	ldr	r2, [pc, #476]	@ (801478c <HAL_DMA_IRQHandler+0xa10>)
 80145ae:	4293      	cmp	r3, r2
 80145b0:	d040      	beq.n	8014634 <HAL_DMA_IRQHandler+0x8b8>
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	4a76      	ldr	r2, [pc, #472]	@ (8014790 <HAL_DMA_IRQHandler+0xa14>)
 80145b8:	4293      	cmp	r3, r2
 80145ba:	d03b      	beq.n	8014634 <HAL_DMA_IRQHandler+0x8b8>
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	4a74      	ldr	r2, [pc, #464]	@ (8014794 <HAL_DMA_IRQHandler+0xa18>)
 80145c2:	4293      	cmp	r3, r2
 80145c4:	d036      	beq.n	8014634 <HAL_DMA_IRQHandler+0x8b8>
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	4a73      	ldr	r2, [pc, #460]	@ (8014798 <HAL_DMA_IRQHandler+0xa1c>)
 80145cc:	4293      	cmp	r3, r2
 80145ce:	d031      	beq.n	8014634 <HAL_DMA_IRQHandler+0x8b8>
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	4a71      	ldr	r2, [pc, #452]	@ (801479c <HAL_DMA_IRQHandler+0xa20>)
 80145d6:	4293      	cmp	r3, r2
 80145d8:	d02c      	beq.n	8014634 <HAL_DMA_IRQHandler+0x8b8>
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	4a70      	ldr	r2, [pc, #448]	@ (80147a0 <HAL_DMA_IRQHandler+0xa24>)
 80145e0:	4293      	cmp	r3, r2
 80145e2:	d027      	beq.n	8014634 <HAL_DMA_IRQHandler+0x8b8>
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	4a6e      	ldr	r2, [pc, #440]	@ (80147a4 <HAL_DMA_IRQHandler+0xa28>)
 80145ea:	4293      	cmp	r3, r2
 80145ec:	d022      	beq.n	8014634 <HAL_DMA_IRQHandler+0x8b8>
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	4a6d      	ldr	r2, [pc, #436]	@ (80147a8 <HAL_DMA_IRQHandler+0xa2c>)
 80145f4:	4293      	cmp	r3, r2
 80145f6:	d01d      	beq.n	8014634 <HAL_DMA_IRQHandler+0x8b8>
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	4a6b      	ldr	r2, [pc, #428]	@ (80147ac <HAL_DMA_IRQHandler+0xa30>)
 80145fe:	4293      	cmp	r3, r2
 8014600:	d018      	beq.n	8014634 <HAL_DMA_IRQHandler+0x8b8>
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	4a6a      	ldr	r2, [pc, #424]	@ (80147b0 <HAL_DMA_IRQHandler+0xa34>)
 8014608:	4293      	cmp	r3, r2
 801460a:	d013      	beq.n	8014634 <HAL_DMA_IRQHandler+0x8b8>
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	4a68      	ldr	r2, [pc, #416]	@ (80147b4 <HAL_DMA_IRQHandler+0xa38>)
 8014612:	4293      	cmp	r3, r2
 8014614:	d00e      	beq.n	8014634 <HAL_DMA_IRQHandler+0x8b8>
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	4a67      	ldr	r2, [pc, #412]	@ (80147b8 <HAL_DMA_IRQHandler+0xa3c>)
 801461c:	4293      	cmp	r3, r2
 801461e:	d009      	beq.n	8014634 <HAL_DMA_IRQHandler+0x8b8>
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	4a65      	ldr	r2, [pc, #404]	@ (80147bc <HAL_DMA_IRQHandler+0xa40>)
 8014626:	4293      	cmp	r3, r2
 8014628:	d004      	beq.n	8014634 <HAL_DMA_IRQHandler+0x8b8>
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	4a64      	ldr	r2, [pc, #400]	@ (80147c0 <HAL_DMA_IRQHandler+0xa44>)
 8014630:	4293      	cmp	r3, r2
 8014632:	d108      	bne.n	8014646 <HAL_DMA_IRQHandler+0x8ca>
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	681a      	ldr	r2, [r3, #0]
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	f022 0201 	bic.w	r2, r2, #1
 8014642:	601a      	str	r2, [r3, #0]
 8014644:	e007      	b.n	8014656 <HAL_DMA_IRQHandler+0x8da>
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	681a      	ldr	r2, [r3, #0]
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	f022 0201 	bic.w	r2, r2, #1
 8014654:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	3301      	adds	r3, #1
 801465a:	60fb      	str	r3, [r7, #12]
 801465c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801465e:	429a      	cmp	r2, r3
 8014660:	d307      	bcc.n	8014672 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	f003 0301 	and.w	r3, r3, #1
 801466c:	2b00      	cmp	r3, #0
 801466e:	d1f2      	bne.n	8014656 <HAL_DMA_IRQHandler+0x8da>
 8014670:	e000      	b.n	8014674 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8014672:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	f003 0301 	and.w	r3, r3, #1
 801467e:	2b00      	cmp	r3, #0
 8014680:	d004      	beq.n	801468c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	2203      	movs	r2, #3
 8014686:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 801468a:	e003      	b.n	8014694 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	2201      	movs	r2, #1
 8014690:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	2200      	movs	r2, #0
 8014698:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	f000 8272 	beq.w	8014b8a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80146aa:	6878      	ldr	r0, [r7, #4]
 80146ac:	4798      	blx	r3
 80146ae:	e26c      	b.n	8014b8a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	4a43      	ldr	r2, [pc, #268]	@ (80147c4 <HAL_DMA_IRQHandler+0xa48>)
 80146b6:	4293      	cmp	r3, r2
 80146b8:	d022      	beq.n	8014700 <HAL_DMA_IRQHandler+0x984>
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	4a42      	ldr	r2, [pc, #264]	@ (80147c8 <HAL_DMA_IRQHandler+0xa4c>)
 80146c0:	4293      	cmp	r3, r2
 80146c2:	d01d      	beq.n	8014700 <HAL_DMA_IRQHandler+0x984>
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	4a40      	ldr	r2, [pc, #256]	@ (80147cc <HAL_DMA_IRQHandler+0xa50>)
 80146ca:	4293      	cmp	r3, r2
 80146cc:	d018      	beq.n	8014700 <HAL_DMA_IRQHandler+0x984>
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	4a3f      	ldr	r2, [pc, #252]	@ (80147d0 <HAL_DMA_IRQHandler+0xa54>)
 80146d4:	4293      	cmp	r3, r2
 80146d6:	d013      	beq.n	8014700 <HAL_DMA_IRQHandler+0x984>
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	4a3d      	ldr	r2, [pc, #244]	@ (80147d4 <HAL_DMA_IRQHandler+0xa58>)
 80146de:	4293      	cmp	r3, r2
 80146e0:	d00e      	beq.n	8014700 <HAL_DMA_IRQHandler+0x984>
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	4a3c      	ldr	r2, [pc, #240]	@ (80147d8 <HAL_DMA_IRQHandler+0xa5c>)
 80146e8:	4293      	cmp	r3, r2
 80146ea:	d009      	beq.n	8014700 <HAL_DMA_IRQHandler+0x984>
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	4a3a      	ldr	r2, [pc, #232]	@ (80147dc <HAL_DMA_IRQHandler+0xa60>)
 80146f2:	4293      	cmp	r3, r2
 80146f4:	d004      	beq.n	8014700 <HAL_DMA_IRQHandler+0x984>
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	4a39      	ldr	r2, [pc, #228]	@ (80147e0 <HAL_DMA_IRQHandler+0xa64>)
 80146fc:	4293      	cmp	r3, r2
 80146fe:	d101      	bne.n	8014704 <HAL_DMA_IRQHandler+0x988>
 8014700:	2301      	movs	r3, #1
 8014702:	e000      	b.n	8014706 <HAL_DMA_IRQHandler+0x98a>
 8014704:	2300      	movs	r3, #0
 8014706:	2b00      	cmp	r3, #0
 8014708:	f000 823f 	beq.w	8014b8a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014718:	f003 031f 	and.w	r3, r3, #31
 801471c:	2204      	movs	r2, #4
 801471e:	409a      	lsls	r2, r3
 8014720:	697b      	ldr	r3, [r7, #20]
 8014722:	4013      	ands	r3, r2
 8014724:	2b00      	cmp	r3, #0
 8014726:	f000 80cd 	beq.w	80148c4 <HAL_DMA_IRQHandler+0xb48>
 801472a:	693b      	ldr	r3, [r7, #16]
 801472c:	f003 0304 	and.w	r3, r3, #4
 8014730:	2b00      	cmp	r3, #0
 8014732:	f000 80c7 	beq.w	80148c4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801473a:	f003 031f 	and.w	r3, r3, #31
 801473e:	2204      	movs	r2, #4
 8014740:	409a      	lsls	r2, r3
 8014742:	69fb      	ldr	r3, [r7, #28]
 8014744:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8014746:	693b      	ldr	r3, [r7, #16]
 8014748:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801474c:	2b00      	cmp	r3, #0
 801474e:	d049      	beq.n	80147e4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8014750:	693b      	ldr	r3, [r7, #16]
 8014752:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8014756:	2b00      	cmp	r3, #0
 8014758:	d109      	bne.n	801476e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801475e:	2b00      	cmp	r3, #0
 8014760:	f000 8210 	beq.w	8014b84 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014768:	6878      	ldr	r0, [r7, #4]
 801476a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801476c:	e20a      	b.n	8014b84 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014772:	2b00      	cmp	r3, #0
 8014774:	f000 8206 	beq.w	8014b84 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8014780:	e200      	b.n	8014b84 <HAL_DMA_IRQHandler+0xe08>
 8014782:	bf00      	nop
 8014784:	40020010 	.word	0x40020010
 8014788:	40020028 	.word	0x40020028
 801478c:	40020040 	.word	0x40020040
 8014790:	40020058 	.word	0x40020058
 8014794:	40020070 	.word	0x40020070
 8014798:	40020088 	.word	0x40020088
 801479c:	400200a0 	.word	0x400200a0
 80147a0:	400200b8 	.word	0x400200b8
 80147a4:	40020410 	.word	0x40020410
 80147a8:	40020428 	.word	0x40020428
 80147ac:	40020440 	.word	0x40020440
 80147b0:	40020458 	.word	0x40020458
 80147b4:	40020470 	.word	0x40020470
 80147b8:	40020488 	.word	0x40020488
 80147bc:	400204a0 	.word	0x400204a0
 80147c0:	400204b8 	.word	0x400204b8
 80147c4:	58025408 	.word	0x58025408
 80147c8:	5802541c 	.word	0x5802541c
 80147cc:	58025430 	.word	0x58025430
 80147d0:	58025444 	.word	0x58025444
 80147d4:	58025458 	.word	0x58025458
 80147d8:	5802546c 	.word	0x5802546c
 80147dc:	58025480 	.word	0x58025480
 80147e0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80147e4:	693b      	ldr	r3, [r7, #16]
 80147e6:	f003 0320 	and.w	r3, r3, #32
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d160      	bne.n	80148b0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	4a7f      	ldr	r2, [pc, #508]	@ (80149f0 <HAL_DMA_IRQHandler+0xc74>)
 80147f4:	4293      	cmp	r3, r2
 80147f6:	d04a      	beq.n	801488e <HAL_DMA_IRQHandler+0xb12>
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	4a7d      	ldr	r2, [pc, #500]	@ (80149f4 <HAL_DMA_IRQHandler+0xc78>)
 80147fe:	4293      	cmp	r3, r2
 8014800:	d045      	beq.n	801488e <HAL_DMA_IRQHandler+0xb12>
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	4a7c      	ldr	r2, [pc, #496]	@ (80149f8 <HAL_DMA_IRQHandler+0xc7c>)
 8014808:	4293      	cmp	r3, r2
 801480a:	d040      	beq.n	801488e <HAL_DMA_IRQHandler+0xb12>
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	4a7a      	ldr	r2, [pc, #488]	@ (80149fc <HAL_DMA_IRQHandler+0xc80>)
 8014812:	4293      	cmp	r3, r2
 8014814:	d03b      	beq.n	801488e <HAL_DMA_IRQHandler+0xb12>
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	4a79      	ldr	r2, [pc, #484]	@ (8014a00 <HAL_DMA_IRQHandler+0xc84>)
 801481c:	4293      	cmp	r3, r2
 801481e:	d036      	beq.n	801488e <HAL_DMA_IRQHandler+0xb12>
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	4a77      	ldr	r2, [pc, #476]	@ (8014a04 <HAL_DMA_IRQHandler+0xc88>)
 8014826:	4293      	cmp	r3, r2
 8014828:	d031      	beq.n	801488e <HAL_DMA_IRQHandler+0xb12>
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	4a76      	ldr	r2, [pc, #472]	@ (8014a08 <HAL_DMA_IRQHandler+0xc8c>)
 8014830:	4293      	cmp	r3, r2
 8014832:	d02c      	beq.n	801488e <HAL_DMA_IRQHandler+0xb12>
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	4a74      	ldr	r2, [pc, #464]	@ (8014a0c <HAL_DMA_IRQHandler+0xc90>)
 801483a:	4293      	cmp	r3, r2
 801483c:	d027      	beq.n	801488e <HAL_DMA_IRQHandler+0xb12>
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	4a73      	ldr	r2, [pc, #460]	@ (8014a10 <HAL_DMA_IRQHandler+0xc94>)
 8014844:	4293      	cmp	r3, r2
 8014846:	d022      	beq.n	801488e <HAL_DMA_IRQHandler+0xb12>
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	4a71      	ldr	r2, [pc, #452]	@ (8014a14 <HAL_DMA_IRQHandler+0xc98>)
 801484e:	4293      	cmp	r3, r2
 8014850:	d01d      	beq.n	801488e <HAL_DMA_IRQHandler+0xb12>
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	4a70      	ldr	r2, [pc, #448]	@ (8014a18 <HAL_DMA_IRQHandler+0xc9c>)
 8014858:	4293      	cmp	r3, r2
 801485a:	d018      	beq.n	801488e <HAL_DMA_IRQHandler+0xb12>
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	4a6e      	ldr	r2, [pc, #440]	@ (8014a1c <HAL_DMA_IRQHandler+0xca0>)
 8014862:	4293      	cmp	r3, r2
 8014864:	d013      	beq.n	801488e <HAL_DMA_IRQHandler+0xb12>
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	4a6d      	ldr	r2, [pc, #436]	@ (8014a20 <HAL_DMA_IRQHandler+0xca4>)
 801486c:	4293      	cmp	r3, r2
 801486e:	d00e      	beq.n	801488e <HAL_DMA_IRQHandler+0xb12>
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	4a6b      	ldr	r2, [pc, #428]	@ (8014a24 <HAL_DMA_IRQHandler+0xca8>)
 8014876:	4293      	cmp	r3, r2
 8014878:	d009      	beq.n	801488e <HAL_DMA_IRQHandler+0xb12>
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	4a6a      	ldr	r2, [pc, #424]	@ (8014a28 <HAL_DMA_IRQHandler+0xcac>)
 8014880:	4293      	cmp	r3, r2
 8014882:	d004      	beq.n	801488e <HAL_DMA_IRQHandler+0xb12>
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	4a68      	ldr	r2, [pc, #416]	@ (8014a2c <HAL_DMA_IRQHandler+0xcb0>)
 801488a:	4293      	cmp	r3, r2
 801488c:	d108      	bne.n	80148a0 <HAL_DMA_IRQHandler+0xb24>
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	681a      	ldr	r2, [r3, #0]
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	f022 0208 	bic.w	r2, r2, #8
 801489c:	601a      	str	r2, [r3, #0]
 801489e:	e007      	b.n	80148b0 <HAL_DMA_IRQHandler+0xb34>
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	681a      	ldr	r2, [r3, #0]
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	f022 0204 	bic.w	r2, r2, #4
 80148ae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	f000 8165 	beq.w	8014b84 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80148be:	6878      	ldr	r0, [r7, #4]
 80148c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80148c2:	e15f      	b.n	8014b84 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80148c8:	f003 031f 	and.w	r3, r3, #31
 80148cc:	2202      	movs	r2, #2
 80148ce:	409a      	lsls	r2, r3
 80148d0:	697b      	ldr	r3, [r7, #20]
 80148d2:	4013      	ands	r3, r2
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	f000 80c5 	beq.w	8014a64 <HAL_DMA_IRQHandler+0xce8>
 80148da:	693b      	ldr	r3, [r7, #16]
 80148dc:	f003 0302 	and.w	r3, r3, #2
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	f000 80bf 	beq.w	8014a64 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80148ea:	f003 031f 	and.w	r3, r3, #31
 80148ee:	2202      	movs	r2, #2
 80148f0:	409a      	lsls	r2, r3
 80148f2:	69fb      	ldr	r3, [r7, #28]
 80148f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80148f6:	693b      	ldr	r3, [r7, #16]
 80148f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d018      	beq.n	8014932 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8014900:	693b      	ldr	r3, [r7, #16]
 8014902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8014906:	2b00      	cmp	r3, #0
 8014908:	d109      	bne.n	801491e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801490e:	2b00      	cmp	r3, #0
 8014910:	f000 813a 	beq.w	8014b88 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014918:	6878      	ldr	r0, [r7, #4]
 801491a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801491c:	e134      	b.n	8014b88 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014922:	2b00      	cmp	r3, #0
 8014924:	f000 8130 	beq.w	8014b88 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801492c:	6878      	ldr	r0, [r7, #4]
 801492e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8014930:	e12a      	b.n	8014b88 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8014932:	693b      	ldr	r3, [r7, #16]
 8014934:	f003 0320 	and.w	r3, r3, #32
 8014938:	2b00      	cmp	r3, #0
 801493a:	f040 8089 	bne.w	8014a50 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	4a2b      	ldr	r2, [pc, #172]	@ (80149f0 <HAL_DMA_IRQHandler+0xc74>)
 8014944:	4293      	cmp	r3, r2
 8014946:	d04a      	beq.n	80149de <HAL_DMA_IRQHandler+0xc62>
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	4a29      	ldr	r2, [pc, #164]	@ (80149f4 <HAL_DMA_IRQHandler+0xc78>)
 801494e:	4293      	cmp	r3, r2
 8014950:	d045      	beq.n	80149de <HAL_DMA_IRQHandler+0xc62>
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	4a28      	ldr	r2, [pc, #160]	@ (80149f8 <HAL_DMA_IRQHandler+0xc7c>)
 8014958:	4293      	cmp	r3, r2
 801495a:	d040      	beq.n	80149de <HAL_DMA_IRQHandler+0xc62>
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	4a26      	ldr	r2, [pc, #152]	@ (80149fc <HAL_DMA_IRQHandler+0xc80>)
 8014962:	4293      	cmp	r3, r2
 8014964:	d03b      	beq.n	80149de <HAL_DMA_IRQHandler+0xc62>
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	4a25      	ldr	r2, [pc, #148]	@ (8014a00 <HAL_DMA_IRQHandler+0xc84>)
 801496c:	4293      	cmp	r3, r2
 801496e:	d036      	beq.n	80149de <HAL_DMA_IRQHandler+0xc62>
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	4a23      	ldr	r2, [pc, #140]	@ (8014a04 <HAL_DMA_IRQHandler+0xc88>)
 8014976:	4293      	cmp	r3, r2
 8014978:	d031      	beq.n	80149de <HAL_DMA_IRQHandler+0xc62>
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	4a22      	ldr	r2, [pc, #136]	@ (8014a08 <HAL_DMA_IRQHandler+0xc8c>)
 8014980:	4293      	cmp	r3, r2
 8014982:	d02c      	beq.n	80149de <HAL_DMA_IRQHandler+0xc62>
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	4a20      	ldr	r2, [pc, #128]	@ (8014a0c <HAL_DMA_IRQHandler+0xc90>)
 801498a:	4293      	cmp	r3, r2
 801498c:	d027      	beq.n	80149de <HAL_DMA_IRQHandler+0xc62>
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	4a1f      	ldr	r2, [pc, #124]	@ (8014a10 <HAL_DMA_IRQHandler+0xc94>)
 8014994:	4293      	cmp	r3, r2
 8014996:	d022      	beq.n	80149de <HAL_DMA_IRQHandler+0xc62>
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	4a1d      	ldr	r2, [pc, #116]	@ (8014a14 <HAL_DMA_IRQHandler+0xc98>)
 801499e:	4293      	cmp	r3, r2
 80149a0:	d01d      	beq.n	80149de <HAL_DMA_IRQHandler+0xc62>
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	4a1c      	ldr	r2, [pc, #112]	@ (8014a18 <HAL_DMA_IRQHandler+0xc9c>)
 80149a8:	4293      	cmp	r3, r2
 80149aa:	d018      	beq.n	80149de <HAL_DMA_IRQHandler+0xc62>
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	4a1a      	ldr	r2, [pc, #104]	@ (8014a1c <HAL_DMA_IRQHandler+0xca0>)
 80149b2:	4293      	cmp	r3, r2
 80149b4:	d013      	beq.n	80149de <HAL_DMA_IRQHandler+0xc62>
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	4a19      	ldr	r2, [pc, #100]	@ (8014a20 <HAL_DMA_IRQHandler+0xca4>)
 80149bc:	4293      	cmp	r3, r2
 80149be:	d00e      	beq.n	80149de <HAL_DMA_IRQHandler+0xc62>
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	4a17      	ldr	r2, [pc, #92]	@ (8014a24 <HAL_DMA_IRQHandler+0xca8>)
 80149c6:	4293      	cmp	r3, r2
 80149c8:	d009      	beq.n	80149de <HAL_DMA_IRQHandler+0xc62>
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	4a16      	ldr	r2, [pc, #88]	@ (8014a28 <HAL_DMA_IRQHandler+0xcac>)
 80149d0:	4293      	cmp	r3, r2
 80149d2:	d004      	beq.n	80149de <HAL_DMA_IRQHandler+0xc62>
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	4a14      	ldr	r2, [pc, #80]	@ (8014a2c <HAL_DMA_IRQHandler+0xcb0>)
 80149da:	4293      	cmp	r3, r2
 80149dc:	d128      	bne.n	8014a30 <HAL_DMA_IRQHandler+0xcb4>
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	681a      	ldr	r2, [r3, #0]
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	f022 0214 	bic.w	r2, r2, #20
 80149ec:	601a      	str	r2, [r3, #0]
 80149ee:	e027      	b.n	8014a40 <HAL_DMA_IRQHandler+0xcc4>
 80149f0:	40020010 	.word	0x40020010
 80149f4:	40020028 	.word	0x40020028
 80149f8:	40020040 	.word	0x40020040
 80149fc:	40020058 	.word	0x40020058
 8014a00:	40020070 	.word	0x40020070
 8014a04:	40020088 	.word	0x40020088
 8014a08:	400200a0 	.word	0x400200a0
 8014a0c:	400200b8 	.word	0x400200b8
 8014a10:	40020410 	.word	0x40020410
 8014a14:	40020428 	.word	0x40020428
 8014a18:	40020440 	.word	0x40020440
 8014a1c:	40020458 	.word	0x40020458
 8014a20:	40020470 	.word	0x40020470
 8014a24:	40020488 	.word	0x40020488
 8014a28:	400204a0 	.word	0x400204a0
 8014a2c:	400204b8 	.word	0x400204b8
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	681a      	ldr	r2, [r3, #0]
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	f022 020a 	bic.w	r2, r2, #10
 8014a3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	2201      	movs	r2, #1
 8014a44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	2200      	movs	r2, #0
 8014a4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	f000 8097 	beq.w	8014b88 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014a5e:	6878      	ldr	r0, [r7, #4]
 8014a60:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8014a62:	e091      	b.n	8014b88 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014a68:	f003 031f 	and.w	r3, r3, #31
 8014a6c:	2208      	movs	r2, #8
 8014a6e:	409a      	lsls	r2, r3
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	4013      	ands	r3, r2
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	f000 8088 	beq.w	8014b8a <HAL_DMA_IRQHandler+0xe0e>
 8014a7a:	693b      	ldr	r3, [r7, #16]
 8014a7c:	f003 0308 	and.w	r3, r3, #8
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	f000 8082 	beq.w	8014b8a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	4a41      	ldr	r2, [pc, #260]	@ (8014b90 <HAL_DMA_IRQHandler+0xe14>)
 8014a8c:	4293      	cmp	r3, r2
 8014a8e:	d04a      	beq.n	8014b26 <HAL_DMA_IRQHandler+0xdaa>
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	4a3f      	ldr	r2, [pc, #252]	@ (8014b94 <HAL_DMA_IRQHandler+0xe18>)
 8014a96:	4293      	cmp	r3, r2
 8014a98:	d045      	beq.n	8014b26 <HAL_DMA_IRQHandler+0xdaa>
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	4a3e      	ldr	r2, [pc, #248]	@ (8014b98 <HAL_DMA_IRQHandler+0xe1c>)
 8014aa0:	4293      	cmp	r3, r2
 8014aa2:	d040      	beq.n	8014b26 <HAL_DMA_IRQHandler+0xdaa>
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	4a3c      	ldr	r2, [pc, #240]	@ (8014b9c <HAL_DMA_IRQHandler+0xe20>)
 8014aaa:	4293      	cmp	r3, r2
 8014aac:	d03b      	beq.n	8014b26 <HAL_DMA_IRQHandler+0xdaa>
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	4a3b      	ldr	r2, [pc, #236]	@ (8014ba0 <HAL_DMA_IRQHandler+0xe24>)
 8014ab4:	4293      	cmp	r3, r2
 8014ab6:	d036      	beq.n	8014b26 <HAL_DMA_IRQHandler+0xdaa>
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	4a39      	ldr	r2, [pc, #228]	@ (8014ba4 <HAL_DMA_IRQHandler+0xe28>)
 8014abe:	4293      	cmp	r3, r2
 8014ac0:	d031      	beq.n	8014b26 <HAL_DMA_IRQHandler+0xdaa>
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	4a38      	ldr	r2, [pc, #224]	@ (8014ba8 <HAL_DMA_IRQHandler+0xe2c>)
 8014ac8:	4293      	cmp	r3, r2
 8014aca:	d02c      	beq.n	8014b26 <HAL_DMA_IRQHandler+0xdaa>
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	4a36      	ldr	r2, [pc, #216]	@ (8014bac <HAL_DMA_IRQHandler+0xe30>)
 8014ad2:	4293      	cmp	r3, r2
 8014ad4:	d027      	beq.n	8014b26 <HAL_DMA_IRQHandler+0xdaa>
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	4a35      	ldr	r2, [pc, #212]	@ (8014bb0 <HAL_DMA_IRQHandler+0xe34>)
 8014adc:	4293      	cmp	r3, r2
 8014ade:	d022      	beq.n	8014b26 <HAL_DMA_IRQHandler+0xdaa>
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	4a33      	ldr	r2, [pc, #204]	@ (8014bb4 <HAL_DMA_IRQHandler+0xe38>)
 8014ae6:	4293      	cmp	r3, r2
 8014ae8:	d01d      	beq.n	8014b26 <HAL_DMA_IRQHandler+0xdaa>
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	4a32      	ldr	r2, [pc, #200]	@ (8014bb8 <HAL_DMA_IRQHandler+0xe3c>)
 8014af0:	4293      	cmp	r3, r2
 8014af2:	d018      	beq.n	8014b26 <HAL_DMA_IRQHandler+0xdaa>
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	4a30      	ldr	r2, [pc, #192]	@ (8014bbc <HAL_DMA_IRQHandler+0xe40>)
 8014afa:	4293      	cmp	r3, r2
 8014afc:	d013      	beq.n	8014b26 <HAL_DMA_IRQHandler+0xdaa>
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	4a2f      	ldr	r2, [pc, #188]	@ (8014bc0 <HAL_DMA_IRQHandler+0xe44>)
 8014b04:	4293      	cmp	r3, r2
 8014b06:	d00e      	beq.n	8014b26 <HAL_DMA_IRQHandler+0xdaa>
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	4a2d      	ldr	r2, [pc, #180]	@ (8014bc4 <HAL_DMA_IRQHandler+0xe48>)
 8014b0e:	4293      	cmp	r3, r2
 8014b10:	d009      	beq.n	8014b26 <HAL_DMA_IRQHandler+0xdaa>
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	4a2c      	ldr	r2, [pc, #176]	@ (8014bc8 <HAL_DMA_IRQHandler+0xe4c>)
 8014b18:	4293      	cmp	r3, r2
 8014b1a:	d004      	beq.n	8014b26 <HAL_DMA_IRQHandler+0xdaa>
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	4a2a      	ldr	r2, [pc, #168]	@ (8014bcc <HAL_DMA_IRQHandler+0xe50>)
 8014b22:	4293      	cmp	r3, r2
 8014b24:	d108      	bne.n	8014b38 <HAL_DMA_IRQHandler+0xdbc>
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	681a      	ldr	r2, [r3, #0]
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	f022 021c 	bic.w	r2, r2, #28
 8014b34:	601a      	str	r2, [r3, #0]
 8014b36:	e007      	b.n	8014b48 <HAL_DMA_IRQHandler+0xdcc>
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	681a      	ldr	r2, [r3, #0]
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	f022 020e 	bic.w	r2, r2, #14
 8014b46:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014b4c:	f003 031f 	and.w	r3, r3, #31
 8014b50:	2201      	movs	r2, #1
 8014b52:	409a      	lsls	r2, r3
 8014b54:	69fb      	ldr	r3, [r7, #28]
 8014b56:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	2201      	movs	r2, #1
 8014b5c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	2201      	movs	r2, #1
 8014b62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	2200      	movs	r2, #0
 8014b6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d009      	beq.n	8014b8a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014b7a:	6878      	ldr	r0, [r7, #4]
 8014b7c:	4798      	blx	r3
 8014b7e:	e004      	b.n	8014b8a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8014b80:	bf00      	nop
 8014b82:	e002      	b.n	8014b8a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8014b84:	bf00      	nop
 8014b86:	e000      	b.n	8014b8a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8014b88:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8014b8a:	3728      	adds	r7, #40	@ 0x28
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd80      	pop	{r7, pc}
 8014b90:	40020010 	.word	0x40020010
 8014b94:	40020028 	.word	0x40020028
 8014b98:	40020040 	.word	0x40020040
 8014b9c:	40020058 	.word	0x40020058
 8014ba0:	40020070 	.word	0x40020070
 8014ba4:	40020088 	.word	0x40020088
 8014ba8:	400200a0 	.word	0x400200a0
 8014bac:	400200b8 	.word	0x400200b8
 8014bb0:	40020410 	.word	0x40020410
 8014bb4:	40020428 	.word	0x40020428
 8014bb8:	40020440 	.word	0x40020440
 8014bbc:	40020458 	.word	0x40020458
 8014bc0:	40020470 	.word	0x40020470
 8014bc4:	40020488 	.word	0x40020488
 8014bc8:	400204a0 	.word	0x400204a0
 8014bcc:	400204b8 	.word	0x400204b8

08014bd0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8014bd0:	b480      	push	{r7}
 8014bd2:	b083      	sub	sp, #12
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8014bde:	b2db      	uxtb	r3, r3
}
 8014be0:	4618      	mov	r0, r3
 8014be2:	370c      	adds	r7, #12
 8014be4:	46bd      	mov	sp, r7
 8014be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bea:	4770      	bx	lr

08014bec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8014bec:	b480      	push	{r7}
 8014bee:	b087      	sub	sp, #28
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	60f8      	str	r0, [r7, #12]
 8014bf4:	60b9      	str	r1, [r7, #8]
 8014bf6:	607a      	str	r2, [r7, #4]
 8014bf8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014bfe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014c04:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	4a7f      	ldr	r2, [pc, #508]	@ (8014e08 <DMA_SetConfig+0x21c>)
 8014c0c:	4293      	cmp	r3, r2
 8014c0e:	d072      	beq.n	8014cf6 <DMA_SetConfig+0x10a>
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	4a7d      	ldr	r2, [pc, #500]	@ (8014e0c <DMA_SetConfig+0x220>)
 8014c16:	4293      	cmp	r3, r2
 8014c18:	d06d      	beq.n	8014cf6 <DMA_SetConfig+0x10a>
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	4a7c      	ldr	r2, [pc, #496]	@ (8014e10 <DMA_SetConfig+0x224>)
 8014c20:	4293      	cmp	r3, r2
 8014c22:	d068      	beq.n	8014cf6 <DMA_SetConfig+0x10a>
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	4a7a      	ldr	r2, [pc, #488]	@ (8014e14 <DMA_SetConfig+0x228>)
 8014c2a:	4293      	cmp	r3, r2
 8014c2c:	d063      	beq.n	8014cf6 <DMA_SetConfig+0x10a>
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	4a79      	ldr	r2, [pc, #484]	@ (8014e18 <DMA_SetConfig+0x22c>)
 8014c34:	4293      	cmp	r3, r2
 8014c36:	d05e      	beq.n	8014cf6 <DMA_SetConfig+0x10a>
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	4a77      	ldr	r2, [pc, #476]	@ (8014e1c <DMA_SetConfig+0x230>)
 8014c3e:	4293      	cmp	r3, r2
 8014c40:	d059      	beq.n	8014cf6 <DMA_SetConfig+0x10a>
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	4a76      	ldr	r2, [pc, #472]	@ (8014e20 <DMA_SetConfig+0x234>)
 8014c48:	4293      	cmp	r3, r2
 8014c4a:	d054      	beq.n	8014cf6 <DMA_SetConfig+0x10a>
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	4a74      	ldr	r2, [pc, #464]	@ (8014e24 <DMA_SetConfig+0x238>)
 8014c52:	4293      	cmp	r3, r2
 8014c54:	d04f      	beq.n	8014cf6 <DMA_SetConfig+0x10a>
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	4a73      	ldr	r2, [pc, #460]	@ (8014e28 <DMA_SetConfig+0x23c>)
 8014c5c:	4293      	cmp	r3, r2
 8014c5e:	d04a      	beq.n	8014cf6 <DMA_SetConfig+0x10a>
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	4a71      	ldr	r2, [pc, #452]	@ (8014e2c <DMA_SetConfig+0x240>)
 8014c66:	4293      	cmp	r3, r2
 8014c68:	d045      	beq.n	8014cf6 <DMA_SetConfig+0x10a>
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	4a70      	ldr	r2, [pc, #448]	@ (8014e30 <DMA_SetConfig+0x244>)
 8014c70:	4293      	cmp	r3, r2
 8014c72:	d040      	beq.n	8014cf6 <DMA_SetConfig+0x10a>
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	4a6e      	ldr	r2, [pc, #440]	@ (8014e34 <DMA_SetConfig+0x248>)
 8014c7a:	4293      	cmp	r3, r2
 8014c7c:	d03b      	beq.n	8014cf6 <DMA_SetConfig+0x10a>
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	4a6d      	ldr	r2, [pc, #436]	@ (8014e38 <DMA_SetConfig+0x24c>)
 8014c84:	4293      	cmp	r3, r2
 8014c86:	d036      	beq.n	8014cf6 <DMA_SetConfig+0x10a>
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	4a6b      	ldr	r2, [pc, #428]	@ (8014e3c <DMA_SetConfig+0x250>)
 8014c8e:	4293      	cmp	r3, r2
 8014c90:	d031      	beq.n	8014cf6 <DMA_SetConfig+0x10a>
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	4a6a      	ldr	r2, [pc, #424]	@ (8014e40 <DMA_SetConfig+0x254>)
 8014c98:	4293      	cmp	r3, r2
 8014c9a:	d02c      	beq.n	8014cf6 <DMA_SetConfig+0x10a>
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	4a68      	ldr	r2, [pc, #416]	@ (8014e44 <DMA_SetConfig+0x258>)
 8014ca2:	4293      	cmp	r3, r2
 8014ca4:	d027      	beq.n	8014cf6 <DMA_SetConfig+0x10a>
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	4a67      	ldr	r2, [pc, #412]	@ (8014e48 <DMA_SetConfig+0x25c>)
 8014cac:	4293      	cmp	r3, r2
 8014cae:	d022      	beq.n	8014cf6 <DMA_SetConfig+0x10a>
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	4a65      	ldr	r2, [pc, #404]	@ (8014e4c <DMA_SetConfig+0x260>)
 8014cb6:	4293      	cmp	r3, r2
 8014cb8:	d01d      	beq.n	8014cf6 <DMA_SetConfig+0x10a>
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	4a64      	ldr	r2, [pc, #400]	@ (8014e50 <DMA_SetConfig+0x264>)
 8014cc0:	4293      	cmp	r3, r2
 8014cc2:	d018      	beq.n	8014cf6 <DMA_SetConfig+0x10a>
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	4a62      	ldr	r2, [pc, #392]	@ (8014e54 <DMA_SetConfig+0x268>)
 8014cca:	4293      	cmp	r3, r2
 8014ccc:	d013      	beq.n	8014cf6 <DMA_SetConfig+0x10a>
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	4a61      	ldr	r2, [pc, #388]	@ (8014e58 <DMA_SetConfig+0x26c>)
 8014cd4:	4293      	cmp	r3, r2
 8014cd6:	d00e      	beq.n	8014cf6 <DMA_SetConfig+0x10a>
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	4a5f      	ldr	r2, [pc, #380]	@ (8014e5c <DMA_SetConfig+0x270>)
 8014cde:	4293      	cmp	r3, r2
 8014ce0:	d009      	beq.n	8014cf6 <DMA_SetConfig+0x10a>
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	4a5e      	ldr	r2, [pc, #376]	@ (8014e60 <DMA_SetConfig+0x274>)
 8014ce8:	4293      	cmp	r3, r2
 8014cea:	d004      	beq.n	8014cf6 <DMA_SetConfig+0x10a>
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	4a5c      	ldr	r2, [pc, #368]	@ (8014e64 <DMA_SetConfig+0x278>)
 8014cf2:	4293      	cmp	r3, r2
 8014cf4:	d101      	bne.n	8014cfa <DMA_SetConfig+0x10e>
 8014cf6:	2301      	movs	r3, #1
 8014cf8:	e000      	b.n	8014cfc <DMA_SetConfig+0x110>
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d00d      	beq.n	8014d1c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d04:	68fa      	ldr	r2, [r7, #12]
 8014d06:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014d08:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d004      	beq.n	8014d1c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014d16:	68fa      	ldr	r2, [r7, #12]
 8014d18:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8014d1a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	4a39      	ldr	r2, [pc, #228]	@ (8014e08 <DMA_SetConfig+0x21c>)
 8014d22:	4293      	cmp	r3, r2
 8014d24:	d04a      	beq.n	8014dbc <DMA_SetConfig+0x1d0>
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	4a38      	ldr	r2, [pc, #224]	@ (8014e0c <DMA_SetConfig+0x220>)
 8014d2c:	4293      	cmp	r3, r2
 8014d2e:	d045      	beq.n	8014dbc <DMA_SetConfig+0x1d0>
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	4a36      	ldr	r2, [pc, #216]	@ (8014e10 <DMA_SetConfig+0x224>)
 8014d36:	4293      	cmp	r3, r2
 8014d38:	d040      	beq.n	8014dbc <DMA_SetConfig+0x1d0>
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	4a35      	ldr	r2, [pc, #212]	@ (8014e14 <DMA_SetConfig+0x228>)
 8014d40:	4293      	cmp	r3, r2
 8014d42:	d03b      	beq.n	8014dbc <DMA_SetConfig+0x1d0>
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	4a33      	ldr	r2, [pc, #204]	@ (8014e18 <DMA_SetConfig+0x22c>)
 8014d4a:	4293      	cmp	r3, r2
 8014d4c:	d036      	beq.n	8014dbc <DMA_SetConfig+0x1d0>
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	4a32      	ldr	r2, [pc, #200]	@ (8014e1c <DMA_SetConfig+0x230>)
 8014d54:	4293      	cmp	r3, r2
 8014d56:	d031      	beq.n	8014dbc <DMA_SetConfig+0x1d0>
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	4a30      	ldr	r2, [pc, #192]	@ (8014e20 <DMA_SetConfig+0x234>)
 8014d5e:	4293      	cmp	r3, r2
 8014d60:	d02c      	beq.n	8014dbc <DMA_SetConfig+0x1d0>
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	4a2f      	ldr	r2, [pc, #188]	@ (8014e24 <DMA_SetConfig+0x238>)
 8014d68:	4293      	cmp	r3, r2
 8014d6a:	d027      	beq.n	8014dbc <DMA_SetConfig+0x1d0>
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	4a2d      	ldr	r2, [pc, #180]	@ (8014e28 <DMA_SetConfig+0x23c>)
 8014d72:	4293      	cmp	r3, r2
 8014d74:	d022      	beq.n	8014dbc <DMA_SetConfig+0x1d0>
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	4a2c      	ldr	r2, [pc, #176]	@ (8014e2c <DMA_SetConfig+0x240>)
 8014d7c:	4293      	cmp	r3, r2
 8014d7e:	d01d      	beq.n	8014dbc <DMA_SetConfig+0x1d0>
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	4a2a      	ldr	r2, [pc, #168]	@ (8014e30 <DMA_SetConfig+0x244>)
 8014d86:	4293      	cmp	r3, r2
 8014d88:	d018      	beq.n	8014dbc <DMA_SetConfig+0x1d0>
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	4a29      	ldr	r2, [pc, #164]	@ (8014e34 <DMA_SetConfig+0x248>)
 8014d90:	4293      	cmp	r3, r2
 8014d92:	d013      	beq.n	8014dbc <DMA_SetConfig+0x1d0>
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	4a27      	ldr	r2, [pc, #156]	@ (8014e38 <DMA_SetConfig+0x24c>)
 8014d9a:	4293      	cmp	r3, r2
 8014d9c:	d00e      	beq.n	8014dbc <DMA_SetConfig+0x1d0>
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	4a26      	ldr	r2, [pc, #152]	@ (8014e3c <DMA_SetConfig+0x250>)
 8014da4:	4293      	cmp	r3, r2
 8014da6:	d009      	beq.n	8014dbc <DMA_SetConfig+0x1d0>
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	4a24      	ldr	r2, [pc, #144]	@ (8014e40 <DMA_SetConfig+0x254>)
 8014dae:	4293      	cmp	r3, r2
 8014db0:	d004      	beq.n	8014dbc <DMA_SetConfig+0x1d0>
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	4a23      	ldr	r2, [pc, #140]	@ (8014e44 <DMA_SetConfig+0x258>)
 8014db8:	4293      	cmp	r3, r2
 8014dba:	d101      	bne.n	8014dc0 <DMA_SetConfig+0x1d4>
 8014dbc:	2301      	movs	r3, #1
 8014dbe:	e000      	b.n	8014dc2 <DMA_SetConfig+0x1d6>
 8014dc0:	2300      	movs	r3, #0
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d059      	beq.n	8014e7a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014dca:	f003 031f 	and.w	r3, r3, #31
 8014dce:	223f      	movs	r2, #63	@ 0x3f
 8014dd0:	409a      	lsls	r2, r3
 8014dd2:	697b      	ldr	r3, [r7, #20]
 8014dd4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	681a      	ldr	r2, [r3, #0]
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8014de4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	683a      	ldr	r2, [r7, #0]
 8014dec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	689b      	ldr	r3, [r3, #8]
 8014df2:	2b40      	cmp	r3, #64	@ 0x40
 8014df4:	d138      	bne.n	8014e68 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	687a      	ldr	r2, [r7, #4]
 8014dfc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	68ba      	ldr	r2, [r7, #8]
 8014e04:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8014e06:	e086      	b.n	8014f16 <DMA_SetConfig+0x32a>
 8014e08:	40020010 	.word	0x40020010
 8014e0c:	40020028 	.word	0x40020028
 8014e10:	40020040 	.word	0x40020040
 8014e14:	40020058 	.word	0x40020058
 8014e18:	40020070 	.word	0x40020070
 8014e1c:	40020088 	.word	0x40020088
 8014e20:	400200a0 	.word	0x400200a0
 8014e24:	400200b8 	.word	0x400200b8
 8014e28:	40020410 	.word	0x40020410
 8014e2c:	40020428 	.word	0x40020428
 8014e30:	40020440 	.word	0x40020440
 8014e34:	40020458 	.word	0x40020458
 8014e38:	40020470 	.word	0x40020470
 8014e3c:	40020488 	.word	0x40020488
 8014e40:	400204a0 	.word	0x400204a0
 8014e44:	400204b8 	.word	0x400204b8
 8014e48:	58025408 	.word	0x58025408
 8014e4c:	5802541c 	.word	0x5802541c
 8014e50:	58025430 	.word	0x58025430
 8014e54:	58025444 	.word	0x58025444
 8014e58:	58025458 	.word	0x58025458
 8014e5c:	5802546c 	.word	0x5802546c
 8014e60:	58025480 	.word	0x58025480
 8014e64:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	68ba      	ldr	r2, [r7, #8]
 8014e6e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	687a      	ldr	r2, [r7, #4]
 8014e76:	60da      	str	r2, [r3, #12]
}
 8014e78:	e04d      	b.n	8014f16 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	4a29      	ldr	r2, [pc, #164]	@ (8014f24 <DMA_SetConfig+0x338>)
 8014e80:	4293      	cmp	r3, r2
 8014e82:	d022      	beq.n	8014eca <DMA_SetConfig+0x2de>
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	4a27      	ldr	r2, [pc, #156]	@ (8014f28 <DMA_SetConfig+0x33c>)
 8014e8a:	4293      	cmp	r3, r2
 8014e8c:	d01d      	beq.n	8014eca <DMA_SetConfig+0x2de>
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	4a26      	ldr	r2, [pc, #152]	@ (8014f2c <DMA_SetConfig+0x340>)
 8014e94:	4293      	cmp	r3, r2
 8014e96:	d018      	beq.n	8014eca <DMA_SetConfig+0x2de>
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	4a24      	ldr	r2, [pc, #144]	@ (8014f30 <DMA_SetConfig+0x344>)
 8014e9e:	4293      	cmp	r3, r2
 8014ea0:	d013      	beq.n	8014eca <DMA_SetConfig+0x2de>
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	4a23      	ldr	r2, [pc, #140]	@ (8014f34 <DMA_SetConfig+0x348>)
 8014ea8:	4293      	cmp	r3, r2
 8014eaa:	d00e      	beq.n	8014eca <DMA_SetConfig+0x2de>
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	4a21      	ldr	r2, [pc, #132]	@ (8014f38 <DMA_SetConfig+0x34c>)
 8014eb2:	4293      	cmp	r3, r2
 8014eb4:	d009      	beq.n	8014eca <DMA_SetConfig+0x2de>
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	4a20      	ldr	r2, [pc, #128]	@ (8014f3c <DMA_SetConfig+0x350>)
 8014ebc:	4293      	cmp	r3, r2
 8014ebe:	d004      	beq.n	8014eca <DMA_SetConfig+0x2de>
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	4a1e      	ldr	r2, [pc, #120]	@ (8014f40 <DMA_SetConfig+0x354>)
 8014ec6:	4293      	cmp	r3, r2
 8014ec8:	d101      	bne.n	8014ece <DMA_SetConfig+0x2e2>
 8014eca:	2301      	movs	r3, #1
 8014ecc:	e000      	b.n	8014ed0 <DMA_SetConfig+0x2e4>
 8014ece:	2300      	movs	r3, #0
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d020      	beq.n	8014f16 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014ed8:	f003 031f 	and.w	r3, r3, #31
 8014edc:	2201      	movs	r2, #1
 8014ede:	409a      	lsls	r2, r3
 8014ee0:	693b      	ldr	r3, [r7, #16]
 8014ee2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	683a      	ldr	r2, [r7, #0]
 8014eea:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	689b      	ldr	r3, [r3, #8]
 8014ef0:	2b40      	cmp	r3, #64	@ 0x40
 8014ef2:	d108      	bne.n	8014f06 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	687a      	ldr	r2, [r7, #4]
 8014efa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	68ba      	ldr	r2, [r7, #8]
 8014f02:	60da      	str	r2, [r3, #12]
}
 8014f04:	e007      	b.n	8014f16 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	68ba      	ldr	r2, [r7, #8]
 8014f0c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	687a      	ldr	r2, [r7, #4]
 8014f14:	60da      	str	r2, [r3, #12]
}
 8014f16:	bf00      	nop
 8014f18:	371c      	adds	r7, #28
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f20:	4770      	bx	lr
 8014f22:	bf00      	nop
 8014f24:	58025408 	.word	0x58025408
 8014f28:	5802541c 	.word	0x5802541c
 8014f2c:	58025430 	.word	0x58025430
 8014f30:	58025444 	.word	0x58025444
 8014f34:	58025458 	.word	0x58025458
 8014f38:	5802546c 	.word	0x5802546c
 8014f3c:	58025480 	.word	0x58025480
 8014f40:	58025494 	.word	0x58025494

08014f44 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b098      	sub	sp, #96	@ 0x60
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8014f4c:	4a84      	ldr	r2, [pc, #528]	@ (8015160 <HAL_FDCAN_Init+0x21c>)
 8014f4e:	f107 030c 	add.w	r3, r7, #12
 8014f52:	4611      	mov	r1, r2
 8014f54:	224c      	movs	r2, #76	@ 0x4c
 8014f56:	4618      	mov	r0, r3
 8014f58:	f009 fb38 	bl	801e5cc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d101      	bne.n	8014f66 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8014f62:	2301      	movs	r3, #1
 8014f64:	e1c6      	b.n	80152f4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	4a7e      	ldr	r2, [pc, #504]	@ (8015164 <HAL_FDCAN_Init+0x220>)
 8014f6c:	4293      	cmp	r3, r2
 8014f6e:	d106      	bne.n	8014f7e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8014f78:	461a      	mov	r2, r3
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8014f84:	b2db      	uxtb	r3, r3
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d106      	bne.n	8014f98 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8014f92:	6878      	ldr	r0, [r7, #4]
 8014f94:	f000 f9b4 	bl	8015300 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	699a      	ldr	r2, [r3, #24]
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	f022 0210 	bic.w	r2, r2, #16
 8014fa6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8014fa8:	f7fc f9a4 	bl	80112f4 <HAL_GetTick>
 8014fac:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8014fae:	e014      	b.n	8014fda <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8014fb0:	f7fc f9a0 	bl	80112f4 <HAL_GetTick>
 8014fb4:	4602      	mov	r2, r0
 8014fb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014fb8:	1ad3      	subs	r3, r2, r3
 8014fba:	2b0a      	cmp	r3, #10
 8014fbc:	d90d      	bls.n	8014fda <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8014fc4:	f043 0201 	orr.w	r2, r3, #1
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	2203      	movs	r2, #3
 8014fd2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8014fd6:	2301      	movs	r3, #1
 8014fd8:	e18c      	b.n	80152f4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	699b      	ldr	r3, [r3, #24]
 8014fe0:	f003 0308 	and.w	r3, r3, #8
 8014fe4:	2b08      	cmp	r3, #8
 8014fe6:	d0e3      	beq.n	8014fb0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	699a      	ldr	r2, [r3, #24]
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	f042 0201 	orr.w	r2, r2, #1
 8014ff6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8014ff8:	f7fc f97c 	bl	80112f4 <HAL_GetTick>
 8014ffc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8014ffe:	e014      	b.n	801502a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8015000:	f7fc f978 	bl	80112f4 <HAL_GetTick>
 8015004:	4602      	mov	r2, r0
 8015006:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015008:	1ad3      	subs	r3, r2, r3
 801500a:	2b0a      	cmp	r3, #10
 801500c:	d90d      	bls.n	801502a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8015014:	f043 0201 	orr.w	r2, r3, #1
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	2203      	movs	r2, #3
 8015022:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8015026:	2301      	movs	r3, #1
 8015028:	e164      	b.n	80152f4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	699b      	ldr	r3, [r3, #24]
 8015030:	f003 0301 	and.w	r3, r3, #1
 8015034:	2b00      	cmp	r3, #0
 8015036:	d0e3      	beq.n	8015000 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	699a      	ldr	r2, [r3, #24]
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	f042 0202 	orr.w	r2, r2, #2
 8015046:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	7c1b      	ldrb	r3, [r3, #16]
 801504c:	2b01      	cmp	r3, #1
 801504e:	d108      	bne.n	8015062 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	699a      	ldr	r2, [r3, #24]
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801505e:	619a      	str	r2, [r3, #24]
 8015060:	e007      	b.n	8015072 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	699a      	ldr	r2, [r3, #24]
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015070:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	7c5b      	ldrb	r3, [r3, #17]
 8015076:	2b01      	cmp	r3, #1
 8015078:	d108      	bne.n	801508c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	699a      	ldr	r2, [r3, #24]
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8015088:	619a      	str	r2, [r3, #24]
 801508a:	e007      	b.n	801509c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	699a      	ldr	r2, [r3, #24]
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801509a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	7c9b      	ldrb	r3, [r3, #18]
 80150a0:	2b01      	cmp	r3, #1
 80150a2:	d108      	bne.n	80150b6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	699a      	ldr	r2, [r3, #24]
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80150b2:	619a      	str	r2, [r3, #24]
 80150b4:	e007      	b.n	80150c6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	699a      	ldr	r2, [r3, #24]
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80150c4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	699b      	ldr	r3, [r3, #24]
 80150cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	689a      	ldr	r2, [r3, #8]
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	430a      	orrs	r2, r1
 80150da:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	699a      	ldr	r2, [r3, #24]
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80150ea:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	691a      	ldr	r2, [r3, #16]
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	f022 0210 	bic.w	r2, r2, #16
 80150fa:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	68db      	ldr	r3, [r3, #12]
 8015100:	2b01      	cmp	r3, #1
 8015102:	d108      	bne.n	8015116 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	699a      	ldr	r2, [r3, #24]
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	f042 0204 	orr.w	r2, r2, #4
 8015112:	619a      	str	r2, [r3, #24]
 8015114:	e030      	b.n	8015178 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	68db      	ldr	r3, [r3, #12]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d02c      	beq.n	8015178 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	68db      	ldr	r3, [r3, #12]
 8015122:	2b02      	cmp	r3, #2
 8015124:	d020      	beq.n	8015168 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	699a      	ldr	r2, [r3, #24]
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8015134:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	691a      	ldr	r2, [r3, #16]
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	f042 0210 	orr.w	r2, r2, #16
 8015144:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	68db      	ldr	r3, [r3, #12]
 801514a:	2b03      	cmp	r3, #3
 801514c:	d114      	bne.n	8015178 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	699a      	ldr	r2, [r3, #24]
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	f042 0220 	orr.w	r2, r2, #32
 801515c:	619a      	str	r2, [r3, #24]
 801515e:	e00b      	b.n	8015178 <HAL_FDCAN_Init+0x234>
 8015160:	08021fc4 	.word	0x08021fc4
 8015164:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	699a      	ldr	r2, [r3, #24]
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	f042 0220 	orr.w	r2, r2, #32
 8015176:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	699b      	ldr	r3, [r3, #24]
 801517c:	3b01      	subs	r3, #1
 801517e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	69db      	ldr	r3, [r3, #28]
 8015184:	3b01      	subs	r3, #1
 8015186:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8015188:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	6a1b      	ldr	r3, [r3, #32]
 801518e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8015190:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	695b      	ldr	r3, [r3, #20]
 8015198:	3b01      	subs	r3, #1
 801519a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80151a0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80151a2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	689b      	ldr	r3, [r3, #8]
 80151a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80151ac:	d115      	bne.n	80151da <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80151b2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151b8:	3b01      	subs	r3, #1
 80151ba:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80151bc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80151c2:	3b01      	subs	r3, #1
 80151c4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80151c6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151ce:	3b01      	subs	r3, #1
 80151d0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80151d6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80151d8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d00a      	beq.n	80151f8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	430a      	orrs	r2, r1
 80151f4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015200:	4413      	add	r3, r2
 8015202:	2b00      	cmp	r3, #0
 8015204:	d011      	beq.n	801522a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801520e:	f023 0107 	bic.w	r1, r3, #7
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015216:	009b      	lsls	r3, r3, #2
 8015218:	3360      	adds	r3, #96	@ 0x60
 801521a:	443b      	add	r3, r7
 801521c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	430a      	orrs	r2, r1
 8015226:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801522e:	2b00      	cmp	r3, #0
 8015230:	d011      	beq.n	8015256 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801523a:	f023 0107 	bic.w	r1, r3, #7
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015242:	009b      	lsls	r3, r3, #2
 8015244:	3360      	adds	r3, #96	@ 0x60
 8015246:	443b      	add	r3, r7
 8015248:	f853 2c54 	ldr.w	r2, [r3, #-84]
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	430a      	orrs	r2, r1
 8015252:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801525a:	2b00      	cmp	r3, #0
 801525c:	d012      	beq.n	8015284 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8015266:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801526e:	009b      	lsls	r3, r3, #2
 8015270:	3360      	adds	r3, #96	@ 0x60
 8015272:	443b      	add	r3, r7
 8015274:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8015278:	011a      	lsls	r2, r3, #4
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	430a      	orrs	r2, r1
 8015280:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015288:	2b00      	cmp	r3, #0
 801528a:	d012      	beq.n	80152b2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8015294:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801529c:	009b      	lsls	r3, r3, #2
 801529e:	3360      	adds	r3, #96	@ 0x60
 80152a0:	443b      	add	r3, r7
 80152a2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80152a6:	021a      	lsls	r2, r3, #8
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	430a      	orrs	r2, r1
 80152ae:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	4a11      	ldr	r2, [pc, #68]	@ (80152fc <HAL_FDCAN_Init+0x3b8>)
 80152b8:	4293      	cmp	r3, r2
 80152ba:	d107      	bne.n	80152cc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	685b      	ldr	r3, [r3, #4]
 80152c0:	689a      	ldr	r2, [r3, #8]
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	685b      	ldr	r3, [r3, #4]
 80152c6:	f022 0203 	bic.w	r2, r2, #3
 80152ca:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	2200      	movs	r2, #0
 80152d0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	2200      	movs	r2, #0
 80152d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	2201      	movs	r2, #1
 80152e0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80152e4:	6878      	ldr	r0, [r7, #4]
 80152e6:	f000 fe4b 	bl	8015f80 <FDCAN_CalcultateRamBlockAddresses>
 80152ea:	4603      	mov	r3, r0
 80152ec:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80152f0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80152f4:	4618      	mov	r0, r3
 80152f6:	3760      	adds	r7, #96	@ 0x60
 80152f8:	46bd      	mov	sp, r7
 80152fa:	bd80      	pop	{r7, pc}
 80152fc:	4000a000 	.word	0x4000a000

08015300 <HAL_FDCAN_MspInit>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef *hfdcan)
{
 8015300:	b480      	push	{r7}
 8015302:	b083      	sub	sp, #12
 8015304:	af00      	add	r7, sp, #0
 8015306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hfdcan);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_MspInit could be implemented in the user file
   */
}
 8015308:	bf00      	nop
 801530a:	370c      	adds	r7, #12
 801530c:	46bd      	mov	sp, r7
 801530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015312:	4770      	bx	lr

08015314 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8015314:	b480      	push	{r7}
 8015316:	b087      	sub	sp, #28
 8015318:	af00      	add	r7, sp, #0
 801531a:	6078      	str	r0, [r7, #4]
 801531c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015324:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8015326:	7bfb      	ldrb	r3, [r7, #15]
 8015328:	2b01      	cmp	r3, #1
 801532a:	d002      	beq.n	8015332 <HAL_FDCAN_ConfigFilter+0x1e>
 801532c:	7bfb      	ldrb	r3, [r7, #15]
 801532e:	2b02      	cmp	r3, #2
 8015330:	d157      	bne.n	80153e2 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8015332:	683b      	ldr	r3, [r7, #0]
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d12b      	bne.n	8015392 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 801533a:	683b      	ldr	r3, [r7, #0]
 801533c:	68db      	ldr	r3, [r3, #12]
 801533e:	2b07      	cmp	r3, #7
 8015340:	d10d      	bne.n	801535e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8015342:	683b      	ldr	r3, [r7, #0]
 8015344:	691b      	ldr	r3, [r3, #16]
 8015346:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8015348:	683b      	ldr	r3, [r7, #0]
 801534a:	69db      	ldr	r3, [r3, #28]
 801534c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 801534e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8015350:	683b      	ldr	r3, [r7, #0]
 8015352:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8015354:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8015356:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 801535a:	617b      	str	r3, [r7, #20]
 801535c:	e00e      	b.n	801537c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 801535e:	683b      	ldr	r3, [r7, #0]
 8015360:	689b      	ldr	r3, [r3, #8]
 8015362:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8015364:	683b      	ldr	r3, [r7, #0]
 8015366:	68db      	ldr	r3, [r3, #12]
 8015368:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 801536a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 801536c:	683b      	ldr	r3, [r7, #0]
 801536e:	691b      	ldr	r3, [r3, #16]
 8015370:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8015372:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8015374:	683b      	ldr	r3, [r7, #0]
 8015376:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8015378:	4313      	orrs	r3, r2
 801537a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8015380:	683b      	ldr	r3, [r7, #0]
 8015382:	685b      	ldr	r3, [r3, #4]
 8015384:	009b      	lsls	r3, r3, #2
 8015386:	4413      	add	r3, r2
 8015388:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 801538a:	68bb      	ldr	r3, [r7, #8]
 801538c:	697a      	ldr	r2, [r7, #20]
 801538e:	601a      	str	r2, [r3, #0]
 8015390:	e025      	b.n	80153de <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8015392:	683b      	ldr	r3, [r7, #0]
 8015394:	68db      	ldr	r3, [r3, #12]
 8015396:	075a      	lsls	r2, r3, #29
 8015398:	683b      	ldr	r3, [r7, #0]
 801539a:	691b      	ldr	r3, [r3, #16]
 801539c:	4313      	orrs	r3, r2
 801539e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80153a0:	683b      	ldr	r3, [r7, #0]
 80153a2:	68db      	ldr	r3, [r3, #12]
 80153a4:	2b07      	cmp	r3, #7
 80153a6:	d103      	bne.n	80153b0 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80153a8:	683b      	ldr	r3, [r7, #0]
 80153aa:	699b      	ldr	r3, [r3, #24]
 80153ac:	613b      	str	r3, [r7, #16]
 80153ae:	e006      	b.n	80153be <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80153b0:	683b      	ldr	r3, [r7, #0]
 80153b2:	689b      	ldr	r3, [r3, #8]
 80153b4:	079a      	lsls	r2, r3, #30
 80153b6:	683b      	ldr	r3, [r7, #0]
 80153b8:	695b      	ldr	r3, [r3, #20]
 80153ba:	4313      	orrs	r3, r2
 80153bc:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80153c2:	683b      	ldr	r3, [r7, #0]
 80153c4:	685b      	ldr	r3, [r3, #4]
 80153c6:	00db      	lsls	r3, r3, #3
 80153c8:	4413      	add	r3, r2
 80153ca:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80153cc:	68bb      	ldr	r3, [r7, #8]
 80153ce:	697a      	ldr	r2, [r7, #20]
 80153d0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80153d2:	68bb      	ldr	r3, [r7, #8]
 80153d4:	3304      	adds	r3, #4
 80153d6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80153d8:	68bb      	ldr	r3, [r7, #8]
 80153da:	693a      	ldr	r2, [r7, #16]
 80153dc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80153de:	2300      	movs	r3, #0
 80153e0:	e008      	b.n	80153f4 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80153e8:	f043 0202 	orr.w	r2, r3, #2
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80153f2:	2301      	movs	r3, #1
  }
}
 80153f4:	4618      	mov	r0, r3
 80153f6:	371c      	adds	r7, #28
 80153f8:	46bd      	mov	sp, r7
 80153fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fe:	4770      	bx	lr

08015400 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8015400:	b480      	push	{r7}
 8015402:	b083      	sub	sp, #12
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801540e:	b2db      	uxtb	r3, r3
 8015410:	2b01      	cmp	r3, #1
 8015412:	d111      	bne.n	8015438 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	2202      	movs	r2, #2
 8015418:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	699a      	ldr	r2, [r3, #24]
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	f022 0201 	bic.w	r2, r2, #1
 801542a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	2200      	movs	r2, #0
 8015430:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8015434:	2300      	movs	r3, #0
 8015436:	e008      	b.n	801544a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801543e:	f043 0204 	orr.w	r2, r3, #4
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8015448:	2301      	movs	r3, #1
  }
}
 801544a:	4618      	mov	r0, r3
 801544c:	370c      	adds	r7, #12
 801544e:	46bd      	mov	sp, r7
 8015450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015454:	4770      	bx	lr

08015456 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8015456:	b580      	push	{r7, lr}
 8015458:	b086      	sub	sp, #24
 801545a:	af00      	add	r7, sp, #0
 801545c:	60f8      	str	r0, [r7, #12]
 801545e:	60b9      	str	r1, [r7, #8]
 8015460:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015468:	b2db      	uxtb	r3, r3
 801546a:	2b02      	cmp	r3, #2
 801546c:	d141      	bne.n	80154f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8015476:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 801547a:	2b00      	cmp	r3, #0
 801547c:	d109      	bne.n	8015492 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8015484:	f043 0220 	orr.w	r2, r3, #32
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 801548e:	2301      	movs	r3, #1
 8015490:	e038      	b.n	8015504 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 801549a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d009      	beq.n	80154b6 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80154a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80154b2:	2301      	movs	r3, #1
 80154b4:	e026      	b.n	8015504 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80154be:	0c1b      	lsrs	r3, r3, #16
 80154c0:	f003 031f 	and.w	r3, r3, #31
 80154c4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80154c6:	697b      	ldr	r3, [r7, #20]
 80154c8:	687a      	ldr	r2, [r7, #4]
 80154ca:	68b9      	ldr	r1, [r7, #8]
 80154cc:	68f8      	ldr	r0, [r7, #12]
 80154ce:	f000 fedd 	bl	801628c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	2101      	movs	r1, #1
 80154d8:	697a      	ldr	r2, [r7, #20]
 80154da:	fa01 f202 	lsl.w	r2, r1, r2
 80154de:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80154e2:	2201      	movs	r2, #1
 80154e4:	697b      	ldr	r3, [r7, #20]
 80154e6:	409a      	lsls	r2, r3
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80154ee:	2300      	movs	r3, #0
 80154f0:	e008      	b.n	8015504 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80154f8:	f043 0208 	orr.w	r2, r3, #8
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8015502:	2301      	movs	r3, #1
  }
}
 8015504:	4618      	mov	r0, r3
 8015506:	3718      	adds	r7, #24
 8015508:	46bd      	mov	sp, r7
 801550a:	bd80      	pop	{r7, pc}

0801550c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 801550c:	b480      	push	{r7}
 801550e:	b08b      	sub	sp, #44	@ 0x2c
 8015510:	af00      	add	r7, sp, #0
 8015512:	60f8      	str	r0, [r7, #12]
 8015514:	60b9      	str	r1, [r7, #8]
 8015516:	607a      	str	r2, [r7, #4]
 8015518:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 801551a:	2300      	movs	r3, #0
 801551c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015524:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8015526:	7efb      	ldrb	r3, [r7, #27]
 8015528:	2b02      	cmp	r3, #2
 801552a:	f040 814b 	bne.w	80157c4 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 801552e:	68bb      	ldr	r3, [r7, #8]
 8015530:	2b40      	cmp	r3, #64	@ 0x40
 8015532:	d14d      	bne.n	80155d0 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801553c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8015540:	2b00      	cmp	r3, #0
 8015542:	d109      	bne.n	8015558 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801554a:	f043 0220 	orr.w	r2, r3, #32
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8015554:	2301      	movs	r3, #1
 8015556:	e13e      	b.n	80157d6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015560:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015564:	2b00      	cmp	r3, #0
 8015566:	d109      	bne.n	801557c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801556e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8015578:	2301      	movs	r3, #1
 801557a:	e12c      	b.n	80157d6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015584:	0e1b      	lsrs	r3, r3, #24
 8015586:	f003 0301 	and.w	r3, r3, #1
 801558a:	2b01      	cmp	r3, #1
 801558c:	d10b      	bne.n	80155a6 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015596:	0fdb      	lsrs	r3, r3, #31
 8015598:	f003 0301 	and.w	r3, r3, #1
 801559c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80155a0:	d101      	bne.n	80155a6 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80155a2:	2301      	movs	r3, #1
 80155a4:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80155ae:	0a1b      	lsrs	r3, r3, #8
 80155b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80155b4:	69fa      	ldr	r2, [r7, #28]
 80155b6:	4413      	add	r3, r2
 80155b8:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80155c2:	69f9      	ldr	r1, [r7, #28]
 80155c4:	fb01 f303 	mul.w	r3, r1, r3
 80155c8:	009b      	lsls	r3, r3, #2
 80155ca:	4413      	add	r3, r2
 80155cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80155ce:	e069      	b.n	80156a4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80155d0:	68bb      	ldr	r3, [r7, #8]
 80155d2:	2b41      	cmp	r3, #65	@ 0x41
 80155d4:	d14d      	bne.n	8015672 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80155de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d109      	bne.n	80155fa <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80155ec:	f043 0220 	orr.w	r2, r3, #32
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80155f6:	2301      	movs	r3, #1
 80155f8:	e0ed      	b.n	80157d6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015602:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015606:	2b00      	cmp	r3, #0
 8015608:	d109      	bne.n	801561e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8015610:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 801561a:	2301      	movs	r3, #1
 801561c:	e0db      	b.n	80157d6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015626:	0e1b      	lsrs	r3, r3, #24
 8015628:	f003 0301 	and.w	r3, r3, #1
 801562c:	2b01      	cmp	r3, #1
 801562e:	d10b      	bne.n	8015648 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8015638:	0fdb      	lsrs	r3, r3, #31
 801563a:	f003 0301 	and.w	r3, r3, #1
 801563e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015642:	d101      	bne.n	8015648 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8015644:	2301      	movs	r3, #1
 8015646:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015650:	0a1b      	lsrs	r3, r3, #8
 8015652:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015656:	69fa      	ldr	r2, [r7, #28]
 8015658:	4413      	add	r3, r2
 801565a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015664:	69f9      	ldr	r1, [r7, #28]
 8015666:	fb01 f303 	mul.w	r3, r1, r3
 801566a:	009b      	lsls	r3, r3, #2
 801566c:	4413      	add	r3, r2
 801566e:	627b      	str	r3, [r7, #36]	@ 0x24
 8015670:	e018      	b.n	80156a4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015676:	68ba      	ldr	r2, [r7, #8]
 8015678:	429a      	cmp	r2, r3
 801567a:	d309      	bcc.n	8015690 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8015682:	f043 0220 	orr.w	r2, r3, #32
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 801568c:	2301      	movs	r3, #1
 801568e:	e0a2      	b.n	80157d6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015698:	68b9      	ldr	r1, [r7, #8]
 801569a:	fb01 f303 	mul.w	r3, r1, r3
 801569e:	009b      	lsls	r3, r3, #2
 80156a0:	4413      	add	r3, r2
 80156a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80156a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	685b      	ldr	r3, [r3, #4]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d107      	bne.n	80156c8 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80156b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	0c9b      	lsrs	r3, r3, #18
 80156be:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	601a      	str	r2, [r3, #0]
 80156c6:	e005      	b.n	80156d4 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80156c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80156d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80156e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80156ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156ee:	3304      	adds	r3, #4
 80156f0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80156f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	b29a      	uxth	r2, r3
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80156fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8015708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8015714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8015720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	0e1b      	lsrs	r3, r3, #24
 8015726:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 801572e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	0fda      	lsrs	r2, r3, #31
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8015738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801573a:	3304      	adds	r3, #4
 801573c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 801573e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015740:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8015742:	2300      	movs	r3, #0
 8015744:	623b      	str	r3, [r7, #32]
 8015746:	e00a      	b.n	801575e <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8015748:	697a      	ldr	r2, [r7, #20]
 801574a:	6a3b      	ldr	r3, [r7, #32]
 801574c:	441a      	add	r2, r3
 801574e:	6839      	ldr	r1, [r7, #0]
 8015750:	6a3b      	ldr	r3, [r7, #32]
 8015752:	440b      	add	r3, r1
 8015754:	7812      	ldrb	r2, [r2, #0]
 8015756:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8015758:	6a3b      	ldr	r3, [r7, #32]
 801575a:	3301      	adds	r3, #1
 801575c:	623b      	str	r3, [r7, #32]
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	68db      	ldr	r3, [r3, #12]
 8015762:	0c1b      	lsrs	r3, r3, #16
 8015764:	4a1f      	ldr	r2, [pc, #124]	@ (80157e4 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8015766:	5cd3      	ldrb	r3, [r2, r3]
 8015768:	461a      	mov	r2, r3
 801576a:	6a3b      	ldr	r3, [r7, #32]
 801576c:	4293      	cmp	r3, r2
 801576e:	d3eb      	bcc.n	8015748 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8015770:	68bb      	ldr	r3, [r7, #8]
 8015772:	2b40      	cmp	r3, #64	@ 0x40
 8015774:	d105      	bne.n	8015782 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	69fa      	ldr	r2, [r7, #28]
 801577c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8015780:	e01e      	b.n	80157c0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8015782:	68bb      	ldr	r3, [r7, #8]
 8015784:	2b41      	cmp	r3, #65	@ 0x41
 8015786:	d105      	bne.n	8015794 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	69fa      	ldr	r2, [r7, #28]
 801578e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8015792:	e015      	b.n	80157c0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8015794:	68bb      	ldr	r3, [r7, #8]
 8015796:	2b1f      	cmp	r3, #31
 8015798:	d808      	bhi.n	80157ac <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	2101      	movs	r1, #1
 80157a0:	68ba      	ldr	r2, [r7, #8]
 80157a2:	fa01 f202 	lsl.w	r2, r1, r2
 80157a6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80157aa:	e009      	b.n	80157c0 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80157ac:	68bb      	ldr	r3, [r7, #8]
 80157ae:	f003 021f 	and.w	r2, r3, #31
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	2101      	movs	r1, #1
 80157b8:	fa01 f202 	lsl.w	r2, r1, r2
 80157bc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80157c0:	2300      	movs	r3, #0
 80157c2:	e008      	b.n	80157d6 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80157ca:	f043 0208 	orr.w	r2, r3, #8
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80157d4:	2301      	movs	r3, #1
  }
}
 80157d6:	4618      	mov	r0, r3
 80157d8:	372c      	adds	r7, #44	@ 0x2c
 80157da:	46bd      	mov	sp, r7
 80157dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e0:	4770      	bx	lr
 80157e2:	bf00      	nop
 80157e4:	08044fa4 	.word	0x08044fa4

080157e8 <HAL_FDCAN_GetProtocolStatus>:
  *         the configuration information for the specified FDCAN.
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(FDCAN_HandleTypeDef *hfdcan, FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 80157e8:	b480      	push	{r7}
 80157ea:	b085      	sub	sp, #20
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	6078      	str	r0, [r7, #4]
 80157f0:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80157f8:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	f003 0207 	and.w	r2, r3, #7
 8015800:	683b      	ldr	r3, [r7, #0]
 8015802:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	0a1b      	lsrs	r3, r3, #8
 8015808:	f003 0207 	and.w	r2, r3, #7
 801580c:	683b      	ldr	r3, [r7, #0]
 801580e:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	f003 0218 	and.w	r2, r3, #24
 8015816:	683b      	ldr	r3, [r7, #0]
 8015818:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	095b      	lsrs	r3, r3, #5
 801581e:	f003 0201 	and.w	r2, r3, #1
 8015822:	683b      	ldr	r3, [r7, #0]
 8015824:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	099b      	lsrs	r3, r3, #6
 801582a:	f003 0201 	and.w	r2, r3, #1
 801582e:	683b      	ldr	r3, [r7, #0]
 8015830:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	09db      	lsrs	r3, r3, #7
 8015836:	f003 0201 	and.w	r2, r3, #1
 801583a:	683b      	ldr	r3, [r7, #0]
 801583c:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	0adb      	lsrs	r3, r3, #11
 8015842:	f003 0201 	and.w	r2, r3, #1
 8015846:	683b      	ldr	r3, [r7, #0]
 8015848:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	0b1b      	lsrs	r3, r3, #12
 801584e:	f003 0201 	and.w	r2, r3, #1
 8015852:	683b      	ldr	r3, [r7, #0]
 8015854:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	0b5b      	lsrs	r3, r3, #13
 801585a:	f003 0201 	and.w	r2, r3, #1
 801585e:	683b      	ldr	r3, [r7, #0]
 8015860:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	0b9b      	lsrs	r3, r3, #14
 8015866:	f003 0201 	and.w	r2, r3, #1
 801586a:	683b      	ldr	r3, [r7, #0]
 801586c:	625a      	str	r2, [r3, #36]	@ 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	0c1b      	lsrs	r3, r3, #16
 8015872:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015876:	683b      	ldr	r3, [r7, #0]
 8015878:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Return function status */
  return HAL_OK;
 801587a:	2300      	movs	r3, #0
}
 801587c:	4618      	mov	r0, r3
 801587e:	3714      	adds	r7, #20
 8015880:	46bd      	mov	sp, r7
 8015882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015886:	4770      	bx	lr

08015888 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Level Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 8015888:	b480      	push	{r7}
 801588a:	b085      	sub	sp, #20
 801588c:	af00      	add	r7, sp, #0
 801588e:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8015898:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801589c:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 801589e:	68fb      	ldr	r3, [r7, #12]
}
 80158a0:	4618      	mov	r0, r3
 80158a2:	3714      	adds	r7, #20
 80158a4:	46bd      	mov	sp, r7
 80158a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158aa:	4770      	bx	lr

080158ac <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80158ac:	b480      	push	{r7}
 80158ae:	b087      	sub	sp, #28
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	60f8      	str	r0, [r7, #12]
 80158b4:	60b9      	str	r1, [r7, #8]
 80158b6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80158be:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80158c0:	7dfb      	ldrb	r3, [r7, #23]
 80158c2:	2b01      	cmp	r3, #1
 80158c4:	d002      	beq.n	80158cc <HAL_FDCAN_ActivateNotification+0x20>
 80158c6:	7dfb      	ldrb	r3, [r7, #23]
 80158c8:	2b02      	cmp	r3, #2
 80158ca:	d155      	bne.n	8015978 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80158d2:	68bb      	ldr	r3, [r7, #8]
 80158d4:	4013      	ands	r3, r2
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d108      	bne.n	80158ec <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	f042 0201 	orr.w	r2, r2, #1
 80158e8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80158ea:	e014      	b.n	8015916 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80158f2:	68bb      	ldr	r3, [r7, #8]
 80158f4:	4013      	ands	r3, r2
 80158f6:	68ba      	ldr	r2, [r7, #8]
 80158f8:	429a      	cmp	r2, r3
 80158fa:	d108      	bne.n	801590e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	f042 0202 	orr.w	r2, r2, #2
 801590a:	65da      	str	r2, [r3, #92]	@ 0x5c
 801590c:	e003      	b.n	8015916 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	2203      	movs	r2, #3
 8015914:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8015916:	68bb      	ldr	r3, [r7, #8]
 8015918:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801591c:	2b00      	cmp	r3, #0
 801591e:	d009      	beq.n	8015934 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	687a      	ldr	r2, [r7, #4]
 801592e:	430a      	orrs	r2, r1
 8015930:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8015934:	68bb      	ldr	r3, [r7, #8]
 8015936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801593a:	2b00      	cmp	r3, #0
 801593c:	d009      	beq.n	8015952 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	687a      	ldr	r2, [r7, #4]
 801594c:	430a      	orrs	r2, r1
 801594e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8015958:	68ba      	ldr	r2, [r7, #8]
 801595a:	4b0f      	ldr	r3, [pc, #60]	@ (8015998 <HAL_FDCAN_ActivateNotification+0xec>)
 801595c:	4013      	ands	r3, r2
 801595e:	68fa      	ldr	r2, [r7, #12]
 8015960:	6812      	ldr	r2, [r2, #0]
 8015962:	430b      	orrs	r3, r1
 8015964:	6553      	str	r3, [r2, #84]	@ 0x54
 8015966:	4b0d      	ldr	r3, [pc, #52]	@ (801599c <HAL_FDCAN_ActivateNotification+0xf0>)
 8015968:	695a      	ldr	r2, [r3, #20]
 801596a:	68bb      	ldr	r3, [r7, #8]
 801596c:	0f9b      	lsrs	r3, r3, #30
 801596e:	490b      	ldr	r1, [pc, #44]	@ (801599c <HAL_FDCAN_ActivateNotification+0xf0>)
 8015970:	4313      	orrs	r3, r2
 8015972:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8015974:	2300      	movs	r3, #0
 8015976:	e008      	b.n	801598a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801597e:	f043 0202 	orr.w	r2, r3, #2
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8015988:	2301      	movs	r3, #1
  }
}
 801598a:	4618      	mov	r0, r3
 801598c:	371c      	adds	r7, #28
 801598e:	46bd      	mov	sp, r7
 8015990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015994:	4770      	bx	lr
 8015996:	bf00      	nop
 8015998:	3fcfffff 	.word	0x3fcfffff
 801599c:	4000a800 	.word	0x4000a800

080159a0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b096      	sub	sp, #88	@ 0x58
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80159a8:	4b95      	ldr	r3, [pc, #596]	@ (8015c00 <HAL_FDCAN_IRQHandler+0x260>)
 80159aa:	691b      	ldr	r3, [r3, #16]
 80159ac:	079b      	lsls	r3, r3, #30
 80159ae:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80159b0:	4b93      	ldr	r3, [pc, #588]	@ (8015c00 <HAL_FDCAN_IRQHandler+0x260>)
 80159b2:	695b      	ldr	r3, [r3, #20]
 80159b4:	079b      	lsls	r3, r3, #30
 80159b6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80159b8:	4013      	ands	r3, r2
 80159ba:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80159c2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80159c6:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80159ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80159d0:	4013      	ands	r3, r2
 80159d2:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80159da:	f003 030f 	and.w	r3, r3, #15
 80159de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80159e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80159e8:	4013      	ands	r3, r2
 80159ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80159f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80159f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80159fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015a00:	4013      	ands	r3, r2
 8015a02:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015a0a:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8015a0e:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015a16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015a18:	4013      	ands	r3, r2
 8015a1a:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015a22:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8015a26:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015a2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015a30:	4013      	ands	r3, r2
 8015a32:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015a42:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8015a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d00f      	beq.n	8015a6e <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8015a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d00a      	beq.n	8015a6e <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015a60:	651a      	str	r2, [r3, #80]	@ 0x50
 8015a62:	4b67      	ldr	r3, [pc, #412]	@ (8015c00 <HAL_FDCAN_IRQHandler+0x260>)
 8015a64:	2200      	movs	r2, #0
 8015a66:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8015a68:	6878      	ldr	r0, [r7, #4]
 8015a6a:	f000 fa39 	bl	8015ee0 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8015a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d01c      	beq.n	8015ab2 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8015a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d017      	beq.n	8015ab2 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8015a8a:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8015a94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015a96:	4013      	ands	r3, r2
 8015a98:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8015aa2:	651a      	str	r2, [r3, #80]	@ 0x50
 8015aa4:	4b56      	ldr	r3, [pc, #344]	@ (8015c00 <HAL_FDCAN_IRQHandler+0x260>)
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8015aaa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015aac:	6878      	ldr	r0, [r7, #4]
 8015aae:	f000 f9ee 	bl	8015e8e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8015ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d00d      	beq.n	8015ad4 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	681a      	ldr	r2, [r3, #0]
 8015abc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8015abe:	4b51      	ldr	r3, [pc, #324]	@ (8015c04 <HAL_FDCAN_IRQHandler+0x264>)
 8015ac0:	400b      	ands	r3, r1
 8015ac2:	6513      	str	r3, [r2, #80]	@ 0x50
 8015ac4:	4a4e      	ldr	r2, [pc, #312]	@ (8015c00 <HAL_FDCAN_IRQHandler+0x260>)
 8015ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015ac8:	0f9b      	lsrs	r3, r3, #30
 8015aca:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8015acc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8015ace:	6878      	ldr	r0, [r7, #4]
 8015ad0:	f000 f9b2 	bl	8015e38 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8015ad4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d00d      	beq.n	8015af6 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	681a      	ldr	r2, [r3, #0]
 8015ade:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015ae0:	4b48      	ldr	r3, [pc, #288]	@ (8015c04 <HAL_FDCAN_IRQHandler+0x264>)
 8015ae2:	400b      	ands	r3, r1
 8015ae4:	6513      	str	r3, [r2, #80]	@ 0x50
 8015ae6:	4a46      	ldr	r2, [pc, #280]	@ (8015c00 <HAL_FDCAN_IRQHandler+0x260>)
 8015ae8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015aea:	0f9b      	lsrs	r3, r3, #30
 8015aec:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8015aee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015af0:	6878      	ldr	r0, [r7, #4]
 8015af2:	f000 f9ac 	bl	8015e4e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8015af6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d00d      	beq.n	8015b18 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	681a      	ldr	r2, [r3, #0]
 8015b00:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8015b02:	4b40      	ldr	r3, [pc, #256]	@ (8015c04 <HAL_FDCAN_IRQHandler+0x264>)
 8015b04:	400b      	ands	r3, r1
 8015b06:	6513      	str	r3, [r2, #80]	@ 0x50
 8015b08:	4a3d      	ldr	r2, [pc, #244]	@ (8015c00 <HAL_FDCAN_IRQHandler+0x260>)
 8015b0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015b0c:	0f9b      	lsrs	r3, r3, #30
 8015b0e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8015b10:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8015b12:	6878      	ldr	r0, [r7, #4]
 8015b14:	f7f6 fd60 	bl	800c5d8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8015b18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d00d      	beq.n	8015b3a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	681a      	ldr	r2, [r3, #0]
 8015b22:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8015b24:	4b37      	ldr	r3, [pc, #220]	@ (8015c04 <HAL_FDCAN_IRQHandler+0x264>)
 8015b26:	400b      	ands	r3, r1
 8015b28:	6513      	str	r3, [r2, #80]	@ 0x50
 8015b2a:	4a35      	ldr	r2, [pc, #212]	@ (8015c00 <HAL_FDCAN_IRQHandler+0x260>)
 8015b2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015b2e:	0f9b      	lsrs	r3, r3, #30
 8015b30:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8015b32:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8015b34:	6878      	ldr	r0, [r7, #4]
 8015b36:	f7f6 fd5b 	bl	800c5f0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8015b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015b3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d00f      	beq.n	8015b64 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8015b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d00a      	beq.n	8015b64 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015b56:	651a      	str	r2, [r3, #80]	@ 0x50
 8015b58:	4b29      	ldr	r3, [pc, #164]	@ (8015c00 <HAL_FDCAN_IRQHandler+0x260>)
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8015b5e:	6878      	ldr	r0, [r7, #4]
 8015b60:	f000 f980 	bl	8015e64 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8015b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015b66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d01c      	beq.n	8015ba8 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8015b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d017      	beq.n	8015ba8 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8015b80:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015b8c:	4013      	ands	r3, r2
 8015b8e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015b98:	651a      	str	r2, [r3, #80]	@ 0x50
 8015b9a:	4b19      	ldr	r3, [pc, #100]	@ (8015c00 <HAL_FDCAN_IRQHandler+0x260>)
 8015b9c:	2200      	movs	r2, #0
 8015b9e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8015ba0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015ba2:	6878      	ldr	r0, [r7, #4]
 8015ba4:	f000 f968 	bl	8015e78 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8015ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015baa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d00f      	beq.n	8015bd2 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8015bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015bb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d00a      	beq.n	8015bd2 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8015bc4:	651a      	str	r2, [r3, #80]	@ 0x50
 8015bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8015c00 <HAL_FDCAN_IRQHandler+0x260>)
 8015bc8:	2200      	movs	r2, #0
 8015bca:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8015bcc:	6878      	ldr	r0, [r7, #4]
 8015bce:	f000 f969 	bl	8015ea4 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8015bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015bd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d015      	beq.n	8015c08 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8015bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015bde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d010      	beq.n	8015c08 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8015bee:	651a      	str	r2, [r3, #80]	@ 0x50
 8015bf0:	4b03      	ldr	r3, [pc, #12]	@ (8015c00 <HAL_FDCAN_IRQHandler+0x260>)
 8015bf2:	2200      	movs	r2, #0
 8015bf4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8015bf6:	6878      	ldr	r0, [r7, #4]
 8015bf8:	f000 f95e 	bl	8015eb8 <HAL_FDCAN_TimestampWraparoundCallback>
 8015bfc:	e004      	b.n	8015c08 <HAL_FDCAN_IRQHandler+0x268>
 8015bfe:	bf00      	nop
 8015c00:	4000a800 	.word	0x4000a800
 8015c04:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8015c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015c0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d00f      	beq.n	8015c32 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8015c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d00a      	beq.n	8015c32 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8015c24:	651a      	str	r2, [r3, #80]	@ 0x50
 8015c26:	4b81      	ldr	r3, [pc, #516]	@ (8015e2c <HAL_FDCAN_IRQHandler+0x48c>)
 8015c28:	2200      	movs	r2, #0
 8015c2a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8015c2c:	6878      	ldr	r0, [r7, #4]
 8015c2e:	f000 f94d 	bl	8015ecc <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8015c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d014      	beq.n	8015c66 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8015c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d00f      	beq.n	8015c66 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8015c4e:	651a      	str	r2, [r3, #80]	@ 0x50
 8015c50:	4b76      	ldr	r3, [pc, #472]	@ (8015e2c <HAL_FDCAN_IRQHandler+0x48c>)
 8015c52:	2200      	movs	r2, #0
 8015c54:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8015c5c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8015c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d00d      	beq.n	8015c88 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	681a      	ldr	r2, [r3, #0]
 8015c70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015c72:	4b6f      	ldr	r3, [pc, #444]	@ (8015e30 <HAL_FDCAN_IRQHandler+0x490>)
 8015c74:	400b      	ands	r3, r1
 8015c76:	6513      	str	r3, [r2, #80]	@ 0x50
 8015c78:	4a6c      	ldr	r2, [pc, #432]	@ (8015e2c <HAL_FDCAN_IRQHandler+0x48c>)
 8015c7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015c7c:	0f9b      	lsrs	r3, r3, #30
 8015c7e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8015c80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015c82:	6878      	ldr	r0, [r7, #4]
 8015c84:	f000 f936 	bl	8015ef4 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8015c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d011      	beq.n	8015cb2 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	681a      	ldr	r2, [r3, #0]
 8015c92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8015c94:	4b66      	ldr	r3, [pc, #408]	@ (8015e30 <HAL_FDCAN_IRQHandler+0x490>)
 8015c96:	400b      	ands	r3, r1
 8015c98:	6513      	str	r3, [r2, #80]	@ 0x50
 8015c9a:	4a64      	ldr	r2, [pc, #400]	@ (8015e2c <HAL_FDCAN_IRQHandler+0x48c>)
 8015c9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015c9e:	0f9b      	lsrs	r3, r3, #30
 8015ca0:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8015ca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015caa:	431a      	orrs	r2, r3
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	4a5f      	ldr	r2, [pc, #380]	@ (8015e34 <HAL_FDCAN_IRQHandler+0x494>)
 8015cb8:	4293      	cmp	r3, r2
 8015cba:	f040 80aa 	bne.w	8015e12 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	685b      	ldr	r3, [r3, #4]
 8015cc2:	689b      	ldr	r3, [r3, #8]
 8015cc4:	f003 0303 	and.w	r3, r3, #3
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	f000 80a2 	beq.w	8015e12 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	685b      	ldr	r3, [r3, #4]
 8015cd2:	6a1b      	ldr	r3, [r3, #32]
 8015cd4:	f003 030f 	and.w	r3, r3, #15
 8015cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	685b      	ldr	r3, [r3, #4]
 8015cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ce0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015ce2:	4013      	ands	r3, r2
 8015ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	685b      	ldr	r3, [r3, #4]
 8015cea:	6a1b      	ldr	r3, [r3, #32]
 8015cec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8015cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	685b      	ldr	r3, [r3, #4]
 8015cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015cf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015cfa:	4013      	ands	r3, r2
 8015cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	685b      	ldr	r3, [r3, #4]
 8015d02:	6a1b      	ldr	r3, [r3, #32]
 8015d04:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8015d08:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	685b      	ldr	r3, [r3, #4]
 8015d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015d12:	4013      	ands	r3, r2
 8015d14:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	685b      	ldr	r3, [r3, #4]
 8015d1a:	6a1b      	ldr	r3, [r3, #32]
 8015d1c:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8015d20:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	685b      	ldr	r3, [r3, #4]
 8015d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d28:	6a3a      	ldr	r2, [r7, #32]
 8015d2a:	4013      	ands	r3, r2
 8015d2c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	685b      	ldr	r3, [r3, #4]
 8015d32:	6a1b      	ldr	r3, [r3, #32]
 8015d34:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8015d38:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	685b      	ldr	r3, [r3, #4]
 8015d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d40:	69fa      	ldr	r2, [r7, #28]
 8015d42:	4013      	ands	r3, r2
 8015d44:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	685b      	ldr	r3, [r3, #4]
 8015d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d4c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	685b      	ldr	r3, [r3, #4]
 8015d52:	6a1b      	ldr	r3, [r3, #32]
 8015d54:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8015d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d007      	beq.n	8015d6c <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	685b      	ldr	r3, [r3, #4]
 8015d60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015d62:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8015d64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015d66:	6878      	ldr	r0, [r7, #4]
 8015d68:	f000 f8cf 	bl	8015f0a <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8015d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d007      	beq.n	8015d82 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	685b      	ldr	r3, [r3, #4]
 8015d76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015d78:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8015d7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015d7c:	6878      	ldr	r0, [r7, #4]
 8015d7e:	f000 f8cf 	bl	8015f20 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8015d82:	69bb      	ldr	r3, [r7, #24]
 8015d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d019      	beq.n	8015dc0 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8015d8c:	697b      	ldr	r3, [r7, #20]
 8015d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d014      	beq.n	8015dc0 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	685b      	ldr	r3, [r3, #4]
 8015d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015d9c:	0c1b      	lsrs	r3, r3, #16
 8015d9e:	b29b      	uxth	r3, r3
 8015da0:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	685b      	ldr	r3, [r3, #4]
 8015da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015da8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015dac:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	685b      	ldr	r3, [r3, #4]
 8015db2:	2240      	movs	r2, #64	@ 0x40
 8015db4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8015db6:	68fa      	ldr	r2, [r7, #12]
 8015db8:	6939      	ldr	r1, [r7, #16]
 8015dba:	6878      	ldr	r0, [r7, #4]
 8015dbc:	f000 f8bb 	bl	8015f36 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8015dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d007      	beq.n	8015dd6 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	685b      	ldr	r3, [r3, #4]
 8015dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015dcc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8015dce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015dd0:	6878      	ldr	r0, [r7, #4]
 8015dd2:	f000 f8bc 	bl	8015f4e <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8015dd6:	6a3b      	ldr	r3, [r7, #32]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d00b      	beq.n	8015df4 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	685b      	ldr	r3, [r3, #4]
 8015de0:	6a3a      	ldr	r2, [r7, #32]
 8015de2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8015dea:	6a3b      	ldr	r3, [r7, #32]
 8015dec:	431a      	orrs	r2, r3
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8015df4:	69fb      	ldr	r3, [r7, #28]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d00b      	beq.n	8015e12 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	685b      	ldr	r3, [r3, #4]
 8015dfe:	69fa      	ldr	r2, [r7, #28]
 8015e00:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8015e08:	69fb      	ldr	r3, [r7, #28]
 8015e0a:	431a      	orrs	r2, r3
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d002      	beq.n	8015e22 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8015e1c:	6878      	ldr	r0, [r7, #4]
 8015e1e:	f7f6 fc89 	bl	800c734 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8015e22:	bf00      	nop
 8015e24:	3758      	adds	r7, #88	@ 0x58
 8015e26:	46bd      	mov	sp, r7
 8015e28:	bd80      	pop	{r7, pc}
 8015e2a:	bf00      	nop
 8015e2c:	4000a800 	.word	0x4000a800
 8015e30:	3fcfffff 	.word	0x3fcfffff
 8015e34:	4000a000 	.word	0x4000a000

08015e38 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8015e38:	b480      	push	{r7}
 8015e3a:	b083      	sub	sp, #12
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	6078      	str	r0, [r7, #4]
 8015e40:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8015e42:	bf00      	nop
 8015e44:	370c      	adds	r7, #12
 8015e46:	46bd      	mov	sp, r7
 8015e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e4c:	4770      	bx	lr

08015e4e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8015e4e:	b480      	push	{r7}
 8015e50:	b083      	sub	sp, #12
 8015e52:	af00      	add	r7, sp, #0
 8015e54:	6078      	str	r0, [r7, #4]
 8015e56:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8015e58:	bf00      	nop
 8015e5a:	370c      	adds	r7, #12
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e62:	4770      	bx	lr

08015e64 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8015e64:	b480      	push	{r7}
 8015e66:	b083      	sub	sp, #12
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8015e6c:	bf00      	nop
 8015e6e:	370c      	adds	r7, #12
 8015e70:	46bd      	mov	sp, r7
 8015e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e76:	4770      	bx	lr

08015e78 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8015e78:	b480      	push	{r7}
 8015e7a:	b083      	sub	sp, #12
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	6078      	str	r0, [r7, #4]
 8015e80:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8015e82:	bf00      	nop
 8015e84:	370c      	adds	r7, #12
 8015e86:	46bd      	mov	sp, r7
 8015e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e8c:	4770      	bx	lr

08015e8e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8015e8e:	b480      	push	{r7}
 8015e90:	b083      	sub	sp, #12
 8015e92:	af00      	add	r7, sp, #0
 8015e94:	6078      	str	r0, [r7, #4]
 8015e96:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8015e98:	bf00      	nop
 8015e9a:	370c      	adds	r7, #12
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea2:	4770      	bx	lr

08015ea4 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8015ea4:	b480      	push	{r7}
 8015ea6:	b083      	sub	sp, #12
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8015eac:	bf00      	nop
 8015eae:	370c      	adds	r7, #12
 8015eb0:	46bd      	mov	sp, r7
 8015eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eb6:	4770      	bx	lr

08015eb8 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8015eb8:	b480      	push	{r7}
 8015eba:	b083      	sub	sp, #12
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8015ec0:	bf00      	nop
 8015ec2:	370c      	adds	r7, #12
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eca:	4770      	bx	lr

08015ecc <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8015ecc:	b480      	push	{r7}
 8015ece:	b083      	sub	sp, #12
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8015ed4:	bf00      	nop
 8015ed6:	370c      	adds	r7, #12
 8015ed8:	46bd      	mov	sp, r7
 8015eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ede:	4770      	bx	lr

08015ee0 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8015ee0:	b480      	push	{r7}
 8015ee2:	b083      	sub	sp, #12
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8015ee8:	bf00      	nop
 8015eea:	370c      	adds	r7, #12
 8015eec:	46bd      	mov	sp, r7
 8015eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ef2:	4770      	bx	lr

08015ef4 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8015ef4:	b480      	push	{r7}
 8015ef6:	b083      	sub	sp, #12
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	6078      	str	r0, [r7, #4]
 8015efc:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8015efe:	bf00      	nop
 8015f00:	370c      	adds	r7, #12
 8015f02:	46bd      	mov	sp, r7
 8015f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f08:	4770      	bx	lr

08015f0a <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8015f0a:	b480      	push	{r7}
 8015f0c:	b083      	sub	sp, #12
 8015f0e:	af00      	add	r7, sp, #0
 8015f10:	6078      	str	r0, [r7, #4]
 8015f12:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8015f14:	bf00      	nop
 8015f16:	370c      	adds	r7, #12
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1e:	4770      	bx	lr

08015f20 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8015f20:	b480      	push	{r7}
 8015f22:	b083      	sub	sp, #12
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	6078      	str	r0, [r7, #4]
 8015f28:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8015f2a:	bf00      	nop
 8015f2c:	370c      	adds	r7, #12
 8015f2e:	46bd      	mov	sp, r7
 8015f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f34:	4770      	bx	lr

08015f36 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8015f36:	b480      	push	{r7}
 8015f38:	b085      	sub	sp, #20
 8015f3a:	af00      	add	r7, sp, #0
 8015f3c:	60f8      	str	r0, [r7, #12]
 8015f3e:	60b9      	str	r1, [r7, #8]
 8015f40:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8015f42:	bf00      	nop
 8015f44:	3714      	adds	r7, #20
 8015f46:	46bd      	mov	sp, r7
 8015f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f4c:	4770      	bx	lr

08015f4e <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8015f4e:	b480      	push	{r7}
 8015f50:	b083      	sub	sp, #12
 8015f52:	af00      	add	r7, sp, #0
 8015f54:	6078      	str	r0, [r7, #4]
 8015f56:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8015f58:	bf00      	nop
 8015f5a:	370c      	adds	r7, #12
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f62:	4770      	bx	lr

08015f64 <HAL_FDCAN_GetError>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval FDCAN Error Code
  */
uint32_t HAL_FDCAN_GetError(FDCAN_HandleTypeDef *hfdcan)
{
 8015f64:	b480      	push	{r7}
 8015f66:	b083      	sub	sp, #12
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
  /* Return FDCAN error code */
  return hfdcan->ErrorCode;
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
}
 8015f72:	4618      	mov	r0, r3
 8015f74:	370c      	adds	r7, #12
 8015f76:	46bd      	mov	sp, r7
 8015f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f7c:	4770      	bx	lr
	...

08015f80 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8015f80:	b480      	push	{r7}
 8015f82:	b085      	sub	sp, #20
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015f8c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8015f96:	4ba7      	ldr	r3, [pc, #668]	@ (8016234 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8015f98:	4013      	ands	r3, r2
 8015f9a:	68ba      	ldr	r2, [r7, #8]
 8015f9c:	0091      	lsls	r1, r2, #2
 8015f9e:	687a      	ldr	r2, [r7, #4]
 8015fa0:	6812      	ldr	r2, [r2, #0]
 8015fa2:	430b      	orrs	r3, r1
 8015fa4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015fb0:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015fb8:	041a      	lsls	r2, r3, #16
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	430a      	orrs	r2, r1
 8015fc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015fc8:	68ba      	ldr	r2, [r7, #8]
 8015fca:	4413      	add	r3, r2
 8015fcc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8015fd6:	4b97      	ldr	r3, [pc, #604]	@ (8016234 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8015fd8:	4013      	ands	r3, r2
 8015fda:	68ba      	ldr	r2, [r7, #8]
 8015fdc:	0091      	lsls	r1, r2, #2
 8015fde:	687a      	ldr	r2, [r7, #4]
 8015fe0:	6812      	ldr	r2, [r2, #0]
 8015fe2:	430b      	orrs	r3, r1
 8015fe4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015ff0:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015ff8:	041a      	lsls	r2, r3, #16
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	430a      	orrs	r2, r1
 8016000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016008:	005b      	lsls	r3, r3, #1
 801600a:	68ba      	ldr	r2, [r7, #8]
 801600c:	4413      	add	r3, r2
 801600e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8016018:	4b86      	ldr	r3, [pc, #536]	@ (8016234 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801601a:	4013      	ands	r3, r2
 801601c:	68ba      	ldr	r2, [r7, #8]
 801601e:	0091      	lsls	r1, r2, #2
 8016020:	687a      	ldr	r2, [r7, #4]
 8016022:	6812      	ldr	r2, [r2, #0]
 8016024:	430b      	orrs	r3, r1
 8016026:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8016032:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801603a:	041a      	lsls	r2, r3, #16
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	430a      	orrs	r2, r1
 8016042:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801604a:	687a      	ldr	r2, [r7, #4]
 801604c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 801604e:	fb02 f303 	mul.w	r3, r2, r3
 8016052:	68ba      	ldr	r2, [r7, #8]
 8016054:	4413      	add	r3, r2
 8016056:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8016060:	4b74      	ldr	r3, [pc, #464]	@ (8016234 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8016062:	4013      	ands	r3, r2
 8016064:	68ba      	ldr	r2, [r7, #8]
 8016066:	0091      	lsls	r1, r2, #2
 8016068:	687a      	ldr	r2, [r7, #4]
 801606a:	6812      	ldr	r2, [r2, #0]
 801606c:	430b      	orrs	r3, r1
 801606e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801607a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016082:	041a      	lsls	r2, r3, #16
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	430a      	orrs	r2, r1
 801608a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016092:	687a      	ldr	r2, [r7, #4]
 8016094:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8016096:	fb02 f303 	mul.w	r3, r2, r3
 801609a:	68ba      	ldr	r2, [r7, #8]
 801609c:	4413      	add	r3, r2
 801609e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80160a8:	4b62      	ldr	r3, [pc, #392]	@ (8016234 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80160aa:	4013      	ands	r3, r2
 80160ac:	68ba      	ldr	r2, [r7, #8]
 80160ae:	0091      	lsls	r1, r2, #2
 80160b0:	687a      	ldr	r2, [r7, #4]
 80160b2:	6812      	ldr	r2, [r2, #0]
 80160b4:	430b      	orrs	r3, r1
 80160b6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80160be:	687a      	ldr	r2, [r7, #4]
 80160c0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80160c2:	fb02 f303 	mul.w	r3, r2, r3
 80160c6:	68ba      	ldr	r2, [r7, #8]
 80160c8:	4413      	add	r3, r2
 80160ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80160d4:	4b57      	ldr	r3, [pc, #348]	@ (8016234 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80160d6:	4013      	ands	r3, r2
 80160d8:	68ba      	ldr	r2, [r7, #8]
 80160da:	0091      	lsls	r1, r2, #2
 80160dc:	687a      	ldr	r2, [r7, #4]
 80160de:	6812      	ldr	r2, [r2, #0]
 80160e0:	430b      	orrs	r3, r1
 80160e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80160ee:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80160f6:	041a      	lsls	r2, r3, #16
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	430a      	orrs	r2, r1
 80160fe:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016106:	005b      	lsls	r3, r3, #1
 8016108:	68ba      	ldr	r2, [r7, #8]
 801610a:	4413      	add	r3, r2
 801610c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8016116:	4b47      	ldr	r3, [pc, #284]	@ (8016234 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8016118:	4013      	ands	r3, r2
 801611a:	68ba      	ldr	r2, [r7, #8]
 801611c:	0091      	lsls	r1, r2, #2
 801611e:	687a      	ldr	r2, [r7, #4]
 8016120:	6812      	ldr	r2, [r2, #0]
 8016122:	430b      	orrs	r3, r1
 8016124:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8016130:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016138:	041a      	lsls	r2, r3, #16
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	430a      	orrs	r2, r1
 8016140:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 801614c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016154:	061a      	lsls	r2, r3, #24
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	430a      	orrs	r2, r1
 801615c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016164:	4b34      	ldr	r3, [pc, #208]	@ (8016238 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8016166:	4413      	add	r3, r2
 8016168:	009a      	lsls	r2, r3, #2
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016176:	009b      	lsls	r3, r3, #2
 8016178:	441a      	add	r2, r3
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016186:	00db      	lsls	r3, r3, #3
 8016188:	441a      	add	r2, r3
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016196:	6879      	ldr	r1, [r7, #4]
 8016198:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 801619a:	fb01 f303 	mul.w	r3, r1, r3
 801619e:	009b      	lsls	r3, r3, #2
 80161a0:	441a      	add	r2, r3
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80161ae:	6879      	ldr	r1, [r7, #4]
 80161b0:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80161b2:	fb01 f303 	mul.w	r3, r1, r3
 80161b6:	009b      	lsls	r3, r3, #2
 80161b8:	441a      	add	r2, r3
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80161c6:	6879      	ldr	r1, [r7, #4]
 80161c8:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80161ca:	fb01 f303 	mul.w	r3, r1, r3
 80161ce:	009b      	lsls	r3, r3, #2
 80161d0:	441a      	add	r2, r3
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80161e2:	00db      	lsls	r3, r3, #3
 80161e4:	441a      	add	r2, r3
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80161f6:	6879      	ldr	r1, [r7, #4]
 80161f8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80161fa:	fb01 f303 	mul.w	r3, r1, r3
 80161fe:	009b      	lsls	r3, r3, #2
 8016200:	441a      	add	r2, r3
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016212:	6879      	ldr	r1, [r7, #4]
 8016214:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8016216:	fb01 f303 	mul.w	r3, r1, r3
 801621a:	009b      	lsls	r3, r3, #2
 801621c:	441a      	add	r2, r3
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801622a:	4a04      	ldr	r2, [pc, #16]	@ (801623c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 801622c:	4293      	cmp	r3, r2
 801622e:	d915      	bls.n	801625c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8016230:	e006      	b.n	8016240 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8016232:	bf00      	nop
 8016234:	ffff0003 	.word	0xffff0003
 8016238:	10002b00 	.word	0x10002b00
 801623c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8016246:	f043 0220 	orr.w	r2, r3, #32
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	2203      	movs	r2, #3
 8016254:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8016258:	2301      	movs	r3, #1
 801625a:	e010      	b.n	801627e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016260:	60fb      	str	r3, [r7, #12]
 8016262:	e005      	b.n	8016270 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	2200      	movs	r2, #0
 8016268:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	3304      	adds	r3, #4
 801626e:	60fb      	str	r3, [r7, #12]
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016276:	68fa      	ldr	r2, [r7, #12]
 8016278:	429a      	cmp	r2, r3
 801627a:	d3f3      	bcc.n	8016264 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 801627c:	2300      	movs	r3, #0
}
 801627e:	4618      	mov	r0, r3
 8016280:	3714      	adds	r7, #20
 8016282:	46bd      	mov	sp, r7
 8016284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016288:	4770      	bx	lr
 801628a:	bf00      	nop

0801628c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 801628c:	b480      	push	{r7}
 801628e:	b089      	sub	sp, #36	@ 0x24
 8016290:	af00      	add	r7, sp, #0
 8016292:	60f8      	str	r0, [r7, #12]
 8016294:	60b9      	str	r1, [r7, #8]
 8016296:	607a      	str	r2, [r7, #4]
 8016298:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 801629a:	68bb      	ldr	r3, [r7, #8]
 801629c:	685b      	ldr	r3, [r3, #4]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d10a      	bne.n	80162b8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80162a2:	68bb      	ldr	r3, [r7, #8]
 80162a4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80162a6:	68bb      	ldr	r3, [r7, #8]
 80162a8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80162aa:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80162ac:	68bb      	ldr	r3, [r7, #8]
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80162b2:	4313      	orrs	r3, r2
 80162b4:	61fb      	str	r3, [r7, #28]
 80162b6:	e00a      	b.n	80162ce <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80162b8:	68bb      	ldr	r3, [r7, #8]
 80162ba:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80162bc:	68bb      	ldr	r3, [r7, #8]
 80162be:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80162c0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80162c2:	68bb      	ldr	r3, [r7, #8]
 80162c4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80162c6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80162c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80162cc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80162ce:	68bb      	ldr	r3, [r7, #8]
 80162d0:	6a1b      	ldr	r3, [r3, #32]
 80162d2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80162d4:	68bb      	ldr	r3, [r7, #8]
 80162d6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80162d8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80162da:	68bb      	ldr	r3, [r7, #8]
 80162dc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80162de:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80162e0:	68bb      	ldr	r3, [r7, #8]
 80162e2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80162e4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80162e6:	68bb      	ldr	r3, [r7, #8]
 80162e8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80162ea:	4313      	orrs	r3, r2
 80162ec:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80162f8:	6839      	ldr	r1, [r7, #0]
 80162fa:	fb01 f303 	mul.w	r3, r1, r3
 80162fe:	009b      	lsls	r3, r3, #2
 8016300:	4413      	add	r3, r2
 8016302:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8016304:	69bb      	ldr	r3, [r7, #24]
 8016306:	69fa      	ldr	r2, [r7, #28]
 8016308:	601a      	str	r2, [r3, #0]
  TxAddress++;
 801630a:	69bb      	ldr	r3, [r7, #24]
 801630c:	3304      	adds	r3, #4
 801630e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8016310:	69bb      	ldr	r3, [r7, #24]
 8016312:	693a      	ldr	r2, [r7, #16]
 8016314:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8016316:	69bb      	ldr	r3, [r7, #24]
 8016318:	3304      	adds	r3, #4
 801631a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 801631c:	2300      	movs	r3, #0
 801631e:	617b      	str	r3, [r7, #20]
 8016320:	e020      	b.n	8016364 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8016322:	697b      	ldr	r3, [r7, #20]
 8016324:	3303      	adds	r3, #3
 8016326:	687a      	ldr	r2, [r7, #4]
 8016328:	4413      	add	r3, r2
 801632a:	781b      	ldrb	r3, [r3, #0]
 801632c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 801632e:	697b      	ldr	r3, [r7, #20]
 8016330:	3302      	adds	r3, #2
 8016332:	6879      	ldr	r1, [r7, #4]
 8016334:	440b      	add	r3, r1
 8016336:	781b      	ldrb	r3, [r3, #0]
 8016338:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 801633a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 801633c:	697b      	ldr	r3, [r7, #20]
 801633e:	3301      	adds	r3, #1
 8016340:	6879      	ldr	r1, [r7, #4]
 8016342:	440b      	add	r3, r1
 8016344:	781b      	ldrb	r3, [r3, #0]
 8016346:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8016348:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 801634a:	6879      	ldr	r1, [r7, #4]
 801634c:	697a      	ldr	r2, [r7, #20]
 801634e:	440a      	add	r2, r1
 8016350:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8016352:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8016354:	69bb      	ldr	r3, [r7, #24]
 8016356:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8016358:	69bb      	ldr	r3, [r7, #24]
 801635a:	3304      	adds	r3, #4
 801635c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 801635e:	697b      	ldr	r3, [r7, #20]
 8016360:	3304      	adds	r3, #4
 8016362:	617b      	str	r3, [r7, #20]
 8016364:	68bb      	ldr	r3, [r7, #8]
 8016366:	68db      	ldr	r3, [r3, #12]
 8016368:	0c1b      	lsrs	r3, r3, #16
 801636a:	4a06      	ldr	r2, [pc, #24]	@ (8016384 <FDCAN_CopyMessageToRAM+0xf8>)
 801636c:	5cd3      	ldrb	r3, [r2, r3]
 801636e:	461a      	mov	r2, r3
 8016370:	697b      	ldr	r3, [r7, #20]
 8016372:	4293      	cmp	r3, r2
 8016374:	d3d5      	bcc.n	8016322 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8016376:	bf00      	nop
 8016378:	bf00      	nop
 801637a:	3724      	adds	r7, #36	@ 0x24
 801637c:	46bd      	mov	sp, r7
 801637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016382:	4770      	bx	lr
 8016384:	08044fa4 	.word	0x08044fa4

08016388 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8016388:	b480      	push	{r7}
 801638a:	b089      	sub	sp, #36	@ 0x24
 801638c:	af00      	add	r7, sp, #0
 801638e:	6078      	str	r0, [r7, #4]
 8016390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8016392:	2300      	movs	r3, #0
 8016394:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8016396:	4b86      	ldr	r3, [pc, #536]	@ (80165b0 <HAL_GPIO_Init+0x228>)
 8016398:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801639a:	e18c      	b.n	80166b6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801639c:	683b      	ldr	r3, [r7, #0]
 801639e:	681a      	ldr	r2, [r3, #0]
 80163a0:	2101      	movs	r1, #1
 80163a2:	69fb      	ldr	r3, [r7, #28]
 80163a4:	fa01 f303 	lsl.w	r3, r1, r3
 80163a8:	4013      	ands	r3, r2
 80163aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80163ac:	693b      	ldr	r3, [r7, #16]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	f000 817e 	beq.w	80166b0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80163b4:	683b      	ldr	r3, [r7, #0]
 80163b6:	685b      	ldr	r3, [r3, #4]
 80163b8:	f003 0303 	and.w	r3, r3, #3
 80163bc:	2b01      	cmp	r3, #1
 80163be:	d005      	beq.n	80163cc <HAL_GPIO_Init+0x44>
 80163c0:	683b      	ldr	r3, [r7, #0]
 80163c2:	685b      	ldr	r3, [r3, #4]
 80163c4:	f003 0303 	and.w	r3, r3, #3
 80163c8:	2b02      	cmp	r3, #2
 80163ca:	d130      	bne.n	801642e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	689b      	ldr	r3, [r3, #8]
 80163d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80163d2:	69fb      	ldr	r3, [r7, #28]
 80163d4:	005b      	lsls	r3, r3, #1
 80163d6:	2203      	movs	r2, #3
 80163d8:	fa02 f303 	lsl.w	r3, r2, r3
 80163dc:	43db      	mvns	r3, r3
 80163de:	69ba      	ldr	r2, [r7, #24]
 80163e0:	4013      	ands	r3, r2
 80163e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80163e4:	683b      	ldr	r3, [r7, #0]
 80163e6:	68da      	ldr	r2, [r3, #12]
 80163e8:	69fb      	ldr	r3, [r7, #28]
 80163ea:	005b      	lsls	r3, r3, #1
 80163ec:	fa02 f303 	lsl.w	r3, r2, r3
 80163f0:	69ba      	ldr	r2, [r7, #24]
 80163f2:	4313      	orrs	r3, r2
 80163f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	69ba      	ldr	r2, [r7, #24]
 80163fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	685b      	ldr	r3, [r3, #4]
 8016400:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8016402:	2201      	movs	r2, #1
 8016404:	69fb      	ldr	r3, [r7, #28]
 8016406:	fa02 f303 	lsl.w	r3, r2, r3
 801640a:	43db      	mvns	r3, r3
 801640c:	69ba      	ldr	r2, [r7, #24]
 801640e:	4013      	ands	r3, r2
 8016410:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8016412:	683b      	ldr	r3, [r7, #0]
 8016414:	685b      	ldr	r3, [r3, #4]
 8016416:	091b      	lsrs	r3, r3, #4
 8016418:	f003 0201 	and.w	r2, r3, #1
 801641c:	69fb      	ldr	r3, [r7, #28]
 801641e:	fa02 f303 	lsl.w	r3, r2, r3
 8016422:	69ba      	ldr	r2, [r7, #24]
 8016424:	4313      	orrs	r3, r2
 8016426:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	69ba      	ldr	r2, [r7, #24]
 801642c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801642e:	683b      	ldr	r3, [r7, #0]
 8016430:	685b      	ldr	r3, [r3, #4]
 8016432:	f003 0303 	and.w	r3, r3, #3
 8016436:	2b03      	cmp	r3, #3
 8016438:	d017      	beq.n	801646a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	68db      	ldr	r3, [r3, #12]
 801643e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8016440:	69fb      	ldr	r3, [r7, #28]
 8016442:	005b      	lsls	r3, r3, #1
 8016444:	2203      	movs	r2, #3
 8016446:	fa02 f303 	lsl.w	r3, r2, r3
 801644a:	43db      	mvns	r3, r3
 801644c:	69ba      	ldr	r2, [r7, #24]
 801644e:	4013      	ands	r3, r2
 8016450:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8016452:	683b      	ldr	r3, [r7, #0]
 8016454:	689a      	ldr	r2, [r3, #8]
 8016456:	69fb      	ldr	r3, [r7, #28]
 8016458:	005b      	lsls	r3, r3, #1
 801645a:	fa02 f303 	lsl.w	r3, r2, r3
 801645e:	69ba      	ldr	r2, [r7, #24]
 8016460:	4313      	orrs	r3, r2
 8016462:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	69ba      	ldr	r2, [r7, #24]
 8016468:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801646a:	683b      	ldr	r3, [r7, #0]
 801646c:	685b      	ldr	r3, [r3, #4]
 801646e:	f003 0303 	and.w	r3, r3, #3
 8016472:	2b02      	cmp	r3, #2
 8016474:	d123      	bne.n	80164be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8016476:	69fb      	ldr	r3, [r7, #28]
 8016478:	08da      	lsrs	r2, r3, #3
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	3208      	adds	r2, #8
 801647e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8016484:	69fb      	ldr	r3, [r7, #28]
 8016486:	f003 0307 	and.w	r3, r3, #7
 801648a:	009b      	lsls	r3, r3, #2
 801648c:	220f      	movs	r2, #15
 801648e:	fa02 f303 	lsl.w	r3, r2, r3
 8016492:	43db      	mvns	r3, r3
 8016494:	69ba      	ldr	r2, [r7, #24]
 8016496:	4013      	ands	r3, r2
 8016498:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801649a:	683b      	ldr	r3, [r7, #0]
 801649c:	691a      	ldr	r2, [r3, #16]
 801649e:	69fb      	ldr	r3, [r7, #28]
 80164a0:	f003 0307 	and.w	r3, r3, #7
 80164a4:	009b      	lsls	r3, r3, #2
 80164a6:	fa02 f303 	lsl.w	r3, r2, r3
 80164aa:	69ba      	ldr	r2, [r7, #24]
 80164ac:	4313      	orrs	r3, r2
 80164ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80164b0:	69fb      	ldr	r3, [r7, #28]
 80164b2:	08da      	lsrs	r2, r3, #3
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	3208      	adds	r2, #8
 80164b8:	69b9      	ldr	r1, [r7, #24]
 80164ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80164c4:	69fb      	ldr	r3, [r7, #28]
 80164c6:	005b      	lsls	r3, r3, #1
 80164c8:	2203      	movs	r2, #3
 80164ca:	fa02 f303 	lsl.w	r3, r2, r3
 80164ce:	43db      	mvns	r3, r3
 80164d0:	69ba      	ldr	r2, [r7, #24]
 80164d2:	4013      	ands	r3, r2
 80164d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80164d6:	683b      	ldr	r3, [r7, #0]
 80164d8:	685b      	ldr	r3, [r3, #4]
 80164da:	f003 0203 	and.w	r2, r3, #3
 80164de:	69fb      	ldr	r3, [r7, #28]
 80164e0:	005b      	lsls	r3, r3, #1
 80164e2:	fa02 f303 	lsl.w	r3, r2, r3
 80164e6:	69ba      	ldr	r2, [r7, #24]
 80164e8:	4313      	orrs	r3, r2
 80164ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	69ba      	ldr	r2, [r7, #24]
 80164f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80164f2:	683b      	ldr	r3, [r7, #0]
 80164f4:	685b      	ldr	r3, [r3, #4]
 80164f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	f000 80d8 	beq.w	80166b0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016500:	4b2c      	ldr	r3, [pc, #176]	@ (80165b4 <HAL_GPIO_Init+0x22c>)
 8016502:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8016506:	4a2b      	ldr	r2, [pc, #172]	@ (80165b4 <HAL_GPIO_Init+0x22c>)
 8016508:	f043 0302 	orr.w	r3, r3, #2
 801650c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8016510:	4b28      	ldr	r3, [pc, #160]	@ (80165b4 <HAL_GPIO_Init+0x22c>)
 8016512:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8016516:	f003 0302 	and.w	r3, r3, #2
 801651a:	60fb      	str	r3, [r7, #12]
 801651c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801651e:	4a26      	ldr	r2, [pc, #152]	@ (80165b8 <HAL_GPIO_Init+0x230>)
 8016520:	69fb      	ldr	r3, [r7, #28]
 8016522:	089b      	lsrs	r3, r3, #2
 8016524:	3302      	adds	r3, #2
 8016526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801652a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801652c:	69fb      	ldr	r3, [r7, #28]
 801652e:	f003 0303 	and.w	r3, r3, #3
 8016532:	009b      	lsls	r3, r3, #2
 8016534:	220f      	movs	r2, #15
 8016536:	fa02 f303 	lsl.w	r3, r2, r3
 801653a:	43db      	mvns	r3, r3
 801653c:	69ba      	ldr	r2, [r7, #24]
 801653e:	4013      	ands	r3, r2
 8016540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	4a1d      	ldr	r2, [pc, #116]	@ (80165bc <HAL_GPIO_Init+0x234>)
 8016546:	4293      	cmp	r3, r2
 8016548:	d04a      	beq.n	80165e0 <HAL_GPIO_Init+0x258>
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	4a1c      	ldr	r2, [pc, #112]	@ (80165c0 <HAL_GPIO_Init+0x238>)
 801654e:	4293      	cmp	r3, r2
 8016550:	d02b      	beq.n	80165aa <HAL_GPIO_Init+0x222>
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	4a1b      	ldr	r2, [pc, #108]	@ (80165c4 <HAL_GPIO_Init+0x23c>)
 8016556:	4293      	cmp	r3, r2
 8016558:	d025      	beq.n	80165a6 <HAL_GPIO_Init+0x21e>
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	4a1a      	ldr	r2, [pc, #104]	@ (80165c8 <HAL_GPIO_Init+0x240>)
 801655e:	4293      	cmp	r3, r2
 8016560:	d01f      	beq.n	80165a2 <HAL_GPIO_Init+0x21a>
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	4a19      	ldr	r2, [pc, #100]	@ (80165cc <HAL_GPIO_Init+0x244>)
 8016566:	4293      	cmp	r3, r2
 8016568:	d019      	beq.n	801659e <HAL_GPIO_Init+0x216>
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	4a18      	ldr	r2, [pc, #96]	@ (80165d0 <HAL_GPIO_Init+0x248>)
 801656e:	4293      	cmp	r3, r2
 8016570:	d013      	beq.n	801659a <HAL_GPIO_Init+0x212>
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	4a17      	ldr	r2, [pc, #92]	@ (80165d4 <HAL_GPIO_Init+0x24c>)
 8016576:	4293      	cmp	r3, r2
 8016578:	d00d      	beq.n	8016596 <HAL_GPIO_Init+0x20e>
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	4a16      	ldr	r2, [pc, #88]	@ (80165d8 <HAL_GPIO_Init+0x250>)
 801657e:	4293      	cmp	r3, r2
 8016580:	d007      	beq.n	8016592 <HAL_GPIO_Init+0x20a>
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	4a15      	ldr	r2, [pc, #84]	@ (80165dc <HAL_GPIO_Init+0x254>)
 8016586:	4293      	cmp	r3, r2
 8016588:	d101      	bne.n	801658e <HAL_GPIO_Init+0x206>
 801658a:	2309      	movs	r3, #9
 801658c:	e029      	b.n	80165e2 <HAL_GPIO_Init+0x25a>
 801658e:	230a      	movs	r3, #10
 8016590:	e027      	b.n	80165e2 <HAL_GPIO_Init+0x25a>
 8016592:	2307      	movs	r3, #7
 8016594:	e025      	b.n	80165e2 <HAL_GPIO_Init+0x25a>
 8016596:	2306      	movs	r3, #6
 8016598:	e023      	b.n	80165e2 <HAL_GPIO_Init+0x25a>
 801659a:	2305      	movs	r3, #5
 801659c:	e021      	b.n	80165e2 <HAL_GPIO_Init+0x25a>
 801659e:	2304      	movs	r3, #4
 80165a0:	e01f      	b.n	80165e2 <HAL_GPIO_Init+0x25a>
 80165a2:	2303      	movs	r3, #3
 80165a4:	e01d      	b.n	80165e2 <HAL_GPIO_Init+0x25a>
 80165a6:	2302      	movs	r3, #2
 80165a8:	e01b      	b.n	80165e2 <HAL_GPIO_Init+0x25a>
 80165aa:	2301      	movs	r3, #1
 80165ac:	e019      	b.n	80165e2 <HAL_GPIO_Init+0x25a>
 80165ae:	bf00      	nop
 80165b0:	58000080 	.word	0x58000080
 80165b4:	58024400 	.word	0x58024400
 80165b8:	58000400 	.word	0x58000400
 80165bc:	58020000 	.word	0x58020000
 80165c0:	58020400 	.word	0x58020400
 80165c4:	58020800 	.word	0x58020800
 80165c8:	58020c00 	.word	0x58020c00
 80165cc:	58021000 	.word	0x58021000
 80165d0:	58021400 	.word	0x58021400
 80165d4:	58021800 	.word	0x58021800
 80165d8:	58021c00 	.word	0x58021c00
 80165dc:	58022400 	.word	0x58022400
 80165e0:	2300      	movs	r3, #0
 80165e2:	69fa      	ldr	r2, [r7, #28]
 80165e4:	f002 0203 	and.w	r2, r2, #3
 80165e8:	0092      	lsls	r2, r2, #2
 80165ea:	4093      	lsls	r3, r2
 80165ec:	69ba      	ldr	r2, [r7, #24]
 80165ee:	4313      	orrs	r3, r2
 80165f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80165f2:	4938      	ldr	r1, [pc, #224]	@ (80166d4 <HAL_GPIO_Init+0x34c>)
 80165f4:	69fb      	ldr	r3, [r7, #28]
 80165f6:	089b      	lsrs	r3, r3, #2
 80165f8:	3302      	adds	r3, #2
 80165fa:	69ba      	ldr	r2, [r7, #24]
 80165fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8016600:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8016608:	693b      	ldr	r3, [r7, #16]
 801660a:	43db      	mvns	r3, r3
 801660c:	69ba      	ldr	r2, [r7, #24]
 801660e:	4013      	ands	r3, r2
 8016610:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8016612:	683b      	ldr	r3, [r7, #0]
 8016614:	685b      	ldr	r3, [r3, #4]
 8016616:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801661a:	2b00      	cmp	r3, #0
 801661c:	d003      	beq.n	8016626 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 801661e:	69ba      	ldr	r2, [r7, #24]
 8016620:	693b      	ldr	r3, [r7, #16]
 8016622:	4313      	orrs	r3, r2
 8016624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8016626:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801662a:	69bb      	ldr	r3, [r7, #24]
 801662c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801662e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016632:	685b      	ldr	r3, [r3, #4]
 8016634:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8016636:	693b      	ldr	r3, [r7, #16]
 8016638:	43db      	mvns	r3, r3
 801663a:	69ba      	ldr	r2, [r7, #24]
 801663c:	4013      	ands	r3, r2
 801663e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8016640:	683b      	ldr	r3, [r7, #0]
 8016642:	685b      	ldr	r3, [r3, #4]
 8016644:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8016648:	2b00      	cmp	r3, #0
 801664a:	d003      	beq.n	8016654 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 801664c:	69ba      	ldr	r2, [r7, #24]
 801664e:	693b      	ldr	r3, [r7, #16]
 8016650:	4313      	orrs	r3, r2
 8016652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8016654:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8016658:	69bb      	ldr	r3, [r7, #24]
 801665a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801665c:	697b      	ldr	r3, [r7, #20]
 801665e:	685b      	ldr	r3, [r3, #4]
 8016660:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8016662:	693b      	ldr	r3, [r7, #16]
 8016664:	43db      	mvns	r3, r3
 8016666:	69ba      	ldr	r2, [r7, #24]
 8016668:	4013      	ands	r3, r2
 801666a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801666c:	683b      	ldr	r3, [r7, #0]
 801666e:	685b      	ldr	r3, [r3, #4]
 8016670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016674:	2b00      	cmp	r3, #0
 8016676:	d003      	beq.n	8016680 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8016678:	69ba      	ldr	r2, [r7, #24]
 801667a:	693b      	ldr	r3, [r7, #16]
 801667c:	4313      	orrs	r3, r2
 801667e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8016680:	697b      	ldr	r3, [r7, #20]
 8016682:	69ba      	ldr	r2, [r7, #24]
 8016684:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8016686:	697b      	ldr	r3, [r7, #20]
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801668c:	693b      	ldr	r3, [r7, #16]
 801668e:	43db      	mvns	r3, r3
 8016690:	69ba      	ldr	r2, [r7, #24]
 8016692:	4013      	ands	r3, r2
 8016694:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8016696:	683b      	ldr	r3, [r7, #0]
 8016698:	685b      	ldr	r3, [r3, #4]
 801669a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d003      	beq.n	80166aa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80166a2:	69ba      	ldr	r2, [r7, #24]
 80166a4:	693b      	ldr	r3, [r7, #16]
 80166a6:	4313      	orrs	r3, r2
 80166a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80166aa:	697b      	ldr	r3, [r7, #20]
 80166ac:	69ba      	ldr	r2, [r7, #24]
 80166ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80166b0:	69fb      	ldr	r3, [r7, #28]
 80166b2:	3301      	adds	r3, #1
 80166b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80166b6:	683b      	ldr	r3, [r7, #0]
 80166b8:	681a      	ldr	r2, [r3, #0]
 80166ba:	69fb      	ldr	r3, [r7, #28]
 80166bc:	fa22 f303 	lsr.w	r3, r2, r3
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	f47f ae6b 	bne.w	801639c <HAL_GPIO_Init+0x14>
  }
}
 80166c6:	bf00      	nop
 80166c8:	bf00      	nop
 80166ca:	3724      	adds	r7, #36	@ 0x24
 80166cc:	46bd      	mov	sp, r7
 80166ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d2:	4770      	bx	lr
 80166d4:	58000400 	.word	0x58000400

080166d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80166d8:	b480      	push	{r7}
 80166da:	b083      	sub	sp, #12
 80166dc:	af00      	add	r7, sp, #0
 80166de:	6078      	str	r0, [r7, #4]
 80166e0:	460b      	mov	r3, r1
 80166e2:	807b      	strh	r3, [r7, #2]
 80166e4:	4613      	mov	r3, r2
 80166e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80166e8:	787b      	ldrb	r3, [r7, #1]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d003      	beq.n	80166f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80166ee:	887a      	ldrh	r2, [r7, #2]
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80166f4:	e003      	b.n	80166fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80166f6:	887b      	ldrh	r3, [r7, #2]
 80166f8:	041a      	lsls	r2, r3, #16
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	619a      	str	r2, [r3, #24]
}
 80166fe:	bf00      	nop
 8016700:	370c      	adds	r7, #12
 8016702:	46bd      	mov	sp, r7
 8016704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016708:	4770      	bx	lr

0801670a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801670a:	b480      	push	{r7}
 801670c:	b085      	sub	sp, #20
 801670e:	af00      	add	r7, sp, #0
 8016710:	6078      	str	r0, [r7, #4]
 8016712:	460b      	mov	r3, r1
 8016714:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	695b      	ldr	r3, [r3, #20]
 801671a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801671c:	887a      	ldrh	r2, [r7, #2]
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	4013      	ands	r3, r2
 8016722:	041a      	lsls	r2, r3, #16
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	43d9      	mvns	r1, r3
 8016728:	887b      	ldrh	r3, [r7, #2]
 801672a:	400b      	ands	r3, r1
 801672c:	431a      	orrs	r2, r3
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	619a      	str	r2, [r3, #24]
}
 8016732:	bf00      	nop
 8016734:	3714      	adds	r7, #20
 8016736:	46bd      	mov	sp, r7
 8016738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801673c:	4770      	bx	lr

0801673e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801673e:	b580      	push	{r7, lr}
 8016740:	b082      	sub	sp, #8
 8016742:	af00      	add	r7, sp, #0
 8016744:	4603      	mov	r3, r0
 8016746:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8016748:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801674c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8016750:	88fb      	ldrh	r3, [r7, #6]
 8016752:	4013      	ands	r3, r2
 8016754:	2b00      	cmp	r3, #0
 8016756:	d008      	beq.n	801676a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8016758:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801675c:	88fb      	ldrh	r3, [r7, #6]
 801675e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8016762:	88fb      	ldrh	r3, [r7, #6]
 8016764:	4618      	mov	r0, r3
 8016766:	f000 f804 	bl	8016772 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 801676a:	bf00      	nop
 801676c:	3708      	adds	r7, #8
 801676e:	46bd      	mov	sp, r7
 8016770:	bd80      	pop	{r7, pc}

08016772 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8016772:	b480      	push	{r7}
 8016774:	b083      	sub	sp, #12
 8016776:	af00      	add	r7, sp, #0
 8016778:	4603      	mov	r3, r0
 801677a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 801677c:	bf00      	nop
 801677e:	370c      	adds	r7, #12
 8016780:	46bd      	mov	sp, r7
 8016782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016786:	4770      	bx	lr

08016788 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8016788:	b580      	push	{r7, lr}
 801678a:	b082      	sub	sp, #8
 801678c:	af00      	add	r7, sp, #0
 801678e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	2b00      	cmp	r3, #0
 8016794:	d101      	bne.n	801679a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8016796:	2301      	movs	r3, #1
 8016798:	e07f      	b.n	801689a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80167a0:	b2db      	uxtb	r3, r3
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d106      	bne.n	80167b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	2200      	movs	r2, #0
 80167aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80167ae:	6878      	ldr	r0, [r7, #4]
 80167b0:	f000 f87a 	bl	80168a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	2224      	movs	r2, #36	@ 0x24
 80167b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	681a      	ldr	r2, [r3, #0]
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	f022 0201 	bic.w	r2, r2, #1
 80167ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	685a      	ldr	r2, [r3, #4]
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80167d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	689a      	ldr	r2, [r3, #8]
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80167e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	68db      	ldr	r3, [r3, #12]
 80167ee:	2b01      	cmp	r3, #1
 80167f0:	d107      	bne.n	8016802 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	689a      	ldr	r2, [r3, #8]
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80167fe:	609a      	str	r2, [r3, #8]
 8016800:	e006      	b.n	8016810 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	689a      	ldr	r2, [r3, #8]
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 801680e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	68db      	ldr	r3, [r3, #12]
 8016814:	2b02      	cmp	r3, #2
 8016816:	d104      	bne.n	8016822 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016820:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	6859      	ldr	r1, [r3, #4]
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	681a      	ldr	r2, [r3, #0]
 801682c:	4b1d      	ldr	r3, [pc, #116]	@ (80168a4 <HAL_I2C_Init+0x11c>)
 801682e:	430b      	orrs	r3, r1
 8016830:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	68da      	ldr	r2, [r3, #12]
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8016840:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	691a      	ldr	r2, [r3, #16]
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	695b      	ldr	r3, [r3, #20]
 801684a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	699b      	ldr	r3, [r3, #24]
 8016852:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	430a      	orrs	r2, r1
 801685a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	69d9      	ldr	r1, [r3, #28]
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	6a1a      	ldr	r2, [r3, #32]
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	430a      	orrs	r2, r1
 801686a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	681a      	ldr	r2, [r3, #0]
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	f042 0201 	orr.w	r2, r2, #1
 801687a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	2200      	movs	r2, #0
 8016880:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	2220      	movs	r2, #32
 8016886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	2200      	movs	r2, #0
 801688e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	2200      	movs	r2, #0
 8016894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8016898:	2300      	movs	r3, #0
}
 801689a:	4618      	mov	r0, r3
 801689c:	3708      	adds	r7, #8
 801689e:	46bd      	mov	sp, r7
 80168a0:	bd80      	pop	{r7, pc}
 80168a2:	bf00      	nop
 80168a4:	02008000 	.word	0x02008000

080168a8 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80168a8:	b480      	push	{r7}
 80168aa:	b083      	sub	sp, #12
 80168ac:	af00      	add	r7, sp, #0
 80168ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80168b0:	bf00      	nop
 80168b2:	370c      	adds	r7, #12
 80168b4:	46bd      	mov	sp, r7
 80168b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ba:	4770      	bx	lr

080168bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80168bc:	b580      	push	{r7, lr}
 80168be:	b088      	sub	sp, #32
 80168c0:	af02      	add	r7, sp, #8
 80168c2:	60f8      	str	r0, [r7, #12]
 80168c4:	607a      	str	r2, [r7, #4]
 80168c6:	461a      	mov	r2, r3
 80168c8:	460b      	mov	r3, r1
 80168ca:	817b      	strh	r3, [r7, #10]
 80168cc:	4613      	mov	r3, r2
 80168ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80168d6:	b2db      	uxtb	r3, r3
 80168d8:	2b20      	cmp	r3, #32
 80168da:	f040 80da 	bne.w	8016a92 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80168e4:	2b01      	cmp	r3, #1
 80168e6:	d101      	bne.n	80168ec <HAL_I2C_Master_Transmit+0x30>
 80168e8:	2302      	movs	r3, #2
 80168ea:	e0d3      	b.n	8016a94 <HAL_I2C_Master_Transmit+0x1d8>
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	2201      	movs	r2, #1
 80168f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80168f4:	f7fa fcfe 	bl	80112f4 <HAL_GetTick>
 80168f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80168fa:	697b      	ldr	r3, [r7, #20]
 80168fc:	9300      	str	r3, [sp, #0]
 80168fe:	2319      	movs	r3, #25
 8016900:	2201      	movs	r2, #1
 8016902:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8016906:	68f8      	ldr	r0, [r7, #12]
 8016908:	f001 f86d 	bl	80179e6 <I2C_WaitOnFlagUntilTimeout>
 801690c:	4603      	mov	r3, r0
 801690e:	2b00      	cmp	r3, #0
 8016910:	d001      	beq.n	8016916 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8016912:	2301      	movs	r3, #1
 8016914:	e0be      	b.n	8016a94 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	2221      	movs	r2, #33	@ 0x21
 801691a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	2210      	movs	r2, #16
 8016922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	2200      	movs	r2, #0
 801692a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	687a      	ldr	r2, [r7, #4]
 8016930:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	893a      	ldrh	r2, [r7, #8]
 8016936:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	2200      	movs	r2, #0
 801693c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016942:	b29b      	uxth	r3, r3
 8016944:	2bff      	cmp	r3, #255	@ 0xff
 8016946:	d90e      	bls.n	8016966 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	22ff      	movs	r2, #255	@ 0xff
 801694c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016952:	b2da      	uxtb	r2, r3
 8016954:	8979      	ldrh	r1, [r7, #10]
 8016956:	4b51      	ldr	r3, [pc, #324]	@ (8016a9c <HAL_I2C_Master_Transmit+0x1e0>)
 8016958:	9300      	str	r3, [sp, #0]
 801695a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801695e:	68f8      	ldr	r0, [r7, #12]
 8016960:	f001 f9fa 	bl	8017d58 <I2C_TransferConfig>
 8016964:	e06c      	b.n	8016a40 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801696a:	b29a      	uxth	r2, r3
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016974:	b2da      	uxtb	r2, r3
 8016976:	8979      	ldrh	r1, [r7, #10]
 8016978:	4b48      	ldr	r3, [pc, #288]	@ (8016a9c <HAL_I2C_Master_Transmit+0x1e0>)
 801697a:	9300      	str	r3, [sp, #0]
 801697c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8016980:	68f8      	ldr	r0, [r7, #12]
 8016982:	f001 f9e9 	bl	8017d58 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8016986:	e05b      	b.n	8016a40 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016988:	697a      	ldr	r2, [r7, #20]
 801698a:	6a39      	ldr	r1, [r7, #32]
 801698c:	68f8      	ldr	r0, [r7, #12]
 801698e:	f001 f879 	bl	8017a84 <I2C_WaitOnTXISFlagUntilTimeout>
 8016992:	4603      	mov	r3, r0
 8016994:	2b00      	cmp	r3, #0
 8016996:	d001      	beq.n	801699c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8016998:	2301      	movs	r3, #1
 801699a:	e07b      	b.n	8016a94 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80169a0:	781a      	ldrb	r2, [r3, #0]
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80169ac:	1c5a      	adds	r2, r3, #1
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80169b6:	b29b      	uxth	r3, r3
 80169b8:	3b01      	subs	r3, #1
 80169ba:	b29a      	uxth	r2, r3
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80169c4:	3b01      	subs	r3, #1
 80169c6:	b29a      	uxth	r2, r3
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80169d0:	b29b      	uxth	r3, r3
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d034      	beq.n	8016a40 <HAL_I2C_Master_Transmit+0x184>
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d130      	bne.n	8016a40 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80169de:	697b      	ldr	r3, [r7, #20]
 80169e0:	9300      	str	r3, [sp, #0]
 80169e2:	6a3b      	ldr	r3, [r7, #32]
 80169e4:	2200      	movs	r2, #0
 80169e6:	2180      	movs	r1, #128	@ 0x80
 80169e8:	68f8      	ldr	r0, [r7, #12]
 80169ea:	f000 fffc 	bl	80179e6 <I2C_WaitOnFlagUntilTimeout>
 80169ee:	4603      	mov	r3, r0
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d001      	beq.n	80169f8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80169f4:	2301      	movs	r3, #1
 80169f6:	e04d      	b.n	8016a94 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80169fc:	b29b      	uxth	r3, r3
 80169fe:	2bff      	cmp	r3, #255	@ 0xff
 8016a00:	d90e      	bls.n	8016a20 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	22ff      	movs	r2, #255	@ 0xff
 8016a06:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016a0c:	b2da      	uxtb	r2, r3
 8016a0e:	8979      	ldrh	r1, [r7, #10]
 8016a10:	2300      	movs	r3, #0
 8016a12:	9300      	str	r3, [sp, #0]
 8016a14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8016a18:	68f8      	ldr	r0, [r7, #12]
 8016a1a:	f001 f99d 	bl	8017d58 <I2C_TransferConfig>
 8016a1e:	e00f      	b.n	8016a40 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016a24:	b29a      	uxth	r2, r3
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016a2e:	b2da      	uxtb	r2, r3
 8016a30:	8979      	ldrh	r1, [r7, #10]
 8016a32:	2300      	movs	r3, #0
 8016a34:	9300      	str	r3, [sp, #0]
 8016a36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8016a3a:	68f8      	ldr	r0, [r7, #12]
 8016a3c:	f001 f98c 	bl	8017d58 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016a44:	b29b      	uxth	r3, r3
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d19e      	bne.n	8016988 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016a4a:	697a      	ldr	r2, [r7, #20]
 8016a4c:	6a39      	ldr	r1, [r7, #32]
 8016a4e:	68f8      	ldr	r0, [r7, #12]
 8016a50:	f001 f85f 	bl	8017b12 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016a54:	4603      	mov	r3, r0
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d001      	beq.n	8016a5e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8016a5a:	2301      	movs	r3, #1
 8016a5c:	e01a      	b.n	8016a94 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	2220      	movs	r2, #32
 8016a64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	6859      	ldr	r1, [r3, #4]
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	681a      	ldr	r2, [r3, #0]
 8016a70:	4b0b      	ldr	r3, [pc, #44]	@ (8016aa0 <HAL_I2C_Master_Transmit+0x1e4>)
 8016a72:	400b      	ands	r3, r1
 8016a74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	2220      	movs	r2, #32
 8016a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	2200      	movs	r2, #0
 8016a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	2200      	movs	r2, #0
 8016a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8016a8e:	2300      	movs	r3, #0
 8016a90:	e000      	b.n	8016a94 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8016a92:	2302      	movs	r3, #2
  }
}
 8016a94:	4618      	mov	r0, r3
 8016a96:	3718      	adds	r7, #24
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	bd80      	pop	{r7, pc}
 8016a9c:	80002000 	.word	0x80002000
 8016aa0:	fe00e800 	.word	0xfe00e800

08016aa4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	b088      	sub	sp, #32
 8016aa8:	af02      	add	r7, sp, #8
 8016aaa:	60f8      	str	r0, [r7, #12]
 8016aac:	4608      	mov	r0, r1
 8016aae:	4611      	mov	r1, r2
 8016ab0:	461a      	mov	r2, r3
 8016ab2:	4603      	mov	r3, r0
 8016ab4:	817b      	strh	r3, [r7, #10]
 8016ab6:	460b      	mov	r3, r1
 8016ab8:	813b      	strh	r3, [r7, #8]
 8016aba:	4613      	mov	r3, r2
 8016abc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016ac4:	b2db      	uxtb	r3, r3
 8016ac6:	2b20      	cmp	r3, #32
 8016ac8:	f040 80fd 	bne.w	8016cc6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8016acc:	6a3b      	ldr	r3, [r7, #32]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d002      	beq.n	8016ad8 <HAL_I2C_Mem_Read+0x34>
 8016ad2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d105      	bne.n	8016ae4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016ade:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8016ae0:	2301      	movs	r3, #1
 8016ae2:	e0f1      	b.n	8016cc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016ae4:	68fb      	ldr	r3, [r7, #12]
 8016ae6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8016aea:	2b01      	cmp	r3, #1
 8016aec:	d101      	bne.n	8016af2 <HAL_I2C_Mem_Read+0x4e>
 8016aee:	2302      	movs	r3, #2
 8016af0:	e0ea      	b.n	8016cc8 <HAL_I2C_Mem_Read+0x224>
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	2201      	movs	r2, #1
 8016af6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016afa:	f7fa fbfb 	bl	80112f4 <HAL_GetTick>
 8016afe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8016b00:	697b      	ldr	r3, [r7, #20]
 8016b02:	9300      	str	r3, [sp, #0]
 8016b04:	2319      	movs	r3, #25
 8016b06:	2201      	movs	r2, #1
 8016b08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8016b0c:	68f8      	ldr	r0, [r7, #12]
 8016b0e:	f000 ff6a 	bl	80179e6 <I2C_WaitOnFlagUntilTimeout>
 8016b12:	4603      	mov	r3, r0
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d001      	beq.n	8016b1c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8016b18:	2301      	movs	r3, #1
 8016b1a:	e0d5      	b.n	8016cc8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	2222      	movs	r2, #34	@ 0x22
 8016b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	2240      	movs	r2, #64	@ 0x40
 8016b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	2200      	movs	r2, #0
 8016b30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	6a3a      	ldr	r2, [r7, #32]
 8016b36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	2200      	movs	r2, #0
 8016b42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8016b44:	88f8      	ldrh	r0, [r7, #6]
 8016b46:	893a      	ldrh	r2, [r7, #8]
 8016b48:	8979      	ldrh	r1, [r7, #10]
 8016b4a:	697b      	ldr	r3, [r7, #20]
 8016b4c:	9301      	str	r3, [sp, #4]
 8016b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b50:	9300      	str	r3, [sp, #0]
 8016b52:	4603      	mov	r3, r0
 8016b54:	68f8      	ldr	r0, [r7, #12]
 8016b56:	f000 fa6f 	bl	8017038 <I2C_RequestMemoryRead>
 8016b5a:	4603      	mov	r3, r0
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d005      	beq.n	8016b6c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	2200      	movs	r2, #0
 8016b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8016b68:	2301      	movs	r3, #1
 8016b6a:	e0ad      	b.n	8016cc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b70:	b29b      	uxth	r3, r3
 8016b72:	2bff      	cmp	r3, #255	@ 0xff
 8016b74:	d90e      	bls.n	8016b94 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	22ff      	movs	r2, #255	@ 0xff
 8016b7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b80:	b2da      	uxtb	r2, r3
 8016b82:	8979      	ldrh	r1, [r7, #10]
 8016b84:	4b52      	ldr	r3, [pc, #328]	@ (8016cd0 <HAL_I2C_Mem_Read+0x22c>)
 8016b86:	9300      	str	r3, [sp, #0]
 8016b88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8016b8c:	68f8      	ldr	r0, [r7, #12]
 8016b8e:	f001 f8e3 	bl	8017d58 <I2C_TransferConfig>
 8016b92:	e00f      	b.n	8016bb4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b98:	b29a      	uxth	r2, r3
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016ba2:	b2da      	uxtb	r2, r3
 8016ba4:	8979      	ldrh	r1, [r7, #10]
 8016ba6:	4b4a      	ldr	r3, [pc, #296]	@ (8016cd0 <HAL_I2C_Mem_Read+0x22c>)
 8016ba8:	9300      	str	r3, [sp, #0]
 8016baa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8016bae:	68f8      	ldr	r0, [r7, #12]
 8016bb0:	f001 f8d2 	bl	8017d58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8016bb4:	697b      	ldr	r3, [r7, #20]
 8016bb6:	9300      	str	r3, [sp, #0]
 8016bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bba:	2200      	movs	r2, #0
 8016bbc:	2104      	movs	r1, #4
 8016bbe:	68f8      	ldr	r0, [r7, #12]
 8016bc0:	f000 ff11 	bl	80179e6 <I2C_WaitOnFlagUntilTimeout>
 8016bc4:	4603      	mov	r3, r0
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d001      	beq.n	8016bce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8016bca:	2301      	movs	r3, #1
 8016bcc:	e07c      	b.n	8016cc8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bd8:	b2d2      	uxtb	r2, r2
 8016bda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016be0:	1c5a      	adds	r2, r3, #1
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016bea:	3b01      	subs	r3, #1
 8016bec:	b29a      	uxth	r2, r3
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016bf6:	b29b      	uxth	r3, r3
 8016bf8:	3b01      	subs	r3, #1
 8016bfa:	b29a      	uxth	r2, r3
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c04:	b29b      	uxth	r3, r3
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d034      	beq.n	8016c74 <HAL_I2C_Mem_Read+0x1d0>
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d130      	bne.n	8016c74 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016c12:	697b      	ldr	r3, [r7, #20]
 8016c14:	9300      	str	r3, [sp, #0]
 8016c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c18:	2200      	movs	r2, #0
 8016c1a:	2180      	movs	r1, #128	@ 0x80
 8016c1c:	68f8      	ldr	r0, [r7, #12]
 8016c1e:	f000 fee2 	bl	80179e6 <I2C_WaitOnFlagUntilTimeout>
 8016c22:	4603      	mov	r3, r0
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d001      	beq.n	8016c2c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8016c28:	2301      	movs	r3, #1
 8016c2a:	e04d      	b.n	8016cc8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c30:	b29b      	uxth	r3, r3
 8016c32:	2bff      	cmp	r3, #255	@ 0xff
 8016c34:	d90e      	bls.n	8016c54 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016c36:	68fb      	ldr	r3, [r7, #12]
 8016c38:	22ff      	movs	r2, #255	@ 0xff
 8016c3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016c40:	b2da      	uxtb	r2, r3
 8016c42:	8979      	ldrh	r1, [r7, #10]
 8016c44:	2300      	movs	r3, #0
 8016c46:	9300      	str	r3, [sp, #0]
 8016c48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8016c4c:	68f8      	ldr	r0, [r7, #12]
 8016c4e:	f001 f883 	bl	8017d58 <I2C_TransferConfig>
 8016c52:	e00f      	b.n	8016c74 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c58:	b29a      	uxth	r2, r3
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016c62:	b2da      	uxtb	r2, r3
 8016c64:	8979      	ldrh	r1, [r7, #10]
 8016c66:	2300      	movs	r3, #0
 8016c68:	9300      	str	r3, [sp, #0]
 8016c6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8016c6e:	68f8      	ldr	r0, [r7, #12]
 8016c70:	f001 f872 	bl	8017d58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c78:	b29b      	uxth	r3, r3
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d19a      	bne.n	8016bb4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016c7e:	697a      	ldr	r2, [r7, #20]
 8016c80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016c82:	68f8      	ldr	r0, [r7, #12]
 8016c84:	f000 ff45 	bl	8017b12 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016c88:	4603      	mov	r3, r0
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d001      	beq.n	8016c92 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8016c8e:	2301      	movs	r3, #1
 8016c90:	e01a      	b.n	8016cc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	2220      	movs	r2, #32
 8016c98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	6859      	ldr	r1, [r3, #4]
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	681a      	ldr	r2, [r3, #0]
 8016ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8016cd4 <HAL_I2C_Mem_Read+0x230>)
 8016ca6:	400b      	ands	r3, r1
 8016ca8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016caa:	68fb      	ldr	r3, [r7, #12]
 8016cac:	2220      	movs	r2, #32
 8016cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	2200      	movs	r2, #0
 8016cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	2200      	movs	r2, #0
 8016cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8016cc2:	2300      	movs	r3, #0
 8016cc4:	e000      	b.n	8016cc8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8016cc6:	2302      	movs	r3, #2
  }
}
 8016cc8:	4618      	mov	r0, r3
 8016cca:	3718      	adds	r7, #24
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	bd80      	pop	{r7, pc}
 8016cd0:	80002400 	.word	0x80002400
 8016cd4:	fe00e800 	.word	0xfe00e800

08016cd8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8016cd8:	b580      	push	{r7, lr}
 8016cda:	b084      	sub	sp, #16
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	699b      	ldr	r3, [r3, #24]
 8016ce6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	681b      	ldr	r3, [r3, #0]
 8016cee:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d005      	beq.n	8016d04 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016cfc:	68ba      	ldr	r2, [r7, #8]
 8016cfe:	68f9      	ldr	r1, [r7, #12]
 8016d00:	6878      	ldr	r0, [r7, #4]
 8016d02:	4798      	blx	r3
  }
}
 8016d04:	bf00      	nop
 8016d06:	3710      	adds	r7, #16
 8016d08:	46bd      	mov	sp, r7
 8016d0a:	bd80      	pop	{r7, pc}

08016d0c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b086      	sub	sp, #24
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	699b      	ldr	r3, [r3, #24]
 8016d1a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8016d24:	697b      	ldr	r3, [r7, #20]
 8016d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d00f      	beq.n	8016d4e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016d2e:	693b      	ldr	r3, [r7, #16]
 8016d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d00a      	beq.n	8016d4e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016d3c:	f043 0201 	orr.w	r2, r3, #1
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016d4c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8016d4e:	697b      	ldr	r3, [r7, #20]
 8016d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d00f      	beq.n	8016d78 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016d58:	693b      	ldr	r3, [r7, #16]
 8016d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d00a      	beq.n	8016d78 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016d66:	f043 0208 	orr.w	r2, r3, #8
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8016d76:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8016d78:	697b      	ldr	r3, [r7, #20]
 8016d7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d00f      	beq.n	8016da2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016d82:	693b      	ldr	r3, [r7, #16]
 8016d84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d00a      	beq.n	8016da2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016d90:	f043 0202 	orr.w	r2, r3, #2
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016da0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016da6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	f003 030b 	and.w	r3, r3, #11
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d003      	beq.n	8016dba <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8016db2:	68f9      	ldr	r1, [r7, #12]
 8016db4:	6878      	ldr	r0, [r7, #4]
 8016db6:	f000 fcbd 	bl	8017734 <I2C_ITError>
  }
}
 8016dba:	bf00      	nop
 8016dbc:	3718      	adds	r7, #24
 8016dbe:	46bd      	mov	sp, r7
 8016dc0:	bd80      	pop	{r7, pc}

08016dc2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016dc2:	b480      	push	{r7}
 8016dc4:	b083      	sub	sp, #12
 8016dc6:	af00      	add	r7, sp, #0
 8016dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8016dca:	bf00      	nop
 8016dcc:	370c      	adds	r7, #12
 8016dce:	46bd      	mov	sp, r7
 8016dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd4:	4770      	bx	lr

08016dd6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016dd6:	b480      	push	{r7}
 8016dd8:	b083      	sub	sp, #12
 8016dda:	af00      	add	r7, sp, #0
 8016ddc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8016dde:	bf00      	nop
 8016de0:	370c      	adds	r7, #12
 8016de2:	46bd      	mov	sp, r7
 8016de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016de8:	4770      	bx	lr

08016dea <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8016dea:	b480      	push	{r7}
 8016dec:	b083      	sub	sp, #12
 8016dee:	af00      	add	r7, sp, #0
 8016df0:	6078      	str	r0, [r7, #4]
 8016df2:	460b      	mov	r3, r1
 8016df4:	70fb      	strb	r3, [r7, #3]
 8016df6:	4613      	mov	r3, r2
 8016df8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8016dfa:	bf00      	nop
 8016dfc:	370c      	adds	r7, #12
 8016dfe:	46bd      	mov	sp, r7
 8016e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e04:	4770      	bx	lr

08016e06 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016e06:	b480      	push	{r7}
 8016e08:	b083      	sub	sp, #12
 8016e0a:	af00      	add	r7, sp, #0
 8016e0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8016e0e:	bf00      	nop
 8016e10:	370c      	adds	r7, #12
 8016e12:	46bd      	mov	sp, r7
 8016e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e18:	4770      	bx	lr

08016e1a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016e1a:	b480      	push	{r7}
 8016e1c:	b083      	sub	sp, #12
 8016e1e:	af00      	add	r7, sp, #0
 8016e20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8016e22:	bf00      	nop
 8016e24:	370c      	adds	r7, #12
 8016e26:	46bd      	mov	sp, r7
 8016e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e2c:	4770      	bx	lr

08016e2e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8016e2e:	b480      	push	{r7}
 8016e30:	b083      	sub	sp, #12
 8016e32:	af00      	add	r7, sp, #0
 8016e34:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8016e3a:	4618      	mov	r0, r3
 8016e3c:	370c      	adds	r7, #12
 8016e3e:	46bd      	mov	sp, r7
 8016e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e44:	4770      	bx	lr

08016e46 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8016e46:	b580      	push	{r7, lr}
 8016e48:	b086      	sub	sp, #24
 8016e4a:	af00      	add	r7, sp, #0
 8016e4c:	60f8      	str	r0, [r7, #12]
 8016e4e:	60b9      	str	r1, [r7, #8]
 8016e50:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016e56:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8016e58:	68bb      	ldr	r3, [r7, #8]
 8016e5a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8016e5c:	68fb      	ldr	r3, [r7, #12]
 8016e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8016e62:	2b01      	cmp	r3, #1
 8016e64:	d101      	bne.n	8016e6a <I2C_Slave_ISR_IT+0x24>
 8016e66:	2302      	movs	r3, #2
 8016e68:	e0e1      	b.n	801702e <I2C_Slave_ISR_IT+0x1e8>
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	2201      	movs	r2, #1
 8016e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016e72:	693b      	ldr	r3, [r7, #16]
 8016e74:	f003 0320 	and.w	r3, r3, #32
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d008      	beq.n	8016e8e <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d003      	beq.n	8016e8e <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8016e86:	6939      	ldr	r1, [r7, #16]
 8016e88:	68f8      	ldr	r0, [r7, #12]
 8016e8a:	f000 fa09 	bl	80172a0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016e8e:	693b      	ldr	r3, [r7, #16]
 8016e90:	f003 0310 	and.w	r3, r3, #16
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d04b      	beq.n	8016f30 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d046      	beq.n	8016f30 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016ea6:	b29b      	uxth	r3, r3
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d128      	bne.n	8016efe <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016eb2:	b2db      	uxtb	r3, r3
 8016eb4:	2b28      	cmp	r3, #40	@ 0x28
 8016eb6:	d108      	bne.n	8016eca <I2C_Slave_ISR_IT+0x84>
 8016eb8:	697b      	ldr	r3, [r7, #20]
 8016eba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8016ebe:	d104      	bne.n	8016eca <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8016ec0:	6939      	ldr	r1, [r7, #16]
 8016ec2:	68f8      	ldr	r0, [r7, #12]
 8016ec4:	f000 fbe2 	bl	801768c <I2C_ITListenCplt>
 8016ec8:	e031      	b.n	8016f2e <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016ed0:	b2db      	uxtb	r3, r3
 8016ed2:	2b29      	cmp	r3, #41	@ 0x29
 8016ed4:	d10e      	bne.n	8016ef4 <I2C_Slave_ISR_IT+0xae>
 8016ed6:	697b      	ldr	r3, [r7, #20]
 8016ed8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8016edc:	d00a      	beq.n	8016ef4 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	2210      	movs	r2, #16
 8016ee4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8016ee6:	68f8      	ldr	r0, [r7, #12]
 8016ee8:	f000 fd3b 	bl	8017962 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8016eec:	68f8      	ldr	r0, [r7, #12]
 8016eee:	f000 f97b 	bl	80171e8 <I2C_ITSlaveSeqCplt>
 8016ef2:	e01c      	b.n	8016f2e <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016ef4:	68fb      	ldr	r3, [r7, #12]
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	2210      	movs	r2, #16
 8016efa:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8016efc:	e08f      	b.n	801701e <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	2210      	movs	r2, #16
 8016f04:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016f0a:	f043 0204 	orr.w	r2, r3, #4
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8016f12:	697b      	ldr	r3, [r7, #20]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d003      	beq.n	8016f20 <I2C_Slave_ISR_IT+0xda>
 8016f18:	697b      	ldr	r3, [r7, #20]
 8016f1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016f1e:	d17e      	bne.n	801701e <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016f24:	4619      	mov	r1, r3
 8016f26:	68f8      	ldr	r0, [r7, #12]
 8016f28:	f000 fc04 	bl	8017734 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8016f2c:	e077      	b.n	801701e <I2C_Slave_ISR_IT+0x1d8>
 8016f2e:	e076      	b.n	801701e <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016f30:	693b      	ldr	r3, [r7, #16]
 8016f32:	f003 0304 	and.w	r3, r3, #4
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d02f      	beq.n	8016f9a <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d02a      	beq.n	8016f9a <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016f48:	b29b      	uxth	r3, r3
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d018      	beq.n	8016f80 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016f4e:	68fb      	ldr	r3, [r7, #12]
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f58:	b2d2      	uxtb	r2, r2
 8016f5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016f5c:	68fb      	ldr	r3, [r7, #12]
 8016f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f60:	1c5a      	adds	r2, r3, #1
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016f6a:	3b01      	subs	r3, #1
 8016f6c:	b29a      	uxth	r2, r3
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016f76:	b29b      	uxth	r3, r3
 8016f78:	3b01      	subs	r3, #1
 8016f7a:	b29a      	uxth	r2, r3
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016f84:	b29b      	uxth	r3, r3
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d14b      	bne.n	8017022 <I2C_Slave_ISR_IT+0x1dc>
 8016f8a:	697b      	ldr	r3, [r7, #20]
 8016f8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8016f90:	d047      	beq.n	8017022 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8016f92:	68f8      	ldr	r0, [r7, #12]
 8016f94:	f000 f928 	bl	80171e8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8016f98:	e043      	b.n	8017022 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8016f9a:	693b      	ldr	r3, [r7, #16]
 8016f9c:	f003 0308 	and.w	r3, r3, #8
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d009      	beq.n	8016fb8 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d004      	beq.n	8016fb8 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8016fae:	6939      	ldr	r1, [r7, #16]
 8016fb0:	68f8      	ldr	r0, [r7, #12]
 8016fb2:	f000 f895 	bl	80170e0 <I2C_ITAddrCplt>
 8016fb6:	e035      	b.n	8017024 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016fb8:	693b      	ldr	r3, [r7, #16]
 8016fba:	f003 0302 	and.w	r3, r3, #2
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d030      	beq.n	8017024 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d02b      	beq.n	8017024 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016fd0:	b29b      	uxth	r3, r3
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d018      	beq.n	8017008 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fda:	781a      	ldrb	r2, [r3, #0]
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fe6:	1c5a      	adds	r2, r3, #1
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8016fec:	68fb      	ldr	r3, [r7, #12]
 8016fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016ff0:	b29b      	uxth	r3, r3
 8016ff2:	3b01      	subs	r3, #1
 8016ff4:	b29a      	uxth	r2, r3
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016ffe:	3b01      	subs	r3, #1
 8017000:	b29a      	uxth	r2, r3
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	851a      	strh	r2, [r3, #40]	@ 0x28
 8017006:	e00d      	b.n	8017024 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8017008:	697b      	ldr	r3, [r7, #20]
 801700a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801700e:	d002      	beq.n	8017016 <I2C_Slave_ISR_IT+0x1d0>
 8017010:	697b      	ldr	r3, [r7, #20]
 8017012:	2b00      	cmp	r3, #0
 8017014:	d106      	bne.n	8017024 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8017016:	68f8      	ldr	r0, [r7, #12]
 8017018:	f000 f8e6 	bl	80171e8 <I2C_ITSlaveSeqCplt>
 801701c:	e002      	b.n	8017024 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 801701e:	bf00      	nop
 8017020:	e000      	b.n	8017024 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8017022:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	2200      	movs	r2, #0
 8017028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 801702c:	2300      	movs	r3, #0
}
 801702e:	4618      	mov	r0, r3
 8017030:	3718      	adds	r7, #24
 8017032:	46bd      	mov	sp, r7
 8017034:	bd80      	pop	{r7, pc}
	...

08017038 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8017038:	b580      	push	{r7, lr}
 801703a:	b086      	sub	sp, #24
 801703c:	af02      	add	r7, sp, #8
 801703e:	60f8      	str	r0, [r7, #12]
 8017040:	4608      	mov	r0, r1
 8017042:	4611      	mov	r1, r2
 8017044:	461a      	mov	r2, r3
 8017046:	4603      	mov	r3, r0
 8017048:	817b      	strh	r3, [r7, #10]
 801704a:	460b      	mov	r3, r1
 801704c:	813b      	strh	r3, [r7, #8]
 801704e:	4613      	mov	r3, r2
 8017050:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8017052:	88fb      	ldrh	r3, [r7, #6]
 8017054:	b2da      	uxtb	r2, r3
 8017056:	8979      	ldrh	r1, [r7, #10]
 8017058:	4b20      	ldr	r3, [pc, #128]	@ (80170dc <I2C_RequestMemoryRead+0xa4>)
 801705a:	9300      	str	r3, [sp, #0]
 801705c:	2300      	movs	r3, #0
 801705e:	68f8      	ldr	r0, [r7, #12]
 8017060:	f000 fe7a 	bl	8017d58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017064:	69fa      	ldr	r2, [r7, #28]
 8017066:	69b9      	ldr	r1, [r7, #24]
 8017068:	68f8      	ldr	r0, [r7, #12]
 801706a:	f000 fd0b 	bl	8017a84 <I2C_WaitOnTXISFlagUntilTimeout>
 801706e:	4603      	mov	r3, r0
 8017070:	2b00      	cmp	r3, #0
 8017072:	d001      	beq.n	8017078 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8017074:	2301      	movs	r3, #1
 8017076:	e02c      	b.n	80170d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8017078:	88fb      	ldrh	r3, [r7, #6]
 801707a:	2b01      	cmp	r3, #1
 801707c:	d105      	bne.n	801708a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801707e:	893b      	ldrh	r3, [r7, #8]
 8017080:	b2da      	uxtb	r2, r3
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	629a      	str	r2, [r3, #40]	@ 0x28
 8017088:	e015      	b.n	80170b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801708a:	893b      	ldrh	r3, [r7, #8]
 801708c:	0a1b      	lsrs	r3, r3, #8
 801708e:	b29b      	uxth	r3, r3
 8017090:	b2da      	uxtb	r2, r3
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017098:	69fa      	ldr	r2, [r7, #28]
 801709a:	69b9      	ldr	r1, [r7, #24]
 801709c:	68f8      	ldr	r0, [r7, #12]
 801709e:	f000 fcf1 	bl	8017a84 <I2C_WaitOnTXISFlagUntilTimeout>
 80170a2:	4603      	mov	r3, r0
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d001      	beq.n	80170ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80170a8:	2301      	movs	r3, #1
 80170aa:	e012      	b.n	80170d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80170ac:	893b      	ldrh	r3, [r7, #8]
 80170ae:	b2da      	uxtb	r2, r3
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80170b6:	69fb      	ldr	r3, [r7, #28]
 80170b8:	9300      	str	r3, [sp, #0]
 80170ba:	69bb      	ldr	r3, [r7, #24]
 80170bc:	2200      	movs	r2, #0
 80170be:	2140      	movs	r1, #64	@ 0x40
 80170c0:	68f8      	ldr	r0, [r7, #12]
 80170c2:	f000 fc90 	bl	80179e6 <I2C_WaitOnFlagUntilTimeout>
 80170c6:	4603      	mov	r3, r0
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d001      	beq.n	80170d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80170cc:	2301      	movs	r3, #1
 80170ce:	e000      	b.n	80170d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80170d0:	2300      	movs	r3, #0
}
 80170d2:	4618      	mov	r0, r3
 80170d4:	3710      	adds	r7, #16
 80170d6:	46bd      	mov	sp, r7
 80170d8:	bd80      	pop	{r7, pc}
 80170da:	bf00      	nop
 80170dc:	80002000 	.word	0x80002000

080170e0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b084      	sub	sp, #16
 80170e4:	af00      	add	r7, sp, #0
 80170e6:	6078      	str	r0, [r7, #4]
 80170e8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80170f0:	b2db      	uxtb	r3, r3
 80170f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80170f6:	2b28      	cmp	r3, #40	@ 0x28
 80170f8:	d16a      	bne.n	80171d0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	699b      	ldr	r3, [r3, #24]
 8017100:	0c1b      	lsrs	r3, r3, #16
 8017102:	b2db      	uxtb	r3, r3
 8017104:	f003 0301 	and.w	r3, r3, #1
 8017108:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	699b      	ldr	r3, [r3, #24]
 8017110:	0c1b      	lsrs	r3, r3, #16
 8017112:	b29b      	uxth	r3, r3
 8017114:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8017118:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	681b      	ldr	r3, [r3, #0]
 801711e:	689b      	ldr	r3, [r3, #8]
 8017120:	b29b      	uxth	r3, r3
 8017122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8017126:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	68db      	ldr	r3, [r3, #12]
 801712e:	b29b      	uxth	r3, r3
 8017130:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8017134:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	68db      	ldr	r3, [r3, #12]
 801713a:	2b02      	cmp	r3, #2
 801713c:	d138      	bne.n	80171b0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 801713e:	897b      	ldrh	r3, [r7, #10]
 8017140:	09db      	lsrs	r3, r3, #7
 8017142:	b29a      	uxth	r2, r3
 8017144:	89bb      	ldrh	r3, [r7, #12]
 8017146:	4053      	eors	r3, r2
 8017148:	b29b      	uxth	r3, r3
 801714a:	f003 0306 	and.w	r3, r3, #6
 801714e:	2b00      	cmp	r3, #0
 8017150:	d11c      	bne.n	801718c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8017152:	897b      	ldrh	r3, [r7, #10]
 8017154:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801715a:	1c5a      	adds	r2, r3, #1
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017164:	2b02      	cmp	r3, #2
 8017166:	d13b      	bne.n	80171e0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	2200      	movs	r2, #0
 801716c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	2208      	movs	r2, #8
 8017174:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	2200      	movs	r2, #0
 801717a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801717e:	89ba      	ldrh	r2, [r7, #12]
 8017180:	7bfb      	ldrb	r3, [r7, #15]
 8017182:	4619      	mov	r1, r3
 8017184:	6878      	ldr	r0, [r7, #4]
 8017186:	f7ff fe30 	bl	8016dea <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 801718a:	e029      	b.n	80171e0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 801718c:	893b      	ldrh	r3, [r7, #8]
 801718e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8017190:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8017194:	6878      	ldr	r0, [r7, #4]
 8017196:	f000 fe11 	bl	8017dbc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	2200      	movs	r2, #0
 801719e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80171a2:	89ba      	ldrh	r2, [r7, #12]
 80171a4:	7bfb      	ldrb	r3, [r7, #15]
 80171a6:	4619      	mov	r1, r3
 80171a8:	6878      	ldr	r0, [r7, #4]
 80171aa:	f7ff fe1e 	bl	8016dea <HAL_I2C_AddrCallback>
}
 80171ae:	e017      	b.n	80171e0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80171b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80171b4:	6878      	ldr	r0, [r7, #4]
 80171b6:	f000 fe01 	bl	8017dbc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	2200      	movs	r2, #0
 80171be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80171c2:	89ba      	ldrh	r2, [r7, #12]
 80171c4:	7bfb      	ldrb	r3, [r7, #15]
 80171c6:	4619      	mov	r1, r3
 80171c8:	6878      	ldr	r0, [r7, #4]
 80171ca:	f7ff fe0e 	bl	8016dea <HAL_I2C_AddrCallback>
}
 80171ce:	e007      	b.n	80171e0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	2208      	movs	r2, #8
 80171d6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	2200      	movs	r2, #0
 80171dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80171e0:	bf00      	nop
 80171e2:	3710      	adds	r7, #16
 80171e4:	46bd      	mov	sp, r7
 80171e6:	bd80      	pop	{r7, pc}

080171e8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80171e8:	b580      	push	{r7, lr}
 80171ea:	b084      	sub	sp, #16
 80171ec:	af00      	add	r7, sp, #0
 80171ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	2200      	movs	r2, #0
 80171fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8017206:	2b00      	cmp	r3, #0
 8017208:	d008      	beq.n	801721c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	681a      	ldr	r2, [r3, #0]
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8017218:	601a      	str	r2, [r3, #0]
 801721a:	e00c      	b.n	8017236 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8017222:	2b00      	cmp	r3, #0
 8017224:	d007      	beq.n	8017236 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	681a      	ldr	r2, [r3, #0]
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8017234:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801723c:	b2db      	uxtb	r3, r3
 801723e:	2b29      	cmp	r3, #41	@ 0x29
 8017240:	d112      	bne.n	8017268 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	2228      	movs	r2, #40	@ 0x28
 8017246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	2221      	movs	r2, #33	@ 0x21
 801724e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017250:	2101      	movs	r1, #1
 8017252:	6878      	ldr	r0, [r7, #4]
 8017254:	f000 fdb2 	bl	8017dbc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	2200      	movs	r2, #0
 801725c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8017260:	6878      	ldr	r0, [r7, #4]
 8017262:	f7ff fdae 	bl	8016dc2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8017266:	e017      	b.n	8017298 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801726e:	b2db      	uxtb	r3, r3
 8017270:	2b2a      	cmp	r3, #42	@ 0x2a
 8017272:	d111      	bne.n	8017298 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	2228      	movs	r2, #40	@ 0x28
 8017278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	2222      	movs	r2, #34	@ 0x22
 8017280:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017282:	2102      	movs	r1, #2
 8017284:	6878      	ldr	r0, [r7, #4]
 8017286:	f000 fd99 	bl	8017dbc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	2200      	movs	r2, #0
 801728e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8017292:	6878      	ldr	r0, [r7, #4]
 8017294:	f7ff fd9f 	bl	8016dd6 <HAL_I2C_SlaveRxCpltCallback>
}
 8017298:	bf00      	nop
 801729a:	3710      	adds	r7, #16
 801729c:	46bd      	mov	sp, r7
 801729e:	bd80      	pop	{r7, pc}

080172a0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80172a0:	b580      	push	{r7, lr}
 80172a2:	b086      	sub	sp, #24
 80172a4:	af00      	add	r7, sp, #0
 80172a6:	6078      	str	r0, [r7, #4]
 80172a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80172b2:	683b      	ldr	r3, [r7, #0]
 80172b4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80172bc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	2220      	movs	r2, #32
 80172c4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80172c6:	7bfb      	ldrb	r3, [r7, #15]
 80172c8:	2b21      	cmp	r3, #33	@ 0x21
 80172ca:	d002      	beq.n	80172d2 <I2C_ITSlaveCplt+0x32>
 80172cc:	7bfb      	ldrb	r3, [r7, #15]
 80172ce:	2b29      	cmp	r3, #41	@ 0x29
 80172d0:	d108      	bne.n	80172e4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80172d2:	f248 0101 	movw	r1, #32769	@ 0x8001
 80172d6:	6878      	ldr	r0, [r7, #4]
 80172d8:	f000 fd70 	bl	8017dbc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	2221      	movs	r2, #33	@ 0x21
 80172e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80172e2:	e00d      	b.n	8017300 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80172e4:	7bfb      	ldrb	r3, [r7, #15]
 80172e6:	2b22      	cmp	r3, #34	@ 0x22
 80172e8:	d002      	beq.n	80172f0 <I2C_ITSlaveCplt+0x50>
 80172ea:	7bfb      	ldrb	r3, [r7, #15]
 80172ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80172ee:	d107      	bne.n	8017300 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80172f0:	f248 0102 	movw	r1, #32770	@ 0x8002
 80172f4:	6878      	ldr	r0, [r7, #4]
 80172f6:	f000 fd61 	bl	8017dbc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	2222      	movs	r2, #34	@ 0x22
 80172fe:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	685a      	ldr	r2, [r3, #4]
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801730e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	6859      	ldr	r1, [r3, #4]
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	681a      	ldr	r2, [r3, #0]
 801731a:	4b7f      	ldr	r3, [pc, #508]	@ (8017518 <I2C_ITSlaveCplt+0x278>)
 801731c:	400b      	ands	r3, r1
 801731e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8017320:	6878      	ldr	r0, [r7, #4]
 8017322:	f000 fb1e 	bl	8017962 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8017326:	693b      	ldr	r3, [r7, #16]
 8017328:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801732c:	2b00      	cmp	r3, #0
 801732e:	d07a      	beq.n	8017426 <I2C_ITSlaveCplt+0x186>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	681a      	ldr	r2, [r3, #0]
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801733e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017344:	2b00      	cmp	r3, #0
 8017346:	f000 8110 	beq.w	801756a <I2C_ITSlaveCplt+0x2ca>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	4a72      	ldr	r2, [pc, #456]	@ (801751c <I2C_ITSlaveCplt+0x27c>)
 8017352:	4293      	cmp	r3, r2
 8017354:	d059      	beq.n	801740a <I2C_ITSlaveCplt+0x16a>
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801735a:	681b      	ldr	r3, [r3, #0]
 801735c:	4a70      	ldr	r2, [pc, #448]	@ (8017520 <I2C_ITSlaveCplt+0x280>)
 801735e:	4293      	cmp	r3, r2
 8017360:	d053      	beq.n	801740a <I2C_ITSlaveCplt+0x16a>
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	4a6e      	ldr	r2, [pc, #440]	@ (8017524 <I2C_ITSlaveCplt+0x284>)
 801736a:	4293      	cmp	r3, r2
 801736c:	d04d      	beq.n	801740a <I2C_ITSlaveCplt+0x16a>
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	4a6c      	ldr	r2, [pc, #432]	@ (8017528 <I2C_ITSlaveCplt+0x288>)
 8017376:	4293      	cmp	r3, r2
 8017378:	d047      	beq.n	801740a <I2C_ITSlaveCplt+0x16a>
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	4a6a      	ldr	r2, [pc, #424]	@ (801752c <I2C_ITSlaveCplt+0x28c>)
 8017382:	4293      	cmp	r3, r2
 8017384:	d041      	beq.n	801740a <I2C_ITSlaveCplt+0x16a>
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	4a68      	ldr	r2, [pc, #416]	@ (8017530 <I2C_ITSlaveCplt+0x290>)
 801738e:	4293      	cmp	r3, r2
 8017390:	d03b      	beq.n	801740a <I2C_ITSlaveCplt+0x16a>
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	4a66      	ldr	r2, [pc, #408]	@ (8017534 <I2C_ITSlaveCplt+0x294>)
 801739a:	4293      	cmp	r3, r2
 801739c:	d035      	beq.n	801740a <I2C_ITSlaveCplt+0x16a>
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	4a64      	ldr	r2, [pc, #400]	@ (8017538 <I2C_ITSlaveCplt+0x298>)
 80173a6:	4293      	cmp	r3, r2
 80173a8:	d02f      	beq.n	801740a <I2C_ITSlaveCplt+0x16a>
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	4a62      	ldr	r2, [pc, #392]	@ (801753c <I2C_ITSlaveCplt+0x29c>)
 80173b2:	4293      	cmp	r3, r2
 80173b4:	d029      	beq.n	801740a <I2C_ITSlaveCplt+0x16a>
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80173ba:	681b      	ldr	r3, [r3, #0]
 80173bc:	4a60      	ldr	r2, [pc, #384]	@ (8017540 <I2C_ITSlaveCplt+0x2a0>)
 80173be:	4293      	cmp	r3, r2
 80173c0:	d023      	beq.n	801740a <I2C_ITSlaveCplt+0x16a>
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80173c6:	681b      	ldr	r3, [r3, #0]
 80173c8:	4a5e      	ldr	r2, [pc, #376]	@ (8017544 <I2C_ITSlaveCplt+0x2a4>)
 80173ca:	4293      	cmp	r3, r2
 80173cc:	d01d      	beq.n	801740a <I2C_ITSlaveCplt+0x16a>
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	4a5c      	ldr	r2, [pc, #368]	@ (8017548 <I2C_ITSlaveCplt+0x2a8>)
 80173d6:	4293      	cmp	r3, r2
 80173d8:	d017      	beq.n	801740a <I2C_ITSlaveCplt+0x16a>
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	4a5a      	ldr	r2, [pc, #360]	@ (801754c <I2C_ITSlaveCplt+0x2ac>)
 80173e2:	4293      	cmp	r3, r2
 80173e4:	d011      	beq.n	801740a <I2C_ITSlaveCplt+0x16a>
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	4a58      	ldr	r2, [pc, #352]	@ (8017550 <I2C_ITSlaveCplt+0x2b0>)
 80173ee:	4293      	cmp	r3, r2
 80173f0:	d00b      	beq.n	801740a <I2C_ITSlaveCplt+0x16a>
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	4a56      	ldr	r2, [pc, #344]	@ (8017554 <I2C_ITSlaveCplt+0x2b4>)
 80173fa:	4293      	cmp	r3, r2
 80173fc:	d005      	beq.n	801740a <I2C_ITSlaveCplt+0x16a>
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	4a54      	ldr	r2, [pc, #336]	@ (8017558 <I2C_ITSlaveCplt+0x2b8>)
 8017406:	4293      	cmp	r3, r2
 8017408:	d105      	bne.n	8017416 <I2C_ITSlaveCplt+0x176>
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	685b      	ldr	r3, [r3, #4]
 8017412:	b29b      	uxth	r3, r3
 8017414:	e004      	b.n	8017420 <I2C_ITSlaveCplt+0x180>
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	685b      	ldr	r3, [r3, #4]
 801741e:	b29b      	uxth	r3, r3
 8017420:	687a      	ldr	r2, [r7, #4]
 8017422:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8017424:	e0a1      	b.n	801756a <I2C_ITSlaveCplt+0x2ca>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8017426:	693b      	ldr	r3, [r7, #16]
 8017428:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801742c:	2b00      	cmp	r3, #0
 801742e:	f000 809c 	beq.w	801756a <I2C_ITSlaveCplt+0x2ca>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	681a      	ldr	r2, [r3, #0]
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8017440:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017446:	2b00      	cmp	r3, #0
 8017448:	f000 808f 	beq.w	801756a <I2C_ITSlaveCplt+0x2ca>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	4a32      	ldr	r2, [pc, #200]	@ (801751c <I2C_ITSlaveCplt+0x27c>)
 8017454:	4293      	cmp	r3, r2
 8017456:	d059      	beq.n	801750c <I2C_ITSlaveCplt+0x26c>
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801745c:	681b      	ldr	r3, [r3, #0]
 801745e:	4a30      	ldr	r2, [pc, #192]	@ (8017520 <I2C_ITSlaveCplt+0x280>)
 8017460:	4293      	cmp	r3, r2
 8017462:	d053      	beq.n	801750c <I2C_ITSlaveCplt+0x26c>
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	4a2e      	ldr	r2, [pc, #184]	@ (8017524 <I2C_ITSlaveCplt+0x284>)
 801746c:	4293      	cmp	r3, r2
 801746e:	d04d      	beq.n	801750c <I2C_ITSlaveCplt+0x26c>
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	4a2c      	ldr	r2, [pc, #176]	@ (8017528 <I2C_ITSlaveCplt+0x288>)
 8017478:	4293      	cmp	r3, r2
 801747a:	d047      	beq.n	801750c <I2C_ITSlaveCplt+0x26c>
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	4a2a      	ldr	r2, [pc, #168]	@ (801752c <I2C_ITSlaveCplt+0x28c>)
 8017484:	4293      	cmp	r3, r2
 8017486:	d041      	beq.n	801750c <I2C_ITSlaveCplt+0x26c>
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	4a28      	ldr	r2, [pc, #160]	@ (8017530 <I2C_ITSlaveCplt+0x290>)
 8017490:	4293      	cmp	r3, r2
 8017492:	d03b      	beq.n	801750c <I2C_ITSlaveCplt+0x26c>
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	4a26      	ldr	r2, [pc, #152]	@ (8017534 <I2C_ITSlaveCplt+0x294>)
 801749c:	4293      	cmp	r3, r2
 801749e:	d035      	beq.n	801750c <I2C_ITSlaveCplt+0x26c>
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	4a24      	ldr	r2, [pc, #144]	@ (8017538 <I2C_ITSlaveCplt+0x298>)
 80174a8:	4293      	cmp	r3, r2
 80174aa:	d02f      	beq.n	801750c <I2C_ITSlaveCplt+0x26c>
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80174b0:	681b      	ldr	r3, [r3, #0]
 80174b2:	4a22      	ldr	r2, [pc, #136]	@ (801753c <I2C_ITSlaveCplt+0x29c>)
 80174b4:	4293      	cmp	r3, r2
 80174b6:	d029      	beq.n	801750c <I2C_ITSlaveCplt+0x26c>
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	4a20      	ldr	r2, [pc, #128]	@ (8017540 <I2C_ITSlaveCplt+0x2a0>)
 80174c0:	4293      	cmp	r3, r2
 80174c2:	d023      	beq.n	801750c <I2C_ITSlaveCplt+0x26c>
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80174c8:	681b      	ldr	r3, [r3, #0]
 80174ca:	4a1e      	ldr	r2, [pc, #120]	@ (8017544 <I2C_ITSlaveCplt+0x2a4>)
 80174cc:	4293      	cmp	r3, r2
 80174ce:	d01d      	beq.n	801750c <I2C_ITSlaveCplt+0x26c>
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80174d4:	681b      	ldr	r3, [r3, #0]
 80174d6:	4a1c      	ldr	r2, [pc, #112]	@ (8017548 <I2C_ITSlaveCplt+0x2a8>)
 80174d8:	4293      	cmp	r3, r2
 80174da:	d017      	beq.n	801750c <I2C_ITSlaveCplt+0x26c>
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80174e0:	681b      	ldr	r3, [r3, #0]
 80174e2:	4a1a      	ldr	r2, [pc, #104]	@ (801754c <I2C_ITSlaveCplt+0x2ac>)
 80174e4:	4293      	cmp	r3, r2
 80174e6:	d011      	beq.n	801750c <I2C_ITSlaveCplt+0x26c>
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	4a18      	ldr	r2, [pc, #96]	@ (8017550 <I2C_ITSlaveCplt+0x2b0>)
 80174f0:	4293      	cmp	r3, r2
 80174f2:	d00b      	beq.n	801750c <I2C_ITSlaveCplt+0x26c>
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80174f8:	681b      	ldr	r3, [r3, #0]
 80174fa:	4a16      	ldr	r2, [pc, #88]	@ (8017554 <I2C_ITSlaveCplt+0x2b4>)
 80174fc:	4293      	cmp	r3, r2
 80174fe:	d005      	beq.n	801750c <I2C_ITSlaveCplt+0x26c>
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017504:	681b      	ldr	r3, [r3, #0]
 8017506:	4a14      	ldr	r2, [pc, #80]	@ (8017558 <I2C_ITSlaveCplt+0x2b8>)
 8017508:	4293      	cmp	r3, r2
 801750a:	d127      	bne.n	801755c <I2C_ITSlaveCplt+0x2bc>
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017510:	681b      	ldr	r3, [r3, #0]
 8017512:	685b      	ldr	r3, [r3, #4]
 8017514:	b29b      	uxth	r3, r3
 8017516:	e026      	b.n	8017566 <I2C_ITSlaveCplt+0x2c6>
 8017518:	fe00e800 	.word	0xfe00e800
 801751c:	40020010 	.word	0x40020010
 8017520:	40020028 	.word	0x40020028
 8017524:	40020040 	.word	0x40020040
 8017528:	40020058 	.word	0x40020058
 801752c:	40020070 	.word	0x40020070
 8017530:	40020088 	.word	0x40020088
 8017534:	400200a0 	.word	0x400200a0
 8017538:	400200b8 	.word	0x400200b8
 801753c:	40020410 	.word	0x40020410
 8017540:	40020428 	.word	0x40020428
 8017544:	40020440 	.word	0x40020440
 8017548:	40020458 	.word	0x40020458
 801754c:	40020470 	.word	0x40020470
 8017550:	40020488 	.word	0x40020488
 8017554:	400204a0 	.word	0x400204a0
 8017558:	400204b8 	.word	0x400204b8
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	685b      	ldr	r3, [r3, #4]
 8017564:	b29b      	uxth	r3, r3
 8017566:	687a      	ldr	r2, [r7, #4]
 8017568:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 801756a:	697b      	ldr	r3, [r7, #20]
 801756c:	f003 0304 	and.w	r3, r3, #4
 8017570:	2b00      	cmp	r3, #0
 8017572:	d020      	beq.n	80175b6 <I2C_ITSlaveCplt+0x316>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8017574:	697b      	ldr	r3, [r7, #20]
 8017576:	f023 0304 	bic.w	r3, r3, #4
 801757a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017586:	b2d2      	uxtb	r2, r2
 8017588:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801758e:	1c5a      	adds	r2, r3, #1
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017598:	2b00      	cmp	r3, #0
 801759a:	d00c      	beq.n	80175b6 <I2C_ITSlaveCplt+0x316>
    {
      hi2c->XferSize--;
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80175a0:	3b01      	subs	r3, #1
 80175a2:	b29a      	uxth	r2, r3
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80175ac:	b29b      	uxth	r3, r3
 80175ae:	3b01      	subs	r3, #1
 80175b0:	b29a      	uxth	r2, r3
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80175ba:	b29b      	uxth	r3, r3
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d005      	beq.n	80175cc <I2C_ITSlaveCplt+0x32c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80175c4:	f043 0204 	orr.w	r2, r3, #4
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	2200      	movs	r2, #0
 80175d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	2200      	movs	r2, #0
 80175d8:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d010      	beq.n	8017604 <I2C_ITSlaveCplt+0x364>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80175e6:	4619      	mov	r1, r3
 80175e8:	6878      	ldr	r0, [r7, #4]
 80175ea:	f000 f8a3 	bl	8017734 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80175f4:	b2db      	uxtb	r3, r3
 80175f6:	2b28      	cmp	r3, #40	@ 0x28
 80175f8:	d141      	bne.n	801767e <I2C_ITSlaveCplt+0x3de>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80175fa:	6979      	ldr	r1, [r7, #20]
 80175fc:	6878      	ldr	r0, [r7, #4]
 80175fe:	f000 f845 	bl	801768c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8017602:	e03c      	b.n	801767e <I2C_ITSlaveCplt+0x3de>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017608:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 801760c:	d014      	beq.n	8017638 <I2C_ITSlaveCplt+0x398>
    I2C_ITSlaveSeqCplt(hi2c);
 801760e:	6878      	ldr	r0, [r7, #4]
 8017610:	f7ff fdea 	bl	80171e8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	4a1c      	ldr	r2, [pc, #112]	@ (8017688 <I2C_ITSlaveCplt+0x3e8>)
 8017618:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	2220      	movs	r2, #32
 801761e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	2200      	movs	r2, #0
 8017626:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	2200      	movs	r2, #0
 801762c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8017630:	6878      	ldr	r0, [r7, #4]
 8017632:	f7ff fbe8 	bl	8016e06 <HAL_I2C_ListenCpltCallback>
}
 8017636:	e022      	b.n	801767e <I2C_ITSlaveCplt+0x3de>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801763e:	b2db      	uxtb	r3, r3
 8017640:	2b22      	cmp	r3, #34	@ 0x22
 8017642:	d10e      	bne.n	8017662 <I2C_ITSlaveCplt+0x3c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	2220      	movs	r2, #32
 8017648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	2200      	movs	r2, #0
 8017650:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	2200      	movs	r2, #0
 8017656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801765a:	6878      	ldr	r0, [r7, #4]
 801765c:	f7ff fbbb 	bl	8016dd6 <HAL_I2C_SlaveRxCpltCallback>
}
 8017660:	e00d      	b.n	801767e <I2C_ITSlaveCplt+0x3de>
    hi2c->State = HAL_I2C_STATE_READY;
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	2220      	movs	r2, #32
 8017666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	2200      	movs	r2, #0
 801766e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	2200      	movs	r2, #0
 8017674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8017678:	6878      	ldr	r0, [r7, #4]
 801767a:	f7ff fba2 	bl	8016dc2 <HAL_I2C_SlaveTxCpltCallback>
}
 801767e:	bf00      	nop
 8017680:	3718      	adds	r7, #24
 8017682:	46bd      	mov	sp, r7
 8017684:	bd80      	pop	{r7, pc}
 8017686:	bf00      	nop
 8017688:	ffff0000 	.word	0xffff0000

0801768c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801768c:	b580      	push	{r7, lr}
 801768e:	b082      	sub	sp, #8
 8017690:	af00      	add	r7, sp, #0
 8017692:	6078      	str	r0, [r7, #4]
 8017694:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	4a25      	ldr	r2, [pc, #148]	@ (8017730 <I2C_ITListenCplt+0xa4>)
 801769a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	2200      	movs	r2, #0
 80176a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	2220      	movs	r2, #32
 80176a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	2200      	movs	r2, #0
 80176ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	2200      	movs	r2, #0
 80176b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80176b8:	683b      	ldr	r3, [r7, #0]
 80176ba:	f003 0304 	and.w	r3, r3, #4
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d022      	beq.n	8017708 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80176cc:	b2d2      	uxtb	r2, r2
 80176ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80176d4:	1c5a      	adds	r2, r3, #1
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d012      	beq.n	8017708 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80176e6:	3b01      	subs	r3, #1
 80176e8:	b29a      	uxth	r2, r3
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80176f2:	b29b      	uxth	r3, r3
 80176f4:	3b01      	subs	r3, #1
 80176f6:	b29a      	uxth	r2, r3
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017700:	f043 0204 	orr.w	r2, r3, #4
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8017708:	f248 0103 	movw	r1, #32771	@ 0x8003
 801770c:	6878      	ldr	r0, [r7, #4]
 801770e:	f000 fb55 	bl	8017dbc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	2210      	movs	r2, #16
 8017718:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	2200      	movs	r2, #0
 801771e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8017722:	6878      	ldr	r0, [r7, #4]
 8017724:	f7ff fb6f 	bl	8016e06 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8017728:	bf00      	nop
 801772a:	3708      	adds	r7, #8
 801772c:	46bd      	mov	sp, r7
 801772e:	bd80      	pop	{r7, pc}
 8017730:	ffff0000 	.word	0xffff0000

08017734 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8017734:	b580      	push	{r7, lr}
 8017736:	b084      	sub	sp, #16
 8017738:	af00      	add	r7, sp, #0
 801773a:	6078      	str	r0, [r7, #4]
 801773c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8017744:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	2200      	movs	r2, #0
 801774a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	4a6d      	ldr	r2, [pc, #436]	@ (8017908 <I2C_ITError+0x1d4>)
 8017752:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	2200      	movs	r2, #0
 8017758:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801775e:	683b      	ldr	r3, [r7, #0]
 8017760:	431a      	orrs	r2, r3
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8017766:	7bfb      	ldrb	r3, [r7, #15]
 8017768:	2b28      	cmp	r3, #40	@ 0x28
 801776a:	d005      	beq.n	8017778 <I2C_ITError+0x44>
 801776c:	7bfb      	ldrb	r3, [r7, #15]
 801776e:	2b29      	cmp	r3, #41	@ 0x29
 8017770:	d002      	beq.n	8017778 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8017772:	7bfb      	ldrb	r3, [r7, #15]
 8017774:	2b2a      	cmp	r3, #42	@ 0x2a
 8017776:	d10b      	bne.n	8017790 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8017778:	2103      	movs	r1, #3
 801777a:	6878      	ldr	r0, [r7, #4]
 801777c:	f000 fb1e 	bl	8017dbc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	2228      	movs	r2, #40	@ 0x28
 8017784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	4a60      	ldr	r2, [pc, #384]	@ (801790c <I2C_ITError+0x1d8>)
 801778c:	635a      	str	r2, [r3, #52]	@ 0x34
 801778e:	e030      	b.n	80177f2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8017790:	f248 0103 	movw	r1, #32771	@ 0x8003
 8017794:	6878      	ldr	r0, [r7, #4]
 8017796:	f000 fb11 	bl	8017dbc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801779a:	6878      	ldr	r0, [r7, #4]
 801779c:	f000 f8e1 	bl	8017962 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80177a6:	b2db      	uxtb	r3, r3
 80177a8:	2b60      	cmp	r3, #96	@ 0x60
 80177aa:	d01f      	beq.n	80177ec <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	2220      	movs	r2, #32
 80177b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	681b      	ldr	r3, [r3, #0]
 80177b8:	699b      	ldr	r3, [r3, #24]
 80177ba:	f003 0320 	and.w	r3, r3, #32
 80177be:	2b20      	cmp	r3, #32
 80177c0:	d114      	bne.n	80177ec <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	699b      	ldr	r3, [r3, #24]
 80177c8:	f003 0310 	and.w	r3, r3, #16
 80177cc:	2b10      	cmp	r3, #16
 80177ce:	d109      	bne.n	80177e4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	2210      	movs	r2, #16
 80177d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80177dc:	f043 0204 	orr.w	r2, r3, #4
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	2220      	movs	r2, #32
 80177ea:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	2200      	movs	r2, #0
 80177f0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80177f6:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d039      	beq.n	8017874 <I2C_ITError+0x140>
 8017800:	68bb      	ldr	r3, [r7, #8]
 8017802:	2b11      	cmp	r3, #17
 8017804:	d002      	beq.n	801780c <I2C_ITError+0xd8>
 8017806:	68bb      	ldr	r3, [r7, #8]
 8017808:	2b21      	cmp	r3, #33	@ 0x21
 801780a:	d133      	bne.n	8017874 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8017816:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801781a:	d107      	bne.n	801782c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	681a      	ldr	r2, [r3, #0]
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801782a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017830:	4618      	mov	r0, r3
 8017832:	f7fd f9cd 	bl	8014bd0 <HAL_DMA_GetState>
 8017836:	4603      	mov	r3, r0
 8017838:	2b01      	cmp	r3, #1
 801783a:	d017      	beq.n	801786c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017840:	4a33      	ldr	r2, [pc, #204]	@ (8017910 <I2C_ITError+0x1dc>)
 8017842:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	2200      	movs	r2, #0
 8017848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017850:	4618      	mov	r0, r3
 8017852:	f7fc f84d 	bl	80138f0 <HAL_DMA_Abort_IT>
 8017856:	4603      	mov	r3, r0
 8017858:	2b00      	cmp	r3, #0
 801785a:	d04d      	beq.n	80178f8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017862:	687a      	ldr	r2, [r7, #4]
 8017864:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8017866:	4610      	mov	r0, r2
 8017868:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801786a:	e045      	b.n	80178f8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801786c:	6878      	ldr	r0, [r7, #4]
 801786e:	f000 f851 	bl	8017914 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8017872:	e041      	b.n	80178f8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017878:	2b00      	cmp	r3, #0
 801787a:	d039      	beq.n	80178f0 <I2C_ITError+0x1bc>
 801787c:	68bb      	ldr	r3, [r7, #8]
 801787e:	2b12      	cmp	r3, #18
 8017880:	d002      	beq.n	8017888 <I2C_ITError+0x154>
 8017882:	68bb      	ldr	r3, [r7, #8]
 8017884:	2b22      	cmp	r3, #34	@ 0x22
 8017886:	d133      	bne.n	80178f0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8017892:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017896:	d107      	bne.n	80178a8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	681a      	ldr	r2, [r3, #0]
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80178a6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80178ac:	4618      	mov	r0, r3
 80178ae:	f7fd f98f 	bl	8014bd0 <HAL_DMA_GetState>
 80178b2:	4603      	mov	r3, r0
 80178b4:	2b01      	cmp	r3, #1
 80178b6:	d017      	beq.n	80178e8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80178bc:	4a14      	ldr	r2, [pc, #80]	@ (8017910 <I2C_ITError+0x1dc>)
 80178be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	2200      	movs	r2, #0
 80178c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80178cc:	4618      	mov	r0, r3
 80178ce:	f7fc f80f 	bl	80138f0 <HAL_DMA_Abort_IT>
 80178d2:	4603      	mov	r3, r0
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d011      	beq.n	80178fc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80178dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80178de:	687a      	ldr	r2, [r7, #4]
 80178e0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80178e2:	4610      	mov	r0, r2
 80178e4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80178e6:	e009      	b.n	80178fc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80178e8:	6878      	ldr	r0, [r7, #4]
 80178ea:	f000 f813 	bl	8017914 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80178ee:	e005      	b.n	80178fc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80178f0:	6878      	ldr	r0, [r7, #4]
 80178f2:	f000 f80f 	bl	8017914 <I2C_TreatErrorCallback>
  }
}
 80178f6:	e002      	b.n	80178fe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80178f8:	bf00      	nop
 80178fa:	e000      	b.n	80178fe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80178fc:	bf00      	nop
}
 80178fe:	bf00      	nop
 8017900:	3710      	adds	r7, #16
 8017902:	46bd      	mov	sp, r7
 8017904:	bd80      	pop	{r7, pc}
 8017906:	bf00      	nop
 8017908:	ffff0000 	.word	0xffff0000
 801790c:	08016e47 	.word	0x08016e47
 8017910:	080179ab 	.word	0x080179ab

08017914 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8017914:	b580      	push	{r7, lr}
 8017916:	b082      	sub	sp, #8
 8017918:	af00      	add	r7, sp, #0
 801791a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8017922:	b2db      	uxtb	r3, r3
 8017924:	2b60      	cmp	r3, #96	@ 0x60
 8017926:	d10e      	bne.n	8017946 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	2220      	movs	r2, #32
 801792c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	2200      	movs	r2, #0
 8017934:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	2200      	movs	r2, #0
 801793a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801793e:	6878      	ldr	r0, [r7, #4]
 8017940:	f7ff fa6b 	bl	8016e1a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8017944:	e009      	b.n	801795a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	2200      	movs	r2, #0
 801794a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	2200      	movs	r2, #0
 8017950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8017954:	6878      	ldr	r0, [r7, #4]
 8017956:	f7f6 fa81 	bl	800de5c <HAL_I2C_ErrorCallback>
}
 801795a:	bf00      	nop
 801795c:	3708      	adds	r7, #8
 801795e:	46bd      	mov	sp, r7
 8017960:	bd80      	pop	{r7, pc}

08017962 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8017962:	b480      	push	{r7}
 8017964:	b083      	sub	sp, #12
 8017966:	af00      	add	r7, sp, #0
 8017968:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	699b      	ldr	r3, [r3, #24]
 8017970:	f003 0302 	and.w	r3, r3, #2
 8017974:	2b02      	cmp	r3, #2
 8017976:	d103      	bne.n	8017980 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	681b      	ldr	r3, [r3, #0]
 801797c:	2200      	movs	r2, #0
 801797e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	699b      	ldr	r3, [r3, #24]
 8017986:	f003 0301 	and.w	r3, r3, #1
 801798a:	2b01      	cmp	r3, #1
 801798c:	d007      	beq.n	801799e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	699a      	ldr	r2, [r3, #24]
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	681b      	ldr	r3, [r3, #0]
 8017998:	f042 0201 	orr.w	r2, r2, #1
 801799c:	619a      	str	r2, [r3, #24]
  }
}
 801799e:	bf00      	nop
 80179a0:	370c      	adds	r7, #12
 80179a2:	46bd      	mov	sp, r7
 80179a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179a8:	4770      	bx	lr

080179aa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80179aa:	b580      	push	{r7, lr}
 80179ac:	b084      	sub	sp, #16
 80179ae:	af00      	add	r7, sp, #0
 80179b0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80179b6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80179b8:	68fb      	ldr	r3, [r7, #12]
 80179ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d003      	beq.n	80179c8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80179c4:	2200      	movs	r2, #0
 80179c6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80179c8:	68fb      	ldr	r3, [r7, #12]
 80179ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d003      	beq.n	80179d8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80179d4:	2200      	movs	r2, #0
 80179d6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80179d8:	68f8      	ldr	r0, [r7, #12]
 80179da:	f7ff ff9b 	bl	8017914 <I2C_TreatErrorCallback>
}
 80179de:	bf00      	nop
 80179e0:	3710      	adds	r7, #16
 80179e2:	46bd      	mov	sp, r7
 80179e4:	bd80      	pop	{r7, pc}

080179e6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80179e6:	b580      	push	{r7, lr}
 80179e8:	b084      	sub	sp, #16
 80179ea:	af00      	add	r7, sp, #0
 80179ec:	60f8      	str	r0, [r7, #12]
 80179ee:	60b9      	str	r1, [r7, #8]
 80179f0:	603b      	str	r3, [r7, #0]
 80179f2:	4613      	mov	r3, r2
 80179f4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80179f6:	e031      	b.n	8017a5c <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80179f8:	683b      	ldr	r3, [r7, #0]
 80179fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80179fe:	d02d      	beq.n	8017a5c <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017a00:	f7f9 fc78 	bl	80112f4 <HAL_GetTick>
 8017a04:	4602      	mov	r2, r0
 8017a06:	69bb      	ldr	r3, [r7, #24]
 8017a08:	1ad3      	subs	r3, r2, r3
 8017a0a:	683a      	ldr	r2, [r7, #0]
 8017a0c:	429a      	cmp	r2, r3
 8017a0e:	d302      	bcc.n	8017a16 <I2C_WaitOnFlagUntilTimeout+0x30>
 8017a10:	683b      	ldr	r3, [r7, #0]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d122      	bne.n	8017a5c <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	699a      	ldr	r2, [r3, #24]
 8017a1c:	68bb      	ldr	r3, [r7, #8]
 8017a1e:	4013      	ands	r3, r2
 8017a20:	68ba      	ldr	r2, [r7, #8]
 8017a22:	429a      	cmp	r2, r3
 8017a24:	bf0c      	ite	eq
 8017a26:	2301      	moveq	r3, #1
 8017a28:	2300      	movne	r3, #0
 8017a2a:	b2db      	uxtb	r3, r3
 8017a2c:	461a      	mov	r2, r3
 8017a2e:	79fb      	ldrb	r3, [r7, #7]
 8017a30:	429a      	cmp	r2, r3
 8017a32:	d113      	bne.n	8017a5c <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017a34:	68fb      	ldr	r3, [r7, #12]
 8017a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017a38:	f043 0220 	orr.w	r2, r3, #32
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	2220      	movs	r2, #32
 8017a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	2200      	movs	r2, #0
 8017a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	2200      	movs	r2, #0
 8017a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8017a58:	2301      	movs	r3, #1
 8017a5a:	e00f      	b.n	8017a7c <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	699a      	ldr	r2, [r3, #24]
 8017a62:	68bb      	ldr	r3, [r7, #8]
 8017a64:	4013      	ands	r3, r2
 8017a66:	68ba      	ldr	r2, [r7, #8]
 8017a68:	429a      	cmp	r2, r3
 8017a6a:	bf0c      	ite	eq
 8017a6c:	2301      	moveq	r3, #1
 8017a6e:	2300      	movne	r3, #0
 8017a70:	b2db      	uxtb	r3, r3
 8017a72:	461a      	mov	r2, r3
 8017a74:	79fb      	ldrb	r3, [r7, #7]
 8017a76:	429a      	cmp	r2, r3
 8017a78:	d0be      	beq.n	80179f8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8017a7a:	2300      	movs	r3, #0
}
 8017a7c:	4618      	mov	r0, r3
 8017a7e:	3710      	adds	r7, #16
 8017a80:	46bd      	mov	sp, r7
 8017a82:	bd80      	pop	{r7, pc}

08017a84 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8017a84:	b580      	push	{r7, lr}
 8017a86:	b084      	sub	sp, #16
 8017a88:	af00      	add	r7, sp, #0
 8017a8a:	60f8      	str	r0, [r7, #12]
 8017a8c:	60b9      	str	r1, [r7, #8]
 8017a8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8017a90:	e033      	b.n	8017afa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8017a92:	687a      	ldr	r2, [r7, #4]
 8017a94:	68b9      	ldr	r1, [r7, #8]
 8017a96:	68f8      	ldr	r0, [r7, #12]
 8017a98:	f000 f87e 	bl	8017b98 <I2C_IsErrorOccurred>
 8017a9c:	4603      	mov	r3, r0
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d001      	beq.n	8017aa6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8017aa2:	2301      	movs	r3, #1
 8017aa4:	e031      	b.n	8017b0a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017aa6:	68bb      	ldr	r3, [r7, #8]
 8017aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017aac:	d025      	beq.n	8017afa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017aae:	f7f9 fc21 	bl	80112f4 <HAL_GetTick>
 8017ab2:	4602      	mov	r2, r0
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	1ad3      	subs	r3, r2, r3
 8017ab8:	68ba      	ldr	r2, [r7, #8]
 8017aba:	429a      	cmp	r2, r3
 8017abc:	d302      	bcc.n	8017ac4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8017abe:	68bb      	ldr	r3, [r7, #8]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d11a      	bne.n	8017afa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8017ac4:	68fb      	ldr	r3, [r7, #12]
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	699b      	ldr	r3, [r3, #24]
 8017aca:	f003 0302 	and.w	r3, r3, #2
 8017ace:	2b02      	cmp	r3, #2
 8017ad0:	d013      	beq.n	8017afa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017ad6:	f043 0220 	orr.w	r2, r3, #32
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	2220      	movs	r2, #32
 8017ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	2200      	movs	r2, #0
 8017aea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	2200      	movs	r2, #0
 8017af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8017af6:	2301      	movs	r3, #1
 8017af8:	e007      	b.n	8017b0a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	681b      	ldr	r3, [r3, #0]
 8017afe:	699b      	ldr	r3, [r3, #24]
 8017b00:	f003 0302 	and.w	r3, r3, #2
 8017b04:	2b02      	cmp	r3, #2
 8017b06:	d1c4      	bne.n	8017a92 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8017b08:	2300      	movs	r3, #0
}
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	3710      	adds	r7, #16
 8017b0e:	46bd      	mov	sp, r7
 8017b10:	bd80      	pop	{r7, pc}

08017b12 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8017b12:	b580      	push	{r7, lr}
 8017b14:	b084      	sub	sp, #16
 8017b16:	af00      	add	r7, sp, #0
 8017b18:	60f8      	str	r0, [r7, #12]
 8017b1a:	60b9      	str	r1, [r7, #8]
 8017b1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017b1e:	e02f      	b.n	8017b80 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8017b20:	687a      	ldr	r2, [r7, #4]
 8017b22:	68b9      	ldr	r1, [r7, #8]
 8017b24:	68f8      	ldr	r0, [r7, #12]
 8017b26:	f000 f837 	bl	8017b98 <I2C_IsErrorOccurred>
 8017b2a:	4603      	mov	r3, r0
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d001      	beq.n	8017b34 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8017b30:	2301      	movs	r3, #1
 8017b32:	e02d      	b.n	8017b90 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017b34:	f7f9 fbde 	bl	80112f4 <HAL_GetTick>
 8017b38:	4602      	mov	r2, r0
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	1ad3      	subs	r3, r2, r3
 8017b3e:	68ba      	ldr	r2, [r7, #8]
 8017b40:	429a      	cmp	r2, r3
 8017b42:	d302      	bcc.n	8017b4a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8017b44:	68bb      	ldr	r3, [r7, #8]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d11a      	bne.n	8017b80 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	699b      	ldr	r3, [r3, #24]
 8017b50:	f003 0320 	and.w	r3, r3, #32
 8017b54:	2b20      	cmp	r3, #32
 8017b56:	d013      	beq.n	8017b80 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017b5c:	f043 0220 	orr.w	r2, r3, #32
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	2220      	movs	r2, #32
 8017b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	2200      	movs	r2, #0
 8017b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017b74:	68fb      	ldr	r3, [r7, #12]
 8017b76:	2200      	movs	r2, #0
 8017b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8017b7c:	2301      	movs	r3, #1
 8017b7e:	e007      	b.n	8017b90 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	681b      	ldr	r3, [r3, #0]
 8017b84:	699b      	ldr	r3, [r3, #24]
 8017b86:	f003 0320 	and.w	r3, r3, #32
 8017b8a:	2b20      	cmp	r3, #32
 8017b8c:	d1c8      	bne.n	8017b20 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8017b8e:	2300      	movs	r3, #0
}
 8017b90:	4618      	mov	r0, r3
 8017b92:	3710      	adds	r7, #16
 8017b94:	46bd      	mov	sp, r7
 8017b96:	bd80      	pop	{r7, pc}

08017b98 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8017b98:	b580      	push	{r7, lr}
 8017b9a:	b08a      	sub	sp, #40	@ 0x28
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	60f8      	str	r0, [r7, #12]
 8017ba0:	60b9      	str	r1, [r7, #8]
 8017ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017ba4:	2300      	movs	r3, #0
 8017ba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8017baa:	68fb      	ldr	r3, [r7, #12]
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	699b      	ldr	r3, [r3, #24]
 8017bb0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8017bba:	69bb      	ldr	r3, [r7, #24]
 8017bbc:	f003 0310 	and.w	r3, r3, #16
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d068      	beq.n	8017c96 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	2210      	movs	r2, #16
 8017bca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8017bcc:	e049      	b.n	8017c62 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8017bce:	68bb      	ldr	r3, [r7, #8]
 8017bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017bd4:	d045      	beq.n	8017c62 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8017bd6:	f7f9 fb8d 	bl	80112f4 <HAL_GetTick>
 8017bda:	4602      	mov	r2, r0
 8017bdc:	69fb      	ldr	r3, [r7, #28]
 8017bde:	1ad3      	subs	r3, r2, r3
 8017be0:	68ba      	ldr	r2, [r7, #8]
 8017be2:	429a      	cmp	r2, r3
 8017be4:	d302      	bcc.n	8017bec <I2C_IsErrorOccurred+0x54>
 8017be6:	68bb      	ldr	r3, [r7, #8]
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d13a      	bne.n	8017c62 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	685b      	ldr	r3, [r3, #4]
 8017bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8017bf6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017bfe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	699b      	ldr	r3, [r3, #24]
 8017c06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8017c0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017c0e:	d121      	bne.n	8017c54 <I2C_IsErrorOccurred+0xbc>
 8017c10:	697b      	ldr	r3, [r7, #20]
 8017c12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8017c16:	d01d      	beq.n	8017c54 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8017c18:	7cfb      	ldrb	r3, [r7, #19]
 8017c1a:	2b20      	cmp	r3, #32
 8017c1c:	d01a      	beq.n	8017c54 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	681b      	ldr	r3, [r3, #0]
 8017c22:	685a      	ldr	r2, [r3, #4]
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8017c2c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8017c2e:	f7f9 fb61 	bl	80112f4 <HAL_GetTick>
 8017c32:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017c34:	e00e      	b.n	8017c54 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8017c36:	f7f9 fb5d 	bl	80112f4 <HAL_GetTick>
 8017c3a:	4602      	mov	r2, r0
 8017c3c:	69fb      	ldr	r3, [r7, #28]
 8017c3e:	1ad3      	subs	r3, r2, r3
 8017c40:	2b19      	cmp	r3, #25
 8017c42:	d907      	bls.n	8017c54 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8017c44:	6a3b      	ldr	r3, [r7, #32]
 8017c46:	f043 0320 	orr.w	r3, r3, #32
 8017c4a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8017c4c:	2301      	movs	r3, #1
 8017c4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8017c52:	e006      	b.n	8017c62 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	699b      	ldr	r3, [r3, #24]
 8017c5a:	f003 0320 	and.w	r3, r3, #32
 8017c5e:	2b20      	cmp	r3, #32
 8017c60:	d1e9      	bne.n	8017c36 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8017c62:	68fb      	ldr	r3, [r7, #12]
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	699b      	ldr	r3, [r3, #24]
 8017c68:	f003 0320 	and.w	r3, r3, #32
 8017c6c:	2b20      	cmp	r3, #32
 8017c6e:	d003      	beq.n	8017c78 <I2C_IsErrorOccurred+0xe0>
 8017c70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d0aa      	beq.n	8017bce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8017c78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d103      	bne.n	8017c88 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	2220      	movs	r2, #32
 8017c86:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8017c88:	6a3b      	ldr	r3, [r7, #32]
 8017c8a:	f043 0304 	orr.w	r3, r3, #4
 8017c8e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8017c90:	2301      	movs	r3, #1
 8017c92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	699b      	ldr	r3, [r3, #24]
 8017c9c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8017c9e:	69bb      	ldr	r3, [r7, #24]
 8017ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d00b      	beq.n	8017cc0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8017ca8:	6a3b      	ldr	r3, [r7, #32]
 8017caa:	f043 0301 	orr.w	r3, r3, #1
 8017cae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	681b      	ldr	r3, [r3, #0]
 8017cb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017cb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017cba:	2301      	movs	r3, #1
 8017cbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8017cc0:	69bb      	ldr	r3, [r7, #24]
 8017cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d00b      	beq.n	8017ce2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8017cca:	6a3b      	ldr	r3, [r7, #32]
 8017ccc:	f043 0308 	orr.w	r3, r3, #8
 8017cd0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8017cd2:	68fb      	ldr	r3, [r7, #12]
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8017cda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017cdc:	2301      	movs	r3, #1
 8017cde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8017ce2:	69bb      	ldr	r3, [r7, #24]
 8017ce4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d00b      	beq.n	8017d04 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8017cec:	6a3b      	ldr	r3, [r7, #32]
 8017cee:	f043 0302 	orr.w	r3, r3, #2
 8017cf2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017cfc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017cfe:	2301      	movs	r3, #1
 8017d00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8017d04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d01c      	beq.n	8017d46 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8017d0c:	68f8      	ldr	r0, [r7, #12]
 8017d0e:	f7ff fe28 	bl	8017962 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8017d12:	68fb      	ldr	r3, [r7, #12]
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	6859      	ldr	r1, [r3, #4]
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	681a      	ldr	r2, [r3, #0]
 8017d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8017d54 <I2C_IsErrorOccurred+0x1bc>)
 8017d1e:	400b      	ands	r3, r1
 8017d20:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017d26:	6a3b      	ldr	r3, [r7, #32]
 8017d28:	431a      	orrs	r2, r3
 8017d2a:	68fb      	ldr	r3, [r7, #12]
 8017d2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	2220      	movs	r2, #32
 8017d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	2200      	movs	r2, #0
 8017d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	2200      	movs	r2, #0
 8017d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8017d46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8017d4a:	4618      	mov	r0, r3
 8017d4c:	3728      	adds	r7, #40	@ 0x28
 8017d4e:	46bd      	mov	sp, r7
 8017d50:	bd80      	pop	{r7, pc}
 8017d52:	bf00      	nop
 8017d54:	fe00e800 	.word	0xfe00e800

08017d58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8017d58:	b480      	push	{r7}
 8017d5a:	b087      	sub	sp, #28
 8017d5c:	af00      	add	r7, sp, #0
 8017d5e:	60f8      	str	r0, [r7, #12]
 8017d60:	607b      	str	r3, [r7, #4]
 8017d62:	460b      	mov	r3, r1
 8017d64:	817b      	strh	r3, [r7, #10]
 8017d66:	4613      	mov	r3, r2
 8017d68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017d6a:	897b      	ldrh	r3, [r7, #10]
 8017d6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017d70:	7a7b      	ldrb	r3, [r7, #9]
 8017d72:	041b      	lsls	r3, r3, #16
 8017d74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017d78:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017d7e:	6a3b      	ldr	r3, [r7, #32]
 8017d80:	4313      	orrs	r3, r2
 8017d82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017d86:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8017d88:	68fb      	ldr	r3, [r7, #12]
 8017d8a:	681b      	ldr	r3, [r3, #0]
 8017d8c:	685a      	ldr	r2, [r3, #4]
 8017d8e:	6a3b      	ldr	r3, [r7, #32]
 8017d90:	0d5b      	lsrs	r3, r3, #21
 8017d92:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8017d96:	4b08      	ldr	r3, [pc, #32]	@ (8017db8 <I2C_TransferConfig+0x60>)
 8017d98:	430b      	orrs	r3, r1
 8017d9a:	43db      	mvns	r3, r3
 8017d9c:	ea02 0103 	and.w	r1, r2, r3
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	697a      	ldr	r2, [r7, #20]
 8017da6:	430a      	orrs	r2, r1
 8017da8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8017daa:	bf00      	nop
 8017dac:	371c      	adds	r7, #28
 8017dae:	46bd      	mov	sp, r7
 8017db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017db4:	4770      	bx	lr
 8017db6:	bf00      	nop
 8017db8:	03ff63ff 	.word	0x03ff63ff

08017dbc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8017dbc:	b480      	push	{r7}
 8017dbe:	b085      	sub	sp, #20
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	6078      	str	r0, [r7, #4]
 8017dc4:	460b      	mov	r3, r1
 8017dc6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8017dc8:	2300      	movs	r3, #0
 8017dca:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8017dcc:	887b      	ldrh	r3, [r7, #2]
 8017dce:	f003 0301 	and.w	r3, r3, #1
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d00f      	beq.n	8017df6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8017ddc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8017de4:	b2db      	uxtb	r3, r3
 8017de6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8017dea:	2b28      	cmp	r3, #40	@ 0x28
 8017dec:	d003      	beq.n	8017df6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8017df4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8017df6:	887b      	ldrh	r3, [r7, #2]
 8017df8:	f003 0302 	and.w	r3, r3, #2
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d00f      	beq.n	8017e20 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8017e00:	68fb      	ldr	r3, [r7, #12]
 8017e02:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8017e06:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8017e0e:	b2db      	uxtb	r3, r3
 8017e10:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8017e14:	2b28      	cmp	r3, #40	@ 0x28
 8017e16:	d003      	beq.n	8017e20 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8017e1e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8017e20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	da03      	bge.n	8017e30 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017e28:	68fb      	ldr	r3, [r7, #12]
 8017e2a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8017e2e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8017e30:	887b      	ldrh	r3, [r7, #2]
 8017e32:	2b10      	cmp	r3, #16
 8017e34:	d103      	bne.n	8017e3e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8017e3c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8017e3e:	887b      	ldrh	r3, [r7, #2]
 8017e40:	2b20      	cmp	r3, #32
 8017e42:	d103      	bne.n	8017e4c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	f043 0320 	orr.w	r3, r3, #32
 8017e4a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8017e4c:	887b      	ldrh	r3, [r7, #2]
 8017e4e:	2b40      	cmp	r3, #64	@ 0x40
 8017e50:	d103      	bne.n	8017e5a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017e58:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	6819      	ldr	r1, [r3, #0]
 8017e60:	68fb      	ldr	r3, [r7, #12]
 8017e62:	43da      	mvns	r2, r3
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	681b      	ldr	r3, [r3, #0]
 8017e68:	400a      	ands	r2, r1
 8017e6a:	601a      	str	r2, [r3, #0]
}
 8017e6c:	bf00      	nop
 8017e6e:	3714      	adds	r7, #20
 8017e70:	46bd      	mov	sp, r7
 8017e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e76:	4770      	bx	lr

08017e78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8017e78:	b480      	push	{r7}
 8017e7a:	b083      	sub	sp, #12
 8017e7c:	af00      	add	r7, sp, #0
 8017e7e:	6078      	str	r0, [r7, #4]
 8017e80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8017e88:	b2db      	uxtb	r3, r3
 8017e8a:	2b20      	cmp	r3, #32
 8017e8c:	d138      	bne.n	8017f00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8017e94:	2b01      	cmp	r3, #1
 8017e96:	d101      	bne.n	8017e9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8017e98:	2302      	movs	r3, #2
 8017e9a:	e032      	b.n	8017f02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	2201      	movs	r2, #1
 8017ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	2224      	movs	r2, #36	@ 0x24
 8017ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	681b      	ldr	r3, [r3, #0]
 8017eb0:	681a      	ldr	r2, [r3, #0]
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	f022 0201 	bic.w	r2, r2, #1
 8017eba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	681a      	ldr	r2, [r3, #0]
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8017eca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	6819      	ldr	r1, [r3, #0]
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	681b      	ldr	r3, [r3, #0]
 8017ed6:	683a      	ldr	r2, [r7, #0]
 8017ed8:	430a      	orrs	r2, r1
 8017eda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	681b      	ldr	r3, [r3, #0]
 8017ee0:	681a      	ldr	r2, [r3, #0]
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	f042 0201 	orr.w	r2, r2, #1
 8017eea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	2220      	movs	r2, #32
 8017ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	2200      	movs	r2, #0
 8017ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8017efc:	2300      	movs	r3, #0
 8017efe:	e000      	b.n	8017f02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8017f00:	2302      	movs	r3, #2
  }
}
 8017f02:	4618      	mov	r0, r3
 8017f04:	370c      	adds	r7, #12
 8017f06:	46bd      	mov	sp, r7
 8017f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f0c:	4770      	bx	lr

08017f0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8017f0e:	b480      	push	{r7}
 8017f10:	b085      	sub	sp, #20
 8017f12:	af00      	add	r7, sp, #0
 8017f14:	6078      	str	r0, [r7, #4]
 8017f16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8017f1e:	b2db      	uxtb	r3, r3
 8017f20:	2b20      	cmp	r3, #32
 8017f22:	d139      	bne.n	8017f98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8017f2a:	2b01      	cmp	r3, #1
 8017f2c:	d101      	bne.n	8017f32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8017f2e:	2302      	movs	r3, #2
 8017f30:	e033      	b.n	8017f9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	2201      	movs	r2, #1
 8017f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	2224      	movs	r2, #36	@ 0x24
 8017f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	681a      	ldr	r2, [r3, #0]
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	f022 0201 	bic.w	r2, r2, #1
 8017f50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	681b      	ldr	r3, [r3, #0]
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8017f60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8017f62:	683b      	ldr	r3, [r7, #0]
 8017f64:	021b      	lsls	r3, r3, #8
 8017f66:	68fa      	ldr	r2, [r7, #12]
 8017f68:	4313      	orrs	r3, r2
 8017f6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	68fa      	ldr	r2, [r7, #12]
 8017f72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	681a      	ldr	r2, [r3, #0]
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	f042 0201 	orr.w	r2, r2, #1
 8017f82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	2220      	movs	r2, #32
 8017f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	2200      	movs	r2, #0
 8017f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8017f94:	2300      	movs	r3, #0
 8017f96:	e000      	b.n	8017f9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8017f98:	2302      	movs	r3, #2
  }
}
 8017f9a:	4618      	mov	r0, r3
 8017f9c:	3714      	adds	r7, #20
 8017f9e:	46bd      	mov	sp, r7
 8017fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fa4:	4770      	bx	lr

08017fa6 <HAL_MspInit>:
/**
  * @brief  Initializes the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8017fa6:	b480      	push	{r7}
 8017fa8:	af00      	add	r7, sp, #0

}
 8017faa:	bf00      	nop
 8017fac:	46bd      	mov	sp, r7
 8017fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fb2:	4770      	bx	lr

08017fb4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8017fb4:	b580      	push	{r7, lr}
 8017fb6:	b084      	sub	sp, #16
 8017fb8:	af00      	add	r7, sp, #0
 8017fba:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8017fbc:	4b29      	ldr	r3, [pc, #164]	@ (8018064 <HAL_PWREx_ConfigSupply+0xb0>)
 8017fbe:	68db      	ldr	r3, [r3, #12]
 8017fc0:	f003 0307 	and.w	r3, r3, #7
 8017fc4:	2b06      	cmp	r3, #6
 8017fc6:	d00a      	beq.n	8017fde <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8017fc8:	4b26      	ldr	r3, [pc, #152]	@ (8018064 <HAL_PWREx_ConfigSupply+0xb0>)
 8017fca:	68db      	ldr	r3, [r3, #12]
 8017fcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017fd0:	687a      	ldr	r2, [r7, #4]
 8017fd2:	429a      	cmp	r2, r3
 8017fd4:	d001      	beq.n	8017fda <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8017fd6:	2301      	movs	r3, #1
 8017fd8:	e03f      	b.n	801805a <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8017fda:	2300      	movs	r3, #0
 8017fdc:	e03d      	b.n	801805a <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8017fde:	4b21      	ldr	r3, [pc, #132]	@ (8018064 <HAL_PWREx_ConfigSupply+0xb0>)
 8017fe0:	68db      	ldr	r3, [r3, #12]
 8017fe2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8017fe6:	491f      	ldr	r1, [pc, #124]	@ (8018064 <HAL_PWREx_ConfigSupply+0xb0>)
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	4313      	orrs	r3, r2
 8017fec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8017fee:	f7f9 f981 	bl	80112f4 <HAL_GetTick>
 8017ff2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8017ff4:	e009      	b.n	801800a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8017ff6:	f7f9 f97d 	bl	80112f4 <HAL_GetTick>
 8017ffa:	4602      	mov	r2, r0
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	1ad3      	subs	r3, r2, r3
 8018000:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8018004:	d901      	bls.n	801800a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8018006:	2301      	movs	r3, #1
 8018008:	e027      	b.n	801805a <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801800a:	4b16      	ldr	r3, [pc, #88]	@ (8018064 <HAL_PWREx_ConfigSupply+0xb0>)
 801800c:	685b      	ldr	r3, [r3, #4]
 801800e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8018012:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8018016:	d1ee      	bne.n	8017ff6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	2b1e      	cmp	r3, #30
 801801c:	d008      	beq.n	8018030 <HAL_PWREx_ConfigSupply+0x7c>
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	2b2e      	cmp	r3, #46	@ 0x2e
 8018022:	d005      	beq.n	8018030 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	2b1d      	cmp	r3, #29
 8018028:	d002      	beq.n	8018030 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	2b2d      	cmp	r3, #45	@ 0x2d
 801802e:	d113      	bne.n	8018058 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8018030:	f7f9 f960 	bl	80112f4 <HAL_GetTick>
 8018034:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8018036:	e009      	b.n	801804c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8018038:	f7f9 f95c 	bl	80112f4 <HAL_GetTick>
 801803c:	4602      	mov	r2, r0
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	1ad3      	subs	r3, r2, r3
 8018042:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8018046:	d901      	bls.n	801804c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8018048:	2301      	movs	r3, #1
 801804a:	e006      	b.n	801805a <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 801804c:	4b05      	ldr	r3, [pc, #20]	@ (8018064 <HAL_PWREx_ConfigSupply+0xb0>)
 801804e:	68db      	ldr	r3, [r3, #12]
 8018050:	f003 0311 	and.w	r3, r3, #17
 8018054:	2b11      	cmp	r3, #17
 8018056:	d1ef      	bne.n	8018038 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8018058:	2300      	movs	r3, #0
}
 801805a:	4618      	mov	r0, r3
 801805c:	3710      	adds	r7, #16
 801805e:	46bd      	mov	sp, r7
 8018060:	bd80      	pop	{r7, pc}
 8018062:	bf00      	nop
 8018064:	58024800 	.word	0x58024800

08018068 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8018068:	b580      	push	{r7, lr}
 801806a:	b08c      	sub	sp, #48	@ 0x30
 801806c:	af00      	add	r7, sp, #0
 801806e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	2b00      	cmp	r3, #0
 8018074:	d101      	bne.n	801807a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8018076:	2301      	movs	r3, #1
 8018078:	e3c8      	b.n	801880c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	681b      	ldr	r3, [r3, #0]
 801807e:	f003 0301 	and.w	r3, r3, #1
 8018082:	2b00      	cmp	r3, #0
 8018084:	f000 8087 	beq.w	8018196 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8018088:	4b88      	ldr	r3, [pc, #544]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 801808a:	691b      	ldr	r3, [r3, #16]
 801808c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018090:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8018092:	4b86      	ldr	r3, [pc, #536]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 8018094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018096:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8018098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801809a:	2b10      	cmp	r3, #16
 801809c:	d007      	beq.n	80180ae <HAL_RCC_OscConfig+0x46>
 801809e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180a0:	2b18      	cmp	r3, #24
 80180a2:	d110      	bne.n	80180c6 <HAL_RCC_OscConfig+0x5e>
 80180a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80180a6:	f003 0303 	and.w	r3, r3, #3
 80180aa:	2b02      	cmp	r3, #2
 80180ac:	d10b      	bne.n	80180c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80180ae:	4b7f      	ldr	r3, [pc, #508]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 80180b0:	681b      	ldr	r3, [r3, #0]
 80180b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d06c      	beq.n	8018194 <HAL_RCC_OscConfig+0x12c>
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	685b      	ldr	r3, [r3, #4]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d168      	bne.n	8018194 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80180c2:	2301      	movs	r3, #1
 80180c4:	e3a2      	b.n	801880c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	685b      	ldr	r3, [r3, #4]
 80180ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80180ce:	d106      	bne.n	80180de <HAL_RCC_OscConfig+0x76>
 80180d0:	4b76      	ldr	r3, [pc, #472]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 80180d2:	681b      	ldr	r3, [r3, #0]
 80180d4:	4a75      	ldr	r2, [pc, #468]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 80180d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80180da:	6013      	str	r3, [r2, #0]
 80180dc:	e02e      	b.n	801813c <HAL_RCC_OscConfig+0xd4>
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	685b      	ldr	r3, [r3, #4]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d10c      	bne.n	8018100 <HAL_RCC_OscConfig+0x98>
 80180e6:	4b71      	ldr	r3, [pc, #452]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 80180e8:	681b      	ldr	r3, [r3, #0]
 80180ea:	4a70      	ldr	r2, [pc, #448]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 80180ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80180f0:	6013      	str	r3, [r2, #0]
 80180f2:	4b6e      	ldr	r3, [pc, #440]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	4a6d      	ldr	r2, [pc, #436]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 80180f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80180fc:	6013      	str	r3, [r2, #0]
 80180fe:	e01d      	b.n	801813c <HAL_RCC_OscConfig+0xd4>
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	685b      	ldr	r3, [r3, #4]
 8018104:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8018108:	d10c      	bne.n	8018124 <HAL_RCC_OscConfig+0xbc>
 801810a:	4b68      	ldr	r3, [pc, #416]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	4a67      	ldr	r2, [pc, #412]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 8018110:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8018114:	6013      	str	r3, [r2, #0]
 8018116:	4b65      	ldr	r3, [pc, #404]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	4a64      	ldr	r2, [pc, #400]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 801811c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8018120:	6013      	str	r3, [r2, #0]
 8018122:	e00b      	b.n	801813c <HAL_RCC_OscConfig+0xd4>
 8018124:	4b61      	ldr	r3, [pc, #388]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	4a60      	ldr	r2, [pc, #384]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 801812a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801812e:	6013      	str	r3, [r2, #0]
 8018130:	4b5e      	ldr	r3, [pc, #376]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	4a5d      	ldr	r2, [pc, #372]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 8018136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801813a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	685b      	ldr	r3, [r3, #4]
 8018140:	2b00      	cmp	r3, #0
 8018142:	d013      	beq.n	801816c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018144:	f7f9 f8d6 	bl	80112f4 <HAL_GetTick>
 8018148:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801814a:	e008      	b.n	801815e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801814c:	f7f9 f8d2 	bl	80112f4 <HAL_GetTick>
 8018150:	4602      	mov	r2, r0
 8018152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018154:	1ad3      	subs	r3, r2, r3
 8018156:	2b64      	cmp	r3, #100	@ 0x64
 8018158:	d901      	bls.n	801815e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 801815a:	2303      	movs	r3, #3
 801815c:	e356      	b.n	801880c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801815e:	4b53      	ldr	r3, [pc, #332]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018166:	2b00      	cmp	r3, #0
 8018168:	d0f0      	beq.n	801814c <HAL_RCC_OscConfig+0xe4>
 801816a:	e014      	b.n	8018196 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801816c:	f7f9 f8c2 	bl	80112f4 <HAL_GetTick>
 8018170:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8018172:	e008      	b.n	8018186 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8018174:	f7f9 f8be 	bl	80112f4 <HAL_GetTick>
 8018178:	4602      	mov	r2, r0
 801817a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801817c:	1ad3      	subs	r3, r2, r3
 801817e:	2b64      	cmp	r3, #100	@ 0x64
 8018180:	d901      	bls.n	8018186 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8018182:	2303      	movs	r3, #3
 8018184:	e342      	b.n	801880c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8018186:	4b49      	ldr	r3, [pc, #292]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 8018188:	681b      	ldr	r3, [r3, #0]
 801818a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801818e:	2b00      	cmp	r3, #0
 8018190:	d1f0      	bne.n	8018174 <HAL_RCC_OscConfig+0x10c>
 8018192:	e000      	b.n	8018196 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8018194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	f003 0302 	and.w	r3, r3, #2
 801819e:	2b00      	cmp	r3, #0
 80181a0:	f000 808c 	beq.w	80182bc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80181a4:	4b41      	ldr	r3, [pc, #260]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 80181a6:	691b      	ldr	r3, [r3, #16]
 80181a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80181ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80181ae:	4b3f      	ldr	r3, [pc, #252]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 80181b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80181b2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80181b4:	6a3b      	ldr	r3, [r7, #32]
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d007      	beq.n	80181ca <HAL_RCC_OscConfig+0x162>
 80181ba:	6a3b      	ldr	r3, [r7, #32]
 80181bc:	2b18      	cmp	r3, #24
 80181be:	d137      	bne.n	8018230 <HAL_RCC_OscConfig+0x1c8>
 80181c0:	69fb      	ldr	r3, [r7, #28]
 80181c2:	f003 0303 	and.w	r3, r3, #3
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d132      	bne.n	8018230 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80181ca:	4b38      	ldr	r3, [pc, #224]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 80181cc:	681b      	ldr	r3, [r3, #0]
 80181ce:	f003 0304 	and.w	r3, r3, #4
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d005      	beq.n	80181e2 <HAL_RCC_OscConfig+0x17a>
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	68db      	ldr	r3, [r3, #12]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d101      	bne.n	80181e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80181de:	2301      	movs	r3, #1
 80181e0:	e314      	b.n	801880c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80181e2:	4b32      	ldr	r3, [pc, #200]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	f023 0219 	bic.w	r2, r3, #25
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	68db      	ldr	r3, [r3, #12]
 80181ee:	492f      	ldr	r1, [pc, #188]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 80181f0:	4313      	orrs	r3, r2
 80181f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80181f4:	f7f9 f87e 	bl	80112f4 <HAL_GetTick>
 80181f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80181fa:	e008      	b.n	801820e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80181fc:	f7f9 f87a 	bl	80112f4 <HAL_GetTick>
 8018200:	4602      	mov	r2, r0
 8018202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018204:	1ad3      	subs	r3, r2, r3
 8018206:	2b02      	cmp	r3, #2
 8018208:	d901      	bls.n	801820e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801820a:	2303      	movs	r3, #3
 801820c:	e2fe      	b.n	801880c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801820e:	4b27      	ldr	r3, [pc, #156]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 8018210:	681b      	ldr	r3, [r3, #0]
 8018212:	f003 0304 	and.w	r3, r3, #4
 8018216:	2b00      	cmp	r3, #0
 8018218:	d0f0      	beq.n	80181fc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801821a:	4b24      	ldr	r3, [pc, #144]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 801821c:	685b      	ldr	r3, [r3, #4]
 801821e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	691b      	ldr	r3, [r3, #16]
 8018226:	061b      	lsls	r3, r3, #24
 8018228:	4920      	ldr	r1, [pc, #128]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 801822a:	4313      	orrs	r3, r2
 801822c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801822e:	e045      	b.n	80182bc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	68db      	ldr	r3, [r3, #12]
 8018234:	2b00      	cmp	r3, #0
 8018236:	d026      	beq.n	8018286 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8018238:	4b1c      	ldr	r3, [pc, #112]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 801823a:	681b      	ldr	r3, [r3, #0]
 801823c:	f023 0219 	bic.w	r2, r3, #25
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	68db      	ldr	r3, [r3, #12]
 8018244:	4919      	ldr	r1, [pc, #100]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 8018246:	4313      	orrs	r3, r2
 8018248:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801824a:	f7f9 f853 	bl	80112f4 <HAL_GetTick>
 801824e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8018250:	e008      	b.n	8018264 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8018252:	f7f9 f84f 	bl	80112f4 <HAL_GetTick>
 8018256:	4602      	mov	r2, r0
 8018258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801825a:	1ad3      	subs	r3, r2, r3
 801825c:	2b02      	cmp	r3, #2
 801825e:	d901      	bls.n	8018264 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8018260:	2303      	movs	r3, #3
 8018262:	e2d3      	b.n	801880c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8018264:	4b11      	ldr	r3, [pc, #68]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	f003 0304 	and.w	r3, r3, #4
 801826c:	2b00      	cmp	r3, #0
 801826e:	d0f0      	beq.n	8018252 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8018270:	4b0e      	ldr	r3, [pc, #56]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 8018272:	685b      	ldr	r3, [r3, #4]
 8018274:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	691b      	ldr	r3, [r3, #16]
 801827c:	061b      	lsls	r3, r3, #24
 801827e:	490b      	ldr	r1, [pc, #44]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 8018280:	4313      	orrs	r3, r2
 8018282:	604b      	str	r3, [r1, #4]
 8018284:	e01a      	b.n	80182bc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8018286:	4b09      	ldr	r3, [pc, #36]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 8018288:	681b      	ldr	r3, [r3, #0]
 801828a:	4a08      	ldr	r2, [pc, #32]	@ (80182ac <HAL_RCC_OscConfig+0x244>)
 801828c:	f023 0301 	bic.w	r3, r3, #1
 8018290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018292:	f7f9 f82f 	bl	80112f4 <HAL_GetTick>
 8018296:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8018298:	e00a      	b.n	80182b0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801829a:	f7f9 f82b 	bl	80112f4 <HAL_GetTick>
 801829e:	4602      	mov	r2, r0
 80182a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182a2:	1ad3      	subs	r3, r2, r3
 80182a4:	2b02      	cmp	r3, #2
 80182a6:	d903      	bls.n	80182b0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80182a8:	2303      	movs	r3, #3
 80182aa:	e2af      	b.n	801880c <HAL_RCC_OscConfig+0x7a4>
 80182ac:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80182b0:	4b96      	ldr	r3, [pc, #600]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	f003 0304 	and.w	r3, r3, #4
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d1ee      	bne.n	801829a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	f003 0310 	and.w	r3, r3, #16
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d06a      	beq.n	801839e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80182c8:	4b90      	ldr	r3, [pc, #576]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 80182ca:	691b      	ldr	r3, [r3, #16]
 80182cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80182d0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80182d2:	4b8e      	ldr	r3, [pc, #568]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 80182d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80182d6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80182d8:	69bb      	ldr	r3, [r7, #24]
 80182da:	2b08      	cmp	r3, #8
 80182dc:	d007      	beq.n	80182ee <HAL_RCC_OscConfig+0x286>
 80182de:	69bb      	ldr	r3, [r7, #24]
 80182e0:	2b18      	cmp	r3, #24
 80182e2:	d11b      	bne.n	801831c <HAL_RCC_OscConfig+0x2b4>
 80182e4:	697b      	ldr	r3, [r7, #20]
 80182e6:	f003 0303 	and.w	r3, r3, #3
 80182ea:	2b01      	cmp	r3, #1
 80182ec:	d116      	bne.n	801831c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80182ee:	4b87      	ldr	r3, [pc, #540]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d005      	beq.n	8018306 <HAL_RCC_OscConfig+0x29e>
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	69db      	ldr	r3, [r3, #28]
 80182fe:	2b80      	cmp	r3, #128	@ 0x80
 8018300:	d001      	beq.n	8018306 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8018302:	2301      	movs	r3, #1
 8018304:	e282      	b.n	801880c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8018306:	4b81      	ldr	r3, [pc, #516]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 8018308:	68db      	ldr	r3, [r3, #12]
 801830a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	6a1b      	ldr	r3, [r3, #32]
 8018312:	061b      	lsls	r3, r3, #24
 8018314:	497d      	ldr	r1, [pc, #500]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 8018316:	4313      	orrs	r3, r2
 8018318:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801831a:	e040      	b.n	801839e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	69db      	ldr	r3, [r3, #28]
 8018320:	2b00      	cmp	r3, #0
 8018322:	d023      	beq.n	801836c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8018324:	4b79      	ldr	r3, [pc, #484]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	4a78      	ldr	r2, [pc, #480]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 801832a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801832e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018330:	f7f8 ffe0 	bl	80112f4 <HAL_GetTick>
 8018334:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8018336:	e008      	b.n	801834a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8018338:	f7f8 ffdc 	bl	80112f4 <HAL_GetTick>
 801833c:	4602      	mov	r2, r0
 801833e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018340:	1ad3      	subs	r3, r2, r3
 8018342:	2b02      	cmp	r3, #2
 8018344:	d901      	bls.n	801834a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8018346:	2303      	movs	r3, #3
 8018348:	e260      	b.n	801880c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801834a:	4b70      	ldr	r3, [pc, #448]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018352:	2b00      	cmp	r3, #0
 8018354:	d0f0      	beq.n	8018338 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8018356:	4b6d      	ldr	r3, [pc, #436]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 8018358:	68db      	ldr	r3, [r3, #12]
 801835a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	6a1b      	ldr	r3, [r3, #32]
 8018362:	061b      	lsls	r3, r3, #24
 8018364:	4969      	ldr	r1, [pc, #420]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 8018366:	4313      	orrs	r3, r2
 8018368:	60cb      	str	r3, [r1, #12]
 801836a:	e018      	b.n	801839e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801836c:	4b67      	ldr	r3, [pc, #412]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	4a66      	ldr	r2, [pc, #408]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 8018372:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8018376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018378:	f7f8 ffbc 	bl	80112f4 <HAL_GetTick>
 801837c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801837e:	e008      	b.n	8018392 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8018380:	f7f8 ffb8 	bl	80112f4 <HAL_GetTick>
 8018384:	4602      	mov	r2, r0
 8018386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018388:	1ad3      	subs	r3, r2, r3
 801838a:	2b02      	cmp	r3, #2
 801838c:	d901      	bls.n	8018392 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 801838e:	2303      	movs	r3, #3
 8018390:	e23c      	b.n	801880c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8018392:	4b5e      	ldr	r3, [pc, #376]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801839a:	2b00      	cmp	r3, #0
 801839c:	d1f0      	bne.n	8018380 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	f003 0308 	and.w	r3, r3, #8
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d036      	beq.n	8018418 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	695b      	ldr	r3, [r3, #20]
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d019      	beq.n	80183e6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80183b2:	4b56      	ldr	r3, [pc, #344]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 80183b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80183b6:	4a55      	ldr	r2, [pc, #340]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 80183b8:	f043 0301 	orr.w	r3, r3, #1
 80183bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80183be:	f7f8 ff99 	bl	80112f4 <HAL_GetTick>
 80183c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80183c4:	e008      	b.n	80183d8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80183c6:	f7f8 ff95 	bl	80112f4 <HAL_GetTick>
 80183ca:	4602      	mov	r2, r0
 80183cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183ce:	1ad3      	subs	r3, r2, r3
 80183d0:	2b02      	cmp	r3, #2
 80183d2:	d901      	bls.n	80183d8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80183d4:	2303      	movs	r3, #3
 80183d6:	e219      	b.n	801880c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80183d8:	4b4c      	ldr	r3, [pc, #304]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 80183da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80183dc:	f003 0302 	and.w	r3, r3, #2
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d0f0      	beq.n	80183c6 <HAL_RCC_OscConfig+0x35e>
 80183e4:	e018      	b.n	8018418 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80183e6:	4b49      	ldr	r3, [pc, #292]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 80183e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80183ea:	4a48      	ldr	r2, [pc, #288]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 80183ec:	f023 0301 	bic.w	r3, r3, #1
 80183f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80183f2:	f7f8 ff7f 	bl	80112f4 <HAL_GetTick>
 80183f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80183f8:	e008      	b.n	801840c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80183fa:	f7f8 ff7b 	bl	80112f4 <HAL_GetTick>
 80183fe:	4602      	mov	r2, r0
 8018400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018402:	1ad3      	subs	r3, r2, r3
 8018404:	2b02      	cmp	r3, #2
 8018406:	d901      	bls.n	801840c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8018408:	2303      	movs	r3, #3
 801840a:	e1ff      	b.n	801880c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801840c:	4b3f      	ldr	r3, [pc, #252]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 801840e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018410:	f003 0302 	and.w	r3, r3, #2
 8018414:	2b00      	cmp	r3, #0
 8018416:	d1f0      	bne.n	80183fa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	f003 0320 	and.w	r3, r3, #32
 8018420:	2b00      	cmp	r3, #0
 8018422:	d036      	beq.n	8018492 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	699b      	ldr	r3, [r3, #24]
 8018428:	2b00      	cmp	r3, #0
 801842a:	d019      	beq.n	8018460 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801842c:	4b37      	ldr	r3, [pc, #220]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 801842e:	681b      	ldr	r3, [r3, #0]
 8018430:	4a36      	ldr	r2, [pc, #216]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 8018432:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8018436:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8018438:	f7f8 ff5c 	bl	80112f4 <HAL_GetTick>
 801843c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801843e:	e008      	b.n	8018452 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8018440:	f7f8 ff58 	bl	80112f4 <HAL_GetTick>
 8018444:	4602      	mov	r2, r0
 8018446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018448:	1ad3      	subs	r3, r2, r3
 801844a:	2b02      	cmp	r3, #2
 801844c:	d901      	bls.n	8018452 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 801844e:	2303      	movs	r3, #3
 8018450:	e1dc      	b.n	801880c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8018452:	4b2e      	ldr	r3, [pc, #184]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801845a:	2b00      	cmp	r3, #0
 801845c:	d0f0      	beq.n	8018440 <HAL_RCC_OscConfig+0x3d8>
 801845e:	e018      	b.n	8018492 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8018460:	4b2a      	ldr	r3, [pc, #168]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	4a29      	ldr	r2, [pc, #164]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 8018466:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801846a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801846c:	f7f8 ff42 	bl	80112f4 <HAL_GetTick>
 8018470:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8018472:	e008      	b.n	8018486 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8018474:	f7f8 ff3e 	bl	80112f4 <HAL_GetTick>
 8018478:	4602      	mov	r2, r0
 801847a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801847c:	1ad3      	subs	r3, r2, r3
 801847e:	2b02      	cmp	r3, #2
 8018480:	d901      	bls.n	8018486 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8018482:	2303      	movs	r3, #3
 8018484:	e1c2      	b.n	801880c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8018486:	4b21      	ldr	r3, [pc, #132]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801848e:	2b00      	cmp	r3, #0
 8018490:	d1f0      	bne.n	8018474 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	f003 0304 	and.w	r3, r3, #4
 801849a:	2b00      	cmp	r3, #0
 801849c:	f000 8086 	beq.w	80185ac <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80184a0:	4b1b      	ldr	r3, [pc, #108]	@ (8018510 <HAL_RCC_OscConfig+0x4a8>)
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	4a1a      	ldr	r2, [pc, #104]	@ (8018510 <HAL_RCC_OscConfig+0x4a8>)
 80184a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80184aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80184ac:	f7f8 ff22 	bl	80112f4 <HAL_GetTick>
 80184b0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80184b2:	e008      	b.n	80184c6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80184b4:	f7f8 ff1e 	bl	80112f4 <HAL_GetTick>
 80184b8:	4602      	mov	r2, r0
 80184ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184bc:	1ad3      	subs	r3, r2, r3
 80184be:	2b64      	cmp	r3, #100	@ 0x64
 80184c0:	d901      	bls.n	80184c6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80184c2:	2303      	movs	r3, #3
 80184c4:	e1a2      	b.n	801880c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80184c6:	4b12      	ldr	r3, [pc, #72]	@ (8018510 <HAL_RCC_OscConfig+0x4a8>)
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d0f0      	beq.n	80184b4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	689b      	ldr	r3, [r3, #8]
 80184d6:	2b01      	cmp	r3, #1
 80184d8:	d106      	bne.n	80184e8 <HAL_RCC_OscConfig+0x480>
 80184da:	4b0c      	ldr	r3, [pc, #48]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 80184dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80184de:	4a0b      	ldr	r2, [pc, #44]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 80184e0:	f043 0301 	orr.w	r3, r3, #1
 80184e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80184e6:	e032      	b.n	801854e <HAL_RCC_OscConfig+0x4e6>
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	689b      	ldr	r3, [r3, #8]
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d111      	bne.n	8018514 <HAL_RCC_OscConfig+0x4ac>
 80184f0:	4b06      	ldr	r3, [pc, #24]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 80184f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80184f4:	4a05      	ldr	r2, [pc, #20]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 80184f6:	f023 0301 	bic.w	r3, r3, #1
 80184fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80184fc:	4b03      	ldr	r3, [pc, #12]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 80184fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018500:	4a02      	ldr	r2, [pc, #8]	@ (801850c <HAL_RCC_OscConfig+0x4a4>)
 8018502:	f023 0304 	bic.w	r3, r3, #4
 8018506:	6713      	str	r3, [r2, #112]	@ 0x70
 8018508:	e021      	b.n	801854e <HAL_RCC_OscConfig+0x4e6>
 801850a:	bf00      	nop
 801850c:	58024400 	.word	0x58024400
 8018510:	58024800 	.word	0x58024800
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	689b      	ldr	r3, [r3, #8]
 8018518:	2b05      	cmp	r3, #5
 801851a:	d10c      	bne.n	8018536 <HAL_RCC_OscConfig+0x4ce>
 801851c:	4b83      	ldr	r3, [pc, #524]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 801851e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018520:	4a82      	ldr	r2, [pc, #520]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 8018522:	f043 0304 	orr.w	r3, r3, #4
 8018526:	6713      	str	r3, [r2, #112]	@ 0x70
 8018528:	4b80      	ldr	r3, [pc, #512]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 801852a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801852c:	4a7f      	ldr	r2, [pc, #508]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 801852e:	f043 0301 	orr.w	r3, r3, #1
 8018532:	6713      	str	r3, [r2, #112]	@ 0x70
 8018534:	e00b      	b.n	801854e <HAL_RCC_OscConfig+0x4e6>
 8018536:	4b7d      	ldr	r3, [pc, #500]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 8018538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801853a:	4a7c      	ldr	r2, [pc, #496]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 801853c:	f023 0301 	bic.w	r3, r3, #1
 8018540:	6713      	str	r3, [r2, #112]	@ 0x70
 8018542:	4b7a      	ldr	r3, [pc, #488]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 8018544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018546:	4a79      	ldr	r2, [pc, #484]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 8018548:	f023 0304 	bic.w	r3, r3, #4
 801854c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	689b      	ldr	r3, [r3, #8]
 8018552:	2b00      	cmp	r3, #0
 8018554:	d015      	beq.n	8018582 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018556:	f7f8 fecd 	bl	80112f4 <HAL_GetTick>
 801855a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801855c:	e00a      	b.n	8018574 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801855e:	f7f8 fec9 	bl	80112f4 <HAL_GetTick>
 8018562:	4602      	mov	r2, r0
 8018564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018566:	1ad3      	subs	r3, r2, r3
 8018568:	f241 3288 	movw	r2, #5000	@ 0x1388
 801856c:	4293      	cmp	r3, r2
 801856e:	d901      	bls.n	8018574 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8018570:	2303      	movs	r3, #3
 8018572:	e14b      	b.n	801880c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8018574:	4b6d      	ldr	r3, [pc, #436]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 8018576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018578:	f003 0302 	and.w	r3, r3, #2
 801857c:	2b00      	cmp	r3, #0
 801857e:	d0ee      	beq.n	801855e <HAL_RCC_OscConfig+0x4f6>
 8018580:	e014      	b.n	80185ac <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018582:	f7f8 feb7 	bl	80112f4 <HAL_GetTick>
 8018586:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8018588:	e00a      	b.n	80185a0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801858a:	f7f8 feb3 	bl	80112f4 <HAL_GetTick>
 801858e:	4602      	mov	r2, r0
 8018590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018592:	1ad3      	subs	r3, r2, r3
 8018594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8018598:	4293      	cmp	r3, r2
 801859a:	d901      	bls.n	80185a0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 801859c:	2303      	movs	r3, #3
 801859e:	e135      	b.n	801880c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80185a0:	4b62      	ldr	r3, [pc, #392]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 80185a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80185a4:	f003 0302 	and.w	r3, r3, #2
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d1ee      	bne.n	801858a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	f000 812a 	beq.w	801880a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80185b6:	4b5d      	ldr	r3, [pc, #372]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 80185b8:	691b      	ldr	r3, [r3, #16]
 80185ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80185be:	2b18      	cmp	r3, #24
 80185c0:	f000 80ba 	beq.w	8018738 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80185c8:	2b02      	cmp	r3, #2
 80185ca:	f040 8095 	bne.w	80186f8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80185ce:	4b57      	ldr	r3, [pc, #348]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	4a56      	ldr	r2, [pc, #344]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 80185d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80185d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80185da:	f7f8 fe8b 	bl	80112f4 <HAL_GetTick>
 80185de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80185e0:	e008      	b.n	80185f4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80185e2:	f7f8 fe87 	bl	80112f4 <HAL_GetTick>
 80185e6:	4602      	mov	r2, r0
 80185e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185ea:	1ad3      	subs	r3, r2, r3
 80185ec:	2b02      	cmp	r3, #2
 80185ee:	d901      	bls.n	80185f4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80185f0:	2303      	movs	r3, #3
 80185f2:	e10b      	b.n	801880c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80185f4:	4b4d      	ldr	r3, [pc, #308]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 80185f6:	681b      	ldr	r3, [r3, #0]
 80185f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d1f0      	bne.n	80185e2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8018600:	4b4a      	ldr	r3, [pc, #296]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 8018602:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018604:	4b4a      	ldr	r3, [pc, #296]	@ (8018730 <HAL_RCC_OscConfig+0x6c8>)
 8018606:	4013      	ands	r3, r2
 8018608:	687a      	ldr	r2, [r7, #4]
 801860a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801860c:	687a      	ldr	r2, [r7, #4]
 801860e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8018610:	0112      	lsls	r2, r2, #4
 8018612:	430a      	orrs	r2, r1
 8018614:	4945      	ldr	r1, [pc, #276]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 8018616:	4313      	orrs	r3, r2
 8018618:	628b      	str	r3, [r1, #40]	@ 0x28
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801861e:	3b01      	subs	r3, #1
 8018620:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018628:	3b01      	subs	r3, #1
 801862a:	025b      	lsls	r3, r3, #9
 801862c:	b29b      	uxth	r3, r3
 801862e:	431a      	orrs	r2, r3
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018634:	3b01      	subs	r3, #1
 8018636:	041b      	lsls	r3, r3, #16
 8018638:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801863c:	431a      	orrs	r2, r3
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018642:	3b01      	subs	r3, #1
 8018644:	061b      	lsls	r3, r3, #24
 8018646:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801864a:	4938      	ldr	r1, [pc, #224]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 801864c:	4313      	orrs	r3, r2
 801864e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8018650:	4b36      	ldr	r3, [pc, #216]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 8018652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018654:	4a35      	ldr	r2, [pc, #212]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 8018656:	f023 0301 	bic.w	r3, r3, #1
 801865a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801865c:	4b33      	ldr	r3, [pc, #204]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 801865e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018660:	4b34      	ldr	r3, [pc, #208]	@ (8018734 <HAL_RCC_OscConfig+0x6cc>)
 8018662:	4013      	ands	r3, r2
 8018664:	687a      	ldr	r2, [r7, #4]
 8018666:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8018668:	00d2      	lsls	r2, r2, #3
 801866a:	4930      	ldr	r1, [pc, #192]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 801866c:	4313      	orrs	r3, r2
 801866e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8018670:	4b2e      	ldr	r3, [pc, #184]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 8018672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018674:	f023 020c 	bic.w	r2, r3, #12
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801867c:	492b      	ldr	r1, [pc, #172]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 801867e:	4313      	orrs	r3, r2
 8018680:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8018682:	4b2a      	ldr	r3, [pc, #168]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 8018684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018686:	f023 0202 	bic.w	r2, r3, #2
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801868e:	4927      	ldr	r1, [pc, #156]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 8018690:	4313      	orrs	r3, r2
 8018692:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8018694:	4b25      	ldr	r3, [pc, #148]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 8018696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018698:	4a24      	ldr	r2, [pc, #144]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 801869a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801869e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80186a0:	4b22      	ldr	r3, [pc, #136]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 80186a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80186a4:	4a21      	ldr	r2, [pc, #132]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 80186a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80186aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80186ac:	4b1f      	ldr	r3, [pc, #124]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 80186ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80186b0:	4a1e      	ldr	r2, [pc, #120]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 80186b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80186b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80186b8:	4b1c      	ldr	r3, [pc, #112]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 80186ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80186bc:	4a1b      	ldr	r2, [pc, #108]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 80186be:	f043 0301 	orr.w	r3, r3, #1
 80186c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80186c4:	4b19      	ldr	r3, [pc, #100]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	4a18      	ldr	r2, [pc, #96]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 80186ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80186ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80186d0:	f7f8 fe10 	bl	80112f4 <HAL_GetTick>
 80186d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80186d6:	e008      	b.n	80186ea <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80186d8:	f7f8 fe0c 	bl	80112f4 <HAL_GetTick>
 80186dc:	4602      	mov	r2, r0
 80186de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186e0:	1ad3      	subs	r3, r2, r3
 80186e2:	2b02      	cmp	r3, #2
 80186e4:	d901      	bls.n	80186ea <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80186e6:	2303      	movs	r3, #3
 80186e8:	e090      	b.n	801880c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80186ea:	4b10      	ldr	r3, [pc, #64]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 80186ec:	681b      	ldr	r3, [r3, #0]
 80186ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d0f0      	beq.n	80186d8 <HAL_RCC_OscConfig+0x670>
 80186f6:	e088      	b.n	801880a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80186f8:	4b0c      	ldr	r3, [pc, #48]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	4a0b      	ldr	r2, [pc, #44]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 80186fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8018702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018704:	f7f8 fdf6 	bl	80112f4 <HAL_GetTick>
 8018708:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801870a:	e008      	b.n	801871e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801870c:	f7f8 fdf2 	bl	80112f4 <HAL_GetTick>
 8018710:	4602      	mov	r2, r0
 8018712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018714:	1ad3      	subs	r3, r2, r3
 8018716:	2b02      	cmp	r3, #2
 8018718:	d901      	bls.n	801871e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 801871a:	2303      	movs	r3, #3
 801871c:	e076      	b.n	801880c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801871e:	4b03      	ldr	r3, [pc, #12]	@ (801872c <HAL_RCC_OscConfig+0x6c4>)
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8018726:	2b00      	cmp	r3, #0
 8018728:	d1f0      	bne.n	801870c <HAL_RCC_OscConfig+0x6a4>
 801872a:	e06e      	b.n	801880a <HAL_RCC_OscConfig+0x7a2>
 801872c:	58024400 	.word	0x58024400
 8018730:	fffffc0c 	.word	0xfffffc0c
 8018734:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8018738:	4b36      	ldr	r3, [pc, #216]	@ (8018814 <HAL_RCC_OscConfig+0x7ac>)
 801873a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801873c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801873e:	4b35      	ldr	r3, [pc, #212]	@ (8018814 <HAL_RCC_OscConfig+0x7ac>)
 8018740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018742:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018748:	2b01      	cmp	r3, #1
 801874a:	d031      	beq.n	80187b0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801874c:	693b      	ldr	r3, [r7, #16]
 801874e:	f003 0203 	and.w	r2, r3, #3
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8018756:	429a      	cmp	r2, r3
 8018758:	d12a      	bne.n	80187b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801875a:	693b      	ldr	r3, [r7, #16]
 801875c:	091b      	lsrs	r3, r3, #4
 801875e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8018766:	429a      	cmp	r2, r3
 8018768:	d122      	bne.n	80187b0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801876a:	68fb      	ldr	r3, [r7, #12]
 801876c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018774:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8018776:	429a      	cmp	r2, r3
 8018778:	d11a      	bne.n	80187b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	0a5b      	lsrs	r3, r3, #9
 801877e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018786:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8018788:	429a      	cmp	r2, r3
 801878a:	d111      	bne.n	80187b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801878c:	68fb      	ldr	r3, [r7, #12]
 801878e:	0c1b      	lsrs	r3, r3, #16
 8018790:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018798:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801879a:	429a      	cmp	r2, r3
 801879c:	d108      	bne.n	80187b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801879e:	68fb      	ldr	r3, [r7, #12]
 80187a0:	0e1b      	lsrs	r3, r3, #24
 80187a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80187aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80187ac:	429a      	cmp	r2, r3
 80187ae:	d001      	beq.n	80187b4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80187b0:	2301      	movs	r3, #1
 80187b2:	e02b      	b.n	801880c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80187b4:	4b17      	ldr	r3, [pc, #92]	@ (8018814 <HAL_RCC_OscConfig+0x7ac>)
 80187b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80187b8:	08db      	lsrs	r3, r3, #3
 80187ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80187be:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80187c4:	693a      	ldr	r2, [r7, #16]
 80187c6:	429a      	cmp	r2, r3
 80187c8:	d01f      	beq.n	801880a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80187ca:	4b12      	ldr	r3, [pc, #72]	@ (8018814 <HAL_RCC_OscConfig+0x7ac>)
 80187cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80187ce:	4a11      	ldr	r2, [pc, #68]	@ (8018814 <HAL_RCC_OscConfig+0x7ac>)
 80187d0:	f023 0301 	bic.w	r3, r3, #1
 80187d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80187d6:	f7f8 fd8d 	bl	80112f4 <HAL_GetTick>
 80187da:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80187dc:	bf00      	nop
 80187de:	f7f8 fd89 	bl	80112f4 <HAL_GetTick>
 80187e2:	4602      	mov	r2, r0
 80187e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187e6:	4293      	cmp	r3, r2
 80187e8:	d0f9      	beq.n	80187de <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80187ea:	4b0a      	ldr	r3, [pc, #40]	@ (8018814 <HAL_RCC_OscConfig+0x7ac>)
 80187ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80187ee:	4b0a      	ldr	r3, [pc, #40]	@ (8018818 <HAL_RCC_OscConfig+0x7b0>)
 80187f0:	4013      	ands	r3, r2
 80187f2:	687a      	ldr	r2, [r7, #4]
 80187f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80187f6:	00d2      	lsls	r2, r2, #3
 80187f8:	4906      	ldr	r1, [pc, #24]	@ (8018814 <HAL_RCC_OscConfig+0x7ac>)
 80187fa:	4313      	orrs	r3, r2
 80187fc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80187fe:	4b05      	ldr	r3, [pc, #20]	@ (8018814 <HAL_RCC_OscConfig+0x7ac>)
 8018800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018802:	4a04      	ldr	r2, [pc, #16]	@ (8018814 <HAL_RCC_OscConfig+0x7ac>)
 8018804:	f043 0301 	orr.w	r3, r3, #1
 8018808:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801880a:	2300      	movs	r3, #0
}
 801880c:	4618      	mov	r0, r3
 801880e:	3730      	adds	r7, #48	@ 0x30
 8018810:	46bd      	mov	sp, r7
 8018812:	bd80      	pop	{r7, pc}
 8018814:	58024400 	.word	0x58024400
 8018818:	ffff0007 	.word	0xffff0007

0801881c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801881c:	b580      	push	{r7, lr}
 801881e:	b086      	sub	sp, #24
 8018820:	af00      	add	r7, sp, #0
 8018822:	6078      	str	r0, [r7, #4]
 8018824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	2b00      	cmp	r3, #0
 801882a:	d101      	bne.n	8018830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801882c:	2301      	movs	r3, #1
 801882e:	e19c      	b.n	8018b6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8018830:	4b8a      	ldr	r3, [pc, #552]	@ (8018a5c <HAL_RCC_ClockConfig+0x240>)
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	f003 030f 	and.w	r3, r3, #15
 8018838:	683a      	ldr	r2, [r7, #0]
 801883a:	429a      	cmp	r2, r3
 801883c:	d910      	bls.n	8018860 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801883e:	4b87      	ldr	r3, [pc, #540]	@ (8018a5c <HAL_RCC_ClockConfig+0x240>)
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	f023 020f 	bic.w	r2, r3, #15
 8018846:	4985      	ldr	r1, [pc, #532]	@ (8018a5c <HAL_RCC_ClockConfig+0x240>)
 8018848:	683b      	ldr	r3, [r7, #0]
 801884a:	4313      	orrs	r3, r2
 801884c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801884e:	4b83      	ldr	r3, [pc, #524]	@ (8018a5c <HAL_RCC_ClockConfig+0x240>)
 8018850:	681b      	ldr	r3, [r3, #0]
 8018852:	f003 030f 	and.w	r3, r3, #15
 8018856:	683a      	ldr	r2, [r7, #0]
 8018858:	429a      	cmp	r2, r3
 801885a:	d001      	beq.n	8018860 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801885c:	2301      	movs	r3, #1
 801885e:	e184      	b.n	8018b6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	f003 0304 	and.w	r3, r3, #4
 8018868:	2b00      	cmp	r3, #0
 801886a:	d010      	beq.n	801888e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	691a      	ldr	r2, [r3, #16]
 8018870:	4b7b      	ldr	r3, [pc, #492]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 8018872:	699b      	ldr	r3, [r3, #24]
 8018874:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8018878:	429a      	cmp	r2, r3
 801887a:	d908      	bls.n	801888e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801887c:	4b78      	ldr	r3, [pc, #480]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 801887e:	699b      	ldr	r3, [r3, #24]
 8018880:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	691b      	ldr	r3, [r3, #16]
 8018888:	4975      	ldr	r1, [pc, #468]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 801888a:	4313      	orrs	r3, r2
 801888c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	f003 0308 	and.w	r3, r3, #8
 8018896:	2b00      	cmp	r3, #0
 8018898:	d010      	beq.n	80188bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	695a      	ldr	r2, [r3, #20]
 801889e:	4b70      	ldr	r3, [pc, #448]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 80188a0:	69db      	ldr	r3, [r3, #28]
 80188a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80188a6:	429a      	cmp	r2, r3
 80188a8:	d908      	bls.n	80188bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80188aa:	4b6d      	ldr	r3, [pc, #436]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 80188ac:	69db      	ldr	r3, [r3, #28]
 80188ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	695b      	ldr	r3, [r3, #20]
 80188b6:	496a      	ldr	r1, [pc, #424]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 80188b8:	4313      	orrs	r3, r2
 80188ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	f003 0310 	and.w	r3, r3, #16
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d010      	beq.n	80188ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	699a      	ldr	r2, [r3, #24]
 80188cc:	4b64      	ldr	r3, [pc, #400]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 80188ce:	69db      	ldr	r3, [r3, #28]
 80188d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80188d4:	429a      	cmp	r2, r3
 80188d6:	d908      	bls.n	80188ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80188d8:	4b61      	ldr	r3, [pc, #388]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 80188da:	69db      	ldr	r3, [r3, #28]
 80188dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	699b      	ldr	r3, [r3, #24]
 80188e4:	495e      	ldr	r1, [pc, #376]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 80188e6:	4313      	orrs	r3, r2
 80188e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	f003 0320 	and.w	r3, r3, #32
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d010      	beq.n	8018918 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	69da      	ldr	r2, [r3, #28]
 80188fa:	4b59      	ldr	r3, [pc, #356]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 80188fc:	6a1b      	ldr	r3, [r3, #32]
 80188fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8018902:	429a      	cmp	r2, r3
 8018904:	d908      	bls.n	8018918 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8018906:	4b56      	ldr	r3, [pc, #344]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 8018908:	6a1b      	ldr	r3, [r3, #32]
 801890a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	69db      	ldr	r3, [r3, #28]
 8018912:	4953      	ldr	r1, [pc, #332]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 8018914:	4313      	orrs	r3, r2
 8018916:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	f003 0302 	and.w	r3, r3, #2
 8018920:	2b00      	cmp	r3, #0
 8018922:	d010      	beq.n	8018946 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	68da      	ldr	r2, [r3, #12]
 8018928:	4b4d      	ldr	r3, [pc, #308]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 801892a:	699b      	ldr	r3, [r3, #24]
 801892c:	f003 030f 	and.w	r3, r3, #15
 8018930:	429a      	cmp	r2, r3
 8018932:	d908      	bls.n	8018946 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8018934:	4b4a      	ldr	r3, [pc, #296]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 8018936:	699b      	ldr	r3, [r3, #24]
 8018938:	f023 020f 	bic.w	r2, r3, #15
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	68db      	ldr	r3, [r3, #12]
 8018940:	4947      	ldr	r1, [pc, #284]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 8018942:	4313      	orrs	r3, r2
 8018944:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	f003 0301 	and.w	r3, r3, #1
 801894e:	2b00      	cmp	r3, #0
 8018950:	d055      	beq.n	80189fe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8018952:	4b43      	ldr	r3, [pc, #268]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 8018954:	699b      	ldr	r3, [r3, #24]
 8018956:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	689b      	ldr	r3, [r3, #8]
 801895e:	4940      	ldr	r1, [pc, #256]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 8018960:	4313      	orrs	r3, r2
 8018962:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	685b      	ldr	r3, [r3, #4]
 8018968:	2b02      	cmp	r3, #2
 801896a:	d107      	bne.n	801897c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801896c:	4b3c      	ldr	r3, [pc, #240]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 801896e:	681b      	ldr	r3, [r3, #0]
 8018970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018974:	2b00      	cmp	r3, #0
 8018976:	d121      	bne.n	80189bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8018978:	2301      	movs	r3, #1
 801897a:	e0f6      	b.n	8018b6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	685b      	ldr	r3, [r3, #4]
 8018980:	2b03      	cmp	r3, #3
 8018982:	d107      	bne.n	8018994 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8018984:	4b36      	ldr	r3, [pc, #216]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801898c:	2b00      	cmp	r3, #0
 801898e:	d115      	bne.n	80189bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8018990:	2301      	movs	r3, #1
 8018992:	e0ea      	b.n	8018b6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	685b      	ldr	r3, [r3, #4]
 8018998:	2b01      	cmp	r3, #1
 801899a:	d107      	bne.n	80189ac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801899c:	4b30      	ldr	r3, [pc, #192]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d109      	bne.n	80189bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80189a8:	2301      	movs	r3, #1
 80189aa:	e0de      	b.n	8018b6a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80189ac:	4b2c      	ldr	r3, [pc, #176]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	f003 0304 	and.w	r3, r3, #4
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d101      	bne.n	80189bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80189b8:	2301      	movs	r3, #1
 80189ba:	e0d6      	b.n	8018b6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80189bc:	4b28      	ldr	r3, [pc, #160]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 80189be:	691b      	ldr	r3, [r3, #16]
 80189c0:	f023 0207 	bic.w	r2, r3, #7
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	685b      	ldr	r3, [r3, #4]
 80189c8:	4925      	ldr	r1, [pc, #148]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 80189ca:	4313      	orrs	r3, r2
 80189cc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80189ce:	f7f8 fc91 	bl	80112f4 <HAL_GetTick>
 80189d2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80189d4:	e00a      	b.n	80189ec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80189d6:	f7f8 fc8d 	bl	80112f4 <HAL_GetTick>
 80189da:	4602      	mov	r2, r0
 80189dc:	697b      	ldr	r3, [r7, #20]
 80189de:	1ad3      	subs	r3, r2, r3
 80189e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80189e4:	4293      	cmp	r3, r2
 80189e6:	d901      	bls.n	80189ec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80189e8:	2303      	movs	r3, #3
 80189ea:	e0be      	b.n	8018b6a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80189ec:	4b1c      	ldr	r3, [pc, #112]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 80189ee:	691b      	ldr	r3, [r3, #16]
 80189f0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	685b      	ldr	r3, [r3, #4]
 80189f8:	00db      	lsls	r3, r3, #3
 80189fa:	429a      	cmp	r2, r3
 80189fc:	d1eb      	bne.n	80189d6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	681b      	ldr	r3, [r3, #0]
 8018a02:	f003 0302 	and.w	r3, r3, #2
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d010      	beq.n	8018a2c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	68da      	ldr	r2, [r3, #12]
 8018a0e:	4b14      	ldr	r3, [pc, #80]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 8018a10:	699b      	ldr	r3, [r3, #24]
 8018a12:	f003 030f 	and.w	r3, r3, #15
 8018a16:	429a      	cmp	r2, r3
 8018a18:	d208      	bcs.n	8018a2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8018a1a:	4b11      	ldr	r3, [pc, #68]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 8018a1c:	699b      	ldr	r3, [r3, #24]
 8018a1e:	f023 020f 	bic.w	r2, r3, #15
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	68db      	ldr	r3, [r3, #12]
 8018a26:	490e      	ldr	r1, [pc, #56]	@ (8018a60 <HAL_RCC_ClockConfig+0x244>)
 8018a28:	4313      	orrs	r3, r2
 8018a2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8018a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8018a5c <HAL_RCC_ClockConfig+0x240>)
 8018a2e:	681b      	ldr	r3, [r3, #0]
 8018a30:	f003 030f 	and.w	r3, r3, #15
 8018a34:	683a      	ldr	r2, [r7, #0]
 8018a36:	429a      	cmp	r2, r3
 8018a38:	d214      	bcs.n	8018a64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018a3a:	4b08      	ldr	r3, [pc, #32]	@ (8018a5c <HAL_RCC_ClockConfig+0x240>)
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	f023 020f 	bic.w	r2, r3, #15
 8018a42:	4906      	ldr	r1, [pc, #24]	@ (8018a5c <HAL_RCC_ClockConfig+0x240>)
 8018a44:	683b      	ldr	r3, [r7, #0]
 8018a46:	4313      	orrs	r3, r2
 8018a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8018a4a:	4b04      	ldr	r3, [pc, #16]	@ (8018a5c <HAL_RCC_ClockConfig+0x240>)
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	f003 030f 	and.w	r3, r3, #15
 8018a52:	683a      	ldr	r2, [r7, #0]
 8018a54:	429a      	cmp	r2, r3
 8018a56:	d005      	beq.n	8018a64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8018a58:	2301      	movs	r3, #1
 8018a5a:	e086      	b.n	8018b6a <HAL_RCC_ClockConfig+0x34e>
 8018a5c:	52002000 	.word	0x52002000
 8018a60:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	f003 0304 	and.w	r3, r3, #4
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d010      	beq.n	8018a92 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	691a      	ldr	r2, [r3, #16]
 8018a74:	4b3f      	ldr	r3, [pc, #252]	@ (8018b74 <HAL_RCC_ClockConfig+0x358>)
 8018a76:	699b      	ldr	r3, [r3, #24]
 8018a78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8018a7c:	429a      	cmp	r2, r3
 8018a7e:	d208      	bcs.n	8018a92 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8018a80:	4b3c      	ldr	r3, [pc, #240]	@ (8018b74 <HAL_RCC_ClockConfig+0x358>)
 8018a82:	699b      	ldr	r3, [r3, #24]
 8018a84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	691b      	ldr	r3, [r3, #16]
 8018a8c:	4939      	ldr	r1, [pc, #228]	@ (8018b74 <HAL_RCC_ClockConfig+0x358>)
 8018a8e:	4313      	orrs	r3, r2
 8018a90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	681b      	ldr	r3, [r3, #0]
 8018a96:	f003 0308 	and.w	r3, r3, #8
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d010      	beq.n	8018ac0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	695a      	ldr	r2, [r3, #20]
 8018aa2:	4b34      	ldr	r3, [pc, #208]	@ (8018b74 <HAL_RCC_ClockConfig+0x358>)
 8018aa4:	69db      	ldr	r3, [r3, #28]
 8018aa6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8018aaa:	429a      	cmp	r2, r3
 8018aac:	d208      	bcs.n	8018ac0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8018aae:	4b31      	ldr	r3, [pc, #196]	@ (8018b74 <HAL_RCC_ClockConfig+0x358>)
 8018ab0:	69db      	ldr	r3, [r3, #28]
 8018ab2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	695b      	ldr	r3, [r3, #20]
 8018aba:	492e      	ldr	r1, [pc, #184]	@ (8018b74 <HAL_RCC_ClockConfig+0x358>)
 8018abc:	4313      	orrs	r3, r2
 8018abe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	f003 0310 	and.w	r3, r3, #16
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d010      	beq.n	8018aee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	699a      	ldr	r2, [r3, #24]
 8018ad0:	4b28      	ldr	r3, [pc, #160]	@ (8018b74 <HAL_RCC_ClockConfig+0x358>)
 8018ad2:	69db      	ldr	r3, [r3, #28]
 8018ad4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8018ad8:	429a      	cmp	r2, r3
 8018ada:	d208      	bcs.n	8018aee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8018adc:	4b25      	ldr	r3, [pc, #148]	@ (8018b74 <HAL_RCC_ClockConfig+0x358>)
 8018ade:	69db      	ldr	r3, [r3, #28]
 8018ae0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	699b      	ldr	r3, [r3, #24]
 8018ae8:	4922      	ldr	r1, [pc, #136]	@ (8018b74 <HAL_RCC_ClockConfig+0x358>)
 8018aea:	4313      	orrs	r3, r2
 8018aec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	681b      	ldr	r3, [r3, #0]
 8018af2:	f003 0320 	and.w	r3, r3, #32
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d010      	beq.n	8018b1c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	69da      	ldr	r2, [r3, #28]
 8018afe:	4b1d      	ldr	r3, [pc, #116]	@ (8018b74 <HAL_RCC_ClockConfig+0x358>)
 8018b00:	6a1b      	ldr	r3, [r3, #32]
 8018b02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8018b06:	429a      	cmp	r2, r3
 8018b08:	d208      	bcs.n	8018b1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8018b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8018b74 <HAL_RCC_ClockConfig+0x358>)
 8018b0c:	6a1b      	ldr	r3, [r3, #32]
 8018b0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	69db      	ldr	r3, [r3, #28]
 8018b16:	4917      	ldr	r1, [pc, #92]	@ (8018b74 <HAL_RCC_ClockConfig+0x358>)
 8018b18:	4313      	orrs	r3, r2
 8018b1a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8018b1c:	f000 f834 	bl	8018b88 <HAL_RCC_GetSysClockFreq>
 8018b20:	4602      	mov	r2, r0
 8018b22:	4b14      	ldr	r3, [pc, #80]	@ (8018b74 <HAL_RCC_ClockConfig+0x358>)
 8018b24:	699b      	ldr	r3, [r3, #24]
 8018b26:	0a1b      	lsrs	r3, r3, #8
 8018b28:	f003 030f 	and.w	r3, r3, #15
 8018b2c:	4912      	ldr	r1, [pc, #72]	@ (8018b78 <HAL_RCC_ClockConfig+0x35c>)
 8018b2e:	5ccb      	ldrb	r3, [r1, r3]
 8018b30:	f003 031f 	and.w	r3, r3, #31
 8018b34:	fa22 f303 	lsr.w	r3, r2, r3
 8018b38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8018b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8018b74 <HAL_RCC_ClockConfig+0x358>)
 8018b3c:	699b      	ldr	r3, [r3, #24]
 8018b3e:	f003 030f 	and.w	r3, r3, #15
 8018b42:	4a0d      	ldr	r2, [pc, #52]	@ (8018b78 <HAL_RCC_ClockConfig+0x35c>)
 8018b44:	5cd3      	ldrb	r3, [r2, r3]
 8018b46:	f003 031f 	and.w	r3, r3, #31
 8018b4a:	693a      	ldr	r2, [r7, #16]
 8018b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8018b50:	4a0a      	ldr	r2, [pc, #40]	@ (8018b7c <HAL_RCC_ClockConfig+0x360>)
 8018b52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8018b54:	4a0a      	ldr	r2, [pc, #40]	@ (8018b80 <HAL_RCC_ClockConfig+0x364>)
 8018b56:	693b      	ldr	r3, [r7, #16]
 8018b58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8018b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8018b84 <HAL_RCC_ClockConfig+0x368>)
 8018b5c:	681b      	ldr	r3, [r3, #0]
 8018b5e:	4618      	mov	r0, r3
 8018b60:	f004 fbcc 	bl	801d2fc <HAL_InitTick>
 8018b64:	4603      	mov	r3, r0
 8018b66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8018b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b6a:	4618      	mov	r0, r3
 8018b6c:	3718      	adds	r7, #24
 8018b6e:	46bd      	mov	sp, r7
 8018b70:	bd80      	pop	{r7, pc}
 8018b72:	bf00      	nop
 8018b74:	58024400 	.word	0x58024400
 8018b78:	08044f94 	.word	0x08044f94
 8018b7c:	240008b0 	.word	0x240008b0
 8018b80:	240008ac 	.word	0x240008ac
 8018b84:	240008b8 	.word	0x240008b8

08018b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8018b88:	b480      	push	{r7}
 8018b8a:	b089      	sub	sp, #36	@ 0x24
 8018b8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8018b8e:	4bb3      	ldr	r3, [pc, #716]	@ (8018e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8018b90:	691b      	ldr	r3, [r3, #16]
 8018b92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018b96:	2b18      	cmp	r3, #24
 8018b98:	f200 8155 	bhi.w	8018e46 <HAL_RCC_GetSysClockFreq+0x2be>
 8018b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8018ba4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8018b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ba2:	bf00      	nop
 8018ba4:	08018c09 	.word	0x08018c09
 8018ba8:	08018e47 	.word	0x08018e47
 8018bac:	08018e47 	.word	0x08018e47
 8018bb0:	08018e47 	.word	0x08018e47
 8018bb4:	08018e47 	.word	0x08018e47
 8018bb8:	08018e47 	.word	0x08018e47
 8018bbc:	08018e47 	.word	0x08018e47
 8018bc0:	08018e47 	.word	0x08018e47
 8018bc4:	08018c2f 	.word	0x08018c2f
 8018bc8:	08018e47 	.word	0x08018e47
 8018bcc:	08018e47 	.word	0x08018e47
 8018bd0:	08018e47 	.word	0x08018e47
 8018bd4:	08018e47 	.word	0x08018e47
 8018bd8:	08018e47 	.word	0x08018e47
 8018bdc:	08018e47 	.word	0x08018e47
 8018be0:	08018e47 	.word	0x08018e47
 8018be4:	08018c35 	.word	0x08018c35
 8018be8:	08018e47 	.word	0x08018e47
 8018bec:	08018e47 	.word	0x08018e47
 8018bf0:	08018e47 	.word	0x08018e47
 8018bf4:	08018e47 	.word	0x08018e47
 8018bf8:	08018e47 	.word	0x08018e47
 8018bfc:	08018e47 	.word	0x08018e47
 8018c00:	08018e47 	.word	0x08018e47
 8018c04:	08018c3b 	.word	0x08018c3b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018c08:	4b94      	ldr	r3, [pc, #592]	@ (8018e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	f003 0320 	and.w	r3, r3, #32
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d009      	beq.n	8018c28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8018c14:	4b91      	ldr	r3, [pc, #580]	@ (8018e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	08db      	lsrs	r3, r3, #3
 8018c1a:	f003 0303 	and.w	r3, r3, #3
 8018c1e:	4a90      	ldr	r2, [pc, #576]	@ (8018e60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8018c20:	fa22 f303 	lsr.w	r3, r2, r3
 8018c24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8018c26:	e111      	b.n	8018e4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8018c28:	4b8d      	ldr	r3, [pc, #564]	@ (8018e60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8018c2a:	61bb      	str	r3, [r7, #24]
      break;
 8018c2c:	e10e      	b.n	8018e4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8018c2e:	4b8d      	ldr	r3, [pc, #564]	@ (8018e64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8018c30:	61bb      	str	r3, [r7, #24]
      break;
 8018c32:	e10b      	b.n	8018e4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8018c34:	4b8c      	ldr	r3, [pc, #560]	@ (8018e68 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8018c36:	61bb      	str	r3, [r7, #24]
      break;
 8018c38:	e108      	b.n	8018e4c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8018c3a:	4b88      	ldr	r3, [pc, #544]	@ (8018e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8018c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018c3e:	f003 0303 	and.w	r3, r3, #3
 8018c42:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8018c44:	4b85      	ldr	r3, [pc, #532]	@ (8018e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8018c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018c48:	091b      	lsrs	r3, r3, #4
 8018c4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018c4e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8018c50:	4b82      	ldr	r3, [pc, #520]	@ (8018e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8018c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c54:	f003 0301 	and.w	r3, r3, #1
 8018c58:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8018c5a:	4b80      	ldr	r3, [pc, #512]	@ (8018e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8018c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018c5e:	08db      	lsrs	r3, r3, #3
 8018c60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018c64:	68fa      	ldr	r2, [r7, #12]
 8018c66:	fb02 f303 	mul.w	r3, r2, r3
 8018c6a:	ee07 3a90 	vmov	s15, r3
 8018c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018c72:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8018c76:	693b      	ldr	r3, [r7, #16]
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	f000 80e1 	beq.w	8018e40 <HAL_RCC_GetSysClockFreq+0x2b8>
 8018c7e:	697b      	ldr	r3, [r7, #20]
 8018c80:	2b02      	cmp	r3, #2
 8018c82:	f000 8083 	beq.w	8018d8c <HAL_RCC_GetSysClockFreq+0x204>
 8018c86:	697b      	ldr	r3, [r7, #20]
 8018c88:	2b02      	cmp	r3, #2
 8018c8a:	f200 80a1 	bhi.w	8018dd0 <HAL_RCC_GetSysClockFreq+0x248>
 8018c8e:	697b      	ldr	r3, [r7, #20]
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d003      	beq.n	8018c9c <HAL_RCC_GetSysClockFreq+0x114>
 8018c94:	697b      	ldr	r3, [r7, #20]
 8018c96:	2b01      	cmp	r3, #1
 8018c98:	d056      	beq.n	8018d48 <HAL_RCC_GetSysClockFreq+0x1c0>
 8018c9a:	e099      	b.n	8018dd0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018c9c:	4b6f      	ldr	r3, [pc, #444]	@ (8018e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	f003 0320 	and.w	r3, r3, #32
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d02d      	beq.n	8018d04 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8018ca8:	4b6c      	ldr	r3, [pc, #432]	@ (8018e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	08db      	lsrs	r3, r3, #3
 8018cae:	f003 0303 	and.w	r3, r3, #3
 8018cb2:	4a6b      	ldr	r2, [pc, #428]	@ (8018e60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8018cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8018cb8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	ee07 3a90 	vmov	s15, r3
 8018cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018cc4:	693b      	ldr	r3, [r7, #16]
 8018cc6:	ee07 3a90 	vmov	s15, r3
 8018cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018cd2:	4b62      	ldr	r3, [pc, #392]	@ (8018e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8018cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018cda:	ee07 3a90 	vmov	s15, r3
 8018cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018ce2:	ed97 6a02 	vldr	s12, [r7, #8]
 8018ce6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8018e6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8018cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8018cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018cfe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8018d02:	e087      	b.n	8018e14 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8018d04:	693b      	ldr	r3, [r7, #16]
 8018d06:	ee07 3a90 	vmov	s15, r3
 8018d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018d0e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8018e70 <HAL_RCC_GetSysClockFreq+0x2e8>
 8018d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018d16:	4b51      	ldr	r3, [pc, #324]	@ (8018e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8018d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018d1e:	ee07 3a90 	vmov	s15, r3
 8018d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018d26:	ed97 6a02 	vldr	s12, [r7, #8]
 8018d2a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8018e6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8018d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8018d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018d42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8018d46:	e065      	b.n	8018e14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8018d48:	693b      	ldr	r3, [r7, #16]
 8018d4a:	ee07 3a90 	vmov	s15, r3
 8018d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018d52:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8018e74 <HAL_RCC_GetSysClockFreq+0x2ec>
 8018d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018d5a:	4b40      	ldr	r3, [pc, #256]	@ (8018e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8018d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018d62:	ee07 3a90 	vmov	s15, r3
 8018d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018d6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8018d6e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8018e6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8018d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8018d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018d86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8018d8a:	e043      	b.n	8018e14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8018d8c:	693b      	ldr	r3, [r7, #16]
 8018d8e:	ee07 3a90 	vmov	s15, r3
 8018d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018d96:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8018e78 <HAL_RCC_GetSysClockFreq+0x2f0>
 8018d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8018e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8018da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018da6:	ee07 3a90 	vmov	s15, r3
 8018daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018dae:	ed97 6a02 	vldr	s12, [r7, #8]
 8018db2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8018e6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8018db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8018dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018dca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8018dce:	e021      	b.n	8018e14 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8018dd0:	693b      	ldr	r3, [r7, #16]
 8018dd2:	ee07 3a90 	vmov	s15, r3
 8018dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018dda:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8018e74 <HAL_RCC_GetSysClockFreq+0x2ec>
 8018dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018de2:	4b1e      	ldr	r3, [pc, #120]	@ (8018e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8018de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018dea:	ee07 3a90 	vmov	s15, r3
 8018dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018df2:	ed97 6a02 	vldr	s12, [r7, #8]
 8018df6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8018e6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8018dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8018dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018e02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018e0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8018e12:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8018e14:	4b11      	ldr	r3, [pc, #68]	@ (8018e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8018e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018e18:	0a5b      	lsrs	r3, r3, #9
 8018e1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018e1e:	3301      	adds	r3, #1
 8018e20:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8018e22:	683b      	ldr	r3, [r7, #0]
 8018e24:	ee07 3a90 	vmov	s15, r3
 8018e28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8018e2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8018e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018e34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018e38:	ee17 3a90 	vmov	r3, s15
 8018e3c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8018e3e:	e005      	b.n	8018e4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8018e40:	2300      	movs	r3, #0
 8018e42:	61bb      	str	r3, [r7, #24]
      break;
 8018e44:	e002      	b.n	8018e4c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8018e46:	4b07      	ldr	r3, [pc, #28]	@ (8018e64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8018e48:	61bb      	str	r3, [r7, #24]
      break;
 8018e4a:	bf00      	nop
  }

  return sysclockfreq;
 8018e4c:	69bb      	ldr	r3, [r7, #24]
}
 8018e4e:	4618      	mov	r0, r3
 8018e50:	3724      	adds	r7, #36	@ 0x24
 8018e52:	46bd      	mov	sp, r7
 8018e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e58:	4770      	bx	lr
 8018e5a:	bf00      	nop
 8018e5c:	58024400 	.word	0x58024400
 8018e60:	03d09000 	.word	0x03d09000
 8018e64:	003d0900 	.word	0x003d0900
 8018e68:	017d7840 	.word	0x017d7840
 8018e6c:	46000000 	.word	0x46000000
 8018e70:	4c742400 	.word	0x4c742400
 8018e74:	4a742400 	.word	0x4a742400
 8018e78:	4bbebc20 	.word	0x4bbebc20

08018e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8018e7c:	b580      	push	{r7, lr}
 8018e7e:	b082      	sub	sp, #8
 8018e80:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8018e82:	f7ff fe81 	bl	8018b88 <HAL_RCC_GetSysClockFreq>
 8018e86:	4602      	mov	r2, r0
 8018e88:	4b10      	ldr	r3, [pc, #64]	@ (8018ecc <HAL_RCC_GetHCLKFreq+0x50>)
 8018e8a:	699b      	ldr	r3, [r3, #24]
 8018e8c:	0a1b      	lsrs	r3, r3, #8
 8018e8e:	f003 030f 	and.w	r3, r3, #15
 8018e92:	490f      	ldr	r1, [pc, #60]	@ (8018ed0 <HAL_RCC_GetHCLKFreq+0x54>)
 8018e94:	5ccb      	ldrb	r3, [r1, r3]
 8018e96:	f003 031f 	and.w	r3, r3, #31
 8018e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8018e9e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8018ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8018ecc <HAL_RCC_GetHCLKFreq+0x50>)
 8018ea2:	699b      	ldr	r3, [r3, #24]
 8018ea4:	f003 030f 	and.w	r3, r3, #15
 8018ea8:	4a09      	ldr	r2, [pc, #36]	@ (8018ed0 <HAL_RCC_GetHCLKFreq+0x54>)
 8018eaa:	5cd3      	ldrb	r3, [r2, r3]
 8018eac:	f003 031f 	and.w	r3, r3, #31
 8018eb0:	687a      	ldr	r2, [r7, #4]
 8018eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8018eb6:	4a07      	ldr	r2, [pc, #28]	@ (8018ed4 <HAL_RCC_GetHCLKFreq+0x58>)
 8018eb8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8018eba:	4a07      	ldr	r2, [pc, #28]	@ (8018ed8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8018ec0:	4b04      	ldr	r3, [pc, #16]	@ (8018ed4 <HAL_RCC_GetHCLKFreq+0x58>)
 8018ec2:	681b      	ldr	r3, [r3, #0]
}
 8018ec4:	4618      	mov	r0, r3
 8018ec6:	3708      	adds	r7, #8
 8018ec8:	46bd      	mov	sp, r7
 8018eca:	bd80      	pop	{r7, pc}
 8018ecc:	58024400 	.word	0x58024400
 8018ed0:	08044f94 	.word	0x08044f94
 8018ed4:	240008b0 	.word	0x240008b0
 8018ed8:	240008ac 	.word	0x240008ac

08018edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8018edc:	b580      	push	{r7, lr}
 8018ede:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8018ee0:	f7ff ffcc 	bl	8018e7c <HAL_RCC_GetHCLKFreq>
 8018ee4:	4602      	mov	r2, r0
 8018ee6:	4b06      	ldr	r3, [pc, #24]	@ (8018f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8018ee8:	69db      	ldr	r3, [r3, #28]
 8018eea:	091b      	lsrs	r3, r3, #4
 8018eec:	f003 0307 	and.w	r3, r3, #7
 8018ef0:	4904      	ldr	r1, [pc, #16]	@ (8018f04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8018ef2:	5ccb      	ldrb	r3, [r1, r3]
 8018ef4:	f003 031f 	and.w	r3, r3, #31
 8018ef8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8018efc:	4618      	mov	r0, r3
 8018efe:	bd80      	pop	{r7, pc}
 8018f00:	58024400 	.word	0x58024400
 8018f04:	08044f94 	.word	0x08044f94

08018f08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8018f08:	b480      	push	{r7}
 8018f0a:	b083      	sub	sp, #12
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	6078      	str	r0, [r7, #4]
 8018f10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	223f      	movs	r2, #63	@ 0x3f
 8018f16:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8018f18:	4b1a      	ldr	r3, [pc, #104]	@ (8018f84 <HAL_RCC_GetClockConfig+0x7c>)
 8018f1a:	691b      	ldr	r3, [r3, #16]
 8018f1c:	f003 0207 	and.w	r2, r3, #7
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8018f24:	4b17      	ldr	r3, [pc, #92]	@ (8018f84 <HAL_RCC_GetClockConfig+0x7c>)
 8018f26:	699b      	ldr	r3, [r3, #24]
 8018f28:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8018f30:	4b14      	ldr	r3, [pc, #80]	@ (8018f84 <HAL_RCC_GetClockConfig+0x7c>)
 8018f32:	699b      	ldr	r3, [r3, #24]
 8018f34:	f003 020f 	and.w	r2, r3, #15
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8018f3c:	4b11      	ldr	r3, [pc, #68]	@ (8018f84 <HAL_RCC_GetClockConfig+0x7c>)
 8018f3e:	699b      	ldr	r3, [r3, #24]
 8018f40:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8018f48:	4b0e      	ldr	r3, [pc, #56]	@ (8018f84 <HAL_RCC_GetClockConfig+0x7c>)
 8018f4a:	69db      	ldr	r3, [r3, #28]
 8018f4c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8018f54:	4b0b      	ldr	r3, [pc, #44]	@ (8018f84 <HAL_RCC_GetClockConfig+0x7c>)
 8018f56:	69db      	ldr	r3, [r3, #28]
 8018f58:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8018f60:	4b08      	ldr	r3, [pc, #32]	@ (8018f84 <HAL_RCC_GetClockConfig+0x7c>)
 8018f62:	6a1b      	ldr	r3, [r3, #32]
 8018f64:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8018f6c:	4b06      	ldr	r3, [pc, #24]	@ (8018f88 <HAL_RCC_GetClockConfig+0x80>)
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	f003 020f 	and.w	r2, r3, #15
 8018f74:	683b      	ldr	r3, [r7, #0]
 8018f76:	601a      	str	r2, [r3, #0]
}
 8018f78:	bf00      	nop
 8018f7a:	370c      	adds	r7, #12
 8018f7c:	46bd      	mov	sp, r7
 8018f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f82:	4770      	bx	lr
 8018f84:	58024400 	.word	0x58024400
 8018f88:	52002000 	.word	0x52002000

08018f8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8018f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018f90:	b0c6      	sub	sp, #280	@ 0x118
 8018f92:	af00      	add	r7, sp, #0
 8018f94:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8018f98:	2300      	movs	r3, #0
 8018f9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8018f9e:	2300      	movs	r3, #0
 8018fa0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8018fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8018fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fac:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8018fb0:	2500      	movs	r5, #0
 8018fb2:	ea54 0305 	orrs.w	r3, r4, r5
 8018fb6:	d049      	beq.n	801904c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8018fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8018fbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018fbe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8018fc2:	d02f      	beq.n	8019024 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8018fc4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8018fc8:	d828      	bhi.n	801901c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8018fca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8018fce:	d01a      	beq.n	8019006 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8018fd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8018fd4:	d822      	bhi.n	801901c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	d003      	beq.n	8018fe2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8018fda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8018fde:	d007      	beq.n	8018ff0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8018fe0:	e01c      	b.n	801901c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8018fe2:	4bab      	ldr	r3, [pc, #684]	@ (8019290 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8018fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018fe6:	4aaa      	ldr	r2, [pc, #680]	@ (8019290 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8018fe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8018fec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8018fee:	e01a      	b.n	8019026 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8018ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8018ff4:	3308      	adds	r3, #8
 8018ff6:	2102      	movs	r1, #2
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	f002 fa49 	bl	801b490 <RCCEx_PLL2_Config>
 8018ffe:	4603      	mov	r3, r0
 8019000:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8019004:	e00f      	b.n	8019026 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8019006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801900a:	3328      	adds	r3, #40	@ 0x28
 801900c:	2102      	movs	r1, #2
 801900e:	4618      	mov	r0, r3
 8019010:	f002 faf0 	bl	801b5f4 <RCCEx_PLL3_Config>
 8019014:	4603      	mov	r3, r0
 8019016:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801901a:	e004      	b.n	8019026 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801901c:	2301      	movs	r3, #1
 801901e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8019022:	e000      	b.n	8019026 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8019024:	bf00      	nop
    }

    if (ret == HAL_OK)
 8019026:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801902a:	2b00      	cmp	r3, #0
 801902c:	d10a      	bne.n	8019044 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801902e:	4b98      	ldr	r3, [pc, #608]	@ (8019290 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8019030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019032:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8019036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801903a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801903c:	4a94      	ldr	r2, [pc, #592]	@ (8019290 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801903e:	430b      	orrs	r3, r1
 8019040:	6513      	str	r3, [r2, #80]	@ 0x50
 8019042:	e003      	b.n	801904c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8019044:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8019048:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801904c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019054:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8019058:	f04f 0900 	mov.w	r9, #0
 801905c:	ea58 0309 	orrs.w	r3, r8, r9
 8019060:	d047      	beq.n	80190f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8019062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019068:	2b04      	cmp	r3, #4
 801906a:	d82a      	bhi.n	80190c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801906c:	a201      	add	r2, pc, #4	@ (adr r2, 8019074 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801906e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019072:	bf00      	nop
 8019074:	08019089 	.word	0x08019089
 8019078:	08019097 	.word	0x08019097
 801907c:	080190ad 	.word	0x080190ad
 8019080:	080190cb 	.word	0x080190cb
 8019084:	080190cb 	.word	0x080190cb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8019088:	4b81      	ldr	r3, [pc, #516]	@ (8019290 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801908a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801908c:	4a80      	ldr	r2, [pc, #512]	@ (8019290 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801908e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8019092:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8019094:	e01a      	b.n	80190cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8019096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801909a:	3308      	adds	r3, #8
 801909c:	2100      	movs	r1, #0
 801909e:	4618      	mov	r0, r3
 80190a0:	f002 f9f6 	bl	801b490 <RCCEx_PLL2_Config>
 80190a4:	4603      	mov	r3, r0
 80190a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80190aa:	e00f      	b.n	80190cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80190ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80190b0:	3328      	adds	r3, #40	@ 0x28
 80190b2:	2100      	movs	r1, #0
 80190b4:	4618      	mov	r0, r3
 80190b6:	f002 fa9d 	bl	801b5f4 <RCCEx_PLL3_Config>
 80190ba:	4603      	mov	r3, r0
 80190bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80190c0:	e004      	b.n	80190cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80190c2:	2301      	movs	r3, #1
 80190c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80190c8:	e000      	b.n	80190cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80190ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80190cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d10a      	bne.n	80190ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80190d4:	4b6e      	ldr	r3, [pc, #440]	@ (8019290 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80190d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80190d8:	f023 0107 	bic.w	r1, r3, #7
 80190dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80190e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80190e2:	4a6b      	ldr	r2, [pc, #428]	@ (8019290 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80190e4:	430b      	orrs	r3, r1
 80190e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80190e8:	e003      	b.n	80190f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80190ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80190ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80190f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80190f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190fa:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80190fe:	f04f 0b00 	mov.w	fp, #0
 8019102:	ea5a 030b 	orrs.w	r3, sl, fp
 8019106:	d05b      	beq.n	80191c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8019108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801910c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8019110:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8019114:	d03b      	beq.n	801918e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8019116:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 801911a:	d834      	bhi.n	8019186 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801911c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8019120:	d037      	beq.n	8019192 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8019122:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8019126:	d82e      	bhi.n	8019186 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8019128:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801912c:	d033      	beq.n	8019196 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 801912e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8019132:	d828      	bhi.n	8019186 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8019134:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8019138:	d01a      	beq.n	8019170 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 801913a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801913e:	d822      	bhi.n	8019186 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8019140:	2b00      	cmp	r3, #0
 8019142:	d003      	beq.n	801914c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8019144:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8019148:	d007      	beq.n	801915a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 801914a:	e01c      	b.n	8019186 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801914c:	4b50      	ldr	r3, [pc, #320]	@ (8019290 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801914e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019150:	4a4f      	ldr	r2, [pc, #316]	@ (8019290 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8019152:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8019156:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8019158:	e01e      	b.n	8019198 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801915a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801915e:	3308      	adds	r3, #8
 8019160:	2100      	movs	r1, #0
 8019162:	4618      	mov	r0, r3
 8019164:	f002 f994 	bl	801b490 <RCCEx_PLL2_Config>
 8019168:	4603      	mov	r3, r0
 801916a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801916e:	e013      	b.n	8019198 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8019170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019174:	3328      	adds	r3, #40	@ 0x28
 8019176:	2100      	movs	r1, #0
 8019178:	4618      	mov	r0, r3
 801917a:	f002 fa3b 	bl	801b5f4 <RCCEx_PLL3_Config>
 801917e:	4603      	mov	r3, r0
 8019180:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8019184:	e008      	b.n	8019198 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8019186:	2301      	movs	r3, #1
 8019188:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801918c:	e004      	b.n	8019198 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801918e:	bf00      	nop
 8019190:	e002      	b.n	8019198 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8019192:	bf00      	nop
 8019194:	e000      	b.n	8019198 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8019196:	bf00      	nop
    }

    if (ret == HAL_OK)
 8019198:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801919c:	2b00      	cmp	r3, #0
 801919e:	d10b      	bne.n	80191b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80191a0:	4b3b      	ldr	r3, [pc, #236]	@ (8019290 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80191a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80191a4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80191a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80191ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80191b0:	4a37      	ldr	r2, [pc, #220]	@ (8019290 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80191b2:	430b      	orrs	r3, r1
 80191b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80191b6:	e003      	b.n	80191c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80191b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80191bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80191c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80191c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191c8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80191cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80191d0:	2300      	movs	r3, #0
 80191d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80191d6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80191da:	460b      	mov	r3, r1
 80191dc:	4313      	orrs	r3, r2
 80191de:	d05d      	beq.n	801929c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80191e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80191e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80191e8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80191ec:	d03b      	beq.n	8019266 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80191ee:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80191f2:	d834      	bhi.n	801925e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80191f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80191f8:	d037      	beq.n	801926a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80191fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80191fe:	d82e      	bhi.n	801925e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8019200:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8019204:	d033      	beq.n	801926e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8019206:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801920a:	d828      	bhi.n	801925e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801920c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8019210:	d01a      	beq.n	8019248 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8019212:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8019216:	d822      	bhi.n	801925e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8019218:	2b00      	cmp	r3, #0
 801921a:	d003      	beq.n	8019224 <HAL_RCCEx_PeriphCLKConfig+0x298>
 801921c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8019220:	d007      	beq.n	8019232 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8019222:	e01c      	b.n	801925e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8019224:	4b1a      	ldr	r3, [pc, #104]	@ (8019290 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8019226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019228:	4a19      	ldr	r2, [pc, #100]	@ (8019290 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801922a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801922e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8019230:	e01e      	b.n	8019270 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8019232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019236:	3308      	adds	r3, #8
 8019238:	2100      	movs	r1, #0
 801923a:	4618      	mov	r0, r3
 801923c:	f002 f928 	bl	801b490 <RCCEx_PLL2_Config>
 8019240:	4603      	mov	r3, r0
 8019242:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8019246:	e013      	b.n	8019270 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8019248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801924c:	3328      	adds	r3, #40	@ 0x28
 801924e:	2100      	movs	r1, #0
 8019250:	4618      	mov	r0, r3
 8019252:	f002 f9cf 	bl	801b5f4 <RCCEx_PLL3_Config>
 8019256:	4603      	mov	r3, r0
 8019258:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801925c:	e008      	b.n	8019270 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801925e:	2301      	movs	r3, #1
 8019260:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8019264:	e004      	b.n	8019270 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8019266:	bf00      	nop
 8019268:	e002      	b.n	8019270 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801926a:	bf00      	nop
 801926c:	e000      	b.n	8019270 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801926e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8019270:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8019274:	2b00      	cmp	r3, #0
 8019276:	d10d      	bne.n	8019294 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8019278:	4b05      	ldr	r3, [pc, #20]	@ (8019290 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801927a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801927c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8019280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019284:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8019288:	4a01      	ldr	r2, [pc, #4]	@ (8019290 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801928a:	430b      	orrs	r3, r1
 801928c:	6593      	str	r3, [r2, #88]	@ 0x58
 801928e:	e005      	b.n	801929c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8019290:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8019294:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8019298:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 801929c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80192a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192a4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80192a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80192ac:	2300      	movs	r3, #0
 80192ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80192b2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80192b6:	460b      	mov	r3, r1
 80192b8:	4313      	orrs	r3, r2
 80192ba:	d03a      	beq.n	8019332 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80192bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80192c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80192c2:	2b30      	cmp	r3, #48	@ 0x30
 80192c4:	d01f      	beq.n	8019306 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80192c6:	2b30      	cmp	r3, #48	@ 0x30
 80192c8:	d819      	bhi.n	80192fe <HAL_RCCEx_PeriphCLKConfig+0x372>
 80192ca:	2b20      	cmp	r3, #32
 80192cc:	d00c      	beq.n	80192e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80192ce:	2b20      	cmp	r3, #32
 80192d0:	d815      	bhi.n	80192fe <HAL_RCCEx_PeriphCLKConfig+0x372>
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d019      	beq.n	801930a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80192d6:	2b10      	cmp	r3, #16
 80192d8:	d111      	bne.n	80192fe <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80192da:	4baa      	ldr	r3, [pc, #680]	@ (8019584 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80192dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80192de:	4aa9      	ldr	r2, [pc, #676]	@ (8019584 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80192e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80192e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80192e6:	e011      	b.n	801930c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80192e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80192ec:	3308      	adds	r3, #8
 80192ee:	2102      	movs	r1, #2
 80192f0:	4618      	mov	r0, r3
 80192f2:	f002 f8cd 	bl	801b490 <RCCEx_PLL2_Config>
 80192f6:	4603      	mov	r3, r0
 80192f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80192fc:	e006      	b.n	801930c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80192fe:	2301      	movs	r3, #1
 8019300:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8019304:	e002      	b.n	801930c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8019306:	bf00      	nop
 8019308:	e000      	b.n	801930c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 801930a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801930c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8019310:	2b00      	cmp	r3, #0
 8019312:	d10a      	bne.n	801932a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8019314:	4b9b      	ldr	r3, [pc, #620]	@ (8019584 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8019316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019318:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801931c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019322:	4a98      	ldr	r2, [pc, #608]	@ (8019584 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8019324:	430b      	orrs	r3, r1
 8019326:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8019328:	e003      	b.n	8019332 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801932a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801932e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8019332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801933a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801933e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8019342:	2300      	movs	r3, #0
 8019344:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8019348:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801934c:	460b      	mov	r3, r1
 801934e:	4313      	orrs	r3, r2
 8019350:	d051      	beq.n	80193f6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8019352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019358:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801935c:	d035      	beq.n	80193ca <HAL_RCCEx_PeriphCLKConfig+0x43e>
 801935e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8019362:	d82e      	bhi.n	80193c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8019364:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8019368:	d031      	beq.n	80193ce <HAL_RCCEx_PeriphCLKConfig+0x442>
 801936a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801936e:	d828      	bhi.n	80193c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8019370:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8019374:	d01a      	beq.n	80193ac <HAL_RCCEx_PeriphCLKConfig+0x420>
 8019376:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801937a:	d822      	bhi.n	80193c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 801937c:	2b00      	cmp	r3, #0
 801937e:	d003      	beq.n	8019388 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8019380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019384:	d007      	beq.n	8019396 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8019386:	e01c      	b.n	80193c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8019388:	4b7e      	ldr	r3, [pc, #504]	@ (8019584 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801938a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801938c:	4a7d      	ldr	r2, [pc, #500]	@ (8019584 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801938e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8019392:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8019394:	e01c      	b.n	80193d0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8019396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801939a:	3308      	adds	r3, #8
 801939c:	2100      	movs	r1, #0
 801939e:	4618      	mov	r0, r3
 80193a0:	f002 f876 	bl	801b490 <RCCEx_PLL2_Config>
 80193a4:	4603      	mov	r3, r0
 80193a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80193aa:	e011      	b.n	80193d0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80193ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80193b0:	3328      	adds	r3, #40	@ 0x28
 80193b2:	2100      	movs	r1, #0
 80193b4:	4618      	mov	r0, r3
 80193b6:	f002 f91d 	bl	801b5f4 <RCCEx_PLL3_Config>
 80193ba:	4603      	mov	r3, r0
 80193bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80193c0:	e006      	b.n	80193d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80193c2:	2301      	movs	r3, #1
 80193c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80193c8:	e002      	b.n	80193d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80193ca:	bf00      	nop
 80193cc:	e000      	b.n	80193d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80193ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80193d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	d10a      	bne.n	80193ee <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80193d8:	4b6a      	ldr	r3, [pc, #424]	@ (8019584 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80193da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80193dc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80193e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80193e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80193e6:	4a67      	ldr	r2, [pc, #412]	@ (8019584 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80193e8:	430b      	orrs	r3, r1
 80193ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80193ec:	e003      	b.n	80193f6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80193ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80193f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80193f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80193fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193fe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8019402:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8019406:	2300      	movs	r3, #0
 8019408:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801940c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8019410:	460b      	mov	r3, r1
 8019412:	4313      	orrs	r3, r2
 8019414:	d053      	beq.n	80194be <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8019416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801941a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801941c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8019420:	d033      	beq.n	801948a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8019422:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8019426:	d82c      	bhi.n	8019482 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8019428:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801942c:	d02f      	beq.n	801948e <HAL_RCCEx_PeriphCLKConfig+0x502>
 801942e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8019432:	d826      	bhi.n	8019482 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8019434:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8019438:	d02b      	beq.n	8019492 <HAL_RCCEx_PeriphCLKConfig+0x506>
 801943a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801943e:	d820      	bhi.n	8019482 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8019440:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8019444:	d012      	beq.n	801946c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8019446:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801944a:	d81a      	bhi.n	8019482 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801944c:	2b00      	cmp	r3, #0
 801944e:	d022      	beq.n	8019496 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8019450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019454:	d115      	bne.n	8019482 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8019456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801945a:	3308      	adds	r3, #8
 801945c:	2101      	movs	r1, #1
 801945e:	4618      	mov	r0, r3
 8019460:	f002 f816 	bl	801b490 <RCCEx_PLL2_Config>
 8019464:	4603      	mov	r3, r0
 8019466:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801946a:	e015      	b.n	8019498 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801946c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019470:	3328      	adds	r3, #40	@ 0x28
 8019472:	2101      	movs	r1, #1
 8019474:	4618      	mov	r0, r3
 8019476:	f002 f8bd 	bl	801b5f4 <RCCEx_PLL3_Config>
 801947a:	4603      	mov	r3, r0
 801947c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8019480:	e00a      	b.n	8019498 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8019482:	2301      	movs	r3, #1
 8019484:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8019488:	e006      	b.n	8019498 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801948a:	bf00      	nop
 801948c:	e004      	b.n	8019498 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801948e:	bf00      	nop
 8019490:	e002      	b.n	8019498 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8019492:	bf00      	nop
 8019494:	e000      	b.n	8019498 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8019496:	bf00      	nop
    }

    if (ret == HAL_OK)
 8019498:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801949c:	2b00      	cmp	r3, #0
 801949e:	d10a      	bne.n	80194b6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80194a0:	4b38      	ldr	r3, [pc, #224]	@ (8019584 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80194a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80194a4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80194a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80194ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80194ae:	4a35      	ldr	r2, [pc, #212]	@ (8019584 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80194b0:	430b      	orrs	r3, r1
 80194b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80194b4:	e003      	b.n	80194be <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80194b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80194ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80194be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80194c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194c6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80194ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80194ce:	2300      	movs	r3, #0
 80194d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80194d4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80194d8:	460b      	mov	r3, r1
 80194da:	4313      	orrs	r3, r2
 80194dc:	d058      	beq.n	8019590 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80194de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80194e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80194e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80194ea:	d033      	beq.n	8019554 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80194ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80194f0:	d82c      	bhi.n	801954c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80194f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80194f6:	d02f      	beq.n	8019558 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80194f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80194fc:	d826      	bhi.n	801954c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80194fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8019502:	d02b      	beq.n	801955c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8019504:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8019508:	d820      	bhi.n	801954c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801950a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801950e:	d012      	beq.n	8019536 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8019510:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019514:	d81a      	bhi.n	801954c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8019516:	2b00      	cmp	r3, #0
 8019518:	d022      	beq.n	8019560 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801951a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801951e:	d115      	bne.n	801954c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8019520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019524:	3308      	adds	r3, #8
 8019526:	2101      	movs	r1, #1
 8019528:	4618      	mov	r0, r3
 801952a:	f001 ffb1 	bl	801b490 <RCCEx_PLL2_Config>
 801952e:	4603      	mov	r3, r0
 8019530:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8019534:	e015      	b.n	8019562 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8019536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801953a:	3328      	adds	r3, #40	@ 0x28
 801953c:	2101      	movs	r1, #1
 801953e:	4618      	mov	r0, r3
 8019540:	f002 f858 	bl	801b5f4 <RCCEx_PLL3_Config>
 8019544:	4603      	mov	r3, r0
 8019546:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801954a:	e00a      	b.n	8019562 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801954c:	2301      	movs	r3, #1
 801954e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8019552:	e006      	b.n	8019562 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8019554:	bf00      	nop
 8019556:	e004      	b.n	8019562 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8019558:	bf00      	nop
 801955a:	e002      	b.n	8019562 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801955c:	bf00      	nop
 801955e:	e000      	b.n	8019562 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8019560:	bf00      	nop
    }

    if (ret == HAL_OK)
 8019562:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8019566:	2b00      	cmp	r3, #0
 8019568:	d10e      	bne.n	8019588 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801956a:	4b06      	ldr	r3, [pc, #24]	@ (8019584 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801956c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801956e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8019572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019576:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801957a:	4a02      	ldr	r2, [pc, #8]	@ (8019584 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801957c:	430b      	orrs	r3, r1
 801957e:	6593      	str	r3, [r2, #88]	@ 0x58
 8019580:	e006      	b.n	8019590 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8019582:	bf00      	nop
 8019584:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8019588:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801958c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8019590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019598:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801959c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80195a0:	2300      	movs	r3, #0
 80195a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80195a6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80195aa:	460b      	mov	r3, r1
 80195ac:	4313      	orrs	r3, r2
 80195ae:	d037      	beq.n	8019620 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80195b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80195b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80195b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80195ba:	d00e      	beq.n	80195da <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80195bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80195c0:	d816      	bhi.n	80195f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d018      	beq.n	80195f8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80195c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80195ca:	d111      	bne.n	80195f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80195cc:	4bc4      	ldr	r3, [pc, #784]	@ (80198e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80195ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80195d0:	4ac3      	ldr	r2, [pc, #780]	@ (80198e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80195d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80195d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80195d8:	e00f      	b.n	80195fa <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80195da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80195de:	3308      	adds	r3, #8
 80195e0:	2101      	movs	r1, #1
 80195e2:	4618      	mov	r0, r3
 80195e4:	f001 ff54 	bl	801b490 <RCCEx_PLL2_Config>
 80195e8:	4603      	mov	r3, r0
 80195ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80195ee:	e004      	b.n	80195fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80195f0:	2301      	movs	r3, #1
 80195f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80195f6:	e000      	b.n	80195fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80195f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80195fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80195fe:	2b00      	cmp	r3, #0
 8019600:	d10a      	bne.n	8019618 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8019602:	4bb7      	ldr	r3, [pc, #732]	@ (80198e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8019604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019606:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801960a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801960e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019610:	4ab3      	ldr	r2, [pc, #716]	@ (80198e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8019612:	430b      	orrs	r3, r1
 8019614:	6513      	str	r3, [r2, #80]	@ 0x50
 8019616:	e003      	b.n	8019620 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8019618:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801961c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8019620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019628:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801962c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8019630:	2300      	movs	r3, #0
 8019632:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8019636:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801963a:	460b      	mov	r3, r1
 801963c:	4313      	orrs	r3, r2
 801963e:	d039      	beq.n	80196b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8019640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019646:	2b03      	cmp	r3, #3
 8019648:	d81c      	bhi.n	8019684 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 801964a:	a201      	add	r2, pc, #4	@ (adr r2, 8019650 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 801964c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019650:	0801968d 	.word	0x0801968d
 8019654:	08019661 	.word	0x08019661
 8019658:	0801966f 	.word	0x0801966f
 801965c:	0801968d 	.word	0x0801968d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8019660:	4b9f      	ldr	r3, [pc, #636]	@ (80198e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8019662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019664:	4a9e      	ldr	r2, [pc, #632]	@ (80198e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8019666:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801966a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801966c:	e00f      	b.n	801968e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801966e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019672:	3308      	adds	r3, #8
 8019674:	2102      	movs	r1, #2
 8019676:	4618      	mov	r0, r3
 8019678:	f001 ff0a 	bl	801b490 <RCCEx_PLL2_Config>
 801967c:	4603      	mov	r3, r0
 801967e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8019682:	e004      	b.n	801968e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8019684:	2301      	movs	r3, #1
 8019686:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801968a:	e000      	b.n	801968e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 801968c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801968e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8019692:	2b00      	cmp	r3, #0
 8019694:	d10a      	bne.n	80196ac <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8019696:	4b92      	ldr	r3, [pc, #584]	@ (80198e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8019698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801969a:	f023 0103 	bic.w	r1, r3, #3
 801969e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80196a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80196a4:	4a8e      	ldr	r2, [pc, #568]	@ (80198e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80196a6:	430b      	orrs	r3, r1
 80196a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80196aa:	e003      	b.n	80196b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80196ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80196b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80196b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80196b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196bc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80196c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80196c4:	2300      	movs	r3, #0
 80196c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80196ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80196ce:	460b      	mov	r3, r1
 80196d0:	4313      	orrs	r3, r2
 80196d2:	f000 8099 	beq.w	8019808 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80196d6:	4b83      	ldr	r3, [pc, #524]	@ (80198e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	4a82      	ldr	r2, [pc, #520]	@ (80198e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80196dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80196e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80196e2:	f7f7 fe07 	bl	80112f4 <HAL_GetTick>
 80196e6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80196ea:	e00b      	b.n	8019704 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80196ec:	f7f7 fe02 	bl	80112f4 <HAL_GetTick>
 80196f0:	4602      	mov	r2, r0
 80196f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80196f6:	1ad3      	subs	r3, r2, r3
 80196f8:	2b64      	cmp	r3, #100	@ 0x64
 80196fa:	d903      	bls.n	8019704 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80196fc:	2303      	movs	r3, #3
 80196fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8019702:	e005      	b.n	8019710 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8019704:	4b77      	ldr	r3, [pc, #476]	@ (80198e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8019706:	681b      	ldr	r3, [r3, #0]
 8019708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801970c:	2b00      	cmp	r3, #0
 801970e:	d0ed      	beq.n	80196ec <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8019710:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8019714:	2b00      	cmp	r3, #0
 8019716:	d173      	bne.n	8019800 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8019718:	4b71      	ldr	r3, [pc, #452]	@ (80198e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801971a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801971c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019720:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8019724:	4053      	eors	r3, r2
 8019726:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801972a:	2b00      	cmp	r3, #0
 801972c:	d015      	beq.n	801975a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801972e:	4b6c      	ldr	r3, [pc, #432]	@ (80198e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8019730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019732:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8019736:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801973a:	4b69      	ldr	r3, [pc, #420]	@ (80198e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801973c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801973e:	4a68      	ldr	r2, [pc, #416]	@ (80198e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8019740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8019744:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8019746:	4b66      	ldr	r3, [pc, #408]	@ (80198e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8019748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801974a:	4a65      	ldr	r2, [pc, #404]	@ (80198e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801974c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8019750:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8019752:	4a63      	ldr	r2, [pc, #396]	@ (80198e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8019754:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8019758:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801975a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801975e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8019762:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019766:	d118      	bne.n	801979a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019768:	f7f7 fdc4 	bl	80112f4 <HAL_GetTick>
 801976c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8019770:	e00d      	b.n	801978e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8019772:	f7f7 fdbf 	bl	80112f4 <HAL_GetTick>
 8019776:	4602      	mov	r2, r0
 8019778:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801977c:	1ad2      	subs	r2, r2, r3
 801977e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8019782:	429a      	cmp	r2, r3
 8019784:	d903      	bls.n	801978e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8019786:	2303      	movs	r3, #3
 8019788:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 801978c:	e005      	b.n	801979a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801978e:	4b54      	ldr	r3, [pc, #336]	@ (80198e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8019790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019792:	f003 0302 	and.w	r3, r3, #2
 8019796:	2b00      	cmp	r3, #0
 8019798:	d0eb      	beq.n	8019772 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 801979a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d129      	bne.n	80197f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80197a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80197a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80197aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80197ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80197b2:	d10e      	bne.n	80197d2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80197b4:	4b4a      	ldr	r3, [pc, #296]	@ (80198e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80197b6:	691b      	ldr	r3, [r3, #16]
 80197b8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80197bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80197c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80197c4:	091a      	lsrs	r2, r3, #4
 80197c6:	4b48      	ldr	r3, [pc, #288]	@ (80198e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80197c8:	4013      	ands	r3, r2
 80197ca:	4a45      	ldr	r2, [pc, #276]	@ (80198e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80197cc:	430b      	orrs	r3, r1
 80197ce:	6113      	str	r3, [r2, #16]
 80197d0:	e005      	b.n	80197de <HAL_RCCEx_PeriphCLKConfig+0x852>
 80197d2:	4b43      	ldr	r3, [pc, #268]	@ (80198e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80197d4:	691b      	ldr	r3, [r3, #16]
 80197d6:	4a42      	ldr	r2, [pc, #264]	@ (80198e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80197d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80197dc:	6113      	str	r3, [r2, #16]
 80197de:	4b40      	ldr	r3, [pc, #256]	@ (80198e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80197e0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80197e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80197e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80197ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80197ee:	4a3c      	ldr	r2, [pc, #240]	@ (80198e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80197f0:	430b      	orrs	r3, r1
 80197f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80197f4:	e008      	b.n	8019808 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80197f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80197fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80197fe:	e003      	b.n	8019808 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8019800:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8019804:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8019808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801980c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019810:	f002 0301 	and.w	r3, r2, #1
 8019814:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8019818:	2300      	movs	r3, #0
 801981a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801981e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8019822:	460b      	mov	r3, r1
 8019824:	4313      	orrs	r3, r2
 8019826:	f000 808f 	beq.w	8019948 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801982a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801982e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8019830:	2b28      	cmp	r3, #40	@ 0x28
 8019832:	d871      	bhi.n	8019918 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8019834:	a201      	add	r2, pc, #4	@ (adr r2, 801983c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8019836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801983a:	bf00      	nop
 801983c:	08019921 	.word	0x08019921
 8019840:	08019919 	.word	0x08019919
 8019844:	08019919 	.word	0x08019919
 8019848:	08019919 	.word	0x08019919
 801984c:	08019919 	.word	0x08019919
 8019850:	08019919 	.word	0x08019919
 8019854:	08019919 	.word	0x08019919
 8019858:	08019919 	.word	0x08019919
 801985c:	080198ed 	.word	0x080198ed
 8019860:	08019919 	.word	0x08019919
 8019864:	08019919 	.word	0x08019919
 8019868:	08019919 	.word	0x08019919
 801986c:	08019919 	.word	0x08019919
 8019870:	08019919 	.word	0x08019919
 8019874:	08019919 	.word	0x08019919
 8019878:	08019919 	.word	0x08019919
 801987c:	08019903 	.word	0x08019903
 8019880:	08019919 	.word	0x08019919
 8019884:	08019919 	.word	0x08019919
 8019888:	08019919 	.word	0x08019919
 801988c:	08019919 	.word	0x08019919
 8019890:	08019919 	.word	0x08019919
 8019894:	08019919 	.word	0x08019919
 8019898:	08019919 	.word	0x08019919
 801989c:	08019921 	.word	0x08019921
 80198a0:	08019919 	.word	0x08019919
 80198a4:	08019919 	.word	0x08019919
 80198a8:	08019919 	.word	0x08019919
 80198ac:	08019919 	.word	0x08019919
 80198b0:	08019919 	.word	0x08019919
 80198b4:	08019919 	.word	0x08019919
 80198b8:	08019919 	.word	0x08019919
 80198bc:	08019921 	.word	0x08019921
 80198c0:	08019919 	.word	0x08019919
 80198c4:	08019919 	.word	0x08019919
 80198c8:	08019919 	.word	0x08019919
 80198cc:	08019919 	.word	0x08019919
 80198d0:	08019919 	.word	0x08019919
 80198d4:	08019919 	.word	0x08019919
 80198d8:	08019919 	.word	0x08019919
 80198dc:	08019921 	.word	0x08019921
 80198e0:	58024400 	.word	0x58024400
 80198e4:	58024800 	.word	0x58024800
 80198e8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80198ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80198f0:	3308      	adds	r3, #8
 80198f2:	2101      	movs	r1, #1
 80198f4:	4618      	mov	r0, r3
 80198f6:	f001 fdcb 	bl	801b490 <RCCEx_PLL2_Config>
 80198fa:	4603      	mov	r3, r0
 80198fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8019900:	e00f      	b.n	8019922 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8019902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019906:	3328      	adds	r3, #40	@ 0x28
 8019908:	2101      	movs	r1, #1
 801990a:	4618      	mov	r0, r3
 801990c:	f001 fe72 	bl	801b5f4 <RCCEx_PLL3_Config>
 8019910:	4603      	mov	r3, r0
 8019912:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8019916:	e004      	b.n	8019922 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8019918:	2301      	movs	r3, #1
 801991a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801991e:	e000      	b.n	8019922 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8019920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8019922:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8019926:	2b00      	cmp	r3, #0
 8019928:	d10a      	bne.n	8019940 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801992a:	4bbf      	ldr	r3, [pc, #764]	@ (8019c28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801992c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801992e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8019932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019936:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8019938:	4abb      	ldr	r2, [pc, #748]	@ (8019c28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801993a:	430b      	orrs	r3, r1
 801993c:	6553      	str	r3, [r2, #84]	@ 0x54
 801993e:	e003      	b.n	8019948 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8019940:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8019944:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8019948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801994c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019950:	f002 0302 	and.w	r3, r2, #2
 8019954:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8019958:	2300      	movs	r3, #0
 801995a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801995e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8019962:	460b      	mov	r3, r1
 8019964:	4313      	orrs	r3, r2
 8019966:	d041      	beq.n	80199ec <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8019968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801996c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801996e:	2b05      	cmp	r3, #5
 8019970:	d824      	bhi.n	80199bc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8019972:	a201      	add	r2, pc, #4	@ (adr r2, 8019978 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8019974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019978:	080199c5 	.word	0x080199c5
 801997c:	08019991 	.word	0x08019991
 8019980:	080199a7 	.word	0x080199a7
 8019984:	080199c5 	.word	0x080199c5
 8019988:	080199c5 	.word	0x080199c5
 801998c:	080199c5 	.word	0x080199c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8019990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019994:	3308      	adds	r3, #8
 8019996:	2101      	movs	r1, #1
 8019998:	4618      	mov	r0, r3
 801999a:	f001 fd79 	bl	801b490 <RCCEx_PLL2_Config>
 801999e:	4603      	mov	r3, r0
 80199a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80199a4:	e00f      	b.n	80199c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80199a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80199aa:	3328      	adds	r3, #40	@ 0x28
 80199ac:	2101      	movs	r1, #1
 80199ae:	4618      	mov	r0, r3
 80199b0:	f001 fe20 	bl	801b5f4 <RCCEx_PLL3_Config>
 80199b4:	4603      	mov	r3, r0
 80199b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80199ba:	e004      	b.n	80199c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80199bc:	2301      	movs	r3, #1
 80199be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80199c2:	e000      	b.n	80199c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80199c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80199c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d10a      	bne.n	80199e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80199ce:	4b96      	ldr	r3, [pc, #600]	@ (8019c28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80199d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80199d2:	f023 0107 	bic.w	r1, r3, #7
 80199d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80199da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80199dc:	4a92      	ldr	r2, [pc, #584]	@ (8019c28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80199de:	430b      	orrs	r3, r1
 80199e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80199e2:	e003      	b.n	80199ec <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80199e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80199e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80199ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80199f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199f4:	f002 0304 	and.w	r3, r2, #4
 80199f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80199fc:	2300      	movs	r3, #0
 80199fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8019a02:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8019a06:	460b      	mov	r3, r1
 8019a08:	4313      	orrs	r3, r2
 8019a0a:	d044      	beq.n	8019a96 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8019a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019a14:	2b05      	cmp	r3, #5
 8019a16:	d825      	bhi.n	8019a64 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8019a18:	a201      	add	r2, pc, #4	@ (adr r2, 8019a20 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8019a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a1e:	bf00      	nop
 8019a20:	08019a6d 	.word	0x08019a6d
 8019a24:	08019a39 	.word	0x08019a39
 8019a28:	08019a4f 	.word	0x08019a4f
 8019a2c:	08019a6d 	.word	0x08019a6d
 8019a30:	08019a6d 	.word	0x08019a6d
 8019a34:	08019a6d 	.word	0x08019a6d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8019a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019a3c:	3308      	adds	r3, #8
 8019a3e:	2101      	movs	r1, #1
 8019a40:	4618      	mov	r0, r3
 8019a42:	f001 fd25 	bl	801b490 <RCCEx_PLL2_Config>
 8019a46:	4603      	mov	r3, r0
 8019a48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8019a4c:	e00f      	b.n	8019a6e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8019a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019a52:	3328      	adds	r3, #40	@ 0x28
 8019a54:	2101      	movs	r1, #1
 8019a56:	4618      	mov	r0, r3
 8019a58:	f001 fdcc 	bl	801b5f4 <RCCEx_PLL3_Config>
 8019a5c:	4603      	mov	r3, r0
 8019a5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8019a62:	e004      	b.n	8019a6e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8019a64:	2301      	movs	r3, #1
 8019a66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8019a6a:	e000      	b.n	8019a6e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8019a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8019a6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d10b      	bne.n	8019a8e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8019a76:	4b6c      	ldr	r3, [pc, #432]	@ (8019c28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8019a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019a7a:	f023 0107 	bic.w	r1, r3, #7
 8019a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019a86:	4a68      	ldr	r2, [pc, #416]	@ (8019c28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8019a88:	430b      	orrs	r3, r1
 8019a8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8019a8c:	e003      	b.n	8019a96 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8019a8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8019a92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8019a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a9e:	f002 0320 	and.w	r3, r2, #32
 8019aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8019aa6:	2300      	movs	r3, #0
 8019aa8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8019aac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8019ab0:	460b      	mov	r3, r1
 8019ab2:	4313      	orrs	r3, r2
 8019ab4:	d055      	beq.n	8019b62 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8019ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8019ac2:	d033      	beq.n	8019b2c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8019ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8019ac8:	d82c      	bhi.n	8019b24 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8019aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019ace:	d02f      	beq.n	8019b30 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8019ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019ad4:	d826      	bhi.n	8019b24 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8019ad6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8019ada:	d02b      	beq.n	8019b34 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8019adc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8019ae0:	d820      	bhi.n	8019b24 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8019ae2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019ae6:	d012      	beq.n	8019b0e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8019ae8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019aec:	d81a      	bhi.n	8019b24 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	d022      	beq.n	8019b38 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8019af2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019af6:	d115      	bne.n	8019b24 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8019af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019afc:	3308      	adds	r3, #8
 8019afe:	2100      	movs	r1, #0
 8019b00:	4618      	mov	r0, r3
 8019b02:	f001 fcc5 	bl	801b490 <RCCEx_PLL2_Config>
 8019b06:	4603      	mov	r3, r0
 8019b08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8019b0c:	e015      	b.n	8019b3a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8019b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019b12:	3328      	adds	r3, #40	@ 0x28
 8019b14:	2102      	movs	r1, #2
 8019b16:	4618      	mov	r0, r3
 8019b18:	f001 fd6c 	bl	801b5f4 <RCCEx_PLL3_Config>
 8019b1c:	4603      	mov	r3, r0
 8019b1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8019b22:	e00a      	b.n	8019b3a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8019b24:	2301      	movs	r3, #1
 8019b26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8019b2a:	e006      	b.n	8019b3a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8019b2c:	bf00      	nop
 8019b2e:	e004      	b.n	8019b3a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8019b30:	bf00      	nop
 8019b32:	e002      	b.n	8019b3a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8019b34:	bf00      	nop
 8019b36:	e000      	b.n	8019b3a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8019b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8019b3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	d10b      	bne.n	8019b5a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8019b42:	4b39      	ldr	r3, [pc, #228]	@ (8019c28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8019b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019b46:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8019b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019b52:	4a35      	ldr	r2, [pc, #212]	@ (8019c28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8019b54:	430b      	orrs	r3, r1
 8019b56:	6553      	str	r3, [r2, #84]	@ 0x54
 8019b58:	e003      	b.n	8019b62 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8019b5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8019b5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8019b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b6a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8019b6e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8019b72:	2300      	movs	r3, #0
 8019b74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8019b78:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8019b7c:	460b      	mov	r3, r1
 8019b7e:	4313      	orrs	r3, r2
 8019b80:	d058      	beq.n	8019c34 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8019b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019b86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8019b8a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8019b8e:	d033      	beq.n	8019bf8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8019b90:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8019b94:	d82c      	bhi.n	8019bf0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8019b96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019b9a:	d02f      	beq.n	8019bfc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8019b9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019ba0:	d826      	bhi.n	8019bf0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8019ba2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8019ba6:	d02b      	beq.n	8019c00 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8019ba8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8019bac:	d820      	bhi.n	8019bf0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8019bae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8019bb2:	d012      	beq.n	8019bda <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8019bb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8019bb8:	d81a      	bhi.n	8019bf0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d022      	beq.n	8019c04 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8019bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8019bc2:	d115      	bne.n	8019bf0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8019bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019bc8:	3308      	adds	r3, #8
 8019bca:	2100      	movs	r1, #0
 8019bcc:	4618      	mov	r0, r3
 8019bce:	f001 fc5f 	bl	801b490 <RCCEx_PLL2_Config>
 8019bd2:	4603      	mov	r3, r0
 8019bd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8019bd8:	e015      	b.n	8019c06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8019bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019bde:	3328      	adds	r3, #40	@ 0x28
 8019be0:	2102      	movs	r1, #2
 8019be2:	4618      	mov	r0, r3
 8019be4:	f001 fd06 	bl	801b5f4 <RCCEx_PLL3_Config>
 8019be8:	4603      	mov	r3, r0
 8019bea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8019bee:	e00a      	b.n	8019c06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8019bf0:	2301      	movs	r3, #1
 8019bf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8019bf6:	e006      	b.n	8019c06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8019bf8:	bf00      	nop
 8019bfa:	e004      	b.n	8019c06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8019bfc:	bf00      	nop
 8019bfe:	e002      	b.n	8019c06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8019c00:	bf00      	nop
 8019c02:	e000      	b.n	8019c06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8019c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8019c06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d10e      	bne.n	8019c2c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8019c0e:	4b06      	ldr	r3, [pc, #24]	@ (8019c28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8019c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019c12:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8019c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019c1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8019c1e:	4a02      	ldr	r2, [pc, #8]	@ (8019c28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8019c20:	430b      	orrs	r3, r1
 8019c22:	6593      	str	r3, [r2, #88]	@ 0x58
 8019c24:	e006      	b.n	8019c34 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8019c26:	bf00      	nop
 8019c28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8019c2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8019c30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8019c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c3c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8019c40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8019c44:	2300      	movs	r3, #0
 8019c46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8019c4a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8019c4e:	460b      	mov	r3, r1
 8019c50:	4313      	orrs	r3, r2
 8019c52:	d055      	beq.n	8019d00 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8019c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019c58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8019c5c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8019c60:	d033      	beq.n	8019cca <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8019c62:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8019c66:	d82c      	bhi.n	8019cc2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8019c68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8019c6c:	d02f      	beq.n	8019cce <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8019c6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8019c72:	d826      	bhi.n	8019cc2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8019c74:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8019c78:	d02b      	beq.n	8019cd2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8019c7a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8019c7e:	d820      	bhi.n	8019cc2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8019c80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8019c84:	d012      	beq.n	8019cac <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8019c86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8019c8a:	d81a      	bhi.n	8019cc2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	d022      	beq.n	8019cd6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8019c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8019c94:	d115      	bne.n	8019cc2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8019c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019c9a:	3308      	adds	r3, #8
 8019c9c:	2100      	movs	r1, #0
 8019c9e:	4618      	mov	r0, r3
 8019ca0:	f001 fbf6 	bl	801b490 <RCCEx_PLL2_Config>
 8019ca4:	4603      	mov	r3, r0
 8019ca6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8019caa:	e015      	b.n	8019cd8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8019cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019cb0:	3328      	adds	r3, #40	@ 0x28
 8019cb2:	2102      	movs	r1, #2
 8019cb4:	4618      	mov	r0, r3
 8019cb6:	f001 fc9d 	bl	801b5f4 <RCCEx_PLL3_Config>
 8019cba:	4603      	mov	r3, r0
 8019cbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8019cc0:	e00a      	b.n	8019cd8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8019cc2:	2301      	movs	r3, #1
 8019cc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8019cc8:	e006      	b.n	8019cd8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8019cca:	bf00      	nop
 8019ccc:	e004      	b.n	8019cd8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8019cce:	bf00      	nop
 8019cd0:	e002      	b.n	8019cd8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8019cd2:	bf00      	nop
 8019cd4:	e000      	b.n	8019cd8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8019cd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8019cd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d10b      	bne.n	8019cf8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8019ce0:	4ba0      	ldr	r3, [pc, #640]	@ (8019f64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8019ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019ce4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8019ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019cec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8019cf0:	4a9c      	ldr	r2, [pc, #624]	@ (8019f64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8019cf2:	430b      	orrs	r3, r1
 8019cf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8019cf6:	e003      	b.n	8019d00 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8019cf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8019cfc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8019d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d08:	f002 0308 	and.w	r3, r2, #8
 8019d0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8019d10:	2300      	movs	r3, #0
 8019d12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8019d16:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8019d1a:	460b      	mov	r3, r1
 8019d1c:	4313      	orrs	r3, r2
 8019d1e:	d01e      	beq.n	8019d5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8019d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019d28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019d2c:	d10c      	bne.n	8019d48 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8019d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019d32:	3328      	adds	r3, #40	@ 0x28
 8019d34:	2102      	movs	r1, #2
 8019d36:	4618      	mov	r0, r3
 8019d38:	f001 fc5c 	bl	801b5f4 <RCCEx_PLL3_Config>
 8019d3c:	4603      	mov	r3, r0
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	d002      	beq.n	8019d48 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8019d42:	2301      	movs	r3, #1
 8019d44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8019d48:	4b86      	ldr	r3, [pc, #536]	@ (8019f64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8019d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019d4c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8019d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019d58:	4a82      	ldr	r2, [pc, #520]	@ (8019f64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8019d5a:	430b      	orrs	r3, r1
 8019d5c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8019d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d66:	f002 0310 	and.w	r3, r2, #16
 8019d6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8019d6e:	2300      	movs	r3, #0
 8019d70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8019d74:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8019d78:	460b      	mov	r3, r1
 8019d7a:	4313      	orrs	r3, r2
 8019d7c:	d01e      	beq.n	8019dbc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8019d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8019d86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019d8a:	d10c      	bne.n	8019da6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8019d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019d90:	3328      	adds	r3, #40	@ 0x28
 8019d92:	2102      	movs	r1, #2
 8019d94:	4618      	mov	r0, r3
 8019d96:	f001 fc2d 	bl	801b5f4 <RCCEx_PLL3_Config>
 8019d9a:	4603      	mov	r3, r0
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	d002      	beq.n	8019da6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8019da0:	2301      	movs	r3, #1
 8019da2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8019da6:	4b6f      	ldr	r3, [pc, #444]	@ (8019f64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8019da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019daa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8019dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8019db6:	4a6b      	ldr	r2, [pc, #428]	@ (8019f64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8019db8:	430b      	orrs	r3, r1
 8019dba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8019dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dc4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8019dc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019dca:	2300      	movs	r3, #0
 8019dcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019dce:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8019dd2:	460b      	mov	r3, r1
 8019dd4:	4313      	orrs	r3, r2
 8019dd6:	d03e      	beq.n	8019e56 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8019dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019ddc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8019de0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8019de4:	d022      	beq.n	8019e2c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8019de6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8019dea:	d81b      	bhi.n	8019e24 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8019dec:	2b00      	cmp	r3, #0
 8019dee:	d003      	beq.n	8019df8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8019df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019df4:	d00b      	beq.n	8019e0e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8019df6:	e015      	b.n	8019e24 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8019df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019dfc:	3308      	adds	r3, #8
 8019dfe:	2100      	movs	r1, #0
 8019e00:	4618      	mov	r0, r3
 8019e02:	f001 fb45 	bl	801b490 <RCCEx_PLL2_Config>
 8019e06:	4603      	mov	r3, r0
 8019e08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8019e0c:	e00f      	b.n	8019e2e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8019e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019e12:	3328      	adds	r3, #40	@ 0x28
 8019e14:	2102      	movs	r1, #2
 8019e16:	4618      	mov	r0, r3
 8019e18:	f001 fbec 	bl	801b5f4 <RCCEx_PLL3_Config>
 8019e1c:	4603      	mov	r3, r0
 8019e1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8019e22:	e004      	b.n	8019e2e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8019e24:	2301      	movs	r3, #1
 8019e26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8019e2a:	e000      	b.n	8019e2e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8019e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8019e2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d10b      	bne.n	8019e4e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8019e36:	4b4b      	ldr	r3, [pc, #300]	@ (8019f64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8019e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019e3a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8019e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019e42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8019e46:	4a47      	ldr	r2, [pc, #284]	@ (8019f64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8019e48:	430b      	orrs	r3, r1
 8019e4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8019e4c:	e003      	b.n	8019e56 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8019e4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8019e52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8019e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e5e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8019e62:	673b      	str	r3, [r7, #112]	@ 0x70
 8019e64:	2300      	movs	r3, #0
 8019e66:	677b      	str	r3, [r7, #116]	@ 0x74
 8019e68:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8019e6c:	460b      	mov	r3, r1
 8019e6e:	4313      	orrs	r3, r2
 8019e70:	d03b      	beq.n	8019eea <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8019e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8019e7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8019e7e:	d01f      	beq.n	8019ec0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8019e80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8019e84:	d818      	bhi.n	8019eb8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8019e86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8019e8a:	d003      	beq.n	8019e94 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8019e8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8019e90:	d007      	beq.n	8019ea2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8019e92:	e011      	b.n	8019eb8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8019e94:	4b33      	ldr	r3, [pc, #204]	@ (8019f64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8019e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019e98:	4a32      	ldr	r2, [pc, #200]	@ (8019f64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8019e9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8019e9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8019ea0:	e00f      	b.n	8019ec2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8019ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019ea6:	3328      	adds	r3, #40	@ 0x28
 8019ea8:	2101      	movs	r1, #1
 8019eaa:	4618      	mov	r0, r3
 8019eac:	f001 fba2 	bl	801b5f4 <RCCEx_PLL3_Config>
 8019eb0:	4603      	mov	r3, r0
 8019eb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8019eb6:	e004      	b.n	8019ec2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8019eb8:	2301      	movs	r3, #1
 8019eba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8019ebe:	e000      	b.n	8019ec2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8019ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8019ec2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	d10b      	bne.n	8019ee2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8019eca:	4b26      	ldr	r3, [pc, #152]	@ (8019f64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8019ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019ece:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8019ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8019eda:	4a22      	ldr	r2, [pc, #136]	@ (8019f64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8019edc:	430b      	orrs	r3, r1
 8019ede:	6553      	str	r3, [r2, #84]	@ 0x54
 8019ee0:	e003      	b.n	8019eea <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8019ee2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8019ee6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8019eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ef2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8019ef6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019ef8:	2300      	movs	r3, #0
 8019efa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8019efc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8019f00:	460b      	mov	r3, r1
 8019f02:	4313      	orrs	r3, r2
 8019f04:	d034      	beq.n	8019f70 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8019f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d003      	beq.n	8019f18 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8019f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019f14:	d007      	beq.n	8019f26 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8019f16:	e011      	b.n	8019f3c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8019f18:	4b12      	ldr	r3, [pc, #72]	@ (8019f64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8019f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019f1c:	4a11      	ldr	r2, [pc, #68]	@ (8019f64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8019f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8019f22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8019f24:	e00e      	b.n	8019f44 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8019f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019f2a:	3308      	adds	r3, #8
 8019f2c:	2102      	movs	r1, #2
 8019f2e:	4618      	mov	r0, r3
 8019f30:	f001 faae 	bl	801b490 <RCCEx_PLL2_Config>
 8019f34:	4603      	mov	r3, r0
 8019f36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8019f3a:	e003      	b.n	8019f44 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8019f3c:	2301      	movs	r3, #1
 8019f3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8019f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8019f44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d10d      	bne.n	8019f68 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8019f4c:	4b05      	ldr	r3, [pc, #20]	@ (8019f64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8019f4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019f50:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8019f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019f5a:	4a02      	ldr	r2, [pc, #8]	@ (8019f64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8019f5c:	430b      	orrs	r3, r1
 8019f5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8019f60:	e006      	b.n	8019f70 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8019f62:	bf00      	nop
 8019f64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8019f68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8019f6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8019f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f78:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8019f7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8019f7e:	2300      	movs	r3, #0
 8019f80:	667b      	str	r3, [r7, #100]	@ 0x64
 8019f82:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8019f86:	460b      	mov	r3, r1
 8019f88:	4313      	orrs	r3, r2
 8019f8a:	d00c      	beq.n	8019fa6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8019f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019f90:	3328      	adds	r3, #40	@ 0x28
 8019f92:	2102      	movs	r1, #2
 8019f94:	4618      	mov	r0, r3
 8019f96:	f001 fb2d 	bl	801b5f4 <RCCEx_PLL3_Config>
 8019f9a:	4603      	mov	r3, r0
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d002      	beq.n	8019fa6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8019fa0:	2301      	movs	r3, #1
 8019fa2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8019fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8019fb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019fb4:	2300      	movs	r3, #0
 8019fb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019fb8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8019fbc:	460b      	mov	r3, r1
 8019fbe:	4313      	orrs	r3, r2
 8019fc0:	d036      	beq.n	801a030 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8019fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019fc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8019fc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8019fcc:	d018      	beq.n	801a000 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8019fce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8019fd2:	d811      	bhi.n	8019ff8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8019fd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019fd8:	d014      	beq.n	801a004 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8019fda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019fde:	d80b      	bhi.n	8019ff8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8019fe0:	2b00      	cmp	r3, #0
 8019fe2:	d011      	beq.n	801a008 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8019fe4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019fe8:	d106      	bne.n	8019ff8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8019fea:	4bb7      	ldr	r3, [pc, #732]	@ (801a2c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8019fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019fee:	4ab6      	ldr	r2, [pc, #728]	@ (801a2c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8019ff0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8019ff4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8019ff6:	e008      	b.n	801a00a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8019ff8:	2301      	movs	r3, #1
 8019ffa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8019ffe:	e004      	b.n	801a00a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801a000:	bf00      	nop
 801a002:	e002      	b.n	801a00a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801a004:	bf00      	nop
 801a006:	e000      	b.n	801a00a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801a008:	bf00      	nop
    }

    if (ret == HAL_OK)
 801a00a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d10a      	bne.n	801a028 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801a012:	4bad      	ldr	r3, [pc, #692]	@ (801a2c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801a014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a016:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801a01a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a01e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a020:	4aa9      	ldr	r2, [pc, #676]	@ (801a2c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801a022:	430b      	orrs	r3, r1
 801a024:	6553      	str	r3, [r2, #84]	@ 0x54
 801a026:	e003      	b.n	801a030 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801a028:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801a02c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801a030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a034:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a038:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801a03c:	653b      	str	r3, [r7, #80]	@ 0x50
 801a03e:	2300      	movs	r3, #0
 801a040:	657b      	str	r3, [r7, #84]	@ 0x54
 801a042:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801a046:	460b      	mov	r3, r1
 801a048:	4313      	orrs	r3, r2
 801a04a:	d009      	beq.n	801a060 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801a04c:	4b9e      	ldr	r3, [pc, #632]	@ (801a2c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801a04e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a050:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801a054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a05a:	4a9b      	ldr	r2, [pc, #620]	@ (801a2c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801a05c:	430b      	orrs	r3, r1
 801a05e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801a060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a064:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a068:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801a06c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a06e:	2300      	movs	r3, #0
 801a070:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a072:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801a076:	460b      	mov	r3, r1
 801a078:	4313      	orrs	r3, r2
 801a07a:	d009      	beq.n	801a090 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801a07c:	4b92      	ldr	r3, [pc, #584]	@ (801a2c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801a07e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a080:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801a084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a088:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a08a:	4a8f      	ldr	r2, [pc, #572]	@ (801a2c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801a08c:	430b      	orrs	r3, r1
 801a08e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801a090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a094:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a098:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801a09c:	643b      	str	r3, [r7, #64]	@ 0x40
 801a09e:	2300      	movs	r3, #0
 801a0a0:	647b      	str	r3, [r7, #68]	@ 0x44
 801a0a2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801a0a6:	460b      	mov	r3, r1
 801a0a8:	4313      	orrs	r3, r2
 801a0aa:	d00e      	beq.n	801a0ca <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801a0ac:	4b86      	ldr	r3, [pc, #536]	@ (801a2c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801a0ae:	691b      	ldr	r3, [r3, #16]
 801a0b0:	4a85      	ldr	r2, [pc, #532]	@ (801a2c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801a0b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801a0b6:	6113      	str	r3, [r2, #16]
 801a0b8:	4b83      	ldr	r3, [pc, #524]	@ (801a2c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801a0ba:	6919      	ldr	r1, [r3, #16]
 801a0bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a0c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a0c4:	4a80      	ldr	r2, [pc, #512]	@ (801a2c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801a0c6:	430b      	orrs	r3, r1
 801a0c8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801a0ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0d2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801a0d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a0d8:	2300      	movs	r3, #0
 801a0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a0dc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801a0e0:	460b      	mov	r3, r1
 801a0e2:	4313      	orrs	r3, r2
 801a0e4:	d009      	beq.n	801a0fa <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801a0e6:	4b78      	ldr	r3, [pc, #480]	@ (801a2c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801a0e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a0ea:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801a0ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a0f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a0f4:	4a74      	ldr	r2, [pc, #464]	@ (801a2c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801a0f6:	430b      	orrs	r3, r1
 801a0f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801a0fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a102:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801a106:	633b      	str	r3, [r7, #48]	@ 0x30
 801a108:	2300      	movs	r3, #0
 801a10a:	637b      	str	r3, [r7, #52]	@ 0x34
 801a10c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801a110:	460b      	mov	r3, r1
 801a112:	4313      	orrs	r3, r2
 801a114:	d00a      	beq.n	801a12c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801a116:	4b6c      	ldr	r3, [pc, #432]	@ (801a2c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801a118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a11a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801a11e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a126:	4a68      	ldr	r2, [pc, #416]	@ (801a2c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801a128:	430b      	orrs	r3, r1
 801a12a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801a12c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a130:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a134:	2100      	movs	r1, #0
 801a136:	62b9      	str	r1, [r7, #40]	@ 0x28
 801a138:	f003 0301 	and.w	r3, r3, #1
 801a13c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a13e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801a142:	460b      	mov	r3, r1
 801a144:	4313      	orrs	r3, r2
 801a146:	d011      	beq.n	801a16c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801a148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a14c:	3308      	adds	r3, #8
 801a14e:	2100      	movs	r1, #0
 801a150:	4618      	mov	r0, r3
 801a152:	f001 f99d 	bl	801b490 <RCCEx_PLL2_Config>
 801a156:	4603      	mov	r3, r0
 801a158:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 801a15c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801a160:	2b00      	cmp	r3, #0
 801a162:	d003      	beq.n	801a16c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801a164:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801a168:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801a16c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a170:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a174:	2100      	movs	r1, #0
 801a176:	6239      	str	r1, [r7, #32]
 801a178:	f003 0302 	and.w	r3, r3, #2
 801a17c:	627b      	str	r3, [r7, #36]	@ 0x24
 801a17e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801a182:	460b      	mov	r3, r1
 801a184:	4313      	orrs	r3, r2
 801a186:	d011      	beq.n	801a1ac <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801a188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a18c:	3308      	adds	r3, #8
 801a18e:	2101      	movs	r1, #1
 801a190:	4618      	mov	r0, r3
 801a192:	f001 f97d 	bl	801b490 <RCCEx_PLL2_Config>
 801a196:	4603      	mov	r3, r0
 801a198:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 801a19c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	d003      	beq.n	801a1ac <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801a1a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801a1a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801a1ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1b4:	2100      	movs	r1, #0
 801a1b6:	61b9      	str	r1, [r7, #24]
 801a1b8:	f003 0304 	and.w	r3, r3, #4
 801a1bc:	61fb      	str	r3, [r7, #28]
 801a1be:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801a1c2:	460b      	mov	r3, r1
 801a1c4:	4313      	orrs	r3, r2
 801a1c6:	d011      	beq.n	801a1ec <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801a1c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a1cc:	3308      	adds	r3, #8
 801a1ce:	2102      	movs	r1, #2
 801a1d0:	4618      	mov	r0, r3
 801a1d2:	f001 f95d 	bl	801b490 <RCCEx_PLL2_Config>
 801a1d6:	4603      	mov	r3, r0
 801a1d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 801a1dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801a1e0:	2b00      	cmp	r3, #0
 801a1e2:	d003      	beq.n	801a1ec <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801a1e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801a1e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801a1ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1f4:	2100      	movs	r1, #0
 801a1f6:	6139      	str	r1, [r7, #16]
 801a1f8:	f003 0308 	and.w	r3, r3, #8
 801a1fc:	617b      	str	r3, [r7, #20]
 801a1fe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801a202:	460b      	mov	r3, r1
 801a204:	4313      	orrs	r3, r2
 801a206:	d011      	beq.n	801a22c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801a208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a20c:	3328      	adds	r3, #40	@ 0x28
 801a20e:	2100      	movs	r1, #0
 801a210:	4618      	mov	r0, r3
 801a212:	f001 f9ef 	bl	801b5f4 <RCCEx_PLL3_Config>
 801a216:	4603      	mov	r3, r0
 801a218:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 801a21c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801a220:	2b00      	cmp	r3, #0
 801a222:	d003      	beq.n	801a22c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801a224:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801a228:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801a22c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a230:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a234:	2100      	movs	r1, #0
 801a236:	60b9      	str	r1, [r7, #8]
 801a238:	f003 0310 	and.w	r3, r3, #16
 801a23c:	60fb      	str	r3, [r7, #12]
 801a23e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801a242:	460b      	mov	r3, r1
 801a244:	4313      	orrs	r3, r2
 801a246:	d011      	beq.n	801a26c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801a248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a24c:	3328      	adds	r3, #40	@ 0x28
 801a24e:	2101      	movs	r1, #1
 801a250:	4618      	mov	r0, r3
 801a252:	f001 f9cf 	bl	801b5f4 <RCCEx_PLL3_Config>
 801a256:	4603      	mov	r3, r0
 801a258:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 801a25c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801a260:	2b00      	cmp	r3, #0
 801a262:	d003      	beq.n	801a26c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801a264:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801a268:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801a26c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a274:	2100      	movs	r1, #0
 801a276:	6039      	str	r1, [r7, #0]
 801a278:	f003 0320 	and.w	r3, r3, #32
 801a27c:	607b      	str	r3, [r7, #4]
 801a27e:	e9d7 1200 	ldrd	r1, r2, [r7]
 801a282:	460b      	mov	r3, r1
 801a284:	4313      	orrs	r3, r2
 801a286:	d011      	beq.n	801a2ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801a288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a28c:	3328      	adds	r3, #40	@ 0x28
 801a28e:	2102      	movs	r1, #2
 801a290:	4618      	mov	r0, r3
 801a292:	f001 f9af 	bl	801b5f4 <RCCEx_PLL3_Config>
 801a296:	4603      	mov	r3, r0
 801a298:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 801a29c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801a2a0:	2b00      	cmp	r3, #0
 801a2a2:	d003      	beq.n	801a2ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801a2a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801a2a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 801a2ac:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d101      	bne.n	801a2b8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 801a2b4:	2300      	movs	r3, #0
 801a2b6:	e000      	b.n	801a2ba <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 801a2b8:	2301      	movs	r3, #1
}
 801a2ba:	4618      	mov	r0, r3
 801a2bc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 801a2c0:	46bd      	mov	sp, r7
 801a2c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801a2c6:	bf00      	nop
 801a2c8:	58024400 	.word	0x58024400

0801a2cc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 801a2cc:	b580      	push	{r7, lr}
 801a2ce:	b090      	sub	sp, #64	@ 0x40
 801a2d0:	af00      	add	r7, sp, #0
 801a2d2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801a2d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a2da:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 801a2de:	430b      	orrs	r3, r1
 801a2e0:	f040 8094 	bne.w	801a40c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 801a2e4:	4b9b      	ldr	r3, [pc, #620]	@ (801a554 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801a2e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a2e8:	f003 0307 	and.w	r3, r3, #7
 801a2ec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801a2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2f0:	2b04      	cmp	r3, #4
 801a2f2:	f200 8087 	bhi.w	801a404 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801a2f6:	a201      	add	r2, pc, #4	@ (adr r2, 801a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 801a2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a2fc:	0801a311 	.word	0x0801a311
 801a300:	0801a339 	.word	0x0801a339
 801a304:	0801a361 	.word	0x0801a361
 801a308:	0801a3fd 	.word	0x0801a3fd
 801a30c:	0801a389 	.word	0x0801a389
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801a310:	4b90      	ldr	r3, [pc, #576]	@ (801a554 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801a312:	681b      	ldr	r3, [r3, #0]
 801a314:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801a318:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801a31c:	d108      	bne.n	801a330 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801a31e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a322:	4618      	mov	r0, r3
 801a324:	f000 ff62 	bl	801b1ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801a328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a32a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801a32c:	f000 bc93 	b.w	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801a330:	2300      	movs	r3, #0
 801a332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a334:	f000 bc8f 	b.w	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801a338:	4b86      	ldr	r3, [pc, #536]	@ (801a554 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801a340:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801a344:	d108      	bne.n	801a358 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801a346:	f107 0318 	add.w	r3, r7, #24
 801a34a:	4618      	mov	r0, r3
 801a34c:	f000 fca6 	bl	801ac9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801a350:	69bb      	ldr	r3, [r7, #24]
 801a352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801a354:	f000 bc7f 	b.w	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801a358:	2300      	movs	r3, #0
 801a35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a35c:	f000 bc7b 	b.w	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801a360:	4b7c      	ldr	r3, [pc, #496]	@ (801a554 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801a368:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801a36c:	d108      	bne.n	801a380 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801a36e:	f107 030c 	add.w	r3, r7, #12
 801a372:	4618      	mov	r0, r3
 801a374:	f000 fde6 	bl	801af44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801a378:	68fb      	ldr	r3, [r7, #12]
 801a37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801a37c:	f000 bc6b 	b.w	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801a380:	2300      	movs	r3, #0
 801a382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a384:	f000 bc67 	b.w	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801a388:	4b72      	ldr	r3, [pc, #456]	@ (801a554 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801a38a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a38c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801a390:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801a392:	4b70      	ldr	r3, [pc, #448]	@ (801a554 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	f003 0304 	and.w	r3, r3, #4
 801a39a:	2b04      	cmp	r3, #4
 801a39c:	d10c      	bne.n	801a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801a39e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3a0:	2b00      	cmp	r3, #0
 801a3a2:	d109      	bne.n	801a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801a3a4:	4b6b      	ldr	r3, [pc, #428]	@ (801a554 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801a3a6:	681b      	ldr	r3, [r3, #0]
 801a3a8:	08db      	lsrs	r3, r3, #3
 801a3aa:	f003 0303 	and.w	r3, r3, #3
 801a3ae:	4a6a      	ldr	r2, [pc, #424]	@ (801a558 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801a3b0:	fa22 f303 	lsr.w	r3, r2, r3
 801a3b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a3b6:	e01f      	b.n	801a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801a3b8:	4b66      	ldr	r3, [pc, #408]	@ (801a554 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801a3ba:	681b      	ldr	r3, [r3, #0]
 801a3bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a3c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a3c4:	d106      	bne.n	801a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801a3c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a3cc:	d102      	bne.n	801a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801a3ce:	4b63      	ldr	r3, [pc, #396]	@ (801a55c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801a3d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a3d2:	e011      	b.n	801a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801a3d4:	4b5f      	ldr	r3, [pc, #380]	@ (801a554 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801a3dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801a3e0:	d106      	bne.n	801a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801a3e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801a3e8:	d102      	bne.n	801a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801a3ea:	4b5d      	ldr	r3, [pc, #372]	@ (801a560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801a3ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a3ee:	e003      	b.n	801a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801a3f0:	2300      	movs	r3, #0
 801a3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801a3f4:	f000 bc2f 	b.w	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801a3f8:	f000 bc2d 	b.w	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801a3fc:	4b59      	ldr	r3, [pc, #356]	@ (801a564 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801a3fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a400:	f000 bc29 	b.w	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801a404:	2300      	movs	r3, #0
 801a406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a408:	f000 bc25 	b.w	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 801a40c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a410:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 801a414:	430b      	orrs	r3, r1
 801a416:	f040 80a7 	bne.w	801a568 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 801a41a:	4b4e      	ldr	r3, [pc, #312]	@ (801a554 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801a41c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a41e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 801a422:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801a424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a426:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801a42a:	d054      	beq.n	801a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 801a42c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a42e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801a432:	f200 808b 	bhi.w	801a54c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801a436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a438:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801a43c:	f000 8083 	beq.w	801a546 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 801a440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a442:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801a446:	f200 8081 	bhi.w	801a54c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801a44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a44c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801a450:	d02f      	beq.n	801a4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 801a452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a454:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801a458:	d878      	bhi.n	801a54c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801a45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	d004      	beq.n	801a46a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 801a460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a462:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801a466:	d012      	beq.n	801a48e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 801a468:	e070      	b.n	801a54c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801a46a:	4b3a      	ldr	r3, [pc, #232]	@ (801a554 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801a46c:	681b      	ldr	r3, [r3, #0]
 801a46e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801a472:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801a476:	d107      	bne.n	801a488 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801a478:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a47c:	4618      	mov	r0, r3
 801a47e:	f000 feb5 	bl	801b1ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801a482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801a486:	e3e6      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801a488:	2300      	movs	r3, #0
 801a48a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a48c:	e3e3      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801a48e:	4b31      	ldr	r3, [pc, #196]	@ (801a554 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801a496:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801a49a:	d107      	bne.n	801a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801a49c:	f107 0318 	add.w	r3, r7, #24
 801a4a0:	4618      	mov	r0, r3
 801a4a2:	f000 fbfb 	bl	801ac9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801a4a6:	69bb      	ldr	r3, [r7, #24]
 801a4a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801a4aa:	e3d4      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801a4ac:	2300      	movs	r3, #0
 801a4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a4b0:	e3d1      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801a4b2:	4b28      	ldr	r3, [pc, #160]	@ (801a554 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801a4ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801a4be:	d107      	bne.n	801a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801a4c0:	f107 030c 	add.w	r3, r7, #12
 801a4c4:	4618      	mov	r0, r3
 801a4c6:	f000 fd3d 	bl	801af44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801a4ca:	68fb      	ldr	r3, [r7, #12]
 801a4cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801a4ce:	e3c2      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801a4d0:	2300      	movs	r3, #0
 801a4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a4d4:	e3bf      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801a4d6:	4b1f      	ldr	r3, [pc, #124]	@ (801a554 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801a4d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a4da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801a4de:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801a4e0:	4b1c      	ldr	r3, [pc, #112]	@ (801a554 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801a4e2:	681b      	ldr	r3, [r3, #0]
 801a4e4:	f003 0304 	and.w	r3, r3, #4
 801a4e8:	2b04      	cmp	r3, #4
 801a4ea:	d10c      	bne.n	801a506 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 801a4ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	d109      	bne.n	801a506 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801a4f2:	4b18      	ldr	r3, [pc, #96]	@ (801a554 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	08db      	lsrs	r3, r3, #3
 801a4f8:	f003 0303 	and.w	r3, r3, #3
 801a4fc:	4a16      	ldr	r2, [pc, #88]	@ (801a558 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801a4fe:	fa22 f303 	lsr.w	r3, r2, r3
 801a502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a504:	e01e      	b.n	801a544 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801a506:	4b13      	ldr	r3, [pc, #76]	@ (801a554 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801a508:	681b      	ldr	r3, [r3, #0]
 801a50a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a50e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a512:	d106      	bne.n	801a522 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 801a514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a516:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a51a:	d102      	bne.n	801a522 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801a51c:	4b0f      	ldr	r3, [pc, #60]	@ (801a55c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801a51e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a520:	e010      	b.n	801a544 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801a522:	4b0c      	ldr	r3, [pc, #48]	@ (801a554 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801a52a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801a52e:	d106      	bne.n	801a53e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 801a530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a532:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801a536:	d102      	bne.n	801a53e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801a538:	4b09      	ldr	r3, [pc, #36]	@ (801a560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801a53a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a53c:	e002      	b.n	801a544 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801a53e:	2300      	movs	r3, #0
 801a540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801a542:	e388      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801a544:	e387      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801a546:	4b07      	ldr	r3, [pc, #28]	@ (801a564 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801a548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a54a:	e384      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801a54c:	2300      	movs	r3, #0
 801a54e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a550:	e381      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801a552:	bf00      	nop
 801a554:	58024400 	.word	0x58024400
 801a558:	03d09000 	.word	0x03d09000
 801a55c:	003d0900 	.word	0x003d0900
 801a560:	017d7840 	.word	0x017d7840
 801a564:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801a568:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a56c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 801a570:	430b      	orrs	r3, r1
 801a572:	f040 809c 	bne.w	801a6ae <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 801a576:	4b9e      	ldr	r3, [pc, #632]	@ (801a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801a578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a57a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 801a57e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801a580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a582:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801a586:	d054      	beq.n	801a632 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 801a588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a58a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801a58e:	f200 808b 	bhi.w	801a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801a592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a594:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801a598:	f000 8083 	beq.w	801a6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 801a59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a59e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801a5a2:	f200 8081 	bhi.w	801a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801a5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801a5ac:	d02f      	beq.n	801a60e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 801a5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801a5b4:	d878      	bhi.n	801a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801a5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5b8:	2b00      	cmp	r3, #0
 801a5ba:	d004      	beq.n	801a5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 801a5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a5c2:	d012      	beq.n	801a5ea <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 801a5c4:	e070      	b.n	801a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801a5c6:	4b8a      	ldr	r3, [pc, #552]	@ (801a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801a5ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801a5d2:	d107      	bne.n	801a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801a5d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a5d8:	4618      	mov	r0, r3
 801a5da:	f000 fe07 	bl	801b1ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801a5de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a5e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801a5e2:	e338      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801a5e4:	2300      	movs	r3, #0
 801a5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a5e8:	e335      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801a5ea:	4b81      	ldr	r3, [pc, #516]	@ (801a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801a5f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801a5f6:	d107      	bne.n	801a608 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801a5f8:	f107 0318 	add.w	r3, r7, #24
 801a5fc:	4618      	mov	r0, r3
 801a5fe:	f000 fb4d 	bl	801ac9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801a602:	69bb      	ldr	r3, [r7, #24]
 801a604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801a606:	e326      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801a608:	2300      	movs	r3, #0
 801a60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a60c:	e323      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801a60e:	4b78      	ldr	r3, [pc, #480]	@ (801a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801a610:	681b      	ldr	r3, [r3, #0]
 801a612:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801a616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801a61a:	d107      	bne.n	801a62c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801a61c:	f107 030c 	add.w	r3, r7, #12
 801a620:	4618      	mov	r0, r3
 801a622:	f000 fc8f 	bl	801af44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801a626:	68fb      	ldr	r3, [r7, #12]
 801a628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801a62a:	e314      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801a62c:	2300      	movs	r3, #0
 801a62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a630:	e311      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801a632:	4b6f      	ldr	r3, [pc, #444]	@ (801a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801a634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a636:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801a63a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801a63c:	4b6c      	ldr	r3, [pc, #432]	@ (801a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801a63e:	681b      	ldr	r3, [r3, #0]
 801a640:	f003 0304 	and.w	r3, r3, #4
 801a644:	2b04      	cmp	r3, #4
 801a646:	d10c      	bne.n	801a662 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 801a648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	d109      	bne.n	801a662 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801a64e:	4b68      	ldr	r3, [pc, #416]	@ (801a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	08db      	lsrs	r3, r3, #3
 801a654:	f003 0303 	and.w	r3, r3, #3
 801a658:	4a66      	ldr	r2, [pc, #408]	@ (801a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801a65a:	fa22 f303 	lsr.w	r3, r2, r3
 801a65e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a660:	e01e      	b.n	801a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801a662:	4b63      	ldr	r3, [pc, #396]	@ (801a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801a664:	681b      	ldr	r3, [r3, #0]
 801a666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a66a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a66e:	d106      	bne.n	801a67e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 801a670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a672:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a676:	d102      	bne.n	801a67e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801a678:	4b5f      	ldr	r3, [pc, #380]	@ (801a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801a67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a67c:	e010      	b.n	801a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801a67e:	4b5c      	ldr	r3, [pc, #368]	@ (801a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801a680:	681b      	ldr	r3, [r3, #0]
 801a682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801a686:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801a68a:	d106      	bne.n	801a69a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 801a68c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a68e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801a692:	d102      	bne.n	801a69a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801a694:	4b59      	ldr	r3, [pc, #356]	@ (801a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801a696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a698:	e002      	b.n	801a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801a69a:	2300      	movs	r3, #0
 801a69c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801a69e:	e2da      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801a6a0:	e2d9      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801a6a2:	4b57      	ldr	r3, [pc, #348]	@ (801a800 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801a6a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a6a6:	e2d6      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801a6a8:	2300      	movs	r3, #0
 801a6aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a6ac:	e2d3      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801a6ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a6b2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 801a6b6:	430b      	orrs	r3, r1
 801a6b8:	f040 80a7 	bne.w	801a80a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 801a6bc:	4b4c      	ldr	r3, [pc, #304]	@ (801a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801a6be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a6c0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 801a6c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801a6c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a6c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801a6cc:	d055      	beq.n	801a77a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 801a6ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a6d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801a6d4:	f200 8096 	bhi.w	801a804 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801a6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a6da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801a6de:	f000 8084 	beq.w	801a7ea <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 801a6e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a6e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801a6e8:	f200 808c 	bhi.w	801a804 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801a6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a6ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801a6f2:	d030      	beq.n	801a756 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 801a6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a6f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801a6fa:	f200 8083 	bhi.w	801a804 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801a6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a700:	2b00      	cmp	r3, #0
 801a702:	d004      	beq.n	801a70e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 801a704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a706:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801a70a:	d012      	beq.n	801a732 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 801a70c:	e07a      	b.n	801a804 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801a70e:	4b38      	ldr	r3, [pc, #224]	@ (801a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801a716:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801a71a:	d107      	bne.n	801a72c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801a71c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a720:	4618      	mov	r0, r3
 801a722:	f000 fd63 	bl	801b1ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801a726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801a72a:	e294      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801a72c:	2300      	movs	r3, #0
 801a72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a730:	e291      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801a732:	4b2f      	ldr	r3, [pc, #188]	@ (801a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801a734:	681b      	ldr	r3, [r3, #0]
 801a736:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801a73a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801a73e:	d107      	bne.n	801a750 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801a740:	f107 0318 	add.w	r3, r7, #24
 801a744:	4618      	mov	r0, r3
 801a746:	f000 faa9 	bl	801ac9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801a74a:	69bb      	ldr	r3, [r7, #24]
 801a74c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801a74e:	e282      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801a750:	2300      	movs	r3, #0
 801a752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a754:	e27f      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801a756:	4b26      	ldr	r3, [pc, #152]	@ (801a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801a758:	681b      	ldr	r3, [r3, #0]
 801a75a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801a75e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801a762:	d107      	bne.n	801a774 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801a764:	f107 030c 	add.w	r3, r7, #12
 801a768:	4618      	mov	r0, r3
 801a76a:	f000 fbeb 	bl	801af44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801a76e:	68fb      	ldr	r3, [r7, #12]
 801a770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801a772:	e270      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801a774:	2300      	movs	r3, #0
 801a776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a778:	e26d      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801a77a:	4b1d      	ldr	r3, [pc, #116]	@ (801a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801a77c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a77e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801a782:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801a784:	4b1a      	ldr	r3, [pc, #104]	@ (801a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801a786:	681b      	ldr	r3, [r3, #0]
 801a788:	f003 0304 	and.w	r3, r3, #4
 801a78c:	2b04      	cmp	r3, #4
 801a78e:	d10c      	bne.n	801a7aa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 801a790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a792:	2b00      	cmp	r3, #0
 801a794:	d109      	bne.n	801a7aa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801a796:	4b16      	ldr	r3, [pc, #88]	@ (801a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	08db      	lsrs	r3, r3, #3
 801a79c:	f003 0303 	and.w	r3, r3, #3
 801a7a0:	4a14      	ldr	r2, [pc, #80]	@ (801a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801a7a2:	fa22 f303 	lsr.w	r3, r2, r3
 801a7a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a7a8:	e01e      	b.n	801a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801a7aa:	4b11      	ldr	r3, [pc, #68]	@ (801a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801a7ac:	681b      	ldr	r3, [r3, #0]
 801a7ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a7b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a7b6:	d106      	bne.n	801a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 801a7b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a7ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a7be:	d102      	bne.n	801a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801a7c0:	4b0d      	ldr	r3, [pc, #52]	@ (801a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801a7c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a7c4:	e010      	b.n	801a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801a7c6:	4b0a      	ldr	r3, [pc, #40]	@ (801a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801a7c8:	681b      	ldr	r3, [r3, #0]
 801a7ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801a7ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801a7d2:	d106      	bne.n	801a7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 801a7d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a7d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801a7da:	d102      	bne.n	801a7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801a7dc:	4b07      	ldr	r3, [pc, #28]	@ (801a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801a7de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a7e0:	e002      	b.n	801a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801a7e2:	2300      	movs	r3, #0
 801a7e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801a7e6:	e236      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801a7e8:	e235      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801a7ea:	4b05      	ldr	r3, [pc, #20]	@ (801a800 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801a7ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a7ee:	e232      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801a7f0:	58024400 	.word	0x58024400
 801a7f4:	03d09000 	.word	0x03d09000
 801a7f8:	003d0900 	.word	0x003d0900
 801a7fc:	017d7840 	.word	0x017d7840
 801a800:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 801a804:	2300      	movs	r3, #0
 801a806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a808:	e225      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 801a80a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a80e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 801a812:	430b      	orrs	r3, r1
 801a814:	f040 8085 	bne.w	801a922 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 801a818:	4b9c      	ldr	r3, [pc, #624]	@ (801aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801a81a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a81c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 801a820:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 801a822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a824:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801a828:	d06b      	beq.n	801a902 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 801a82a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a82c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801a830:	d874      	bhi.n	801a91c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801a832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a834:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801a838:	d056      	beq.n	801a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 801a83a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a83c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801a840:	d86c      	bhi.n	801a91c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801a842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a844:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801a848:	d03b      	beq.n	801a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 801a84a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a84c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801a850:	d864      	bhi.n	801a91c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801a852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a854:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801a858:	d021      	beq.n	801a89e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 801a85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a85c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801a860:	d85c      	bhi.n	801a91c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801a862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a864:	2b00      	cmp	r3, #0
 801a866:	d004      	beq.n	801a872 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 801a868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a86a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a86e:	d004      	beq.n	801a87a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 801a870:	e054      	b.n	801a91c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 801a872:	f7fe fb33 	bl	8018edc <HAL_RCC_GetPCLK1Freq>
 801a876:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801a878:	e1ed      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801a87a:	4b84      	ldr	r3, [pc, #528]	@ (801aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801a882:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801a886:	d107      	bne.n	801a898 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801a888:	f107 0318 	add.w	r3, r7, #24
 801a88c:	4618      	mov	r0, r3
 801a88e:	f000 fa05 	bl	801ac9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801a892:	69fb      	ldr	r3, [r7, #28]
 801a894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801a896:	e1de      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801a898:	2300      	movs	r3, #0
 801a89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a89c:	e1db      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801a89e:	4b7b      	ldr	r3, [pc, #492]	@ (801aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801a8a0:	681b      	ldr	r3, [r3, #0]
 801a8a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801a8a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801a8aa:	d107      	bne.n	801a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801a8ac:	f107 030c 	add.w	r3, r7, #12
 801a8b0:	4618      	mov	r0, r3
 801a8b2:	f000 fb47 	bl	801af44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801a8b6:	693b      	ldr	r3, [r7, #16]
 801a8b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801a8ba:	e1cc      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801a8bc:	2300      	movs	r3, #0
 801a8be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a8c0:	e1c9      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801a8c2:	4b72      	ldr	r3, [pc, #456]	@ (801aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801a8c4:	681b      	ldr	r3, [r3, #0]
 801a8c6:	f003 0304 	and.w	r3, r3, #4
 801a8ca:	2b04      	cmp	r3, #4
 801a8cc:	d109      	bne.n	801a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801a8ce:	4b6f      	ldr	r3, [pc, #444]	@ (801aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	08db      	lsrs	r3, r3, #3
 801a8d4:	f003 0303 	and.w	r3, r3, #3
 801a8d8:	4a6d      	ldr	r2, [pc, #436]	@ (801aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 801a8da:	fa22 f303 	lsr.w	r3, r2, r3
 801a8de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801a8e0:	e1b9      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801a8e2:	2300      	movs	r3, #0
 801a8e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a8e6:	e1b6      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801a8e8:	4b68      	ldr	r3, [pc, #416]	@ (801aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801a8ea:	681b      	ldr	r3, [r3, #0]
 801a8ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a8f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a8f4:	d102      	bne.n	801a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 801a8f6:	4b67      	ldr	r3, [pc, #412]	@ (801aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 801a8f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801a8fa:	e1ac      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801a8fc:	2300      	movs	r3, #0
 801a8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a900:	e1a9      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801a902:	4b62      	ldr	r3, [pc, #392]	@ (801aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801a90a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801a90e:	d102      	bne.n	801a916 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 801a910:	4b61      	ldr	r3, [pc, #388]	@ (801aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 801a912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801a914:	e19f      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801a916:	2300      	movs	r3, #0
 801a918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a91a:	e19c      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801a91c:	2300      	movs	r3, #0
 801a91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a920:	e199      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801a922:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a926:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 801a92a:	430b      	orrs	r3, r1
 801a92c:	d173      	bne.n	801aa16 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801a92e:	4b57      	ldr	r3, [pc, #348]	@ (801aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801a930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a932:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801a936:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801a938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a93a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801a93e:	d02f      	beq.n	801a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 801a940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a942:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801a946:	d863      	bhi.n	801aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 801a948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	d004      	beq.n	801a958 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 801a94e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a954:	d012      	beq.n	801a97c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 801a956:	e05b      	b.n	801aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801a958:	4b4c      	ldr	r3, [pc, #304]	@ (801aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801a960:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801a964:	d107      	bne.n	801a976 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801a966:	f107 0318 	add.w	r3, r7, #24
 801a96a:	4618      	mov	r0, r3
 801a96c:	f000 f996 	bl	801ac9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801a970:	69bb      	ldr	r3, [r7, #24]
 801a972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801a974:	e16f      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801a976:	2300      	movs	r3, #0
 801a978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a97a:	e16c      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801a97c:	4b43      	ldr	r3, [pc, #268]	@ (801aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801a984:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801a988:	d107      	bne.n	801a99a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801a98a:	f107 030c 	add.w	r3, r7, #12
 801a98e:	4618      	mov	r0, r3
 801a990:	f000 fad8 	bl	801af44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801a994:	697b      	ldr	r3, [r7, #20]
 801a996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801a998:	e15d      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801a99a:	2300      	movs	r3, #0
 801a99c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a99e:	e15a      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801a9a0:	4b3a      	ldr	r3, [pc, #232]	@ (801aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801a9a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a9a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801a9a8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801a9aa:	4b38      	ldr	r3, [pc, #224]	@ (801aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801a9ac:	681b      	ldr	r3, [r3, #0]
 801a9ae:	f003 0304 	and.w	r3, r3, #4
 801a9b2:	2b04      	cmp	r3, #4
 801a9b4:	d10c      	bne.n	801a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 801a9b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	d109      	bne.n	801a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801a9bc:	4b33      	ldr	r3, [pc, #204]	@ (801aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801a9be:	681b      	ldr	r3, [r3, #0]
 801a9c0:	08db      	lsrs	r3, r3, #3
 801a9c2:	f003 0303 	and.w	r3, r3, #3
 801a9c6:	4a32      	ldr	r2, [pc, #200]	@ (801aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 801a9c8:	fa22 f303 	lsr.w	r3, r2, r3
 801a9cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a9ce:	e01e      	b.n	801aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801a9d0:	4b2e      	ldr	r3, [pc, #184]	@ (801aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801a9d2:	681b      	ldr	r3, [r3, #0]
 801a9d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a9d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a9dc:	d106      	bne.n	801a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 801a9de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a9e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a9e4:	d102      	bne.n	801a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801a9e6:	4b2b      	ldr	r3, [pc, #172]	@ (801aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 801a9e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a9ea:	e010      	b.n	801aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801a9ec:	4b27      	ldr	r3, [pc, #156]	@ (801aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801a9ee:	681b      	ldr	r3, [r3, #0]
 801a9f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801a9f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801a9f8:	d106      	bne.n	801aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 801a9fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a9fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801aa00:	d102      	bne.n	801aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801aa02:	4b25      	ldr	r3, [pc, #148]	@ (801aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 801aa04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801aa06:	e002      	b.n	801aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801aa08:	2300      	movs	r3, #0
 801aa0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801aa0c:	e123      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801aa0e:	e122      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801aa10:	2300      	movs	r3, #0
 801aa12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801aa14:	e11f      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801aa16:	e9d7 2300 	ldrd	r2, r3, [r7]
 801aa1a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 801aa1e:	430b      	orrs	r3, r1
 801aa20:	d13c      	bne.n	801aa9c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 801aa22:	4b1a      	ldr	r3, [pc, #104]	@ (801aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801aa24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801aa26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801aa2a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801aa2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	d004      	beq.n	801aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 801aa32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aa34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801aa38:	d012      	beq.n	801aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 801aa3a:	e023      	b.n	801aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801aa3c:	4b13      	ldr	r3, [pc, #76]	@ (801aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801aa3e:	681b      	ldr	r3, [r3, #0]
 801aa40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801aa44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801aa48:	d107      	bne.n	801aa5a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801aa4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801aa4e:	4618      	mov	r0, r3
 801aa50:	f000 fbcc 	bl	801b1ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801aa54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aa56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801aa58:	e0fd      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801aa5a:	2300      	movs	r3, #0
 801aa5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801aa5e:	e0fa      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801aa60:	4b0a      	ldr	r3, [pc, #40]	@ (801aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801aa62:	681b      	ldr	r3, [r3, #0]
 801aa64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801aa68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801aa6c:	d107      	bne.n	801aa7e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801aa6e:	f107 0318 	add.w	r3, r7, #24
 801aa72:	4618      	mov	r0, r3
 801aa74:	f000 f912 	bl	801ac9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801aa78:	6a3b      	ldr	r3, [r7, #32]
 801aa7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801aa7c:	e0eb      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801aa7e:	2300      	movs	r3, #0
 801aa80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801aa82:	e0e8      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801aa84:	2300      	movs	r3, #0
 801aa86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801aa88:	e0e5      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801aa8a:	bf00      	nop
 801aa8c:	58024400 	.word	0x58024400
 801aa90:	03d09000 	.word	0x03d09000
 801aa94:	003d0900 	.word	0x003d0900
 801aa98:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801aa9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801aaa0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 801aaa4:	430b      	orrs	r3, r1
 801aaa6:	f040 8085 	bne.w	801abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801aaaa:	4b6d      	ldr	r3, [pc, #436]	@ (801ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801aaac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801aaae:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 801aab2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801aab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aab6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801aaba:	d06b      	beq.n	801ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 801aabc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aabe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801aac2:	d874      	bhi.n	801abae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801aac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801aaca:	d056      	beq.n	801ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 801aacc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801aad2:	d86c      	bhi.n	801abae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801aad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aad6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801aada:	d03b      	beq.n	801ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 801aadc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aade:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801aae2:	d864      	bhi.n	801abae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801aae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aae6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801aaea:	d021      	beq.n	801ab30 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 801aaec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aaee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801aaf2:	d85c      	bhi.n	801abae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801aaf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aaf6:	2b00      	cmp	r3, #0
 801aaf8:	d004      	beq.n	801ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 801aafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aafc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ab00:	d004      	beq.n	801ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 801ab02:	e054      	b.n	801abae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 801ab04:	f000 f8b4 	bl	801ac70 <HAL_RCCEx_GetD3PCLK1Freq>
 801ab08:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801ab0a:	e0a4      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801ab0c:	4b54      	ldr	r3, [pc, #336]	@ (801ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801ab0e:	681b      	ldr	r3, [r3, #0]
 801ab10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801ab14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801ab18:	d107      	bne.n	801ab2a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801ab1a:	f107 0318 	add.w	r3, r7, #24
 801ab1e:	4618      	mov	r0, r3
 801ab20:	f000 f8bc 	bl	801ac9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801ab24:	69fb      	ldr	r3, [r7, #28]
 801ab26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801ab28:	e095      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801ab2a:	2300      	movs	r3, #0
 801ab2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ab2e:	e092      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801ab30:	4b4b      	ldr	r3, [pc, #300]	@ (801ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801ab32:	681b      	ldr	r3, [r3, #0]
 801ab34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801ab38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ab3c:	d107      	bne.n	801ab4e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801ab3e:	f107 030c 	add.w	r3, r7, #12
 801ab42:	4618      	mov	r0, r3
 801ab44:	f000 f9fe 	bl	801af44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801ab48:	693b      	ldr	r3, [r7, #16]
 801ab4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801ab4c:	e083      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801ab4e:	2300      	movs	r3, #0
 801ab50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ab52:	e080      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801ab54:	4b42      	ldr	r3, [pc, #264]	@ (801ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801ab56:	681b      	ldr	r3, [r3, #0]
 801ab58:	f003 0304 	and.w	r3, r3, #4
 801ab5c:	2b04      	cmp	r3, #4
 801ab5e:	d109      	bne.n	801ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ab60:	4b3f      	ldr	r3, [pc, #252]	@ (801ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	08db      	lsrs	r3, r3, #3
 801ab66:	f003 0303 	and.w	r3, r3, #3
 801ab6a:	4a3e      	ldr	r2, [pc, #248]	@ (801ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 801ab6c:	fa22 f303 	lsr.w	r3, r2, r3
 801ab70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801ab72:	e070      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801ab74:	2300      	movs	r3, #0
 801ab76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ab78:	e06d      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801ab7a:	4b39      	ldr	r3, [pc, #228]	@ (801ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801ab7c:	681b      	ldr	r3, [r3, #0]
 801ab7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ab82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ab86:	d102      	bne.n	801ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 801ab88:	4b37      	ldr	r3, [pc, #220]	@ (801ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 801ab8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801ab8c:	e063      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801ab8e:	2300      	movs	r3, #0
 801ab90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ab92:	e060      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801ab94:	4b32      	ldr	r3, [pc, #200]	@ (801ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801ab96:	681b      	ldr	r3, [r3, #0]
 801ab98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ab9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801aba0:	d102      	bne.n	801aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 801aba2:	4b32      	ldr	r3, [pc, #200]	@ (801ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 801aba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801aba6:	e056      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801aba8:	2300      	movs	r3, #0
 801abaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801abac:	e053      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801abae:	2300      	movs	r3, #0
 801abb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801abb2:	e050      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 801abb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801abb8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 801abbc:	430b      	orrs	r3, r1
 801abbe:	d148      	bne.n	801ac52 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 801abc0:	4b27      	ldr	r3, [pc, #156]	@ (801ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801abc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801abc4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801abc8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801abca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801abd0:	d02a      	beq.n	801ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 801abd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801abd8:	d838      	bhi.n	801ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 801abda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abdc:	2b00      	cmp	r3, #0
 801abde:	d004      	beq.n	801abea <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 801abe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abe2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801abe6:	d00d      	beq.n	801ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 801abe8:	e030      	b.n	801ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801abea:	4b1d      	ldr	r3, [pc, #116]	@ (801ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801abf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801abf6:	d102      	bne.n	801abfe <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 801abf8:	4b1c      	ldr	r3, [pc, #112]	@ (801ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 801abfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801abfc:	e02b      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801abfe:	2300      	movs	r3, #0
 801ac00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ac02:	e028      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801ac04:	4b16      	ldr	r3, [pc, #88]	@ (801ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801ac06:	681b      	ldr	r3, [r3, #0]
 801ac08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801ac0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801ac10:	d107      	bne.n	801ac22 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801ac12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801ac16:	4618      	mov	r0, r3
 801ac18:	f000 fae8 	bl	801b1ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801ac1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ac1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801ac20:	e019      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801ac22:	2300      	movs	r3, #0
 801ac24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ac26:	e016      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801ac28:	4b0d      	ldr	r3, [pc, #52]	@ (801ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801ac30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801ac34:	d107      	bne.n	801ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801ac36:	f107 0318 	add.w	r3, r7, #24
 801ac3a:	4618      	mov	r0, r3
 801ac3c:	f000 f82e 	bl	801ac9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801ac40:	69fb      	ldr	r3, [r7, #28]
 801ac42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801ac44:	e007      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801ac46:	2300      	movs	r3, #0
 801ac48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ac4a:	e004      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801ac4c:	2300      	movs	r3, #0
 801ac4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ac50:	e001      	b.n	801ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 801ac52:	2300      	movs	r3, #0
 801ac54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 801ac56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801ac58:	4618      	mov	r0, r3
 801ac5a:	3740      	adds	r7, #64	@ 0x40
 801ac5c:	46bd      	mov	sp, r7
 801ac5e:	bd80      	pop	{r7, pc}
 801ac60:	58024400 	.word	0x58024400
 801ac64:	03d09000 	.word	0x03d09000
 801ac68:	003d0900 	.word	0x003d0900
 801ac6c:	017d7840 	.word	0x017d7840

0801ac70 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801ac70:	b580      	push	{r7, lr}
 801ac72:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801ac74:	f7fe f902 	bl	8018e7c <HAL_RCC_GetHCLKFreq>
 801ac78:	4602      	mov	r2, r0
 801ac7a:	4b06      	ldr	r3, [pc, #24]	@ (801ac94 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801ac7c:	6a1b      	ldr	r3, [r3, #32]
 801ac7e:	091b      	lsrs	r3, r3, #4
 801ac80:	f003 0307 	and.w	r3, r3, #7
 801ac84:	4904      	ldr	r1, [pc, #16]	@ (801ac98 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801ac86:	5ccb      	ldrb	r3, [r1, r3]
 801ac88:	f003 031f 	and.w	r3, r3, #31
 801ac8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801ac90:	4618      	mov	r0, r3
 801ac92:	bd80      	pop	{r7, pc}
 801ac94:	58024400 	.word	0x58024400
 801ac98:	08044f94 	.word	0x08044f94

0801ac9c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801ac9c:	b480      	push	{r7}
 801ac9e:	b089      	sub	sp, #36	@ 0x24
 801aca0:	af00      	add	r7, sp, #0
 801aca2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801aca4:	4ba1      	ldr	r3, [pc, #644]	@ (801af2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801aca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aca8:	f003 0303 	and.w	r3, r3, #3
 801acac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801acae:	4b9f      	ldr	r3, [pc, #636]	@ (801af2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801acb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801acb2:	0b1b      	lsrs	r3, r3, #12
 801acb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801acb8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801acba:	4b9c      	ldr	r3, [pc, #624]	@ (801af2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801acbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801acbe:	091b      	lsrs	r3, r3, #4
 801acc0:	f003 0301 	and.w	r3, r3, #1
 801acc4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801acc6:	4b99      	ldr	r3, [pc, #612]	@ (801af2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801acc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801acca:	08db      	lsrs	r3, r3, #3
 801accc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801acd0:	693a      	ldr	r2, [r7, #16]
 801acd2:	fb02 f303 	mul.w	r3, r2, r3
 801acd6:	ee07 3a90 	vmov	s15, r3
 801acda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801acde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801ace2:	697b      	ldr	r3, [r7, #20]
 801ace4:	2b00      	cmp	r3, #0
 801ace6:	f000 8111 	beq.w	801af0c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801acea:	69bb      	ldr	r3, [r7, #24]
 801acec:	2b02      	cmp	r3, #2
 801acee:	f000 8083 	beq.w	801adf8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801acf2:	69bb      	ldr	r3, [r7, #24]
 801acf4:	2b02      	cmp	r3, #2
 801acf6:	f200 80a1 	bhi.w	801ae3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801acfa:	69bb      	ldr	r3, [r7, #24]
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d003      	beq.n	801ad08 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801ad00:	69bb      	ldr	r3, [r7, #24]
 801ad02:	2b01      	cmp	r3, #1
 801ad04:	d056      	beq.n	801adb4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801ad06:	e099      	b.n	801ae3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801ad08:	4b88      	ldr	r3, [pc, #544]	@ (801af2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ad0a:	681b      	ldr	r3, [r3, #0]
 801ad0c:	f003 0320 	and.w	r3, r3, #32
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	d02d      	beq.n	801ad70 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ad14:	4b85      	ldr	r3, [pc, #532]	@ (801af2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ad16:	681b      	ldr	r3, [r3, #0]
 801ad18:	08db      	lsrs	r3, r3, #3
 801ad1a:	f003 0303 	and.w	r3, r3, #3
 801ad1e:	4a84      	ldr	r2, [pc, #528]	@ (801af30 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801ad20:	fa22 f303 	lsr.w	r3, r2, r3
 801ad24:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801ad26:	68bb      	ldr	r3, [r7, #8]
 801ad28:	ee07 3a90 	vmov	s15, r3
 801ad2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ad30:	697b      	ldr	r3, [r7, #20]
 801ad32:	ee07 3a90 	vmov	s15, r3
 801ad36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ad3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ad3e:	4b7b      	ldr	r3, [pc, #492]	@ (801af2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ad40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ad42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ad46:	ee07 3a90 	vmov	s15, r3
 801ad4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ad4e:	ed97 6a03 	vldr	s12, [r7, #12]
 801ad52:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801af34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801ad56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ad5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ad5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ad62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ad66:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ad6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801ad6e:	e087      	b.n	801ae80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801ad70:	697b      	ldr	r3, [r7, #20]
 801ad72:	ee07 3a90 	vmov	s15, r3
 801ad76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ad7a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801af38 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801ad7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ad82:	4b6a      	ldr	r3, [pc, #424]	@ (801af2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ad84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ad86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ad8a:	ee07 3a90 	vmov	s15, r3
 801ad8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ad92:	ed97 6a03 	vldr	s12, [r7, #12]
 801ad96:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801af34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801ad9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ad9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ada2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ada6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801adaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801adae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801adb2:	e065      	b.n	801ae80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801adb4:	697b      	ldr	r3, [r7, #20]
 801adb6:	ee07 3a90 	vmov	s15, r3
 801adba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801adbe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801af3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801adc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801adc6:	4b59      	ldr	r3, [pc, #356]	@ (801af2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801adc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801adca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801adce:	ee07 3a90 	vmov	s15, r3
 801add2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801add6:	ed97 6a03 	vldr	s12, [r7, #12]
 801adda:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801af34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801adde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ade2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ade6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801adea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801adee:	ee67 7a27 	vmul.f32	s15, s14, s15
 801adf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801adf6:	e043      	b.n	801ae80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801adf8:	697b      	ldr	r3, [r7, #20]
 801adfa:	ee07 3a90 	vmov	s15, r3
 801adfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ae02:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801af40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801ae06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ae0a:	4b48      	ldr	r3, [pc, #288]	@ (801af2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ae0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ae0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ae12:	ee07 3a90 	vmov	s15, r3
 801ae16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ae1a:	ed97 6a03 	vldr	s12, [r7, #12]
 801ae1e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801af34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801ae22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ae26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ae2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ae2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ae32:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ae36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ae3a:	e021      	b.n	801ae80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801ae3c:	697b      	ldr	r3, [r7, #20]
 801ae3e:	ee07 3a90 	vmov	s15, r3
 801ae42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ae46:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801af3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801ae4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ae4e:	4b37      	ldr	r3, [pc, #220]	@ (801af2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ae50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ae52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ae56:	ee07 3a90 	vmov	s15, r3
 801ae5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ae5e:	ed97 6a03 	vldr	s12, [r7, #12]
 801ae62:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801af34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801ae66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ae6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ae6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ae72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ae76:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ae7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ae7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801ae80:	4b2a      	ldr	r3, [pc, #168]	@ (801af2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ae82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ae84:	0a5b      	lsrs	r3, r3, #9
 801ae86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ae8a:	ee07 3a90 	vmov	s15, r3
 801ae8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ae92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ae96:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ae9a:	edd7 6a07 	vldr	s13, [r7, #28]
 801ae9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801aea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801aea6:	ee17 2a90 	vmov	r2, s15
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801aeae:	4b1f      	ldr	r3, [pc, #124]	@ (801af2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801aeb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801aeb2:	0c1b      	lsrs	r3, r3, #16
 801aeb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801aeb8:	ee07 3a90 	vmov	s15, r3
 801aebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801aec0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801aec4:	ee37 7a87 	vadd.f32	s14, s15, s14
 801aec8:	edd7 6a07 	vldr	s13, [r7, #28]
 801aecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801aed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801aed4:	ee17 2a90 	vmov	r2, s15
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801aedc:	4b13      	ldr	r3, [pc, #76]	@ (801af2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801aede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801aee0:	0e1b      	lsrs	r3, r3, #24
 801aee2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801aee6:	ee07 3a90 	vmov	s15, r3
 801aeea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801aeee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801aef2:	ee37 7a87 	vadd.f32	s14, s15, s14
 801aef6:	edd7 6a07 	vldr	s13, [r7, #28]
 801aefa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801aefe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801af02:	ee17 2a90 	vmov	r2, s15
 801af06:	687b      	ldr	r3, [r7, #4]
 801af08:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801af0a:	e008      	b.n	801af1e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	2200      	movs	r2, #0
 801af10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	2200      	movs	r2, #0
 801af16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801af18:	687b      	ldr	r3, [r7, #4]
 801af1a:	2200      	movs	r2, #0
 801af1c:	609a      	str	r2, [r3, #8]
}
 801af1e:	bf00      	nop
 801af20:	3724      	adds	r7, #36	@ 0x24
 801af22:	46bd      	mov	sp, r7
 801af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af28:	4770      	bx	lr
 801af2a:	bf00      	nop
 801af2c:	58024400 	.word	0x58024400
 801af30:	03d09000 	.word	0x03d09000
 801af34:	46000000 	.word	0x46000000
 801af38:	4c742400 	.word	0x4c742400
 801af3c:	4a742400 	.word	0x4a742400
 801af40:	4bbebc20 	.word	0x4bbebc20

0801af44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801af44:	b480      	push	{r7}
 801af46:	b089      	sub	sp, #36	@ 0x24
 801af48:	af00      	add	r7, sp, #0
 801af4a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801af4c:	4ba1      	ldr	r3, [pc, #644]	@ (801b1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801af4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801af50:	f003 0303 	and.w	r3, r3, #3
 801af54:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801af56:	4b9f      	ldr	r3, [pc, #636]	@ (801b1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801af58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801af5a:	0d1b      	lsrs	r3, r3, #20
 801af5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801af60:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801af62:	4b9c      	ldr	r3, [pc, #624]	@ (801b1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801af64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801af66:	0a1b      	lsrs	r3, r3, #8
 801af68:	f003 0301 	and.w	r3, r3, #1
 801af6c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801af6e:	4b99      	ldr	r3, [pc, #612]	@ (801b1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801af70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801af72:	08db      	lsrs	r3, r3, #3
 801af74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801af78:	693a      	ldr	r2, [r7, #16]
 801af7a:	fb02 f303 	mul.w	r3, r2, r3
 801af7e:	ee07 3a90 	vmov	s15, r3
 801af82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801af86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801af8a:	697b      	ldr	r3, [r7, #20]
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	f000 8111 	beq.w	801b1b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801af92:	69bb      	ldr	r3, [r7, #24]
 801af94:	2b02      	cmp	r3, #2
 801af96:	f000 8083 	beq.w	801b0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801af9a:	69bb      	ldr	r3, [r7, #24]
 801af9c:	2b02      	cmp	r3, #2
 801af9e:	f200 80a1 	bhi.w	801b0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801afa2:	69bb      	ldr	r3, [r7, #24]
 801afa4:	2b00      	cmp	r3, #0
 801afa6:	d003      	beq.n	801afb0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801afa8:	69bb      	ldr	r3, [r7, #24]
 801afaa:	2b01      	cmp	r3, #1
 801afac:	d056      	beq.n	801b05c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801afae:	e099      	b.n	801b0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801afb0:	4b88      	ldr	r3, [pc, #544]	@ (801b1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801afb2:	681b      	ldr	r3, [r3, #0]
 801afb4:	f003 0320 	and.w	r3, r3, #32
 801afb8:	2b00      	cmp	r3, #0
 801afba:	d02d      	beq.n	801b018 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801afbc:	4b85      	ldr	r3, [pc, #532]	@ (801b1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801afbe:	681b      	ldr	r3, [r3, #0]
 801afc0:	08db      	lsrs	r3, r3, #3
 801afc2:	f003 0303 	and.w	r3, r3, #3
 801afc6:	4a84      	ldr	r2, [pc, #528]	@ (801b1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801afc8:	fa22 f303 	lsr.w	r3, r2, r3
 801afcc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801afce:	68bb      	ldr	r3, [r7, #8]
 801afd0:	ee07 3a90 	vmov	s15, r3
 801afd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801afd8:	697b      	ldr	r3, [r7, #20]
 801afda:	ee07 3a90 	vmov	s15, r3
 801afde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801afe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801afe6:	4b7b      	ldr	r3, [pc, #492]	@ (801b1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801afe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801afea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801afee:	ee07 3a90 	vmov	s15, r3
 801aff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801aff6:	ed97 6a03 	vldr	s12, [r7, #12]
 801affa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801b1dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801affe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801b002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b00a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b00e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b012:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801b016:	e087      	b.n	801b128 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801b018:	697b      	ldr	r3, [r7, #20]
 801b01a:	ee07 3a90 	vmov	s15, r3
 801b01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b022:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801b1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801b026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b02a:	4b6a      	ldr	r3, [pc, #424]	@ (801b1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801b02c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b02e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b032:	ee07 3a90 	vmov	s15, r3
 801b036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b03a:	ed97 6a03 	vldr	s12, [r7, #12]
 801b03e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801b1dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801b042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801b046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b04a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b04e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b052:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801b05a:	e065      	b.n	801b128 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801b05c:	697b      	ldr	r3, [r7, #20]
 801b05e:	ee07 3a90 	vmov	s15, r3
 801b062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b066:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801b1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801b06a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b06e:	4b59      	ldr	r3, [pc, #356]	@ (801b1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801b070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b076:	ee07 3a90 	vmov	s15, r3
 801b07a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b07e:	ed97 6a03 	vldr	s12, [r7, #12]
 801b082:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801b1dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801b086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801b08a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b08e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b096:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b09a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801b09e:	e043      	b.n	801b128 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801b0a0:	697b      	ldr	r3, [r7, #20]
 801b0a2:	ee07 3a90 	vmov	s15, r3
 801b0a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b0aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801b1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801b0ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b0b2:	4b48      	ldr	r3, [pc, #288]	@ (801b1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801b0b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b0b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b0ba:	ee07 3a90 	vmov	s15, r3
 801b0be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b0c2:	ed97 6a03 	vldr	s12, [r7, #12]
 801b0c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801b1dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801b0ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801b0ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b0d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b0d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b0da:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b0de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801b0e2:	e021      	b.n	801b128 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801b0e4:	697b      	ldr	r3, [r7, #20]
 801b0e6:	ee07 3a90 	vmov	s15, r3
 801b0ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b0ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801b1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801b0f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b0f6:	4b37      	ldr	r3, [pc, #220]	@ (801b1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801b0f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b0fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b0fe:	ee07 3a90 	vmov	s15, r3
 801b102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b106:	ed97 6a03 	vldr	s12, [r7, #12]
 801b10a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801b1dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801b10e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801b112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b116:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b11a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b11e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b122:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801b126:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801b128:	4b2a      	ldr	r3, [pc, #168]	@ (801b1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801b12a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b12c:	0a5b      	lsrs	r3, r3, #9
 801b12e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b132:	ee07 3a90 	vmov	s15, r3
 801b136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b13a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b13e:	ee37 7a87 	vadd.f32	s14, s15, s14
 801b142:	edd7 6a07 	vldr	s13, [r7, #28]
 801b146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b14a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b14e:	ee17 2a90 	vmov	r2, s15
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801b156:	4b1f      	ldr	r3, [pc, #124]	@ (801b1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801b158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b15a:	0c1b      	lsrs	r3, r3, #16
 801b15c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b160:	ee07 3a90 	vmov	s15, r3
 801b164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b168:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b16c:	ee37 7a87 	vadd.f32	s14, s15, s14
 801b170:	edd7 6a07 	vldr	s13, [r7, #28]
 801b174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b17c:	ee17 2a90 	vmov	r2, s15
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801b184:	4b13      	ldr	r3, [pc, #76]	@ (801b1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801b186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b188:	0e1b      	lsrs	r3, r3, #24
 801b18a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b18e:	ee07 3a90 	vmov	s15, r3
 801b192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b196:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b19a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801b19e:	edd7 6a07 	vldr	s13, [r7, #28]
 801b1a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b1a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b1aa:	ee17 2a90 	vmov	r2, s15
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801b1b2:	e008      	b.n	801b1c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	2200      	movs	r2, #0
 801b1b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	2200      	movs	r2, #0
 801b1be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	2200      	movs	r2, #0
 801b1c4:	609a      	str	r2, [r3, #8]
}
 801b1c6:	bf00      	nop
 801b1c8:	3724      	adds	r7, #36	@ 0x24
 801b1ca:	46bd      	mov	sp, r7
 801b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1d0:	4770      	bx	lr
 801b1d2:	bf00      	nop
 801b1d4:	58024400 	.word	0x58024400
 801b1d8:	03d09000 	.word	0x03d09000
 801b1dc:	46000000 	.word	0x46000000
 801b1e0:	4c742400 	.word	0x4c742400
 801b1e4:	4a742400 	.word	0x4a742400
 801b1e8:	4bbebc20 	.word	0x4bbebc20

0801b1ec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801b1ec:	b480      	push	{r7}
 801b1ee:	b089      	sub	sp, #36	@ 0x24
 801b1f0:	af00      	add	r7, sp, #0
 801b1f2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801b1f4:	4ba0      	ldr	r3, [pc, #640]	@ (801b478 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801b1f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b1f8:	f003 0303 	and.w	r3, r3, #3
 801b1fc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801b1fe:	4b9e      	ldr	r3, [pc, #632]	@ (801b478 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801b200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b202:	091b      	lsrs	r3, r3, #4
 801b204:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b208:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801b20a:	4b9b      	ldr	r3, [pc, #620]	@ (801b478 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801b20c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b20e:	f003 0301 	and.w	r3, r3, #1
 801b212:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801b214:	4b98      	ldr	r3, [pc, #608]	@ (801b478 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801b216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b218:	08db      	lsrs	r3, r3, #3
 801b21a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b21e:	693a      	ldr	r2, [r7, #16]
 801b220:	fb02 f303 	mul.w	r3, r2, r3
 801b224:	ee07 3a90 	vmov	s15, r3
 801b228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b22c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801b230:	697b      	ldr	r3, [r7, #20]
 801b232:	2b00      	cmp	r3, #0
 801b234:	f000 8111 	beq.w	801b45a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801b238:	69bb      	ldr	r3, [r7, #24]
 801b23a:	2b02      	cmp	r3, #2
 801b23c:	f000 8083 	beq.w	801b346 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801b240:	69bb      	ldr	r3, [r7, #24]
 801b242:	2b02      	cmp	r3, #2
 801b244:	f200 80a1 	bhi.w	801b38a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801b248:	69bb      	ldr	r3, [r7, #24]
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	d003      	beq.n	801b256 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801b24e:	69bb      	ldr	r3, [r7, #24]
 801b250:	2b01      	cmp	r3, #1
 801b252:	d056      	beq.n	801b302 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 801b254:	e099      	b.n	801b38a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801b256:	4b88      	ldr	r3, [pc, #544]	@ (801b478 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	f003 0320 	and.w	r3, r3, #32
 801b25e:	2b00      	cmp	r3, #0
 801b260:	d02d      	beq.n	801b2be <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801b262:	4b85      	ldr	r3, [pc, #532]	@ (801b478 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801b264:	681b      	ldr	r3, [r3, #0]
 801b266:	08db      	lsrs	r3, r3, #3
 801b268:	f003 0303 	and.w	r3, r3, #3
 801b26c:	4a83      	ldr	r2, [pc, #524]	@ (801b47c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801b26e:	fa22 f303 	lsr.w	r3, r2, r3
 801b272:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801b274:	68bb      	ldr	r3, [r7, #8]
 801b276:	ee07 3a90 	vmov	s15, r3
 801b27a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b27e:	697b      	ldr	r3, [r7, #20]
 801b280:	ee07 3a90 	vmov	s15, r3
 801b284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b288:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b28c:	4b7a      	ldr	r3, [pc, #488]	@ (801b478 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801b28e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b294:	ee07 3a90 	vmov	s15, r3
 801b298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b29c:	ed97 6a03 	vldr	s12, [r7, #12]
 801b2a0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 801b480 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801b2a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801b2a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b2ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b2b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b2b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b2b8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801b2bc:	e087      	b.n	801b3ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801b2be:	697b      	ldr	r3, [r7, #20]
 801b2c0:	ee07 3a90 	vmov	s15, r3
 801b2c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b2c8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 801b484 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801b2cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b2d0:	4b69      	ldr	r3, [pc, #420]	@ (801b478 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801b2d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b2d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b2d8:	ee07 3a90 	vmov	s15, r3
 801b2dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b2e0:	ed97 6a03 	vldr	s12, [r7, #12]
 801b2e4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 801b480 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801b2e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801b2ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b2f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b2f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b2f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b2fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801b300:	e065      	b.n	801b3ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801b302:	697b      	ldr	r3, [r7, #20]
 801b304:	ee07 3a90 	vmov	s15, r3
 801b308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b30c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 801b488 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801b310:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b314:	4b58      	ldr	r3, [pc, #352]	@ (801b478 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801b316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b31c:	ee07 3a90 	vmov	s15, r3
 801b320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b324:	ed97 6a03 	vldr	s12, [r7, #12]
 801b328:	eddf 5a55 	vldr	s11, [pc, #340]	@ 801b480 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801b32c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801b330:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b334:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b338:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b33c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b340:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801b344:	e043      	b.n	801b3ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801b346:	697b      	ldr	r3, [r7, #20]
 801b348:	ee07 3a90 	vmov	s15, r3
 801b34c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b350:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 801b48c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 801b354:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b358:	4b47      	ldr	r3, [pc, #284]	@ (801b478 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801b35a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b35c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b360:	ee07 3a90 	vmov	s15, r3
 801b364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b368:	ed97 6a03 	vldr	s12, [r7, #12]
 801b36c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 801b480 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801b370:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801b374:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b378:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b37c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b380:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b384:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801b388:	e021      	b.n	801b3ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801b38a:	697b      	ldr	r3, [r7, #20]
 801b38c:	ee07 3a90 	vmov	s15, r3
 801b390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b394:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801b484 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801b398:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b39c:	4b36      	ldr	r3, [pc, #216]	@ (801b478 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801b39e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b3a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b3a4:	ee07 3a90 	vmov	s15, r3
 801b3a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b3ac:	ed97 6a03 	vldr	s12, [r7, #12]
 801b3b0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801b480 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801b3b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801b3b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b3bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b3c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b3c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b3c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801b3cc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801b3ce:	4b2a      	ldr	r3, [pc, #168]	@ (801b478 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801b3d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b3d2:	0a5b      	lsrs	r3, r3, #9
 801b3d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b3d8:	ee07 3a90 	vmov	s15, r3
 801b3dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b3e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b3e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 801b3e8:	edd7 6a07 	vldr	s13, [r7, #28]
 801b3ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b3f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b3f4:	ee17 2a90 	vmov	r2, s15
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 801b3fc:	4b1e      	ldr	r3, [pc, #120]	@ (801b478 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801b3fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b400:	0c1b      	lsrs	r3, r3, #16
 801b402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b406:	ee07 3a90 	vmov	s15, r3
 801b40a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b40e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b412:	ee37 7a87 	vadd.f32	s14, s15, s14
 801b416:	edd7 6a07 	vldr	s13, [r7, #28]
 801b41a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b41e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b422:	ee17 2a90 	vmov	r2, s15
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801b42a:	4b13      	ldr	r3, [pc, #76]	@ (801b478 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801b42c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b42e:	0e1b      	lsrs	r3, r3, #24
 801b430:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b434:	ee07 3a90 	vmov	s15, r3
 801b438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b43c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b440:	ee37 7a87 	vadd.f32	s14, s15, s14
 801b444:	edd7 6a07 	vldr	s13, [r7, #28]
 801b448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b44c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b450:	ee17 2a90 	vmov	r2, s15
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801b458:	e008      	b.n	801b46c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	2200      	movs	r2, #0
 801b45e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	2200      	movs	r2, #0
 801b464:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	2200      	movs	r2, #0
 801b46a:	609a      	str	r2, [r3, #8]
}
 801b46c:	bf00      	nop
 801b46e:	3724      	adds	r7, #36	@ 0x24
 801b470:	46bd      	mov	sp, r7
 801b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b476:	4770      	bx	lr
 801b478:	58024400 	.word	0x58024400
 801b47c:	03d09000 	.word	0x03d09000
 801b480:	46000000 	.word	0x46000000
 801b484:	4c742400 	.word	0x4c742400
 801b488:	4a742400 	.word	0x4a742400
 801b48c:	4bbebc20 	.word	0x4bbebc20

0801b490 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801b490:	b580      	push	{r7, lr}
 801b492:	b084      	sub	sp, #16
 801b494:	af00      	add	r7, sp, #0
 801b496:	6078      	str	r0, [r7, #4]
 801b498:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801b49a:	2300      	movs	r3, #0
 801b49c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801b49e:	4b53      	ldr	r3, [pc, #332]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b4a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b4a2:	f003 0303 	and.w	r3, r3, #3
 801b4a6:	2b03      	cmp	r3, #3
 801b4a8:	d101      	bne.n	801b4ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801b4aa:	2301      	movs	r3, #1
 801b4ac:	e099      	b.n	801b5e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801b4ae:	4b4f      	ldr	r3, [pc, #316]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b4b0:	681b      	ldr	r3, [r3, #0]
 801b4b2:	4a4e      	ldr	r2, [pc, #312]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b4b4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801b4b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b4ba:	f7f5 ff1b 	bl	80112f4 <HAL_GetTick>
 801b4be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801b4c0:	e008      	b.n	801b4d4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801b4c2:	f7f5 ff17 	bl	80112f4 <HAL_GetTick>
 801b4c6:	4602      	mov	r2, r0
 801b4c8:	68bb      	ldr	r3, [r7, #8]
 801b4ca:	1ad3      	subs	r3, r2, r3
 801b4cc:	2b02      	cmp	r3, #2
 801b4ce:	d901      	bls.n	801b4d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801b4d0:	2303      	movs	r3, #3
 801b4d2:	e086      	b.n	801b5e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801b4d4:	4b45      	ldr	r3, [pc, #276]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b4d6:	681b      	ldr	r3, [r3, #0]
 801b4d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	d1f0      	bne.n	801b4c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801b4e0:	4b42      	ldr	r3, [pc, #264]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b4e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b4e4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801b4e8:	687b      	ldr	r3, [r7, #4]
 801b4ea:	681b      	ldr	r3, [r3, #0]
 801b4ec:	031b      	lsls	r3, r3, #12
 801b4ee:	493f      	ldr	r1, [pc, #252]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b4f0:	4313      	orrs	r3, r2
 801b4f2:	628b      	str	r3, [r1, #40]	@ 0x28
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	685b      	ldr	r3, [r3, #4]
 801b4f8:	3b01      	subs	r3, #1
 801b4fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	689b      	ldr	r3, [r3, #8]
 801b502:	3b01      	subs	r3, #1
 801b504:	025b      	lsls	r3, r3, #9
 801b506:	b29b      	uxth	r3, r3
 801b508:	431a      	orrs	r2, r3
 801b50a:	687b      	ldr	r3, [r7, #4]
 801b50c:	68db      	ldr	r3, [r3, #12]
 801b50e:	3b01      	subs	r3, #1
 801b510:	041b      	lsls	r3, r3, #16
 801b512:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801b516:	431a      	orrs	r2, r3
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	691b      	ldr	r3, [r3, #16]
 801b51c:	3b01      	subs	r3, #1
 801b51e:	061b      	lsls	r3, r3, #24
 801b520:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801b524:	4931      	ldr	r1, [pc, #196]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b526:	4313      	orrs	r3, r2
 801b528:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801b52a:	4b30      	ldr	r3, [pc, #192]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b52c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b52e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	695b      	ldr	r3, [r3, #20]
 801b536:	492d      	ldr	r1, [pc, #180]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b538:	4313      	orrs	r3, r2
 801b53a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801b53c:	4b2b      	ldr	r3, [pc, #172]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b53e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b540:	f023 0220 	bic.w	r2, r3, #32
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	699b      	ldr	r3, [r3, #24]
 801b548:	4928      	ldr	r1, [pc, #160]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b54a:	4313      	orrs	r3, r2
 801b54c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801b54e:	4b27      	ldr	r3, [pc, #156]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b552:	4a26      	ldr	r2, [pc, #152]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b554:	f023 0310 	bic.w	r3, r3, #16
 801b558:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801b55a:	4b24      	ldr	r3, [pc, #144]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b55c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801b55e:	4b24      	ldr	r3, [pc, #144]	@ (801b5f0 <RCCEx_PLL2_Config+0x160>)
 801b560:	4013      	ands	r3, r2
 801b562:	687a      	ldr	r2, [r7, #4]
 801b564:	69d2      	ldr	r2, [r2, #28]
 801b566:	00d2      	lsls	r2, r2, #3
 801b568:	4920      	ldr	r1, [pc, #128]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b56a:	4313      	orrs	r3, r2
 801b56c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801b56e:	4b1f      	ldr	r3, [pc, #124]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b572:	4a1e      	ldr	r2, [pc, #120]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b574:	f043 0310 	orr.w	r3, r3, #16
 801b578:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801b57a:	683b      	ldr	r3, [r7, #0]
 801b57c:	2b00      	cmp	r3, #0
 801b57e:	d106      	bne.n	801b58e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801b580:	4b1a      	ldr	r3, [pc, #104]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b584:	4a19      	ldr	r2, [pc, #100]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b586:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801b58a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801b58c:	e00f      	b.n	801b5ae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801b58e:	683b      	ldr	r3, [r7, #0]
 801b590:	2b01      	cmp	r3, #1
 801b592:	d106      	bne.n	801b5a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801b594:	4b15      	ldr	r3, [pc, #84]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b598:	4a14      	ldr	r2, [pc, #80]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b59a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801b59e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801b5a0:	e005      	b.n	801b5ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801b5a2:	4b12      	ldr	r3, [pc, #72]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b5a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b5a6:	4a11      	ldr	r2, [pc, #68]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b5a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801b5ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801b5ae:	4b0f      	ldr	r3, [pc, #60]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b5b0:	681b      	ldr	r3, [r3, #0]
 801b5b2:	4a0e      	ldr	r2, [pc, #56]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b5b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801b5b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b5ba:	f7f5 fe9b 	bl	80112f4 <HAL_GetTick>
 801b5be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801b5c0:	e008      	b.n	801b5d4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801b5c2:	f7f5 fe97 	bl	80112f4 <HAL_GetTick>
 801b5c6:	4602      	mov	r2, r0
 801b5c8:	68bb      	ldr	r3, [r7, #8]
 801b5ca:	1ad3      	subs	r3, r2, r3
 801b5cc:	2b02      	cmp	r3, #2
 801b5ce:	d901      	bls.n	801b5d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801b5d0:	2303      	movs	r3, #3
 801b5d2:	e006      	b.n	801b5e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801b5d4:	4b05      	ldr	r3, [pc, #20]	@ (801b5ec <RCCEx_PLL2_Config+0x15c>)
 801b5d6:	681b      	ldr	r3, [r3, #0]
 801b5d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801b5dc:	2b00      	cmp	r3, #0
 801b5de:	d0f0      	beq.n	801b5c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801b5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 801b5e2:	4618      	mov	r0, r3
 801b5e4:	3710      	adds	r7, #16
 801b5e6:	46bd      	mov	sp, r7
 801b5e8:	bd80      	pop	{r7, pc}
 801b5ea:	bf00      	nop
 801b5ec:	58024400 	.word	0x58024400
 801b5f0:	ffff0007 	.word	0xffff0007

0801b5f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801b5f4:	b580      	push	{r7, lr}
 801b5f6:	b084      	sub	sp, #16
 801b5f8:	af00      	add	r7, sp, #0
 801b5fa:	6078      	str	r0, [r7, #4]
 801b5fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801b5fe:	2300      	movs	r3, #0
 801b600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801b602:	4b53      	ldr	r3, [pc, #332]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b606:	f003 0303 	and.w	r3, r3, #3
 801b60a:	2b03      	cmp	r3, #3
 801b60c:	d101      	bne.n	801b612 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801b60e:	2301      	movs	r3, #1
 801b610:	e099      	b.n	801b746 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801b612:	4b4f      	ldr	r3, [pc, #316]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b614:	681b      	ldr	r3, [r3, #0]
 801b616:	4a4e      	ldr	r2, [pc, #312]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b618:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801b61c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b61e:	f7f5 fe69 	bl	80112f4 <HAL_GetTick>
 801b622:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801b624:	e008      	b.n	801b638 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801b626:	f7f5 fe65 	bl	80112f4 <HAL_GetTick>
 801b62a:	4602      	mov	r2, r0
 801b62c:	68bb      	ldr	r3, [r7, #8]
 801b62e:	1ad3      	subs	r3, r2, r3
 801b630:	2b02      	cmp	r3, #2
 801b632:	d901      	bls.n	801b638 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801b634:	2303      	movs	r3, #3
 801b636:	e086      	b.n	801b746 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801b638:	4b45      	ldr	r3, [pc, #276]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b63a:	681b      	ldr	r3, [r3, #0]
 801b63c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801b640:	2b00      	cmp	r3, #0
 801b642:	d1f0      	bne.n	801b626 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801b644:	4b42      	ldr	r3, [pc, #264]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b648:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801b64c:	687b      	ldr	r3, [r7, #4]
 801b64e:	681b      	ldr	r3, [r3, #0]
 801b650:	051b      	lsls	r3, r3, #20
 801b652:	493f      	ldr	r1, [pc, #252]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b654:	4313      	orrs	r3, r2
 801b656:	628b      	str	r3, [r1, #40]	@ 0x28
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	685b      	ldr	r3, [r3, #4]
 801b65c:	3b01      	subs	r3, #1
 801b65e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	689b      	ldr	r3, [r3, #8]
 801b666:	3b01      	subs	r3, #1
 801b668:	025b      	lsls	r3, r3, #9
 801b66a:	b29b      	uxth	r3, r3
 801b66c:	431a      	orrs	r2, r3
 801b66e:	687b      	ldr	r3, [r7, #4]
 801b670:	68db      	ldr	r3, [r3, #12]
 801b672:	3b01      	subs	r3, #1
 801b674:	041b      	lsls	r3, r3, #16
 801b676:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801b67a:	431a      	orrs	r2, r3
 801b67c:	687b      	ldr	r3, [r7, #4]
 801b67e:	691b      	ldr	r3, [r3, #16]
 801b680:	3b01      	subs	r3, #1
 801b682:	061b      	lsls	r3, r3, #24
 801b684:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801b688:	4931      	ldr	r1, [pc, #196]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b68a:	4313      	orrs	r3, r2
 801b68c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801b68e:	4b30      	ldr	r3, [pc, #192]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b692:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	695b      	ldr	r3, [r3, #20]
 801b69a:	492d      	ldr	r1, [pc, #180]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b69c:	4313      	orrs	r3, r2
 801b69e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801b6a0:	4b2b      	ldr	r3, [pc, #172]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b6a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b6a4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	699b      	ldr	r3, [r3, #24]
 801b6ac:	4928      	ldr	r1, [pc, #160]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b6ae:	4313      	orrs	r3, r2
 801b6b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801b6b2:	4b27      	ldr	r3, [pc, #156]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b6b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b6b6:	4a26      	ldr	r2, [pc, #152]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b6b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801b6bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801b6be:	4b24      	ldr	r3, [pc, #144]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b6c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801b6c2:	4b24      	ldr	r3, [pc, #144]	@ (801b754 <RCCEx_PLL3_Config+0x160>)
 801b6c4:	4013      	ands	r3, r2
 801b6c6:	687a      	ldr	r2, [r7, #4]
 801b6c8:	69d2      	ldr	r2, [r2, #28]
 801b6ca:	00d2      	lsls	r2, r2, #3
 801b6cc:	4920      	ldr	r1, [pc, #128]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b6ce:	4313      	orrs	r3, r2
 801b6d0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801b6d2:	4b1f      	ldr	r3, [pc, #124]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b6d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b6d6:	4a1e      	ldr	r2, [pc, #120]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b6d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801b6dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801b6de:	683b      	ldr	r3, [r7, #0]
 801b6e0:	2b00      	cmp	r3, #0
 801b6e2:	d106      	bne.n	801b6f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801b6e4:	4b1a      	ldr	r3, [pc, #104]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b6e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b6e8:	4a19      	ldr	r2, [pc, #100]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b6ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801b6ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801b6f0:	e00f      	b.n	801b712 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801b6f2:	683b      	ldr	r3, [r7, #0]
 801b6f4:	2b01      	cmp	r3, #1
 801b6f6:	d106      	bne.n	801b706 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801b6f8:	4b15      	ldr	r3, [pc, #84]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b6fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b6fc:	4a14      	ldr	r2, [pc, #80]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b6fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801b702:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801b704:	e005      	b.n	801b712 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801b706:	4b12      	ldr	r3, [pc, #72]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b70a:	4a11      	ldr	r2, [pc, #68]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b70c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801b710:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801b712:	4b0f      	ldr	r3, [pc, #60]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b714:	681b      	ldr	r3, [r3, #0]
 801b716:	4a0e      	ldr	r2, [pc, #56]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801b71c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b71e:	f7f5 fde9 	bl	80112f4 <HAL_GetTick>
 801b722:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801b724:	e008      	b.n	801b738 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801b726:	f7f5 fde5 	bl	80112f4 <HAL_GetTick>
 801b72a:	4602      	mov	r2, r0
 801b72c:	68bb      	ldr	r3, [r7, #8]
 801b72e:	1ad3      	subs	r3, r2, r3
 801b730:	2b02      	cmp	r3, #2
 801b732:	d901      	bls.n	801b738 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801b734:	2303      	movs	r3, #3
 801b736:	e006      	b.n	801b746 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801b738:	4b05      	ldr	r3, [pc, #20]	@ (801b750 <RCCEx_PLL3_Config+0x15c>)
 801b73a:	681b      	ldr	r3, [r3, #0]
 801b73c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801b740:	2b00      	cmp	r3, #0
 801b742:	d0f0      	beq.n	801b726 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801b744:	7bfb      	ldrb	r3, [r7, #15]
}
 801b746:	4618      	mov	r0, r3
 801b748:	3710      	adds	r7, #16
 801b74a:	46bd      	mov	sp, r7
 801b74c:	bd80      	pop	{r7, pc}
 801b74e:	bf00      	nop
 801b750:	58024400 	.word	0x58024400
 801b754:	ffff0007 	.word	0xffff0007

0801b758 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801b758:	b580      	push	{r7, lr}
 801b75a:	b084      	sub	sp, #16
 801b75c:	af00      	add	r7, sp, #0
 801b75e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801b760:	687b      	ldr	r3, [r7, #4]
 801b762:	2b00      	cmp	r3, #0
 801b764:	d101      	bne.n	801b76a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801b766:	2301      	movs	r3, #1
 801b768:	e1af      	b.n	801baca <HAL_SPI_Init+0x372>
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	681b      	ldr	r3, [r3, #0]
 801b76e:	4a88      	ldr	r2, [pc, #544]	@ (801b990 <HAL_SPI_Init+0x238>)
 801b770:	4293      	cmp	r3, r2
 801b772:	d00f      	beq.n	801b794 <HAL_SPI_Init+0x3c>
 801b774:	687b      	ldr	r3, [r7, #4]
 801b776:	681b      	ldr	r3, [r3, #0]
 801b778:	4a86      	ldr	r2, [pc, #536]	@ (801b994 <HAL_SPI_Init+0x23c>)
 801b77a:	4293      	cmp	r3, r2
 801b77c:	d00a      	beq.n	801b794 <HAL_SPI_Init+0x3c>
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	681b      	ldr	r3, [r3, #0]
 801b782:	4a85      	ldr	r2, [pc, #532]	@ (801b998 <HAL_SPI_Init+0x240>)
 801b784:	4293      	cmp	r3, r2
 801b786:	d005      	beq.n	801b794 <HAL_SPI_Init+0x3c>
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	68db      	ldr	r3, [r3, #12]
 801b78c:	2b0f      	cmp	r3, #15
 801b78e:	d901      	bls.n	801b794 <HAL_SPI_Init+0x3c>
  {
    return HAL_ERROR;
 801b790:	2301      	movs	r3, #1
 801b792:	e19a      	b.n	801baca <HAL_SPI_Init+0x372>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801b794:	6878      	ldr	r0, [r7, #4]
 801b796:	f000 f9ad 	bl	801baf4 <SPI_GetPacketSize>
 801b79a:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	681b      	ldr	r3, [r3, #0]
 801b7a0:	4a7b      	ldr	r2, [pc, #492]	@ (801b990 <HAL_SPI_Init+0x238>)
 801b7a2:	4293      	cmp	r3, r2
 801b7a4:	d00c      	beq.n	801b7c0 <HAL_SPI_Init+0x68>
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	681b      	ldr	r3, [r3, #0]
 801b7aa:	4a7a      	ldr	r2, [pc, #488]	@ (801b994 <HAL_SPI_Init+0x23c>)
 801b7ac:	4293      	cmp	r3, r2
 801b7ae:	d007      	beq.n	801b7c0 <HAL_SPI_Init+0x68>
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	681b      	ldr	r3, [r3, #0]
 801b7b4:	4a78      	ldr	r2, [pc, #480]	@ (801b998 <HAL_SPI_Init+0x240>)
 801b7b6:	4293      	cmp	r3, r2
 801b7b8:	d002      	beq.n	801b7c0 <HAL_SPI_Init+0x68>
 801b7ba:	68bb      	ldr	r3, [r7, #8]
 801b7bc:	2b08      	cmp	r3, #8
 801b7be:	d811      	bhi.n	801b7e4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801b7c0:	687b      	ldr	r3, [r7, #4]
 801b7c2:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801b7c4:	4a72      	ldr	r2, [pc, #456]	@ (801b990 <HAL_SPI_Init+0x238>)
 801b7c6:	4293      	cmp	r3, r2
 801b7c8:	d009      	beq.n	801b7de <HAL_SPI_Init+0x86>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	681b      	ldr	r3, [r3, #0]
 801b7ce:	4a71      	ldr	r2, [pc, #452]	@ (801b994 <HAL_SPI_Init+0x23c>)
 801b7d0:	4293      	cmp	r3, r2
 801b7d2:	d004      	beq.n	801b7de <HAL_SPI_Init+0x86>
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	681b      	ldr	r3, [r3, #0]
 801b7d8:	4a6f      	ldr	r2, [pc, #444]	@ (801b998 <HAL_SPI_Init+0x240>)
 801b7da:	4293      	cmp	r3, r2
 801b7dc:	d104      	bne.n	801b7e8 <HAL_SPI_Init+0x90>
 801b7de:	68bb      	ldr	r3, [r7, #8]
 801b7e0:	2b10      	cmp	r3, #16
 801b7e2:	d901      	bls.n	801b7e8 <HAL_SPI_Init+0x90>
  {
    return HAL_ERROR;
 801b7e4:	2301      	movs	r3, #1
 801b7e6:	e170      	b.n	801baca <HAL_SPI_Init+0x372>
  }

#if (USE_SPI_CRC != 0UL)
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b7ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801b7f0:	d129      	bne.n	801b846 <HAL_SPI_Init+0xee>
  {
    /* Verify that the SPI instance supports CRC Length higher than 16bits */
    if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.CRCLength > SPI_CRC_LENGTH_16BIT))
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	681b      	ldr	r3, [r3, #0]
 801b7f6:	4a66      	ldr	r2, [pc, #408]	@ (801b990 <HAL_SPI_Init+0x238>)
 801b7f8:	4293      	cmp	r3, r2
 801b7fa:	d010      	beq.n	801b81e <HAL_SPI_Init+0xc6>
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	681b      	ldr	r3, [r3, #0]
 801b800:	4a64      	ldr	r2, [pc, #400]	@ (801b994 <HAL_SPI_Init+0x23c>)
 801b802:	4293      	cmp	r3, r2
 801b804:	d00b      	beq.n	801b81e <HAL_SPI_Init+0xc6>
 801b806:	687b      	ldr	r3, [r7, #4]
 801b808:	681b      	ldr	r3, [r3, #0]
 801b80a:	4a63      	ldr	r2, [pc, #396]	@ (801b998 <HAL_SPI_Init+0x240>)
 801b80c:	4293      	cmp	r3, r2
 801b80e:	d006      	beq.n	801b81e <HAL_SPI_Init+0xc6>
 801b810:	687b      	ldr	r3, [r7, #4]
 801b812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b814:	f5b3 2f70 	cmp.w	r3, #983040	@ 0xf0000
 801b818:	d901      	bls.n	801b81e <HAL_SPI_Init+0xc6>
    {
      return HAL_ERROR;
 801b81a:	2301      	movs	r3, #1
 801b81c:	e155      	b.n	801baca <HAL_SPI_Init+0x372>
    }

    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 801b81e:	687b      	ldr	r3, [r7, #4]
 801b820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b822:	2b00      	cmp	r3, #0
 801b824:	d104      	bne.n	801b830 <HAL_SPI_Init+0xd8>
    {
      crc_length = (hspi->Init.DataSize >> SPI_CFG1_DSIZE_Pos) << SPI_CFG1_CRCSIZE_Pos;
 801b826:	687b      	ldr	r3, [r7, #4]
 801b828:	68db      	ldr	r3, [r3, #12]
 801b82a:	041b      	lsls	r3, r3, #16
 801b82c:	60fb      	str	r3, [r7, #12]
 801b82e:	e002      	b.n	801b836 <HAL_SPI_Init+0xde>
    }
    else
    {
      crc_length = hspi->Init.CRCLength;
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b834:	60fb      	str	r3, [r7, #12]
    }

    /* Verify that the CRC Length is higher than DataSize */
    if ((hspi->Init.DataSize >> SPI_CFG1_DSIZE_Pos) > (crc_length >> SPI_CFG1_CRCSIZE_Pos))
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	68da      	ldr	r2, [r3, #12]
 801b83a:	68fb      	ldr	r3, [r7, #12]
 801b83c:	0c1b      	lsrs	r3, r3, #16
 801b83e:	429a      	cmp	r2, r3
 801b840:	d905      	bls.n	801b84e <HAL_SPI_Init+0xf6>
    {
      return HAL_ERROR;
 801b842:	2301      	movs	r3, #1
 801b844:	e141      	b.n	801baca <HAL_SPI_Init+0x372>
    }
  }
  else
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	68db      	ldr	r3, [r3, #12]
 801b84a:	041b      	lsls	r3, r3, #16
 801b84c:	60fb      	str	r3, [r7, #12]
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801b854:	b2db      	uxtb	r3, r3
 801b856:	2b00      	cmp	r3, #0
 801b858:	d106      	bne.n	801b868 <HAL_SPI_Init+0x110>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801b85a:	687b      	ldr	r3, [r7, #4]
 801b85c:	2200      	movs	r2, #0
 801b85e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801b862:	6878      	ldr	r0, [r7, #4]
 801b864:	f000 f93c 	bl	801bae0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	2202      	movs	r2, #2
 801b86c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	681b      	ldr	r3, [r3, #0]
 801b874:	681a      	ldr	r2, [r3, #0]
 801b876:	687b      	ldr	r3, [r7, #4]
 801b878:	681b      	ldr	r3, [r3, #0]
 801b87a:	f022 0201 	bic.w	r2, r2, #1
 801b87e:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801b880:	687b      	ldr	r3, [r7, #4]
 801b882:	699b      	ldr	r3, [r3, #24]
 801b884:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801b888:	d119      	bne.n	801b8be <HAL_SPI_Init+0x166>
 801b88a:	687b      	ldr	r3, [r7, #4]
 801b88c:	685b      	ldr	r3, [r3, #4]
 801b88e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801b892:	d103      	bne.n	801b89c <HAL_SPI_Init+0x144>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801b898:	2b00      	cmp	r3, #0
 801b89a:	d008      	beq.n	801b8ae <HAL_SPI_Init+0x156>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801b89c:	687b      	ldr	r3, [r7, #4]
 801b89e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801b8a0:	2b00      	cmp	r3, #0
 801b8a2:	d10c      	bne.n	801b8be <HAL_SPI_Init+0x166>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801b8a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b8ac:	d107      	bne.n	801b8be <HAL_SPI_Init+0x166>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801b8ae:	687b      	ldr	r3, [r7, #4]
 801b8b0:	681b      	ldr	r3, [r3, #0]
 801b8b2:	681a      	ldr	r2, [r3, #0]
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	681b      	ldr	r3, [r3, #0]
 801b8b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801b8bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	685b      	ldr	r3, [r3, #4]
 801b8c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801b8c6:	2b00      	cmp	r3, #0
 801b8c8:	d00f      	beq.n	801b8ea <HAL_SPI_Init+0x192>
 801b8ca:	687b      	ldr	r3, [r7, #4]
 801b8cc:	68db      	ldr	r3, [r3, #12]
 801b8ce:	2b06      	cmp	r3, #6
 801b8d0:	d90b      	bls.n	801b8ea <HAL_SPI_Init+0x192>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	681b      	ldr	r3, [r3, #0]
 801b8d6:	681b      	ldr	r3, [r3, #0]
 801b8d8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b8e0:	687b      	ldr	r3, [r7, #4]
 801b8e2:	681b      	ldr	r3, [r3, #0]
 801b8e4:	430a      	orrs	r2, r1
 801b8e6:	601a      	str	r2, [r3, #0]
 801b8e8:	e007      	b.n	801b8fa <HAL_SPI_Init+0x1a2>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	681b      	ldr	r3, [r3, #0]
 801b8ee:	681a      	ldr	r2, [r3, #0]
 801b8f0:	687b      	ldr	r3, [r7, #4]
 801b8f2:	681b      	ldr	r3, [r3, #0]
 801b8f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801b8f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801b8fa:	687b      	ldr	r3, [r7, #4]
 801b8fc:	69da      	ldr	r2, [r3, #28]
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b902:	431a      	orrs	r2, r3
 801b904:	68fb      	ldr	r3, [r7, #12]
 801b906:	431a      	orrs	r2, r3
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b90c:	ea42 0103 	orr.w	r1, r2, r3
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	68da      	ldr	r2, [r3, #12]
 801b914:	687b      	ldr	r3, [r7, #4]
 801b916:	681b      	ldr	r3, [r3, #0]
 801b918:	430a      	orrs	r2, r1
 801b91a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b924:	431a      	orrs	r2, r3
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b92a:	431a      	orrs	r2, r3
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	699b      	ldr	r3, [r3, #24]
 801b930:	431a      	orrs	r2, r3
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	691b      	ldr	r3, [r3, #16]
 801b936:	431a      	orrs	r2, r3
 801b938:	687b      	ldr	r3, [r7, #4]
 801b93a:	695b      	ldr	r3, [r3, #20]
 801b93c:	431a      	orrs	r2, r3
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	6a1b      	ldr	r3, [r3, #32]
 801b942:	431a      	orrs	r2, r3
 801b944:	687b      	ldr	r3, [r7, #4]
 801b946:	685b      	ldr	r3, [r3, #4]
 801b948:	431a      	orrs	r2, r3
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b94e:	431a      	orrs	r2, r3
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	689b      	ldr	r3, [r3, #8]
 801b954:	431a      	orrs	r2, r3
 801b956:	687b      	ldr	r3, [r7, #4]
 801b958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b95a:	ea42 0103 	orr.w	r1, r2, r3
 801b95e:	687b      	ldr	r3, [r7, #4]
 801b960:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	681b      	ldr	r3, [r3, #0]
 801b966:	430a      	orrs	r2, r1
 801b968:	60da      	str	r2, [r3, #12]
                                   hspi->Init.MasterSSIdleness        | hspi->Init.IOSwap));

#if (USE_SPI_CRC != 0UL)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801b96a:	687b      	ldr	r3, [r7, #4]
 801b96c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b96e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801b972:	d16c      	bne.n	801ba4e <HAL_SPI_Init+0x2f6>
  {
    /* Initialize TXCRC Pattern Initial Value */
    if (hspi->Init.TxCRCInitializationPattern == SPI_CRC_INITIALIZATION_ALL_ONE_PATTERN)
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b978:	2b01      	cmp	r3, #1
 801b97a:	d10f      	bne.n	801b99c <HAL_SPI_Init+0x244>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_TCRCINI);
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	681b      	ldr	r3, [r3, #0]
 801b980:	681a      	ldr	r2, [r3, #0]
 801b982:	687b      	ldr	r3, [r7, #4]
 801b984:	681b      	ldr	r3, [r3, #0]
 801b986:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801b98a:	601a      	str	r2, [r3, #0]
 801b98c:	e00e      	b.n	801b9ac <HAL_SPI_Init+0x254>
 801b98e:	bf00      	nop
 801b990:	40013000 	.word	0x40013000
 801b994:	40003800 	.word	0x40003800
 801b998:	40003c00 	.word	0x40003c00
    }
    else
    {
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_TCRCINI);
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	681b      	ldr	r3, [r3, #0]
 801b9a0:	681a      	ldr	r2, [r3, #0]
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	681b      	ldr	r3, [r3, #0]
 801b9a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801b9aa:	601a      	str	r2, [r3, #0]
    }

    /* Initialize RXCRC Pattern Initial Value */
    if (hspi->Init.RxCRCInitializationPattern == SPI_CRC_INITIALIZATION_ALL_ONE_PATTERN)
 801b9ac:	687b      	ldr	r3, [r7, #4]
 801b9ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b9b0:	2b01      	cmp	r3, #1
 801b9b2:	d108      	bne.n	801b9c6 <HAL_SPI_Init+0x26e>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_RCRCINI);
 801b9b4:	687b      	ldr	r3, [r7, #4]
 801b9b6:	681b      	ldr	r3, [r3, #0]
 801b9b8:	681a      	ldr	r2, [r3, #0]
 801b9ba:	687b      	ldr	r3, [r7, #4]
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801b9c2:	601a      	str	r2, [r3, #0]
 801b9c4:	e007      	b.n	801b9d6 <HAL_SPI_Init+0x27e>
    }
    else
    {
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_RCRCINI);
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	681b      	ldr	r3, [r3, #0]
 801b9ca:	681a      	ldr	r2, [r3, #0]
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	681b      	ldr	r3, [r3, #0]
 801b9d0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801b9d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable 33/17 bits CRC computation */
    if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_16BIT)) ||
 801b9d6:	687b      	ldr	r3, [r7, #4]
 801b9d8:	681b      	ldr	r3, [r3, #0]
 801b9da:	4a3e      	ldr	r2, [pc, #248]	@ (801bad4 <HAL_SPI_Init+0x37c>)
 801b9dc:	4293      	cmp	r3, r2
 801b9de:	d00d      	beq.n	801b9fc <HAL_SPI_Init+0x2a4>
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	681b      	ldr	r3, [r3, #0]
 801b9e4:	4a3c      	ldr	r2, [pc, #240]	@ (801bad8 <HAL_SPI_Init+0x380>)
 801b9e6:	4293      	cmp	r3, r2
 801b9e8:	d008      	beq.n	801b9fc <HAL_SPI_Init+0x2a4>
 801b9ea:	687b      	ldr	r3, [r7, #4]
 801b9ec:	681b      	ldr	r3, [r3, #0]
 801b9ee:	4a3b      	ldr	r2, [pc, #236]	@ (801badc <HAL_SPI_Init+0x384>)
 801b9f0:	4293      	cmp	r3, r2
 801b9f2:	d003      	beq.n	801b9fc <HAL_SPI_Init+0x2a4>
 801b9f4:	68fb      	ldr	r3, [r7, #12]
 801b9f6:	f5b3 2f70 	cmp.w	r3, #983040	@ 0xf0000
 801b9fa:	d012      	beq.n	801ba22 <HAL_SPI_Init+0x2ca>
        ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance))  && (crc_length == SPI_CRC_LENGTH_32BIT)))
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	681b      	ldr	r3, [r3, #0]
    if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_16BIT)) ||
 801ba00:	4a34      	ldr	r2, [pc, #208]	@ (801bad4 <HAL_SPI_Init+0x37c>)
 801ba02:	4293      	cmp	r3, r2
 801ba04:	d009      	beq.n	801ba1a <HAL_SPI_Init+0x2c2>
        ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance))  && (crc_length == SPI_CRC_LENGTH_32BIT)))
 801ba06:	687b      	ldr	r3, [r7, #4]
 801ba08:	681b      	ldr	r3, [r3, #0]
 801ba0a:	4a33      	ldr	r2, [pc, #204]	@ (801bad8 <HAL_SPI_Init+0x380>)
 801ba0c:	4293      	cmp	r3, r2
 801ba0e:	d004      	beq.n	801ba1a <HAL_SPI_Init+0x2c2>
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	681b      	ldr	r3, [r3, #0]
 801ba14:	4a31      	ldr	r2, [pc, #196]	@ (801badc <HAL_SPI_Init+0x384>)
 801ba16:	4293      	cmp	r3, r2
 801ba18:	d10c      	bne.n	801ba34 <HAL_SPI_Init+0x2dc>
 801ba1a:	68fb      	ldr	r3, [r7, #12]
 801ba1c:	f5b3 1ff8 	cmp.w	r3, #2031616	@ 0x1f0000
 801ba20:	d108      	bne.n	801ba34 <HAL_SPI_Init+0x2dc>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 801ba22:	687b      	ldr	r3, [r7, #4]
 801ba24:	681b      	ldr	r3, [r3, #0]
 801ba26:	681a      	ldr	r2, [r3, #0]
 801ba28:	687b      	ldr	r3, [r7, #4]
 801ba2a:	681b      	ldr	r3, [r3, #0]
 801ba2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801ba30:	601a      	str	r2, [r3, #0]
 801ba32:	e007      	b.n	801ba44 <HAL_SPI_Init+0x2ec>
    }
    else
    {
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	681b      	ldr	r3, [r3, #0]
 801ba38:	681a      	ldr	r2, [r3, #0]
 801ba3a:	687b      	ldr	r3, [r7, #4]
 801ba3c:	681b      	ldr	r3, [r3, #0]
 801ba3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801ba42:	601a      	str	r2, [r3, #0]
    }

    /* Write CRC polynomial in SPI Register */
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
 801ba44:	687b      	ldr	r3, [r7, #4]
 801ba46:	681b      	ldr	r3, [r3, #0]
 801ba48:	687a      	ldr	r2, [r7, #4]
 801ba4a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801ba4c:	641a      	str	r2, [r3, #64]	@ 0x40
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	685b      	ldr	r3, [r3, #4]
 801ba52:	2b00      	cmp	r3, #0
 801ba54:	d117      	bne.n	801ba86 <HAL_SPI_Init+0x32e>
  {
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ba5a:	2b00      	cmp	r3, #0
 801ba5c:	d109      	bne.n	801ba72 <HAL_SPI_Init+0x31a>
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801ba5e:	687b      	ldr	r3, [r7, #4]
 801ba60:	681b      	ldr	r3, [r3, #0]
 801ba62:	689b      	ldr	r3, [r3, #8]
 801ba64:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 801ba68:	687b      	ldr	r3, [r7, #4]
 801ba6a:	681b      	ldr	r3, [r3, #0]
 801ba6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801ba70:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801ba72:	687b      	ldr	r3, [r7, #4]
 801ba74:	681b      	ldr	r3, [r3, #0]
 801ba76:	689b      	ldr	r3, [r3, #8]
 801ba78:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 801ba7c:	687b      	ldr	r3, [r7, #4]
 801ba7e:	681b      	ldr	r3, [r3, #0]
 801ba80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801ba84:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	681b      	ldr	r3, [r3, #0]
 801ba8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	681b      	ldr	r3, [r3, #0]
 801ba90:	f022 0201 	bic.w	r2, r2, #1
 801ba94:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801ba96:	687b      	ldr	r3, [r7, #4]
 801ba98:	685b      	ldr	r3, [r3, #4]
 801ba9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801ba9e:	2b00      	cmp	r3, #0
 801baa0:	d00a      	beq.n	801bab8 <HAL_SPI_Init+0x360>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	681b      	ldr	r3, [r3, #0]
 801baa6:	68db      	ldr	r3, [r3, #12]
 801baa8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	681b      	ldr	r3, [r3, #0]
 801bab4:	430a      	orrs	r2, r1
 801bab6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801bab8:	687b      	ldr	r3, [r7, #4]
 801baba:	2200      	movs	r2, #0
 801babc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	2201      	movs	r2, #1
 801bac4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 801bac8:	2300      	movs	r3, #0
}
 801baca:	4618      	mov	r0, r3
 801bacc:	3710      	adds	r7, #16
 801bace:	46bd      	mov	sp, r7
 801bad0:	bd80      	pop	{r7, pc}
 801bad2:	bf00      	nop
 801bad4:	40013000 	.word	0x40013000
 801bad8:	40003800 	.word	0x40003800
 801badc:	40003c00 	.word	0x40003c00

0801bae0 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 801bae0:	b480      	push	{r7}
 801bae2:	b083      	sub	sp, #12
 801bae4:	af00      	add	r7, sp, #0
 801bae6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 801bae8:	bf00      	nop
 801baea:	370c      	adds	r7, #12
 801baec:	46bd      	mov	sp, r7
 801baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baf2:	4770      	bx	lr

0801baf4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 801baf4:	b480      	push	{r7}
 801baf6:	b085      	sub	sp, #20
 801baf8:	af00      	add	r7, sp, #0
 801bafa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bb00:	095b      	lsrs	r3, r3, #5
 801bb02:	3301      	adds	r3, #1
 801bb04:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801bb06:	687b      	ldr	r3, [r7, #4]
 801bb08:	68db      	ldr	r3, [r3, #12]
 801bb0a:	3301      	adds	r3, #1
 801bb0c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801bb0e:	68bb      	ldr	r3, [r7, #8]
 801bb10:	3307      	adds	r3, #7
 801bb12:	08db      	lsrs	r3, r3, #3
 801bb14:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801bb16:	68bb      	ldr	r3, [r7, #8]
 801bb18:	68fa      	ldr	r2, [r7, #12]
 801bb1a:	fb02 f303 	mul.w	r3, r2, r3
}
 801bb1e:	4618      	mov	r0, r3
 801bb20:	3714      	adds	r7, #20
 801bb22:	46bd      	mov	sp, r7
 801bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb28:	4770      	bx	lr

0801bb2a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801bb2a:	b580      	push	{r7, lr}
 801bb2c:	b082      	sub	sp, #8
 801bb2e:	af00      	add	r7, sp, #0
 801bb30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	2b00      	cmp	r3, #0
 801bb36:	d101      	bne.n	801bb3c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801bb38:	2301      	movs	r3, #1
 801bb3a:	e049      	b.n	801bbd0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801bb42:	b2db      	uxtb	r3, r3
 801bb44:	2b00      	cmp	r3, #0
 801bb46:	d106      	bne.n	801bb56 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	2200      	movs	r2, #0
 801bb4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801bb50:	6878      	ldr	r0, [r7, #4]
 801bb52:	f000 f841 	bl	801bbd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801bb56:	687b      	ldr	r3, [r7, #4]
 801bb58:	2202      	movs	r2, #2
 801bb5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	681a      	ldr	r2, [r3, #0]
 801bb62:	687b      	ldr	r3, [r7, #4]
 801bb64:	3304      	adds	r3, #4
 801bb66:	4619      	mov	r1, r3
 801bb68:	4610      	mov	r0, r2
 801bb6a:	f000 fe2d 	bl	801c7c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	2201      	movs	r2, #1
 801bb72:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801bb76:	687b      	ldr	r3, [r7, #4]
 801bb78:	2201      	movs	r2, #1
 801bb7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	2201      	movs	r2, #1
 801bb82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	2201      	movs	r2, #1
 801bb8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	2201      	movs	r2, #1
 801bb92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	2201      	movs	r2, #1
 801bb9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	2201      	movs	r2, #1
 801bba2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	2201      	movs	r2, #1
 801bbaa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801bbae:	687b      	ldr	r3, [r7, #4]
 801bbb0:	2201      	movs	r2, #1
 801bbb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801bbb6:	687b      	ldr	r3, [r7, #4]
 801bbb8:	2201      	movs	r2, #1
 801bbba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	2201      	movs	r2, #1
 801bbc2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	2201      	movs	r2, #1
 801bbca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801bbce:	2300      	movs	r3, #0
}
 801bbd0:	4618      	mov	r0, r3
 801bbd2:	3708      	adds	r7, #8
 801bbd4:	46bd      	mov	sp, r7
 801bbd6:	bd80      	pop	{r7, pc}

0801bbd8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 801bbd8:	b480      	push	{r7}
 801bbda:	b083      	sub	sp, #12
 801bbdc:	af00      	add	r7, sp, #0
 801bbde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801bbe0:	bf00      	nop
 801bbe2:	370c      	adds	r7, #12
 801bbe4:	46bd      	mov	sp, r7
 801bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbea:	4770      	bx	lr

0801bbec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801bbec:	b480      	push	{r7}
 801bbee:	b085      	sub	sp, #20
 801bbf0:	af00      	add	r7, sp, #0
 801bbf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801bbf4:	687b      	ldr	r3, [r7, #4]
 801bbf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801bbfa:	b2db      	uxtb	r3, r3
 801bbfc:	2b01      	cmp	r3, #1
 801bbfe:	d001      	beq.n	801bc04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801bc00:	2301      	movs	r3, #1
 801bc02:	e05e      	b.n	801bcc2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801bc04:	687b      	ldr	r3, [r7, #4]
 801bc06:	2202      	movs	r2, #2
 801bc08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801bc0c:	687b      	ldr	r3, [r7, #4]
 801bc0e:	681b      	ldr	r3, [r3, #0]
 801bc10:	68da      	ldr	r2, [r3, #12]
 801bc12:	687b      	ldr	r3, [r7, #4]
 801bc14:	681b      	ldr	r3, [r3, #0]
 801bc16:	f042 0201 	orr.w	r2, r2, #1
 801bc1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	681b      	ldr	r3, [r3, #0]
 801bc20:	4a2b      	ldr	r2, [pc, #172]	@ (801bcd0 <HAL_TIM_Base_Start_IT+0xe4>)
 801bc22:	4293      	cmp	r3, r2
 801bc24:	d02c      	beq.n	801bc80 <HAL_TIM_Base_Start_IT+0x94>
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	681b      	ldr	r3, [r3, #0]
 801bc2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801bc2e:	d027      	beq.n	801bc80 <HAL_TIM_Base_Start_IT+0x94>
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	681b      	ldr	r3, [r3, #0]
 801bc34:	4a27      	ldr	r2, [pc, #156]	@ (801bcd4 <HAL_TIM_Base_Start_IT+0xe8>)
 801bc36:	4293      	cmp	r3, r2
 801bc38:	d022      	beq.n	801bc80 <HAL_TIM_Base_Start_IT+0x94>
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	681b      	ldr	r3, [r3, #0]
 801bc3e:	4a26      	ldr	r2, [pc, #152]	@ (801bcd8 <HAL_TIM_Base_Start_IT+0xec>)
 801bc40:	4293      	cmp	r3, r2
 801bc42:	d01d      	beq.n	801bc80 <HAL_TIM_Base_Start_IT+0x94>
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	681b      	ldr	r3, [r3, #0]
 801bc48:	4a24      	ldr	r2, [pc, #144]	@ (801bcdc <HAL_TIM_Base_Start_IT+0xf0>)
 801bc4a:	4293      	cmp	r3, r2
 801bc4c:	d018      	beq.n	801bc80 <HAL_TIM_Base_Start_IT+0x94>
 801bc4e:	687b      	ldr	r3, [r7, #4]
 801bc50:	681b      	ldr	r3, [r3, #0]
 801bc52:	4a23      	ldr	r2, [pc, #140]	@ (801bce0 <HAL_TIM_Base_Start_IT+0xf4>)
 801bc54:	4293      	cmp	r3, r2
 801bc56:	d013      	beq.n	801bc80 <HAL_TIM_Base_Start_IT+0x94>
 801bc58:	687b      	ldr	r3, [r7, #4]
 801bc5a:	681b      	ldr	r3, [r3, #0]
 801bc5c:	4a21      	ldr	r2, [pc, #132]	@ (801bce4 <HAL_TIM_Base_Start_IT+0xf8>)
 801bc5e:	4293      	cmp	r3, r2
 801bc60:	d00e      	beq.n	801bc80 <HAL_TIM_Base_Start_IT+0x94>
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	681b      	ldr	r3, [r3, #0]
 801bc66:	4a20      	ldr	r2, [pc, #128]	@ (801bce8 <HAL_TIM_Base_Start_IT+0xfc>)
 801bc68:	4293      	cmp	r3, r2
 801bc6a:	d009      	beq.n	801bc80 <HAL_TIM_Base_Start_IT+0x94>
 801bc6c:	687b      	ldr	r3, [r7, #4]
 801bc6e:	681b      	ldr	r3, [r3, #0]
 801bc70:	4a1e      	ldr	r2, [pc, #120]	@ (801bcec <HAL_TIM_Base_Start_IT+0x100>)
 801bc72:	4293      	cmp	r3, r2
 801bc74:	d004      	beq.n	801bc80 <HAL_TIM_Base_Start_IT+0x94>
 801bc76:	687b      	ldr	r3, [r7, #4]
 801bc78:	681b      	ldr	r3, [r3, #0]
 801bc7a:	4a1d      	ldr	r2, [pc, #116]	@ (801bcf0 <HAL_TIM_Base_Start_IT+0x104>)
 801bc7c:	4293      	cmp	r3, r2
 801bc7e:	d115      	bne.n	801bcac <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801bc80:	687b      	ldr	r3, [r7, #4]
 801bc82:	681b      	ldr	r3, [r3, #0]
 801bc84:	689a      	ldr	r2, [r3, #8]
 801bc86:	4b1b      	ldr	r3, [pc, #108]	@ (801bcf4 <HAL_TIM_Base_Start_IT+0x108>)
 801bc88:	4013      	ands	r3, r2
 801bc8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801bc8c:	68fb      	ldr	r3, [r7, #12]
 801bc8e:	2b06      	cmp	r3, #6
 801bc90:	d015      	beq.n	801bcbe <HAL_TIM_Base_Start_IT+0xd2>
 801bc92:	68fb      	ldr	r3, [r7, #12]
 801bc94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bc98:	d011      	beq.n	801bcbe <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	681b      	ldr	r3, [r3, #0]
 801bc9e:	681a      	ldr	r2, [r3, #0]
 801bca0:	687b      	ldr	r3, [r7, #4]
 801bca2:	681b      	ldr	r3, [r3, #0]
 801bca4:	f042 0201 	orr.w	r2, r2, #1
 801bca8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801bcaa:	e008      	b.n	801bcbe <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801bcac:	687b      	ldr	r3, [r7, #4]
 801bcae:	681b      	ldr	r3, [r3, #0]
 801bcb0:	681a      	ldr	r2, [r3, #0]
 801bcb2:	687b      	ldr	r3, [r7, #4]
 801bcb4:	681b      	ldr	r3, [r3, #0]
 801bcb6:	f042 0201 	orr.w	r2, r2, #1
 801bcba:	601a      	str	r2, [r3, #0]
 801bcbc:	e000      	b.n	801bcc0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801bcbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801bcc0:	2300      	movs	r3, #0
}
 801bcc2:	4618      	mov	r0, r3
 801bcc4:	3714      	adds	r7, #20
 801bcc6:	46bd      	mov	sp, r7
 801bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bccc:	4770      	bx	lr
 801bcce:	bf00      	nop
 801bcd0:	40010000 	.word	0x40010000
 801bcd4:	40000400 	.word	0x40000400
 801bcd8:	40000800 	.word	0x40000800
 801bcdc:	40000c00 	.word	0x40000c00
 801bce0:	40010400 	.word	0x40010400
 801bce4:	40001800 	.word	0x40001800
 801bce8:	40014000 	.word	0x40014000
 801bcec:	4000e000 	.word	0x4000e000
 801bcf0:	4000e400 	.word	0x4000e400
 801bcf4:	00010007 	.word	0x00010007

0801bcf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801bcf8:	b580      	push	{r7, lr}
 801bcfa:	b082      	sub	sp, #8
 801bcfc:	af00      	add	r7, sp, #0
 801bcfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801bd00:	687b      	ldr	r3, [r7, #4]
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	d101      	bne.n	801bd0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801bd06:	2301      	movs	r3, #1
 801bd08:	e049      	b.n	801bd9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801bd10:	b2db      	uxtb	r3, r3
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d106      	bne.n	801bd24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801bd16:	687b      	ldr	r3, [r7, #4]
 801bd18:	2200      	movs	r2, #0
 801bd1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801bd1e:	6878      	ldr	r0, [r7, #4]
 801bd20:	f000 f841 	bl	801bda6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	2202      	movs	r2, #2
 801bd28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801bd2c:	687b      	ldr	r3, [r7, #4]
 801bd2e:	681a      	ldr	r2, [r3, #0]
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	3304      	adds	r3, #4
 801bd34:	4619      	mov	r1, r3
 801bd36:	4610      	mov	r0, r2
 801bd38:	f000 fd46 	bl	801c7c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801bd3c:	687b      	ldr	r3, [r7, #4]
 801bd3e:	2201      	movs	r2, #1
 801bd40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	2201      	movs	r2, #1
 801bd48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	2201      	movs	r2, #1
 801bd50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	2201      	movs	r2, #1
 801bd58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	2201      	movs	r2, #1
 801bd60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	2201      	movs	r2, #1
 801bd68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	2201      	movs	r2, #1
 801bd70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	2201      	movs	r2, #1
 801bd78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	2201      	movs	r2, #1
 801bd80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801bd84:	687b      	ldr	r3, [r7, #4]
 801bd86:	2201      	movs	r2, #1
 801bd88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801bd8c:	687b      	ldr	r3, [r7, #4]
 801bd8e:	2201      	movs	r2, #1
 801bd90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	2201      	movs	r2, #1
 801bd98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801bd9c:	2300      	movs	r3, #0
}
 801bd9e:	4618      	mov	r0, r3
 801bda0:	3708      	adds	r7, #8
 801bda2:	46bd      	mov	sp, r7
 801bda4:	bd80      	pop	{r7, pc}

0801bda6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801bda6:	b480      	push	{r7}
 801bda8:	b083      	sub	sp, #12
 801bdaa:	af00      	add	r7, sp, #0
 801bdac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801bdae:	bf00      	nop
 801bdb0:	370c      	adds	r7, #12
 801bdb2:	46bd      	mov	sp, r7
 801bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdb8:	4770      	bx	lr
	...

0801bdbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801bdbc:	b580      	push	{r7, lr}
 801bdbe:	b084      	sub	sp, #16
 801bdc0:	af00      	add	r7, sp, #0
 801bdc2:	6078      	str	r0, [r7, #4]
 801bdc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801bdc6:	683b      	ldr	r3, [r7, #0]
 801bdc8:	2b00      	cmp	r3, #0
 801bdca:	d109      	bne.n	801bde0 <HAL_TIM_PWM_Start+0x24>
 801bdcc:	687b      	ldr	r3, [r7, #4]
 801bdce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801bdd2:	b2db      	uxtb	r3, r3
 801bdd4:	2b01      	cmp	r3, #1
 801bdd6:	bf14      	ite	ne
 801bdd8:	2301      	movne	r3, #1
 801bdda:	2300      	moveq	r3, #0
 801bddc:	b2db      	uxtb	r3, r3
 801bdde:	e03c      	b.n	801be5a <HAL_TIM_PWM_Start+0x9e>
 801bde0:	683b      	ldr	r3, [r7, #0]
 801bde2:	2b04      	cmp	r3, #4
 801bde4:	d109      	bne.n	801bdfa <HAL_TIM_PWM_Start+0x3e>
 801bde6:	687b      	ldr	r3, [r7, #4]
 801bde8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801bdec:	b2db      	uxtb	r3, r3
 801bdee:	2b01      	cmp	r3, #1
 801bdf0:	bf14      	ite	ne
 801bdf2:	2301      	movne	r3, #1
 801bdf4:	2300      	moveq	r3, #0
 801bdf6:	b2db      	uxtb	r3, r3
 801bdf8:	e02f      	b.n	801be5a <HAL_TIM_PWM_Start+0x9e>
 801bdfa:	683b      	ldr	r3, [r7, #0]
 801bdfc:	2b08      	cmp	r3, #8
 801bdfe:	d109      	bne.n	801be14 <HAL_TIM_PWM_Start+0x58>
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801be06:	b2db      	uxtb	r3, r3
 801be08:	2b01      	cmp	r3, #1
 801be0a:	bf14      	ite	ne
 801be0c:	2301      	movne	r3, #1
 801be0e:	2300      	moveq	r3, #0
 801be10:	b2db      	uxtb	r3, r3
 801be12:	e022      	b.n	801be5a <HAL_TIM_PWM_Start+0x9e>
 801be14:	683b      	ldr	r3, [r7, #0]
 801be16:	2b0c      	cmp	r3, #12
 801be18:	d109      	bne.n	801be2e <HAL_TIM_PWM_Start+0x72>
 801be1a:	687b      	ldr	r3, [r7, #4]
 801be1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801be20:	b2db      	uxtb	r3, r3
 801be22:	2b01      	cmp	r3, #1
 801be24:	bf14      	ite	ne
 801be26:	2301      	movne	r3, #1
 801be28:	2300      	moveq	r3, #0
 801be2a:	b2db      	uxtb	r3, r3
 801be2c:	e015      	b.n	801be5a <HAL_TIM_PWM_Start+0x9e>
 801be2e:	683b      	ldr	r3, [r7, #0]
 801be30:	2b10      	cmp	r3, #16
 801be32:	d109      	bne.n	801be48 <HAL_TIM_PWM_Start+0x8c>
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801be3a:	b2db      	uxtb	r3, r3
 801be3c:	2b01      	cmp	r3, #1
 801be3e:	bf14      	ite	ne
 801be40:	2301      	movne	r3, #1
 801be42:	2300      	moveq	r3, #0
 801be44:	b2db      	uxtb	r3, r3
 801be46:	e008      	b.n	801be5a <HAL_TIM_PWM_Start+0x9e>
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801be4e:	b2db      	uxtb	r3, r3
 801be50:	2b01      	cmp	r3, #1
 801be52:	bf14      	ite	ne
 801be54:	2301      	movne	r3, #1
 801be56:	2300      	moveq	r3, #0
 801be58:	b2db      	uxtb	r3, r3
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	d001      	beq.n	801be62 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801be5e:	2301      	movs	r3, #1
 801be60:	e0ab      	b.n	801bfba <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801be62:	683b      	ldr	r3, [r7, #0]
 801be64:	2b00      	cmp	r3, #0
 801be66:	d104      	bne.n	801be72 <HAL_TIM_PWM_Start+0xb6>
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	2202      	movs	r2, #2
 801be6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801be70:	e023      	b.n	801beba <HAL_TIM_PWM_Start+0xfe>
 801be72:	683b      	ldr	r3, [r7, #0]
 801be74:	2b04      	cmp	r3, #4
 801be76:	d104      	bne.n	801be82 <HAL_TIM_PWM_Start+0xc6>
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	2202      	movs	r2, #2
 801be7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801be80:	e01b      	b.n	801beba <HAL_TIM_PWM_Start+0xfe>
 801be82:	683b      	ldr	r3, [r7, #0]
 801be84:	2b08      	cmp	r3, #8
 801be86:	d104      	bne.n	801be92 <HAL_TIM_PWM_Start+0xd6>
 801be88:	687b      	ldr	r3, [r7, #4]
 801be8a:	2202      	movs	r2, #2
 801be8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801be90:	e013      	b.n	801beba <HAL_TIM_PWM_Start+0xfe>
 801be92:	683b      	ldr	r3, [r7, #0]
 801be94:	2b0c      	cmp	r3, #12
 801be96:	d104      	bne.n	801bea2 <HAL_TIM_PWM_Start+0xe6>
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	2202      	movs	r2, #2
 801be9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801bea0:	e00b      	b.n	801beba <HAL_TIM_PWM_Start+0xfe>
 801bea2:	683b      	ldr	r3, [r7, #0]
 801bea4:	2b10      	cmp	r3, #16
 801bea6:	d104      	bne.n	801beb2 <HAL_TIM_PWM_Start+0xf6>
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	2202      	movs	r2, #2
 801beac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801beb0:	e003      	b.n	801beba <HAL_TIM_PWM_Start+0xfe>
 801beb2:	687b      	ldr	r3, [r7, #4]
 801beb4:	2202      	movs	r2, #2
 801beb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	681b      	ldr	r3, [r3, #0]
 801bebe:	2201      	movs	r2, #1
 801bec0:	6839      	ldr	r1, [r7, #0]
 801bec2:	4618      	mov	r0, r3
 801bec4:	f001 f89a 	bl	801cffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801bec8:	687b      	ldr	r3, [r7, #4]
 801beca:	681b      	ldr	r3, [r3, #0]
 801becc:	4a3d      	ldr	r2, [pc, #244]	@ (801bfc4 <HAL_TIM_PWM_Start+0x208>)
 801bece:	4293      	cmp	r3, r2
 801bed0:	d013      	beq.n	801befa <HAL_TIM_PWM_Start+0x13e>
 801bed2:	687b      	ldr	r3, [r7, #4]
 801bed4:	681b      	ldr	r3, [r3, #0]
 801bed6:	4a3c      	ldr	r2, [pc, #240]	@ (801bfc8 <HAL_TIM_PWM_Start+0x20c>)
 801bed8:	4293      	cmp	r3, r2
 801beda:	d00e      	beq.n	801befa <HAL_TIM_PWM_Start+0x13e>
 801bedc:	687b      	ldr	r3, [r7, #4]
 801bede:	681b      	ldr	r3, [r3, #0]
 801bee0:	4a3a      	ldr	r2, [pc, #232]	@ (801bfcc <HAL_TIM_PWM_Start+0x210>)
 801bee2:	4293      	cmp	r3, r2
 801bee4:	d009      	beq.n	801befa <HAL_TIM_PWM_Start+0x13e>
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	681b      	ldr	r3, [r3, #0]
 801beea:	4a39      	ldr	r2, [pc, #228]	@ (801bfd0 <HAL_TIM_PWM_Start+0x214>)
 801beec:	4293      	cmp	r3, r2
 801beee:	d004      	beq.n	801befa <HAL_TIM_PWM_Start+0x13e>
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	681b      	ldr	r3, [r3, #0]
 801bef4:	4a37      	ldr	r2, [pc, #220]	@ (801bfd4 <HAL_TIM_PWM_Start+0x218>)
 801bef6:	4293      	cmp	r3, r2
 801bef8:	d101      	bne.n	801befe <HAL_TIM_PWM_Start+0x142>
 801befa:	2301      	movs	r3, #1
 801befc:	e000      	b.n	801bf00 <HAL_TIM_PWM_Start+0x144>
 801befe:	2300      	movs	r3, #0
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	d007      	beq.n	801bf14 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	681b      	ldr	r3, [r3, #0]
 801bf08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801bf0a:	687b      	ldr	r3, [r7, #4]
 801bf0c:	681b      	ldr	r3, [r3, #0]
 801bf0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801bf12:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801bf14:	687b      	ldr	r3, [r7, #4]
 801bf16:	681b      	ldr	r3, [r3, #0]
 801bf18:	4a2a      	ldr	r2, [pc, #168]	@ (801bfc4 <HAL_TIM_PWM_Start+0x208>)
 801bf1a:	4293      	cmp	r3, r2
 801bf1c:	d02c      	beq.n	801bf78 <HAL_TIM_PWM_Start+0x1bc>
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	681b      	ldr	r3, [r3, #0]
 801bf22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801bf26:	d027      	beq.n	801bf78 <HAL_TIM_PWM_Start+0x1bc>
 801bf28:	687b      	ldr	r3, [r7, #4]
 801bf2a:	681b      	ldr	r3, [r3, #0]
 801bf2c:	4a2a      	ldr	r2, [pc, #168]	@ (801bfd8 <HAL_TIM_PWM_Start+0x21c>)
 801bf2e:	4293      	cmp	r3, r2
 801bf30:	d022      	beq.n	801bf78 <HAL_TIM_PWM_Start+0x1bc>
 801bf32:	687b      	ldr	r3, [r7, #4]
 801bf34:	681b      	ldr	r3, [r3, #0]
 801bf36:	4a29      	ldr	r2, [pc, #164]	@ (801bfdc <HAL_TIM_PWM_Start+0x220>)
 801bf38:	4293      	cmp	r3, r2
 801bf3a:	d01d      	beq.n	801bf78 <HAL_TIM_PWM_Start+0x1bc>
 801bf3c:	687b      	ldr	r3, [r7, #4]
 801bf3e:	681b      	ldr	r3, [r3, #0]
 801bf40:	4a27      	ldr	r2, [pc, #156]	@ (801bfe0 <HAL_TIM_PWM_Start+0x224>)
 801bf42:	4293      	cmp	r3, r2
 801bf44:	d018      	beq.n	801bf78 <HAL_TIM_PWM_Start+0x1bc>
 801bf46:	687b      	ldr	r3, [r7, #4]
 801bf48:	681b      	ldr	r3, [r3, #0]
 801bf4a:	4a1f      	ldr	r2, [pc, #124]	@ (801bfc8 <HAL_TIM_PWM_Start+0x20c>)
 801bf4c:	4293      	cmp	r3, r2
 801bf4e:	d013      	beq.n	801bf78 <HAL_TIM_PWM_Start+0x1bc>
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	681b      	ldr	r3, [r3, #0]
 801bf54:	4a23      	ldr	r2, [pc, #140]	@ (801bfe4 <HAL_TIM_PWM_Start+0x228>)
 801bf56:	4293      	cmp	r3, r2
 801bf58:	d00e      	beq.n	801bf78 <HAL_TIM_PWM_Start+0x1bc>
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	681b      	ldr	r3, [r3, #0]
 801bf5e:	4a1b      	ldr	r2, [pc, #108]	@ (801bfcc <HAL_TIM_PWM_Start+0x210>)
 801bf60:	4293      	cmp	r3, r2
 801bf62:	d009      	beq.n	801bf78 <HAL_TIM_PWM_Start+0x1bc>
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	681b      	ldr	r3, [r3, #0]
 801bf68:	4a1f      	ldr	r2, [pc, #124]	@ (801bfe8 <HAL_TIM_PWM_Start+0x22c>)
 801bf6a:	4293      	cmp	r3, r2
 801bf6c:	d004      	beq.n	801bf78 <HAL_TIM_PWM_Start+0x1bc>
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	681b      	ldr	r3, [r3, #0]
 801bf72:	4a1e      	ldr	r2, [pc, #120]	@ (801bfec <HAL_TIM_PWM_Start+0x230>)
 801bf74:	4293      	cmp	r3, r2
 801bf76:	d115      	bne.n	801bfa4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	681b      	ldr	r3, [r3, #0]
 801bf7c:	689a      	ldr	r2, [r3, #8]
 801bf7e:	4b1c      	ldr	r3, [pc, #112]	@ (801bff0 <HAL_TIM_PWM_Start+0x234>)
 801bf80:	4013      	ands	r3, r2
 801bf82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801bf84:	68fb      	ldr	r3, [r7, #12]
 801bf86:	2b06      	cmp	r3, #6
 801bf88:	d015      	beq.n	801bfb6 <HAL_TIM_PWM_Start+0x1fa>
 801bf8a:	68fb      	ldr	r3, [r7, #12]
 801bf8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bf90:	d011      	beq.n	801bfb6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	681b      	ldr	r3, [r3, #0]
 801bf96:	681a      	ldr	r2, [r3, #0]
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	681b      	ldr	r3, [r3, #0]
 801bf9c:	f042 0201 	orr.w	r2, r2, #1
 801bfa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801bfa2:	e008      	b.n	801bfb6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	681b      	ldr	r3, [r3, #0]
 801bfa8:	681a      	ldr	r2, [r3, #0]
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	681b      	ldr	r3, [r3, #0]
 801bfae:	f042 0201 	orr.w	r2, r2, #1
 801bfb2:	601a      	str	r2, [r3, #0]
 801bfb4:	e000      	b.n	801bfb8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801bfb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801bfb8:	2300      	movs	r3, #0
}
 801bfba:	4618      	mov	r0, r3
 801bfbc:	3710      	adds	r7, #16
 801bfbe:	46bd      	mov	sp, r7
 801bfc0:	bd80      	pop	{r7, pc}
 801bfc2:	bf00      	nop
 801bfc4:	40010000 	.word	0x40010000
 801bfc8:	40010400 	.word	0x40010400
 801bfcc:	40014000 	.word	0x40014000
 801bfd0:	40014400 	.word	0x40014400
 801bfd4:	40014800 	.word	0x40014800
 801bfd8:	40000400 	.word	0x40000400
 801bfdc:	40000800 	.word	0x40000800
 801bfe0:	40000c00 	.word	0x40000c00
 801bfe4:	40001800 	.word	0x40001800
 801bfe8:	4000e000 	.word	0x4000e000
 801bfec:	4000e400 	.word	0x4000e400
 801bff0:	00010007 	.word	0x00010007

0801bff4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801bff4:	b580      	push	{r7, lr}
 801bff6:	b082      	sub	sp, #8
 801bff8:	af00      	add	r7, sp, #0
 801bffa:	6078      	str	r0, [r7, #4]
 801bffc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	2200      	movs	r2, #0
 801c004:	6839      	ldr	r1, [r7, #0]
 801c006:	4618      	mov	r0, r3
 801c008:	f000 fff8 	bl	801cffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801c00c:	687b      	ldr	r3, [r7, #4]
 801c00e:	681b      	ldr	r3, [r3, #0]
 801c010:	4a3e      	ldr	r2, [pc, #248]	@ (801c10c <HAL_TIM_PWM_Stop+0x118>)
 801c012:	4293      	cmp	r3, r2
 801c014:	d013      	beq.n	801c03e <HAL_TIM_PWM_Stop+0x4a>
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	681b      	ldr	r3, [r3, #0]
 801c01a:	4a3d      	ldr	r2, [pc, #244]	@ (801c110 <HAL_TIM_PWM_Stop+0x11c>)
 801c01c:	4293      	cmp	r3, r2
 801c01e:	d00e      	beq.n	801c03e <HAL_TIM_PWM_Stop+0x4a>
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	4a3b      	ldr	r2, [pc, #236]	@ (801c114 <HAL_TIM_PWM_Stop+0x120>)
 801c026:	4293      	cmp	r3, r2
 801c028:	d009      	beq.n	801c03e <HAL_TIM_PWM_Stop+0x4a>
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	681b      	ldr	r3, [r3, #0]
 801c02e:	4a3a      	ldr	r2, [pc, #232]	@ (801c118 <HAL_TIM_PWM_Stop+0x124>)
 801c030:	4293      	cmp	r3, r2
 801c032:	d004      	beq.n	801c03e <HAL_TIM_PWM_Stop+0x4a>
 801c034:	687b      	ldr	r3, [r7, #4]
 801c036:	681b      	ldr	r3, [r3, #0]
 801c038:	4a38      	ldr	r2, [pc, #224]	@ (801c11c <HAL_TIM_PWM_Stop+0x128>)
 801c03a:	4293      	cmp	r3, r2
 801c03c:	d101      	bne.n	801c042 <HAL_TIM_PWM_Stop+0x4e>
 801c03e:	2301      	movs	r3, #1
 801c040:	e000      	b.n	801c044 <HAL_TIM_PWM_Stop+0x50>
 801c042:	2300      	movs	r3, #0
 801c044:	2b00      	cmp	r3, #0
 801c046:	d017      	beq.n	801c078 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801c048:	687b      	ldr	r3, [r7, #4]
 801c04a:	681b      	ldr	r3, [r3, #0]
 801c04c:	6a1a      	ldr	r2, [r3, #32]
 801c04e:	f241 1311 	movw	r3, #4369	@ 0x1111
 801c052:	4013      	ands	r3, r2
 801c054:	2b00      	cmp	r3, #0
 801c056:	d10f      	bne.n	801c078 <HAL_TIM_PWM_Stop+0x84>
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	681b      	ldr	r3, [r3, #0]
 801c05c:	6a1a      	ldr	r2, [r3, #32]
 801c05e:	f240 4344 	movw	r3, #1092	@ 0x444
 801c062:	4013      	ands	r3, r2
 801c064:	2b00      	cmp	r3, #0
 801c066:	d107      	bne.n	801c078 <HAL_TIM_PWM_Stop+0x84>
 801c068:	687b      	ldr	r3, [r7, #4]
 801c06a:	681b      	ldr	r3, [r3, #0]
 801c06c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	681b      	ldr	r3, [r3, #0]
 801c072:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801c076:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801c078:	687b      	ldr	r3, [r7, #4]
 801c07a:	681b      	ldr	r3, [r3, #0]
 801c07c:	6a1a      	ldr	r2, [r3, #32]
 801c07e:	f241 1311 	movw	r3, #4369	@ 0x1111
 801c082:	4013      	ands	r3, r2
 801c084:	2b00      	cmp	r3, #0
 801c086:	d10f      	bne.n	801c0a8 <HAL_TIM_PWM_Stop+0xb4>
 801c088:	687b      	ldr	r3, [r7, #4]
 801c08a:	681b      	ldr	r3, [r3, #0]
 801c08c:	6a1a      	ldr	r2, [r3, #32]
 801c08e:	f240 4344 	movw	r3, #1092	@ 0x444
 801c092:	4013      	ands	r3, r2
 801c094:	2b00      	cmp	r3, #0
 801c096:	d107      	bne.n	801c0a8 <HAL_TIM_PWM_Stop+0xb4>
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	681b      	ldr	r3, [r3, #0]
 801c09c:	681a      	ldr	r2, [r3, #0]
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	681b      	ldr	r3, [r3, #0]
 801c0a2:	f022 0201 	bic.w	r2, r2, #1
 801c0a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801c0a8:	683b      	ldr	r3, [r7, #0]
 801c0aa:	2b00      	cmp	r3, #0
 801c0ac:	d104      	bne.n	801c0b8 <HAL_TIM_PWM_Stop+0xc4>
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	2201      	movs	r2, #1
 801c0b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801c0b6:	e023      	b.n	801c100 <HAL_TIM_PWM_Stop+0x10c>
 801c0b8:	683b      	ldr	r3, [r7, #0]
 801c0ba:	2b04      	cmp	r3, #4
 801c0bc:	d104      	bne.n	801c0c8 <HAL_TIM_PWM_Stop+0xd4>
 801c0be:	687b      	ldr	r3, [r7, #4]
 801c0c0:	2201      	movs	r2, #1
 801c0c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801c0c6:	e01b      	b.n	801c100 <HAL_TIM_PWM_Stop+0x10c>
 801c0c8:	683b      	ldr	r3, [r7, #0]
 801c0ca:	2b08      	cmp	r3, #8
 801c0cc:	d104      	bne.n	801c0d8 <HAL_TIM_PWM_Stop+0xe4>
 801c0ce:	687b      	ldr	r3, [r7, #4]
 801c0d0:	2201      	movs	r2, #1
 801c0d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801c0d6:	e013      	b.n	801c100 <HAL_TIM_PWM_Stop+0x10c>
 801c0d8:	683b      	ldr	r3, [r7, #0]
 801c0da:	2b0c      	cmp	r3, #12
 801c0dc:	d104      	bne.n	801c0e8 <HAL_TIM_PWM_Stop+0xf4>
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	2201      	movs	r2, #1
 801c0e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801c0e6:	e00b      	b.n	801c100 <HAL_TIM_PWM_Stop+0x10c>
 801c0e8:	683b      	ldr	r3, [r7, #0]
 801c0ea:	2b10      	cmp	r3, #16
 801c0ec:	d104      	bne.n	801c0f8 <HAL_TIM_PWM_Stop+0x104>
 801c0ee:	687b      	ldr	r3, [r7, #4]
 801c0f0:	2201      	movs	r2, #1
 801c0f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801c0f6:	e003      	b.n	801c100 <HAL_TIM_PWM_Stop+0x10c>
 801c0f8:	687b      	ldr	r3, [r7, #4]
 801c0fa:	2201      	movs	r2, #1
 801c0fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 801c100:	2300      	movs	r3, #0
}
 801c102:	4618      	mov	r0, r3
 801c104:	3708      	adds	r7, #8
 801c106:	46bd      	mov	sp, r7
 801c108:	bd80      	pop	{r7, pc}
 801c10a:	bf00      	nop
 801c10c:	40010000 	.word	0x40010000
 801c110:	40010400 	.word	0x40010400
 801c114:	40014000 	.word	0x40014000
 801c118:	40014400 	.word	0x40014400
 801c11c:	40014800 	.word	0x40014800

0801c120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801c120:	b580      	push	{r7, lr}
 801c122:	b082      	sub	sp, #8
 801c124:	af00      	add	r7, sp, #0
 801c126:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801c128:	687b      	ldr	r3, [r7, #4]
 801c12a:	681b      	ldr	r3, [r3, #0]
 801c12c:	691b      	ldr	r3, [r3, #16]
 801c12e:	f003 0302 	and.w	r3, r3, #2
 801c132:	2b02      	cmp	r3, #2
 801c134:	d122      	bne.n	801c17c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	681b      	ldr	r3, [r3, #0]
 801c13a:	68db      	ldr	r3, [r3, #12]
 801c13c:	f003 0302 	and.w	r3, r3, #2
 801c140:	2b02      	cmp	r3, #2
 801c142:	d11b      	bne.n	801c17c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	681b      	ldr	r3, [r3, #0]
 801c148:	f06f 0202 	mvn.w	r2, #2
 801c14c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801c14e:	687b      	ldr	r3, [r7, #4]
 801c150:	2201      	movs	r2, #1
 801c152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801c154:	687b      	ldr	r3, [r7, #4]
 801c156:	681b      	ldr	r3, [r3, #0]
 801c158:	699b      	ldr	r3, [r3, #24]
 801c15a:	f003 0303 	and.w	r3, r3, #3
 801c15e:	2b00      	cmp	r3, #0
 801c160:	d003      	beq.n	801c16a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801c162:	6878      	ldr	r0, [r7, #4]
 801c164:	f000 fb12 	bl	801c78c <HAL_TIM_IC_CaptureCallback>
 801c168:	e005      	b.n	801c176 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801c16a:	6878      	ldr	r0, [r7, #4]
 801c16c:	f000 fb04 	bl	801c778 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801c170:	6878      	ldr	r0, [r7, #4]
 801c172:	f000 fb15 	bl	801c7a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801c176:	687b      	ldr	r3, [r7, #4]
 801c178:	2200      	movs	r2, #0
 801c17a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801c17c:	687b      	ldr	r3, [r7, #4]
 801c17e:	681b      	ldr	r3, [r3, #0]
 801c180:	691b      	ldr	r3, [r3, #16]
 801c182:	f003 0304 	and.w	r3, r3, #4
 801c186:	2b04      	cmp	r3, #4
 801c188:	d122      	bne.n	801c1d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	681b      	ldr	r3, [r3, #0]
 801c18e:	68db      	ldr	r3, [r3, #12]
 801c190:	f003 0304 	and.w	r3, r3, #4
 801c194:	2b04      	cmp	r3, #4
 801c196:	d11b      	bne.n	801c1d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	681b      	ldr	r3, [r3, #0]
 801c19c:	f06f 0204 	mvn.w	r2, #4
 801c1a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801c1a2:	687b      	ldr	r3, [r7, #4]
 801c1a4:	2202      	movs	r2, #2
 801c1a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801c1a8:	687b      	ldr	r3, [r7, #4]
 801c1aa:	681b      	ldr	r3, [r3, #0]
 801c1ac:	699b      	ldr	r3, [r3, #24]
 801c1ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d003      	beq.n	801c1be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801c1b6:	6878      	ldr	r0, [r7, #4]
 801c1b8:	f000 fae8 	bl	801c78c <HAL_TIM_IC_CaptureCallback>
 801c1bc:	e005      	b.n	801c1ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801c1be:	6878      	ldr	r0, [r7, #4]
 801c1c0:	f000 fada 	bl	801c778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801c1c4:	6878      	ldr	r0, [r7, #4]
 801c1c6:	f000 faeb 	bl	801c7a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	2200      	movs	r2, #0
 801c1ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	681b      	ldr	r3, [r3, #0]
 801c1d4:	691b      	ldr	r3, [r3, #16]
 801c1d6:	f003 0308 	and.w	r3, r3, #8
 801c1da:	2b08      	cmp	r3, #8
 801c1dc:	d122      	bne.n	801c224 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801c1de:	687b      	ldr	r3, [r7, #4]
 801c1e0:	681b      	ldr	r3, [r3, #0]
 801c1e2:	68db      	ldr	r3, [r3, #12]
 801c1e4:	f003 0308 	and.w	r3, r3, #8
 801c1e8:	2b08      	cmp	r3, #8
 801c1ea:	d11b      	bne.n	801c224 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	681b      	ldr	r3, [r3, #0]
 801c1f0:	f06f 0208 	mvn.w	r2, #8
 801c1f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801c1f6:	687b      	ldr	r3, [r7, #4]
 801c1f8:	2204      	movs	r2, #4
 801c1fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	681b      	ldr	r3, [r3, #0]
 801c200:	69db      	ldr	r3, [r3, #28]
 801c202:	f003 0303 	and.w	r3, r3, #3
 801c206:	2b00      	cmp	r3, #0
 801c208:	d003      	beq.n	801c212 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801c20a:	6878      	ldr	r0, [r7, #4]
 801c20c:	f000 fabe 	bl	801c78c <HAL_TIM_IC_CaptureCallback>
 801c210:	e005      	b.n	801c21e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801c212:	6878      	ldr	r0, [r7, #4]
 801c214:	f000 fab0 	bl	801c778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801c218:	6878      	ldr	r0, [r7, #4]
 801c21a:	f000 fac1 	bl	801c7a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	2200      	movs	r2, #0
 801c222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801c224:	687b      	ldr	r3, [r7, #4]
 801c226:	681b      	ldr	r3, [r3, #0]
 801c228:	691b      	ldr	r3, [r3, #16]
 801c22a:	f003 0310 	and.w	r3, r3, #16
 801c22e:	2b10      	cmp	r3, #16
 801c230:	d122      	bne.n	801c278 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801c232:	687b      	ldr	r3, [r7, #4]
 801c234:	681b      	ldr	r3, [r3, #0]
 801c236:	68db      	ldr	r3, [r3, #12]
 801c238:	f003 0310 	and.w	r3, r3, #16
 801c23c:	2b10      	cmp	r3, #16
 801c23e:	d11b      	bne.n	801c278 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801c240:	687b      	ldr	r3, [r7, #4]
 801c242:	681b      	ldr	r3, [r3, #0]
 801c244:	f06f 0210 	mvn.w	r2, #16
 801c248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801c24a:	687b      	ldr	r3, [r7, #4]
 801c24c:	2208      	movs	r2, #8
 801c24e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801c250:	687b      	ldr	r3, [r7, #4]
 801c252:	681b      	ldr	r3, [r3, #0]
 801c254:	69db      	ldr	r3, [r3, #28]
 801c256:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801c25a:	2b00      	cmp	r3, #0
 801c25c:	d003      	beq.n	801c266 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801c25e:	6878      	ldr	r0, [r7, #4]
 801c260:	f000 fa94 	bl	801c78c <HAL_TIM_IC_CaptureCallback>
 801c264:	e005      	b.n	801c272 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801c266:	6878      	ldr	r0, [r7, #4]
 801c268:	f000 fa86 	bl	801c778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801c26c:	6878      	ldr	r0, [r7, #4]
 801c26e:	f000 fa97 	bl	801c7a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	2200      	movs	r2, #0
 801c276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801c278:	687b      	ldr	r3, [r7, #4]
 801c27a:	681b      	ldr	r3, [r3, #0]
 801c27c:	691b      	ldr	r3, [r3, #16]
 801c27e:	f003 0301 	and.w	r3, r3, #1
 801c282:	2b01      	cmp	r3, #1
 801c284:	d10e      	bne.n	801c2a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801c286:	687b      	ldr	r3, [r7, #4]
 801c288:	681b      	ldr	r3, [r3, #0]
 801c28a:	68db      	ldr	r3, [r3, #12]
 801c28c:	f003 0301 	and.w	r3, r3, #1
 801c290:	2b01      	cmp	r3, #1
 801c292:	d107      	bne.n	801c2a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	681b      	ldr	r3, [r3, #0]
 801c298:	f06f 0201 	mvn.w	r2, #1
 801c29c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801c29e:	6878      	ldr	r0, [r7, #4]
 801c2a0:	f001 f8a2 	bl	801d3e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801c2a4:	687b      	ldr	r3, [r7, #4]
 801c2a6:	681b      	ldr	r3, [r3, #0]
 801c2a8:	691b      	ldr	r3, [r3, #16]
 801c2aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801c2ae:	2b80      	cmp	r3, #128	@ 0x80
 801c2b0:	d10e      	bne.n	801c2d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801c2b2:	687b      	ldr	r3, [r7, #4]
 801c2b4:	681b      	ldr	r3, [r3, #0]
 801c2b6:	68db      	ldr	r3, [r3, #12]
 801c2b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801c2bc:	2b80      	cmp	r3, #128	@ 0x80
 801c2be:	d107      	bne.n	801c2d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801c2c0:	687b      	ldr	r3, [r7, #4]
 801c2c2:	681b      	ldr	r3, [r3, #0]
 801c2c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 801c2c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801c2ca:	6878      	ldr	r0, [r7, #4]
 801c2cc:	f001 f802 	bl	801d2d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	681b      	ldr	r3, [r3, #0]
 801c2d4:	691b      	ldr	r3, [r3, #16]
 801c2d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c2da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c2de:	d10e      	bne.n	801c2fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801c2e0:	687b      	ldr	r3, [r7, #4]
 801c2e2:	681b      	ldr	r3, [r3, #0]
 801c2e4:	68db      	ldr	r3, [r3, #12]
 801c2e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801c2ea:	2b80      	cmp	r3, #128	@ 0x80
 801c2ec:	d107      	bne.n	801c2fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	681b      	ldr	r3, [r3, #0]
 801c2f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801c2f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801c2f8:	6878      	ldr	r0, [r7, #4]
 801c2fa:	f000 fff5 	bl	801d2e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	681b      	ldr	r3, [r3, #0]
 801c302:	691b      	ldr	r3, [r3, #16]
 801c304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c308:	2b40      	cmp	r3, #64	@ 0x40
 801c30a:	d10e      	bne.n	801c32a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801c30c:	687b      	ldr	r3, [r7, #4]
 801c30e:	681b      	ldr	r3, [r3, #0]
 801c310:	68db      	ldr	r3, [r3, #12]
 801c312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c316:	2b40      	cmp	r3, #64	@ 0x40
 801c318:	d107      	bne.n	801c32a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	681b      	ldr	r3, [r3, #0]
 801c31e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801c322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801c324:	6878      	ldr	r0, [r7, #4]
 801c326:	f000 fa45 	bl	801c7b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	681b      	ldr	r3, [r3, #0]
 801c32e:	691b      	ldr	r3, [r3, #16]
 801c330:	f003 0320 	and.w	r3, r3, #32
 801c334:	2b20      	cmp	r3, #32
 801c336:	d10e      	bne.n	801c356 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801c338:	687b      	ldr	r3, [r7, #4]
 801c33a:	681b      	ldr	r3, [r3, #0]
 801c33c:	68db      	ldr	r3, [r3, #12]
 801c33e:	f003 0320 	and.w	r3, r3, #32
 801c342:	2b20      	cmp	r3, #32
 801c344:	d107      	bne.n	801c356 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	681b      	ldr	r3, [r3, #0]
 801c34a:	f06f 0220 	mvn.w	r2, #32
 801c34e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801c350:	6878      	ldr	r0, [r7, #4]
 801c352:	f000 ffb5 	bl	801d2c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801c356:	bf00      	nop
 801c358:	3708      	adds	r7, #8
 801c35a:	46bd      	mov	sp, r7
 801c35c:	bd80      	pop	{r7, pc}
	...

0801c360 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801c360:	b580      	push	{r7, lr}
 801c362:	b086      	sub	sp, #24
 801c364:	af00      	add	r7, sp, #0
 801c366:	60f8      	str	r0, [r7, #12]
 801c368:	60b9      	str	r1, [r7, #8]
 801c36a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c36c:	2300      	movs	r3, #0
 801c36e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801c370:	68fb      	ldr	r3, [r7, #12]
 801c372:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801c376:	2b01      	cmp	r3, #1
 801c378:	d101      	bne.n	801c37e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801c37a:	2302      	movs	r3, #2
 801c37c:	e0ff      	b.n	801c57e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801c37e:	68fb      	ldr	r3, [r7, #12]
 801c380:	2201      	movs	r2, #1
 801c382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801c386:	687b      	ldr	r3, [r7, #4]
 801c388:	2b14      	cmp	r3, #20
 801c38a:	f200 80f0 	bhi.w	801c56e <HAL_TIM_PWM_ConfigChannel+0x20e>
 801c38e:	a201      	add	r2, pc, #4	@ (adr r2, 801c394 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801c390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c394:	0801c3e9 	.word	0x0801c3e9
 801c398:	0801c56f 	.word	0x0801c56f
 801c39c:	0801c56f 	.word	0x0801c56f
 801c3a0:	0801c56f 	.word	0x0801c56f
 801c3a4:	0801c429 	.word	0x0801c429
 801c3a8:	0801c56f 	.word	0x0801c56f
 801c3ac:	0801c56f 	.word	0x0801c56f
 801c3b0:	0801c56f 	.word	0x0801c56f
 801c3b4:	0801c46b 	.word	0x0801c46b
 801c3b8:	0801c56f 	.word	0x0801c56f
 801c3bc:	0801c56f 	.word	0x0801c56f
 801c3c0:	0801c56f 	.word	0x0801c56f
 801c3c4:	0801c4ab 	.word	0x0801c4ab
 801c3c8:	0801c56f 	.word	0x0801c56f
 801c3cc:	0801c56f 	.word	0x0801c56f
 801c3d0:	0801c56f 	.word	0x0801c56f
 801c3d4:	0801c4ed 	.word	0x0801c4ed
 801c3d8:	0801c56f 	.word	0x0801c56f
 801c3dc:	0801c56f 	.word	0x0801c56f
 801c3e0:	0801c56f 	.word	0x0801c56f
 801c3e4:	0801c52d 	.word	0x0801c52d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801c3e8:	68fb      	ldr	r3, [r7, #12]
 801c3ea:	681b      	ldr	r3, [r3, #0]
 801c3ec:	68b9      	ldr	r1, [r7, #8]
 801c3ee:	4618      	mov	r0, r3
 801c3f0:	f000 fa90 	bl	801c914 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801c3f4:	68fb      	ldr	r3, [r7, #12]
 801c3f6:	681b      	ldr	r3, [r3, #0]
 801c3f8:	699a      	ldr	r2, [r3, #24]
 801c3fa:	68fb      	ldr	r3, [r7, #12]
 801c3fc:	681b      	ldr	r3, [r3, #0]
 801c3fe:	f042 0208 	orr.w	r2, r2, #8
 801c402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801c404:	68fb      	ldr	r3, [r7, #12]
 801c406:	681b      	ldr	r3, [r3, #0]
 801c408:	699a      	ldr	r2, [r3, #24]
 801c40a:	68fb      	ldr	r3, [r7, #12]
 801c40c:	681b      	ldr	r3, [r3, #0]
 801c40e:	f022 0204 	bic.w	r2, r2, #4
 801c412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801c414:	68fb      	ldr	r3, [r7, #12]
 801c416:	681b      	ldr	r3, [r3, #0]
 801c418:	6999      	ldr	r1, [r3, #24]
 801c41a:	68bb      	ldr	r3, [r7, #8]
 801c41c:	691a      	ldr	r2, [r3, #16]
 801c41e:	68fb      	ldr	r3, [r7, #12]
 801c420:	681b      	ldr	r3, [r3, #0]
 801c422:	430a      	orrs	r2, r1
 801c424:	619a      	str	r2, [r3, #24]
      break;
 801c426:	e0a5      	b.n	801c574 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801c428:	68fb      	ldr	r3, [r7, #12]
 801c42a:	681b      	ldr	r3, [r3, #0]
 801c42c:	68b9      	ldr	r1, [r7, #8]
 801c42e:	4618      	mov	r0, r3
 801c430:	f000 fb00 	bl	801ca34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801c434:	68fb      	ldr	r3, [r7, #12]
 801c436:	681b      	ldr	r3, [r3, #0]
 801c438:	699a      	ldr	r2, [r3, #24]
 801c43a:	68fb      	ldr	r3, [r7, #12]
 801c43c:	681b      	ldr	r3, [r3, #0]
 801c43e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801c442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801c444:	68fb      	ldr	r3, [r7, #12]
 801c446:	681b      	ldr	r3, [r3, #0]
 801c448:	699a      	ldr	r2, [r3, #24]
 801c44a:	68fb      	ldr	r3, [r7, #12]
 801c44c:	681b      	ldr	r3, [r3, #0]
 801c44e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801c452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801c454:	68fb      	ldr	r3, [r7, #12]
 801c456:	681b      	ldr	r3, [r3, #0]
 801c458:	6999      	ldr	r1, [r3, #24]
 801c45a:	68bb      	ldr	r3, [r7, #8]
 801c45c:	691b      	ldr	r3, [r3, #16]
 801c45e:	021a      	lsls	r2, r3, #8
 801c460:	68fb      	ldr	r3, [r7, #12]
 801c462:	681b      	ldr	r3, [r3, #0]
 801c464:	430a      	orrs	r2, r1
 801c466:	619a      	str	r2, [r3, #24]
      break;
 801c468:	e084      	b.n	801c574 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801c46a:	68fb      	ldr	r3, [r7, #12]
 801c46c:	681b      	ldr	r3, [r3, #0]
 801c46e:	68b9      	ldr	r1, [r7, #8]
 801c470:	4618      	mov	r0, r3
 801c472:	f000 fb69 	bl	801cb48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801c476:	68fb      	ldr	r3, [r7, #12]
 801c478:	681b      	ldr	r3, [r3, #0]
 801c47a:	69da      	ldr	r2, [r3, #28]
 801c47c:	68fb      	ldr	r3, [r7, #12]
 801c47e:	681b      	ldr	r3, [r3, #0]
 801c480:	f042 0208 	orr.w	r2, r2, #8
 801c484:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801c486:	68fb      	ldr	r3, [r7, #12]
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	69da      	ldr	r2, [r3, #28]
 801c48c:	68fb      	ldr	r3, [r7, #12]
 801c48e:	681b      	ldr	r3, [r3, #0]
 801c490:	f022 0204 	bic.w	r2, r2, #4
 801c494:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801c496:	68fb      	ldr	r3, [r7, #12]
 801c498:	681b      	ldr	r3, [r3, #0]
 801c49a:	69d9      	ldr	r1, [r3, #28]
 801c49c:	68bb      	ldr	r3, [r7, #8]
 801c49e:	691a      	ldr	r2, [r3, #16]
 801c4a0:	68fb      	ldr	r3, [r7, #12]
 801c4a2:	681b      	ldr	r3, [r3, #0]
 801c4a4:	430a      	orrs	r2, r1
 801c4a6:	61da      	str	r2, [r3, #28]
      break;
 801c4a8:	e064      	b.n	801c574 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801c4aa:	68fb      	ldr	r3, [r7, #12]
 801c4ac:	681b      	ldr	r3, [r3, #0]
 801c4ae:	68b9      	ldr	r1, [r7, #8]
 801c4b0:	4618      	mov	r0, r3
 801c4b2:	f000 fbd1 	bl	801cc58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801c4b6:	68fb      	ldr	r3, [r7, #12]
 801c4b8:	681b      	ldr	r3, [r3, #0]
 801c4ba:	69da      	ldr	r2, [r3, #28]
 801c4bc:	68fb      	ldr	r3, [r7, #12]
 801c4be:	681b      	ldr	r3, [r3, #0]
 801c4c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801c4c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801c4c6:	68fb      	ldr	r3, [r7, #12]
 801c4c8:	681b      	ldr	r3, [r3, #0]
 801c4ca:	69da      	ldr	r2, [r3, #28]
 801c4cc:	68fb      	ldr	r3, [r7, #12]
 801c4ce:	681b      	ldr	r3, [r3, #0]
 801c4d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801c4d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801c4d6:	68fb      	ldr	r3, [r7, #12]
 801c4d8:	681b      	ldr	r3, [r3, #0]
 801c4da:	69d9      	ldr	r1, [r3, #28]
 801c4dc:	68bb      	ldr	r3, [r7, #8]
 801c4de:	691b      	ldr	r3, [r3, #16]
 801c4e0:	021a      	lsls	r2, r3, #8
 801c4e2:	68fb      	ldr	r3, [r7, #12]
 801c4e4:	681b      	ldr	r3, [r3, #0]
 801c4e6:	430a      	orrs	r2, r1
 801c4e8:	61da      	str	r2, [r3, #28]
      break;
 801c4ea:	e043      	b.n	801c574 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801c4ec:	68fb      	ldr	r3, [r7, #12]
 801c4ee:	681b      	ldr	r3, [r3, #0]
 801c4f0:	68b9      	ldr	r1, [r7, #8]
 801c4f2:	4618      	mov	r0, r3
 801c4f4:	f000 fc1a 	bl	801cd2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801c4f8:	68fb      	ldr	r3, [r7, #12]
 801c4fa:	681b      	ldr	r3, [r3, #0]
 801c4fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801c4fe:	68fb      	ldr	r3, [r7, #12]
 801c500:	681b      	ldr	r3, [r3, #0]
 801c502:	f042 0208 	orr.w	r2, r2, #8
 801c506:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801c508:	68fb      	ldr	r3, [r7, #12]
 801c50a:	681b      	ldr	r3, [r3, #0]
 801c50c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801c50e:	68fb      	ldr	r3, [r7, #12]
 801c510:	681b      	ldr	r3, [r3, #0]
 801c512:	f022 0204 	bic.w	r2, r2, #4
 801c516:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801c518:	68fb      	ldr	r3, [r7, #12]
 801c51a:	681b      	ldr	r3, [r3, #0]
 801c51c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801c51e:	68bb      	ldr	r3, [r7, #8]
 801c520:	691a      	ldr	r2, [r3, #16]
 801c522:	68fb      	ldr	r3, [r7, #12]
 801c524:	681b      	ldr	r3, [r3, #0]
 801c526:	430a      	orrs	r2, r1
 801c528:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801c52a:	e023      	b.n	801c574 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801c52c:	68fb      	ldr	r3, [r7, #12]
 801c52e:	681b      	ldr	r3, [r3, #0]
 801c530:	68b9      	ldr	r1, [r7, #8]
 801c532:	4618      	mov	r0, r3
 801c534:	f000 fc5e 	bl	801cdf4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801c538:	68fb      	ldr	r3, [r7, #12]
 801c53a:	681b      	ldr	r3, [r3, #0]
 801c53c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801c53e:	68fb      	ldr	r3, [r7, #12]
 801c540:	681b      	ldr	r3, [r3, #0]
 801c542:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801c546:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801c548:	68fb      	ldr	r3, [r7, #12]
 801c54a:	681b      	ldr	r3, [r3, #0]
 801c54c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801c54e:	68fb      	ldr	r3, [r7, #12]
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801c556:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801c558:	68fb      	ldr	r3, [r7, #12]
 801c55a:	681b      	ldr	r3, [r3, #0]
 801c55c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801c55e:	68bb      	ldr	r3, [r7, #8]
 801c560:	691b      	ldr	r3, [r3, #16]
 801c562:	021a      	lsls	r2, r3, #8
 801c564:	68fb      	ldr	r3, [r7, #12]
 801c566:	681b      	ldr	r3, [r3, #0]
 801c568:	430a      	orrs	r2, r1
 801c56a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801c56c:	e002      	b.n	801c574 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801c56e:	2301      	movs	r3, #1
 801c570:	75fb      	strb	r3, [r7, #23]
      break;
 801c572:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801c574:	68fb      	ldr	r3, [r7, #12]
 801c576:	2200      	movs	r2, #0
 801c578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801c57c:	7dfb      	ldrb	r3, [r7, #23]
}
 801c57e:	4618      	mov	r0, r3
 801c580:	3718      	adds	r7, #24
 801c582:	46bd      	mov	sp, r7
 801c584:	bd80      	pop	{r7, pc}
 801c586:	bf00      	nop

0801c588 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801c588:	b580      	push	{r7, lr}
 801c58a:	b084      	sub	sp, #16
 801c58c:	af00      	add	r7, sp, #0
 801c58e:	6078      	str	r0, [r7, #4]
 801c590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801c592:	2300      	movs	r3, #0
 801c594:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801c596:	687b      	ldr	r3, [r7, #4]
 801c598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801c59c:	2b01      	cmp	r3, #1
 801c59e:	d101      	bne.n	801c5a4 <HAL_TIM_ConfigClockSource+0x1c>
 801c5a0:	2302      	movs	r3, #2
 801c5a2:	e0dc      	b.n	801c75e <HAL_TIM_ConfigClockSource+0x1d6>
 801c5a4:	687b      	ldr	r3, [r7, #4]
 801c5a6:	2201      	movs	r2, #1
 801c5a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	2202      	movs	r2, #2
 801c5b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	681b      	ldr	r3, [r3, #0]
 801c5b8:	689b      	ldr	r3, [r3, #8]
 801c5ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801c5bc:	68ba      	ldr	r2, [r7, #8]
 801c5be:	4b6a      	ldr	r3, [pc, #424]	@ (801c768 <HAL_TIM_ConfigClockSource+0x1e0>)
 801c5c0:	4013      	ands	r3, r2
 801c5c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801c5c4:	68bb      	ldr	r3, [r7, #8]
 801c5c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801c5ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	681b      	ldr	r3, [r3, #0]
 801c5d0:	68ba      	ldr	r2, [r7, #8]
 801c5d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801c5d4:	683b      	ldr	r3, [r7, #0]
 801c5d6:	681b      	ldr	r3, [r3, #0]
 801c5d8:	4a64      	ldr	r2, [pc, #400]	@ (801c76c <HAL_TIM_ConfigClockSource+0x1e4>)
 801c5da:	4293      	cmp	r3, r2
 801c5dc:	f000 80a9 	beq.w	801c732 <HAL_TIM_ConfigClockSource+0x1aa>
 801c5e0:	4a62      	ldr	r2, [pc, #392]	@ (801c76c <HAL_TIM_ConfigClockSource+0x1e4>)
 801c5e2:	4293      	cmp	r3, r2
 801c5e4:	f200 80ae 	bhi.w	801c744 <HAL_TIM_ConfigClockSource+0x1bc>
 801c5e8:	4a61      	ldr	r2, [pc, #388]	@ (801c770 <HAL_TIM_ConfigClockSource+0x1e8>)
 801c5ea:	4293      	cmp	r3, r2
 801c5ec:	f000 80a1 	beq.w	801c732 <HAL_TIM_ConfigClockSource+0x1aa>
 801c5f0:	4a5f      	ldr	r2, [pc, #380]	@ (801c770 <HAL_TIM_ConfigClockSource+0x1e8>)
 801c5f2:	4293      	cmp	r3, r2
 801c5f4:	f200 80a6 	bhi.w	801c744 <HAL_TIM_ConfigClockSource+0x1bc>
 801c5f8:	4a5e      	ldr	r2, [pc, #376]	@ (801c774 <HAL_TIM_ConfigClockSource+0x1ec>)
 801c5fa:	4293      	cmp	r3, r2
 801c5fc:	f000 8099 	beq.w	801c732 <HAL_TIM_ConfigClockSource+0x1aa>
 801c600:	4a5c      	ldr	r2, [pc, #368]	@ (801c774 <HAL_TIM_ConfigClockSource+0x1ec>)
 801c602:	4293      	cmp	r3, r2
 801c604:	f200 809e 	bhi.w	801c744 <HAL_TIM_ConfigClockSource+0x1bc>
 801c608:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801c60c:	f000 8091 	beq.w	801c732 <HAL_TIM_ConfigClockSource+0x1aa>
 801c610:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801c614:	f200 8096 	bhi.w	801c744 <HAL_TIM_ConfigClockSource+0x1bc>
 801c618:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801c61c:	f000 8089 	beq.w	801c732 <HAL_TIM_ConfigClockSource+0x1aa>
 801c620:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801c624:	f200 808e 	bhi.w	801c744 <HAL_TIM_ConfigClockSource+0x1bc>
 801c628:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c62c:	d03e      	beq.n	801c6ac <HAL_TIM_ConfigClockSource+0x124>
 801c62e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c632:	f200 8087 	bhi.w	801c744 <HAL_TIM_ConfigClockSource+0x1bc>
 801c636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801c63a:	f000 8086 	beq.w	801c74a <HAL_TIM_ConfigClockSource+0x1c2>
 801c63e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801c642:	d87f      	bhi.n	801c744 <HAL_TIM_ConfigClockSource+0x1bc>
 801c644:	2b70      	cmp	r3, #112	@ 0x70
 801c646:	d01a      	beq.n	801c67e <HAL_TIM_ConfigClockSource+0xf6>
 801c648:	2b70      	cmp	r3, #112	@ 0x70
 801c64a:	d87b      	bhi.n	801c744 <HAL_TIM_ConfigClockSource+0x1bc>
 801c64c:	2b60      	cmp	r3, #96	@ 0x60
 801c64e:	d050      	beq.n	801c6f2 <HAL_TIM_ConfigClockSource+0x16a>
 801c650:	2b60      	cmp	r3, #96	@ 0x60
 801c652:	d877      	bhi.n	801c744 <HAL_TIM_ConfigClockSource+0x1bc>
 801c654:	2b50      	cmp	r3, #80	@ 0x50
 801c656:	d03c      	beq.n	801c6d2 <HAL_TIM_ConfigClockSource+0x14a>
 801c658:	2b50      	cmp	r3, #80	@ 0x50
 801c65a:	d873      	bhi.n	801c744 <HAL_TIM_ConfigClockSource+0x1bc>
 801c65c:	2b40      	cmp	r3, #64	@ 0x40
 801c65e:	d058      	beq.n	801c712 <HAL_TIM_ConfigClockSource+0x18a>
 801c660:	2b40      	cmp	r3, #64	@ 0x40
 801c662:	d86f      	bhi.n	801c744 <HAL_TIM_ConfigClockSource+0x1bc>
 801c664:	2b30      	cmp	r3, #48	@ 0x30
 801c666:	d064      	beq.n	801c732 <HAL_TIM_ConfigClockSource+0x1aa>
 801c668:	2b30      	cmp	r3, #48	@ 0x30
 801c66a:	d86b      	bhi.n	801c744 <HAL_TIM_ConfigClockSource+0x1bc>
 801c66c:	2b20      	cmp	r3, #32
 801c66e:	d060      	beq.n	801c732 <HAL_TIM_ConfigClockSource+0x1aa>
 801c670:	2b20      	cmp	r3, #32
 801c672:	d867      	bhi.n	801c744 <HAL_TIM_ConfigClockSource+0x1bc>
 801c674:	2b00      	cmp	r3, #0
 801c676:	d05c      	beq.n	801c732 <HAL_TIM_ConfigClockSource+0x1aa>
 801c678:	2b10      	cmp	r3, #16
 801c67a:	d05a      	beq.n	801c732 <HAL_TIM_ConfigClockSource+0x1aa>
 801c67c:	e062      	b.n	801c744 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801c682:	683b      	ldr	r3, [r7, #0]
 801c684:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801c686:	683b      	ldr	r3, [r7, #0]
 801c688:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801c68a:	683b      	ldr	r3, [r7, #0]
 801c68c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801c68e:	f000 fc95 	bl	801cfbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	681b      	ldr	r3, [r3, #0]
 801c696:	689b      	ldr	r3, [r3, #8]
 801c698:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801c69a:	68bb      	ldr	r3, [r7, #8]
 801c69c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801c6a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	681b      	ldr	r3, [r3, #0]
 801c6a6:	68ba      	ldr	r2, [r7, #8]
 801c6a8:	609a      	str	r2, [r3, #8]
      break;
 801c6aa:	e04f      	b.n	801c74c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801c6ac:	687b      	ldr	r3, [r7, #4]
 801c6ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801c6b0:	683b      	ldr	r3, [r7, #0]
 801c6b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801c6b4:	683b      	ldr	r3, [r7, #0]
 801c6b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801c6b8:	683b      	ldr	r3, [r7, #0]
 801c6ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801c6bc:	f000 fc7e 	bl	801cfbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801c6c0:	687b      	ldr	r3, [r7, #4]
 801c6c2:	681b      	ldr	r3, [r3, #0]
 801c6c4:	689a      	ldr	r2, [r3, #8]
 801c6c6:	687b      	ldr	r3, [r7, #4]
 801c6c8:	681b      	ldr	r3, [r3, #0]
 801c6ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801c6ce:	609a      	str	r2, [r3, #8]
      break;
 801c6d0:	e03c      	b.n	801c74c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801c6d2:	687b      	ldr	r3, [r7, #4]
 801c6d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801c6d6:	683b      	ldr	r3, [r7, #0]
 801c6d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801c6da:	683b      	ldr	r3, [r7, #0]
 801c6dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801c6de:	461a      	mov	r2, r3
 801c6e0:	f000 fbee 	bl	801cec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	681b      	ldr	r3, [r3, #0]
 801c6e8:	2150      	movs	r1, #80	@ 0x50
 801c6ea:	4618      	mov	r0, r3
 801c6ec:	f000 fc48 	bl	801cf80 <TIM_ITRx_SetConfig>
      break;
 801c6f0:	e02c      	b.n	801c74c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801c6f2:	687b      	ldr	r3, [r7, #4]
 801c6f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801c6f6:	683b      	ldr	r3, [r7, #0]
 801c6f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801c6fa:	683b      	ldr	r3, [r7, #0]
 801c6fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801c6fe:	461a      	mov	r2, r3
 801c700:	f000 fc0d 	bl	801cf1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801c704:	687b      	ldr	r3, [r7, #4]
 801c706:	681b      	ldr	r3, [r3, #0]
 801c708:	2160      	movs	r1, #96	@ 0x60
 801c70a:	4618      	mov	r0, r3
 801c70c:	f000 fc38 	bl	801cf80 <TIM_ITRx_SetConfig>
      break;
 801c710:	e01c      	b.n	801c74c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801c716:	683b      	ldr	r3, [r7, #0]
 801c718:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801c71a:	683b      	ldr	r3, [r7, #0]
 801c71c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801c71e:	461a      	mov	r2, r3
 801c720:	f000 fbce 	bl	801cec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801c724:	687b      	ldr	r3, [r7, #4]
 801c726:	681b      	ldr	r3, [r3, #0]
 801c728:	2140      	movs	r1, #64	@ 0x40
 801c72a:	4618      	mov	r0, r3
 801c72c:	f000 fc28 	bl	801cf80 <TIM_ITRx_SetConfig>
      break;
 801c730:	e00c      	b.n	801c74c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801c732:	687b      	ldr	r3, [r7, #4]
 801c734:	681a      	ldr	r2, [r3, #0]
 801c736:	683b      	ldr	r3, [r7, #0]
 801c738:	681b      	ldr	r3, [r3, #0]
 801c73a:	4619      	mov	r1, r3
 801c73c:	4610      	mov	r0, r2
 801c73e:	f000 fc1f 	bl	801cf80 <TIM_ITRx_SetConfig>
      break;
 801c742:	e003      	b.n	801c74c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801c744:	2301      	movs	r3, #1
 801c746:	73fb      	strb	r3, [r7, #15]
      break;
 801c748:	e000      	b.n	801c74c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801c74a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801c74c:	687b      	ldr	r3, [r7, #4]
 801c74e:	2201      	movs	r2, #1
 801c750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801c754:	687b      	ldr	r3, [r7, #4]
 801c756:	2200      	movs	r2, #0
 801c758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801c75c:	7bfb      	ldrb	r3, [r7, #15]
}
 801c75e:	4618      	mov	r0, r3
 801c760:	3710      	adds	r7, #16
 801c762:	46bd      	mov	sp, r7
 801c764:	bd80      	pop	{r7, pc}
 801c766:	bf00      	nop
 801c768:	ffceff88 	.word	0xffceff88
 801c76c:	00100040 	.word	0x00100040
 801c770:	00100030 	.word	0x00100030
 801c774:	00100020 	.word	0x00100020

0801c778 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801c778:	b480      	push	{r7}
 801c77a:	b083      	sub	sp, #12
 801c77c:	af00      	add	r7, sp, #0
 801c77e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801c780:	bf00      	nop
 801c782:	370c      	adds	r7, #12
 801c784:	46bd      	mov	sp, r7
 801c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c78a:	4770      	bx	lr

0801c78c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801c78c:	b480      	push	{r7}
 801c78e:	b083      	sub	sp, #12
 801c790:	af00      	add	r7, sp, #0
 801c792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801c794:	bf00      	nop
 801c796:	370c      	adds	r7, #12
 801c798:	46bd      	mov	sp, r7
 801c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c79e:	4770      	bx	lr

0801c7a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801c7a0:	b480      	push	{r7}
 801c7a2:	b083      	sub	sp, #12
 801c7a4:	af00      	add	r7, sp, #0
 801c7a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801c7a8:	bf00      	nop
 801c7aa:	370c      	adds	r7, #12
 801c7ac:	46bd      	mov	sp, r7
 801c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7b2:	4770      	bx	lr

0801c7b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801c7b4:	b480      	push	{r7}
 801c7b6:	b083      	sub	sp, #12
 801c7b8:	af00      	add	r7, sp, #0
 801c7ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801c7bc:	bf00      	nop
 801c7be:	370c      	adds	r7, #12
 801c7c0:	46bd      	mov	sp, r7
 801c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7c6:	4770      	bx	lr

0801c7c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801c7c8:	b480      	push	{r7}
 801c7ca:	b085      	sub	sp, #20
 801c7cc:	af00      	add	r7, sp, #0
 801c7ce:	6078      	str	r0, [r7, #4]
 801c7d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801c7d2:	687b      	ldr	r3, [r7, #4]
 801c7d4:	681b      	ldr	r3, [r3, #0]
 801c7d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801c7d8:	687b      	ldr	r3, [r7, #4]
 801c7da:	4a44      	ldr	r2, [pc, #272]	@ (801c8ec <TIM_Base_SetConfig+0x124>)
 801c7dc:	4293      	cmp	r3, r2
 801c7de:	d013      	beq.n	801c808 <TIM_Base_SetConfig+0x40>
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801c7e6:	d00f      	beq.n	801c808 <TIM_Base_SetConfig+0x40>
 801c7e8:	687b      	ldr	r3, [r7, #4]
 801c7ea:	4a41      	ldr	r2, [pc, #260]	@ (801c8f0 <TIM_Base_SetConfig+0x128>)
 801c7ec:	4293      	cmp	r3, r2
 801c7ee:	d00b      	beq.n	801c808 <TIM_Base_SetConfig+0x40>
 801c7f0:	687b      	ldr	r3, [r7, #4]
 801c7f2:	4a40      	ldr	r2, [pc, #256]	@ (801c8f4 <TIM_Base_SetConfig+0x12c>)
 801c7f4:	4293      	cmp	r3, r2
 801c7f6:	d007      	beq.n	801c808 <TIM_Base_SetConfig+0x40>
 801c7f8:	687b      	ldr	r3, [r7, #4]
 801c7fa:	4a3f      	ldr	r2, [pc, #252]	@ (801c8f8 <TIM_Base_SetConfig+0x130>)
 801c7fc:	4293      	cmp	r3, r2
 801c7fe:	d003      	beq.n	801c808 <TIM_Base_SetConfig+0x40>
 801c800:	687b      	ldr	r3, [r7, #4]
 801c802:	4a3e      	ldr	r2, [pc, #248]	@ (801c8fc <TIM_Base_SetConfig+0x134>)
 801c804:	4293      	cmp	r3, r2
 801c806:	d108      	bne.n	801c81a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801c808:	68fb      	ldr	r3, [r7, #12]
 801c80a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801c80e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801c810:	683b      	ldr	r3, [r7, #0]
 801c812:	685b      	ldr	r3, [r3, #4]
 801c814:	68fa      	ldr	r2, [r7, #12]
 801c816:	4313      	orrs	r3, r2
 801c818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801c81a:	687b      	ldr	r3, [r7, #4]
 801c81c:	4a33      	ldr	r2, [pc, #204]	@ (801c8ec <TIM_Base_SetConfig+0x124>)
 801c81e:	4293      	cmp	r3, r2
 801c820:	d027      	beq.n	801c872 <TIM_Base_SetConfig+0xaa>
 801c822:	687b      	ldr	r3, [r7, #4]
 801c824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801c828:	d023      	beq.n	801c872 <TIM_Base_SetConfig+0xaa>
 801c82a:	687b      	ldr	r3, [r7, #4]
 801c82c:	4a30      	ldr	r2, [pc, #192]	@ (801c8f0 <TIM_Base_SetConfig+0x128>)
 801c82e:	4293      	cmp	r3, r2
 801c830:	d01f      	beq.n	801c872 <TIM_Base_SetConfig+0xaa>
 801c832:	687b      	ldr	r3, [r7, #4]
 801c834:	4a2f      	ldr	r2, [pc, #188]	@ (801c8f4 <TIM_Base_SetConfig+0x12c>)
 801c836:	4293      	cmp	r3, r2
 801c838:	d01b      	beq.n	801c872 <TIM_Base_SetConfig+0xaa>
 801c83a:	687b      	ldr	r3, [r7, #4]
 801c83c:	4a2e      	ldr	r2, [pc, #184]	@ (801c8f8 <TIM_Base_SetConfig+0x130>)
 801c83e:	4293      	cmp	r3, r2
 801c840:	d017      	beq.n	801c872 <TIM_Base_SetConfig+0xaa>
 801c842:	687b      	ldr	r3, [r7, #4]
 801c844:	4a2d      	ldr	r2, [pc, #180]	@ (801c8fc <TIM_Base_SetConfig+0x134>)
 801c846:	4293      	cmp	r3, r2
 801c848:	d013      	beq.n	801c872 <TIM_Base_SetConfig+0xaa>
 801c84a:	687b      	ldr	r3, [r7, #4]
 801c84c:	4a2c      	ldr	r2, [pc, #176]	@ (801c900 <TIM_Base_SetConfig+0x138>)
 801c84e:	4293      	cmp	r3, r2
 801c850:	d00f      	beq.n	801c872 <TIM_Base_SetConfig+0xaa>
 801c852:	687b      	ldr	r3, [r7, #4]
 801c854:	4a2b      	ldr	r2, [pc, #172]	@ (801c904 <TIM_Base_SetConfig+0x13c>)
 801c856:	4293      	cmp	r3, r2
 801c858:	d00b      	beq.n	801c872 <TIM_Base_SetConfig+0xaa>
 801c85a:	687b      	ldr	r3, [r7, #4]
 801c85c:	4a2a      	ldr	r2, [pc, #168]	@ (801c908 <TIM_Base_SetConfig+0x140>)
 801c85e:	4293      	cmp	r3, r2
 801c860:	d007      	beq.n	801c872 <TIM_Base_SetConfig+0xaa>
 801c862:	687b      	ldr	r3, [r7, #4]
 801c864:	4a29      	ldr	r2, [pc, #164]	@ (801c90c <TIM_Base_SetConfig+0x144>)
 801c866:	4293      	cmp	r3, r2
 801c868:	d003      	beq.n	801c872 <TIM_Base_SetConfig+0xaa>
 801c86a:	687b      	ldr	r3, [r7, #4]
 801c86c:	4a28      	ldr	r2, [pc, #160]	@ (801c910 <TIM_Base_SetConfig+0x148>)
 801c86e:	4293      	cmp	r3, r2
 801c870:	d108      	bne.n	801c884 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801c872:	68fb      	ldr	r3, [r7, #12]
 801c874:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801c878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801c87a:	683b      	ldr	r3, [r7, #0]
 801c87c:	68db      	ldr	r3, [r3, #12]
 801c87e:	68fa      	ldr	r2, [r7, #12]
 801c880:	4313      	orrs	r3, r2
 801c882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801c884:	68fb      	ldr	r3, [r7, #12]
 801c886:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801c88a:	683b      	ldr	r3, [r7, #0]
 801c88c:	695b      	ldr	r3, [r3, #20]
 801c88e:	4313      	orrs	r3, r2
 801c890:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801c892:	687b      	ldr	r3, [r7, #4]
 801c894:	68fa      	ldr	r2, [r7, #12]
 801c896:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801c898:	683b      	ldr	r3, [r7, #0]
 801c89a:	689a      	ldr	r2, [r3, #8]
 801c89c:	687b      	ldr	r3, [r7, #4]
 801c89e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801c8a0:	683b      	ldr	r3, [r7, #0]
 801c8a2:	681a      	ldr	r2, [r3, #0]
 801c8a4:	687b      	ldr	r3, [r7, #4]
 801c8a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801c8a8:	687b      	ldr	r3, [r7, #4]
 801c8aa:	4a10      	ldr	r2, [pc, #64]	@ (801c8ec <TIM_Base_SetConfig+0x124>)
 801c8ac:	4293      	cmp	r3, r2
 801c8ae:	d00f      	beq.n	801c8d0 <TIM_Base_SetConfig+0x108>
 801c8b0:	687b      	ldr	r3, [r7, #4]
 801c8b2:	4a12      	ldr	r2, [pc, #72]	@ (801c8fc <TIM_Base_SetConfig+0x134>)
 801c8b4:	4293      	cmp	r3, r2
 801c8b6:	d00b      	beq.n	801c8d0 <TIM_Base_SetConfig+0x108>
 801c8b8:	687b      	ldr	r3, [r7, #4]
 801c8ba:	4a11      	ldr	r2, [pc, #68]	@ (801c900 <TIM_Base_SetConfig+0x138>)
 801c8bc:	4293      	cmp	r3, r2
 801c8be:	d007      	beq.n	801c8d0 <TIM_Base_SetConfig+0x108>
 801c8c0:	687b      	ldr	r3, [r7, #4]
 801c8c2:	4a10      	ldr	r2, [pc, #64]	@ (801c904 <TIM_Base_SetConfig+0x13c>)
 801c8c4:	4293      	cmp	r3, r2
 801c8c6:	d003      	beq.n	801c8d0 <TIM_Base_SetConfig+0x108>
 801c8c8:	687b      	ldr	r3, [r7, #4]
 801c8ca:	4a0f      	ldr	r2, [pc, #60]	@ (801c908 <TIM_Base_SetConfig+0x140>)
 801c8cc:	4293      	cmp	r3, r2
 801c8ce:	d103      	bne.n	801c8d8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801c8d0:	683b      	ldr	r3, [r7, #0]
 801c8d2:	691a      	ldr	r2, [r3, #16]
 801c8d4:	687b      	ldr	r3, [r7, #4]
 801c8d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801c8d8:	687b      	ldr	r3, [r7, #4]
 801c8da:	2201      	movs	r2, #1
 801c8dc:	615a      	str	r2, [r3, #20]
}
 801c8de:	bf00      	nop
 801c8e0:	3714      	adds	r7, #20
 801c8e2:	46bd      	mov	sp, r7
 801c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8e8:	4770      	bx	lr
 801c8ea:	bf00      	nop
 801c8ec:	40010000 	.word	0x40010000
 801c8f0:	40000400 	.word	0x40000400
 801c8f4:	40000800 	.word	0x40000800
 801c8f8:	40000c00 	.word	0x40000c00
 801c8fc:	40010400 	.word	0x40010400
 801c900:	40014000 	.word	0x40014000
 801c904:	40014400 	.word	0x40014400
 801c908:	40014800 	.word	0x40014800
 801c90c:	4000e000 	.word	0x4000e000
 801c910:	4000e400 	.word	0x4000e400

0801c914 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c914:	b480      	push	{r7}
 801c916:	b087      	sub	sp, #28
 801c918:	af00      	add	r7, sp, #0
 801c91a:	6078      	str	r0, [r7, #4]
 801c91c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801c91e:	687b      	ldr	r3, [r7, #4]
 801c920:	6a1b      	ldr	r3, [r3, #32]
 801c922:	f023 0201 	bic.w	r2, r3, #1
 801c926:	687b      	ldr	r3, [r7, #4]
 801c928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c92a:	687b      	ldr	r3, [r7, #4]
 801c92c:	6a1b      	ldr	r3, [r3, #32]
 801c92e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c930:	687b      	ldr	r3, [r7, #4]
 801c932:	685b      	ldr	r3, [r3, #4]
 801c934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801c936:	687b      	ldr	r3, [r7, #4]
 801c938:	699b      	ldr	r3, [r3, #24]
 801c93a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801c93c:	68fa      	ldr	r2, [r7, #12]
 801c93e:	4b37      	ldr	r3, [pc, #220]	@ (801ca1c <TIM_OC1_SetConfig+0x108>)
 801c940:	4013      	ands	r3, r2
 801c942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801c944:	68fb      	ldr	r3, [r7, #12]
 801c946:	f023 0303 	bic.w	r3, r3, #3
 801c94a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801c94c:	683b      	ldr	r3, [r7, #0]
 801c94e:	681b      	ldr	r3, [r3, #0]
 801c950:	68fa      	ldr	r2, [r7, #12]
 801c952:	4313      	orrs	r3, r2
 801c954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801c956:	697b      	ldr	r3, [r7, #20]
 801c958:	f023 0302 	bic.w	r3, r3, #2
 801c95c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801c95e:	683b      	ldr	r3, [r7, #0]
 801c960:	689b      	ldr	r3, [r3, #8]
 801c962:	697a      	ldr	r2, [r7, #20]
 801c964:	4313      	orrs	r3, r2
 801c966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801c968:	687b      	ldr	r3, [r7, #4]
 801c96a:	4a2d      	ldr	r2, [pc, #180]	@ (801ca20 <TIM_OC1_SetConfig+0x10c>)
 801c96c:	4293      	cmp	r3, r2
 801c96e:	d00f      	beq.n	801c990 <TIM_OC1_SetConfig+0x7c>
 801c970:	687b      	ldr	r3, [r7, #4]
 801c972:	4a2c      	ldr	r2, [pc, #176]	@ (801ca24 <TIM_OC1_SetConfig+0x110>)
 801c974:	4293      	cmp	r3, r2
 801c976:	d00b      	beq.n	801c990 <TIM_OC1_SetConfig+0x7c>
 801c978:	687b      	ldr	r3, [r7, #4]
 801c97a:	4a2b      	ldr	r2, [pc, #172]	@ (801ca28 <TIM_OC1_SetConfig+0x114>)
 801c97c:	4293      	cmp	r3, r2
 801c97e:	d007      	beq.n	801c990 <TIM_OC1_SetConfig+0x7c>
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	4a2a      	ldr	r2, [pc, #168]	@ (801ca2c <TIM_OC1_SetConfig+0x118>)
 801c984:	4293      	cmp	r3, r2
 801c986:	d003      	beq.n	801c990 <TIM_OC1_SetConfig+0x7c>
 801c988:	687b      	ldr	r3, [r7, #4]
 801c98a:	4a29      	ldr	r2, [pc, #164]	@ (801ca30 <TIM_OC1_SetConfig+0x11c>)
 801c98c:	4293      	cmp	r3, r2
 801c98e:	d10c      	bne.n	801c9aa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801c990:	697b      	ldr	r3, [r7, #20]
 801c992:	f023 0308 	bic.w	r3, r3, #8
 801c996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801c998:	683b      	ldr	r3, [r7, #0]
 801c99a:	68db      	ldr	r3, [r3, #12]
 801c99c:	697a      	ldr	r2, [r7, #20]
 801c99e:	4313      	orrs	r3, r2
 801c9a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801c9a2:	697b      	ldr	r3, [r7, #20]
 801c9a4:	f023 0304 	bic.w	r3, r3, #4
 801c9a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801c9aa:	687b      	ldr	r3, [r7, #4]
 801c9ac:	4a1c      	ldr	r2, [pc, #112]	@ (801ca20 <TIM_OC1_SetConfig+0x10c>)
 801c9ae:	4293      	cmp	r3, r2
 801c9b0:	d00f      	beq.n	801c9d2 <TIM_OC1_SetConfig+0xbe>
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	4a1b      	ldr	r2, [pc, #108]	@ (801ca24 <TIM_OC1_SetConfig+0x110>)
 801c9b6:	4293      	cmp	r3, r2
 801c9b8:	d00b      	beq.n	801c9d2 <TIM_OC1_SetConfig+0xbe>
 801c9ba:	687b      	ldr	r3, [r7, #4]
 801c9bc:	4a1a      	ldr	r2, [pc, #104]	@ (801ca28 <TIM_OC1_SetConfig+0x114>)
 801c9be:	4293      	cmp	r3, r2
 801c9c0:	d007      	beq.n	801c9d2 <TIM_OC1_SetConfig+0xbe>
 801c9c2:	687b      	ldr	r3, [r7, #4]
 801c9c4:	4a19      	ldr	r2, [pc, #100]	@ (801ca2c <TIM_OC1_SetConfig+0x118>)
 801c9c6:	4293      	cmp	r3, r2
 801c9c8:	d003      	beq.n	801c9d2 <TIM_OC1_SetConfig+0xbe>
 801c9ca:	687b      	ldr	r3, [r7, #4]
 801c9cc:	4a18      	ldr	r2, [pc, #96]	@ (801ca30 <TIM_OC1_SetConfig+0x11c>)
 801c9ce:	4293      	cmp	r3, r2
 801c9d0:	d111      	bne.n	801c9f6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801c9d2:	693b      	ldr	r3, [r7, #16]
 801c9d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801c9d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801c9da:	693b      	ldr	r3, [r7, #16]
 801c9dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801c9e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801c9e2:	683b      	ldr	r3, [r7, #0]
 801c9e4:	695b      	ldr	r3, [r3, #20]
 801c9e6:	693a      	ldr	r2, [r7, #16]
 801c9e8:	4313      	orrs	r3, r2
 801c9ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801c9ec:	683b      	ldr	r3, [r7, #0]
 801c9ee:	699b      	ldr	r3, [r3, #24]
 801c9f0:	693a      	ldr	r2, [r7, #16]
 801c9f2:	4313      	orrs	r3, r2
 801c9f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c9f6:	687b      	ldr	r3, [r7, #4]
 801c9f8:	693a      	ldr	r2, [r7, #16]
 801c9fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	68fa      	ldr	r2, [r7, #12]
 801ca00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801ca02:	683b      	ldr	r3, [r7, #0]
 801ca04:	685a      	ldr	r2, [r3, #4]
 801ca06:	687b      	ldr	r3, [r7, #4]
 801ca08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ca0a:	687b      	ldr	r3, [r7, #4]
 801ca0c:	697a      	ldr	r2, [r7, #20]
 801ca0e:	621a      	str	r2, [r3, #32]
}
 801ca10:	bf00      	nop
 801ca12:	371c      	adds	r7, #28
 801ca14:	46bd      	mov	sp, r7
 801ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca1a:	4770      	bx	lr
 801ca1c:	fffeff8f 	.word	0xfffeff8f
 801ca20:	40010000 	.word	0x40010000
 801ca24:	40010400 	.word	0x40010400
 801ca28:	40014000 	.word	0x40014000
 801ca2c:	40014400 	.word	0x40014400
 801ca30:	40014800 	.word	0x40014800

0801ca34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801ca34:	b480      	push	{r7}
 801ca36:	b087      	sub	sp, #28
 801ca38:	af00      	add	r7, sp, #0
 801ca3a:	6078      	str	r0, [r7, #4]
 801ca3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801ca3e:	687b      	ldr	r3, [r7, #4]
 801ca40:	6a1b      	ldr	r3, [r3, #32]
 801ca42:	f023 0210 	bic.w	r2, r3, #16
 801ca46:	687b      	ldr	r3, [r7, #4]
 801ca48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	6a1b      	ldr	r3, [r3, #32]
 801ca4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	685b      	ldr	r3, [r3, #4]
 801ca54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801ca56:	687b      	ldr	r3, [r7, #4]
 801ca58:	699b      	ldr	r3, [r3, #24]
 801ca5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801ca5c:	68fa      	ldr	r2, [r7, #12]
 801ca5e:	4b34      	ldr	r3, [pc, #208]	@ (801cb30 <TIM_OC2_SetConfig+0xfc>)
 801ca60:	4013      	ands	r3, r2
 801ca62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801ca64:	68fb      	ldr	r3, [r7, #12]
 801ca66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801ca6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801ca6c:	683b      	ldr	r3, [r7, #0]
 801ca6e:	681b      	ldr	r3, [r3, #0]
 801ca70:	021b      	lsls	r3, r3, #8
 801ca72:	68fa      	ldr	r2, [r7, #12]
 801ca74:	4313      	orrs	r3, r2
 801ca76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801ca78:	697b      	ldr	r3, [r7, #20]
 801ca7a:	f023 0320 	bic.w	r3, r3, #32
 801ca7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801ca80:	683b      	ldr	r3, [r7, #0]
 801ca82:	689b      	ldr	r3, [r3, #8]
 801ca84:	011b      	lsls	r3, r3, #4
 801ca86:	697a      	ldr	r2, [r7, #20]
 801ca88:	4313      	orrs	r3, r2
 801ca8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	4a29      	ldr	r2, [pc, #164]	@ (801cb34 <TIM_OC2_SetConfig+0x100>)
 801ca90:	4293      	cmp	r3, r2
 801ca92:	d003      	beq.n	801ca9c <TIM_OC2_SetConfig+0x68>
 801ca94:	687b      	ldr	r3, [r7, #4]
 801ca96:	4a28      	ldr	r2, [pc, #160]	@ (801cb38 <TIM_OC2_SetConfig+0x104>)
 801ca98:	4293      	cmp	r3, r2
 801ca9a:	d10d      	bne.n	801cab8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801ca9c:	697b      	ldr	r3, [r7, #20]
 801ca9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801caa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801caa4:	683b      	ldr	r3, [r7, #0]
 801caa6:	68db      	ldr	r3, [r3, #12]
 801caa8:	011b      	lsls	r3, r3, #4
 801caaa:	697a      	ldr	r2, [r7, #20]
 801caac:	4313      	orrs	r3, r2
 801caae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801cab0:	697b      	ldr	r3, [r7, #20]
 801cab2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801cab6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801cab8:	687b      	ldr	r3, [r7, #4]
 801caba:	4a1e      	ldr	r2, [pc, #120]	@ (801cb34 <TIM_OC2_SetConfig+0x100>)
 801cabc:	4293      	cmp	r3, r2
 801cabe:	d00f      	beq.n	801cae0 <TIM_OC2_SetConfig+0xac>
 801cac0:	687b      	ldr	r3, [r7, #4]
 801cac2:	4a1d      	ldr	r2, [pc, #116]	@ (801cb38 <TIM_OC2_SetConfig+0x104>)
 801cac4:	4293      	cmp	r3, r2
 801cac6:	d00b      	beq.n	801cae0 <TIM_OC2_SetConfig+0xac>
 801cac8:	687b      	ldr	r3, [r7, #4]
 801caca:	4a1c      	ldr	r2, [pc, #112]	@ (801cb3c <TIM_OC2_SetConfig+0x108>)
 801cacc:	4293      	cmp	r3, r2
 801cace:	d007      	beq.n	801cae0 <TIM_OC2_SetConfig+0xac>
 801cad0:	687b      	ldr	r3, [r7, #4]
 801cad2:	4a1b      	ldr	r2, [pc, #108]	@ (801cb40 <TIM_OC2_SetConfig+0x10c>)
 801cad4:	4293      	cmp	r3, r2
 801cad6:	d003      	beq.n	801cae0 <TIM_OC2_SetConfig+0xac>
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	4a1a      	ldr	r2, [pc, #104]	@ (801cb44 <TIM_OC2_SetConfig+0x110>)
 801cadc:	4293      	cmp	r3, r2
 801cade:	d113      	bne.n	801cb08 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801cae0:	693b      	ldr	r3, [r7, #16]
 801cae2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801cae6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801cae8:	693b      	ldr	r3, [r7, #16]
 801caea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801caee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801caf0:	683b      	ldr	r3, [r7, #0]
 801caf2:	695b      	ldr	r3, [r3, #20]
 801caf4:	009b      	lsls	r3, r3, #2
 801caf6:	693a      	ldr	r2, [r7, #16]
 801caf8:	4313      	orrs	r3, r2
 801cafa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801cafc:	683b      	ldr	r3, [r7, #0]
 801cafe:	699b      	ldr	r3, [r3, #24]
 801cb00:	009b      	lsls	r3, r3, #2
 801cb02:	693a      	ldr	r2, [r7, #16]
 801cb04:	4313      	orrs	r3, r2
 801cb06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	693a      	ldr	r2, [r7, #16]
 801cb0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	68fa      	ldr	r2, [r7, #12]
 801cb12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801cb14:	683b      	ldr	r3, [r7, #0]
 801cb16:	685a      	ldr	r2, [r3, #4]
 801cb18:	687b      	ldr	r3, [r7, #4]
 801cb1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801cb1c:	687b      	ldr	r3, [r7, #4]
 801cb1e:	697a      	ldr	r2, [r7, #20]
 801cb20:	621a      	str	r2, [r3, #32]
}
 801cb22:	bf00      	nop
 801cb24:	371c      	adds	r7, #28
 801cb26:	46bd      	mov	sp, r7
 801cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb2c:	4770      	bx	lr
 801cb2e:	bf00      	nop
 801cb30:	feff8fff 	.word	0xfeff8fff
 801cb34:	40010000 	.word	0x40010000
 801cb38:	40010400 	.word	0x40010400
 801cb3c:	40014000 	.word	0x40014000
 801cb40:	40014400 	.word	0x40014400
 801cb44:	40014800 	.word	0x40014800

0801cb48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801cb48:	b480      	push	{r7}
 801cb4a:	b087      	sub	sp, #28
 801cb4c:	af00      	add	r7, sp, #0
 801cb4e:	6078      	str	r0, [r7, #4]
 801cb50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801cb52:	687b      	ldr	r3, [r7, #4]
 801cb54:	6a1b      	ldr	r3, [r3, #32]
 801cb56:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801cb5a:	687b      	ldr	r3, [r7, #4]
 801cb5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801cb5e:	687b      	ldr	r3, [r7, #4]
 801cb60:	6a1b      	ldr	r3, [r3, #32]
 801cb62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	685b      	ldr	r3, [r3, #4]
 801cb68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	69db      	ldr	r3, [r3, #28]
 801cb6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801cb70:	68fa      	ldr	r2, [r7, #12]
 801cb72:	4b33      	ldr	r3, [pc, #204]	@ (801cc40 <TIM_OC3_SetConfig+0xf8>)
 801cb74:	4013      	ands	r3, r2
 801cb76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801cb78:	68fb      	ldr	r3, [r7, #12]
 801cb7a:	f023 0303 	bic.w	r3, r3, #3
 801cb7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801cb80:	683b      	ldr	r3, [r7, #0]
 801cb82:	681b      	ldr	r3, [r3, #0]
 801cb84:	68fa      	ldr	r2, [r7, #12]
 801cb86:	4313      	orrs	r3, r2
 801cb88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801cb8a:	697b      	ldr	r3, [r7, #20]
 801cb8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801cb90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801cb92:	683b      	ldr	r3, [r7, #0]
 801cb94:	689b      	ldr	r3, [r3, #8]
 801cb96:	021b      	lsls	r3, r3, #8
 801cb98:	697a      	ldr	r2, [r7, #20]
 801cb9a:	4313      	orrs	r3, r2
 801cb9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801cb9e:	687b      	ldr	r3, [r7, #4]
 801cba0:	4a28      	ldr	r2, [pc, #160]	@ (801cc44 <TIM_OC3_SetConfig+0xfc>)
 801cba2:	4293      	cmp	r3, r2
 801cba4:	d003      	beq.n	801cbae <TIM_OC3_SetConfig+0x66>
 801cba6:	687b      	ldr	r3, [r7, #4]
 801cba8:	4a27      	ldr	r2, [pc, #156]	@ (801cc48 <TIM_OC3_SetConfig+0x100>)
 801cbaa:	4293      	cmp	r3, r2
 801cbac:	d10d      	bne.n	801cbca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801cbae:	697b      	ldr	r3, [r7, #20]
 801cbb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801cbb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801cbb6:	683b      	ldr	r3, [r7, #0]
 801cbb8:	68db      	ldr	r3, [r3, #12]
 801cbba:	021b      	lsls	r3, r3, #8
 801cbbc:	697a      	ldr	r2, [r7, #20]
 801cbbe:	4313      	orrs	r3, r2
 801cbc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801cbc2:	697b      	ldr	r3, [r7, #20]
 801cbc4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801cbc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801cbca:	687b      	ldr	r3, [r7, #4]
 801cbcc:	4a1d      	ldr	r2, [pc, #116]	@ (801cc44 <TIM_OC3_SetConfig+0xfc>)
 801cbce:	4293      	cmp	r3, r2
 801cbd0:	d00f      	beq.n	801cbf2 <TIM_OC3_SetConfig+0xaa>
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	4a1c      	ldr	r2, [pc, #112]	@ (801cc48 <TIM_OC3_SetConfig+0x100>)
 801cbd6:	4293      	cmp	r3, r2
 801cbd8:	d00b      	beq.n	801cbf2 <TIM_OC3_SetConfig+0xaa>
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	4a1b      	ldr	r2, [pc, #108]	@ (801cc4c <TIM_OC3_SetConfig+0x104>)
 801cbde:	4293      	cmp	r3, r2
 801cbe0:	d007      	beq.n	801cbf2 <TIM_OC3_SetConfig+0xaa>
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	4a1a      	ldr	r2, [pc, #104]	@ (801cc50 <TIM_OC3_SetConfig+0x108>)
 801cbe6:	4293      	cmp	r3, r2
 801cbe8:	d003      	beq.n	801cbf2 <TIM_OC3_SetConfig+0xaa>
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	4a19      	ldr	r2, [pc, #100]	@ (801cc54 <TIM_OC3_SetConfig+0x10c>)
 801cbee:	4293      	cmp	r3, r2
 801cbf0:	d113      	bne.n	801cc1a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801cbf2:	693b      	ldr	r3, [r7, #16]
 801cbf4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801cbf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801cbfa:	693b      	ldr	r3, [r7, #16]
 801cbfc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801cc00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801cc02:	683b      	ldr	r3, [r7, #0]
 801cc04:	695b      	ldr	r3, [r3, #20]
 801cc06:	011b      	lsls	r3, r3, #4
 801cc08:	693a      	ldr	r2, [r7, #16]
 801cc0a:	4313      	orrs	r3, r2
 801cc0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801cc0e:	683b      	ldr	r3, [r7, #0]
 801cc10:	699b      	ldr	r3, [r3, #24]
 801cc12:	011b      	lsls	r3, r3, #4
 801cc14:	693a      	ldr	r2, [r7, #16]
 801cc16:	4313      	orrs	r3, r2
 801cc18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801cc1a:	687b      	ldr	r3, [r7, #4]
 801cc1c:	693a      	ldr	r2, [r7, #16]
 801cc1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801cc20:	687b      	ldr	r3, [r7, #4]
 801cc22:	68fa      	ldr	r2, [r7, #12]
 801cc24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801cc26:	683b      	ldr	r3, [r7, #0]
 801cc28:	685a      	ldr	r2, [r3, #4]
 801cc2a:	687b      	ldr	r3, [r7, #4]
 801cc2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801cc2e:	687b      	ldr	r3, [r7, #4]
 801cc30:	697a      	ldr	r2, [r7, #20]
 801cc32:	621a      	str	r2, [r3, #32]
}
 801cc34:	bf00      	nop
 801cc36:	371c      	adds	r7, #28
 801cc38:	46bd      	mov	sp, r7
 801cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc3e:	4770      	bx	lr
 801cc40:	fffeff8f 	.word	0xfffeff8f
 801cc44:	40010000 	.word	0x40010000
 801cc48:	40010400 	.word	0x40010400
 801cc4c:	40014000 	.word	0x40014000
 801cc50:	40014400 	.word	0x40014400
 801cc54:	40014800 	.word	0x40014800

0801cc58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801cc58:	b480      	push	{r7}
 801cc5a:	b087      	sub	sp, #28
 801cc5c:	af00      	add	r7, sp, #0
 801cc5e:	6078      	str	r0, [r7, #4]
 801cc60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801cc62:	687b      	ldr	r3, [r7, #4]
 801cc64:	6a1b      	ldr	r3, [r3, #32]
 801cc66:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801cc6a:	687b      	ldr	r3, [r7, #4]
 801cc6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801cc6e:	687b      	ldr	r3, [r7, #4]
 801cc70:	6a1b      	ldr	r3, [r3, #32]
 801cc72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	685b      	ldr	r3, [r3, #4]
 801cc78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801cc7a:	687b      	ldr	r3, [r7, #4]
 801cc7c:	69db      	ldr	r3, [r3, #28]
 801cc7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801cc80:	68fa      	ldr	r2, [r7, #12]
 801cc82:	4b24      	ldr	r3, [pc, #144]	@ (801cd14 <TIM_OC4_SetConfig+0xbc>)
 801cc84:	4013      	ands	r3, r2
 801cc86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801cc88:	68fb      	ldr	r3, [r7, #12]
 801cc8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801cc8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801cc90:	683b      	ldr	r3, [r7, #0]
 801cc92:	681b      	ldr	r3, [r3, #0]
 801cc94:	021b      	lsls	r3, r3, #8
 801cc96:	68fa      	ldr	r2, [r7, #12]
 801cc98:	4313      	orrs	r3, r2
 801cc9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801cc9c:	693b      	ldr	r3, [r7, #16]
 801cc9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801cca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801cca4:	683b      	ldr	r3, [r7, #0]
 801cca6:	689b      	ldr	r3, [r3, #8]
 801cca8:	031b      	lsls	r3, r3, #12
 801ccaa:	693a      	ldr	r2, [r7, #16]
 801ccac:	4313      	orrs	r3, r2
 801ccae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ccb0:	687b      	ldr	r3, [r7, #4]
 801ccb2:	4a19      	ldr	r2, [pc, #100]	@ (801cd18 <TIM_OC4_SetConfig+0xc0>)
 801ccb4:	4293      	cmp	r3, r2
 801ccb6:	d00f      	beq.n	801ccd8 <TIM_OC4_SetConfig+0x80>
 801ccb8:	687b      	ldr	r3, [r7, #4]
 801ccba:	4a18      	ldr	r2, [pc, #96]	@ (801cd1c <TIM_OC4_SetConfig+0xc4>)
 801ccbc:	4293      	cmp	r3, r2
 801ccbe:	d00b      	beq.n	801ccd8 <TIM_OC4_SetConfig+0x80>
 801ccc0:	687b      	ldr	r3, [r7, #4]
 801ccc2:	4a17      	ldr	r2, [pc, #92]	@ (801cd20 <TIM_OC4_SetConfig+0xc8>)
 801ccc4:	4293      	cmp	r3, r2
 801ccc6:	d007      	beq.n	801ccd8 <TIM_OC4_SetConfig+0x80>
 801ccc8:	687b      	ldr	r3, [r7, #4]
 801ccca:	4a16      	ldr	r2, [pc, #88]	@ (801cd24 <TIM_OC4_SetConfig+0xcc>)
 801cccc:	4293      	cmp	r3, r2
 801ccce:	d003      	beq.n	801ccd8 <TIM_OC4_SetConfig+0x80>
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	4a15      	ldr	r2, [pc, #84]	@ (801cd28 <TIM_OC4_SetConfig+0xd0>)
 801ccd4:	4293      	cmp	r3, r2
 801ccd6:	d109      	bne.n	801ccec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801ccd8:	697b      	ldr	r3, [r7, #20]
 801ccda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801ccde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801cce0:	683b      	ldr	r3, [r7, #0]
 801cce2:	695b      	ldr	r3, [r3, #20]
 801cce4:	019b      	lsls	r3, r3, #6
 801cce6:	697a      	ldr	r2, [r7, #20]
 801cce8:	4313      	orrs	r3, r2
 801ccea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	697a      	ldr	r2, [r7, #20]
 801ccf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	68fa      	ldr	r2, [r7, #12]
 801ccf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801ccf8:	683b      	ldr	r3, [r7, #0]
 801ccfa:	685a      	ldr	r2, [r3, #4]
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801cd00:	687b      	ldr	r3, [r7, #4]
 801cd02:	693a      	ldr	r2, [r7, #16]
 801cd04:	621a      	str	r2, [r3, #32]
}
 801cd06:	bf00      	nop
 801cd08:	371c      	adds	r7, #28
 801cd0a:	46bd      	mov	sp, r7
 801cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd10:	4770      	bx	lr
 801cd12:	bf00      	nop
 801cd14:	feff8fff 	.word	0xfeff8fff
 801cd18:	40010000 	.word	0x40010000
 801cd1c:	40010400 	.word	0x40010400
 801cd20:	40014000 	.word	0x40014000
 801cd24:	40014400 	.word	0x40014400
 801cd28:	40014800 	.word	0x40014800

0801cd2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801cd2c:	b480      	push	{r7}
 801cd2e:	b087      	sub	sp, #28
 801cd30:	af00      	add	r7, sp, #0
 801cd32:	6078      	str	r0, [r7, #4]
 801cd34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801cd36:	687b      	ldr	r3, [r7, #4]
 801cd38:	6a1b      	ldr	r3, [r3, #32]
 801cd3a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	6a1b      	ldr	r3, [r3, #32]
 801cd46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801cd48:	687b      	ldr	r3, [r7, #4]
 801cd4a:	685b      	ldr	r3, [r3, #4]
 801cd4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801cd4e:	687b      	ldr	r3, [r7, #4]
 801cd50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801cd52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801cd54:	68fa      	ldr	r2, [r7, #12]
 801cd56:	4b21      	ldr	r3, [pc, #132]	@ (801cddc <TIM_OC5_SetConfig+0xb0>)
 801cd58:	4013      	ands	r3, r2
 801cd5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801cd5c:	683b      	ldr	r3, [r7, #0]
 801cd5e:	681b      	ldr	r3, [r3, #0]
 801cd60:	68fa      	ldr	r2, [r7, #12]
 801cd62:	4313      	orrs	r3, r2
 801cd64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801cd66:	693b      	ldr	r3, [r7, #16]
 801cd68:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801cd6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801cd6e:	683b      	ldr	r3, [r7, #0]
 801cd70:	689b      	ldr	r3, [r3, #8]
 801cd72:	041b      	lsls	r3, r3, #16
 801cd74:	693a      	ldr	r2, [r7, #16]
 801cd76:	4313      	orrs	r3, r2
 801cd78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801cd7a:	687b      	ldr	r3, [r7, #4]
 801cd7c:	4a18      	ldr	r2, [pc, #96]	@ (801cde0 <TIM_OC5_SetConfig+0xb4>)
 801cd7e:	4293      	cmp	r3, r2
 801cd80:	d00f      	beq.n	801cda2 <TIM_OC5_SetConfig+0x76>
 801cd82:	687b      	ldr	r3, [r7, #4]
 801cd84:	4a17      	ldr	r2, [pc, #92]	@ (801cde4 <TIM_OC5_SetConfig+0xb8>)
 801cd86:	4293      	cmp	r3, r2
 801cd88:	d00b      	beq.n	801cda2 <TIM_OC5_SetConfig+0x76>
 801cd8a:	687b      	ldr	r3, [r7, #4]
 801cd8c:	4a16      	ldr	r2, [pc, #88]	@ (801cde8 <TIM_OC5_SetConfig+0xbc>)
 801cd8e:	4293      	cmp	r3, r2
 801cd90:	d007      	beq.n	801cda2 <TIM_OC5_SetConfig+0x76>
 801cd92:	687b      	ldr	r3, [r7, #4]
 801cd94:	4a15      	ldr	r2, [pc, #84]	@ (801cdec <TIM_OC5_SetConfig+0xc0>)
 801cd96:	4293      	cmp	r3, r2
 801cd98:	d003      	beq.n	801cda2 <TIM_OC5_SetConfig+0x76>
 801cd9a:	687b      	ldr	r3, [r7, #4]
 801cd9c:	4a14      	ldr	r2, [pc, #80]	@ (801cdf0 <TIM_OC5_SetConfig+0xc4>)
 801cd9e:	4293      	cmp	r3, r2
 801cda0:	d109      	bne.n	801cdb6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801cda2:	697b      	ldr	r3, [r7, #20]
 801cda4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801cda8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801cdaa:	683b      	ldr	r3, [r7, #0]
 801cdac:	695b      	ldr	r3, [r3, #20]
 801cdae:	021b      	lsls	r3, r3, #8
 801cdb0:	697a      	ldr	r2, [r7, #20]
 801cdb2:	4313      	orrs	r3, r2
 801cdb4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801cdb6:	687b      	ldr	r3, [r7, #4]
 801cdb8:	697a      	ldr	r2, [r7, #20]
 801cdba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	68fa      	ldr	r2, [r7, #12]
 801cdc0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801cdc2:	683b      	ldr	r3, [r7, #0]
 801cdc4:	685a      	ldr	r2, [r3, #4]
 801cdc6:	687b      	ldr	r3, [r7, #4]
 801cdc8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801cdca:	687b      	ldr	r3, [r7, #4]
 801cdcc:	693a      	ldr	r2, [r7, #16]
 801cdce:	621a      	str	r2, [r3, #32]
}
 801cdd0:	bf00      	nop
 801cdd2:	371c      	adds	r7, #28
 801cdd4:	46bd      	mov	sp, r7
 801cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdda:	4770      	bx	lr
 801cddc:	fffeff8f 	.word	0xfffeff8f
 801cde0:	40010000 	.word	0x40010000
 801cde4:	40010400 	.word	0x40010400
 801cde8:	40014000 	.word	0x40014000
 801cdec:	40014400 	.word	0x40014400
 801cdf0:	40014800 	.word	0x40014800

0801cdf4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801cdf4:	b480      	push	{r7}
 801cdf6:	b087      	sub	sp, #28
 801cdf8:	af00      	add	r7, sp, #0
 801cdfa:	6078      	str	r0, [r7, #4]
 801cdfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801cdfe:	687b      	ldr	r3, [r7, #4]
 801ce00:	6a1b      	ldr	r3, [r3, #32]
 801ce02:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801ce06:	687b      	ldr	r3, [r7, #4]
 801ce08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ce0a:	687b      	ldr	r3, [r7, #4]
 801ce0c:	6a1b      	ldr	r3, [r3, #32]
 801ce0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	685b      	ldr	r3, [r3, #4]
 801ce14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801ce16:	687b      	ldr	r3, [r7, #4]
 801ce18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ce1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801ce1c:	68fa      	ldr	r2, [r7, #12]
 801ce1e:	4b22      	ldr	r3, [pc, #136]	@ (801cea8 <TIM_OC6_SetConfig+0xb4>)
 801ce20:	4013      	ands	r3, r2
 801ce22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801ce24:	683b      	ldr	r3, [r7, #0]
 801ce26:	681b      	ldr	r3, [r3, #0]
 801ce28:	021b      	lsls	r3, r3, #8
 801ce2a:	68fa      	ldr	r2, [r7, #12]
 801ce2c:	4313      	orrs	r3, r2
 801ce2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801ce30:	693b      	ldr	r3, [r7, #16]
 801ce32:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801ce36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801ce38:	683b      	ldr	r3, [r7, #0]
 801ce3a:	689b      	ldr	r3, [r3, #8]
 801ce3c:	051b      	lsls	r3, r3, #20
 801ce3e:	693a      	ldr	r2, [r7, #16]
 801ce40:	4313      	orrs	r3, r2
 801ce42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ce44:	687b      	ldr	r3, [r7, #4]
 801ce46:	4a19      	ldr	r2, [pc, #100]	@ (801ceac <TIM_OC6_SetConfig+0xb8>)
 801ce48:	4293      	cmp	r3, r2
 801ce4a:	d00f      	beq.n	801ce6c <TIM_OC6_SetConfig+0x78>
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	4a18      	ldr	r2, [pc, #96]	@ (801ceb0 <TIM_OC6_SetConfig+0xbc>)
 801ce50:	4293      	cmp	r3, r2
 801ce52:	d00b      	beq.n	801ce6c <TIM_OC6_SetConfig+0x78>
 801ce54:	687b      	ldr	r3, [r7, #4]
 801ce56:	4a17      	ldr	r2, [pc, #92]	@ (801ceb4 <TIM_OC6_SetConfig+0xc0>)
 801ce58:	4293      	cmp	r3, r2
 801ce5a:	d007      	beq.n	801ce6c <TIM_OC6_SetConfig+0x78>
 801ce5c:	687b      	ldr	r3, [r7, #4]
 801ce5e:	4a16      	ldr	r2, [pc, #88]	@ (801ceb8 <TIM_OC6_SetConfig+0xc4>)
 801ce60:	4293      	cmp	r3, r2
 801ce62:	d003      	beq.n	801ce6c <TIM_OC6_SetConfig+0x78>
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	4a15      	ldr	r2, [pc, #84]	@ (801cebc <TIM_OC6_SetConfig+0xc8>)
 801ce68:	4293      	cmp	r3, r2
 801ce6a:	d109      	bne.n	801ce80 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801ce6c:	697b      	ldr	r3, [r7, #20]
 801ce6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801ce72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801ce74:	683b      	ldr	r3, [r7, #0]
 801ce76:	695b      	ldr	r3, [r3, #20]
 801ce78:	029b      	lsls	r3, r3, #10
 801ce7a:	697a      	ldr	r2, [r7, #20]
 801ce7c:	4313      	orrs	r3, r2
 801ce7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ce80:	687b      	ldr	r3, [r7, #4]
 801ce82:	697a      	ldr	r2, [r7, #20]
 801ce84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801ce86:	687b      	ldr	r3, [r7, #4]
 801ce88:	68fa      	ldr	r2, [r7, #12]
 801ce8a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801ce8c:	683b      	ldr	r3, [r7, #0]
 801ce8e:	685a      	ldr	r2, [r3, #4]
 801ce90:	687b      	ldr	r3, [r7, #4]
 801ce92:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	693a      	ldr	r2, [r7, #16]
 801ce98:	621a      	str	r2, [r3, #32]
}
 801ce9a:	bf00      	nop
 801ce9c:	371c      	adds	r7, #28
 801ce9e:	46bd      	mov	sp, r7
 801cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cea4:	4770      	bx	lr
 801cea6:	bf00      	nop
 801cea8:	feff8fff 	.word	0xfeff8fff
 801ceac:	40010000 	.word	0x40010000
 801ceb0:	40010400 	.word	0x40010400
 801ceb4:	40014000 	.word	0x40014000
 801ceb8:	40014400 	.word	0x40014400
 801cebc:	40014800 	.word	0x40014800

0801cec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801cec0:	b480      	push	{r7}
 801cec2:	b087      	sub	sp, #28
 801cec4:	af00      	add	r7, sp, #0
 801cec6:	60f8      	str	r0, [r7, #12]
 801cec8:	60b9      	str	r1, [r7, #8]
 801ceca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801cecc:	68fb      	ldr	r3, [r7, #12]
 801cece:	6a1b      	ldr	r3, [r3, #32]
 801ced0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ced2:	68fb      	ldr	r3, [r7, #12]
 801ced4:	6a1b      	ldr	r3, [r3, #32]
 801ced6:	f023 0201 	bic.w	r2, r3, #1
 801ceda:	68fb      	ldr	r3, [r7, #12]
 801cedc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801cede:	68fb      	ldr	r3, [r7, #12]
 801cee0:	699b      	ldr	r3, [r3, #24]
 801cee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801cee4:	693b      	ldr	r3, [r7, #16]
 801cee6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801ceea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	011b      	lsls	r3, r3, #4
 801cef0:	693a      	ldr	r2, [r7, #16]
 801cef2:	4313      	orrs	r3, r2
 801cef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801cef6:	697b      	ldr	r3, [r7, #20]
 801cef8:	f023 030a 	bic.w	r3, r3, #10
 801cefc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801cefe:	697a      	ldr	r2, [r7, #20]
 801cf00:	68bb      	ldr	r3, [r7, #8]
 801cf02:	4313      	orrs	r3, r2
 801cf04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801cf06:	68fb      	ldr	r3, [r7, #12]
 801cf08:	693a      	ldr	r2, [r7, #16]
 801cf0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801cf0c:	68fb      	ldr	r3, [r7, #12]
 801cf0e:	697a      	ldr	r2, [r7, #20]
 801cf10:	621a      	str	r2, [r3, #32]
}
 801cf12:	bf00      	nop
 801cf14:	371c      	adds	r7, #28
 801cf16:	46bd      	mov	sp, r7
 801cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf1c:	4770      	bx	lr

0801cf1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801cf1e:	b480      	push	{r7}
 801cf20:	b087      	sub	sp, #28
 801cf22:	af00      	add	r7, sp, #0
 801cf24:	60f8      	str	r0, [r7, #12]
 801cf26:	60b9      	str	r1, [r7, #8]
 801cf28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801cf2a:	68fb      	ldr	r3, [r7, #12]
 801cf2c:	6a1b      	ldr	r3, [r3, #32]
 801cf2e:	f023 0210 	bic.w	r2, r3, #16
 801cf32:	68fb      	ldr	r3, [r7, #12]
 801cf34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801cf36:	68fb      	ldr	r3, [r7, #12]
 801cf38:	699b      	ldr	r3, [r3, #24]
 801cf3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801cf3c:	68fb      	ldr	r3, [r7, #12]
 801cf3e:	6a1b      	ldr	r3, [r3, #32]
 801cf40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801cf42:	697b      	ldr	r3, [r7, #20]
 801cf44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801cf48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801cf4a:	687b      	ldr	r3, [r7, #4]
 801cf4c:	031b      	lsls	r3, r3, #12
 801cf4e:	697a      	ldr	r2, [r7, #20]
 801cf50:	4313      	orrs	r3, r2
 801cf52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801cf54:	693b      	ldr	r3, [r7, #16]
 801cf56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801cf5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801cf5c:	68bb      	ldr	r3, [r7, #8]
 801cf5e:	011b      	lsls	r3, r3, #4
 801cf60:	693a      	ldr	r2, [r7, #16]
 801cf62:	4313      	orrs	r3, r2
 801cf64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801cf66:	68fb      	ldr	r3, [r7, #12]
 801cf68:	697a      	ldr	r2, [r7, #20]
 801cf6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801cf6c:	68fb      	ldr	r3, [r7, #12]
 801cf6e:	693a      	ldr	r2, [r7, #16]
 801cf70:	621a      	str	r2, [r3, #32]
}
 801cf72:	bf00      	nop
 801cf74:	371c      	adds	r7, #28
 801cf76:	46bd      	mov	sp, r7
 801cf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf7c:	4770      	bx	lr
	...

0801cf80 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801cf80:	b480      	push	{r7}
 801cf82:	b085      	sub	sp, #20
 801cf84:	af00      	add	r7, sp, #0
 801cf86:	6078      	str	r0, [r7, #4]
 801cf88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	689b      	ldr	r3, [r3, #8]
 801cf8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801cf90:	68fa      	ldr	r2, [r7, #12]
 801cf92:	4b09      	ldr	r3, [pc, #36]	@ (801cfb8 <TIM_ITRx_SetConfig+0x38>)
 801cf94:	4013      	ands	r3, r2
 801cf96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801cf98:	683a      	ldr	r2, [r7, #0]
 801cf9a:	68fb      	ldr	r3, [r7, #12]
 801cf9c:	4313      	orrs	r3, r2
 801cf9e:	f043 0307 	orr.w	r3, r3, #7
 801cfa2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801cfa4:	687b      	ldr	r3, [r7, #4]
 801cfa6:	68fa      	ldr	r2, [r7, #12]
 801cfa8:	609a      	str	r2, [r3, #8]
}
 801cfaa:	bf00      	nop
 801cfac:	3714      	adds	r7, #20
 801cfae:	46bd      	mov	sp, r7
 801cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfb4:	4770      	bx	lr
 801cfb6:	bf00      	nop
 801cfb8:	ffcfff8f 	.word	0xffcfff8f

0801cfbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801cfbc:	b480      	push	{r7}
 801cfbe:	b087      	sub	sp, #28
 801cfc0:	af00      	add	r7, sp, #0
 801cfc2:	60f8      	str	r0, [r7, #12]
 801cfc4:	60b9      	str	r1, [r7, #8]
 801cfc6:	607a      	str	r2, [r7, #4]
 801cfc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801cfca:	68fb      	ldr	r3, [r7, #12]
 801cfcc:	689b      	ldr	r3, [r3, #8]
 801cfce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801cfd0:	697b      	ldr	r3, [r7, #20]
 801cfd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801cfd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801cfd8:	683b      	ldr	r3, [r7, #0]
 801cfda:	021a      	lsls	r2, r3, #8
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	431a      	orrs	r2, r3
 801cfe0:	68bb      	ldr	r3, [r7, #8]
 801cfe2:	4313      	orrs	r3, r2
 801cfe4:	697a      	ldr	r2, [r7, #20]
 801cfe6:	4313      	orrs	r3, r2
 801cfe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801cfea:	68fb      	ldr	r3, [r7, #12]
 801cfec:	697a      	ldr	r2, [r7, #20]
 801cfee:	609a      	str	r2, [r3, #8]
}
 801cff0:	bf00      	nop
 801cff2:	371c      	adds	r7, #28
 801cff4:	46bd      	mov	sp, r7
 801cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cffa:	4770      	bx	lr

0801cffc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801cffc:	b480      	push	{r7}
 801cffe:	b087      	sub	sp, #28
 801d000:	af00      	add	r7, sp, #0
 801d002:	60f8      	str	r0, [r7, #12]
 801d004:	60b9      	str	r1, [r7, #8]
 801d006:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801d008:	68bb      	ldr	r3, [r7, #8]
 801d00a:	f003 031f 	and.w	r3, r3, #31
 801d00e:	2201      	movs	r2, #1
 801d010:	fa02 f303 	lsl.w	r3, r2, r3
 801d014:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801d016:	68fb      	ldr	r3, [r7, #12]
 801d018:	6a1a      	ldr	r2, [r3, #32]
 801d01a:	697b      	ldr	r3, [r7, #20]
 801d01c:	43db      	mvns	r3, r3
 801d01e:	401a      	ands	r2, r3
 801d020:	68fb      	ldr	r3, [r7, #12]
 801d022:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801d024:	68fb      	ldr	r3, [r7, #12]
 801d026:	6a1a      	ldr	r2, [r3, #32]
 801d028:	68bb      	ldr	r3, [r7, #8]
 801d02a:	f003 031f 	and.w	r3, r3, #31
 801d02e:	6879      	ldr	r1, [r7, #4]
 801d030:	fa01 f303 	lsl.w	r3, r1, r3
 801d034:	431a      	orrs	r2, r3
 801d036:	68fb      	ldr	r3, [r7, #12]
 801d038:	621a      	str	r2, [r3, #32]
}
 801d03a:	bf00      	nop
 801d03c:	371c      	adds	r7, #28
 801d03e:	46bd      	mov	sp, r7
 801d040:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d044:	4770      	bx	lr
	...

0801d048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801d048:	b480      	push	{r7}
 801d04a:	b085      	sub	sp, #20
 801d04c:	af00      	add	r7, sp, #0
 801d04e:	6078      	str	r0, [r7, #4]
 801d050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801d052:	687b      	ldr	r3, [r7, #4]
 801d054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801d058:	2b01      	cmp	r3, #1
 801d05a:	d101      	bne.n	801d060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801d05c:	2302      	movs	r3, #2
 801d05e:	e077      	b.n	801d150 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	2201      	movs	r2, #1
 801d064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d068:	687b      	ldr	r3, [r7, #4]
 801d06a:	2202      	movs	r2, #2
 801d06c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801d070:	687b      	ldr	r3, [r7, #4]
 801d072:	681b      	ldr	r3, [r3, #0]
 801d074:	685b      	ldr	r3, [r3, #4]
 801d076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801d078:	687b      	ldr	r3, [r7, #4]
 801d07a:	681b      	ldr	r3, [r3, #0]
 801d07c:	689b      	ldr	r3, [r3, #8]
 801d07e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	681b      	ldr	r3, [r3, #0]
 801d084:	4a35      	ldr	r2, [pc, #212]	@ (801d15c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801d086:	4293      	cmp	r3, r2
 801d088:	d004      	beq.n	801d094 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801d08a:	687b      	ldr	r3, [r7, #4]
 801d08c:	681b      	ldr	r3, [r3, #0]
 801d08e:	4a34      	ldr	r2, [pc, #208]	@ (801d160 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801d090:	4293      	cmp	r3, r2
 801d092:	d108      	bne.n	801d0a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801d094:	68fb      	ldr	r3, [r7, #12]
 801d096:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801d09a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801d09c:	683b      	ldr	r3, [r7, #0]
 801d09e:	685b      	ldr	r3, [r3, #4]
 801d0a0:	68fa      	ldr	r2, [r7, #12]
 801d0a2:	4313      	orrs	r3, r2
 801d0a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801d0a6:	68fb      	ldr	r3, [r7, #12]
 801d0a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801d0ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801d0ae:	683b      	ldr	r3, [r7, #0]
 801d0b0:	681b      	ldr	r3, [r3, #0]
 801d0b2:	68fa      	ldr	r2, [r7, #12]
 801d0b4:	4313      	orrs	r3, r2
 801d0b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801d0b8:	687b      	ldr	r3, [r7, #4]
 801d0ba:	681b      	ldr	r3, [r3, #0]
 801d0bc:	68fa      	ldr	r2, [r7, #12]
 801d0be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d0c0:	687b      	ldr	r3, [r7, #4]
 801d0c2:	681b      	ldr	r3, [r3, #0]
 801d0c4:	4a25      	ldr	r2, [pc, #148]	@ (801d15c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801d0c6:	4293      	cmp	r3, r2
 801d0c8:	d02c      	beq.n	801d124 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801d0ca:	687b      	ldr	r3, [r7, #4]
 801d0cc:	681b      	ldr	r3, [r3, #0]
 801d0ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d0d2:	d027      	beq.n	801d124 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801d0d4:	687b      	ldr	r3, [r7, #4]
 801d0d6:	681b      	ldr	r3, [r3, #0]
 801d0d8:	4a22      	ldr	r2, [pc, #136]	@ (801d164 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801d0da:	4293      	cmp	r3, r2
 801d0dc:	d022      	beq.n	801d124 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801d0de:	687b      	ldr	r3, [r7, #4]
 801d0e0:	681b      	ldr	r3, [r3, #0]
 801d0e2:	4a21      	ldr	r2, [pc, #132]	@ (801d168 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 801d0e4:	4293      	cmp	r3, r2
 801d0e6:	d01d      	beq.n	801d124 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801d0e8:	687b      	ldr	r3, [r7, #4]
 801d0ea:	681b      	ldr	r3, [r3, #0]
 801d0ec:	4a1f      	ldr	r2, [pc, #124]	@ (801d16c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 801d0ee:	4293      	cmp	r3, r2
 801d0f0:	d018      	beq.n	801d124 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	681b      	ldr	r3, [r3, #0]
 801d0f6:	4a1a      	ldr	r2, [pc, #104]	@ (801d160 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801d0f8:	4293      	cmp	r3, r2
 801d0fa:	d013      	beq.n	801d124 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801d0fc:	687b      	ldr	r3, [r7, #4]
 801d0fe:	681b      	ldr	r3, [r3, #0]
 801d100:	4a1b      	ldr	r2, [pc, #108]	@ (801d170 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801d102:	4293      	cmp	r3, r2
 801d104:	d00e      	beq.n	801d124 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801d106:	687b      	ldr	r3, [r7, #4]
 801d108:	681b      	ldr	r3, [r3, #0]
 801d10a:	4a1a      	ldr	r2, [pc, #104]	@ (801d174 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 801d10c:	4293      	cmp	r3, r2
 801d10e:	d009      	beq.n	801d124 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801d110:	687b      	ldr	r3, [r7, #4]
 801d112:	681b      	ldr	r3, [r3, #0]
 801d114:	4a18      	ldr	r2, [pc, #96]	@ (801d178 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801d116:	4293      	cmp	r3, r2
 801d118:	d004      	beq.n	801d124 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801d11a:	687b      	ldr	r3, [r7, #4]
 801d11c:	681b      	ldr	r3, [r3, #0]
 801d11e:	4a17      	ldr	r2, [pc, #92]	@ (801d17c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 801d120:	4293      	cmp	r3, r2
 801d122:	d10c      	bne.n	801d13e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801d124:	68bb      	ldr	r3, [r7, #8]
 801d126:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801d12a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801d12c:	683b      	ldr	r3, [r7, #0]
 801d12e:	689b      	ldr	r3, [r3, #8]
 801d130:	68ba      	ldr	r2, [r7, #8]
 801d132:	4313      	orrs	r3, r2
 801d134:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801d136:	687b      	ldr	r3, [r7, #4]
 801d138:	681b      	ldr	r3, [r3, #0]
 801d13a:	68ba      	ldr	r2, [r7, #8]
 801d13c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801d13e:	687b      	ldr	r3, [r7, #4]
 801d140:	2201      	movs	r2, #1
 801d142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	2200      	movs	r2, #0
 801d14a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801d14e:	2300      	movs	r3, #0
}
 801d150:	4618      	mov	r0, r3
 801d152:	3714      	adds	r7, #20
 801d154:	46bd      	mov	sp, r7
 801d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d15a:	4770      	bx	lr
 801d15c:	40010000 	.word	0x40010000
 801d160:	40010400 	.word	0x40010400
 801d164:	40000400 	.word	0x40000400
 801d168:	40000800 	.word	0x40000800
 801d16c:	40000c00 	.word	0x40000c00
 801d170:	40001800 	.word	0x40001800
 801d174:	40014000 	.word	0x40014000
 801d178:	4000e000 	.word	0x4000e000
 801d17c:	4000e400 	.word	0x4000e400

0801d180 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801d180:	b480      	push	{r7}
 801d182:	b085      	sub	sp, #20
 801d184:	af00      	add	r7, sp, #0
 801d186:	6078      	str	r0, [r7, #4]
 801d188:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801d18a:	2300      	movs	r3, #0
 801d18c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801d18e:	687b      	ldr	r3, [r7, #4]
 801d190:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801d194:	2b01      	cmp	r3, #1
 801d196:	d101      	bne.n	801d19c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801d198:	2302      	movs	r3, #2
 801d19a:	e087      	b.n	801d2ac <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 801d19c:	687b      	ldr	r3, [r7, #4]
 801d19e:	2201      	movs	r2, #1
 801d1a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801d1a4:	68fb      	ldr	r3, [r7, #12]
 801d1a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801d1aa:	683b      	ldr	r3, [r7, #0]
 801d1ac:	68db      	ldr	r3, [r3, #12]
 801d1ae:	4313      	orrs	r3, r2
 801d1b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801d1b2:	68fb      	ldr	r3, [r7, #12]
 801d1b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801d1b8:	683b      	ldr	r3, [r7, #0]
 801d1ba:	689b      	ldr	r3, [r3, #8]
 801d1bc:	4313      	orrs	r3, r2
 801d1be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801d1c0:	68fb      	ldr	r3, [r7, #12]
 801d1c2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801d1c6:	683b      	ldr	r3, [r7, #0]
 801d1c8:	685b      	ldr	r3, [r3, #4]
 801d1ca:	4313      	orrs	r3, r2
 801d1cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801d1ce:	68fb      	ldr	r3, [r7, #12]
 801d1d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801d1d4:	683b      	ldr	r3, [r7, #0]
 801d1d6:	681b      	ldr	r3, [r3, #0]
 801d1d8:	4313      	orrs	r3, r2
 801d1da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801d1dc:	68fb      	ldr	r3, [r7, #12]
 801d1de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801d1e2:	683b      	ldr	r3, [r7, #0]
 801d1e4:	691b      	ldr	r3, [r3, #16]
 801d1e6:	4313      	orrs	r3, r2
 801d1e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801d1ea:	68fb      	ldr	r3, [r7, #12]
 801d1ec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801d1f0:	683b      	ldr	r3, [r7, #0]
 801d1f2:	695b      	ldr	r3, [r3, #20]
 801d1f4:	4313      	orrs	r3, r2
 801d1f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801d1f8:	68fb      	ldr	r3, [r7, #12]
 801d1fa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801d1fe:	683b      	ldr	r3, [r7, #0]
 801d200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d202:	4313      	orrs	r3, r2
 801d204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801d206:	68fb      	ldr	r3, [r7, #12]
 801d208:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 801d20c:	683b      	ldr	r3, [r7, #0]
 801d20e:	699b      	ldr	r3, [r3, #24]
 801d210:	041b      	lsls	r3, r3, #16
 801d212:	4313      	orrs	r3, r2
 801d214:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801d216:	687b      	ldr	r3, [r7, #4]
 801d218:	681b      	ldr	r3, [r3, #0]
 801d21a:	4a27      	ldr	r2, [pc, #156]	@ (801d2b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801d21c:	4293      	cmp	r3, r2
 801d21e:	d004      	beq.n	801d22a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 801d220:	687b      	ldr	r3, [r7, #4]
 801d222:	681b      	ldr	r3, [r3, #0]
 801d224:	4a25      	ldr	r2, [pc, #148]	@ (801d2bc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801d226:	4293      	cmp	r3, r2
 801d228:	d106      	bne.n	801d238 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801d22a:	68fb      	ldr	r3, [r7, #12]
 801d22c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 801d230:	683b      	ldr	r3, [r7, #0]
 801d232:	69db      	ldr	r3, [r3, #28]
 801d234:	4313      	orrs	r3, r2
 801d236:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801d238:	687b      	ldr	r3, [r7, #4]
 801d23a:	681b      	ldr	r3, [r3, #0]
 801d23c:	4a1e      	ldr	r2, [pc, #120]	@ (801d2b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801d23e:	4293      	cmp	r3, r2
 801d240:	d004      	beq.n	801d24c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 801d242:	687b      	ldr	r3, [r7, #4]
 801d244:	681b      	ldr	r3, [r3, #0]
 801d246:	4a1d      	ldr	r2, [pc, #116]	@ (801d2bc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801d248:	4293      	cmp	r3, r2
 801d24a:	d126      	bne.n	801d29a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801d24c:	68fb      	ldr	r3, [r7, #12]
 801d24e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 801d252:	683b      	ldr	r3, [r7, #0]
 801d254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d256:	051b      	lsls	r3, r3, #20
 801d258:	4313      	orrs	r3, r2
 801d25a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801d25c:	68fb      	ldr	r3, [r7, #12]
 801d25e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 801d262:	683b      	ldr	r3, [r7, #0]
 801d264:	6a1b      	ldr	r3, [r3, #32]
 801d266:	4313      	orrs	r3, r2
 801d268:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801d26a:	68fb      	ldr	r3, [r7, #12]
 801d26c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801d270:	683b      	ldr	r3, [r7, #0]
 801d272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d274:	4313      	orrs	r3, r2
 801d276:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801d278:	687b      	ldr	r3, [r7, #4]
 801d27a:	681b      	ldr	r3, [r3, #0]
 801d27c:	4a0e      	ldr	r2, [pc, #56]	@ (801d2b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801d27e:	4293      	cmp	r3, r2
 801d280:	d004      	beq.n	801d28c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 801d282:	687b      	ldr	r3, [r7, #4]
 801d284:	681b      	ldr	r3, [r3, #0]
 801d286:	4a0d      	ldr	r2, [pc, #52]	@ (801d2bc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801d288:	4293      	cmp	r3, r2
 801d28a:	d106      	bne.n	801d29a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801d28c:	68fb      	ldr	r3, [r7, #12]
 801d28e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 801d292:	683b      	ldr	r3, [r7, #0]
 801d294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d296:	4313      	orrs	r3, r2
 801d298:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801d29a:	687b      	ldr	r3, [r7, #4]
 801d29c:	681b      	ldr	r3, [r3, #0]
 801d29e:	68fa      	ldr	r2, [r7, #12]
 801d2a0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	2200      	movs	r2, #0
 801d2a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801d2aa:	2300      	movs	r3, #0
}
 801d2ac:	4618      	mov	r0, r3
 801d2ae:	3714      	adds	r7, #20
 801d2b0:	46bd      	mov	sp, r7
 801d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2b6:	4770      	bx	lr
 801d2b8:	40010000 	.word	0x40010000
 801d2bc:	40010400 	.word	0x40010400

0801d2c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801d2c0:	b480      	push	{r7}
 801d2c2:	b083      	sub	sp, #12
 801d2c4:	af00      	add	r7, sp, #0
 801d2c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801d2c8:	bf00      	nop
 801d2ca:	370c      	adds	r7, #12
 801d2cc:	46bd      	mov	sp, r7
 801d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2d2:	4770      	bx	lr

0801d2d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801d2d4:	b480      	push	{r7}
 801d2d6:	b083      	sub	sp, #12
 801d2d8:	af00      	add	r7, sp, #0
 801d2da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801d2dc:	bf00      	nop
 801d2de:	370c      	adds	r7, #12
 801d2e0:	46bd      	mov	sp, r7
 801d2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2e6:	4770      	bx	lr

0801d2e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801d2e8:	b480      	push	{r7}
 801d2ea:	b083      	sub	sp, #12
 801d2ec:	af00      	add	r7, sp, #0
 801d2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801d2f0:	bf00      	nop
 801d2f2:	370c      	adds	r7, #12
 801d2f4:	46bd      	mov	sp, r7
 801d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2fa:	4770      	bx	lr

0801d2fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 801d2fc:	b580      	push	{r7, lr}
 801d2fe:	b090      	sub	sp, #64	@ 0x40
 801d300:	af00      	add	r7, sp, #0
 801d302:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 801d304:	4b33      	ldr	r3, [pc, #204]	@ (801d3d4 <HAL_InitTick+0xd8>)
 801d306:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801d30a:	4a32      	ldr	r2, [pc, #200]	@ (801d3d4 <HAL_InitTick+0xd8>)
 801d30c:	f043 0310 	orr.w	r3, r3, #16
 801d310:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801d314:	4b2f      	ldr	r3, [pc, #188]	@ (801d3d4 <HAL_InitTick+0xd8>)
 801d316:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801d31a:	f003 0310 	and.w	r3, r3, #16
 801d31e:	60bb      	str	r3, [r7, #8]
 801d320:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801d322:	f107 020c 	add.w	r2, r7, #12
 801d326:	f107 0310 	add.w	r3, r7, #16
 801d32a:	4611      	mov	r1, r2
 801d32c:	4618      	mov	r0, r3
 801d32e:	f7fb fdeb 	bl	8018f08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 801d332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d334:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 801d336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d338:	2b00      	cmp	r3, #0
 801d33a:	d103      	bne.n	801d344 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 801d33c:	f7fb fdce 	bl	8018edc <HAL_RCC_GetPCLK1Freq>
 801d340:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801d342:	e004      	b.n	801d34e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 801d344:	f7fb fdca 	bl	8018edc <HAL_RCC_GetPCLK1Freq>
 801d348:	4603      	mov	r3, r0
 801d34a:	005b      	lsls	r3, r3, #1
 801d34c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 801d34e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d350:	4a21      	ldr	r2, [pc, #132]	@ (801d3d8 <HAL_InitTick+0xdc>)
 801d352:	fba2 2303 	umull	r2, r3, r2, r3
 801d356:	0c9b      	lsrs	r3, r3, #18
 801d358:	3b01      	subs	r3, #1
 801d35a:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 801d35c:	4b1f      	ldr	r3, [pc, #124]	@ (801d3dc <HAL_InitTick+0xe0>)
 801d35e:	4a20      	ldr	r2, [pc, #128]	@ (801d3e0 <HAL_InitTick+0xe4>)
 801d360:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 801d362:	4b1e      	ldr	r3, [pc, #120]	@ (801d3dc <HAL_InitTick+0xe0>)
 801d364:	f240 32e7 	movw	r2, #999	@ 0x3e7
 801d368:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 801d36a:	4a1c      	ldr	r2, [pc, #112]	@ (801d3dc <HAL_InitTick+0xe0>)
 801d36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d36e:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0U;
 801d370:	4b1a      	ldr	r3, [pc, #104]	@ (801d3dc <HAL_InitTick+0xe0>)
 801d372:	2200      	movs	r2, #0
 801d374:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 801d376:	4b19      	ldr	r3, [pc, #100]	@ (801d3dc <HAL_InitTick+0xe0>)
 801d378:	2200      	movs	r2, #0
 801d37a:	609a      	str	r2, [r3, #8]
  status = HAL_TIM_Base_Init(&TimHandle);
 801d37c:	4817      	ldr	r0, [pc, #92]	@ (801d3dc <HAL_InitTick+0xe0>)
 801d37e:	f7fe fbd4 	bl	801bb2a <HAL_TIM_Base_Init>
 801d382:	4603      	mov	r3, r0
 801d384:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  if (status == HAL_OK)
 801d388:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801d38c:	2b00      	cmp	r3, #0
 801d38e:	d11b      	bne.n	801d3c8 <HAL_InitTick+0xcc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&TimHandle);
 801d390:	4812      	ldr	r0, [pc, #72]	@ (801d3dc <HAL_InitTick+0xe0>)
 801d392:	f7fe fc2b 	bl	801bbec <HAL_TIM_Base_Start_IT>
 801d396:	4603      	mov	r3, r0
 801d398:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    if (status == HAL_OK)
 801d39c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801d3a0:	2b00      	cmp	r3, #0
 801d3a2:	d111      	bne.n	801d3c8 <HAL_InitTick+0xcc>
    {
	  /* Enable the TIM6 global Interrupt */
      HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801d3a4:	2036      	movs	r0, #54	@ 0x36
 801d3a6:	f7f5 fd0d 	bl	8012dc4 <HAL_NVIC_EnableIRQ>
   
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801d3aa:	687b      	ldr	r3, [r7, #4]
 801d3ac:	2b0f      	cmp	r3, #15
 801d3ae:	d808      	bhi.n	801d3c2 <HAL_InitTick+0xc6>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0);
 801d3b0:	2200      	movs	r2, #0
 801d3b2:	6879      	ldr	r1, [r7, #4]
 801d3b4:	2036      	movs	r0, #54	@ 0x36
 801d3b6:	f7f5 fceb 	bl	8012d90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801d3ba:	4a0a      	ldr	r2, [pc, #40]	@ (801d3e4 <HAL_InitTick+0xe8>)
 801d3bc:	687b      	ldr	r3, [r7, #4]
 801d3be:	6013      	str	r3, [r2, #0]
 801d3c0:	e002      	b.n	801d3c8 <HAL_InitTick+0xcc>
      }
      else
      {
        status = HAL_ERROR;
 801d3c2:	2301      	movs	r3, #1
 801d3c4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      }
   }
}

  /* Return function status */
  return status;
 801d3c8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
}
 801d3cc:	4618      	mov	r0, r3
 801d3ce:	3740      	adds	r7, #64	@ 0x40
 801d3d0:	46bd      	mov	sp, r7
 801d3d2:	bd80      	pop	{r7, pc}
 801d3d4:	58024400 	.word	0x58024400
 801d3d8:	431bde83 	.word	0x431bde83
 801d3dc:	2400f50c 	.word	0x2400f50c
 801d3e0:	40001000 	.word	0x40001000
 801d3e4:	240008b8 	.word	0x240008b8

0801d3e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d3e8:	b580      	push	{r7, lr}
 801d3ea:	b082      	sub	sp, #8
 801d3ec:	af00      	add	r7, sp, #0
 801d3ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 801d3f0:	f7f3 ff6c 	bl	80112cc <HAL_IncTick>
}
 801d3f4:	bf00      	nop
 801d3f6:	3708      	adds	r7, #8
 801d3f8:	46bd      	mov	sp, r7
 801d3fa:	bd80      	pop	{r7, pc}

0801d3fc <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 801d3fc:	b580      	push	{r7, lr}
 801d3fe:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 801d400:	4802      	ldr	r0, [pc, #8]	@ (801d40c <TIM6_DAC_IRQHandler+0x10>)
 801d402:	f7fe fe8d 	bl	801c120 <HAL_TIM_IRQHandler>
}
 801d406:	bf00      	nop
 801d408:	bd80      	pop	{r7, pc}
 801d40a:	bf00      	nop
 801d40c:	2400f50c 	.word	0x2400f50c

0801d410 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801d410:	b580      	push	{r7, lr}
 801d412:	b08a      	sub	sp, #40	@ 0x28
 801d414:	af00      	add	r7, sp, #0
 801d416:	60f8      	str	r0, [r7, #12]
 801d418:	60b9      	str	r1, [r7, #8]
 801d41a:	4613      	mov	r3, r2
 801d41c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801d41e:	68fb      	ldr	r3, [r7, #12]
 801d420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d424:	2b20      	cmp	r3, #32
 801d426:	d167      	bne.n	801d4f8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 801d428:	68bb      	ldr	r3, [r7, #8]
 801d42a:	2b00      	cmp	r3, #0
 801d42c:	d002      	beq.n	801d434 <HAL_UART_Transmit_DMA+0x24>
 801d42e:	88fb      	ldrh	r3, [r7, #6]
 801d430:	2b00      	cmp	r3, #0
 801d432:	d101      	bne.n	801d438 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 801d434:	2301      	movs	r3, #1
 801d436:	e060      	b.n	801d4fa <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 801d438:	68fb      	ldr	r3, [r7, #12]
 801d43a:	68ba      	ldr	r2, [r7, #8]
 801d43c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 801d43e:	68fb      	ldr	r3, [r7, #12]
 801d440:	88fa      	ldrh	r2, [r7, #6]
 801d442:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801d446:	68fb      	ldr	r3, [r7, #12]
 801d448:	88fa      	ldrh	r2, [r7, #6]
 801d44a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d44e:	68fb      	ldr	r3, [r7, #12]
 801d450:	2200      	movs	r2, #0
 801d452:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d456:	68fb      	ldr	r3, [r7, #12]
 801d458:	2221      	movs	r2, #33	@ 0x21
 801d45a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 801d45e:	68fb      	ldr	r3, [r7, #12]
 801d460:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d462:	2b00      	cmp	r3, #0
 801d464:	d028      	beq.n	801d4b8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801d466:	68fb      	ldr	r3, [r7, #12]
 801d468:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d46a:	4a26      	ldr	r2, [pc, #152]	@ (801d504 <HAL_UART_Transmit_DMA+0xf4>)
 801d46c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801d46e:	68fb      	ldr	r3, [r7, #12]
 801d470:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d472:	4a25      	ldr	r2, [pc, #148]	@ (801d508 <HAL_UART_Transmit_DMA+0xf8>)
 801d474:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801d476:	68fb      	ldr	r3, [r7, #12]
 801d478:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d47a:	4a24      	ldr	r2, [pc, #144]	@ (801d50c <HAL_UART_Transmit_DMA+0xfc>)
 801d47c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801d47e:	68fb      	ldr	r3, [r7, #12]
 801d480:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d482:	2200      	movs	r2, #0
 801d484:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801d486:	68fb      	ldr	r3, [r7, #12]
 801d488:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 801d48a:	68fb      	ldr	r3, [r7, #12]
 801d48c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d48e:	4619      	mov	r1, r3
 801d490:	68fb      	ldr	r3, [r7, #12]
 801d492:	681b      	ldr	r3, [r3, #0]
 801d494:	3328      	adds	r3, #40	@ 0x28
 801d496:	461a      	mov	r2, r3
 801d498:	88fb      	ldrh	r3, [r7, #6]
 801d49a:	f7f5 fca1 	bl	8012de0 <HAL_DMA_Start_IT>
 801d49e:	4603      	mov	r3, r0
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	d009      	beq.n	801d4b8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801d4a4:	68fb      	ldr	r3, [r7, #12]
 801d4a6:	2210      	movs	r2, #16
 801d4a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801d4ac:	68fb      	ldr	r3, [r7, #12]
 801d4ae:	2220      	movs	r2, #32
 801d4b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 801d4b4:	2301      	movs	r3, #1
 801d4b6:	e020      	b.n	801d4fa <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801d4b8:	68fb      	ldr	r3, [r7, #12]
 801d4ba:	681b      	ldr	r3, [r3, #0]
 801d4bc:	2240      	movs	r2, #64	@ 0x40
 801d4be:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801d4c0:	68fb      	ldr	r3, [r7, #12]
 801d4c2:	681b      	ldr	r3, [r3, #0]
 801d4c4:	3308      	adds	r3, #8
 801d4c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d4c8:	697b      	ldr	r3, [r7, #20]
 801d4ca:	e853 3f00 	ldrex	r3, [r3]
 801d4ce:	613b      	str	r3, [r7, #16]
   return(result);
 801d4d0:	693b      	ldr	r3, [r7, #16]
 801d4d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d4d6:	627b      	str	r3, [r7, #36]	@ 0x24
 801d4d8:	68fb      	ldr	r3, [r7, #12]
 801d4da:	681b      	ldr	r3, [r3, #0]
 801d4dc:	3308      	adds	r3, #8
 801d4de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d4e0:	623a      	str	r2, [r7, #32]
 801d4e2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d4e4:	69f9      	ldr	r1, [r7, #28]
 801d4e6:	6a3a      	ldr	r2, [r7, #32]
 801d4e8:	e841 2300 	strex	r3, r2, [r1]
 801d4ec:	61bb      	str	r3, [r7, #24]
   return(result);
 801d4ee:	69bb      	ldr	r3, [r7, #24]
 801d4f0:	2b00      	cmp	r3, #0
 801d4f2:	d1e5      	bne.n	801d4c0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 801d4f4:	2300      	movs	r3, #0
 801d4f6:	e000      	b.n	801d4fa <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 801d4f8:	2302      	movs	r3, #2
  }
}
 801d4fa:	4618      	mov	r0, r3
 801d4fc:	3728      	adds	r7, #40	@ 0x28
 801d4fe:	46bd      	mov	sp, r7
 801d500:	bd80      	pop	{r7, pc}
 801d502:	bf00      	nop
 801d504:	0801e1a9 	.word	0x0801e1a9
 801d508:	0801e23f 	.word	0x0801e23f
 801d50c:	0801e3c1 	.word	0x0801e3c1

0801d510 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d510:	b580      	push	{r7, lr}
 801d512:	b08a      	sub	sp, #40	@ 0x28
 801d514:	af00      	add	r7, sp, #0
 801d516:	60f8      	str	r0, [r7, #12]
 801d518:	60b9      	str	r1, [r7, #8]
 801d51a:	4613      	mov	r3, r2
 801d51c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801d51e:	68fb      	ldr	r3, [r7, #12]
 801d520:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801d524:	2b20      	cmp	r3, #32
 801d526:	d137      	bne.n	801d598 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801d528:	68bb      	ldr	r3, [r7, #8]
 801d52a:	2b00      	cmp	r3, #0
 801d52c:	d002      	beq.n	801d534 <HAL_UART_Receive_DMA+0x24>
 801d52e:	88fb      	ldrh	r3, [r7, #6]
 801d530:	2b00      	cmp	r3, #0
 801d532:	d101      	bne.n	801d538 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 801d534:	2301      	movs	r3, #1
 801d536:	e030      	b.n	801d59a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d538:	68fb      	ldr	r3, [r7, #12]
 801d53a:	2200      	movs	r2, #0
 801d53c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d53e:	68fb      	ldr	r3, [r7, #12]
 801d540:	681b      	ldr	r3, [r3, #0]
 801d542:	4a18      	ldr	r2, [pc, #96]	@ (801d5a4 <HAL_UART_Receive_DMA+0x94>)
 801d544:	4293      	cmp	r3, r2
 801d546:	d01f      	beq.n	801d588 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d548:	68fb      	ldr	r3, [r7, #12]
 801d54a:	681b      	ldr	r3, [r3, #0]
 801d54c:	685b      	ldr	r3, [r3, #4]
 801d54e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801d552:	2b00      	cmp	r3, #0
 801d554:	d018      	beq.n	801d588 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d556:	68fb      	ldr	r3, [r7, #12]
 801d558:	681b      	ldr	r3, [r3, #0]
 801d55a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d55c:	697b      	ldr	r3, [r7, #20]
 801d55e:	e853 3f00 	ldrex	r3, [r3]
 801d562:	613b      	str	r3, [r7, #16]
   return(result);
 801d564:	693b      	ldr	r3, [r7, #16]
 801d566:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801d56a:	627b      	str	r3, [r7, #36]	@ 0x24
 801d56c:	68fb      	ldr	r3, [r7, #12]
 801d56e:	681b      	ldr	r3, [r3, #0]
 801d570:	461a      	mov	r2, r3
 801d572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d574:	623b      	str	r3, [r7, #32]
 801d576:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d578:	69f9      	ldr	r1, [r7, #28]
 801d57a:	6a3a      	ldr	r2, [r7, #32]
 801d57c:	e841 2300 	strex	r3, r2, [r1]
 801d580:	61bb      	str	r3, [r7, #24]
   return(result);
 801d582:	69bb      	ldr	r3, [r7, #24]
 801d584:	2b00      	cmp	r3, #0
 801d586:	d1e6      	bne.n	801d556 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801d588:	88fb      	ldrh	r3, [r7, #6]
 801d58a:	461a      	mov	r2, r3
 801d58c:	68b9      	ldr	r1, [r7, #8]
 801d58e:	68f8      	ldr	r0, [r7, #12]
 801d590:	f000 fcbc 	bl	801df0c <UART_Start_Receive_DMA>
 801d594:	4603      	mov	r3, r0
 801d596:	e000      	b.n	801d59a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801d598:	2302      	movs	r3, #2
  }
}
 801d59a:	4618      	mov	r0, r3
 801d59c:	3728      	adds	r7, #40	@ 0x28
 801d59e:	46bd      	mov	sp, r7
 801d5a0:	bd80      	pop	{r7, pc}
 801d5a2:	bf00      	nop
 801d5a4:	58000c00 	.word	0x58000c00

0801d5a8 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 801d5a8:	b580      	push	{r7, lr}
 801d5aa:	b09a      	sub	sp, #104	@ 0x68
 801d5ac:	af00      	add	r7, sp, #0
 801d5ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 801d5b0:	687b      	ldr	r3, [r7, #4]
 801d5b2:	681b      	ldr	r3, [r3, #0]
 801d5b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d5b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d5b8:	e853 3f00 	ldrex	r3, [r3]
 801d5bc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801d5be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d5c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801d5c4:	667b      	str	r3, [r7, #100]	@ 0x64
 801d5c6:	687b      	ldr	r3, [r7, #4]
 801d5c8:	681b      	ldr	r3, [r3, #0]
 801d5ca:	461a      	mov	r2, r3
 801d5cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801d5ce:	657b      	str	r3, [r7, #84]	@ 0x54
 801d5d0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d5d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801d5d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801d5d6:	e841 2300 	strex	r3, r2, [r1]
 801d5da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801d5dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d5de:	2b00      	cmp	r3, #0
 801d5e0:	d1e6      	bne.n	801d5b0 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801d5e2:	687b      	ldr	r3, [r7, #4]
 801d5e4:	681b      	ldr	r3, [r3, #0]
 801d5e6:	3308      	adds	r3, #8
 801d5e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d5ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d5ec:	e853 3f00 	ldrex	r3, [r3]
 801d5f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801d5f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d5f4:	4b51      	ldr	r3, [pc, #324]	@ (801d73c <HAL_UART_AbortReceive_IT+0x194>)
 801d5f6:	4013      	ands	r3, r2
 801d5f8:	663b      	str	r3, [r7, #96]	@ 0x60
 801d5fa:	687b      	ldr	r3, [r7, #4]
 801d5fc:	681b      	ldr	r3, [r3, #0]
 801d5fe:	3308      	adds	r3, #8
 801d600:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801d602:	643a      	str	r2, [r7, #64]	@ 0x40
 801d604:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d606:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801d608:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801d60a:	e841 2300 	strex	r3, r2, [r1]
 801d60e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801d610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d612:	2b00      	cmp	r3, #0
 801d614:	d1e5      	bne.n	801d5e2 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d616:	687b      	ldr	r3, [r7, #4]
 801d618:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d61a:	2b01      	cmp	r3, #1
 801d61c:	d118      	bne.n	801d650 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801d61e:	687b      	ldr	r3, [r7, #4]
 801d620:	681b      	ldr	r3, [r3, #0]
 801d622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d624:	6a3b      	ldr	r3, [r7, #32]
 801d626:	e853 3f00 	ldrex	r3, [r3]
 801d62a:	61fb      	str	r3, [r7, #28]
   return(result);
 801d62c:	69fb      	ldr	r3, [r7, #28]
 801d62e:	f023 0310 	bic.w	r3, r3, #16
 801d632:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d634:	687b      	ldr	r3, [r7, #4]
 801d636:	681b      	ldr	r3, [r3, #0]
 801d638:	461a      	mov	r2, r3
 801d63a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d63c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d63e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d640:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801d642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d644:	e841 2300 	strex	r3, r2, [r1]
 801d648:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801d64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d64c:	2b00      	cmp	r3, #0
 801d64e:	d1e6      	bne.n	801d61e <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d650:	687b      	ldr	r3, [r7, #4]
 801d652:	681b      	ldr	r3, [r3, #0]
 801d654:	689b      	ldr	r3, [r3, #8]
 801d656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d65a:	2b40      	cmp	r3, #64	@ 0x40
 801d65c:	d154      	bne.n	801d708 <HAL_UART_AbortReceive_IT+0x160>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801d65e:	687b      	ldr	r3, [r7, #4]
 801d660:	681b      	ldr	r3, [r3, #0]
 801d662:	3308      	adds	r3, #8
 801d664:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d666:	68fb      	ldr	r3, [r7, #12]
 801d668:	e853 3f00 	ldrex	r3, [r3]
 801d66c:	60bb      	str	r3, [r7, #8]
   return(result);
 801d66e:	68bb      	ldr	r3, [r7, #8]
 801d670:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801d674:	65bb      	str	r3, [r7, #88]	@ 0x58
 801d676:	687b      	ldr	r3, [r7, #4]
 801d678:	681b      	ldr	r3, [r3, #0]
 801d67a:	3308      	adds	r3, #8
 801d67c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801d67e:	61ba      	str	r2, [r7, #24]
 801d680:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d682:	6979      	ldr	r1, [r7, #20]
 801d684:	69ba      	ldr	r2, [r7, #24]
 801d686:	e841 2300 	strex	r3, r2, [r1]
 801d68a:	613b      	str	r3, [r7, #16]
   return(result);
 801d68c:	693b      	ldr	r3, [r7, #16]
 801d68e:	2b00      	cmp	r3, #0
 801d690:	d1e5      	bne.n	801d65e <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 801d692:	687b      	ldr	r3, [r7, #4]
 801d694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d698:	2b00      	cmp	r3, #0
 801d69a:	d017      	beq.n	801d6cc <HAL_UART_AbortReceive_IT+0x124>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 801d69c:	687b      	ldr	r3, [r7, #4]
 801d69e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d6a2:	4a27      	ldr	r2, [pc, #156]	@ (801d740 <HAL_UART_AbortReceive_IT+0x198>)
 801d6a4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d6ac:	4618      	mov	r0, r3
 801d6ae:	f7f6 f91f 	bl	80138f0 <HAL_DMA_Abort_IT>
 801d6b2:	4603      	mov	r3, r0
 801d6b4:	2b00      	cmp	r3, #0
 801d6b6:	d03c      	beq.n	801d732 <HAL_UART_AbortReceive_IT+0x18a>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801d6b8:	687b      	ldr	r3, [r7, #4]
 801d6ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d6be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d6c0:	687a      	ldr	r2, [r7, #4]
 801d6c2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801d6c6:	4610      	mov	r0, r2
 801d6c8:	4798      	blx	r3
 801d6ca:	e032      	b.n	801d732 <HAL_UART_AbortReceive_IT+0x18a>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 801d6cc:	687b      	ldr	r3, [r7, #4]
 801d6ce:	2200      	movs	r2, #0
 801d6d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 801d6d4:	687b      	ldr	r3, [r7, #4]
 801d6d6:	2200      	movs	r2, #0
 801d6d8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801d6da:	687b      	ldr	r3, [r7, #4]
 801d6dc:	681b      	ldr	r3, [r3, #0]
 801d6de:	220f      	movs	r2, #15
 801d6e0:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801d6e2:	687b      	ldr	r3, [r7, #4]
 801d6e4:	681b      	ldr	r3, [r3, #0]
 801d6e6:	699a      	ldr	r2, [r3, #24]
 801d6e8:	687b      	ldr	r3, [r7, #4]
 801d6ea:	681b      	ldr	r3, [r3, #0]
 801d6ec:	f042 0208 	orr.w	r2, r2, #8
 801d6f0:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801d6f2:	687b      	ldr	r3, [r7, #4]
 801d6f4:	2220      	movs	r2, #32
 801d6f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d6fa:	687b      	ldr	r3, [r7, #4]
 801d6fc:	2200      	movs	r2, #0
 801d6fe:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 801d700:	6878      	ldr	r0, [r7, #4]
 801d702:	f7f1 fe31 	bl	800f368 <HAL_UART_AbortReceiveCpltCallback>
 801d706:	e014      	b.n	801d732 <HAL_UART_AbortReceive_IT+0x18a>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 801d708:	687b      	ldr	r3, [r7, #4]
 801d70a:	2200      	movs	r2, #0
 801d70c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 801d710:	687b      	ldr	r3, [r7, #4]
 801d712:	2200      	movs	r2, #0
 801d714:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801d716:	687b      	ldr	r3, [r7, #4]
 801d718:	681b      	ldr	r3, [r3, #0]
 801d71a:	220f      	movs	r2, #15
 801d71c:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801d71e:	687b      	ldr	r3, [r7, #4]
 801d720:	2220      	movs	r2, #32
 801d722:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d726:	687b      	ldr	r3, [r7, #4]
 801d728:	2200      	movs	r2, #0
 801d72a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 801d72c:	6878      	ldr	r0, [r7, #4]
 801d72e:	f7f1 fe1b 	bl	800f368 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 801d732:	2300      	movs	r3, #0
}
 801d734:	4618      	mov	r0, r3
 801d736:	3768      	adds	r7, #104	@ 0x68
 801d738:	46bd      	mov	sp, r7
 801d73a:	bd80      	pop	{r7, pc}
 801d73c:	effffffe 	.word	0xeffffffe
 801d740:	0801e46d 	.word	0x0801e46d

0801d744 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801d744:	b580      	push	{r7, lr}
 801d746:	b0ba      	sub	sp, #232	@ 0xe8
 801d748:	af00      	add	r7, sp, #0
 801d74a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801d74c:	687b      	ldr	r3, [r7, #4]
 801d74e:	681b      	ldr	r3, [r3, #0]
 801d750:	69db      	ldr	r3, [r3, #28]
 801d752:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801d756:	687b      	ldr	r3, [r7, #4]
 801d758:	681b      	ldr	r3, [r3, #0]
 801d75a:	681b      	ldr	r3, [r3, #0]
 801d75c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801d760:	687b      	ldr	r3, [r7, #4]
 801d762:	681b      	ldr	r3, [r3, #0]
 801d764:	689b      	ldr	r3, [r3, #8]
 801d766:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801d76a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801d76e:	f640 030f 	movw	r3, #2063	@ 0x80f
 801d772:	4013      	ands	r3, r2
 801d774:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 801d778:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801d77c:	2b00      	cmp	r3, #0
 801d77e:	d11b      	bne.n	801d7b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801d780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801d784:	f003 0320 	and.w	r3, r3, #32
 801d788:	2b00      	cmp	r3, #0
 801d78a:	d015      	beq.n	801d7b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801d78c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801d790:	f003 0320 	and.w	r3, r3, #32
 801d794:	2b00      	cmp	r3, #0
 801d796:	d105      	bne.n	801d7a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801d798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801d79c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801d7a0:	2b00      	cmp	r3, #0
 801d7a2:	d009      	beq.n	801d7b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801d7a4:	687b      	ldr	r3, [r7, #4]
 801d7a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d7a8:	2b00      	cmp	r3, #0
 801d7aa:	f000 8377 	beq.w	801de9c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d7b2:	6878      	ldr	r0, [r7, #4]
 801d7b4:	4798      	blx	r3
      }
      return;
 801d7b6:	e371      	b.n	801de9c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801d7b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801d7bc:	2b00      	cmp	r3, #0
 801d7be:	f000 8123 	beq.w	801da08 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801d7c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801d7c6:	4b8d      	ldr	r3, [pc, #564]	@ (801d9fc <HAL_UART_IRQHandler+0x2b8>)
 801d7c8:	4013      	ands	r3, r2
 801d7ca:	2b00      	cmp	r3, #0
 801d7cc:	d106      	bne.n	801d7dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801d7ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801d7d2:	4b8b      	ldr	r3, [pc, #556]	@ (801da00 <HAL_UART_IRQHandler+0x2bc>)
 801d7d4:	4013      	ands	r3, r2
 801d7d6:	2b00      	cmp	r3, #0
 801d7d8:	f000 8116 	beq.w	801da08 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801d7dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801d7e0:	f003 0301 	and.w	r3, r3, #1
 801d7e4:	2b00      	cmp	r3, #0
 801d7e6:	d011      	beq.n	801d80c <HAL_UART_IRQHandler+0xc8>
 801d7e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801d7ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d7f0:	2b00      	cmp	r3, #0
 801d7f2:	d00b      	beq.n	801d80c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801d7f4:	687b      	ldr	r3, [r7, #4]
 801d7f6:	681b      	ldr	r3, [r3, #0]
 801d7f8:	2201      	movs	r2, #1
 801d7fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801d7fc:	687b      	ldr	r3, [r7, #4]
 801d7fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d802:	f043 0201 	orr.w	r2, r3, #1
 801d806:	687b      	ldr	r3, [r7, #4]
 801d808:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d80c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801d810:	f003 0302 	and.w	r3, r3, #2
 801d814:	2b00      	cmp	r3, #0
 801d816:	d011      	beq.n	801d83c <HAL_UART_IRQHandler+0xf8>
 801d818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801d81c:	f003 0301 	and.w	r3, r3, #1
 801d820:	2b00      	cmp	r3, #0
 801d822:	d00b      	beq.n	801d83c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801d824:	687b      	ldr	r3, [r7, #4]
 801d826:	681b      	ldr	r3, [r3, #0]
 801d828:	2202      	movs	r2, #2
 801d82a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801d82c:	687b      	ldr	r3, [r7, #4]
 801d82e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d832:	f043 0204 	orr.w	r2, r3, #4
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d83c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801d840:	f003 0304 	and.w	r3, r3, #4
 801d844:	2b00      	cmp	r3, #0
 801d846:	d011      	beq.n	801d86c <HAL_UART_IRQHandler+0x128>
 801d848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801d84c:	f003 0301 	and.w	r3, r3, #1
 801d850:	2b00      	cmp	r3, #0
 801d852:	d00b      	beq.n	801d86c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801d854:	687b      	ldr	r3, [r7, #4]
 801d856:	681b      	ldr	r3, [r3, #0]
 801d858:	2204      	movs	r2, #4
 801d85a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801d85c:	687b      	ldr	r3, [r7, #4]
 801d85e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d862:	f043 0202 	orr.w	r2, r3, #2
 801d866:	687b      	ldr	r3, [r7, #4]
 801d868:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801d86c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801d870:	f003 0308 	and.w	r3, r3, #8
 801d874:	2b00      	cmp	r3, #0
 801d876:	d017      	beq.n	801d8a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801d878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801d87c:	f003 0320 	and.w	r3, r3, #32
 801d880:	2b00      	cmp	r3, #0
 801d882:	d105      	bne.n	801d890 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801d884:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801d888:	4b5c      	ldr	r3, [pc, #368]	@ (801d9fc <HAL_UART_IRQHandler+0x2b8>)
 801d88a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801d88c:	2b00      	cmp	r3, #0
 801d88e:	d00b      	beq.n	801d8a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801d890:	687b      	ldr	r3, [r7, #4]
 801d892:	681b      	ldr	r3, [r3, #0]
 801d894:	2208      	movs	r2, #8
 801d896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801d898:	687b      	ldr	r3, [r7, #4]
 801d89a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d89e:	f043 0208 	orr.w	r2, r3, #8
 801d8a2:	687b      	ldr	r3, [r7, #4]
 801d8a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801d8a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801d8ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801d8b0:	2b00      	cmp	r3, #0
 801d8b2:	d012      	beq.n	801d8da <HAL_UART_IRQHandler+0x196>
 801d8b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801d8b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801d8bc:	2b00      	cmp	r3, #0
 801d8be:	d00c      	beq.n	801d8da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801d8c0:	687b      	ldr	r3, [r7, #4]
 801d8c2:	681b      	ldr	r3, [r3, #0]
 801d8c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801d8c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801d8ca:	687b      	ldr	r3, [r7, #4]
 801d8cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d8d0:	f043 0220 	orr.w	r2, r3, #32
 801d8d4:	687b      	ldr	r3, [r7, #4]
 801d8d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801d8da:	687b      	ldr	r3, [r7, #4]
 801d8dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d8e0:	2b00      	cmp	r3, #0
 801d8e2:	f000 82dd 	beq.w	801dea0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801d8e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801d8ea:	f003 0320 	and.w	r3, r3, #32
 801d8ee:	2b00      	cmp	r3, #0
 801d8f0:	d013      	beq.n	801d91a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801d8f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801d8f6:	f003 0320 	and.w	r3, r3, #32
 801d8fa:	2b00      	cmp	r3, #0
 801d8fc:	d105      	bne.n	801d90a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801d8fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801d902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801d906:	2b00      	cmp	r3, #0
 801d908:	d007      	beq.n	801d91a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801d90a:	687b      	ldr	r3, [r7, #4]
 801d90c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d90e:	2b00      	cmp	r3, #0
 801d910:	d003      	beq.n	801d91a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801d912:	687b      	ldr	r3, [r7, #4]
 801d914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d916:	6878      	ldr	r0, [r7, #4]
 801d918:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801d91a:	687b      	ldr	r3, [r7, #4]
 801d91c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d920:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	681b      	ldr	r3, [r3, #0]
 801d928:	689b      	ldr	r3, [r3, #8]
 801d92a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d92e:	2b40      	cmp	r3, #64	@ 0x40
 801d930:	d005      	beq.n	801d93e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801d932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801d936:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801d93a:	2b00      	cmp	r3, #0
 801d93c:	d054      	beq.n	801d9e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801d93e:	6878      	ldr	r0, [r7, #4]
 801d940:	f000 fbcc 	bl	801e0dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d944:	687b      	ldr	r3, [r7, #4]
 801d946:	681b      	ldr	r3, [r3, #0]
 801d948:	689b      	ldr	r3, [r3, #8]
 801d94a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d94e:	2b40      	cmp	r3, #64	@ 0x40
 801d950:	d146      	bne.n	801d9e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	681b      	ldr	r3, [r3, #0]
 801d956:	3308      	adds	r3, #8
 801d958:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d95c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801d960:	e853 3f00 	ldrex	r3, [r3]
 801d964:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 801d968:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801d96c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801d970:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801d974:	687b      	ldr	r3, [r7, #4]
 801d976:	681b      	ldr	r3, [r3, #0]
 801d978:	3308      	adds	r3, #8
 801d97a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801d97e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801d982:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d986:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801d98a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801d98e:	e841 2300 	strex	r3, r2, [r1]
 801d992:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801d996:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d99a:	2b00      	cmp	r3, #0
 801d99c:	d1d9      	bne.n	801d952 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801d99e:	687b      	ldr	r3, [r7, #4]
 801d9a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d9a4:	2b00      	cmp	r3, #0
 801d9a6:	d017      	beq.n	801d9d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801d9a8:	687b      	ldr	r3, [r7, #4]
 801d9aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d9ae:	4a15      	ldr	r2, [pc, #84]	@ (801da04 <HAL_UART_IRQHandler+0x2c0>)
 801d9b0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801d9b2:	687b      	ldr	r3, [r7, #4]
 801d9b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d9b8:	4618      	mov	r0, r3
 801d9ba:	f7f5 ff99 	bl	80138f0 <HAL_DMA_Abort_IT>
 801d9be:	4603      	mov	r3, r0
 801d9c0:	2b00      	cmp	r3, #0
 801d9c2:	d019      	beq.n	801d9f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801d9c4:	687b      	ldr	r3, [r7, #4]
 801d9c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d9ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d9cc:	687a      	ldr	r2, [r7, #4]
 801d9ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801d9d2:	4610      	mov	r0, r2
 801d9d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d9d6:	e00f      	b.n	801d9f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801d9d8:	6878      	ldr	r0, [r7, #4]
 801d9da:	f000 fa81 	bl	801dee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d9de:	e00b      	b.n	801d9f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801d9e0:	6878      	ldr	r0, [r7, #4]
 801d9e2:	f000 fa7d 	bl	801dee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d9e6:	e007      	b.n	801d9f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801d9e8:	6878      	ldr	r0, [r7, #4]
 801d9ea:	f000 fa79 	bl	801dee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d9ee:	687b      	ldr	r3, [r7, #4]
 801d9f0:	2200      	movs	r2, #0
 801d9f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 801d9f6:	e253      	b.n	801dea0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d9f8:	bf00      	nop
    return;
 801d9fa:	e251      	b.n	801dea0 <HAL_UART_IRQHandler+0x75c>
 801d9fc:	10000001 	.word	0x10000001
 801da00:	04000120 	.word	0x04000120
 801da04:	0801e441 	.word	0x0801e441

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801da08:	687b      	ldr	r3, [r7, #4]
 801da0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801da0c:	2b01      	cmp	r3, #1
 801da0e:	f040 81e7 	bne.w	801dde0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801da12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801da16:	f003 0310 	and.w	r3, r3, #16
 801da1a:	2b00      	cmp	r3, #0
 801da1c:	f000 81e0 	beq.w	801dde0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801da20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801da24:	f003 0310 	and.w	r3, r3, #16
 801da28:	2b00      	cmp	r3, #0
 801da2a:	f000 81d9 	beq.w	801dde0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801da2e:	687b      	ldr	r3, [r7, #4]
 801da30:	681b      	ldr	r3, [r3, #0]
 801da32:	2210      	movs	r2, #16
 801da34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801da36:	687b      	ldr	r3, [r7, #4]
 801da38:	681b      	ldr	r3, [r3, #0]
 801da3a:	689b      	ldr	r3, [r3, #8]
 801da3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801da40:	2b40      	cmp	r3, #64	@ 0x40
 801da42:	f040 8151 	bne.w	801dce8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801da46:	687b      	ldr	r3, [r7, #4]
 801da48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801da4c:	681b      	ldr	r3, [r3, #0]
 801da4e:	4a96      	ldr	r2, [pc, #600]	@ (801dca8 <HAL_UART_IRQHandler+0x564>)
 801da50:	4293      	cmp	r3, r2
 801da52:	d068      	beq.n	801db26 <HAL_UART_IRQHandler+0x3e2>
 801da54:	687b      	ldr	r3, [r7, #4]
 801da56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801da5a:	681b      	ldr	r3, [r3, #0]
 801da5c:	4a93      	ldr	r2, [pc, #588]	@ (801dcac <HAL_UART_IRQHandler+0x568>)
 801da5e:	4293      	cmp	r3, r2
 801da60:	d061      	beq.n	801db26 <HAL_UART_IRQHandler+0x3e2>
 801da62:	687b      	ldr	r3, [r7, #4]
 801da64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801da68:	681b      	ldr	r3, [r3, #0]
 801da6a:	4a91      	ldr	r2, [pc, #580]	@ (801dcb0 <HAL_UART_IRQHandler+0x56c>)
 801da6c:	4293      	cmp	r3, r2
 801da6e:	d05a      	beq.n	801db26 <HAL_UART_IRQHandler+0x3e2>
 801da70:	687b      	ldr	r3, [r7, #4]
 801da72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801da76:	681b      	ldr	r3, [r3, #0]
 801da78:	4a8e      	ldr	r2, [pc, #568]	@ (801dcb4 <HAL_UART_IRQHandler+0x570>)
 801da7a:	4293      	cmp	r3, r2
 801da7c:	d053      	beq.n	801db26 <HAL_UART_IRQHandler+0x3e2>
 801da7e:	687b      	ldr	r3, [r7, #4]
 801da80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801da84:	681b      	ldr	r3, [r3, #0]
 801da86:	4a8c      	ldr	r2, [pc, #560]	@ (801dcb8 <HAL_UART_IRQHandler+0x574>)
 801da88:	4293      	cmp	r3, r2
 801da8a:	d04c      	beq.n	801db26 <HAL_UART_IRQHandler+0x3e2>
 801da8c:	687b      	ldr	r3, [r7, #4]
 801da8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801da92:	681b      	ldr	r3, [r3, #0]
 801da94:	4a89      	ldr	r2, [pc, #548]	@ (801dcbc <HAL_UART_IRQHandler+0x578>)
 801da96:	4293      	cmp	r3, r2
 801da98:	d045      	beq.n	801db26 <HAL_UART_IRQHandler+0x3e2>
 801da9a:	687b      	ldr	r3, [r7, #4]
 801da9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801daa0:	681b      	ldr	r3, [r3, #0]
 801daa2:	4a87      	ldr	r2, [pc, #540]	@ (801dcc0 <HAL_UART_IRQHandler+0x57c>)
 801daa4:	4293      	cmp	r3, r2
 801daa6:	d03e      	beq.n	801db26 <HAL_UART_IRQHandler+0x3e2>
 801daa8:	687b      	ldr	r3, [r7, #4]
 801daaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801daae:	681b      	ldr	r3, [r3, #0]
 801dab0:	4a84      	ldr	r2, [pc, #528]	@ (801dcc4 <HAL_UART_IRQHandler+0x580>)
 801dab2:	4293      	cmp	r3, r2
 801dab4:	d037      	beq.n	801db26 <HAL_UART_IRQHandler+0x3e2>
 801dab6:	687b      	ldr	r3, [r7, #4]
 801dab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801dabc:	681b      	ldr	r3, [r3, #0]
 801dabe:	4a82      	ldr	r2, [pc, #520]	@ (801dcc8 <HAL_UART_IRQHandler+0x584>)
 801dac0:	4293      	cmp	r3, r2
 801dac2:	d030      	beq.n	801db26 <HAL_UART_IRQHandler+0x3e2>
 801dac4:	687b      	ldr	r3, [r7, #4]
 801dac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801daca:	681b      	ldr	r3, [r3, #0]
 801dacc:	4a7f      	ldr	r2, [pc, #508]	@ (801dccc <HAL_UART_IRQHandler+0x588>)
 801dace:	4293      	cmp	r3, r2
 801dad0:	d029      	beq.n	801db26 <HAL_UART_IRQHandler+0x3e2>
 801dad2:	687b      	ldr	r3, [r7, #4]
 801dad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801dad8:	681b      	ldr	r3, [r3, #0]
 801dada:	4a7d      	ldr	r2, [pc, #500]	@ (801dcd0 <HAL_UART_IRQHandler+0x58c>)
 801dadc:	4293      	cmp	r3, r2
 801dade:	d022      	beq.n	801db26 <HAL_UART_IRQHandler+0x3e2>
 801dae0:	687b      	ldr	r3, [r7, #4]
 801dae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801dae6:	681b      	ldr	r3, [r3, #0]
 801dae8:	4a7a      	ldr	r2, [pc, #488]	@ (801dcd4 <HAL_UART_IRQHandler+0x590>)
 801daea:	4293      	cmp	r3, r2
 801daec:	d01b      	beq.n	801db26 <HAL_UART_IRQHandler+0x3e2>
 801daee:	687b      	ldr	r3, [r7, #4]
 801daf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801daf4:	681b      	ldr	r3, [r3, #0]
 801daf6:	4a78      	ldr	r2, [pc, #480]	@ (801dcd8 <HAL_UART_IRQHandler+0x594>)
 801daf8:	4293      	cmp	r3, r2
 801dafa:	d014      	beq.n	801db26 <HAL_UART_IRQHandler+0x3e2>
 801dafc:	687b      	ldr	r3, [r7, #4]
 801dafe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801db02:	681b      	ldr	r3, [r3, #0]
 801db04:	4a75      	ldr	r2, [pc, #468]	@ (801dcdc <HAL_UART_IRQHandler+0x598>)
 801db06:	4293      	cmp	r3, r2
 801db08:	d00d      	beq.n	801db26 <HAL_UART_IRQHandler+0x3e2>
 801db0a:	687b      	ldr	r3, [r7, #4]
 801db0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801db10:	681b      	ldr	r3, [r3, #0]
 801db12:	4a73      	ldr	r2, [pc, #460]	@ (801dce0 <HAL_UART_IRQHandler+0x59c>)
 801db14:	4293      	cmp	r3, r2
 801db16:	d006      	beq.n	801db26 <HAL_UART_IRQHandler+0x3e2>
 801db18:	687b      	ldr	r3, [r7, #4]
 801db1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801db1e:	681b      	ldr	r3, [r3, #0]
 801db20:	4a70      	ldr	r2, [pc, #448]	@ (801dce4 <HAL_UART_IRQHandler+0x5a0>)
 801db22:	4293      	cmp	r3, r2
 801db24:	d106      	bne.n	801db34 <HAL_UART_IRQHandler+0x3f0>
 801db26:	687b      	ldr	r3, [r7, #4]
 801db28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801db2c:	681b      	ldr	r3, [r3, #0]
 801db2e:	685b      	ldr	r3, [r3, #4]
 801db30:	b29b      	uxth	r3, r3
 801db32:	e005      	b.n	801db40 <HAL_UART_IRQHandler+0x3fc>
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801db3a:	681b      	ldr	r3, [r3, #0]
 801db3c:	685b      	ldr	r3, [r3, #4]
 801db3e:	b29b      	uxth	r3, r3
 801db40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801db44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 801db48:	2b00      	cmp	r3, #0
 801db4a:	f000 81ab 	beq.w	801dea4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801db4e:	687b      	ldr	r3, [r7, #4]
 801db50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801db54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801db58:	429a      	cmp	r2, r3
 801db5a:	f080 81a3 	bcs.w	801dea4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801db5e:	687b      	ldr	r3, [r7, #4]
 801db60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801db64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801db68:	687b      	ldr	r3, [r7, #4]
 801db6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801db6e:	69db      	ldr	r3, [r3, #28]
 801db70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801db74:	f000 8087 	beq.w	801dc86 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	681b      	ldr	r3, [r3, #0]
 801db7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801db80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801db84:	e853 3f00 	ldrex	r3, [r3]
 801db88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 801db8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801db90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801db94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801db98:	687b      	ldr	r3, [r7, #4]
 801db9a:	681b      	ldr	r3, [r3, #0]
 801db9c:	461a      	mov	r2, r3
 801db9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801dba2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801dba6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dbaa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801dbae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801dbb2:	e841 2300 	strex	r3, r2, [r1]
 801dbb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801dbba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801dbbe:	2b00      	cmp	r3, #0
 801dbc0:	d1da      	bne.n	801db78 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dbc2:	687b      	ldr	r3, [r7, #4]
 801dbc4:	681b      	ldr	r3, [r3, #0]
 801dbc6:	3308      	adds	r3, #8
 801dbc8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dbca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801dbcc:	e853 3f00 	ldrex	r3, [r3]
 801dbd0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801dbd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dbd4:	f023 0301 	bic.w	r3, r3, #1
 801dbd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801dbdc:	687b      	ldr	r3, [r7, #4]
 801dbde:	681b      	ldr	r3, [r3, #0]
 801dbe0:	3308      	adds	r3, #8
 801dbe2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801dbe6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801dbea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dbec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801dbee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801dbf2:	e841 2300 	strex	r3, r2, [r1]
 801dbf6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801dbf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dbfa:	2b00      	cmp	r3, #0
 801dbfc:	d1e1      	bne.n	801dbc2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801dbfe:	687b      	ldr	r3, [r7, #4]
 801dc00:	681b      	ldr	r3, [r3, #0]
 801dc02:	3308      	adds	r3, #8
 801dc04:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dc06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dc08:	e853 3f00 	ldrex	r3, [r3]
 801dc0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801dc0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801dc10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801dc14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801dc18:	687b      	ldr	r3, [r7, #4]
 801dc1a:	681b      	ldr	r3, [r3, #0]
 801dc1c:	3308      	adds	r3, #8
 801dc1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801dc22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801dc24:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dc26:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801dc28:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801dc2a:	e841 2300 	strex	r3, r2, [r1]
 801dc2e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801dc30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dc32:	2b00      	cmp	r3, #0
 801dc34:	d1e3      	bne.n	801dbfe <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801dc36:	687b      	ldr	r3, [r7, #4]
 801dc38:	2220      	movs	r2, #32
 801dc3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dc3e:	687b      	ldr	r3, [r7, #4]
 801dc40:	2200      	movs	r2, #0
 801dc42:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	681b      	ldr	r3, [r3, #0]
 801dc48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dc4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801dc4c:	e853 3f00 	ldrex	r3, [r3]
 801dc50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801dc52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801dc54:	f023 0310 	bic.w	r3, r3, #16
 801dc58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801dc5c:	687b      	ldr	r3, [r7, #4]
 801dc5e:	681b      	ldr	r3, [r3, #0]
 801dc60:	461a      	mov	r2, r3
 801dc62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801dc66:	65bb      	str	r3, [r7, #88]	@ 0x58
 801dc68:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dc6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801dc6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801dc6e:	e841 2300 	strex	r3, r2, [r1]
 801dc72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801dc74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801dc76:	2b00      	cmp	r3, #0
 801dc78:	d1e4      	bne.n	801dc44 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801dc7a:	687b      	ldr	r3, [r7, #4]
 801dc7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801dc80:	4618      	mov	r0, r3
 801dc82:	f7f5 fb17 	bl	80132b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801dc86:	687b      	ldr	r3, [r7, #4]
 801dc88:	2202      	movs	r2, #2
 801dc8a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801dc92:	687b      	ldr	r3, [r7, #4]
 801dc94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801dc98:	b29b      	uxth	r3, r3
 801dc9a:	1ad3      	subs	r3, r2, r3
 801dc9c:	b29b      	uxth	r3, r3
 801dc9e:	4619      	mov	r1, r3
 801dca0:	6878      	ldr	r0, [r7, #4]
 801dca2:	f000 f927 	bl	801def4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801dca6:	e0fd      	b.n	801dea4 <HAL_UART_IRQHandler+0x760>
 801dca8:	40020010 	.word	0x40020010
 801dcac:	40020028 	.word	0x40020028
 801dcb0:	40020040 	.word	0x40020040
 801dcb4:	40020058 	.word	0x40020058
 801dcb8:	40020070 	.word	0x40020070
 801dcbc:	40020088 	.word	0x40020088
 801dcc0:	400200a0 	.word	0x400200a0
 801dcc4:	400200b8 	.word	0x400200b8
 801dcc8:	40020410 	.word	0x40020410
 801dccc:	40020428 	.word	0x40020428
 801dcd0:	40020440 	.word	0x40020440
 801dcd4:	40020458 	.word	0x40020458
 801dcd8:	40020470 	.word	0x40020470
 801dcdc:	40020488 	.word	0x40020488
 801dce0:	400204a0 	.word	0x400204a0
 801dce4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801dce8:	687b      	ldr	r3, [r7, #4]
 801dcea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801dcee:	687b      	ldr	r3, [r7, #4]
 801dcf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801dcf4:	b29b      	uxth	r3, r3
 801dcf6:	1ad3      	subs	r3, r2, r3
 801dcf8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801dcfc:	687b      	ldr	r3, [r7, #4]
 801dcfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801dd02:	b29b      	uxth	r3, r3
 801dd04:	2b00      	cmp	r3, #0
 801dd06:	f000 80cf 	beq.w	801dea8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 801dd0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801dd0e:	2b00      	cmp	r3, #0
 801dd10:	f000 80ca 	beq.w	801dea8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801dd14:	687b      	ldr	r3, [r7, #4]
 801dd16:	681b      	ldr	r3, [r3, #0]
 801dd18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dd1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dd1c:	e853 3f00 	ldrex	r3, [r3]
 801dd20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801dd22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dd24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801dd28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801dd2c:	687b      	ldr	r3, [r7, #4]
 801dd2e:	681b      	ldr	r3, [r3, #0]
 801dd30:	461a      	mov	r2, r3
 801dd32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801dd36:	647b      	str	r3, [r7, #68]	@ 0x44
 801dd38:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dd3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801dd3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801dd3e:	e841 2300 	strex	r3, r2, [r1]
 801dd42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801dd44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dd46:	2b00      	cmp	r3, #0
 801dd48:	d1e4      	bne.n	801dd14 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801dd4a:	687b      	ldr	r3, [r7, #4]
 801dd4c:	681b      	ldr	r3, [r3, #0]
 801dd4e:	3308      	adds	r3, #8
 801dd50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dd54:	e853 3f00 	ldrex	r3, [r3]
 801dd58:	623b      	str	r3, [r7, #32]
   return(result);
 801dd5a:	6a3a      	ldr	r2, [r7, #32]
 801dd5c:	4b55      	ldr	r3, [pc, #340]	@ (801deb4 <HAL_UART_IRQHandler+0x770>)
 801dd5e:	4013      	ands	r3, r2
 801dd60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801dd64:	687b      	ldr	r3, [r7, #4]
 801dd66:	681b      	ldr	r3, [r3, #0]
 801dd68:	3308      	adds	r3, #8
 801dd6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801dd6e:	633a      	str	r2, [r7, #48]	@ 0x30
 801dd70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dd72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801dd74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801dd76:	e841 2300 	strex	r3, r2, [r1]
 801dd7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801dd7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd7e:	2b00      	cmp	r3, #0
 801dd80:	d1e3      	bne.n	801dd4a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801dd82:	687b      	ldr	r3, [r7, #4]
 801dd84:	2220      	movs	r2, #32
 801dd86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dd8a:	687b      	ldr	r3, [r7, #4]
 801dd8c:	2200      	movs	r2, #0
 801dd8e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801dd90:	687b      	ldr	r3, [r7, #4]
 801dd92:	2200      	movs	r2, #0
 801dd94:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801dd96:	687b      	ldr	r3, [r7, #4]
 801dd98:	681b      	ldr	r3, [r3, #0]
 801dd9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dd9c:	693b      	ldr	r3, [r7, #16]
 801dd9e:	e853 3f00 	ldrex	r3, [r3]
 801dda2:	60fb      	str	r3, [r7, #12]
   return(result);
 801dda4:	68fb      	ldr	r3, [r7, #12]
 801dda6:	f023 0310 	bic.w	r3, r3, #16
 801ddaa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801ddae:	687b      	ldr	r3, [r7, #4]
 801ddb0:	681b      	ldr	r3, [r3, #0]
 801ddb2:	461a      	mov	r2, r3
 801ddb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801ddb8:	61fb      	str	r3, [r7, #28]
 801ddba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ddbc:	69b9      	ldr	r1, [r7, #24]
 801ddbe:	69fa      	ldr	r2, [r7, #28]
 801ddc0:	e841 2300 	strex	r3, r2, [r1]
 801ddc4:	617b      	str	r3, [r7, #20]
   return(result);
 801ddc6:	697b      	ldr	r3, [r7, #20]
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	d1e4      	bne.n	801dd96 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801ddcc:	687b      	ldr	r3, [r7, #4]
 801ddce:	2202      	movs	r2, #2
 801ddd0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801ddd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801ddd6:	4619      	mov	r1, r3
 801ddd8:	6878      	ldr	r0, [r7, #4]
 801ddda:	f000 f88b 	bl	801def4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801ddde:	e063      	b.n	801dea8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801dde0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801dde4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801dde8:	2b00      	cmp	r3, #0
 801ddea:	d00e      	beq.n	801de0a <HAL_UART_IRQHandler+0x6c6>
 801ddec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801ddf0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801ddf4:	2b00      	cmp	r3, #0
 801ddf6:	d008      	beq.n	801de0a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801ddf8:	687b      	ldr	r3, [r7, #4]
 801ddfa:	681b      	ldr	r3, [r3, #0]
 801ddfc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801de00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801de02:	6878      	ldr	r0, [r7, #4]
 801de04:	f000 fb82 	bl	801e50c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801de08:	e051      	b.n	801deae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801de0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801de0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801de12:	2b00      	cmp	r3, #0
 801de14:	d014      	beq.n	801de40 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801de16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801de1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801de1e:	2b00      	cmp	r3, #0
 801de20:	d105      	bne.n	801de2e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801de22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801de26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801de2a:	2b00      	cmp	r3, #0
 801de2c:	d008      	beq.n	801de40 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 801de2e:	687b      	ldr	r3, [r7, #4]
 801de30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801de32:	2b00      	cmp	r3, #0
 801de34:	d03a      	beq.n	801deac <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 801de36:	687b      	ldr	r3, [r7, #4]
 801de38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801de3a:	6878      	ldr	r0, [r7, #4]
 801de3c:	4798      	blx	r3
    }
    return;
 801de3e:	e035      	b.n	801deac <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801de40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801de44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801de48:	2b00      	cmp	r3, #0
 801de4a:	d009      	beq.n	801de60 <HAL_UART_IRQHandler+0x71c>
 801de4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801de50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801de54:	2b00      	cmp	r3, #0
 801de56:	d003      	beq.n	801de60 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 801de58:	6878      	ldr	r0, [r7, #4]
 801de5a:	f000 fb2c 	bl	801e4b6 <UART_EndTransmit_IT>
    return;
 801de5e:	e026      	b.n	801deae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801de60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801de64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801de68:	2b00      	cmp	r3, #0
 801de6a:	d009      	beq.n	801de80 <HAL_UART_IRQHandler+0x73c>
 801de6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801de70:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801de74:	2b00      	cmp	r3, #0
 801de76:	d003      	beq.n	801de80 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801de78:	6878      	ldr	r0, [r7, #4]
 801de7a:	f000 fb5b 	bl	801e534 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801de7e:	e016      	b.n	801deae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801de80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801de84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801de88:	2b00      	cmp	r3, #0
 801de8a:	d010      	beq.n	801deae <HAL_UART_IRQHandler+0x76a>
 801de8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801de90:	2b00      	cmp	r3, #0
 801de92:	da0c      	bge.n	801deae <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801de94:	6878      	ldr	r0, [r7, #4]
 801de96:	f000 fb43 	bl	801e520 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801de9a:	e008      	b.n	801deae <HAL_UART_IRQHandler+0x76a>
      return;
 801de9c:	bf00      	nop
 801de9e:	e006      	b.n	801deae <HAL_UART_IRQHandler+0x76a>
    return;
 801dea0:	bf00      	nop
 801dea2:	e004      	b.n	801deae <HAL_UART_IRQHandler+0x76a>
      return;
 801dea4:	bf00      	nop
 801dea6:	e002      	b.n	801deae <HAL_UART_IRQHandler+0x76a>
      return;
 801dea8:	bf00      	nop
 801deaa:	e000      	b.n	801deae <HAL_UART_IRQHandler+0x76a>
    return;
 801deac:	bf00      	nop
  }
}
 801deae:	37e8      	adds	r7, #232	@ 0xe8
 801deb0:	46bd      	mov	sp, r7
 801deb2:	bd80      	pop	{r7, pc}
 801deb4:	effffffe 	.word	0xeffffffe

0801deb8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801deb8:	b480      	push	{r7}
 801deba:	b083      	sub	sp, #12
 801debc:	af00      	add	r7, sp, #0
 801debe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801dec0:	bf00      	nop
 801dec2:	370c      	adds	r7, #12
 801dec4:	46bd      	mov	sp, r7
 801dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801deca:	4770      	bx	lr

0801decc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801decc:	b480      	push	{r7}
 801dece:	b083      	sub	sp, #12
 801ded0:	af00      	add	r7, sp, #0
 801ded2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801ded4:	bf00      	nop
 801ded6:	370c      	adds	r7, #12
 801ded8:	46bd      	mov	sp, r7
 801deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dede:	4770      	bx	lr

0801dee0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801dee0:	b480      	push	{r7}
 801dee2:	b083      	sub	sp, #12
 801dee4:	af00      	add	r7, sp, #0
 801dee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801dee8:	bf00      	nop
 801deea:	370c      	adds	r7, #12
 801deec:	46bd      	mov	sp, r7
 801deee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801def2:	4770      	bx	lr

0801def4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801def4:	b480      	push	{r7}
 801def6:	b083      	sub	sp, #12
 801def8:	af00      	add	r7, sp, #0
 801defa:	6078      	str	r0, [r7, #4]
 801defc:	460b      	mov	r3, r1
 801defe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801df00:	bf00      	nop
 801df02:	370c      	adds	r7, #12
 801df04:	46bd      	mov	sp, r7
 801df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df0a:	4770      	bx	lr

0801df0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801df0c:	b580      	push	{r7, lr}
 801df0e:	b096      	sub	sp, #88	@ 0x58
 801df10:	af00      	add	r7, sp, #0
 801df12:	60f8      	str	r0, [r7, #12]
 801df14:	60b9      	str	r1, [r7, #8]
 801df16:	4613      	mov	r3, r2
 801df18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801df1a:	68fb      	ldr	r3, [r7, #12]
 801df1c:	68ba      	ldr	r2, [r7, #8]
 801df1e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 801df20:	68fb      	ldr	r3, [r7, #12]
 801df22:	88fa      	ldrh	r2, [r7, #6]
 801df24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801df28:	68fb      	ldr	r3, [r7, #12]
 801df2a:	2200      	movs	r2, #0
 801df2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801df30:	68fb      	ldr	r3, [r7, #12]
 801df32:	2222      	movs	r2, #34	@ 0x22
 801df34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 801df38:	68fb      	ldr	r3, [r7, #12]
 801df3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801df3e:	2b00      	cmp	r3, #0
 801df40:	d02d      	beq.n	801df9e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801df42:	68fb      	ldr	r3, [r7, #12]
 801df44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801df48:	4a40      	ldr	r2, [pc, #256]	@ (801e04c <UART_Start_Receive_DMA+0x140>)
 801df4a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801df4c:	68fb      	ldr	r3, [r7, #12]
 801df4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801df52:	4a3f      	ldr	r2, [pc, #252]	@ (801e050 <UART_Start_Receive_DMA+0x144>)
 801df54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801df56:	68fb      	ldr	r3, [r7, #12]
 801df58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801df5c:	4a3d      	ldr	r2, [pc, #244]	@ (801e054 <UART_Start_Receive_DMA+0x148>)
 801df5e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801df60:	68fb      	ldr	r3, [r7, #12]
 801df62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801df66:	2200      	movs	r2, #0
 801df68:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801df6a:	68fb      	ldr	r3, [r7, #12]
 801df6c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 801df70:	68fb      	ldr	r3, [r7, #12]
 801df72:	681b      	ldr	r3, [r3, #0]
 801df74:	3324      	adds	r3, #36	@ 0x24
 801df76:	4619      	mov	r1, r3
 801df78:	68fb      	ldr	r3, [r7, #12]
 801df7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801df7c:	461a      	mov	r2, r3
 801df7e:	88fb      	ldrh	r3, [r7, #6]
 801df80:	f7f4 ff2e 	bl	8012de0 <HAL_DMA_Start_IT>
 801df84:	4603      	mov	r3, r0
 801df86:	2b00      	cmp	r3, #0
 801df88:	d009      	beq.n	801df9e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801df8a:	68fb      	ldr	r3, [r7, #12]
 801df8c:	2210      	movs	r2, #16
 801df8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801df92:	68fb      	ldr	r3, [r7, #12]
 801df94:	2220      	movs	r2, #32
 801df96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 801df9a:	2301      	movs	r3, #1
 801df9c:	e051      	b.n	801e042 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801df9e:	68fb      	ldr	r3, [r7, #12]
 801dfa0:	691b      	ldr	r3, [r3, #16]
 801dfa2:	2b00      	cmp	r3, #0
 801dfa4:	d018      	beq.n	801dfd8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801dfa6:	68fb      	ldr	r3, [r7, #12]
 801dfa8:	681b      	ldr	r3, [r3, #0]
 801dfaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dfac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dfae:	e853 3f00 	ldrex	r3, [r3]
 801dfb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801dfb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dfb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801dfba:	657b      	str	r3, [r7, #84]	@ 0x54
 801dfbc:	68fb      	ldr	r3, [r7, #12]
 801dfbe:	681b      	ldr	r3, [r3, #0]
 801dfc0:	461a      	mov	r2, r3
 801dfc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801dfc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 801dfc6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dfc8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801dfca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801dfcc:	e841 2300 	strex	r3, r2, [r1]
 801dfd0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801dfd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dfd4:	2b00      	cmp	r3, #0
 801dfd6:	d1e6      	bne.n	801dfa6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dfd8:	68fb      	ldr	r3, [r7, #12]
 801dfda:	681b      	ldr	r3, [r3, #0]
 801dfdc:	3308      	adds	r3, #8
 801dfde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dfe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dfe2:	e853 3f00 	ldrex	r3, [r3]
 801dfe6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801dfe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dfea:	f043 0301 	orr.w	r3, r3, #1
 801dfee:	653b      	str	r3, [r7, #80]	@ 0x50
 801dff0:	68fb      	ldr	r3, [r7, #12]
 801dff2:	681b      	ldr	r3, [r3, #0]
 801dff4:	3308      	adds	r3, #8
 801dff6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801dff8:	637a      	str	r2, [r7, #52]	@ 0x34
 801dffa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dffc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801dffe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e000:	e841 2300 	strex	r3, r2, [r1]
 801e004:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801e006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e008:	2b00      	cmp	r3, #0
 801e00a:	d1e5      	bne.n	801dfd8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801e00c:	68fb      	ldr	r3, [r7, #12]
 801e00e:	681b      	ldr	r3, [r3, #0]
 801e010:	3308      	adds	r3, #8
 801e012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e014:	697b      	ldr	r3, [r7, #20]
 801e016:	e853 3f00 	ldrex	r3, [r3]
 801e01a:	613b      	str	r3, [r7, #16]
   return(result);
 801e01c:	693b      	ldr	r3, [r7, #16]
 801e01e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801e024:	68fb      	ldr	r3, [r7, #12]
 801e026:	681b      	ldr	r3, [r3, #0]
 801e028:	3308      	adds	r3, #8
 801e02a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e02c:	623a      	str	r2, [r7, #32]
 801e02e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e030:	69f9      	ldr	r1, [r7, #28]
 801e032:	6a3a      	ldr	r2, [r7, #32]
 801e034:	e841 2300 	strex	r3, r2, [r1]
 801e038:	61bb      	str	r3, [r7, #24]
   return(result);
 801e03a:	69bb      	ldr	r3, [r7, #24]
 801e03c:	2b00      	cmp	r3, #0
 801e03e:	d1e5      	bne.n	801e00c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 801e040:	2300      	movs	r3, #0
}
 801e042:	4618      	mov	r0, r3
 801e044:	3758      	adds	r7, #88	@ 0x58
 801e046:	46bd      	mov	sp, r7
 801e048:	bd80      	pop	{r7, pc}
 801e04a:	bf00      	nop
 801e04c:	0801e25b 	.word	0x0801e25b
 801e050:	0801e383 	.word	0x0801e383
 801e054:	0801e3c1 	.word	0x0801e3c1

0801e058 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801e058:	b480      	push	{r7}
 801e05a:	b08f      	sub	sp, #60	@ 0x3c
 801e05c:	af00      	add	r7, sp, #0
 801e05e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801e060:	687b      	ldr	r3, [r7, #4]
 801e062:	681b      	ldr	r3, [r3, #0]
 801e064:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e066:	6a3b      	ldr	r3, [r7, #32]
 801e068:	e853 3f00 	ldrex	r3, [r3]
 801e06c:	61fb      	str	r3, [r7, #28]
   return(result);
 801e06e:	69fb      	ldr	r3, [r7, #28]
 801e070:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801e074:	637b      	str	r3, [r7, #52]	@ 0x34
 801e076:	687b      	ldr	r3, [r7, #4]
 801e078:	681b      	ldr	r3, [r3, #0]
 801e07a:	461a      	mov	r2, r3
 801e07c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e07e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e080:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e082:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801e084:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e086:	e841 2300 	strex	r3, r2, [r1]
 801e08a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801e08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e08e:	2b00      	cmp	r3, #0
 801e090:	d1e6      	bne.n	801e060 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801e092:	687b      	ldr	r3, [r7, #4]
 801e094:	681b      	ldr	r3, [r3, #0]
 801e096:	3308      	adds	r3, #8
 801e098:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e09a:	68fb      	ldr	r3, [r7, #12]
 801e09c:	e853 3f00 	ldrex	r3, [r3]
 801e0a0:	60bb      	str	r3, [r7, #8]
   return(result);
 801e0a2:	68bb      	ldr	r3, [r7, #8]
 801e0a4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801e0a8:	633b      	str	r3, [r7, #48]	@ 0x30
 801e0aa:	687b      	ldr	r3, [r7, #4]
 801e0ac:	681b      	ldr	r3, [r3, #0]
 801e0ae:	3308      	adds	r3, #8
 801e0b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e0b2:	61ba      	str	r2, [r7, #24]
 801e0b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e0b6:	6979      	ldr	r1, [r7, #20]
 801e0b8:	69ba      	ldr	r2, [r7, #24]
 801e0ba:	e841 2300 	strex	r3, r2, [r1]
 801e0be:	613b      	str	r3, [r7, #16]
   return(result);
 801e0c0:	693b      	ldr	r3, [r7, #16]
 801e0c2:	2b00      	cmp	r3, #0
 801e0c4:	d1e5      	bne.n	801e092 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801e0c6:	687b      	ldr	r3, [r7, #4]
 801e0c8:	2220      	movs	r2, #32
 801e0ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 801e0ce:	bf00      	nop
 801e0d0:	373c      	adds	r7, #60	@ 0x3c
 801e0d2:	46bd      	mov	sp, r7
 801e0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0d8:	4770      	bx	lr
	...

0801e0dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801e0dc:	b480      	push	{r7}
 801e0de:	b095      	sub	sp, #84	@ 0x54
 801e0e0:	af00      	add	r7, sp, #0
 801e0e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801e0e4:	687b      	ldr	r3, [r7, #4]
 801e0e6:	681b      	ldr	r3, [r3, #0]
 801e0e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e0ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e0ec:	e853 3f00 	ldrex	r3, [r3]
 801e0f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801e0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e0f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801e0f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801e0fa:	687b      	ldr	r3, [r7, #4]
 801e0fc:	681b      	ldr	r3, [r3, #0]
 801e0fe:	461a      	mov	r2, r3
 801e100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e102:	643b      	str	r3, [r7, #64]	@ 0x40
 801e104:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e106:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801e108:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801e10a:	e841 2300 	strex	r3, r2, [r1]
 801e10e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801e110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e112:	2b00      	cmp	r3, #0
 801e114:	d1e6      	bne.n	801e0e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801e116:	687b      	ldr	r3, [r7, #4]
 801e118:	681b      	ldr	r3, [r3, #0]
 801e11a:	3308      	adds	r3, #8
 801e11c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e11e:	6a3b      	ldr	r3, [r7, #32]
 801e120:	e853 3f00 	ldrex	r3, [r3]
 801e124:	61fb      	str	r3, [r7, #28]
   return(result);
 801e126:	69fa      	ldr	r2, [r7, #28]
 801e128:	4b1e      	ldr	r3, [pc, #120]	@ (801e1a4 <UART_EndRxTransfer+0xc8>)
 801e12a:	4013      	ands	r3, r2
 801e12c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e12e:	687b      	ldr	r3, [r7, #4]
 801e130:	681b      	ldr	r3, [r3, #0]
 801e132:	3308      	adds	r3, #8
 801e134:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801e136:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801e138:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e13a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801e13c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e13e:	e841 2300 	strex	r3, r2, [r1]
 801e142:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801e144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e146:	2b00      	cmp	r3, #0
 801e148:	d1e5      	bne.n	801e116 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e14a:	687b      	ldr	r3, [r7, #4]
 801e14c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e14e:	2b01      	cmp	r3, #1
 801e150:	d118      	bne.n	801e184 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e152:	687b      	ldr	r3, [r7, #4]
 801e154:	681b      	ldr	r3, [r3, #0]
 801e156:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e158:	68fb      	ldr	r3, [r7, #12]
 801e15a:	e853 3f00 	ldrex	r3, [r3]
 801e15e:	60bb      	str	r3, [r7, #8]
   return(result);
 801e160:	68bb      	ldr	r3, [r7, #8]
 801e162:	f023 0310 	bic.w	r3, r3, #16
 801e166:	647b      	str	r3, [r7, #68]	@ 0x44
 801e168:	687b      	ldr	r3, [r7, #4]
 801e16a:	681b      	ldr	r3, [r3, #0]
 801e16c:	461a      	mov	r2, r3
 801e16e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e170:	61bb      	str	r3, [r7, #24]
 801e172:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e174:	6979      	ldr	r1, [r7, #20]
 801e176:	69ba      	ldr	r2, [r7, #24]
 801e178:	e841 2300 	strex	r3, r2, [r1]
 801e17c:	613b      	str	r3, [r7, #16]
   return(result);
 801e17e:	693b      	ldr	r3, [r7, #16]
 801e180:	2b00      	cmp	r3, #0
 801e182:	d1e6      	bne.n	801e152 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801e184:	687b      	ldr	r3, [r7, #4]
 801e186:	2220      	movs	r2, #32
 801e188:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e18c:	687b      	ldr	r3, [r7, #4]
 801e18e:	2200      	movs	r2, #0
 801e190:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801e192:	687b      	ldr	r3, [r7, #4]
 801e194:	2200      	movs	r2, #0
 801e196:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801e198:	bf00      	nop
 801e19a:	3754      	adds	r7, #84	@ 0x54
 801e19c:	46bd      	mov	sp, r7
 801e19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1a2:	4770      	bx	lr
 801e1a4:	effffffe 	.word	0xeffffffe

0801e1a8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801e1a8:	b580      	push	{r7, lr}
 801e1aa:	b090      	sub	sp, #64	@ 0x40
 801e1ac:	af00      	add	r7, sp, #0
 801e1ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e1b0:	687b      	ldr	r3, [r7, #4]
 801e1b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e1b4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801e1b6:	687b      	ldr	r3, [r7, #4]
 801e1b8:	69db      	ldr	r3, [r3, #28]
 801e1ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e1be:	d037      	beq.n	801e230 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 801e1c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e1c2:	2200      	movs	r2, #0
 801e1c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801e1c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e1ca:	681b      	ldr	r3, [r3, #0]
 801e1cc:	3308      	adds	r3, #8
 801e1ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e1d2:	e853 3f00 	ldrex	r3, [r3]
 801e1d6:	623b      	str	r3, [r7, #32]
   return(result);
 801e1d8:	6a3b      	ldr	r3, [r7, #32]
 801e1da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801e1de:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e1e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e1e2:	681b      	ldr	r3, [r3, #0]
 801e1e4:	3308      	adds	r3, #8
 801e1e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801e1e8:	633a      	str	r2, [r7, #48]	@ 0x30
 801e1ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e1ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801e1ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e1f0:	e841 2300 	strex	r3, r2, [r1]
 801e1f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801e1f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e1f8:	2b00      	cmp	r3, #0
 801e1fa:	d1e5      	bne.n	801e1c8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801e1fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e1fe:	681b      	ldr	r3, [r3, #0]
 801e200:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e202:	693b      	ldr	r3, [r7, #16]
 801e204:	e853 3f00 	ldrex	r3, [r3]
 801e208:	60fb      	str	r3, [r7, #12]
   return(result);
 801e20a:	68fb      	ldr	r3, [r7, #12]
 801e20c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e210:	637b      	str	r3, [r7, #52]	@ 0x34
 801e212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e214:	681b      	ldr	r3, [r3, #0]
 801e216:	461a      	mov	r2, r3
 801e218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e21a:	61fb      	str	r3, [r7, #28]
 801e21c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e21e:	69b9      	ldr	r1, [r7, #24]
 801e220:	69fa      	ldr	r2, [r7, #28]
 801e222:	e841 2300 	strex	r3, r2, [r1]
 801e226:	617b      	str	r3, [r7, #20]
   return(result);
 801e228:	697b      	ldr	r3, [r7, #20]
 801e22a:	2b00      	cmp	r3, #0
 801e22c:	d1e6      	bne.n	801e1fc <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801e22e:	e002      	b.n	801e236 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 801e230:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801e232:	f7f0 feeb 	bl	800f00c <HAL_UART_TxCpltCallback>
}
 801e236:	bf00      	nop
 801e238:	3740      	adds	r7, #64	@ 0x40
 801e23a:	46bd      	mov	sp, r7
 801e23c:	bd80      	pop	{r7, pc}

0801e23e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801e23e:	b580      	push	{r7, lr}
 801e240:	b084      	sub	sp, #16
 801e242:	af00      	add	r7, sp, #0
 801e244:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e246:	687b      	ldr	r3, [r7, #4]
 801e248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e24a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801e24c:	68f8      	ldr	r0, [r7, #12]
 801e24e:	f7ff fe33 	bl	801deb8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e252:	bf00      	nop
 801e254:	3710      	adds	r7, #16
 801e256:	46bd      	mov	sp, r7
 801e258:	bd80      	pop	{r7, pc}

0801e25a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801e25a:	b580      	push	{r7, lr}
 801e25c:	b09c      	sub	sp, #112	@ 0x70
 801e25e:	af00      	add	r7, sp, #0
 801e260:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e262:	687b      	ldr	r3, [r7, #4]
 801e264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e266:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801e268:	687b      	ldr	r3, [r7, #4]
 801e26a:	69db      	ldr	r3, [r3, #28]
 801e26c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e270:	d071      	beq.n	801e356 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 801e272:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801e274:	2200      	movs	r2, #0
 801e276:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801e27a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801e27c:	681b      	ldr	r3, [r3, #0]
 801e27e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e280:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e282:	e853 3f00 	ldrex	r3, [r3]
 801e286:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801e288:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e28a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801e28e:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e290:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801e292:	681b      	ldr	r3, [r3, #0]
 801e294:	461a      	mov	r2, r3
 801e296:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e298:	65bb      	str	r3, [r7, #88]	@ 0x58
 801e29a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e29c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801e29e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801e2a0:	e841 2300 	strex	r3, r2, [r1]
 801e2a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801e2a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e2a8:	2b00      	cmp	r3, #0
 801e2aa:	d1e6      	bne.n	801e27a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e2ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801e2ae:	681b      	ldr	r3, [r3, #0]
 801e2b0:	3308      	adds	r3, #8
 801e2b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e2b6:	e853 3f00 	ldrex	r3, [r3]
 801e2ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801e2bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e2be:	f023 0301 	bic.w	r3, r3, #1
 801e2c2:	667b      	str	r3, [r7, #100]	@ 0x64
 801e2c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801e2c6:	681b      	ldr	r3, [r3, #0]
 801e2c8:	3308      	adds	r3, #8
 801e2ca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801e2cc:	647a      	str	r2, [r7, #68]	@ 0x44
 801e2ce:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e2d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801e2d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801e2d4:	e841 2300 	strex	r3, r2, [r1]
 801e2d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801e2da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e2dc:	2b00      	cmp	r3, #0
 801e2de:	d1e5      	bne.n	801e2ac <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801e2e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801e2e2:	681b      	ldr	r3, [r3, #0]
 801e2e4:	3308      	adds	r3, #8
 801e2e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e2ea:	e853 3f00 	ldrex	r3, [r3]
 801e2ee:	623b      	str	r3, [r7, #32]
   return(result);
 801e2f0:	6a3b      	ldr	r3, [r7, #32]
 801e2f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801e2f6:	663b      	str	r3, [r7, #96]	@ 0x60
 801e2f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801e2fa:	681b      	ldr	r3, [r3, #0]
 801e2fc:	3308      	adds	r3, #8
 801e2fe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801e300:	633a      	str	r2, [r7, #48]	@ 0x30
 801e302:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e304:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801e306:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e308:	e841 2300 	strex	r3, r2, [r1]
 801e30c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801e30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e310:	2b00      	cmp	r3, #0
 801e312:	d1e5      	bne.n	801e2e0 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801e314:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801e316:	2220      	movs	r2, #32
 801e318:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e31c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801e31e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e320:	2b01      	cmp	r3, #1
 801e322:	d118      	bne.n	801e356 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e324:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801e326:	681b      	ldr	r3, [r3, #0]
 801e328:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e32a:	693b      	ldr	r3, [r7, #16]
 801e32c:	e853 3f00 	ldrex	r3, [r3]
 801e330:	60fb      	str	r3, [r7, #12]
   return(result);
 801e332:	68fb      	ldr	r3, [r7, #12]
 801e334:	f023 0310 	bic.w	r3, r3, #16
 801e338:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801e33a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801e33c:	681b      	ldr	r3, [r3, #0]
 801e33e:	461a      	mov	r2, r3
 801e340:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e342:	61fb      	str	r3, [r7, #28]
 801e344:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e346:	69b9      	ldr	r1, [r7, #24]
 801e348:	69fa      	ldr	r2, [r7, #28]
 801e34a:	e841 2300 	strex	r3, r2, [r1]
 801e34e:	617b      	str	r3, [r7, #20]
   return(result);
 801e350:	697b      	ldr	r3, [r7, #20]
 801e352:	2b00      	cmp	r3, #0
 801e354:	d1e6      	bne.n	801e324 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e356:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801e358:	2200      	movs	r2, #0
 801e35a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e35c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801e35e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e360:	2b01      	cmp	r3, #1
 801e362:	d107      	bne.n	801e374 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801e364:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801e366:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801e36a:	4619      	mov	r1, r3
 801e36c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801e36e:	f7ff fdc1 	bl	801def4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801e372:	e002      	b.n	801e37a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 801e374:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801e376:	f7f0 fecb 	bl	800f110 <HAL_UART_RxCpltCallback>
}
 801e37a:	bf00      	nop
 801e37c:	3770      	adds	r7, #112	@ 0x70
 801e37e:	46bd      	mov	sp, r7
 801e380:	bd80      	pop	{r7, pc}

0801e382 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801e382:	b580      	push	{r7, lr}
 801e384:	b084      	sub	sp, #16
 801e386:	af00      	add	r7, sp, #0
 801e388:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e38a:	687b      	ldr	r3, [r7, #4]
 801e38c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e38e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801e390:	68fb      	ldr	r3, [r7, #12]
 801e392:	2201      	movs	r2, #1
 801e394:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e396:	68fb      	ldr	r3, [r7, #12]
 801e398:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e39a:	2b01      	cmp	r3, #1
 801e39c:	d109      	bne.n	801e3b2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801e39e:	68fb      	ldr	r3, [r7, #12]
 801e3a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801e3a4:	085b      	lsrs	r3, r3, #1
 801e3a6:	b29b      	uxth	r3, r3
 801e3a8:	4619      	mov	r1, r3
 801e3aa:	68f8      	ldr	r0, [r7, #12]
 801e3ac:	f7ff fda2 	bl	801def4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801e3b0:	e002      	b.n	801e3b8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 801e3b2:	68f8      	ldr	r0, [r7, #12]
 801e3b4:	f7ff fd8a 	bl	801decc <HAL_UART_RxHalfCpltCallback>
}
 801e3b8:	bf00      	nop
 801e3ba:	3710      	adds	r7, #16
 801e3bc:	46bd      	mov	sp, r7
 801e3be:	bd80      	pop	{r7, pc}

0801e3c0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801e3c0:	b580      	push	{r7, lr}
 801e3c2:	b086      	sub	sp, #24
 801e3c4:	af00      	add	r7, sp, #0
 801e3c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e3c8:	687b      	ldr	r3, [r7, #4]
 801e3ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e3cc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801e3ce:	697b      	ldr	r3, [r7, #20]
 801e3d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801e3d4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801e3d6:	697b      	ldr	r3, [r7, #20]
 801e3d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801e3dc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801e3de:	697b      	ldr	r3, [r7, #20]
 801e3e0:	681b      	ldr	r3, [r3, #0]
 801e3e2:	689b      	ldr	r3, [r3, #8]
 801e3e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801e3e8:	2b80      	cmp	r3, #128	@ 0x80
 801e3ea:	d109      	bne.n	801e400 <UART_DMAError+0x40>
 801e3ec:	693b      	ldr	r3, [r7, #16]
 801e3ee:	2b21      	cmp	r3, #33	@ 0x21
 801e3f0:	d106      	bne.n	801e400 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801e3f2:	697b      	ldr	r3, [r7, #20]
 801e3f4:	2200      	movs	r2, #0
 801e3f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 801e3fa:	6978      	ldr	r0, [r7, #20]
 801e3fc:	f7ff fe2c 	bl	801e058 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801e400:	697b      	ldr	r3, [r7, #20]
 801e402:	681b      	ldr	r3, [r3, #0]
 801e404:	689b      	ldr	r3, [r3, #8]
 801e406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e40a:	2b40      	cmp	r3, #64	@ 0x40
 801e40c:	d109      	bne.n	801e422 <UART_DMAError+0x62>
 801e40e:	68fb      	ldr	r3, [r7, #12]
 801e410:	2b22      	cmp	r3, #34	@ 0x22
 801e412:	d106      	bne.n	801e422 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801e414:	697b      	ldr	r3, [r7, #20]
 801e416:	2200      	movs	r2, #0
 801e418:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 801e41c:	6978      	ldr	r0, [r7, #20]
 801e41e:	f7ff fe5d 	bl	801e0dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801e422:	697b      	ldr	r3, [r7, #20]
 801e424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801e428:	f043 0210 	orr.w	r2, r3, #16
 801e42c:	697b      	ldr	r3, [r7, #20]
 801e42e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801e432:	6978      	ldr	r0, [r7, #20]
 801e434:	f7ff fd54 	bl	801dee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e438:	bf00      	nop
 801e43a:	3718      	adds	r7, #24
 801e43c:	46bd      	mov	sp, r7
 801e43e:	bd80      	pop	{r7, pc}

0801e440 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801e440:	b580      	push	{r7, lr}
 801e442:	b084      	sub	sp, #16
 801e444:	af00      	add	r7, sp, #0
 801e446:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e448:	687b      	ldr	r3, [r7, #4]
 801e44a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e44c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801e44e:	68fb      	ldr	r3, [r7, #12]
 801e450:	2200      	movs	r2, #0
 801e452:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 801e456:	68fb      	ldr	r3, [r7, #12]
 801e458:	2200      	movs	r2, #0
 801e45a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801e45e:	68f8      	ldr	r0, [r7, #12]
 801e460:	f7ff fd3e 	bl	801dee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e464:	bf00      	nop
 801e466:	3710      	adds	r7, #16
 801e468:	46bd      	mov	sp, r7
 801e46a:	bd80      	pop	{r7, pc}

0801e46c <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 801e46c:	b580      	push	{r7, lr}
 801e46e:	b084      	sub	sp, #16
 801e470:	af00      	add	r7, sp, #0
 801e472:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801e474:	687b      	ldr	r3, [r7, #4]
 801e476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e478:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 801e47a:	68fb      	ldr	r3, [r7, #12]
 801e47c:	2200      	movs	r2, #0
 801e47e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801e482:	68fb      	ldr	r3, [r7, #12]
 801e484:	681b      	ldr	r3, [r3, #0]
 801e486:	220f      	movs	r2, #15
 801e488:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801e48a:	68fb      	ldr	r3, [r7, #12]
 801e48c:	681b      	ldr	r3, [r3, #0]
 801e48e:	699a      	ldr	r2, [r3, #24]
 801e490:	68fb      	ldr	r3, [r7, #12]
 801e492:	681b      	ldr	r3, [r3, #0]
 801e494:	f042 0208 	orr.w	r2, r2, #8
 801e498:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801e49a:	68fb      	ldr	r3, [r7, #12]
 801e49c:	2220      	movs	r2, #32
 801e49e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e4a2:	68fb      	ldr	r3, [r7, #12]
 801e4a4:	2200      	movs	r2, #0
 801e4a6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 801e4a8:	68f8      	ldr	r0, [r7, #12]
 801e4aa:	f7f0 ff5d 	bl	800f368 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e4ae:	bf00      	nop
 801e4b0:	3710      	adds	r7, #16
 801e4b2:	46bd      	mov	sp, r7
 801e4b4:	bd80      	pop	{r7, pc}

0801e4b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801e4b6:	b580      	push	{r7, lr}
 801e4b8:	b088      	sub	sp, #32
 801e4ba:	af00      	add	r7, sp, #0
 801e4bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801e4be:	687b      	ldr	r3, [r7, #4]
 801e4c0:	681b      	ldr	r3, [r3, #0]
 801e4c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e4c4:	68fb      	ldr	r3, [r7, #12]
 801e4c6:	e853 3f00 	ldrex	r3, [r3]
 801e4ca:	60bb      	str	r3, [r7, #8]
   return(result);
 801e4cc:	68bb      	ldr	r3, [r7, #8]
 801e4ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801e4d2:	61fb      	str	r3, [r7, #28]
 801e4d4:	687b      	ldr	r3, [r7, #4]
 801e4d6:	681b      	ldr	r3, [r3, #0]
 801e4d8:	461a      	mov	r2, r3
 801e4da:	69fb      	ldr	r3, [r7, #28]
 801e4dc:	61bb      	str	r3, [r7, #24]
 801e4de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e4e0:	6979      	ldr	r1, [r7, #20]
 801e4e2:	69ba      	ldr	r2, [r7, #24]
 801e4e4:	e841 2300 	strex	r3, r2, [r1]
 801e4e8:	613b      	str	r3, [r7, #16]
   return(result);
 801e4ea:	693b      	ldr	r3, [r7, #16]
 801e4ec:	2b00      	cmp	r3, #0
 801e4ee:	d1e6      	bne.n	801e4be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801e4f0:	687b      	ldr	r3, [r7, #4]
 801e4f2:	2220      	movs	r2, #32
 801e4f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801e4f8:	687b      	ldr	r3, [r7, #4]
 801e4fa:	2200      	movs	r2, #0
 801e4fc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801e4fe:	6878      	ldr	r0, [r7, #4]
 801e500:	f7f0 fd84 	bl	800f00c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e504:	bf00      	nop
 801e506:	3720      	adds	r7, #32
 801e508:	46bd      	mov	sp, r7
 801e50a:	bd80      	pop	{r7, pc}

0801e50c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801e50c:	b480      	push	{r7}
 801e50e:	b083      	sub	sp, #12
 801e510:	af00      	add	r7, sp, #0
 801e512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801e514:	bf00      	nop
 801e516:	370c      	adds	r7, #12
 801e518:	46bd      	mov	sp, r7
 801e51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e51e:	4770      	bx	lr

0801e520 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801e520:	b480      	push	{r7}
 801e522:	b083      	sub	sp, #12
 801e524:	af00      	add	r7, sp, #0
 801e526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801e528:	bf00      	nop
 801e52a:	370c      	adds	r7, #12
 801e52c:	46bd      	mov	sp, r7
 801e52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e532:	4770      	bx	lr

0801e534 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801e534:	b480      	push	{r7}
 801e536:	b083      	sub	sp, #12
 801e538:	af00      	add	r7, sp, #0
 801e53a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801e53c:	bf00      	nop
 801e53e:	370c      	adds	r7, #12
 801e540:	46bd      	mov	sp, r7
 801e542:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e546:	4770      	bx	lr

0801e548 <memcmp>:
 801e548:	b510      	push	{r4, lr}
 801e54a:	3901      	subs	r1, #1
 801e54c:	4402      	add	r2, r0
 801e54e:	4290      	cmp	r0, r2
 801e550:	d101      	bne.n	801e556 <memcmp+0xe>
 801e552:	2000      	movs	r0, #0
 801e554:	e005      	b.n	801e562 <memcmp+0x1a>
 801e556:	7803      	ldrb	r3, [r0, #0]
 801e558:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e55c:	42a3      	cmp	r3, r4
 801e55e:	d001      	beq.n	801e564 <memcmp+0x1c>
 801e560:	1b18      	subs	r0, r3, r4
 801e562:	bd10      	pop	{r4, pc}
 801e564:	3001      	adds	r0, #1
 801e566:	e7f2      	b.n	801e54e <memcmp+0x6>

0801e568 <memset>:
 801e568:	4402      	add	r2, r0
 801e56a:	4603      	mov	r3, r0
 801e56c:	4293      	cmp	r3, r2
 801e56e:	d100      	bne.n	801e572 <memset+0xa>
 801e570:	4770      	bx	lr
 801e572:	f803 1b01 	strb.w	r1, [r3], #1
 801e576:	e7f9      	b.n	801e56c <memset+0x4>

0801e578 <__errno>:
 801e578:	4b01      	ldr	r3, [pc, #4]	@ (801e580 <__errno+0x8>)
 801e57a:	6818      	ldr	r0, [r3, #0]
 801e57c:	4770      	bx	lr
 801e57e:	bf00      	nop
 801e580:	240008c0 	.word	0x240008c0

0801e584 <__libc_init_array>:
 801e584:	b570      	push	{r4, r5, r6, lr}
 801e586:	4d0d      	ldr	r5, [pc, #52]	@ (801e5bc <__libc_init_array+0x38>)
 801e588:	4c0d      	ldr	r4, [pc, #52]	@ (801e5c0 <__libc_init_array+0x3c>)
 801e58a:	1b64      	subs	r4, r4, r5
 801e58c:	10a4      	asrs	r4, r4, #2
 801e58e:	2600      	movs	r6, #0
 801e590:	42a6      	cmp	r6, r4
 801e592:	d109      	bne.n	801e5a8 <__libc_init_array+0x24>
 801e594:	4d0b      	ldr	r5, [pc, #44]	@ (801e5c4 <__libc_init_array+0x40>)
 801e596:	4c0c      	ldr	r4, [pc, #48]	@ (801e5c8 <__libc_init_array+0x44>)
 801e598:	f001 f9de 	bl	801f958 <_init>
 801e59c:	1b64      	subs	r4, r4, r5
 801e59e:	10a4      	asrs	r4, r4, #2
 801e5a0:	2600      	movs	r6, #0
 801e5a2:	42a6      	cmp	r6, r4
 801e5a4:	d105      	bne.n	801e5b2 <__libc_init_array+0x2e>
 801e5a6:	bd70      	pop	{r4, r5, r6, pc}
 801e5a8:	f855 3b04 	ldr.w	r3, [r5], #4
 801e5ac:	4798      	blx	r3
 801e5ae:	3601      	adds	r6, #1
 801e5b0:	e7ee      	b.n	801e590 <__libc_init_array+0xc>
 801e5b2:	f855 3b04 	ldr.w	r3, [r5], #4
 801e5b6:	4798      	blx	r3
 801e5b8:	3601      	adds	r6, #1
 801e5ba:	e7f2      	b.n	801e5a2 <__libc_init_array+0x1e>
 801e5bc:	08045308 	.word	0x08045308
 801e5c0:	08045308 	.word	0x08045308
 801e5c4:	08045308 	.word	0x08045308
 801e5c8:	0804530c 	.word	0x0804530c

0801e5cc <memcpy>:
 801e5cc:	440a      	add	r2, r1
 801e5ce:	4291      	cmp	r1, r2
 801e5d0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801e5d4:	d100      	bne.n	801e5d8 <memcpy+0xc>
 801e5d6:	4770      	bx	lr
 801e5d8:	b510      	push	{r4, lr}
 801e5da:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e5de:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e5e2:	4291      	cmp	r1, r2
 801e5e4:	d1f9      	bne.n	801e5da <memcpy+0xe>
 801e5e6:	bd10      	pop	{r4, pc}

0801e5e8 <hypotf>:
 801e5e8:	b508      	push	{r3, lr}
 801e5ea:	ed2d 8b04 	vpush	{d8-d9}
 801e5ee:	eeb0 9a40 	vmov.f32	s18, s0
 801e5f2:	eef0 8a60 	vmov.f32	s17, s1
 801e5f6:	f000 f9cf 	bl	801e998 <__ieee754_hypotf>
 801e5fa:	eeb0 8a40 	vmov.f32	s16, s0
 801e5fe:	f000 f91c 	bl	801e83a <finitef>
 801e602:	b978      	cbnz	r0, 801e624 <hypotf+0x3c>
 801e604:	eeb0 0a49 	vmov.f32	s0, s18
 801e608:	f000 f917 	bl	801e83a <finitef>
 801e60c:	b150      	cbz	r0, 801e624 <hypotf+0x3c>
 801e60e:	eeb0 0a68 	vmov.f32	s0, s17
 801e612:	f000 f912 	bl	801e83a <finitef>
 801e616:	b128      	cbz	r0, 801e624 <hypotf+0x3c>
 801e618:	f7ff ffae 	bl	801e578 <__errno>
 801e61c:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 801e630 <hypotf+0x48>
 801e620:	2322      	movs	r3, #34	@ 0x22
 801e622:	6003      	str	r3, [r0, #0]
 801e624:	eeb0 0a48 	vmov.f32	s0, s16
 801e628:	ecbd 8b04 	vpop	{d8-d9}
 801e62c:	bd08      	pop	{r3, pc}
 801e62e:	bf00      	nop
 801e630:	7f800000 	.word	0x7f800000

0801e634 <cargf>:
 801e634:	b508      	push	{r3, lr}
 801e636:	ed2d 8b04 	vpush	{d8-d9}
 801e63a:	eeb0 9a40 	vmov.f32	s18, s0
 801e63e:	eef0 8a60 	vmov.f32	s17, s1
 801e642:	f000 f9a5 	bl	801e990 <cimagf>
 801e646:	eef0 0a68 	vmov.f32	s1, s17
 801e64a:	eeb0 8a40 	vmov.f32	s16, s0
 801e64e:	eeb0 0a49 	vmov.f32	s0, s18
 801e652:	f000 fbcd 	bl	801edf0 <crealf>
 801e656:	eef0 0a40 	vmov.f32	s1, s0
 801e65a:	eeb0 0a48 	vmov.f32	s0, s16
 801e65e:	ecbd 8b04 	vpop	{d8-d9}
 801e662:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801e666:	f000 bbc4 	b.w	801edf2 <atan2f>

0801e66a <sinf_poly>:
 801e66a:	07cb      	lsls	r3, r1, #31
 801e66c:	d412      	bmi.n	801e694 <sinf_poly+0x2a>
 801e66e:	ee21 5b00 	vmul.f64	d5, d1, d0
 801e672:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801e676:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 801e67a:	eea6 7b01 	vfma.f64	d7, d6, d1
 801e67e:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801e682:	ee21 1b05 	vmul.f64	d1, d1, d5
 801e686:	eea6 0b05 	vfma.f64	d0, d6, d5
 801e68a:	eea7 0b01 	vfma.f64	d0, d7, d1
 801e68e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801e692:	4770      	bx	lr
 801e694:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801e698:	ee21 5b01 	vmul.f64	d5, d1, d1
 801e69c:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801e6a0:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801e6a4:	eea1 7b06 	vfma.f64	d7, d1, d6
 801e6a8:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801e6ac:	eea1 0b06 	vfma.f64	d0, d1, d6
 801e6b0:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801e6b4:	ee21 1b05 	vmul.f64	d1, d1, d5
 801e6b8:	eea5 0b06 	vfma.f64	d0, d5, d6
 801e6bc:	e7e5      	b.n	801e68a <sinf_poly+0x20>
	...

0801e6c0 <cosf>:
 801e6c0:	b538      	push	{r3, r4, r5, lr}
 801e6c2:	ee10 4a10 	vmov	r4, s0
 801e6c6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801e6ca:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801e6ce:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 801e6d2:	d21f      	bcs.n	801e714 <cosf+0x54>
 801e6d4:	ee27 7b07 	vmul.f64	d7, d7, d7
 801e6d8:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801e6dc:	f0c0 8082 	bcc.w	801e7e4 <cosf+0x124>
 801e6e0:	ee27 4b07 	vmul.f64	d4, d7, d7
 801e6e4:	4b44      	ldr	r3, [pc, #272]	@ (801e7f8 <cosf+0x138>)
 801e6e6:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 801e6ea:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 801e6ee:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 801e6f2:	eea7 6b05 	vfma.f64	d6, d7, d5
 801e6f6:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 801e6fa:	eea7 0b05 	vfma.f64	d0, d7, d5
 801e6fe:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 801e702:	ee27 7b04 	vmul.f64	d7, d7, d4
 801e706:	eea4 0b05 	vfma.f64	d0, d4, d5
 801e70a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801e70e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801e712:	bd38      	pop	{r3, r4, r5, pc}
 801e714:	f240 422e 	movw	r2, #1070	@ 0x42e
 801e718:	4293      	cmp	r3, r2
 801e71a:	d829      	bhi.n	801e770 <cosf+0xb0>
 801e71c:	4b36      	ldr	r3, [pc, #216]	@ (801e7f8 <cosf+0x138>)
 801e71e:	ed93 6b08 	vldr	d6, [r3, #32]
 801e722:	ee27 6b06 	vmul.f64	d6, d7, d6
 801e726:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 801e72a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801e72e:	ee16 1a90 	vmov	r1, s13
 801e732:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801e736:	1609      	asrs	r1, r1, #24
 801e738:	ee06 1a90 	vmov	s13, r1
 801e73c:	f001 0203 	and.w	r2, r1, #3
 801e740:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801e744:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801e748:	ed92 0b00 	vldr	d0, [r2]
 801e74c:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 801e750:	f011 0f02 	tst.w	r1, #2
 801e754:	f081 0101 	eor.w	r1, r1, #1
 801e758:	eea5 7b46 	vfms.f64	d7, d5, d6
 801e75c:	bf08      	it	eq
 801e75e:	4618      	moveq	r0, r3
 801e760:	ee27 1b07 	vmul.f64	d1, d7, d7
 801e764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e768:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e76c:	f7ff bf7d 	b.w	801e66a <sinf_poly>
 801e770:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 801e774:	d232      	bcs.n	801e7dc <cosf+0x11c>
 801e776:	4921      	ldr	r1, [pc, #132]	@ (801e7fc <cosf+0x13c>)
 801e778:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801e77c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801e780:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801e784:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801e788:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801e78c:	6a10      	ldr	r0, [r2, #32]
 801e78e:	6912      	ldr	r2, [r2, #16]
 801e790:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801e794:	40ab      	lsls	r3, r5
 801e796:	fba0 5003 	umull	r5, r0, r0, r3
 801e79a:	4359      	muls	r1, r3
 801e79c:	fbe3 0102 	umlal	r0, r1, r3, r2
 801e7a0:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801e7a4:	0f9d      	lsrs	r5, r3, #30
 801e7a6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801e7aa:	1ac9      	subs	r1, r1, r3
 801e7ac:	f7e1 ff3e 	bl	800062c <__aeabi_l2d>
 801e7b0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801e7b4:	4b10      	ldr	r3, [pc, #64]	@ (801e7f8 <cosf+0x138>)
 801e7b6:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 801e7f0 <cosf+0x130>
 801e7ba:	ec41 0b17 	vmov	d7, r0, r1
 801e7be:	f004 0203 	and.w	r2, r4, #3
 801e7c2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801e7c6:	ed92 0b00 	vldr	d0, [r2]
 801e7ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 801e7ce:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801e7d2:	f014 0f02 	tst.w	r4, #2
 801e7d6:	f085 0101 	eor.w	r1, r5, #1
 801e7da:	e7bf      	b.n	801e75c <cosf+0x9c>
 801e7dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e7e0:	f000 b81c 	b.w	801e81c <__math_invalidf>
 801e7e4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801e7e8:	e793      	b.n	801e712 <cosf+0x52>
 801e7ea:	bf00      	nop
 801e7ec:	f3af 8000 	nop.w
 801e7f0:	54442d18 	.word	0x54442d18
 801e7f4:	3c1921fb 	.word	0x3c1921fb
 801e7f8:	08045018 	.word	0x08045018
 801e7fc:	08044fb4 	.word	0x08044fb4

0801e800 <with_errnof>:
 801e800:	b510      	push	{r4, lr}
 801e802:	ed2d 8b02 	vpush	{d8}
 801e806:	eeb0 8a40 	vmov.f32	s16, s0
 801e80a:	4604      	mov	r4, r0
 801e80c:	f7ff feb4 	bl	801e578 <__errno>
 801e810:	eeb0 0a48 	vmov.f32	s0, s16
 801e814:	ecbd 8b02 	vpop	{d8}
 801e818:	6004      	str	r4, [r0, #0]
 801e81a:	bd10      	pop	{r4, pc}

0801e81c <__math_invalidf>:
 801e81c:	eef0 7a40 	vmov.f32	s15, s0
 801e820:	ee30 7a40 	vsub.f32	s14, s0, s0
 801e824:	eef4 7a67 	vcmp.f32	s15, s15
 801e828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e82c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801e830:	d602      	bvs.n	801e838 <__math_invalidf+0x1c>
 801e832:	2021      	movs	r0, #33	@ 0x21
 801e834:	f7ff bfe4 	b.w	801e800 <with_errnof>
 801e838:	4770      	bx	lr

0801e83a <finitef>:
 801e83a:	ee10 3a10 	vmov	r3, s0
 801e83e:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801e842:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801e846:	bfac      	ite	ge
 801e848:	2000      	movge	r0, #0
 801e84a:	2001      	movlt	r0, #1
 801e84c:	4770      	bx	lr
	...

0801e850 <cos>:
 801e850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e852:	eeb0 7b40 	vmov.f64	d7, d0
 801e856:	ee17 3a90 	vmov	r3, s15
 801e85a:	4a21      	ldr	r2, [pc, #132]	@ (801e8e0 <cos+0x90>)
 801e85c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e860:	4293      	cmp	r3, r2
 801e862:	d806      	bhi.n	801e872 <cos+0x22>
 801e864:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 801e8d8 <cos+0x88>
 801e868:	b005      	add	sp, #20
 801e86a:	f85d eb04 	ldr.w	lr, [sp], #4
 801e86e:	f000 bd3f 	b.w	801f2f0 <__kernel_cos>
 801e872:	4a1c      	ldr	r2, [pc, #112]	@ (801e8e4 <cos+0x94>)
 801e874:	4293      	cmp	r3, r2
 801e876:	d904      	bls.n	801e882 <cos+0x32>
 801e878:	ee30 0b40 	vsub.f64	d0, d0, d0
 801e87c:	b005      	add	sp, #20
 801e87e:	f85d fb04 	ldr.w	pc, [sp], #4
 801e882:	4668      	mov	r0, sp
 801e884:	f000 f970 	bl	801eb68 <__ieee754_rem_pio2>
 801e888:	f000 0003 	and.w	r0, r0, #3
 801e88c:	2801      	cmp	r0, #1
 801e88e:	d009      	beq.n	801e8a4 <cos+0x54>
 801e890:	2802      	cmp	r0, #2
 801e892:	d010      	beq.n	801e8b6 <cos+0x66>
 801e894:	b9b0      	cbnz	r0, 801e8c4 <cos+0x74>
 801e896:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e89a:	ed9d 0b00 	vldr	d0, [sp]
 801e89e:	f000 fd27 	bl	801f2f0 <__kernel_cos>
 801e8a2:	e7eb      	b.n	801e87c <cos+0x2c>
 801e8a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e8a8:	ed9d 0b00 	vldr	d0, [sp]
 801e8ac:	f000 fd88 	bl	801f3c0 <__kernel_sin>
 801e8b0:	eeb1 0b40 	vneg.f64	d0, d0
 801e8b4:	e7e2      	b.n	801e87c <cos+0x2c>
 801e8b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e8ba:	ed9d 0b00 	vldr	d0, [sp]
 801e8be:	f000 fd17 	bl	801f2f0 <__kernel_cos>
 801e8c2:	e7f5      	b.n	801e8b0 <cos+0x60>
 801e8c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e8c8:	ed9d 0b00 	vldr	d0, [sp]
 801e8cc:	2001      	movs	r0, #1
 801e8ce:	f000 fd77 	bl	801f3c0 <__kernel_sin>
 801e8d2:	e7d3      	b.n	801e87c <cos+0x2c>
 801e8d4:	f3af 8000 	nop.w
	...
 801e8e0:	3fe921fb 	.word	0x3fe921fb
 801e8e4:	7fefffff 	.word	0x7fefffff

0801e8e8 <fabs>:
 801e8e8:	ec51 0b10 	vmov	r0, r1, d0
 801e8ec:	4602      	mov	r2, r0
 801e8ee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e8f2:	ec43 2b10 	vmov	d0, r2, r3
 801e8f6:	4770      	bx	lr

0801e8f8 <sin>:
 801e8f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e8fa:	eeb0 7b40 	vmov.f64	d7, d0
 801e8fe:	ee17 3a90 	vmov	r3, s15
 801e902:	4a21      	ldr	r2, [pc, #132]	@ (801e988 <sin+0x90>)
 801e904:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e908:	4293      	cmp	r3, r2
 801e90a:	d807      	bhi.n	801e91c <sin+0x24>
 801e90c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 801e980 <sin+0x88>
 801e910:	2000      	movs	r0, #0
 801e912:	b005      	add	sp, #20
 801e914:	f85d eb04 	ldr.w	lr, [sp], #4
 801e918:	f000 bd52 	b.w	801f3c0 <__kernel_sin>
 801e91c:	4a1b      	ldr	r2, [pc, #108]	@ (801e98c <sin+0x94>)
 801e91e:	4293      	cmp	r3, r2
 801e920:	d904      	bls.n	801e92c <sin+0x34>
 801e922:	ee30 0b40 	vsub.f64	d0, d0, d0
 801e926:	b005      	add	sp, #20
 801e928:	f85d fb04 	ldr.w	pc, [sp], #4
 801e92c:	4668      	mov	r0, sp
 801e92e:	f000 f91b 	bl	801eb68 <__ieee754_rem_pio2>
 801e932:	f000 0003 	and.w	r0, r0, #3
 801e936:	2801      	cmp	r0, #1
 801e938:	d00a      	beq.n	801e950 <sin+0x58>
 801e93a:	2802      	cmp	r0, #2
 801e93c:	d00f      	beq.n	801e95e <sin+0x66>
 801e93e:	b9c0      	cbnz	r0, 801e972 <sin+0x7a>
 801e940:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e944:	ed9d 0b00 	vldr	d0, [sp]
 801e948:	2001      	movs	r0, #1
 801e94a:	f000 fd39 	bl	801f3c0 <__kernel_sin>
 801e94e:	e7ea      	b.n	801e926 <sin+0x2e>
 801e950:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e954:	ed9d 0b00 	vldr	d0, [sp]
 801e958:	f000 fcca 	bl	801f2f0 <__kernel_cos>
 801e95c:	e7e3      	b.n	801e926 <sin+0x2e>
 801e95e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e962:	ed9d 0b00 	vldr	d0, [sp]
 801e966:	2001      	movs	r0, #1
 801e968:	f000 fd2a 	bl	801f3c0 <__kernel_sin>
 801e96c:	eeb1 0b40 	vneg.f64	d0, d0
 801e970:	e7d9      	b.n	801e926 <sin+0x2e>
 801e972:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e976:	ed9d 0b00 	vldr	d0, [sp]
 801e97a:	f000 fcb9 	bl	801f2f0 <__kernel_cos>
 801e97e:	e7f5      	b.n	801e96c <sin+0x74>
	...
 801e988:	3fe921fb 	.word	0x3fe921fb
 801e98c:	7fefffff 	.word	0x7fefffff

0801e990 <cimagf>:
 801e990:	eeb0 0a60 	vmov.f32	s0, s1
 801e994:	4770      	bx	lr
	...

0801e998 <__ieee754_hypotf>:
 801e998:	ee10 3a10 	vmov	r3, s0
 801e99c:	ee10 2a90 	vmov	r2, s1
 801e9a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e9a4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 801e9a8:	4293      	cmp	r3, r2
 801e9aa:	bfbe      	ittt	lt
 801e9ac:	4619      	movlt	r1, r3
 801e9ae:	4613      	movlt	r3, r2
 801e9b0:	460a      	movlt	r2, r1
 801e9b2:	1a99      	subs	r1, r3, r2
 801e9b4:	f1b1 6f70 	cmp.w	r1, #251658240	@ 0xf000000
 801e9b8:	b510      	push	{r4, lr}
 801e9ba:	ee00 3a10 	vmov	s0, r3
 801e9be:	ee06 2a90 	vmov	s13, r2
 801e9c2:	dd02      	ble.n	801e9ca <__ieee754_hypotf+0x32>
 801e9c4:	ee30 0a26 	vadd.f32	s0, s0, s13
 801e9c8:	bd10      	pop	{r4, pc}
 801e9ca:	f1b3 4fb1 	cmp.w	r3, #1484783616	@ 0x58800000
 801e9ce:	dd48      	ble.n	801ea62 <__ieee754_hypotf+0xca>
 801e9d0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801e9d4:	db0c      	blt.n	801e9f0 <__ieee754_hypotf+0x58>
 801e9d6:	bf08      	it	eq
 801e9d8:	ed9f 0a34 	vldreq	s0, [pc, #208]	@ 801eaac <__ieee754_hypotf+0x114>
 801e9dc:	eddf 7a33 	vldr	s15, [pc, #204]	@ 801eaac <__ieee754_hypotf+0x114>
 801e9e0:	bf18      	it	ne
 801e9e2:	ee30 0a26 	vaddne.f32	s0, s0, s13
 801e9e6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801e9ea:	fe07 0a80 	vseleq.f32	s0, s15, s0
 801e9ee:	e7eb      	b.n	801e9c8 <__ieee754_hypotf+0x30>
 801e9f0:	f103 435e 	add.w	r3, r3, #3724541952	@ 0xde000000
 801e9f4:	f102 425e 	add.w	r2, r2, #3724541952	@ 0xde000000
 801e9f8:	ee00 3a10 	vmov	s0, r3
 801e9fc:	ee06 2a90 	vmov	s13, r2
 801ea00:	2444      	movs	r4, #68	@ 0x44
 801ea02:	f1b2 5f1a 	cmp.w	r2, #645922816	@ 0x26800000
 801ea06:	da0b      	bge.n	801ea20 <__ieee754_hypotf+0x88>
 801ea08:	2a00      	cmp	r2, #0
 801ea0a:	d0dd      	beq.n	801e9c8 <__ieee754_hypotf+0x30>
 801ea0c:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 801ea10:	da29      	bge.n	801ea66 <__ieee754_hypotf+0xce>
 801ea12:	eddf 7a27 	vldr	s15, [pc, #156]	@ 801eab0 <__ieee754_hypotf+0x118>
 801ea16:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801ea1a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801ea1e:	3c7e      	subs	r4, #126	@ 0x7e
 801ea20:	ee30 6a66 	vsub.f32	s12, s0, s13
 801ea24:	4923      	ldr	r1, [pc, #140]	@ (801eab4 <__ieee754_hypotf+0x11c>)
 801ea26:	eef4 6ac6 	vcmpe.f32	s13, s12
 801ea2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea2e:	d524      	bpl.n	801ea7a <__ieee754_hypotf+0xe2>
 801ea30:	400b      	ands	r3, r1
 801ea32:	ee07 3a90 	vmov	s15, r3
 801ea36:	ee30 7a27 	vadd.f32	s14, s0, s15
 801ea3a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ea3e:	ee27 0a00 	vmul.f32	s0, s14, s0
 801ea42:	eea6 0aa6 	vfma.f32	s0, s13, s13
 801ea46:	eea7 0aa7 	vfma.f32	s0, s15, s15
 801ea4a:	f000 fe35 	bl	801f6b8 <__ieee754_sqrtf>
 801ea4e:	2c00      	cmp	r4, #0
 801ea50:	d0ba      	beq.n	801e9c8 <__ieee754_hypotf+0x30>
 801ea52:	05e4      	lsls	r4, r4, #23
 801ea54:	f104 547e 	add.w	r4, r4, #1065353216	@ 0x3f800000
 801ea58:	ee07 4a90 	vmov	s15, r4
 801ea5c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801ea60:	e7b2      	b.n	801e9c8 <__ieee754_hypotf+0x30>
 801ea62:	2400      	movs	r4, #0
 801ea64:	e7cd      	b.n	801ea02 <__ieee754_hypotf+0x6a>
 801ea66:	f103 5308 	add.w	r3, r3, #570425344	@ 0x22000000
 801ea6a:	f102 5208 	add.w	r2, r2, #570425344	@ 0x22000000
 801ea6e:	ee00 3a10 	vmov	s0, r3
 801ea72:	ee06 2a90 	vmov	s13, r2
 801ea76:	3c44      	subs	r4, #68	@ 0x44
 801ea78:	e7d2      	b.n	801ea20 <__ieee754_hypotf+0x88>
 801ea7a:	f503 0300 	add.w	r3, r3, #8388608	@ 0x800000
 801ea7e:	400b      	ands	r3, r1
 801ea80:	ee07 3a90 	vmov	s15, r3
 801ea84:	eef0 4a00 	vmov.f32	s9, #0	@ 0x40000000  2.0
 801ea88:	eeb0 5a67 	vmov.f32	s10, s15
 801ea8c:	ee90 5a24 	vfnms.f32	s10, s0, s9
 801ea90:	400a      	ands	r2, r1
 801ea92:	ee07 2a10 	vmov	s14, r2
 801ea96:	ee26 0a85 	vmul.f32	s0, s13, s10
 801ea9a:	ee76 5ac7 	vsub.f32	s11, s13, s14
 801ea9e:	eea5 0aa7 	vfma.f32	s0, s11, s15
 801eaa2:	eea6 0a06 	vfma.f32	s0, s12, s12
 801eaa6:	eea7 0a27 	vfma.f32	s0, s14, s15
 801eaaa:	e7ce      	b.n	801ea4a <__ieee754_hypotf+0xb2>
 801eaac:	7f800000 	.word	0x7f800000
 801eab0:	7e800000 	.word	0x7e800000
 801eab4:	fffff000 	.word	0xfffff000

0801eab8 <fmaxf>:
 801eab8:	b508      	push	{r3, lr}
 801eaba:	ed2d 8b02 	vpush	{d8}
 801eabe:	eeb0 8a40 	vmov.f32	s16, s0
 801eac2:	eef0 8a60 	vmov.f32	s17, s1
 801eac6:	f000 f831 	bl	801eb2c <__fpclassifyf>
 801eaca:	b930      	cbnz	r0, 801eada <fmaxf+0x22>
 801eacc:	eeb0 8a68 	vmov.f32	s16, s17
 801ead0:	eeb0 0a48 	vmov.f32	s0, s16
 801ead4:	ecbd 8b02 	vpop	{d8}
 801ead8:	bd08      	pop	{r3, pc}
 801eada:	eeb0 0a68 	vmov.f32	s0, s17
 801eade:	f000 f825 	bl	801eb2c <__fpclassifyf>
 801eae2:	2800      	cmp	r0, #0
 801eae4:	d0f4      	beq.n	801ead0 <fmaxf+0x18>
 801eae6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801eaea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eaee:	dded      	ble.n	801eacc <fmaxf+0x14>
 801eaf0:	e7ee      	b.n	801ead0 <fmaxf+0x18>

0801eaf2 <fminf>:
 801eaf2:	b508      	push	{r3, lr}
 801eaf4:	ed2d 8b02 	vpush	{d8}
 801eaf8:	eeb0 8a40 	vmov.f32	s16, s0
 801eafc:	eef0 8a60 	vmov.f32	s17, s1
 801eb00:	f000 f814 	bl	801eb2c <__fpclassifyf>
 801eb04:	b930      	cbnz	r0, 801eb14 <fminf+0x22>
 801eb06:	eeb0 8a68 	vmov.f32	s16, s17
 801eb0a:	eeb0 0a48 	vmov.f32	s0, s16
 801eb0e:	ecbd 8b02 	vpop	{d8}
 801eb12:	bd08      	pop	{r3, pc}
 801eb14:	eeb0 0a68 	vmov.f32	s0, s17
 801eb18:	f000 f808 	bl	801eb2c <__fpclassifyf>
 801eb1c:	2800      	cmp	r0, #0
 801eb1e:	d0f4      	beq.n	801eb0a <fminf+0x18>
 801eb20:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801eb24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb28:	d5ed      	bpl.n	801eb06 <fminf+0x14>
 801eb2a:	e7ee      	b.n	801eb0a <fminf+0x18>

0801eb2c <__fpclassifyf>:
 801eb2c:	ee10 3a10 	vmov	r3, s0
 801eb30:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 801eb34:	d00d      	beq.n	801eb52 <__fpclassifyf+0x26>
 801eb36:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 801eb3a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 801eb3e:	d30a      	bcc.n	801eb56 <__fpclassifyf+0x2a>
 801eb40:	4b07      	ldr	r3, [pc, #28]	@ (801eb60 <__fpclassifyf+0x34>)
 801eb42:	1e42      	subs	r2, r0, #1
 801eb44:	429a      	cmp	r2, r3
 801eb46:	d908      	bls.n	801eb5a <__fpclassifyf+0x2e>
 801eb48:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 801eb4c:	4258      	negs	r0, r3
 801eb4e:	4158      	adcs	r0, r3
 801eb50:	4770      	bx	lr
 801eb52:	2002      	movs	r0, #2
 801eb54:	4770      	bx	lr
 801eb56:	2004      	movs	r0, #4
 801eb58:	4770      	bx	lr
 801eb5a:	2003      	movs	r0, #3
 801eb5c:	4770      	bx	lr
 801eb5e:	bf00      	nop
 801eb60:	007ffffe 	.word	0x007ffffe
 801eb64:	00000000 	.word	0x00000000

0801eb68 <__ieee754_rem_pio2>:
 801eb68:	b570      	push	{r4, r5, r6, lr}
 801eb6a:	eeb0 7b40 	vmov.f64	d7, d0
 801eb6e:	ee17 5a90 	vmov	r5, s15
 801eb72:	4b99      	ldr	r3, [pc, #612]	@ (801edd8 <__ieee754_rem_pio2+0x270>)
 801eb74:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801eb78:	429e      	cmp	r6, r3
 801eb7a:	b088      	sub	sp, #32
 801eb7c:	4604      	mov	r4, r0
 801eb7e:	d807      	bhi.n	801eb90 <__ieee754_rem_pio2+0x28>
 801eb80:	2200      	movs	r2, #0
 801eb82:	2300      	movs	r3, #0
 801eb84:	ed84 0b00 	vstr	d0, [r4]
 801eb88:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801eb8c:	2000      	movs	r0, #0
 801eb8e:	e01b      	b.n	801ebc8 <__ieee754_rem_pio2+0x60>
 801eb90:	4b92      	ldr	r3, [pc, #584]	@ (801eddc <__ieee754_rem_pio2+0x274>)
 801eb92:	429e      	cmp	r6, r3
 801eb94:	d83b      	bhi.n	801ec0e <__ieee754_rem_pio2+0xa6>
 801eb96:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801eb9a:	2d00      	cmp	r5, #0
 801eb9c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 801ed98 <__ieee754_rem_pio2+0x230>
 801eba0:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 801eba4:	dd19      	ble.n	801ebda <__ieee754_rem_pio2+0x72>
 801eba6:	ee30 7b46 	vsub.f64	d7, d0, d6
 801ebaa:	429e      	cmp	r6, r3
 801ebac:	d00e      	beq.n	801ebcc <__ieee754_rem_pio2+0x64>
 801ebae:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 801eda0 <__ieee754_rem_pio2+0x238>
 801ebb2:	ee37 6b45 	vsub.f64	d6, d7, d5
 801ebb6:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ebba:	ed84 6b00 	vstr	d6, [r4]
 801ebbe:	ee37 7b45 	vsub.f64	d7, d7, d5
 801ebc2:	ed84 7b02 	vstr	d7, [r4, #8]
 801ebc6:	2001      	movs	r0, #1
 801ebc8:	b008      	add	sp, #32
 801ebca:	bd70      	pop	{r4, r5, r6, pc}
 801ebcc:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 801eda8 <__ieee754_rem_pio2+0x240>
 801ebd0:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 801edb0 <__ieee754_rem_pio2+0x248>
 801ebd4:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ebd8:	e7eb      	b.n	801ebb2 <__ieee754_rem_pio2+0x4a>
 801ebda:	429e      	cmp	r6, r3
 801ebdc:	ee30 7b06 	vadd.f64	d7, d0, d6
 801ebe0:	d00e      	beq.n	801ec00 <__ieee754_rem_pio2+0x98>
 801ebe2:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 801eda0 <__ieee754_rem_pio2+0x238>
 801ebe6:	ee37 6b05 	vadd.f64	d6, d7, d5
 801ebea:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ebee:	ed84 6b00 	vstr	d6, [r4]
 801ebf2:	ee37 7b05 	vadd.f64	d7, d7, d5
 801ebf6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ebfa:	ed84 7b02 	vstr	d7, [r4, #8]
 801ebfe:	e7e3      	b.n	801ebc8 <__ieee754_rem_pio2+0x60>
 801ec00:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 801eda8 <__ieee754_rem_pio2+0x240>
 801ec04:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 801edb0 <__ieee754_rem_pio2+0x248>
 801ec08:	ee37 7b06 	vadd.f64	d7, d7, d6
 801ec0c:	e7eb      	b.n	801ebe6 <__ieee754_rem_pio2+0x7e>
 801ec0e:	4b74      	ldr	r3, [pc, #464]	@ (801ede0 <__ieee754_rem_pio2+0x278>)
 801ec10:	429e      	cmp	r6, r3
 801ec12:	d870      	bhi.n	801ecf6 <__ieee754_rem_pio2+0x18e>
 801ec14:	f7ff fe68 	bl	801e8e8 <fabs>
 801ec18:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801ec1c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801edb8 <__ieee754_rem_pio2+0x250>
 801ec20:	eea0 7b06 	vfma.f64	d7, d0, d6
 801ec24:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801ec28:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801ec2c:	ee17 0a90 	vmov	r0, s15
 801ec30:	eeb1 4b45 	vneg.f64	d4, d5
 801ec34:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801ed98 <__ieee754_rem_pio2+0x230>
 801ec38:	eea5 0b47 	vfms.f64	d0, d5, d7
 801ec3c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801eda0 <__ieee754_rem_pio2+0x238>
 801ec40:	281f      	cmp	r0, #31
 801ec42:	ee25 7b07 	vmul.f64	d7, d5, d7
 801ec46:	ee30 6b47 	vsub.f64	d6, d0, d7
 801ec4a:	dc05      	bgt.n	801ec58 <__ieee754_rem_pio2+0xf0>
 801ec4c:	4b65      	ldr	r3, [pc, #404]	@ (801ede4 <__ieee754_rem_pio2+0x27c>)
 801ec4e:	1e42      	subs	r2, r0, #1
 801ec50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ec54:	42b3      	cmp	r3, r6
 801ec56:	d109      	bne.n	801ec6c <__ieee754_rem_pio2+0x104>
 801ec58:	ee16 3a90 	vmov	r3, s13
 801ec5c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801ec60:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801ec64:	2b10      	cmp	r3, #16
 801ec66:	ea4f 5226 	mov.w	r2, r6, asr #20
 801ec6a:	dc02      	bgt.n	801ec72 <__ieee754_rem_pio2+0x10a>
 801ec6c:	ed84 6b00 	vstr	d6, [r4]
 801ec70:	e01a      	b.n	801eca8 <__ieee754_rem_pio2+0x140>
 801ec72:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 801eda8 <__ieee754_rem_pio2+0x240>
 801ec76:	eeb0 6b40 	vmov.f64	d6, d0
 801ec7a:	eea4 6b03 	vfma.f64	d6, d4, d3
 801ec7e:	ee30 7b46 	vsub.f64	d7, d0, d6
 801ec82:	eea4 7b03 	vfma.f64	d7, d4, d3
 801ec86:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 801edb0 <__ieee754_rem_pio2+0x248>
 801ec8a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801ec8e:	ee36 3b47 	vsub.f64	d3, d6, d7
 801ec92:	ee13 3a90 	vmov	r3, s7
 801ec96:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801ec9a:	1ad3      	subs	r3, r2, r3
 801ec9c:	2b31      	cmp	r3, #49	@ 0x31
 801ec9e:	dc17      	bgt.n	801ecd0 <__ieee754_rem_pio2+0x168>
 801eca0:	eeb0 0b46 	vmov.f64	d0, d6
 801eca4:	ed84 3b00 	vstr	d3, [r4]
 801eca8:	ed94 6b00 	vldr	d6, [r4]
 801ecac:	2d00      	cmp	r5, #0
 801ecae:	ee30 0b46 	vsub.f64	d0, d0, d6
 801ecb2:	ee30 0b47 	vsub.f64	d0, d0, d7
 801ecb6:	ed84 0b02 	vstr	d0, [r4, #8]
 801ecba:	da85      	bge.n	801ebc8 <__ieee754_rem_pio2+0x60>
 801ecbc:	eeb1 6b46 	vneg.f64	d6, d6
 801ecc0:	eeb1 0b40 	vneg.f64	d0, d0
 801ecc4:	ed84 6b00 	vstr	d6, [r4]
 801ecc8:	ed84 0b02 	vstr	d0, [r4, #8]
 801eccc:	4240      	negs	r0, r0
 801ecce:	e77b      	b.n	801ebc8 <__ieee754_rem_pio2+0x60>
 801ecd0:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 801edc0 <__ieee754_rem_pio2+0x258>
 801ecd4:	eeb0 0b46 	vmov.f64	d0, d6
 801ecd8:	eea4 0b07 	vfma.f64	d0, d4, d7
 801ecdc:	ee36 6b40 	vsub.f64	d6, d6, d0
 801ece0:	eea4 6b07 	vfma.f64	d6, d4, d7
 801ece4:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 801edc8 <__ieee754_rem_pio2+0x260>
 801ece8:	eeb0 7b46 	vmov.f64	d7, d6
 801ecec:	ee95 7b04 	vfnms.f64	d7, d5, d4
 801ecf0:	ee30 6b47 	vsub.f64	d6, d0, d7
 801ecf4:	e7ba      	b.n	801ec6c <__ieee754_rem_pio2+0x104>
 801ecf6:	4b3c      	ldr	r3, [pc, #240]	@ (801ede8 <__ieee754_rem_pio2+0x280>)
 801ecf8:	429e      	cmp	r6, r3
 801ecfa:	d906      	bls.n	801ed0a <__ieee754_rem_pio2+0x1a2>
 801ecfc:	ee30 7b40 	vsub.f64	d7, d0, d0
 801ed00:	ed80 7b02 	vstr	d7, [r0, #8]
 801ed04:	ed80 7b00 	vstr	d7, [r0]
 801ed08:	e740      	b.n	801eb8c <__ieee754_rem_pio2+0x24>
 801ed0a:	ee10 3a10 	vmov	r3, s0
 801ed0e:	1532      	asrs	r2, r6, #20
 801ed10:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 801ed14:	4618      	mov	r0, r3
 801ed16:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801ed1a:	ec41 0b17 	vmov	d7, r0, r1
 801ed1e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801ed22:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 801edd0 <__ieee754_rem_pio2+0x268>
 801ed26:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801ed2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ed2e:	ed8d 6b02 	vstr	d6, [sp, #8]
 801ed32:	ee27 7b05 	vmul.f64	d7, d7, d5
 801ed36:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801ed3a:	a808      	add	r0, sp, #32
 801ed3c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801ed40:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ed44:	ed8d 6b04 	vstr	d6, [sp, #16]
 801ed48:	ee27 7b05 	vmul.f64	d7, d7, d5
 801ed4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801ed50:	2103      	movs	r1, #3
 801ed52:	ed30 7b02 	vldmdb	r0!, {d7}
 801ed56:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ed5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed5e:	460b      	mov	r3, r1
 801ed60:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 801ed64:	d0f5      	beq.n	801ed52 <__ieee754_rem_pio2+0x1ea>
 801ed66:	4921      	ldr	r1, [pc, #132]	@ (801edec <__ieee754_rem_pio2+0x284>)
 801ed68:	9101      	str	r1, [sp, #4]
 801ed6a:	2102      	movs	r1, #2
 801ed6c:	9100      	str	r1, [sp, #0]
 801ed6e:	a802      	add	r0, sp, #8
 801ed70:	4621      	mov	r1, r4
 801ed72:	f000 f841 	bl	801edf8 <__kernel_rem_pio2>
 801ed76:	2d00      	cmp	r5, #0
 801ed78:	f6bf af26 	bge.w	801ebc8 <__ieee754_rem_pio2+0x60>
 801ed7c:	ed94 7b00 	vldr	d7, [r4]
 801ed80:	eeb1 7b47 	vneg.f64	d7, d7
 801ed84:	ed84 7b00 	vstr	d7, [r4]
 801ed88:	ed94 7b02 	vldr	d7, [r4, #8]
 801ed8c:	eeb1 7b47 	vneg.f64	d7, d7
 801ed90:	ed84 7b02 	vstr	d7, [r4, #8]
 801ed94:	e79a      	b.n	801eccc <__ieee754_rem_pio2+0x164>
 801ed96:	bf00      	nop
 801ed98:	54400000 	.word	0x54400000
 801ed9c:	3ff921fb 	.word	0x3ff921fb
 801eda0:	1a626331 	.word	0x1a626331
 801eda4:	3dd0b461 	.word	0x3dd0b461
 801eda8:	1a600000 	.word	0x1a600000
 801edac:	3dd0b461 	.word	0x3dd0b461
 801edb0:	2e037073 	.word	0x2e037073
 801edb4:	3ba3198a 	.word	0x3ba3198a
 801edb8:	6dc9c883 	.word	0x6dc9c883
 801edbc:	3fe45f30 	.word	0x3fe45f30
 801edc0:	2e000000 	.word	0x2e000000
 801edc4:	3ba3198a 	.word	0x3ba3198a
 801edc8:	252049c1 	.word	0x252049c1
 801edcc:	397b839a 	.word	0x397b839a
 801edd0:	00000000 	.word	0x00000000
 801edd4:	41700000 	.word	0x41700000
 801edd8:	3fe921fb 	.word	0x3fe921fb
 801eddc:	4002d97b 	.word	0x4002d97b
 801ede0:	413921fb 	.word	0x413921fb
 801ede4:	080450f8 	.word	0x080450f8
 801ede8:	7fefffff 	.word	0x7fefffff
 801edec:	08045178 	.word	0x08045178

0801edf0 <crealf>:
 801edf0:	4770      	bx	lr

0801edf2 <atan2f>:
 801edf2:	f000 bbc3 	b.w	801f57c <__ieee754_atan2f>
	...

0801edf8 <__kernel_rem_pio2>:
 801edf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edfc:	ed2d 8b06 	vpush	{d8-d10}
 801ee00:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801ee04:	469b      	mov	fp, r3
 801ee06:	9001      	str	r0, [sp, #4]
 801ee08:	4bbb      	ldr	r3, [pc, #748]	@ (801f0f8 <__kernel_rem_pio2+0x300>)
 801ee0a:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 801ee0c:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 801ee10:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 801ee14:	f112 0f14 	cmn.w	r2, #20
 801ee18:	bfa8      	it	ge
 801ee1a:	1ed3      	subge	r3, r2, #3
 801ee1c:	f10b 3aff 	add.w	sl, fp, #4294967295	@ 0xffffffff
 801ee20:	bfb8      	it	lt
 801ee22:	2300      	movlt	r3, #0
 801ee24:	f06f 0517 	mvn.w	r5, #23
 801ee28:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 801f0e0 <__kernel_rem_pio2+0x2e8>
 801ee2c:	bfa4      	itt	ge
 801ee2e:	2018      	movge	r0, #24
 801ee30:	fb93 f3f0 	sdivge	r3, r3, r0
 801ee34:	fb03 5505 	mla	r5, r3, r5, r5
 801ee38:	eba3 040a 	sub.w	r4, r3, sl
 801ee3c:	4415      	add	r5, r2
 801ee3e:	460f      	mov	r7, r1
 801ee40:	eb09 060a 	add.w	r6, r9, sl
 801ee44:	a81a      	add	r0, sp, #104	@ 0x68
 801ee46:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 801ee4a:	2200      	movs	r2, #0
 801ee4c:	42b2      	cmp	r2, r6
 801ee4e:	dd0e      	ble.n	801ee6e <__kernel_rem_pio2+0x76>
 801ee50:	aa1a      	add	r2, sp, #104	@ 0x68
 801ee52:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801ee56:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 801ee5a:	2600      	movs	r6, #0
 801ee5c:	454e      	cmp	r6, r9
 801ee5e:	dc25      	bgt.n	801eeac <__kernel_rem_pio2+0xb4>
 801ee60:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 801f0e0 <__kernel_rem_pio2+0x2e8>
 801ee64:	f8dd c004 	ldr.w	ip, [sp, #4]
 801ee68:	4614      	mov	r4, r2
 801ee6a:	2000      	movs	r0, #0
 801ee6c:	e015      	b.n	801ee9a <__kernel_rem_pio2+0xa2>
 801ee6e:	42d4      	cmn	r4, r2
 801ee70:	d409      	bmi.n	801ee86 <__kernel_rem_pio2+0x8e>
 801ee72:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801ee76:	ee07 1a90 	vmov	s15, r1
 801ee7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ee7e:	eca0 7b02 	vstmia	r0!, {d7}
 801ee82:	3201      	adds	r2, #1
 801ee84:	e7e2      	b.n	801ee4c <__kernel_rem_pio2+0x54>
 801ee86:	eeb0 7b46 	vmov.f64	d7, d6
 801ee8a:	e7f8      	b.n	801ee7e <__kernel_rem_pio2+0x86>
 801ee8c:	ecbc 5b02 	vldmia	ip!, {d5}
 801ee90:	ed94 6b00 	vldr	d6, [r4]
 801ee94:	3001      	adds	r0, #1
 801ee96:	eea5 7b06 	vfma.f64	d7, d5, d6
 801ee9a:	4550      	cmp	r0, sl
 801ee9c:	f1a4 0408 	sub.w	r4, r4, #8
 801eea0:	ddf4      	ble.n	801ee8c <__kernel_rem_pio2+0x94>
 801eea2:	ecae 7b02 	vstmia	lr!, {d7}
 801eea6:	3601      	adds	r6, #1
 801eea8:	3208      	adds	r2, #8
 801eeaa:	e7d7      	b.n	801ee5c <__kernel_rem_pio2+0x64>
 801eeac:	aa06      	add	r2, sp, #24
 801eeae:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 801f0e8 <__kernel_rem_pio2+0x2f0>
 801eeb2:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 801f0f0 <__kernel_rem_pio2+0x2f8>
 801eeb6:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801eeba:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801eebe:	9203      	str	r2, [sp, #12]
 801eec0:	9302      	str	r3, [sp, #8]
 801eec2:	464c      	mov	r4, r9
 801eec4:	00e3      	lsls	r3, r4, #3
 801eec6:	9304      	str	r3, [sp, #16]
 801eec8:	ab92      	add	r3, sp, #584	@ 0x248
 801eeca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801eece:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801eed2:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801eed4:	ab06      	add	r3, sp, #24
 801eed6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801eeda:	461e      	mov	r6, r3
 801eedc:	4620      	mov	r0, r4
 801eede:	2800      	cmp	r0, #0
 801eee0:	f1a2 0208 	sub.w	r2, r2, #8
 801eee4:	dc4a      	bgt.n	801ef7c <__kernel_rem_pio2+0x184>
 801eee6:	4628      	mov	r0, r5
 801eee8:	9305      	str	r3, [sp, #20]
 801eeea:	f000 fac9 	bl	801f480 <scalbn>
 801eeee:	eeb0 8b40 	vmov.f64	d8, d0
 801eef2:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801eef6:	ee28 0b00 	vmul.f64	d0, d8, d0
 801eefa:	f000 fbe1 	bl	801f6c0 <floor>
 801eefe:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801ef02:	eea0 8b47 	vfms.f64	d8, d0, d7
 801ef06:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801ef0a:	2d00      	cmp	r5, #0
 801ef0c:	ee17 8a90 	vmov	r8, s15
 801ef10:	9b05      	ldr	r3, [sp, #20]
 801ef12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ef16:	ee38 8b47 	vsub.f64	d8, d8, d7
 801ef1a:	dd41      	ble.n	801efa0 <__kernel_rem_pio2+0x1a8>
 801ef1c:	1e60      	subs	r0, r4, #1
 801ef1e:	aa06      	add	r2, sp, #24
 801ef20:	f1c5 0c18 	rsb	ip, r5, #24
 801ef24:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801ef28:	fa46 f20c 	asr.w	r2, r6, ip
 801ef2c:	4490      	add	r8, r2
 801ef2e:	fa02 f20c 	lsl.w	r2, r2, ip
 801ef32:	1ab6      	subs	r6, r6, r2
 801ef34:	aa06      	add	r2, sp, #24
 801ef36:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801ef3a:	f1c5 0217 	rsb	r2, r5, #23
 801ef3e:	4116      	asrs	r6, r2
 801ef40:	2e00      	cmp	r6, #0
 801ef42:	dd3c      	ble.n	801efbe <__kernel_rem_pio2+0x1c6>
 801ef44:	f04f 0c00 	mov.w	ip, #0
 801ef48:	f108 0801 	add.w	r8, r8, #1
 801ef4c:	4660      	mov	r0, ip
 801ef4e:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801ef52:	4564      	cmp	r4, ip
 801ef54:	dc66      	bgt.n	801f024 <__kernel_rem_pio2+0x22c>
 801ef56:	2d00      	cmp	r5, #0
 801ef58:	dd03      	ble.n	801ef62 <__kernel_rem_pio2+0x16a>
 801ef5a:	2d01      	cmp	r5, #1
 801ef5c:	d072      	beq.n	801f044 <__kernel_rem_pio2+0x24c>
 801ef5e:	2d02      	cmp	r5, #2
 801ef60:	d07a      	beq.n	801f058 <__kernel_rem_pio2+0x260>
 801ef62:	2e02      	cmp	r6, #2
 801ef64:	d12b      	bne.n	801efbe <__kernel_rem_pio2+0x1c6>
 801ef66:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801ef6a:	ee30 8b48 	vsub.f64	d8, d0, d8
 801ef6e:	b330      	cbz	r0, 801efbe <__kernel_rem_pio2+0x1c6>
 801ef70:	4628      	mov	r0, r5
 801ef72:	f000 fa85 	bl	801f480 <scalbn>
 801ef76:	ee38 8b40 	vsub.f64	d8, d8, d0
 801ef7a:	e020      	b.n	801efbe <__kernel_rem_pio2+0x1c6>
 801ef7c:	ee20 7b09 	vmul.f64	d7, d0, d9
 801ef80:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801ef84:	3801      	subs	r0, #1
 801ef86:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801ef8a:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801ef8e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801ef92:	eca6 0a01 	vstmia	r6!, {s0}
 801ef96:	ed92 0b00 	vldr	d0, [r2]
 801ef9a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801ef9e:	e79e      	b.n	801eede <__kernel_rem_pio2+0xe6>
 801efa0:	d105      	bne.n	801efae <__kernel_rem_pio2+0x1b6>
 801efa2:	1e62      	subs	r2, r4, #1
 801efa4:	a906      	add	r1, sp, #24
 801efa6:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801efaa:	15f6      	asrs	r6, r6, #23
 801efac:	e7c8      	b.n	801ef40 <__kernel_rem_pio2+0x148>
 801efae:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801efb2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801efb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efba:	da31      	bge.n	801f020 <__kernel_rem_pio2+0x228>
 801efbc:	2600      	movs	r6, #0
 801efbe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801efc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efc6:	f040 809b 	bne.w	801f100 <__kernel_rem_pio2+0x308>
 801efca:	1e62      	subs	r2, r4, #1
 801efcc:	2000      	movs	r0, #0
 801efce:	454a      	cmp	r2, r9
 801efd0:	da49      	bge.n	801f066 <__kernel_rem_pio2+0x26e>
 801efd2:	2800      	cmp	r0, #0
 801efd4:	d062      	beq.n	801f09c <__kernel_rem_pio2+0x2a4>
 801efd6:	3c01      	subs	r4, #1
 801efd8:	ab06      	add	r3, sp, #24
 801efda:	3d18      	subs	r5, #24
 801efdc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801efe0:	2b00      	cmp	r3, #0
 801efe2:	d0f8      	beq.n	801efd6 <__kernel_rem_pio2+0x1de>
 801efe4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801efe8:	4628      	mov	r0, r5
 801efea:	f000 fa49 	bl	801f480 <scalbn>
 801efee:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 801f0e8 <__kernel_rem_pio2+0x2f0>
 801eff2:	1c62      	adds	r2, r4, #1
 801eff4:	a96a      	add	r1, sp, #424	@ 0x1a8
 801eff6:	00d3      	lsls	r3, r2, #3
 801eff8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801effc:	4622      	mov	r2, r4
 801effe:	2a00      	cmp	r2, #0
 801f000:	f280 80a8 	bge.w	801f154 <__kernel_rem_pio2+0x35c>
 801f004:	4622      	mov	r2, r4
 801f006:	2a00      	cmp	r2, #0
 801f008:	f2c0 80c6 	blt.w	801f198 <__kernel_rem_pio2+0x3a0>
 801f00c:	a96a      	add	r1, sp, #424	@ 0x1a8
 801f00e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801f012:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 801f0e0 <__kernel_rem_pio2+0x2e8>
 801f016:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 801f0fc <__kernel_rem_pio2+0x304>
 801f01a:	2000      	movs	r0, #0
 801f01c:	1aa1      	subs	r1, r4, r2
 801f01e:	e0b0      	b.n	801f182 <__kernel_rem_pio2+0x38a>
 801f020:	2602      	movs	r6, #2
 801f022:	e78f      	b.n	801ef44 <__kernel_rem_pio2+0x14c>
 801f024:	f853 2b04 	ldr.w	r2, [r3], #4
 801f028:	b948      	cbnz	r0, 801f03e <__kernel_rem_pio2+0x246>
 801f02a:	b122      	cbz	r2, 801f036 <__kernel_rem_pio2+0x23e>
 801f02c:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 801f030:	f843 2c04 	str.w	r2, [r3, #-4]
 801f034:	2201      	movs	r2, #1
 801f036:	f10c 0c01 	add.w	ip, ip, #1
 801f03a:	4610      	mov	r0, r2
 801f03c:	e789      	b.n	801ef52 <__kernel_rem_pio2+0x15a>
 801f03e:	ebae 0202 	sub.w	r2, lr, r2
 801f042:	e7f5      	b.n	801f030 <__kernel_rem_pio2+0x238>
 801f044:	1e62      	subs	r2, r4, #1
 801f046:	ab06      	add	r3, sp, #24
 801f048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f04c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801f050:	a906      	add	r1, sp, #24
 801f052:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801f056:	e784      	b.n	801ef62 <__kernel_rem_pio2+0x16a>
 801f058:	1e62      	subs	r2, r4, #1
 801f05a:	ab06      	add	r3, sp, #24
 801f05c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f060:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801f064:	e7f4      	b.n	801f050 <__kernel_rem_pio2+0x258>
 801f066:	ab06      	add	r3, sp, #24
 801f068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f06c:	3a01      	subs	r2, #1
 801f06e:	4318      	orrs	r0, r3
 801f070:	e7ad      	b.n	801efce <__kernel_rem_pio2+0x1d6>
 801f072:	3301      	adds	r3, #1
 801f074:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801f078:	2800      	cmp	r0, #0
 801f07a:	d0fa      	beq.n	801f072 <__kernel_rem_pio2+0x27a>
 801f07c:	9a04      	ldr	r2, [sp, #16]
 801f07e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 801f082:	446a      	add	r2, sp
 801f084:	eb04 000b 	add.w	r0, r4, fp
 801f088:	a91a      	add	r1, sp, #104	@ 0x68
 801f08a:	1c66      	adds	r6, r4, #1
 801f08c:	3a98      	subs	r2, #152	@ 0x98
 801f08e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801f092:	4423      	add	r3, r4
 801f094:	42b3      	cmp	r3, r6
 801f096:	da04      	bge.n	801f0a2 <__kernel_rem_pio2+0x2aa>
 801f098:	461c      	mov	r4, r3
 801f09a:	e713      	b.n	801eec4 <__kernel_rem_pio2+0xcc>
 801f09c:	9a03      	ldr	r2, [sp, #12]
 801f09e:	2301      	movs	r3, #1
 801f0a0:	e7e8      	b.n	801f074 <__kernel_rem_pio2+0x27c>
 801f0a2:	9902      	ldr	r1, [sp, #8]
 801f0a4:	f8dd c004 	ldr.w	ip, [sp, #4]
 801f0a8:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 801f0ac:	9104      	str	r1, [sp, #16]
 801f0ae:	ee07 1a90 	vmov	s15, r1
 801f0b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f0b6:	2400      	movs	r4, #0
 801f0b8:	eca0 7b02 	vstmia	r0!, {d7}
 801f0bc:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801f0e0 <__kernel_rem_pio2+0x2e8>
 801f0c0:	4686      	mov	lr, r0
 801f0c2:	4554      	cmp	r4, sl
 801f0c4:	dd03      	ble.n	801f0ce <__kernel_rem_pio2+0x2d6>
 801f0c6:	eca2 7b02 	vstmia	r2!, {d7}
 801f0ca:	3601      	adds	r6, #1
 801f0cc:	e7e2      	b.n	801f094 <__kernel_rem_pio2+0x29c>
 801f0ce:	ecbc 5b02 	vldmia	ip!, {d5}
 801f0d2:	ed3e 6b02 	vldmdb	lr!, {d6}
 801f0d6:	3401      	adds	r4, #1
 801f0d8:	eea5 7b06 	vfma.f64	d7, d5, d6
 801f0dc:	e7f1      	b.n	801f0c2 <__kernel_rem_pio2+0x2ca>
 801f0de:	bf00      	nop
	...
 801f0ec:	3e700000 	.word	0x3e700000
 801f0f0:	00000000 	.word	0x00000000
 801f0f4:	41700000 	.word	0x41700000
 801f0f8:	080452c0 	.word	0x080452c0
 801f0fc:	08045280 	.word	0x08045280
 801f100:	4268      	negs	r0, r5
 801f102:	eeb0 0b48 	vmov.f64	d0, d8
 801f106:	f000 f9bb 	bl	801f480 <scalbn>
 801f10a:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 801f2d8 <__kernel_rem_pio2+0x4e0>
 801f10e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801f112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f116:	db17      	blt.n	801f148 <__kernel_rem_pio2+0x350>
 801f118:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 801f2e0 <__kernel_rem_pio2+0x4e8>
 801f11c:	ee20 7b07 	vmul.f64	d7, d0, d7
 801f120:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801f124:	aa06      	add	r2, sp, #24
 801f126:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801f12a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801f12e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801f132:	3518      	adds	r5, #24
 801f134:	ee10 3a10 	vmov	r3, s0
 801f138:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801f13c:	ee17 3a10 	vmov	r3, s14
 801f140:	3401      	adds	r4, #1
 801f142:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801f146:	e74d      	b.n	801efe4 <__kernel_rem_pio2+0x1ec>
 801f148:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801f14c:	aa06      	add	r2, sp, #24
 801f14e:	ee10 3a10 	vmov	r3, s0
 801f152:	e7f6      	b.n	801f142 <__kernel_rem_pio2+0x34a>
 801f154:	a806      	add	r0, sp, #24
 801f156:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801f15a:	9001      	str	r0, [sp, #4]
 801f15c:	ee07 0a90 	vmov	s15, r0
 801f160:	3a01      	subs	r2, #1
 801f162:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f166:	ee27 7b00 	vmul.f64	d7, d7, d0
 801f16a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801f16e:	ed21 7b02 	vstmdb	r1!, {d7}
 801f172:	e744      	b.n	801effe <__kernel_rem_pio2+0x206>
 801f174:	ecbc 5b02 	vldmia	ip!, {d5}
 801f178:	ecb5 6b02 	vldmia	r5!, {d6}
 801f17c:	3001      	adds	r0, #1
 801f17e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801f182:	4548      	cmp	r0, r9
 801f184:	dc01      	bgt.n	801f18a <__kernel_rem_pio2+0x392>
 801f186:	4281      	cmp	r1, r0
 801f188:	daf4      	bge.n	801f174 <__kernel_rem_pio2+0x37c>
 801f18a:	a842      	add	r0, sp, #264	@ 0x108
 801f18c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801f190:	ed81 7b00 	vstr	d7, [r1]
 801f194:	3a01      	subs	r2, #1
 801f196:	e736      	b.n	801f006 <__kernel_rem_pio2+0x20e>
 801f198:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801f19a:	2a02      	cmp	r2, #2
 801f19c:	dc0a      	bgt.n	801f1b4 <__kernel_rem_pio2+0x3bc>
 801f19e:	2a00      	cmp	r2, #0
 801f1a0:	dc2d      	bgt.n	801f1fe <__kernel_rem_pio2+0x406>
 801f1a2:	d046      	beq.n	801f232 <__kernel_rem_pio2+0x43a>
 801f1a4:	f008 0007 	and.w	r0, r8, #7
 801f1a8:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 801f1ac:	ecbd 8b06 	vpop	{d8-d10}
 801f1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1b4:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801f1b6:	2a03      	cmp	r2, #3
 801f1b8:	d1f4      	bne.n	801f1a4 <__kernel_rem_pio2+0x3ac>
 801f1ba:	a942      	add	r1, sp, #264	@ 0x108
 801f1bc:	f1a3 0208 	sub.w	r2, r3, #8
 801f1c0:	440a      	add	r2, r1
 801f1c2:	4611      	mov	r1, r2
 801f1c4:	4620      	mov	r0, r4
 801f1c6:	2800      	cmp	r0, #0
 801f1c8:	f1a1 0108 	sub.w	r1, r1, #8
 801f1cc:	dc52      	bgt.n	801f274 <__kernel_rem_pio2+0x47c>
 801f1ce:	4621      	mov	r1, r4
 801f1d0:	2901      	cmp	r1, #1
 801f1d2:	f1a2 0208 	sub.w	r2, r2, #8
 801f1d6:	dc5d      	bgt.n	801f294 <__kernel_rem_pio2+0x49c>
 801f1d8:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 801f2e8 <__kernel_rem_pio2+0x4f0>
 801f1dc:	aa42      	add	r2, sp, #264	@ 0x108
 801f1de:	4413      	add	r3, r2
 801f1e0:	2c01      	cmp	r4, #1
 801f1e2:	dc67      	bgt.n	801f2b4 <__kernel_rem_pio2+0x4bc>
 801f1e4:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 801f1e8:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 801f1ec:	2e00      	cmp	r6, #0
 801f1ee:	d167      	bne.n	801f2c0 <__kernel_rem_pio2+0x4c8>
 801f1f0:	ed87 5b00 	vstr	d5, [r7]
 801f1f4:	ed87 6b02 	vstr	d6, [r7, #8]
 801f1f8:	ed87 7b04 	vstr	d7, [r7, #16]
 801f1fc:	e7d2      	b.n	801f1a4 <__kernel_rem_pio2+0x3ac>
 801f1fe:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 801f2e8 <__kernel_rem_pio2+0x4f0>
 801f202:	aa42      	add	r2, sp, #264	@ 0x108
 801f204:	4413      	add	r3, r2
 801f206:	4622      	mov	r2, r4
 801f208:	2a00      	cmp	r2, #0
 801f20a:	da24      	bge.n	801f256 <__kernel_rem_pio2+0x45e>
 801f20c:	b34e      	cbz	r6, 801f262 <__kernel_rem_pio2+0x46a>
 801f20e:	eeb1 7b46 	vneg.f64	d7, d6
 801f212:	ed87 7b00 	vstr	d7, [r7]
 801f216:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 801f21a:	aa44      	add	r2, sp, #272	@ 0x110
 801f21c:	2301      	movs	r3, #1
 801f21e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801f222:	429c      	cmp	r4, r3
 801f224:	da20      	bge.n	801f268 <__kernel_rem_pio2+0x470>
 801f226:	b10e      	cbz	r6, 801f22c <__kernel_rem_pio2+0x434>
 801f228:	eeb1 7b47 	vneg.f64	d7, d7
 801f22c:	ed87 7b02 	vstr	d7, [r7, #8]
 801f230:	e7b8      	b.n	801f1a4 <__kernel_rem_pio2+0x3ac>
 801f232:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 801f2e8 <__kernel_rem_pio2+0x4f0>
 801f236:	aa42      	add	r2, sp, #264	@ 0x108
 801f238:	4413      	add	r3, r2
 801f23a:	2c00      	cmp	r4, #0
 801f23c:	da05      	bge.n	801f24a <__kernel_rem_pio2+0x452>
 801f23e:	b10e      	cbz	r6, 801f244 <__kernel_rem_pio2+0x44c>
 801f240:	eeb1 7b47 	vneg.f64	d7, d7
 801f244:	ed87 7b00 	vstr	d7, [r7]
 801f248:	e7ac      	b.n	801f1a4 <__kernel_rem_pio2+0x3ac>
 801f24a:	ed33 6b02 	vldmdb	r3!, {d6}
 801f24e:	3c01      	subs	r4, #1
 801f250:	ee37 7b06 	vadd.f64	d7, d7, d6
 801f254:	e7f1      	b.n	801f23a <__kernel_rem_pio2+0x442>
 801f256:	ed33 7b02 	vldmdb	r3!, {d7}
 801f25a:	3a01      	subs	r2, #1
 801f25c:	ee36 6b07 	vadd.f64	d6, d6, d7
 801f260:	e7d2      	b.n	801f208 <__kernel_rem_pio2+0x410>
 801f262:	eeb0 7b46 	vmov.f64	d7, d6
 801f266:	e7d4      	b.n	801f212 <__kernel_rem_pio2+0x41a>
 801f268:	ecb2 6b02 	vldmia	r2!, {d6}
 801f26c:	3301      	adds	r3, #1
 801f26e:	ee37 7b06 	vadd.f64	d7, d7, d6
 801f272:	e7d6      	b.n	801f222 <__kernel_rem_pio2+0x42a>
 801f274:	ed91 7b00 	vldr	d7, [r1]
 801f278:	ed91 5b02 	vldr	d5, [r1, #8]
 801f27c:	3801      	subs	r0, #1
 801f27e:	ee37 6b05 	vadd.f64	d6, d7, d5
 801f282:	ee37 7b46 	vsub.f64	d7, d7, d6
 801f286:	ed81 6b00 	vstr	d6, [r1]
 801f28a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801f28e:	ed81 7b02 	vstr	d7, [r1, #8]
 801f292:	e798      	b.n	801f1c6 <__kernel_rem_pio2+0x3ce>
 801f294:	ed92 7b00 	vldr	d7, [r2]
 801f298:	ed92 5b02 	vldr	d5, [r2, #8]
 801f29c:	3901      	subs	r1, #1
 801f29e:	ee37 6b05 	vadd.f64	d6, d7, d5
 801f2a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801f2a6:	ed82 6b00 	vstr	d6, [r2]
 801f2aa:	ee37 7b05 	vadd.f64	d7, d7, d5
 801f2ae:	ed82 7b02 	vstr	d7, [r2, #8]
 801f2b2:	e78d      	b.n	801f1d0 <__kernel_rem_pio2+0x3d8>
 801f2b4:	ed33 6b02 	vldmdb	r3!, {d6}
 801f2b8:	3c01      	subs	r4, #1
 801f2ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 801f2be:	e78f      	b.n	801f1e0 <__kernel_rem_pio2+0x3e8>
 801f2c0:	eeb1 5b45 	vneg.f64	d5, d5
 801f2c4:	eeb1 6b46 	vneg.f64	d6, d6
 801f2c8:	ed87 5b00 	vstr	d5, [r7]
 801f2cc:	eeb1 7b47 	vneg.f64	d7, d7
 801f2d0:	ed87 6b02 	vstr	d6, [r7, #8]
 801f2d4:	e790      	b.n	801f1f8 <__kernel_rem_pio2+0x400>
 801f2d6:	bf00      	nop
 801f2d8:	00000000 	.word	0x00000000
 801f2dc:	41700000 	.word	0x41700000
 801f2e0:	00000000 	.word	0x00000000
 801f2e4:	3e700000 	.word	0x3e700000
	...

0801f2f0 <__kernel_cos>:
 801f2f0:	eeb0 5b40 	vmov.f64	d5, d0
 801f2f4:	ee15 1a90 	vmov	r1, s11
 801f2f8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801f2fc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801f300:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 801f304:	d204      	bcs.n	801f310 <__kernel_cos+0x20>
 801f306:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 801f30a:	ee17 3a90 	vmov	r3, s15
 801f30e:	b343      	cbz	r3, 801f362 <__kernel_cos+0x72>
 801f310:	ee25 6b05 	vmul.f64	d6, d5, d5
 801f314:	ee21 1b45 	vnmul.f64	d1, d1, d5
 801f318:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 801f388 <__kernel_cos+0x98>
 801f31c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801f390 <__kernel_cos+0xa0>
 801f320:	eea6 4b07 	vfma.f64	d4, d6, d7
 801f324:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801f398 <__kernel_cos+0xa8>
 801f328:	eea4 7b06 	vfma.f64	d7, d4, d6
 801f32c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801f3a0 <__kernel_cos+0xb0>
 801f330:	eea7 4b06 	vfma.f64	d4, d7, d6
 801f334:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801f3a8 <__kernel_cos+0xb8>
 801f338:	4b1f      	ldr	r3, [pc, #124]	@ (801f3b8 <__kernel_cos+0xc8>)
 801f33a:	eea4 7b06 	vfma.f64	d7, d4, d6
 801f33e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801f3b0 <__kernel_cos+0xc0>
 801f342:	4299      	cmp	r1, r3
 801f344:	eea7 4b06 	vfma.f64	d4, d7, d6
 801f348:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801f34c:	ee24 4b06 	vmul.f64	d4, d4, d6
 801f350:	ee26 7b07 	vmul.f64	d7, d6, d7
 801f354:	eea6 1b04 	vfma.f64	d1, d6, d4
 801f358:	d804      	bhi.n	801f364 <__kernel_cos+0x74>
 801f35a:	ee37 7b41 	vsub.f64	d7, d7, d1
 801f35e:	ee30 0b47 	vsub.f64	d0, d0, d7
 801f362:	4770      	bx	lr
 801f364:	4b15      	ldr	r3, [pc, #84]	@ (801f3bc <__kernel_cos+0xcc>)
 801f366:	4299      	cmp	r1, r3
 801f368:	d809      	bhi.n	801f37e <__kernel_cos+0x8e>
 801f36a:	2200      	movs	r2, #0
 801f36c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 801f370:	ec43 2b16 	vmov	d6, r2, r3
 801f374:	ee30 0b46 	vsub.f64	d0, d0, d6
 801f378:	ee37 7b46 	vsub.f64	d7, d7, d6
 801f37c:	e7ed      	b.n	801f35a <__kernel_cos+0x6a>
 801f37e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 801f382:	e7f7      	b.n	801f374 <__kernel_cos+0x84>
 801f384:	f3af 8000 	nop.w
 801f388:	be8838d4 	.word	0xbe8838d4
 801f38c:	bda8fae9 	.word	0xbda8fae9
 801f390:	bdb4b1c4 	.word	0xbdb4b1c4
 801f394:	3e21ee9e 	.word	0x3e21ee9e
 801f398:	809c52ad 	.word	0x809c52ad
 801f39c:	be927e4f 	.word	0xbe927e4f
 801f3a0:	19cb1590 	.word	0x19cb1590
 801f3a4:	3efa01a0 	.word	0x3efa01a0
 801f3a8:	16c15177 	.word	0x16c15177
 801f3ac:	bf56c16c 	.word	0xbf56c16c
 801f3b0:	5555554c 	.word	0x5555554c
 801f3b4:	3fa55555 	.word	0x3fa55555
 801f3b8:	3fd33332 	.word	0x3fd33332
 801f3bc:	3fe90000 	.word	0x3fe90000

0801f3c0 <__kernel_sin>:
 801f3c0:	ee10 3a90 	vmov	r3, s1
 801f3c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f3c8:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801f3cc:	d204      	bcs.n	801f3d8 <__kernel_sin+0x18>
 801f3ce:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801f3d2:	ee17 3a90 	vmov	r3, s15
 801f3d6:	b35b      	cbz	r3, 801f430 <__kernel_sin+0x70>
 801f3d8:	ee20 6b00 	vmul.f64	d6, d0, d0
 801f3dc:	ee20 5b06 	vmul.f64	d5, d0, d6
 801f3e0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 801f438 <__kernel_sin+0x78>
 801f3e4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801f440 <__kernel_sin+0x80>
 801f3e8:	eea6 4b07 	vfma.f64	d4, d6, d7
 801f3ec:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801f448 <__kernel_sin+0x88>
 801f3f0:	eea4 7b06 	vfma.f64	d7, d4, d6
 801f3f4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801f450 <__kernel_sin+0x90>
 801f3f8:	eea7 4b06 	vfma.f64	d4, d7, d6
 801f3fc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801f458 <__kernel_sin+0x98>
 801f400:	eea4 7b06 	vfma.f64	d7, d4, d6
 801f404:	b930      	cbnz	r0, 801f414 <__kernel_sin+0x54>
 801f406:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801f460 <__kernel_sin+0xa0>
 801f40a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801f40e:	eea4 0b05 	vfma.f64	d0, d4, d5
 801f412:	4770      	bx	lr
 801f414:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801f418:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 801f41c:	eea1 7b04 	vfma.f64	d7, d1, d4
 801f420:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801f424:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801f468 <__kernel_sin+0xa8>
 801f428:	eea5 1b07 	vfma.f64	d1, d5, d7
 801f42c:	ee30 0b41 	vsub.f64	d0, d0, d1
 801f430:	4770      	bx	lr
 801f432:	bf00      	nop
 801f434:	f3af 8000 	nop.w
 801f438:	5acfd57c 	.word	0x5acfd57c
 801f43c:	3de5d93a 	.word	0x3de5d93a
 801f440:	8a2b9ceb 	.word	0x8a2b9ceb
 801f444:	be5ae5e6 	.word	0xbe5ae5e6
 801f448:	57b1fe7d 	.word	0x57b1fe7d
 801f44c:	3ec71de3 	.word	0x3ec71de3
 801f450:	19c161d5 	.word	0x19c161d5
 801f454:	bf2a01a0 	.word	0xbf2a01a0
 801f458:	1110f8a6 	.word	0x1110f8a6
 801f45c:	3f811111 	.word	0x3f811111
 801f460:	55555549 	.word	0x55555549
 801f464:	bfc55555 	.word	0xbfc55555
 801f468:	55555549 	.word	0x55555549
 801f46c:	3fc55555 	.word	0x3fc55555

0801f470 <fabsf>:
 801f470:	ee10 3a10 	vmov	r3, s0
 801f474:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f478:	ee00 3a10 	vmov	s0, r3
 801f47c:	4770      	bx	lr
	...

0801f480 <scalbn>:
 801f480:	ee10 1a90 	vmov	r1, s1
 801f484:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801f488:	b98b      	cbnz	r3, 801f4ae <scalbn+0x2e>
 801f48a:	ee10 3a10 	vmov	r3, s0
 801f48e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801f492:	4319      	orrs	r1, r3
 801f494:	d00a      	beq.n	801f4ac <scalbn+0x2c>
 801f496:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 801f548 <scalbn+0xc8>
 801f49a:	4b37      	ldr	r3, [pc, #220]	@ (801f578 <scalbn+0xf8>)
 801f49c:	ee20 0b07 	vmul.f64	d0, d0, d7
 801f4a0:	4298      	cmp	r0, r3
 801f4a2:	da0b      	bge.n	801f4bc <scalbn+0x3c>
 801f4a4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801f550 <scalbn+0xd0>
 801f4a8:	ee20 0b07 	vmul.f64	d0, d0, d7
 801f4ac:	4770      	bx	lr
 801f4ae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801f4b2:	4293      	cmp	r3, r2
 801f4b4:	d107      	bne.n	801f4c6 <scalbn+0x46>
 801f4b6:	ee30 0b00 	vadd.f64	d0, d0, d0
 801f4ba:	4770      	bx	lr
 801f4bc:	ee10 1a90 	vmov	r1, s1
 801f4c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801f4c4:	3b36      	subs	r3, #54	@ 0x36
 801f4c6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801f4ca:	4290      	cmp	r0, r2
 801f4cc:	dd0d      	ble.n	801f4ea <scalbn+0x6a>
 801f4ce:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801f558 <scalbn+0xd8>
 801f4d2:	ee10 3a90 	vmov	r3, s1
 801f4d6:	eeb0 6b47 	vmov.f64	d6, d7
 801f4da:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 801f560 <scalbn+0xe0>
 801f4de:	2b00      	cmp	r3, #0
 801f4e0:	fe27 7b05 	vselge.f64	d7, d7, d5
 801f4e4:	ee27 0b06 	vmul.f64	d0, d7, d6
 801f4e8:	4770      	bx	lr
 801f4ea:	4418      	add	r0, r3
 801f4ec:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 801f4f0:	4298      	cmp	r0, r3
 801f4f2:	dcec      	bgt.n	801f4ce <scalbn+0x4e>
 801f4f4:	2800      	cmp	r0, #0
 801f4f6:	dd0a      	ble.n	801f50e <scalbn+0x8e>
 801f4f8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801f4fc:	ec53 2b10 	vmov	r2, r3, d0
 801f500:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801f504:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801f508:	ec43 2b10 	vmov	d0, r2, r3
 801f50c:	4770      	bx	lr
 801f50e:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 801f512:	da09      	bge.n	801f528 <scalbn+0xa8>
 801f514:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 801f550 <scalbn+0xd0>
 801f518:	ee10 3a90 	vmov	r3, s1
 801f51c:	eeb0 6b47 	vmov.f64	d6, d7
 801f520:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 801f568 <scalbn+0xe8>
 801f524:	2b00      	cmp	r3, #0
 801f526:	e7db      	b.n	801f4e0 <scalbn+0x60>
 801f528:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801f52c:	ec53 2b10 	vmov	r2, r3, d0
 801f530:	3036      	adds	r0, #54	@ 0x36
 801f532:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801f536:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801f53a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801f570 <scalbn+0xf0>
 801f53e:	ec43 2b10 	vmov	d0, r2, r3
 801f542:	e7b1      	b.n	801f4a8 <scalbn+0x28>
 801f544:	f3af 8000 	nop.w
 801f548:	00000000 	.word	0x00000000
 801f54c:	43500000 	.word	0x43500000
 801f550:	c2f8f359 	.word	0xc2f8f359
 801f554:	01a56e1f 	.word	0x01a56e1f
 801f558:	8800759c 	.word	0x8800759c
 801f55c:	7e37e43c 	.word	0x7e37e43c
 801f560:	8800759c 	.word	0x8800759c
 801f564:	fe37e43c 	.word	0xfe37e43c
 801f568:	c2f8f359 	.word	0xc2f8f359
 801f56c:	81a56e1f 	.word	0x81a56e1f
 801f570:	00000000 	.word	0x00000000
 801f574:	3c900000 	.word	0x3c900000
 801f578:	ffff3cb0 	.word	0xffff3cb0

0801f57c <__ieee754_atan2f>:
 801f57c:	ee10 2a90 	vmov	r2, s1
 801f580:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 801f584:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801f588:	b510      	push	{r4, lr}
 801f58a:	eef0 7a40 	vmov.f32	s15, s0
 801f58e:	d806      	bhi.n	801f59e <__ieee754_atan2f+0x22>
 801f590:	ee10 0a10 	vmov	r0, s0
 801f594:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 801f598:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801f59c:	d904      	bls.n	801f5a8 <__ieee754_atan2f+0x2c>
 801f59e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801f5a2:	eeb0 0a67 	vmov.f32	s0, s15
 801f5a6:	bd10      	pop	{r4, pc}
 801f5a8:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801f5ac:	d103      	bne.n	801f5b6 <__ieee754_atan2f+0x3a>
 801f5ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f5b2:	f000 b8fd 	b.w	801f7b0 <atanf>
 801f5b6:	1794      	asrs	r4, r2, #30
 801f5b8:	f004 0402 	and.w	r4, r4, #2
 801f5bc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801f5c0:	b93b      	cbnz	r3, 801f5d2 <__ieee754_atan2f+0x56>
 801f5c2:	2c02      	cmp	r4, #2
 801f5c4:	d05c      	beq.n	801f680 <__ieee754_atan2f+0x104>
 801f5c6:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 801f694 <__ieee754_atan2f+0x118>
 801f5ca:	2c03      	cmp	r4, #3
 801f5cc:	fe47 7a00 	vseleq.f32	s15, s14, s0
 801f5d0:	e7e7      	b.n	801f5a2 <__ieee754_atan2f+0x26>
 801f5d2:	b939      	cbnz	r1, 801f5e4 <__ieee754_atan2f+0x68>
 801f5d4:	eddf 7a30 	vldr	s15, [pc, #192]	@ 801f698 <__ieee754_atan2f+0x11c>
 801f5d8:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801f69c <__ieee754_atan2f+0x120>
 801f5dc:	2800      	cmp	r0, #0
 801f5de:	fe67 7a87 	vselge.f32	s15, s15, s14
 801f5e2:	e7de      	b.n	801f5a2 <__ieee754_atan2f+0x26>
 801f5e4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801f5e8:	d110      	bne.n	801f60c <__ieee754_atan2f+0x90>
 801f5ea:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801f5ee:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801f5f2:	d107      	bne.n	801f604 <__ieee754_atan2f+0x88>
 801f5f4:	2c02      	cmp	r4, #2
 801f5f6:	d846      	bhi.n	801f686 <__ieee754_atan2f+0x10a>
 801f5f8:	4b29      	ldr	r3, [pc, #164]	@ (801f6a0 <__ieee754_atan2f+0x124>)
 801f5fa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801f5fe:	edd3 7a00 	vldr	s15, [r3]
 801f602:	e7ce      	b.n	801f5a2 <__ieee754_atan2f+0x26>
 801f604:	2c02      	cmp	r4, #2
 801f606:	d841      	bhi.n	801f68c <__ieee754_atan2f+0x110>
 801f608:	4b26      	ldr	r3, [pc, #152]	@ (801f6a4 <__ieee754_atan2f+0x128>)
 801f60a:	e7f6      	b.n	801f5fa <__ieee754_atan2f+0x7e>
 801f60c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801f610:	d0e0      	beq.n	801f5d4 <__ieee754_atan2f+0x58>
 801f612:	1a5b      	subs	r3, r3, r1
 801f614:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 801f618:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801f61c:	da1a      	bge.n	801f654 <__ieee754_atan2f+0xd8>
 801f61e:	2a00      	cmp	r2, #0
 801f620:	da01      	bge.n	801f626 <__ieee754_atan2f+0xaa>
 801f622:	313c      	adds	r1, #60	@ 0x3c
 801f624:	db19      	blt.n	801f65a <__ieee754_atan2f+0xde>
 801f626:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801f62a:	f7ff ff21 	bl	801f470 <fabsf>
 801f62e:	f000 f8bf 	bl	801f7b0 <atanf>
 801f632:	eef0 7a40 	vmov.f32	s15, s0
 801f636:	2c01      	cmp	r4, #1
 801f638:	d012      	beq.n	801f660 <__ieee754_atan2f+0xe4>
 801f63a:	2c02      	cmp	r4, #2
 801f63c:	d017      	beq.n	801f66e <__ieee754_atan2f+0xf2>
 801f63e:	2c00      	cmp	r4, #0
 801f640:	d0af      	beq.n	801f5a2 <__ieee754_atan2f+0x26>
 801f642:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 801f6a8 <__ieee754_atan2f+0x12c>
 801f646:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f64a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 801f6ac <__ieee754_atan2f+0x130>
 801f64e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f652:	e7a6      	b.n	801f5a2 <__ieee754_atan2f+0x26>
 801f654:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801f698 <__ieee754_atan2f+0x11c>
 801f658:	e7ed      	b.n	801f636 <__ieee754_atan2f+0xba>
 801f65a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801f6b0 <__ieee754_atan2f+0x134>
 801f65e:	e7ea      	b.n	801f636 <__ieee754_atan2f+0xba>
 801f660:	ee17 3a90 	vmov	r3, s15
 801f664:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801f668:	ee07 3a90 	vmov	s15, r3
 801f66c:	e799      	b.n	801f5a2 <__ieee754_atan2f+0x26>
 801f66e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 801f6a8 <__ieee754_atan2f+0x12c>
 801f672:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f676:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 801f6ac <__ieee754_atan2f+0x130>
 801f67a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f67e:	e790      	b.n	801f5a2 <__ieee754_atan2f+0x26>
 801f680:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 801f6ac <__ieee754_atan2f+0x130>
 801f684:	e78d      	b.n	801f5a2 <__ieee754_atan2f+0x26>
 801f686:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 801f6b4 <__ieee754_atan2f+0x138>
 801f68a:	e78a      	b.n	801f5a2 <__ieee754_atan2f+0x26>
 801f68c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801f6b0 <__ieee754_atan2f+0x134>
 801f690:	e787      	b.n	801f5a2 <__ieee754_atan2f+0x26>
 801f692:	bf00      	nop
 801f694:	c0490fdb 	.word	0xc0490fdb
 801f698:	3fc90fdb 	.word	0x3fc90fdb
 801f69c:	bfc90fdb 	.word	0xbfc90fdb
 801f6a0:	080452dc 	.word	0x080452dc
 801f6a4:	080452d0 	.word	0x080452d0
 801f6a8:	33bbbd2e 	.word	0x33bbbd2e
 801f6ac:	40490fdb 	.word	0x40490fdb
 801f6b0:	00000000 	.word	0x00000000
 801f6b4:	3f490fdb 	.word	0x3f490fdb

0801f6b8 <__ieee754_sqrtf>:
 801f6b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801f6bc:	4770      	bx	lr
	...

0801f6c0 <floor>:
 801f6c0:	ee10 3a90 	vmov	r3, s1
 801f6c4:	f3c3 500a 	ubfx	r0, r3, #20, #11
 801f6c8:	ee10 2a10 	vmov	r2, s0
 801f6cc:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 801f6d0:	2913      	cmp	r1, #19
 801f6d2:	b530      	push	{r4, r5, lr}
 801f6d4:	4615      	mov	r5, r2
 801f6d6:	dc33      	bgt.n	801f740 <floor+0x80>
 801f6d8:	2900      	cmp	r1, #0
 801f6da:	da18      	bge.n	801f70e <floor+0x4e>
 801f6dc:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 801f7a0 <floor+0xe0>
 801f6e0:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f6e4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6ec:	dd0a      	ble.n	801f704 <floor+0x44>
 801f6ee:	2b00      	cmp	r3, #0
 801f6f0:	da50      	bge.n	801f794 <floor+0xd4>
 801f6f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f6f6:	4313      	orrs	r3, r2
 801f6f8:	2200      	movs	r2, #0
 801f6fa:	4293      	cmp	r3, r2
 801f6fc:	4b2a      	ldr	r3, [pc, #168]	@ (801f7a8 <floor+0xe8>)
 801f6fe:	bf08      	it	eq
 801f700:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801f704:	4619      	mov	r1, r3
 801f706:	4610      	mov	r0, r2
 801f708:	ec41 0b10 	vmov	d0, r0, r1
 801f70c:	e01f      	b.n	801f74e <floor+0x8e>
 801f70e:	4827      	ldr	r0, [pc, #156]	@ (801f7ac <floor+0xec>)
 801f710:	4108      	asrs	r0, r1
 801f712:	ea03 0400 	and.w	r4, r3, r0
 801f716:	4314      	orrs	r4, r2
 801f718:	d019      	beq.n	801f74e <floor+0x8e>
 801f71a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801f7a0 <floor+0xe0>
 801f71e:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f722:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f72a:	ddeb      	ble.n	801f704 <floor+0x44>
 801f72c:	2b00      	cmp	r3, #0
 801f72e:	bfbe      	ittt	lt
 801f730:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801f734:	410a      	asrlt	r2, r1
 801f736:	189b      	addlt	r3, r3, r2
 801f738:	ea23 0300 	bic.w	r3, r3, r0
 801f73c:	2200      	movs	r2, #0
 801f73e:	e7e1      	b.n	801f704 <floor+0x44>
 801f740:	2933      	cmp	r1, #51	@ 0x33
 801f742:	dd05      	ble.n	801f750 <floor+0x90>
 801f744:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801f748:	d101      	bne.n	801f74e <floor+0x8e>
 801f74a:	ee30 0b00 	vadd.f64	d0, d0, d0
 801f74e:	bd30      	pop	{r4, r5, pc}
 801f750:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801f754:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f758:	40e0      	lsrs	r0, r4
 801f75a:	4210      	tst	r0, r2
 801f75c:	d0f7      	beq.n	801f74e <floor+0x8e>
 801f75e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801f7a0 <floor+0xe0>
 801f762:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f766:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f76a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f76e:	ddc9      	ble.n	801f704 <floor+0x44>
 801f770:	2b00      	cmp	r3, #0
 801f772:	da02      	bge.n	801f77a <floor+0xba>
 801f774:	2914      	cmp	r1, #20
 801f776:	d103      	bne.n	801f780 <floor+0xc0>
 801f778:	3301      	adds	r3, #1
 801f77a:	ea22 0200 	bic.w	r2, r2, r0
 801f77e:	e7c1      	b.n	801f704 <floor+0x44>
 801f780:	2401      	movs	r4, #1
 801f782:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801f786:	fa04 f101 	lsl.w	r1, r4, r1
 801f78a:	440a      	add	r2, r1
 801f78c:	42aa      	cmp	r2, r5
 801f78e:	bf38      	it	cc
 801f790:	191b      	addcc	r3, r3, r4
 801f792:	e7f2      	b.n	801f77a <floor+0xba>
 801f794:	2200      	movs	r2, #0
 801f796:	4613      	mov	r3, r2
 801f798:	e7b4      	b.n	801f704 <floor+0x44>
 801f79a:	bf00      	nop
 801f79c:	f3af 8000 	nop.w
 801f7a0:	8800759c 	.word	0x8800759c
 801f7a4:	7e37e43c 	.word	0x7e37e43c
 801f7a8:	bff00000 	.word	0xbff00000
 801f7ac:	000fffff 	.word	0x000fffff

0801f7b0 <atanf>:
 801f7b0:	b538      	push	{r3, r4, r5, lr}
 801f7b2:	ee10 5a10 	vmov	r5, s0
 801f7b6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801f7ba:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 801f7be:	eef0 7a40 	vmov.f32	s15, s0
 801f7c2:	d30f      	bcc.n	801f7e4 <atanf+0x34>
 801f7c4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 801f7c8:	d904      	bls.n	801f7d4 <atanf+0x24>
 801f7ca:	ee70 7a00 	vadd.f32	s15, s0, s0
 801f7ce:	eeb0 0a67 	vmov.f32	s0, s15
 801f7d2:	bd38      	pop	{r3, r4, r5, pc}
 801f7d4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 801f90c <atanf+0x15c>
 801f7d8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 801f910 <atanf+0x160>
 801f7dc:	2d00      	cmp	r5, #0
 801f7de:	fe77 7a27 	vselgt.f32	s15, s14, s15
 801f7e2:	e7f4      	b.n	801f7ce <atanf+0x1e>
 801f7e4:	4b4b      	ldr	r3, [pc, #300]	@ (801f914 <atanf+0x164>)
 801f7e6:	429c      	cmp	r4, r3
 801f7e8:	d810      	bhi.n	801f80c <atanf+0x5c>
 801f7ea:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 801f7ee:	d20a      	bcs.n	801f806 <atanf+0x56>
 801f7f0:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801f918 <atanf+0x168>
 801f7f4:	ee30 7a07 	vadd.f32	s14, s0, s14
 801f7f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f7fc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801f800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f804:	dce3      	bgt.n	801f7ce <atanf+0x1e>
 801f806:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f80a:	e013      	b.n	801f834 <atanf+0x84>
 801f80c:	f7ff fe30 	bl	801f470 <fabsf>
 801f810:	4b42      	ldr	r3, [pc, #264]	@ (801f91c <atanf+0x16c>)
 801f812:	429c      	cmp	r4, r3
 801f814:	d84f      	bhi.n	801f8b6 <atanf+0x106>
 801f816:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 801f81a:	429c      	cmp	r4, r3
 801f81c:	d841      	bhi.n	801f8a2 <atanf+0xf2>
 801f81e:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801f822:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801f826:	eea0 7a27 	vfma.f32	s14, s0, s15
 801f82a:	2300      	movs	r3, #0
 801f82c:	ee30 0a27 	vadd.f32	s0, s0, s15
 801f830:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f834:	1c5a      	adds	r2, r3, #1
 801f836:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801f83a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 801f920 <atanf+0x170>
 801f83e:	eddf 5a39 	vldr	s11, [pc, #228]	@ 801f924 <atanf+0x174>
 801f842:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 801f928 <atanf+0x178>
 801f846:	ee66 6a06 	vmul.f32	s13, s12, s12
 801f84a:	eee6 5a87 	vfma.f32	s11, s13, s14
 801f84e:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 801f92c <atanf+0x17c>
 801f852:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801f856:	eddf 5a36 	vldr	s11, [pc, #216]	@ 801f930 <atanf+0x180>
 801f85a:	eee7 5a26 	vfma.f32	s11, s14, s13
 801f85e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 801f934 <atanf+0x184>
 801f862:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801f866:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801f938 <atanf+0x188>
 801f86a:	eee7 5a26 	vfma.f32	s11, s14, s13
 801f86e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 801f93c <atanf+0x18c>
 801f872:	eea6 5a87 	vfma.f32	s10, s13, s14
 801f876:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 801f940 <atanf+0x190>
 801f87a:	eea5 7a26 	vfma.f32	s14, s10, s13
 801f87e:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 801f944 <atanf+0x194>
 801f882:	eea7 5a26 	vfma.f32	s10, s14, s13
 801f886:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801f948 <atanf+0x198>
 801f88a:	eea5 7a26 	vfma.f32	s14, s10, s13
 801f88e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801f892:	eea5 7a86 	vfma.f32	s14, s11, s12
 801f896:	ee27 7a87 	vmul.f32	s14, s15, s14
 801f89a:	d121      	bne.n	801f8e0 <atanf+0x130>
 801f89c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f8a0:	e795      	b.n	801f7ce <atanf+0x1e>
 801f8a2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801f8a6:	ee30 7a67 	vsub.f32	s14, s0, s15
 801f8aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 801f8ae:	2301      	movs	r3, #1
 801f8b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f8b4:	e7be      	b.n	801f834 <atanf+0x84>
 801f8b6:	4b25      	ldr	r3, [pc, #148]	@ (801f94c <atanf+0x19c>)
 801f8b8:	429c      	cmp	r4, r3
 801f8ba:	d80b      	bhi.n	801f8d4 <atanf+0x124>
 801f8bc:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801f8c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f8c4:	eea0 7a27 	vfma.f32	s14, s0, s15
 801f8c8:	2302      	movs	r3, #2
 801f8ca:	ee70 6a67 	vsub.f32	s13, s0, s15
 801f8ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f8d2:	e7af      	b.n	801f834 <atanf+0x84>
 801f8d4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801f8d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f8dc:	2303      	movs	r3, #3
 801f8de:	e7a9      	b.n	801f834 <atanf+0x84>
 801f8e0:	4a1b      	ldr	r2, [pc, #108]	@ (801f950 <atanf+0x1a0>)
 801f8e2:	491c      	ldr	r1, [pc, #112]	@ (801f954 <atanf+0x1a4>)
 801f8e4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801f8e8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801f8ec:	edd3 6a00 	vldr	s13, [r3]
 801f8f0:	ee37 7a66 	vsub.f32	s14, s14, s13
 801f8f4:	2d00      	cmp	r5, #0
 801f8f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f8fa:	edd2 7a00 	vldr	s15, [r2]
 801f8fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f902:	bfb8      	it	lt
 801f904:	eef1 7a67 	vneglt.f32	s15, s15
 801f908:	e761      	b.n	801f7ce <atanf+0x1e>
 801f90a:	bf00      	nop
 801f90c:	bfc90fdb 	.word	0xbfc90fdb
 801f910:	3fc90fdb 	.word	0x3fc90fdb
 801f914:	3edfffff 	.word	0x3edfffff
 801f918:	7149f2ca 	.word	0x7149f2ca
 801f91c:	3f97ffff 	.word	0x3f97ffff
 801f920:	3c8569d7 	.word	0x3c8569d7
 801f924:	3d4bda59 	.word	0x3d4bda59
 801f928:	bd6ef16b 	.word	0xbd6ef16b
 801f92c:	3d886b35 	.word	0x3d886b35
 801f930:	3dba2e6e 	.word	0x3dba2e6e
 801f934:	3e124925 	.word	0x3e124925
 801f938:	3eaaaaab 	.word	0x3eaaaaab
 801f93c:	bd15a221 	.word	0xbd15a221
 801f940:	bd9d8795 	.word	0xbd9d8795
 801f944:	bde38e38 	.word	0xbde38e38
 801f948:	be4ccccd 	.word	0xbe4ccccd
 801f94c:	401bffff 	.word	0x401bffff
 801f950:	080452f8 	.word	0x080452f8
 801f954:	080452e8 	.word	0x080452e8

0801f958 <_init>:
 801f958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f95a:	bf00      	nop
 801f95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f95e:	bc08      	pop	{r3}
 801f960:	469e      	mov	lr, r3
 801f962:	4770      	bx	lr

0801f964 <_fini>:
 801f964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f966:	bf00      	nop
 801f968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f96a:	bc08      	pop	{r3}
 801f96c:	469e      	mov	lr, r3
 801f96e:	4770      	bx	lr
